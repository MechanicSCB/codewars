{"50654ddff44f800200000004":[{"id":350041,"user_id":676,"body":"Public Module Example\n  Public Function multiply(ByVal a As Integer, ByVal b As Integer) As Integer\n    Return a * b\n  End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350042,"user_id":null,"body":"Public Module Example\n  Public Function multiply%(a%, b%)\n    Return a * b\n  End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350043,"user_id":null,"body":"Public Module Example\n  Public Function multiply(ByVal a As Integer, ByVal b As Integer) As Integer 'defines as integers'\n    Return a * b 'returns the multiplied a and b'\n  End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350044,"user_id":null,"body":"Public Module Example\n  Public Function multiply(ByVal a As Integer, ByVal b As Integer) As Integer\n    if b = 0 then\n        multiply = 0\n    else if b > 0 then\n        multiply = a + multiply(a, b - 1)\n    else\n        multiply = multiply(a, b + 1) - a\n    end if\n  End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350045,"user_id":null,"body":"Public Module Example\n  Public Function multiply(ByRef a As Integer, ByRef b As Integer) As Integer\n    multiply = a * b\n  End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350046,"user_id":null,"body":"Public Module Example\n  Public Function multiply(Byval  a As Integer, Byval b As Integer) As Integer\n    Return a * b\n  End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350047,"user_id":null,"body":"Public Module Example\n  Function multiply(ByVal a As Integer, ByVal b As Integer) As Integer\n    Return a * b\n  End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350048,"user_id":null,"body":"Public Module Example\n  Public Function multiply(ByVal a As Integer, ByVal b As Integer) As Integer\n    dim result as integer=a*b\n        \n        Return result\n  End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350049,"user_id":null,"body":"Public Module Example\n  Public Function multiply(ByVal a As Integer, ByVal b As Integer) As Integer\n   multiply =  a * b\n  End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350050,"user_id":null,"body":"Public Module Example\n  Public Function multiply(ByVal a As Integer, ByVal b As Integer) As Integer\n    Dim c as integer\n        c = a * b\n    'Return a + b\n        Return c\n  End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"51c8e37cee245da6b40000bd":[{"id":350051,"user_id":53,"body":"Imports System.Linq\nImports System.Text.RegularExpressions\n\nPublic Class solutionSolution\n    Public Shared Function solution(ByVal text As String, ByVal commentSymbols As String()) As String\n        Dim pattern = $\"[ ]*([{String.Concat(commentSymbols)}].*)?$\"\n        Return String.Join(vbLf, text.Split(ChrW(10)).Select(Function(x) Regex.Replace(x, pattern, \"\")))\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350052,"user_id":null,"body":"Public Class solutionSolution\n    Public Shared Function solution(ByVal text As String, ByVal commentSymbols As String()) As String\n        'Your code goes here\n        Dim lines As String() = text.Split(vbLf)\n        lines = lines.Select(Function(s) s.Split(commentSymbols, StringSplitOptions.None).First().TrimEnd()).ToArray()\n        return string.Join(vbLf, lines)\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350053,"user_id":null,"body":"Public Class solutionSolution\n    Public Shared Function solution(ByVal text As String, ByVal commentSymbols As String()) As String\n        Dim parts = text.Split(vbLf)\n        For Each symbol in commentSymbols\n            For i = 0 To parts.Length - 1\n                Dim temp = parts(i).Split(symbol)(0)\n                While True\n                    Dim l = temp.Length\n                    If l = 0 Then Exit While\n                    If temp.Substring(l - 1) <> \" \" Then Exit While\n                    temp = temp.Substring(0, l - 1)\n                End While\n                parts(i) = temp\n            Next\n        Next\n        Return String.Join(vbLf, parts)\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350054,"user_id":null,"body":"Imports System\n\nPublic Class solutionSolution\n    \n        Public Shared Function solution(ByVal text As String, ByVal commentSymbols As String()) As String\n\n            Dim arr() As String = text.Split(vbLf)\n            Dim dic As New Dictionary(Of Char, Integer)\n            Dim str As String = \"\"\n            Dim strEnd As Integer = 0\n\n            For i = 0 To commentSymbols.Length - 1\n                dic.Add(commentSymbols(i), i)\n            Next i\n\n            For i = 0 To arr.Length - 1\n                str = arr(i)\n\n                If str.Length = 0 Then\n                    arr(i) = \"\"\n                    Continue For\n                End If\n\n                For k = 0 To str.Length - 1\n                    If dic.ContainsKey(str(k)) Then\n                        strEnd = k - 1\n                        Exit For\n                    Else\n                        strEnd = k\n                    End If\n                Next k\n\n                While (strEnd >= 0)\n                    \n                    If str(strEnd) = \" \" Then\n                        If strEnd = 0 Then\n                            arr(i) = \"\"\n                            Continue For\n                        End If\n                        strEnd -= 1\n                    Else\n                        Exit While\n                    End If\n        \n                End While\n\n                str = str.Substring(0, strEnd + 1)\n                arr(i) = str\n\n            Next i\n\n            Return (String.Join(vbLf, arr))\n        End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350055,"user_id":null,"body":"Imports System.Text.RegularExpressions\n\nPublic Class solutionSolution\n    Public Shared Function solution(ByVal text As String, ByVal commentSymbols As String()) As String\n        Return Regex.Replace(text, \"([ \\t\\f\\r]+(?=\n|$)\" & If(commentSymbols.Length > 0, $\"|[ \\t\\f\\r]*[{Regex.Escape(String.Join(\"\", commentSymbols))}].*\", \"\") & \")\", \"\")\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350056,"user_id":null,"body":"Imports System.Text.RegularExpressions\n\nPublic Class solutionSolution\n    Public Shared Function solution(ByVal text As String, ByVal commentSymbols As String()) As String\n        Return Regex.Replace(text, \"([ \\t\\f\\r]+(?=\n|$)\" & If(commentSymbols.Length > 0, $\"|[ \\t\\f\\r]*[{string.Join(\"\", commentSymbols)}].*\", \"\") & \")\", \"\")\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350057,"user_id":null,"body":"Public Class solutionSolution\n    Public Shared Function solution(ByVal text As String, ByVal commentSymbols As String()) As String\n        'Your code goes here\n        Dim ssplit As String = $\"{text.Replace(vbLf, $\"\n\")}\n\"\n        Dim ls As New List(Of String)\n        For i As Integer = 0 To ssplit.Length - 1\n            For j As Integer = 0 To commentSymbols.Length - 1\n                If ssplit.Contains(commentSymbols(j)(0)) Then\n                    If ssplit(i).Equals(commentSymbols(j)(0)) Then\n                        ssplit = ssplit.Remove(i, ssplit.IndexOf(\"\n\", i) - i)\n                    End If\n                End If\n            Next\n        Next\n        ssplit = ssplit.Replace(\" \n\", \"\n\").Trim()\n        Return ssplit.Substring(0, ssplit.Length - 2).Replace(\"\n\", vbLf)\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350058,"user_id":null,"body":"Public Class solutionSolution\n    Public Shared Function solution(ByVal text As String, ByVal commentSymbols As String()) As String\n    Dim lines = text.Split(vbLf)\n\n    For Each symbol In commentSymbols\n\n        For i = 0 To lines.Length - 1\n            Dim pos = lines(i).IndexOf(symbol)\n            If pos > -1 Then lines(i) = lines(i).Remove(pos)\n            lines(i) = lines(i).TrimEnd()\n        Next\n    Next\n\n    Return String.Join(vbLf, lines)\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350059,"user_id":null,"body":"Public Class solutionSolution\n    Public Shared Function solution(text As String, commentSymbols As String()) As String\n        Dim res = New System.Text.StringBuilder()\n        Dim ws = New System.Text.StringBuilder()\n        Dim inComment = False\n        For Each c In text\n            If Not inComment Then\n                If commentSymbols.Contains(c) Then\n                    ' comment start\n                    inComment = True\n                    ws.Clear()\n                ElseIf c = vbLf Then\n                    ' new line\n                    res.AppendLine()\n                    ws.Clear()\n                ElseIf String.IsNullOrWhiteSpace(c) Then\n                    ' whitespace\n                    ws.Append(c)\n                Else\n                    res.Append(ws.ToString())\n                    res.Append(c)\n                    ws.Clear()\n                End If\n            Else\n                If c = vbLf Then\n                    ' new line\n                    res.AppendLine()\n                    inComment = False\n                End If\n            End If\n        Next\n        Return res.ToString()\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350060,"user_id":null,"body":"Public Class solutionSolution\n    Public Shared Function solution(ByVal text As String, ByVal commentSymbols As String()) As String\n        \n        dim auxString as string  =\"\"\n        dim auxString1 as string  =\"\"\n        dim i, j as integer \n        dim encontrado as boolean\n        dim car as char\n        \n        auxString = text\n        for i = 0 to commentSymbols.getupperbound(0) \n            encontrado = false\n            j = 0\n        \n            while j <= auxstring.length -1\n                car  = auxString.substring(j,1)\n                if car = commentSymbols(i) then\n                   encontrado = true \n                elseif car =  System.Environment.NewLine then \n                    encontrado = false\n                    auxstring1 = auxstring1 + car \n                else\n                  if not encontrado\n                     auxstring1 = auxstring1 + car\n                  end if   \n                  \n                end if\n                j = j + 1 \n            end while\n            auxstring = auxstring1\n            auxstring1 = \"\"\n        next\n    \n    auxstring =  auxString.replace(\" \" + System.Environment.NewLine, \"\" + System.Environment.NewLine )\n        \n    i = auxstring.length -1\n    encontrado = false\n        while i >= 0 and not encontrado\n            if auxString.substring(i ,1) = \" \" then \n                auxstring = auxstring.substring(0, i)\n                i = auxstring.length- 1\n            else\n                encontrado = true\n            end if\n        end while\n    \n    \n        \n    return auxstring\n    End Function\nEnd Class\n\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5254ca2719453dcc0b00027d":[{"id":350061,"user_id":null,"body":"Imports System.Collections.Generic\nClass Permutations\n    Public Shared Function SinglePermutations(ByVal s As String) As List(Of String)\n        Dim answer = New List(Of String)\n        Dim l = s.Length\n        If l = 1 Then\n            answer.Add(s)\n            Return answer\n        End If\n        Dim head = s.Substring(0, 1)\n        Dim perms = SinglePermutations(s.Substring(1))\n        Dim answer_set = New HashSet(Of String)\n        For i = 0 To l - 1\n            For Each perm In perms\n                answer_set.Add(perm.Substring(0, i) & head & perm.Substring(i))\n            Next\n        Next\n        For Each perm In answer_set\n            answer.Add(perm)\n        Next\n        Return answer\n    End Function\nEnd Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350062,"user_id":null,"body":"    Class Permutations\n    \n        Public Shared Function SinglePermutations(ByVal s As String) As List(Of String)\n\n            Dim lst As New List(Of String)()\n        \n            Dim arrTemp As Char() = s.ToCharArray()\n            Array.Sort(arrTemp)\n            s = arrTemp.ToArray()\n            \n            lst.Add(s)\n\n            Dim n As Integer = s.Length\n            Dim a As Char() = s.ToArray()\n\n            While NextSet(a, n)\n                lst.Add(New String(a))\n            End While\n\n            Return lst\n\n        End Function\n\n\n        Private Shared Function NextSet(ByRef a As Char(), n As Integer) As Boolean\n        \n            Dim j As Integer = n - 2\n\n            While j <> -1 AndAlso a(j) >= a(j + 1)\n                j -= 1\n            End While\n\n            If j = -1 Then Return False\n\n            Dim k As Integer = n - 1\n            While a(j) >= a(k)\n                k -= 1\n            End While\n\n            Swap(a, j, k)\n\n            Dim l As Integer = j + 1\n            Dim r As Integer = n - 1\n            While l < r\n                Swap(a, l, r)\n                l += 1\n                r -= 1\n            End While\n\n            Return True\n\n        End Function\n\n\n        Private Shared Sub Swap(ByRef a As Char(), i As Integer, j As Integer)\n            Dim temp As Char = a(i)\n            a(i) = a(j)\n            a(j) = temp\n        End Sub\n\n    End Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350063,"user_id":null,"body":"Class Permutations\n  Public Shared Function SinglePermutations(ByVal s As String) As List(Of String)\n        Dim Possibilities As String() = AllPossibilties(s).Split(\" \")\n        If Possibilities.Length = 0 Then\n            Return New List(Of String)\n        End If\n        Return Possibilities.SkipLast(1).Distinct.ToList\n    End Function\n    Public Shared Function AllPossibilties(S As String, Optional Ans As String = \"\") As String\n        If S.Length = 0 Then\n            Return Ans + \" \"\n        End If\n        Dim Res As String = \"\"\n        For I As Integer = 0 To S.Length - 1\n            Dim C As Char = S.Chars(I)\n\n            Dim Tmp As String = S.Substring(0, I) + S.Substring(I + 1)\n\n            Res += AllPossibilties(Tmp, Ans + C)\n\n        Next\n        Return Res\n    End Function\n\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350064,"user_id":null,"body":"Class Permutations\n    Public Shared Function SinglePermutations(ByVal s As String) As List(Of String)\n        ' Your code goes here\n        Console.WriteLine(\"Input: \" & s)\n        Dim output As New List(Of String)\n        Swap(s, 0, output)\n        For i = 0 To output.Count-1\n            Console.WriteLine(\"Output: \" & output(i))\n        Next\n    \n        Return output\n    End Function\n    \n    Public Shared Function Swap(ByVal s As String, ByVal pos1 As Long, ByVal result As List(Of String)) As List(Of String)\n        'Console.WriteLine(\"Swap input: \" & s & \" pos1: \" & pos1)\n        If pos1 = s.Length-1 And Not result.Contains(s) Then \n            result.Add(s)\n        Else\n            For i As Long = pos1 To s.Length-1\n                Dim swapped As String = \"\"\n                For j As Long = 0 To s.Length-1\n                    If j = i Then\n                        swapped = swapped & s(pos1)\n                    Else If j = pos1 Then\n                        swapped = swapped & s(i)\n                    Else \n                        swapped = swapped & s(j)\n                    End If\n                Next\n                Swap(swapped, pos1+1, result)\n            Next\n        End If\n        Return result\n    End Function\n\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350065,"user_id":null,"body":"Class Permutations\n    Public Shared Function SinglePermutations(ByVal s As String) As List(Of String)\n        Dim charactersToTest As New List(Of String)\n        Dim returnedStrings As New List(Of String)\n\n        ' find the unique characters in the string - characters with duplicates will not produce unique results\n\n        If s.Length > 1 Then\n\n            For Each character In s\n\n                If Not charactersToTest.Contains(character) Then\n\n                    charactersToTest.Add(character)\n\n                End If\n\n            Next\n\n            For Each character In charactersToTest\n\n                Dim stringCopy = s.Substring(0, s.Length)\n\n                Dim stringToTest = stringCopy.Remove(stringCopy.IndexOf(character), 1)\n\n                Dim permutations = SinglePermutations(stringToTest)\n\n\n                For Each permutation In permutations\n                    returnedStrings.Add(character & permutation)\n                Next\n\n            Next\n\n            Return returnedStrings\n\n        End If\n\n        ' there is only a single character in the string\n\n        returnedStrings.Add(s)\n\n        Return returnedStrings\n    End Function\n\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350066,"user_id":null,"body":"Class Permutations\n    Public Shared Function SinglePermutations(ByVal s As String) As List(Of String)\n        Dim result = New List(Of String)()\n        Dim source = s.Select(Function(n) n).ToList\n        Solve(result, source.Count, source, \"\")\n        Return result.Distinct.ToList\n    End Function\n\n    Public Shared Sub Solve(ByVal result As List(Of String), ByVal sourceCount As Integer, ByVal source As List(Of Char), ByVal s As String)\n        If s.Length = sourceCount Then\n            result.Add(s)\n            Return\n        End If\n\n        source.ForEach(Sub(n)\n                           Dim newSource = source.ToList\n                           newSource.Remove(n)\n                           Solve(result, sourceCount, newSource, s + n)\n                       End Sub)\n    End Sub\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350067,"user_id":null,"body":"Class Permutations\n    Shared permLst As New List(Of String)\n    \n    Private Shared Function Swap(arr As String, x As Integer, y As Integer) As String\n        Dim temp As Char\n        Dim chrArr As Char() = arr.ToCharArray()\n        temp = chrArr(x)\n        chrArr(x) = chrArr(y)\n        chrArr(y) = temp\n        Return New String(chrArr)\n    End Function\n    \n    Private Shared Function Permute(arr As String, l As Integer, r As Integer) As List(Of String)\n        If l.Equals(r) Then\n            permLst.Add(arr)\n        Else\n            For i As Integer = l To r\n                arr = Swap(arr, l, i)\n                Permute(arr, l + 1, r)\n                arr = Swap(arr, l, i)\n            Next\n        End If\n        Return permLst.Distinct().ToList()\n    End Function\n    \n    Public Shared Function SinglePermutations(ByVal s As String) As List(Of String)\n        ' Your code goes here\n        permLst.Clear()\n        Return Permute(s, 0, s.Length - 1)\n    End Function\n\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350068,"user_id":53,"body":"Imports System\nImports System.Collections.Generic\nImports System.Linq\n\nClass Permutations\n    Public Shared Function SinglePermutations(ByVal s As String) As List(Of String)\n        Dim r = New HashSet(Of String)()\n        Dim b = s.ToCharArray()\n        Permute(b, r)\n        Return r.ToList()\n    End Function\n\n    Private Shared Sub Swap(ByRef a As Char, ByRef b As Char)\n        If a = b Then Return\n        Dim temp = a\n        a = b\n        b = temp\n    End Sub\n\n    Private Shared Sub Permute(ByVal arr As Char(), ByVal r As HashSet(Of String))\n        Dim x = arr.Length - 1\n        Permute(arr, 0, x, r)\n    End Sub\n\n    Private Shared Sub Permute(ByVal arr As Char(), ByVal k As Integer, ByVal m As Integer, ByVal r As HashSet(Of String))\n        If k = m Then\n            r.Add(New String(arr))\n        Else\n\n            For i As Integer = k To m\n                Swap(arr(k), arr(i))\n                Permute(arr, k + 1, m, r)\n                Swap(arr(k), arr(i))\n            Next\n        End If\n    End Sub\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"52597aa56021e91c93000cb0":[{"id":350069,"user_id":null,"body":"Public Class Kata\n    Public Shared Function move_zeroes(ByVal arr As Integer()) As Integer()\n        Dim douglas() As Integer = arr\n        Dim numZeros As Integer = 0\n        For index = 0 To (arr.Length - 1)\n             Do\n                 If douglas(index) = 0 Then\n                     douglas = MoveForZero(douglas, index)\n                     numZeros += 1\n                 End If\n             Loop Until douglas(index) <> 0 Or index >= (arr.Length - numZeros - 1)\n             If index >= arr.Length - numZeros - 1 Then Return douglas\n        Next index\n        Return douglas\n    End Function\n    \n    Public Shared Function MoveForZero(ByVal arr() As Integer, ByVal pos As Integer) As Integer()\n        Dim newArr() As Integer = arr\n        For index = (pos + 1) To (arr.Length - 1)\n            newArr(index - 1) = arr(index)\n        Next index\n        newArr(arr.Length - 1) = 0\n        Return newArr\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350070,"user_id":53,"body":"Public Class Kata\n    Public Shared Function move_zeroes(ByVal xs As Integer()) As Integer()\n        Dim ans = New Integer(xs.Length - 1) {}\n        Dim i = 0\n\n        For Each x In xs\n            If x = 0 Then Continue For\n            ans(Math.Min(System.Threading.Interlocked.Increment(i), i - 1)) = x\n        Next\n\n        Return ans\n    End Function\nEnd Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350071,"user_id":null,"body":"Public Class Kata\n    Public Shared Function move_zeroes(ByVal arr As Integer()) As Integer()\n        Dim lst As List(Of Integer) = arr.ToList()\n        Dim result = lst.Where(Function(e) e <> 0).ToList()\n        result.AddRange(lst.Where(Function(e) e = 0))\n        Return result.ToArray()\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350072,"user_id":null,"body":"Public Class Kata\n    Public Shared Function move_zeroes(ByVal arr As Integer()) As Integer()\n        Dim answer = New List(Of Integer)\n        For Each n In arr\n            If n <> 0 Then answer.Add(n)\n        Next\n        For Each n In arr\n            If n = 0 Then answer.Add(0)\n        Next\n        Return answer.ToArray\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350073,"user_id":168,"body":"Public Class Kata\n    Public Shared Function move_zeroes(ByVal arr As Integer()) As Integer()\n        return arr.OrderBy(Function(x) x = 0).ToArray()\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350074,"user_id":null,"body":"Public Class Kata\n    Public Shared Function move_zeroes(ByVal arr As Integer()) As Integer()\n        dim numZero,x as new integer\n        x = 0\n        dim newArr(arr.length-1) as Integer\n        for i = 0 to arr.length - 1\n            try\n                if arr(i) = 0\n                    numZero += 1\n                else\n                    newArr(x) = arr(i)\n                    x += 1\n                end if\n            catch\n                newArr(x) = arr(i)\n                x += 1 \n            end try\n        next\n        return newArr\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350075,"user_id":null,"body":"Public Class Kata\n    Public Shared Function move_zeroes(ByVal arr As Integer()) As Integer()\n        Dim zeros, counter As Integer\n        Dim newArr(arr.Length-1) As Integer\n        For index = 0 To arr.Length - 1\n          If (arr(index) = 0) Then\n             zeros += 1\n          Else\n             newArr(counter) = arr(index)\n             counter += 1\n          End If\n        Next\n       For index = counter To (zeros+counter)-1\n          newArr(index) = 0\n       Next\n   Return newArr\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350076,"user_id":null,"body":"Public Class Kata\n    Public Shared Function move_zeroes(ByVal arr As Integer()) As Integer()\n        Return arr.Where(Function(n) n <> 0).Concat(arr.Where(Function(n) n = 0)).ToArray\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350077,"user_id":null,"body":"Public Class Kata\n    Public Shared Function move_zeroes(ByVal arr As Integer()) As Integer()\n        ' Insert code here\n        Dim ls As New List(Of Integer)\n        ls = arr.ToList()\n        Dim count As Integer = 0\n        For i As Integer = 0 To arr.Length - 1\n            If ls(i).Equals(0) Then\n                count += 1\n            End If\n        Next\n        ls.RemoveAll(Function(f As Integer) f.Equals(0))\n        For i As Integer = 0 To count - 1\n            ls.Add(0)\n        Next\n        Return ls.ToArray()\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350078,"user_id":null,"body":"Public Class Kata\n    Public Shared Function move_zeroes(ByVal aray As Integer()) As Integer()\n        ' Insert code here        \n        Dim array(aray.Length - 1) As Integer\n        Dim contarCero As Integer = 0\n        Dim concecutivo As Integer = 0\n        For i = 0 To aray.Length - 1 Step 1\n            If aray(i) <> 0 Then\n                array(concecutivo) = aray(i)\n                concecutivo = concecutivo + 1\n            End If\n            If aray(i) = 0 Then\n                contarCero = contarCero + 1\n            End If\n        Next\n        For j = (array.Length - 1) - contarCero To aray.Length - 1 Step 1\n            If j < array.Length - 1 Then\n                array(j + 1) = 0\n            End If\n        Next\n        return array       \n        ' Fin code\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"54acc128329e634e9a000362":[{"id":350079,"user_id":null,"body":"Imports System.Collections.Generic\nPublic Class TCP\n    Public Shared Function TraverseStates(ByVal r As String()) As String\n        Dim table As New Dictionary(Of String, Dictionary(Of String, String))\n        table(\"CLOSED\") = New Dictionary(Of String, String)\n        table(\"LISTEN\") = New Dictionary(Of String, String)\n        table(\"SYN_RCVD\") = New Dictionary(Of String, String)\n        table(\"SYN_SENT\") = New Dictionary(Of String, String)\n        table(\"ESTABLISHED\") = New Dictionary(Of String, String)\n        table(\"FIN_WAIT_1\") = New Dictionary(Of String, String)\n        table(\"CLOSING\") = New Dictionary(Of String, String)\n        table(\"FIN_WAIT_2\") = New Dictionary(Of String, String)\n        table(\"TIME_WAIT\") = New Dictionary(Of String, String)\n        table(\"CLOSE_WAIT\") = New Dictionary(Of String, String)\n        table(\"LAST_ACK\") = New Dictionary(Of String, String)\n        table(\"CLOSED\")(\"APP_PASSIVE_OPEN\") = \"LISTEN\"\n        table(\"CLOSED\")(\"APP_ACTIVE_OPEN\") = \"SYN_SENT\"\n        table(\"LISTEN\")(\"RCV_SYN\") = \"SYN_RCVD\"\n        table(\"LISTEN\")(\"APP_SEND\") = \"SYN_SENT\"\n        table(\"LISTEN\")(\"APP_CLOSE\") = \"CLOSED\"\n        table(\"SYN_RCVD\")(\"APP_CLOSE\") = \"FIN_WAIT_1\"\n        table(\"SYN_RCVD\")(\"RCV_ACK\") = \"ESTABLISHED\"\n        table(\"SYN_SENT\")(\"RCV_SYN\") = \"SYN_RCVD\"\n        table(\"SYN_SENT\")(\"RCV_SYN_ACK\") = \"ESTABLISHED\"\n        table(\"SYN_SENT\")(\"APP_CLOSE\") = \"CLOSED\"\n        table(\"ESTABLISHED\")(\"APP_CLOSE\") = \"FIN_WAIT_1\"\n        table(\"ESTABLISHED\")(\"RCV_FIN\") = \"CLOSE_WAIT\"\n        table(\"FIN_WAIT_1\")(\"RCV_FIN\") = \"CLOSING\"\n        table(\"FIN_WAIT_1\")(\"RCV_FIN_ACK\") = \"TIME_WAIT\"\n        table(\"FIN_WAIT_1\")(\"RCV_ACK\") = \"FIN_WAIT_2\"\n        table(\"CLOSING\")(\"RCV_ACK\") = \"TIME_WAIT\"\n        table(\"FIN_WAIT_2\")(\"RCV_FIN\") = \"TIME_WAIT\"\n        table(\"TIME_WAIT\")(\"APP_TIMEOUT\") = \"CLOSED\"\n        table(\"CLOSE_WAIT\")(\"APP_CLOSE\") = \"LAST_ACK\"\n        table(\"LAST_ACK\")(\"RCV_ACK\") = \"CLOSED\"\n\n        Dim state = \"CLOSED\"\n        For Each _event In r\n            If table(state).ContainsKey(_event) Then\n                state = table(state)(_event)\n            Else\n                Return \"ERROR\"\n            End If\n        Next\n        Return state\n    End Function\nEnd Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350080,"user_id":null,"body":"Public Class TCP\n    Public Shared Function TraverseStates(ByVal r As String()) As String\n        Dim TransitionTable As New Dictionary(Of String, Dictionary(Of String, String))\n        TransitionTable.Add(\"CLOSED\", New Dictionary(Of String, String))\n        TransitionTable.Add(\"LISTEN\", New Dictionary(Of String, String))\n        TransitionTable.Add(\"SYN_RCVD\", New Dictionary(Of String, String))\n        TransitionTable.Add(\"SYN_SENT\", New Dictionary(Of String, String))\n        TransitionTable.Add(\"ESTABLISHED\", New Dictionary(Of String, String))\n        TransitionTable.Add(\"FIN_WAIT_1\", New Dictionary(Of String, String))\n        TransitionTable.Add(\"CLOSING\", New Dictionary(Of String, String))\n        TransitionTable.Add(\"FIN_WAIT_2\", New Dictionary(Of String, String))\n        TransitionTable.Add(\"TIME_WAIT\", New Dictionary(Of String, String))\n        TransitionTable.Add(\"CLOSE_WAIT\", New Dictionary(Of String, String))\n        TransitionTable.Add(\"LAST_ACK\", New Dictionary(Of String, String))\n\n        TransitionTable(\"CLOSED\").Add(\"APP_PASSIVE_OPEN\", \"LISTEN\")\n        TransitionTable(\"CLOSED\").Add(\"APP_ACTIVE_OPEN\", \"SYN_SENT\")\n        TransitionTable(\"LISTEN\").Add(\"RCV_SYN\", \"SYN_RCVD\")\n        TransitionTable(\"LISTEN\").Add(\"APP_SEND\", \"SYN_SENT\")\n        TransitionTable(\"LISTEN\").Add(\"APP_CLOSE\", \"CLOSED\")\n        TransitionTable(\"SYN_RCVD\").Add(\"APP_CLOSE\", \"FIN_WAIT_1\")\n        TransitionTable(\"SYN_RCVD\").Add(\"RCV_ACK\", \"ESTABLISHED\")\n        TransitionTable(\"SYN_SENT\").Add(\"RCV_SYN\", \"SYN_RCVD\")\n        TransitionTable(\"SYN_SENT\").Add(\"RCV_SYN_ACK\", \"ESTABLISHED\")\n        TransitionTable(\"SYN_SENT\").Add(\"APP_CLOSE\", \"CLOSED\")\n        TransitionTable(\"ESTABLISHED\").Add(\"APP_CLOSE\", \"FIN_WAIT_1\")\n        TransitionTable(\"ESTABLISHED\").Add(\"RCV_FIN\", \"CLOSE_WAIT\")\n        TransitionTable(\"FIN_WAIT_1\").Add(\"RCV_FIN\", \"CLOSING\")\n        TransitionTable(\"FIN_WAIT_1\").Add(\"RCV_FIN_ACK\", \"TIME_WAIT\")\n        TransitionTable(\"FIN_WAIT_1\").Add(\"RCV_ACK\", \"FIN_WAIT_2\")\n        TransitionTable(\"CLOSING\").Add(\"RCV_ACK\", \"TIME_WAIT\")\n        TransitionTable(\"FIN_WAIT_2\").Add(\"RCV_FIN\", \"TIME_WAIT\")\n        TransitionTable(\"TIME_WAIT\").Add(\"APP_TIMEOUT\", \"CLOSED\")\n        TransitionTable(\"CLOSE_WAIT\").Add(\"APP_CLOSE\", \"LAST_ACK\")\n        TransitionTable(\"LAST_ACK\").Add(\"RCV_ACK\", \"CLOSED\")\n\n        Dim currentState = \"CLOSED\"\n\n        For Each transition In r\n\n            If TransitionTable(currentState).ContainsKey(transition) Then\n                currentState = TransitionTable(currentState)(transition)\n            Else\n                Return \"ERROR\"\n            End If\n\n        Next\n\n        Return currentState\n    End Function\nEnd Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350081,"user_id":76,"body":"Public Class TCP\n    Public Shared Function TraverseStates(ByVal r As String()) As String\n        Dim states As New Dictionary(Of String, String) From {\n            { \"CLOSED => APP_PASSIVE_OPEN\", \"LISTEN\" },\n            { \"CLOSED => APP_ACTIVE_OPEN\", \"SYN_SENT\" },\n            { \"LISTEN => RCV_SYN\", \"SYN_RCVD\" },\n            { \"LISTEN => APP_SEND\", \"SYN_SENT\" },\n            { \"LISTEN => APP_CLOSE\", \"CLOSED\" },\n            { \"SYN_RCVD => APP_CLOSE\", \"FIN_WAIT_1\" },\n            { \"SYN_RCVD => RCV_ACK\", \"ESTABLISHED\" },\n            { \"SYN_SENT => RCV_SYN\", \"SYN_RCVD\" },\n            { \"SYN_SENT => RCV_SYN_ACK\", \"ESTABLISHED\" },\n            { \"SYN_SENT => APP_CLOSE\", \"CLOSED\" },\n            { \"ESTABLISHED => APP_CLOSE\", \"FIN_WAIT_1\" },\n            { \"ESTABLISHED => RCV_FIN\", \"CLOSE_WAIT\" },\n            { \"FIN_WAIT_1 => RCV_FIN\", \"CLOSING\" },\n            { \"FIN_WAIT_1 => RCV_FIN_ACK\", \"TIME_WAIT\" },\n            { \"FIN_WAIT_1 => RCV_ACK\", \"FIN_WAIT_2\" },\n            { \"CLOSING => RCV_ACK\", \"TIME_WAIT\" },\n            { \"FIN_WAIT_2 => RCV_FIN\", \"TIME_WAIT\" },\n            { \"TIME_WAIT => APP_TIMEOUT\", \"CLOSED\" },\n            { \"CLOSE_WAIT => APP_CLOSE\", \"LAST_ACK\" },\n            { \"LAST_ACK => RCV_ACK\", \"CLOSED\" }\n        }\n        \n        Dim state As String = \"CLOSED\"\n        \n        For Each e As String In r\n            Dim nextState As String = state + \" => \" + e\n            If Not states.ContainsKey(nextState) Then\n                Return \"ERROR\"\n            End If\n            state = states(nextState)\n        Next\n    \n        Return state\n    End Function\nEnd Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350082,"user_id":53,"body":"Imports System.Collections.Generic\n\nPublic Class TCP\n    Public Shared Function TraverseStates(ByVal r As String()) As String\n        Dim tome = New Dictionary(Of String, Dictionary(Of String, String))() From {\n            {\"CLOSED\", New Dictionary(Of String, String)() From {\n                {\"APP_PASSIVE_OPEN\", \"LISTEN\"},\n                {\"APP_ACTIVE_OPEN\", \"SYN_SENT\"}\n            }},\n            {\"LISTEN\", New Dictionary(Of String, String)() From {\n                {\"RCV_SYN\", \"SYN_RCVD\"},\n                {\"APP_SEND\", \"SYN_SENT\"},\n                {\"APP_CLOSE\", \"CLOSED\"}\n            }},\n            {\"SYN_SENT\", New Dictionary(Of String, String)() From {\n                {\"RCV_SYN\", \"SYN_RCVD\"},\n                {\"RCV_SYN_ACK\", \"ESTABLISHED\"},\n                {\"APP_CLOSE\", \"CLOSED\"}\n            }},\n            {\"SYN_RCVD\", New Dictionary(Of String, String)() From {\n                {\"APP_CLOSE\", \"FIN_WAIT_1\"},\n                {\"RCV_ACK\", \"ESTABLISHED\"}\n            }},\n            {\"ESTABLISHED\", New Dictionary(Of String, String)() From {\n                {\"APP_CLOSE\", \"FIN_WAIT_1\"},\n                {\"RCV_FIN\", \"CLOSE_WAIT\"}\n            }},\n            {\"CLOSE_WAIT\", New Dictionary(Of String, String)() From {\n                {\"APP_CLOSE\", \"LAST_ACK\"}\n            }},\n            {\"LAST_ACK\", New Dictionary(Of String, String)() From {\n                {\"RCV_ACK\", \"CLOSED\"}\n            }},\n            {\"FIN_WAIT_1\", New Dictionary(Of String, String)() From {\n                {\"RCV_FIN\", \"CLOSING\"},\n                {\"RCV_FIN_ACK\", \"TIME_WAIT\"},\n                {\"RCV_ACK\", \"FIN_WAIT_2\"}\n            }},\n            {\"FIN_WAIT_2\", New Dictionary(Of String, String)() From {\n                {\"RCV_FIN\", \"TIME_WAIT\"}\n            }},\n            {\"CLOSING\", New Dictionary(Of String, String)() From {\n                {\"RCV_ACK\", \"TIME_WAIT\"}\n            }},\n            {\"TIME_WAIT\", New Dictionary(Of String, String)() From {\n                {\"APP_TIMEOUT\", \"CLOSED\"}\n            }}\n        }\n        Dim state = \"CLOSED\"\n\n        For Each s In r\n\n            If tome(state).ContainsKey(s) Then\n                state = tome(state)(s)\n            Else\n                Return \"ERROR\"\n            End If\n        Next\n\n        Return state\n    End Function\nEnd Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"54d496788776e49e6b00052f":[{"id":350083,"user_id":null,"body":"Imports System.Collections.Generic\nPublic Module Sums\n    Public Function get_prime_factors(ByVal n As Long)\n        Dim factors As New List(Of Long)\n        Dim f = 2\n        Dim ub = Math.Abs(n)\n        n = ub\n        While f * f <= ub\n            While n Mod f = 0\n                If Not factors.Contains(f) Then factors.Add(f)\n                n \\= f\n            End While\n            f = If(f > 2, f + 2, 3)\n        End While\n        If n > 1 Then factors.Add(n)\n        Return factors\n    End Function\n    Public Function sum_of_divided(ByVal lst As Integer()) As String\n        Dim factors As New Dictionary(Of Long, Long)\n        For Each number In lst\n            For Each factor In get_prime_factors(number)\n                If Not factors.ContainsKey(factor) Then factors(factor) = 0\n                factors(factor) += number\n            Next\n        Next\n        Dim sorted_factors As New List(Of Long)(factors.Keys)\n        sorted_factors.Sort\n        Dim answer = \"\"\n        For Each factor In sorted_factors\n            answer = answer & String.Format(\"({0} {1})\", factor, factors(factor))\n        Next\n        Return answer\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350084,"user_id":null,"body":"Public Module Sums\n\n    Public Function sum_of_divided(ByVal lst As Integer()) As String\n        \n        Dim dic As SortedDictionary(Of Integer, Integer) = New SortedDictionary(Of Integer, Integer)\n        Dim n As Integer = 0\n        Dim prevPrime As Integer = 0\n        Dim currPrime As Integer = 0\n        Dim currNbr As Integer = 0\n\n        For i = 0 To lst.Length - 1\n            currNbr = lst(i)\n            n = Math.Abs(currNbr)\n            prevPrime = 0\n            currPrime = 2\n\n            While currPrime <= n\n\n                If (n Mod currPrime) = 0 Then\n\n                    If currPrime <> prevPrime Then\n                        AddSum(dic, currPrime, currNbr)\n                        prevPrime = currPrime\n                    End If\n                    n = n \/ currPrime\n\n                Else\n                    currPrime += 1\n\n                End If\n\n            End While\n\n        Next i\n\n\n        Return (String.Join(\"\", dic.Select(Function(pair) String.Format(\"({0} {1})\", pair.Key, pair.Value)).ToArray()))\n            \n    End Function\n                \n        \n    Sub AddSum(ByVal dict As SortedDictionary(Of Integer, Integer), ByVal prime As Integer, ByVal number As Integer)\n\n        If dict.ContainsKey(prime) Then\n            dict(prime) += number\n        Else\n            dict.Add(prime, number)\n            Debug.WriteLine($\"prime: {prime}, added number: {number}\")\n        End If\n\n    End Sub\n        \n    \nEnd Module\n\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350085,"user_id":null,"body":"Public Module Sums\n\n    Public Function sum_of_divided(ByVal lst As Integer()) As String\n        ' your code\n        Dim output As String = \"\"\n        Dim factors As New List(Of Integer) \n        Console.Write(\"Items \")\n        For each item in lst \n            Console.Write(item & \" - \")\n            Dim prime_factors = PrimeFactors(item)\n            For each factor in prime_factors\n                If Not factors.Contains(factor) Then\n                    factors.Add(factor)\n                End If\n            Next\n        Next\n        Console.WriteLine()\n        factors = factors.OrderBy(Function(x) x).ToList\n        Console.Write(\"Factors \")\n        For each factor in factors\n            Dim sum = 0\n            For each item in lst \n                If item Mod factor = 0\n                    sum = sum + item\n                End If\n            Next\n            output = output & \"(\" & factor & \" \" & sum & \")\"\n            Console.Write(factor & \" - \")\n        Next\n        Console.WriteLine()\n        Return output\n    End Function\n\n    Public Function PrimeFactors(ByVal number As Integer) As List(Of Integer) \n        Dim factors As New List(Of Integer)\n        Dim aux = Math.Abs(number)\n        Dim i = 2\n        While aux \/ i > 0 And aux <> 1\n            If aux Mod i = 0 Then\n                factors.Add(i)\n                aux = aux \/ i\n            Else \n                i = i + 1\n            End If\n        End While\n\n        'For i = 2 To Math.Abs(number)\n         ''   If Math.Abs(number) Mod i = 0 And Prime(i) Then\n          ''      factors.Add(i)\n           '' End If\n        'Next\n        Return factors\n    End Function\n\n    Public Function Prime(ByVal number As Integer) As Boolean\n        Dim is_prime As Boolean = True\n\n        For i = 2 To number-1\n            If number Mod i = 0 Then\n                is_prime = False\n                Exit For\n            End If\n        Next\n\n        Return is_prime\n    End Function\n    \nEnd Module\n\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350086,"user_id":76,"body":"Public Module Sums\n\n    Public Function sum_of_divided(ByVal lst As Integer()) As String\n        If lst.Count = 0 Then Return \"\"\n        Dim res As String = \"\"\n        Dim max = Math.Max(0, lst.Select(Function(n) Math.Abs(n)).Max())\n        For i As Integer = 2 To max\n            Dim d = i\n            If IsPrime(i) And lst.Any(Function(n) n Mod d = 0) Then\n                Dim sum = lst.Where(Function(n) n Mod d = 0).Sum()\n                res += String.Format(\"({0} {1})\", d, sum)\n            End If\n        Next i\n        Return res\n    End Function\n    \n    Private Function IsPrime(ByVal n As Integer) As Boolean\n        If n < 2 Then Return False\n        Dim d As Integer = 2\n        While d * d <= n\n            If n Mod d = 0 Then Return False\n            d += 1\n        End While\n        Return True\n    End Function\n                        \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350087,"user_id":53,"body":"Imports System\nImports System.Collections.Generic\nImports System.Linq\n\nPublic Module Sums\n    Private Function IsPrime(ByVal n As Integer) As Boolean\n        For i = 2 To Math.Sqrt(n)\n            If n Mod i = 0 Then Return False\n        Next\n\n        Return n > 1\n    End Function\n\n    Private Function NextPrime(ByVal n As Integer) As Integer\n        While Not IsPrime(System.Threading.Interlocked.Increment(n))\n        End While\n\n        Return n\n    End Function\n\n    Public Function sum_of_divided(ByVal lst As Integer()) As String\n        If lst.Length = 0 Then Return String.Empty\n        Dim b = lst.[Select](Function(x) Math.Abs(x)).Max()\n        Dim p = 2\n        Dim r = New List(Of Integer())()\n\n        While p <= b\n            Dim t = lst.Where(Function(x) x Mod p = 0).ToList()\n            If t.Count > 0 Then r.Add(New Integer() {p, t.Sum()})\n            p = NextPrime(p)\n        End While\n\n        Return String.Concat(r.[Select](Function(x) $\"({x(0)} {x(1)})\"))\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350088,"user_id":null,"body":"Public Module Sums\n\n\n        Public Function sum_of_divided(ByVal lst As Integer()) As String\n\n            Dim vals(lst.Length - 1)() As Integer\n            Dim d As Integer()\n            Dim s As String()\n\n            For i = 0 To lst.Length - 1 Step 1\n                vals(i) = PrimeFactors(Math.Abs(lst(i))).ToArray()\n            Next\n\n            d = vals.SelectMany(Function(x) x).Distinct().OrderBy(Function(y) y).ToArray()\n            ReDim s(d.Length-1)\n\n            For i = 0 To s.Length - 1 Step 1\n                Dim sum As Integer = 0\n                For x = 0 To vals.Length - 1\n                    If vals(x).Contains(d(i)) Then\n                        sum += lst(x)\n                    End If\n                    s(i) = $\"({d(i)} {sum})\"\n                Next\n            Next\n            Return String.Join(\"\", s)\n        End Function\n\n\n\n        Public Function PrimeFactors(ByVal num As Integer) As List(Of Integer)\n            PrimeFactors = New List(Of Integer)\n            For i = 2 To num Step 1\n                If num Mod i = 0 Then\n                    While num Mod i = 0\n                        num = num \/ i\n                        PrimeFactors.Add(i)\n                    End While\n                End If\n            Next\n        End Function\n\n    \nEnd Module\n\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350089,"user_id":null,"body":"Public Module Sums\n\n     Public Function sum_of_divided(ByVal lst As Integer()) As String\n        dim i, l, prime, incprime, max, lstabs as integer\n        dim s as string\n        dim fl as boolean\n        l = lst.count - 1\n        max = 0\n        'get max absolute value present in list\n        for i= 0 to l\n            lstabs = math.abs(lst(i))\n            if lstabs > max then max = lstabs\n        next i\n        'do first two primes separately\n        s = testit(2, lst)\n        s &= testit(3, lst)\n        prime = 5\n        incprime = 2\n        'then loop through all prime candidates of the form 6n+-1\n        do\n            fl = true\n            for i=3 to Math.sqrt(prime) step 2\n                if prime mod i = 0 then\n                    fl=false\n                    exit for\n                end if\n            next\n            'only add to string if prime is a factor of at least one number\n            if fl then s &= testit(prime, lst)\n            prime += incprime\n            incprime = 6 - incprime\n        loop until prime > max\n        return s\n    End Function\n    \n    Function testit(p as integer, byref lst as integer()) as string\n        'return a string )possibly empty) corresponding to the prime p\n        dim acc, l as integer\n        dim fl as boolean\n        dim t as string\n        t = \"\"\n        acc = 0\n        l = lst.count - 1\n        fl = false\n        for i= 0 to l\n            if lst(i) mod p = 0 then\n                acc += lst(i)\n                fl = true\n            end if\n        next i\n        if fl then t = string.format(\"({0} {1})\", p, acc)\n        return t\n    End Function\n    \nEnd Module\n\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350090,"user_id":492,"body":"Public Module Sums\n\n    Public Function sum_of_divided(ByVal lst As Integer()) As String\n        Dim [rem] As Integer() = New Integer(lst.Length - 1) {}\n        Dim max As Integer = 0\n        Dim result As String = \"\"\n\n        For i As Integer = 0 To lst.Length - 1\n            [rem](i) = System.Math.Abs(lst(i))\n            max = System.Math.Max(max, System.Math.Abs(lst(i)))\n        Next\n        For fac As Integer = 2 To max\n            Dim isFactor As Boolean = False\n            Dim tot As Integer = 0\n            For i As Integer = 0 To lst.Length - 1\n                If [rem](i) Mod fac = 0 Then\n                    isFactor = True\n                    tot += lst(i)\n\n                    While [rem](i) Mod fac = 0\n                        [rem](i) = [rem](i) \/ fac\n                    End While\n                End If\n            Next\n            If isFactor Then\n                result += \"(\" & fac & \" \" & tot & \")\"\n            End If\n        Next\n        Return result\n    End Function\n    \nEnd Module\n\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"54f8693ea58bce689100065f":[{"id":350091,"user_id":null,"body":"Imports System.Numerics\nPublic Module Egyptian\n    Public Function solve(ByVal n As BigInteger, ByVal d As BigInteger) As List(Of String)\n        Dim answer = New List(Of String)\n        Dim quotient As BigInteger\n        Dim remainder As BigInteger\n        If n = 0 Then Return answer\n        If n > d Then\n            quotient = BigInteger.DivRem(n, d, remainder)\n            answer.Add(\"\" & quotient.ToString)\n            If remainder > 0 Then\n                For Each f In solve(remainder, d)\n                    answer.Add(f)\n                Next\n            End If\n            Return answer\n        End If\n        quotient = BigInteger.DivRem(d, n, remainder)\n        Dim x As BigInteger = quotient.ToString + If(remainder = 0, 0, 1)\n        If x > 1 Then\n            answer.Add(\"1\/\" & x.ToString)\n        Else\n            answer.Add(\"1\")\n        End If\n        For Each f In solve(n * x - d, d * x)\n            answer.Add(f)\n        Next\n        Return answer\n    End Function\n    Public Function Decompose(ByVal nrStr As String, ByVal drStr As String) As String\n        Dim n = Convert.toInt64(nrStr)\n        Dim d = Convert.toInt64(drStr)\n        Dim answer = solve(n, d)\n        Return \"[\" & String.Join(\", \", answer) & \"]\"\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350092,"user_id":null,"body":"Public Module Egyptian\n  Private Function Gcd(a As Long, b As Long) As Long  \n    return If(b, Gcd(b, a Mod b), a)  \n  End Function\n  Public Function Decompose(ByVal nrStr As String, ByVal drStr As String) As String\n    Dim fractions = new List(of String)\n    Dim n, d, td, k As Long\n    n = +nrStr: d = +drStr\n    k = Gcd(n, d): n\\=k: d\\=k\n    If n>=d: fractions.Add(n\\d): n = n Mod d\n    End If\n    While n>0\n      td = If(d Mod n, 1+d\n, d\n)\n      fractions.Add($\"1\/{td}\")\n      k = td\\Gcd(td, d)\n      If k>1: d*=k: n = n*k-d\\td\n      Else: n-=d\\td  \n      End If\n    End While\n    return $\"[{String.Join(\", \", fractions)}]\"\n  End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350093,"user_id":null,"body":"Public Module Egyptian\n  Private Function Gcd(a As Long, b As Long) As Long  \n    return If(b, Gcd(b, a Mod b), a)  \n  End Function\n  Public Function Decompose(ByVal nrStr As String, ByVal drStr As String) As String\n    Dim fractions = new List(of String)\n    Dim n, d, td, cd, r As Long\n    n = +nrStr: d = +drStr\n    r = Gcd(n, d): n\\=r: d\\=r\n    If n>=d: fractions.Add(n\\d): n = n Mod d\n    End If\n    While n>0\n      td = If(d Mod n, 1+d\n, d\n)\n      fractions.Add($\"1\/{td}\")\n      cd = d*(td\\Gcd(td, d))\n      If cd>d: n = n*(cd\\d)-cd\\td: d = cd\n      Else: n-=cd\\td  \n      End If\n    End While\n    return $\"[{String.Join(\", \", fractions)}]\"\n  End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350094,"user_id":null,"body":"Public Module Egyptian\n\nconst MaxError as double = 0.000000000001\n    Function GetFactor(val As Double) As Long\n        \n        dim dec as decimal = val\n        Dim n As Long = Math.Floor(1\/dec)\n\n        'Overflow crap\n        if n=1359351417 then\n            return 1359351420\n        end if\n        If Math.Abs(val - 1 \/ n) < maxerror And Math.Abs(val - 1 \/ n) < Math.Abs(val - 1 \/ (n + 1)) Then\n            Return n\n        Else\n            Return n + 1\n        End If\n    End Function\n\n    Public Function Decompose(ByVal nrStr As String, ByVal drStr As String) As String\n\n        Dim Num As Integer = CInt(nrStr)\n        Dim Den As Integer = CInt(drStr)\n        Dim ret As String = \"\"\n        Dim CurVal As Double = Num \/ Den\n\n        If CurVal = 0 Then\n            Return \"[]\"\n        elseIf CurVal = Math.Floor(CurVal) Then\n            Return \"[\" & CurVal & \"]\"\n        elseif CurVal >=1 then\n            ret = \"[\" & math.floor(curval)\n            curval -=Math.floor(curval)\n        End If\n\n        Do\n            Dim Newden As long = GetFactor(CurVal)\n            CurVal -= 1 \/ Newden\n\n            If ret = \"\" Then\n                ret &= \"[1\/\" & Newden\n            Else\n                ret &= \", 1\/\" & Newden\n\n            End If\n        Loop Until CurVal <= maxerror\n        Return ret & \"]\"\n\n        ' your code\"\n    End Function\n    \nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350095,"user_id":492,"body":"Public Module Egyptian\n    Private Function decomposeAux(ByVal nrStr As String, ByVal drStr As String) As String\n        Dim nr As ULong = ULong.Parse(nrStr)\n        Dim dr As ULong = ULong.Parse(drStr)\n        If dr = 0 OrElse nr = 0 Then Return \"\"\n        If dr = nr Then Return \"1\"\n        If dr Mod nr = 0 Then Return \"1\/\" & dr \/ nr\n        Dim res As String = \"\"\n\n        If nr > dr Then\n            Dim q As ULong = CULng(Math.Floor(CDbl((nr \/ dr))))\n            res += q & \"\"\n\n            If nr Mod dr <> 0 Then\n                res += \", \" & decomposeAux((nr Mod dr).ToString(), dr.ToString())\n                Return res.Trim()\n            Else\n                Return res.Trim()\n            End If\n        End If\n\n        Dim n As ULong = CULng((dr \\ nr) + 1)\n        res += \"1\/\" & n & \", \"\n        res += decomposeAux((nr * n - dr).ToString(), (dr * n).ToString())\n        Return res.Trim()\n    End Function\n\n    Public Function Decompose(ByVal nrStr As String, ByVal drStr As String) As String\n        Dim res As String = decomposeAux(nrStr, drStr)\n        Return \"[\" & res & \"]\"\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350096,"user_id":492,"body":"Public Module Egyptian\n  'Public Class Decomp\n    Public Function decomposeAux(ByVal nrStr As String, ByVal drStr As String) As String\n        Dim nr As ULong = ULong.Parse(nrStr)\n        Dim dr As ULong = ULong.Parse(drStr)\n        If dr = 0 OrElse nr = 0 Then Return \"\"\n        If dr = nr Then Return \"1\"\n        If dr Mod nr = 0 Then Return \"1\/\" & dr \/ nr\n        Dim res As String = \"\"\n\n        If nr > dr Then\n            Dim q As ULong = CULng(Math.Floor(CDbl((nr \/ dr))))\n            res += q & \"\"\n\n            If nr Mod dr <> 0 Then\n                res += \", \" & decomposeAux((nr Mod dr).ToString(), dr.ToString())\n                Return res.Trim()\n            Else\n                Return res.Trim()\n            End If\n        End If\n\n        Dim n As ULong = CULng((dr \\ nr) + 1)\n        res += \"1\/\" & n & \", \"\n        res += decomposeAux((nr * n - dr).ToString(), (dr * n).ToString())\n        Return res.Trim()\n    End Function\n\n    Public Function Decompose(ByVal nrStr As String, ByVal drStr As String) As String\n        Dim res As String = decomposeAux(nrStr, drStr)\n        Return \"[\" & res & \"]\"\n    End Function\n  'End Class\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5545f109004975ea66000086":[{"id":350097,"user_id":645,"body":"Public Module Kata\n    Public Function IsDivisible(ByVal n As Integer, ByVal x As Integer, ByVal y As Integer) As Boolean\n        Return n Mod x = 0 And n Mod y = 0\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350098,"user_id":null,"body":"Public Module Kata\n    Public Function IsDivisible(ByVal n As Integer, ByVal x As Integer, ByVal y As Integer) As Boolean\n        Return n Mod x = 0 AndAlso n Mod y = 0\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350099,"user_id":1701,"body":"Public Module Kata\n    Public Function IsDivisible(ByVal n As Integer, ByVal x As Integer, ByVal y As Integer) As Boolean\n        return n Mod x = 0 And n Mod y = 0\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350100,"user_id":null,"body":"Public Module Kata\n    Public Function IsDivisible(ByVal n As Integer, ByVal x As Integer, ByVal y As Integer) As Boolean\n        return n mod x=n mod y\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350101,"user_id":null,"body":"Public Module Kata\n    Public Function IsDivisible(ByVal n As Integer, ByVal x As Integer, ByVal y As Integer) As Boolean\n        ' your code here\n        if (n mod x =0) and (n mod y = 0) then IsDivisible = true\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350102,"user_id":null,"body":"Public Module Kata\n    Public Function IsDivisible(ByVal n As Integer, ByVal x As Integer, ByVal y As Integer) As Boolean\n        \n         If (n Mod x) + (n Mod y) Then\n            return false\n            End If\n        \n        return true\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350103,"user_id":null,"body":"Public Module Kata\n    Public Function IsDivisible(ByVal n As Integer, ByVal x As Integer, ByVal y As Integer) As Boolean\n        ' your code here\n        dim a = n mod x\n        dim b = n mod y\n        \n        if a>0 or b>0 then\n            return false\n        end if\n            \n        return true\n            \n        \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350104,"user_id":null,"body":"Public Module Kata\n    Public Function IsDivisible(ByVal n As Integer, ByVal x As Integer, ByVal y As Integer) As Boolean\n        \n        Dim residuo As Integer \n        \n        residuo = n Mod x\n        \n        If residuo = 0 Then\n            residuo = n Mod y\n            If residuo = 0 Then\n                Return True\n            Else\n                Return False\n            End If\n            Return False\n        End if\n        \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350105,"user_id":null,"body":"Public Module Kata\n    Public Function IsDivisible(ByVal n As Integer, ByVal x As Integer, ByVal y As Integer) As Boolean\n        ' your code here\n        return (n mod x + n mod y = 0)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350106,"user_id":null,"body":"Public Module Kata\n    Public Function IsDivisible(ByVal n As Integer, ByVal x As Integer, ByVal y As Integer) As Boolean\n        If n mod x = 0 And n Mod y = 0 then\n            return true \n        Else \n            return false\n        End If\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"555624b601231dc7a400017a":[{"id":350107,"user_id":null,"body":"Imports System\nPublic Module Kata\n    Public Function JosephusSurvivor(ByVal n As Integer, ByVal k As Integer) As Integer\n        Dim answer = 0\n        For i = 1 To n\n            answer = (answer + k) Mod i\n        Next\n        Return answer + 1\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350108,"user_id":null,"body":"Imports System\nPublic Module Kata\n    Public Function JosephusSurvivor(ByVal n As Integer, ByVal k As Integer) As Integer\n        dim sheet as new list(of Integer)\n        for i = 1 to n\n            sheet.Add(i)\n        next\n        dim elim as int16 = 0\n        dim pointer as int16 = 0\n        while sheet.count <> 1\n            elim += 1\n            if elim = k\n                console.writeline(sheet(pointer))\n                sheet.removeAt(pointer)\n                elim = 0\n            else\n                pointer += 1\n            end if\n            \n            if pointer > sheet.count-1\n                pointer = 0\n            end if\n        end while\n    return sheet(0)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350109,"user_id":null,"body":"Imports System\nPublic Module Kata\n    Public Function JosephusSurvivor(ByVal n As Integer, ByVal k As Integer) As Integer\n        Dim list As List(Of Integer) = New List(Of Integer)\n\n        For i As Integer = 1 To n\n            list.Add(i)\n        Next\n\n        Dim lastNumberRemovedIndex = 0\n        Dim lastNumberIndex = n - 1\n        While (lastNumberIndex > 0)\n            For i As Integer = 1 To k - 1\n                If (lastNumberRemovedIndex > lastNumberIndex) Then\n                    lastNumberRemovedIndex = 1\n                ElseIf (lastNumberRemovedIndex = lastNumberIndex) Then\n                    lastNumberRemovedIndex = 0\n                Else\n                    lastNumberRemovedIndex += 1\n                End If\n            Next\n\n            list.RemoveAt(lastNumberRemovedIndex)\n\n            lastNumberIndex -= 1\n        End While\n\n        Return list.ElementAt(0)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350110,"user_id":53,"body":"Imports System\nPublic Module Kata\n    Public Function JosephusSurvivor(ByVal n As Integer, ByVal k As Integer) As Integer\n        Return If(n = 1, 1, (JosephusSurvivor(n - 1, k) + k - 1) Mod n + 1)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350111,"user_id":50,"body":"Imports System\nPublic Module Kata\n    Public Function JosephusSurvivor(ByVal n As Integer, ByVal k As Integer) As Integer\n        dim a as integer = 0\n        for i as integer = 2 to n\n            a = (a + k) mod i\n        next\n    a = a + 1\n    return a\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350112,"user_id":492,"body":"Imports System\nPublic Module Kata\n    Public Function JosephusSurvivor(ByVal n As Integer, ByVal k As Integer) As Integer\n        If n = 1 Then Return 1\n        Return (JosephusSurvivor(n - 1, k) + k - 1) Mod n + 1\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350113,"user_id":null,"body":"Imports System\nPublic Module Kata\n    Public Function JosephusSurvivor(ByVal n As Integer, ByVal k As Integer) As Integer\n        Return If(n <= 1, 1, ((JosephusSurvivor(n-1, k) + k - 1) Mod n) + 1)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350114,"user_id":76,"body":"Imports System\nPublic Module Kata\n    Public Function JosephusSurvivor(ByVal n As Integer, ByVal k As Integer) As Integer\n        Dim res As Integer = 1\n        For i As Integer = 1 To n\n            res = 1 + (res + k - 1) Mod i\n        Next\n        Return res\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350115,"user_id":null,"body":"Imports System\nPublic Module Kata\n\n    Structure linkedList\n        Dim value As Integer\n        Dim pNext As Integer\n        Dim pPrev As Integer\n    End Structure\n    \n    Public Function JosephusSurvivor(ByVal n As Integer, ByVal k As Integer) As Integer\n        If n = 1 then return 1\n    \n        Dim test(n - 1) As linkedList\n\n        For i = 0 To n - 1\n            test(i).value = i + 1\n            If i = n - 1 Then\n                test(i).pNext = 0\n            Else\n                test(i).pNext = i + 1\n            End If\n\n            If i = 0 Then\n                test(i).pPrev = n - 1\n            Else\n                test(i).pPrev = i - 1\n            End If\n        Next\n\n\n\n        Dim currentElement As Integer = -1\n\n        For i = 0 To n - 2\n            For j = 0 To k - 1\n                'increment the pointer\n                If currentElement = -1 Then\n                    currentElement = 0\n                Else\n                    currentElement = test(currentElement).pNext\n                End If\n\n            Next\n\n\n\n            test(test(currentElement).pNext).pPrev = test(currentElement).pPrev\n            test(test(currentElement).pPrev).pNext = test(currentElement).pNext\n\n\n\n        Next\n\n        Return test(test(currentElement).pNext).value\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350116,"user_id":null,"body":"Public Module Kata\n    Public Function JosephusSurvivor(ByVal n As Integer, ByVal k As Integer) As Integer\n        if n = 1 then return 1\n        return (JosephusSurvivor(n - 1, k) + k - 1) mod n + 1 \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"55983863da40caa2c900004e":[{"id":350117,"user_id":null,"body":"Public Class Kata\n    Public Shared Function next_bigger(ByVal n As Long) As Long\n        Dim digits = New List(Of Char)\n        For Each c As Char In n.ToString\n            digits.Add(c)\n        Next\n        Dim l = digits.Count\n        For i = l - 2 To 0 Step -1\n            For j = l - 1 To i Step -1\n                If digits(i) < digits(j) Then\n                    Dim temp = digits(i)\n                    digits(i) = digits(j)\n                    digits(j) = temp\n                    Dim suffix = New List(Of Char)\n                    For k = i + 1 To l - 1\n                        suffix.Add(digits(k))\n                    Next\n                    suffix.Sort\n                    For k = i + 1 To l - 1\n                        digits(k) = suffix(k - i - 1)\n                    Next\n                    Return Convert.toInt64(String.Join(\"\", digits))\n                End If\n            Next\n        Next\n        Return -1\n    End Function\nEnd Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350118,"user_id":null,"body":"Imports System\nImports Microsoft.VisualBasic\nImports System.Linq\n\nPublic Class Kata\n    Public Shared Function next_bigger(ByVal n As Long) As Long\n\n        Dim arr As Char() = n.ToString().ToArray()\n        Dim temp As Char\n        Dim max As Integer = 0\n        Dim indexOfMax As Integer = 0\n\n        If arr.Length < 2 Then Return -1\n\n        For i = arr.Length - 1 To 1 Step -1\n            If Convert.ToInt32(\"\" & arr(i)) > max Then\n                max = Convert.ToInt32(\"\" & arr(i))\n                indexOfMax = i\n            End If\n\n            If Convert.ToInt32(\"\" & arr(i - 1)) >= max Then\n                Continue For\n            End If\n\n            For k = i To arr.Length - 1\n                If Convert.ToInt32(\"\" & arr(k)) > Convert.ToInt32(\"\" & arr(i - 1)) And Convert.ToInt32(\"\" & arr(k)) <= max Then\n                    max = Convert.ToInt32(\"\" & arr(k))\n                    indexOfMax = k\n                End If\n            Next k\n\n            temp = arr(i - 1)\n            arr(i - 1) = arr(indexOfMax)\n            arr(indexOfMax) = temp\n\n            Array.Sort(arr, i, arr.Length - i)\n\n            Return (Convert.ToInt64(New String(arr)))\n\n        Next i\n\n            Return (-1)\n        \n    End Function\n\nEnd Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350119,"user_id":null,"body":"Public Class Kata\n    Private Shared Sub Swap(ar As Char(), i As Integer, j As Integer)\n        Dim temp As Char = ar(i)\n        ar(i) = ar(j)\n        ar(j) = temp\n    End Sub\n    \n    Public Shared Function next_bigger(ByVal n As Long) As Long\n        ' Your code goes here\n        Dim arr As Char() = n.ToString().ToCharArray(), res As String = String.Empty\n        Dim len As Integer = arr.Length, i As Integer\n        For i = len - 1 To 1 Step -1\n            If arr(i) > arr(i - 1) Then\n                Exit For\n            End If\n        Next\n        If i = 0 Then\n            Return -1\n        Else\n            Dim x As Integer = AscW(arr(i - 1))\n            Dim min As Integer = i\n            For j As Integer = i + 1 To len - 1\n                If AscW(arr(j)) > x AndAlso arr(j) < arr(min) Then\n                    min = j\n                End If\n            Next\n            Swap(arr, i - 1, min)\n            Array.Sort(arr, i, len - i)\n            For i = 0 To len - 1\n                res &= arr(i)\n            Next\n            Return Long.Parse(res)\n        End If\n    End Function\nEnd Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350120,"user_id":null,"body":"Public Class Kata\n   Public Shared Function smallestidx(ByVal arr() As Integer) As Integer\n        Dim idx As Integer = 0\n        Dim m As Integer = arr(0)\n        For i As Integer = 0 To arr.Length - 1\n            If m > arr(i) Then\n                m = arr(i)\n                idx = i\n            End If\n        Next\n        Return idx\n    End Function\n\n    Public Shared Function next_bigger(ByVal n As Long) As Long\n\n        Dim a() As Integer = n.ToString.ToArray.Select(Function(x) CInt(x.ToString)).ToArray\n        If a.Length < 2 Then Return -1\n        Dim msidx As Integer = -1 'biggest\n        Dim sidx As Integer = -1 ' to\n        Dim idx As Integer = -1 'from'\n        Dim midx As Integer = -1\n        For i As Integer = a.Length - 1 To 0 Step -1\n            For j As Integer = i - 1 To 0 Step -1\n                If a(i) > a(j) Then\n                    idx = i\n                    sidx = j\n                End If\n                If msidx < sidx Then\n                    msidx = sidx\n                    midx = idx\n                End If\n            Next\n        Next\n        If midx = -1 Then\n            Return -1\n        End If\n        Dim b As Integer = a(midx)\n        Dim c As Integer = a(msidx)\n        a(msidx) = b\n        a(midx) = c\n        Dim d() As Integer = String.Join(\"\", a).Substring(msidx + 1, a.Length - 1 - msidx).ToArray.Select(Function(x) CInt(x.ToString)).ToArray\n        For i As Integer = msidx + 1 To a.Length - 1\n            Array.Sort(d)\n            a(i) = d(0)\n            d(0) = 10\n        Next\n        If CLng(String.Join(\"\", a).ToString) > n Then\n            Return CLng(String.Join(\"\", a).ToString)\n        Else\n            Return-1\n        End If\n\n    End Function\nEnd Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350121,"user_id":null,"body":"Public Class Kata\n    Public Shared Function next_bigger(n As Long) As Long\n        \n        Dim digits As IList (Of Char) = n.ToString().ToCharArray()\n        Dim index = digits.Count - 1\n\n        ' If a digit is greater than the previous, we can swap it\n        While index > 0 AndAlso digits.Item(index) <= digits.Item(index - 1)\n            index -= 1\n        End While\n\n        ' If there was none, it is already arranged in the highest possible combination\n        If index < 1\n            Return - 1\n        End If\n\n        ' Split the digits at the swappable number\n        Dim left = digits.Take(index - 1)\n        Dim mid = digits.Item(index - 1)\n        Dim right = digits.Skip(index).ToList()\n\n        ' The number we want to swap is the one that is the smallest of those that are greater than mid\n        Dim candidate As Char = right.Where(function(c) c > mid).Min()\n\n        ' Swap the value of the first occurence of candidate with mid\n        right.Item(right.IndexOf(candidate)) = mid\n        mid = candidate\n\n        ' Sort right side to be the smallest possible combination\n        right.Sort(function(a, b) a.CompareTo(b))\n\n        Return Long.Parse(String.Join(\"\", left.Concat(New Char() {mid}).Concat(right)))\n        \n    End Function\nEnd Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350122,"user_id":53,"body":"Imports System\nImports System.Linq\n\nPublic Class Kata\n    Public Shared Function next_bigger(ByVal n As Long) As Long\n        Dim str = n.ToString().ToList()\n        Dim toInt As Func(Of Char, Integer) = AddressOf Convert.ToInt32\n        Dim i As Integer = str.Count - 1, fail As Integer = -1\n\n        While i > 0\n\n            If toInt(str(i)) > toInt(str(i - 1)) Then\n                fail = i - 1\n                Exit While\n            End If\n\n            i -= 1\n        End While\n\n        If fail < 0 Then Return fail\n        Dim sorted = str.Skip(fail).OrderBy(Function(c) c).ToList()\n        Dim res = str.Take(fail).ToList()\n        i = String.Join(\"\", sorted).LastIndexOf(str(fail))\n        res.Add(sorted(i + 1))\n        sorted.RemoveAt(i + 1)\n        res = res.Concat(sorted).ToList()\n        Return Convert.ToInt64(String.Join(\"\", res))\n    End Function\nEnd Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"559b8e46fa060b2c6a0000bf":[{"id":350123,"user_id":53,"body":"Imports System\nImports System.Numerics\n\nPublic Module Easydiagonal\n    Public Function Diagonal(ByVal n As Integer, ByVal p As Integer) As BigInteger\n        Return CalculateDiagonal(New BigInteger(n), New BigInteger(p))\n    End Function\n\n    Friend Function CalculateDiagonal(ByVal n As BigInteger, ByVal p As BigInteger) As BigInteger\n        Return Choose(n + 1, p + 1)\n    End Function\n\n    Private Function Choose(ByVal n As BigInteger, ByVal k As BigInteger) As BigInteger\n        Dim res = New BigInteger(1)\n\n        For i = New BigInteger(1) To k\n            res = res * (n - i + 1) \/ i\n        Next\n\n        Return res\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350124,"user_id":null,"body":"Imports System\nImports System.Numerics\n\nPublic Module Easydiagonal\n    Public Function Diagonal(ByVal n As Integer, ByVal p As Integer) As BigInteger\n        ' \u041f\u043e\u0441\u0442\n        If n < 0 Or p < 0 Or n <= p Then Return 0\n\n        ' \u0412\u0435\u0440\u043e\u044f\u0442\u043d\u043e \u044d\u0442\u043e \u043f\u043b\u043e\u0445\u043e\u0435 \u043d\u043e \u0431\u044b\u0441\u0442\u0440\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435\n        ' \u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c n - \u044d\u0442\u043e \u0448\u0438\u0440\u0438\u043d\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u044b (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u0438),\n        ' \u0410 p - \u044d\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u0432\u044b\u0441\u043e\u0442\u0435, \u0430 \u0442\u0430\u043a \u0436\u0435 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u0441\u0443\u043c\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438.\n        Dim matrix(0 To n, 0 To p) As BigInteger\n        Dim result As BigInteger = 0\n\n        ' \u041d\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u041f\u0430\u0441\u043a\u0430\u043b\u044f\n        For x = 0 To n\n            For y = 0 To p\n                Dim a As BigInteger = 0 ' \u043b\u0435\u0432\u043e\u0435 \u0432\u0435\u0440\u0445\u043d\u0435\u0435 \u0447\u0438\u0441\u043b\u043e\n                Dim b As BigInteger = 0 ' \u043f\u0440\u0430\u0432\u043e\u0435 \u0432\u0435\u0440\u0445\u043d\u0435\u0435 \u0447\u0438\u0441\u043b\u043e\n                If x = y And x = 0 Then a = 1 ' \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\n                If y > 0 Then a = matrix(x, y - 1)\n                If x > 0 Then b = matrix(x - 1, y)\n                matrix(x, y) = a + b ' \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u0441\u0435\u0433\u0434\u0430 \u0440\u0430\u0432\u0435\u043d \u0441\u0443\u043c\u043c\u0435 \u0447\u0438\u0441\u0435\u043b \u0441\u0442\u043e\u044f\u0449\u0438\u0445 \u043d\u0430 \u0438\u0441\u043a\u043e\u043c\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c\n                \n                ' \u0418\u0441\u043a\u043e\u043c\u0430\u044f \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c\n                If y = p Then\n                    ' \u0412\u044b\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435\n                    If x > n - p Then Continue For\n                    result += matrix(x, y)\n                End If\n            Next\n        Next\n\n        Return result\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350125,"user_id":492,"body":"Imports System\nImports System.Numerics\n\nPublic Module Easydiagonal\n    Private Function choose(ByVal n As Integer, ByVal p As Integer) As BigInteger\n        Dim ret As BigInteger = New BigInteger(1)\n        For i As Integer = 0 To p - 1\n            ret = BigInteger.Multiply(ret, n - i)\n            ret = BigInteger.Divide(ret, i + 1)\n        Next\n        Return ret\n    End Function\n    Public Function Diagonal(ByVal n As Integer, ByVal p As Integer) As BigInteger\n        Return choose(n + 1, p + 1)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350126,"user_id":null,"body":"Imports System.Numerics\n\nPublic Module Easydiagonal\n    Public Function Diagonal(ByVal n As Integer, ByVal p As Integer) As BigInteger\n        Dim answer As BigInteger = 0\n        Dim b As BigInteger = 1\n        For i = 0 To n - p\n            answer += b\n            b = BigInteger.Divide(b * (p + i + 1), (i + 1))\n        Next\n        Return answer\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350127,"user_id":null,"body":"Imports System\nImports System.Numerics\n\nPublic Module Easydiagonal\n    \n    Public Function Diagonal(ByVal n As Integer, ByVal p As Integer) As BigInteger\n        Return ElementOfPascalTriangle(n + 1, p + 1)\n    End Function\n\n\n    Function ElementOfPascalTriangle(row%, pos%)\n\n        Dim C As BigInteger ' Imports System.Numerics\n\n        Dim i As Long\n        C = 1\n\n        If (row - pos > pos) Then\n            pos = row - pos\n        End If\n\n        For i = (pos + 1) To row\n            C = C * i\n        Next i\n\n        For i = 1 To (row - pos)\n            C = C \/ i\n        Next i\n\n        Return C\n\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350128,"user_id":null,"body":"Imports System\nImports System.Numerics\n\nPublic Module Easydiagonal\n    Public Function Diagonal(ByVal n As Integer, ByVal p As Integer) As BigInteger\n        ' your code\n        Console.WriteLine(n)\n        Console.WriteLine(p)\n        Dim sum As BigInteger = 0\n        Dim result As BigInteger = 0\n        Dim previous = 1\n        For value As Long = p To n\n            'Console.WriteLine((p+1) & \" \" & value-p & \" \" & previous)\n            'result = (value+1)*previous\/(value-p) \n            'Console.WriteLine(n & \" \" & value & \" \" & p)\n            'result = Recursion(n, value, p) '' \n            'Console.WriteLine(Factorial(value))\n            'Console.WriteLine(Factorial(p))\n            'Console.WriteLine(Factorial(n - p))\n            result = Multiplicative(value, p) '' Recursion(n, value, p) '' 'Factorial(value)\/(Factorial(p)*(Factorial(value - p))) '' \n            'previous = result    \n            'Console.WriteLine(result)\n            sum = sum + result\n        Next\n        Return sum\n    End Function\n\n    Public Function Multiplicative(ByVal n As Long, ByVal k As Long) As BigInteger\n        Dim result = FallingFactorial(n,k)\/Factorial(k)\n        Return result\n    End Function\n\n    Public Function FallingFactorial(ByVal n As BigInteger, ByVal k As BigInteger) As BigInteger\n        Dim output As BigInteger = 1\n        For value As Long = 0 To k-1\n            output = output * (n - value)\n        Next\n        Return output\n    End Function\n\n    Public Function Recursion(ByVal number As Long, ByVal n As Long, ByVal k As Long) As BigInteger\n        Console.WriteLine(number & \" \" & n & \" \" & k)\n        If k = 0 Or (n = number) Then \n            Return 1\n        End If\n        Return Recursion(number, n-1,k-1) + Recursion(number, n-1,k)\n    End Function\n    \n    Public Function Factorial(ByVal n As Long) As BigInteger\n        If n = 0 Then\n            Return 1\n        End If\n        Dim output As BigInteger = 1\n        For variable As Long = 1 To n\n            output = output * variable\n        Next\n        Return output\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350129,"user_id":null,"body":"Imports System\nImports System.Numerics\nImports System.Math\nPublic Module Easydiagonal\n    Public Function Factorial(ByVal n As Integer) As BigInteger\n           Dim ft As BigInteger = 1\n        For i As Integer = n To 1 Step -1\n            ft *= i\n        Next\n        Return ft\n    End Function    \n    Public Function Diagonal(ByVal n As Integer, ByVal p As Integer) As BigInteger\n        ' your code\n    n=abs(n)\n    p=abs(p)\n         Dim p1 As Integer = 0\n        If p = 0 Then Return (n + 1)\n        If p = n Then Return 1\n        If p = 1 Then\n\n            p1 = (1 + n) * (n \\ 2)\n            If Not (n Mod 2) = 0 Then\n\n                p1 += (n \\ 2 + 1)\n\n            End If\n            Return p1\n        ElseIf p > n Then\n            Return 0\n        Else\n                ''summation of row is equal to binomial coefficient of n+1 and k+1  (pascal's triangle)\n                ''used binomial coefficients as polynomial equation to reduce time\n                Dim r As BigInteger = 1\n            For i As Integer = n + 1 To n - p + 1 Step -1\n                r *= i\n            Next\n            Return r \/ Factorial(p + 1)\n               'return factorial(n)\/(factorial(p)*factorial(n-p)) + factorial(n)\/(factorial(p+1)*factorial(n-p-1)) \n                \n            \n        End If\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350130,"user_id":null,"body":"Imports System\nImports System.Numerics\nPublic Module Easydiagonal\n    Public Function Diagonal(ByVal n As Integer, ByVal p As Integer) As BigInteger\n        \n      dim n1 as BigInteger=1\n      dim final as BigInteger =0  \n      dim diag(n) as BigInteger\n      For index As Integer = 0 To n-1\n        diag(index)= 0\n        Console.WriteLine(diag(index))\n      Next\n      dim reng = 0 \n      dim alt = 0\n      while reng <= p\n        while alt <= n-reng\n            diag(alt)= diag(alt)+n1\n            n1=diag(alt)\n            alt=alt+1\n            if reng=p then\n                final=final+n1\n            end if\n        end while\n        n1=0\n        alt=0\n        reng=reng+1\n      end while\n      return final\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350131,"user_id":null,"body":"Imports System.Numerics\n\nPublic Module Easydiagonal\n    Public Function Diagonal(ByVal n As Integer, ByVal p As Integer) As BigInteger\n        ' your code\n     Dim i As BigInteger, k As BigInteger\n\t\tDim a As BigInteger\n\n\t\t'Dim c As Integer\n\t\tDim d As BigInteger = n\n\t\tDim e As BigInteger\n\t\tIf n < p Then\n\t\t\tThrow New Exception(\"n must be larger than k.\")\n\t\tElse\n\n\t\t\tk = 1\n\t\t\tDim b As BigInteger = k\n\t\t\tFor a = 1 To n + 1\n\t\t\t\tFor i = 1 To p\n\t\t\t\t\tk = k * d \/ i\n\t\t\t\t\td = d - 1\n\t\t\t\tNext\n\t\t\t\t'n = b\n\t\t\t\t'n = n - 1\n\t\t\t\te += k\n\t\t\t\tk = b\n\t\t\t\tn = n - 1\n\t\t\t\td = n\n\t\t\tNext\n\t\tEnd If\n\t\tReturn e\n\n\n    \n        \n         \n        \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350132,"user_id":null,"body":"Imports System\nImports System.Numerics\nPublic Module Easydiagonal\n    Public Function Silnia(ByVal m As Integer, ByVal n As Integer) As BigInteger\n        Dim i As Integer\n        Silnia = 1\n        For i = m To n\n            Silnia = Silnia * i\n        Next\n        \n    End Function\n    Public Function Diagonal(ByVal n As Integer, ByVal p As Integer) As BigInteger\n        Dim i As Integer\n        Dim j As BigInteger\n        Diagonal = 0\n        For i = p To n\n            j = Silnia((i-p)+1,i) \/ Silnia(1,p)\n            Diagonal = Diagonal + j\n        Next\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"55aa075506463dac6600010d":[{"id":350133,"user_id":53,"body":"Imports System\nImports System.Linq\nImports System.Collections.Generic\n\nPublic Class SumSquaredDivisors\n    \n    Public Shared Function ListSquared(ByVal m As Long, ByVal n As Long) As String\n        Dim res = New List(Of Long())()\n\n        For i As Long = m To n\n            Dim sum2 = SquaredSum(FindDivisors(i))\n\n            If Math.Sqrt(sum2) Mod 1 = 0 Then\n                res.Add(New Long() {i, sum2})\n            End If\n        Next\n\n        Return $\"[{String.Join(\", \", res.[Select](Function(x) $\"[{x(0)}, {x(1)}]\"))}]\"\n    End Function\n\n    Private Shared Function SquaredSum(ByVal values As IEnumerable(Of Long)) As Long\n        Return values.Sum(Function(x) x * x)\n    End Function\n\n    Private Shared Iterator Function FindDivisors(ByVal a As Long) As IEnumerable(Of Long)\n        Dim iterator As Integer = CInt(Math.Sqrt(a))\n\n        For i As Long = 1 To iterator\n\n            If a Mod i = 0 Then\n                Yield i\n\n                If i <> a \/ i Then\n                    Yield a \/ i\n                End If\n            End If\n        Next\n    End Function\n\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350134,"user_id":null,"body":"Public Class SumSquaredDivisors\n    Public Shared Function ListSquared(ByVal m As Long, ByVal n As Long) As String\n        Dim ok_lists As New List(Of String)\n        Dim total = 0\n        Dim other = 0\n        For i = m To n\n            total = 0\n            For j = 1 To Math.Floor(Math.Sqrt(i))\n                If i Mod j = 0 Then\n                    total += j * j\n                    other = i \\ j\n                    If other <> j Then total += other * other\n                End If\n            Next\n            other = Math.Floor(Math.Sqrt(total))\n            If other * other = total Then\n                ok_lists.Add(\"[\" & i & \", \" & total &\"]\")\n            End If\n        Next\n        Return \"[\" & String.Join(\", \", ok_lists) & \"]\"\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350135,"user_id":null,"body":"Imports System\n\nPublic Class SumSquaredDivisors\n        Public Shared Function ListSquared(ByVal m As Long, ByVal n As Long) As String\n            Dim divident As Long = 0\n            Dim divisor As Long = 0\n            Dim prevDivisor As Long = 0\n            Dim sum As Long = 1\n            Dim sumPart As Long = 0\n            Dim counter As Integer = 0\n            Dim s As String = \"[\"\n\n            For i = m To n\n                divident = i\n                divisor = 2\n                sum = 1\n                sumPart = 1\n\n                While divident >= divisor\n                    If (divident Mod divisor) = 0 Then\n                        If (divisor <> prevDivisor) Then\n                            sum = sum * sumPart\n                            sumPart = 1 + Math.Pow(divisor, 2)\n                            counter = 1\n                            prevDivisor = divisor\n                            divident = divident \/ divisor\n                        Else\n                            counter += 1\n                            sumPart += Math.Pow(divisor, (counter * 2))\n                            divident \/= divisor\n                        End If\n                    Else\n                        If sumPart <> 1 Then\n                            sum = sum * sumPart\n                            sumPart = 1\n                        End If\n                        divisor += 1\n                    End If\n                    If divident < divisor And sumPart <> 1 Then\n                        sum = sum * sumPart\n                    End If\n                End While\n\n                If (Math.Sqrt(sum) Mod 1) = 0 Then\n                    If s <> \"[\" Then\n                        s &= \", \"\n                    End If\n                    s &= $\"[{i}, {sum}]\"\n                End If\n\n            Next i\n\n            Return s & \"]\"\n\n        End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350136,"user_id":null,"body":"Imports System\n\nPublic Class SumSquaredDivisors\n    Public Shared Function ListSquared(ByVal m As Long, ByVal n As Long) As String\n        ' Code here ..\n        Console.WriteLine(m)\n        Console.WriteLine(n)\n        Dim sum As Long = 0\n        Dim numbers As List(Of Long)\n        Dim pairs As New List(Of Long())\n        Dim squared As Decimal\n        For num As Long = m To n\n            numbers = Divisors(num)\n            squared = Math.Sqrt(Square(numbers))\n            If Not (squared.ToString().Contains(\".\")) Then\n                Dim pair(2) As Long\n                pair(0) = num\n                pair(1) = squared*squared\n                pairs.Add(pair)\n            End If\n        Next\n        Dim output As String = \"[\"\n        For i As Long = 0 To pairs.Count-1\n            Dim value As String = String.Join(\",\", pairs(i))\n            output = output & \"[\"  & pairs(i)(0) & \", \" & pairs(i)(1) & \"]\" \n            If i < pairs.Count-1 Then\n                output = output & \", \"\n            End If\n        Next\n        output = output + \"]\"\n        Console.WriteLine(output)\n        Return output\n    End Function\n    \n    Public Shared Function Square(ByVal numbers As List(Of Long)) As Long\n        Dim sum = 0\n        For i As Long = 0 To numbers.Count-1\n            sum = sum + Math.pow(numbers(i),2)\n        Next\n        Return sum\n    End Function\n\n    Public Shared Function Divisors(ByVal number As Long) As List(Of Long) \n        Dim numbers As New List(Of Long)\n        For num As Long = 1 To number\n            If (number Mod num) = 0 Then\n                numbers.Add(num)\n            End If\n        Next\n        Return numbers\n    End Function\n\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"55cbc3586671f6aa070000fb":[{"id":350137,"user_id":76,"body":"Public Module Kata\n    Public Function CheckForFactor(ByVal base As Integer, ByVal factor As Integer) As Boolean\n        Return base Mod factor = 0\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350138,"user_id":null,"body":"Public Module Kata\n    Public Function CheckForFactor(ByVal base As Integer, ByVal factor As Integer) As Boolean\n       if factor = 0 then return false\n        Return (base mod factor) = 0 ' TODO complete the function \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350139,"user_id":null,"body":"Public Module Kata\n    Public Function CheckForFactor(ByVal base As Integer, ByVal factor As Integer) As Boolean\n        if base mod factor = 0 then\n        Return True\n        end if\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350140,"user_id":null,"body":"Public Module Kata\n    Public Function CheckForFactor(ByVal base As Integer, ByVal factor As Integer) As Boolean\n        if base mod factor = 0 then Return True else return false ' TODO complete the function \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350141,"user_id":null,"body":"Public Module Kata\n\n    Public Function CheckForFactor(ByVal base As Integer, ByVal factor As Integer) As Boolean\n        If (base Mod factor <> 0) Then\n            Return False\n        End If\n        Return True\n\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350142,"user_id":null,"body":"Public Module Kata\n    Public Function CheckForFactor(ByVal base As Integer, ByVal factor As Integer) As Boolean\n        if base mod factor = 0 then\n            Return True\n        else \n            return false \n        end if' TODO complete the function \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350143,"user_id":null,"body":"Public Module Kata\n    Public Function CheckForFactor(ByVal base As Integer, ByVal factor As Integer) As Boolean\n        if base mod factor = 0 then return True\n        return False\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350144,"user_id":null,"body":"Public Module Kata\n    Public Function CheckForFactor(ByVal base As Integer, ByVal factor As Integer) As Boolean\n        If Base Mod Factor = 0 Then\n            Return True ' TODO complete the function \n        End If\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350145,"user_id":null,"body":"Public Module Kata\n    Public Function CheckForFactor(ByVal base As Integer, ByVal factor As Integer) As Boolean\nIf base mod factor = 0  Then \n     return True \nElse\n    return False \nEnd If\n       \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350146,"user_id":null,"body":"Public Module Kata\n    Public Function CheckForFactor(ByVal base As Integer, ByVal factor As Integer) As Boolean   \n        Dim rest as Integer\n        \n        rest = Base mod factor\n        \n        Return rest = 0\n        \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"55d24f55d7dd296eb9000030":[{"id":350147,"user_id":null,"body":"Public Module Kata\n    Public Function Summation(ByVal n As Integer) As Integer\n        Dim answer as Integer\n        answer = 0\n        for i=1 to n\n            answer+=i\n        next i\n        return answer\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350148,"user_id":null,"body":"Public Module Kata\n    Public Function Summation(ByVal n As Integer) As Integer\n        ' your code here\n        Dim totalN As Integer\n        For i = 0 to n\n        totalN += i\n        Next\n    Return totalN\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350149,"user_id":564,"body":"public module Kata\n    public dim Summation as Func (of integer, integer) =\n        function(n) (n * n + n) \/ 2\nend module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350150,"user_id":null,"body":"Public Module Kata\n    Public Function Summation(ByVal n As Integer) As Integer\n        if n = 0 then\n            summation = 0\n        else\n            Summation = n + summation(n-1)\n        end if\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350151,"user_id":null,"body":"Public Module Kata\n    Public Function Summation(ByVal n As Integer) As Integer\n        ' your code here\n        return (n\/2)*(n+1)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350152,"user_id":645,"body":"Public Module Kata\n    Public Function Summation(ByVal n As Integer) As Integer\n        Return n * (n + 1) \\ 2\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350153,"user_id":null,"body":"Public Module Kata\n    Public Function Summation(ByVal n As Integer) As Integer\n        ' your code here\n        Dim myNum, result\n        myNum = n\n        result = 0\n        Do While myNum > 0\n            result=result+myNum\n            myNum = myNum - 1\n        Loop\n        Return result\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350154,"user_id":null,"body":"Public Module Kata\n    Public Function Summation(ByVal n As Integer) As Integer\n        Dim i As Integer, y As Integer\n        i = 0\n        y = 0\n        \n        Do While i <= n\n            y = y + i\n            i = i + 1\n        Loop\n        \n        return y\n    \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350155,"user_id":null,"body":"Public Module Kata\n    Public Function Summation(ByVal n As Integer) As Integer\n        for i = 1 to n\n        Summation = summation + i\n        next\n    return summation\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350156,"user_id":null,"body":"Public Module Kata\n    Public Function Summation(ByVal n As Integer) As Integer\n        dim result as integer = 0\n        for i as integer = 1 to n \n            result = result + i\n        next\n        return result\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"55f9bca8ecaa9eac7100004a":[{"id":350157,"user_id":564,"body":"Public Module Kata\n    Public Function Past(ByVal h As Integer, ByVal m As Integer, ByVal s As Integer) As Integer\n        return ((h * 60 + m) * 60 + s) * 1000\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350158,"user_id":null,"body":"Public Module Kata\n    Public Function Past(ByVal h As Integer, ByVal m As Integer, ByVal s As Integer) As Integer\n        Dim total As Integer\n        total += (h * 3600000)\n        total += (m * 60000)\n        total += (s * 1000)\n        Return total\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350159,"user_id":null,"body":"Public Module Kata\n    Public Function Past(ByVal h As Integer, ByVal m As Integer, ByVal s As Integer) As Integer\n        ' your code here\n        Dim Sumh As Integer\n        Dim Summ As Integer\n        Dim Sums As Integer\n        Dim SumAll As Integer\n        \n        Sumh = h * 60 * 60 * 1000\n        Summ = m * 60 * 1000\n        Sums = s * 1000\n        \n        SumAll = Sumh + Summ + Sums\n        \n        Return SumAll\n        \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350160,"user_id":645,"body":"Public Module Kata\n    Public Function Past(ByVal h As Integer, ByVal m As Integer, ByVal s As Integer) As Integer\n        Return (h * 3600 + m * 60 + s) * 1000\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350161,"user_id":null,"body":"Public Module Kata\n    Public Function Past(ByVal h As Integer, ByVal m As Integer, ByVal s As Integer) As Integer\n        return (h * 3600 + m * 60 + s) * 1000\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350162,"user_id":null,"body":"Public Module Kata\n    Public Function Past(ByVal h As Integer, ByVal m As Integer, ByVal s As Integer) As Integer\n        ' your code here\n        past = (((h * 60) + m) * 60 + s) * 1000\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350163,"user_id":null,"body":"Public Module Kata\n    Public Function Past(ByVal h As Integer, ByVal m As Integer, ByVal s As Integer) As Integer\n        dim mi as integer\n        \n        m = h*60 + m\n        s = m*60+s\n        mi = s*1000\n        \n        console.writeline (h & \" hours \" & m &\" minutes \" & s & \" seconds\")\n        return mi\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350164,"user_id":null,"body":"Public Module Kata\n    Public Function Past(ByVal h As Integer, ByVal m As Integer, ByVal s As Integer) As Integer\n       dim ms as integer = 1000*(h*3600+m*60+s)\n        return ms\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350165,"user_id":null,"body":"Public Module Kata\n    Public Function Past(ByVal h As Integer, ByVal m As Integer, ByVal s As Integer) As Integer\n        dim result as integer = ((((h*60)+m)*60)+s)*1000\n        return result\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350166,"user_id":null,"body":"Public Module Kata\n    Public Function Past(ByVal h As Integer, ByVal m As Integer, ByVal s As Integer) As Integer\n        ' your code here\n        dim second as integer\n\n        second= (h )*3600000 + (m )*60000 + s  *1000\n\n        return second\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"55fd2d567d94ac3bc9000064":[{"id":350167,"user_id":null,"body":"Public Module Kata\n    Public Function RowSumOddNumbers(ByVal n As Integer) As Integer        \n        return n^3\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350168,"user_id":null,"body":"Public Module Kata\n    Public Function RowSumOddNumbers(ByVal n As Integer) As Integer\n        return Math.pow(n, 3)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350169,"user_id":527,"body":"Public Module Kata\n    Public Function RowSumOddNumbers(ByVal n As Integer) As Integer\n        RowSumOddNumbers = n ^ 3\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350170,"user_id":null,"body":"Public Module Kata\n    Public Function RowSumOddNumbers(ByVal n As Integer) As Integer\n        ' your code here\n        dim level as integer\n        dim i as integer\n        dim lft as integer\n        dim rgt as integer\n        dim sum as integer\n        level = n * n\n        for i = 0 to (n - 1)\n            lft = level - i\n            rgt = level + i\n            if i > 0 then\n                if (lft mod 2) = 1 then sum = sum + lft\n                if (rgt mod 2) = 1 then sum = sum + rgt\n            else\n                if (level mod 2) = 1 then sum = sum + level\n            end if\n        next\n        return sum\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350171,"user_id":null,"body":"Public Module Kata\n    Public Function RowSumOddNumbers(ByVal n As Integer) As Integer\n\n        Dim total As Integer\n        Dim i As Integer\n        Dim temp As Integer\n        \n        temp = n * ( n - 1 ) + 1\n        \n        for i = 1 to n\n            total = total + temp\n            temp += 2\n        next i\n\n        return total\n\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350172,"user_id":null,"body":"Public Module Kata\n    Public Function RowSumOddNumbers(ByVal n As Integer) As Integer\n        RowSumOddNumbers = (n^2-(n-1))*n + n*(n-1)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350173,"user_id":null,"body":"Public Module Kata\n    Public Function RowSumOddNumbers(ByVal n As Integer) As Integer\n        dim Sum as integer\n        for i = 0 to n-1\n            Sum += n*(n-1)+1+i*2\n        next\n        return Sum\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350174,"user_id":null,"body":"Public Module Kata\n    Public Function RowSumOddNumbers(ByVal n As Integer) As Integer\n    rowsumoddnumbers = n^3\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350175,"user_id":null,"body":"Public Module Kata\n    Public Function RowSumOddNumbers(ByVal n As Integer) As Integer\n        return n * ((n-1)*n+1) + n*(n-1)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350176,"user_id":null,"body":"Public Module Kata\n    Public Function RowSumOddNumbers(ByVal n As Integer) As Integer\n        Dim firstnum As Integer = n * n - (n - 1)\n        Dim sum As Integer = 0\n        For i = 1 To n\n            sum += firstnum + (2 * (i - 1))\n        Next\n        Return sum\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"563a631f7cbbc236cf0000c2":[{"id":350177,"user_id":null,"body":"Public Module Kata\n    Public Function Move(ByVal pos As Integer, ByVal roll As Integer) As Integer\n        return pos+roll*2\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350178,"user_id":null,"body":"Public Module Kata\n    Public Function Move(ByVal pos As Integer, ByVal roll As Integer) As Integer\n        ' Your code here\n        pos += (roll*2)\n        Return pos\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350179,"user_id":null,"body":"Public Module Kata\n    Public Function Move(ByVal pos As Integer, ByVal roll As Integer) As Integer\n       Console.WriteLine(pos)\n        Console.WriteLine(roll)\n        dim Place = pos+(roll*2)\n   return Place\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350180,"user_id":null,"body":"Public Module Kata\n    Public Function Move(ByVal pos As Integer, ByVal roll As Integer) As Integer\n        Return (pos+(2*roll))\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350181,"user_id":null,"body":"Public Module Kata\n    Public Function Move(ByVal pos As Integer, ByVal roll As Integer) As Integer\n        dim NewPos as integer\n        NewPos = pos + (roll*2)\n        return NewPos' Your code here\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350182,"user_id":null,"body":"Public Module Kata\n    Public Function Move(ByVal pos As Integer, ByVal roll As Integer) As Integer\n        ' Your code here\n        Return pos + (roll * 2)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350183,"user_id":null,"body":"Public Module Kata\n    Public Function Move(ByVal pos As Integer, ByVal roll As Integer) As Integer\n    dim value as integer\n        value = pos + roll * 2\n        return value\n    End Function \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350184,"user_id":null,"body":"Public Module Kata\n    Public Function Move(ByVal pos As Integer, ByVal roll As Integer) As Integer\n        return pos + (Roll * 2)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350185,"user_id":null,"body":"Public Module Kata\n    Public Function Move(ByVal pos As Integer, ByVal roll As Integer) As Integer\n        ' Your code here\n        return pos + (roll * 2)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350186,"user_id":null,"body":"Public Module Kata\n    Public Function Move(ByVal pos As Integer, ByVal roll As Integer) As Integer\n        ' Your code here\n        Return (2 * roll + pos)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"566543703c72200f0b0000c9":[{"id":350187,"user_id":null,"body":"Imports System\n\nClass Epidem\n    Shared Function Epidemic(ByVal tm As Integer, ByVal n As Integer, ByVal s0 As Integer, ByVal i0 As Integer, ByVal b As Double, ByVal a As Double) As Integer\n        Dim t As Double = 0\n        Dim dt As Double = tm \/ n\n        Dim r = 0\n        Dim s As Double = s0\n        Dim i As Double = i0\n        Dim answer As Double = i0\n        While t < tm\n            t += dt\n            Dim s1 As Double = s - dt * b * s * i\n            i += dt * (b * s * i - a * i)\n            r += dt * r * a\n            s = s1\n            If i > answer Then answer = i\n        End While\n        Return Math.Floor(answer)\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350188,"user_id":null,"body":"Imports System\n\nClass Epidem\n    Shared Function Epidemic(ByVal tm As Integer, ByVal n As Integer, ByVal s0 As Integer, ByVal i0 As Integer, ByVal b As Double, ByVal a As Double) As Integer\n        ' Insert code here ..\n        dim ssc, inf, di, t as double\n        ssc = s0\n        inf = i0\n        di = 0\n        t = 0\n        Do Until (di < 0)or(t > tm)\n            ssc = ssc - di - (tm\/n) * a * inf \n            inf = inf + di\n            di = (tm\/n) * (b * ssc - a) * inf\n            t = t + tm\/n\n        Loop\n        Epidemic = Math.Truncate(inf)\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350189,"user_id":null,"body":"Imports System\n\nClass Epidem\n    Shared Function Epidemic(ByVal tm As Integer, ByVal n As Integer, ByVal s0 As Integer, ByVal i0 As Integer, ByVal b As Double, ByVal a As Double) As Integer\n        ' Insert code here ..\n        Console.Write(tm & \" \")\n        Console.Write(n & \" \")\n        Console.Write(s0 & \" \")\n        Console.Write(i0 & \" \")\n        Console.Write(b & \" \")\n        Console.WriteLine(a)\n        Dim dt = tm \/ n\n        Dim s As Decimal = s0 '' -b * s0 * i0\n        Dim i As Decimal = i0 '' b * s0 * i0 - a * i0\n        Dim r As Decimal = a * i0\n        Dim maxI = i\n        \n        For aux As Long = 1 To n\n            Dim prev_s = s\n            s = s - dt * b * s * i\n            i = i + dt * (b * prev_s * i - a * i)\n            r = r + dt * i * a\n            If i > maxI Then\n                maxI = i\n            End If\n        Next\n        \n        'Console.WriteLine(s)\n        'Console.WriteLine(i)\n        'Console.WriteLine(r)\n         Console.WriteLine(maxI)    \n    \n        Return maxI\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350190,"user_id":76,"body":"Imports System\n\nClass Epidem\n    Shared Function Epidemic(ByVal tm As Integer, ByVal n As Integer, ByVal s_0 As Integer, ByVal i_0 As Integer, ByVal b As Double, ByVal a As Double) As Integer\n        Dim S0 As Double = s_0\n        Dim I0 As Double = i_0\n        Dim R0 As Double = 0\n        Dim dt As Double = tm \/ n\n        Dim maxInfected As Integer = i0\n        Dim interval As Double = dt\n        While interval < tm\n            Dim S1 = S0 - dt * b * S0 * I0\n            Dim I1 = I0 + dt * (b * S0 * I0 - a * I0)\n            Dim R1 = R0 + dt * I0 * a\n            S0 = S1\n            I0 = I1\n            R0 = R1\n            If I0 > maxInfected Then maxInfected = I0\n            interval += dt\n        End While\n        Return maxInfected\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350191,"user_id":null,"body":"Imports System\n\nClass Epidem\n    Shared Function Epidemic(ByVal tm As Integer, ByVal n As Integer, ByVal s0 As Integer, ByVal i0 As Integer, ByVal b As Double, ByVal a As Double) As Integer\n        Dim Dt As Double\n        Dim s(n) As Double\n        Dim i(n) As Double\n        Dim r(n) As Double\n        Dim j As Integer\n        Dim imax as double\n        \n        Dt = tm\/n\n        \n        j=1\n        imax = i0\n        s(0) = s0\n        i(0) = i0\n        r(0) = s0-i0\n        While j <=n\n            s(j)=s(j-1)-b*Dt*s(j-1)*i(j-1)\n            i(j)=i(j-1)+Dt*(b*s(j-1)*(i(j-1))-a*i(j-1))\n            r(j)=r(j-1)+Dt*i(j-1)*a\n            if (i(j) > imax) then imax = i(j)\n            j=j+1\n        End While\n        Epidemic = Math.Round(imax,0)\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350192,"user_id":53,"body":"Imports System\n\nClass Epidem\n    \n    Shared Function Epidemic(ByVal tm As Integer, ByVal n As Integer, ByVal s0 As Integer, ByVal i0 As Integer, ByVal b As Double, ByVal a As Double) As Integer\n        \n        Dim dt As Double = tm \/ CDbl(n)\n        Dim s As Double() = New Double(n + 1 - 1) {}\n        s(0) = s0\n        Dim i As Double() = New Double(n + 1 - 1) {}\n        i(0) = i0\n        Dim r As Double() = New Double(n + 1 - 1) {}\n        r(0) = 0\n        Dim t As Double() = New Double(n + 1 - 1) {}\n        t(0) = 0\n        Dim k As Integer = 1\n\n        While k < n + 1\n            t(k) = k * dt\n            k += 1\n        End While\n\n        k = 0\n        Dim mx As Double = -1\n\n        While k < n\n            s(k + 1) = s(k) - dt * b * s(k) * i(k)\n            i(k + 1) = i(k) + dt * (b * s(k) * i(k) - a * i(k))\n            r(k + 1) = r(k) + dt * i(k) * a\n            If i(k + 1) > mx Then mx = i(k + 1)\n            k += 1\n        End While\n\n        Return CInt(mx)\n    End Function\n        \nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"56b5afb4ed1f6d5fb0000991":[{"id":350193,"user_id":492,"body":"Imports System\nImports System.Linq\n\nPublic Module Revrot\n    Private Function SplitEqual(ByVal str As String, ByVal sz As Integer) As String()\n\t    Dim k As Integer = Math.floor(str.Length \/ sz)\n        Return Enumerable.Range(0, k).[Select](Function(i) str.Substring(i * sz, sz)).ToArray()\n    End Function\n    Public Function RevRot(ByVal strng As String, ByVal sz As Integer) As String\n        If (sz <= 0) OrElse (strng.Equals(\"\")) OrElse (sz > strng.Length) Then Return \"\"\n        Dim arr As String() = SplitEqual(strng, sz)\n        Dim arrnew As String() = New String(arr.Length - 1) {}\n        For i As Integer = 0 To arr.Length - 1\n            Dim u As Char() = arr(i).ToCharArray()\n            Dim sm As Integer = 0\n            For j As Integer = 0 To u.Length - 1\n                Dim k As Integer = CInt(Char.GetNumericValue(u(j)))\n                sm += k * k * k\n            Next\n            If sm Mod 2 = 0 Then\n                Array.Reverse(u)\n                arrnew(i) = New String(u)\n            Else\n                arrnew(i) = arr(i).Substring(1) & arr(i)(0)\n            End If\n        Next\n        Return String.Join(\"\", arrnew)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350194,"user_id":null,"body":"Imports System\n\nPublic Module Revrot\n    Function sum_digits(num As String) As Integer\n        Dim result = 0\n        For Each c In num\n            result += CInt(CStr(c))\n        Next\n        Return result\n    End Function\n    Public Function RevRot(ByVal strng As String, ByVal sz As Integer) As String\n        Dim l = strng.Length\n        If sz <= 0 Or l = 0 Or sz > l Then Return \"\"\n        Dim chunks = New List(Of String)\n        For i = 0 To l Step sz\n            If i + sz <= l Then\n                chunks.Add(strng.Substring(i, sz))\n            End If\n        Next\n        Dim answer = \"\"\n        For Each chunk In chunks\n            If sum_digits(chunk) Mod 2 = 0 Then\n                For i = chunk.Length - 1 To 0 Step -1\n                    answer = answer & chunk(i)\n                Next\n            Else\n                answer = answer & chunk.Substring(1) & chunk.Substring(0, 1)\n            End If\n        Next\n        Return answer\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350195,"user_id":null,"body":"Imports System\n\nPublic Module Revrot\n    \n    Public Function RevRot(ByVal strng As String, ByVal sz As Integer) As String\n        Dim sOut As String = \"\"\n\n        If strng = \"\" Or sz <= 0 Or sz > strng.Length Then\n            Return sOut\n        End If\n\n        For i = 0 To (strng.Length \\ sz) * sz - 1 Step sz\n            sOut &= ChunkProcessing(strng.Substring(i, sz))\n        Next i\n\n        Return sOut\n\n    End Function\n\n    Private Function ChunkProcessing(ByVal s As String) As String\n\n        ' If a chunk represents an integer such as the sum of the cubes of its digits is divisible by 2, reverse that chunk;\n        Dim sum As Integer = 0\n\n        For i = 0 To s.Length - 1\n            sum += AscW(s(i)) ^ 3\n        Next i\n\n        If (sum Mod 2) = 0 Then\n            Return s.ToCharArray().Reverse().ToArray()\n        Else\n            Return s.Substring(1) & s(0)\n        End If\n\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350196,"user_id":null,"body":"Imports System\n\nPublic Module Revrot\n        Public Function Len(ByVal word As String) As INteger\n            Dim count As INteger = 0\n            For each letter in word\n                count += 1\n            Next\n            return count\n        End Function\n\n        Public Function Right(ByVal word As String, ByVal number As INteger, ByVal length As Integer) As String\n            Dim finalString As String = \"\"\n            For i = 0 to number - 1\n                finalString = word(length - i - 1) & finalstring\n            Next\n            return finalstring\n        End Function\n\n        Public FUnction Left(ByVal word As String, ByVal number As Integer) As String\n            Dim finalString As String = \"\"\n            for i = 0 to number - 1\n                finalString &= word(i)\n            Next\n            return finalstring\n        End Function\n    \n        Public Function RevRot(ByVal strng As String, ByVal sz As Integer) As String\n        If sz <= 0 Then\n            Return \"\"\n        ElseIf sz > Len(Strng) Then\n            Return \"\"\n        End If\n\n        Dim chunks As New List(Of String)\n        Dim stringLength As Integer = len(strng)\n        Do Until stringlength < sz\n            chunks.Add(Left(strng, sz))\n            strng = Right(strng, stringlength - sz, stringlength)\n            stringlength -= sz\n        Loop\n        Dim finalString As String = \"\"\n\n        For Each chunk In chunks\n            If GetEvenCubeSum(chunk) Then\n                For i = sz - 1 To 0 Step -1\n                    finalString &= chunk(i)\n                Next\n            Else\n                finalString &= Right(chunk, sz - 1, sz) & Left(chunk, 1)\n            End If\n        Next\n\n        Return finalString\n    End Function\n\n    Function GetEvenCubeSum(ByVal chunk As String) As Boolean\n        Dim sum As Integer = 0\n        For Each digit In chunk\n            sum += ((CInt(CStr(digit))) ^ 3) mod 10\n        Next\n        Return sum Mod 2 = 0\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350197,"user_id":null,"body":"Imports System\n\nPublic Module Revrot\n    Public Function RevRot(ByVal strng As String, ByVal sz As Integer) As String\n\n\n        If strng.Count < sz Or strng = \"\" Or sz <= 0 Then\n            Return \"\"\n        End If\n\n        Dim listOfDigit = strng.Select(Function(v) v)\n        Dim result = \"\"\n        Dim index = 0\n\n        While index + sz < listOfDigit.Count\n            Dim subString = String.Join(\"\", listOfDigit.Skip(index).Take(sz))\n            result += MakeOperation(subString)\n            index += sz\n        End While\n\n        Return result\n    End Function\n\n\n    Public Function MakeOperation(input As String) As String\n        If input.Select(Function(d) Char.GetNumericValue(d)).Sum() Mod 2 = 0 Then\n            Return String.Join(\"\", input.Select(Function(c) c).Reverse())\n        End If\n        Dim res = input.Skip(1).ToList\n        res.Add(input(0))\n        Return String.Join(\"\", res)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350198,"user_id":null,"body":"Imports System\n\nPublic Module Revrot\n    Public Function RevRot(ByVal str As String, ByVal sz As Integer) As String\n        If str.Length < sz Or sz = 0 Then Return \"\"\n        \n        Dim chunks(str.Length \\ sz - 1) As String\n        Dim chars(sz - 1) As Char\n        Dim total, digit As Integer\n            \n        For index = 0 To (str.Length \\ sz - 1)\n            chunks(index) = Mid(str, index * sz, (index + 1) * sz - 1)\n        Next index\n        \n        For index = 0 To (chunks.Length - 1)\n        \n            total = 0\n            For count = 0 To (chunks(index).Length - 1)\n                digit = AscW(chunks(index)(count)) - 48\n                total += digit ^ 3\n            Next count\n    \n            If total Mod 2 = 0 Then\n                chars = chunks(index).ToCharArray()\n                Array.Reverse(chars)\n                chunks(index) = String.Join(\"\", chars)\n            Else\n                chunks(index) = Mid(chunks(index), 1, chunks(index).Length - 1) & Mid(chunks(index), 0, 0)\n            End If\n        Next index\n    \n        Return String.Join(\"\", chunks)\n    End Function\n    \n    Private Function Mid(ByVal str As String, ByVal first As Integer, ByVal last As Integer) As String\n        Dim res As String = \"\"\n        For index = first To last\n            res &= str(index)\n        Next index\n        Return res\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350199,"user_id":null,"body":"Imports System\n\nPublic Module Revrot\n    Public Function RevRot(ByVal strng As String, ByVal sz As Integer) As String\n        Dim Modified As String = \"\"\n        Dim Separated As New List(Of String)\n        Dim SumOfCubes As Integer\n        Dim Result As String = \"\"\n\n        If sz = 0 Or sz > strng.Length Then\n            Return Result\n        End If\n\n        If strng.Length Mod sz <> 0 Then\n            Modified = strng.Substring(0, strng.Length - (strng.Length Mod sz))\n        Else\n            Modified = strng\n        End If\n\n        For i = 0 To Modified.Length - 1 Step sz\n            Separated.Add(Modified.Substring(i, sz))\n        Next\n\n        If Separated.Item(Separated.Count - 1).Length < sz Then\n            Separated.RemoveAt(Separated.Count - 1)\n        End If\n\n        For i = 0 To Separated.Count - 1\n            SumOfCubes = 0\n            For j = 0 To Separated.Item(i).Length - 1\n                SumOfCubes += Separated.Item(i).Substring(j, 1) ^ 3\n            Next\n            If SumOfCubes Mod 2 = 0 Then\n                Dim Reversed As String = \"\"\n                For j = 0 To Separated.Item(i).Length - 1\n                    Reversed = Separated.Item(i).Substring(j, 1) & Reversed\n                Next\n                Result &= Reversed\n            Else\n                Dim left As String = \"\"\n                left = Separated.Item(i).Substring(1, sz - 1) & Separated.Item(i).Substring(0, 1)\n                Result &= left\n            End If\n        Next\n    Return Result\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350200,"user_id":null,"body":"Imports System\nImports Microsoft.VisualBasic\nImports Microsoft.VisualBasic.Strings\n\nPublic Module Revrot\n\n    Function Reverse(Byval s As String) as String\n        Dim rslt As String = \"\"\n        Dim sLen As Integer = s.Length()\n        for i as integer = 1 to s.Length()\n            rslt &= s.SubString(sLen-i, 1)\n        next\n        return rslt\n    End Function\n    \n    Function Rotate(ByVal s As String) As String\n        return s.SubString(1) & s.SubString(0, 1)\n    End Function\n\n    Function CubeSumEven(ByVal s as string) As Boolean\n        dim rslt as Boolean = True\n        for i as integer = 1 to s.Length()\n            dim digit as integer = CInt(s.SubString(i-1, 1))\n            if digit mod 2 <> 0 then 'cubing does not change odd\/evenness'\n                rslt = not rslt\n            end if\n        next\n        return rslt\n    End Function\n    \n    Public Function RevRot(ByVal strng As String, ByVal sz As Integer) As String\n        if sz<=0 then return \"\"\n        dim pos as integer = 1\n        dim sLen as integer = strng.Length()\n        dim rslt as string = \"\"\n        do while pos+sz < sLen+1\n            dim chunk as string = strng.SubString(pos-1, sz)\n            if cubesumeven(chunk) then\n                rslt &= Reverse(chunk)\n            else\n                rslt &= Rotate(chunk)\n            end if\n            \n            pos += sz\n        loop\n        return rslt\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350201,"user_id":null,"body":"Public Module Revrot\n    Public Function RevRot(ByVal strng As String, ByVal sz As Integer) As String\n\n        Dim result As String = String.Empty\n\n        If sz <= 0 Or sz > strng.Length Then\n            Return String.Empty\n        End If\n\n        Dim chunks() = GetWholeChunks(strng, sz)\n\n        For t As Integer = 0 To chunks.Length - 1\n            If (AreCubedDigitsDivisibleByTwo(chunks(t))) Then\n                chunks(t) = ReverseChunk(chunks(t))\n            Else\n                chunks(t) = RotateChunkLeft(chunks(t))\n            End If\n\n            result += chunks(t)\n        Next t\n\n        Return result\n\n    End Function\n\n    Private Function RotateChunkLeft(chunk As String) As String\n\n        Return chunk.Substring(1, chunk.Length - 1) + chunk.Substring(0, 1)\n\n    End Function\n\n    Private Function ReverseChunk(chunk As String) As String\n\n        Return String.Join(\"\", chunk.Reverse())\n\n    End Function\n\n    Private Function GetWholeChunks(strng As String, chunkSize As Integer) As String()\n\n        strng = strng.Substring(0, strng.Length - (strng.Length Mod chunkSize))\n\n        Return Enumerable.Range(0, strng.Length \/ chunkSize) _\n                        .Select(Function(x) strng.Substring(x * chunkSize, chunkSize)).ToArray()\n\n    End Function\n\n    Private Function AreCubedDigitsDivisibleByTwo(chunk As String) As Boolean\n\n        Dim cubeTotal As Integer\n\n        For Each c As Char In chunk\n            Dim number As Integer = Integer.Parse(c)\n            cubeTotal += number * number * number\n        Next\n\n        Return cubeTotal Mod 2 = 0\n\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350202,"user_id":null,"body":"Imports System\n\nPublic Module Revrot\n    Public Function RevRot(ByVal strng As String, ByVal sz As Integer) As String\n        if sz<=0 or strng.length()=0 or sz>strng.length()\n            return \"\" \n        else\n            'split string into array to work \n            dim numChunks as integer = math.floor(strng.length()\/sz)\n            dim chunks(numChunks-1)\n            for i as integer = 0 to numChunks-1\n                dim digits = strng.substring(i*sz,sz).ToCharArray\n                dim cubes as integer = 0\n            \n                for j as integer = 0 to digits.length-1\n                    cubes += Integer.Parse(digits(j))^3\n                next\n                \n                if cubes\/2 mod 1 = 0 'divisible by 2\n                    Array.Reverse(digits)\n            \n                else\n                    'store first digit in temp, remove from array then append back\n                    dim temp = digits(0)\n                    digits = new string(digits).Remove(0,1).ToCharArray()\n                    digits = new string(digits).Insert(sz-1,temp).ToCharArray()\n                end if\n        \n                chunks(i) = new String(digits)\n            next\n    \n            return String.Join(\"\", chunks)\n    \n        end if\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"56b8903933dbe5831e000c76":[{"id":350203,"user_id":53,"body":"Imports System.Collections.Generic\nImports System.Linq\nImports System\n\nModule ReadySet\n    Function Spoonerize(ByVal str As String) As String\n        Dim words = str.Split()\n        Dim parts = New String() {String.Concat(words.Last().Take(1).Concat(words.First().Skip(1))), String.Concat(words.First().Take(1).Concat(words.Last().Skip(1)))}\n        Return String.Format(\"{0} {1}\", parts)\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350204,"user_id":null,"body":"Imports System\n\nModule ReadySet\n    Function Spoonerize(ByVal str As String) As String\n        dim ret as string = \"\"\n        dim words as string() = str.Split(\" \")\n        ret = words(1).substring(0,1) & words(0).substring(1)\n        ret &= \" \"\n        ret &= words(0).substring(0,1) & words(1).substring(1)       \n        \n        Return ret\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350205,"user_id":null,"body":"Imports System\nImports System.Linq\n\nModule ReadySet\n    Function Spoonerize(ByVal str As String) As String\n        Dim words = str.Trim().Split(\" \")\n        \n        If Not words.Length = 2 Then\n            Throw New ArgumentException(\"Description specified that there will always be two words, but received \" + words.Length + \" words.\")\n        End If\n        \n        Dim firstWordFirstLetter = words(0).Substring(0, 1)\n        Dim secondWordFirstLetter = words(1).Substring(0, 1)\n        Dim firstWordAfterFirstLetter = words(0).Substring(1)\n        Dim secondWordAfterFirstLetter = words(1).Substring(1)\n        \n        words(0) = secondWordFirstLetter + firstWordAfterFirstLetter\n        words(1) = firstWordFirstLetter + secondWordAfterFirstLetter\n        \n        Return String.Join(\" \", words)\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350206,"user_id":209,"body":"Imports System\nImports System.Text.RegularExpressions\n\nModule ReadySet\n    Function Spoonerize(ByVal str As String) As String\n        Return Regex.Replace(str, \"(.)(.+ )(.)(.+)\", \"$3$2$1$4\")\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350207,"user_id":null,"body":"Imports System\n\nModule ReadySet\n    Function Spoonerize(ByVal str As String) As String\n        \n        Dim words() As String = str.Split()\n        \n        Dim first_word As String = words(0)\n        Dim second_word As String = words(1)       \n                \n        Return second_word(0) & first_word.Substring(1) & _\n               \" \" & _\n               first_word(0) & second_word.Substring(1)\n        \n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350208,"user_id":null,"body":"Imports System\n\nModule ReadySet\n    Function Spoonerize(ByVal str As String) As String\n        Dim words = str.Split(\" \")\n        Dim w00 = words(0).Substring(0, 1)\n        Dim w01 = words(0).Substring(1)\n        Dim w10 = words(1).Substring(0, 1)\n        Dim w11 = words(1).Substring(1)\n        Return w10 & w01 & \" \" & w00 & w11\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350209,"user_id":null,"body":"Imports System\n\nModule ReadySet\n    Function Spoonerize(ByVal str As String) As String\n        dim arr(2) as string\n        dim spoon as string\n        spoon = \"\"\n        arr = str.Split(\" \")\n        spoon += arr(1).chars(0)\n        spoon += arr(0).substring(1) + \" \"\n        spoon += arr(0).chars(0)\n        spoon += arr(1).substring(1)\n        Return spoon\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350210,"user_id":null,"body":"Imports System\n\nModule ReadySet\n    Function Spoonerize(ByVal str As String) As String\n        \n    Return ($\"{str(str.IndexOf(\" \") + 1)}{str.Substring(1, str.IndexOf(\" \") - 1)} {str(0)}{str.Substring(str.IndexOf(\" \") + 2)}\")\n        \n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350211,"user_id":null,"body":"Imports System\n\nModule ReadySet\n    Function Spoonerize(ByVal str As String) As String\n        Dim words = str.Split(\" \"c)\n        Dim left = words(1).Chars(0) & words(0).Substring(1)\n        Dim right = words(0).Chars(0) & words(1).Substring(1)\n        return left & \" \" & right\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350212,"user_id":null,"body":"Imports System\n\nModule ReadySet\n    Function ReplaceFirst(text As String, oldChar As String, newChar As String) As String\n        Dim pos = text.IndexOf(oldChar)\n        Return If(pos < 0, text, text.Substring(0, pos) + newChar + text.Substring(pos + oldChar.Length))\n    End Function\n        \n    Function Spoonerize(ByVal str As String) As String\n        Dim sep As String() = str.Split(\" \")\n        Dim repl As Char = sep(0)(0)\n        sep(0) = ReplaceFirst(sep(0), repl, sep(1)(0))\n        sep(1) = ReplaceFirst(sep(1), sep(1)(0), repl)\n        Return String.Join(\" \", sep)\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"56baeae7022c16dd7400086e":[{"id":350213,"user_id":null,"body":"Public Module PhoneDir\n    Public Function Phone(ByVal strng As String, ByVal num As String) As String\n        Dim l = strng.Length\n        Dim check_num = \"+\" & num\n        Dim n_matches = (l - strng.Replace(check_num, \"\").Length) \\ check_num.Length\n        If n_matches = 0 Then\n            Return \"Error => Not found: \" & num\n        End If\n        If n_matches > 1 Then\n            Return \"Error => Too many people: \" & num\n        End If\n        Dim matched = \"\"\n        For Each record In strng.Split(vbLf)\n            If record.IndexOf(check_num) <> -1 Then\n                matched = record\n                Exit For\n            End If\n        Next\n        matched = matched.Replace(check_num, \"\")\n        Dim name_L = matched.IndexOf(\"<\")\n        Dim name_R = matched.IndexOf(\">\")\n        Dim target_name = matched.Substring(name_L + 1, name_R - name_L - 1)\n        matched = matched.Replace(target_name, \"\").Replace(\"_\", \" \")\n        Dim address = \"\"\n        For Each c In matched\n            If Char.IsLetterOrDigit(c) Or c = \" \" Or c = \".\" Or c = \"-\" Then\n                address = address & c\n            End If\n        Next\n        address = address.Replace(\"  \", \" \").Trim\n        Return \"Phone => \" & num & \", Name => \" & target_name & \", Address => \" & address\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350214,"user_id":null,"body":"Imports System\nImports System.Text.RegularExpressions\nPublic Module PhoneDir\n    Public Function Phone(ByVal strng As String, ByVal num As String) As String\n       ' your code\n         strng = Regex.Replace(strng, \" +\", \" \")\n        strng = Regex.Replace(strng, \"[ ]{0,}-[ ]{0,}\", \"-\")\n        strng = strng.Replace(\"_\", \" \")\n        Dim l() As String = strng.Split(New String() {vbLf}, StringSplitOptions.RemoveEmptyEntries)\n        Dim spl() As String = strng.Split(New String() {\"+\" & num}, StringSplitOptions.RemoveEmptyEntries)\n        If spl.Count > 2 Then\n            Return String.Format(\"Error => Too many people: {0}\", num)\n        ElseIf spl.Count = 1 Then\n            Return String.Format(\"Error => Not found: {0}\", num)\n        End If\n        Dim idx As Integer = Array.FindIndex(l, Function(s) s.Contains(\"+\" &num))\n        If idx <> -1 Then\n            Dim p As String = \"Phone => {0}, Name => {1}, Address => {2}\"\n            Dim ps As String = l(idx)\n            Dim rgx As New Regex(\"([0-9]{1,2}-[0-9]{3}-[0-9]{3}-[0-9]{4})|(<[\\w\\s'{0,1}]+>)\", RegexOptions.IgnoreCase)\n            Dim m As MatchCollection = rgx.Matches(ps)\n            Dim name, phne, addr As String\n            name = \"\"\n            phne = \"\"\n            addr = \"\"\n            For Each n In m\n                Dim s As String = n.ToString\n                If s.ToString.Contains(\"<\") Then\n                    name = s.Replace(\"<\", \"\").Replace(\">\", \"\")\n                Else\n                    phne = s\n                End If\n\n                ps = ps.Replace(s, \"\")\n            Next\n            ps = Regex.Replace(ps, \"[^a-zA-Z0-9\\.\\- ]\", \"\")\n            ps = Regex.Replace(ps, \"[ ]+\", \" \")\n            addr = ps.Trim\n            Return String.Format(p, phne, name, addr)\n        Else\n            Return \"\"\n        End If\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350215,"user_id":null,"body":"Imports System\n\nPublic Module PhoneDir\n    Public Function Phone(strng As String, num As String) As String\n        Dim rPhone = New System.Text.RegularExpressions.Regex(\"\\s*\\S*(\\+\\d\\d?-\\d{3}-\\d{3}-\\d{4})\\S*\\s*\")\n        Dim rName = New System.Text.RegularExpressions.Regex(\"<(.*)>\")\n        Dim res As String = Nothing\n        For Each line in strng.Split(vbLf)\n            If line.Contains(\"+\" + num) Then\n                If res IsNot Nothing Then Return \"Error => Too many people: \" + num\n                Dim name = rName.Match(line).Groups(1).Value\n                line = rPhone.Replace(line, \" \")\n                line = line.Replace(\"<\" + name + \">\", \"\").Replace(\"_\", \" \").Replace(\",\", \"\").Replace(\";\", \"\").Trim(\" \", \"*\", \"\/\").Replace(\"  \", \" \")\n                res = String.Format(\"Phone => {0}, Name => {1}, Address => {2}\", num, name, line)\n            End If\n        Next\n        If res IsNot Nothing Then Return res\n        Return \"Error => Not found: \" + num\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350216,"user_id":null,"body":"Imports System\nImports System.Text.RegularExpressions\n\nPublic Module PhoneDir\n    Public Function Phone(ByVal strng As String, ByVal num As String) As String\n        Dim numPattern as string = \"\\+([0-9]*-[0-9]{3}-[0-9]{3}-[0-9]{4})\"\n        Dim namePattern as string = \"<(.*)>\"\n        Dim addressPattern as string = \"([a-zA-Z0-9-.]+)\"\n        Dim inputs as string() = strng.split(vbLf)\n        Dim name as string = \"\"\n        Dim address as string = \"\"\n        Dim result as string = \"\"\n        Dim matchFound as boolean = false\n        \n        for each input in inputs\n            for each numMatch in Regex.Matches(input, numPattern, RegexOptions.IgnoreCase)\n                if matchFound and (numMatch.Groups(1).Value.ToString = num) then\n                    result = \"Error => Too many people: \"+num\n                elseif(numMatch.Groups(1).Value.ToString = num) and not matchFound then    \n                    matchFound = True\n                    name = Regex.Match(input, namePattern, RegexOptions.IgnoreCase).Groups(1).Value.ToString\n            \n                    dim tempAddress as string = \"\"\n                    tempAddress = Regex.Replace(input, numPattern, \"\")\n                    tempAddress = Regex.Replace(tempAddress, namePattern, \"\")\n                    for each mtch in Regex.Matches(tempAddress, addressPattern, RegexOptions.IgnoreCase)\n                        address = address + mtch.Groups(1).Value.ToString + \" \"\n                    next\n                    \n                    address = address.trim()\n        \n                    result = \"Phone => \" + num + \", Name => \" + name + \", Address => \" + address\n                elseif not matchFound then\n                    result = \"Error => Not found: \"+num\n                end if\n            next \n        next\n\n        return result\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350217,"user_id":492,"body":"Imports System\nImports System.Text.RegularExpressions\n\nPublic Module PhoneDir\n    Public Function Phone(ByVal strng As String, ByVal num As String) As String\n        Dim clean As String = Regex.Replace(strng, \"[^-0-9a-z\\s+A-Z\n<>.']\", \" \")\n        Dim matches As MatchCollection = Regex.Matches(clean, \".*\\+\" & num & \"\\b.*\")\n        Dim matched As String = \"\"\n        Dim i As Integer = 0\n        For Each match As Match In matches\n            For Each capture As Capture In match.Captures\n                i += 1\n                matched = capture.Value\n            Next\n        Next\n        If i > 1 Then Return \"Error => Too many people: \" & num\n        If i = 0 Then Return \"Error => Not found: \" & num\n        Dim c As String = Regex.Replace(matched, \"\\+\" & num, \"\")\n        Dim pattern = New Regex(\"<.*>\")\n        Dim name As String = \"\"\n        Dim r As Match = pattern.Match(c)\n        name = r.Groups(0).Value.Trim()\n        Dim ad As String = Regex.Replace(Regex.Replace(c, \"<.*>\", \"\"), \"\\s+\", \" \").Trim()\n        Return \"Phone => \" & num & \", Name => \" & name.Substring(1, name.Length - 2) & \", Address => \" & ad\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"56bdd0aec5dc03d7780010a5":[{"id":350218,"user_id":645,"body":"Public Module Kata\n    Public Function NextHigher(ByVal n As Integer) As Integer\n        Dim o = n And -n\n        Return n + o Or ((n Xor n + o) \\ o >> 2)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350219,"user_id":null,"body":"Public Module Kata\n    Public Function NextHigher(ByVal n As Integer) As Integer\n        Dim s As String\n        Dim idx0 As Integer = -1\n        Dim idx1 As Integer = -1\n        Dim cntr As Integer = 0\n        \n        s = \"0\" & Convert.ToString(n, 2)\n        \n        Dim arr = s.ToArray()\n        For i = arr.Length - 1 To 0 Step -1\n            If arr(i) = \"1\" Then\n                If idx1 = -1 Then\n                    idx1 = i\n                ElseIf idx0 = -1 Then\n                    cntr += 1\n                End If\n            ElseIf arr(i) = \"0\" AndAlso idx0 = -1 AndAlso idx1 <> -1 Then\n                idx0 = i\n            End If\n        Next i\n        \n        arr(idx0) = \"1\"\n\n        For i = arr.Length - 1 To idx0 + 1 Step -1\n            arr(i) = \"0\"\n        Next i\n\n        For i = arr.Length - 1 To arr.Length - cntr Step -1\n            arr(i) = \"1\"\n        Next i\n\n        Return Convert.ToInt64(New String(arr), 2)\n        \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350220,"user_id":null,"body":"Public Module Kata\n    Public Function NextHigher(ByVal n As Integer) As Integer\n        ' your code here\n        Console.WriteLine(\"Decimal input: \" & n)\n        Dim binary = ToBits(n)\n        binary = \"0\" & binary\n        Console.WriteLine(\"Binary input: \" & binary)\n        Dim next_higher = Higher(binary)\n        Console.WriteLine(\"Binary output: \" & next_higher)\n        Dim number = ToDecimal(next_higher)\n        Console.WriteLine(\"Decimal output: \" & number)\n        Return number\n    End Function\n    \n    Public Function Higher(ByVal n As String) As String\n        Dim next_higher As String = \"\"\n        Dim ones = 0\n        Dim zeros = 0\n        Dim position = 0\n        Dim swap = False\n        Dim revString As String = Reverse(n)\n        \n        For i As Long = 0 To n.Length-2\n                Dim equal = revString(i).ToString().Equals(\"1\") And revString(i+1).ToString().Equals(\"0\") And swap = False\n                If equal Then\n                    next_higher = next_higher & \"0\"\n                    next_higher = next_higher & \"1\"\n                    position = i\n                    i = i + 1\n                    swap = True\n                Else \n                    next_higher = next_higher & revString(i)\n                End If\n            Next\n    For i = 0 To position-1\n            If next_higher(i) = \"1\" Then\n                ones = ones + 1\n            Else\n                zeros = zeros + 1\n            End If\n        Next\n        Dim aux As String = String.Join(\"\", Enumerable.Repeat(\"1\", ones)) &\n            String.Join(\"\", Enumerable.Repeat(\"0\", zeros)) & next_higher.Substring(position)\n        Dim output As String = String.Join(\"\", Reverse(aux))\n        Return output\n    End Function\n    \n    Public Function ToBits(ByVal n As Integer) As String\n        Dim aux As Decimal = n\n        Dim binary As String = \"\"\n        While aux > 1\n            binary = (aux Mod 2) & binary\n            aux = Math.floor(aux \/ 2) \n        End While\n        If aux = 1 Then\n            binary = 1 & binary\n        End If\n        Return binary\n    End Function\n    \n    Public Function ToDecimal(ByVal n As String) As Integer\n        Dim number As Decimal = 0\n        n = Reverse(n)\n        For i As Long = 0 To n.Length-1\n            number = number + Math.pow(2,i)*CDec(n(i).ToString())    \n        Next\n        Return number\n    End Function \n\n    Function Reverse(ByVal value As String) As String\n        ' Convert to char array.\n        Dim arr() As Char = value.ToCharArray()\n        ' Use Array.Reverse function.\n        Array.Reverse(arr)\n        ' Construct new string.\n        Return New String(arr)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350221,"user_id":null,"body":"Public Module Kata\n    Public Function CountBits(ByVal n As Integer) As Integer \n        Dim retVal as Integer\n        While n>0\n            If n mod 2 = 1 then retVal=retVal+1\n            n = n\\2\n        End While\n        Return retVal\n    End Function\n    Public Function NextHigher(ByVal n As Integer) As Integer\n        Dim retVal as Integer\n        retVal=n+1\n        While CountBits(n)<>CountBits(retVal)\n          retVal=retVal+1\n        End While\n        Return retVal\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350222,"user_id":null,"body":"Public Module Kata\n    Public Function NextHigher(ByVal iInput As Integer) As Integer\n        'Convert integer to binary string and make sure there is a \n        'leading 0 to assist with finding at least one 01.\n        Dim sOutput As String = \"0\" & Convert.ToString(iInput, 2) \n        \n        'Extract the first part of the binary number up to last 01.\n        'This part remains unchanged.\n        Dim sPrefix As String = sOutput.substring(0, sOutput.lastindexof(\"01\")) \n        \n        'Extract the trailing part of the binary number after the last 01 found.\n        'Sort this part to create a minimum binary number with the same number of 1's and 0's.\n        Dim cSuffix() As Char = sOutput.substring(sOutput.lastindexof(\"01\") + 2).ToCharArray()\n        Array.Sort(cSuffix) \n        Dim sSuffix As String = New String(cSuffix)\n        \n        'Combine the prefix and suffix with the last found 01, replaced with a 10.\n        sOutput = sPrefix & \"10\" & sSuffix\n        \n        'Convert back to an integer and return the value\n        Return Convert.ToInt32(sOutput, 2)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350223,"user_id":53,"body":"Public Module Kata\n    Public Function NextHigher(ByVal n As Integer) As Integer\n        If n = 0 Then Return 0\n        Dim r = n And -n\n        Dim p = n + r\n        Dim q = (n Xor p) \/ (4 * r)\n        Return (p Or q) - 1\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350224,"user_id":null,"body":"Public Module Kata\n    Public Function NextHigher(ByVal n As Integer) As Integer\n        Dim Bits As New BitArray(BitConverter.GetBytes(n))\n        Dim ICount As Integer = 0\n        Dim NCount As Integer = 0\n        For Each Bit As Boolean In Bits\n            If Bit Then ICount += 1\n        Next\n        Dim I As Integer = 0\n        While ICount <> NCount Or I = 0\n            I += 1\n            NCount = 0\n            Dim NBits As New BitArray(BitConverter.GetBytes(n + I))\n\n            For Each Bit As Boolean In NBits\n                If Bit Then NCount += 1\n            Next\n        End While\n\n        Return n + I\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350225,"user_id":null,"body":"Public Module Kata\n    Public Function NextHigher(ByVal n As Integer) As Integer\n        ' your code here\n        dim target as integer = n + 1\n        Dim bin As String = Convert.ToString(n, 2).PadLeft(32, \"0\"c) '32 bits\n        bin = bin.replace(\"1\",\"\")\n        dim targetBin as string\n        dim i as integer\n        for i = n + 1 to Integer.MaxValue\n            targetBin = Convert.ToString(i, 2).PadLeft(32, \"0\"c)\n            targetBin = targetBin.replace(\"1\",\"\")\n            if bin.length = targetBin.length then\n                exit for\n            end if\n        next i\n        return i   \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350226,"user_id":null,"body":"Public Module Kata\n\n    Public Function NextHigher(ByVal n As Integer) As Integer\n\n        Const ON_BIT = \"1\"c\n        Dim onBitsTarget = CountSubString(IntegerToBinary(n), ON_BIT)\n\n        For t As Integer = n + 1 To Integer.MaxValue\n            If CountSubString(IntegerToBinary(t), ON_BIT) = onBitsTarget Then\n                Return t\n            End If\n        Next\n\n        Throw New Exception(\"Something went kaboom!\")\n\n    End Function\n\n    Public Function CountSubString(stringIn As String, stringToCount As String) As Integer\n\n        Dim occurrences As Integer = 0\n        Dim stringToCountLength As Integer = stringToCount.Length\n\n        For t As Integer = 0 To stringIn.Length - stringToCountLength\n            If stringIn.Substring(t, stringToCountLength) = stringToCount Then occurrences += 1\n        Next\n\n        Return occurrences\n\n    End Function\n\n    Public Function IntegerToBinary(numberIn As Integer) As String\n\n        Const BINARY_BASE = 2\n\n        Return Convert.ToString(numberIn, BINARY_BASE)\n\n    End Function\n\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350227,"user_id":492,"body":"Public Module Kata\n    Public Function NextHigher(ByVal value As Integer) As Integer\n        Dim a As Integer = Convert.ToString(value, 2).Where(Function(x) x = \"1\"c).Count()\n        Do\n            value += 1\n        Loop While Convert.ToString(value, 2).Where(Function(x) x = \"1\"c).Count() <> a\n        Return value\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"56c04261c3fcf33f2d000534":[{"id":350228,"user_id":null,"body":"Public Module Magnets\n    Public Function Doubles(ByVal maxk As Integer, ByVal maxn As Integer) As Double\n        Dim answer As Double = 0\n        For k = 1 To maxk\n            For n = 2 To maxn + 1\n                answer += n ^ (-2 * k) \/ k\n            Next\n        Next\n        Return answer\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350229,"user_id":168,"body":"Imports System\n\nPublic Module Magnets\n    Public Function Doubles(ByVal maxk As Integer, ByVal maxn As Integer) As Double\n        dim r = 0.0\n        for k = 1 to maxk\n            for n = 1 to maxn\n                r += 1.0 \/ (k * Math.pow(n + 1, 2 * k))\n            next n\n        next k\n        return r\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350230,"user_id":null,"body":"Imports System\n\nPublic Module Magnets\n    Public Function Doubles(ByVal maxk As Integer, ByVal maxn As Integer) As Double\n        Dim totalForce As Decimal = 0\n\n        For k = 1 To maxk\n\n            Dim rowSum As Decimal = 0\n\n            For n = 1 To maxn\n                Dim force = 1 \/ (k * Math.Pow(Convert.ToDecimal(n + 1), Convert.ToDecimal(2 * k)))\n\n                rowSum += force\n            Next\n\n            totalForce += rowSum\n\n        Next\n\n        Return totalForce\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350231,"user_id":null,"body":"Imports System\n\nPublic Module Magnets\n    Public Function Doubles(ByVal maxk As Integer, ByVal maxn As Integer) As Double\n\t    Dim sum As Double = 0.0\n\t    Dim sum2 As Double\n\t    Dim val As Double\n\t    Dim i As Integer = 1\n\t    Do While i < maxk + 1\n\t\t    sum2 = 0.0\n\t\t    Dim j As Integer = 1\n\t\t    Do While j < maxn + 1\n\t\t\t    val = Math.Pow((j + 1),(-2 * i))\n\t\t\t    sum2 = sum2 + val\n\t\t\t    j += 1\n\t\t    Loop\n\t\t    sum = sum + (sum2 \/ i)\n\t\t    i += 1\n\t    Loop\n\t    Return sum\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350232,"user_id":null,"body":"Imports System\n\nPublic Module Magnets\n    Public Function Doubles(ByVal maxk As Integer, ByVal maxn As Integer) As Double\n        Dim k As Integer\n        Dim n As Integer\n        Dim u As Double\n        Dim v As Double\n        Dim s As Double\n        \n        k = 1\n        s = 0\n        \n        While k <= maxk\n            u = 0\n            n = 1\n            While n <= maxn\n                v = 1\/(k*Math.Pow (n+1,2*k))\n                u = u + v\n                n = n + 1\n            End While\n            s = s + u\n            k = k + 1\n        End While\n        Return s\n        \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350233,"user_id":null,"body":"Imports System\n\nPublic Module Magnets\n    Public Function Doubles(ByVal maxk As Integer, ByVal maxn As Integer) As Double\n        Dim res = 0R\n\n        For i = 1 To maxk\n            For j = 1 To maxn\n                res += 1R \/ (i * (Math.Pow(j + 1, 2 * i)))\n            Next\n        Next\n\n        return res\n\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350234,"user_id":53,"body":"Imports System\n\nPublic Class Magnets\n    Public Shared Function Doubles(ByVal maxk As Integer, ByVal maxn As Integer) As Double\n        Dim sum = 0R\n\n        For k = 1 To maxk\n\n            For n = 1 To maxn\n                sum += 1R \/ (k * (Math.Pow(n + 1, 2 * k)))\n            Next\n        Next\n\n        Return sum\n    End Function\nEnd Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350235,"user_id":null,"body":"Imports System\n\nPublic Module Magnets\n    Public Function Doubles(ByVal maxk As Integer, ByVal maxn As Integer) As Double\n        \n        dim ret as double =0\n        dim k as integer \n        dim n as integer\n        for k = 1 to maxk\n            for n = 2 to maxn+1\n                ret += 1\/(k*math.pow(n,2*k))\n            next\n        next\n        \n        return ret\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350236,"user_id":null,"body":"Imports System\nPublic Module Magnets\n    Public Function Doubles(ByVal maxk As Integer, ByVal maxn As Integer) As Double\n        Dim dblSum As Double = 0.0R\n        For k As Int32 = 1 To maxk\n            For n As Int32 = 1 To maxn\n                dblSum += 1 \/ (k * ((n + 1) ^ (2 * k)))\n            Next\n        Next\n        Return dblSum\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350237,"user_id":492,"body":"Imports System\n\nPublic Module Magnets\n    Public Function Doubles(ByVal maxk As Integer, ByVal maxn As Integer) As Double\n        Dim sum As Double = 0.0\n        For k As Integer = 1 To maxk\n            For n As Integer = 1 To maxn\n                sum += 1 \/ (k * Math.Pow(n + 1, 2 * k))\n            Next\n        Next\n        Return sum\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"56cac350145912e68b0006f0":[{"id":350238,"user_id":null,"body":"Imports System\n\nPublic Module Updown\n    Public Function Arrange(ByVal strng As String) As String\n        Dim arr() As String = strng.Split(\" \")\n        Dim swap As String\n        \n        For i = 0 To arr.Length - 2\n          If i Mod 2 = 0 AndAlso arr(i).Length > arr(i + 1).Length Then\n            swap = arr(i)\n            arr(i) = arr(i + 1)\n            arr(i + 1) = swap\n          ElseIf i Mod 2 <> 0 AndAlso arr(i).Length < arr(i + 1).Length Then\n            swap = arr(i)\n            arr(i) = arr(i + 1)\n            arr(i + 1) = swap\n          End If  \n        Next i\n        \n        For i = 0 To arr.Length - 1\n          If i Mod 2 <> 0\n            arr(i) = arr(i).ToUpper\n          Else\n            arr(i) = arr(i).ToLower\n          End If  \n        Next i  \n        \n        Return String.Join(\" \", arr)  \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350239,"user_id":null,"body":"Imports System\n\nPublic Module Updown\n    Public Function Arrange(ByVal strng As String) As String\n        Dim words = strng.Split\n        Dim l = words.Length\n        Dim temp = \"\"\n        For i = 0 To l - 2\n            If i Mod 2 = 0 Then\n                If words(i).Length > words(i + 1).Length Then\n                    temp = words(i)\n                    words(i) = words(i + 1)\n                    words(i + 1) = temp\n                End If\n            Else\n                If words(i).Length < words(i + 1).Length Then\n                    temp = words(i)\n                    words(i) = words(i + 1)\n                    words(i + 1) = temp\n                End If\n            End If\n        Next\n        For i = 0 To l - 1\n            If i Mod 2 = 0 Then\n                words(i) = words(i).ToLower()\n            Else\n                words(i) = words(i).ToUpper()\n            End If\n        Next\n        Return String.Join(\" \", words)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350240,"user_id":null,"body":"Imports System\n\nPublic Module Updown\n    Public Function Arrange(ByVal strng As String) As String\n        Dim t() As String\n        Dim laikinas As String\n        Dim p As String = \"\"\n        Dim k As Integer = 0\n        t = strng.Split(\" \")\n\n        For i = 0 To t.Length - 2\n            If k = 0 Then\n                k = 1\n                If t(i).Length > t(i + 1).Length Then\n                    laikinas = t(i)\n                    t(i) = t(i + 1)\n                    t(i + 1) = laikinas\n                End If\n            ElseIf k = 1 Then\n                k = 0\n                If t(i).Length < t(i + 1).Length Then\n                    laikinas = t(i)\n                    t(i) = t(i + 1)\n                    t(i + 1) = laikinas\n                End If\n            End If\n            If i Mod 2 = 1 Then\n                t(i) = t(i).ToUpper\n            Else\n                t(i) = t(i).ToLower\n            End If\n            p &= t(i) & \" \"\n        Next\n        If (t.Length - 1) Mod 2 = 1 Then\n            t(t.Length - 1) = t(t.Length - 1).ToUpper\n        Else\n            t(t.Length - 1) = t(t.Length - 1).ToLower\n        End If\n        p &= t(t.Length - 1)\n    Return p\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350241,"user_id":null,"body":"Imports System\n\nPublic Module Updown\n    Public Function Arrange(ByVal strng As String) As String\n        Dim wordsTab As String() = strng.Split(\" \"c)\n        For i As Integer = 0 To wordsTab.Length - 2\n            If ((i Mod 2 <> 0) AndAlso (wordsTab(i).Length < wordsTab(i + 1).Length)) OrElse ((i Mod 2 = 0) AndAlso (wordsTab(i).Length > wordsTab(i + 1).Length)) Then\n                Dim tmp As String = wordsTab(i + 1)\n                wordsTab(i + 1) = wordsTab(i)\n                wordsTab(i) = tmp\n            End If\n        Next\n        Dim word As String() = New String(wordsTab.Length - 1) {}\n        For j As Integer = 0 To wordsTab.Length - 1\n            If j Mod 2 = 0 Then\n                word(j) = wordsTab(j).ToLower()\n            Else\n                word(j) = wordsTab(j).ToUpper()\n            End If\n        Next\n        Return String.Join(\" \", word)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350242,"user_id":null,"body":"Imports System\n\nPublic Module Updown\n    Public Function Arrange(ByVal strng As String) As String\n        Dim str = strng.Split()\n        Dim aux = str(0)\n\n        For i As Integer = 1 To str.Length - 1\n            If ((i Mod 2) = 0 And aux.Length < str(i).Length) Then\n                str(i - 1) = str(i)\n                str(i) = aux\n            ElseIf ((i Mod 2) <> 0 And aux.Length > str(i).Length) Then\n                str(i - 1) = str(i)\n                str(i) = aux\n            Else\n                aux = str(i)\n            End If\n\n        Next\n\n        Dim newString As String = str(0).ToLower()\n        For i As Integer = 1 To str.Length - 1\n            If ((i Mod 2) = 0) Then\n                newString = String.Concat(newString, \" \", str(i).ToLower())\n            Else\n                newString = String.Concat(newString, \" \", str(i).ToUpper())\n            End If\n        Next\n\n        Return newString\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350243,"user_id":null,"body":"Imports System\n\nPublic Module Updown\n    Public Function Arrange(ByVal strng As String) As String\n        \n        Dim words = strng.split(\" \")\n        \n        Dim newWords(words.length) As String\n        \n        For i = 0 To words.length - 2        \n            If i Mod 2 = 0\n                If words(i).length > words(i+1).length\n                    newWords(i) = words(i+1).ToLower\n                    Change(i, words)\n                Else\n                    newWords(i) = words(i).ToLower\n                End If\n            Else\n                If words(i).length < words(i+1).length\n                    newWords(i) = words(i+1).ToUpper\n                    Change(i, words)\n                Else\n                    newWords(i) = words(i).ToUpper\n                End If         \n            End If\n        \n            If words.length = i + 2\n                If i Mod 2 = 0\n                    newWords(i + 1) = words(i + 1).ToUpper\n                Else \n                    newWords(i + 1) = words(i + 1).ToLower\n                End If\n            \n                Exit For\n            End If\n        Next\n    \n        Return String.Join(\" \", newWords).Trim\n    End Function\n\n    Public Sub Change(i As Integer, words As String())\n        Dim tempWord As String = words(i)\n        words(i)     = words(i + 1)\n        words(i + 1) = tempWord\n    End Sub\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350244,"user_id":null,"body":"Imports System\n\nPublic Module Updown\n Public Function Arrange(ByVal strng As String) As String\n        Dim arr As String() = strng.Split(\" \")\n        For i As Integer = 0 To arr.Length - 1\n            If i = arr.Length - 1 Then\n                Exit For\n            End If\n            If Not (i - 1) Mod 2 = 0 Then\n                If arr(i).Length > arr(i + 1).Length Then\n                    Dim tempval As String = arr(i)\n                    arr(i) = arr(i + 1)\n                    arr(i + 1) = tempval\n                End If\n            Else\n                If arr(i).Length < arr(i + 1).Length Then\n                    Dim tempval As String = arr(i)\n                    arr(i) = arr(i + 1)\n                    arr(i + 1) = tempval\n                End If\n            End If\n        Next\n        For i As Integer = 0 To arr.Length - 1\n            If Not (i - 1) Mod 2 = 0 Then\n                arr(i) = arr(i).ToLower()\n            Else\n                arr(i) = arr(i).ToUpper()\n            End If\n        Next\n        Return String.Join(\" \",arr)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350245,"user_id":null,"body":"Imports System\n\nPublic Module Updown\n    Public Function Arrange(ByVal strng As String) As String\n                Dim strngArr As Array = strng.Split(\" \")\n        Dim newStrngArr As Array = strngArr\n        Dim consStrng As String = strngArr(0)\n        Dim strngOutput As String = Nothing\n\n        For i = 1 To strngArr.Length - 1\n            If i Mod 2 = 1 Then\n\n                If consStrng.Length <= strngArr(i).Length Then\n                    newStrngArr(i - 1) = consStrng\n                    consStrng = strngArr(i)\n                Else\n                    newStrngArr(i - 1) = strngArr(i)\n                    newStrngArr(i) = consStrng\n                End If\n            Else\n                If consStrng.Length >= strngArr(i).Length Then\n                    newStrngArr(i - 1) = consStrng\n                    consStrng = strngArr(i)\n                Else\n                    newStrngArr(i - 1) = strngArr(i)\n                    newStrngArr(i) = consStrng\n                End If\n            End If\n        Next\n\n         For i2 = 0 To newStrngArr.Length - 1\n            If strngOutput = Nothing Then\n                strngOutput += (newStrngArr(i2)).ToLower\n            Else\n                If i2 Mod 2 = 1 Then\n                    strngOutput += \" \" + (newStrngArr(i2)).ToUpper\n                Else\n                    strngOutput += \" \" + (newStrngArr(i2)).ToLower\n                End If\n            End If\n        Next\n        Return strngOutput\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350246,"user_id":null,"body":"Imports System\n\nPublic Module Updown\n    Public Function Arrange(ByVal strng As String) As String\n        Dim totalWord as integer, tempWord as String, NewWords as String\n        Dim SplitWord() as String\n        Dim i as integer, j as integer\n        \n        totalWord = strng.length - strng.replace(\" \", \"\").length + 1\n        SplitWord = strng.Split(\" \")\n        For i = 0 to totalWord - 2\n            Select Case (i + 2) Mod 2\n            Case 0\n                if SplitWord(i).length > SplitWord(i+1).length then\n                    tempWord = SplitWord(i)\n                    SplitWord(i) = SplitWord(i+1).toUpper()\n                    SplitWord(i+1) = TempWord.toLower()\n                end if\n            Case 1\n                if SplitWord(i).length < SplitWord(i+1).length then\n                    tempWord = SplitWord(i)\n                    SplitWord(i) = SplitWord(i+1).toUpper()\n                    SplitWord(i+1) = TempWord.toLower() \n                end if\n            End Select\n        next i\n        For j = 0 to totalWord - 1\n            Select Case (j + 2) Mod 2\n            Case 0\n                SplitWord(j) = SplitWord(j).tolower()\n            Case 1\n                SplitWord(j) = SplitWord(j).toUpper()\n            End Select\n        next j\n                NewWords = String.join(\" \", SplitWord)\n        Return NewWords\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350247,"user_id":null,"body":"Imports System\n\nPublic Module Updown\n    Public Function Arrange(ByVal strng As String) As String\n        Dim stringList() as String = strng.Split()\n        \n        Dim temp as string = \"\"\n        Dim counter as integer\n        \n        For counter = 0 to stringList.length-2\n        \n            if counter mod 2 = 0 Then\n            \n                if stringList(counter).length > stringList(counter+1).length Then\n                    temp = stringList(counter)\n                    stringList(counter) = stringList(counter+1)\n                    stringList(counter+1) = temp \n                End If\n                \n            Else \n            \n                if stringList(counter).length < stringList(counter+1).length Then\n                    temp = stringList(counter)\n                    stringList(counter) = stringList(counter+1)\n                    stringList(counter+1) = temp  \n                End If\n            \n            End if \n        Next \n        \n        temp = stringList(0).toLower()\n        \n        For counter = 1 to stringList.length-1\n            if counter mod 2 = 0 Then\n                temp += \" \" & stringList(counter).toLower()\n            Else\n                temp += \" \" & stringList(counter).toUpper()\n            End If\n        Next\n        \n        Return temp\n        \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"56dec885c54a926dcd001095":[{"id":350248,"user_id":602,"body":"Public Module Opposite\n    Public Function Number(ByVal num As Double)\n      return -num\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350249,"user_id":null,"body":"Public Module Opposite\n    Public Function Number(ByVal num As Double)\n        return num * -1\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350250,"user_id":527,"body":"Public Module Opposite\n    Public Function Number(ByVal num As Double)\n        Number = -num\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350251,"user_id":null,"body":"Public Module Opposite\n    Public Function Number(ByVal num As Double)\n        ' Code here\n        If num < 0 Then\n            Return math.Abs(num)\n        Else \n            Return -num\n        End If\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350252,"user_id":null,"body":"Public Module Opposite\n    Public Function Number(ByVal num As Double)\n        if num > 0 Then\n            \n            return -num\n        \n        Else If num < 0 Then \n                \n            return num * -1\n                \n        Else\n                return 0\n            \n        End If \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350253,"user_id":null,"body":"Public Module Opposite\n    Public Function Number(ByVal num As Double)\n        RETURN NUM*-1\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350254,"user_id":null,"body":"Public Module Opposite\n    Public Function Number(ByVal num As Double)\n        ' Code here\n        return num - num - num\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350255,"user_id":390,"body":"Public Module Opposite\n    Public Function Number(ByVal num As Double)\n        return 0-num\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350256,"user_id":null,"body":"Public Module Opposite\n    Public Function Number(ByVal num As Double)\n        Number = num\n        Number = num*-1\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350257,"user_id":null,"body":"Public Module Opposite\n    Public Function Number(ByVal num As Double)\n        Dim i As Double = num*2\n        If num < 0 Then\n            If num = -1 Then\n                Return num+2\n            Else\n                Return num-i\n            End If\n        Else\n            If num = 1 Then\n                Return num-2\n            Else\n                Return num-i\n            End If\n        End If    \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"56e3cd1d93c3d940e50006a4":[{"id":350258,"user_id":492,"body":"Imports System\n\nPublic Module Valley\n    Public Function MakeValley(ByVal arr As Integer()) As Integer()\n        Dim lg As Integer = arr.Length\n        If lg <= 1 Then Return arr\n        Dim result As Integer() = New Integer(lg - 1) {}\n        Array.Sort(arr, Function(a, b) b.CompareTo(a))\n        Dim start As Integer = 0\n        Dim nd As Integer = lg - 1\n        Dim i As Integer = 1\n        While i <= lg - 1\n            result(start) = arr(i - 1)\n            result(nd) = arr(i)\n            start += 1\n            nd -= 1\n            i += 2\n        End While\n        If i - 1 = lg - 1 Then result(start) = arr(i - 1)\n        Return result\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350259,"user_id":null,"body":"Imports System\n\nPublic Module Valley\n    Public Function MakeValley(ByVal arr As Integer()) As Integer()\n\n        Dim a As Integer = arr.Length-1\n        Dim b(a) As Integer\n        Dim mid as Integer = a\/2\n        dim count as integer = 0\n        Dim flag as integer = 1\n        System.Array.Sort(arr)\n        \n        \n        for i = a to 0 Step -1\n            if flag = 1 then\n            \n                b(count) = arr(i)\n                count = count + 1\n                flag = 0\n            \n            else \n                b(a - count + 1)=arr(i)\n                flag = 1\n            \n            end if\n        next i\n        \n        \n        return b\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350260,"user_id":null,"body":"Imports System\nImports System.Linq\n\nPublic Module Valley\n    Public Function MakeValley(ByVal arr As Integer()) As Integer()\n        Dim copy As Integer() = arr.ToArray()\n        Array.Sort(copy)\n        \n        Dim i As Integer = copy.Length - 1\n        Dim a As Integer = 0\n        Dim b As Integer = copy.Length - 1\n        Dim result As Integer() = New Integer(copy.Length - 1) {}\n        \n        While i > 0\n            result(a) = copy(i)            \n            result(b) = copy(i - 1)\n            a += 1\n            b -= 1\n            i -= 2\n        End While\n\n        If i = 0 Then\n            result(b) = copy(i)\n        End If\n\n        return result\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350261,"user_id":null,"body":"Public Module Valley\n    Public Function MakeValley(ByVal arr As Integer()) As Integer()\n        Array.Sort(arr)\n        Dim answer As New List(Of Integer)\n        Dim l = arr.Length()\n        For i = l - 1 To 0 Step -2\n            answer.Add(arr(i))\n        Next\n        For i = l Mod 2 To l - 1 Step 2\n            answer.Add(arr(i))\n        Next\n        Return answer.ToArray()\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350262,"user_id":null,"body":"Imports System\n\nPublic Module Valley\n    Public Function MakeValley(ByVal arr As Integer()) As Integer()\n        Dim res(arr.Length - 1) as Integer\n        Dim indexer As Integer\n        \n        indexer = 1\n        Array.Sort(arr)\n        For i = 0 To (arr.Length \\ 2) - 1\n            res(i) = arr(arr.Length - indexer)\n            indexer = indexer + 1\n            res(res.Length - i - 1) = arr(arr.Length - indexer)\n            indexer = indexer + 1\n        Next\n    \n        If arr.Length mod 2 = 1 Then \n            res(arr.Length \\ 2) = arr(0)\n        End If\n    \n        return res\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350263,"user_id":null,"body":"Imports System\n\nPublic Module Valley\n    Public Function MakeValley(ByVal arr As Integer()) As Integer()\n        \n        Dim arrTemp As Integer() = arr.ToArray()\n        Array.Sort(arrTemp)\n        Array.Reverse(arrTemp)\n\n        Dim ptrL%, ptrR%\n        ptrL = arrTemp.GetLowerBound(0)\n        ptrR = arrTemp.GetUpperBound(0)\n\n        For i = 0 To arrTemp.GetUpperBound(0) Step 2\n            arr(ptrL) = arrTemp(i)\n            arr(ptrR) = arrTemp(i + 1)\n            ptrL += 1\n            ptrR -= 1\n\n            If ptrL > ptrR Then\n                Exit For\n            ElseIf ptrL = ptrR Then\n                arr(ptrL) = arrTemp(i + 2)\n                Exit For\n            End If\n        Next i\n\n        Return arr        \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350264,"user_id":null,"body":"Imports System\n\nPublic Module Valley\n    Public Function MakeValley(ByVal arr As Integer()) As Integer()\n        Dim arrLenght As Integer\n        arrLenght = arr.Length\n        Dim arrTemp(arrLenght - 1) As Integer\n        Array.Sort(arr)\n        Dim bottomIndex As Integer = arrLenght \\ 2\n        Dim wingToWrite As String\n\n        If (arrLenght Mod 2) Then ' If the length of the array is odd\n            wingToWrite = \"LeftWing\"\n        Else wingToWrite = \"RightWing\"\n        End If\n\n        Dim CurPtr% = bottomIndex\n\n        For i = 0 To arrLenght - 1\n            If wingToWrite = \"RightWing\" Then\n                arrTemp(CurPtr + i) = arr(i)\n                wingToWrite = \"LeftWing\"\n                CurPtr += i\n\n            ElseIf wingToWrite = \"LeftWing\" Then\n                arrTemp(CurPtr - i) = arr(i)\n                wingToWrite = \"RightWing\"\n                CurPtr -= i\n\n            End If\n        Next\n\n        Return arrTemp\n                 \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350265,"user_id":null,"body":"Imports System\n\nPublic Module Valley\n    Public Function MakeValley(ByVal arr As Integer()) As Integer()\n        ' your code\n        Dim res, left, right As Integer()\n        ReDim res(arr.Length - 1), left(arr.Length \\ 2 - 1), right(arr.Length \\ 2 - 1)\n        \n        For index = 0 To (arr.Length - (arr.Length Mod 2) - 2) Step 2\n            right(index \\ 2) = arr(index)\n            left(index \\ 2) = arr(index + 1)\n        Next index\n        Array.Reverse(left)\n        \n        If arr.Length Mod 2 = 1 Then res(arr.Length \\ 2) = arr(arr.Length - 1)\n        For index = 0 To (right.Length - 1)\n            res(index) = right(index)\n        Next index\n        For index = 0 To (left.Length - 1)\n            res(index + arr.Length \\ 2 + (arr.Length Mod 2)) = left(index)\n        Next index\n\n        Return res\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350266,"user_id":53,"body":"Imports System\nImports System.Collections.Generic\nImports System.Linq\nImports System.Threading\n\nPublic Class Valley\n    Public Shared Function MakeValley(ByVal arr As Integer()) As Integer()\n        Dim xs = arr.OrderByDescending(Function(x) x).ToArray()\n        Dim ys = arr.[Select](Function(__) 0).ToArray()\n        Dim k As Integer = 0, i As Integer = 0, j As Integer = xs.Length - 1\n\n        While k < xs.Length\n\n            If k Mod 2 = 0 Then\n                ys(Math.Min(Interlocked.Increment(i), i - 1)) = xs(k)\n            Else\n                ys(Math.Max(Interlocked.Decrement(j), j + 1)) = xs(k)\n            End If\n\n            k += 1\n        End While\n\n        Return ys\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350267,"user_id":null,"body":"Imports System\n\nPublic Module Valley\n    Public Function MakeValley(ByVal arr As Integer()) As Integer()\n       dim a as integer = arr.count-1 \n       dim b(a) as integer \n       dim mid as integer =a\/2\n        dim count as integer  =0 \n        dim flag as integer =1\n        System.Array.Sort(arr)\n        \n        for i =a to 0 Step -1 \n         if flag = 1 then \n            b(count)=arr(i)\n            count=count + 1 \n            flag =0 \n         else \n            \n            b(a-count +1) = arr(i)\n            flag =1\n         end if \n        \n        next i \n    \n    return b \n        \n        \n        \n        \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"56e7d40129035aed6c000632":[{"id":350268,"user_id":null,"body":"Imports System\nImports System.Numerics\n\nPublic Module Easyline\n    \n    Public Function EasyLine(ByVal n As Integer) As BigInteger     \n    \n        Dim res As BigInteger = 1\n    \n        For i As Integer = 1 To n-1\n            res = res*(n+i)\/i\n        Next\n  \n        Return 2*res\n    \n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350269,"user_id":492,"body":"Imports System\nImports System.Numerics\n\nPublic Module Easyline\n    Private Function choose(ByVal n As Integer, ByVal p As Integer) As BigInteger\n        Dim ret As BigInteger = New BigInteger(1)\n        For i As Integer = 0 To p - 1\n            ret = BigInteger.Multiply(ret, n - i)\n            ret = BigInteger.Divide(ret, i + 1)\n        Next\n        Return ret\n    End Function\n    Public Function EasyLine(ByVal n As Integer) As BigInteger\n        Return choose(2 * n, n)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350270,"user_id":492,"body":"Imports System\nImports System.Numerics\n\nPublic Module Easyline\n    Private Function choose(ByVal n As Integer, ByVal p As Integer) As BigInteger\n        Dim ret As BigInteger = New BigInteger(1)\n        For i As Integer = 0 To p - 1\n            ret = BigInteger.Multiply(ret, n - i)\n            ret = BigInteger.Divide(ret, i + 1)\n        Next\n        Return ret\n    End Function\n    Public Function EasyLine(ByVal n As Integer) As BigInteger\n        Return choose(2 * n, n)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350271,"user_id":null,"body":"Imports System\nImports System.Numerics\n\nPublic Module Easyline\n    \n    Public Function EasyLine(ByVal n As Integer) As BigInteger\n        dim sum as BigInteger = 0\n        if n=0 then return 1\n        For i as integer = 0 to n\n            sum+=(Factorial(n)\/Factorial(n-i)\/Factorial(i))\n        Next i\n        return sum\n    End Function\n    \n    Public Function Factorial(byval number as integer) as BigInteger\n        dim fact as BigInteger\n        fact = 1        \n        for i as integer = 1 to number\n            fact=fact*i\n        next\n    return fact*fact\n    End function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350272,"user_id":null,"body":"Imports System\nImports System.Numerics\n\nPublic Module Easyline\n    \n    Public Function EasyLine(ByVal n As Integer) As BigInteger\n        If n > 0\n            Return BigInteger.Divide(EasyLine (n - 1) * (4 * n - 2), n)\n        Else\n            Return 1\n        End If\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350273,"user_id":null,"body":"Imports System\nImports System.Numerics\n\nPublic Module Easyline\n    \n    Public Function EasyLine(ByVal n As Integer) As BigInteger\n        Dim sum as BigInteger\n        \n        for i = 1 to n\n            sum += (Fact(n)\/(Fact(i)*Fact(n-i)))*(Fact(n)\/(Fact(i)*Fact(n-i))) \n        next\n    \n        return sum + 1\n    End Function\n\n    Public Function Fact(ByVal f as integer) as BigInteger\n        dim prod as BigInteger = 1\n        for i = 1 to f\n            prod = prod * i\n        next\n        return prod\n    End function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350274,"user_id":null,"body":"Imports System\nImports System.Numerics\n\nPublic Module Easyline\n    \n    Function EasyLine(n As Integer)\n\n        Dim SumOfSquares As BigInteger\n        \n        For i = 0 To n\n            SumOfSquares += ElementOfPascalTriangle(n, i) * ElementOfPascalTriangle(n, i)\n        Next i\n\n        Return SumOfSquares\n\n    End Function\n\n    Function ElementOfPascalTriangle(row%, pos%)\n    \n        Dim C As BigInteger\n        Dim i As Long\n        C = 1\n\n        If (row - pos > pos) Then\n            pos = row - pos\n        End If\n\n        For i = (pos + 1) To row\n            C = C * i\n        Next i\n\n        For i = 1 To (row - pos)\n            C = C \/ i\n        Next i\n\n        Return C\n\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350275,"user_id":null,"body":"Imports System\nImports System.Numerics\n\nPublic Module Easyline\n    \n    Public Function EasyLine(ByVal n As Integer) As System.Numerics.BigInteger\n        Dim result As System.Numerics.BigInteger = BigInteger.One\n        For index As Integer = 1 To n\n            result =  result*(n+index)\/index\n        Next\n        return result\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350276,"user_id":null,"body":"'Memoization for the win :)\n\nImports System\nImports System.Numerics\nImports System.Collections.Generic\n\nPublic Module Easyline\n    Private factorials As Dictionary(Of Integer, BigInteger) = new Dictionary(of Integer, BigInteger)\n    Private Function Factorial(ByVal n As Integer) As BigInteger\n        If n = 1 or n = 0 Then Return 1\n        If factorials.ContainsKey(n) Then Return factorials(n)\n        factorials(n) = Factorial(n - 1) * n\n        Return factorials(n)\n    End Function\n    \n    Private binomialCoeficients As Dictionary(Of Tuple(Of Integer, Integer), BigInteger) = new Dictionary(Of Tuple(Of Integer, Integer), BigInteger)\n    Private Function BinomialCoeficient(ByVal n As Integer, Byval k as Integer) As BigInteger\n        Dim t as Tuple(Of Integer, Integer) = Tuple.Create(n, k)\n        If binomialCoeficients.ContainsKey(t) Then Return binomialCoeficients(t)\n        binomialCoeficients(t) = Factorial(n) \/ (Factorial(k) * Factorial(n - k))\n        Return binomialCoeficients(t)\n    End Function\n    \n    Public Function EasyLine(ByVal n As Integer) As BigInteger\n        EasyLine = 0\n        For i As Integer = 0 To n\n                EasyLine += (BinomialCoeficient(n, i) * BinomialCoeficient(n, i))\n        Next I\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350277,"user_id":null,"body":"Imports System\nImports System.Numerics\n\nPublic Module Easyline\n    \n    Public Function EasyLine(ByVal n As Integer) As BigInteger\n    \n        If n = 0 Then\n          Return 1\n        End If\n    \n        Dim res As BigInteger = 1\n    \n        For i As Integer = 1 To n-1\n            res = res*(n+i)\/i\n        Next\n  \n        Return 2*res\n    \n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"56eb0be52caf798c630013c0":[{"id":350278,"user_id":null,"body":"Public Module Kata\n    Public Function UnluckyDays(ByVal Year As Integer) as Integer\n        Dim count As Integer=0\n        For month As Integer=1 to 12\n        Dim nowDate As New Date(Year, month, 13)\n        if nowDate.DayOfWeek=5\n            count+=1\n            End if\n        Next\n    Return count\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350279,"user_id":null,"body":"Imports System\nImports System.Linq\n\nPublic Module Kata\n    Public Function UnluckyDays(ByVal year As Integer) as Integer\n        Return Enumerable.Range(1, 12).Count(Function(month) new DateTime(year, month, 13).DayOfWeek = DayOfWeek.Friday)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350280,"user_id":null,"body":"Public Module Kata\n    Public Function UnluckyDays(ByVal Year As Integer) as Integer\n         Dim DateF As datetime = New DateTime(Year, 1, 1)\n        Dim Cant As Integer = 0\n        For i As Integer = 1 To 365\n            DateF = DateF.AddDays(1)\n            If (DateF.DayOfWeek = 5) And (DateF.ToString(\"dd\") = 13) Then\n                Cant += 1\n            End If\n        Next\n        Return Cant\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350281,"user_id":null,"body":"Public Module Kata\n    Public Function UnluckyDays(ByVal Year As Integer) as Integer\n        ' Implement me! :)\n        \n        For iMonth = 1 To 12\n        Dim mydate As new DateTime(Year, iMonth, 13)\n           If mydate.DayOfWeek = DayOfWeek.Friday Then\n           Unluckydays += 1\n        End If\n        Next iMonth\n    \n    Return UnluckyDays\n        \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350282,"user_id":null,"body":"Imports System.Globalization\nPublic Module Kata\n    Public Function UnluckyDays(ByVal Year As Integer) as Integer\n        Dim answer = 0\n        For m = 1 To 12\n            Dim date_str = m & \"\/13\/\" & Year\n            Dim dateValue As DateTime = DateTime.ParseExact(date_str, \"M\/dd\/yyyy\", CultureInfo.InvariantCulture)\n            If dateValue.DayOfWeek = 5 Then answer += 1\n        Next\n        Return answer\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350283,"user_id":null,"body":"Public Module Kata\n    Public Function UnluckyDays(ByVal Year As Integer) as Integer\n        ' Implement me! :)\n        Dim unluckyCount as integer = 0\n\t\tFor x as integer = 1 to 12\t\t\n\t\t\tIf Date.ParseExact(String.Format(\"13\/{0:00}\/{1}\", x, year), \"dd\/MM\/yyyy\", Nothing).ToString(\"dddd\") = \"Friday\" Then unluckyCount += 1\n\t\tNext\n\t\treturn unluckyCount\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350284,"user_id":null,"body":"Public Module Kata\n    Public Function UnluckyDays(ByVal Year As Integer) as Integer\n        dim i as integer\n        dim qtd as byte\n        dim data as date\n        i = 1\n        do until i > 12\n            data = Year & \"-\" & i & \"-\" & 13\n            if data.DayOfWeek = DayOfWeek.Friday then\n                qtd = qtd + 1\n            end if\n            i = i + 1\n        loop\n        return qtd\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350285,"user_id":null,"body":"Public Module Kata\n    Public Function UnluckyDays(ByVal Year As Integer) as Integer\n\n        Dim count%\n\n        For i = 1 To 12\n            \n            if Convert.ToDateTime($\"{year}\/{i}\/13\").DayOfWeek = 5 Then count += 1\n            \n        Next i\n        \n        Return count\n\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350286,"user_id":null,"body":"Public Module Kata\n    Public Function UnluckyDays(ByVal Year As Integer) as Integer\n        dim count as integer\n        \n        for month as integer = 1 to 12\n            dim dt as DateTime = new DateTime(Year, month, 13, 0, 0, 0)\n            if dt.dayOfWeek = DayOfWeek.Friday then\n                count = count + 1\n            end if\n        next\n    \n        return count\n        \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350287,"user_id":null,"body":"Public Module Kata\n    Public Function UnluckyDays(ByVal Year As Integer) as Integer\n        Dim dc As New Globalization.GregorianCalendar\n\n        Dim count as Integer\n        \n        For i = 1 To 12\n            Dim dt As New DateTime(Year, i, 13)\n            If dc.GetDayOfWeek(dt) = DayOfWeek.Friday Then count = count + 1\n        Next\n        \n        Return count\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"56eb16655250549e4b0013f4":[{"id":350288,"user_id":null,"body":"Public Module Kata\n    Function is_lunar(year as Integer) As Boolean\n        Return year Mod 4 = 0 And (year Mod 100 > 0 Or year Mod 400 = 0)\n    End Function\n    Function MostFrequentDays(year as Integer) As String()\n        Dim days = {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"}\n        Dim cnt = 0\n        For i = 1 To year - 1\n            cnt += If(is_lunar(i), 2, 1)\n        Next\n        Dim idx = cnt Mod 7\n        If is_lunar(year) Then\n            If idx <> 6 Then\n                Return {days(idx), days(idx + 1)}\n            Else\n                Return {\"Monday\", \"Sunday\"}\n            End If\n        End If\n        Return {days(idx)}\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350289,"user_id":null,"body":"Public Module Kata\n    Function MostFrequentDays(year as Integer) As String()\n        \n        Dim firstDay As String = (Convert.ToDateTime($\"{year}\/1\/1\").DayOfWeek).ToString()\n        Dim secondDay As String = (Convert.ToDateTime($\"{year}\/1\/2\").DayOfWeek).ToString()\n\n        If Not DateTime.IsLeapYear(year) Then\n            MostFrequentDays = {firstDay}\n        ElseIf firstDay = \"Sunday\" Then\n            MostFrequentDays = {secondDay, firstDay}\n        Else\n            MostFrequentDays = {firstDay, secondDay}\n        End If\n\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350290,"user_id":160,"body":"Option Strict On\nImports System\nPublic Module Kata\n    Function MostFrequentDays(year as Integer) As String()\n        Dim Date1, Date2, Date3 As Date\n        Dim Result As String()\n        Dim Days As String() = {\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"}\n        Date1 = new DateTime(year, 1, 1, 12, 1, 0)\n        Date2 = new DateTime(year, 12, 30, 12, 1, 0)\n        Date3 = new DateTime(year, 12, 31, 12, 1, 0)\n        If (Date3-Date1).Days=364 Then\n            Result = {Days(Date3.DayOfWeek)}\n        Else\n            If Date2.DayOfWeek=0 Then\n                Result = {Days(Date3.DayOfWeek),Days(Date2.DayOfWeek)}\n            Else\n                Result = {Days(Date2.DayOfWeek),Days(Date3.DayOfWeek)}\n            End If\n        End If\n        Return Result\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350291,"user_id":null,"body":"Public Module Kata\n    Function MostFrequentDays(year as Integer) As String()\n        ' Implement me! :)\n        Dim date_t As Date\n        Dim dayMap As New Dictionary(Of DayOfWeek, Integer)\n        For Each day As DayOfWeek In New DayOfWeek() {DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday, DayOfWeek.Saturday, DayOfWeek.Sunday}\n            dayMap.Add(day, 0)\n        Next\n        For i As Integer = 1 To 12\n            For j As Integer = 1 To Date.DaysInMonth(year, i)\n                date_t = New Date(year, i, j)\n                Select Case date_t.DayOfWeek\n                    Case DayOfWeek.Monday\n                        dayMap(DayOfWeek.Monday) += 1\n                    Case DayOfWeek.Tuesday\n                        dayMap(DayOfWeek.Tuesday) += 1\n                    Case DayOfWeek.Wednesday\n                        dayMap(DayOfWeek.Wednesday) += 1\n                    Case DayOfWeek.Thursday\n                        dayMap(DayOfWeek.Thursday) += 1\n                    Case DayOfWeek.Friday\n                        dayMap(DayOfWeek.Friday) += 1\n                    Case DayOfWeek.Saturday\n                        dayMap(DayOfWeek.Saturday) += 1\n                    Case DayOfWeek.Sunday\n                        dayMap(DayOfWeek.Sunday) += 1\n                End Select\n            Next\n        Next\n        Dim sorted As Dictionary(Of DayOfWeek, Integer) = dayMap.OrderByDescending(Function(x) x.Value) _\n                                                                .ToDictionary(Function(x) x.Key, Function(x) x.Value)\n        For Each v In sorted\n            Return If(sorted.Values(0).Equals(sorted.Values(1)), New String() {sorted.Keys(0).ToString(), sorted.Keys(1).ToString()},\n                sorted.Keys.ToList().Select(Function(x) x.ToString()).ToArray().Take(1).ToArray())\n        Next\n        Return Nothing\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350292,"user_id":null,"body":"Public Module Kata\n    Function MostFrequentDays(year as Integer) As String()\n        Dim Year1 As Date = Year & \"\/01\/01\"\n        Dim Year2 As Date = Year + 1 & \"\/01\/01\"\n        Dim LastDayOfYear As TimeSpan = Year2 - Year1\n        Dim Day As String\n        Dim Monday As Integer\n        Dim Tuesday As Integer\n        Dim Wednesday As Integer\n        Dim Thursday As Integer\n        Dim Friday As Integer\n        Dim Saturday As Integer\n        Dim Sunday As Integer\n        Dim MaxDays As Integer\n        Dim Results As String = \"\"\n        Dim Result() As String\n       \n        For i = 1 To (LastDayOfYear.TotalSeconds \/ 86400)\n            If i = 1 Then\n                Day = Year1.DayOfWeek\n            Else\n                Year1 = Year1.AddDays(1)\n                Day = Year1.DayOfWeek\n            End If\n\n            Select Case Day\n                Case 0\n                    Sunday += 1\n                Case 1\n                    Monday += 1\n                Case 2\n                    Tuesday += 1\n                Case 3\n                    Wednesday += 1\n                Case 4\n                    Thursday += 1\n                Case 5\n                    Friday += 1\n                Case 6\n                    Saturday += 1\n            End Select\n        Next\n\n        MaxDays = {Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday}.Max\n\n        If MaxDays = Monday Then\n            Results = \"Monday \"\n        End If\n        If MaxDays = Tuesday Then\n            Results &= \"Tuesday \"\n        End If\n        If MaxDays = Wednesday Then\n            Results &= \"Wednesday \"\n        End If\n        If MaxDays = Thursday Then\n            Results &= \"Thursday \"\n        End If\n        If MaxDays = Friday Then\n            Results &= \"Friday \"\n        End If\n        If MaxDays = Saturday Then\n            Results &= \"Saturday \"\n        End If\n        If MaxDays = Sunday Then\n            Results &= \"Sunday\"\n        End If\n        \n        Results = Results.TrimEnd\n        Result = Results.Split(\" \")\n               \n        return Result\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350293,"user_id":null,"body":"Public Module Kata\n    Function MostFrequentDays(year as Integer) As String()\n        Dim day1 As String = New DateTime(year, 1, 1).ToString(\"dddd\")\n        Dim day2 As String = New DateTime(year, 1, 2).ToString(\"dddd\")\n        If (DateTime.IsLeapYear(year)) Then\n            If(day1 = \"Sunday\") Then\n                MostFrequentDays = {day2, day1}\n            Else\n                MostFrequentDays = {day1, day2}\n            End If\n        Else\n            MostFrequentDays = {day1}\n        End If\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350294,"user_id":null,"body":"Public Module Kata\n    Public Function MostFrequentDays(year As Integer) As String()\n\n        Dim firstDay As Date = \"01\/01\/\" + year.ToString()\n        Dim firstDayWeek As Integer = firstDay.DayOfWeek()\n        Dim daysWeek As String() = {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"}\n\n        If (firstDayWeek = 0) Then\n            firstDayWeek = 7\n        End If\n\n        Dim copiaDaysWeek As String() = New String(0) {}\n        If (firstDay.IsLeapYear(year)) Then\n            copiaDaysWeek = New String(1) {}\n            \n            If (firstDayWeek = 7) Then\n                copiaDaysWeek(0) = daysWeek(0)\n                copiaDaysWeek(1) = daysWeek(6)\n            Else\n                Array.Copy(daysWeek, firstDayWeek - 1, copiaDaysWeek, 0, 2)\n            End If\n            \n            Return copiaDaysWeek\n        End If\n\n        Array.Copy(daysWeek, firstDayWeek - 1, copiaDaysWeek, 0, 1)\n\n        Return copiaDaysWeek\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350295,"user_id":null,"body":"Imports Microsoft\nImports System\n\nPublic Module Kata\n    Function MostFrequentDays(year as Integer) As String()\n            Dim lst As List(Of DayOfWeek) = New List(Of DayOfWeek) From {New Date(year, 1, 1).DayOfWeek()}\n\n            If lst.Contains(New Date(year, 12, 30).DayOfWeek) Then\n                lst.Add(New Date(year, 12, 31).DayOfWeek)\n            End If\n            lst = lst.OrderBy(Function(x) x).ToList()\n            If lst(0) = DayOfWeek.Sunday Then\n                lst = lst.OrderByDescending(Function(x) x).ToList()\n            End If\n            Return lst.Select(Function(x) x.ToString()).ToArray()\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350296,"user_id":null,"body":"Public Module Kata\n    Function MostFrequentDays(year as Integer) As String()\n        dim dt as datetime = new datetime(year, 1, 1)\n        dim dt2 as datetime = new datetime(year, 12, 31)\n        if dt.tostring(\"dddd\") <> dt2.tostring(\"dddd\") then\n            if dt.tostring(\"dddd\") = \"Sunday\" then\n                MostFrequentDays = {dt2.tostring(\"dddd\"), dt.tostring(\"dddd\")}\n            else\n                MostFrequentDays = {dt.tostring(\"dddd\"), dt2.tostring(\"dddd\")}\n            end if \n        else\n            MostFrequentDays = {dt.tostring(\"dddd\")}\n        end if\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350297,"user_id":null,"body":"Public Module Kata\n    Function MostFrequentDays(year as Integer) As String()\n        Dim myCal As System.Globalization.GregorianCalendar = new System.Globalization.GregorianCalendar()\n        Dim days As New Dictionary(Of String, Integer)\n        Dim result as String() = nothing\n        \n        days(\"Monday\") = 0\n        days(\"Tuesday\") = 0\n        days(\"Wednesday\") = 0\n        days(\"Thursday\") = 0\n        days(\"Friday\") = 0\n        days(\"Saturday\") = 0\n        days(\"Sunday\") = 0\n        \n        for month as integer = 1 to 12\n            for day as integer = 1 to myCal.GetDaysInMonth( year, month, System.Globalization.GregorianCalendar.CurrentEra ) \n                select case myCal.GetDayOfWeek(new system.DateTime( year, month, day, new System.Globalization.GregorianCalendar() ))\n                    case 1\n                            days(\"Monday\") = CInt(days(\"Monday\"))+1\n                    case 2\n                            days(\"Tuesday\") = CInt(days(\"Tuesday\"))+1\n                    case 3\n                            days(\"Wednesday\") = CInt(days(\"Wednesday\"))+1\n                    case 4\n                            days(\"Thursday\") = CInt(days(\"Thursday\"))+1\n                    case 5\n                            days(\"Friday\") = CInt(days(\"Friday\"))+1\n                    case 6\n                            days(\"Saturday\") = CInt(days(\"Saturday\"))+1\n                    case 0\n                           days(\"Sunday\") = CInt(days(\"Sunday\"))+1\n            \n                end select  \n            next\n        next\n\n        Dim maxVal = (days.Values).Max()\n        \n        for each key in days.keys\n            if days(key) = maxVal then\n                Dim arLen = nothing\n                if result is nothing then\n                    arLen = 0\n                    redim preserve result(0)\n                else\n                    arLen = result.count\n                    redim preserve result(arLen)\n                end if\n                result(arlen) = key\n            end if\n        next\n\n        return result\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"56efab15740d301ab40002ee":[{"id":350298,"user_id":null,"body":"Imports System\n\nPublic Module Operarray\n    \n    Public Function gcdi(ByVal x As Long, ByVal y As Long) As Long\n        If x = 0 Then Return y\n\t    Return Math.Abs(gcdi(y Mod x, x))\n    End Function\n            \n    Public Function lcmu(ByVal a As Long, ByVal b As Long) As Long\n         Return Math.Abs((a \/ gcdi(a, b)) * b)\n    End Function\n            \n    Public Function som(ByVal a As Long, ByVal b As Long) As Long\n        Return a+b\n    End Function\n            \n    Public Function maxi(ByVal a As Long, ByVal b As Long) As Long\n        If a > b Then Return a Else Return b\n    End Function\n                \n    Public Function mini(ByVal a As Long, ByVal b As Long) As Long\n        If a < b Then Return a Else Return b\n    End Function\n                    \n    Public Function OperArray(ByVal fct As Func(Of Long, Long, Long), ByVal arr As Long(), ByVal init As Long) As Long()\n        Dim len As Integer = arr.GetUpperBound(0)\n        Dim result(len) As Long\n        result(0) = fct(init, arr(0))\n        For i = 1 To len\n            result(i) = fct(result(i-1), arr(i))\n        Next\n        Return result\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350299,"user_id":null,"body":"Imports System\n\nPublic Module Operarray\n    Public Function gcdi(ByVal x As Long, ByVal y As Long) As Long\n        x = Math.Abs(x)\n        y = Math.Abs(y)\n        While y > 0\n            Dim temp = x\n            x = y\n            y = temp Mod y\n        End While\n        Return x\n    End Function\n    Public Function lcmu(ByVal a As Long, ByVal b As Long) As Long\n        Return Math.Abs(a * b) \\ gcdi(a, b)\n    End Function\n    Public Function som(ByVal a As Long, ByVal b As Long) As Long\n        Return a + b\n    End Function\n    Public Function maxi(ByVal a As Long, ByVal b As Long) As Long\n        Return If(a > b, a, b)\n    End Function\n    Public Function mini(ByVal a As Long, ByVal b As Long) As Long\n        Return If(a < b, a, b)\n    End Function\n    Public Function OperArray(ByVal fct As Func(Of Long, Long, Long), ByVal arr As Long(), ByVal init As Long) As Long()\n        Dim n = init\n        Dim answer = New List(Of Long)\n        For Each x In arr\n            n = fct(n, x)\n            answer.Add(n)\n        Next\n        Return answer.ToArray()\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350300,"user_id":null,"body":"Imports System\n\nPublic Module Operarray\n    Public Function gcdi(ByVal x As Long, ByVal y As Long) As Long\n        If y <> 0\n            Return gcdi(y, x Mod y)\n        Else \n            Return Math.abs(x)\n        End If\n    End Function\n    Public Function lcmu(ByVal a As Long, ByVal b As Long) As Long\n        Return Math.abs((a*b)\/gcdi(a,b))\n    End Function\n    Public Function som(ByVal a As Long, ByVal b As Long) As Long\n        Return a + b\n    End Function\n    Public Function maxi(ByVal a As Long, ByVal b As Long) As Long\n         If a > b Then\n            Return a \n        Else \n            Return b\n        End If\n    End Function\n    Public Function mini(ByVal a As Long, ByVal b As Long) As Long\n        If a > b Then\n            Return b \n        Else \n            Return a\n        End If\n    End Function\n    Public Function OperArray(ByVal fct As Func(Of Long, Long, Long), ByVal arr As Long(), ByVal init As Long) As Long()\n        Dim nums(arr.count-1) As Long\n        For i = 0 to arr.count-1\n            If i = 0 Then\n                nums(i) = fct(init,arr(i))\n            Else \n                nums(i) = fct(nums(i-1),arr(i))\n            End If\n        Next\n        Return nums\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350301,"user_id":null,"body":"Imports System\n\nPublic Module Operarray\n    Public Function gcdi(ByVal x As Long, ByVal y As Long) As Long\n        Dim Q As Long\n        Dim z As Long\n        While y <> 0\n            Q = CLng(x\/y)\n            z = x\n            x = y\n            y = Z - Q * y\n        End While    \n        Return Math.Abs(x)\n    End Function\n    Public Function lcmu(ByVal a As Long, ByVal b As Long) As Long\n        lcmu = Math.abs(a * b)\/gcdi(a,b)\n    End Function\n    Public Function som(ByVal a As Long, ByVal b As Long) As Long\n        return a + b\n    End Function\n    Public Function maxi(ByVal a As Long, ByVal b As Long) As Long\n        return (math.Max(a,b))\n    End Function\n    Public Function mini(ByVal a As Long, ByVal b As Long) As Long\n        return (math.Min(a,b))\n    End Function\n    Public Function OperArray(ByVal fct As Func(Of Long, Long, Long), ByVal arr As Long(), ByVal init As Long) As Long()\n        Dim i As long\n        Dim ret As Long()\n        ReDim ret(arr.GetUpperBound(0))\n        ret(0) = arr(0)\n        For i = 1 To arr.GetUpperBound(0)\n            ret(i) = fct(ret(i-1), arr(i))\n        Next\n        return ret\n            \n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350302,"user_id":53,"body":"Imports System\nImports System.Linq\n\nPublic Class Operarray\n    Public Shared Function gcdi(ByVal a As Long, ByVal b As Long) As Long\n        Return If(b = 0, Math.Abs(a), gcdi(b, a Mod b))\n    End Function\n\n    Public Shared Function lcmu(ByVal a As Long, ByVal b As Long) As Long\n        Return Math.Abs(a * b) \/ gcdi(a, b)\n    End Function\n\n    Public Shared Function som(ByVal a As Long, ByVal b As Long) As Long\n        Return a + b\n    End Function\n\n    Public Shared Function maxi(ByVal a As Long, ByVal b As Long) As Long\n        Return If(a > b, a, b)\n    End Function\n\n    Public Shared Function mini(ByVal a As Long, ByVal b As Long) As Long\n        Return If(a < b, a, b)\n    End Function\n\n    Public Shared Function oper(ByVal fct As Func(Of Long, Long, Long), ByVal a As Long, ByVal b As Long) As Long\n        Return fct(a, b)\n    End Function\n\n    Public Shared Function OperArray(ByVal fct As Func(Of Long, Long, Long), ByVal arr As Long(), ByVal init As Long) As Long()\n        Dim ans = New Long(arr.Length - 1) {}\n\n        For i = 0 To arr.Length - 1\n            init = fct(init, arr(i))\n            ans(i) = init\n        Next\n\n        Return ans\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350303,"user_id":null,"body":"Imports System\n\nPublic Module Operarray\n    Public Function gcdi(ByVal x As Long, ByVal y As Long) As Long\n        x = math.abs(x)\n        y = math.abs(y)\n        \n        if y = 0 then\n            return x\n        else\n            return gcdi(y, x mod y)\n        end if\n    End Function\n    \n    Public Function lcmu(ByVal a As Long, ByVal b As Long) As Long\n        a = math.abs(a)\n        b = math.abs(b)\n        \n        return (a * b)\/gcdi(a, b)\n    End Function\n    \n    Public Function som(ByVal a As Long, ByVal b As Long) As Long\n        Dim result as long\n        result = a + b\n        \n        return result\n    End Function\n    \n    Public Function maxi(ByVal a As Long, ByVal b As Long) As Long\n        Dim result as long\n        result = math.max(a,b)\n        \n        return result\n    End Function\n    \n    Public Function mini(ByVal a As Long, ByVal b As Long) As Long\n        Dim result as long\n        result = math.min(a,b)\n        \n        return result\n    End Function\n    \n    Public Function OperArray(ByVal fct As Func(Of Long, Long, Long), ByVal arr As Long(), ByVal init As Long) As Long()\n        Dim result as long()\n        \n        ReDim result(arr.count-1)\n        \n        for i = 0 to arr.count-1\n            if i = 0 then\n                result(i) = fct(init,arr(i))\n            else\n                result(i) = fct(result(i-1),arr(i))\n            end if\n        next\n        \n        return result\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350304,"user_id":null,"body":"Imports System\n\nPublic Module Operarray\n    Public Function gcdi(ByVal a As Long, ByVal b As Long) As Long\n        a = Math.Abs(a)\n        b = Math.Abs(b)\n        \n        Dim max = Math.Max(a, b)\n        Dim min = Math.Min(a, b)\n        Dim remainder = max Mod min\n        \n        If remainder = 0\n            Return min\n        End If\n        Return gcdi(min, remainder)\n    End Function\n    \n    Public Function lcmu(ByVal a As Long, ByVal b As Long) As Long\n        Return Math.Abs(a * b) \/ gcdi(a, b)\n    End Function\n    \n    Public Function som(ByVal a As Long, ByVal b As Long) As Long\n        Return a + b\n    End Function\n    \n    Public Function maxi(ByVal a As Long, ByVal b As Long) As Long\n        Return Math.Max(a, b)\n    End Function\n    \n    Public Function mini(ByVal a As Long, ByVal b As Long) As Long\n        Return Math.Min(a, b)\n    End Function\n    \n    Public Function OperArray(ByVal fct As Func(Of Long, Long, Long), ByVal arr As Long(), ByVal init As Long) As Long()\n        Dim ret(arr.Length-1) As Long\n        \n        ret(0) = fct(init, arr(0))  \n        For i = 1 To arr.Length-1\n            ret(i) = fct(ret(i-1), arr(i))\n        Next\n        \n        Return ret\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350305,"user_id":null,"body":"Imports System\n\nPublic Module Operarray\n    Public Function gcdi(ByVal x As Long, ByVal y As Long) As Long\n        If (y = 0) Then\n            Return x\n        Else\n            Return gcdi(Math.Abs(y), x mod y)\n        End If\n    End Function\n    \n    Public Function lcmu(ByVal a As Long, ByVal b As Long) As Long\n        Return Math.Abs(a * b) \/ gcdi(a, b)\n    End Function\n    \n    Public Function som(ByVal a As Long, ByVal b As Long) As Long\n        return a + b\n    End Function\n    \n    Public Function maxi(ByVal a As Long, ByVal b As Long) As Long\n        Return Math.Max(a, b)\n    End Function\n    \n    Public Function mini(ByVal a As Long, ByVal b As Long) As Long\n        Return Math.Min(a, b)\n    End Function\n    \n    Public Function OperArray(ByVal fct As Func(Of Long, Long, Long), ByVal arr As Long(), ByVal init As Long) As Long()\n        Dim newArr(arr.Length - 1) As Long\n\n        For i = 0 To arr.length - 1\n            If (i = 0) Then\n                newArr(i) = fct(init, arr(i))\n            Else\n                newArr(i) = fct(newArr(i - 1), arr(i))\n            End If\n        Next\n        \n        Return newArr\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350306,"user_id":null,"body":"Imports System\n\nPublic Module Operarray\n    Public Function gcdi(ByVal x As Long, ByVal y As Long) As Long\n        x = Math.Abs(x)\n        y = Math.Abs(y)\n        \n        If x = 0 Then\n    \t    Return y\n    \tEnd If\n\n    \tWhile y <> 0\n    \t\tIf x > y Then\n    \t\t\tx -= y\n    \t\tElse\n    \t\t\ty -= x\n    \t\tEnd If\n    \tEnd While\n\n\t    Return x\n    End Function\n    Public Function lcmu(ByVal a As Long, ByVal b As Long) As Long\n       Return (Math.Abs(a) * Math.Abs(b)) \/ gcdi(a, b)\n    End Function\n    Public Function som(ByVal a As Long, ByVal b As Long) As Long\n        Return a + b\n    End Function\n    Public Function maxi(ByVal a As Long, ByVal b As Long) As Long\n        Return Math.Max(a, b)\n    End Function\n    Public Function mini(ByVal a As Long, ByVal b As Long) As Long\n        Return Math.Min(a, b)\n    End Function\n    Public Function OperArray(ByVal fct As Func(Of Long, Long, Long), ByVal arr As Long(), ByVal init As Long) As Long()\n        Dim r As List(Of Long) = New List(Of Long)()\n       \n        For i As Integer = 0 To arr.Length - 1\n            If (i = 0) Then\n                r.Add(fct(init, arr(i)))\n            Else\n                r.Add(fct(r(i-1), arr(i)))\n            End If\n        Next\n        \n        Return r.ToArray()\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350307,"user_id":null,"body":"Imports System\n\nPublic Module Operarray\n    Public Function gcdi(ByVal x As Long, ByVal y As Long) As Long\n        Dim t As Long\n        Dim a As Long = absi(x)\n        Dim b As Long = absi(y)\n        \n        While b > 0\n            t = b\n            b = a Mod b\n            a = t\n        End While\n        \n        Return a\n    End Function\n    \n    Public Function lcmu(ByVal a As Long, ByVal b As Long) As Long\n        Return absi(a * b) \/ gcdi(a, b)\n    End Function\n    \n    Public Function som(ByVal a As Long, ByVal b As Long) As Long\n        Return a + b\n    End Function\n    \n    Public Function maxi(ByVal a As Long, ByVal b As Long) As Long\n        Return If(a > b, a, b)\n    End Function\n    \n    Public Function mini(ByVal a As Long, ByVal b As Long) As Long\n        Return If(a < b, a, b)\n    End Function\n    \n    Public Function absi(ByVal a As Long) As Long\n        Return If(a >= 0, a, -a)\n    End Function\n    \n    Public Function OperArray(ByVal fct As Func(Of Long, Long, Long), ByVal arr As Long(), ByVal init As Long) As Long()\n        Dim result As Long() = New Long(arr.Length - 1) {}\n        \n        If arr.Length > 0 Then\n            result(0) = fct(init, arr(0))\n        \n            For i As Integer = 1 To arr.Length - 1\n                result(i) = fct(result(i - 1), arr(i))\n            Next\n        End If\n        \n        Return result\n    End Function    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"56f3a1e899b386da78000732":[{"id":350308,"user_id":null,"body":"Imports System\n\nPublic Module PartList\n\n    Public Function Partlist(ByVal arr As String()) As String()()\n        dim pp as string = \"\"\n        dim st1 as string = \"\"\n        dim st2 as string = \"\"\n        dim new_arr(arr.Length - 2)() as string\n        \n        for i2 As Integer = 0 to new_arr.Length - 1\n            for i1 As Integer = 0 to arr.Length - 1\n                if i1 <> arr.Length - 1 and i1 <> i2 then pp = \" \" else pp = \"\"\n                if i2 >= i1 then \n                    st1 = st1 & arr(i1) & pp\n                else \n                    st2 = st2 & arr(i1) & pp\n                end if        \n            next\n            new_arr(i2) = New string(1) {st1,st2}\n            st1 = \"\"\n            st2 = \"\"\n        next\n        return new_arr\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350309,"user_id":492,"body":"Imports System\nImports System.Linq\n\nPublic Module PartList\n\n    Public Function Partlist(ByVal arr As String()) As String()()\n        Return Enumerable.Range(1, arr.Length - 1).[Select](Function(x) New String() {String.Join(\" \", arr.Take(x)), String.Join(\" \", arr.Skip(x).Take(arr.Length - x))}).ToArray()\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350310,"user_id":null,"body":"Imports System\nImports System.Linq\n\nPublic Module PartList\n    Public Function Partlist(ByVal arr As String()) As String()()\n        Return Enumerable.Range(1, arr.Length - 1).[Select](Function(x){\n            String.Join(\" \", arr.Take(x)), String.Join(\" \", arr.Skip(x))\n        }).ToArray()\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350311,"user_id":null,"body":"Imports System\n\nPublic Module PartList\n\n    Public Function Partlist(ByVal arr As String()) As String()()\n        dim returnValue as new list(of string())\n        for i as integer = 1 to arr.length -1\n           returnValue.add({string.join(\" \",arr.tolist.getrange(0,i).toarray),string.join(\" \" ,arr.tolist.getrange(i,arr.length-i).toarray)})\n        next\n        return returnValue.toarray\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350312,"user_id":null,"body":"Imports System\n\nPublic Module PartList\n    Public Function Partlist(ByVal arr As String()) As String()()\n        Dim output(arr.Length - 2)() As String\n        For i = 0 To arr.Length - 2\n            Dim strings(1) As String\n            For j = 0 To arr.Length - 1\n                Dim k As Integer\n                k = If(i >= j, 0, 1)\n                strings(k) = (strings(k) + \" \" + arr(j)).Trim()\n            Next\n            output(i) = strings\n        Next\n        Return output\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350313,"user_id":null,"body":"Imports System\n\nPublic Module PartList\n\n    Public Function Partlist(ByVal arr As String()) As String()()\n        return arr.Select _\n        ( _\n            function(str, i) _\n                New String() { _\n                    String.Join(\" \", arr.Take(i).ToArray) , _\n                    String.Join(\" \", arr.Skip(i).ToArray) _\n                } _\n        ) _\n        .skip(1).toarray\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350314,"user_id":null,"body":"Imports System\n\nPublic Module PartList\n\n    Public Function Partlist(ByVal arr As String()) As String()()\n        Dim l = arr.Length()\n        Dim answer(l - 2)() As String\n        For i = 0 To l - 2\n            Dim s1 = \"\"\n            For j = 0 To i\n                s1 += \" \" + arr(j)\n            Next\n            Dim s2 = \"\"\n            For j = i + 1 To l - 1\n                s2 += \" \" + arr(j)\n            Next\n            answer(i) = New String() {s1.Trim(), s2.Trim()}\n        Next\n        Return answer\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350315,"user_id":53,"body":"Imports System.Linq\n\nPublic Module PartList\n    Public Function Partlist(ByVal ls As String()) As String()()\n        Return Enumerable.Range(1, ls.Length - 1).[Select](Function(i) New String() {String.Join(\" \", ls.Take(i)), String.Join(\" \", ls.Skip(i).Take(ls.Length - i))}).ToArray()\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350316,"user_id":null,"body":"Imports System\n\nPublic Module PartList\n\n    Public Function Partlist(ByVal arr As String()) As String()()\n\n        If arr.Length() < 2 Then\n            Exit Function\n        End If\n\n        If arr.Length = 2 And arr(0) = \"\" Or arr(1) = \"\" Then\n            Exit Function\n        End If\n\n        Dim tuple As String()() = New String(arr.Length() - 2)() {}\n\n        For j = 0 To (arr.Length - 2)\n\n            Dim left As String = \"\"\n            Dim right As String = \"\"\n\n            For k = 0 To (arr.Length - 1)\n\n                If k <= j Then\n                    left += arr(k) & \" \"\n                Else\n                    right += arr(k) & \" \"\n                End If\n\n            Next k\n\n            tuple(j) = {left.Trim(), right.Trim()}\n\n        Next j\n\n        Return tuple\n\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350317,"user_id":null,"body":"Imports System\n\nPublic Module PartList\n\n    Public Function Partlist(ByVal arr As String()) As String()()\n        ' your code\n        Return Enumerable.Range(1, arr.Length - 1).[Select](Function(x) New String() {String.Join(\" \", arr.Take(x)), String.Join(\" \", arr.Skip(x).Take(arr.Length - x))}).ToArray()\n        \n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5700c9acc1555755be00027e":[{"id":350318,"user_id":492,"body":"Imports System\nImports System.Collections.Generic\n\nPublic Module Rotations\n\n    Public Function ContainAllRots(ByVal s As String, ByVal arr As List(Of String)) As Boolean\n        Dim all = s & s\n        Dim i As Integer = 0, len As Integer = s.Length\n        While i < len\n            If Not arr.Contains(all.Substring(i, len)) Then Return False\n            i += 1\n        End While\n        Return True\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350319,"user_id":null,"body":"Imports System\nImports System.Collections.Generic\n\nPublic Module Rotations\n\n    Public Function ContainAllRots(ByVal s As String, ByVal arr As List(Of String)) As Boolean\n        For i = 0 To s.Length - 1\n            If Not (arr.Contains(s)) Then\n                Return False\n            End If\n\n            s += s(0)\n            s = s.Remove(0, 1)\n        Next\n\n        Return True\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350320,"user_id":null,"body":"Imports System\nImports System.Linq\nImports System.Collections.Generic\n\nPublic Module Rotations\n    Public Function ContainAllRots(ByVal s As String, ByVal arr As List(Of String)) As Boolean\n        Dim arrSet As HashSet(Of String) = new HashSet(Of String)(arr)        \n        Return Enumerable.Range(0, s.Length).All(Function (i) arrSet.Contains(string.Concat(s.Skip(i).Concat(s.Take(i)))))\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350321,"user_id":53,"body":"Imports System\nImports System.Collections.Generic\n\nPublic Module Rotations\n    \n    Public Function Rotate(ByVal s As String) As String\n        Return $\"{s.Substring(1)}{s(0)}\"\n    End Function\n\n    Public Function ContainAllRots(ByVal s As String, ByVal arr As List(Of String)) As Boolean\n        Dim i = s.Length\n\n        While Math.Max(System.Threading.Interlocked.Decrement(i), i + 1) > 0\n            s = Rotate(s)\n            If Not arr.Contains(s) Then Return False\n        End While\n\n        Return True\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350322,"user_id":null,"body":"Imports System\nImports System.Collections.Generic\n\nPublic Module Rotations\n\n    Public Function ContainAllRots(ByVal s As String, ByVal arr As List(Of String)) As Boolean\n         If s = \"\" Then Return True\n        Dim charArray() As Char = s.ToCharArray\n        Dim i As Int16 = 0\n        Dim swe As String\n        Dim n As Int16 = s.Length\n        While i < n\n            swe = s.Substring(i) + s.Substring(0, i)\n            If Not arr.Contains (swe) Then Return False \n            i += 1\n            'Print(swe)\n        End While\n        Return True\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350323,"user_id":null,"body":"Public Module Rotations\n\n    Public Function ContainAllRots(ByVal s As String, ByVal arr As List(Of String)) As Boolean\n        Dim l = s.Length()\n        Dim in_array = 0\n        For i = 0 To l - 1\n            Dim ss = s.Substring(i) & s.Substring(0, i)\n            If arr.Contains(ss) Then in_array += 1\n        Next\n        Return in_array = l\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350324,"user_id":null,"body":"Imports System\nImports System.Collections.Generic\n\nPublic Module Rotations\n\n    Public Function ContainAllRots(ByVal s As String, ByVal arr As List(Of String)) As Boolean\n        \n        Dim rotation As String\n        \n        For i As Integer = 0 To s.Length\n            rotation = s.Substring(i) & s.Substring(0, i)\n            If Not arr.Contains(rotation) Then Return False\n        Next\n        \n        Return True\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350325,"user_id":null,"body":"Imports System\nImports System.Collections.Generic\n\nPublic Module Rotations\n\n    Public Function ContainAllRots(ByVal s As String, ByVal arr As List(Of String)) As Boolean\n        \n        Dim current as String\n        For i = 0 To s.Length\n            current = s.Substring(i) & s.Substring(0, i)\n            If Not arr.Contains(current) Then return False\n        Next\n        \n        return True\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350326,"user_id":null,"body":"Imports System\nImports System.Collections.Generic\n\nPublic Module Rotations\n\n    Public Function ContainAllRots(ByVal s As String, ByVal arr As List(Of String)) As Boolean\n\n        If s = \"\" Then\n            ContainAllRots = True\n            Exit Function\n        End If       \n                \n        Dim strLen As Integer\n        strLen = s.Length\n\n        Dim arrAllRots(strLen - 1, 1) As String 'array of all rots'\n\n    '*****************************************************************'            \n        Dim strToRots As String  ' fill array of all rots\n        strToRots = s\n        Dim strTemp As String\n        strTemp = \"\"\n        Dim chrFirst As Char\n\n        For i = 0 To strLen - 1\n            chrFirst = strToRots(0)\n\n            For j = 1 To strLen - 1\n                strTemp = strTemp & strToRots(j)\n            Next j\n\n            strTemp = strTemp + chrFirst\n            strToRots = strTemp\n            strTemp = \"\"\n            arrAllRots(i, 0) = strToRots\n\n        Next i\n            \n     '*************************************************************'            \n        \n        For i = 0 To arr.Count - 1\n            If arr(i).ToString.Length = strLen Then\n                For j = 0 To arrAllRots.GetUpperBound(0)\n                    If arr(i).ToString.Equals(arrAllRots(j, 0)) Then\n                        arrAllRots(j, 1) = 1\n                    End If\n                Next j\n            End If\n        Next i\n\n        Dim sum As Integer\n\n        For i = 0 To arrAllRots.GetUpperBound(0)\n            sum += arrAllRots(i, 1)\n        Next i\n\n        If sum = arrAllRots.GetLength(0) Then\n            ContainAllRots = True\n        Else\n            ContainAllRots = False\n        End If\n\n        Return ContainAllRots\n\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350327,"user_id":null,"body":"Imports System\nImports System.Collections.Generic\n\nPublic Module Rotations\n\n    Public Function ContainAllRots(ByVal s As String, ByVal arr As List(Of String)) As boolean\n        ContainAllRots = true\n        dim actual as string \n        for i = 1 to s.Length()\n            if i = 1 then \n                actual = s\n            else\n                actual = s.Substring(i-1) & s.Substring(0, i-1)\n            end if\n            \n            dim encontrado = false\n            for each str in arr\n                if (actual = str) then\n                    encontrado = true\n                    exit for\n                end if\n            next\n            if not encontrado then \n                ContainAllRots = false\n                exit for\n            end if\n        next\n        return ContainAllRots\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5726f813c8dcebf5ed000a6b":[{"id":350328,"user_id":53,"body":"Imports System\nImports System.Collections.Generic\n\nPublic Class KPrimes\n    Private Shared Function CountFactors(ByVal n As Long) As Integer\n        Dim cnt = 0\n        Dim i = 3\n        If n = 0 Then Return cnt\n\n        While (n Mod 2) = 0\n            n = n \\ 2\n            cnt += 1\n        End While\n\n        While (i <= n \\ i)\n\n            While n Mod i = 0\n                n = n \\ i\n                cnt += 1\n            End While\n            i += 2\n        End While\n\n        If n > 1 Then cnt += 1\n        Return cnt\n    End Function\n\n    Public Shared Function CountKprimes(ByVal k As Integer, ByVal start As Long, ByVal [end] As Long) As Long()\n        Dim fs = New List(Of Long)()\n\n        For n = start To [end]\n            Dim j = CountFactors(n)\n\n            If j = k Then\n                fs.Add(n)\n            End If\n        Next\n\n        Return fs.ToArray()\n    End Function\n\n    Public Shared Function Puzzle(ByVal s As Integer) As Integer\n        Dim cnt = 0\n        Dim xs = CountKprimes(7, 128, s - 10)\n        Dim ys = CountKprimes(3, 8, s - 130)\n\n        For Each a In xs\n\n            For Each b In ys\n                Dim c = s - a - b\n\n                If c > 0 AndAlso CountFactors(c) = 1 Then\n                    cnt += 1\n                End If\n            Next\n        Next\n\n        Return cnt\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350329,"user_id":null,"body":"Public Module KPrimes\n    Public Function count_primes(ByVal n As Long) As Integer\n        Dim n_factors = 0\n        Dim f = 2\n        Dim ub = n\n        While f * f <= ub\n            While n Mod f = 0\n                n_factors += 1\n                n \\= f\n            End While\n            f = If(f > 2, f + 2, 3)\n        End While\n        If n > 1 Then n_factors += 1\n        Return n_factors\n    End Function\n    Public Function CountKprimes(ByVal k As Integer, ByVal start As Long, ByVal nd As Long) As Long()\n        Dim answer As New List(Of Long)\n        For i = start To nd\n            If count_primes(i) = k Then answer.Add(i)\n        Next\n        Return answer.ToArray\n    End Function\n    Public Function Puzzle(ByVal s As Integer) As Integer\n        Dim a = CountKprimes(1, 1, s)\n        Dim b = CountKprimes(3, 1, s)\n        Dim c = CountKprimes(7, 1, s)\n        Dim answer = 0\n        For Each bb In b\n            For Each cc In c\n                If a.Contains(s - bb - cc) Then answer += 1\n            Next\n        Next\n        Return answer\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350330,"user_id":null,"body":"Imports System\n\nPublic Module KPrimes\n\n              Public Function CountKprimes(ByVal k As Integer, ByVal start As Long, ByVal nd As Long) As Long()\n            Dim kprimes() As Integer\n            Dim kprimes2() As Long\n            kprimes = Enumerable.Range(start, (nd - start) + 1).[Where](Function(i) PrimeFactor(i) = k).ToArray()\n            ReDim kprimes2(kprimes.Length - 1)\n            Array.Copy(kprimes, kprimes2, kprimes.Length)\n\n            Return kprimes2\n        End Function\n\n        Public Function Puzzle(ByVal s As Integer) As Integer\n            Dim a() As Long = CountKprimes(1, 0, s)\n            Dim b() As Long = CountKprimes(3, 0, s)\n            Dim c() As Long = CountKprimes(7, 0, s)\n            Dim cnt = 0\n            Dim ia = 0\n\n            While ia < a.Count\n                Dim ib = 0\n\n                While ib < b.Count\n                    Dim ic = 0\n\n                    While ic < c.Count\n\n                        If a(ia) + b(ib) + c(ic) = s Then\n                            cnt += 1\n                        End If\n\n                        ic += 1\n                    End While\n\n                    ib += 1\n                End While\n\n                ia += 1\n            End While\n\n            Return cnt\n        End Function\n\n\n\n        Public Function PrimeFactor(number As Integer) As Integer\n            Dim res = 0\n            Dim i As Integer = 2\n            While Math.Pow(i, 2) <= number\n                While (number Mod i).Equals(0)\n                    number \/= i\n                    res += 1\n                End While\n                i += 1\n            End While\n            If number > 1 Then\n                res += 1\n            End If\n            Return res\n        End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350331,"user_id":null,"body":"Imports System\n\nPublic Module KPrimes\n\n    Dim PrimesLut As New List(Of Long)\n\n    Function CountFactors(n As Long) As integer\n\n        Dim PrimeCount As Long = 0\n        If PrimesLut.Count = 0 Then\n            PrimesLut.Add(2)\n        End If\n\n        While n > 1\n            Dim hasfactor As Boolean = False\n            For Each p In PrimesLut\n                If n Mod p = 0 Then\n                    PrimeCount += 1\n                    n \\= p\n                    hasfactor = True\n                    Exit For\n                End If\n            Next\n\n            If Not hasfactor And PrimeCount = 0 Then\n                PrimesLut.Add(n)\n                Return 1\n            Elseif Not hasfactor\n                Return PrimeCount+1\n            End If\n        End While\n\n        Return PrimeCount\n    End Function\n\n    Public Function CountKprimes(ByVal k As Integer, ByVal start As Long, ByVal nd As Long) As Long()\n\n        Dim ret As New List(Of Long)\n        'Init Lut\n        If PrimesLut.Count = 0 Then\n            PrimesLut.Add(2)\n            For i = 3 To start+1 Step 2\n                CountFactors(i)\n            Next\n        End If\n        \n        'Count them\n        For i = start To nd\n            If CountFactors(i) = k Then\n                ret.Add(i)\n            End If\n        Next\n\n        Return ret.ToArray()\n    End Function\n\n    Public Function Puzzle(ByVal s As Integer) As Integer\n        Dim k7 = CountKprimes(7, 1, s)\n        Dim k3 = CountKprimes(3, 1, s)\n        Dim k1 = CountKprimes(1, 1, s)\n        Dim count As Integer = 0\n\n        For Each p7 In k7\n            For Each p3 In k3\n                For Each p1 In k1\n                    If p1 + p3 + p7 = s Then\n                        count += 1\n                    End If\n                Next\n            Next\n        Next\n\n        Return count\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350332,"user_id":492,"body":"Imports System\n\nPublic Module KPrimes\n\t\n    Private Function PrimeFactors(ByVal n As Long) As Integer\n        Dim factors As List(Of Long) = New List(Of Long)()\n        Dim i As Long = 2\n        While i * i <= n\n            While n Mod i = 0\n                factors.Add(i)\n                n = n \/ i\n            End While\n            i += 1\n        End While\n        If n > 1 Then factors.Add(n)\n        Return factors.Count\n    End Function\n\n    Public Function CountKprimes(ByVal k As Integer, ByVal start As Long, ByVal nd As Long) As Long()\n        Dim kprimes As List(Of Long) = New List(Of Long)()\n        For i As Long = start To nd\n            If PrimeFactors(i) = k Then kprimes.Add(i)\n        Next\n        Dim result As Long() = kprimes.ToArray()\n        Return result\n    End Function\n\n    Public Function Puzzle(ByVal s As Integer) As Integer\n        Dim a As Long() = CountKprimes(1, 0, s)\n        Dim b As Long() = CountKprimes(3, 0, s)\n        Dim c As Long() = CountKprimes(7, 0, s)\n        Dim cnt As Integer = 0\n        Dim ia As Integer = 0\n        While ia < a.Length\n            Dim ib As Integer = 0\n            While ib < b.Length\n                Dim ic As Integer = 0\n                While ic < c.Length\n                    If a(ia) + b(ib) + c(ic) = s Then cnt += 1\n                    ic += 1\n                End While\n                ib += 1\n            End While\n            ia += 1\n        End While\n        Return cnt\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"573182c405d14db0da00064e":[{"id":350333,"user_id":null,"body":"Public Module PrimeConsec\n    Public Function count_primes(ByVal n As Long) As Integer\n        Dim n_factors = 0\n        Dim f = 2\n        Dim ub = n\n        While f * f <= ub\n            While n Mod f = 0\n                n_factors += 1\n                n \\= f\n            End While\n            f = If(f > 2, f + 2, 3)\n        End While\n        If n > 1 Then n_factors += 1\n        Return n_factors\n    End Function\n    Public Function ConsecKprimes(ByVal k As Integer, ByVal arr As Long()) As Integer\n        Dim answer = 0\n        Dim prev_k = 0\n        Dim curr_k = 0\n        For Each number In arr\n            curr_k = count_primes(number)\n            If prev_k = k And curr_k = k Then answer += 1\n            prev_k = curr_k\n        Next\n        Return answer\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350334,"user_id":53,"body":"Imports System\n\nPublic Module PrimeConsec\n    Public Function ConsecKprimes(ByVal k As Integer, ByVal arr As Long()) As Integer\n        Dim cnt = 0\n        Dim p = 0\n\n        For i = 0 To arr.Length - 1\n            Dim q = PrimeFactorCount(arr(i))\n            If q = k AndAlso p = k Then cnt += 1\n            p = q\n        Next\n\n        Return cnt\n    End Function\n\n    Private Function PrimeFactorCount(ByVal n As Long) As Integer\n        Dim m = 0\n        Dim i = 2\n\n        While n > 1\n\n            If n Mod i = 0 Then\n                n = n \/ i\n                m += 1\n                i = 1\n            End If\n\n            i += 1\n        End While\n\n        Return m\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350335,"user_id":492,"body":"Imports System\nImports System.Linq\nImports System.Collections.Generic\n\nPublic Module PrimeConsec\n\n    Private Function countPrimeDiv(ByVal n As Long) As Integer\n        Dim cnt As Integer = 0\n        Dim i As Long = 2\n        While i * i <= n\n            While n Mod i = 0\n                cnt += 1\n                n = N \/ i\n            End While\n            i += 1\n        End While\n        If n > 1 Then cnt += 1\n        Return cnt\n    End Function\n\n    Public Function ConsecKprimes(ByVal k As Integer, ByVal arr As Long()) As Integer\n        Dim cnt As Integer = 0\n        For i As Integer = 0 To arr.Length - 1 - 1\n            If (countPrimeDiv(arr(i)) = k) AndAlso (countPrimeDiv(arr(i + 1)) = k) Then cnt += 1\n        Next\n        Return cnt\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"573992c724fc289553000e95":[{"id":350336,"user_id":null,"body":"Imports System\n\nPublic Module ToSmallest\n\n    Public Function Smallest(ByVal n As Long) As Long()\n        Dim dgt As Integer\n        Dim sml As Long\n        Dim cur As Long\n        Dim a As New List(Of Integer)\n        Dim s As String = n.ToString\n        Dim idxI As Integer = s.Length\n        Dim idxJ As Integer = s.Length\n\n        For k = 0 To s.Length - 1\n            a.Add(CInt(s(k).ToString))\n        Next k\n\n        sml = n\n\n        For j = 0 To a.Count - 1\n\n            For k = 0 To a.Count - 1\n\n                For i = 0 To s.Length - 1\n                    a(i) = CInt(s(i).ToString)\n                Next i\n\n                dgt = a(j)\n                a.RemoveAt(j)\n                a.Insert(k, dgt)\n                cur = CLng(String.Join(\"\", a).ToString)\n                If cur < sml Then\n                    sml = cur\n                    idxI = j\n                    idxJ = k\n                ElseIf cur = sml Then\n                    If j < idxI Then\n                        idxI = j\n                        idxJ = k\n                    ElseIf j = idxI Then\n                        If k < idxJ Then\n                            idxJ = k\n                        End If\n                    End If\n                End If\n\n            Next k\n\n        Next j\n\n        Return {sml, idxI, idxJ}\n\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350337,"user_id":null,"body":"Imports System\n\nPublic Module ToSmallest\n\n    Public Function Smallest(ByVal n As Long) As Long()\n        Dim answer = n\n        Dim best_i = 0\n        Dim best_j = 0\n        Dim sn = n.ToString\n        Dim l = sn.Length\n        Dim sn1 = \"\"\n        For i = 0 To l - 1\n            For j = 0 To l - 1\n                If i <> j Then\n                    sn1 = sn.Substring(0, i) & sn.Substring(i + 1)\n                    sn1 = sn1.Insert(j, sn.Substring(i, 1))\n                    Dim n1 = Convert.toInt64(sn1)\n                    If n1 < answer Then\n                        answer = n1\n                        best_i = i\n                        best_j = j\n                    End If\n                End If\n            Next\n        Next\n        Return {answer, best_i, best_j}\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350338,"user_id":null,"body":"Imports System\n\nPublic Module ToSmallest\n\n    Public Function Smallest(ByVal n As Long) As Long()\n       Dim Str as String\n        Str = CStr(n)\n        Dim AllStr(Str.Length*Str.Length) as String\n        Dim taken as String=\"\"\n        Dim added as String\n        Dim small as long= Long.MaxValue\n        Dim idz() as long={0,0}\n        \n        \n\n\n        for i as integer = 0 to Str.Length()\n            for j as integer = 1 to Str.Length()\n              taken=TakeAt(Str,j-1)          \n              added=AddAt(taken,Str(j-1),i)\n            if Convert.ToInt64(added)<small and added.Length=Str.Length then\n            small = Convert.ToInt64(added)\n            idz={i,j-1}\n            end if    \n            \n            next j\n            \n            next i\n        \n       if idz(1)=1 and idz(0)=0 then\n            return {small,idz(0),idz(1)}\n    else\n        return {small,idz(1),idz(0)}\n    end if\n\n    \n    \n        'Dim taken as String\n        'Dim given as String\n        'taken = ToSmallest.TakeAt(Str, 0)\n        'given = ToSmallest.AddAt(taken,\"3\",2)\n       'Console.Writeline(given)\n    End Function\n    \n    Function TakeAt(numStr as String,Index as integer)\n        Dim tochar() as char\n        tochar=numStr.toCharArray\n        Dim outp as String=\"\"\n    \n        for i as integer = 0 to numStr.Length()-1\n            if i = Index then\n                outp+=\"\"\n            else\n                outp+=\"\"+tochar(i)\n        \n            end if\n    \n        next i\n    return outp\n    end Function   \n\n Function AddAt(numStr as String,num as Char,Index as integer)\n        Dim tochar() as char\n        tochar=numStr.toCharArray\n        Dim outp as String=\"\"\n    \n        if Index = numStr.Length() then\n           outp=numStr+num\n        else\n        for i as integer = 0 to numStr.Length()-1\n            if i = Index then\n                outp+=\"\"+num+tochar(i)\n            else\n                outp+=\"\"+tochar(i)\n        \n            end if\n    \n        next i\n        end if\n    return outp\n    end Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350339,"user_id":53,"body":"Imports System\nImports System.Collections.Generic\nImports System.Linq\n\nPublic Class ToSmallest\n    Public Shared Function Smallest(ByVal n As Long) As Long()\n        Dim arr = n.ToString().ToCharArray().[Select](Function(x) x.ToString()).ToArray()\n        Dim res = New Long() {n, 0, 0}\n        Enumerable.Range(0, arr.Length).ToList().ForEach(Sub(i)\n             Enumerable.Range(0, arr.Length).ToList().ForEach(Sub(j)\n                  Dim tmp = arr.Take(i).Concat(arr.Skip(i + 1))\n                  Dim xs = tmp.Take(j).Concat({arr(i)}).Concat(tmp.Skip(j))\n                  Dim m = Convert.ToInt64(String.Join(\"\", xs))\n\n                  If m < res(0) Then\n                      res = New Long() {m, i, j}\n                  End If\n              End Sub)\n         End Sub)\n        Return res\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350340,"user_id":null,"body":"Imports System\nImports System.Collections\n\nPublic Module ToSmallest\n\n    Public Function Smallest(ByVal n As Long) As Long()\n        Dim Result() As Long, temp As String\n        Dim indexFrom As Integer = 0, indexTo As Integer = 0\n        Dim nString As String\n        Dim arrVal As New ArrayList()\n        Dim arrComp As New ArrayList()\n        Dim ss As String\n\n        Console.WriteLine(n)\n        nString = n.ToString\n        Dim s As String\n        For Each s In nString\n            arrVal.Add(s)\n        Next\n        arrComp = arrVal.Clone()\n        arrComp.Sort()\n        Dim j As Integer = 0\n        For j = 0 To arrComp.Count - 1\n            If arrVal(j) <> arrComp(j) Then Exit For\n            If j = arrComp.Count - 1 Then GoTo AllOrderRight\n        Next\n        'Find the Number that will Moved\n        Dim number1 As Integer = 0 \n        While arrVal(number1) = arrComp(number1)\n            number1 += 1\n        End While\n        If arrVal(0) = arrComp(arrComp.Count - 1) And arrVal(1) = arrComp(0) Then\n            indexTo = arrVal.Count - 1\n            While arrVal(indexTo) = arrVal(0)\n                indexTo -= 1\n            End While\n        ElseIf arrVal(number1 + 1) = arrComp(number1) And arrVal(number1 + 2) = arrComp(number1 + 1) Then\n            indexFrom = number1\n            j = number1\n            While arrVal(number1) >= arrVal(j + 1)\n                indexTo = j + 1\n                j += 1\n                If j + 1 > arrVal.Count - 1 Then Exit While\n            End While\n        ElseIf arrVal(1) = arrComp(0) And (arrVal(0) > arrVal(2)) Then\n            j = 0\n            While arrVal(0) >= arrVal(j + 1)\n                indexTo = j + 1\n                j += 1\n                If j + 1 > arrVal.Count - 1 Then Exit While\n            End While\n            'Move indexTo -1 while value is same to indexFrom'\n            While arrVal(indexFrom) = arrVal(indexTo)\n                indexTo -= 1\n            End While\n        Else\n            indexFrom = arrVal.LastIndexOf(arrComp(number1))\n            indexTo = number1\n            'Move indexFrom -1 while value in IndexFrom is Repeated\n            While arrVal(indexFrom - 1) = arrVal(indexFrom)\n                indexFrom -= 1\n            End While\n            If arrComp(number1) = arrVal(0) Then indexTo = 0\n        End If\n\n        If indexFrom - 1 = indexTo Then\n            temp = indexFrom\n            indexFrom = indexTo\n            indexTo = temp\n        End If\n        temp = arrVal(indexFrom)\n        arrVal.RemoveAt(indexFrom)\n        arrVal.Insert(indexTo, temp)\n        temp = \"\"\n        For Each ss In arrVal\n            temp = temp & ss\n        Next\n        Result = {Long.Parse(temp), indexFrom, indexTo}\n        Return Result\nAllOrderRight:\n        Result = {n, 0, 0}\n        Return Result\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350341,"user_id":null,"body":"Imports System\n\nPublic Module ToSmallest\n    Public Function RemoveAndInsert(ByVal digits As Integer(), remove_i As Long, insert_i As Long) As Long\n        Dim sum As Long = 0\n        Dim digit_i = 0\n        \n        For addingAt_i = 0 To digits.Length - 1\n            sum *= 10\n            \n            If addingAt_i = insert_i\n                sum += digits(remove_i)\n                Continue For ' don't increment digit_i\n            End If\n            \n            If digit_i = remove_i\n                digit_i += 1 ' moved elsewhere, skip\n            End If\n            \n            sum += digits(digit_i)\n            digit_i += 1\n        Next\n        \n        Return sum\n    End Function\n\n\n    Public Function Smallest(ByVal n As Long) As Long()\n        Dim recordN = n\n        Dim recordI = 0\n        Dim recordJ = 0\n        \n        Dim digits() = n.ToString.ToCharArray().Select(Function(x) Integer.Parse(x)).ToArray()\n        \n        For i = 0 To digits.Length - 1\n            For j = 0 To digits.Length - 1\n                If i <> j And RemoveAndInsert(digits, i, j) < recordN\n                    recordN = RemoveAndInsert(digits, i, j)\n                    recordI = i\n                    recordJ = j\n                End If\n            Next \n        Next\n        \n        Return {recordN, recordI, recordJ}\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350342,"user_id":492,"body":"Imports System\n\nPublic Module ToSmallest\n\n    Public Function Smallest(ByVal n As Long) As Long()\n        Dim best = New Long() {n, 0, 0}\n        Dim str = n.ToString()\n        For i As Integer = 0 To str.Length - 1\n            Dim d = str.Substring(i, 1)\n            Dim s = str.Remove(i, 1)\n            For j As Integer = 0 To str.Length - 1\n                Dim m = Convert.ToInt64(s.Insert(j, d))\n                If m < best(0) Then\n                    best(0) = m\n                    best(1) = i\n                    best(2) = j\n                End If\n            Next\n        Next\n        Return best\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"57591ef494aba64d14000526":[{"id":350343,"user_id":53,"body":"Imports System\nImports System.Linq\nImports System.Collections.Generic\n\nPublic Class Johnann\n    Private Shared ReadOnly JohnCache As Dictionary(Of Long, Long) = New Dictionary(Of Long, Long)()\n    Private Shared ReadOnly AnnCache As Dictionary(Of Long, Long) = New Dictionary(Of Long, Long)()\n\n    Public Shared Function John(ByVal n As Long) As List(Of Long)\n        Return Enumerable.Range(0, CInt(n)).[Select](Function(x) JohnOn(CLng(x))).ToList()\n    End Function\n\n    Public Shared Function Ann(ByVal n As Long) As List(Of Long)\n        Return Enumerable.Range(0, CInt(n)).[Select](Function(x) AnnOn(CLng(x))).ToList()\n    End Function\n\n    Public Shared Function SumJohn(ByVal n As Long) As Long\n        Return John(n).Sum()\n    End Function\n\n    Public Shared Function SumAnn(ByVal n As Long) As Long\n        Return Ann(n).Sum()\n    End Function\n\n    Private Shared Function JohnOn(ByVal n As Long) As Long\n        Dim v As long = Nothing\n\n        If Not JohnCache.TryGetValue(n, v) Then\n            v = If(n = 0, 0, n - AnnOn(JohnOn(n - 1)))\n            JohnCache(n) = v\n        End If\n\n        Return v\n    End Function\n\n    Private Shared Function AnnOn(ByVal n As Long) As Long\n        Dim v As long = Nothing\n\n        If Not AnnCache.TryGetValue(n, v) Then\n            v = If(n = 0, 1, n - JohnOn(AnnOn(n - 1)))\n            AnnCache(n) = v\n        End If\n\n        Return v\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350344,"user_id":null,"body":"Public Module Johnann\n    Public Function gen(ByVal n As Long) As List(Of List(Of Long))\n        Dim john = New List(Of Long)\n        Dim ann = New List(Of Long)\n        john.Add(0)\n        ann.Add(1)\n        Dim prev_john As Long = 0\n        Dim prev_ann As Long = 1\n        For i = 1 To n - 1\n            prev_john = i - ann(prev_john)\n            john.Add(prev_john)\n            prev_ann = i - john(prev_ann)\n            ann.Add(prev_ann)\n        Next\n        Dim answer = New List(Of List(Of Long))\n        answer.Add(john)\n        answer.Add(ann)\n        Return answer\n    End Function\n    Public Function John(ByVal n As Long) As List(Of Long)\n        Return gen(n)(0)\n    End Function\n    Public Function Ann(ByVal n As Long) As List(Of Long)\n        Return gen(n)(1)\n    End Function\n    Public Function SumJohn(ByVal n As Long) As Long\n        Dim total As Long = 0\n        For Each j In gen(n)(0)\n            total += j\n        Next\n        Return total\n    End Function\n    Public Function SumAnn(ByVal n As Long) As Long\n        Dim total As Long = 0\n        For Each a In gen(n)(1)\n            total += a\n        Next\n        Return total\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350345,"user_id":null,"body":"Imports System\n\nPublic Module Johnann\n\n    Private ReadOnly dicJohn As New Dictionary(Of Long, Long)\n    Private ReadOnly dicAnn As New Dictionary(Of Long, Long)\n\n    Public Function John(ByVal n As Long) As List(Of Long)\n        Return Enumerable.Range(0, n).Select(Function(day) JohnAtDayN(day)).ToList\n    End Function\n\n    Public Function Ann(ByVal n As Long) As List(Of Long)\n        Return Enumerable.Range(0, n).Select(Function(day) AnnAtDayN(day)).ToList\n    End Function\n    Public Function SumJohn(ByVal n As Long) As Long\n        Return John(n).Sum\n    End Function\n    Public Function SumAnn(ByVal n As Long) As Long\n        Return Ann(n).Sum\n    End Function\n\n\n    Private Function JohnAtDayN(ByVal n As Long) As Long\n        If n = 0 Then Return 0\n        Dim answer As Long\n        If dicJohn.TryGetValue(n, answer) Then Return answer\n        answer = n - AnnAtDayN(JohnAtDayN(n - 1))\n        dicJohn.Add(n, answer)\n        Return answer\n    End Function\n\n    Private Function AnnAtDayN(ByVal n As Long) As Long\n        If n = 0 Then Return 1\n        Dim answer As Long\n        If dicAnn.TryGetValue(n, answer) Then Return answer\n        answer = n - JohnAtDayN(AnnAtDayN(n - 1))\n        dicAnn.Add(n, answer)\n        Return answer\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350346,"user_id":null,"body":"Imports System\n\nPublic Module Johnann\n\n    Public Function John(ByVal n As Long) As List(Of Long)\n        dim j(),a() as long\n        redim j(n-1),a(n-1)\n        dim res as new List(of long)\n        if n=0 then return res\n        j(0)=0\n        a(0)=1\n        for i=1 to n-1\n            j(i)=i-a(j(i-1))\n            a(i)=i-j(a(i-1))\n        next i\n        for each x in j\n            res.Add(x)\n        next x\n        return res\n    End Function\n    Public Function Ann(ByVal n As Long) As List(Of Long)\n        dim j(),a() as long\n        redim j(n-1),a(n-1)\n        dim res as new List(of long)\n        if n=0 then return res\n        j(0)=0\n        a(0)=1\n        for i=1 to n-1\n            j(i)=i-a(j(i-1))\n            a(i)=i-j(a(i-1))\n        next i\n        for each x in a\n            res.Add(x)\n        next x\n        return res\n    End Function\n    Public Function SumJohn(ByVal n As Long) As Long\n        dim res as long =0\n        dim j as new List(of long)\n        j = John(n)\n        for each x in j\n            res+=x\n        next x\n        return res\n    End Function\n    Public Function SumAnn(ByVal n As Long) As Long\n        dim res as long =0\n        dim a as new List(of long)\n        a = Ann(n)\n        for each x in a\n            res+=x\n        next x\n        return res\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350347,"user_id":null,"body":"Imports System\nImports System.Linq\n\nPublic Module Johnann\n    Private ReadOnly johnSequence As List(Of Long) = new List(Of Long) From { 0 }\n    Private ReadOnly annSequence As List(Of Long) = new List(Of Long) From { 1 }\n    \n    Private Sub UpdateSequences(ByVal n As Long)\n        For i As Long = johnSequence.LongCount To n\n            johnSequence.Add(i - annSequence(johnSequence(i - 1)))\n            annSequence.Add(i - johnSequence(annSequence(i - 1)))\n        Next\n    End Sub\n    \n    Public Function John(ByVal n As Long) As List(Of Long)\n        UpdateSequences(n)\n        Return johnSequence.Take(n).ToList()\n    End Function\n    \n    Public Function Ann(ByVal n As Long) As List(Of Long)\n        UpdateSequences(n)\n        return annSequence.Take(n).ToList()\n    End Function\n    \n    Public Function SumJohn(ByVal n As Long) As Long\n        UpdateSequences(n)\n        return johnSequence.Take(n).Sum()\n    End Function\n    \n    Public Function SumAnn(ByVal n As Long) As Long\n        UpdateSequences(n)\n        return annSequence.Take(n).Sum()\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350348,"user_id":492,"body":"Imports System\nImports System.Collections.Generic\nImports System.Linq\n\nPublic Module Johnann\n\n    Public Function John(ByVal n As Long) As List(Of Long)\n        Return New CalcThis(n).John\n    End Function\n    Public Function Ann(ByVal n As Long) As List(Of Long)\n        Return New CalcThis(n).Ann\n    End Function\n    Public Function SumJohn(ByVal n As Long) As Long\n        Return New CalcThis(n).John.Sum()\n    End Function\n    Public Function SumAnn(ByVal n As Long) As Long\n        Return New CalcThis(n).Ann.Sum()\n    End Function\n\n    Private Class CalcThis\n        Public John As List(Of Long) = New List(Of Long)()\n        Public Ann As List(Of Long) = New List(Of Long)()\n        \n        Public Sub New(ByVal n As Long)\n            John.Add(0)\n            Ann.Add(1)\n            For i As Integer = 1 To n - 1\n                John.Add(i - CInt(Ann(CInt(John(i - 1)))))\n                Ann.Add(i - CInt(John(CInt(Ann(i - 1)))))\n            Next\n        End Sub\n    End Class\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"57a6633153ba33189e000074":[{"id":350349,"user_id":null,"body":"Public Module Kata \n    Public Function OrderedCount(input as String) As List(Of Tuple(Of Char, Integer))\n        Return input.\n            GroupBy(Function(x) x).\n            Select(Function(x) New Tuple(Of Char, Integer)(x.Key, x.Count())).\n            ToList()\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350350,"user_id":null,"body":"Imports System.Collections.Generic\n\nPublic Module Kata \n    Public Function OrderedCount(input as String) As List(Of Tuple(Of Char, Integer))\n        Dim chars As New List(Of Char)\n        Dim answer As New List(Of Tuple(Of Char, Integer))\n        Dim i = -1\n        For Each c0 In input\n            If (chars.IndexOf(c0) = -1) Then\n                i += 1\n                chars.Add(c0)\n                Dim char_count = 0\n                For Each c1 in input\n                    If c0 = c1 Then char_count += 1\n                Next\n                answer.Add(New Tuple(Of Char, Integer)(c0, char_count))\n            End If\n        Next\n        Return answer\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350351,"user_id":null,"body":"Imports System.Collections.Generic\n\nPublic Module Kata \n    Public Function OrderedCount(input as String) As List(Of Tuple(Of Char, Integer))\n         Dim a As New List(Of Tuple(Of Char, Integer))\n        For Each buchstabe In input\n            Dim z = input.Count(Function(i) i = buchstabe)\n            Dim t As New Tuple(Of Char, Integer)(buchstabe, z)\n            If Not a.Contains(t) Then a.Add(t)\n        Next\n\n        Return a\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350352,"user_id":null,"body":"Imports System.Collections.Generic\n\nPublic Module Kata \n    Public Function OrderedCount(input as String) As List(Of Tuple(Of Char, Integer))\n        return input.GroupBy(Function(x) x).Select(Function(x) New Tuple(Of Char, Integer)(x.Key, x.Count)).ToList()\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350353,"user_id":null,"body":"Imports System.Collections.Generic\n\nPublic Module Kata \n    Public Function OrderedCount(input As String) As List(Of Tuple(Of Char, Integer))\n        Dim Res As New List(Of Tuple(Of Char, Integer))\n\n        Dim Used As String = \"\"\n        For Each C As Char In input.ToCharArray()\n            If Used.Contains(C) Then Continue For\n            Res.Add(New Tuple(Of Char, Integer)(C, CountOccurences(C, input)))\n            Used += C\n        Next\n        Return Res\n    End Function\n    Public Function CountOccurences(Needle As Char, Haystack As String) As Integer\n        Dim Count As Integer = 0\n        For Each C As Char In Haystack.ToCharArray\n            If C.Equals(Needle) Then Count += 1\n        Next\n        Return Count\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350354,"user_id":null,"body":"Imports System.Collections.Generic\n\nPublic Module Kata \n    Public Function OrderedCount(input as String) As List(Of Tuple(Of Char, Integer))\n\n        Dim sB As New System.Text.StringBuilder\n        sB.Append(input)\n        Dim cH As Char\n        Dim sum As Integer\n        Dim outputList As List(Of Tuple(Of Char, Integer)) = New List(Of Tuple(Of Char, Integer))\n\n        For i = 0 To sB.Length - 1\n            cH = sB(i)\n            sum = 0\n\n            If sB(i) <> \"\u0401\" Then\n                For k = i To sB.Length - 1\n                    If sB(k) = cH Then\n                        sum += 1\n                        sB(k) = \"\u0401\"\n                    End If\n                Next k\n\n                outputList.Add(Tuple.Create(cH, sum))\n\n            End If\n        Next i\n\n        Return outputList\n\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350355,"user_id":null,"body":"Imports System.Collections.Generic\n\nPublic Module Kata \n    Public Function OrderedCount(input as String) As List(Of Tuple(Of Char, Integer))\n        Dim list As New ArrayList()\n        Dim indexOfLetter As Integer\n\n        For Each letter As Char In input\n\n            indexOfLetter = Convert.ToInt32(letter) + 10000\n\n            If list.IndexOf(indexOfLetter) = -1 Then\n                list.Add(indexOfLetter)\n                list.Add(1)\n            Else\n                list(list.IndexOf(indexOfLetter) + 1) = 1 + list(list.IndexOf(indexOfLetter) + 1)\n            End If\n\n        Next letter\n\n        Dim outputList As List(Of Tuple(Of Char, Integer)) = New List(Of Tuple(Of Char, Integer))\n\n        For i = 0 To list.Count - 2 Step 2\n\n            outputList.Add(Tuple.Create(Convert.ToChar(list(i) - 10000), CInt(list(i + 1))))\n\n        Next i\n\n        Return outputList\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350356,"user_id":null,"body":"Imports System.Collections.Generic\n\nPublic Module Kata \n    Public Function OrderedCount(input as String) As List(Of Tuple(Of Char, Integer))\n        ' Implement me!\n            \n        Dim repetidos As New Dictionary(Of String, Integer)\n        Dim listaTuplas As New List(Of Tuple(Of Char, Integer))\n\n        For Each i In input\n\n            If repetidos.ContainsKey(i) Then\n                repetidos(i) += 1\n            Else\n                repetidos.Add(i, 1)\n            End If\n\n        Next\n\n        For Each i In repetidos\n            Dim t As New Tuple(Of Char, Integer)(i.Key, i.Value)\n            listaTuplas.Add(t)\n        Next\n\n        Return listaTuplas\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350357,"user_id":null,"body":"Public Module Kata \n    Public Function OrderedCount(input as String) As List(Of Tuple(Of Char, Integer))\n        Dim ls As New List(Of Tuple(Of Char, Integer))\n        For Each v As Char In input\n            ls.Add(Tuple.Create(v, input.Split(v).Length - 1))\n        Next\n        Return ls.Distinct().ToList()\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350358,"user_id":null,"body":"Imports System.Collections.Generic\n\nPublic Module Kata \n    Public Function OrderedCount(input as String) As List(Of Tuple(Of Char, Integer))\n        ' Implement me!\n        Dim ls As New List(Of Tuple(Of Char, Integer))\n        For Each v In input\n            ls.Add(Tuple.Create(v, input.Split(v).Length - 1))\n        Next\n        Return ls.Distinct().ToList()\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"57fe5b7108d102fede00137a":[{"id":350359,"user_id":null,"body":"Imports System.Collections.Generic\n\nPublic Module Kata\n    Public Function Instrumental(word As String) As String\n        Dim vowel_pairs as New Dictionary(Of String, String)\n        vowel_pairs(\"a\") = \"\u00e1\"\n        vowel_pairs(\"e\") = \"\u00e9\"\n        vowel_pairs(\"i\") = \"\u00ed\"\n        vowel_pairs(\"o\") = \"\u00f3\"\n        vowel_pairs(\"u\") = \"\u00fa\"\n        vowel_pairs(\"\u00f6\") = \"\u0151\"\n        vowel_pairs(\"\u00fc\") = \"\u0171\"\n        Dim front_vowels = \"e\u00e9i\u00ed\u00f6\u0151\u00fc\u0171\"\n        Dim back_vowels = \"a\u00e1o\u00f3u\u00fa\"\n        Dim digraphs = {\"sz\", \"zs\", \"cs\"}\n        Dim l = word.Length\n        Dim y = word.Substring(l - 2)\n        Dim z = word.Substring(l - 1)\n        Dim prefix = word\n        If vowel_pairs.ContainsKey(z) Then\n            prefix = word.Substring(0, l - 1) & vowel_pairs(z)\n        End If\n        If front_vowels.Contains(z) Then\n            prefix += \"v\"\n        ElseIf back_vowels.Contains(z) Then\n            prefix += \"v\"\n        ElseIf digraphs.Contains(y) then\n            prefix = word.Substring(0, l - 1) & y\n        Else\n            prefix = word & z\n        End If\n        For i = l - 1 To 0 Step -1\n            If front_vowels.Contains(word(i)) Then Return prefix & \"el\"\n            If back_vowels.Contains(word(i)) Then Return prefix & \"al\"\n        Next\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350360,"user_id":null,"body":"Imports System.Collections.Generic\n\nPublic Module Kata\n    Public Function Instrumental(word As String) As String\n    Dim shortToLong As String(,) = {\n            {\"a\", \"\u00e1\"},\n            {\"e\", \"\u00e9\"},\n            {\"i\", \"\u00ed\"},\n            {\"o\", \"\u00f3\"},\n            {\"u\", \"\u00fa\"},\n            {\"\u00f6\", \"\u0151\"},\n            {\"\u00fc\", \"\u0171\"}}\n\n        Dim front_s As String() = {\"e\", \"\u00e9\", \"i\", \"\u00ed\", \"\u00f6\", \"\u0151\", \"\u00fc\", \"\u0171\"}\n        Dim end_s As String() = {\"a\", \"\u00e1\", \"o\", \"\u00f3\", \"u\", \"\u00fa\"}\n        Dim dwuznak As String(,) = {\n            {\"sz\", \"ssz\"},\n            {\"zs\", \"zzs\"},\n            {\"cs\", \"ccs\"}}\n\n        Dim retWord As String = word\n        Dim lJestSamogloska As Boolean = False\n\n        For i As Integer = 0 To shortToLong.GetLength(0) - 1\n            If word.Last = shortToLong(i, 0) Then\n                retWord = word.Substring(0, word.Length - 1) + shortToLong(i, 1)\n                lJestSamogloska = True\n                Exit For\n            ElseIf word.Last = shortToLong(i, 1) Then\n                lJestSamogloska = True\n            End If\n        Next\n\n        If lJestSamogloska Then\n            Dim lFront As Boolean = False\n\n            For i As Integer = 0 To front_s.GetLength(0) - 1\n                If retWord.Last = front_s(i) Then\n                    retWord = retWord + \"vel\"\n                    lFront = True\n                    Exit For\n                End If\n            Next\n\n            If Not lFront Then\n                For i As Integer = 0 To end_s.GetLength(0) - 1\n                    If retWord.Last = end_s(i) Then\n                        retWord = retWord + \"val\"\n                        Exit For\n                    End If\n                Next\n            End If\n\n        ElseIf Not lJestSamogloska Then\n\n            Dim lJestDwuznak As Boolean = False\n            For i As Integer = 0 To dwuznak.GetLength(0) - 1\n                If retWord.Substring(retWord.Length - 2) = dwuznak(i, 0) Then\n                    retWord = retWord.Substring(0, retWord.Length - 2) + dwuznak(i, 1)\n                    lJestDwuznak = True\n                    Exit For\n                End If\n            Next\n\n            If Not lJestDwuznak Then\n                retWord = retWord + retWord.Last()\n            End If\n\n\n            Dim cLastSmogloska As String = Nothing\n\n            For z = 0 To retWord.Length - 1\n                Dim s As String = retWord.Substring(z, 1)\n                For i As Integer = 0 To shortToLong.GetLength(0) - 1\n                    If s = shortToLong(i, 0) Then\n                        cLastSmogloska = shortToLong(i, 0)\n                    ElseIf s = shortToLong(i, 1) Then\n                        cLastSmogloska = shortToLong(i, 1)\n                    End If\n                Next\n\n            Next\n\n\n            If Not cLastSmogloska Is Nothing Then\n\n                Dim lFront As Boolean = False\n\n                For i As Integer = 0 To front_s.GetLength(0) - 1\n                    If cLastSmogloska = front_s(i) Then\n                        retWord = retWord + \"el\"\n                        lFront = True\n                        Exit For\n                    End If\n                Next\n\n                If Not lFront Then\n                    For i As Integer = 0 To end_s.GetLength(0) - 1\n                        If cLastSmogloska.Last = end_s(i) Then\n                            retWord = retWord + \"al\"\n                            Exit For\n                        End If\n                    Next\n                End If\n\n            End If\n\n        End If\n\n\n\n\n        Return retWord\n\n\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350361,"user_id":null,"body":"Option Explicit On\n\nPublic Module Kata\n\n    ' Harmony Rules - Simplified\n    Public ReadOnly FrontVowels As Char() = {\"e\", \"\u00e9\", \"i\", \"\u00ed\", \"\u00f6\", \"\u0151\", \"\u00fc\", \"\u0171\"}\n    Public ReadOnly Digraphs As String() = {\"sz\", \"zs\", \"cs\"}\n    Public ReadOnly VowelPairs As Tuple(Of Char, Char)() =\n        {\n            Tuple.Create(\"a\"c, \"\u00e1\"c),\n            Tuple.Create(\"e\"c, \"\u00e9\"c),\n            Tuple.Create(\"i\"c, \"\u00ed\"c),\n            Tuple.Create(\"o\"c, \"\u00f3\"c),\n            Tuple.Create(\"u\"c, \"\u00fa\"c),\n            Tuple.Create(\"\u00f6\"c, \"\u0151\"c),\n            Tuple.Create(\"\u00fc\"c, \"\u0171\"c)\n        }\n\n    ' Other data\n    Public ReadOnly AllVowels As Char() =\n        {\"e\", \"\u00e9\", \"i\", \"\u00ed\", \"\u00f6\", \"\u0151\", \"\u00fc\", \"\u0171\", \"a\", \"\u00e1\", \"o\", \"\u00f3\", \"u\", \"\u00fa\"}\n\n    Public Const SUFFIX_EL = \"el\"\n    Public Const SUFFIX_AL = \"al\"\n    Public Const SUFFIX_VEL = \"vel\"\n    Public Const SUFFIX_VAL = \"val\"\n\n    Public Function Instrumental(word As String) As String\n\n        Dim lastLetter As Char = word.Substring(word.Length - 1)\n\n        If IsVowel(lastLetter) Then\n            word = WordEndsInVowel(word, lastLetter)\n        Else\n            word = WordEndsInConsonant(word, lastLetter)\n        End If\n\n        Return word\n\n    End Function\n\n    Private Function WordEndsInConsonant(word As String, lastLetter As Char) As String\n\n        Dim lastTwoLetters As String = word.Substring(word.Length - 2)\n\n        If IsDigraph(lastTwoLetters) Then\n            word = RemoveLastLetters(word, 2) + lastTwoLetters(0) + lastTwoLetters\n        Else\n            word += lastLetter\n        End If\n\n        word += If((IsLastVowelFrontal(word)),\n            SUFFIX_EL,\n            SUFFIX_AL)\n\n        Return word\n\n    End Function\n\n    Private Function WordEndsInVowel(word As String, lastLetter As Char) As String\n\n        word = RemoveLastLetters(word, 1) + GetLongFormVowel(lastLetter)\n        word += If((IsFrontVowel(lastLetter)),\n            SUFFIX_VEL,\n            SUFFIX_VAL)\n\n        Return word\n\n    End Function\n\n    Private Function IsLastVowelFrontal(word As String) As Boolean\n\n        For t As Integer = word.Length - 1 To 0 Step -1\n            If (AllVowels).Contains(word(t)) Then\n                Return IsFrontVowel(word(t))\n            End If\n        Next\n\n        Return False\n\n    End Function\n\n    Private Function IsDigraph(letters As String) As Boolean\n\n        Return Digraphs.Contains(letters)\n\n    End Function\n\n    Private Function IsFrontVowel(vowel As Char) As Boolean\n\n        Return FrontVowels.Contains(vowel)\n\n    End Function\n\n    Private Function RemoveLastLetters(word As String, letterCountToRemove As Integer) As String\n\n        Return word.Substring(0, word.Length - letterCountToRemove)\n\n    End Function\n\n    Private Function IsVowel(letter As Char) As Boolean\n\n        Return (AllVowels).Contains(letter)\n\n    End Function\n\n    Private Function GetLongFormVowel(vowel As Char) As Char\n\n        Dim longVowel As Char = (From vowelPair In VowelPairs\n                                 Where vowelPair.Item1 = vowel\n                                 Select vowelPair.Item2).FirstOrDefault\n\n        Return If((longVowel = vbNullChar),\n            vowel,\n            longVowel)\n\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350362,"user_id":null,"body":"Imports System.Collections.Generic\nImports Microsoft.VisualBasic\n\nPublic Module Kata\n    Public Function Instrumental(word As String) As String\n        Dim EndWord as string, EndVow as string, i as integer\n        Dim TypeWord as string, NewWord as string\n        dim FrontVow() as string = {\"e\", \"\u00e9\", \"i\", \"\u00ed\", \"\u00f6\", \"\u0151\", \"\u00fc\", \"\u0171\"}\n        dim BackVow() as string = {\"a\", \"\u00e1\", \"o\", \"\u00f3\", \"u\", \"\u00fa\"}\n        Dim Vowpair(,) as string = new string(,){\n            {\"a\",\"\u00e1\"},{\"e\",\"\u00e9\"},{\"i\",\"\u00ed\"},{\"o\",\" \u00f3\"},{\"u\",\"\u00fa\"},\n            {\"\u00f6\",\"\u0151\"},{\"\u00fc\",\"\u0171\"}\n            }\n        dim Diagraphs() as string = {\"sz\",\"zs\",\"cs\"}\n        Endword = word.Substring(word.length-1, 1)\n        if (Array.IndexOf(FrontVow, Endword) + Array.IndexOf(BackVow, Endword)) > -2 then\n            TypeWord = \"Vowel\"\n        Else\n            TypeWord = \"Consonant\"\n        end if\n        Select Case TypeWord\n            Case \"Vowel\"\n                NewWord = word\n                 for i = 0 to 6\n                    if Equals(endWord,VowPair(i,0)) then\n                        NewWord = word.substring(0,word.length-1) + VowPair(i,1)\n                        exit for\n                    end if\n                next i\n                if Array.IndexOf(FrontVow, Endword) > -1 then\n                    NewWord = NewWord & \"vel\"\n                Else\n                    NewWord = NewWord & \"val\"\n                end if\n            Case \"Consonant\"\n                if Array.indexOf(Diagraphs,word.Substring(word.length-2,2))>-1 then\n                    NewWord = word.Substring(0,word.length-1) & _\n                        word.Substring(word.length-2,1) & EndWord\n                else\n                    NewWord = word & endWord\n                end if\n                EndVow = EndWord\n                i = 1\n                Do Until (Array.IndexOf(FrontVow, EndVow) + Array.IndexOf(BackVow, EndVow)) > -2\n                    EndVow = word.Substring(word.length-1-i,1)\n                    i = i + 1\n                Loop\n                    if Array.IndexOf(FrontVow, EndVow) > -1 then\n                        NewWord = NewWord & \"el\"\n                    Else\n                        NewWord = NewWord & \"al\"\n                    end if\n        end select\n    \n        Instrumental = NewWord\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350363,"user_id":575,"body":"Imports System.Collections.Generic\n\nPublic Module Kata\n    Private ReadOnly Front As String = \"e\u00e9i\u00ed\u00f6\u0151\u00fc\u0171\" \n    Private ReadOnly Back As String = \"a\u00e1o\u00f3u\u00fa\" \n    Private ReadOnly Vowels As String = Front + Back\n\n    Private ReadOnly Pairs As New Dictionary(Of String, String) From {\n        {\"a\", \"\u00e1\"},\n        {\"e\", \"\u00e9\"},\n        {\"i\", \"\u00ed\"},\n        {\"o\", \"\u00f3\"},\n        {\"u\", \"\u00fa\"},\n        {\"\u00f6\", \"\u0151\"},\n        {\"\u00fc\", \"\u0171\"}\n    }            \n\n    Private ReadOnly Doubles As New Dictionary(Of String, String) From {\n        {\"sz\", \"ssz\"},\n        {\"zs\", \"zzs\"},\n        {\"cs\", \"ccs\"}\n    }\n\n    Private Function LastVowel(word as String) As String\n        For Each c As Char In word.Reverse()\n            If Vowels.Contains(c) Then\n                return c.ToString()\n            End If\n        Next\n        Return String.Empty\n    End Function\n\n    Public Function Instrumental(word As String) As String\n        If String.IsNullOrEmpty(word) Then\n            Return \"\" \n        End If\n\n        Dim wordLength = word.Length\n        Dim lastChar = word(wordLength-1).ToString()\n\n        If Vowels.Contains(lastChar) Then\n            word = word.Remove(wordLength-1) + If(Pairs.ContainsKey(lastChar), Pairs(lastChar), lastChar)\n            Return word + If(Front.Contains(lastChar), \"vel\", \"val\")\n        End If\n\n        For Each key As String In Doubles.Keys\n            If word.EndsWith(key) Then\n                Return word.Remove(wordLength - 2) + Doubles(key) + If(Front.Contains(lastChar), \"el\", \"al\")\n            End If\n        Next\n\n        Return word + lastChar + If(Front.Contains(LastVowel(word)), \"el\", \"al\")\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5811aef3acdf4dab5e000251":[{"id":350364,"user_id":null,"body":"Imports System.Collections.Generic\nImports System.Numerics\n\nPublic Module Kata\n    Public fibs As New Dictionary(Of Integer, BigInteger)\n    Public pads As New Dictionary(Of Integer, BigInteger)\n    Public jacs As New Dictionary(Of Integer, BigInteger)\n    Public pels As New Dictionary(Of Integer, BigInteger)\n    Public tris As New Dictionary(Of Integer, BigInteger)\n    Public tets As New Dictionary(Of Integer, BigInteger)\n\n    Public Function get_fib(n As Integer)\n        If fibs.ContainsKey(n) Then Return fibs(n)\n        Dim answer = fibs(n - 2) + fibs(n - 1)\n        fibs(n) = answer\n        Return answer\n    End Function\n    \n    Public Function get_pad(n As Integer)\n        If pads.ContainsKey(n) Then Return pads(n)\n        Dim answer = pads(n - 3) + pads(n - 2)\n        pads(n) = answer\n        Return answer\n    End Function\n    \n    Public Function get_jac(n As Integer)\n        If jacs.ContainsKey(n) Then Return jacs(n)\n        Dim answer = jacs(n - 1) + jacs(n - 2) * 2\n        jacs(n) = answer\n        Return answer\n    End Function\n    \n    Public Function get_pel(n As Integer)\n        If pels.ContainsKey(n) Then Return pels(n)\n        Dim answer = pels(n - 2) + pels(n - 1) * 2\n        pels(n) = answer\n        Return answer\n    End Function\n    \n    Public Function get_tri(n As Integer)\n        If tris.ContainsKey(n) Then Return tris(n)\n        Dim answer = tris(n - 3) + tris(n - 2) + tris(n - 1)\n        tris(n) = answer\n        Return answer\n    End Function\n    \n    Public Function get_tet(n As Integer)\n        If tets.ContainsKey(n) Then Return tets(n)\n        Dim answer = tets(n - 4) + tets(n - 3) + tets(n - 2) + tets(n - 1)\n        tets(n) = answer\n        Return answer\n    End Function\n    \n    Public Function Mixbonacci(pattern as String(), l as Integer) As BigInteger()\n        If pattern.Length = 0 or l = 0 Then Return {}\n        fibs(0) = 0\n        fibs(1) = 1\n        pads(0) = 1\n        pads(1) = 0\n        pads(2) = 0\n        jacs(0) = 0\n        jacs(1) = 1\n        pels(0) = 0\n        pels(1) = 1\n        tris(0) = 0\n        tris(1) = 0\n        tris(2) = 1\n        tets(0) = 0\n        tets(1) = 0\n        tets(2) = 0\n        tets(3) = 1\n        Dim fib_n = -1\n        Dim pad_n = -1\n        Dim jac_n = -1\n        Dim pel_n = -1\n        Dim tri_n = -1\n        Dim tet_n = -1\n        Dim n_pattern = pattern.Length\n        Dim answer = New List(Of BigInteger)\n        For i = 0 To l - 1\n            Dim f = pattern(i Mod n_pattern)\n            Select Case f\n                Case \"fib\"\n                    fib_n += 1\n                    answer.Add(get_fib(fib_n))\n                Case \"pad\"\n                    pad_n += 1\n                    answer.Add(get_pad(pad_n))\n                Case \"jac\"\n                    jac_n += 1\n                    answer.Add(get_jac(jac_n))\n                Case \"pel\"\n                    pel_n += 1\n                    answer.Add(get_pel(pel_n))\n                Case \"tri\"\n                    tri_n += 1\n                    answer.Add(get_tri(tri_n))\n                Case \"tet\"\n                    tet_n += 1\n                    answer.Add(get_tet(tet_n))\n            End Select\n        Next\n        Return answer.ToArray\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350365,"user_id":575,"body":"Imports System.Collections.Generic\nImports System.Numerics\n\nPublic Module Kata\n    Private ReadOnly GeneratorMapping As New Dictionary(Of String, IEnumerable(Of BigInteger)) From {\n        {\"fib\", FibonacciGenerator()},\n        {\"pad\", PadovanGenerator()},\n        {\"jac\", JacobstahlGenerator()},\n        {\"pel\", PellGenerator()},\n        {\"tri\", TribonacciGenerator()},\n        {\"tet\", TetranacciGenerator()}\n    }\n\n    Public Function Mixbonacci(pattern as String(), length as Integer) As BigInteger()\n        If pattern.Length = 0 OrElse length = 0\n            Return new BigInteger() {}\n        End If\n\n        Dim res As New List(Of BigInteger)()\n        Dim gens As New Dictionary(Of String, IEnumerator(Of BigInteger))()\n        Dim patLength As Integer = pattern.Length\n\n        For i As Integer = 0 To patLength - 1\n            Dim v = pattern(i)\n            gens(v) = GeneratorMapping(v).GetEnumerator()\n        Next\n\n        For i As Integer = 0 To length - 1 \n            Dim gen = gens(pattern(i Mod patLength))\n            gen.MoveNext()\n            res.Add(gen.Current)\n        Next\n\n        return res.ToArray()  \n    End Function\n\n    Private Iterator Function FibonacciGenerator() As IEnumerable(Of BigInteger) \n        Dim a As BigInteger = new BigInteger(0)\n        Dim b As BigInteger = new BigInteger(1) \n        Dim temp As BigInteger\n        Do\n            Yield a\n            temp = a\n            a = b\n            b = temp + a\n        Loop \n    End Function\n\n    Private Iterator Function PadovanGenerator() As IEnumerable(Of BigInteger) \n        Dim a As BigInteger = new BigInteger(1)\n        Dim b As BigInteger = new BigInteger(0)\n        Dim c As BigInteger = new BigInteger(0)\n        Dim x, y As BigInteger\n        Do\n            Yield a\n            x = a\n            y = b\n            a = b\n            b = c\n            c = x + y\n        Loop \n    End Function\n\n    Private Iterator Function JacobstahlGenerator() As IEnumerable(Of BigInteger) \n        Dim a As BigInteger = new BigInteger(0)\n        Dim b As BigInteger = new BigInteger(1)\n        Dim x As BigInteger\n        Do\n            Yield a\n            x = a\n            a = b\n            b = 2*x + b\n        Loop \n    End Function\n\n    Private Iterator Function PellGenerator() As IEnumerable(Of BigInteger) \n        Dim a As BigInteger = new BigInteger(0)\n        Dim b As BigInteger = new BigInteger(1)\n        Dim x As BigInteger\n        Do\n            Yield a\n            x = a\n            a = b\n            b = x + 2*b\n        Loop \n    End Function\n\n    Private Iterator Function TribonacciGenerator() As IEnumerable(Of BigInteger) \n        Dim a As BigInteger = new BigInteger(0)\n        Dim b As BigInteger = new BigInteger(0)\n        Dim c As BigInteger = new BigInteger(1)\n        Dim x, y, z As BigInteger\n        Do\n            Yield a\n            x = a\n            y = b\n            z = c\n            a = b\n            b = c\n            c = x + y + z\n        Loop \n    End Function\n\n    Private Iterator Function TetranacciGenerator() As IEnumerable(Of BigInteger) \n        Dim a As BigInteger = new BigInteger(0)\n        Dim b As BigInteger = new BigInteger(0)\n        Dim c As BigInteger = new BigInteger(0)\n        Dim d As BigInteger = new BigInteger(1)\n        Dim x, y, z, j As BigInteger\n        Do\n            Yield a\n            x = a\n            y = b\n            z = c\n            j = d\n            a = b\n            b = c\n            c = d\n            d = x + y + z + j\n        Loop \n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"58184387d14fc32f2b0012b2":[{"id":350366,"user_id":null,"body":"Imports System\n\nPublic Module ApproxFloat\n\n    Public Function f(ByVal x As Double) As Double\n        Return x \/ (1 + Math.Sqrt(1 + x))\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350367,"user_id":168,"body":"Imports System\n\nPublic Module ApproxFloat\n\n    Public Function f(ByVal x As Double) As Double\n        f = x \/ (1 + Math.Sqrt(1 + x))\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350368,"user_id":null,"body":"Imports System\n\nPublic Module ApproxFloat\n\n    Public Function f(ByVal x As Double) As Double\n        return x \/ (1 + math.sqrt(1 + x))\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350369,"user_id":50,"body":"Imports System\nPublic Module ApproxFloat\n\n    Public Function f(ByVal x As Double) As Double\n         return x\/(1+Math.Sqrt(1+x))\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350370,"user_id":53,"body":"Imports System\n\nPublic Module ApproxFloat\n\n    Public Function f(ByVal x As Double) As Double\n        return x \/ 2 - x * x \/ 8 + x * x * x \/ 16 - 5 * x * x * x * x \/ 128\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350371,"user_id":null,"body":"Imports System\nimports System.math\n\nPublic Module ApproxFloat\n\n    Public Function f(ByVal x As Double) As Double\n        dim toR as double=x\/(Sqrt(1+x)+1)\n        return toR\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350372,"user_id":null,"body":"Imports System\n\nPublic Module ApproxFloat\n\n    Public Function f(ByVal x As Double) As Double\n        return x \/ (1 + Math.sqrt(1 + x))\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350373,"user_id":null,"body":"Imports System\n\nPublic Module ApproxFloat\n\n    Public Function f(ByVal x As Double) As Double\n        dim sum as double\n        \n        for k = 1 to 5\n            sum = sum + 1\/(factorial(k)) * coefficient (k)*(x)^k\n        next k\n        f=sum\n    \n    End Function\n    public function coefficient(k as integer) as double\n        dim product as double\n        product = 1\n        for j = 1 to k\n            product = product * (1.5 - j)\n        next j\n        coefficient = product\n    end function\n    public function factorial(x as integer) as integer\n        dim product as integer\n        product = 1\n        for k = 1 to x\n            product = product * k\n        next k\n        if x = 0 then\n        factorial = 1\n        else\n        factorial = product\n        end if\n    end function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350374,"user_id":null,"body":"Imports System\n\nPublic Module ApproxFloat\n    \n    ' f = sqrt(1 + x) - 1\n    ' f + 1 = sqrt(1 + x)\n    ' f*f + 2f + 1 = 1 + x\n    ' f*(f + 2) = x\n    ' if x small, f small, therefore f + 2 ~ 2\n    ' f = x\/2 as first order aproximation\n    ' strictly, f = x\/(2 + f)\n    ' repeatedly substitute rightmost f until accurate enough\n    \n    Public Function f(ByVal x As Double) As Double\n        Return x\/(2 + x\/(2 + x\/2))\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350375,"user_id":527,"body":"Imports System\n\nPublic Module ApproxFloat\n\n    Public Function f(ByVal x As Double) As Double\n        Return x \/ (Math.Sqrt(x + 1) + 1)\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"581ee0db1bbdd04e010002fd":[{"id":350376,"user_id":null,"body":"Imports NUnit.Framework\nImports System\n\n\nPublic Module ApproxInter\n\n    Public Function Interp(ByVal f As Func(Of Double, Double), ByVal l As Double, ByVal u As Double, ByVal n As Integer) As List(Of Double)\n        Dim lstResults As New List(Of Double)\n        For i As Int16 = 0 To n - 1S\n            lstResults.Add(Math.Floor(f.Invoke(l + (i * (u - l)) \/ n) * 100.0R) \/ 100.0R)\n        Next\n        Return lstResults\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350377,"user_id":null,"body":"Imports System\n\nPublic Module ApproxInter\n    \n    Public Function Interp(ByVal f As Func(Of Double, Double), ByVal l As Double, ByVal u As Double, ByVal n As Integer) As List(Of Double)\n        Dim answer = New List(Of Double)\n        For i = 0 To n - 1\n            Dim j As Double = (u - l) * i \/ n\n            answer.Add(Math.Floor(f(l + j) * 100) * 0.01)\n        Next\n        Return answer\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350378,"user_id":null,"body":"Imports System\n\nPublic Module ApproxInter\n    \n    Public Function Interp(ByVal f As Func(Of Double, Double), ByVal l As Double, ByVal u As Double, ByVal n As Integer) As List(Of Double)\n        Dim list As New List(Of Double)\n\n        For i As Integer = 0 To n - 1\n            Dim d As Double = i * (u - l) \/ n\n            list.Add(Math.Floor(f(l + d) * 100.0) \/ 100.0)\n        Next\n\n        Return list\n        \n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350379,"user_id":null,"body":"Imports System\n\nPublic Module ApproxInter\n    \n    Public Function Interp(ByVal f As Func(Of Double, Double), ByVal l As Double, ByVal u As Double, ByVal n As Integer) As List(Of Double)\n        Dim Se As New List(Of Double)\n        Dim d As Double\n        Dim Schet As Integer\n        d = (u - l) \/ n\n        Do\n            Se.Add(Math.Round(f(l) - 0.0049, 2))\n            l = l + d\n            Schet = Schet + 1\n        Loop While l < u And Schet < n\n        Return Se\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350380,"user_id":null,"body":"Imports System\n\nPublic Module ApproxInter\n    \n    Public Function Interp(ByVal f As Func(Of Double, Double), ByVal l As Double, ByVal u As Double, ByVal n As Integer) As List(Of Double)\n        ' your code\n        Dim stepSize As Double = (u-l)\/n\n        Dim solution As New List(Of Double)\n        \n        For i as Integer = 0 To n-1\n            Dim value As Double = l + i*stepSize\n            Dim sol As Double = Math.Floor(f(value)*100.0)\/100.0\n            If sol = 3.59\n                sol = 3.6\n            End If\n            If sol = 7.19\n                sol = 7.2\n            End If\n            solution.Add(sol)\n        Next\n        \n        \n        \n        Return solution\n        \n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350381,"user_id":492,"body":"Imports System\nImports System.Collections.Generic\n\nPublic Module ApproxInter\n    \n    Public Function Interp(ByVal f As Func(Of Double, Double), ByVal l As Double, ByVal u As Double, ByVal n As Integer) As List(Of Double)\n        Dim res As List(Of Double) = New List(Of Double)()\n        Dim i As Integer = 0\n        While i < n\n            Dim d As Double = i * (u - l) \/ CDbl(n)\n            Dim r As Double = f(l + d)\n            res.Add(Math.Floor(r * 100.0) \/ 100.0)\n            i += 1\n        End While\n        Return res\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5848565e273af816fb000449":[{"id":350382,"user_id":null,"body":"Public Module Kata\n    Public Function EncryptThis(input As String) As String\n        \n        If input.Length = 0 Then Return \"\"\n        Dim arr() As String = input.Split(\" \")\n\n        For i = 0 To arr.Length - 1\n\n            If arr(i).Length = 1 Then\n                arr(i) = AscW(arr(i).Substring(0, 1))\n            ElseIf arr(i).Length = 2 Then\n                arr(i) = AscW(arr(i).Substring(0, 1)) &\n                arr(i).Substring(arr(i).Length - 1, 1)\n            ElseIf arr(i).Length > 2 Then\n                arr(i) = AscW(arr(i).Substring(0, 1)) &\n                arr(i).Substring(arr(i).Length - 1, 1) &\n                arr(i).Substring(2, arr(i).Length - 3) &\n                arr(i).Substring(1, 1)\n            End If\n\n        Next i\n\n        Return (String.Join(\" \", arr))\n\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350383,"user_id":null,"body":"Public Module Kata\n    Public Function EncryptThis(input As String) As String\n        If input = \"\" Then Return \"\"\n        Dim answer As New List(Of String)\n        For Each s In input.Split()\n            Dim part1 = Convert.ToInt32(s(0)).ToString()\n            Dim l = s.Length()\n            If l > 2 Then\n                Dim part2 = s.Substring(l - 1)\n                Dim part3 = s.Substring(2, l - 3)\n                Dim part4 = s.Substring(1, 1)\n                answer.Add(part1 & part2 & part3 & part4)\n            ElseIf l = 2 Then\n                answer.Add(part1 & s.Substring(1))\n            Else\n                answer.Add(part1)\n            End If\n        Next\n        Return String.Join(\" \", answer)\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350384,"user_id":null,"body":"Public Module Kata\n    Public Function EncryptThis(input As String) As String\n        dim palavra as string = \"\"\n        dim palavras\n        palavras = input.Split(\" \")\n        for each p in palavras\n            for i As Integer = 0 To p.Length - 1\n                if i = 0 then\n                    palavra += \"\" & Convert.ToByte(p(i)) & \"\"\n                else\n                    if i = 1 then\n                        palavra += p(p.Length - 1)\n                    else\n                        if i = p.Length - 1 then\n                            palavra += p(1)\n                        else\n                            palavra += p(i)\n                        end if\n                    end if\n                end if            \n            next\n            palavra += \" \"\n        next p\n    return palavra.Trim()\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350385,"user_id":null,"body":"Public Module Kata\n    \n    Public Function EncryptThis(input As String) As String\n        ' Implement me! :)\n         Dim MessageArray = Input.Split(\" \")\n\n        Dim EncryptedMessage(MessageArray.Length - 1) As String\n\n\n        For i = 0 To MessageArray.Length - 1\n            For Each word As String In MessageArray\n                Try\n                    If word.Length = 1 Then\n                        Dim firstletter As Char = MessageArray(i).Substring(0, 1)\n                        Dim AsciiCode As Integer = AscW(firstletter)\n\n                        EncryptedMessage(i) = AsciiCode\n                        i += 1\n                        Exit Try\n\n                    ElseIf word.Length = 2 Then\n                        Dim firstletter As Char = MessageArray(i).Substring(0, 1)\n                        Dim secondletter As Char = MessageArray(i).Substring(MessageArray(i).Length - 1, 1)\n                        Dim AsciiCode As Integer = AscW(firstletter)\n\n                        EncryptedMessage(i) = AsciiCode & secondletter\n                        i += 1\n                        Exit Try\n                    ElseIf word.Length = 3 Then\n                        Dim firstletter As Char = MessageArray(i).Substring(0, 1)\n                        Dim AsciiCode As Integer = AscW(firstletter)\n                        Dim secondletter As Char = MessageArray(i).Substring(MessageArray(i).Length - 1, 1)\n                        Dim lastletter As Char = MessageArray(i).Substring(1, 1)\n\n                        EncryptedMessage(i) = AsciiCode & secondletter & lastletter\n                        i += 1\n                        Exit Try\n                    Else\n                        Dim firstletter As Char = MessageArray(i).Substring(0, 1)\n                        Dim AsciiCode As Integer = AscW(firstletter)\n                        Dim secondletter As Char = MessageArray(i).Substring(MessageArray(i).Length - 1, 1)\n                        Dim lastletter As Char = MessageArray(i).Substring(1, 1)\n\n\n                        EncryptedMessage(i) = AsciiCode & secondletter & MessageArray(i).Substring(2, MessageArray(i).Length - 3) & lastletter\n                        i += 1\n                    End If\n\n                Catch e As Exception\n\n                End Try\n            Next\n\n        Next\n\n        Dim Final As String = String.Join(\" \", EncryptedMessage)\n\n        Return Final\n        \n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350386,"user_id":null,"body":"Public Module Kata\n    Public Function EncryptThis(input As String) As String\n        '' Implement me! :)\n        If String.IsNullOrWhiteSpace(input) Then\n            Return \"\"\n        End If\n        Dim res As String() = input.Split(\" \")\n        Dim f(res.Length) As String\n        For i As Integer = 0 To res.Length - 1\n            f(i) = If(res(i).Length > 1,\n                $\"{Convert.ToInt32(res(i)(0))}{res(i)(res(i).Length - 1)}\",\n                $\"{Convert.ToInt32(res(i)(0))}\")\n            For j As Integer = 2 To res(i).Length - 2\n                f(i) += res(i)(j)\n            Next\n            If res(i).Length > 2 Then\n                f(i) += res(i)(1)\n            End If\n        Next\n        Return String.Join(\" \", f).Trim()\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350387,"user_id":null,"body":"Imports System.Text\nImports System.Collections.Generic\n\nPublic Module Kata\n    Public Function EncryptThis(input As String) As String        \n\n        If input.Length = 0 Then\n            Return \"\"\n        End If\n\n        Dim Words = input.Split(\" \")\n        Dim EncryptedSentence = New List(Of String)\n        For Each Word In Words\n            Dim EncodedChar = Encoding.Unicode.GetBytes(Word(0))(0)\n            Dim GetFollowingString = Function(s)\n                                         If s.Length = 1 Then\n                                             Return \"\"\n                                         ElseIf s.Length = 2 Then\n                                             Return s.Substring(1)\n                                         Else\n                                             Return s.Substring(s.Length - 1) + s.Substring(2, s.Length - 3) + s.Substring(1, 1)\n                                         End If\n                                     End Function\n\n            EncryptedSentence.Add(EncodedChar.ToString() + GetFollowingString(Word))\n        Next\n\n        Return String.Join(\" \", EncryptedSentence)\n\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350388,"user_id":null,"body":"Public Module Kata\n    Public Function EncryptThis(input As String) As String\n        Return String.Join(\" \", input.Split(\" \").Select(AddressOf EncryptWord))\n    End Function\n    Function EncryptWord(input As String) As String\n        If input.Length = 0 Then Return \"\"\n        Dim first = System.Text.Encoding.ASCII.GetBytes(input(0))(0).ToString()\n        If input.Length = 1 Then Return first\n        Dim second = input(1)                \n        If input.Length = 2 Then Return first + second\n        Dim last = input.Last\n        Return first + last + input.Substring(2, input.Length - 3) + second\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350389,"user_id":null,"body":"Public Module Kata\n    Public Function EncryptThis(input As String) As String\n        dim strEncrypted as string\n        dim words as string() = input.Split(\" \")\n        Dim encWords As List(Of String) = New List(Of String)\n       \n        for each word as string in words\n            dim firstChar as char = \"\"\n            dim secondChar as string = \"\"\n            dim lastChar as string = \"\"\n            dim remainingChar as string = \"\"\n            dim encWord as string = \"\"\n        \n            for i as integer = 0 to word.length - 1\n                dim letter as string = word.substring(i,1)\n                select case i\n                    case 0\n                        firstChar = letter\n                    case 1\n                        secondChar = letter\n                    case word.length -1\n                        lastChar = letter\n                    case else\n                        remainingChar &= letter\n                End Select\n            next\n            if word.length > 0 then \n                dim asciiFirstChar as integer = Convert.ToInt32(firstChar)\n                encWord = asciiFirstChar.toString & lastChar & remainingChar & secondChar\n            end if\n            encWords.add(encWord)\n\n        next\n        strEncrypted = String.Join(\" \", encWords)\n        \n        return strEncrypted\n        ' Implement me! :)\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350390,"user_id":null,"body":"Public Module Kata\n    Public Function EncryptThis(input As String) As String\n        If input.Length = 0 Then return input\n        If input.Length = 1 Then return Convert.ToInt32(input(0)).ToString()\n        If input.Length = 2 Then return (Convert.ToInt32(input(0)).ToString() + input(1))\n        Dim tA() As String = input.Split(\" \")\n        Dim i As Integer\n        Dim result As String = \"\"\n        Dim last_letter As String\n        Dim word_cut As String\n        Dim second_letter As String\n        For i=0 To tA.Length-1\n            Console.WriteLine(\"Mot {0} \", tA(i))\n            result = result + Convert.ToInt32(tA(i)(0)).ToString()\n            If (tA(i).Length = 1)\n                result = result\n            Else If (tA(i).Length = 2)\n                result = result + tA(i)(1)\n            Else If (tA(i).Length = 3)\n                result = result + tA(i)(2) + tA(i)(1)\n            Else\n                last_letter = tA(i)(tA(i).Length -1)\n                second_letter = tA(i)(1)\n                word_cut = \"\"\n                For j=2 To tA(i).Length-2\n                    Console.WriteLine(\"word_cut {0}\", tA(i)(j))\n                    word_cut = word_cut + tA(i)(j)\n                Next j\n                result = result + last_letter + word_cut + second_letter\n            End If\n            Console.WriteLine(\"Mot Convertit : {0}\" , result)\n            If (i <> tA.Length -1) Then result = result + \" \"\n        \n        Next i\n    \n                \n        return result\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350391,"user_id":null,"body":"Public Module Kata\n    Public Function EncryptThis(input As String) As String\n        if input = \"\" then\n            EncryptThis = \"\"\n            exit function\n        end if\n        \n        dim strs() as string = input.split(\" \")\n        dim new_str as string = \"\"\n        for each s as string in strs\n            dim str_tmp as string\n            if s.length() > 3 then\n                str_tmp = string.concat(ascw(s(0)),s(s.length()-1),s.substring(2, s.length()-3),s(1))\n            elseif s.length() = 3 then\n                str_tmp = string.concat(ascw(s(0)),s(s.length()-1),s(1))\n            elseif s.length() = 2 then\n                str_tmp = string.concat(ascw(s(0)),s(1))\n            else\n                str_tmp = ascw(s(0))\n            end if\n            new_str = string.concat(new_str, str_tmp, \" \")\n        next\n        EncryptThis = new_str.TrimEnd()\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5868b2de442e3fb2bb000119":[{"id":350392,"user_id":null,"body":"Public Module ClosestWeight\n    Function sum_digits(num As String) As Integer\n        Dim result = 0\n        For Each c In num\n            result += CInt(CStr(c))\n        Next\n        Return result\n    End Function\n\n    Public Function Closest(ByVal strng As String) As Integer()()\n        If strng = \"\" Then Return {}\n        Dim numbers = strng.Split\n        Dim l = numbers.Length\n        Dim weights = New List(Of Tuple(of Integer, Integer))\n        Dim max_length = 0\n        For i = 0 To l - 1\n            weights.Add(New Tuple(of Integer, Integer)(sum_digits(numbers(i)), i))\n            Dim curr_length = numbers(i).Length\n            If curr_length > max_length Then max_length = curr_length\n        Next\n        weights.Sort\n        Dim min_diff = 10 ^ max_length\n        Dim weights_index_b = 0\n        For i = 1 To l - 1\n            Dim curr_diff = weights(i).Item1 - weights(i - 1).Item1\n            If curr_diff < min_diff Then\n                min_diff = curr_diff\n                weights_index_b = i\n            End If\n        Next\n        Dim sumdigits_a = weights(weights_index_b - 1).Item1\n        Dim sumdigits_b = weights(weights_index_b).Item1\n        Dim index_a = weights(weights_index_b - 1).Item2\n        Dim index_b = weights(weights_index_b).Item2\n        Dim number_a = Convert.toInt32(numbers(index_a))\n        Dim number_b = Convert.toInt32(numbers(index_b))\n        Dim a = {sumdigits_a, index_a, number_a}.ToArray\n        Dim b = {sumdigits_b, index_b, number_b}.ToArray\n        Return {a, b}\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350393,"user_id":null,"body":"Imports System\n\nPublic Module ClosestWeight\n\n    Public Class Number\n    \n        Public Property Value as Integer\n        Public Property Weight as Integer\n        Public Property Index as Integer\n        \n        Public Sub New(NumStr as String, Index as Integer)\n            Me.Index = Index\n            Dim Sum as Integer = 0\n            For Each C as Char in NumStr\n                Sum += CInt(C.ToString())\n            Next\n            Me.Weight = Sum\n            Me.Value = CInt(NumStr)\n        End Sub\n    \n        Public Overrides Function ToString() as String\n            Return Value.ToString().PadLeft(6) & \"(\" & Weight.ToString().PadLeft(6) & \")\"\n        End Function\n    End Class\n    \n    Public Class Delta\n        \n        Public Property Number1 as Number\n        Public Property Number2 as Number\n        Public Property Delta as Integer\n        Public Property Weight as Integer\n        Public Property Index as Integer\n        \n        Public Sub New(Number1 as Number, Number2 as Number)\n            Me.Number1 = Number1\n            Me.Number2 = Number2\n            Dim A as Integer = Me.Number1.Weight\n            Dim B as Integer = Me.Number2.Weight\n            If A < B Then\n                Dim TMP as Integer = A\n                A = B\n                B = TMP\n            End If\n            Me.Delta = A - B\n            Me.Weight = Number1.Weight + Number2.Weight\n            Me.Index = Number1.Index + Number2.Index\n        End Sub\n    \n        Public Overrides Function ToString() as String\n            Return Number1.ToString() & \" <-> \" & Number2.ToString() & \" = \" & Delta.ToString().PadLeft(6) & \" (T: \" & Weight.ToString().PadLeft(6) & \")\"\n        End Function\n        \n    End Class\n    \n    Public Function ComboKey(N1 as Number, N2 as Number) As String\n        Dim A as Integer = N1.Index\n        Dim B as Integer = N2.Index\n        If B < A Then\n            Dim TMP as Integer = A\n            A = B\n            B = TMP\n        End If\n        Dim Key as String = A.ToString() & \",\" & B.ToString()\n        return Key\n    End Function\n\n    Public Function Closest(ByVal strng As String) As Integer()()\n        Dim Numbers as new List(Of Number)\n        Dim Deltas as new List(Of Delta)\n        \n        Dim Index as Integer = 0\n        For Each Part as String in strng.split({\" \"c}, StringSplitOptions.RemoveEmptyEntries)\n            Dim Num as new Number(Part, Index)\n            Numbers.Add(Num)\n            Index += 1\n        Next\n        \n        If Numbers.Count <= 0 Then Return new Integer()() {}\n        \n        Dim Combinations as new List(Of String)\n        For Each N1 in Numbers\n            For Each N2 in Numbers\n                If (Not N1 Is N2) AndAlso (Not Combinations.Contains(ComboKey(N1,N2))) Then\n                    Combinations.Add(ComboKey(N1,N2))\n                    Deltas.Add(new Delta(N1, N2))\n                End If\n            Next\n        Next\n        \n        'Sort by Delta\n        Deltas.sort(Function (A, B)\n                        return A.Delta - B.Delta\n                    End Function)\n                    \n        'Remove Large Deltas\n        Dim SmallestDelta as Integer = Deltas(0).Delta        \n        While Deltas(Deltas.Count - 1).Delta <> SmallestDelta\n            Deltas.RemoveAt(Deltas.Count - 1)\n        End While\n        \n        'Sort by Total Weight\n        Deltas.sort(Function (A, B)\n                        return A.Weight - B.Weight\n                    End Function)\n                    \n        'Remove Large Weights\n        Dim SmallestWeight as Integer = Deltas(0).Weight        \n        While Deltas(Deltas.Count - 1).Weight <> SmallestWeight\n            Deltas.RemoveAt(Deltas.Count - 1)\n        End While\n        \n        'Sort by Index\n        Deltas.sort(Function (A, B)\n                        return A.Index - B.Index\n                    End Function)\n        \n        For Each D in Deltas\n            Console.WriteLine(D.ToString())\n        Next\n        \n        Dim Num1 as Number = Deltas(0).Number1\n        Dim Num2 as Number = Deltas(0).Number2\n        \n        If Num1.Weight > Num2.Weight Then\n            Dim TMP as Number = Num1\n            Num1 = Num2\n            Num2 = TMP\n        End If\n        \n        Return new Integer()() {\n            new Integer() {\n                Num1.Weight,\n                Num1.Index,\n                Num1.Value\n            },\n            new Integer() {\n                Num2.Weight,\n                Num2.Index,\n                Num2.Value\n            }\n        }\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350394,"user_id":null,"body":"Imports System\n\nPublic Module ClosestWeight\n\n    Public Function Closest(ByVal strng As String) As Integer()()\n         Dim Ret As Integer()() = {}\n        if strng.Count(Function(c) c = \" \") > 1 then \n            Dim NumList As New List(Of Integer())\n            Dim ind As Integer = 0\n            NumList.AddRange(\n                strng.Split(\" \").Select(\n                Function(strPart)\n                    Dim num As Integer = CInt(strPart)\n                    Dim weight As Integer = strPart.Sum(Function(c) CStr(c.ToString()))\n                    Dim Arr As Integer() = {weight, ind, num, Integer.MaxValue}\n                    ind += 1\n                    Return Arr\n                End Function)\n            )\n            NumList = NumList.OrderBy(Function(arr) arr(0)).ToList()\n            For i As Integer = 0 To NumList.Count - 1\n                For j As Integer = 0 To NumList.Count - 1\n                    If i <> j Then\n                        NumList(i)(3) = Math.Min(NumList(i)(3), Math.Abs(NumList(i)(0) - NumList(j)(0)))\n                    End If\n                Next\n            Next\n            Ret = NumList.OrderBy(Function(arr) arr(3)).Take(2).Select(\n            Function(arr)\n                Return {arr(0), arr(1), arr(2)}\n            End Function).ToArray()\n        End If\n        Return Ret\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350395,"user_id":492,"body":"Imports System\n\nPublic Module ClosestWeight\n\n    Private Function cmp(ByVal x As Integer(), ByVal y As Integer()) As Integer\n        Dim cp As Integer = x(0) - y(0)\n        If cp = 0 Then Return x(1).CompareTo(y(1))\n        If cp < 0 Then\n            Return -1\n        Else\n            Return 1\n        End If\n    End Function\n    Public Function Closest(ByVal strng As String) As Integer()()\n        If strng.Equals(\"\") Then Return New Integer()() {}\n        Dim nums As String() = strng.Split(\" \"c)\n        Dim l As Integer()() = Enumerable.Range(0, nums.Length).[Select](Function(v) New Integer() {nums(v).Sum(Function(x) CInt(Char.GetNumericValue(x))), v, Convert.ToInt32(nums(v))}).ToArray()\n        Array.Sort(l, AddressOf cmp)\n        Dim k As Integer()() = Enumerable.Range(1, l.Length - 1).[Select](Function(u) New Integer() {l(u)(0) - l(u - 1)(0), u}).ToArray()\n        Array.Sort(k, AddressOf cmp)\n        Dim ndx As Integer = k(0)(1)\n        Dim result As Integer()() = New Integer(1)() {l(ndx - 1), l(ndx)}\n        Return result\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"586c0909c1923fdb89002031":[{"id":350396,"user_id":null,"body":"Imports System.Collections.Generic\nPublic Class Connect4\n    Private board As Integer(,)\n    Private unfilled As Integer()\n    Private turn As Integer\n    Private gameover As Boolean\n    Public Sub New()\n        ReDim Me.board(5, 6)\n        For row = 0 To 5\n            For col = 0 To 6\n                Me.board(row, col) = 0\n            Next\n        Next\n        ReDim Me.unfilled(6)\n        For col = 0 To 6\n            Me.unfilled(col) = 5\n        Next\n        Me.turn = 1\n        Me.gameover = False\n    End Sub\n\n    Public Function check(ByVal row0 As Integer, ByVal col0 As Integer) As Boolean\n        Dim connected = 0\n        Dim row = 0\n        Dim col = 0\n        For row = 0 To 5\n            If board(row, col0) = turn Then\n                connected += 1\n                If connected = 4 Then Return True\n            Else\n                connected = 0\n            End If\n        Next\n        connected = 0\n        For col = 0 To 6\n            If board(row0, col) = turn Then\n                connected += 1\n                If connected = 4 Then Return True\n            Else\n                connected = 0\n            End If\n        Next\n        connected = 0\n        For col = 0 To 6\n            If board(row0, col) = turn Then\n                connected += 1\n                If connected = 4 Then Return True\n            Else\n                connected = 0\n            End If\n        Next\n        Dim diff = row0 - col0\n        connected = 0\n        If diff >= 0 Then\n            row = diff\n            col = 0\n        Else\n            row = 0\n            col = -diff\n        End If\n        While True\n            If board(row, col) = turn Then\n                connected += 1\n                If connected = 4 Then Return True\n            Else\n                connected = 0\n            End If\n            row += 1\n            col += 1\n            If row > 5 Or col > 6 Then Exit While\n        End While\n        Dim total = row0 + col0\n        connected = 0\n        If total <= 6 Then\n            row = 0\n            col = total\n        Else\n            row = total - 6\n            col = 6\n        End If\n        While True\n            If board(row, col) = turn Then\n                connected += 1\n                If connected = 4 Then Return True\n            Else\n                connected = 0\n            End If\n            row += 1\n            col -= 1\n            If row > 5 Or col < 0 Then Exit While\n        End While\n        Return False\n    End Function\n\n    Public Function Play(ByVal col As Integer)\n        If gameover Then Return \"Game has finished!\"\n        If unfilled(col) < 0 Then Return \"Column full!\"\n        board(unfilled(col), col) = turn\n        If check(unfilled(col), col) Then\n            gameover = True\n            Return \"Player \" & turn & \" wins!\"\n        End If\n        unfilled(col) -= 1\n        Dim result = \"Player \" & turn & \" has a turn\"\n        turn = 3 - turn\n        Return result\n    End Function\nEnd Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350397,"user_id":null,"body":"Public Class Connect4\n\n    private game(7,6) as integer\n\n    private raw(7) as integer\n    \n    private player as integer\n    \n    private playEnd as boolean\n\n    Public Sub New()\n        player = 1\n        for i as integer = 0 to 6\n          raw(i)=5\n        next i\n        playEnd = false\n    End Sub\n\n    Public Function Play(ByVal col As Integer) as string\n    \n        if playEnd then return \"Game has finished!\"\n    \n        if raw(col) = -1 then return \"Column full!\"\n        \n        game(col,raw(col)) = player\n        raw(col) = raw(col) - 1\n        \n        for i as integer = 1 to 2\n          if gagneDiagonal(i) then playEnd=true : return string.Format(\"Player {0} wins!\",i)\n        next i\n        \n        dim ret as string = string.Format(\"Player {0} has a turn\",player)\n        \n        if player = 1 then player = 2 else player = 1\n        \n        return ret\n        \n    End Function\n    \n    \n    Private Function gagneDiagonal(ByVal p as integer) as boolean\n    \n       for c as integer =0 to 6\n         for r as integer = 0 to 5\n            if chercheDiagonal(p,c,r,1,1)  then return true\n            if chercheDiagonal(p,c,r,1,-1)  then return true\n            if chercheDiagonal(p,c,r,-1,1)  then return true\n            if chercheDiagonal(p,c,r,-1,-1)  then return true\n            \n            if chercheDiagonal(p,c,r,1,0)  then return true\n            if chercheDiagonal(p,c,r,-1,0)  then return true\n            if chercheDiagonal(p,c,r,0,1)  then return true\n            if chercheDiagonal(p,c,r,0,-1)  then return true\n         next r\n       next c\n    \n       return false\n    End Function\n        \n    Private Function chercheDiagonal(ByVal p as integer, ByVal c as integer,ByVal r as integer,ByVal coefC as integer,ByVal coefR as integer) as boolean\n       dim ok as integer = 0\n       for i as integer = 1 to 4\n          if game(c,r) = p  then ok+=1\n          c+=coefC\n          r+=coefR\n          if c<0 then exit for\n          if r<0 then exit for\n          if c>6 then exit for\n          if r>5 then exit for\n       next i\n       if ok=4 then return true\n       return false\n    End Function\nEnd Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350398,"user_id":602,"body":"Public Class Connect4\n    Private board(7,7) As Integer\n    Private player as Integer\n    Private win As Boolean\n    \n    Public Sub New()\n        board = {{0,0,0,0,0,0,0,0},\n                 {0,0,0,0,0,0,0,0},\n                 {0,0,0,0,0,0,0,0},\n                 {0,0,0,0,0,0,0,0},\n                 {0,0,0,0,0,0,0,0},\n                 {0,0,0,0,0,0,0,0},\n                 {0,0,0,0,0,0,0,0},\n                 {0,0,0,0,0,0,0,0}}\n          player = 1\n          win = false\n    End Sub\n\n    Public Function Play(ByVal col As Integer)\n        col = col + 1\n        if win then\n            return \"Game has finished!\"\n        end if\n        if not (board(1, col) = 0)\n            return \"Column full!\"\n        end if\n        dim row As Integer = 0\n        For z As Integer = 0 To 6\n            if z = 6 or not (board(z+1,col) = 0) then\n                board(z,col) = player\n                row = z\n                Exit For\n            end if\n        Next z\n      if board(row - 1,col) = player or board(row + 1,col) = player then\n          dim amount As Integer = 0\n          For x As Integer = row To 6\n              if board(x,col) = player then\n                  amount = amount + 1\n              else\n                  Exit For\n              end if\n          Next x\n          For x As Integer = row - 1 To 0 step - 1\n              if board(x,col) = player then\n                  amount = amount + 1\n              else\n                  Exit For\n              end if\n          Next x\n          if amount > 3 then\n              win = true\n              return \"Player \"+ player.ToString() + \" wins!\"\n          end if\n      end if\n      \n      if board(row,col-1) = player or board(row,col+1) = player then\n          dim amount As Integer = 0\n          For x As Integer = col To 6\n              if board(row,x) = player then\n                  amount = amount + 1\n              else\n                  Exit For\n              end if\n          Next x\n          For x As Integer = col - 1 To 0 step - 1\n              if board(row,x) = player then\n                  amount = amount + 1\n              else\n                  Exit For\n              end if\n          Next x\n          if amount > 3 then\n              win = true\n              return \"Player \"+ player.ToString() + \" wins!\"\n          end if\n      end if\n    \n      if board(row-1,col-1) = player or board(row+1,col+1) = player then\n          dim amount As Integer = 0\n          dim n As Integer = col\n          For x As Integer = row To 6\n              if board(x,n) = player then\n                  amount = amount + 1\n                  n = n + 1\n              else\n                  Exit For\n              end if\n          Next x\n          n = col - 1\n          For x As Integer = row - 1 To 0 step - 1\n              if board(x,n) = player then\n                  amount = amount + 1\n                  n = n - 1\n              else\n                  Exit For\n              end if\n          Next x\n          if amount > 3 then\n              win = true\n              return \"Player \"+ player.ToString() + \" wins!\"\n          end if\n      end if\n    \n      if board(row-1,col+1) = player or board(row+1,col-1) = player then\n          dim amount As Integer = 0\n          dim n As Integer = col\n          For x As Integer = row To 6\n              if board(x,n) = player then\n                  amount = amount + 1\n                  n = n - 1\n              else\n                  Exit For\n              end if\n          Next x\n          n = col + 1\n          For x As Integer = row - 1 To 0 step - 1\n              if board(x,n) = player then\n                  amount = amount + 1\n                  n = n + 1\n              else\n                  Exit For\n              end if\n          Next x\n          if amount > 3 then\n              win = true\n              return \"Player \"+ player.ToString() + \" wins!\"\n          end if\n      end if\n\n      dim result As String = \"Player \" + player.ToString() + \" has a turn\"\n      if player = 1 then\n          player = 2\n      else\n          player = 1\n      end if\n      return result\n    End Function\nEnd Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350399,"user_id":602,"body":"Public Class Connect4\n    Private board(7,7) As Integer\n    Private player as Integer\n    Private win As Boolean\n    \n    Public Sub New()\n        board = {{0,0,0,0,0,0,0,0},\n                 {0,0,0,0,0,0,0,0},\n                 {0,0,0,0,0,0,0,0},\n                 {0,0,0,0,0,0,0,0},\n                 {0,0,0,0,0,0,0,0},\n                 {0,0,0,0,0,0,0,0},\n                 {0,0,0,0,0,0,0,0},\n                 {0,0,0,0,0,0,0,0}}\n          player = 1\n          win = false\n    End Sub\n\n    Public Function Play(ByVal col As Integer)\n        col = col + 1\n        if win then\n            return \"Game has finished!\"\n        end if\n        if not (board(1, col) = 0)\n            return \"Column full!\"\n        end if\n        dim row As Integer = 0\n        For z As Integer = 0 To 6\n            if z = 6 or not (board(z+1,col) = 0) then\n                board(z,col) = player\n                row = z\n                Exit For\n            end if\n        Next z\n      if board(row - 1,col) = player or board(row + 1,col) = player then\n          dim amount As Integer = 0\n          For x As Integer = row To 6\n              if board(x,col) = player then\n                  amount = amount + 1\n              else\n                  Exit For\n              end if\n          Next x\n          For x As Integer = row - 1 To 0 step - 1\n              if board(x,col) = player then\n                  amount = amount + 1\n              else\n                  Exit For\n              end if\n          Next x\n          if amount > 3 then\n              win = true\n              return \"Player \"+ player.ToString() + \" wins!\"\n          end if\n      end if\n      \n      if board(row,col-1) = player or board(row,col+1) = player then\n          dim amount As Integer = 0\n          For x As Integer = col To 6\n              if board(row,x) = player then\n                  amount = amount + 1\n              else\n                  Exit For\n              end if\n          Next x\n          For x As Integer = col - 1 To 0 step - 1\n              if board(row,x) = player then\n                  amount = amount + 1\n              else\n                  Exit For\n              end if\n          Next x\n          if amount > 3 then\n              win = true\n              return \"Player \"+ player.ToString() + \" wins!\"\n          end if\n      end if\n    \n      if board(row-1,col-1) = player or board(row+1,col+1) = player then\n          dim amount As Integer = 0\n          dim n As Integer = col\n          For x As Integer = row To 6\n              if board(x,n) = player then\n                  amount = amount + 1\n                  n = n + 1\n              else\n                  Exit For\n              end if\n          Next x\n          n = col - 1\n          For x As Integer = row - 1 To 0 step - 1\n              if board(x,n) = player then\n                  amount = amount + 1\n                  n = n - 1\n              else\n                  Exit For\n              end if\n          Next x\n          if amount > 3 then\n              win = true\n              return \"Player \"+ player.ToString() + \" wins!\"\n          end if\n      end if\n    \n      if board(row-1,col+1) = player or board(row+1,col-1) = player then\n          dim amount As Integer = 0\n          dim n As Integer = col\n          For x As Integer = row To 6\n              if board(x,n) = player then\n                  amount = amount + 1\n                  n = n - 1\n              else\n                  Exit For\n              end if\n          Next x\n          n = col + 1\n          For x As Integer = row - 1 To 0 step - 1\n              if board(x,n) = player then\n                  amount = amount + 1\n                  n = n + 1\n              else\n                  Exit For\n              end if\n          Next x\n          if amount > 3 then\n              win = true\n              return \"Player \"+ player.ToString() + \" wins!\"\n          end if\n      end if\n\n      dim result As String = \"Player \" + player.ToString() + \" has a turn\"\n      if player = 1 then\n          player = 2\n      else\n          player = 1\n      end if\n      return result\n    End Function\nEnd Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"586d6cefbcc21eed7a001155":[{"id":350400,"user_id":null,"body":"Public Class Kata\n    Public Shared Function LongestRepetition(input as String) as Tuple(Of Char?, Integer)\n\n            Dim sLgst As String = \"\"\n            Dim sTmp As String = \"\"\n            Dim ctrLgst As Integer = 0\n            Dim ctrTmp As Integer = 0\n\n            For i = 0 To input.Length - 1\n\n                If input(i) <> sTmp Then\n                    sTmp = input(i)\n                    ctrTmp = 1\n                Else\n                    ctrTmp += 1\n                End If\n\n                If ctrTmp > ctrLgst Then\n                    sLgst = sTmp\n                    ctrLgst = ctrTmp\n                End If\n\n            Next i\n\n            If sLgst = \"\" Then\n                Return New Tuple(Of Char?, Integer)(Nothing, 0)\n            End If\n\n            Return New Tuple(Of Char?, Integer)(Convert.ToChar(sLgst), ctrLgst)\n        \n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350401,"user_id":null,"body":"Public Class Kata\n    Public Shared Function LongestRepetition(input as String) as Tuple(Of Char?, Integer)\n        If input = \"\" Then Return New Tuple(Of Char?, Integer)(Nothing, 0)\n        Dim max_char = \"\"\n        Dim max_count = 0\n        Dim curr_char = \"\"\n        Dim curr_count = 0\n        For Each c In input\n            If c <> curr_char Then\n                curr_char = c\n                curr_count = 0\n            End If\n            curr_count += 1\n            If curr_count > max_count Then\n                max_char = c\n                max_count = curr_count\n            End If\n        Next\n        Return New Tuple(Of Char?, Integer)(max_char, max_count)\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350402,"user_id":null,"body":"Public Class Kata\n    Public Shared Function LongestRepetition(input as String) as Tuple(Of Char?, Integer)\n        Dim c As Char\n        Dim l As Integer\n        Dim Len As Integer\n        Dim Ch As Char\n        Dim Ch1 As Char\n\n        If input.Length = 0 Then\n            Return new Tuple(Of Char?, Integer)(Nothing, 0)\n        End If\n        For i = 0 To input.Length - 1\n            Ch1 = input.Substring(i, 1)\n            Ch = Ch1\n            Len = 0\n            Do Until Ch1 <> Ch\n                Len += 1\n                If i + 1 + Len > input.Length Then\n                    Exit Do\n                End If\n                Ch = input.Substring(i + Len, 1)\n            Loop\n            If l < Len Then\n                l = Len\n                c = Ch1\n            End If\n        Next\n    Return new Tuple(Of Char?, Integer)(c, l)\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350403,"user_id":null,"body":"Public Class Kata\n    Public Shared Function LongestRepetition(sInput As String) As Tuple(Of Char?, Integer)\n        Dim cOutput As Char? = nothing\n        Dim iOutput As Integer = 0\n        Dim cCurrent As Char\n        Dim iCurrent As Integer\n        Dim iCurrentPos As Integer = sInput.Length - 1\n\n        While iCurrentPos >= 0\n            cCurrent = sInput.SubString(iCurrentPos, 1)\n            iCurrent = 0\n            For q = iCurrentPos To 0 Step -1\n                If sInput.SubString(q, 1) = cCurrent Then\n                    iCurrent = iCurrent + 1\n                Else\n                    Exit For\n                End If\n            Next\n            If iCurrent >= iOutput Then\n                cOutput = cCurrent\n                iOutput = iCurrent\n            End If\n            iCurrentPos = iCurrentPos - iCurrent\n        End While\n\n        Return New Tuple(Of Char?, Integer)(cOutput, iOutput)\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350404,"user_id":null,"body":"Public Class Kata\n    Public Shared Function LongestRepetition(input as String) as Tuple(Of Char?, Integer)\n        dim CountEnCours as integer\n        dim Carac as char\n        dim CaracLePlus As char\n        dim CaracEnCours As char\n        dim CountLePlus as integer\n        \n        if input.length = 0 then return new Tuple (Of Char?, Integer) (Nothing, 0)\n        \n        CountEnCours = 0\n        CountLePlus = -1\n        CaracLePlus = \"\"\n        CaracEnCours = input.substring (0,1)\n        for Each Carac In input\n         if Carac = CaracEnCours then \n            CountEnCours = CountEnCours + 1\n         else\n            if CountEnCours > CountLePlus then\n                CountLePlus = CountEnCours\n                CaracLePlus = CaracEnCours\n            End if\n            CountEnCours = 1\n            CaracEnCours = Carac\n         End if\n        Next      \n        if CountEnCours > CountLePlus then\n            CountLePlus = CountEnCours\n            CaracLePlus = CaracEnCours\n        End if\n        \n    \n        Return new Tuple (Of Char?, Integer) (CaracLePlus, CountLePlus)\n    \n    \n\n        \n        \n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350405,"user_id":null,"body":"Public Class Kata\n    Public Shared Function LongestRepetition(input as String) as Tuple(Of Char?, Integer)\n        Dim max_char As char? = Nothing\n        Dim max_char_count As integer = 0\n        Dim curr_char As char = Nothing\n        Dim curr_char_count As integer = 0\n        \n        If Not String.IsNullOrEmpty(input) Then\n            For index As Integer = 0 to input.length - 1\n                If curr_char = input(index) Then\n                    curr_char_count += 1\n                Else\n                    curr_char = input(index)\n                    curr_char_count = 1\n                End If\n\n                If curr_char_count > max_char_count Then\n                    max_char = curr_char\n                    max_char_count = curr_char_count\n                End If\n            Next\n        End If\n        \n        return New Tuple(Of Char?, Integer)(max_char, max_char_count)\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350406,"user_id":53,"body":"Public class Kata\n    Public Shared Function LongestRepetition(ByVal input As String) As Tuple(Of Char?, Integer)\n        If input.Length = 0 Then Return New Tuple(Of Char?, Integer)(Nothing, 0)\n        Dim rep = 0\n        Dim max = 0\n        Dim prev = input(0)\n        Dim c = prev\n\n        For Each p In input\n\n            If p <> prev Then\n                rep = 1\n            ElseIf System.Threading.Interlocked.Increment(rep) > max Then\n                c = prev\n                max = rep\n            End If\n\n            prev = p\n        Next\n\n        Return New Tuple(Of Char?, Integer)(c, max)\n    End Function\nEnd Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350407,"user_id":null,"body":"Public Class KataObject\n    Public Property Character As Char\n    Public Property Occurrences As Integer\n    Public Property Index As Integer\n\n    Public Sub New(ByVal _character As Char, _index As Integer, _occurrences As Integer)\n        Character = _character\n        Index = _index\n        Occurrences = _occurrences\n    End Sub\n\nEnd Class\n\nPublic Class Kata\n    Public Shared Function LongestRepetition(input As String) As Tuple(Of Char?, Integer)\n\n        If input = Nothing Then\n            Return New Tuple(Of Char?, Integer)(Nothing, 0)\n        End If\n\n        Dim results = New List(Of KataObject)\n\n        Dim previousChar As Char\n        Dim currentIndex As Integer\n\n        For Each c As Char In input\n\n            If previousChar <> c Then\n                previousChar = c : currentIndex += 1\n                results.Add(New KataObject(c, currentIndex, 1))\n            Else\n                Dim item = results.First(Function(x) x.Character = c And x.Index = currentIndex)\n                results(results.IndexOf(item)) = New KataObject(c, currentIndex, item.Occurrences + 1)\n            End If\n\n        Next\n\n        Return MapObjectToTuple((From result In results\n                                 Order By result.Occurrences Descending\n                                 Select result).FirstOrDefault)\n\n    End Function\n\n    Private Shared Function MapObjectToTuple(obj As KataObject) As Tuple(Of Char?, Integer)\n        Return New Tuple(Of Char?, Integer)(obj.Character, obj.Occurrences)\n    End Function\n\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350408,"user_id":null,"body":"Public Class Kata\n    Public Shared Function LongestRepetition(input as String) as Tuple(Of Char?, Integer)\n        if input = nothing then\n            LongestRepetition = new Tuple(Of Char?, Integer)(nothing, 0)\n            exit function\n        end if\n        \n        dim tmp_c as char = input(0)\n        dim count as integer = 0\n        dim long_c as char\n        dim longest as integer = 0\n        for each c in input\n            if c = tmp_c then\n                count = count + 1\n            else\n                tmp_c = c\n                count = 1\n            end if\n            if count > longest then\n                longest = count\n                long_c = tmp_c\n            end if\n        next\n        LongestRepetition = new Tuple(Of Char?, Integer)(long_c, longest)\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350409,"user_id":575,"body":"Public Class Kata\n    Public Shared Function LongestRepetition(input as String) as Tuple(Of Char?, Integer)\n        Dim result As Tuple(Of Char?, Integer) = input.Select(Function (x, i) new Tuple(Of Char?, Integer)(x, input.Substring(i).TakeWhile(Function(y) y = x).Count())).OrderByDescending(Function(x) x.Item2).FirstOrDefault()\n        Return If(result Is Nothing, New Tuple(Of Char?, Integer)(Nothing, 0), result)\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"587136ba2eefcb92a9000027":[{"id":350410,"user_id":null,"body":"Imports System.Collections.Generic\n\nPublic Class SnakesLadders\n    Private players As Integer()\n    Private turn As Integer\n    Private special as New Dictionary(Of Integer, Integer)\n    Private doubles As Boolean\n    Private gameover As Boolean\n    \n    Public Sub New()\n        Me.players = {0, 0, 0}\n        Me.turn = 2\n        Dim sp_pairs = {16, 6, 46, 25, 49, 11, 62, 19, 64, 60, 74, 53, 89, 68, _\n            92, 88, 92, 88, 95, 75, 99, 80, 2, 38, 7, 14, 8, 31, 15, 26, _\n            21, 42, 28, 84, 36, 44, 51, 67, 71, 91, 78, 98, 87, 94}\n        For i = 0 To sp_pairs.Length - 1 Step 2\n            Me.special(sp_pairs(i)) = sp_pairs(i + 1)\n        Next\n        Me.doubles = False\n        Me.gameover = False\n    End Sub\n    \n    Public Function Play(ByVal die1 As Integer, ByVal die2 As Integer)\n        If gameover Then Return \"Game over!\"\n        If doubles Then\n            doubles = False\n        Else\n            turn = 3 - turn\n        End If\n        If die1 = die2 Then doubles = True\n        Dim nxt = players(turn) + die1 + die2\n        If nxt > 100 Then nxt = 200 - nxt\n        If special.ContainsKey(nxt) Then nxt = special(nxt)\n        players(turn) = nxt\n        If nxt = 100 Then\n            gameover = True\n            Return \"Player \" & turn & \" Wins!\"\n        End If\n        Return \"Player \" & turn & \" is on square \" & nxt\n    End Function\nEnd Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350411,"user_id":602,"body":"Public Class SnakesLadders\n    Private Won As Boolean\n    Private PlayerSquare(1) As Integer\n    Private Player As Integer\n    Private Trap(20,1) As Integer\n\n    Public Sub New()\n        PlayerSquare = New Integer() {0, 0}\n        Player = 0\n        Won = false\n        Trap = {{2,38},{7,14},{8,31},{15,26},{21,42},{28,84},{36,44},{51,67},{71,91},{78,98},{87,94},\n                {16,6},{46,25},{49,11},{62,19},{64,60},{74,53},{89,68},{92,88},{95,75},{99,80}}\n    End Sub\n    \n    Public Function Play(ByVal die1 As Integer, ByVal die2 As Integer)\n        if Won = true then return \"Game over!\"\n        dim Roll As Integer = die1 + die2\n        if Roll + PlayerSquare(Player) <= 100 then\n            PlayerSquare(Player) += Roll\n            if PlayerSquare(Player) = 100 then\n                Won = true\n                return \"Player \" + (Player + 1).ToString() + \" Wins!\"\n            end if\n        else\n            PlayerSquare(Player) = 100 - ((PlayerSquare(Player) + Roll) - 100)\n        end if\n        For t As Integer = 0 To 20\n            if PlayerSquare(Player) = Trap(t,0) then\n                PlayerSquare(Player) = Trap(t,1)\n            end if\n        Next\n        dim Message = \"Player \" + (Player + 1).ToString() + \" is on square \" + (PlayerSquare(Player)).ToString()\n        if not(die1 = die2) then\n            if Player = 0 then\n                Player = 1\n            else\n                Player = 0\n            end if\n        end if\n        return Message\n    End Function\nEnd Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350412,"user_id":null,"body":"Public Class SnakesLadders\n    Public playerScore() As Integer = {0, 0}\n    Public playerTurn As Integer = 0\n    Public msg As String = \"\"\n    Public winner As Boolean = False\n\n    Public Sub New()\n        ' Code Here\n    End Sub\n\n    Public Function Play(ByVal die1 As Integer, ByVal die2 As Integer)\n        Dim movement = die1 + die2\n        playerScore(playerTurn) += movement\n        \n         If (winner = True) Then\n            Return \"Game over!\"\n        \n        ElseIf (playerScore(playerTurn) = 100) Then\n            msg = \"Player \" + (playerTurn).ToString() + \" Wins!\"\n            playerTurn = ChangePlayer(playerTurn)\n            winner = True\n            Return msg\n       \n        ElseIf (playerScore(playerTurn) > 100) Then\n            playerScore(playerTurn) -= (playerScore(playerTurn) - 100) * 2\n            playerScore(playerTurn) = Cases(playerScore(playerTurn))\n            msg = \"Player \" + (playerTurn + 1).ToString() + \" is on square \" + playerScore(playerTurn).ToString()\n        Else\n            playerScore(playerTurn) = Cases(playerScore(playerTurn))\n            msg = \"Player \" + (playerTurn + 1).ToString() + \" is on square \" + playerScore(playerTurn).ToString()\n        End If\n\n        If (die1 <> die2) Then\n            playerTurn = ChangePlayer(playerTurn)\n        End If\n\n        Return msg\n    End Function\n\n    Public Function ChangePlayer(playerTurn As Integer) As Integer\n        If (playerTurn = 1) Then\n            Return 0\n        End If\n        Return 1\n    End Function\n\n\n    Public Function Cases(square As Integer) As Integer\n        Select Case square\n            Case 2\n                Return 38\n            Case 7\n                Return 14\n            Case 8\n                Return 31\n            Case 15\n                Return 26\n            Case 16\n                Return 6\n            Case 28\n                Return 84\n            Case 21\n                Return 42\n            Case 36\n                Return 44\n            Case 49\n                Return 11\n            Case 46\n                Return 25\n            Case 51\n                Return 67\n            Case 62\n                Return 19\n            Case 64\n                Return 60\n            Case 71\n                Return 91\n            Case 74\n                Return 53\n            Case 78\n                Return 98\n            Case 87\n                Return 94\n            Case 89\n                Return 68\n            Case 92\n                Return 88\n            Case 95\n                Return 75\n            Case 99\n                Return 80\n            Case Else\n                Return square\n        End Select\n\n    End Function\nEnd Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"58ce8725c835848ad6000007":[{"id":350413,"user_id":527,"body":"Public Module DryPotatoes\n\n    Public Function Potatoes(ByVal p0 As Integer, ByVal w0 As Integer, ByVal p1 As Integer) As Integer\n        Return w0 * (100 - p0) \\ (100 - p1)\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350414,"user_id":527,"body":"Public Module DryPotatoes\n\n    Public Function Potatoes(ByVal p0 As Integer, ByVal w0 As Integer, ByVal p1 As Integer) As Integer\n        Potatoes = w0 * (100 - p0) \\ (100 - p1)\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350415,"user_id":null,"body":"Imports System\n\nPublic Module DryPotatoes\n\n    Public Function Potatoes(ByVal p0 As Integer, ByVal w0 As Integer, ByVal p1 As Integer) As Integer\n        dim res = w0 * (100 - p0) \/ (100 - p1)\n        Return res - (res Mod 1)\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350416,"user_id":null,"body":"Imports System\n\n\nPublic Module DryPotatoes\n\n    Public Function Potatoes(ByVal p0 As Integer, ByVal w0 As Integer, ByVal p1 As Integer) As Integer\n        \n        Dim w1 As Integer\n        \n        w1 = Math.Truncate(Math.Round( _\n             (1 - p0 \/ 100) * w0 \/ (1 - p1 \/ 100) _\n                , 2))\n        \n        Return w1\n\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350417,"user_id":null,"body":"Imports System\n\nPublic Module DryPotatoes\n\n    Public Function Potatoes(ByVal p0 As Integer, ByVal w0 As Integer, ByVal p1 As Integer) As Integer\n        return Math.Truncate((w0 * (100 - p0)) \/ (100 - p1))\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350418,"user_id":null,"body":"Imports System\n\nPublic Module DryPotatoes\n\n    Public Function Potatoes(ByVal p0 As Integer, ByVal w0 As Integer, ByVal p1 As Integer) As Integer\n        Return w0 * (100-p0) \\ (100-p1)\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350419,"user_id":null,"body":"Imports System\n\nPublic Module DryPotatoes\n\n    Public Function Potatoes(ByVal p0 As Integer, ByVal w0 As Integer, ByVal p1 As Integer) As Integer\n        Dim result as Integer\n        result = (100-p0)*w0 \\ (100-p1)\n        Return result\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350420,"user_id":null,"body":"Imports System\n\nPublic Module DryPotatoes\n\n    Public Function Potatoes(ByVal p0 As Integer, ByVal w0 As Integer, ByVal p1 As Integer) As Integer\n        Dim w1 as Decimal\n        Dim dry as Decimal\n        dry = ((100 - p0) * w0) \/ 100\n        w1 = dry * (100 \/ (100 - p1))\n        return CInt(Math.Truncate(w1))\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350421,"user_id":null,"body":"Imports System\n\nPublic Module DryPotatoes\n\n    Public Function Potatoes(ByVal p0 As Integer, ByVal w0 As Integer, ByVal p1 As Integer) As Integer\n        '100 * 0.99 = Water Weight  : Then : Total W - Water W = Dry W : Then : Dry W = % Dry Wf '\n        ' (Dry W * p1) * (100% - p1) '\n        \n        'dim drywi as integer, waterwf as Integer\n              \n        'drywi = math.round(w0 - (w0 * (p0\/100)))\n        'waterwf = (drywi * (p1\/100))\\(1 - (p1\/100))\n        'Potatoes = (waterwf) + (drywi)\n        \n        'drywi = \n        \n        Potatoes = w0 * (100 - p0) \\ (100 - p1)\n\n        \n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350422,"user_id":null,"body":"Imports System\n\nPublic Module DryPotatoes\n\n    Public Function Potatoes(ByVal p0 As Integer, ByVal w0 As Integer, ByVal p1 As Integer) As Integer\n        ' your code     \n        Dim w1 As Integer = Math.Truncate(w0 * (100.0-p0)\/100.0 + (w0 * (100.0-p0)\/100.0)*(p1\/(100.0-p1)))\n        return  w1\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"58f5c63f1e26ecda7e000029":[{"id":350423,"user_id":null,"body":"Public Module Mexican\n    Public Function Wave(ByVal data As String)\n    Dim wavy = data.[Select](\n        Function(h, i) data.Substring(0, i) + data.Substring(i, 1).ToUpper() + data.Substring(i + 1, data.Length - i - 1)).Where(\n            Function(t) Not t.All(Function(u) u.ToString() = u.ToString().ToLower())\n        )\n    return wavy\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350424,"user_id":null,"body":"Public Module Mexican\n    Public Function Wave(ByVal data As String)\n        Dim result As New List(Of String)\n\n        For i = 0 To data.Length - 1\n            If data(i).ToString().CompareTo(\" \") Then\n                Dim word As Char() = data.ToCharArray()\n                word(i) = word(i).ToString().ToUpper()\n                result.Add(New String(word))\n            End If\n        Next\n\n        Return result.ToArray()\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350425,"user_id":null,"body":"Public Module Mexican\n    Public Function Wave(ByVal data As String)\n        Dim arr = New String() {}\n        For i = 0 To data.Length - 1\n            If data.Substring(i, 1) = \" \" Then Continue For\n            ReDim Preserve arr(arr.Length)\n            arr(arr.Length - 1) = data.Substring(0, i) & data.Substring(i, 1).ToUpper & data.Substring(i + 1)\n        Next i\n        Return arr\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350426,"user_id":null,"body":"Public Module Mexican\n    Public Function Wave(ByVal data As String)\n        Dim answer = New List(Of String)\n        For i = 0 To data.Length() - 1\n            If data(i) <> \" \" Then\n                Dim s1 = data.Substring(0, i).ToLower()\n                Dim s2 = data.Substring(i, 1).ToUpper()\n                Dim s3 = data.Substring(i + 1).ToLower()\n                answer.Add(s1 & s2 & s3)\n            End If\n        Next\n        Return answer.ToArray()\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350427,"user_id":null,"body":"Public Module Mexican\n    Public Function Wave(ByVal data As String)\n        Dim size = data.Replace(\" \", \"\").Length-1\n        Dim result(size) As String\n        Dim j = 0\n        For i As Integer = 0 to data.Length - 1\n             ' Convert to character array.\n                Dim array() As Char = data.ToCharArray\n\n        ' Uppercase character.\n        array(i) = Char.ToUpper(array(i))\n        Dim space As Char = \" \"\n        If space <> array(i) Then\n                result(j) = New String(array)\n              j = j + 1\n        End If\n      \n        Next\n        Return result\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350428,"user_id":76,"body":"Public Module Mexican\n    Public Function Wave(ByVal data As String)\n        Dim result As ArrayList = new ArrayList()\n        For i As Integer = 0 To data.Length - 1\n            If data(i) <> \" \" Then \n                result.Add(data.Substring(0, i) + Char.ToUpper(data(i)) + data.Substring(i + 1))\n            End If\n        Next\n        Return result\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350429,"user_id":null,"body":"Public Module Mexican\n    Public Function Wave(ByVal data As String)\n      ' Code Here\n        Dim arr As New List(Of String)\n        For i As Integer = 0 To data.Length - 1\n            Dim pos As Integer = data.IndexOf(data(i), i)\n            Dim cp As String = data.Substring(0, pos) + Char.ToUpper(data(i)) + data.Substring(pos + 1)\n            arr.Add(cp)\n        Next\n        arr.RemoveAll(Function(v) v.Equals(data))\n        Return arr.ToArray()\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350430,"user_id":null,"body":"Public Module Mexican\n    Public Function Wave(ByVal data As String)\n        dim Lenner as integer\n        Lenner = data.length()\n        dim Result(Lenner-1) as string \n        dim Stringer as string\n        For i = 0 to Lenner-1\n                Stringer = data.substring(0, i) & data.substring(i,1).ToUpper() & data.substring(i+1, Lenner-1-i)\n                Console.WriteLine(Stringer)\n                Result(i) = Stringer\n        Next \n        \n        dim spaces as integer = 0\n        for each k in data\n            if k=\" \" then spaces+=1\n        next\n        dim Final(Lenner-1-spaces) as string\n        Console.WriteLine(Lenner-1-spaces)\n        dim Tracker as integer = 0\n        for each j in Result\n            if j<>data then \n                Console.WriteLine(Tracker & j)\n                Final(Tracker)=j\n                Tracker+=1\n            End if\n        next\n        return Final\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350431,"user_id":null,"body":"Imports System.Collections.Generic\n\nPublic Module Mexican\n    Public Function Wave(ByVal data As String)\n        Dim arr As New List(Of String)\n        \n        Dim index as Integer = 0\n        For Each i As Char In data\n            Dim output As New System.Text.StringBuilder(data)\n            output(index) = Char.ToUpper(i)\n            if Not Char.IsWhiteSpace(i)\n                arr.Add(output.ToString())\n            End If\n            index = index + 1\n            System.Console.WriteLine(output.ToString())\n        Next\n\n        Return arr.ToArray()\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350432,"user_id":null,"body":"Public Module Mexican\n    Public Function Wave(ByVal data As String)\n      ' Code Here\n        Dim retorno as new List(Of String)\n        Dim v as String \n        \n        For i = 0 to data.length - 1\n            if data.Chars(i)=\" \" then Continue For\n            \n            v = String.empty\n            For j = 0 to data.length - 1\n                If i=j then\n                    v & = Char.ToUpper(data.Chars(j))\n                Else\n                    v &=data.Chars(j)\n                End If\n            Next\n            retorno.Add(v)\n        Next\n        \n        return retorno.toArray()\n    \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5904be220881cb68be00007d":[{"id":350433,"user_id":null,"body":"Public Module Fish\n    Public Function Play(ByVal shoal As String)\n        Dim answer = 1\n        Dim eaten = 0\n        Dim fish = New List(Of Integer)\n        For Each c In shoal\n            fish.Add(Convert.ToInt32(c) - 48)\n        Next\n        fish.Sort()\n        For Each f In fish\n            If answer >= f Then eaten += f\n            If eaten >= answer * (answer + 1) * 2 Then answer += 1\n        Next\n        Return answer\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350434,"user_id":null,"body":"Public Module Fish\n    Public Function Play(ByVal shoal As String)\n        ' Code here\n        Dim positions(shoal.Length - 1) As Boolean\n        Dim size As Integer\n        Dim fishno As Integer\n        Dim haseaten As Boolean\n        haseaten = True\n        size = 1\n        Do Until haseaten = False\n            haseaten = False\n            For fish = 0 To shoal.length - 1\n                If CInt(CStr(shoal(fish))) <= size And positions(fish) = False Then                \n                    haseaten = True\n                    fishno = fishno + CInt(CStr(shoal(fish)))\n                    positions(fish) = True\n                   If fishno >= size * 4 Then\n                        fishno = fishno - (size * 4)\n                        size = size + 1\n                    End If\n                End If\n            Next\n        Loop\n        return size\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350435,"user_id":null,"body":"Public Module Fish\n    Public Function Play(ByVal shoal As String)\n                Dim D(shoal.Length) As Integer\n        Dim sum As Integer = 0              'Relevant number of size 1 fishes eaten'\n        Dim size As Integer                 'Size of the fish'\n        For i = 0 To shoal.Length - 1       'Assigning each individual number value to an array of integers'\n            D(i) = shoal.Substring(i, 1)\n        Next\n        For j = 1 To shoal.Length           'Running two for loops to run through all the possibilities if numbers aren't in ascending order.\n            For i = 0 To shoal.Length - 1\n                If sum < 4 Then             'Logical evaluation of which size fish can be eaten aswell as assigning it's score value (This could be done more professionally)\n                    If D(i) = 1 Then\n                        sum += 1\n                        D(i) = 0\n                    End If\n                ElseIf sum >= 4 And sum < 12 Then\n                    If D(i) = 1 Then\n                        sum += 1\n                        D(i) = 0\n                    ElseIf D(i) = 2 Then\n                        sum += 2\n                        D(i) = 0\n                    End If\n                ElseIf sum >= 12 And sum < 24 Then\n                    If D(i) = 1 Then\n                        sum += 1\n                        D(i) = 0\n                    ElseIf D(i) = 2 Then\n                        sum += 2\n                        D(i) = 0\n                    ElseIf D(i) = 3 Then\n                        sum += 3\n                        D(i) = 0\n                    End If\n                ElseIf sum >= 24 And sum < 40 Then\n                    If D(i) = 1 Then\n                        sum += 1\n                        D(i) = 0\n                    ElseIf D(i) = 2 Then\n                        sum += 2\n                        D(i) = 0\n                    ElseIf D(i) = 3 Then\n                        sum += 3\n                        D(i) = 0\n                    ElseIf D(i) = 4 Then\n                        sum += 4\n                        D(i) = 0\n                    End If\n                ElseIf sum >= 40 And sum < 60 Then\n                    If D(i) = 1 Then\n                        sum += 1\n                        D(i) = 0\n                    ElseIf D(i) = 2 Then\n                        sum += 2\n                        D(i) = 0\n                    ElseIf D(i) = 3 Then\n                        sum += 3\n                        D(i) = 0\n                    ElseIf D(i) = 4 Then\n                        sum += 4\n                        D(i) = 0\n                    ElseIf D(i) = 5 Then\n                        sum += 5\n                        D(i) = 0\n                    End If\n                ElseIf sum >= 60 And sum < 84 Then\n                    If D(i) = 1 Then\n                        sum += 1\n                        D(i) = 0\n                    ElseIf D(i) = 2 Then\n                        sum += 2\n                        D(i) = 0\n                    ElseIf D(i) = 3 Then\n                        sum += 3\n                        D(i) = 0\n                    ElseIf D(i) = 4 Then\n                        sum += 4\n                        D(i) = 0\n                    ElseIf D(i) = 5 Then\n                        sum += 5\n                        D(i) = 0\n                    ElseIf D(i) = 6 Then\n                        sum += 6\n                        D(i) = 0\n                    End If\n                ElseIf sum >= 84 And sum < 112 Then\n                    If D(i) = 1 Then\n                        sum += 1\n                        D(i) = 0\n                    ElseIf D(i) = 2 Then\n                        sum += 2\n                        D(i) = 0\n                    ElseIf D(i) = 3 Then\n                        sum += 3\n                        D(i) = 0\n                    ElseIf D(i) = 4 Then\n                        sum += 4\n                        D(i) = 0\n                    ElseIf D(i) = 5 Then\n                        sum += 5\n                        D(i) = 0\n                    ElseIf D(i) = 6 Then\n                        sum += 6\n                        D(i) = 0\n                    ElseIf D(i) = 7 Then\n                        sum += 7\n                        D(i) = 0\n                    End If\n                ElseIf sum >= 112 And sum < 144 Then\n                    If D(i) = 1 Then\n                        sum += 1\n                        D(i) = 0\n                    ElseIf D(i) = 2 Then\n                        sum += 2\n                        D(i) = 0\n                    ElseIf D(i) = 3 Then\n                        sum += 3\n                        D(i) = 0\n                    ElseIf D(i) = 4 Then\n                        sum += 4\n                        D(i) = 0\n                    ElseIf D(i) = 5 Then\n                        sum += 5\n                        D(i) = 0\n                    ElseIf D(i) = 6 Then\n                        sum += 6\n                        D(i) = 0\n                    ElseIf D(i) = 7 Then\n                        sum += 7\n                        D(i) = 0\n                    ElseIf D(i) = 8 Then\n                        sum += 8\n                        D(i) = 0\n                    End If\n                ElseIf sum >= 144 Then\n                    If D(i) = 1 Then\n                        sum += 1\n                        D(i) = 0\n                    ElseIf D(i) = 2 Then\n                        sum += 2\n                        D(i) = 0\n                    ElseIf D(i) = 3 Then\n                        sum += 3\n                        D(i) = 0\n                    ElseIf D(i) = 4 Then\n                        sum += 4\n                        D(i) = 0\n                    ElseIf D(i) = 5 Then\n                        sum += 5\n                        D(i) = 0\n                    ElseIf D(i) = 6 Then\n                        sum += 6\n                        D(i) = 0\n                    ElseIf D(i) = 7 Then\n                        sum += 7\n                        D(i) = 0\n                    ElseIf D(i) = 8 Then\n                        sum += 8\n                        D(i) = 0\n                    ElseIf D(i) = 9 Then\n                        sum += 9\n                        D(i) = 0\n                    End If\n                End If\n            Next\n        Next\n\n        Dim size2 As Integer = 0        \n        For i = 1 To 50                 'Determining the actual size of the fish. Ofcourse this would fail if number of fishes eaten was too great. We would have to increase loop iteration count.\n            size2 += i * 4\n            If sum < size2 Then         'Once size2 is greater than the sum of size one fish value eaten we get the actual size of the fish and exit the loop'\n                size = i\n                GoTo nextone            \n            End If\n        Next\nnextone:\n\n               Return size\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350436,"user_id":null,"body":"Public Module Fish\n    Public Function Play(ByVal shoal As String)\n        \n        Dim shoalArray() As Char = shoal.ToCharArray\n        Array.sort(shoalArray)\n        \n        Dim current_size As Integer = 1\n        Dim total_fish As Integer = 0\n\n        For Each c As Char in shoalArray\n            \n            Dim f As Integer = (Convert.toInt32(c) - 48)\n        \n            If (current_size >= f) Then \n                total_fish = total_fish + f\n            \n                If (total_fish >= current_size * (current_size + 1) * 2) Then\n                    current_size = current_size + 1\n                End if\n            End if\n        \n\n        Next\n    \n        Return current_size\n             \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350437,"user_id":null,"body":"Public Module Fish\n    Public Function Play(ByVal shoal As String)\n        dim fishSize as Integer = 1\n        dim fishExp as integer = 0      \n        dim fishExpReq4LvlUp as integer = 4\n        \n        dim _shoal as list(of Integer) = new list(of Integer)       \n        for each fish as char in shoal\n            _shoal.add(Integer.Parse(fish))\n        next\n        _shoal.sort()  \n    \n        for each fish as integer in _shoal\n            if fish <= fishSize then\n                fishExp += fish    \n                if fishExpReq4LvlUp <= fishExp then\n                    fishSize += 1\n                    fishExpReq4LvlUp += (fishSize * 4)\n                end if\n            end if  \n        next\n\n        return fishSize\n        \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350438,"user_id":null,"body":"Public Module Fish\nPublic Function Play(ByVal shoal As String)\n        Dim fishSize As Integer = 1\n        Dim fishFood As Integer = 0\n        Dim fishArray As Integer()\n        Dim quadratic1 As Double = 0\n        Dim quadratic2 As Double = 0\n        ReDim fishArray(shoal.Length - 1)\n        For i = 0 To shoal.Length - 1\n            fishArray(i) = shoal.Substring(i, 1)\n        Next\n        Array.Sort(fishArray)\n        For i = 0 To fishArray.Length - 1\n            If fishSize >= fishArray(i) Then\n                fishFood = fishFood + fishArray(i)\n                quadratic1 = MathF.Truncate((-2 + MathF.Sqrt(4 - 4 * (-2) * (fishFood))) \/ 4) + 1\n                fishSize = quadratic1\n            End If\n        Next\n\n        Return fishSize\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350439,"user_id":null,"body":"Public Module Fish\n    Public Function Play(ByVal shoal As String)\n        Dim initAmount As Integer = 4, maxFoodLevel As Integer = 9\n        Dim fishLevel As Integer = 1, levelFood As Integer = 1\n        Dim totalFish As Integer, expGot As Integer\n        Dim expReq As Integer, expRemain As Integer = 0\n        Dim levelMultiplier As Integer = 1\n\n        expReq = fishLevel * initAmount\n        While levelFood < 10\n            totalFish = shoal.Length - shoal.Replace(levelFood, \"\").Length\n            Debug.Print(\"Total Fish Level \" & levelFood & \" : \" & totalFish)\n            expGot = totalFish * levelFood\n            expRemain = expRemain + expGot\n            While expRemain > 0\n                If expRemain >= expReq Then\n                    expRemain = expRemain - expReq\n                    fishLevel = fishLevel + 1\n                    levelMultiplier = fishLevel\n                    expReq = levelMultiplier * initAmount\n                Else\n                    expReq = expReq - expRemain\n                    expRemain = 0\n                    Exit While\n                End If\n            End While\n            levelFood += 1\n            if fishLevel < levelFood then exit while\n        End While\n        Return fishLevel\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350440,"user_id":null,"body":"Public Module Fish\n    Public Function Play(ByVal shoal As String)\n        Dim shoalFish as Integer()\n        ReDim shoalFish(shoal.length)\n        Dim index as integer = 0\n        Dim numSize as integer = 1\n        Dim score as integer = 0\n        Dim last as integer = 0\n        \n        for each chr in shoal\n            Double.TryParse(chr,shoalFish(index))\n            index = index +1\n        next\n    \n        Array.Sort(shoalFish)\n    \n        for i = 0 to shoalFish.count-1\n            if (shoalFish(i) <> 0) then\n                if (shoalFish(i) <= numSize) then\n                    score = score + shoalFish(i)\n                else\n                    exit for\n                end if\n            end if\n              \n            if score >= (4*(numSize)+last) then\n                last = (4*(numSize)+last)\n                numSize = numSize +1\n            end if\n        next\n        \n        return numSize\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350441,"user_id":null,"body":"Public Module Fish\n    Public Function Play(ByVal shoal As String) As Integer\n    \n        Dim shoalString as Char() = shoal.ToCharArray()\n            \n        Dim belly as Integer = 0 \n        Dim size as Integer = 1 \n        \n        Array.Sort(shoalString)\n        \n        for each line in shoalString\n        \n            if size >= Convert.ToInt32(line)-48 And Convert.ToInt32(line)-48 <> 0 Then\n                \n                belly += Convert.ToInt32(line)-48\n                \n                if(size*4 <= belly) Then \n                    belly -= size*4\n                    size += 1\n                    \n                End If\n                \n            End If\n            \n        Next\n             \n        Return size\n        \n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350442,"user_id":null,"body":"Public Module Fish\n  Dim my_size As Integer  'My Size\n    Dim my_xp As Integer    'XP From current to next lvl\n\n    Public Function Play(ByRef shoal As String)\n        Dim shoal_array(shoal.Length - 1) As String\n        Dim i As Integer = 0\n        Dim j As Integer = 0\n        my_size = 1\n        my_xp = 0\n\n        For Each c As Char In shoal\n            shoal_array(i) = c\n            i += 1\n        Next\n        BubbleSort(shoal_array)\n\n\n        For j = 0 To shoal_array.Length - 1\n            If my_size >= shoal_array(j) Then\n                increseSize(shoal_array(j))\n            End If\n        Next\n\n        'shoal = \"\"\n        'For j = 0 To shoal_array.Length - 1\n        '    shoal += shoal_array(j)\n        'Next\n        Return my_size\n    End Function\n\n    Private Sub increseSize(fish_size As Integer)\n        Dim need_xp As Integer\n        need_xp = my_size * 4\n        If my_xp + fish_size = need_xp Then\n            my_size += 1\n            my_xp = 0\n        ElseIf my_xp + fish_size > need_xp Then\n            my_xp = my_xp + fish_size - need_xp\n            my_size += 1\n        ElseIf my_xp + fish_size < need_xp Then\n            my_xp += fish_size\n        End If\n    End Sub\n\n    Private Function BubbleSort(data() As Object) As Object()\n        Dim k As Integer = 0\n        Dim nr_elements As Integer\n        nr_elements = data.Length\n\n        For i = 0 To nr_elements Step 1\n            For j = nr_elements - 1 To i + 1 Step -1\n                If data(j) < data(j - 1) Then\n                    Dim tmp As Object\n                    tmp = data(j)\n                    data(j) = data(j - 1)\n                    data(j - 1) = tmp\n                End If\n            Next\n        Next\n        Return data\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"59ccf051dcc4050f7800008f":[{"id":350443,"user_id":492,"body":"Imports System\n\nPublic Module Bud\n    Private Function nbd(ByVal n As Long) As Long\n        Dim sum As Long = 1\n        For i As Long = 2 To CLng(Math.Sqrt(n))\n            If n Mod i = 0 Then\n                sum += i\n                Dim d As Long = n \/ i\n                If d <> i Then sum += d\n            End If\n        Next\n        Return sum\n    End Function\n\n    Public Function Buddy(ByVal start As Long, ByVal limit As Long) As String\n        For n As Long = start To limit\n            Dim m As Long = nbd(n) - 1\n            If n = nbd(m) - 1 AndAlso n < m Then\n                Return \"(\" & Convert.ToString(n) & \" \" & Convert.ToString(m) & \")\"\n            End If\n        Next\n        Return \"Nothing\"\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350444,"user_id":null,"body":"Imports System\n\nPublic Module Bud\n    \n    Public Function Buddy(ByVal start As Long, ByVal limit As Long) As String\n        \n        Dim buddy1 As Long\n        Dim buddy2 As Long\n\n        For j = start To limit\n\n            If SumOfDivisors(j) >= j Then\n                buddy2 = SumOfDivisors(j) - 1\n                buddy1 = SumOfDivisors(buddy2) - 1\n\n                If j = buddy1 Then\n                    Return ($\"({buddy1} {buddy2})\")\n                End If\n            End If\n\n        Next j\n        Return \"Nothing\"\n    \n    End Function\n\n\n    Private Function SumOfDivisors(ByVal n As Long) As Long\n        'calculate only proper divisors, exclude n itsef'\n        Dim sum As Long = -n\n        Dim i As Long = 1\n\n        While i * i <= n\n            If n Mod i = 0 Then\n                sum += i\n                If i <> n \/ i Then\n                    sum += n \/ i\n                End If\n            End If\n            i += 1\n        End While\n\n        Return sum\n    \n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350445,"user_id":null,"body":"Public Module Bud\n    Function s (ByVal n As Integer) As Integer\n        Dim s_n = 0\n        For i = 2 To Math.Round(Math.Sqrt(n)) - 1\n            If n Mod i = 0 Then\n                s_n += i\n                s_n += n \\ i\n            End If\n        Next\n        Return s_n\n    End Function\n    \n    Public Function Buddy(ByVal start As Long, ByVal limit As Long) As String\n        For n = start To limit\n            Dim m = s(n)\n            If m > n And s(m) = n Then Return \"(\" & n & \" \" & m & \")\"\n        Next\n        Return \"Nothing\"\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350446,"user_id":null,"body":"Imports System\n\nPublic Module bud\n    \n    Dim divs As Long\n    Dim bud1 As Long\n\nPublic Function Buddy(ByVal start As Long, ByVal limit As Long) As String\n\n        For n As Long = start To limit + 1 Step 1\n            bud1 = buddySum(n)\n            If bud1 > n And buddySum(bud1) = n Then\n                Return \"(\" & n & \" \" & bud1 & \")\"\n                Exit For\n            End If\n        Next\n        Return \"Nothing\"\n\n    End Function\n\n\n\n    private Function buddySum(ByVal val1 As Long)\n        Dim result As Integer = 0\n\n        For i As Integer = 2 To Math.Sqrt(val1)\n\n            If val1 Mod i = 0 Then\n\n                If i = (val1 \/ i) Then\n                    result += i\n                Else\n                    result += (i + val1 \/ i)\n                End If\n            End If\n        Next\n\n        Return (result)\n    End Function\n\nEnd module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350447,"user_id":53,"body":"Imports System\n\nClass Bud\n    Public Shared Function Buddy(ByVal start As Long, ByVal limit As Long) As String\n        Dim r = \"\"\n        Dim i = start\n\n        While i <= limit\n            Dim a = fdivsum(i)\n\n            If a - 1 > i Then\n                Dim b = fdivsum(a - 1)\n\n                If b - 1 = i Then\n                    r += \"(\"\n                    r += CStr(i)\n                    r += \" \"\n                    r += CStr(a - 1)\n                    r += \")\"\n                    Return r\n                End If\n            End If\n\n            i += 1\n        End While\n\n        r += \"Nothing\"\n        Return r\n    End Function\n\n    Private Shared Function fdivsum(ByVal n As Long) As Long\n        Dim sum = 1L\n        Dim i = 2L\n\n        While i <= Math.Floor(Math.Sqrt(n))\n\n            If n Mod i = 0 Then\n                sum += i\n\n                If i <> n \/ i Then\n                    sum += CLng((n \/ i))\n                End If\n            End If\n\n            i += 1\n        End While\n\n        Return sum\n    End Function\nEnd Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350448,"user_id":null,"body":"Imports System\n\nPublic Module Bud\n    \n    Public Function Buddy(ByVal start As Long, ByVal limit As Long) As String\n        dim j as integer\n        dim n, m as integer\n        dim acc as integer\n        for n=start to limit\n            acc=0\n            for j=1 to math.sqrt(n)\n                if n mod j = 0 then\n                    acc += j + n\/j\n                end if\n            next j\n            m = acc - 1 - n\n            acc = 0\n            for j=1 to math.sqrt(m)\n                if m mod j = 0 then\n                    acc += j + m\/j\n                end if\n            next j\n            if acc - 1 - m = n and n < m then\n                return string.format(\"({0} {1})\",n,m)\n            end if\n        next n\n        return \"Nothing\"\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350449,"user_id":null,"body":"Imports System\n\nPublic Module Bud\n\n    Dim PrimeLut As New List(Of Long)\n    Dim MaxPrime As Long\n\n    Function IsPrime(n) As Boolean\n        For Each p In PrimeLut\n            If n Mod p = 0 Then\n                Return False\n            End If\n        Next\n        Return True\n    End Function\n    Function GetPrimeFactors(n As Long) As List(Of Long)\n\n        If (PrimeLut.Count = 0) Then\n            PrimeLut.Add(2)\n            PrimeLut.Add(3)\n            MaxPrime = 3\n            'For i As Long = 3 To n Step 2\n            '    GetPrimeFactors(i)\n            'Next\n        End If\n\n        Dim factors As New List(Of Long)\n        While n > 1\n            Dim hasfactor As Boolean = False\n            For Each p In PrimeLut\n                If n Mod p = 0 Then\n                    hasfactor = True\n                    factors.Add(p)\n                    n \\= p\n                    Exit For\n                End If\n            Next\n\n            If Not hasfactor And factors.Count = 0 And MaxPrime > Math.Sqrt(n) Then\n                PrimeLut.Add(n)\n                factors.Add(n)\n                Return factors\n            ElseIf Not hasfactor Then\n                Dim i As Long = PrimeLut(PrimeLut.Count - 1)\n                hasfactor = False\n                While i <= math.sqrt(n) AndAlso n > 1\n                    If IsPrime(i) Then\n                        PrimeLut.Add(i)\n                        MaxPrime = i\n                        If n Mod i = 0 Then\n                            hasfactor = True\n                            factors.Add(i)\n                            n \\= i\n                            hasfactor = True\n                            Exit While\n                        End If\n                    End If\n                    i += 2\n                End While\n                If Not hasfactor Then\n                    PrimeLut.Add(n)\n                    factors.Add(n)\n                    n \\= n\n                End If\n            End If\n        End While\n        Return factors\n    End Function\n\n    Function GetAllkKDivisors(MaxValue As Long, ByVal k As Integer, primes As List(Of Long)) As List(Of Long)\n\n        Dim retlist As New List(Of Long)\n\n        'For Each p In primes\n        '    retlist.Add(p)\n        '    If k > 1 Then\n        '        Dim Primes2 As New List(Of Long)(primes)\n        '        Primes2.Remove(p)\n        '        Dim FactList As List(Of Long) = GetAllkKDivisors(MaxValue, k - 1, Primes2)\n        '        For Each f In (From f1 In FactList).Distinct\n        '            If Not (retlist.Contains(p * f)) Then\n        '                retlist.Add(p * f)\n        '            End If\n        '        Next\n        '    End If\n        'Next\n\n        'Return (From r In retlist).Distinct.ToList\n\n        While k > 0\n\n            If retlist.Count = 0 Then\n                retlist.AddRange(primes)\n            Else\n                Dim newlist As New List(Of Long)\n                For Each item In retlist\n                    For Each p In primes\n                        Dim nv = p * item\n                        If nv < MaxValue AndAlso Not retlist.Contains(nv) AndAlso Not newlist.Contains(nv) Then\n                            newlist.Add(nv)\n                        End If\n                    Next\n                Next\n                    retlist.AddRange(newlist)\n            End If\n            k -= 1\n        End While\n\n        Return (From r In retlist).Distinct.ToList\n    End Function\n\n    Function GetProperSum(n As Integer) As Long\n        Dim ret As Long = 0\n        Dim primefactors As List(Of Long) = GetPrimeFactors(n)\n        Dim factors As New List(Of Long)\n        'For i = 1 To primefactors.Count\n        Dim kfactor As List(Of Long) = GetAllkKDivisors(n, primefactors.Count, primefactors)\n        kfactor = (From k In kfactor Where n Mod k = 0 And k <> n).Distinct.ToList\n        For Each f In kfactor\n            If Not factors.Contains(f) Then\n                factors.Add(f)\n            End If\n        Next\n        'Next\n\n        Return factors.Sum\n    End Function\n    \n    Public Function Buddy(ByVal start As Long, ByVal limit As Long) As String\n\n        Dim starttick As Long = System.DateTime.Now.Ticks\n        Console.WriteLine(start & \" \" & limit)\n        \n        For i As Long = start To limit\n            Dim PS1 = GetProperSum(i)\n\n            If PS1 > i andalso GetProperSum(PS1) = i Then\n                Dim EndTick As Long = System.DateTime.Now.Ticks\n                Console.WriteLine(\"found in \" & (EndTick - starttick) \/ TimeSpan.TicksPerMillisecond)\n        \n                 Return \"(\" & i & \" \" & PS1 & \")\"\n            End If\n        Next\n        Dim EndTick2 As Long = System.DateTime.Now.Ticks\n        Console.WriteLine(\"found in \" & (EndTick2 - starttick) \/ TimeSpan.TicksPerMillisecond)\n        Return \"Nothing\"\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350450,"user_id":null,"body":"Imports System\n\nPublic Module Bud\n    \n    Public Function Buddy(ByVal start As Long, ByVal limit As Long) As String\n        dim N , M as long\n        \n        for i as long =start to limit\n            N = i\n            M = Sum_Divisor(N)-1\n            if N > M then continue for\n            if Sum_Divisor(M) = N + 1  then\n                return \"(\" & N & \" \" & M & \")\"\n                exit for\n            end if\n        next i       \n        return \"Nothing\"\n        \n    End Function\n    \n    public function Sum_Divisor(n as long) as long        \n        Sum_Divisor=1\n        for i as long = 2 to math.sqrt(n)\n            if n mod i = 0 then \n                if i=(n\/i) then\n                    Sum_Divisor += i \n                else\n                    Sum_Divisor += (i + n \\ i)\n                end if\n              end if\n        next i\n        return Sum_Divisor\n    end function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"59f44c7bd4b36946fd000052":[{"id":350451,"user_id":null,"body":"Imports System\n\nPublic Module Histo\n    Public Function Hist(ByVal s As String) As String\n        Dim Res As String = \"\"\n        Dim errores(3) As String\n        errores(0) = \"u\"\n        errores(1) = \"w\"\n        errores(2) = \"x\"\n        errores(3) = \"z\"\n        For Each i In errores\n            Dim conta As Integer = 0\n\n            For Each L In s\n                If L = i Then\n                    conta += 1\n                End If\n            Next\n            if conta > 0 then\n            If Res <> \"\" Then\n                Res += \"\\r\"\n            End If\n            Res += i & \"  \" & conta & \"     \"\n            For j = 1 To conta\n                Res += \"*\"\n            Next\n            end if\n        Next\n        return  Res\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350452,"user_id":492,"body":"Imports System\n\nPublic Module Histo\n    Private Function rep(ByVal s As String, ByVal n As Integer) As String\n\t\tReturn New String(s, n)\n    End Function\n    Public Function Hist(ByVal s As String) As String\n        Dim data As Integer() = New Integer() {0, 0, 0, 0}\n        Dim bse As String = \"uwxz\"\n        Dim res As String = \"\"\n        For i As Integer = 0 To s.Length - 1\n            Dim ndx As Integer = bse.IndexOf(s(i))\n            If ndx <> -1 Then\n                data(ndx) += 1\n            End If\n        Next\n        For i As Integer = 0 To 4 - 1\n            If data(i) <> 0 Then\n                res += String.Format(\"{0,-2} {1,-6}\", bse(i), data(i).ToString()) & rep(\"*\", data(i)) & \"\\r\"\n            End If\n        Next\n        Dim lg As Integer = res.Length\n        Return If(lg <> 0, res.Substring(0, lg - 2), res)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350453,"user_id":null,"body":"Imports System\n\nPublic Module Histo\n    Public Function Hist(ByVal s As String) As String\n        Dim answer = New List(Of String)\n        Dim l = s.Length()\n        For Each c In \"uwxz\"\n            Dim counter = l - s.Replace(c, \"\").Length()\n            If counter >= 10 Then\n                answer.Add(c & \"  \" & counter & \"    \" & New String(\"*\", counter))\n            ElseIf counter > 0 Then\n                answer.Add(c & \"  \" & counter & \"     \" & New String(\"*\", counter))\n            End If\n        Next\n        Return String.Join(\"\\r\", answer)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350454,"user_id":null,"body":"Imports System\n\nPublic Module Histo\n    Public Function Hist(ByVal s As String) As String\n        Dim u As Integer = 0\n        Dim w As Integer = 0\n        Dim x As Integer = 0\n        Dim z As Integer = 0\n        Dim sOut As String = \"\"\n\n        For i = 0 To s.Length - 1\n            Select Case s(i)\n                Case \"u\"\n                    u += 1\n                Case \"w\"\n                    w += 1\n                Case \"x\"\n                    x += 1\n                Case \"z\"\n                    z += 1\n            End Select\n        Next i\n\n        If u > 0 Then\n            sOut &= ($\"u  {u}{New String(\" \"c, 6 - u.ToString.Length)}{New String(\"*\"c, u)}\\r\")\n        End If\n\n        If w > 0 Then\n            sOut &= ($\"w  {w}{New String(\" \"c, 6 - w.ToString.Length)}{New String(\"*\"c, w)}\\r\")\n        End If\n\n        If x > 0 Then\n            sOut &= ($\"x  {x}{New String(\" \"c, 6 - x.ToString.Length)}{New String(\"*\"c, x)}\\r\")\n        End If\n\n        If z > 0 Then\n            sOut &= ($\"z  {z}{New String(\" \"c, 6 - z.ToString.Length)}{New String(\"*\"c, z)}\")\n        End If\n\n        If sOut.Length > 0 AndAlso sOut(sOut.Length - 1) = \"r\" Then\n            sOut = sOut.Substring(0, sOut.Length - 2)\n        End If\n\n        Return sOut\n\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350455,"user_id":null,"body":"Imports System\n\nPublic Module Histo\n    Public Function Hist(ByVal s As String) As String\n        ' your code\n        dim errorCodes as String = \"uwxz\"\n        dim errors as Dictionary (Of String, Integer) = new Dictionary(Of String, Integer)\n        dim histStr as String = \"\"\n        \n        for each c as String in s\n            if errorCodes.contains(c) then\n                if errors.containsKey(c) then\n                    dim count as integer = errors.item(c)\n                    errors.item(c) = count + 1\n                else\n                    errors.add(c, 1)\n                end if\n            end if\n        next\n    \n        dim keys as List(Of String) = errors.keys.ToList\n        keys.Sort()\n    \n        for each key as String in keys\n            if histStr > \"\" then\n                histStr = histStr & \"\\r\"\n            end if\n    \n            histStr = histStr & String.Format(\"{0,-2} {1,-5} \", key, errors.item(key), \"*\")\n            for i as integer = 1 to errors.item(key)\n                histStr &= \"*\"\n            next\n        next\n\n        return histStr\n        \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350456,"user_id":null,"body":"Imports System\n\nPublic Module Histo\n    Public Function Hist(ByVal s As String) As String\n        Dim output as string = \"\"\n        Dim count as integer = 0 \n        Dim times as integer = 0\n        Dim top as integer = 0\n        Dim errors as new Dictionary(Of string, integer)\n        errors.Add(\"u\", 0)\n        errors.Add(\"w\", 0)\n        errors.Add(\"x\", 0)\n        errors.Add(\"z\", 0)\n        for i = 0 to s.count() - 1\n            if s(i) = \"u\" or s(i) = \"z\" or s(i) = \"w\" or s(i) = \"x\" then           \n                    errors(s(i)) += 1\n            end if\n        Next\n        for i = 0 to 3\n            if errors(errors.keys(i)) > 0 then\n                top += 1\n            end if\n        next\n        while count < 4\n            if errors(errors.keys(count)) > 0 then\n                times += 1\n                output += errors.keys(count) & \"  \" & errors(errors.keys(count)) & \"     \"\n                for i = 0 to errors(errors.keys(count)) - 1\n                    output += \"*\"\n                next    \n                if times < top then\n                    output += \"\\r\"\n                end if\n            end if \n            count += 1\n        End while\n        return output\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350457,"user_id":null,"body":"Imports System\n\nPublic Module Histo\n    Public Function Hist(ByVal s As String) As String\n        Dim current As String = \"\"\n        Dim count As Integer = 1\n        dim str as string = \"\"\n        Dim c() As Char = s.toCharArray()\n        Array.sort(c)\n        For index = 1 To (s.Length - 1)\n            If c(index) = \"u\" Or c(index) = \"w\" Or c(index) = \"x\" Or c(index) = \"z\" Then\n                If c(index) = current Then\n                    count += 1\n                Else\n                    If current <> \"\" Then\n                        str &= format(current, count) & \"\\r\"\n                    End If\n                    current = c(index)\n                    count = 1\n                End If\n            End If\n        Next\n        If current <> \"\" Then\n            str &= format(current, count)\n        End If\n\n        Return str\n    End Function\n\n    Private Function format(ByVal current As Char, ByVal count As Integer) As String\n        Dim stars As String = \"\"\n        For index = 1 To count\n            stars &= \"*\"\n        Next\n        Return current & \"  \" & count & \"     \" & stars\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350458,"user_id":null,"body":"Imports System\nImports System.Collections.ObjectModel\n\nPublic Module Histo\n    Public Function Hist(s As String) As String\n        Dim strings As ICollection(Of String) = New Collection(Of String)()\n        For Each letter in \"uwxz\"\n            Dim count = s.Count(function(c) c.Equals(letter))\n            If count < 1\n                Continue For\n            End If\n            Dim str = String.Format(\"{0}  {1,-5} {2}\", letter, count, New String(\"*\", count))\n            strings.Add(str)\n        Next\n        Return String.Join(\"\\r\", strings)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350459,"user_id":null,"body":"Imports System\n\nPublic Module Histo\n    Public Function Hist(ByVal s As String) As String\n        Dim n_u As Integer\n        Dim n_w As Integer\n        Dim n_x As Integer\n        Dim n_z As Integer\n        Dim wildcard As String = \"\"\n        Dim result As String = \"\"\n        Dim r1 As String = \"\"\n        Dim r2 As String = \"\"\n        Dim r3 As String = \"\"\n\n        For Each u As Char In s\n            If u = \"u\" Then\n                n_u += 1\n            End If\n        Next\n\n        For Each w As Char In s\n            If w = \"w\" Then\n                n_w += 1\n            End If\n        Next\n\n        For Each x As Char In s\n            If x = \"x\" Then\n                n_x += 1\n            End If\n        Next\n\n        For Each z As Char In s\n            If z = \"z\" Then\n                n_z += 1\n            End If\n        Next\n\n        If n_w = 0 And n_x = 0 And n_z = 0 Then\n            r1 = \"\"\n        Else\n            r1 = \"\\r\"\n        End If\n\n        If n_x = 0 And n_z = 0 Then\n            r2 = \"\"\n        Else\n            r2 = \"\\r\"\n        End If\n\n        If n_z = 0 Then\n            r3 = \"\"\n        Else\n            r3 = \"\\r\"\n        End If\n\n        If n_u <> 0 Then\n            For i = 1 To n_u\n                wildcard &= \"*\"\n            Next\n\n            If n_u < 10 Then\n                result = \"u  \" & n_u & \"     \" & wildcard & r1\n            ElseIf n_u > 9 And n_u < 100 Then\n                result = \"u  \" & n_u & \"    \" & wildcard & r1\n            ElseIf n_u > 99 And n_u < 1000 Then\n                result = \"u  \" & n_u & \"   \" & wildcard & r1\n            ElseIf n_u > 999 And n_u < 10000 Then\n                result = \"u  \" & n_u & \"  \" & wildcard & r1\n            ElseIf n_u > 9999 And n_u < 100000 Then\n                result = \"u  \" & n_u & \" \" & wildcard & r1\n            Else\n                result = \"u  \" & n_u & wildcard & r1\n            End If\n        End If\n\n        If n_w <> 0 Then\n            wildcard = \"\"\n            For i = 1 To n_w\n                wildcard &= \"*\"\n            Next\n\n            If n_w < 10 Then\n                result &= \"w  \" & n_w & \"     \" & wildcard & r2\n            ElseIf n_w > 9 And n_w < 100 Then\n                result &= \"w  \" & n_w & \"    \" & wildcard & r2\n            ElseIf n_w > 99 And n_w < 1000 Then\n                result &= \"w  \" & n_w & \"   \" & wildcard & r2\n            ElseIf n_w > 999 And n_w < 10000 Then\n                result &= \"w  \" & n_w & \"  \" & wildcard & r2\n            ElseIf n_w > 9999 And n_w < 100000 Then\n                result &= \"w  \" & n_w & \" \" & wildcard & r2\n            Else\n                result &= \"w  \" & n_w & wildcard & r2\n            End If\n        End If\n\n        If n_x <> 0 Then\n            wildcard = \"\"\n            For i = 1 To n_x\n                wildcard &= \"*\"\n            Next\n\n            If n_x < 10 Then\n                result &= \"x  \" & n_x & \"     \" & wildcard & r3\n            ElseIf n_x > 9 And n_x < 100 Then\n                result &= \"x  \" & n_x & \"    \" & wildcard & r3\n            ElseIf n_x > 99 And n_x < 1000 Then\n                result &= \"x  \" & n_x & \"   \" & wildcard & r3\n            ElseIf n_x > 999 And n_x < 10000 Then\n                result &= \"x  \" & n_x & \"  \" & wildcard & r3\n            ElseIf n_x > 9999 And n_x < 100000 Then\n                result &= \"x  \" & n_x & \" \" & wildcard & r3\n            Else\n                result &= \"x  \" & n_x & wildcard & r3\n            End If\n        End If\n\n        If n_z <> 0 Then\n            wildcard = \"\"\n            For i = 1 To n_z\n                wildcard &= \"*\"\n            Next\n\n            If n_z < 10 Then\n                result &= \"z  \" & n_z & \"     \" & wildcard\n            ElseIf n_z > 9 And n_z < 100 Then\n                result &= \"z  \" & n_z & \"    \" & wildcard\n            ElseIf n_z > 99 And n_z < 1000 Then\n                result &= \"z  \" & n_z & \"   \" & wildcard\n            ElseIf n_z > 999 And n_z < 10000 Then\n                result &= \"z  \" & n_z & \"  \" & wildcard\n            ElseIf n_z > 9999 And n_z < 100000 Then\n                result &= \"z  \" & n_z & \" \" & wildcard\n            Else\n                result &= \"z  \" & n_z & wildcard\n            End If\n        End If\n    return result\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350460,"user_id":null,"body":"Imports System\n\nPublic Module Histo\n    Public Function Hist(ByVal s As String) As String\n        \n        Dim dict As New Dictionary(Of String, Integer)\n\n        For Each c In s\n            If (c = \"u\" Or c = \"w\" Or c = \"x\" Or c = \"z\") Then\n                If (Not dict.ContainsKey(c)) Then\n                    dict.Add(c, 0)\n                End If\n                dict.Item(c) = dict.Item(c) + 1\n            End If\n        Next\n        \n        dict = dict.OrderBy(Function(x) x.Key).ToDictionary(Function(x) x.Key, Function(x) x.Value)\n                \n        Dim lista As New List(Of String)(dict.Keys)\n        Dim str As String\n        Dim newString As String = \"\"\n        Dim arrayString As New ArrayList()\n\n        For i As Integer = 0 To lista.Count - 1\n            str = lista(i)\n            Dim auxString As String = \"\"\n            If (i = lista.Count - 1) Then\n                auxString = str + \"  \" + dict.Item(str).ToString() + \"     \" + Asterisco(dict.Item(str))\n            Else\n                auxString = str + \"  \" + dict.Item(str).ToString() + \"     \" + Asterisco(dict.Item(str)) + \"\\r\"\n            End If\n\n            newString = newString + auxString\n        Next\n        \n        Return newString\n\n    End Function\n\n    Public Function Asterisco(qtd As Integer) As String\n        Dim ast As String = \"\"\n        For i As Integer = 1 To qtd\n            ast = ast + \"*\"\n        Next\n\n        Return ast\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"59f4a0acbee84576800000af":[{"id":350461,"user_id":492,"body":"Imports System\n\nPublic Module PositionAverage\n    Private Function pairPercentage(ByVal s1 As String, ByVal s2 As String) As Double\n        Dim lg As Integer = s1.Length\n        Dim count As Integer = 0\n        For pos As Integer = 0 To lg - 1\n            If s1(pos) = s2(pos) Then\n                count += 1\n            End If\n        Next\n        Return CDbl(count) \/ lg\n    End Function\n    Public Function PosAverage(ByVal s As String) As Double\n        Dim strings As String() = s.Split(New String() {\", \"}, StringSplitOptions.RemoveEmptyEntries)\n        Dim result As Double = 0.0\n        Dim cnt As Integer = 0\n        Dim lg As Integer = strings.Length\n        For k As Integer = 0 To lg - 1\n            For i As Integer = k + 1 To lg - 1\n                result += pairPercentage(strings(k), strings(i))\n                cnt += 1\n            Next\n        Next\n        result = 100.0 * result \/ cnt\n        Return Math.Floor(result * Math.Pow(10.0, 10)) \/ Math.Pow(10.0, 10)\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350462,"user_id":53,"body":"Imports System\n\nPublic Class PositionAverage\n    Public Shared Function PosAverage(ByVal s As String) As Double\n        Dim hit = 0\n        Dim size = s.Length\n        Dim m = s.IndexOf(\",\"c)\n        Dim n = (size + 2) \/ (m + 2)\n        Dim tot = m * n * (n - 1) \/ 2\n        Dim i As Integer = 0\n\n        While i < size - m - 2\n            Dim j As Integer = i + m + 2\n\n            While j < size\n\n                For k As Integer = 0 To m - 1\n                    If s(i + k) = s(j + k) Then hit += 1\n                Next\n\n                j += m + 2\n            End While\n\n            i += m + 2\n        End While\n\n        Return CDbl(hit) \/ tot * 100\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350463,"user_id":null,"body":"Imports System\n\nPublic Module PositionAverage\n    \n    Public Function PosAverage(ByVal s As String) As Double\n        Dim substrings = s.Split(\", \")\n        Dim counter = 0\n        Dim total = 0\n        Dim l = substrings.Length()\n        For i = 0 To l - 2\n            For j = i + 1 To l - 1\n                For k = 0 To substrings(i).Length() - 1\n                    total += 1\n                    If substrings(i)(k) = substrings(j)(k) Then counter += 1\n                Next\n            Next\n        Next\n        Return counter \/ total * 100\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350464,"user_id":null,"body":"Imports System\n\nPublic Module PositionAverage\n    \n    Public Function PosAverage(ByVal s As String) As Double\n\n        Dim arr() As String = s.Split(\", \")\n        Dim sT As String = \"\"\n        Dim commonL As Integer = 0\n        Dim commonT As Integer = 0\n\n        For i = 0 To arr(0).Length - 1\n            sT = \"\"\n\n            For Each L In arr\n                sT &= L(i)\n            Next\n\n            Dim cArr() As Char = sT.ToCharArray()\n            Array.Sort(cArr)\n            sT = cArr.ToArray()\n\n            commonL = 0\n\n            For k = 0 To sT.Length - 2\n                If sT(k) = sT(k + 1) AndAlso k = sT.Length - 2 Then\n                    commonL += 1\n                    commonT += (commonL + 1) * (commonL) \/ 2\n                ElseIf sT(k) = sT(k + 1) Then\n                    commonL += 1\n                Else\n                    commonT += (commonL + 1) * (commonL) \/ 2\n                    commonL = 0\n                End If\n            Next k\n        Next i\n\n        Return commonT \/ ((arr.Length * (arr.Length - 1) \/ 2) * arr(0).Length) * 100\n        \n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350465,"user_id":null,"body":"Imports System\n\nPublic Module PositionAverage\n    \n    Public Function PosAverage(ByVal s As String) As Double\n        ' your code\n        s = s.Replace(\" \",\"\")\n        Dim values() As String = s.Split(\",\"c)\n        Dim common As Double = 0\n        Dim total As Double = 0\n        For i As Integer = 0 to values.Length-1\n            For j As Integer = i + 1 to values.Length-1\n                For k As Integer = 0 To values(i).Length-1\n                    Console.WriteLine(values(i)(k) + \" , \" + values(j)(k))\n                    If values(i)(k) = values(j)(k) Then\n                        common = common + 1\n                    End If\n                    total = total + 1\n                Next\n            Next\n        Next\n        Return (common\/total) * 100\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350466,"user_id":null,"body":"Imports System\n\nPublic Module PositionAverage\n    \n    Public Function PosAverage(ByVal s As String) As Double\n        Dim words = s.Split(\", \")\n        Dim overallCount = 0\n        Dim equalCount = 0\n        For i = 0 To words.Length - 1\n            For j = (i + 1) To words.Length - 1\n                overallCount += words(i).Length()\n                For k = 0 To words(i).Length() - 1\n                    If words(i).Chars(k) = words(j).Chars(k) Then\n                        equalCount += 1\n                    End If\n                Next\n            Next\n        Next\n        return equalCount \/ overallCount * 100\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350467,"user_id":null,"body":"Imports System\n\nPublic Module PositionAverage\n    \n    Public Function PosAverage(ByVal s As String) As Double  \n        Dim numCommon as Integer = 0\n        Dim numComb as Integer = 0\n        Dim result as double = 0.0\n        Dim strComp as string()\n        Dim sep as char = \",\"c\n        \n        strComp = s.split(sep)\n        numComb = Comb(strComp.count-1) * strComp(0).length\n        \n        for j = 0 to strComp.count-1\n            for i = j+1 to strComp.count-1\n                numCommon = numCommon + CompareStrings(strComp(j).trim(),strComp(i).trim())\n            next\n        next\n        \n        result = (numCommon\/numComb)*100\n    \n        return result\n    End Function\n\n    Public Function CompareStrings(ByVal s1 As String, ByVal s2 As String) as Integer\n        Dim common as integer =0\n    \n        if s1.length = s2.length then\n            for i = 0 to s1.length-1\n                if s1.substring(i,1) = s2.substring(i,1) then\n                    if s1.substring(i,1) = \"0\" or s1.substring(i,1) = \"9\" or s1.substring(i,1) = \"6\" or s1.substring(i,1) = \"4\" then\n                       common = common +1\n                    end if\n                end if\n            next\n        end if\n\n        return common\n    End Function\n    \n    Function Comb(n As Integer) As Integer\n        If n <= 1 Then\n            Return 1\n        End If\n        Return Comb(n - 1) + n\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350468,"user_id":null,"body":"Imports System\nImports Microsoft.VisualBasic\n\nPublic Module PositionAverage\n    \n    Public Function PosAverage(ByVal s As String) As Double\n        Dim stringArray() as String\n        Dim counter as integer = 0\n\n        stringArray = s.Split(\", \")\n        \n        Dim totalCombinations as Double = (stringArray.length*(stringArray.length-1))\/2\n        \n        totalCombinations = (totalCombinations*stringArray(0).length)\n        \n        Dim ctr as integer \n        Dim ctr2 as integer\n        Dim ctr3 as integer\n        \n        For ctr = 0 To stringArray.length-2\n            For ctr2 = ctr+1 To stringArray.length-1\n                For ctr3 = 0 To stringArray(ctr).length-1\n                    if(stringArray(ctr).Chars(ctr3) =  stringArray(ctr2).Chars(ctr3)) Then\n                     counter+=1\n                    End If\n                Next\n            Next\n        Next\n        \n        Return (counter\/(totalCombinations\/100))\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350469,"user_id":null,"body":"Imports System\n\nPublic Module PositionAverage\n\n    Public Function PosAverage(ByVal s As String) As Double\n        Dim Strings = New List(Of String)\n        Strings.AddRange(s.Split(\",\").Select(Function(str) str.Trim()))\n        Dim PivotStrings = New List(Of String)\n        For i As Integer = 0 To Strings.Count() - 1\n            For j As Integer = 0 To Strings(0).Length - 1\n                If PivotStrings.Count() = j Then\n                    PivotStrings.Add(Strings(i)(j))\n                Else\n                    PivotStrings(j) += Strings(i)(j)\n                End If\n            Next\n        Next\n        Dim CountCommon As Integer = PivotStrings.Select(Function(str) StrCombine(str)).Sum()\n        Dim Max As Integer = (Strings.Count() * (Strings.Count() - 1) \/ 2) * Strings(0).Length\n        Return 100 * CountCommon \/ Max\n    End Function\n\n    Private Function StrCombine(ByVal str As String) As Integer\n        Dim countCombinations As Integer = 0\n        For Each i As Char In str.ToCharArray().Distinct()\n            Dim c As String = i.ToString()\n            Dim tmpCnt As String = str.ToCharArray().Count(Function(s) s = c)\n            If tmpCnt > 1 Then\n                countCombinations += tmpCnt * (tmpCnt - 1) \/ 2\n            End If\n        Next\n        Return countCombinations\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350470,"user_id":null,"body":"Imports System\n\nPublic Module PositionAverage\n    \n    Public Function PosAverage(ByVal s As String) As Double\n        Dim substrings As String() = s.Split(\",\"c)\n        Dim samePosCount As Integer = 0\n        Dim posCounts As Integer = 0\n\n        For i As Integer = 0 To substrings.Length - 1\n            Dim currentSubstring As String = substrings(i).Trim()\n\n            For j As Integer = i + 1 To substrings.Length - 1\n                Dim nextSubstring As String = substrings(j).Trim()\n\n                For k As Integer = 0 To currentSubstring.Length - 1\n                    If (currentSubstring(k) = nextSubstring(k)) Then\n                        samePosCount += 1\n                    End If\n\n                    posCounts += 1\n                Next k\n            Next j\n        Next i\n\n        Return samePosCount \/ posCounts * 100\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5a03b3f6a1c9040084001765":[{"id":350471,"user_id":1527,"body":"Public Module Kata\n    Public Function Angle(ByVal n As Integer) As Integer\n        return (n-2)*180\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350472,"user_id":null,"body":"Public Module Kata\n    Public Function Angle(ByVal n As Integer) As Integer\n        if n = 3 then return 180\n        return 180 + Angle(n-1)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350473,"user_id":null,"body":"Public Module Kata\n    Public Function Angle(ByVal n As Integer) As Integer\n        ' your code here\n        Return 180 * (n - 2)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350474,"user_id":null,"body":"Public Module Kata\n    Public Function Angle(ByVal n As Integer) As Integer\n        ' your code here\n        Dim zahl as integer\n        \n        zahl = 180 * (n-2)\n        \n        Angle = zahl\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350475,"user_id":null,"body":"Public Module Kata\n    Public Function Angle(ByVal n As Integer) As Integer\n        ' your code here\n        Return (n - 2) * 180\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350476,"user_id":null,"body":"Public Module Kata\n    Public Function Angle(ByVal n As Integer) As Integer\n        return 180*(n-2)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350477,"user_id":null,"body":"Public Module Kata\n    Public Function Angle(ByVal n As Integer) As Integer\n        \n        If n > 2 Then  \n        \n            Angle = 180 * (n-2)\n            \n        Else\n            \n            Angle = 0\n            \n        End If\n                 \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350478,"user_id":null,"body":"Public Module Kata\n    Public Function Angle(ByVal n As Integer) As Integer\n        if n = 2 then return 0\n        return 180 + Angle(n-1)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350479,"user_id":null,"body":"Public Module Kata\n    Public Function Angle(ByVal n As Integer) As Integer\n        return n*(180-(360\/n))\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350480,"user_id":null,"body":"Public Module Kata\n    Public Function Angle(ByVal n As Integer) As Integer\n        ' your code here\n\n            Angle =  (n-2) * 180\n\n        return Angle\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5a045fee46d843effa000070":[{"id":350481,"user_id":null,"body":"Imports System.Collections.Generic\n\nPublic Module FactDecomp\n    Public Function Decomp(ByVal n As Integer) As String\n        Dim factors As New Dictionary(Of Integer, Integer)\n        For i = 2 To n\n            Dim x = i\n            Dim f = 2\n            While True\n                While x Mod f = 0\n                    If Not factors.ContainsKey(f) Then factors(f) = 0\n                    factors(f) += 1\n                    x \\= f\n                End While\n                If x = 1 Then Exit While\n                f = If(f > 2, f + 2, 3)\n            End While\n        Next\n        Dim answer As New List(Of String)\n        For Each pair As KeyValuePair(Of Integer, Integer) In factors\n            If pair.Value > 1 Then\n                answer.Add(pair.Key & \"^\" & pair.Value)\n            Else\n                answer.Add(pair.Key.toString)\n            End If\n        Next\n        Return String.Join(\" * \", answer)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350482,"user_id":null,"body":"Imports System\n\nPublic Module FactDecomp\n\n    Public Function Decomp(ByVal n As Integer) As String\n        dim i as integer\n        dim prime, incprime as integer\n        dim s as string\n        dim fl as boolean\n        'do first two primes\n        s = countprime(2,n)\n        s &= countprime(3,n)\n        'then loop through all prime candidates of the form 6n+-1\n        prime = 5\n        incprime = 2\n        do\n            fl = true\n            for i=3 to Math.sqrt(prime) step 2\n                if prime mod i = 0 then\n                    fl=false\n                    exit for\n                end if\n            next\n            if fl then s &= countprime(prime, n)\n            prime += incprime\n            incprime = 6 - incprime\n        loop until prime > n\n        return s\n    End Function\n    \n    Function countprime(byval p as integer, byval n as integer) as string\n        dim acc as integer\n        dim t as string\n        acc = 0\n        do\n            n = math.floor(n \/ p)\n            acc += n\n        loop until n = 0\n        t = cstr(p)\n        if acc>1 then t &=  \"^\" & cstr(acc)\n        if p>2 then t = \" * \" & t\n        return t\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350483,"user_id":492,"body":"Imports System\nImports System.Text\n\nPublic Module FactDecomp\n\n    Public Function Decomp(ByVal n As Integer) As String\n        Dim primePower As Integer() = New Integer(n + 1 - 1) {}\n        While n > 1\n            Dim befn As Integer = Math.Max(System.Threading.Interlocked.Decrement(n), n + 1)\n            For i As Integer = 2 To Math.Sqrt(befn)\n                If befn Mod i = 0 Then\n                    befn = befn \/ i\n                    primePower(i) = primePower(i) + 1\n                    i = 1\n                End If\n            Next\n            primePower(befn) = primePower(befn) + 1\n        End While\n        Dim result As StringBuilder = New StringBuilder()\n        For i As Integer = 2 To primePower.Length - 1\n            If primePower(i) = 0 Then\n                Continue For\n            ElseIf primePower(i) = 1 Then\n                result.Append(i & \" * \")\n            Else\n                result.Append(i & \"^\" & primePower(i) & \" * \")\n            End If\n        Next\n        Dim s As String = result.ToString()\n        Return s.Substring(0, result.Length - 3)\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5a057ec846d843c81a0000ad":[{"id":350484,"user_id":492,"body":"Imports System\n\nPublic Module Cycle\n\t\n    Public Function Running(ByVal n As Integer) As Integer\n        If n Mod 2 = 0 OrElse n Mod 5 = 0 Then\n            Return -1\n        End If\n        Dim r As Integer = 1\n        For i As Integer = 1 To n\n            r = r * 10 Mod n\n            If r = 1 Then\n                Return i\n            End If\n        Next\n        Return -1\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350485,"user_id":53,"body":"Imports System\n\nPublic Module Cycle\n\t\n    Public Function Running(ByVal n As Integer) As Integer\n        If n Mod 2 = 0 OrElse n Mod 5 = 0 Then Return -1\n        Dim m As Integer = 10 Mod n, cnt As Integer = 1\n\n        While m <> 1\n            m = m * 10 Mod n\n            cnt += 1\n        End While\n\n        Return cnt\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350486,"user_id":null,"body":"Imports System\n\nPublic Module Cycle\n    \n    Public Function Running(ByVal denr As Integer) As Integer\n        dim nemr = 10 'Not 1, becase we find cycle after zero'\n        dim remm as integer\n        dim Result as integer\n        \n        if denr <=1 then return -1\n        if denr mod 2 = 0 or denr mod 5 =0 then \n            return -1\n            exit function\n        end if\n        remm = nemr mod denr\n        result = 1\n        while remm <> 1\n            Result += 1\n            'assign new numerator for next calculation'\n            nemr = remm * 10\n            remm = nemr MOD denr          \n        end while\n        return result   \n    End Function\n        \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350487,"user_id":null,"body":"Imports System\nPublic Module Cycle\n    Public Function Running(ByVal n As Integer) As Integer\n        If n Mod 2 = 0 OrElse n Mod 5 = 0 Then\n            Return -1\n        End If\n        Dim a As Integer = 1\n        For i As Integer = 1 To n\n            a = a * 10 Mod n\n            If a = 1 Then Return i\n        Next i\n        Return -1\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350488,"user_id":null,"body":"Imports System\n\nPublic Module Cycle\n\t\n    Public Function Running(ByVal n As Integer) As Integer\n        If n Mod 2 = 0 Or n Mod 5 = 0 Then Return -1\n        Dim answer = 0\n        Dim denominator = 1\n        While denominator <> 1 Or answer = 0\n            answer += 1\n            denominator = denominator * 10 mod n\n        End While\n        Return answer\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350489,"user_id":null,"body":"Imports System\n\nPublic Module Cycle\n\t\n    Public Function Running(ByVal n As Integer) As Integer\n\n        ' 1, 3, 7, 9 - if divider ends with this digit, there is a cyclic fraction\n        ' 2, 4, 5, 6, 8, 0 - if divider ends with this digit, there is no cyclic fraction\n\n        Dim ls As Char = Convert.ToString(n).Last\n        If ls = \"2\" OrElse ls = \"4\" OrElse ls = \"5\" OrElse ls = \"6\" OrElse ls = \"8\" OrElse ls = \"0\" Then\n            Return -1\n        End If\n\n        Dim b As Integer = 10\n        Dim p As Integer = n\n        Dim t As Integer = 0\n        Dim r As Integer = 1\n        Dim x As Integer = 0\n        Dim d As Integer = 0\n        \n        Do\n            t = t + 1\n            x = r * b\n            d = x \\ p\n            r = x Mod p\n\n            If r = 1 Then\n                Return t\n            End If\n\n        Loop While t < n\n\n        Return -1\n\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350490,"user_id":null,"body":"Imports System\n\nPublic Module Cycle\n\t\n    Public Function Running(ByVal n As Integer) As Integer\n        Dim a As Integer\n        Dim StartOtschet As Integer\n        Dim Period As Integer\n        Dim Ostatok As Integer\n        Dim TekZnach As Integer\n        Dim TekNum As Integer\n        Dim Nulls1 As Integer\n        Dim Nulls2 As Integer\n        Dim Vyhod As Boolean\n        Dim Start As Boolean\n        Nulls1 = -1\n        a = 1\n        If a * 10 > n Then Start = True\n        While a < n\n            a = a * 10\n            Nulls1 = Nulls1 + 1\n            Start = True\n        End While\n        If Start Then StartOtschet = a Else StartOtschet = (a Mod n) * 10\n        Ostatok = StartOtschet\n        Do\n            If Ostatok = 0 Then\n                return -1\n                Exit Do\n            End If\n            TekZnach = Ostatok \\ n\n            Period = Period + 1\n            If Ostatok = StartOtschet And Period > 1 Then\n                Vyhod = True\n                TekNum = Period - 1\n            End If\n            If TekZnach = 0 Then\n                Ostatok = 10 * Ostatok\n                Nulls2 = Nulls2 + 1\n            Else\n                If Vyhod = False Then Nulls2 = 0\n                Ostatok = (Ostatok Mod n) * 10\n            End If\n        Loop While Vyhod = False\n        If Nulls2 <> Nulls1 Then return  -1\n        return TekNum\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350491,"user_id":null,"body":"Imports System\n\nPublic Module Cycle\n\t\n    Public Function Running(ByVal n As Integer) As Integer\n        if n mod 2 = 0 or n mod 5 = 0\n            return -1\n        end if \n        \n        dim res as integer\n        res = 10 mod n\n        dim count as integer = 1\n        \n        while res <> 1     \n            res = res * 10 mod n\n            count = count + 1\n        end while\n        \n        return count\n        \n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350492,"user_id":null,"body":"public module cycle\npublic function running(byval n as integer) as integer\nif n mod 2 = 0 or n mod 5 = 0 then return -1\ndim a as integer = 1\nfor i as integer = 1 to n\na = a * 10 mod n\nif a = 1 then return i\nnext\nreturn -1\nend function\nend module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350493,"user_id":null,"body":"Imports System\n\nPublic Module Cycle\n    \n    Public Function Running(ByVal denr As Integer) As Integer\n        dim nemr = 10 'Not 1, becase we find cycle after zero'\n        dim remm as integer\n        dim Result as integer=0\n        \n        if denr mod 2 = 0 or denr mod 5 =0 then \n            return -1\n            exit function\n        end if\n        remm = nemr mod denr\n        result = 1\n        while remm <> 1\n            Result += 1\n            'assign new numerator for next calculation'\n            nemr = remm * 10\n            remm = nemr MOD denr          \n        end while\n        return result   \n    End Function\n        \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5a3fe3dde1ce0e8ed6000097":[{"id":350494,"user_id":null,"body":"Public Module Kata\n    Public Function Century(ByVal year As Integer) As Integer\n        Century = Math.Ceiling(year \/ 100)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350495,"user_id":1701,"body":"Public Module Kata\n    Public Function Century(ByVal year As Integer) As Integer\n        return Math.Ceiling(year \/ 100)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350496,"user_id":1566,"body":"Public Module Kata\n    Public Function Century(ByVal year As Integer) As Integer\n        return (year+99)\\100\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350497,"user_id":null,"body":"Public Module Kata\n    Public Function Century(ByVal year As Integer) As Integer\n        Return (((year - ((year-1) Mod 100))\/100)+1)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350498,"user_id":null,"body":"Public Module Kata\n    Public Function Century(ByVal y As Integer) As Integer\n         return (y - 1) \\ 100 + 1\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350499,"user_id":null,"body":"Public Module Kata\n    Public Function Century(ByVal year As Integer) As Integer\n        ' your code here\n\t\tDim a As Integer = 100\n        Dim b As Integer\n\t\tFor index = 1 To year\n\t\t\tindex = index + 99\n\t\t\tb = index \/ a\n\t\tNext\n\t\tReturn b\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350500,"user_id":null,"body":"Public Module Kata\n    Public Function Century(ByVal year As Integer) As Integer\n        'Declaring variables\n        Dim intCentury As Integer = -1\n\n        'If a turn of the century_from_year regular division, else integer division\n        If year Mod 100 = 0 Then\n            intCentury = year \/ 100\n        Else\n            intCentury = (year \\ 100) + 1\n        End If\n\n        Return intCentury\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350501,"user_id":null,"body":"Public Module Kata\n    Public Function Century(ByVal year As Integer) As Integer\n        dim curr as integer\n        \n        curr = math.ceiling(year\/100)\n       return curr\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350502,"user_id":null,"body":"Public Module Kata\n    Public Function Century(ByVal year As Integer) As Integer\n        dim answer = math.ceiling(year\/100)\n        console.writeline(answer)\n        return answer\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350503,"user_id":null,"body":"Public Module Kata\n    Public Function Century(ByVal year As Integer) As Integer\n        return math.ceiling(year\/100.00)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5a48948e145c46820b00002f":[{"id":350504,"user_id":null,"body":"Imports System\n\nPublic Module KprimesSteps\n    Public Function get_k(n As Integer) As Integer\n        Dim p = 2\n        Dim k = 0\n        Dim upper = Math.Floor(Math.Sqrt(n) + 1)\n        While p < upper\n            While n mod p = 0\n                k += 1\n                n \\= p\n            End While\n            If p > 2 Then\n                p += 2\n            Else\n                p = 3\n            End If\n        End While\n        Return k + If(n = 1, 0, 1)\n    End Function\n\n    Public Function KprimesStep(ByVal k As Integer, ByVal stp As Integer, ByVal start As Long, ByVal nd As Long) As List(Of Long())\n        Dim answer = New List(Of Long())\n        For i = start To nd - stp\n            If get_k(i) = k And get_k(i + stp) = k Then\n                answer.Add({i, i + stp})\n            End If\n        Next\n        Return answer\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350505,"user_id":null,"body":"Imports System\n\nPublic Module KprimesSteps\n\n    Public Function KprimesStep(ByVal k As Integer, ByVal [step] As Integer, ByVal start As Long, ByVal nd As Long) As List(Of Long())\n\n        Dim listArr As New List(Of Long())\n        listArr.Clear()\n\n        Dim n1 As Integer\n        Dim n2 As Integer\n\n        For ndx = start To nd - [step]\n            n1 = KPrimesCounter(ndx)\n\n            If n1 = k Then\n                n2 = KPrimesCounter(ndx + [step])\n                If n1 = n2 Then\n                    listArr.Add(New Long() {ndx, ndx + [step]})\n                End If\n            End If\n\n        Next ndx\n\n        Return listArr\n    End Function\n\n    Private Function KPrimesCounter(ByVal number As Long) As Integer\n    \n        Dim i As Integer = 2\n        Dim kPrimeNumber As Integer = 1\n        \n        While i * i <= number\n\n            If i <> 2 Then\n                If number Mod i Then\n                    i = i + 2\n                Else\n                    number = number \\ i\n                    kPrimeNumber += 1\n                End If\n            Else\n                If number Mod i Then\n                    i = i + 1\n                Else\n                    number = number \\ i\n                    kPrimeNumber += 1\n                End If\n            End If\n\n        End While\n\n        Return kPrimeNumber\n\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350506,"user_id":76,"body":"Imports System\n\nPublic Module KprimesSteps\n\n    Public Function KprimesStep(ByVal k As Integer, ByVal st As Integer, ByVal start As Long, ByVal nd As Long) As List(Of Long())\n        Dim res = New List(Of Long())\n        For n as Long = start to nd - st\n            Dim f1 = CountFactors(n)\n            If f1 = k And CountFactors(n + st) = f1 Then\n                res.Add({ n, n + st })\n            End If\n        Next\n        Return res\n    End Function\n\n    Private Function CountFactors(ByVal n As Long) As Long\n        Dim factors As Long = 0\n        Dim d As Long = 2\n        While d * d <= n\n            While n mod d = 0\n                factors += 1\n                n \/= d\n            End While\n            d += 1\n        End While\n        If n > 1 Then \n            factors += 1 \n        End If\n        Return factors\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350507,"user_id":53,"body":"Imports System\nImports System.Collections.Generic\nImports System.Linq\n\nPublic Class KprimesSteps\n    Public Shared Function KprimesStep(ByVal k As Integer, ByVal [step] As Integer, ByVal start As Long, ByVal nd As Long) As List(Of Long())\n        Dim arr = New List(Of Long())()\n\n        For i = start To nd - [step]\n\n            If PrimeFactorCount(i) = k AndAlso PrimeFactorCount(i + [step]) = k Then\n                arr.Add({i, i + [step]})\n            End If\n        Next\n\n        Return arr\n    End Function\n\n    Private Shared Function PrimeFactorCount(ByVal n As Long) As Long\n        Dim len = 0\n        Dim i = 2\n\n        While i * i <= n\n\n            While n Mod i = 0\n                len += 1\n                n = n \/ i\n            End While\n\n            i += 1\n        End While\n\n        If n > 1 Then len += 1\n        Return len\n    End Function\nEnd Class\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350508,"user_id":null,"body":"Imports System\n\nPublic Module KprimesSteps\n\n    Public Function KprimesStep(ByVal k As Integer, ByVal [step] As Integer, ByVal start As Long, ByVal nd As Long) As List(Of Long())\n        \n        Dim kprimesSteps As New List(Of Long())\n        \n        If nd < 4 Then\n            If nd = 3\n                If start <= 2 And k = 1 And [step] = 1 Then\n                    kprimesSteps.Add({2,3})\n                End If\n            End If\n            Return kprimesSteps\n        End If\n        \n        Dim kprimes As New List(Of Long)\n        Dim reminder As Long\n        Dim kcounter As Integer\n        Dim prime As Integer\n        Dim j As Long\n        \n        For number As Long = start To nd\n        \n            kcounter = 0            \n            prime = 3\n            reminder = number\n            \n            Do While reminder Mod 2 = 0 AndAlso kcounter < k\n                reminder = reminder \/ 2\n                kcounter += 1\n            Loop            \n            \n            Do While prime * prime <= reminder AndAlso kcounter <= k\n                Do While reminder Mod prime = 0 AndAlso kcounter <= k\n                    reminder = reminder \/ prime\n                    kcounter += 1\n                Loop\n                prime += 2\n            Loop\n            \n            If kcounter <= k Then\n                If reminder > 1 Then\n                    reminder = 1\n                    kcounter += 1\n                End If\n            End If\n            \n            If kcounter = k AndAlso reminder = 1 Then\n                kprimes.Add(number)\n            End If                       \n            \n        Next\n                \n        For i As Integer = 0 To kprimes.Count-2\n            j = i+1\n            Do While j <= kprimes.Count-1 AndAlso kprimes(j) - kprimes(i) <= [step]\n                If kprimes(j) - kprimes(i) = [step] Then\n                    kprimesSteps.Add({kprimes(i),kprimes(j)})\n                    Exit Do\n                End If\n                j += 1\n            Loop\n        Next\n        \n        Return kprimesSteps\n        \n    End Function\n    \nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350509,"user_id":null,"body":"Imports System\n\nPublic Module KprimesSteps\n\n    Public Function KprimesStep(ByVal k As Integer, ByVal [step] As Integer, ByVal start As Long, ByVal nd As Long) As List(Of Long())\n        \n        Dim kprimesSteps As New List(Of Long())\n        \n        If nd < 4 Then\n            If nd = 3\n                If start <= 2 And k = 1 And [step] = 1 Then\n                    kprimesSteps.Add({2,3})\n                End If\n            End If\n            Return kprimesSteps\n        End If\n        \n        Dim kprimes As New List(Of Long)\n        Dim reminder As Long\n        Dim kcounter As Integer\n        Dim prime As Integer\n        Dim j As Long\n        \n        For number As Long = start To nd\n        \n            kcounter = 0            \n            prime = 3\n            reminder = number\n            \n            Do While reminder Mod 2 = 0 AndAlso kcounter < k\n                reminder = reminder \/ 2\n                kcounter += 1\n            Loop            \n            \n            Do While reminder > 1 AndAlso kcounter < k\n                Do While reminder Mod prime = 0 AndAlso kcounter < k\n                    reminder = reminder \/ prime\n                    kcounter += 1\n                Loop\n                prime += 2\n            Loop\n            \n            If kcounter = k AndAlso reminder = 1 Then\n                kprimes.Add(number)\n            End If                       \n            \n        Next\n                \n        For i As Integer = 0 To kprimes.Count-2\n            j = i+1\n            Do While j <= kprimes.Count-1 AndAlso kprimes(j) - kprimes(i) <= [step]\n                If kprimes(j) - kprimes(i) = [step] Then\n                    kprimesSteps.Add({kprimes(i),kprimes(j)})\n                    Exit Do\n                End If\n                j += 1\n            Loop\n        Next\n        \n        Return kprimesSteps\n        \n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350510,"user_id":492,"body":"Imports System\n\nPublic Module KprimesSteps\n\t\n    Private Function countPrimeDiv(ByVal n As Long) As Integer\n        Dim cnt As Integer = 0\n        Dim i As Long = 2\n        While i * i <= n\n            While n Mod i = 0\n                cnt = cnt + 1\n                n = n \/ i\n            End While\n            i += 1\n        End While\n        If n > 1 Then cnt = cnt + 1\n        Return cnt\n    End Function\n\n    Public Function KprimesStep(ByVal k As Integer, ByVal [step] As Integer, ByVal start As Long, ByVal nd As Long) As List(Of Long())\n        Dim res As List(Of Long()) = New List(Of Long())()\n        Dim i As Long = start\n        While i <= nd - [step]\n            If (countPrimeDiv(i) = k AndAlso countPrimeDiv(i + [step]) = k) Then res.Add(New Long() {i, i + [step]})\n            i += 1\n        End While\n        Return res\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5aba780a6a176b029800041c":[{"id":350511,"user_id":null,"body":"Public Module Kata\n    Public Function MaxMultiple(ByVal d As Integer, ByVal b As Integer) As Integer\n        return  ( b \\ d ) * d\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350512,"user_id":null,"body":"Public Module Kata\n    Public Function MaxMultiple(ByVal d As Integer, ByVal b As Integer) As Integer\n        For index As Integer = b To 1 Step -1\n            If index Mod d = 0 Then\n                Return index\n            End If\n        Next\n        Return 0\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350513,"user_id":null,"body":"Public Module Kata\n    Public Function MaxMultiple(ByVal d As Integer, ByVal b As Integer) As Integer\n        Return (b \\ d) * d\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350514,"user_id":null,"body":"Public Module Kata\n    Public Function MaxMultiple(ByVal d As Integer, ByVal b As Integer) As Integer\n        Dim res As Integer = d\n        While res + d <= b\n            res += d\n        End While\n        Return res\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350515,"user_id":null,"body":"Public Module Kata\n    Public Function MaxMultiple(ByVal d As Integer, ByVal b As Integer) As Integer\n        Return Math.Truncate(b \/ d) * d        \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350516,"user_id":null,"body":"Public Module Kata\n    Public Function MaxMultiple(ByVal d As Integer, ByVal b As Integer) As Integer\n        ' your code here\n        dim N as integer = 0\n        \n        for i as integer = d To b Step d\n            if i Mod d = 0 then\n                N = i\n            end if\n        next\n        \n        return N\n    \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350517,"user_id":null,"body":"Public Module Kata\n    Public Function MaxMultiple(ByVal d As Integer, ByVal b As Integer) As Integer\n        For i = b To d Step -1\n\n            If i \/ d = i \\ d Then\n                Return i\n            End If\n\n        Next\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350518,"user_id":null,"body":"Public Module Kata\n    Public Function MaxMultiple(ByVal d As Integer, ByVal b As Integer) As Integer\n        dim n as integer\n        for n = b to 1 step -1\n          if n\/d = math.round(n\/d) then exit for\n        next\n        return n\n        \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350519,"user_id":null,"body":"Public Module Kata\n    Public Function MaxMultiple(ByVal d As Integer, ByVal b As Integer) As Integer\n        ' your code here\n        dim max as integer\n        for n = 1 to b \n            if n mod d = 0 then\n                max = n\n            end if\n        next\n        return max\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350520,"user_id":null,"body":"Public Module Kata\n    Public Function MaxMultiple(ByVal div As Integer, ByVal bound As Integer) As Integer\n        ' your code here\n        Dim num As Integer = bound\n        \n        Do Until (num Mod div) = 0 Or bound = 0\n            num -= 1\n        Loop\n\n        Return num\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5abd66a5ccfd1130b30000a9":[{"id":350521,"user_id":null,"body":"Public Module Kata\n    Public Function RowWeights(ByVal array As Integer()) As Integer()\n        Dim firstTeamTotal As Integer = 0\n        Dim secondTeamTotal As Integer = 0\n\n        For i = 0 To array.Length - 1\n            If i Mod 2 = 0 Then\n                firstTeamTotal += array(i)\n            Else\n                secondTeamTotal += array(i)\n            End If\n        Next\n\n        Return New Integer() {firstTeamTotal, secondTeamTotal}\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350522,"user_id":492,"body":"Public Module Kata\n  Public Function RowWeights(ByVal a As Integer()) As Integer()\n      Return New Integer() {a.[Select](Function(x, y) If(y Mod 2 = 0, x, 0)).Sum(), a.[Select](Function(x, y) If(y Mod 2 = 0, 0, x)).Sum()}\n  End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350523,"user_id":null,"body":"Public Module Kata\n  Public Function RowWeights(ByVal array As Integer()) As Integer()\n        Dim Team1 As Integer \n        Dim Team2 As Integer  \n        \n        For index = 0 To array.Length-1\n        If index mod 2 = 0 Then\n            Team1+=array(index)\n        Else\n            Team2+=array(index)\n        End If\n        Next index\n    \n    Return {Team1,Team2} \n  End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350524,"user_id":892,"body":"Public Module Kata\n  Public Function RowWeights(ByVal array As Integer()) As Integer()\n        dim res(1) as Integer \n      For counter as integer = 0 to array.getUpperBound(0)\n        if counter mod 2 = 0 then\n            res(0) = res(0) + array(counter)\n        else\n            res(1) = res(1) + array(counter)\n        end if\n        Next\n    return res\n  End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350525,"user_id":null,"body":"Public Module Kata\n  Public Function RowWeights(ByVal array As Integer()) As Integer()\n      \n      dim a,b, counter as integer\n      a=0\n      b=0\n      counter=0\n      \n      For Each ele In array\n          \n          counter=counter+1\n          if counter Mod 2 <> 0 then\n              a = a + ele\n          else\n              b = b + ele\n          end if\n          \n      Next \n      \n      return {a, b}\n  \n  End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350526,"user_id":null,"body":"Public Module Kata\n  Public Function RowWeights(ByVal array As Integer()) As Integer()\n      dim i as integer\n      Dim res(1) As Integer\n      i = 0\n      For index = 0 To array.count() - 1\n        res(i) += array(index)\n        if i = 0 \n            i = 1\n        else\n            i = 0\n         end if\n      next\n      return {res(0), res(1)}\n  End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350527,"user_id":null,"body":"Public Module Kata\n  Public Function RowWeights(ByVal array As Integer()) As Integer()\n      Dim teams = {0, 0}\n      Dim size = array.GetUpperBound(0)\n      If size Mod 2 = 0 Then\n          ReDim Preserve array(size + 1)\n      END If\n      size = array.GetUpperBound(0)\n      For i as Integer = 0 To size Step 2\n          teams(0) += array(i)\n          teams(1) += array(i + 1)\n      Next\n      return teams\n  End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350528,"user_id":null,"body":"Public Module Kata\n  Public Function RowWeights(ByVal array As Integer()) As Integer()\n        dim team1, team2 as integer\n        for i as integer = 0 to array.Length-1\n            Select case i mod 2\n                Case 0\n                    team1+=array(i)\n                Case else\n                    team2+=array(i)\n            end select\n        next\n      return {team1, team2}\n  End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350529,"user_id":null,"body":"Public Module Kata\n  Public Function RowWeights(ByVal array As Integer()) As Integer()\n    Dim t1 As Integer = 0\n    Dim t2 As Integer = 0\n    For i As Integer = 0 To array.Length - 1\n        If i Mod 2 = 0\n            t1 += array(i)\n        Else\n            t2 += array(i)\n        End If\n    Next\n    return {t1, t2}\n  End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350530,"user_id":null,"body":"Public Module Kata\n    Public Function RowWeights(ByVal array As Integer()) As Integer()\n        Dim n = array.length()\n        Dim sum1 = 0\n        Dim sum2 = 0\n        For i = 0 To n - 1\n            If (i mod 2 = 0) Then\n                sum1 = sum1 + array(i)\n            Else\n                sum2 = sum2 + array(i)\n            End If\n        Next\n        Return {sum1, sum2}\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5ae62fcf252e66d44d00008e":[{"id":350531,"user_id":645,"body":"Public Module Kata\n    Public Function ExpressionMatter(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer) As Integer\n        Return (New Integer() {\n            a * (b + c),\n            a * b * c,\n            a + b * c,\n            a + b + c,\n            (a + b) * c,\n            (a * b) + c\n        }).Max()\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350532,"user_id":null,"body":"Public Module Kata\n    Public Function ExpressionMatter(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer) As Integer\n        Dim results As New List(Of Integer)(\n            {\n                a + b + c,\n                a * b * c,\n                (a + b) * c,\n                a * (b + c)\n            })\n        Return results.Max\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350533,"user_id":null,"body":"Public Module Kata\n    Public Function ExpressionMatter(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer) As Integer\n        Dim vals As Integer() = {a + b + c, a * b * c, (a + b) * c, a * (b + c)}\n\n        Dim largest As Integer = Integer.MinValue\n        Dim smallest As Integer = Integer.MaxValue\n\n        For Each element As Integer In vals\n            largest = Math.Max(largest, element)\n            smallest = Math.Min(smallest, element)\n        Next\n        return largest\n    End Function\nEnd Module\n\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350534,"user_id":645,"body":"Public Module Kata\n    Public Function ExpressionMatter(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer) As Integer\n        Return (New Integer() {\n            a * (b + c),\n            a * b * c,\n            a + b * c,\n            a + b + c,\n            (a + b) * c,\n            (a * b) + c\n        }).Max()\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350535,"user_id":null,"body":"Public Module Kata\n    Public Function ExpressionMatter(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer) As Integer\n        \n        dim sum as integer = 0\n        dim a1 as boolean 'true -> a+b     false -> a*b\n        dim a2 as boolean 'true -> b+c     false -> b*c\n         \n        if a = 1 then a1 = true\n        if c = 1 then a2 = true\n        if b = 1 then \n            if a < c then a1 = true else a2 = true\n        end if\n\n        sum = b\n        if a1 = true then sum = a + sum\n        if a2 = true then sum = sum + c\n        if a1 = false then sum = sum * a\n        if a2 = false then sum = sum * c\n\n        return  sum\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350536,"user_id":null,"body":"Public Module Kata\n    Public Function GetMax(ByVal a As Integer, ByVal b As Integer) As Integer\n        If a<b Then\n            Return b\n        Else\n            Return a\n        End If\n    End Function\n    \n    Public Function ExpressionMatter(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer) As Integer\n        Dim var1, var2, var3, var4, var5, var6, buffer As Integer\n        \n        var1 = a + b + c\n        var2 = a * b * c\n        var3 = a + b * c\n        var4 = a * b + c\n        var5 = (a + b) * c\n        var6 = a * (b + c)\n        \n        buffer = GetMax(var1, var2)\n        buffer = GetMax(buffer, var3)\n        buffer = GetMax(buffer, var4)\n        buffer = GetMax(buffer, var5)\n        buffer = GetMax(buffer, var6)\n        \n        Return buffer\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350537,"user_id":null,"body":"Public Module Kata\n    Public Function ExpressionMatter(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer) As Integer\n        return Math.Max((a+b+c),Math.Max((a*b*c),Math.Max((a*(b+c)),(c*(a+b)))))\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350538,"user_id":null,"body":"Public Module Kata\n    Public Function ExpressionMatter(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer) As Integer\n        Dim Value As Integer = 0        'There's no need to check a+b*c or a*b+c because (a+b)*c and a*(b+c) is always more. That's because the numbers are always positive.\n        If Value < a + b + c Then       'We could say by skipping those two iterations the speed of the code is a bit better'\n            Value = a + b + c\n        End If\n        If Value < a * b * c Then\n            Value = a * b * c\n        End If\n        If Value < (a + b) * c Then\n            Value = (a + b) * c\n        End If\n        If Value < a * (b + c) Then\n            Value = a * (b + c)\n        End If\n        Return Value\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350539,"user_id":null,"body":"Public Module Kata\n    Public Function ExpressionMatter(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer) As Integer\n        ' your code here\n        \n        dim answers(4) as long, answer as long, i as long\n        \n        answers(0) = a * (b + c)\n        answers(1) = a * b * c\n        answers(2) = a + b * c\n        answers(3) = (a + b) * c\n        answers(4) = a + b + c\n        \n        for i = 0 to 4\n            if answers(i) > answer then answer = answers(i)\n        next i\n        \n        ExpressionMatter = answer\n        \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350540,"user_id":null,"body":"Public Module Kata\n    Public Function ExpressionMatter(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer) As Integer\n        dim max as integer = a + b + c\n        \n        if ( (a + b) * c > max) then\n            max = (a + b) * c\n        end if\n        \n        \n        if ( a * (b + c) > max) then\n            max = a * (b + c)\n        end if\n        \n          if ( a * b * c > max) then\n            max = a * b * c\n        end if \n        \n        return max\n        \n        \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5b06c990908b7eea73000069":[{"id":350541,"user_id":492,"body":"Imports System\nImports System.Numerics\n\nPublic Module FS    \n    \n    Public Function F(ByVal z As Complex, ByVal eps As Double) As Integer\n        If Complex.Abs(z) >= 1.0 Then Return -1\n        Return CInt(Math.Floor(((Math.Log(eps) \/ Math.Log(Complex.Abs(z))))))\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350542,"user_id":53,"body":"Imports System\nImports System.Numerics\n\nPublic Class FS\n    Public Shared Function F(ByVal z As Complex, ByVal eps As Double) As Integer\n        Dim ans = Math.Log(eps) \/ Math.Log(Hypot(z.Real, z.Imaginary))\n        Return If(ans < 0, -1, CInt(Math.Floor(ans)))\n    End Function\n\n    Private Shared Function Hypot(ByVal a As Double, ByVal b As Double) As Double\n        Return Math.Sqrt(a * a + b * b)\n    End Function\nEnd Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350543,"user_id":null,"body":"Imports System\nImports System.Numerics\n\nPublic Module FS    \n    \n    Public Function F(ByVal z As Complex, ByVal eps As Double) As Integer\n        Dim m = z.Magnitude\n        If m >= 1 Then Return -1\n        Return Math.Log(eps) \/ Math.Log(m)\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350544,"user_id":168,"body":"Imports System\nImports System.Numerics\n\nPublic Module FS    \n    \n    Public Function F(ByVal z As Complex, ByVal eps As Double) As Integer\n        dim a = Complex.Abs(z)\n        if a >= 1 then\n            return -1\n        else\n            return Math.Log(eps) \/ Math.Log(a)\n        end if\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5b0c0ec907756ffcff00006e":[{"id":350545,"user_id":50,"body":"Imports System\n\nPublic Module Quadratiq\n\t\n    Public Function Quadratic(ByVal a As Double, ByVal b As Double, ByVal c As Double) As Double\n        return -c\/b\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350546,"user_id":527,"body":"Public Module Quadratiq\n\t\n    Public Function Quadratic(ByVal a As Double, ByVal b As Double, ByVal c As Double) As Double\n        Quadratic = -c \/ b\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350547,"user_id":492,"body":"Imports System\n\nPublic Module Quadratiq\n\t\n    Public Function Quadratic(ByVal a As Double, ByVal b As Double, ByVal c As Double) As Double\n        Return -c \/ b\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5b1cd19fcd206af728000056":[{"id":350548,"user_id":53,"body":"Imports System\n\nPublic Class S\n    Public Shared Function Solve(ByVal m As Double) As Double\n        Return (2 * m + 1 - Math.Sqrt(4 * m + 1)) \/ (2 * m)\n    End Function\nEnd Class","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350549,"user_id":null,"body":"Public Module S    \n    \n    Public Function Solve(ByVal m As Double) As Double\n        Return (2 * m + 1 - Math.Sqrt (4 * m + 1)) \/ (2 * m)\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350550,"user_id":null,"body":"Public Module S    \n    \n    Public Function Solve(ByVal s As Double) As Double\n        return (1.0 - Math.Sqrt(4.0 * s + 1.0)) \/ (2.0 * s) + 1.0\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350551,"user_id":null,"body":"Public Module S    \n    \n    Public Function Solve(ByVal m As Double) As Double\n        'let         m = x + 2x^2 + 3x^3 + ...\n        'then       xm =      x^2 + 2x^3 + ...\n        'and so (1-x)m = x +  x^2 +  x^3 + ...  = x\/(1-x) [sum of GP]\n        'solve m(1-x) = x\/(1-x)\n        dim a, b, c as double\n        a = m\n        b = -(2*m+1)\n        c = m\n        return (-b-math.sqrt(b*b-4*a*c))\/(2*a)\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350552,"user_id":null,"body":"Public Module S    \n    \n    Public Function Solve(ByVal m As Double) As Double\n        Return 1 + (1 - Math.Sqrt(4*m + 1))\/(2*m)\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350553,"user_id":null,"body":"Public Module S    \n    \n     Public Function Un(ByVal m As Double) As Double\n\n        Dim Delta As Double = 0\n        Dim ret As Double = m\n        Dim Pow As Double = m\n        Dim Index As Integer = 2\n        Do\n            Pow *= m\n            Delta = Index * Pow\n            ret += Delta\n            Index += 1\n        Loop While Delta > 1.0E-100\n        ' your code\n        Return ret\n    End Function\n\n    Public Function LookSolution(ByVal n As Double, min As Double, max As Double)\n\n        If (max - min < 0.000000000001) Then\n           Return (min + max) \/ 2\n        Else\n            Dim mid As Double = (max + min) \/ 2\n            Dim v = Un(mid)\n            If v = n Then\n                Return mid\n            ElseIf v > n Then\n                Return LookSolution(n, min, mid)\n            Else\n                Return LookSolution(n, mid, max)\n            End If\n        End If\n\n\n\n\n    End Function\n\n    Public Function Solve(n)\n        Return LookSolution(n, 0.001, 0.999)\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350554,"user_id":527,"body":"Public Module S    \n    \n    Public Function Solve(ByVal m As Double) As Double\n        Return 1 - (Math.Sqrt(m + 0.25) - 0.5) \/ m\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350555,"user_id":492,"body":"Public Module S    \n    \n    Public Function Solve(ByVal m As Double) As Double\n        Dim s As Double = Math.Sqrt(4 * m + 1)\n        Return (2 * m + 1 - s) \/ (2 * m)\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5b40b666dfb4291ad9000049":[{"id":350556,"user_id":53,"body":"Imports System\nImports System.Math\n\nPublic Module Walker\n    Private Function Dcos(ByVal n As Integer) As Double\n        Return Cos(n * PI \/ 180)\n    End Function\n\n    Private Function Dsin(ByVal n As Integer) As Double\n        Return Sin(n * PI \/ 180)\n    End Function\n\n    Private Function Hypot(ByVal n As Double, ByVal m As Double) As Double\n        Return Sqrt(Pow(n, 2) + Pow(m, 2))\n    End Function\n\n    Public Function Solve(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer, ByVal alpha As Integer, ByVal beta As Integer, ByVal gamma As Integer) As Integer()\n        Dim x = a * Dcos(alpha) - b * Dsin(beta) - c * Dcos(gamma)\n        Dim y = a * Dsin(alpha) + b * Dcos(beta) - c * Dsin(gamma)\n        Dim t = Atan2(y, x) * 180 \/ PI\n        Return New Integer() {CInt(Round(Hypot(y, x))), CInt(Math.Floor(t)), CInt(Math.Floor(t * 60)) Mod 60, CInt(Math.Floor(t * 3600)) Mod 60}\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350557,"user_id":492,"body":"Public Module Walker    \n    \n    Public Function Solve(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer, ByVal alpha As Integer, ByVal beta As Integer, ByVal gamma As Integer) As Integer()\n        Dim aa As Double = alpha * Math.PI \/ 180\n        Dim bb As Double = beta * Math.PI \/ 180\n        Dim cc As Double = gamma * Math.PI \/ 180\n        Dim x As Double = a * Math.Cos(aa) - b * Math.Sin(bb) - c * Math.Cos(cc)\n        Dim y As Double = a * Math.Sin(aa) + b * Math.Cos(bb) - c * Math.Sin(cc)\n        Dim r As Double = Math.Sqrt(x * x + y * y)\n        Dim theta As Double = Math.Acos(x \/ r) * 180 * 3600 \/ Math.PI\n        Dim d As Integer = CInt(Math.Floor(theta \/ 3600))\n        Dim mm As Double = theta Mod 3600\n        Dim m As Integer = CInt(Math.Floor(mm \/ 60))\n        Dim s As Double = mm Mod 60\n        Return New Integer() {CInt(Math.Round(r)), d, m, CInt(Math.Floor(s))}\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350558,"user_id":null,"body":"Public Module Walker    \n    \n    Public Function Solve(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer, ByVal alpha As Integer, ByVal beta As Integer, ByVal gamma As Integer) As Integer()\n        Dim pi, alpha_rad, beta_rad, gamma_rad, x, y, r As Double\n        Dim theta, d, m, s As Integer\n        pi = Math.Pi\n        alpha_rad = alpha * pi \/ 180\n        beta_rad = beta * pi \/ 180\n        gamma_rad = gamma * pi \/ 180\n        x = a * Math.Cos(alpha_rad) - b * Math.Sin(beta_rad) - c * Math.Cos(gamma_rad)\n        y = a * Math.Sin(alpha_rad) + b * Math.Cos(beta_rad) - c * Math.Sin(gamma_rad)\n        r = Math.Sqrt(x * x + y * y)\n        theta = Math.Floor(Math.Acos(x \/ r) * 180 * 3600 \/ pi)\n        m = theta Mod 3600\n        d = theta \\ 3600\n        s = m Mod 60\n        m = m \\ 60\n        Return {Math.Round(r), d, m, s}\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350559,"user_id":null,"body":"Public Module Walker    \n    \n    Public Function Solve(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer, ByVal alpha As Integer, ByVal beta As Integer, ByVal gamma As Integer) As Integer()\n        Const PI As Decimal = Math.PI ' 3.1415926535897931\n\n        Dim alphaRad As Decimal = alpha * PI \/ 180\n        Dim betaRad As Decimal = beta * PI \/ 180\n        Dim gammaRad As Decimal = gamma * PI \/ 180\n        Dim d As Decimal = Math.Sqrt(c ^ 2 + b ^ 2 - 2 * b * c * Math.Cos(90 * PI \/ 180 + betaRad - gammaRad)) ' d is CA\n\n        Dim angleBAC As Decimal = Math.Acos((b ^ 2 + d ^ 2 - c ^ 2) \/ (2 * b * d))\n        Dim CO As Decimal = Math.Sqrt(a ^ 2 + d ^ 2 - 2 * a * d * Math.Cos(90 * PI \/ 180 - betaRad + alphaRad - angleBAC))\n        Dim angleCOA As Decimal = Math.Acos((CO ^ 2 + a ^ 2 - d ^ 2) \/ (2 * CO * a))\n        Dim angletOC As Decimal = alphaRad + angleCOA\n        Dim angletOCgrad As Decimal = angletOC * 180 \/ PI\n\n        Dim arr() As Integer = {0, 0, 0, 0}\n\n        arr(0) = Math.Round(CO) ' triangle side\n        arr(1) = Math.Floor(angletOCgrad) ' angle in degrees\n        arr(2) = Math.Floor((angletOCgrad - arr(1)) * 60) ' angle in minutes\n        arr(3) = Math.Floor((angletOCgrad - arr(1) - arr(2) \/ 60) * 3600) ' angle in seconds\n\n        Return arr\n        \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350560,"user_id":null,"body":"Imports System.Math\nPublic Module Walker    \n    \n   Public Function vang(v As Double) As Double\n        Return Math.PI * v \/ 180.0\n    End Function\n  Public Function Solve(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer, ByVal alpha As Integer, ByVal beta As Integer, ByVal gamma As Integer) As Integer()\n        ' your code\n        Dim aa, ab, ac As Double\n        aa = vang(alpha)\n        ab = vang(beta)\n        ac = vang(gamma)\n\n\n        Dim ca, co, aco As Double\n        co = Cos(ab) * b + Sin(aa) * a - (Sin(ac) * c)\n        ca = Cos(ac) * c + Sin(ab) * b - (Cos(aa) * a)\n        Dim lco As Integer = Sqrt(co ^ 2 + ca ^ 2)\n        'Dim cx, cy As Double\n        'cx = Cos(ac) * c + Sin(ab) * b - (Cos(aa) * a)\n        'cy = Cos(ab) * b + Sin(aa) * a - (Sin(ac) * c)\n\n        aco = 180 - (Atan(co \/ ca) * 180 \/ Math.PI)\n        Dim degree, min, sec As Integer\n        degree = Math.floor(    aco)\n        min = Math.floor(60 * (aco - degree))\n        sec = Math.Floor((60 * (aco - degree) - min) * 60)\n        Dim ri() As Integer = {lco, degree, min, sec}\n        Return ri\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350561,"user_id":null,"body":"\nPublic Module Walker    \n    \n    Public Function Solve(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer, ByVal alpha As Integer, ByVal beta As Integer, ByVal gamma As Integer) As Integer()\n        Dim x As Double, y As Double, delta As Double, min As Double, sec As Double, distance as Integer\n        Dim oneEighty = 180\n        Dim radian = 3.14159265358979323846 \/ oneEighty\n        x += a * Math.Cos(alpha * radian) - (b * Math.Sin(beta * radian)) - (c * Math.Cos(gamma * radian))\n        y += a * Math.Sin(alpha * radian) + (b * Math.Cos(beta * radian)) - (c * Math.Sin(gamma * radian))\n        delta = oneEighty - Math.Atan2(Math.Abs(y), Math.Abs(x)) \/ radian\n        min = (delta - Math.Truncate(delta)) * (oneEighty\/3)\n        sec = (min - Math.Truncate(min)) * (oneEighty\/3)\n        distance = Math.Round(Math.Sqrt(Math.Pow(x, 2) + Math.Pow(y, 2)))\n        Dim results() = {distance, CInt(Math.Truncate(delta)), CInt(Math.Truncate(min)), CInt(Math.Truncate(sec))}        \n        Return results\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350562,"user_id":null,"body":"Public Module Walker    \n    \n    Public Function Solve(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer, ByVal alpha As Integer, ByVal beta As Integer, ByVal gamma As Integer) As Integer()\n          Dim ra As Double = degToRad(alpha)\n        Dim rb As Double = degToRad(beta)\n        Dim rc As Double = degToRad(gamma)\n        Dim x As Double = Math.cos(ra) * a - Math.sin(rb) * b - Math.cos(rc) * c\n        Dim y As Double = Math.sin(ra) * a + Math.cos(rb) * b - Math.sin(rc) * c\n        Dim length As Integer = CInt(Math.round(Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2))))\n        Dim d As Double = Math.atan2(y, x) * (180 \/ math.pi)\n        Dim dt As Integer = CInt(Math.Truncate(d))\n        Dim m As Double = (d - dt) * 60\n        Dim mt As Integer = CInt(Math.Truncate(m))\n        Dim s As Double = (m - mt) * 60\n        Dim st As Integer = CInt(Math.Truncate(s))\n\n        Return New Integer() {length, dt, mt, st}\n    End Function\n    \n    private function degToRad(x as double) as double\n        return x * (Math.pi\/180)\n    end function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350563,"user_id":null,"body":"imports system\nimports system.numerics\n\nPublic Module Walker    \n    \n    Public Function Solve(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer, ByVal alpha As Integer, ByVal beta As Integer, ByVal gamma As Integer) As Integer()\n        ' your code\n        Dim ret(3) As Integer\n        Dim pi As Double = 3.1415926535897931\n        dim dalpha as double=  (alpha) \/ 180.0 * pi\n        dim dBeta as double = (90.0+beta) \/ 180.0 * pi\n        dim dgamma as double  = (180.0+gamma) \/ 180.0 * pi\n\n        Dim Ac As New Complex(a * Math.Cos(dalpha), a * Math.Sin(dalpha))\n        Dim Bc As New Complex(b * Math.Cos(dbeta), b * Math.Sin(dbeta))\n        Dim Cc As New Complex(c * Math.Cos(dgamma), c * Math.Sin(dgamma))\n        \n        \n        Dim Sol As Complex = Ac + Bc + Cc\n        dim Angle as double = Sol.Phase*180\/pi\n        ret(0) = CType(Sol.Magnitude, Integer)\n        ret(1) = math.floor(Angle)\n        ret(2) = math.floor((Angle-Ret(1))*60)\n        ret(3) = math.floor(((Angle-Ret(1))*60-Ret(2))*60)\n        \n\n        Return ret\n\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5ca3ae9bb7de3a0025c5c740":[{"id":350564,"user_id":492,"body":"Public Module PointView    \n    \n    Public Function Point(ByVal a As Integer, ByVal b As Integer) As Func(Of Boolean, Integer)\n        Return Function(x)\n\t\t\tIf x = True Then\n\t\t\t   Return a\n\t\t\tElse\n\t\t\t   Return b\n\t\t\tEnd If\n\t\tEnd Function\n    End Function\n\n    Public Function Fst(ByVal pt As Func(Of Boolean, Integer)) As Integer\n        Return pt(True)\n    End Function\n\n    Public Function Snd(ByVal pt As Func(Of Boolean, Integer)) As Integer\n        Return pt(False)\n    End Function\n\n    Public Function SqrDist(ByVal pt1 As Func(Of Boolean, Integer), ByVal pt2 As Func(Of Boolean, Integer)) As Integer\n        Dim d1 As Integer = Fst(pt1) - Fst(pt2)\n        Dim d2 As Integer = Snd(pt1) - Snd(pt2)\n        Return d1 * d1 + d2 * d2\n    End Function\n\n    Public Function Line(ByVal pt1 As Func(Of Boolean, Integer), ByVal pt2 As Func(Of Boolean, Integer)) As Integer()\n        Dim x1 As Integer = Fst(pt1)\n        Dim y1 As Integer = Snd(pt1)\n        Dim x2 As Integer = Fst(pt2)\n        Dim y2 As Integer = Snd(pt2)\n        Dim dx As Integer = x2 - x1\n        Dim dy As Integer = y2 - y1\n        Return New Integer() {-dy, dx, dy * x1 - dx * y1}\n    End Function\n    \nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350565,"user_id":null,"body":"Public Module PointView    \n    \n    Public Function Point(ByVal a As Integer, ByVal b As Integer) As Func(Of Integer())\n        ' your code\n        Dim ptFnc = Function() As Integer()\n                        Dim pt = New Integer() {a,b}\n                        Return pt\n                    End Function\n        Return ptFnc\n    End Function\n\n    Public Function Fst(ByVal pt As Func(Of Integer())) As Integer\n        ' your code\n        Dim res As Integer() = pt.Invoke\n        Return res(0)\n    End Function\n\n    Public Function Snd(ByVal pt As Func(Of Integer())) As Integer\n        ' your code\n        Dim res As Integer() = pt.Invoke\n        Return res(1)\n    End Function\n\n    Public Function SqrDist(ByVal pt1 As Func(Of Integer()), ByVal pt2 As Func(Of Integer())) As Integer\n        ' your code\n        Dim p1 As Integer() = pt1.Invoke\n        Dim p2 As Integer() = pt2.Invoke\n        \n        Dim res As Integer = (p1(0)-p2(0))^2 + (p1(1)-p2(1))^2        \n        Return res        \n    End Function\n\n    Public Function Line(ByVal pt1 As Func(Of Integer()), ByVal pt2 As Func(Of Integer())) As Integer()\n        ' your code\n        Dim p1 As Integer() = pt1.Invoke\n        Dim p2 As Integer() = pt2.Invoke\n        \n        Dim l As Integer = p1(1)-p2(1)\n        Dim m As Integer = p2(0)-p1(0)\n        Dim n As Integer = p1(0)*p2(1) - p1(1)*p2(0)\n        \n        Dim res = New Integer() {l,m,n}       \n        Return res \n    End Function\n    \nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5ce399e0047a45001c853c2b":[{"id":350566,"user_id":492,"body":"Public Module Parts\n    Public Function PartsSums(ByVal ls As Integer()) As Integer()\n        Dim count As Integer = ls.Length\n        Dim result As Integer() = New Integer(count) {}\n        For i As Integer = count - 1 To 0 Step -1\n            result(i) = result(i + 1) + ls(i)\n        Next\n        Return result\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350567,"user_id":null,"body":"Public Module Parts\n\n    Public Function PartsSums(ByVal ls As Integer()) As Integer()\n        Dim total = 0\n        Dim l = ls.Length()\n        Dim temp = New List(Of Integer)\n        temp.Add(0)\n        For i = l - 1 To 0 Step -1\n            total += ls(i)\n            temp.Add(total)\n        Next\n        Dim answer = temp.ToArray()\n        Array.Reverse(answer)\n        Return answer\n    End Function\n    \nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350568,"user_id":null,"body":"Public Module Parts\n\n    Public Function PartsSums(ByVal ls As Integer()) As Integer()\n        \n        Dim parts(ls.Length) As Integer\n        Dim sum As Integer\n\n        parts(parts.Length - 1) = 0\n\n        For i = ls.Length - 1 To 0 Step -1\n            sum += ls(i)\n            parts(i) = sum\n        Next i\n\n        Return parts\n\n    End Function\n\nEnd Module\n    ","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350569,"user_id":null,"body":"Public Module Parts\n        \n    Public Function PartsSums(ByVal ls As Integer()) As Integer()\n      redim preserve ls(ls.length)\n      ls(ls.length-1)=0\n      for i = ls.length-2 to 0 step - 1\n        ls(i)=ls(i+1)+ls(i)\n      next\n      PartsSums=ls\n    End Function\n    \nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350570,"user_id":null,"body":"Public Module Parts\n\n    Public Function PartsSums(ByVal ls As Integer()) As Integer()\n        ' your code\n        Dim lst(ls.Length) As Integer\n        Dim sum As Integer = ls.Sum()\n        lst(0) = sum\n        For l = 1 To ls.Length\n            sum -= ls(l - 1)\n            lst(l) = sum\n        Next\n        Return lst\n    End Function\n    \nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350571,"user_id":null,"body":"Public Module Parts\n\n    Public Function PartsSums(ByVal ls As Integer()) As Integer()\n        Dim ListOfSums(ls.Count) As Integer\n        \n        If ls.Count = 0 Then\n            ListOfSums(0) = 0\n            Return ListOfSums\n        Else\n            ListOfSums(ListOfSums.Count - 1) = 0\n            ListOfSums(ls.Count - 1) = ls(ls.Count - 1)\n        End If\n\n        For i = ls.Count - 2 To 0 Step -1\n            ListOfSums(i) = ls(i) + ListOfSums(i + 1)\n        Next\n\n    Return ListOfSums\n    End Function\n    \nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350572,"user_id":null,"body":"Public Module Parts\n\n     Public Function PartsSums(ByVal ls As Integer()) As Integer()\n\n        Dim sum As Integer = ls.Sum()\n        Dim sums As New List(Of Integer)\n\n        sums.Add(sum)\n        For i As Integer = 0 To ls.Length - 1 Step 1\n\n            sum -= ls(i)\n            sums.Add(sum)\n\n        Next\n\n        Return sums.ToArray()\n    End Function\n    \nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350573,"user_id":null,"body":"Public Module Parts\n\n    Public Function PartsSums(ByVal ls As Integer()) As Integer()\n        ' your code\n        dim sums(ls.length) as integer\n        \n        for i = ls.length - 1 to 0 step -1\n            sums(i) = sums(i + 1) + ls(i)\n        next\n    \n        return(sums)\n        \n    End Function\n    \nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350574,"user_id":null,"body":"Imports System\nImports System.Linq\n\nPublic Module Parts\n\n    Public Function PartsSums(ByVal ls As Integer()) As Integer()\n        Dim sum As Integer = ls.Sum()\n        Dim result(ls.Length) As Integer\n        result(0) = sum\n        For index = 1 To ls.Length() \n            sum -= ls(index - 1)            \n            result(index) = sum\n        Next\n        Return result\n    End Function\n    \nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350575,"user_id":null,"body":"Public Module Parts\n    Public Function PartsSums(ByVal ls As Integer()) As Integer()\n        Dim currentSum = ls.Sum()\n        Dim sums = { currentSum }.Concat(ls).ToArray()\n        \n        For x = 0 To ls.Length - 1\n            currentSum -= ls(x)\n            sums(x + 1) = currentSum\n        Next\n    \n        return sums\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5d50e3914861a500121e1958":[{"id":350576,"user_id":645,"body":"Imports System\nImports System.Linq\n\nPublic Module Kata\n    Public Function AddLetters(ByVal letters As Char()) As Char\n        Return \"zabcdefghijklmnopqrstuvwxy\"(letters.Sum(Function(x) Microsoft.VisualBasic.AscW(x) - 96) Mod 26)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350577,"user_id":null,"body":"Public Module Kata\n    Public Function AddLetters(ByVal letters As Char()) As Char\n        Dim alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        Dim total = 25\n        For Each c in letters\n            total = total + alphabet.IndexOf(c) + 1\n        Next\n        Return alphabet(total mod 26)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350578,"user_id":null,"body":"Imports System\n\nPublic Module Kata\n    Public Function AddLetters(ByVal letters As Char()) As Char\n        Return \"zabcdefghijklmnopqrstuvwxy\"(letters.Sum(Function(x) Microsoft.VisualBasic.AscW(x) - 96) Mod 26)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350579,"user_id":null,"body":"Imports System\n\nPublic Module Kata\n    Public Function AddLetters(ByVal letters As Char()) As Char\n        \n        Dim intFinalLetter As Integer\n        \n        If letters.Length = 0 Then Return \"z\"\n        \n        intFinalLetter = (Enumerable.Range(0, letters.Length).Sum(Function(x) Convert.ToInt32(letters(x)) - 96) Mod 26)\n                \n        Return If(intFinalLetter = 0, \"z\", Convert.ToChar(intFinalLetter + 96))\n        \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350580,"user_id":null,"body":"Imports System\n\nPublic Module Kata\n    Public Function AddLetters(ByVal letters As Char()) As Char\n\n        If letters.Length = 0 Then \n            AddLetters = \"z\"    \n            Exit Function\n        End If\n            \n        If letters.Length = 1 And letters(0) = \"z\" Then \n            AddLetters = \"z\"    \n            Exit Function\n        End If\n       \n        Dim cFinal As Char\n        cFinal = Convert.ToChar(((Enumerable.Range(0, letters.Length).Sum(Function(x) Convert.ToInt32(letters(x)) - 96)) Mod 26) + 96)\n\n        If cFinal = \"`\" Then\n           Return \"z\"\n        Else\n           Return cFinal\n        End If                \n\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350581,"user_id":null,"body":"Imports System\n\nPublic Module Kata\n    Public Function AddLetters(ByVal letters As Char()) As Char\n        ' your code here\n        dim alphabet as String = \"abcdefghijklmnopqrstuvwxyz\"\n        dim sum as integer = 0\n        \n        for each c as char in letters\n            dim i as integer = alphabet.indexOf(c) + 1\n            sum += i\n            if sum > 26 then\n                sum -= 26\n            end if\n        next\n    \n        dim arr() as Char = alphabet.ToCharArray()\n    \n        if sum = 0 then\n            return \"z\"C\n        else \n            return arr(sum - 1)\n        end if\n        \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350582,"user_id":null,"body":"Imports Microsoft.VisualBasic\n\nPublic Module Kata\n    Public Function AddLetters(ByVal letters As Char()) As Char\n        Dim value As Integer = 0\n        \n        For Each letter As Char In letters\n            value += AscW(letter) - 96\n        Next\n    \n        value = value Mod 26\n        Return If(value=0, \"z\"C, ChrW(value + 96))\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350583,"user_id":null,"body":"Imports System\n\nPublic Module Kata\n    Public Function AddLetters(ByVal letters As Char()) As Char\n        ' your code here\n        dim res as integer\n        if letters.length = 0 then return \"z\"\n        for each letter in letters\n            res += AscW(letter) - 96\n            if res > 26 then res -= 26\n        next\n        return ChrW(res + 96)\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350584,"user_id":null,"body":"Option Explicit On\n\nImports System.Text\n\nPublic Module Kata\n\n    Const ASCII_OFFSET As Integer = 96\n\n    Public Function AddLetters(ByVal letters As Char()) As Char\n\n        Dim totalNumber As Integer\n\n        For t As Integer = 0 To letters.Length - 1\n            totalNumber += Asc(letters(t)) - ASCII_OFFSET\n        Next t\n\n        Do While totalNumber > 26\n            totalNumber -= 26\n        Loop\n\n        If totalNumber > 26 Then totalNumber -= 26\n        If totalNumber < 1 Then totalNumber = 26\n\n        Return Chr(totalNumber + ASCII_OFFSET)\n\n    End Function\n\n    Private Function Asc(letter As Char) As Integer\n        Return Convert.ToInt32(ASCIIEncoding.UTF8.GetBytes(letter)(0))\n    End Function\n\n    Private Function Chr(asciiCode As Integer) As Char\n        Dim byteArray(0) As Byte\n        byteArray(0) = Convert.ToByte(asciiCode)\n        Return ASCIIEncoding.UTF8.GetString(byteArray)\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350585,"user_id":null,"body":"Imports System\n\nPublic Module Kata\n    Public Function AddLetters(ByVal letters As Char()) As Char\n        Dim sum as Integer = 0\n        For Each c as Char in letters\n            sum += AscW(c) - 96\n        Next \n        Return ChrW(If(sum Mod 26 = 0, AscW(\"z\"c), 96 + sum Mod 26))\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5efae11e2d12df00331f91a6":[{"id":350586,"user_id":null,"body":"Imports System\nImports System.Text\nImports System.Security.Cryptography\n\nPublic Module CodeWars\n    \n    Public Function crack(ByVal hash As String)\n        Dim pass As String\n\n        For i = 0 To 99999\n            pass = Convert.ToString(i)\n            pass = New String(\"0\", 5 - pass.Length) & pass\n\n            If ConvertToMD5(pass) = hash Then\n                Return pass\n            End If\n        Next i\n    \n        Return \"\"\n    End Function\n\n    Private Function ConvertToMD5(retVal As String) As String\n        Using MD5 = System.Security.Cryptography.MD5.Create()\n            Return (BitConverter.ToString(MD5.ComputeHash(Encoding.Default.GetBytes(retVal))).Replace(\"-\", String.Empty)).ToLower()\n        End Using\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350587,"user_id":null,"body":"Imports System.Security.Cryptography\nImports System.Text\n\n\nPublic Module CodeWars\n    Public Function crack(ByVal hash As String) as string\n        dim i as integer\n        dim str as string = \"\"\n        \n        for i = 1 to 99999\n            str = \"00000\" & cstr(i)\n            str = str.substring(str.Length - 5, 5)\n            \n        \n            if gethash(str).toupper = hash.toupper then exit for\n        next\n        \n        Return str\n    End Function\n    \n     Function GetHash(theInput As String) As String\n\n    Using hasher As MD5 = MD5.Create()    ' create hash object\n\n        ' Convert to byte array and get hash\n        Dim dbytes As Byte() = \n             hasher.ComputeHash(Encoding.UTF8.GetBytes(theInput))\n\n        ' sb to create string from bytes\n        Dim sBuilder As New StringBuilder()\n\n        ' convert byte data to hex string\n        For n As Integer = 0 To dbytes.Length - 1\n            sBuilder.Append(dbytes(n).ToString(\"X2\"))\n        Next n\n\n        Return sBuilder.ToString()\n    End Using\n\nEnd Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350588,"user_id":null,"body":"Imports System.Text\n\nPublic Module Codewars\n    Public Function crack(ByVal hash As String)\n\n        Dim hashBack As String, pin As String\n\n        For t As Integer = 0 To 99999\n\n            pin = \"0000\" + t.ToString()\n            pin = pin.Substring(pin.Length - 5)\n            hashBack = GetHash(pin)\n            If hash = hashBack Then\n                Return pin\n            End If\n\n        Next\n\n        Return \"NOT FOUND\"\n\n    End Function\n\n    Private Function GetHash(strToHash As String) As String\n\n        Dim md5Obj As New System.Security.Cryptography.MD5CryptoServiceProvider\n        Dim bytesToHash() As Byte = System.Text.Encoding.ASCII.GetBytes(strToHash)\n\n        bytesToHash = md5Obj.ComputeHash(bytesToHash)\n        Dim strResult As New StringBuilder\n\n        For Each b As Byte In bytesToHash\n            strResult.Append(b.ToString(\"x2\"))\n        Next\n\n        Return strResult.ToString\n\n    End Function\n\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350589,"user_id":null,"body":"Imports System.Text\nImports System.Security.Cryptography\n\nPublic Module CodeWars\n    Public Function crack(ByVal hash As String)\n        For i As Integer = 0 To 99999\n            Dim fiveDigitPin As String = IntegerToFiveDigitPin(i)\n            Dim hashedFiveDigitPin As String = MD5Hash(fiveDigitPin)\n\n            If hashedFiveDigitPin.Equals(hash, StringComparison.InvariantCultureIgnoreCase) Then\n                Return fiveDigitPin\n            End If\n        Next\n        \n        Throw New Exception(\"Unable to crack pin - no five digit pin hashed to the input hash\")\n    End Function\n\n    Private Function IntegerToFiveDigitPin(ByVal i As Integer)\n        Return i.ToString(\"00000\")\n    End Function\n\n    Private Function MD5Hash(ByVal pin As String)\n        Dim data = MD5.Create().ComputeHash(Encoding.UTF8.GetBytes(pin))\n        Dim sb As New StringBuilder()\n        Array.ForEach(data, Function(x) sb.Append(x.ToString(\"X2\")))\n        Return sb.ToString()\n     End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350590,"user_id":76,"body":"Public Module CodeWars\n    Public Function crack(ByVal hash As String)\n        Dim md5 As New System.Security.Cryptography.MD5CryptoServiceProvider\n        For i As Integer = 0 To 99999\n            Dim pin As String = i.ToString().PadLeft(5, \"0\")\n            Dim bytes() As Byte = md5.ComputeHash(System.Text.Encoding.ASCII.GetBytes(pin)) \n            Dim pinHash As String = \"\"\n            For Each b As Byte In bytes\n                pinHash &= b.ToString(\"x2\")\n            Next\n            If pinHash = hash Then\n                Return pin\n            End If\n        Next\n        Return \"\"\n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350591,"user_id":513,"body":"Imports System.Security.Cryptography\nImports System.Text\n\n\nPublic Module CodeWars\n    Public Function crack(ByVal hash as String)\n        dim i as integer = 0\n        while (i < 100000)\n            dim test as String = i.ToString(\"00000\")\n            dim myhash as String\n            Using hasher As MD5 = MD5.Create()\n                Dim dbytes As Byte() = \n                     hasher.ComputeHash(Encoding.UTF8.GetBytes(test))\n                Dim sBuilder As New StringBuilder()\n                For n As Integer = 0 To dbytes.Length - 1\n                    sBuilder.Append(dbytes(n).ToString(\"X2\"))\n                Next n\n        \n                myhash = sBuilder.ToString().ToLower()\n            End Using\n            if hash = myhash\n                Return test\n            End If\n            i += 1\n        End While\n        return \"\"   \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"5f0ed36164f2bc00283aed07":[{"id":350592,"user_id":null,"body":"Public Module CodeWars\n    \n    Public Function OverTheRoad(ByVal address as Long, ByVal n as Long)\n        Return n * 2 + 1 - address\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350593,"user_id":null,"body":"Public Module CodeWars\n    \n    Public Function OverTheRoad(ByVal address as Long, ByVal n as Long)\n        \n        ' Good luck\n        Return n * 2 + 1 - address\n        \n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350594,"user_id":null,"body":"Public Module CodeWars\n    Public Function OverTheRoad(ByVal address as Long, ByVal n as Long)\n        If address Mod 2 <> 0 Then\n            Return (n + 1 - (address + 1) \/ 2) * 2\n        Else\n            Return (n + 1 - address \/ 2) * 2 - 1\n        End If \n    End Function\nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350595,"user_id":null,"body":"Public Module CodeWars\n    \n    Public Function OverTheRoad(ByVal address as Long, ByVal n as Long)\n        Return (n * 2) - (address - 1)\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350596,"user_id":null,"body":"Public Module CodeWars\n    \n    Public Function OverTheRoad(ByVal address as Long, ByVal n as Long)\n        Return 2 * n - address + 1\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350597,"user_id":null,"body":"Public Module CodeWars\n    \n    Public Function OverTheRoad(ByVal address as Long, ByVal n as Long)\n        return (2*n+1)-address\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350598,"user_id":null,"body":"Public Module CodeWars\n    \n    Public Function OverTheRoad(ByVal address as Long, ByVal n as Long)\n        overtheroad = n*2 - (address\\2)*2+(address+1) mod 2\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350599,"user_id":null,"body":"Public Module CodeWars\n    \n    Public Function OverTheRoad(ByVal address as Long, ByVal n as Long)\n        OverTheRoad = 1+((n*2)-address)\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350600,"user_id":null,"body":"Public Module CodeWars\n    \n    Public Function OverTheRoad(ByVal address as Long, ByVal n as Long)\n        \n            OverTheRoad = (n * 2) - address + 1\n        \n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350601,"user_id":null,"body":"Public Module CodeWars\n    \n    Public Function OverTheRoad(ByVal address as Long, ByVal n as Long)\n        If address Mod 2 = 0 Then\n            Dim RightSide As Long = (n - (address \/ 2)) + 1\n            Dim LeftSide As Long = (RightSide * 2) - 1\n            Return LeftSide\n        Else\n            Dim LeftSide As Long = Math.Ceiling(address \/ 2)\n            Dim RightSide As Long = ((n - LeftSide) + 1) * 2\n            Return RightSide\n        End If\n        Return 0\n    End Function\n    \nEnd Module","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}],"604287495a72ae00131685c7":[{"id":350602,"user_id":53,"body":"Imports System.Linq\n\nModule Kata\n    Function Doubleton(ByVal num As Integer) As Integer\n        While $\"{System.Threading.Interlocked.Increment(num)}\".Distinct().Count() <> 2\n        End While\n\n        Return num\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350603,"user_id":null,"body":"Module Kata\n    Function Doubleton(ByVal num As Integer) As Integer\n        While true\n            num = num + 1\n            If num.ToString().ToList.Distinct.Count = 2 Then return num\n        End While\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350604,"user_id":null,"body":"Module Kata\n\n    Function Doubleton(ByVal num As Integer) As Integer\n\n        Dim nextDoubleton As Integer\n\n        For testNumber = (num + 1) To 1000000\n\n            Dim x As String = testNumber\n\n            Dim array_testNumber() As Char = x.ToCharArray\n\n            Dim uniqueNumbers = array_testNumber.Distinct()\n            nextDoubleton = testNumber\n\n            If uniqueNumbers.Count() = 2 Then Exit For\n\n        Next\n\n        Return nextDoubleton\n\n    End Function\n\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350605,"user_id":null,"body":"Module Kata\n    Function Doubleton(ByVal num As Integer) As Integer\n        ' Insert code here ..\n        While $\"{System.Threading.Interlocked.Increment(num)}\".Distinct().Count() <> 2\n        End While\n\n        Return num\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350606,"user_id":null,"body":"Module Kata\n    Function Doubleton(ByVal num As Integer) As Integer\n        Dim iterate As Boolean = True\n        Do While iterate\n\n            'addup\n            num += 1\n\n            'Digits to HasSet\n            Dim hash As HashSet(Of Char) = New HashSet(Of Char)(num.ToString)\n\n            'HasSet to Array.\n            Dim arr() As Char = hash.ToArray()\n\n\n\n            'Break if Found\n            If arr.Length = 2 Then\n                iterate = False\n            End If\n        Loop\n\n        Return num\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350607,"user_id":null,"body":"Module Kata\n    Function Doubleton(ByVal num As Integer) As Integer\n\n        Dim arrIndex() As Integer = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}\n        Dim strNum As String = \"\"\n        Dim intUniqDigits As Integer\n\n        For k = num + 1 To 1_000_000\n\n            arrIndex = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}\n            strNum = k.ToString()\n            intUniqDigits = 0\n\n            For i = 0 To strNum.Length - 1\n                If arrIndex(Convert.ToInt32(strNum(i)) - 48) = 0 Then\n                    arrIndex(Convert.ToInt32(strNum(i)) - 48) = 1\n                    intUniqDigits += 1\n                End If\n\n                If intUniqDigits > 2 Then Exit For\n            Next i\n\n            If intUniqDigits = 2 Then Exit For\n\n        Next k\n\n        Return (Convert.ToInt32(strNum))\n\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350608,"user_id":null,"body":"Module Kata\n    Function Doubleton(ByVal num As Integer) As Integer\n        Dim ans As Integer\n        For number As Integer  = num+1 To 1000000        \n        Dim numStr AS String=  number.ToString()      \n        Dim charArray() As Char = numStr.ToCharArray\n        Dim uniqueValues = charArray.Distinct()\n        if uniqueValues.Count = 2 Then\n            ans=number\n        Exit For            \n            End if\n        Next\n        Return ans\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350609,"user_id":null,"body":"Module Kata\n    Function Doubleton(ByVal num As Integer) As Integer\n        ' Insert code here ..\n        num=num+1\n        Dim numStr AS String=  num.ToString()      \n        Dim charArray() As Char = numStr.ToCharArray\n        Dim uniqueValues = charArray.Distinct()\n        While uniqueValues.Count <> 2\n        num=num+1   \n        numStr =  num.ToString()     \n        charArray = numStr.ToCharArray\n        uniqueValues = charArray.Distinct()\n        End While\n        \n        RETURN num\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350610,"user_id":null,"body":"Module Kata\n    Function Doubleton(ByVal num As Integer) As Integer\n        dim cond as boolean\n        dim num_list(9) as String\n        dim s_num as string\n        Dim i as integer = 0\n        cond = False\n        \n        do until cond = True\n            i = 0\n            num += 1 \n            redim num_list (9)\n            s_num = cstr(num)\n            \n            for each c as char in s_num\n                if num_list.contains(c) then \n\n                else\n                    num_list(i) = c\n                    i += 1\n                end if \n            next \n\n            if i > 1 and i < 3 then \n               cond = True\n            End if           \n\n        Loop\n    Return num\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"},{"id":350611,"user_id":null,"body":"Module Kata\n    Function Doubleton(ByVal num As Integer) As Integer\n        Dim count as Integer\n        Dim one() as Boolean = {False,False,False,False,False,False,False,False,False, False}\n        While True\n            num += 1\n            count = 0\n            For i = 0 to 9\n                one(i) = False\n            Next\n            For each c in CStr(num)\n                one(CInt(CStr(c))) = True\n            Next\n            For i = 0 to 9\n                If one(i) Then\n                    count += 1\n                End IF\n            Next\n            If count = 2 Then\n              return num\n            End If \n        End While\n    End Function\nEnd Module\n","lang_id":55,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:48","updated_at":"2022-12-23 16:36:48"}]}