{"50654ddff44f800200000004":[{"id":230260,"user_id":676,"body":"multiply(X,Y,Z) :- Z is X*Y.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230261,"user_id":645,"body":"multiply(A, B, R) :- R is A * B.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230262,"user_id":null,"body":"multiply(X,Y,Z) :- Z is X*Y. % Mind-bending.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230263,"user_id":null,"body":"multiply(X,Y,Z) :- Z is X*Y.\n\/*multiplies 2 numbers*\/","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230264,"user_id":645,"body":"multiply(1, 1, 1).\nmultiply(2, 1, 2).\nmultiply(2, 2, 4).\nmultiply(3, 5, 15).\nmultiply(6, 7, 42).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"511f11d355fe575d2c000001":[{"id":230265,"user_id":null,"body":"two_oldest_ages(Ages, [B,A]) :-\n  msort(Ages,Sorted),reverse(Sorted,[A,B|_]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230266,"user_id":645,"body":"two_oldest_ages(A, [Y, X]) :- sort(0, @>=, A, [X, Y | _]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230267,"user_id":53,"body":"two_oldest_ages(Ages, Result) :-\n  sort(0, @>=, Ages, [A, B | Ls]),\n  Result = [B, A].","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230268,"user_id":null,"body":"two_oldest_ages(Ages, [Second, First]) :-\n  max_list(Ages, First),\n  select(First, Ages, Rest),!,\n  max_list(Rest, Second).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230269,"user_id":null,"body":"two_oldest_ages(Ages, Result) :-\n  get_max(Ages, R),\n  del_elem(Ages, R, Temp),\n  get_max(Temp, R2),\n  Result = [R2,R].\n  \nget_max([], R, R).\nget_max([X|Xs], Y, R) :- X > Y, get_max(Xs, X, R).\nget_max([X|Xs], Y, R) :- X =< Y, get_max(Xs, Y, R).\nget_max([X|Xs], R) :- get_max(Xs, X, R).\n\ndel_elem([Y|Xs], Y, Xs).\ndel_elem([X|Xs], Y, [X|Ys]) :- del_elem(Xs, Y, Ys).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230270,"user_id":null,"body":"firstTwo([A,B|_], R) :- R = [B, A].\ntwo_oldest_ages(Ages, Result) :- sort(0, >=, Ages, Sorted), firstTwo(Sorted, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230271,"user_id":null,"body":"del(X,[X|R],R) :- !.\ndel(X,[Y|O],[Y|R]) :- del(X,O,R).\n\ntwo_oldest_ages(Ages, Result) :-\n  max_list(Ages, Oldest),\n  del(Oldest, Ages, AAges),\n  max_list(AAges, BOldest),\n  Result = [ BOldest, Oldest ].","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230272,"user_id":null,"body":"without_max(L,Max,R) :-\n    max_list(L,Max),\n    append(A,[Max|AR],L),\n    append(A,AR,R).\n\ntwo_oldest_ages(Ages, [SecondOldest,Oldest]) :-\n  without_max(Ages, Oldest, WithoutOldest),\n  without_max(WithoutOldest, SecondOldest,_).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230273,"user_id":null,"body":"two_oldest_ages(Ages, Result) :- find_ages(Ages, 0, 0, Result).\n\nfind_ages([],X,Y,[X,Y]).\n\nfind_ages([H|T], X, Y, Result) :- H>=Y, find_ages(T,Y,H,Result).\n\nfind_ages([H|T], X, Y, Result) :- H<Y, H>=X, find_ages(T,H,Y,Result).\n\nfind_ages([H|T], X, Y, Result) :- H<X, find_ages(T,X,Y,Result).\n ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230274,"user_id":168,"body":"two_oldest_ages(Ages, Result) :-\n  sort(0, @>=, Ages, [X, Y | _]),\n  Result = [Y, X].","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"514b92a657cdc65150000006":[{"id":230275,"user_id":null,"body":"solution(X,R) :- X1 is X-1, \n  findall(Num,between(1,X1,Num),L), \n  include([Y]>>(0 is Y mod 3; 0 is Y mod 5),L,R2), \n  sumlist(R2,R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230276,"user_id":564,"body":"solution(Number, Result) :-\n  solve(Number - 1, Result).\n\nsolve(Number, Result) :-\n  Number < 3,\n  Result is 0.\n\nsolve(Number, Result) :-\n  tri-or-quin(Number),\n  solve(Number - 1, Sum),\n  Result is Number + Sum.\n\nsolve(Number, Result) :-\n  solve(Number - 1, Result).\n\n\ntri-or-quin(Number) :- Number mod 3 =:= 0 ; Number mod 5 =:= 0.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230277,"user_id":null,"body":"% Store the result inside 2nd argument. Good luck!\nsolution(Number, Result) :-\n  sum(Number, 3, Sum3),\n  sum(Number, 5, Sum5),\n  sum(Number, 15, Sum15),\n  Result is Sum3 + Sum5 - Sum15.\nsum(Max, Step, Sum) :-\n  N is (Max - 1) div Step,\n  Sum is Step * N * (N + 1) div 2.  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230278,"user_id":null,"body":"solution(N,0) :- N =< 3.\nsolution(N, R) :- \n    N1 is N-1,\n    ((0 is N1 mod 3); (0 is N1 mod 5)),\n    !,\n    solution(N1,R1),\n    R is R1+N1.\nsolution(N,R) :- N1 is N-1, solution(N1,R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230279,"user_id":53,"body":"facsum(N, F, Result) :-\n  K is div(N - 1, F),\n  M is F * K + F,\n  Result is div(M * K, 2).\n\nsolution(N, Result) :- \n  facsum(N, 3, F3),\n  facsum(N, 5, F5),\n  facsum(N, 15, F15),\n  Result is F3 + F5 - F15.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230280,"user_id":null,"body":"gauss(N, Sum) :- Sum is N * (1 + N) \/\/ 2.\n\nsum-of-multiples(N, M, Sum) :-\n    I is (N - 1) \/\/ M,\n    gauss(I, X),\n    Sum is M * X.\n\nsolution(N, Result) :-\n    sum-of-multiples(N,  3, X),\n    sum-of-multiples(N,  5, Y),\n    sum-of-multiples(N, 15, Z),\n    Result is X + Y - Z.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230281,"user_id":null,"body":"sum_up_to(N,S) :- S is N*(N+1)\/2.\nsum_of_mults(N,M,S) :- M1 is (M-1)\/\/N, sum_up_to(M1,SU), S is N*SU.\nsolution(N, R) :- sum_of_mults(3,N,S3), sum_of_mults(5,N,S5), sum_of_mults(15,N,S15),\n                  R is S3+S5-S15.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230282,"user_id":168,"body":"solution(Number, Result) :-\n  N1 is Number - 1,\n  aggregate_all(sum(X), (between(1, N1, X), (X mod 3 =:= 0, X mod 15 =\\= 0; X mod 5 =:= 0)), Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230283,"user_id":null,"body":"% Store the result inside 2nd argument. Good luck!\nsolution(Number, 0) :- Number < 4.\nsolution(Number, Result) :- succ(M,Number),\n  write(Number), nl,\n  aggregate(sum(X), (between(3,M,X), (0 is mod(X,3)->true;0 is mod(X,5))), Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230284,"user_id":null,"body":"divides(N):- divmod(N,5,_,0),!.\ndivides(N):- divmod(N,3,_,0).\n\nsolution_below(0,0) :- !.\n\nsolution_below(Number, Result) :- \n  N1 is Number - 1,\n  divides(Number),\n  !,\n  solution_below(N1,R1),\n  Result is R1 + Number.\n  \nsolution_below(Number, Result) :- \n  N1 is Number - 1,\n  solution_below(N1,Result).\n\nsolution(N,0) :- N < 1, !. \n\nsolution(Number,Result) :- \n  N1 is Number - 1,\n  solution_below(N1, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"515de9ae9dcfc28eb6000001":[{"id":230285,"user_id":null,"body":"solution(String, Result) :-\n    string_chars(String, List),\n    helper(List, [], Result).\n\nhelper([], R, R).\n    \nhelper([H|T], R, Result) :-\n    getNext(T, Next, Tail),\n    string_concat(H, Next, TmpString),\n    append(R, [TmpString], R2),\n    helper(Tail, R2, Result).\n\ngetNext([], \"_\", []).  \n\ngetNext([H|T], Next, Tail) :-\n    Next = H,\n    Tail = T.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230286,"user_id":null,"body":"\n% returning doubles of characters (or char & underscore)\ndoubles([],[]).\ndoubles([H1], [[H1,'_']]).\ndoubles([H1,H2|T], [[H1,H2]|Y]) :- doubles(T,Y).\n\n% converts doubles of chars to strings\ndoubles_strings([],[]).\ndoubles_strings([H|T], [X|Y]) :- \n  string_chars(X,H),\n  doubles_strings(T,Y).\n  \n\nsolution(String, Result) :-\n  string_chars(String, A),\n  doubles(A, B),\n  doubles_strings(B, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230287,"user_id":null,"body":"helper([], []).\nhelper([H], [R]) :- string_chars(R, [H,'_']).\nhelper([H1,H2|T], [RH|RT]) :- \n  string_chars(RH, [H1,H2]),\n  helper(T,RT).\n\nsolution(String, Result) :-\n  string_chars(String, Chars),\n  helper(Chars, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230288,"user_id":null,"body":"split([],[]).\nsplit([H1,H2],[S]) :- string_concat(H1,H2,S),!.\nsplit([H],[S]) :- split([H,\"_\"],[S]).\nsplit([H1,H2|T], [S|R]) :- \n  split([H1,H2], [S]),\n  split(T,R).\n\nsolution(String, Result) :-\n  string_chars(String, Chars),\n  split(Chars, Result).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230289,"user_id":null,"body":"solution(String, Result) :-\n  string_concat(String, \"_\", Concat),\n  findall(Sub, (sub_string(Concat,N,2,_,Sub), 0 is N\/\\1), Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230290,"user_id":null,"body":"pair_chars([], Acc, PairedChars) :- reverse(Acc, PairedChars).\npair_chars([F], Acc, PairedChars) :-\n  string_chars(S, [F,'_']),\n  pair_chars([], [S|Acc], PairedChars)\n.\npair_chars([F, S|R], Acc, PairedChars) :-\n  string_chars(Str, [F,S]),\n  pair_chars(R, [Str|Acc], PairedChars)\n.\n\nsolution(String, Result) :-\n  string_chars(S, [h,'_']),\n  string_chars(String, Chars),\n  pair_chars(Chars, [], Result)\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230291,"user_id":null,"body":"pair_chars([], Acc, PairedChars) :- write(Acc),reverse(Acc, PairedChars).\npair_chars([F], Acc, PairedChars) :-\n  string_chars(S, [F,'_']),\n  pair_chars([], [S|Acc], PairedChars)\n.\npair_chars([F, S|R], Acc, PairedChars) :-\n  string_chars(Str, [F,S]),\n  pair_chars(R, [Str|Acc], PairedChars)\n.\n\nsolution(String, Result) :-\n  string_chars(S, [h,'_']),\n  string_chars(String, Chars),\n  pair_chars(Chars, [], Result)\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230292,"user_id":544,"body":"solution(\"\", []).\nsolution(S, [R]) :- \n  string_length(S, L), L = 1, string_concat(S, \"_\", R).\n\nsolution(S, R) :-\n  string_concat(Prefix, Suffix, S), string_length(Prefix, 2),\n  solution(Suffix, RSuffix),\n  R = [Prefix | RSuffix].  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230293,"user_id":null,"body":"solution(S, R) :-\n  string_chars(S, C),\n  sol(C, R).\n  \nsol([], []).\nsol([X], [S]) :-\n  string_chars(S, [X, '_']).\nsol([X,Y|Z], [S|T]) :-\n  string_chars(S, [X,Y]),\n  sol(Z, T).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230294,"user_id":null,"body":"split([], []).\nsplit([X], [S]) :-\n  string_to_list(S, [X, 95]).\nsplit([X,Y|Z], [S|Rest]) :-\n  string_to_list(S, [X,Y]),\n  split(Z, Rest).\n\nsolution(String, Result) :-\n  string_to_list(String, List),\n  split(List, Result).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"515e271a311df0350d00000f":[{"id":230295,"user_id":null,"body":"square_sum([], 0).\nsquare_sum([H|Ts], Result) :-\n  T is H * H,\n  square_sum(Ts, R1),\n  Result is R1 + T.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230296,"user_id":53,"body":"square_sum(Ls, R) :-\n  maplist([N, M] >> (M is N * N), Ls, Ms),\n  sum_list(Ms, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230297,"user_id":527,"body":"square_sum(Numbers, Result) :-\n  maplist([N, S] >> (S is N * N), Numbers, Squares),\n  sum_list(Squares, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230298,"user_id":527,"body":":- use_module(library(clpfd)).\n\nsquare_sum(Numbers, Result) :-\n  scalar_product(Numbers, Numbers, #=, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230299,"user_id":527,"body":"square_sum(Numbers, Result) :-\n  foldl([N, A, A1] >> (A1 is A + N ^ 2), Numbers, 0, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230300,"user_id":null,"body":"square(Num, Res) :-\n    Res is Num * Num.\n\nsquare_sum(Numbers, Result) :-\n    maplist(square, Numbers, R),\n    sum_list(R, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230301,"user_id":null,"body":"square_sum([], 0).\nsquare_sum([E|T], R) :-\n  square_sum(T, S), R is E^2 + S.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230302,"user_id":null,"body":"square_sum([],0).\nsquare_sum([X],Result):-\n  Result is X*X.\nsquare_sum(Numbers, Result) :-\n [H|T] = Numbers ,\n   square_sum([H],R1),\n   square_sum(T,R2),\n   Result is R1 + R2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230303,"user_id":null,"body":"square_add(X,Y,Sum):- Sum is (X**2) + Y.\nsquare_sum(Numbers, Result) :-\n  foldl(square_add, Numbers, 0, Result).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230304,"user_id":null,"body":"square_sum(Numbers, Result) :-\n  squares(Numbers, Squares),\n  sum_list(Squares, Result).\n\nsquares([], []).\nsquares([H|T], [X|Out]) :-\n  X is H*H,\n  squares(T, Out).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5168bb5dfe9a00b126000018":[{"id":230305,"user_id":null,"body":"solution(String, Result) :-\n  string_codes(String, L),\n  reverse(L,S),\n  string_codes(Result,S).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230306,"user_id":168,"body":"solution(String, Result) :-\n  string_chars(String, Chars),\n  reverse(Chars, T),\n  string_chars(Result, T).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230307,"user_id":null,"body":"solution(String, Result) :-\n  string_codes(String, Codes),\n  reverse(Codes, Reverse),\n  string_codes(Result, Reverse).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230308,"user_id":null,"body":"solution(String, Result) :-\n  % Your code here.\n  string_codes(String, X), reverse(X, Xr), string_codes(Result,Xr).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230309,"user_id":null,"body":"solution(String, Result) :-\n  string_chars(String, Chars),\n  reverse(Chars, Reversed),\n  string_chars(Result, Reversed).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230310,"user_id":null,"body":"\n% reverses list\nreverseL([], []).\nreverseL([H|T], R) :-\n  reverseL(T, R1),\n  append([R1, [H]], R).\n\n% to char list, reverse, back to string\nsolution(String, Result) :-\n  string_chars(String, CList),\n  reverseL(CList, RCList),\n  string_chars(Result, RCList).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230311,"user_id":null,"body":"solution(S, R) :-\n  string_codes(S,Sc),\n  reverse(Sc, Rc),\n  string_codes(R, Rc).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230312,"user_id":null,"body":"solution(Str, R) :- string_codes(Str, Arr), reverse(Arr, RR), string_codes(R, RR).\n\nreverse([] ,[]).\nreverse([X],[X]).\nreverse([X|Xs],R) :-\n  reverse(Xs,RR),\n  append(RR,[X],R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230313,"user_id":null,"body":"solution(String, Result) :-\n  string_codes(String,List),\n  reverse(List, Reversed),\n  string_codes(Result,Reversed).\n\nappend([],L,L).\nappend([H|T],L,[H|Z]) :- append(T,L,Z).\n  \n\nreverse([],[]).\nreverse([H|T], Result) :- reverse(T,App), append(App, [H], Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230314,"user_id":null,"body":"solution(String, Result) :-\nstring_chars(String, T1),\nreverse(T1, T2),\nstring_chars(Result, T2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"51e04f6b544cf3f6550000c1":[{"id":230315,"user_id":76,"body":"beeramid(Bonus, Price, Levels) :- beeramid2(Bonus, Price, 1, Levels).\nbeeramid2(Bonus, Price, Level, Levels) :- Bonus - Level ^ 2 * Price < 0, Levels is Level - 1, !.\nbeeramid2(Bonus, Price, Level, Levels) :- beeramid2(Bonus - Level ^ 2 * Price, Price, Level + 1, Levels).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230316,"user_id":53,"body":"helper(M, N, K, R) :-\n  (  M > K -> R is N - 2 \n  ;  M1 is M + N * N, N1 is N + 1, helper(M1, N1, K, R) ).\n\nbeeramid(B, P, L) :-\n  (  B < 0 -> L = 0\n  ;  K is floor(B \/ P), helper(0, 0, K, L) ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230317,"user_id":527,"body":"beeramid(Bonus, Price, Levels) :-\n  N is truncate(Bonus \/ Price),\n  between(1, infinite, I),\n  I * (I + 1) * (2 * I + 1) \/\/ 6 > N,\n  succ(Levels, I),\n  !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230318,"user_id":null,"body":"\nbeerhelper(Beers, CurrentLevel, OldLevel) :-\n  NewBeers is CurrentLevel * CurrentLevel,\n  \\+ (NewBeers =< Beers),\n  OldLevel is CurrentLevel - 1.\n\nbeerhelper(Beers, CurrentLevel, Levels) :-\n  NewBeers is CurrentLevel * CurrentLevel,\n  RemBeers is Beers - NewBeers,\n  RemBeers >= 0,\n  NewLevel is CurrentLevel + 1,\n  beerhelper(RemBeers, NewLevel, Levels).\n\nbeeramid(Bonus, Price, Levels) :-\n  NbBeers = Bonus \/ Price,\n  beerhelper(NbBeers, 1, Levels).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230319,"user_id":null,"body":"lvl(Curr, Count, Max) :-\n  NCount is Count - Curr^2,\n  NCount >= 0 ->\n  NCurr is Curr+1,\n  lvl(NCurr, NCount, Max);\n  Max is Curr-1.\n\nbeeramid(Bonus, Price, Levels) :-\n  Count is floor(Bonus\/Price),\n  lvl(1, Count, Levels).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230320,"user_id":168,"body":"aux(Bonus, Price, K, T, R) :-\n  T1 is T + K * K * Price,\n  (T1 > Bonus -> R is K - 1;\n   K1 is K + 1,\n   aux(Bonus, Price, K1, T1, R)).\n\nbeeramid(Bonus, Price, Levels) :- aux(Bonus, Price, 1, 0, Levels).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230321,"user_id":544,"body":":- use_module(library(clpfd)).\n\nbeeramid(Bonus, _, 0) :-\n    Bonus =< 0, !.\n\n% using the closed-form equation for the sum of squares from OEIS\n% https:\/\/oeis.org\/A000330\nbeeramid(Bonus, Price, Levels) :-\n    Cans is floor(Bonus \/ Price),\n    Levels in 0..sup,\n    Cans #>= (Levels * (Levels + 1) * (2 * Levels + 1)) div 6,\n    once(labeling([max(Levels)], [Levels])).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230322,"user_id":null,"body":"beeramid(Bonus, Price, Levels) :- beeramid(Bonus, Price, Price, 0, Levels).\nbeeramid(Bonus, Price, WithOneMore, Current, Final) :-\n\t(  WithOneMore > Bonus\n\t-> Final = Current\n\t;  Completed is Current + 1,\n\t   AndOneMore is WithOneMore + (Completed + 1) * (Completed + 1) * Price,\n\t   beeramid(Bonus, Price, AndOneMore, Completed, Final)\n\t).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230323,"user_id":null,"body":"beeramid(Bonus, Price, Levels) :- beeramidHP(Bonus, Price, 1, 0, Levels).\n\nbeeramidHP(Bonus,Price,Ind,Acc,Levels) :- \n    Bonus < Acc + Ind*Ind*Price,\n    !,\n    Levels is Ind-1.\nbeeramidHP(Bonus,Price,Ind,Acc,Levels) :- \n    Acc1 is Acc + Ind*Ind*Price, \n    Ind1 is Ind+1, \n    beeramidHP(Bonus, Price, Ind1, Acc1, Levels).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230324,"user_id":null,"body":"cans_cost(Level, CanPrice, PrevLevelCost, CashLimit, FinalLevel) :-\n    Cost is ((Level^2) * CanPrice) + PrevLevelCost,\n    (   CashLimit >= Cost\n    ->  plus(Level, 1, Level1),\n        cans_cost(Level1, CanPrice, Cost, CashLimit, FinalLevel)\n    ;   plus(FinalLevel, 1, Level)).\n\nbeeramid(Cash, Price, Level) :- cans_cost(1, Price, 0, Cash, Level).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"51f2d1cafc9c0f745c00037d":[{"id":230325,"user_id":527,"body":"solution(String, Ending) :- string_concat(_, Ending, String).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230326,"user_id":null,"body":"solution(S, E) :- concat(_, E, S).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230327,"user_id":null,"body":"solution(String, Ending) :-\n    atom_concat(_, Ending, String).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230328,"user_id":null,"body":"% predicate solution\/2 - check if `String` ends with `Ending`\nsolution(String, Ending) :-\n  sub_string(String, _, _, 0, Ending)\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230329,"user_id":76,"body":"solution(String, Ending) :- \n  sub_string(String, _, _, After, Ending),\n  After =:= 0, !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230330,"user_id":53,"body":"solution(String, Ending) :-\n  string_length(Ending, N),\n  sub_string(String, _, N, 0, R),\n  R == Ending.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230331,"user_id":null,"body":"% predicate solution\/2 - check if `String` ends with `Ending`\nsolution(String, Ending) :- concat(_, Ending, String).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230332,"user_id":null,"body":"% predicate solution\/2 - check if `String` ends with `Ending`\nsolution(S, Ends) :- sub_string(S, _, _, 0, Ends).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230333,"user_id":null,"body":"% predicate solution\/2 - check if `String` ends with `Ending`\nsolution(S1,S2):-atom_codes(A, S1), atom_chars(A, As),atom_codes(B, S2), atom_chars(B, Bs), solution2(As,Bs).\nsolution2(S, S).\nsolution2([_|T],R):-solution(T,R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230334,"user_id":null,"body":"% predicate solution\/2 - check if `String` ends with `Ending`\nsolution(String, Ending) :-\n  string_concat(_, Ending, String).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"51fd6bc82bc150b28e0000ce":[{"id":230335,"user_id":null,"body":"\nno_odds(List, Result) :-\n  findall(X,(member(X,List), X mod 2 =:= 0), Result).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230336,"user_id":null,"body":"even(0).\n\neven(N):-\n  integer(N),\n  M is N mod 2,\n  M is 0.\n\nno_odds(Values, Result) :-\n  include(even, Values, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230337,"user_id":null,"body":":- use_module(library(clpfd)).\n\nodd(N) :- 1 #= N mod 2.\n\n\nno_odds([],[]).\nno_odds([V|Vs],[V|R]) :-\n    not(odd(V)),\n    no_odds(Vs,R).\nno_odds([V|Vs],R) :-\n    odd(V),\n    no_odds(Vs,R).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230338,"user_id":null,"body":"\nno_odds([], []).\nno_odds([Value|Vs], [Value|Rs]) :- mod(Value,2) =:= 0, !, no_odds(Vs, Rs).\nno_odds([Value|Vs], Rs) :- no_odds(Vs, Rs).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230339,"user_id":null,"body":"even(N):- M is N mod 2, M == 0.\n\n\n\nno_odds([],[]).\nno_odds([X | Xs], Result) :- even(X), no_odds(Xs, SR), append([X], SR, Result).\nno_odds([X | Xs], Result) :- not(even(X)), no_odds(Xs, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230340,"user_id":null,"body":"is_even(I) :-\n  0 =:= I mod 2.\n\nno_odds(Values, Result) :-\n  include(is_even, Values, Result).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230341,"user_id":null,"body":"even(A) :- 0 is A mod 2.\n\nno_odds([], []).\nno_odds([Head|Tail], [Head|Result]) :- even(Head), no_odds(Tail, Result).\nno_odds([_|Tail], Result) :- no_odds(Tail, Result).\n\t\t","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230342,"user_id":null,"body":"odds_acc([], Result, Acc) :- reverse(Acc, Result).\nodds_acc([Head|Tail], Result, Acc) :-\n  (1 is Head mod 2 ->\n      odds_acc(Tail, Result, Acc)\n  ;\n      odds_acc(Tail, Result, [Head|Acc])\n  ).\n\nno_odds(Vals, Result) :- odds_acc(Vals, Result, []).\n  % Your code here","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230343,"user_id":null,"body":"no_odds([],[]).\nno_odds([X|Z], [X|Result]) :-\n  0 is mod(X,2),!, no_odds(Z,Result).\nno_odds([X|Z], Result) :- no_odds(Z,Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230344,"user_id":null,"body":"no_odds([],[]).\nno_odds([H|T], [H|R]) :- 0 =:= H mod 2,!, no_odds(T,R).\nno_odds([_|T], R) :- no_odds(T,R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"521c2db8ddc89b9b7a0000c1":[{"id":230345,"user_id":null,"body":"snail([[]],[]).\nsnail([[H0|T0]|T0s], [H0|R]) :- T0\\=[] -> snail([T0|T0s],R)\n; aggregate_all(bag(X), order_by([desc(N)],maplist(nth0(N),T0s,X)), T1s),\n  snail(T1s,R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230346,"user_id":null,"body":"snail_top([], Result, Result).\nsnail_top([Top|Rest], Acc, Result) :-\n  append_rev(Top, Acc, NewAcc),\n  snail_right(Rest, NewAcc, Result).\n\nappend_rev([], Res, Res).\nappend_rev([H|T], Acc, Res) :-\n  append_rev(T, [H|Acc], Res).\n\nsnail_right(Matrix, Acc, Result) :-\n  do_right(Matrix, [], Acc, NewMatrix, NewAcc),\n  snail_bottom(NewMatrix, NewAcc, Result).\n\ndo_right([], Matrix, Snail, Matrix, Snail).\ndo_right([H|T], AccMatrix, AccSnail, ResMatrix, ResSnail) :-\n  append(Rest, [X], H),\n  !,\n  do_right(T, [Rest|AccMatrix], [X|AccSnail], ResMatrix, ResSnail).\n\nsnail_bottom([], Result, Result).\nsnail_bottom([Bottom|Rest], Acc, Result) :-\n  append(Bottom, Acc, NewAcc),\n  snail_left(Rest, NewAcc, Result).\n\nsnail_left(Matrix, Acc, Result) :-\n  do_left(Matrix, [], Acc, NewMatrix, NewAcc),\n  snail_top(NewMatrix, NewAcc, Result).\n\ndo_left([], Matrix, Snail, Matrix, Snail).\ndo_left([[X|Rest]|T], AccMatrix, AccSnail, ResMatrix, ResSnail) :-\n  do_left(T, [Rest|AccMatrix], [X|AccSnail], ResMatrix, ResSnail).\n\nsnail(Matrix, Result) :-\n  snail_top(Matrix, [], Rev),\n  reverse(Rev, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230347,"user_id":null,"body":"rotate( 1,  0,  0, -1).\nrotate( 0, -1, -1,  0).\nrotate(-1,  0,  0,  1).\nrotate( 0,  1,  1,  0).\n\ncell_value(Board, X, Y, Value) :-\n    nth1(Y, Board, Row),\n    nth1(X, Row,   Value).\n\nforward(Board, X, Y, DX, DY, XNew,YNew) :-\n    length(Board, N),\n    XNew is X + DX,\n    YNew is Y + DY,\n    between(1,N,XNew),\n    between(1,N,YNew).\n\ntraverse([[]], _, _, _, _, [], [], []).\n\n%Last cell\ntraverse(Board, X, Y, _, _, Values, _, [LV|Values]) :-\n    length(Board, N),\n    N2 is N * N - 1,\n    length(Values, N2),\n    cell_value(Board, X, Y, LV).\n\n% Would step off Board\ntraverse(Board, X, Y, DX, DY, Vs, Visited, Path) :-\n    \\+ forward(Board, X, Y, DX, DY, _, _),\n    rotate(DX, DY, NewDX, NewDY),\n    traverse(Board, X, Y, NewDX, NewDY, Vs, Visited, Path).\n\n% Would cross path.\ntraverse(Board, X, Y, DX, DY, Vs, Visited, Path) :-\n    forward(Board, X, Y, DX, DY, XNew, YNew),\n    member(XNew-YNew, Visited),\n    rotate(DX,DY,NewDX,NewDY),\n    traverse(Board, X, Y, NewDX, NewDY, Vs, Visited, Path).\n\n% Unvisited cell ahead\ntraverse(Board, X, Y, DX, DY, Vs, Visited, Path) :-\n    forward(Board, X, Y, DX, DY, XNew, YNew),\n    \\+ member(XNew-YNew, Visited),\n    cell_value(Board, X, Y, Value),\n    traverse(Board, XNew, YNew, DX, DY, [Value|Vs], [X-Y|Visited], Path).\n\n    \nsnail(Array, Result) :-\n    traverse(Array, 1, 1, 1, 0, [], [], RR),!,\n    reverse(RR,Result)\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230348,"user_id":76,"body":"snail([], []) :- !.\nsnail([[]], []) :- !.\nsnail([[N]], [N]) :- !.\n\nsnail(Array, Result) :-\n  nth0(0, Array, Top),\n  length(Array, Len),\n  nth1(Len, Array, Bottom),\n  append([_], W, Array),\n  append(Middle, [_], W),\n  reverse(Bottom, ReversedBottom),\n  maplist([Row, R] >> (nth0(0, Row, R)), Middle, First),\n  reverse(First, ReversedFirst),\n  maplist([Row, R] >> (nth1(Len, Row, R)), Middle, Last),\n  flatten([Top, Last, ReversedBottom, ReversedFirst], Lap),\n  maplist([Row, R] >> (append([_], M, Row), append(R, [_], M)), Middle, Remaining),\n  snail(Remaining, RemainingResult), !,\n  append(Lap, RemainingResult, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"523b4ff7adca849afe000035":[{"id":230349,"user_id":null,"body":"% Write a rule 'greet'\/1 that returns 'hello world!'\n\ngreet('hello world!').","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230350,"user_id":null,"body":"% Write a rule 'greet'\/1 that returns 'hello world!'\n:- initialization greet, halt.\ngreet :-\n    write('Hello, World!'), nl.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230351,"user_id":527,"body":"'\u202e\u202e'. greet('hello world!') .","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230352,"user_id":null,"body":"% Write a rule 'greet'\/1 that returns 'hello world!'\n\ngreet(Msg) :-\n  Msg = 'hello world!'.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230353,"user_id":null,"body":"% Write a rule 'greet'\/1 that returns 'hello world!'\ngreet('hello world!') :- true.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230354,"user_id":null,"body":"greet(Output):-\n  Out1 = [98,111,102,102,101,42,125,101,120,102,110,43],\n  maplist([N,M] >> (M is N xor 42), Out1, Out3),\n  magic(Out3, Out2),\n  atom_codes(Output, Out2).\n  \nmagic([],[]):- !.\nmagic([H|T],[H2|T2]):-\n  super_magic(H,H2,4),\n  magic(T,T2).\n  \nsuper_magic(A,Z,M):-\n  findall(R, (between(0,M,N), (N =:= 0 -> R is 1; R is 1 << N)), List),\n  sumlist(List,Z1),\n  succ(Z1,Z2),\n  Z is A + Z2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230355,"user_id":null,"body":"greet('hello world!') :- write('hello world!').","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230356,"user_id":null,"body":"% Write a rule 'greet'\/1 that returns 'hello world!'\ngreet(Output):-\n    Output='hello world!',\n    write(Output).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230357,"user_id":null,"body":"greet(X) :- X = 'hello world!'.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230358,"user_id":null,"body":"% Write a rule 'greet'\/1 that returns 'hello world!'\ngreet(Message) :- Message = 'hello world!'.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"523f5d21c841566fde000009":[{"id":230359,"user_id":527,"body":"array_difference(A, B, Result) :- subtract(A, B, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230360,"user_id":53,"body":"array_difference(L1, L2, Result) :- \n  exclude([X] >> member(X, L2), L1, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230361,"user_id":null,"body":"array_difference(A, B, R) :- subtract(A,B,R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230362,"user_id":null,"body":"array_difference([],B,[]).\narray_difference([X|L1],B,[X|R]):- not(member(X,B)), array_difference(L1,B,R).\narray_difference([X|L1],B,R):- member(X,B), array_difference(L1,B,R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230363,"user_id":null,"body":"filter([], B, []).\nfilter([AHead|ATail], AHead, Result) :- filter(ATail, AHead, Result).\nfilter([AHead|ATail], B, [AHead|Result]) :- filter(ATail, B, Result).\n\narray_difference(A, [], A).\narray_difference(A, [BHead|BTail], Result) :- filter(A, BHead, Tmp), \n  array_difference(Tmp, BTail, Result).\n\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230364,"user_id":3088,"body":":- expects_dialect(hprolog).\n\narray_difference(A, B, Result) :- \n  list_array_difference_eq(A, B, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230365,"user_id":null,"body":"array_difference(A, B, Result) :- exclude([El] >> (member(El, B)), A, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230366,"user_id":null,"body":"array_difference(A, [], A).\narray_difference(A, [Y|B], Result) :- \n  exclude(=(Y), A, Xs),\n  array_difference(Xs, B, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230367,"user_id":null,"body":"array_difference([], [], []).\n\narray_difference(L, [], L).\n\narray_difference(A, [X|B], Result):-\n    \\+ member(X, A),\n    array_difference(A, B, Result).\n\n\narray_difference(A, [X|B], Result) :-\n\tmember(X, A),\n    my_delete(X, A, XmenoA),\n    array_difference(XmenoA, B, Result).\n\n\nmy_delete(_, [], []).\n\nmy_delete(X, [H|T], L):-\n    X == H, \n    my_delete(X, T, L).\n\nmy_delete(X, [H|T], L):-\n    X=\\=H,\n    append([H], LmenoH, L),\n    my_delete(X, T, LmenoH).\n\n \n % Your code here.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230368,"user_id":null,"body":"array_difference([H|T], B, [H|R]) :- \n  not(member(H, B)),\n  array_difference(T, B, R).\n  \narray_difference([H|T], B, R) :-\n  member(H, B),\n  array_difference(T, B, R).\n  \narray_difference([], _, []).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5264d2b162488dc400000001":[{"id":230369,"user_id":null,"body":"reverse_big(Word, Word) :- string_length(Word, Len), Len < 5, !.\nreverse_big(Word, Drow) :- string_chars(Word, Chars), reverse(Chars, Srahc), string_chars(Drow, Srahc).\nspin_words(String, Result) :- split_string(String, \" \", \"\", Words), maplist(reverse_big, Words, RWords), atomics_to_string(RWords, \" \", Result).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230370,"user_id":null,"body":"spin_words(String, Result) :-\n    split_string(String, \" \", \"\", Words),\n    maplist(string_chars, Words, WordLists),\n    maplist([X,Y]>>(length(X, Len),(Len >= 5 -> reverse(X, Y);Y = X)), WordLists, ReversedWordLists),\n    maplist([X,Y]>>(string_chars(Y,X)), ReversedWordLists, ReversedWords),\n    atomics_to_string(ReversedWords, \" \", Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230371,"user_id":168,"body":"reverse_string(S, S) :- string_length(S, L), L < 5, !.\nreverse_string(S, R) :-\n  string_chars(S, Cs),\n  reverse(Cs, Xs),\n  atomics_to_string(Xs, R).\n\nspin_words(String, Result) :- \n  re_split(\"\\\\s\", String, Ws),\n  maplist(reverse_string, Ws, Xs),\n  atomics_to_string(Xs, Result).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230372,"user_id":null,"body":"# I havent coded in prolog in over 10 years, the code looks crazy, but it was pretty fun\n\nremove_char(S,C,X) :- atom_concat(L,R,S), atom_concat(C,W,R), atom_concat(L,W,X).\n\nreverse_string(String, R):-\n   string_length(String, L),\n   L >= 5,\n   atom_codes(String, Arr),\n   reverse(Arr, Codes),\n   atom_codes(R, Codes).\n\nreverse_string(String, R):-\n   string_length(String, L),\n   L < 5,\n   R = String.\n\nspin_words([], R, R).\nspin_words([H|T],Accum,R):-\n   reverse_string(H,Accum1),\n   Separator = \" \",\n   atom_concat(Accum1, Separator, Accum2),\n   atom_concat(Accum, Accum2, Accum3), \n   spin_words(T, Accum3, R).\n\nspin_words(String, R):-\n   split_string(String, \"\\s\", \"\\s\", Arr),\n   spin_words(Arr,\"\", Phrase_with_space),\n   split_string(Phrase_with_space, \"\", \"\\s\\t\n\", [R|_]).\n\nshould_reverse(String):-\n   string_length(String,L),\n   L>5.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230373,"user_id":null,"body":"loop(H, H) :-\n    string_chars(H, L),\n    length(L, Ls),\n    Ls < 5.\n\nloop(H, Res) :-\n    string_chars(H, L),\n    length(L, Len),\n    Len >= 5,\n    reverse(L, Ls),\n    string_chars(Res, Ls).\n\nspin_words(String, Result) :- \n    split_string(String, \" \", \"\", L),\n    maplist(loop, L, Rs),\n    atomics_to_string(Rs, \" \", Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230374,"user_id":544,"body":"reverse_long_word(String, ReversedString) :-\n    string_to_list(String, Chars),\n    length(Chars, N),\n    N >= 5,\n    reverse(Chars, ReversedChars),\n    string_to_list(ReversedString, ReversedChars),\n    !.\n\nreverse_long_word(String, String).\n\nspin_words(String, Result) :- \n    split_string(String, \" \", \"\", SubStrings),\n    maplist(reverse_long_word, SubStrings, SpunStrings),\n    atomics_to_string(SpunStrings, \" \", Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230375,"user_id":null,"body":"join_strings([], \"\").\njoin_strings([H|T], Result):-\n  join_strings(T, Pr),\n  string_concat(H, Pr, Result).\n\nreverse_string(String, Reverse):-\n    atom_chars(String, Characters),\n    reverse(Characters, RCharacters),\n    join_strings(RCharacters, Reverse).\n\nspin([H], H):-\n    string_length(H, Len),\n    Len < 5.\n\nspin([H], Rh):-\n    string_length(H, Len),\n    Len >= 5,\n    reverse_string(H, Rh).\n\nspin([H|T], Result):-\n    string_length(H, Len),\n    Len >= 5,\n    !,\n    spin(T, Pr),\n    reverse_string(H, ReverseH),\n    string_concat(ReverseH, \" \", Hp),\n    string_concat(Hp, Pr, Result).\n\nspin([H|T], Result):-\n    spin(T, Pr),\n    string_concat(H, \" \", Hp),\n    string_concat(Hp, Pr, Result).\n\nspin_words(String, Result) :-\n  split_string(String, \"\\s\", \"\\s\", Split),\n  spin(Split, Result).\n\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230376,"user_id":null,"body":"spin_words(String, Result) :-\n  Sep = \" \",\n  split_string(String, Sep, \"\", Words),\n  maplist(reverse_word, Words, Reversed),\n  atomics_to_string(Reversed, Sep, Result).\n\nreverse_word(Word, Rev) :- string_length(Word, Len), Len < 5, Rev = Word.\nreverse_word(Word, Rev) :-\n  string_codes(Word, Codes),\n  reverse(Codes, RevCodes),\n  text_to_string(RevCodes, Rev).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230377,"user_id":null,"body":"spin_words(String, Result) :- \n  split_string(String, \" \", \"\", StringList),\n  processList(StringList, ResultList),\n  atomics_to_string(ResultList, \" \", Result).\n  \nprocessList([], []).\nprocessList([H|T], [RH|RT]) :-\n  processString(H, RH),\n  processList(T, RT).\n\nprocessString(S, R) :-\n  string_length(S, N),\n  N < 5,\n  R = S.\n  \nprocessString(S, R) :-\n  string_chars(S, SC),\n  reverse(SC, RC),\n  string_chars(R, RC).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230378,"user_id":null,"body":"spin_words( String, Result ) :-\n\tmy_split_words( String, \"\", ListOfWords ),\n    every_other_reverse( ListOfWords, ListofReversedWords ),\n    join( ListofReversedWords, Result ),\n    !.\n\njoin( [ H | List ], String ) :-\n    join( List, H, String ).\n\njoin( [ H | List ], Running, String ) :-\n    string_concat( Running, \" \", Tmp ),\n    string_concat( Tmp, H, NewTmp ),\n    join( List, NewTmp, String ).\n\njoin( [], A, A ) :- !.\n\nevery_other_reverse( [ H | List], [ R | NewList ] ) :-\n    string_length( H, Length ),\n    Length >= 5,\n    reverse_word( H, \"\", R ),\n    every_other_reverse( List, NewList ).\n\nevery_other_reverse( [ H | List], [ H | NewList ] ) :-\n    string_length( H, Length ),\n    Length < 5,\n    every_other_reverse( List, NewList ).\n\nevery_other_reverse( [] ,[] ) :- !.\n\n\nreverse_word( String, Reversed, Result ) :-\n    sub_string( String, 0, 1, LenAfter, FirstLetter ),\n    sub_string( String, 1, LenAfter, _, After ),\n\tstring_concat( FirstLetter, Reversed, NewReverse ),\n    reverse_word( After, NewReverse, Result ).\n\nreverse_word( \"\", A, A ) :- !.\n\nmy_split_words( String, Running, List ) :-\n    sub_string( String, 0, 1, LenAfter, FirstLetter ),\n    not( FirstLetter = \" \" ) ->\n    sub_string( String, 1, LenAfter, _, After ),\n    string_concat( Running, FirstLetter, NewRunning ),\n    my_split_words( After, NewRunning, List ).\n\nmy_split_words( String, Running, [ Running | List ] ) :-\n    sub_string( String, 0, 1, LenAfter, FirstLetter ),\n    FirstLetter = \" \" ->\n    sub_string( String, 1, LenAfter, _, After ),\n    my_split_words( After, \"\", List ).\n\nmy_split_words( \"\", Word, [ Word ] ) :- !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"526571aae218b8ee490006f4":[{"id":230379,"user_id":null,"body":"count_bits(0,0):- !.\ncount_bits(N, Bits) :-  Rest is N mod 2, Rest =:= 1, New is N div 2 ,count_bits(New, Result), Bits is Result + 1,!.\ncount_bits(N, Bits) :-  Rest is N mod 2, Rest =\\= 1, New is N div 2 ,count_bits(New, Bits),!.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230380,"user_id":null,"body":"count_bits(0, Acc, Acc).\ncount_bits(N, Acc, Res) :-\n  Acc1 is Acc + N mod 2,\n  Rest is N div 2,\n  count_bits(Rest, Acc1, Res).\n\ncount_bits(N, Bits) :- count_bits(N, 0, Bits).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230381,"user_id":null,"body":"count_bits(0,0).\ncount_bits(1,1).\ncount_bits(N, Bits) :-\n  Bit is N mod 2,\n  HalfN is N div 2,\n  count_bits(HalfN, Rest),\n  Bits is Bit + Rest.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230382,"user_id":null,"body":"count_bits(0,0).\ncount_bits(N,B) :- M is N\/\/2, count_bits(M,C), B is C+(N mod 2).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230383,"user_id":null,"body":"count_bits(0,0).\ncount_bits(1,1).\ncount_bits(M,Bits) :- B is M mod 2, N is M\/\/2, count_bits(N,Bits1), Bits is Bits1+B.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230384,"user_id":null,"body":"count_bits(0,0).\ncount_bits(N, Bits) :- count(N,0,Bits).\n\ncount(1,R,Res):-Res is R+1.\ncount(N,C,R):- 1 is N mod 2, NewC is C+1, NewN is N\/\/2, count(NewN,NewC,R).\n\ncount(N,C,R):- not(1 is N mod 2), NewN is N\/\/2, count(NewN,C,R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230385,"user_id":53,"body":"count_bits(N, R) :- R is popcount(N).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230386,"user_id":76,"body":"count_bits(N, Bits) :-\n  Bits is popcount(N).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5266876b8f4bf2da9b000362":[{"id":230387,"user_id":53,"body":"likes([], R) :- R = \"no one likes this\".\nlikes([A | []], R) :- format(string(R), '~w likes this', [A]).\nlikes([A , B | []], R) :- format(string(R), '~w and ~w like this', [A, B]).\nlikes([A , B , C | []], R) :- format(string(R), '~w, ~w and ~w like this', [A, B, C]).\nlikes([A , B | XS], R) :- length(XS, W), format(string(R), '~w, ~w and ~d others like this', [A, B, W]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230388,"user_id":null,"body":"likes([], \"no one likes this\").\nlikes([X], R) :- string_concat(X, \" likes this\", R).\nlikes([X,Y], R) :- string_concat(X, \" and \", R0), string_concat(Y, \" like this\", R1), string_concat(R0, R1, R).\nlikes([X,Y,Z], R) :- string_concat(X, \", \", R0), likes([Y,Z], R1), string_concat(R0, R1, R).\nlikes([X,Y|Others], R) :- length(Others, L), atom_string(L, S), string_concat(S, \" others\", Z), likes([X,Y,Z], R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230389,"user_id":null,"body":"likes([], \"no one likes this\").\nlikes([A], R) :- concat([A, \" likes this\"], R).\nlikes([A, B], R) :- concat([A, \" and \", B, \" like this\"], R).\nlikes([A, B, C], R) :-\n  likes([B, C], S),\n  concat([A, \", \", S], R).\nlikes([A, B | T], R) :-\n  length(T, L),\n  concat([L, \" others\"], S),\n  likes([A, B, S], R).\n\nconcat([], \"\").\nconcat([H | T], R) :-\n  concat(T, S),\n  string_concat(H, S, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230390,"user_id":null,"body":"likes([], Result) :- Result = \"no one likes this\".\nlikes([Name], Result) :- string_concat(Name, \" likes this\", Result).\nlikes([Name1, Name2], Result) :- string_concat(Name1, \" and \", Res1),\n                                  string_concat(Res1, Name2, Res2),\n                                  string_concat(Res2, \" like this\", Result).\nlikes([Name1, Name2, Name3], Result) :- string_concat(Name1, \", \", Res1),\n                                        string_concat(Res1, Name2, Res2),\n                                        string_concat(Res2, \" and \", Res3),\n                                        string_concat(Res3, Name3, Res4),\n                                        string_concat(Res4, \" like this\", Result).\nlikes([H1,H2|N], Result) :- string_concat(H1, \", \", Res1),\n                            string_concat(Res1, H2, Res2),\n                            my_length(N,X), string_concat(Res2, \" and \", Res3),\n                            string_concat(Res3, X, Res4),\n                            string_concat(Res4, \" others like this\", Result).\n\n\nmy_length([],0).\nmy_length([H|L], X) :- my_length(L,Y), X is Y+1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230391,"user_id":null,"body":"likes([], Result) :-\n  Result = \"no one likes this\".\nlikes([A], Result) :-\n  string_concat(A, \" likes this\", Result).\nlikes([A, B], Result) :-\n  string_concat(A, \" and \", R1),\n  string_concat(R1, B, R2),\n  string_concat(R2, \" like this\", Result).\nlikes([A, B, C], Result) :-\n  string_concat(A, \", \", R1),\n  string_concat(R1, B, R2),\n  string_concat(R2, \" and \", R3),\n  string_concat(R3, C, R4),\n  string_concat(R4, \" like this\", Result).\nlikes([A, B | C], Result) :-\n  length(C, L),\n  string_concat(A, \", \", R1),\n  string_concat(R1, B, R2),\n  string_concat(R2, \" and \", R3),\n  string_concat(R3, L, R4),\n  string_concat(R4, \" others like this\", Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230392,"user_id":null,"body":"likes([], \"no one likes this\").\nlikes([H|[]], Result) :- string_concat(H, \" likes this\", Result).\nlikes([H, H1|[]], Result) :- string_concat(H, \" and \", R1), string_concat(R1, H1, R2), string_concat(R2, \" like this\", Result).\nlikes([H, H1, H2|[]], Result) :- \n  string_concat(H, \", \", R1),\n  string_concat(R1, H1, R2),\n  string_concat(R2, \" and \", R3),\n  string_concat(R3, H2, R4),\n  string_concat(R4, \" like this\", Result).\nlikes([H, H1|T], Result) :-\n  string_concat(H, \", \", R1),\n  string_concat(R1, H1, R2),\n  length(T, TLen),\n  number_string(TLen, TString),\n  string_concat(R2, \" and \", R3),\n  string_concat(R3, TString, R4),\n  string_concat(R4, \" others like this\", Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230393,"user_id":null,"body":"likes(Names, Result) :-\n  evaluate(Names, Result).\n  \nevaluate([],Res) :-\n  Res = \"no one likes this\".\n\nevaluate([H|[]],Res) :-\n  Text = \" likes this\",\n  string_concat(H,Text,Res).\n\nevaluate([H1,H2|[]],Res) :-\n  Text = \" like this\",\n  A = \" and \",\n  string_concat(H1,A,R1),\n  string_concat(R1,H2,R2),\n  string_concat(R2,Text,Res).\n  \nevaluate([H1,H2,H3|[]],Res) :-\n  Text = \" like this\",\n  A = \" and \",\n  string_concat(H1,\", \",R1),\n  string_concat(R1,H2,R2),\n  string_concat(R2,A,R3),\n  string_concat(R3,H3,R4),\n  string_concat(R4,Text,Res).\n  \nevaluate([H1,H2|T],Res) :-\n  Text = \" others like this\",\n  length(T,Le),\n  A = \" and \",\n  Le >= 1,\n  string_concat(H1,\", \",R1),\n  string_concat(R1,H2,R2),\n  string_concat(R2,A,R3),\n  string_concat(R3,Le,R4),\n  string_concat(R4,Text,Res).\n  \n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230394,"user_id":null,"body":"likes([], Result) :-\n  Result = \"no one likes this\".\nlikes([Name], Result) :-\n  string_concat(Name, \" likes this\", Result).\nlikes([Name1, Name2], Result) :-\n  atomics_to_string(\n    [Name1, \" and \", Name2, \" like this\"], Result).\nlikes([Name1, Name2, Name3], Result) :-\n  atomics_to_string(\n    [Name1, \", \", Name2, \" and \", Name3, \" like this\"], Result).\nlikes([Name1, Name2 | Others], Result) :-\n  length(Others, Len),\n  number_string(Len, Number),\n  atomics_to_string(\n    [Name1, \", \", Name2, \" and \", Number, \" others like this\"], Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230395,"user_id":null,"body":"likes([], Result) :-\n  Result = \"no one likes this\".\nlikes([Name], Result) :-\n  string_concat(Name, \" likes this\", Result).\nlikes([Name1, Name2], Result) :-\n  atomics_to_string(\n    [Name1, \" and \", Name2, \" like this\"], Result).\nlikes([Name1, Name2, Name3], Result) :-\n  atomics_to_string(\n    [Name1, \", \", Name2, \" and \", Name3, \" like this\"], Result).\nlikes([Name1, Name2, _ | Others], Result) :-\n  length(Others, X),\n  Len is X + 1,\n  number_string(Len, Number),\n  atomics_to_string(\n    [Name1, \", \", Name2, \" and \", Number, \" others like this\"], Result).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230396,"user_id":null,"body":"likes([], \"no one likes this\").\nlikes([A], R) :- string_concat(A, \" likes this\", R).\nlikes([A,B], R) :- format(string(R),'~s and ~s like this', [A,B]).\nlikes([A,B,C], R) :- format(string(R),'~s, ~s and ~s like this', [A,B,C]).\nlikes([A,B|T], R) :- length(T, L), format(string(R),'~s, ~s and ~d others like this', [A,B,L]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"52829c5fe08baf7edc00122b":[{"id":230397,"user_id":null,"body":"number_of_occurrences(Element, Sample, Occurrences) :-\n  occurrences_of_term(Element, Sample, Occurrences).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230398,"user_id":null,"body":"number_of_occurrences(H,[],0).\nnumber_of_occurrences(H, [H|T], Occurrences) :-\n    number_of_occurrences(H,T,N), !,\n    Occurrences is N + 1.\nnumber_of_occurrences(E, [H|T], Occurrences) :-\n    number_of_occurrences(E,T,Occurrences).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230399,"user_id":null,"body":"number_of_occurrences(X, [], 0) :- !.\nnumber_of_occurrences(X, [X|T], O) :- !, number_of_occurrences(X, T, O1), O is eval(O1 + 1).\nnumber_of_occurrences(X, [_|T], O) :- number_of_occurrences(X, T, O).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230400,"user_id":null,"body":"number_of_occurrences(_, [], Occurrences) :-\n  Occurrences is 0.\n\nnumber_of_occurrences(Element, [Element|T], Occurrences) :-\n  number_of_occurrences(Element, T, NextOccurrences),\n  Occurrences is 1 + NextOccurrences.\n\nnumber_of_occurrences(Element, [_|T], Occurrences) :-\n  number_of_occurrences(Element, T, NextOccurrences),\n  Occurrences is NextOccurrences.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230401,"user_id":null,"body":"number_of_occurrences(_, [], 0) :- !.\nnumber_of_occurrences(Element, [Element|Tail], Occurrences) :- !,\n  number_of_occurrences(Element, Tail, NextOccurrences),\n  Occurrences is NextOccurrences + 1.\nnumber_of_occurrences(Element, [_|Tail], Occurrences) :- !,\n  number_of_occurrences(Element, Tail, Occurrences).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230402,"user_id":null,"body":"number_of_occurrences(Element, [], 0).\nnumber_of_occurrences(Element, A, Occurrences) :- occur(Element, A, Occurrences,0).\n\noccur(E,[H|[]],R,N):-E==H,!, K is N+1, R is K.\noccur(E,[H|[]],R,N):-R is N.\n\noccur(E,[H|T],R,N):- E==H,!, K is N+1,occur(E, T, R, K).\noccur(E,[H|T],R,N):-occur(E,T,R,N).\n\n\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230403,"user_id":null,"body":"number_of_occurrences(_, [], 0).\nnumber_of_occurrences(X, [X|T], R) :- \n  number_of_occurrences(X, T, R1), R is R1 + 1.\nnumber_of_occurrences(X, [H|T], R) :-\n  number_of_occurrences(X, T, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230404,"user_id":null,"body":"number_of_occurrences(_, [], 0).\nnumber_of_occurrences(X, [X|T], R) :- \n  number_of_occurrences(X, T, R1), R is R1 + 1.\nnumber_of_occurrences(X, [H|T], R) :-\n  number_of_occurrences(X, T, R1), R is R1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230405,"user_id":null,"body":"number_of_occurrences(Element, Sample, Occurrences) :-\n  include(=(Element), Sample, Matching),\n  length(Matching, Occurrences).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230406,"user_id":null,"body":"number_of_occurrences(_, [], Occurrences) :-\n    Occurrences is 0.\nnumber_of_occurrences(Element, [Element | T], Occurrences) :-\n    number_of_occurrences(Element, T, O),\n    Occurrences is O + 1.\nnumber_of_occurrences(Element, [_ | T], Occurrences) :-\n    number_of_occurrences(Element, T, Occurrences).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5299413901337c637e000004":[{"id":230407,"user_id":null,"body":"member([X|Tail], X).\nmember([X], X).\nmember([Y|Tail], X) :- member(Tail, X).\n\nget_missing_element(Sequence, Missing) :- between(0, 9, X), \\+member(Sequence, X),\n  Missing is X\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230408,"user_id":null,"body":"find_mem(List, Ct, Res) :-\n    (   member(Ct, List) ->  \n          C is Ct + 1,\n          find_mem(List, C, Res)\n    ;   \n    \tRes is Ct\n    ).\n        \nget_missing_element(Sequence, Missing) :-\n    find_mem(Sequence, 0, Missing).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230409,"user_id":null,"body":"get_missing_element(Sequence, Missing) :-\n  sum_list(Sequence, M),\n  Missing is 45 - M.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230410,"user_id":null,"body":"\n% if elements on same index differ it returns elem from second list\n% with same lists returns -1\ncheck_elems([], [], -1).\ncheck_elems([], [A], A).\ncheck_elems([H1|T1], [H1|T2], R) :-\n  check_elems(T1,T2, R).\ncheck_elems([H1|T1], [H2|T2], H2).\n\nget_missing_element(Sequence, Missing) :-\n  sort(Sequence, SSequence),\n  check_elems(SSequence, [0,1,2,3,4,5,6,7,8,9], Missing).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230411,"user_id":null,"body":"sequence_sum([],0).\n\nsequence_sum([Head|Tail],Sum_of_sequence):-\n    sequence_sum(Tail,Sum_of_sequence1),\n    Sum_of_sequence is Head+Sum_of_sequence1.\n\nget_missing_element(Sequence, Missing) :-\n    Sum is 0+1+2+3+4+5+6+7+8+9,\n    sequence_sum(Sequence,Sum_of_sequence),\n    Missing is Sum-Sum_of_sequence.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230412,"user_id":null,"body":"get_missing_element(Sequence, Missing) :- forEach(Sequence, Missing, 0). \n\n\nforEach(L, Mis, N):- N < 10, find(N, L, R), R =\\= -1,!,K is N+1,  forEach(L,Mis,K).\nforEach(L,Mis,N):-Mis is N.\n\n\nfind(E, [E|T], E):-!.\nfind(E, [H|T], R):-find(E,T,R).\nfind(_,[],R):-R is -1.\n\n\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230413,"user_id":544,"body":"get_missing_element(Sequence, Missing) :-\n  numlist(0, 9, FullSet),\n  subtract(FullSet, Sequence, [Missing]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230414,"user_id":null,"body":"get_missing_element(Sequence, Missing) :-\n    member(Missing, [1,2,3,4,5,6,7,8,9,0]),\n    \\+ member(Missing, Sequence), !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230415,"user_id":null,"body":"get_missing_element(Sequence, N) :- member(N, [1,2,3,4,5,6,7,8,9,0]), not(member(N, Sequence)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230416,"user_id":527,"body":"get_missing_element(Sequence, Missing) :-\n  numlist(0, 9, Range),\n  subtract(Range, Sequence, [Missing]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"52998bf8caa22d98b800003a":[{"id":230417,"user_id":null,"body":"manhattan_distance([A,B], [C,D], Dist) :-\n  Dist is abs(A-C)+abs(B-D).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230418,"user_id":null,"body":"manhattan_distance([Xa, Ya], [Xb, Yb], Dist) :-\n  Dist is abs(Xa - Xb) + abs(Ya - Yb).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230419,"user_id":53,"body":"manhattan_distance([A, B], [C, D], R) :- R is abs(C - A) + abs(D - B).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230420,"user_id":null,"body":"manhattan_distance([A1, A2], [B1, B2], Distance) :- Z0 is abs(A1 - B1), Z1 is abs(A2 - B2), Distance is Z0 + Z1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230421,"user_id":null,"body":"manhattan_distance(L1, L2, R) :-\n    maplist(plus, L1, X, L2),\n    maplist(abs, X, X1),\n    sumlist(X1, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230422,"user_id":544,"body":"manhattan_distance([XA, YA], [XB, YB], Distance) :-\n  Distance is abs(XB - XA) + abs(YB - YA).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230423,"user_id":null,"body":"manhattan_distance([X1,Y1], [X2,Y2], R) :- R is abs(X1-X2) + abs(Y1-Y2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230424,"user_id":null,"body":"manhattan_distance([X1, Y1], [X2, Y2], D) :- D is abs(X1-X2) + abs(Y1-Y2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230425,"user_id":null,"body":"manhattan_distance([X1, Y1], [X2, Y2], Distance) :-\n  Distance is abs(X1 - X2) + abs(Y1 - Y2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230426,"user_id":null,"body":":-use_module(library(lists)).\n\nmanhattan_distance(PointA, PointB, Distance) :-\n  nth0(0,PointA,X1),\n  nth0(1,PointA,Y1),\n  nth0(0,PointB,X2),\n  nth0(1,PointB,Y2),\n  Distance is abs(X1-X2) + abs(Y1-Y2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"529bf0e9bdf7657179000008":[{"id":230427,"user_id":null,"body":":- use_module(library(clpfd)).\n\nvalid_solution(Rows) :-\n  length(Rows, 9), maplist(same_length(Rows), Rows),\n  transpose(Rows, Cols),\n  maplist(maplist(valid), [Rows,Cols]),\n  block(Rows).\n\nvalid(L) :- \n  all_distinct(L),\n  L ins 1..9.\n\nblock([]).\nblock([[],[],[]|L]) :- block(L).\nblock([[A1,A2,A3|As],[B1,B2,B3|Bs],[C1,C2,C3|Cs]|L]) :-\n  valid([A1,A2,A3,B1,B2,B3,C1,C2,C3]),\n  block([As,Bs,Cs|L]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230428,"user_id":null,"body":"% Approach 1\n%\n% Write bespoke functions for rows, columns and squares.\n% Each function will assign a list result with length 9\n% for each of the 9 regions.\n%\n% Approach 2\n%\n% Recognize that rows, columns and squares aren't so\n% different, that X and Y aren't meaningful dimensions,\n% and break the problem into \"indexes\" and \"accesses\".\n%\n%   Phase 1, enumerate the indexes\n%   rows: 0..8, 9..17, ..., 72..80\n%   columns: 0..8 * 9, 0..8 * 9 + 1, ..., 0..8 * 9 + 8\n%   blocks: 0..2 * 9 + 0..2, ..., 27 * 2 + 3 * 2 + 0..2 * 9 + 0..2\n%\n%   Phase 2, interchangeably dereference\n%\n% Approach 3\n%\n% Generalize approach 2, recognizing the shape\n% of the problem by defining a suitable f(region, idx).\n%\n% First pass closed form:\n%   row(region, idx) = region * 9 + idx\n%   column(region, idx) = region + idx * 9\n%   blocks(region, idx) =\n%     (region\/3)*27 + (region%3) * 3 +  -- region\n%     (idx\/3)*9 + idx%3  -- within region\n%\n% Second pass closed form:\n%   A*3^3 + B*3^2 + C*3 + D where A, B, C, D are integers\n%   row    has A=0,        B=region, C=0,        D=idx\n%   column has A=0,        B=idx,    C=0,        D=region\n%   block  has A=region\/3, B=idx\/3,  C=region%3, D=idx%3\n%\n% Third pass closed form:\n%   A*3^3 + B*3^2 + C*3 + D where A, B, C, D are in Z_3\n%   row    has A=region\/3, B=region, C=idx\/3,    D=idx\n%   column has A=idx\/3,    B=idx,    C=region\/3, D=region\n%   block  has A=region\/3, B=idx\/3,  C=region,   D=idx\n\n:- use_module(library(clpfd)).\n\naddress(A, B, C, D, Result) :-\n  Result #= (A mod 3) * 3^3 + (B mod 3) * 3^2 + (C mod 3) * 3 + (D mod 3).\n\nwhere_is(row, Region, Index, Address) :-\n  address(Region \/\/ 3, Region, Index \/\/ 3, Index, Address).\nwhere_is(column, Region, Index, Address) :-\n  address(Index \/\/ 3, Index, Region \/\/ 3, Region, Address).\nwhere_is(block, Region, Index, Address) :-\n  address(Region \/\/ 3, Index \/\/ 3, Region, Index, Address).\n\nat(Xs, I, Ys) :-\n  nth0(I, Xs, Ys).\ndereference(Cells, Addresses, Values) :-\n  maplist(at(Cells), Addresses, Values).\n\nvalid_seq(Seq) :-\n  length(Seq, 9),\n  Seq ins 1..9,\n  all_distinct(Seq).\n  \nvalid_regions(Mat, Result) :-\n  flatten(Mat, Flat),\n  % Sanity check\n  length(Flat, 81),\n  Flat ins 1..9,\n  % Enumerate regions\n  Region in 0..8,\n  indomain(Region),\n  Indexes = [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  maplist(where_is(_, Region), Indexes, Addresses),\n  % Addresses to values\n  dereference(Flat, Addresses, Values),\n  % Is the region a valid sequence?\n  valid_seq(Values).\n\nvalid_solution(Mat) :-\n  findall(R, valid_regions(Mat, R), Rs),\n  length(Rs, 27).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230429,"user_id":null,"body":":- use_module(library(clpfd)).\nvalid_solution(Rows) :-\n  valid_subgrids(Rows),\n  valid_dim(Rows),\n  transpose(Rows, Columns),\n  valid_dim(Columns).\n\nvalid_dim(A) :- maplist(valid_list, A).\nvalid_list(L) :- L ins 0..9, length(L, 9), all_distinct(L).\n  \nc(X,Y,Z) :- call(X, Z, Y).\n\nsublist(1,[X,Y,Z|_],[X,Y,Z]).\nsublist(N, [_,_,_|Xs], R) :- must_be(integer, N), N \\= 0, N0 is N - 1, sublist(N0, Xs, R).\n\nsubgrid(N-M) --> sublist(N), transpose, sublist(M), transpose.\nsubgrids(A, Gs) :- between(1, 3, X), between(1, 3, Y), findall(G, subgrid(X-Y,A,G), Gs).\nvalid_subgrid(G) :- flatten(G,G0), valid_list(G0).\nvalid_subgrids(A) :- subgrids(A, Gs), maplist(valid_subgrid, Gs).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230430,"user_id":76,"body":"% https:\/\/www.metalevel.at\/sudoku\/\n\n:- use_module(library(clpfd)).\n\nvalid_solution(Rows) :-\n  length(Rows, 9),\n  maplist(same_length(Rows), Rows),\n  append(Rows, Vs), Vs ins 1..9,\n  maplist(all_distinct, Rows),\n  transpose(Rows, Columns),\n  maplist(all_distinct, Columns),\n  Rows = [As, Bs, Cs, Ds, Es, Fs, Gs, Hs, Is],\n  blocks(As, Bs, Cs),\n  blocks(Ds, Es, Fs),\n  blocks(Gs, Hs, Is).\n\nblocks([], [], []).\nblocks([N1,N2,N3|Ns1], [N4,N5,N6|Ns2], [N7,N8,N9|Ns3]) :-\n  all_distinct([N1,N2,N3,N4,N5,N6,N7,N8,N9]),\n  blocks(Ns1, Ns2, Ns3).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230431,"user_id":null,"body":":- use_module(library(clpfd)).\n\nvalid_solution(Puzzle) :-\n    flatten(Puzzle, All), All ins 1..9,\n    Rows = Puzzle,\n    transpose(Rows, Columns),\n    blocks(Rows, Blocks),\n    maplist(all_distinct, Rows),\n    maplist(all_distinct, Columns),\n    maplist(all_distinct, Blocks),\n    maplist(label, Rows).\n\nblocks([A,B,C,D,E,F,G,H,I], Blocks) :-\n    blocks(A,B,C,Block1), blocks(D,E,F,Block2), blocks(G,H,I,Block3),\n    append([Block1, Block2, Block3], Blocks).\n\nblocks([], [], [], []).\nblocks([A,B,C|Bs1],[D,E,F|Bs2],[G,H,I|Bs3], [Block|Blocks]) :-\n    Block = [A,B,C,D,E,F,G,H,I],\n    blocks(Bs1, Bs2, Bs3, Blocks).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230432,"user_id":null,"body":":- use_module(library(clpfd)).\n\nlength_(N,L) :- length(L,N).\n\nvalid_solution(Rows) :-\n  length_(9,Rows),\n  maplist(length_(9),Rows),\n  append(Rows,Vals), Vals ins 1..9,\n  maplist(all_distinct,Rows),\n  transpose(Rows,Cols), maplist(all_distinct,Cols),\n  Rows = [R1,R2,R3, R4,R5,R6, R7,R8,R9],\n  ok_square(R1,R2,R3),\n  ok_square(R4,R5,R6),\n  ok_square(R7,R8,R9).\n  \nok_square([],[],[]).\nok_square([A,B,C|R1],[D,E,F|R2],[G,H,I|R3]) :-\n  all_distinct([A,B,C,D,E,F,G,H,I]),\n  ok_square(R1,R2,R3).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230433,"user_id":null,"body":"% Note: this is a good excuse to use the CLPFD library :)\n% - valid_solution should fail when a sudoku is invalid, otherwise it should pass.\nvalid_solution(Rows) :- \n  no_zeroes(Rows),\n  valid_rows(Rows),\n  valid_columns(Rows),\n  valid_blocks(Rows).\n\nno_zeroes(Rows) :-\n  flatten(Rows, Flat),\n  \\+ member(0, Flat).\n  \n  \nvalid_rows([]) :- true.\nvalid_rows(Rows) :-\n  [H|T] = Rows,\n  valid_row(H),\n  valid_rows(T).\n  \nvalid_row(Row) :-\n  sort(Row, Sorted),\n  Sorted == [1,2,3,4,5,6,7,8,9].\n  \nvalid_columns(Rows) :-\n  use_module(library(clpfd)),\n  transpose(Rows, Cols),\n  valid_rows(Cols).\n  \nvalid_blocks(Rows) :-\n  Rows = [R1, R2, R3, R4, R5, R6, R7, R8, R9],\n  validate_blocks(R1, R2, R3),\n  validate_blocks(R4, R5, R6),\n  validate_blocks(R7, R8, R9).\n  \nvalidate_blocks([],[],[]) :- true.\nvalidate_blocks([R11, R12, R13|R1T], [R21, R22, R23|R2T], [R31, R32, R33|R3T]) :-\n  all_distinct([R11, R12, R13, R21, R22, R23, R31, R32, R33]),\n  validate_blocks(R1T, R2T, R3T).\n  \n  \n\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"52f3149496de55aded000410":[{"id":230434,"user_id":null,"body":"sum_digits(0, 0) :- !.\n\nsum_digits(Number, Result) :-\n    N is abs(Number),\n    divmod(N, 10, Q, R),\n    sum_digits(Q, S),\n    Result is S + R.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230435,"user_id":null,"body":"sum_list([], 0).\nsum_list([H|T], Result) :-\n   \tatom_number(H, H1),\n    sum_list(T, Temp),\n    Result is H1 + Temp.\n    \n\nsum_digits(Number, Result) :- \n    N1 is abs(Number),\n    number_chars(N1, X),\n    sum_list(X, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230436,"user_id":544,"body":"sum_digits(N, R) :-\n  NAbs is abs(N),\n  number_chars(NAbs, DigitChars),\n  maplist(atom_number, DigitChars, Digits),\n  sumlist(Digits, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230437,"user_id":null,"body":"sum_digits(X,Y) :-\n    atom_chars(X,Z),\n    delete(Z,-,Z1),\n    p1(Z1,Y).\n\np1([],0).\np1([H|T], R) :-\n    p1(T,R1),\n    atom_number(H,H1),\n    R is R1 + H1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230438,"user_id":527,"body":"sum_digits(0, 0).\nsum_digits(Number, Result) :- Number < 0, N is -Number, sum_digits(N, Result).\nsum_digits(Number, Result) :- divmod(Number, 10, N, D), sum_digits(N, R), Result is R + D.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230439,"user_id":null,"body":"sum_digits(N, R) :- N >= 0, N < 9, R is N.\nsum_digits(N, R) :- \n  (AbsN is N; AbsN is -N), AbsN >= 0, \n  D is AbsN mod 10, N1 is AbsN \/\/ 10,\n  sum_digits(N1, R1), R is D + R1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230440,"user_id":null,"body":"% Store the result inside the 2nd argument\n:- use_module(library(clpfd)).\n\nsum_digits(N,N) :-\n    10 #> N,\n    N #> -1.\nsum_digits(N,R) :-\n    N #< 0,\n    N0 #= abs(N),\n    sum_digits(N0,R).\nsum_digits(N,R) :-\n    N0 #= N \/\/ 10,\n    R0 #= R - mod(N, 10),\n    sum_digits(N0,R0).\n:- use_module(library(clpfd)).\n\nsum_digits(N,N) :-\n    10 #> N,\n    N #> -1.\nsum_digits(N,R) :-\n    N #< 0,\n    N0 #= abs(N),\n    sum_digits(N0,R).\nsum_digits(N,R) :-\n    N0 #= N \/\/ 10,\n    R0 #= R - mod(N, 10),\n    sum_digits(N0,R0).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230441,"user_id":null,"body":"sum_digits(Number, Result) :-\n  abs(Number, Value),\n  digits(Value, Digits),\n  foldl(plus, Digits, 0, Result).\ndigits(N, Digits) :-\n  number_codes(N, Codes),\n  maplist(plus(48), Digits, Codes).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230442,"user_id":null,"body":"sum_digits(Number, Result) :-\n  Abs is abs(Number), % Ignore the sign.\n  atom_chars(Abs, Chars), % Transforms a number (an atom) into list of atoms.\n  maplist(atom_number, Chars, Digits), % Maps atoms to numbers.\n  sumlist(Digits, Result). % Sum the digits.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230443,"user_id":null,"body":"% Store the result inside the 2nd argument\nsum_digits(Number, Result) :-\n  Abs is abs(Number),\n  number_codes(Abs, DigitCodes),\n  maplist(digit_code, Digits, DigitCodes),\n  numbers_sum(Digits, Result).\n  \ndigit_code(N, C) :-\n  number_codes(N, [C]).\n  \nnumbers_sum([], 0).\nnumbers_sum([N | Ns], Sum) :-\n  numbers_sum(Ns, NsSum),\n  Sum is N + NsSum.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"52f787eb172a8b4ae1000a34":[{"id":230444,"user_id":527,"body":"zeros(0, 0).\nzeros(N, Res) :- N1 is N \/\/ 5, zeros(N1, R1), Res is N1 + R1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230445,"user_id":null,"body":"zeros(N, Res) :- zeros(N, 5, 0, Res).\nzeros(N, M, Acc0, Res) :-\n  M =< N,\n  Acc1 is Acc0 + N\/\/M,\n  M1 is M*5,\n  zeros(N, M1, Acc1, Res).\nzeros(_, _, Res, Res).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230446,"user_id":null,"body":"aux(N, V, R) :- V =< N, aux(N, V * 5, Rt), R is N div V + Rt.\naux(N, V, R) :- V > N, R = 0.\nzeros(N, Res) :- aux(N, 5, Res).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230447,"user_id":53,"body":"zeros(0, 0).\nzeros(N, R) :-\n  M is div(N, 5),\n  zeros(M, K), \n  R is M + K.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230448,"user_id":50,"body":"% Store your result inside 2nd argument. Good luck!\nzeros(N, Res) :- N < 5, Res is 0. \nzeros(N, Res) :- A = N \/\/ 5, zeros(A,H), Res is A + H . ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230449,"user_id":168,"body":"zeros(N, Res) :- N < 5, Res = 0.\nzeros(N, Res) :- M is N \/\/ 5, zeros(M, R), Res is M + R.\n\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230450,"user_id":544,"body":"zeros(N, Res) :-\n    div_by_pows_of_5(N, 1, Res).\n\ndiv_by_pows_of_5(N, Power, 0) :-\n    1 > (N \/ (5 ** Power)).\n\ndiv_by_pows_of_5(N, StartPower, Result) :-\n    NextPower is StartPower + 1,\n    div_by_pows_of_5(N, NextPower, NextResult),\n    Result is div(N, (5 ** StartPower)) + NextResult.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230451,"user_id":218,"body":"sum(N, Kmax, Kmax, Res) :- Res is integer(float_integer_part(N \/ (5^Kmax))).\nsum(N, K, Kmax, Res) :- K < Kmax, Knext is K+1, sum(N, Knext, Kmax, R), Res is R + integer(float_integer_part(N \/ (5^K))).\n\nzeros(0, 0).\nzeros(N, Res) :- Kmax is integer(float_integer_part(log(N)\/log(5))), sum(N, 1, Kmax, Res).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230452,"user_id":null,"body":"zeros(0, 0).\nzeros(N, Res) :-\n  Kmax is floor(log10(N) \/ log10(5)),\n  bagof(K, between(1, Kmax, K), Ks),\n  maplist({N}\/[X, R]>>(R is floor(N \/ (5 ^ X))), Ks, ToSum),\n  sum_list(ToSum, Res).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230453,"user_id":564,"body":"zeros(0, 0).\nzeros(A, Zs) :-\n  B is div(A, 5),\n  AZs is B,\n  zeros(B, BZs),\n  Zs is AZs + BZs.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5300901726d12b80e8000498":[{"id":230454,"user_id":null,"body":"fizzbuzzer(N, \"FizzBuzz\") :- 0 is N mod 15.\nfizzbuzzer(N, \"Fizz\") :- 0 is N mod 3.\nfizzbuzzer(N, \"Buzz\") :- 0 is N mod 5.\nfizzbuzzer(N, N).\n\nfizzify(0, []).\nfizzify(N, Result) :-\n  N > 0,\n  numlist(1, N, List),\n  maplist(fizzbuzzer, List, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230455,"user_id":null,"body":"fizzify(N, Result) :-\n  findall(R,(between(1,N,X), Z is gcd(15,X), member(Z-R,[1-X,3-\"Fizz\",5-\"Buzz\",15-\"FizzBuzz\"])),Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230456,"user_id":null,"body":"fizz(R, \"FizzBuzz\") :- 0 is R mod 15, !.\nfizz(R, \"Fizz\") :- 0 is R mod 3, !.\nfizz(R, \"Buzz\") :- 0 is R mod 5, !.\nfizz(R, R) :- !.\n\nfizzify(N, Result) :- findall(Y, (between(1, N, X), fizz(X,Y)), Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230457,"user_id":null,"body":"fizzify(N,Result) :-\n    fizzify(1,N,Result).\n\n% Predicates if the current iterator is the same as the maximumu value\nfizzify(I,I,[K]) :-\n    0 is I mod 3,\n    0 is I mod 5,\n    K = \"FizzBuzz\",!.\nfizzify(I,I,[K]) :-\n    0 is I mod 3,\n    K = \"Fizz\",!.\nfizzify(I,I,[K]) :-\n    0 is I mod 5,\n    K = \"Buzz\",!.\nfizzify(I,I,[I]) :-\n    !.\n\n% Predicates if the current iterator is not the same as the maximum value\nfizzify(I,N,[K|KS]) :-\n    0 is I mod 3,\n    0 is I mod 5,\n    K = \"FizzBuzz\",\n    NI is I + 1,\n    fizzify(NI,N,KS).\nfizzify(I,N,[K|KS]) :-\n    0 is I mod 3,\n    K = \"Fizz\",\n    NI is I + 1,\n    fizzify(NI,N,KS).\nfizzify(I,N,[K|KS]) :-\n    0 is I mod 5,\n    K = \"Buzz\",\n    NI is I + 1,\n    fizzify(NI,N,KS).\nfizzify(I,N,[I|KS]) :-\n    NI is I + 1,\n    fizzify(NI,N,KS),\n    !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230458,"user_id":null,"body":"replace(X, \"FizzBuzz\") :- M  is X mod 3, M2 is X mod 5, M =:= 0, M2 =:= 0.\nreplace(X, \"Fizz\") :- M is X mod 3, M =:= 0.\nreplace(X, \"Buzz\") :- M is X mod 5, M =:= 0.\nreplace(X, X).\n\nfizzify(N, R) :- f(1, N, R).\n\nf(N,N,[R]) :- replace(N, R).\nf(I,N,[HR|TR]) :- replace(I, HR), I1 is I+1, f(I1, N, TR).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230459,"user_id":null,"body":"fizzify(N, Result) :-map(N, [], Result).\n\nmap(N, A, R):- N > 0, !, K is N-1, X1 is N mod 3, X2 is N mod 5, fizzB(X1, X2, S, N), map(K, [S|A], R).\nmap(N, A, R):- R = A.\n\n\nfizzB(0,0, \"FizzBuzz\",_):-!.\nfizzB(0, _, \"Fizz\",_):-!.\nfizzB(_, 0, \"Buzz\" ,_):-!.\nfizzB(_,_, T,T):-!.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230460,"user_id":null,"body":"fizzify(N, Result) :-\n  N1 is N + 1,\n  fill_arr(N1, 1, Result).\n\nfill_arr(1, 1, [1]) :- !.\nfill_arr(N, N, []) :- !.\nfill_arr(N, Act, [Value|L]) :-\n  Next is Act + 1,\n  fill_arr(N, Next, L),\n  ((0 is mod(Act,3), 0 is mod(Act,5), !, Value=\"FizzBuzz\");\n    ((0 is mod(Act, 3), !, Value=\"Fizz\");\n    ((0 is mod(Act,5), !, Value=\"Buzz\");(Value is Act)))).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230461,"user_id":544,"body":"fizzify(N, Result) :-\n    numlist(1, N, Ns),\n    maplist(fizz_n, Ns, Result).\n\nfizz_n(N, R) :-\n    0 is N mod 15, R = \"FizzBuzz\";\n    0 is N mod 5, R = \"Buzz\";\n    0 is N mod 3, R = \"Fizz\";\n    R = N.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230462,"user_id":null,"body":"fizzify(N, L) :-\n  findall(X, (between(1, N, K), fb(K, X)), L).\n\nfb(K, A) :- 0 is K mod 15, !, A = \"FizzBuzz\".\nfb(K, A) :- 0 is K mod 3, !, A = \"Fizz\".\nfb(K, A) :- 0 is K mod 5, !, A = \"Buzz\".\nfb(K, K).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230463,"user_id":527,"body":"fizzbuzz(X, Result) :-\n  X mod 15 =:= 0 -> Result = \"FizzBuzz\" ;\n  X mod 3 =:= 0 -> Result = \"Fizz\" ;\n  X mod 5 =:= 0 -> Result = \"Buzz\" ;\n  Result = X.\n\nfizzify(N, Result) :-\n  numlist(1, N, Xs),\n  maplist(fizzbuzz, Xs, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"53369039d7ab3ac506000467":[{"id":230464,"user_id":76,"body":"bool_to_word(true, 'Yes').\nbool_to_word(false, 'No').","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230465,"user_id":53,"body":"bool_to_word(B, R) :-\n  (B ->\n      R = 'Yes'\n    ;\n      R = 'No'\n    ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230466,"user_id":null,"body":"bool_to_word(true, Ans) :- Ans = 'Yes'.\nbool_to_word(false, Ans) :- Ans = 'No'.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230467,"user_id":null,"body":"bool_to_word(false, N) :- N = 'No'.\nbool_to_word(true, Y) :- Y = 'Yes'.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230468,"user_id":null,"body":"bool_to_word(true, 'Yes').\nbool_to_word(_,'No').","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230469,"user_id":null,"body":"bool_to_word(B, R) :- \n  (B == true) -> R = 'Yes'; R = 'No'.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230470,"user_id":null,"body":"bool_to_word(B,V):-B=true,!,V='Yes'.\nbool_to_word(_,V):-V='No'.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230471,"user_id":null,"body":"bool_to_word(X,'Yes') :- X.\nbool_to_word(X,'No').","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230472,"user_id":null,"body":"bool_to_word(X,Y) :- (X = true)-> Y = 'Yes'; Y = 'No'.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230473,"user_id":null,"body":"bool_to_word(X, Y) :- \n  (X -> Y = 'Yes'; Y = 'No').","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"536c00e21da4dc0a0700128b":[{"id":230474,"user_id":null,"body":"get_villain_name(date(_, M, D, _, _, _, _, _, _), Res) :-FirstNames = [\"Evil\", \"Vile\", \"Cruel\", \"Trashy\", \"Despicable\", \"Embarrassing\", \"Disreputable\", \"Atrocious\", \"Twirling\", \"Orange\", \"Terrifying\", \"Awkward\"],\n  LastNames = [\"Mustache\", \"Pickle\", \"Hood Ornament\", \"Raisin\", \"Recycling Bin\", \"Potato\", \"Tomato\", \"House Cat\", \"Teaspoon\", \"Laundry Basket\"],\n  get_item(FirstNames, M-1, R1),D1 is D mod 10, get_item(LastNames, D1, R2), concat(R1, R2, Name), concat(\"The\", Name, Res1), atom_string(Res1, Res).\n\n \nconcat(S1, S2, Res):-name(S1,L1),name(S2, L2), conc(L1, [32|L2],R), name(Res, R).\nconc([], S2, S2).\nconc([H|T], S2, [H|R]):- conc(T, S2, R).\n\nget_item([_|I], N, R):- N > 0,!, T is N-1, get_item(I, T, R). \nget_item([I|_],_,I).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230475,"user_id":218,"body":"elem_by_index([Head | _], 0, Head).\nelem_by_index([Head | Tail], Index, Result) :-\n  NewIndex is Index - 1,\n  elem_by_index(Tail, NewIndex, Result)\n.\n\nget_villain_name(Birthday, VillainName) :-\n  FirstNames = [\"Evil\", \"Vile\", \"Cruel\", \"Trashy\", \"Despicable\", \"Embarrassing\", \"Disreputable\", \"Atrocious\", \"Twirling\", \"Orange\", \"Terrifying\", \"Awkward\"],\n  LastNames = [\"Mustache\", \"Pickle\", \"Hood Ornament\", \"Raisin\", \"Recycling Bin\", \"Potato\", \"Tomato\", \"House Cat\", \"Teaspoon\", \"Laundry Basket\"],\n  Birthday = date(_, X, Y, _, _, _, _, _, _),\n  XX is X - 1,\n  YY is Y mod 10,\n  elem_by_index(FirstNames, XX, FN),\n  elem_by_index(LastNames, YY, LN),\n  string_concat(\"The \", FN, R1),\n  string_concat(R1, \" \", R2),\n  string_concat(R2, LN, VillainName)\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230476,"user_id":544,"body":"get_villain_name(Birthday, VillainName) :-\n  FirstNames = [\"Evil\", \"Vile\", \"Cruel\", \"Trashy\", \"Despicable\", \"Embarrassing\", \"Disreputable\", \"Atrocious\", \"Twirling\", \"Orange\", \"Terrifying\", \"Awkward\"],\n  LastNames = [\"Mustache\", \"Pickle\", \"Hood Ornament\", \"Raisin\", \"Recycling Bin\", \"Potato\", \"Tomato\", \"House Cat\", \"Teaspoon\", \"Laundry Basket\"],\n  date_time_value(month, Birthday, Month),\n  date_time_value(day, Birthday, Day),\n  DayDigit is Day mod 10,\n  nth1(Month, FirstNames, MyFirstName),\n  nth0(DayDigit, LastNames, MyLastName),\n  format(string(VillainName), 'The ~a ~a', [MyFirstName, MyLastName]).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230477,"user_id":null,"body":"get_villain_name(Birthday, VillainName) :-\n  FirstNames = [\"Evil\", \"Vile\", \"Cruel\", \"Trashy\", \"Despicable\", \"Embarrassing\", \"Disreputable\", \"Atrocious\", \"Twirling\", \"Orange\", \"Terrifying\", \"Awkward\"],\n  LastNames = [\"Mustache\", \"Pickle\", \"Hood Ornament\", \"Raisin\", \"Recycling Bin\", \"Potato\", \"Tomato\", \"House Cat\", \"Teaspoon\", \"Laundry Basket\"],\n  date_time_value(month, Birthday, Month),\n  date_time_value(day, Birthday, Day),\n  Day1 is Day mod 10,\n  nth1(Month, FirstNames, Given),\n  nth0(Day1, LastNames, Surname),\n  format(string(VillainName), 'The ~a ~a', [Given, Surname]).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230478,"user_id":76,"body":"get_villain_name(Birthday, VillainName) :-\n  FirstNames = [\"Evil\", \"Vile\", \"Cruel\", \"Trashy\", \"Despicable\", \"Embarrassing\", \"Disreputable\", \"Atrocious\", \"Twirling\", \"Orange\", \"Terrifying\", \"Awkward\"],\n  LastNames = [\"Mustache\", \"Pickle\", \"Hood Ornament\", \"Raisin\", \"Recycling Bin\", \"Potato\", \"Tomato\", \"House Cat\", \"Teaspoon\", \"Laundry Basket\"],\n  date_time_value(month, Birthday, Month),\n  date_time_value(day, Birthday, Day),\n  DayLastDigit is Day mod 10,\n  nth1(Month, FirstNames, FirstName),\n  nth0(DayLastDigit, LastNames, LastName),\n  format(string(VillainName), \"The ~w ~w\", [FirstName, LastName]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"53ee5429ba190077850011d4":[{"id":230479,"user_id":76,"body":"double_integer(Number, Result) :- Result is Number * 2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230480,"user_id":564,"body":"double_integer(N, R) :- R is 2 * N.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230481,"user_id":null,"body":"% double the Number and store it in Result\ndouble_integer(Number, Result) :- Result is 2 * Number.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230482,"user_id":null,"body":"double_integer(N, N1) :- N1 is N << 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230483,"user_id":null,"body":"double_integer(Number, Result) :- Result is 2*Number.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230484,"user_id":null,"body":"% double the Number and store it in Result\ndouble_integer(N, R) :- R is 2 * N.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230485,"user_id":null,"body":"% double the Number and store it in Result\ndouble_integer(Number, Result) :- Result is Number * 2.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230486,"user_id":null,"body":"% double the Number and store it in Result\ndouble_integer(Num, Rlt) :- \n  Rlt is Num * 2.\n\n\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230487,"user_id":53,"body":"double_integer(N, Result) :- Result is N+N.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230488,"user_id":null,"body":"% double the Number and store it in Result\ndouble_integer(Number, Result) :- Result is Number+Number.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"541c8630095125aba6000c00":[{"id":230489,"user_id":527,"body":"digital_root(N, Result) :- Result is (N - 1) rem 9 + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230490,"user_id":null,"body":"% Store the result inside 2nd argument. Good luck!\ndigital_root(N, Result) :- Result is 1 + (N - 1) rem 9.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230491,"user_id":53,"body":"digital_root(N, R) :- R is rem(N - 1, 9) + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230492,"user_id":null,"body":"digital_root(N, N) :-\n  N < 10.\n\ndigital_root(N, Result) :-\n  number_chars(N, ListChars),\n  maplist(atom_number,ListChars,ListNumbers),\n  sumlist(ListNumbers,Result2),\n  digital_root(Result2, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230493,"user_id":168,"body":"% Store the result inside 2nd argument. Good luck!\ndigital_root(0, 0).\ndigital_root(N, Result) :- N > 0, Result is (N - 1) mod 9 + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230494,"user_id":null,"body":"digital_root(N, Result) :-\n  N >= 10,\n  number_chars(N, Chars),\n  maplist(atom_number, Chars, Digits),\n  sum_list(Digits, Sum),\n  digital_root(Sum, Result).\ndigital_root(N, N) :- N < 10.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230495,"user_id":null,"body":"digital_root(N, Digit) :-\n  number_digits(N, [Digit]).\n  \ndigital_root(N0, Root) :-\n  number_digits(N0, Digits),\n  sumlist(Digits, N1),\n  digital_root(N1, Root).\n\n\nnumber_digits(N, Ds) :-\n  atom_chars(N, Cs),\n  maplist(atom_number, Cs, Ds).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230496,"user_id":null,"body":":- use_module(library(dcg\/basics)).\ndigital_root(N, Result) :- \n  digits_sum(N, Curr),\n  (Curr>9 -> digital_root(Curr, Result) ; Result=Curr).\n\ndigits_sum(A,R) :-\n  string_chars(A,As),\n  phrase(digits(As),Bs,[]),\n  maplist(atom_number,Bs,Ns),\n  sumlist(Ns,R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230497,"user_id":null,"body":"% Store the result inside 2nd argument. Good luck!\ndigital_root_acc(0, Result, Acc) :-\n  (Acc >= 10 ->\n    digital_root_acc(Acc, Result, 0)\n  ;\n    Result is Acc\n  ).\ndigital_root_acc(N, Result, Acc) :-\n  (N < 10 ->\n    digital_root_acc(0, Result, Acc+N)\n  ;N >= 10 ->\n    A is N mod 10,\n    N2 is (N - A)\/10,\n    digital_root_acc(N2, Result, Acc+A)\n  ).\n\ndigital_root(N, Result) :- digital_root_acc(N, Result, 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230498,"user_id":null,"body":"digital_root(N, Result) :- \n  N > 9, !,\n  getDigits(N, DigitsList),\n  sumList(DigitsList, RR),\n  digital_root(RR, Result).\ndigital_root(N, N).\n\ngetDigits([], []).\ngetDigits(X, R) :-\n  number_chars(X, XL),\n  stringListToNumbers(XL, R).\n\nstringListToNumbers([], []).\nstringListToNumbers([H|T], [D|R]) :-\n   atom_number(H, D),\n   stringListToNumbers(T, R).\n   \nsumList([], 0).\nsumList([X], X).\nsumList([H|T], R) :- sumList(T, RR), R is RR + H.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"542c0f198e077084c0000c2e":[{"id":230499,"user_id":null,"body":"divisors(Number, Result) :-\n  divisors_akk(Number, 1, 0, Result).\nis_divisor(N,D) :- 0 is N mod D.\ndivisors_akk(Number, Div, Akk, Res) :-\n  Div =< Number,\n  is_divisor(Number,Div),\n  AkkN is Akk + 1,\n  DivN is Div + 1,\n  divisors_akk(Number,DivN,AkkN,Res).\n\ndivisors_akk(Number, Div, Akk, Res) :-\n  Div =< Number,\n  DivN is Div + 1,\n  divisors_akk(Number,DivN,Akk,Res).\ndivisors_akk(_,_,R,R).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230500,"user_id":null,"body":"divisors_aux(_, 1, 1):-!.\ndivisors_aux(N, M, R1):-\n  N>=M,\n  N mod M =:= 0,!,\n  M1 is M-1,\n  divisors_aux(N, M1, R),\n  R1 is R+1.\ndivisors_aux(N, M, R):-\n  M1 is M-1,\n  divisors_aux(N,M1,R).\n\ndivisors(Number, Result):-\n  divisors_aux(Number, Number, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230501,"user_id":null,"body":"divisors(1, 1).\ndivisors(Number, Result) :-\n  Number > 1,\n  Max is Number div 2,\n  numlist(1, Max, List),\n  foldl({Number}\/[X, Y, Z]>>(0 is Number mod X -> Z is Y + 1 ; Z is Y), List, 0, Divisors),\n  Result is Divisors + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230502,"user_id":null,"body":"divisors_up_to(_, 0, 0).\ndivisors_up_to(N, M, R) :-\n  N mod M =:= 0,\n  M0 is M - 1,\n  divisors_up_to(N, M0, R0),\n  R is 1 + R0.\ndivisors_up_to(N, M, R) :-\n  N mod M =\\= 0,\n  M0 is M - 1,\n  divisors_up_to(N, M0, R).\n\ndivisors(N, R) :- divisors_up_to(N, N, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230503,"user_id":168,"body":"divisors(Number, Result) :- \n  aggregate_all(count, (between(1, Number, X), mod(Number, X) =:= 0), Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230504,"user_id":null,"body":"divisors(Number, Count) :- \n\tNumber >= 1,\n\tdivisors(Number, 1, 1, Count).\n\n\ndivisors(Number, Number, Count, Count):- !.\ndivisors(Number, N, Count, R) :-\n\t(0 is Number mod N ->\n\t\tsucc(Count, NewCount)\n\t;\n\t\tNewCount is Count\n\t),\n\tsucc(N, NewN),\n\tdivisors(Number, NewN, NewCount, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230505,"user_id":null,"body":"divisors(Number, Result) :- \n  findall(D,(between(1,Number,D),mod(Number,D) =:= 0),Ds),\n  length(Ds,Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230506,"user_id":null,"body":"divisors(Number, Result) :- divisores(Number, 1, R), length(R, Result).\n\ndivisores(N, N, [N]).\ndivisores(N, I, R) :- mod(N,I) =:= 0, NextI is I+1, divisores(N, NextI, X), append([I], X, R).\ndivisores(N, I, R) :- mod(N,I) \\= 0, NextI is I+1, divisores(N, NextI, X), R = X.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230507,"user_id":null,"body":"divs(X, D, R) :-\n  D * D > X, R is 0.\ndivs(X, D, R) :-\n  D * D =< X,\n  (divmod(X, D, _, 0) -> (D =\\= X \/\/ D -> R0 is 2; R0 is 1); R0 is 0),\n  D1 is D + 1, divs(X, D1, R1), R is R0 + R1.\ndivisors(N, R) :- divs(N, 1, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230508,"user_id":null,"body":"helpD(Number, Number, 1).\nhelpD(Number, Div, R) :- Div < Number, M is Number mod Div, M == 0,\n    DD is Div + 1, helpD(Number, DD, Ri), R is Ri+1.\nhelpD(Number, Div, R) :- Div < Number, M is Number mod Div, M \\== 0,\n    DD is Div + 1, helpD(Number, DD, R).\n\ndivisors(Number, Result) :- helpD(Number, 1, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"542f0c36d002f8cd8a0005e5":[{"id":230509,"user_id":527,"body":"last_chair(N, C) :- succ(C, N).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230510,"user_id":53,"body":"last_chair(N, C) :-\n  C is N - 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"54598d1fcbae2ae05200112c":[{"id":230511,"user_id":76,"body":"all(List, Predicate) :- maplist(Predicate, List).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230512,"user_id":null,"body":"all(List, Predicate) :-\n  forall(member(X, List), call(Predicate, X)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230513,"user_id":53,"body":"all(List, Predicate) :-\n  include(Predicate, List, Ls),\n  length(Ls, L1),\n  length(List, L2),\n   L1 =:= L2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230514,"user_id":null,"body":"\nall([], Predicate).\nall([E|List], Predicate) :- \n  call(Predicate,E),\n  all(List, Predicate).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230515,"user_id":null,"body":"all([], _).\nall([H|T], P) :-\n  call(P, H),\n  all(T, P).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230516,"user_id":76,"body":"all([X | Xs], Predicate) :- call(Predicate, X), all(Xs, Predicate).\nall([], _) :- true.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230517,"user_id":null,"body":"all([], _) :- true.\nall([H|Ls], Predicate) :-\n  call(Predicate,H),\n  all(Ls, Predicate).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230518,"user_id":null,"body":"all(List, Predicate) :- forall(member(Element, List), call(Predicate, Element)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230519,"user_id":null,"body":"all([], _) :-\n  true.\n  \nall([H|T], Predicate) :-\n  (call(Predicate, H), all(T, Predicate));\n  false.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230520,"user_id":null,"body":"all([], _) :-\n  true.\nall([X|XS], Predicate) :-\n  call(Predicate, X), all(XS, Predicate).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"545afd0761aa4c3055001386":[{"id":230521,"user_id":53,"body":"take(Arr, N, Result) :- findall(E, (nth1(I, Arr, E), I =< N), Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230522,"user_id":null,"body":"take([], _, []).\ntake(_, 0, []).\ntake([H|T1], N1, [H|T2]) :-\n  N2 is N1 - 1,\n  take(T1, N2, T2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230523,"user_id":null,"body":"take(_, 0, []).\ntake([], _, []).\ntake([H|T], N, [H|R]) :-\n  N > 0,\n  N1 is N - 1,\n  take(T, N1, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230524,"user_id":null,"body":"take(Arr, N, Result) :- (length(Result, N), append(Result, _ , Arr); Result = []),!.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230525,"user_id":null,"body":"% Store result in 3rd argument - Result\ntake([Arr|Rest], N, [Arr|Result]):- N > 0, Next is N-1, take(Rest, Next, Result), !.\ntake(_, 0, []) :- !.\ntake([], _, []) :- !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230526,"user_id":null,"body":"% Store result in 3rd argument - Result\ntake([], _, Result) :- Result = [].\ntake([H|T], N, Result) :- \n    (N > 0 -> \n      Result = [H|T1], N1 is N-1, take(T, N1, T1);\n      Result = []\n    ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230527,"user_id":null,"body":"take([],_,[]).\ntake(_,0,[]).\ntake([X|Xs],N,[X|Rs]) :- M is N-1, take(Xs, M, Rs).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230528,"user_id":null,"body":"% Store result in 3rd argument - Result\ntake([], _, []).\ntake(_, 0, []).\ntake([X|Xs], N, [X|Ys]) :- N1 is N - 1, take(Xs, N1, Ys).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230529,"user_id":null,"body":"% Store result in 3rd argument - Result\ntake(_,0,[]).\ntake([],_,[]).\ntake([X|XS], N, Result) :-\n  M is N - 1,\n  take(XS, M, R),\n  Result = [X|R].","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230530,"user_id":null,"body":"% Store result in 3rd argument - Result\ntake([], N, []).\ntake(_, N, Result) :- N < 1, Result =[].\ntake([H|Arr], N, [H|Result]) :- M is N-1, take(Arr, M, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"545cedaa9943f7fe7b000048":[{"id":230531,"user_id":null,"body":"% predicate detect_pangram\/1 succeeds if `Pangram` is a pangram, as per description.\n% if you see test output in console, it means your implementation for that test is incorrect.\nalphabet(Alpha) :- string_chars(\"abcdefghijklmnopqrstuvwxyz\", Alpha).\ndetect_pangram(Pangram) :-\n  string_lower(Pangram, P0),\n  string_chars(P0, P),\n  alphabet(A),\n  forall(\n    member(Letter, A),\n    member(Letter, P)\n  ).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230532,"user_id":527,"body":"detect_pangram(Pangram) :- \n  string_lower(Pangram, Lower),\n  string_codes(Lower, Chars),\n  subset(`abcdefghijklmnopqrstuvxyz`, Chars).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230533,"user_id":null,"body":"% predicate detect_pangram\/1 succeeds if `Pangram` is a pangram, as per description.\n% if you see test output in console, it means your implementation for that test is incorrect.\ndetect_pangram(Pangram) :- \n    string_lower(Pangram, P),\n    sub_string(P, _, 1, _, \"a\"),\n    sub_string(P, _, 1, _, \"b\"),\n    sub_string(P, _, 1, _, \"c\"),\n    sub_string(P, _, 1, _, \"d\"),\n    sub_string(P, _, 1, _, \"e\"),\n    sub_string(P, _, 1, _, \"f\"),\n    sub_string(P, _, 1, _, \"g\"),\n    sub_string(P, _, 1, _, \"h\"),\n    sub_string(P, _, 1, _, \"i\"),\n    sub_string(P, _, 1, _, \"j\"),\n    sub_string(P, _, 1, _, \"k\"),\n    sub_string(P, _, 1, _, \"l\"),\n    sub_string(P, _, 1, _, \"m\"),\n    sub_string(P, _, 1, _, \"n\"),\n    sub_string(P, _, 1, _, \"o\"),\n    sub_string(P, _, 1, _, \"p\"),\n    sub_string(P, _, 1, _, \"q\"),\n    sub_string(P, _, 1, _, \"r\"),\n    sub_string(P, _, 1, _, \"s\"),\n    sub_string(P, _, 1, _, \"t\"),\n    sub_string(P, _, 1, _, \"u\"),\n    sub_string(P, _, 1, _, \"v\"),\n    sub_string(P, _, 1, _, \"w\"),\n    sub_string(P, _, 1, _, \"x\"),\n    sub_string(P, _, 1, _, \"y\"),\n    sub_string(P, _, 1, _, \"z\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230534,"user_id":168,"body":"detect_pangram(Pangram) :-\n  string_lower(Pangram, S),\n  re_replace(\"[^a-z]\"\/g, \"\", S, S1),\n  string_chars(S1, Xs),\n  list_to_set(Xs, T),\n  length(T, 26).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230535,"user_id":null,"body":"% predicate detect_pangram\/1 succeeds if `Pangram` is a pangram, as per description.\n% if you see test output in console, it means your implementation for that test is incorrect.\n\nelem(C, S) :-\n  sub_string(S, _, _, _, C)\n.\n\nall_elem([], S).\nall_elem([H|T], S) :- elem(H, S), all_elem(T, S).\n\ndetect_pangram(Pangram) :-\n  string_lower(Pangram, LowerCase),\n  string_chars(\"abcdefghijklmnopqrstuvwxyz\", Alpha),\n  all_elem(Alpha, LowerCase)\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230536,"user_id":null,"body":"letters(L) :- string_chars(\"qwertyuiopasdfghjklzxcvbnm\", L).\n\nis_letter(C) :- \n  letters(L),\n  member(C, L).\n\ndetect_pangram(P) :- \n  string_lower(P, L),\n  string_chars(L, PC),\n  list_to_set(PC, DS),\n  include(is_letter, DS, S),\n  length(S, SL),\n  SL is 26.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230537,"user_id":544,"body":"detect_pangram(Pangram) :-\n    string_lower(Pangram, PangramLC),    \n    atom_chars(PangramLC, CharList),\n    include(is_lower, CharList, AlphaList),\n    sort(AlphaList, Sorted),\n    length(Sorted, 26). ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230538,"user_id":null,"body":"detect_pangram(Pangram) :- \n  string_lower(Pangram, LowerCase),\n  string_codes(LowerCase, Codes),\n  forall(between(97,122,Code), member(Code, Codes)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230539,"user_id":null,"body":"detect_pangram(Pangram) :-\n  string_lower(Pangram, Lower),\n  string_codes(Lower, Codes),\n  string_to_list(\"abcdefghijklmnopqrstuvwxyz\", Alphabet),\n  forall(member(C, Alphabet), member(C, Codes))\n.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230540,"user_id":null,"body":"% predicate detect_pangram\/1 succeeds if `Pangram` is a pangram, as per description.\n% if you see test output in console, it means your implementation for that test is incorrect.\ndetect_pangram(Word) :- string_lower(Word, L),\n                    string_chars(L, S),\n                    sort(S, Sorted),\n                    include(is_alpha, Sorted, Alphas), \n                    list_to_set(Alphas, Set),\n                    string_chars(\"abcdefghijklmnopqrstuvwxyz\", Set).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5467e4d82edf8bbf40000155":[{"id":230541,"user_id":527,"body":"descending_order(N, R) :- number_chars(N, Ds), sort(0, @>=, Ds, Es), number_chars(R, Es).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230542,"user_id":null,"body":"descending_order(N, R) :- number_chars(N,C), sort(0,@>=,C,C1), number_chars(R,C1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230543,"user_id":null,"body":"% Store the result inside 2nd argument\ndescending_order(N, Result) :- \n    atom_chars(N,C),\n    msort(C,S),\n    reverse(S,R),\n    atomic_list_concat(R,Converted),\n    atom_number(Converted,Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230544,"user_id":null,"body":"descending_order(N, Result) :-\n\tsplitNumber(N, SplittedNumber),\n\thelper(SplittedNumber, ListResult),\n\tlist_to_num(ListResult, Result).\n\n\nhelper([H], [H]) :- H < 10.\n\nhelper(L, [BiggestNumber | TempResult]) :-\n\tfindBiggestNb(L, BiggestNumber),\n\tselect(BiggestNumber, L, NL),\n\thelper(NL, TempResult).\n\nfindBiggestNb([H], H) :- H < 10.\n\nfindBiggestNb([H | T], Result) :-\n\tfindBiggestNb(T, TempResult),\n\t(\n\tH > TempResult\n\t->\n\tResult is H\n\t;\n\tResult is TempResult\n\t).\n\nsplitNumber(N, SplittedN) :-\n\tnumber_codes(N, X),\n\tmaplist(plus(48), SplittedN, X).\n\nlist_to_num(L, N) :-\n    list_to_num(L, 0, N).\n\nlist_to_num([], A, A).\nlist_to_num([H|T], A, N) :-\n    B is 10*A + H,\n    list_to_num(T, B, N).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230545,"user_id":null,"body":"descending_order(N, Result) :-\n  number_string(N, String),\n  string_codes(String, Codes),\n  sort(0, @>=, Codes, Sorted),\n  string_codes(String1, Sorted),\n  number_string(Result, String1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230546,"user_id":null,"body":"% Store the result inside 2nd argument\ndescending_order(N, Result) :- \n\tnumber_chars(N,X),\n\tsort(0, @=<, X, X1),\n\treverse(X1, List),\n\tatomic_list_concat(List, R),\n\tatom_number(R, Result).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230547,"user_id":null,"body":"% Store the result inside 2nd argument\ndescending_order(N,Result) :-\n    number_codes(N,Cds),\n    sort(0,@>=,Cds,Res1),\n    number_codes(Result,Res1).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230548,"user_id":null,"body":"% Store the result inside 2nd argument\ndescending_order(N, Result) :- \n  number_chars(N, Nchars),\n  sort(0, @>=, Nchars, NcharsSorted),\n  number_chars(Result, NcharsSorted).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230549,"user_id":null,"body":"% Store the result inside 2nd argument\ndescending_order(N, Result) :-\n  number_chars(N, Digits),\n  sort(0, @=<, Digits, DigitsSorted),\n  foldl(string_concat, DigitsSorted, \"\", ResultString),\n  number_string(Result, ResultString).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230550,"user_id":null,"body":"num_to_digits(Num, Digits) :-\n    number_chars(Num, L),\n    maplist(atom_number, L, Digits).\n\ndigits_to_num([H], Num, Res) :-\n    number_chars(H, C),\n    append(Num, C, Res).\n\ndigits_to_num([H|T], Num, Res) :-\n    number_chars(H, C),\n    append(Num, C, R),\n    digits_to_num(T, R, Res).\n\n% Store the result inside 2nd argument\ndescending_order(N, Result) :-\n    num_to_digits(N, Digits),\n    sort(0, @>=, Digits, Sorted),\n    digits_to_num(Sorted, [], X),\n    number_chars(Result, X).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"546e2562b03326a88e000020":[{"id":230551,"user_id":527,"body":"square_digits(0, 0).\nsquare_digits(N, R) :-\n  divmod(N, 10, N1, D),\n  square_digits(N1, R1),\n  (D =< 3 -> M is 10; M is 100),\n  R is R1 * M + D ^ 2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230552,"user_id":null,"body":"square_digits(I,O) :-\n    atom_chars(I,C),\n    g(C,R),\n    atomic_list_concat(R,L),\n    atom_number(L,O).\n\ng([],[]).\ng([H|T],[Y|X2]) :-\n    g(T,X2),\n    atom_number(H,Num),\n    Y is Num * Num.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230553,"user_id":null,"body":"% Store the result inside 2nd argument. Good luck!\nsquare_digits(Number, Result) :- \n  number_chars(Number, Digits),\n  square_digit(Digits, ResultList),\n  concat_list(ResultList, String),\n  atom_number(String, Result).\n  \nsquare_digit([],[]).\nsquare_digit([H|T],[Squared| T2]):-\n  atom_number(H,N),\n  Squared is N*N,\n  square_digit(T,T2).\n\nconcat_list([],\"\").\nconcat_list([N], S):-  number_string(N,S),!.\nconcat_list([N|T],S):-\n  concat_list(T,S2),\n  number_string(N,S1),\n  string_concat(S1,S2,S).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230554,"user_id":76,"body":":- use_module(library(yall)).\n\nsquare_digits(N, Result) :-\n  number_chars(N, Digits), \n  maplist([Num, D] >> (atom_number(Num, C), D is C * C), Digits, Squared),\n  atomic_list_concat(Squared, Str),\n  atom_number(Str, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230555,"user_id":53,"body":"digits(0, []).\ndigits(X, [H|Tail]) :-\n    X > 0,\n    H is mod(X, 10),\n    New is div(X, 10),\n    digits(New, Tail).\n    \nsquare_digits(0, R) :- R = 0. \nsquare_digits(N, R) :- \n  digits(N, Dsr),\n  reverse(Dsr, Ds),\n  maplist([A, U] >> (U is A * A), Ds, Ds2),\n  atomics_to_string(Ds2, S),\n  atom_number(S, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230556,"user_id":null,"body":"% Store the result inside 2nd argument. Good luck!\n\npower_digs([], []).\npower_digs([H|T], [X|Y]) :-\n  atom_number(H, Num),\n  power_digs(T,Y),\n  X is Num*Num.\n  \n\nsquare_digits(N, R) :-\n  number_string(N, S),\n  string_chars(S,C),\n  power_digs(C,Powd),\n  atomic_list_concat(Powd, RAtom),\n  atom_number(RAtom, R).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230557,"user_id":null,"body":"square_digits(Number, Result) :- number_chars(Number, NumberDigits), square_digits(NumberDigits, R), atomics_to_string(R, RR), atom_number(RR, Result).\n\nsquare_digits([], []).\nsquare_digits([H|T], [Square|Rest]) :- square_digits(T, Rest), atom_number(H, Digit), Square is Digit*Digit.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230558,"user_id":null,"body":"sqr(X, R) :- R is X**2.\nnumber_to_chars(N, C) :- number_chars(N, [C]).\nsquare_digits(Number, Result) :-\n    number_chars(Number, Chars),\n    maplist(number_to_chars, CharDigits, Chars),\n    maplist(sqr, CharDigits, SquaredDigits),\n    maplist(number_chars, SquaredDigits, SquaredDigitsChars),\n    flatten(SquaredDigitsChars, FlattenList),\n    atomics_to_string(FlattenList, '', Str),\n    atom_number(Str, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230559,"user_id":null,"body":"% Store the result inside 2nd argument. Good luck!\n\nsquare_digits(0, 0):- !.\n\n\nsquare_digits(Number, Result) :- \n   divmod(Number, 10, Q, R),\n   square_digits(Q, Result2),\n \n   Number2 is R * R,\n\n   number_string(Number2, Number2Str),\n   string_length(Number2Str, TailleNombre),\n   Result is Result2 * 10 ** TailleNombre + Number2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230560,"user_id":null,"body":"list_init_last([X], [], X). \nlist_init_last([X|Xs], [X|Ys], Z) :- list_init_last(Xs, Ys, Z).\n\nint_dig10(I, [D]) :- I < 10, D is I.\nint_dig10(I, S) :- list_init_last(S, Xs, X), X is I mod 10, int_dig10(I div 10, Xs).   \n\nint_undig10_aux([D], D).\nint_undig10_aux([D|Ds], N) :- int_undig10_aux(Ds, V), N is D + 10 * V.  \nint_undig10(Ds, N) :- reverse(Ds, RDs), int_undig10_aux(RDs, N).            \n\nsquare(X, Y) :- Y is X * X.\n\nsquare_digits(N, R) :- int_dig10(N, Ds),\n                        maplist(square, Ds, SDs),\n                        maplist(int_dig10, SDs, SDDs),\n                        append(SDDs, RDs),\n                        int_undig10(RDs, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"54acc128329e634e9a000362":[{"id":230561,"user_id":527,"body":"traverse_tcp_states(Events, FinalState) :-\n  foldl([E, S, T] >> transition(S, E, T), Events, \"CLOSED\", FS)\n  -> FinalState = FS ; FinalState = \"ERROR\".\n\ntransition(\"CLOSED\", \"APP_PASSIVE_OPEN\", \"LISTEN\").\ntransition(\"CLOSED\", \"APP_ACTIVE_OPEN\", \"SYN_SENT\").\ntransition(\"LISTEN\", \"RCV_SYN\", \"SYN_RCVD\").\ntransition(\"LISTEN\", \"APP_SEND\", \"SYN_SENT\").\ntransition(\"LISTEN\", \"APP_CLOSE\", \"CLOSED\").\ntransition(\"SYN_RCVD\", \"APP_CLOSE\", \"FIN_WAIT_1\").\ntransition(\"SYN_RCVD\", \"RCV_ACK\", \"ESTABLISHED\").\ntransition(\"SYN_SENT\", \"RCV_SYN\", \"SYN_RCVD\").\ntransition(\"SYN_SENT\", \"RCV_SYN_ACK\", \"ESTABLISHED\").\ntransition(\"SYN_SENT\", \"APP_CLOSE\", \"CLOSED\").\ntransition(\"ESTABLISHED\", \"APP_CLOSE\", \"FIN_WAIT_1\").\ntransition(\"ESTABLISHED\", \"RCV_FIN\", \"CLOSE_WAIT\").\ntransition(\"FIN_WAIT_1\", \"RCV_FIN\", \"CLOSING\").\ntransition(\"FIN_WAIT_1\", \"RCV_FIN_ACK\", \"TIME_WAIT\").\ntransition(\"FIN_WAIT_1\", \"RCV_ACK\", \"FIN_WAIT_2\").\ntransition(\"CLOSING\", \"RCV_ACK\", \"TIME_WAIT\").\ntransition(\"FIN_WAIT_2\", \"RCV_FIN\", \"TIME_WAIT\").\ntransition(\"TIME_WAIT\", \"APP_TIMEOUT\", \"CLOSED\").\ntransition(\"CLOSE_WAIT\", \"APP_CLOSE\", \"LAST_ACK\").\ntransition(\"LAST_ACK\", \"RCV_ACK\", \"CLOSED\").\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230562,"user_id":null,"body":"traverse_tcp_states(Events, FinalState) :-\n  foldl(process, Events, \"CLOSED\", FinalState).\nprocess(_, \"ERROR\", \"ERROR\").\n\nprocess(\"APP_PASSIVE_OPEN\", \"CLOSED\", \"LISTEN\") :- !.\nprocess(\"APP_ACTIVE_OPEN\", \"CLOSED\", \"SYN_SENT\") :- !.\nprocess(_, \"CLOSED\", \"ERROR\").\n\nprocess(\"RCV_SYN\", \"LISTEN\", \"SYN_RCVD\") :- !.\nprocess(\"APP_SEND\", \"LISTEN\", \"SYN_SENT\") :- !.\nprocess(\"APP_CLOSE\", \"LISTEN\", \"CLOSED\") :- !.\nprocess(_, \"LISTEN\", \"ERROR\").\n\nprocess(\"APP_CLOSE\", \"SYN_RCVD\", \"FIN_WAIT_1\") :- !.\nprocess(\"RCV_ACK\", \"SYN_RCVD\", \"ESTABLISHED\") :- !.\nprocess(_, \"SYN_RCVD\", \"ERROR\").\n\nprocess(\"RCV_SYN\", \"SYN_SENT\", \"SYN_RCVD\") :- !.\nprocess(\"RCV_SYN_ACK\", \"SYN_SENT\", \"ESTABLISHED\") :- !.\nprocess(\"APP_CLOSE\", \"SYN_SENT\", \"CLOSED\") :- !.\nprocess(_, \"SYN_SENT\", \"ERROR\").\n\nprocess(\"APP_CLOSE\", \"ESTABLISHED\", \"FIN_WAIT_1\") :- !.\nprocess(\"RCV_FIN\", \"ESTABLISHED\", \"CLOSE_WAIT\") :- !.\nprocess(_, \"ESTABLISHED\", \"ERROR\").\n\nprocess(\"RCV_FIN\", \"FIN_WAIT_1\", \"CLOSING\") :- !.\nprocess(\"RCV_FIN_ACK\", \"FIN_WAIT_1\", \"TIME_WAIT\") :- !.\nprocess(\"RCV_ACK\", \"FIN_WAIT_1\", \"FIN_WAIT_2\") :- !.\nprocess(_, \"FIN_WAIT_1\", \"ERROR\").\n\nprocess(\"RCV_ACK\", \"CLOSING\", \"TIME_WAIT\") :- !.\nprocess(_, \"CLOSING\", \"ERROR\").\n\nprocess(\"RCV_FIN\", \"FIN_WAIT_2\", \"TIME_WAIT\") :- !.\nprocess(_, \"FIN_WAIT_2\", \"ERROR\").\n\nprocess(\"APP_TIMEOUT\", \"TIME_WAIT\", \"CLOSED\") :- !.\nprocess(_, \"TIME_WAIT\", \"ERROR\").\n\nprocess(\"APP_CLOSE\", \"CLOSE_WAIT\", \"LAST_ACK\") :- !.\nprocess(_, \"CLOSE_WAIT\", \"ERROR\").\n\nprocess(\"RCV_ACK\", \"LAST_ACK\", \"CLOSED\") :- !.\nprocess(_, \"LAST_ACK\", \"ERROR\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230563,"user_id":null,"body":":- op(800, xfy, ??).\n??(A,B) :- A->true;B.\n\ntraverse_tcp_states(Es, Sn) :- foldl(arcfoldl,Es,\"CLOSED\",Sn) ?? Sn=\"ERROR\".\narcfoldl(A,B,C) :- arc(B,A,C).\n\narc(\"CLOSED\",\"APP_PASSIVE_OPEN\",\"LISTEN\").\narc(\"CLOSED\",\"APP_ACTIVE_OPEN\",\"SYN_SENT\").\narc(\"LISTEN\",\"RCV_SYN\",\"SYN_RCVD\").\narc(\"LISTEN\",\"APP_SEND\",\"SYN_SENT\").\narc(\"LISTEN\",\"APP_CLOSE\",\"CLOSED\").\narc(\"SYN_RCVD\",\"APP_CLOSE\",\"FIN_WAIT_1\").\narc(\"SYN_RCVD\",\"RCV_ACK\",\"ESTABLISHED\").\narc(\"SYN_SENT\",\"RCV_SYN\",\"SYN_RCVD\").\narc(\"SYN_SENT\",\"RCV_SYN_ACK\",\"ESTABLISHED\").\narc(\"SYN_SENT\",\"APP_CLOSE\",\"CLOSED\").\narc(\"ESTABLISHED\",\"APP_CLOSE\",\"FIN_WAIT_1\").\narc(\"ESTABLISHED\",\"RCV_FIN\",\"CLOSE_WAIT\").\narc(\"FIN_WAIT_1\",\"RCV_FIN\",\"CLOSING\").\narc(\"FIN_WAIT_1\",\"RCV_FIN_ACK\",\"TIME_WAIT\").\narc(\"FIN_WAIT_1\",\"RCV_ACK\",\"FIN_WAIT_2\").\narc(\"CLOSING\",\"RCV_ACK\",\"TIME_WAIT\").\narc(\"FIN_WAIT_2\",\"RCV_FIN\",\"TIME_WAIT\").\narc(\"TIME_WAIT\",\"APP_TIMEOUT\",\"CLOSED\").\narc(\"CLOSE_WAIT\",\"APP_CLOSE\",\"LAST_ACK\").\narc(\"LAST_ACK\",\"RCV_ACK\",\"CLOSED\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230564,"user_id":null,"body":"transition(\"CLOSED\", \"APP_PASSIVE_OPEN\", \"LISTEN\") :- !.\ntransition(\"CLOSED\", \"APP_ACTIVE_OPEN\", \"SYN_SENT\") :- !.\ntransition(\"LISTEN\", \"RCV_SYN\", \"SYN_RCVD\") :- !.\ntransition(\"LISTEN\", \"APP_SEND\", \"SYN_SENT\") :- !.\ntransition(\"LISTEN\", \"APP_CLOSE\", \"CLOSED\") :- !.\ntransition(\"SYN_RCVD\", \"APP_CLOSE\", \"FIN_WAIT_1\") :- !.\ntransition(\"SYN_RCVD\", \"RCV_ACK\", \"ESTABLISHED\") :- !.\ntransition(\"SYN_SENT\", \"RCV_SYN\", \"SYN_RCVD\") :- !.\ntransition(\"SYN_SENT\", \"RCV_SYN_ACK\", \"ESTABLISHED\") :- !.\ntransition(\"SYN_SENT\", \"APP_CLOSE\", \"CLOSED\") :- !.\ntransition(\"ESTABLISHED\", \"APP_CLOSE\", \"FIN_WAIT_1\") :- !.\ntransition(\"ESTABLISHED\", \"RCV_FIN\", \"CLOSE_WAIT\") :- !.\ntransition(\"FIN_WAIT_1\", \"RCV_FIN\", \"CLOSING\") :- !.\ntransition(\"FIN_WAIT_1\", \"RCV_FIN_ACK\", \"TIME_WAIT\") :- !.\ntransition(\"FIN_WAIT_1\", \"RCV_ACK\", \"FIN_WAIT_2\") :- !.\ntransition(\"CLOSING\", \"RCV_ACK\", \"TIME_WAIT\") :- !.\ntransition(\"FIN_WAIT_2\", \"RCV_FIN\", \"TIME_WAIT\") :- !.\ntransition(\"TIME_WAIT\", \"APP_TIMEOUT\", \"CLOSED\") :- !.\ntransition(\"CLOSE_WAIT\", \"APP_CLOSE\", \"LAST_ACK\") :- !.\ntransition(\"LAST_ACK\", \"RCV_ACK\", \"CLOSED\") :- !.\ntransition(_, _, \"ERROR\") :- !.\n\ntraverse_tcp_states([], FinalState, FinalState).\ntraverse_tcp_states([Event | Events], State, FinalState) :-\n  transition(State, Event, NewState),\n  traverse_tcp_states(Events, NewState, FinalState).\n\ntraverse_tcp_states(Events, FinalState) :-\n  traverse_tcp_states(Events, \"CLOSED\", FinalState).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230565,"user_id":null,"body":"%!  traverse_tcp_states(+Events:list, -FinalState:string) is det.\n%\n%   FinalState is the state reached by starting at \"CLOSED\" and traversing\n%   the path represented by Events in the graph representation of the TCP FSM.\ntraverse_tcp_states(Events, FinalState) :-\n  traverse_tcp_states(Events, \"CLOSED\", FinalState).\n\n%!  traverse_tcp_states(+Events:list, +Current:string, -Final:string) is det.\n%\n%   True if Final is one of \"ERROR\" or the state reached by starting at\n%   Current and traversing the path represented by Events in the graph\ntraverse_tcp_states([E|Events], Current, Final) :-\n     tcp_state_transition(E, Current, Next)\n  -> traverse_tcp_states(Events, Next, Final)\n  ;  Final = \"ERROR\".\ntraverse_tcp_states([], Current, Current).\n\n%!  tcp_state_transition(+Event:string, +CurrentState:string, -NextState:string) is semidet.\n%!  tcp_state_transition(?Event:string, ?CurrentState:string, ?NextState:string) is nondet.\n%\n%   True iff there is an edge from CurrentState to NextState labeled Event in the\n%   graph representation of the TCP FSM.\ntcp_state_transition(\"APP_PASSIVE_OPEN\",  \"CLOSED\",       \"LISTEN\").\ntcp_state_transition(\"APP_ACTIVE_OPEN\",   \"CLOSED\",       \"SYN_SENT\").\ntcp_state_transition(\"RCV_SYN\",           \"LISTEN\",       \"SYN_RCVD\").\ntcp_state_transition(\"APP_SEND\",          \"LISTEN\",       \"SYN_SENT\").\ntcp_state_transition(\"APP_CLOSE\",         \"LISTEN\",       \"CLOSED\").\ntcp_state_transition(\"APP_CLOSE\",         \"SYN_RCVD\",     \"FIN_WAIT_1\").\ntcp_state_transition(\"RCV_ACK\",           \"SYN_RCVD\",     \"ESTABLISHED\").\ntcp_state_transition(\"RCV_SYN\",           \"SYN_SENT\",     \"SYN_RCVD\").\ntcp_state_transition(\"RCV_SYN_ACK\",       \"SYN_SENT\",     \"ESTABLISHED\").\ntcp_state_transition(\"APP_CLOSE\",         \"SYN_SENT\",     \"CLOSED\").\ntcp_state_transition(\"APP_CLOSE\",         \"ESTABLISHED\",  \"FIN_WAIT_1\").\ntcp_state_transition(\"RCV_FIN\",           \"ESTABLISHED\",  \"CLOSE_WAIT\").\ntcp_state_transition(\"RCV_FIN\",           \"FIN_WAIT_1\",   \"CLOSING\").\ntcp_state_transition(\"RCV_FIN_ACK\",       \"FIN_WAIT_1\",   \"TIME_WAIT\").\ntcp_state_transition(\"RCV_ACK\",           \"FIN_WAIT_1\",   \"FIN_WAIT_2\").\ntcp_state_transition(\"RCV_ACK\",           \"CLOSING\",      \"TIME_WAIT\").\ntcp_state_transition(\"RCV_FIN\",           \"FIN_WAIT_2\",   \"TIME_WAIT\").\ntcp_state_transition(\"APP_TIMEOUT\",       \"TIME_WAIT\",    \"CLOSED\").\ntcp_state_transition(\"APP_CLOSE\",         \"CLOSE_WAIT\",   \"LAST_ACK\").\ntcp_state_transition(\"RCV_ACK\",           \"LAST_ACK\",     \"CLOSED\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230566,"user_id":null,"body":"state_transfer(\"CLOSED\", \"APP_PASSIVE_OPEN\",  \"LISTEN\").\nstate_transfer(\"CLOSED\", \"APP_ACTIVE_OPEN\",   \"SYN_SENT\").\nstate_transfer(\"LISTEN\", \"RCV_SYN\",           \"SYN_RCVD\").\nstate_transfer(\"LISTEN\", \"APP_SEND\",          \"SYN_SENT\").\nstate_transfer(\"LISTEN\", \"APP_CLOSE\",         \"CLOSED\").\nstate_transfer(\"SYN_RCVD\", \"APP_CLOSE\",       \"FIN_WAIT_1\").\nstate_transfer(\"SYN_RCVD\", \"RCV_ACK\",         \"ESTABLISHED\").\nstate_transfer(\"SYN_SENT\", \"RCV_SYN\",         \"SYN_RCVD\").\nstate_transfer(\"SYN_SENT\", \"RCV_SYN_ACK\",     \"ESTABLISHED\").\nstate_transfer(\"SYN_SENT\", \"APP_CLOSE\",       \"CLOSED\").\nstate_transfer(\"ESTABLISHED\", \"APP_CLOSE\",    \"FIN_WAIT_1\").\nstate_transfer(\"ESTABLISHED\", \"RCV_FIN\",      \"CLOSE_WAIT\").\nstate_transfer(\"FIN_WAIT_1\", \"RCV_FIN\",       \"CLOSING\").\nstate_transfer(\"FIN_WAIT_1\", \"RCV_FIN_ACK\",   \"TIME_WAIT\").\nstate_transfer(\"FIN_WAIT_1\", \"RCV_ACK\",       \"FIN_WAIT_2\").\nstate_transfer(\"CLOSING\", \"RCV_ACK\",          \"TIME_WAIT\").\nstate_transfer(\"FIN_WAIT_2\", \"RCV_FIN\",       \"TIME_WAIT\").\nstate_transfer(\"TIME_WAIT\", \"APP_TIMEOUT\",    \"CLOSED\").\nstate_transfer(\"CLOSE_WAIT\", \"APP_CLOSE\",     \"LAST_ACK\").\nstate_transfer(\"LAST_ACK\", \"RCV_ACK\",         \"CLOSED\").\n\ntransfer(State, [], State).\ntransfer(State, [Event|Events], FinalState) :-\n    state_transfer(State, Event, NewState), \n    !,\n    transfer(NewState, Events, FinalState).\n\ntraverse_tcp_states(Events, FinalState) :-\n  transfer(\"CLOSED\", Events, FinalState), !.\ntraverse_tcp_states(_, \"ERROR\").\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230567,"user_id":null,"body":"fsm(\"CLOSED\", \"APP_PASSIVE_OPEN\", \"LISTEN\").  \nfsm(\"CLOSED\", \"APP_ACTIVE_OPEN\", \"SYN_SENT\").  \nfsm(\"LISTEN\", \"RCV_SYN\", \"SYN_RCVD\").  \nfsm(\"LISTEN\", \"APP_SEND\", \"SYN_SENT\").  \nfsm(\"LISTEN\", \"APP_CLOSE\", \"CLOSED\").  \nfsm(\"SYN_RCVD\", \"APP_CLOSE\", \"FIN_WAIT_1\").  \nfsm(\"SYN_RCVD\", \"RCV_ACK\", \"ESTABLISHED\").  \nfsm(\"SYN_SENT\", \"RCV_SYN\", \"SYN_RCVD\").  \nfsm(\"SYN_SENT\", \"RCV_SYN_ACK\", \"ESTABLISHED\").  \nfsm(\"SYN_SENT\", \"APP_CLOSE\", \"CLOSED\").  \nfsm(\"ESTABLISHED\", \"APP_CLOSE\", \"FIN_WAIT_1\").  \nfsm(\"ESTABLISHED\", \"RCV_FIN\", \"CLOSE_WAIT\").  \nfsm(\"FIN_WAIT_1\", \"RCV_FIN\", \"CLOSING\").  \nfsm(\"FIN_WAIT_1\", \"RCV_FIN_ACK\", \"TIME_WAIT\").  \nfsm(\"FIN_WAIT_1\", \"RCV_ACK\", \"FIN_WAIT_2\").  \nfsm(\"CLOSING\", \"RCV_ACK\", \"TIME_WAIT\").  \nfsm(\"FIN_WAIT_2\", \"RCV_FIN\", \"TIME_WAIT\").  \nfsm(\"TIME_WAIT\", \"APP_TIMEOUT\", \"CLOSED\").  \nfsm(\"CLOSE_WAIT\", \"APP_CLOSE\", \"LAST_ACK\").  \nfsm(\"LAST_ACK\", \"RCV_ACK\", \"CLOSED\").  \n\nfsm_run(St1, [], St1).\nfsm_run(St1, [Ev|Evs], Stn) :- fsm(St1, Ev, St2), fsm_run(St2, Evs, Stn). \nfsm_run(St1, [Ev|_  ], Stn) :- \\+ fsm(St1, Ev, _), Stn = \"ERROR\".\n\ntraverse_tcp_states(Evs, Sf) :- fsm_run(\"CLOSED\", Evs, Sf).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230568,"user_id":168,"body":"go(\"APP_PASSIVE_OPEN\", \"CLOSED\", \"LISTEN\").\ngo(\"APP_ACTIVE_OPEN\", \"CLOSED\", \"SYN_SENT\").\ngo(\"RCV_SYN\", \"LISTEN\", \"SYN_RCVD\").\ngo(\"APP_SEND\", \"LISTEN\", \"SYN_SENT\").\ngo(\"APP_CLOSE\", \"LISTEN\", \"CLOSED\").\ngo(\"APP_CLOSE\", \"SYN_RCVD\", \"FIN_WAIT_1\").\ngo(\"RCV_ACK\", \"SYN_RCVD\", \"ESTABLISHED\").\ngo(\"RCV_SYN\", \"SYN_SENT\", \"SYN_RCVD\").\ngo(\"RCV_SYN_ACK\", \"SYN_SENT\", \"ESTABLISHED\").\ngo(\"APP_CLOSE\", \"SYN_SENT\", \"CLOSED\").\ngo(\"APP_CLOSE\", \"ESTABLISHED\", \"FIN_WAIT_1\").\ngo(\"RCV_FIN\", \"ESTABLISHED\", \"CLOSE_WAIT\").\ngo(\"RCV_FIN\", \"FIN_WAIT_1\", \"CLOSING\").\ngo(\"RCV_FIN_ACK\", \"FIN_WAIT_1\", \"TIME_WAIT\").\ngo(\"RCV_ACK\", \"FIN_WAIT_1\", \"FIN_WAIT_2\").\ngo(\"RCV_ACK\", \"CLOSING\", \"TIME_WAIT\").\ngo(\"RCV_FIN\", \"FIN_WAIT_2\", \"TIME_WAIT\").\ngo(\"APP_TIMEOUT\", \"TIME_WAIT\", \"CLOSED\").\ngo(\"APP_CLOSE\", \"CLOSE_WAIT\", \"LAST_ACK\").\ngo(\"RCV_ACK\", \"LAST_ACK\", \"CLOSED\").\n\ntraverse_tcp_states(Events, FinalState) :- foldl(go, Events, \"CLOSED\", FinalState), !.\ntraverse_tcp_states(_, \"ERROR\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230569,"user_id":535,"body":"traverse_tcp_states(Events, FinalState) :-\n  traverse_tcp_states(\"CLOSED\", Events, FinalState).\n\ntraverse_tcp_states(State, [], State).\ntraverse_tcp_states(State, [Event|Events], FinalState) :-\n  once(action(State, Event, NextState)),\n  traverse_tcp_states(NextState, Events, FinalState).\n\naction(\"CLOSED\", \"APP_PASSIVE_OPEN\", \"LISTEN\").\naction(\"CLOSED\", \"APP_ACTIVE_OPEN\", \"SYN_SENT\").\naction(\"LISTEN\", \"RCV_SYN\", \"SYN_RCVD\").\naction(\"LISTEN\", \"APP_SEND\", \"SYN_SENT\").\naction(\"LISTEN\", \"APP_CLOSE\", \"CLOSED\").\naction(\"SYN_RCVD\", \"APP_CLOSE\", \"FIN_WAIT_1\").\naction(\"SYN_RCVD\", \"RCV_ACK\", \"ESTABLISHED\").\naction(\"SYN_SENT\", \"RCV_SYN\", \"SYN_RCVD\").\naction(\"SYN_SENT\", \"RCV_SYN_ACK\", \"ESTABLISHED\").\naction(\"SYN_SENT\", \"APP_CLOSE\", \"CLOSED\").\naction(\"ESTABLISHED\", \"APP_CLOSE\", \"FIN_WAIT_1\").\naction(\"ESTABLISHED\", \"RCV_FIN\", \"CLOSE_WAIT\").\naction(\"FIN_WAIT_1\", \"RCV_FIN\", \"CLOSING\").\naction(\"FIN_WAIT_1\", \"RCV_FIN_ACK\", \"TIME_WAIT\").\naction(\"FIN_WAIT_1\", \"RCV_ACK\", \"FIN_WAIT_2\").\naction(\"CLOSING\", \"RCV_ACK\", \"TIME_WAIT\").\naction(\"FIN_WAIT_2\", \"RCV_FIN\", \"TIME_WAIT\").\naction(\"TIME_WAIT\", \"APP_TIMEOUT\", \"CLOSED\").\naction(\"CLOSE_WAIT\", \"APP_CLOSE\", \"LAST_ACK\").\naction(\"LAST_ACK\", \"RCV_ACK\", \"CLOSED\").\naction(_, _, \"ERROR\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230570,"user_id":544,"body":"traverse_tcp_states(Events, FinalState) :-\n  once(foldl(traverse, Events, \"CLOSED\", FinalState)).\n\ntraverse(\"APP_PASSIVE_OPEN\", \"CLOSED\", \"LISTEN\").\ntraverse(\"APP_ACTIVE_OPEN\", \"CLOSED\", \"SYN_SENT\").\ntraverse(\"RCV_SYN\", \"LISTEN\", \"SYN_RCVD\").\ntraverse(\"APP_SEND\", \"LISTEN\", \"SYN_SENT\").\ntraverse(\"APP_CLOSE\", \"LISTEN\", \"CLOSED\").\ntraverse(\"APP_CLOSE\", \"SYN_RCVD\", \"FIN_WAIT_1\").\ntraverse(\"RCV_ACK\", \"SYN_RCVD\", \"ESTABLISHED\").\ntraverse(\"RCV_SYN\", \"SYN_SENT\", \"SYN_RCVD\").\ntraverse(\"RCV_SYN_ACK\", \"SYN_SENT\", \"ESTABLISHED\").\ntraverse(\"APP_CLOSE\", \"SYN_SENT\", \"CLOSED\").\ntraverse(\"APP_CLOSE\", \"ESTABLISHED\", \"FIN_WAIT_1\").\ntraverse(\"RCV_FIN\", \"ESTABLISHED\", \"CLOSE_WAIT\").\ntraverse(\"RCV_FIN\", \"FIN_WAIT_1\", \"CLOSING\").\ntraverse(\"RCV_FIN_ACK\", \"FIN_WAIT_1\", \"TIME_WAIT\").\ntraverse(\"RCV_ACK\", \"FIN_WAIT_1\", \"FIN_WAIT_2\").\ntraverse(\"RCV_ACK\", \"CLOSING\", \"TIME_WAIT\").\ntraverse(\"RCV_FIN\", \"FIN_WAIT_2\", \"TIME_WAIT\").\ntraverse(\"APP_TIMEOUT\", \"TIME_WAIT\", \"CLOSED\").\ntraverse(\"APP_CLOSE\", \"CLOSE_WAIT\", \"LAST_ACK\").\ntraverse(\"RCV_ACK\", \"LAST_ACK\", \"CLOSED\").\ntraverse(_, \"ERROR\", \"ERROR\").\ntraverse(_, _, \"ERROR\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"54d1c59aba326343c80000e7":[{"id":230571,"user_id":277,"body":"divide_nums(X, Y, Result) :- number(X), number(Y), Result is X \/ Y.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230572,"user_id":168,"body":"divide_nums(X, Y, Result) :- Result is X \/ Y.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230573,"user_id":76,"body":"divide_nums(X, Y, R) :- R is X \/ Y.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"54d512e62a5e54c96200019e":[{"id":230574,"user_id":null,"body":"prime_factors(N,R) :- \n  factors(N,2,Fs),\n  atomics_to_string(Fs,R).\n\nfactors(1,_,[]).\nfactors(N,F,[A]) :- \n  N < F*F,\n  format(atom(A), '(~p)', N).\nfactors(N,F,[A|L]) :-\n  0=:=rem(N,F),\n  divs_n(N,F,0,P),\n  M is N div P,\n  format(atom(A), '(~p)', P),\n  factors(M,F,L).\nfactors(N,F0,L) :-\n  succ(F0,Lb),\n  between(Lb,inf,F1),\n  crypto_is_prime(F1,[]),\n  factors(N,F1,L).\n\ndivs_n(N,F,B0,O) :-\n  divmod(N,F,M,0),\n  succ(B0,B1), \n  divs_n(M,F,B1,O).\ndivs_n(_,F,1,(F)).\ndivs_n(_,F,B,(F**B)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230575,"user_id":76,"body":"prime_factors(N, R) :- \n  ( compound(N) -> N1 is eval(N) ; N1 is N ),\n  prime_factors_(N1, 2, \"\", R).\n\nprime_factors_(1, _, S, S) :- !.\nprime_factors_(N, D, S, R) :- \n  between(D, N, M),\n  N mod M =:= 0, !,\n  count_divisors(N, M, C),\n  N1 is N \/\/ (M ^ C),\n  ( C =:= 1 -> format(string(Str), \"(~d)\", [M]) ; format(string(Str), \"(~d**~d)\", [M, C]) ),\n  format(string(S1), \"~w~w\", [S, Str]),\n  succ(M, D1),\n  prime_factors_(N1, D1, S1, R).\n  \ncount_divisors(N, D, 0) :- N mod D =\\= 0, !.\ncount_divisors(N, D, C) :-\n  N1 is N \/\/ D,\n  count_divisors(N1, D, C1),\n  C is 1 + C1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230576,"user_id":53,"body":"\nwalk(L, I, N, Cnt, Fs, R) :-\n  I2 is I + 1,\n  (I > N, L == 0 -> \n      R = Fs;\n   0 is mod(N, I) -> \n      Cnt2 is Cnt + 1, \n      N2 is div(N, I), \n      walk(1, I, N2, Cnt2, Fs, R);\n   Cnt == 1 -> \n      format(atom(A), '(~d)', [I]),\n      atom_string(A, X), \n      append(Fs, [X], Fs2), \n      walk(0, I2, N, 0, Fs2, R);\n   Cnt > 1 -> \n      format(atom(A), '(~d**~d)', [I, Cnt]),\n      atom_string(A, X),\n      append(Fs, [X], Fs2),\n      walk(0, I2, N, 0, Fs2, R);\n   walk(0, I2, N, 0, Fs, R)).\n\nprime_factors(N, R) :- \n  writeln(N),\n  walk(0, 2, N, 0, [], Ls),\n  length(Ls, W),\n  (W == 0 -> \n      format(atom(A), '(~d)', [N]), atom_string(A, R);\n   atomic_list_concat(Ls, \"\", Ar),\n   atom_string(Ar, R)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230577,"user_id":168,"body":"factors(N, D, R) :-\n  (D * D =< N -> (N mod D =:= 0 -> M is N \/\/ D, factors(M, D, R1), R = [D | R1];\n               D1 is D + 1, factors(N, D1, R));\n   N > 1 -> R = [N]; R = []).\n\ngroup([], []).\ngroup([X | Xs], R) :-\n  group(Xs, Gs),\n  (Gs = [[X, N] | T] -> succ(N, N1), R = [[X, N1] | T]; R = [[X, 1] | Gs]).\n  \nprime_factors(N, R) :-\n  factors(N, 2, Factors),\n  group(Factors, Pairs),\n  foldl([[P, E], S, T] >> ((E = 1 -> F = \"~w(~w)\"; F = \"~w(~w**~w)\"), format(string(T), F, [S, P, E])), Pairs, \"\", R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230578,"user_id":null,"body":"factors(N, Ps) :- factors_(N, Ps, 2).\n\nfactors_(1, [], _).\nfactors_(N, [P|Ps], I) :-\n    N > 1,\n    smallest_prime_factor(N, P, I),\n    N0 is N \/\/ P,\n    factors_(N0, Ps, P).\n\nsmallest_prime_factor(N, P, I) :-\n    N >= 2,\n    ( I * I > N ->\n        P = N\n    ;   ( N mod I =:= 0 ->\n            P = I\n        ; ( I0 is I + 1, smallest_prime_factor(N, P, I0) )\n        )\n    ).\n\ngroup([], []).\ngroup([X|Xs], [X-N|Ys]) :-\n    group_([X|Xs], _, N, Xs0),\n    group(Xs0, Ys).\n\ngroup_([X], X, 1, []).\ngroup_([X,Y|Ys], X, 1, [Y|Ys]) :- X \\= Y.\ngroup_([X,Y|Ys], X, N, Zs) :-\n    X = Y,\n    group_([Y|Ys], X, N0, Zs),\n    N is N0 + 1.\n\nfactorize(N, Qs) :-\n    factors(N, Ps),\n    group(Ps, Qs).\n\nconvert(P-1, X) :- atomic_list_concat(['(', P, ')'], X).\nconvert(P-E, X) :- \n    E > 1,\n    atomic_list_concat(['(', P, \"**\", E, ')'], X).\n\nprime_factors(N, R) :-\n    factorize(N, Ps),\n    maplist(convert, Ps, Xs),\n    atomic_list_concat(Xs, X),\n    atom_string(X, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230579,"user_id":null,"body":"prime_factors(N, R) :- \n  mod(N,2) =:= 0,!,\n  get_prime_factor(N,2,0,N1, Ex),\n  H = [[2,Ex]],\n  get_prime_list(N1,3,T),\n  append(H,T,L),\n  create_string(L,\"\",R),!.\nprime_factors(N,R):-\n  mod(N,2) =\\= 0,\n  get_prime_list(N,3,L),\n  create_string(L,\"\",R).\n  \ncreate_string([],Result, Result).\ncreate_string([[B,E]|T],String, Result):-\n  E > 1,\n  format(string(App),'(~d**~d)',[B,E]),\n  string_concat(String,App, NextString),\n  create_string(T,NextString,Result).\ncreate_string([[B,1]|T],String, Result):-\n  format(string(App),'(~d)',[B]),\n  string_concat(String,App, NextString),\n  create_string(T,NextString,Result).\n  \nget_prime_list(1,_ ,[]).\nget_prime_list(N, B, [[N,1]]):-\n  N > 1,\n  ceil(sqrt(N)) < B,!.\nget_prime_list(N,B,[[B, Ex]|T]):-\n  0 =:= mod(N,B),\n  get_prime_factor(N,B,0,N1, Ex),\n  B1 is B+2,\n  get_prime_list(N1,B1,T).\nget_prime_list(N,B,L):-\n  N > 1,\n  0 =\\= mod(N,B),\n  B1 is B+2,\n  get_prime_list(N,B1,L).\n  \nget_prime_factor(1, _, Ex, 1, Ex).\nget_prime_factor(N, Base, Ex, N, Ex):-\n  N > 1,\n  0 =\\= mod(N,Base).\nget_prime_factor(N, Base, Acc, Rest,Ex):-\n  0 =:= mod(N,Base),\n  NextAcc is Acc+1,\n  N1 is N \/\/ Base,\n  get_prime_factor(N1, Base, NextAcc, Rest, Ex).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230580,"user_id":null,"body":"factorize(N, Divider, Power, Result) :-\n    0 is N mod Divider,\n    !,\n    N0 is N div Divider,\n    factorize(N0, Divider, Power0, Result),\n    succ(Power0, Power).\nfactorize(N, _, 0, N).\n\nprimes_mult(1, _, [], _) :- !.\nprimes_mult(N, Divider, [[N, 1]], SqrtN) :- SqrtN < Divider, !.\nprimes_mult(N, Divider, [[Divider, Power]|Result1], SqrtN) :- \n    0 is N mod Divider,\n    !, \n    factorize(N, Divider, Power, N1),\n    succ(Divider, Divider1),\n    primes_mult(N1, Divider1, Result1, SqrtN).\nprimes_mult(N, Divider, Result, SqrtN) :- succ(Divider, Divider1), primes_mult(N, Divider1, Result, SqrtN).\n\nfactorization_string([], \"\").\nfactorization_string([[P,1]|T], R) :- \n    !,\n    swritef(R0, \"(%d)\", [P]),\n    factorization_string(T, R1),\n    string_concat(R0, R1, R).\nfactorization_string([H|T], R) :-\n    swritef(R0, \"(%d**%d)\", H),\n    factorization_string(T, R1),\n    string_concat(R0, R1, R).\n\nprime_factors(N, RS) :- primes_mult(N, R), factorization_string(R, RS).\nprimes_mult(N, R) :- SqrtN is sqrt(N), primes_mult(N, 2, R, SqrtN).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230581,"user_id":492,"body":"primes_mult(Num, Ls) :- Num > 0, primes_mult(Num, Ls, 2).\nprimes_mult(1, [], _) :- !.\nprimes_mult(Num, [[F, M] | Ls], F) :- div(Num, F, M, R), !,\n   follow(R, F, NewF), primes_mult(R, Ls, NewF).\nprimes_mult(Num, Ls, F) :- !, \n   follow(Num, F, NewF), primes_mult(Num, Ls, NewF).\ndiv(Num, F, M, R) :- divi_aux(Num, F, M, R, 0), M > 0.\ndivi_aux(Num, F, M, R, K) :- S is Num \/\/ F, Num =:= S * F, !,\n   K1 is K + 1, divi_aux(S, F, M, R, K1).\ndivi_aux(Num, _, M, Num, M).\nfollow(_, 2, 3) :- !.\nfollow(Num, F, NewF) :- F * F < Num, !, NewF is F + 2.\nfollow(Num, _, Num). \nprintlist([], U, S) :- \n    S = U.\nprintlist([X|List], U, S) :-\n    last(X, L),\n    (L =:= 1 ->\n        [H|_] = X,\n        format(string(A), \"~d\", [H])\n     ;\n        atomics_to_string(X, '**', A)\n    ),\n    string_concat(U, \"(\", V),\n    string_concat(V, A, W),\n    string_concat(W, \")\", Y),\n    printlist(List, Y, S).\n\nprime_factors(N, S) :-\n    primes_mult(N, Ls),\n    printlist(Ls, \"\", S).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"54da539698b8a2ad76000228":[{"id":230582,"user_id":null,"body":"is_valid_walk(Walk) :- length(Walk,10), foldl(walk,Walk,[0,0],[0,0]).\n  \nwalk(\"n\",[N,M],[N,M1]) :- plus(M,1,M1).\nwalk(\"s\",[N,M],[N,M1]) :- plus(M,-1,M1).\nwalk(\"e\",[N,M],[N1,M]) :- plus(N,1,N1).\nwalk(\"w\",[N,M],[N1,M]) :- plus(N,-1,N1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230583,"user_id":null,"body":"% predicate is_valid_walk\/1\n:- use_module(library(clpfd)).\n\nlist_length(Xs,N) :-\n    list_length_(Xs, 0, N).\n\nlist_length_([],N,N).\nlist_length_([_|Xs],N0,N) :-\n    N1 #= N0 + 1,\n    list_length_(Xs, N1, N).\n\ncount_char([],_,0).\ncount_char([X|Xs], Char, N) :-\n    X = Char,\n    N0 #= N - 1,\n    count_char(Xs, Char, N0).\ncount_char([X|Xs], Char, N) :-\n    dif(X,Char),\n    count_char(Xs, Char, N).\n\nis_valid_walk(Ds) :-\n    list_length(Ds,10),\n    0 #= N - S,\n    0 #= E - W,\n    count_char(Ds,\"n\",N),\n    count_char(Ds,\"s\",S),\n    count_char(Ds,\"e\",E),\n    count_char(Ds,\"w\",W).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230584,"user_id":null,"body":"is_valid_walk(Walk) :- \n  length(Walk, WalkLen),\n  (WalkLen = 10 -> checkWalk(Walk, 0, 0); false).\n  \n\ncheckWalk([], 0, 0) :- true.\ncheckWalk([], _, _) :- false.\ncheckWalk([\"w\"|T], H, V) :- VV is V + 1, checkWalk(T, H, VV).\ncheckWalk([\"e\"|T], H, V) :- VV is V - 1, checkWalk(T, H, VV).\ncheckWalk([\"n\"|T], H, V) :- HH is H + 1, checkWalk(T, HH, V).\ncheckWalk([\"s\"|T], H, V) :- HH is H - 1, checkWalk(T, HH, V).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230585,"user_id":null,"body":"% predicate is_valid_walk\/1\nis_valid_walk(Walk) :- \n  walk_the_walk(Walk, [], 0).\n\n\n\nwalk_the_walk([H|T], W, D) :- \n  D < 10, \n  D1 is D+1,\n  cdel(W, H, [], W1), !,\n  walk_the_walk(T, W1, D1).\n\nwalk_the_walk([H|T], W, D) :- \n  D < 10, \n  D1 is D+1,\n  get_opposite(H, NH), !,\n  walk_the_walk(T, [NH|W], D1).\n  \nwalk_the_walk([], [], 10) :- true, !.\nwalk_the_walk(_, _, _) :-  false, !.\n\n\nget_opposite(\"w\", \"e\").\nget_opposite(\"e\", \"w\").\nget_opposite(\"n\", \"s\").\nget_opposite(\"s\", \"n\").\n\ncdel([H|T], E, R, R1) :- H == E, append(R, T, R1).\ncdel([H|T], E, R, R1) :- cdel(T, E, [H|R], R1).\ncdel([], _, R, R) :- false.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230586,"user_id":null,"body":"% predicate is_valid_walk\/1\ntest_on([H|T],X,Count) :-\n    test_on(T,X,Rest),\n    (H == X -> Count is Rest + 1; Count is Rest).\ntest_on([],_,Count) :- Count is 0.\n    \nis_valid_walk(Walk) :- \n    is_list(Walk),\n    length(Walk, Length),\n    Length =:= 10,\n    test_on(Walk,\"n\",Count_n),\n    test_on(Walk,\"s\",Count_s),\n    Count_n =:= Count_s,\n    test_on(Walk,\"e\",Count_w),\n    test_on(Walk,\"w\",Count_e),\n    Count_w =:= Count_e.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230587,"user_id":null,"body":"% predicate is_valid_walk\/1\nis_valid_walk([0,0], []).\n\nis_valid_walk([X,Y], [\"n\" | RemWalk]) :-\n  NewY is Y + 1,\n  is_valid_walk([X, NewY], RemWalk).\n  \nis_valid_walk([X,Y], [\"s\" | RemWalk]) :-\n  NewY is Y - 1,\n  is_valid_walk([X, NewY], RemWalk).\n  \nis_valid_walk([X,Y], [\"e\" | RemWalk]) :-\n  NewX is X + 1,\n  is_valid_walk([NewX,Y], RemWalk).\n  \nis_valid_walk([X,Y], [\"w\" | RemWalk]) :-\n  NewX is X - 1,\n  is_valid_walk([NewX,Y], RemWalk).\n  \nis_valid_walk(Walk) :-\n  length(Walk, LenWalk),\n  LenWalk == 10,\n  is_valid_walk([0,0], Walk).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230588,"user_id":null,"body":"% A valid walk is a walk of length 10 whose endpoint is its starting point\n% (i.e. the coordinates (0,0))\nis_valid_walk(Walk) :- length(Walk, 10), endpoint(Walk, 0, 0).\n\n% The endpoint of the empty walk is (0,0)\nendpoint([], 0, 0) :- true.\n\n% Suppose (x,y) is the endpoint of a walk; then (x,y+1) is the endpoint of\n% the same walk with another move northward.\nendpoint([n|Walk], X, North) :- endpoint(Walk, X, Y), North is Y + 1.\n\n% Suppose (x,y) is the endpoint of a walk; then (x+1,y) is the endpoint of\n% the same walk with another move eastward.\nendpoint([e|Walk], East, Y) :- endpoint(Walk, X, Y), East is X + 1.\n\n% Suppose (x,y) is the endpoint of a walk; then (x,y-1) is the endpoint of\n% the same walk with another move southward.\nendpoint([s|Walk], X, South) :- endpoint(Walk, X, Y), South is Y - 1.\n  \n% Suppose (x,y) is the endpoint of a walk; then (x-1,y) is the endpoint of\n% the same walk with another move westward.\nendpoint([w|Walk], West, Y) :- endpoint(Walk, X, Y), West is X - 1.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230589,"user_id":null,"body":"update_location(\"n\", [X1, Y1], [X1, Y2]) :- Y2 is Y1 + 1.\nupdate_location(\"s\", [X1, Y1], [X1, Y2]) :- Y2 is Y1 - 1.\nupdate_location(\"e\", [X1, Y1], [X2, Y1]) :- X2 is X1 + 1.\nupdate_location(\"w\", [X1, Y1], [X2, Y1]) :- X2 is X1 - 1.\n  \n\nwalk([], L1, L1, S1, S1).\nwalk([X|Xs], L1, L2, S1, S2) :-\n  walk(Xs, L1, L3, S1, S3),\n  S2 is S3 + 1,\n  update_location(X, L3, L2).\n\nis_valid_walk(Walk) :-\n  walk(Walk, [0, 0], [0, 0], 0, 10).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230590,"user_id":527,"body":"is_valid_walk(Walk) :- length(Walk, 10), foldl(step, Walk, 0\/0, 0\/0).\n\nstep(n, X\/Y, X\/C) :- C is Y + 1.\nstep(s, X\/Y, X\/C) :- C is Y - 1.\nstep(e, X\/Y, C\/Y) :- C is X + 1.\nstep(w, X\/Y, C\/Y) :- C is X - 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230591,"user_id":53,"body":"walk([], DX, DY, R) :- DX =:= 0, DY =:= 0.\nwalk([\"n\"|REST], DX, DY, R) :- A is DY + 1, walk(REST, DX, A, R).\nwalk([\"s\"|REST], DX, DY, R) :- A is DY - 1, walk(REST, DX, A, R).\nwalk([\"e\"|REST], DX, DY, R) :- A is DX + 1, walk(REST, A, DY, R).\nwalk([\"w\"|REST], DX, DY, R) :- A is DX - 1, walk(REST, A, DY, R).\n\nis_valid_walk(Walk) :- \n  length(Walk, L),\n  L =:= 10,\n  walk(Walk, 0, 0, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"54da5a58ea159efa38000836":[{"id":230592,"user_id":53,"body":"find_it(Ns, Result) :-\n  foldl([A,B,P] >> (P is A xor B), Ns, 0, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230593,"user_id":3088,"body":"find_it(Ns, Result) :- \n  foldl([X,Y,R]>>(R is X xor Y), Ns, 0, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230594,"user_id":null,"body":"find_it(Ns, Rslt) :- \n  foldl([X,Y,A]>>(A is X xor Y), Ns, 0, Rslt).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230595,"user_id":null,"body":"find_it(Ns, R) :- foldl([A,B,C]>>(C is A xor B), Ns, 0, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230596,"user_id":null,"body":"group_aux([], _, C, Gs) :- C = 0, Gs = [].\ngroup_aux([], V, C, Gs) :- C > 0, UC is C, Gs = [[V,UC]].\ngroup_aux([I|Is], V, C, Gs) :- I  = V, group_aux(Is, V, C + 1, Gs).\ngroup_aux([I|Is], V, C, Gs) :- I \\= V, group_aux(Is, I, 1, Gps), (C > 0 -> UC is C, Gs = [[V, UC]|Gps] ; Gs = Gps).\ngroup(Is, Gs) :- group_aux(Is, 0, 0, Gs).\n\ngco([_, C]) :- 0 is C mod 2.\n\nfind_it(Is, R) :- msort(Is, SIs),\n              group(SIs, Gs),\n              exclude(gco, Gs, Gf),\n              Gf = [[R, _]].","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230597,"user_id":null,"body":"count([],X,0).\ncount([X|T],X,Y):- count(T,X,Z), Y is 1+Z.\ncount([X1|T],X,Z):- X1\\=X,count(T,X,Z).\noddoccurrence(Unique, Ns, Result):-\n    [H|T] = Unique,\n    count(Ns, H, C),\n    (\n        C mod 2 =:= 1->Result is H, !\n    ;\n        oddoccurrence(T, Ns, Result)\n    ).\n\nfind_it(Ns, Result) :- \n    sort(Ns, Sorted),\n    oddoccurrence(Sorted, Ns, Result).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230598,"user_id":null,"body":"helper(X,[],[X]) :- !.\nhelper(X,[X|T], T) :- !.\nhelper(X,[H|T], [H|R]) :-\n  helper(X,T,R).\n  \nmy_reduce([], Acc, Acc).\nmy_reduce([H|T], Acc, Result) :-\n    helper(H, Acc, NewAcc),\n    my_reduce(T, NewAcc, Result).\n\nfind_it(Ns, R) :- my_reduce(Ns,[],[R]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230599,"user_id":null,"body":"% Ns - list of numbers\n% Result - the number occuring an odd number of times\nfind_it(Ns, Result) :- \n  member(Result, Ns),\n  odd_times(Ns, Result, 0), !.\n\nodd_times([], _, Cnt) :- 1 is mod(Cnt, 2).\nodd_times([H|T], H, Cnt) :- NewCnt is Cnt + 1, odd_times(T, H, NewCnt).\nodd_times([H|T], X, Cnt) :- H \\= X, odd_times(T, X, Cnt).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230600,"user_id":null,"body":"find_it(Ns, Result) :- once(remove_dupes(Ns, Result)).\n\nremove_dupes([N|Ns], Result) :- select(N, Ns, NextNs), remove_dupes(NextNs, Result).\nremove_dupes([N|_], N).\nremove_dupes([N], N).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230601,"user_id":null,"body":"% Ns - list of numbers\n% Result - the number occuring an odd number of times\nfind_it(Ns, Result) :- \n  find_it_(Ns, [], Result).\n  \nfind_it_([], [X], X).\nfind_it_([X|Rest], Xs, Result) :-\n  member(X, Xs) ->\n    delete(Xs, X, Xs1),\n    find_it_(Rest, Xs1, Result);\n    find_it_(Rest, [X|Xs], Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"54db15b003e88a6a480000b9":[{"id":230602,"user_id":53,"body":"from_nb_2_str(N, Ls, Rs) :-\n  foldl([E, Acc, R] >> (R is E * Acc), Ls, 1, P),\n  foldl([E, Acc, R] >> (R is div(E * Acc, gcd(Acc, E))), Ls, 1, Q),\n  (  P < N; P \\= Q -> Rs = \"Not applicable\"\n  ;  foldl([E, Acc, R] >> (B is rem(N, E), format(string(A), \"-~d-\", [B]) , string_concat(Acc, A, R)), Ls, \"\", Rs) ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230603,"user_id":492,"body":"from_nb_2_str(N, Ls, R) :-\n    foldl([A, B, R] >> (R is A * B), Ls, 1, P),\n    foldl(lcm_pp, Ls, 1, M),\n    (P =\\= M ->\n        R = \"Not applicable\"\n    ;   (P < N ->\n            R = \"Not applicable\"\n        ;   \n            maplist([A, D] >> (D is mod(N, A)), Ls, U),\n            atomics_to_string(U, '--', Q),\n            string_concat(\"\", \"-\", V),\n            string_concat(V, Q, W),   \n            string_concat(W, \"-\", R)\n        )\n    ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230604,"user_id":null,"body":"mul_list([], Retval, Retval).\nmul_list([H | T], Mul, Retval) :-\n  NewMul is H * Mul,\n  mul_list(T, NewMul, Retval).\n\nmod_list([], _, []).\nmod_list([H1 | T1], N, [H2 | T2]) :-\n  H2 is N mod H1,\n  mod_list(T1, N, T2).\n\nlist_to_str([], Retval, Retval).\nlist_to_str([H | T], Str, Retval) :-\n  number_string(H, StrH1),\n  string_concat(\"-\", StrH1, StrH2),\n  string_concat(StrH2, \"-\", StrH3),\n  string_concat(Str, StrH3, StrH4),\n  list_to_str(T, StrH4, Retval).\n\ngcd(0, X, X) :-!.\ngcd(X, 0, X) :-!.\ngcd(X, X, X) :-!.\ngcd(M, N, X) :- N>M, Y is N-M, gcd(M, Y, X).\ngcd(M, N, X) :- N<M, Y is M-N, gcd(Y, N, X).\n\ncontain_co_prime([], _).\ncontain_co_prime([H | T], Value) :-\n    gcd(H, Value, Gcd),\n    Gcd = 1, !,\n    contain_co_prime(T, Value).\n\nco_primes([]).\nco_primes([H | T]) :-\n    contain_co_prime(T, H),\n    co_primes(T).\n\nfrom_nb_2_str(N, Ls, R) :-\n  mul_list(Ls, 1, Mul),\n  N < Mul,\n  co_primes(Ls), !,\n  mod_list(Ls, N, ListR),\n  list_to_str(ListR, \"\", R).\n\nfrom_nb_2_str(_, _, R) :-\n    R = \"Not applicable\".\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230605,"user_id":null,"body":"from_nb_2_str(N, Ls, R) :- \n  (is_set(Ls),\n  forall((member(X,Ls),member(Y,Ls)), (1 is gcd(X,Y) ; X=Y)),\n  foldl([X,Y,Z] >> (Z is X*Y), Ls, 1, Prod),\n  Prod > N) -> (\n    maplist({N}\/[X,Y] >> (X is N mod Y), Moduli, Ls),\n    atomic_list_concat(Moduli, \"--\", R1),\n    atomic_list_concat(['-',R1,'-'], R2),\n    atom_string(R2, R)\n  ) ; (R = \"Not applicable\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230606,"user_id":null,"body":"coprime(_,[]).\ncoprime(V,[H|T]):- gcd(V,H) =:= 1, coprime(V,T).\n\ncoprime([]).\ncoprime([H|T]):- coprime(T), coprime(H,T).\n\nlist_product([],1).\nlist_product([H|T], R):- list_product(T, P), R is H*P.\n\ntodashedstring([],\"\").\ntodashedstring([H|T],R):- todashedstring(H,F),todashedstring(T,S),string_concat(F,S,R).\ntodashedstring(N,S):- string_concat(\"-\",N,T), string_concat(T,\"-\",S).\n\nmodlist(N,[H|T],[H0|T0]):- H0 is mod(N,H), modlist(N,T,T0).\nmodlist(_,[],[]).\n\nfrom_nb_2_str(N, Ls, \"Not applicable\"):- list_product(Ls, P), P<N.\nfrom_nb_2_str(_, Ls, \"Not applicable\"):- \\+coprime(Ls).\n\nfrom_nb_2_str(N, Ls, R):- modlist(N,Ls,T), todashedstring(T,R).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230607,"user_id":null,"body":":- use_module(library(dcg\/basics)).\n\n% String Representation <-> List\nformat(L) --> \"-\", sep_head(L), \"-\".\nsep_head([H|T]) --> integer(H), sep(T).\nsep_head([]) --> [].\nsep([H|T]) --> \"--\", integer(H), sep(T).\nsep([]) --> [].\n\nfrom_nb_2_str(N,Ls,\"Not applicable\") :-\n    foldl([I,C,O]>>(O = C * I),Ls,1,P),\n    P =< N, !.\n\nfrom_nb_2_str(_,Ls,\"Not applicable\") :-\n    member(A,Ls),\n    member(B,Ls),\n    B > A,\n    \\+ coprime(A,B),!.\n\nfrom_nb_2_str(N,Ls,R) :-\n    maplist(mod(N),Ls,Rlist),\n    phrase(format(Rlist),Rcodes),\n    string_codes(R,Rcodes).\n\nmod(N,X,Y) :- Y is N mod X.\n\ncoprime(A,B) :-\n   1 is gcd(A, B).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230608,"user_id":null,"body":"is_debug :- false.\n\nlog(Format, Data) :- is_debug, format(Format, Data) -> true.\nlog(_, _) :- not(is_debug).\n\nfrom_nb_2_str(N, Ls, R) :- mul_list(Ls, M), M >= N, pairwise_coprime(Ls), log('from_nb_2_str(~d, ~w, 0).~n',[N, Ls]), moduli(N, Ls, P), concat_moduli(P, R) -> true.\nfrom_nb_2_str(_, _, \"Not applicable\").\n\nmoduli(_, [], []).\nmoduli(N, [H|T], [M|R]) :- M is N mod H, moduli(N, T, R).\n\nconcat_moduli([], '').\nconcat_moduli([H|T], R) :- concat_moduli(T, P), swritef(R, '-%d-%w', [H, P]).\n\nmul_list([], 1).\nmul_list([H|T], Result) :- mul_list(T, R), Result is H * R.\n\npairwise_coprime([]).\npairwise_coprime([H|T]) :- pairwise_coprime(H, T), pairwise_coprime(T).\n\npairwise_coprime(_, []).\npairwise_coprime(F, [H|T]) :- 1 is gcd(F, H), pairwise_coprime(F, T).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230609,"user_id":null,"body":"co_prime(X, Y) :- gcd(X, Y) =:= 1.\n\npairwise_co_prime([]).\npairwise_co_prime([X|Xs]) :-\n    maplist(co_prime(X), Xs),\n    pairwise_co_prime(Xs).\n\nproduct([], 1).\nproduct([X|Xs], P) :-\n    product(Xs, P0),\n    P is X * P0.\n\napplicable(N, Ls) :-\n    product(Ls, P),\n    P > N,\n    pairwise_co_prime(Ls).\n\nmod_(N, L, R) :- R is N mod L.\n\nexpress(N, Ls, S) :-\n    maplist(mod_(N), Ls, Rs),\n    atomic_list_concat(Rs, \"--\", X),\n    atomic_list_concat(['-', X, '-'], Y),\n    atom_string(Y, S).\n\nfrom_nb_2_str(N, Ls, R) :-\n    ( applicable(N, Ls) ->\n        express(N, Ls, R)\n    ; R = \"Not applicable\"\n    ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230610,"user_id":null,"body":"from_nb_2_str(N, Ls, \"Not applicable\") :-\n  foldl(mult, Ls, 1, P),\n  (P =< N; foldl(lcm, Ls, 1, L), L < P).\n  \nfrom_nb_2_str(N, Ls, R) :-\n  helper(N, Ls, R).\n\nhelper(_, [], \"\").\nhelper(N, [L|Ls], R) :-\n   M is N mod L,\n   format(string(S), \"-~d-\", M),\n   helper(N, Ls, Ss),\n   string_concat(S, Ss, R).\n\nlcm(X, Y, Z) :-\n  Z is X * Y div gcd(X, Y).\n\nmult(X, Y, Z) :-\n  Z is X * Y.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230611,"user_id":null,"body":"from_nb_2_str(N, Ls, \"Not applicable\") :- \n  product(Ls, Product),\n    (Product < N, !;\n    \\+ is_coprime(Ls)),\n  !.\nfrom_nb_2_str(N,Ls,R):-\n  get_moduli(N,Ls,MList),\n  list_to_string(MList, R).\n  \nis_coprime([]).\nis_coprime([H|T]):-\n  is_coprime(T),\n  is_coprime(H,T).\n  \nis_coprime(_, []).\nis_coprime(N,[H|T]):-\n  1 =:= gcd(N, H),\n  is_coprime(N,T).\n\nlist_to_string([],\"\").\nlist_to_string([H|T],Str):-\n  list_to_string(T,StrEnd),\n  format(string(StrBegin), '-~d-',[H]),\n  string_concat(StrBegin, StrEnd, Str).\n  \nget_moduli(_,[],[]):- !. %to eliminate choice points\nget_moduli(N,[H|T],[H2|T2]):-\n  get_moduli(N,T,T2),\n  H2 is mod(N,H).\n\nproduct([],1).\nproduct([H|T],Res):-\n  product(T,Acc),\n  Res is H * Acc.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"54ff3102c1bad923760001f3":[{"id":230612,"user_id":null,"body":"vowel('a').\nvowel('e').\nvowel('i').\nvowel('o').\nvowel('u').\n\nvowel_count(S, Vowels) :- \n    string_chars(S, X),\n    include(vowel, X, R),\n    length(R, Vowels).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230613,"user_id":null,"body":"\n% checks if elem is in list\nin_list(_, []) :- false.\nin_list(Elem, [Elem|_]) :- true.\nin_list(Elem, [_|T]) :- in_list(Elem, T).\n \n\n% counts vowels (a,e,i,o,u) in list of chars\ncount_vowels([], 0).\ncount_vowels([H|T], R) :-\n  in_list(H, [a,e,i,o,u]),\n  count_vowels(T,R1),\n  R is R1 + 1.\ncount_vowels([_|T], R) :- count_vowels(T, R).\n  \n% counts vowels (a,e,i,o,u) in string\nvowel_count(S, Vowels) :-\n  string_chars(S, SChars),\n  count_vowels(SChars, Vowels).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230614,"user_id":null,"body":"vowel_count(X,R) :- string_chars(X,TMP), foo(TMP,R).\n\nfoo([],0).\n\nfoo([X|Xs], R) :- X = 'a', foo(Xs,RNew), R is RNew + 1.\nfoo([X|Xs], R) :- X = 'e', foo(Xs,RNew), R is RNew + 1.\nfoo([X|Xs], R) :- X = 'i', foo(Xs,RNew), R is RNew + 1.\nfoo([X|Xs], R) :- X = 'o', foo(Xs,RNew), R is RNew + 1.\nfoo([X|Xs], R) :- X = 'u', foo(Xs,RNew), R is RNew + 1.\nfoo([X|Xs], R) :-  foo(Xs,RNew), R is RNew.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230615,"user_id":168,"body":"is_vowel('a').\nis_vowel('e').\nis_vowel('i').\nis_vowel('o').\nis_vowel('u').\n\nvowel_count(S, Vowels) :- \n  string_chars(S, Cs),\n  include(is_vowel, Cs, Vs),\n  length(Vs, Vowels).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230616,"user_id":null,"body":"vowel_count(\"\", 0).\nvowel_count([], 0).\n\n% if vowel is member\nvowel_count(S, Result) :- \n    string_to_list(S, List), List = [First | Rest ], \n    string_to_list(\"aeiou\", Vowels), \n    member(First, Vowels),\n    vowel_count(Rest, Result1),\n    Result is Result1 + 1.\n\n% if vowel is not a member\nvowel_count(S, Result) :- \n    string_to_list(S, List), List = [First | Rest ], \n    string_to_list(\"aeiou\", Vowels), \n    not(member(First, Vowels)),\n    vowel_count(Rest, Result1),\n    Result is Result1 + 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230617,"user_id":null,"body":"vowel_count(S, Vowels) :-\n    string_chars(S, Chars),\n      foldl([Char, Acc, NewAcc] >> (member(Char, [a,e,i,o,u]) -> NewAcc is Acc + 1; NewAcc is Acc), Chars, 0, Vowels).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230618,"user_id":null,"body":"is_vowel(a).\nis_vowel(e).\nis_vowel(i).\nis_vowel(o).\nis_vowel(u).\n\nvowel_count(S, Vowels) :-\n  string_chars(S, Chars),\n  foldl([Char, Acc, NewAcc] >> (is_vowel(Char) -> NewAcc is Acc + 1; NewAcc is Acc), Chars, 0, Vowels).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230619,"user_id":null,"body":"vowel_count(S, R) :-\n    string_chars(S, C),\n    vc(C, R).\n\nvc([], 0).\nvc([H|T], R) :-\n    vc(T, Q),\n    (\t  member(H, [a,e,i,o,u]) -> R is Q + 1\n    ;                             R is Q\n    ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230620,"user_id":53,"body":"vowel(X):- member(X,[a,e,i,o,u]).\nnr_vowel([],0).\nnr_vowel([X|T],N):- vowel(X),nr_vowel(T,N1), N is N1+1,!.\nnr_vowel([X|T],N):- nr_vowel(T,N).\n\nvowel_count(S, Vowels) :-\n  string_chars(S, XS),\n  nr_vowel(XS, Vowels)\n  .","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230621,"user_id":null,"body":"vowel_count(S, Vowels) :-\n  string_chars(S, S1),\n  mycount(S1, Vowels).\n\nmycount([], 0).\nmycount([H|T], R) :-\n  mycount(T, K),\n  (   member(H, [a,e,i,o,u])\n  ->  R is K + 1\n  ;   R is K\n  ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"550498447451fbbd7600041c":[{"id":230622,"user_id":492,"body":"comp_same(A1, A2, R) :-\n    maplist([U, Q] >> (Q is U * U), A1, A),\n    sort(0, @=<, A, Sorted1),\n    sort(0, @=<, A2, Sorted2),\n    (Sorted1 = Sorted2 -> R is 1;R is 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230623,"user_id":null,"body":"% R will be 1 or 0\ndelFstElem(_,[],[]) :- !.\ndelFstElem(E,[E|XS],XS) :- !.\ndelFstElem(E,[X|XS],[X|RS]) :-\n    delFstElem(E,XS,RS).\n\ncomp_same([],[],1).\ncomp_same([X|XS],YS,R) :-\n    Fy is X ^ 2,\n    delFstElem(Fy,YS,T), % tries delete the first occurence of the element\n    T \\= YS, % if deletion has been successful\n    comp_same(XS,T,R).\ncomp_same(_,_,0).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230624,"user_id":null,"body":"comp_same(A1, A2, R) :- \n  findall(Y,(member(X,A1), pow(X,2,Y)) ,Aux), permutation(Aux,A2) -> R = 1; \n  R = 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230625,"user_id":null,"body":"% R will be 1 or 0\ncomp_same(L0, L2, Result) :-\n    maplist([N,R]>>is(R,N*N),L0,L1),\n    (\n        permutation(L1,L2)\n    ->\n        Result = 1\n    ;\n        Result = 0\n    ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230626,"user_id":168,"body":"comp_same([], [], 1) :- !.\ncomp_same([X | Xs], Ys, R) :-\n  X2 is X * X,\n  select(X2, Ys, Zs), !,\n  comp_same(Xs, Zs, R).\ncomp_same(_, _, 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230627,"user_id":53,"body":"same([], [], R) :- R = 1.   \nsame([H1|R1], [H2|R2], R):-\n  (  H1 =:= H2 -> same(R1, R2, R)\n  ;  R = 0).\n    \ncomp_same(A1, A2, R) :- \n  length(A1, L1),\n  length(A2, L2),\n  (  L1 =:= L2 -> \n       maplist([E, F] >> (F is E * E), A1, A1M),\n       sort(0, @=<, A1M, S1),\n       sort(0, @=<, A2, S2),\n       same(S1, S2, R)\n  ;    R = 0  ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230628,"user_id":null,"body":"% R will be 1 or 0\ncomp_same(A1, A2, 1) :-\n  msort(A1, A),\n  msort(A2, B),\n  % maplist also evaluates to true or false\n  maplist([X, Y]>>(Y is X^2), A, B),\n  !.\ncomp_same(_, _, 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230629,"user_id":null,"body":"% R will be 1 or 0\n% Using 1 and 0 instead of true and false is dumb\n% storing the result in R is dumb\ncomp_same(A1, A2, 1) :-\n\tmsort(A1, A),\n\tmsort(A2, B),\n\tcomp_same(A, B),\n\t!.\ncomp_same(_, _, 0).\n\ncomp_same([], []).\ncomp_same([A|B], [C|D]) :-\n\tC =:= A * A,\n\tcomp_same(B, D).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230630,"user_id":null,"body":":- use_module(library(chr)).\n:- chr_constraint num\/1, sqr\/1, unpack\/2, rests\/1.\nunpack(nums, [H|T]) <=> num(H), unpack(nums, T).\nunpack(sqrs, [H|T]) <=> sqr(H), unpack(sqrs, T).\nnum(X), sqr(Z) <=> Z is X*X | true.\nrests(R), sqr(_) <=> R is 0.\nrests(R) <=> R is 1.\n\ncomp_same(A,B,R) :- \n  same_length(A, B),\n  forall(member(X, A), integer(X)),\n  forall(member(X, B), integer(X)),\n  unpack(nums, A),\n  unpack(sqrs, B),\n  rests(R).\ncomp_same(_,_,0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230631,"user_id":null,"body":"comp_same(List1, List2, 0) :- length(List1, Len1), length(List2, Len2), Len1 \\= Len2, !.\ncomp_same(List1, List2, R) :- length(List1, Len1), length(List2, Len2), Len1 = Len2, myComp(List1, List2, R).\n\nmyComp([], _, 1) :- !.\nmyComp(_, [] , 0) :- !.\nmyComp([H|_], L2, 0) :- Sq is H*H, \\+ elem(Sq, L2), !.\nmyComp([H|T], L2, R) :- Sq is H*H, elem(Sq, L2), myDelete(Sq, L2, NL2), myComp(T, NL2, R).\n\nelem(H, [H|_]) :- !.\nelem(Elem, [_|T]) :- elem(Elem, T).\n\nmyDelete(X, [X|T], T) :- !.\nmyDelete(X, [Y|T], [Y|T1]) :- myDelete(X, T, T1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"550f22f4d758534c1100025a":[{"id":230632,"user_id":null,"body":"dir_reduc(L, R) :-\n  (\n  append(LH, [\"NORTH\", \"SOUTH\"|RH], L);\n  append(LH, [\"SOUTH\", \"NORTH\"|RH], L);\n  append(LH, [\"EAST\", \"WEST\"|RH], L);\n  append(LH, [\"WEST\", \"EAST\"|RH], L))\n  ,\n  append(LH, RH, LL),\n  dir_reduc(LL, R), !.\n  \ndir_reduc(L, L).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230633,"user_id":527,"body":"opposite(\"NORTH\", \"SOUTH\").\nopposite(\"EAST\", \"WEST\").\nopposite(\"SOUTH\", \"NORTH\").\nopposite(\"WEST\", \"EAST\").\n\ndir_reduc(Ds, Es) :- dir_reduce_rev(Ds, REs, []), reverse(REs, Es).\n\ndir_reduce_rev([], Es, Es).\ndir_reduce_rev([D | Ds], Es, [T | Ts]) :- opposite(D, T), dir_reduce_rev(Ds, Es, Ts).\ndir_reduce_rev([D | Ds], Es, Ts) :- dir_reduce_rev(Ds, Es, [D | Ts]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230634,"user_id":492,"body":"aux([\"NORTH\", \"SOUTH\"| Xs], Xs) :- !.\naux([\"SOUTH\", \"NORTH\"| Xs], Xs) :- !.\naux([\"WEST\", \"EAST\"| Xs], Xs) :- !.\naux([\"EAST\", \"WEST\"| Xs], Xs) :- !.\naux([X| Xs], Rs) :- aux(Xs, Ms), Rs = [X|Ms].\naux([], []).\ndir_reduc(Ls, Xs) :-\n    aux(Ls, R),\n    (R == Ls ->\n        Xs = R\n    ;\n        dir_reduc(R, Xs)\n    ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230635,"user_id":53,"body":"init([X|Xs], Ys) :- init_aux(Xs, Ys, X).\ninit_aux([], [], _).\ninit_aux([X1|Xs], [X0|Ys], X0) :- init_aux(Xs, Ys, X1). \n\nopp(\"NORTH\", R) :- R = \"SOUTH\".\nopp(\"SOUTH\", R) :- R = \"NORTH\".\nopp(\"EAST\", R) :- R = \"WEST\".\nopp(\"WEST\", R) :- R = \"EAST\".\n\nvisit(X, [], R) :- R = [X].\nvisit(X, Acc, R) :- \n  last(Acc, Y),\n  opp(Y, Z),\n  (Z = X ->\n      init(Acc, R)\n    ;\n      append(Acc, [X], R)\n    ).\n    \ndir_reduc(Ls, Xs) :- foldl(visit, Ls, [], Xs).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230636,"user_id":492,"body":"aux([\"NORTH\", \"SOUTH\"| Xs], Rs) :- aux(Xs, Rs), !.\naux([\"SOUTH\", \"NORTH\"| Xs], Rs) :- aux(Xs, Rs), !.\naux([\"WEST\", \"EAST\"| Xs], Rs) :- aux(Xs, Rs), !.\naux([\"EAST\", \"WEST\"| Xs], Rs) :- aux(Xs, Rs), !.\naux([X| Xs], Rs) :- aux(Xs, Ms), Rs = [X|Ms].\naux([], []).\ndir_reduc(Ls, Xs) :-\n    aux(Ls, R),\n    (R == Ls ->\n        Xs = R\n    ;\n        dir_reduc(R, Xs)\n    ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230637,"user_id":null,"body":"dir_reduc(Ls, Xs) :- eliminate_directions(Ls,Xs), \\+ has_reductions(Xs), !.\ndir_reduc(Ls, Xs) :- eliminate_directions(Ls,X), has_reductions(X), dir_reduc(X, Xs), !.\n\nhas_reductions([_|R]) :- has_reductions(R),!.\nhas_reductions([Lf,Ln|_]) :- comp_elimination(Lf,Ln),!.\n\neliminate_directions([],[]) :- !.\neliminate_directions([X],[X]) :- !.\neliminate_directions([Lf,Ln|R],Result) :- comp_elimination(Lf,Ln), eliminate_directions(R,Result).\neliminate_directions([Lf,Ln|R],[Lf|Result]) :- \\+ comp_elimination(Lf,Ln), eliminate_directions([Ln|R],Result).\n\ncomp_elimination(F,N):- F = \"NORTH\", N = \"SOUTH\".\ncomp_elimination(F,N):- N = \"NORTH\", F = \"SOUTH\".\ncomp_elimination(F,N):- F = \"EAST\", N = \"WEST\".\ncomp_elimination(F,N):- N = \"EAST\", F = \"WEST\".","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230638,"user_id":null,"body":"dir_reduc([],[]).\ndir_reduc([X],[X]).\n\ndir_reduc([X,Y|Rest],Xs):-\n  invert(X,Y),!,\n  dir_reduc(Rest,Xs).\n  \n\ndir_reduc([X|Rest],Xs):-\n  dir_reduc(Rest,Rest1),\n  ((Rest1=[],\n  Xs=[X]);\n  (Rest1=[Y|RestY],\n  invert(X,Y),\n  Xs=RestY);\n  (Xs=[X|Rest1])).\n  \n\ninvert(X,Y):-\n   member([X,Y],[[\"SOUTH\",\"NORTH\"],[\"NORTH\",\"SOUTH\"],[\"WEST\",\"EAST\"],[\"EAST\",\"WEST\"]]).\n  \n\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230639,"user_id":null,"body":"dir_reduc([],[]).\ndir_reduc([X],[X]).\n\ndir_reduc([X,Y|Rest],Xs):-\n  invert(X,Y),!,\n  dir_reduc(Rest,Xs).\n  \n%dir_reduc([\"NORTH\",\"SOUTH\"|Rest] Xs) :-\n%  dir_reduc(Rest,Xs),!.\n\n%dir_reduc([\"SOUTH\",\"NORTH\"|Rest],Xs):-\n%  dir_reduc(Rest,Xs),!.\n\n%dir_reduc([\"EAST\",\"WEST\"|Rest],Xs):-\n%  dir_reduc(Rest,Xs),!.\n\n%dir_reduc([\"WEST\",\"EAST\"|Rest],Xs):-\n%  dir_reduc(Rest,Xs),!.\n  \ndir_reduc([X|Rest],Xs):-\n  dir_reduc(Rest,Rest1),\n  ((Rest1=[],\n  Xs=[X]);\n  (Rest1=[Y|RestY],\n  invert(X,Y),\n  Xs=RestY);\n  (Xs=[X|Rest1])).\n  \n\ninvert(X,Y):-\n   member([X,Y],[[\"SOUTH\",\"NORTH\"],[\"NORTH\",\"SOUTH\"],[\"WEST\",\"EAST\"],[\"EAST\",\"WEST\"]]).\n  \n\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230640,"user_id":null,"body":"dir_reduc(Ls, Ls) :- bdroute(Ls, Ls).\ndir_reduc(Ls, Xs) :- not(bdroute(Ls, Ls)), bdroute(Ls,NXs), dir_reduc(NXs,Xs).\n\nbdroute([X],[X]).\nbdroute([],[]).\nbdroute([N,S|T],Z):-((N=\"NORTH\",S=\"SOUTH\");(S=\"NORTH\",N=\"SOUTH\")), bdroute(T,Z).\nbdroute([N,S|T],Z):-((N=\"EAST\",S=\"WEST\");(S=\"EAST\",N=\"WEST\")), bdroute(T,Z).\nbdroute([N,S|T],[N|Z]):-not((N=\"NORTH\",S=\"SOUTH\");(S=\"NORTH\",N=\"SOUTH\");(N=\"EAST\",S=\"WEST\");(S=\"EAST\",N=\"WEST\")),bdroute([S|T],Z).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230641,"user_id":168,"body":"opp(\"NORTH\", \"SOUTH\").\nopp(\"SOUTH\", \"NORTH\").\nopp(\"WEST\", \"EAST\").\nopp(\"EAST\", \"WEST\").\n\nstep(Dir, [], [Dir]) :- !.\nstep(Dir, [X | Xs], R) :-\n  (opp(Dir, X) -> R = Xs; R = [Dir, X | Xs]).\n\ndir_reduc(Ls, Xs) :-\n  foldl(step, Ls, [], Ys),\n  reverse(Ys, Xs).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5517fcb0236c8826940003c9":[{"id":230642,"user_id":53,"body":"sum_fracts([], Xs) :- Xs is 0.\nsum_fracts(Ls, Xs) :-\n  foldl([[_,T], Acc, R] >> (R is T * Acc), Ls, 1, D),\n  foldl([[H,T], Acc, R] >> (R is div(H * D, T) + Acc), Ls, 0, N),\n  G is gcd(N, D),\n  (G =:= D ->\n    Xs is div(N, D); \n    A is div(N, G),\n    B is div(D, G),\n    Xs = [A, B]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230643,"user_id":null,"body":"sum_fracts([], 0).\nsum_fracts([L|Ls], Xs) :-\n   foldl(sum_frac,Ls,L,Ts),\n   once((Ts = [Xs, 1] ; Ts = Xs)).\n\nsum_frac([N1,D1],[N2,D2],[N3,D3]) :-\n   NT is N1 * D2 + N2 * D1,\n   DT is D1 * D2,\n   D is gcd(NT,DT),\n   N3 is NT \/ D,\n   D3 is DT \/ D.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230644,"user_id":492,"body":"to_rational([A, B], R) :-\n    R = A rdiv B.\nfrom_rational(A, R) :- \n    integer(A),\n    R = A.\nfrom_rational(A rdiv B, R) :-\n    R = [A, B].\nsum_fracts(Ls, Xs) :-\n    maplist(to_rational, Ls, U), sumlist(U, V), from_rational(V, Xs).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230645,"user_id":76,"body":"gcd(0, X, X):- X > 0, !.\ngcd(X, Y, Z):- X >= Y, X1 is X-Y, gcd(X1, Y, Z), !.\ngcd(X, Y, Z):- X < Y, X1 is Y-X, gcd(X1, X, Z), !.\n\nsum_fracts(Ls, Res) :-\n  foldl([[Ln, Ld], [Pn, Pd], [Rn, Rd]] >> (Rn is Pn * Ld + Ln * Pd, Rd is Ld * Pd), Ls, [0, 1], [N, D]),\n  gcd(N, D, G),\n  (\n    G =:= D -> Res is N \/\/ G\n    ; Xn is N \/\/ G, Xd is D \/\/ G, Res = [Xn, Xd]\n  ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230646,"user_id":527,"body":"sum_fracts(NDs, Res) :-\n  foldl([[N, D], S0, S1] >> (S1 is S0 + (N rdiv D)), NDs, 0, R),\n  (rational(R, Res, 1); rational(R, N, D), Res = [N, D]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230647,"user_id":null,"body":"sum_fracts([],0).\nsum_fracts([[N1,D1]|Ls], Xs) :-\n  foldl([[X1,X2],[Y1,Y2],[Z1,LCM]]>>(lcm(X2,Y2,LCM), Z1 is (X1*(LCM\/X2) + Y1*(LCM\/Y2))), [[N1,D1]|Ls], [0,D1], [N,D]),\n  R is N rdiv D,\n  (integer(R) -> Xs = R ; rational(R,N2,D2), Xs = [N2,D2]).\n  \nlcm(N1,N2,LCM) :- LCM is N1*N2\/gcd(N1,N2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230648,"user_id":null,"body":"sum_fracts([], 0).\nsum_fracts([A], B) :-\n  reduce2(A, B).\nsum_fracts([A,B|T], C) :-\n  add(A,B,D),\n  sum_fracts([D|T], C).\nadd([A1,B1], [A2,B2], [A3,B3]) :-\n  BB is B1 * B2,\n  AA is A1 * B2 + A2 * B1,\n  reduce1([AA,BB], [A3, B3]).\nreduce1([A1, B1], [A2, B2]) :-\n  G is gcd(A1, B1),\n  A2 is A1 \/\/ G,\n  B2 is B1 \/\/ G.\nreduce2([A1, B1], C1) :-\n  reduce1([A1, B1], [C1, 1]).\nreduce2([A1, B1], [C1, D1]) :-\n  reduce1([A1, B1], [C1, D1]),\n  D1 \\= 1.\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5518a860a73e708c0a000027":[{"id":230649,"user_id":77,"body":"last_digit([], 1).\nlast_digit([H|T], D) :-\n    reverse(T, R),\n    foldl([A,B,P] >> pow4(A,B,P), R, 1, E),\n    D is powm(H, E, 10).\n\npow4(_, 0, 1) :- !.\npow4(0, _, 0) :- !.\npow4(1, _, 1) :- !.\npow4(A, B, R) :-\n    R is 4 + powm(A, B, 4).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230650,"user_id":29,"body":"cycles(X) :- X = [[0],    [1],    [16,12,4,8], [1,3,9,7],   [16,4],\n                  [5],    [16],   [1,7,9,3],   [16,8,4,12], [1,9],\n                  [0],    [1,11], [16,12,4,8], [1,13,9,17], [16,4],\n                  [5,15], [16],   [1,17,9,13] ,[16,8,4,12], [1,19]].\n\ncollapse(_, \"0\", R) :- R = \"1\", !.\ncollapse(0, _, R) :- R = \"0\", !.\ncollapse(1, _, R) :- R = \"1\", !.\ncollapse(C, \"1\", R) :- R = C, !.\ncollapse(C, A, R) :-\n  cycles(X),\n  M is mod(C, 20),\n  nth0(M, X, Y),\n  length(Y, L),\n  P is mod(A, L),\n  nth0(P, Y, Z),\n  R is Z.\n\nlast_digit([], 1).\nlast_digit(Sx, last_digit) :-\n  reverse(Xs, Sx),\n  foldl(collapse, Xs, \"1\", R),\n  term_string(Q, R),\n  last_digit is mod(Q, 10).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230651,"user_id":168,"body":"last_digit([], 1).\nlast_digit([X | Xs], last_digit) :- \n  reverse(Xs, Ys),\n  foldl(step, Ys, [1, 0], [R, F]),\n  last_digit is (X mod 10) ^ (R + 4 * F) mod 10.\n\nstep(X, [R, F], [R1, F1]) :- \n  R1 is (X mod 4) ^ (R + 4 * F) mod 4,\n  (X =< 1 -> F1 = 0; X =< 3, R =< 1 -> F1 = F; F1 = 1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230652,"user_id":null,"body":"zero_case([0|Xs], SoFar, R) :-\n  !,\n  Next is 1 - SoFar,\n  zero_case(Xs, Next, R).\nzero_case(_, R, R).\n\nmod2([], 1).\nmod2([0|Xs], M) :-\n  zero_case(Xs, 0, M).\nmod2([X,0|Xs], 0) :-\n  mod(X, 2) =:= 0,\n  zero_case(Xs, 0, 0).\nmod2([X,0|Xs], 1).\nmod2([X|_], M) :-\n  M is mod(X, 2).\n\nmod4([], 1).\nmod4([0|Xs], M) :-\n  zero_case(Xs, 0, M).\nmod4([X|Xs], M) :-\n  X4 is mod(X, 4),\n  mod4(X4, Xs, M).\n  \nmod4(1, _, 1).\nmod4(X, [0|Xs], 1) :-\n  zero_case(Xs, 0, 0).\nmod4(3, Xs, M) :-\n  mod2(Xs, Idx),\n  nth0(Idx, [1, 3], M).\nmod4(2, [0|Xs], M) :-\n  zero_case(Xs, 0, ZeroOne),\n  M is ZeroOne + 1.\nmod4(2, [1|_], 2).\nmod4(2, [X,0|Xs], 2) :-\n  zero_case(Xs, 0, 0).\nmod4(_, _, 0).\n\n\nld(X, [], X).\nld(X, [0|Xs], Y) :-\n  zero_case(Xs, 0, 0) -> Y = 1 ; Y = X.\nld(0, _, 0).\nld(1, _, 1).\nld(5, _, 5).\nld(6, _, 6).\nld(4, Xs, LD) :-\n  mod2(Xs, Idx),\n  nth0(Idx, [6, 4], LD).\nld(9, Xs, LD) :-\n  mod2(Xs, Idx),\n  nth0(Idx, [1, 9], LD).\nld(2, Xs, LD) :-\n  mod4(Xs, Idx),\n  nth0(Idx, [6, 2, 4, 8], LD).\nld(3, Xs, LD) :-\n  mod4(Xs, Idx),\n  nth0(Idx, [1, 3, 9, 7], LD).\nld(7, Xs, LD) :-\n  mod4(Xs, Idx),\n  nth0(Idx, [1, 7, 9, 3], LD).\nld(8, Xs, LD) :-\n  mod4(Xs, Idx),\n  nth0(Idx, [6, 8, 4, 2], LD).\n\nlast_digit([], 1).\nlast_digit([0|Xs], last_digit) :-\n  zero_case(Xs, 0, last_digit).\nlast_digit([X|Xs], last_digit) :-\n  Digit is mod(X, 10),\n  ld(Digit, Xs, last_digit).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230653,"user_id":null,"body":"tot(N, P) :-\n  numlist(1, N, L),\n  foldl({N}\/[X,V0,V]>>(gcd(N,X)=:=1->V is V0+1;V=V0), L, 0, P).\n\nisz([], 0).\nisz([X|Xs], 0) :- \\+ isz(Xs, X).\nisz1(Xs, X, R) :- isz(Xs, X) -> R=1; R=0. \n\nlt([X2|Xs], 0, P) :- !, isz1(Xs, X2, Z), Z < P.\nlt(_, 1, P) :- !, 1 < P.\nlt(_, _, P) :- P =< 0, !, fail.\nlt([], X, P) :- X < P.\nlt([X2|Xs], X1, P) :- NP is log(P)\/log(X1), lt(Xs, X2, NP).\n\npow([], X, X).\npow([X2|Xs], 0, R) :- !, isz1(Xs, X2, R).\npow(_, 1, 1) :- !.\npow([X2|Xs], X1, R) :- pow(Xs, X2, R2), R is X1^R2.\n\nf(_Bs, _B, _A, 1, 0) :- !.\nf([], B, A, C, R) :- R is powm(A, B, C).\nf([B2|Bs], B1, A, C, R) :-\n  tot(C, P),\n  (lt([B2|Bs], B1, P) ->\n    pow([B2|Bs], B1, BN)\n  ; f(Bs, B2, B1, P, BMP),\n    BN is BMP+P\n  ),\n  f([], BN, A, C, R).\n\nlast_digit([], 1).\nlast_digit([N], R) :- R is N mod 10.\nlast_digit([N1,N2|Ns], last_digit) :-\n  f(Ns, N2, N1, 10, last_digit).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230654,"user_id":null,"body":"list_of_possible(2,[6,2,4,8]) :- !.\nlist_of_possible(3,[1,3,9,7]) :- !.\nlist_of_possible(4,[6,4]) :- !.\nlist_of_possible(7,[1,7,9,3]) :- !.\nlist_of_possible(8,[6,8,4,2]) :- !.\nlist_of_possible(9,[1,9]) :- !.\n\nare_all(_,[]).\nare_all(N, [N|T]) :- are_all(N,T).\n\nis_zero([0]) :- !.\nis_zero([0|T]) :- \n  not(is_zero(T)).\n\nis_one([1|_]) :- !.\n\nis_one([_|T]) :- is_zero(T).\n\nrem_2([H|T], 0) :-\n  0 =:= mod(H,2),\n  not(is_zero(T)), \n  !.\n\nrem_2(_,1).\n\nrem_4([],1) :- !.\nrem_4([_|T],1) :-\n  is_zero(T),\n  !.\n\nrem_4([H|_],0) :-\n  0 =:= mod(H,4),\n  !.\n\nrem_4([H|_],1) :-\n  1 =:= mod(H,4),\n  !.\n\nrem_4([2],2) :- !.\n\nrem_4([H|T],2) :-\n  2 =:= mod(H,4),\n  is_one(T),\n  !.\n\nrem_4([H|_],0) :-\n  2 =:= mod(H,4),\n  !.\n  \n% rem is 3\nrem_4([_|T],1) :-\n  rem_2(T,0),\n  !.\n\nrem_4(_,3) :- !.\n\nlast_digit([N|T], R) :- \n  N > 9,\n  N2 is mod(N,10),\n  last_digit([N2|T], R),\n  !.\n\nlast_digit([], 1) :- !.\n\nlast_digit([0|T], 0) :- is_zero([0|T]), !.\nlast_digit([0|_], 1).\n\nlast_digit([_|T], 1) :- is_zero(T), !.\n\nlast_digit([1|_], 1) :- !.\nlast_digit([5|_], 5) :- !.\nlast_digit([6|_], 6) :- !.\n\nlast_digit([N|T], R) :- \n  member(N, [4,9]),\n  rem_2(T,Rem),\n  list_of_possible(N,Lst),\n  nth0(Rem,Lst,R),\n  !.\n  \nlast_digit([N|T], R) :- \n  rem_4(T,Rem),\n  list_of_possible(N,Lst),\n  nth0(Rem,Lst,R),\n  !.\n  \n\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230655,"user_id":53,"body":"last_digit(Numbers, last_digit) :-\n  length(Numbers, W),\n  C is W - 1,\n  aux(Numbers, C, 1, last_digit)\n.\n\naux(Numbers, Index, Factor, Res) :-\n  (Index < 0  ->\n      Res is mod(Factor, 10)\n    ;\n      nth0(Index, Numbers, El),\n      (El > 9  ->\n          X is mod(El, 20) + 20\n        ;\n          X is El\n        ),\n      (Factor >= 4  ->\n          Y is mod(Factor, 4) + 4\n        ;\n          Y is Factor\n        ),\n      pow(X, Y, NFactor),\n      NIndex is Index - 1,\n      aux(Numbers, NIndex, NFactor, Res)\n    )\n. ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230656,"user_id":77,"body":"last_digit([], 1).\nlast_digit([H|T], D) :-\n    reverse(T, R),\n    reduce(R, 1, E),\n    D is powm(H, E, 10).\n\npow4(_, 0, 1) :- !.\npow4(0, _, 0) :- !.\npow4(1, _, 1) :- !.\npow4(A, B, R) :-\n    R is 4 + powm(A, B, 4).\n\nreduce([], N, N).\nreduce([H|T], N1, N) :-\n    pow4(H, N1, N2),\n    reduce(T, N2, N).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230657,"user_id":76,"body":"last_digit(Numbers, last_digit) :-\n  reverse(Numbers, RevNums),\n  foldl([A, R, L] >> (\n    (A < 20 -> Base is A ; Base is A mod 20 + 20),\n    (R < 4 -> Exp is R ; Exp is R mod 4 + 4),\n    L is Base ^ Exp\n  ), RevNums, 1, LastNum),\n  last_digit is LastNum mod 10.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"55192f4ecd82ff826900089e":[{"id":230658,"user_id":76,"body":"divide(W, R) :- (W > 2, 0 is mod(W, 2) -> R is 1 ; R is 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230659,"user_id":null,"body":"\n\ndivide(W, R) :- W < 4, R is 0; R is (mod(W,2)-1)*(-1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230660,"user_id":527,"body":"divide(2, 0).\ndivide(W, 1) :- 0 is W mod 2.\ndivide(_, 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230661,"user_id":null,"body":"divide(W, R) :- W >= 4, mod(W, 2) =:= 0, R is 1.\ndivide(_, R) :- R is 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230662,"user_id":null,"body":"divide(W, R) :- W > 2, W mod 2 =:= 0 -> R is 1 ; R is 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230663,"user_id":null,"body":"divide(W , 0) :- 2 >= W , !.\ndivide(W, R) :- T is W - 2 , T0 is mod(T , 2) , R is xor(T0,1) .","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230664,"user_id":168,"body":"divide(W, R) :- W >= 4, R is 1 - W mod 2.\ndivide(W, 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230665,"user_id":null,"body":"divide(W, 1) :- \n  M is W mod 2,\n  M =:= 0,\n  W > 2,\n  !.\n  \ndivide(_, 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230666,"user_id":null,"body":"divide(W, R) :- \n    W < 3, R is 0;\n    (0 =:= mod(W, 2) -> R is 1; R is 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230667,"user_id":544,"body":":- use_module(library(clpfd)).\n\ndivide(W, 1) :-\n  A + B #= W,\n  [A, B] ins 1 .. sup, \n  A mod 2 #= 0,\n  B mod 2 #= 0, !.\n  \ndivide(_, 0).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"551f37452ff852b7bd000139":[{"id":230668,"user_id":527,"body":"add_binary(A, B, Binary) :-\n  S is A + B,\n  format(string(Binary), \"~2r\", S).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230669,"user_id":null,"body":"add_binary(A, B, Binary) :- format(string(Binary), '~2r', [A  + B]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230670,"user_id":null,"body":"add_binary(A, B, Binary) :-\n  C is A+B, \n  format(string(Binary), \"~2r\", [C]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230671,"user_id":null,"body":"add_binary(A, B, Bin) :- format(string(Bin), '~2r', [A+B]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230672,"user_id":null,"body":"add_binary(A, B, Binary) :-\n  Decimal is A + B,\n  decimal_binary(Decimal, Binary).\ndecimal_binary(0, \"0\").\ndecimal_binary(1, \"1\").\ndecimal_binary(D, B) :-\n  D >= 2,\n  D1 is D \/\/ 2,\n  R is D rem 2,\n  decimal_binary(D1, B1),\n  string_concat(B1, R, B).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230673,"user_id":null,"body":"%to_binary(+N, -BinaryString)\nto_binary(0, \"0\").\nto_binary(1, \"1\").\nto_binary(N, Result) :- N > 1,\n                        divmod(N, 2, HalfN, X), \n                        atom_number(RightMostDigit, X),\n                        atom_string(RightMostDigit, StrRightMostDigit),\n                        to_binary(HalfN, LeftDigits), \n                        string_concat(LeftDigits, StrRightMostDigit, Result). \n\nadd_binary(A, B, Binary) :- N is A + B, to_binary(N, Binary).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230674,"user_id":null,"body":"add_binary(A, B, Binary) :-\n  C is A + B,\n  decimal_binary(C, Binary).\n\ncodes_string(A,B) :- string_codes(B,A).\ndecimal_binary --> decimal_binary_, reverse, codes_string.\n\ndecimal_binary_(0, []).\ndecimal_binary_(N, [X|Xs]) :-\n  N \\= 0,\n  X is 48+N mod 2,\n  N0 is N\/\/2,\n  decimal_binary_(N0, Xs).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230675,"user_id":null,"body":"find_max(0, _, 0) :- !.\nfind_max(X, Act, R) :- Z0 is 2^Act * 2, (Z0 > X -> R is Act; Z1 is Act + 1, find_max(X, Z1, R)).\n\nadd_zero(0, \"\") :- !.\nadd_zero(Ile, R) :- Z0 is Ile - 1, add_zero(Z0, Z1), string_concat(\"0\", Z1, R).\n\nto_binary(X, Last, R, W) :- X > 0, find_max(X, 0, Z0), Z1 is Last - Z0 - 1, add_zero(Z1, Z2), string_concat(R, Z2, Z3), string_concat(Z3, \"1\", Z4), Z5 is X - 2^Z0, to_binary(Z5, Z0, Z4, W). \nto_binary(0, Last, R, W) :- add_zero(Last, Z0), string_concat(R, Z0, W).\n\nadd_binary(A, B, Binary) :- Z0 is A + B, find_max(Z0, 0, Z1), Z2 is Z0 - 2^Z1, to_binary(Z2, Z1, \"1\", Binary).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230676,"user_id":null,"body":"binary(0, \"0\").\nbinary(1, \"1\").\nbinary(N, B) :-\n    N > 1,\n    L is mod(N, 2), U is div(N, 2),\n    binary(L, BL), binary(U, BU),\n    string_concat(BU, BL, B).\n\n\nadd_binary(A, B, Binary) :- C is A + B, binary(C, Binary).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230677,"user_id":null,"body":"convert(0,V,_,V).\nconvert(N,V,C,Val):-\n    Remainder is N mod 2,\n    N1 is N\/\/2,\n    V1 is V + Remainder*(10^C),\n    C1 is C + 1,\n    convert(N1,V1,C1,Val).\n\nconvert(D,B):-\n    D > -1,\n    convert(D,0,0,B), !.\n\nadd_binary(N,V,B):-\n  S is N+V,\n  convert(S,BR),\n  number_string(BR,B).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5539fecef69c483c5a000015":[{"id":230678,"user_id":76,"body":"backwards_prime(Start, End, Ls) :-\n  findall(P, (between(Start, End, P), reverse_num(P, RP), P =\\= RP, crypto_is_prime(P, []), crypto_is_prime(RP, [])), Ls)\n.\n\nreverse_num(N, R) :- number_chars(N, Cs), reverse(Cs, RCs), number_chars(R, RCs).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230679,"user_id":null,"body":"backwards_prime(Start, End, Ls) :-\n  aggregate_all(bag(P1), (\n    between(Start,End,P1),\n    crypto_is_prime(P1,[]),\n    number_chars(P1,Cs1),\n    reverse(Cs1,Cs2),\n    Cs1 \\= Cs2,\n    number_chars(P2,Cs2),\n    crypto_is_prime(P2,[])\n  ), Ls).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230680,"user_id":null,"body":"dig_num(D,N):-\n    maplist(number_string,D,X),\n    atomic_list_concat(X,S),\n    atom_number(S,N).\n\nnum_dig(N,D):-\n    number_string(N,S), \n    string_chars(S,C), \n    maplist(atom_number,C,D).\n\nis_prime(2) :- !.\nis_prime(3) :- !.\nis_prime(X) :-\n    X > 3,\n    X mod 2 =\\= 0,\n    is_prime_(X, 3).\n\nis_prime_(X, N) :-\n    (  N*N > X\n    -> true\n    ;  X mod N =\\= 0,\n       M is N + 2,\n       is_prime_(X, M)\n    ).\n\nbackwards_prime(N):-\n    is_prime(N),\n    num_dig(N,L),\n    reverse(L, Reverse),\n    L\\=Reverse,\n    dig_num(Reverse,N2),\n    is_prime(N2).\n    \n\nbackwards_prime(Start, End, Ls) :-\n    findall(X,between(Start,End,X),L),\n    include(backwards_prime,L,Ls)\n    .","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230681,"user_id":53,"body":"is_prime(N, R) :-\n  is_prime_(N, 5, R).\n  \nis_prime_(N, I, R) :-\n  (  4 > N -> R = 1\n  ;  mod(N, 2) =:= 0 -> R = 0\n  ;  mod(N, 3) =:= 0 -> R = 0\n  ;  I * I > N -> R = 1\n  ;  mod(N, I) =:= 0 -> R = 0\n  ;  I2 is I + 2, mod(N, I2) =:= 0 -> R = 0\n  ;  I6 is I + 6, is_prime_(N, I6, R)\n  ).\n  \nreverse_digits(N, M) :-\n  (  integer(N) ->\n     reverse_digits(N, 0, M)\n  ;  integer(M),\n     reverse_digits(M, 0, N)\n  ).\n\nreverse_digits(0, M, M) :- !.\nreverse_digits(N, M0, M) :-\n  N > 0,\n  R is N div 10,\n  M1 is M0 * 10 + N mod 10,\n  reverse_digits(R, M1, M).\n  \nis_palindromic(N, R) :-\n  reverse_digits(N, M),\n  (  N =:= M -> R = 1\n  ;  R = 0 ).\n  \nbackwards_prime(A, B, Ls) :-\n  findall(V, sol(A, B, V), Ls).\n  \nsol(A, B, V) :-\n  between(A, B, I),\n  is_prime(I, P1),\n  P1 =:= 1,\n  is_palindromic(I, P2),\n  P2 =:= 0,\n  reverse_digits(I, J),\n  is_prime(J, P3),\n  P3 =:= 1,\n  V = I\n  .","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230682,"user_id":null,"body":"probably_prime(2) :- !.\nprobably_prime(P) :- P mod 2 =:= 1, powm(2, P - 1, P) =:= 1.\n\nprime_aux(P, X) :- X * X > P, !.\nprime_aux(P, X) :- P mod X =\\= 0, Y is X + 1, prime_aux(P, Y).\n\nprime(P) :- probably_prime(P), prime_aux(P, 2).\n\nto_reverse_digits(0, []) :- !.\nto_reverse_digits(N, [D | Ds]) :- divmod(N, 10, M, D), to_reverse_digits(M, Ds).\n\nfrom_reverse_digits([], 0).\nfrom_reverse_digits([D | Ds], N) :- from_reverse_digits(Ds, M), N is 10 * M + D.\n\nrev(M, N) :- to_reverse_digits(M, Ds), reverse(Ds, Es), from_reverse_digits(Es, N).\n\nis_backwards_prime(P) :- prime(P), rev(P, Q), P =\\= Q, prime(Q).\n\nbackwards_prime(Start, End, []) :- Start > End, !.\nbackwards_prime(Start, End, [Start | Ps]) :- is_backwards_prime(Start), !, T is Start + 1, backwards_prime(T, End, Ps).\nbackwards_prime(Start, End, Ps) :- T is Start + 1, backwards_prime(T, End, Ps).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230683,"user_id":527,"body":"backwards_prime(Start, End, Ls) :-\n  findall(L, (between(Start, End, L), backwards_prime(L)), Ls).\n\nbackwards_prime(N) :-\n  number_chars(N, Cs),\n  reverse(Cs, Ds),\n  Cs \\= Ds,\n  number_chars(R, Ds),\n  crypto_is_prime(N, []),\n  crypto_is_prime(R, []).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230684,"user_id":492,"body":"rev_int(Num, RevNum) :-\n    number_codes(Num, IntLs),\n    reverse(IntLs, IntLsRev),\n    number_codes(RevNum, IntLsRev).\nprime__(2).\nprime__(N) :- \n    between(3, inf, N),\n    1 is N mod 2,\n    M is floor(sqrt(N+1)), \n    Lim is (M-1) \/\/ 2,\n    forall( between(1, Lim, I), N mod (2*I+1) > 0 ).\nbackwards_prime(Start, End, Ls) :-\n    findall(\n        E,\n        (   \n            between(Start, End, U),   \n            rev_int(U, V),                    \n            U =\\= V, prime__(U), prime__(V),           \n            E = U           \n        ),\n        Ls\n).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230685,"user_id":492,"body":"rev_int(Num, RevNum) :-\n    number_codes(Num, IntLs),\n    reverse(IntLs, IntLsRev),\n    number_codes(RevNum, IntLsRev).\nnegative(Number) :-\n    Number < 0.\nprime__(2).\nprime__(N) :- \n    between(3, inf, N),\n    1 is N mod 2,\n    M is floor(sqrt(N+1)), \n    Lim is (M-1) \/\/ 2,\n    forall( between(1, Lim, I), N mod (2*I+1) > 0 ).\nbackwards_prime(Start, End, Ls) :-\n    findall(\n        E,\n        (   \n            between(Start, End, U),   \n            rev_int(U, V),                    \n            U =\\= V, prime__(U), prime__(V),           \n            E = U           \n        ),\n        Ls\n).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5541f58a944b85ce6d00006a":[{"id":230686,"user_id":76,"body":"fib(A, B, P, [A, B]) :- A * B >= P, !.\nfib(A, B, P, R) :- S is A + B, fib(B, S, P, R).\n\nproduct_fib(Prod, [A, B, Bool]) :-\n  fib(0, 1, Prod, [A, B]),\n  (A * B =:= Prod -> Bool = 1; Bool = 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230687,"user_id":null,"body":":- nb_setval(fs,[[0,1],0,1]).\nnextfib(L0,A,B) :- C is A+B, append(L0,[C],L1), nb_setval(fs,[L1,B,C]).\n\nproduct_fib(Prod,R) :- repeat, \n  b_getval(fs,[L,A,B]), \n  (A*B<Prod -> (nextfib(L,A,B),fail) ; !,product_fib(Prod,L,R)).\n\nproduct_fib(Prod,L,[A,B,C]) :- \n  nextto(A,B,L), is(D,A*B), (D=:=Prod,!,C=1 ; D>Prod,!,C=0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230688,"user_id":null,"body":"product_fib(Prod, R) :-\n  pf_helper(Prod, 0, 1, R).\n\npf_helper(Prod, F0, F1, R) :-\n  F0 * F1 =:= Prod,\n  R = [F0, F1, 1],\n  !;\n  \n  F0 * F1 > Prod,\n  R = [F0, F1, 0],\n  !;\n  \n  F2 is F0 + F1,\n  pf_helper(Prod, F1, F2, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230689,"user_id":null,"body":":- table fib\/2.\nfib(0,1):-!.\nfib(1,1):-!.\nfib(N,R):-\n  N > 1,\n  N1 is N-1,\n  N2 is N-2,\n  fib(N1,R1),\n  fib(N2,R2),\n  R is R1 + R2.\n\nsatisfies(0, 2, [0,1,1]).\nsatisfies(1, 2, [1,1,1]).\nsatisfies(2, 2, [1,2,1]).\n\nsatisfies(Prod, I, R):-\n  I1 is I+1,\n  fib(I, R1),\n  fib(I1,R2),\n  (\n    Prod =:= R1*R2 ->\n    R = [R1,R2,1]\n  ;\n    (\n      Prod < R1*R2 ->\n      R = [R1,R2,0]\n    ;\n      satisfies(Prod, I1, R)\n    )\n  )\n  .\n\nproduct_fib(Prod, R):-\n  satisfies(Prod, 2, R).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230690,"user_id":168,"body":"fib(A, B, P, R) :- \n  A * B < P -> B1 is A + B, fib(B, B1, P, R);\n  A * B =:= P -> R = [A, B, 1]; \n  R = [A, B, 0].\n\nproduct_fib(Prod, R) :-\n  fib(0, 1, Prod, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230691,"user_id":53,"body":"\naux(A, B, N, R) :-\n  K is A * B,\n  (K == N -> R = [A, B, 1];\n   K  > N -> R = [A, B, 0];\n   M is A + B, aux(B, M, N, R))\n  .\n\nproduct_fib(N, R) :-\n  aux(0, 1, N, R)\n  .","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230692,"user_id":null,"body":"fibs([X,Y|Z]) :-\n  freeze(Z, (S is X + Y, T is Y + S, Z = [S,T|_], fibs(Z))).\n\nproduct_fib(Prod, R) :-\n  F = [0,1|_],\n  fibs(F),\n  append(_,[A,B|_],F),\n  S is A * B,\n  Prod =< S,\n  !,\n  (Prod = S -> R = [A,B,1]\n     ;\n   R = [A,B,0]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230693,"user_id":null,"body":"my_product_fib( Prod, F1, F2, R ) :-\n  F1F2 is F1 * F2,\n  Prod > F1F2,\n  F3 is F1 + F2,\n  my_product_fib( Prod, F2, F3, R).\n\nmy_product_fib( Prod, F1, F2, [ F1, F2, Result] ) :-\n  F1F2 is F1 * F2,\n  Prod = F1F2,\n  Result is 1.\n\nmy_product_fib( Prod, F1, F2, [ F1, F2, Result] ) :-\n  F1F2 is F1 * F2,\n  Prod < F1F2,\n  Result = 0.\n\nproduct_fib(Prod, R) :-\n  F1 is 0,\n  F2 is 1,\n  length( R, 3 ),\n  my_product_fib( Prod, F1, F2, R )\n.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230694,"user_id":null,"body":"my_product_fib( Prod, F1, F2, R ) :-\n  F1F2 is F1 * F2,\n  Prod > F1F2,\n  F3 is F1 + F2,\n  my_product_fib( Prod, F2, F3, R).\n\nmy_product_fib( Prod, F1, F2, R ) :-\n  F1F2 is F1 * F2,\n  Prod = F1F2,\n  Result is 1,\n  nth0( 0, R, F1 ),\n  nth0( 1, R, F2 ),\n  nth0( 2, R, Result ).\n\nmy_product_fib( Prod, F1, F2, R ) :-\n  F1F2 is F1 * F2,\n  Prod < F1F2,\n  Result = 0,\n  nth0( 0, R, F1 ),\n  nth0( 1, R, F2 ),\n  nth0( 2, R, Result ).\n\nproduct_fib(Prod, R) :-\n  F1 is 0,\n  F2 is 1,\n  length( R, 3 ),\n  my_product_fib( Prod, F1, F2, R )\n.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230695,"user_id":null,"body":"product_fib(Prod, R) :-\n  product_fibAux(Prod, R, 0, 1).\n  \nproduct_fibAux(Prod, [F, F1, 1], F, F1) :-\n  Prod is F * F1.\nproduct_fibAux(Prod, [F, F1, 0], F, F1) :-\n  Prod < F * F1.\nproduct_fibAux(Prod, R, F, F1) :-\n  Prod > F * F1,\n  F2 is F + F1,\n  product_fibAux(Prod, R, F1, F2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5544c7a5cb454edb3c000047":[{"id":230696,"user_id":null,"body":"bouncing_ball(H, Bounce, Window, R) :-\n  H > 0, Bounce > 0, Bounce < 1, Window < H, bouncing_ball(H * Bounce, Bounce, Window, R1), R is R1+2\n.\nbouncing_ball(_, _, _, -1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230697,"user_id":null,"body":"bouncing_ball(H, B, W, R) :- H > W, H > 0, B >  0, B < 1, H1 is H*B, bouncing_ball(H1,B,W,R1), R is R1+2.\nbouncing_ball(_,_,_,-1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230698,"user_id":527,"body":"bouncing_ball(H, Bounce, Window, R) :-\n  H > 0, 0 < Bounce, Bounce < 1, Window < H\n  -> R is ceiling(log(Window \/ H) \/ log(Bounce)) * 2 - 1\n  ; R is -1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230699,"user_id":168,"body":"bouncing_ball(H, Bounce, Window, R) :-\n  (H =< 0; Bounce =< 0; Bounce >= 1; Window >= H) -> R = -1;\n  R is 2 * ceil(log(Window \/ H) \/ log(Bounce)) - 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230700,"user_id":null,"body":"bouncing_ball(H, B, W, -1):- H =< 0, !; B =< 0, !; B >= 1,!; W >= H, !.\nbouncing_ball(H, B, W, R) :- NH is H*B, NH >= W, !, bouncing_ball(NH,B,W,RR), R is 2+RR.\nbouncing_ball(H,B,W,1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230701,"user_id":null,"body":"fall(H, W) :- \n    W < H.\nbounce(H, B, W) :-\n    W < H * B.\n\nbouncing_ball(H,B,W,-1):-\n  H =< 0, !;\n  B =< 0, !; B >= 1, !;\n  W >= H, !.\n\nbouncing_ball(H,B,W,R) :- fall_and_bounce(H,B,W,R).\n\nfall_and_bounce(H, _, Window, 0) :-\n    \\+ fall(H, Window), !.\nfall_and_bounce(H, B, W, 1) :- \n    fall(H, W),\n    \\+ bounce(H, B, W), !.\nfall_and_bounce(H, Bounce, Window, R) :-\n    NewH is H * Bounce,\n    fall_and_bounce(NewH, Bounce, Window, R1),\n    R is R1 + 2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230702,"user_id":null,"body":":- use_module(library(chr)).\n:- chr_constraint drop\/4.\ndrop(H,B,W,(N,M)) <=> H>0, W<H | drop(H*B,B,W,(N,M+2)).\ndrop(_,_,_,(N,M)) <=> N is M.\ndrop(H,B,W,N) <=> H>0, B>0, B<1, W<H | drop(H,B,W,(N,-1)).\ndrop(_,_,_,N) <=> N is -1.\n\nbouncing_ball(H,B,W,N) :- drop(H,B,W,N).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230703,"user_id":null,"body":"bouncing_ball(H, Bounce, Window, -1) :- not(H > 0).\nbouncing_ball(H, Bounce, Window, -1) :- not(Bounce > 0).\nbouncing_ball(H, Bounce, Window, -1) :- not(Bounce < 1).\nbouncing_ball(H, Bounce, Window, -1) :- not(Window<H).\n\n\nbouncing_ball(H, Bounce, Window, R) :- H>0, Bounce > 0, \n    Bounce < 1, Window < H, NewH is H*Bounce, \n    bounce(NewH, Bounce, Window, R1), R is R1+1.\n\nbounce(H, _, Window, 0):- not(H>Window).\nbounce(H, Bounce, Window, R):-H>Window, NewH is H*Bounce, \n    bounce(NewH, Bounce,Window,R1), R is R1+2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230704,"user_id":null,"body":"bouncing_ball(H, Bounce, Window, -1) :-\n  H =< 0;\n  Bounce >= 1;\n  Bounce =< 0;\n  Window >= H.\n\nbouncing_ball(H, _, Window, 0) :-\n  H < Window.\n  \nbouncing_ball(H, Bounce, Window, R) :-\n  H >= Window,\n  NewH is H * Bounce,\n  NewH >= Window,\n  bouncing_ball(NewH, Bounce, Window, R_),\n  R is R_ + 2, !;\n  R is 1.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230705,"user_id":null,"body":"bouncing_ball(H, Bounce, Window, R) :-\n  ( H =< 0 -> R is -1;\n  ( Bounce =< 0 -> R is -1;\n  ( Bounce >= 1 -> R is -1;\n  ( Window >= H -> R is -1;\n  ( Window < H*Bounce -> bouncing_ball(H*Bounce, Bounce, Window, R1), R is 2 + R1;\n    R is 1))))).\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5545f109004975ea66000086":[{"id":230706,"user_id":645,"body":"is_divisible(N, X, Y, 1) :- N mod X =:= 0, N mod Y =:= 0.\nis_divisible(_, _, _, 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230707,"user_id":527,"body":"is_divisible(N, X, Y, R) :- N mod X =:= 0, N mod Y =:= 0 -> R is 1; R is 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230708,"user_id":645,"body":"is_divisible(N, X, Y, 1) :- mod(N, X) =:= 0, mod(N, Y) =:= 0.\nis_divisible(N, X, Y, 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230709,"user_id":null,"body":"is_divisible(N, X, Y, R) :- (0 is N rem X, 0 is N rem Y, R is 1, !); R is 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230710,"user_id":null,"body":"is_divisible(N, X, Y, R) :- R is 1 - sign(rem(N, X) + rem(N, Y)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230711,"user_id":null,"body":"is_divisible(N, X, Y, R) :- mod(N,X) > 0 -> R is 0; 0 is mod(N,Y) -> R is 1; R is 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230712,"user_id":null,"body":"is_divisible(N, X, Y, 1) :- 0 is N mod X, 0 is N mod Y, !.\nis_divisible(_, _, _, 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230713,"user_id":76,"body":"is_divisible(N, X, Y, R) :- \n  Q is rem(N, X) + rem(N, Y),\n  (Q == 0 -> R is 1 ; R is 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230714,"user_id":null,"body":"is_divisible(N, X, Y, 1) :-\n  0 =:= N rem X,\n  0 =:= N rem Y,\n  !.\nis_divisible(_, _, _, 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230715,"user_id":null,"body":"is_divisible(N, X, Y, R) :- (divmod(N, X, _, 0), divmod(N, Y, _, 0), R is 1); R is 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5547cc7dcad755e480000004":[{"id":230716,"user_id":76,"body":"remove_nb(N, Ls) :-\n  Sum is N * (N + 1) \/ 2,\n  aggregate_all(set([A, B]), (\n    between(1, N, A), \n    B is (Sum - A) \/ (A + 1),\n    B =< N,\n    float_fractional_part(B) =:= 0\n  ), Ls)\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230717,"user_id":53,"body":"remove_nb(N, Ls) :-\n    M is N * (N + 1) \/\/ 2,\n    findall(E,(\n        between(1, N, X),\n        Y is (M - X) \/\/ (X + 1),\n        ( Y =< N, (X * Y) =:= (M - X - Y) -> E = [X, Y] ; fail )\n    ),Ls).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230718,"user_id":null,"body":"% Without commenting out some redundant checks the solution times out (>12s). Locally 1'000'008 works fine (~2s) though.\n% Changing range from (1..N) to (N\/2..Sqrt(Sum)) made it much faster.\n\niotamapopt_aux(P, N, N, [Y]) :-    call(P, N, Y), !.\niotamapopt_aux(P, N, N,  []) :- \/*\\+ call(P, N, _),*\/ !.\niotamapopt_aux(P, N, I, [Y|Ys]) :-    call(P, I, Y), \/*I < N,*\/ In is I + 1, iotamapopt_aux(P, N, In, Ys), !.\niotamapopt_aux(P, N, I,    Ys ) :- \/*\\+ call(P, I, _), I < N,*\/ In is I + 1, iotamapopt_aux(P, N, In, Ys).\n\nremove_nb_aux(N, A, X, M) :- AmX is A - X, SX is X + 1,\n                divmod(AmX, SX, Y, R),\n                0 is R,\n                Y =< N,\n                M = [X, Y].\n\nduplpairs([], []).\nduplpairs([[X, Y]|Ps], [[X, Y],[Y, X]|Ys]) :- duplpairs(Ps, Ys).\n\nremove_nb(N, SLs) :- A is ((1 + N) * N) div 2,\n                    SqrtN is floor(sqrt(A)),\n                    Half is N div 2,\n                    iotamapopt_aux(remove_nb_aux(N, A), SqrtN, Half, Ps),\n                    duplpairs(Ps, Ls),\n                    msort(Ls, SLs).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230719,"user_id":null,"body":"% Without commenting out some redundant checks the solution times out (>12s). Locally 1'000'008 works fine (~2s) though.\n\niotamapopt_aux(P, N, N, [Y]) :-    call(P, N, Y), !.\niotamapopt_aux(P, N, N,  []) :- \/*\\+ call(P, N, _),*\/ !.\niotamapopt_aux(P, N, I, [Y|Ys]) :-    call(P, I, Y), \/*I < N,*\/ In is I + 1, iotamapopt_aux(P, N, In, Ys), !.\niotamapopt_aux(P, N, I,    Ys ) :- \/*\\+ call(P, I, _), I < N,*\/ In is I + 1, iotamapopt_aux(P, N, In, Ys).\n\n% (Fin n -> A) -> n : Int -> [A]  \n\/* iotamapopt(_, 0, []). *\/\niotamapopt(P, N, Ys) :- iotamapopt_aux(P, N, 1, Ys).\n\nremove_nb_aux(N, A, X, M) :- AmX is A - X, SX is X + 1,\n                divmod(AmX, SX, Y, R),\n                0 is R,\n                Y =< N,\n                M = [X, Y].\n\nremove_nb(N, Ls) :- A is ((1 + N) * N) div 2,\n                    iotamapopt(remove_nb_aux(N, A), N, Ls).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230720,"user_id":null,"body":"qualifies(Seqsum, N, X):-\n    Y is (Seqsum - X) \/\/ (X+1),\n    Y =< N, \n    X * Y =:= Seqsum - X - Y.\n\nremove_nb_(N, Ls) :-\n    Seqsum is N*(N+1)\/2,\n    N1 is N+1,\n    findall(X, between(1, N, X), L),\n    include(qualifies(Seqsum, N1), L, Ls).\n\njoinhalves([H1],[H2],[[H1,H2],[H2,H1]]).\njoinhalves([H1|L1],[H2|L2],[[H1,H2],[H2,H1]|L]):-\n    joinhalves(L1, L2, L).\n\nfolded(L,Lf):-\n    append(A, B1, L),\n    length(A, N),\n    length(B1, N),\n    reverse(B1, B),\n    joinhalves(A,B,Lf).\n\nremove_nb(N,Ls):-\n    remove_nb_(N, L),\n    (folded(L, L1)->sort(L1, Ls);Ls = []).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230721,"user_id":null,"body":"remove_nb_(N, Pair) :-\n  Sum is (N*(N+1)) \/ 2,\n  Stop is floor(sqrt(Sum)),\n  between(1,Stop,A),\n  B is (Sum - A) \/ (A + 1),\n  B < N,\n  B =:= floor(B),\n  ( Pair = [A,B]  ;  Pair = [B,A]).\n\nremove_nb(N, Res) :-\n    findall(Pair, remove_nb_(N, Pair), Pairs),\n    msort(Pairs, Res).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230722,"user_id":null,"body":"remove_nb_(N, [A,B]) :-\n  Sum is (N*(N+1)) \/ 2,\n  between(1,N,A),\n  B is (Sum - A) \/ (A + 1),\n  B < N,\n  B =:= floor(B).\n\nremove_nb(N, Res) :-\n    findall(Pair, remove_nb_(N, Pair), Pairs),\n    msort(Pairs, Res).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230723,"user_id":null,"body":"remove_nb(N, Res) :-\n  Sum is ((N*(N+1)) div 2)+1,\n  I0 is ceil(sqrt(Sum)),\n  setof(Res,solve(N,Sum,Res,I0),Res1),\n  append(Res1,Res2),\n  sort(Res2,Res),!\n  ;\n  Res=[],!.\n  \nsolve(N,S,R,I):-\n  S mod I =:= 0,\n  S div I < N, A is I - 1, B is S div I - 1, R=[[A,B],[B,A]]\n  ;\n  I1 is I+1, I1 < N, solve(N,S,R,I1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230724,"user_id":492,"body":"remove_nb(N, Ls) :-\n    Total is N * (N + 1) \/\/ 2,\n    findall(\n        E,\n        (\n            Lim is N \/\/ 2,\n            between(Lim, N, A),\n            B is Total - A,\n            succ(A, A1),\n            (0 is B mod A1 ->\n                P is B \/\/ A1,\n                E = [A, P]\n            ;\n                fail\n            )\n        ),\n        Ls\n        ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"554a44516729e4d80b000012":[{"id":230725,"user_id":76,"body":"nb_months(StartPriceOld, StartPriceNew, SavingperMonth, PercentLossByMonth, L) :-\n  nb_months(0, StartPriceOld, StartPriceNew, SavingperMonth, PercentLossByMonth, L).\n\nnb_months(Month, OldPrice, NewPrice, Savings, _, [Month, Diff]) :- \n  OldPrice + Savings * Month >= NewPrice,\n  Diff is round(OldPrice + Savings * Month - NewPrice), !.\n  \nnb_months(Month, OldPrice, NewPrice, Savings, PercentLoss, Result) :-\n  (Month mod 2 =:= 1 -> NewPercentLoss is PercentLoss + 0.5 ; NewPercentLoss = PercentLoss),\n  succ(Month, NextMonth),\n  NextOldPrice is OldPrice * (100 - NewPercentLoss) \/ 100,\n  NextNewPrice is NewPrice * (100 - NewPercentLoss) \/ 100,\n  nb_months(NextMonth, NextOldPrice, NextNewPrice, Savings, NewPercentLoss, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230726,"user_id":null,"body":"nb_months(StartPriceOld, StartPriceNew, SavingPerMonth, PercentLossByMonth, L) :-\n    nb_months_(StartPriceOld, StartPriceNew, 0, SavingPerMonth, PercentLossByMonth, L).\n\nnb_months_(O, N, I, SavingPerMonth, PercentLossByMonth, L) :-\n    P is PercentLossByMonth + 0.5 * floor((I + 1) \/\/ 2),\n    S is I * SavingPerMonth,\n    D is O + S - N,\n    ( D >= 0 -> ( D1 is round(D), L = [I, D1] )\n    ; ( F is (100 - P) \/ 100,\n        O1 is F * O,\n        N1 is F * N,\n        I1 is I + 1,\n        nb_months_(O1, N1, I1, SavingPerMonth, PercentLossByMonth, L)\n      )\n    ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230727,"user_id":492,"body":"aux(Months, Available, PriceOld, PriceNew, SavingperMonth, PercentLossByMonth, L) :-\n    (Available < PriceNew ->\n        succ(Months, M),\n        (0 is M mod 2 ->\n            Plbm is PercentLossByMonth + 0.5\n        ;\n            Plbm is PercentLossByMonth\n        ),\n        NewPriceOld is PriceOld * (100 - Plbm)  \/ 100.0,\n        NewPriceNew is PriceNew * (100 - Plbm)  \/ 100.0,\n        NewAvailable is M * SavingperMonth + NewPriceOld,\n        aux(M, NewAvailable, NewPriceOld, NewPriceNew, SavingperMonth, Plbm, L)\n    ;\n        Pp is Available - PriceNew,\n        P is round(Pp),\n        L = [Months, P]\n    ).\nnb_months(StartPriceOld, StartPriceNew, SavingperMonth, PercentLossByMonth, L) :-\n    aux(0, StartPriceOld, StartPriceOld, StartPriceNew, SavingperMonth, PercentLossByMonth, L).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230728,"user_id":null,"body":"% task:\n% https:\/\/www.codewars.com\/kata\/554a44516729e4d80b000012\/train\/prolog\nnb_months(StartPriceOld, StartPriceNew, SavingperMonth, PercentLossByMonth, L) :-\n  nb_months2(StartPriceOld, StartPriceNew, SavingperMonth, PercentLossByMonth, 0, 0, L).\n  \n\nnb_months1(StartPriceOld, StartPriceNew, _SavingperMonth, _PercentLossByMonth, Time, TotalSavings, [Time, Result|[]]) :-\n\tTotalSavings + StartPriceOld >= StartPriceNew,\n\t!,\n\tResult is round(TotalSavings + StartPriceOld - StartPriceNew).\n\nnb_months1(StartPriceOld, StartPriceNew, SavingperMonth, PercentLossByMonth, Time, TotalSavings, L) :-\n\tNewStartPriceOld is StartPriceOld * ((100 - PercentLossByMonth) \/ 100),\n\tNewStartPriceNew is StartPriceNew * ((100 - PercentLossByMonth) \/ 100),\n\tsucc(Time, NewTime),\n\tTemp is TotalSavings + SavingperMonth,\n\tNewTotalSavings is round(Temp),\n\t\n\tnb_months2(\tNewStartPriceOld, \n\t\t\t\tNewStartPriceNew,\n\t\t\t\tSavingperMonth,\n\t\t\t\tPercentLossByMonth,\n\t\t\t\tNewTime,\n\t\t\t\tNewTotalSavings,\n\t\t\t\tL).\n\n\nnb_months2(StartPriceOld, StartPriceNew, _SavingperMonth, _PercentLossByMonth, Time, TotalSavings, [Time, Result|[]]) :-\n\tTotalSavings + StartPriceOld >= StartPriceNew,\n\t!,\n\tResult is round(TotalSavings + StartPriceOld - StartPriceNew).\n\nnb_months2(StartPriceOld, StartPriceNew, SavingperMonth, PercentLossByMonth, Time, TotalSavings, L) :-\n\tNewStartPriceOld is StartPriceOld * ((100 - PercentLossByMonth) \/ 100),\n\tNewStartPriceNew is StartPriceNew * ((100 - PercentLossByMonth) \/ 100),\n\tsucc(Time, NewTime),\n\tTemp is TotalSavings + SavingperMonth,\n\tNewTotalSavings is round(Temp),\n\tNewPercentLossByMonth is PercentLossByMonth + 0.5,\n\t\n\tnb_months1(\tNewStartPriceOld, \n\t\t\t\tNewStartPriceNew,\n\t\t\t\tSavingperMonth,\n\t\t\t\tNewPercentLossByMonth,\n\t\t\t\tNewTime,\n\t\t\t\tNewTotalSavings,\n\t\t\t\tL).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230729,"user_id":null,"body":"nb_months(P0, P1, _, _, Curr, [0,R]) :-\n  P1 =< (P0+Curr), \n  R is round((P0+Curr)-P1).\nnb_months(P0, P1, DCurr, [PLpm,J], Curr, [I,R]) :-\n  PLpmn is PLpm+(0.005*mod(J+1,2)),\n  Jn is J+1,\n  Next is Curr+DCurr,\n  P0n is P0-(PLpm*P0),\n  P1n is P1-(PLpm*P1),\n  nb_months(P0n, P1n, DCurr, [PLpmn,Jn], Next, [In,R]),\n  succ(In,I).\n  \nnb_months(P0, P1, DCurr, PLpm, R) :-\n  Fract is PLpm\/100,\n  nb_months(P0, P1, DCurr, [Fract,0], 0, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230730,"user_id":53,"body":"\nnextr(R, M, N) :-\n  (  mod(M, 2) =:= 1 -> N is R + 0.5 ; N = R )\n.\n\nnb_months_(P0, P1, S, R, M, T, L) :-\n  (  P1 =< P0 + T -> \n        L1 is round(P0 - P1 + T),\n        L = [M, L1]\n  ;  P0_ is P0 - P0 * 0.01 * R,\n     P1_ is P1 - P1 * 0.01 * R,\n     T1 is T + S,\n     M1 is M + 1,\n     nextr(R, M1, R1),\n     nb_months_(P0_, P1_, S, R1, M1, T1, L)\n  )\n.\n\nnb_months(P0, P1, S, R, L) :-\n  nb_months_(P0, P1, S, R, 0, 0, L)\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230731,"user_id":null,"body":"nb_months(StartPriceOld, StartPriceNew, SavingperMonth, PercentLossByMonth, L) :-\n  % your code\n    nb_months(StartPriceOld, StartPriceNew, SavingperMonth, PercentLossByMonth, 0, L).\nnb_months(StartPriceOld, StartPriceNew,\n          SavingperMonth, _, Months, [Months, LeftOver]) :-\n    StartPriceOld + SavingperMonth * Months >= StartPriceNew,\n    LeftOver is round(StartPriceOld + SavingperMonth * Months - StartPriceNew).\nnb_months(StartPriceOld, StartPriceNew,\n          SavingperMonth, PercentLossByMonth, Months, L) :-\n    StartPriceOld + SavingperMonth * Months < StartPriceNew,\n    0 is Months mod 2,\n    NewStartPriceOld is StartPriceOld - StartPriceOld * PercentLossByMonth \/ 100,\n    NewStartPriceNew is StartPriceNew - StartPriceNew * PercentLossByMonth \/ 100,\n    NewPercentLossByMonth is PercentLossByMonth + 0.5,\n    NewMonths is Months + 1,\n    nb_months(NewStartPriceOld, NewStartPriceNew,\n              SavingperMonth, NewPercentLossByMonth, NewMonths, L).\nnb_months(StartPriceOld, StartPriceNew,\n          SavingperMonth, PercentLossByMonth, Months, L) :-\n    StartPriceOld + SavingperMonth * Months < StartPriceNew,\n    1 is Months mod 2,\n    NewStartPriceOld is StartPriceOld - StartPriceOld * PercentLossByMonth \/ 100,\n    NewStartPriceNew is StartPriceNew - StartPriceNew * PercentLossByMonth \/ 100,\n    NewMonths is Months + 1,\n    nb_months(NewStartPriceOld, NewStartPriceNew,\n              SavingperMonth, PercentLossByMonth, NewMonths, L).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230732,"user_id":null,"body":"nb_months(StartPriceOld, StartPriceNew, SavingperMonth, PercentLossByMonth, L) :-\n  % your code\n    compute_nb_months(StartPriceOld, StartPriceNew,\n                      SavingperMonth, PercentLossByMonth, 0, L).\ncompute_nb_months(StartPriceOld, StartPriceNew,\n                  SavingperMonth, _, Months, [Months, LeftOver]) :-\n    StartPriceOld + SavingperMonth * Months >= StartPriceNew,\n    LeftOver is round(StartPriceOld + SavingperMonth * Months - StartPriceNew).\ncompute_nb_months(StartPriceOld, StartPriceNew,\n                  SavingperMonth, PercentLossByMonth, Months, L) :-\n    StartPriceOld + SavingperMonth * Months < StartPriceNew,\n    0 is Months mod 2,\n    NewStartPriceOld is StartPriceOld - StartPriceOld * PercentLossByMonth \/ 100,\n    NewStartPriceNew is StartPriceNew - StartPriceNew * PercentLossByMonth \/ 100,\n    NewPercentLossByMonth is PercentLossByMonth + 0.5,\n    NewMonths is Months + 1,\n    compute_nb_months(NewStartPriceOld, NewStartPriceNew,\n                      SavingperMonth, NewPercentLossByMonth, NewMonths, L).\ncompute_nb_months(StartPriceOld, StartPriceNew,\n                  SavingperMonth, PercentLossByMonth, Months, L) :-\n    StartPriceOld + SavingperMonth * Months < StartPriceNew,\n    1 is Months mod 2,\n    NewStartPriceOld is StartPriceOld - StartPriceOld * PercentLossByMonth \/ 100,\n    NewStartPriceNew is StartPriceNew - StartPriceNew * PercentLossByMonth \/ 100,\n    NewMonths is Months + 1,\n    compute_nb_months(NewStartPriceOld, NewStartPriceNew,\n                      SavingperMonth, PercentLossByMonth, NewMonths, L).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230733,"user_id":null,"body":"nb_months(StartPriceOld, StartPriceNew, SavingperMonth, PercentLossByMonth, L) :-\n  % your code\n    compute_nb_months(StartPriceOld, StartPriceNew,\n                      SavingperMonth, PercentLossByMonth, 0, L).\ncompute_nb_months(StartPriceOld, StartPriceNew, SavingperMonth,\n                  PercentLossByMonth, Months, [Months, LeftOver]) :-\n    StartPriceOld + SavingperMonth * Months >= StartPriceNew,\n    LeftOver is round(StartPriceOld + SavingperMonth * Months - StartPriceNew).\ncompute_nb_months(StartPriceOld, StartPriceNew,\n                  SavingperMonth, PercentLossByMonth, Months, L) :-\n    StartPriceOld + SavingperMonth * Months < StartPriceNew,\n    0 is Months mod 2,\n    NewStartPriceOld is StartPriceOld - StartPriceOld * PercentLossByMonth \/ 100,\n    NewStartPriceNew is StartPriceNew - StartPriceNew * PercentLossByMonth \/ 100,\n    NewPercentLossByMonth is PercentLossByMonth + 0.5,\n    NewMonths is Months + 1,\n    compute_nb_months(NewStartPriceOld, NewStartPriceNew,\n                      SavingperMonth, NewPercentLossByMonth, NewMonths, L).\ncompute_nb_months(StartPriceOld, StartPriceNew,\n                  SavingperMonth, PercentLossByMonth, Months, L) :-\n    StartPriceOld + SavingperMonth * Months < StartPriceNew,\n    1 is Months mod 2,\n    NewStartPriceOld is StartPriceOld - StartPriceOld * PercentLossByMonth \/ 100,\n    NewStartPriceNew is StartPriceNew - StartPriceNew * PercentLossByMonth \/ 100,\n    NewMonths is Months + 1,\n    compute_nb_months(NewStartPriceOld, NewStartPriceNew,\n                      SavingperMonth, PercentLossByMonth, NewMonths, L).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230734,"user_id":null,"body":"nb_months(StartPriceOld, StartPriceNew, _, _, [0,LeftOver]) :-\n  check(StartPriceOld,StartPriceNew,0),\n  LeftOver is StartPriceOld - StartPriceNew,!.\nnb_months(StartPriceOld, StartPriceNew, SavingperMonth, PercentLossByMonth, L) :-\n  calc_month(StartPriceOld, StartPriceNew, SavingperMonth,1,PercentLossByMonth,L),!\n.\n\ncalc_month(PriceOld,PriceNew,SavingsPerMonth,Month,PercentLoss,[Month,LeftOver]):-\n  calcLoss(PercentLoss,Month,NPercentLoss),\n  NPriceOld is PriceOld * (100-NPercentLoss)\/100,\n  NPriceNew is PriceNew * (100-NPercentLoss)\/100,\n  Savings is SavingsPerMonth*Month,\n  check(NPriceOld,NPriceNew,Savings),\n  LeftOver is round(NPriceOld + Savings - NPriceNew).\n  \ncalc_month(PriceOld,PriceNew,SavingsPerMonth,Month,PercentLoss,Result):-\n  calcLoss(PercentLoss,Month,NPercentLoss),\n  NPriceOld is PriceOld * (100-NPercentLoss)\/100,\n  NPriceNew is PriceNew * (100-NPercentLoss)\/100,\n  NMonth is Month +1,\n  calc_month(NPriceOld,NPriceNew,SavingsPerMonth,NMonth,NPercentLoss,Result).\n\ncalcLoss(PercentLoss,Month,NewPercentLoss):-\n  0 is mod(Month,2),\n  NewPercentLoss is PercentLoss + 0.5.\ncalcLoss(PercentLoss,Month,PercentLoss):-\n  1 is mod(Month,2).\n\ncheck(PriceOld,PriceNew,Savings):-\n  PriceNew < PriceOld+Savings;\n  PriceNew is PriceOld+Savings.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"554e4a2f232cdd87d9000038":[{"id":230735,"user_id":null,"body":"dna_strand(Str,R) :-\n    string_chars(Str,Chrs),\n    t2(Chrs,Res),\n    string_chars(R,Res).\n\nt2([],[]).\nt2(['A'|T],['T'|R2]) :-  t2(T,R2).\nt2(['T'|T],['A'|R2]) :-  t2(T,R2).\nt2(['C'|T],['G'|R2]) :-  t2(T,R2).\nt2(['G'|T],['C'|R2]) :-  t2(T,R2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230736,"user_id":751,"body":"dna_strand(Dna, Res) :- \n  string_chars(Dna, Chars),\n  maplist(complement, Chars, Complemented),\n  string_chars(Res, Complemented). \n\ncomplement('A','T').\ncomplement('T','A').\ncomplement('C','G').\ncomplement('G','C').","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230737,"user_id":76,"body":"dna_strand(Dna, Result) :-\n  string_chars(Dna, Chars),\n  maplist(compl_dna, Chars, ResultChars),\n  atomics_to_string(ResultChars, Result).\n\ncompl_dna('A', 'T').\ncompl_dna('T', 'A').\ncompl_dna('G', 'C').\ncompl_dna('C', 'G').","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230738,"user_id":null,"body":"dna_strand(Dna, Result) :- \n  string_chars(Dna, DnaList),\n  dna_complement(DnaList, DnaComplement),\n  atomics_to_string(DnaComplement, Result).\n\ndna_complement([], []).\ndna_complement(['A'|T], ['T'|Res]) :- dna_complement(T, Res).\ndna_complement(['T'|T], ['A'|Res]) :- dna_complement(T, Res).\ndna_complement(['G'|T], ['C'|Res]) :- dna_complement(T, Res).\ndna_complement(['C'|T], ['G'|Res]) :- dna_complement(T, Res).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230739,"user_id":null,"body":"compl('A','T').\ncompl('C','G').\ncompl(X,Y) :- compl(Y,X).\n\ncomplArr([],[]).\ncomplArr([X|Xs],[FX|FXs]) :-\n  compl(FX,X),\n  complArr(Xs,FXs).\n\ndna_strand(Dna, Result) :- \n  string_chars(Dna, Dnarr),\n  complArr(Dnarr, Rarr),\n  string_chars(Result, Rarr).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230740,"user_id":null,"body":"dna_strand(Dna, Result) :-\n  string_chars(Dna,DnaChars),\n  aux(DnaChars,ResChars),\n  string_chars(Result,ResChars).\n\naux([],[]).\naux(['A'|T],['T'|R2]) :-  aux(T,R2).\naux(['T'|T],['A'|R2]) :-  aux(T,R2).\naux(['C'|T],['G'|R2]) :-  aux(T,R2).\naux(['G'|T],['C'|R2]) :-  aux(T,R2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230741,"user_id":168,"body":"tr('A', 'T').\ntr('T', 'A').\ntr('G', 'C').\ntr('C', 'G').\n\ndna_strand(Dna, Result) :- \n  string_chars(Dna, Chars),\n  maplist(tr, Chars, Chars2),\n  string_chars(Result, Chars2).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230742,"user_id":544,"body":"dna_complement('A', 'T').\ndna_complement('G', 'C').\ndna_complement(X, Y) :- dna_complement(Y, X).\n\ndna_strand(Dna, Result) :- \n  string_chars(Dna, DnaBases),\n  maplist(dna_complement, DnaBases, ComplementBases),\n  string_chars(Result, ComplementBases).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230743,"user_id":null,"body":"cmpl(65, 84, lr).\ncmpl(67, 71, lr).\ncmpl(X, Y) :- cmpl(X, Y, lr) ; cmpl(Y, X, lr).\n\ndna_strand(Dna, Result) :- \n  string_codes(Dna, Codes1),\n  dna_strand(Codes1, [], Codes2),\n  string_codes(Result, Codes2).\n\ndna_strand([], Acc, Result) :- reverse(Acc, Result).\ndna_strand([X|Xs], Acc, Result) :- cmpl(X,Y), dna_strand(Xs, [Y|Acc], Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230744,"user_id":null,"body":"comp('A','T').\ncomp('T','A').\ncomp('G','C').\ncomp('C','G').\n\ndna_strand(L, R) :-\n    string_chars(L, Xs),\n    maplist(comp, Xs, Ys),\n    string_chars(R, Ys).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"554f76dca89983cc400000bb":[{"id":230745,"user_id":53,"body":"sol_equa(N, Ls) :-\n  M is floor(sqrt(N)),\n  findall(V, vs(M, N, V), Ls)\n  .\n  \nvs(M, N, V) :-\n  between(1, M, I),\n  D is N \/ I,\n  ceil(D) =:= floor(D),\n  X is (D + I) \/ 2,\n  ceil(X) =:= floor(X),\n  Y is (D - I) \/ 4,\n  ceil(Y) =:= floor(Y),\n  V = [X, Y]\n  .","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230746,"user_id":527,"body":"sol_equa(N, Ls) :-\n  findall(XY, sol(N, XY), Ls).\n\nsol(N, [X, Y]) :-\n  MaxI is floor(sqrt(N)),\n  between(1, MaxI, I),\n  divmod(N, I, J, 0),\n  D is J - I,\n  divmod(D, 4, Y, 0),\n  X is I + 2 * Y.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230747,"user_id":168,"body":"sol(N, K, Ls) :-\n  K * K =< N, !,\n  K1 is K + 1,\n  sol(N, K1, Xs),\n  (N mod K =:= 0 ->\n    Q is N \/\/ K,\n    ((Q + K) mod 2 =:= 0, (Q - K) mod 4 =:= 0 ->\n      A is (Q + K) \/\/ 2,\n      B is (Q - K) \/\/ 4,\n      Ls = [[A, B] | Xs];\n      Ls = Xs);\n    Ls = Xs).\n  \nsol(_, _, []).\n\nsol_equa(N, Ls) :-\n  sol(N, 1, Ls).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230748,"user_id":null,"body":"sol_equa(N, Ls) :-\n    factors(N, Fs),\n    map_option(candidate(N), Fs, Xs),\n    sort(Xs, Ys),\n    reverse(Ys, Ls).\n\nmap_option(_, [], []).\nmap_option(Goal,[X|Xs], Ys) :-\n    map_option(Goal, Xs, Ys0),\n    ( call(Goal, X, Y) ->\n        Ys = [Y|Ys0]\n    ; Ys = Ys0\n    ).\n\ncandidate(N, F, [X, Y]) :-\n    G is N \/\/ F,\n    G >= F,\n    X2 is G + F,\n    X2 mod 2 =:= 0,\n    Y4 is G - F,\n    Y4 mod 4 =:= 0,\n    X is X2 \/\/ 2,\n    Y is Y4 \/\/ 4.\n\nfactors(N, Fs) :-\n    prime_decomposition(N, Xs),\n    factors_(Xs, Fs).\n\nsmallest_prime_factor_from(N, I, P) :-\n    ( I * I > N ->\n      P = N\n    ; ( N mod I =:= 0 ->\n        P = I\n      ; ( I0 is I + 1\n        , smallest_prime_factor_from(N, I0, P)\n        )\n      )\n    ).\n\nprime_factors_from(N, I, Ps) :-\n    ( N = 1 ->\n      Ps = []\n    ; ( smallest_prime_factor_from(N, I, P)\n      , N0 is N \/\/ P\n      , prime_factors_from(N0, P, Ps0)\n      , Ps = [P|Ps0]\n      )\n    ).\n\nprime_factors(N, Ps) :- \n    prime_factors_from(N, 2, Ps).\n\ngroup([], []).\ngroup([X|Xs], Ys) :-\n    group_(X, 1, Xs, Ys).\n\ngroup_(X, N, [], [X-N]).\ngroup_(X, N, [X|Ys], Zs) :-\n    N0 is N + 1,\n    group_(X, N0, Ys, Zs).\ngroup_(X, N, [Y|Ys], [X-N|Zs]) :-\n    X \\= Y,\n    group_(Y, 1, Ys, Zs).\n\nprime_decomposition(N, Xs) :-\n    prime_factors(N, Ps),\n    group(Ps, Xs).\n\nfactors_([], [1]).\nfactors_([P-E|Ps], Xs) :-\n    factors_(Ps, Xs0),\n    numlist(0, E, Es),\n    maplist(pow_(P), Es, Ys),\n    maplist(scale(Ys), Xs0, Zs),\n    append(Zs, Xs).\n\npow_(N, E, P) :-\n    P is N ^ E.\n\nmul(A, B, C) :-\n    C is A * B.\n\nscale(Xs, N, Ys) :-\n    maplist(mul(N), Xs, Ys).\n\nsquare(X, Y) :-\n    Y is X * X.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230749,"user_id":492,"body":"sol_equa(N, Ls) :-\n    findall(\n        E,\n        (\n            Sqt is sqrt(N), Lim is ceil(Sqt),\n            between(1, Lim, U),\n            (0 is N mod U ->\n                J is N \/\/ U, U_J is U + J, J_U is J - U,\n                (0 is U_J mod 2, 0 is J_U mod 4 ->\n                    X is U_J \/\/ 2, Y is J_U \/\/ 4,\n                    E = [X, Y]\n                ;\n                    fail\n                )\n            ;\n                fail\n            )\n        ),\n        Ls\n        ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"555624b601231dc7a400017a":[{"id":230750,"user_id":null,"body":"josephus_survivor(1,_,1).\njosephus_survivor(N,K,R) :- \n  succ(M,N),\n  josephus_survivor(M,K,R1),\n  R is mod(R1+K-1,N)+1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230751,"user_id":53,"body":"josephus_survivor(1, _, 1).\njosephus_survivor(N, K, R) :- \n  N1 is N - 1,\n  josephus_survivor(N1, K, R1),\n  R is 1 + rem(R1 + K - 1, N).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230752,"user_id":null,"body":"josephus_survivor(1, _, 1).\njosephus_survivor(N, K, R) :-\n    N1 is N-1,\n    josephus_survivor(N1, K, R1),\n    R is ((R1 + K - 1) mod N) + 1.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230753,"user_id":null,"body":"josephus_survivor(1, _, 1) :- !.\njosephus_survivor(N, K, R) :-\n  N1 is N - 1,\n  josephus_survivor(N1, K, X),\n  R is (X + K - 1) mod N + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230754,"user_id":77,"body":"josephus_survivor(N, K, R) :-\n    josephus(N, K, R0),\n    R is R0 + 1.\n\njosephus(1, _, 0) :- !.\njosephus(N, K, R) :-\n    N1 is N - 1,\n    josephus(N1, K, R1),\n    R is (R1 + K) rem N.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230755,"user_id":null,"body":"josephus_survivor(N,K,R) :-\n    g(N,K,T),\n    R is T + 1.\n\ng(1,_,0) :- !.\ng(N,K,Z) :-\n   M is N - 1,\n   g(M,K,Y),\n   Z is (Y + K) mod N.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230756,"user_id":76,"body":"josephus_survivor(1, _, 1) :- !.\njosephus_survivor(N, K, R) :-\n  N1 is N - 1,\n  josephus_survivor(N1, K, R1),\n  R is (R1 + K - 1) mod N + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230757,"user_id":527,"body":"josephus_survivor(N, K, R) :-\n  numlist(1, N, Js),\n  foldl([J, I, I1] >> (I1 is (I + K) rem J), Js, 1, R0),\n  succ(R0, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230758,"user_id":527,"body":"josephus_survivor(N, K, R) :-\n  numlist(1, N, Js),\n  scanl([J, I, I1] >> (I1 is (I + K) rem J), Js, 1, Is),\n  last(Is, R0),\n  succ(R0, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230759,"user_id":527,"body":"josephus_survivor(N, K, R) :- josephus_survivor(N, K, R, 1, 1).\n\njosephus_survivor(N, _, R, I, J) :-\n  J > N, R is I + 1, !.\njosephus_survivor(N, K, R, I, J) :-\n  I1 is (I + K) rem J,\n  J1 is J + 1,\n  josephus_survivor(N, K, R, I1, J1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5583090cbe83f4fd8c000051":[{"id":230760,"user_id":527,"body":"digitize(N, [N]) :- between(0, 9, N).\ndigitize(N, [D | Ds]) :- divmod(N, 10, N1, D), digitize(N1, Ds).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230761,"user_id":null,"body":"digitize(N, R) :-\n  number_chars(N, L1),\n  maplist(atom_number, L1, L2),\n  reverse(L2, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230762,"user_id":null,"body":"% Store the result inside 2nd argument\ndigitize(N, Result) :-\n  number_chars(N, Cs),\n  ctil(Cs, Is),\n  reverse(Is, Result).\n  \nctil([], []).\nctil([H|Ts], [I| Is]):-\n  number_chars(I, [H]),\n  ctil(Ts, Is).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230763,"user_id":null,"body":"digitize(N, Result) :-\n    atom_codes(N, Codes),\n    reverse(Codes, CodesReversed),\n    maplist([X,Y] >> number_codes(Y, [X]), CodesReversed, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230764,"user_id":null,"body":"digitize(N, Result) :- atom_chars(N,L), d(L,R), reverse(R,Result).\n\nd([],[]).\nd([H|T],[H1|X1]) :-\n  d(T,X1),\n  atom_number(H,H1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230765,"user_id":null,"body":"digitize(N,R):-\n  number_codes(N, Codes),\n  reverse(Codes, Rev),\n  maplist([X,K] >> (K is X-48), Rev,R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230766,"user_id":null,"body":"% Store the result inside 2nd argument\ndigitize(N, [N]) :-\n  N < 10.\ndigitize(N, [R|Rs]) :-\n  divmod(N, 10, Q, R),\n  digitize(Q, Rs).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230767,"user_id":null,"body":"digitizeNot0(0, []) :- !.\ndigitizeNot0(N, [R|T]) :-\n  divmod(N, 10, Q, R),\n  digitizeNot0(Q, T).\n  \ndigitize(0, [0]).\ndigitize(N, Result) :- digitizeNot0(N, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230768,"user_id":277,"body":"string_to_int(String, Int):- Int is String - 48.\n\nint_member(List, NumericDigit):-\n  member(Digit,List),\n  string_to_int(Digit,NumericDigit).\n\n\ndigitize(N, Result) :- \n  number_string(N,String),\n  string_to_list(String,Digits),\n  reverse(Digits, ReversedList),\n  findall(NumericDigit, int_member(ReversedList, NumericDigit), Result )\n  .","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230769,"user_id":527,"body":"digitize(0, [0]).\ndigitize(N, [N]) :- between(1, 9, N).\ndigitize(N, [D | Ds]) :- divmod(N, 10, N1, D), digitize(N1, Ds).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"559a28007caad2ac4e000083":[{"id":230770,"user_id":null,"body":"fib(0,0).\nfib(1,1).\nfib(2,1).\nfib(N,R) :-\n  M2 is (N+(N\/\\1))\/\/2,\n  succ(M1,M2),\n  fib(M1,R1),\n  fib(M2,R2),\n  (1 is N\/\\1 -> R is (R1*R1)+(R2*R2) ; R is (2*R1+R2)*R2).\n  \nperimeter(N,R) :-\n  M is N+3,\n  fib(M,Y),\n  R is (Y-1)*4.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230771,"user_id":null,"body":"sum_sides(0, _, S2, S2).\nsum_sides(N, S1, S2, R) :- \n  N > 0, N1 is N - 1, \n  NS1 is S2, NS2 is S1 + S2, \n  sum_sides(N1, NS1, NS2, R1),\n  R is S2 + R1.\nperimeter(N, R) :- sum_sides(N, 0, 1, R1), R is 4 * R1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230772,"user_id":168,"body":"fib(_, B, 0, B) :- !.\nfib(A, B, N, R) :- M is N - 1, C is A + B, fib(B, C, M, R).\n\nperimeter(N, R) :-\n  fib(1, 2, N, X),\n  R is 4 * (X - 1).\n\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230773,"user_id":544,"body":"perimeter(N, R) :-\n  numlist(0, N, L),\n  maplist(fib, L, Fibs),\n  sumlist(Fibs, FibSum),\n  R is 4 * FibSum.\n\n:- dynamic(fib\/2). \nfib(0, 1).\nfib(1, 1).\nfib(N, R) :-\n  N0 is N - 2, fib(N0, R0),\n  N1 is N - 1, fib(N1, R1),\n  R is R0 + R1,\n  asserta((fib(N, R) :- !)).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230774,"user_id":53,"body":"\nhelper(N, A, B, M, R) :-\n  (N < 0 -> R = M;\n   N1 is N - 1,\n   B1 is A + B,\n   M1 is M + A * 4,\n   helper(N1, B, B1, M1, R))\n  .\n\nperimeter(N, R) :-\n  helper(N, 1, 1, 0, R)\n  .","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230775,"user_id":76,"body":"fib(_, R, 0, R).\nfib(A, B, N0, R) :-\n  Next is A + B,\n  succ(N1, N0),\n  fib(B, Next, N1, R1), !,\n  R is B + R1.\n\nperimeter(N, R) :-\n fib(0, 1, N, Fib), R is 4 * Fib.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230776,"user_id":null,"body":"perimeter(N, R) :-\n  N1 is N+1,\n  fibo(N1,R1),\n  lsum(R1,R2),!,\n  R3 is R2+1,\n  R is R3*4.\n\nlsum(L,R):-lsum(L,0,R).\nlsum([],R,R).\nlsum([H|T],Acc,R):-\n    Acc1 is Acc+H,\n    lsum(T,Acc1,R).\n    \n\n\nfibo(N,Fib):-\n\tfib(1,N,0,1,Fib).\n\nfib(N,N,_,_,[]).\nfib(Count,N,PreviousFib,CurrentFib,[NextFib|Result]):-\n\tCount < N,\n\tNextCount is Count + 1,\n\tNextFib is CurrentFib + PreviousFib,\n        fib(NextCount,N,CurrentFib,NextFib,Result).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230777,"user_id":null,"body":"perimeter(N, R) :- fibonacci_sum(N, 0, 1, Sum),\n                   R is 4 * Sum.\n  % your code\nfibonacci_sum(0, _, _, 1).\nfibonacci_sum(N, Previous, Current, Sum) :-\n    N > 0,\n    NewN is N - 1,\n    Next is Previous + Current,\n    fibonacci_sum(NewN, Current, Next, OldSum),\n    Sum is OldSum + Next.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230778,"user_id":null,"body":"perimeter(N, R) :- N >= 0,\n                   fibonacci_sum(N, 0, 1, Sum),\n                   R is 4 * Sum.\n  % your code\nfibonacci_sum(0, _, _, 1).\nfibonacci_sum(N, Previous, Current, Sum) :-\n    N > 0,\n    NewN is N - 1,\n    Next is Previous + Current,\n    fibonacci_sum(NewN, Current, Next, OldSum),\n    Sum is OldSum + Next.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230779,"user_id":null,"body":"perimeter( N , R ) :-\n    my_fibo( N, _, Sum, 0, 1, 0 , 1 ),\n    R is 4 * Sum.\n\nmy_fibo( N, R, Sum, _, R, N, Sum ) :- !.\n\nmy_fibo( N, R, Sum, Fibo1, Fibo2, NN, PartialSum  ):-\n    NN < N,\n    Fibo3 is Fibo1 + Fibo2,\n    PartialSum1 is PartialSum + Fibo3,\n    NN1 is NN + 1,\n    my_fibo( N, R, Sum, Fibo2, Fibo3, NN1, PartialSum1 ).\n\n\n    ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"559b8e46fa060b2c6a0000bf":[{"id":230780,"user_id":76,"body":"fact(0, 1).\nfact(N, R) :-\n  succ(N0, N),\n  fact(N0, R0),\n  R is R0 * N.\n\nchoose(N, K, R) :- \n  fact(N, FN),\n  fact(K, FK),\n  NK is N - K,\n  fact(NK, FNK),\n  R is round(FN \/ (FK * FNK)).\n\ndiagonal(N, P, R) :-\n  succ(N, N1),\n  succ(P, P1),\n  choose(N1, P1, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230781,"user_id":168,"body":"comb(_, 0, 1) :- !.\ncomb(0, _, 0) :- !.\ncomb(N, K, C) :-\n  succ(N1, N),\n  succ(K1, K),\n  comb(N1, K1, R),\n  C is R * N \/ K.\n\ndiagonal(N, P, R) :-\n  succ(N, N1),\n  succ(P, P1),\n  comb(N1, P1, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230782,"user_id":53,"body":"fac(1, R) :- R is 1.\nfac(N, R) :- M is N - 1, fac(M, P), R is N * P.\n\ndiagonal(N, P, R) :-\n  A is N + 1,\n  B is P + 1,\n  C is N - P,\n  fac(A, X), fac(B, Y), fac(C, Z),\n  R is X \/ Y \/ Z\n  .","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230783,"user_id":null,"body":"diagonal(N, P, R) :- factorial(N+1, N1), factorial(P+1, P1), factorial(N-P,P2), R is N1\/(P1*P2).\n\nfactorial(N, R) :- N > 0, N1 is N - 1, factorial(N1,R1), R is N*R1.\nfactorial(_, R) :- R is 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230784,"user_id":null,"body":"diagonal(N, P, R) :-\n    A is P + 1,\n    diagonal_(N, P, 1, A, 1, 1, R).\n\ndiagonal_(N, P, S, _, _, I, S) :-\n    I > N - P.\ndiagonal_(N, P, S, A, B, I, R) :-\n    I =< N - P,\n    S0 is S + A,\n    B0 is A + B,\n    I0 is I + 1,\n    A0 is B0 * (P + 1) \/\/ I0,\n    diagonal_(N, P, S0, A0, B0, I0, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230785,"user_id":527,"body":"diagonal(N, P, R) :-\n  N1 is N + 1,\n  P1 is P + 1,\n  comb(N1, P1, R).\n\ncomb(N, K, R) :-\n  numlist(1, K, Is),\n  foldl([I, C0, C1] >> (C1 is C0 * (N - I + 1) div I), Is, 1, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230786,"user_id":492,"body":"fact__(N, NF) :-\n    fact__(1, N, 1, NF).\nfact__(X, X, F, F) :- !.\nfact__(X, N, FX, F) :-\n    X1 is X + 1,\n    FX1 is FX * X1,\n    fact__(X1, N, FX1, F).\ncomb__(N, K, R) :-\n    fact__(N, A),\n    NK is N - K,\n    fact__(NK, B),\n    fact__(K, C),\n    R is A \/\/ B \/\/ C.\ndiagonal(N, P, R) :-\n    succ(N, N1), succ(P, P1),\n    comb__(N1, P1, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"559ce00b70041bc7b600013d":[{"id":230787,"user_id":564,"body":"finance(N, R) :-\n    R is N * (N + 1) * (N + 2) \/ 2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230788,"user_id":492,"body":"finance(N, R) :-\n    R is N * (N * N + 3 * N + 2) \/\/ 2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230789,"user_id":null,"body":"finance(N, R) :- \n  Ub1 is N*2,\n  aggregate_all(sum(X), (\n    between(0,Ub1,Lb), \n    0 is Lb\/\\1, \n    Ub is N-Lb\/\/2,\n    X is (Ub+1)*(2*Lb+Ub)\/\/2), R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230790,"user_id":null,"body":"finance(N, R) :- N1 is N + 1, calc(N1, 0, N, R).\n\ncalc(0,_,_,0).\ncalc(N, A1, An, R) :-\n  N1 is N - 1, A is A1 + 2, An1 is An + 1,\n  calc(N1, A, An1, R1),\n  Line is (N * (A1 + An)) \/ 2,\n  R is Line + R1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230791,"user_id":null,"body":"finance(N, R) :-\n    range_sum(0,N,R).\nrange_sum(S,S,S).    \nrange_sum(Start,End,R):-  \n  N is Start+End,\n  D is End-Start+1,\n  Sum is N*D\/2,\n  Nstart is Start+2,\n  Nend is End+1,\n  range_sum(Nstart,Nend,C),\n  R is Sum+C.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230792,"user_id":null,"body":"financeAcc(A, A, _, Acc, Acc).\nfinanceAcc(Idx, N, LastWeek, Acc, R) :-\n    NIdx is Idx+1,\n    Week is LastWeek + (NIdx*3),\n    NAcc is Acc + Week,\n    financeAcc(NIdx, N, Week, NAcc, R).\n\nfinance(N, R):- financeAcc(0, N, 0, 0, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"55a29405bc7d2efaff00007c":[{"id":230793,"user_id":53,"body":"going(0, 0) :- !.\ngoing(N, R) :- M is N - 1, going(M, P), R is 1 + P \/ N.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230794,"user_id":null,"body":":- use_module(library(clpq)).\n\n% (1! + ... + n!) \/ n! = (1! + ... + (n-1)!) \/ n!  +  1\n\ngoing(N, Res) :-\n  fact_memo(N, Fs1, Fn),\n  list_sum(Fs1, SumFs1),\n  { Q = SumFs1 \/ Fn + 1 },\n  q_truncated_to_digits(Q, Res, 6).\n  \n% :- mode fact_memo(+N, -Fs1, -Fn).\n% where\n%    Fs1: a list of all the N-1 factorials.\n%    Fn: the factorial of N.\nfact_memo(1, [], 1).\nfact_memo(N, [Fn1 | Fs2], Fn) :-\n  { N > 1 },\n  { Fn = N * Fn1 },\n  { N1 = N - 1 },\n  fact_memo(N1, Fs2, Fn1).\n  \nlist_sum(List, Sum) :-\n  foldl(plus, List, 0, Sum).\n  \nplus(X, Y, Sum) :- { Sum = X + Y }.\n\nq_truncated_to_digits(Q, F, Digits) :-\n  { QMul = Q * 10^Digits },\n  F is truncate(QMul) \/ (10 ^ Digits).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230795,"user_id":null,"body":"going(N, Rn) :-\n  (N = 1 ->\n    Rn is 1\n  ; Nm1 is N - 1,\n    going(Nm1, Rnm1),\n    Rn is Rnm1\/N + 1\n  ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230796,"user_id":53,"body":"walk(0, 0) :- !.\nwalk(N, R) :- M is N - 1, walk(M, P), R is 1 + P \/ N.\n\ngoing(N, R) :- walk(N, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230797,"user_id":492,"body":"aux(I, Res, Inter, T) :-\n    (I >= 2 ->\n        Intr is Inter * (1.0 \/ I),\n        Rs is Res + Intr,\n        Ii is I - 1,\n        aux(Ii, Rs, Intr, T)\n    ;\n        T is floor(Res * 1.0e6) \/ 1.0e6\n    ).\ngoing(N, R) :-\n    I is N, Res is 1.0, Inter is 1.0,\n    aux(I, Res, Inter, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230798,"user_id":492,"body":"aux(I, Res, Inter, T) :-\n    (I >= 2 ->\n        Intr is Inter * (1.0 \/ I),\n        Rs is Res + Intr,\n        Ii is I - 1,\n        aux(Ii, Rs, Intr, T)\n    ;\n        T is floor(Res * 1.0e6) \/ 1.0e6\n    ).\ngoing(N, R) :-\n    I is N, Res is 1.0, Inter is 1.0,\n    aux(I, Res, Inter, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"55a5bfaa756cfede78000026":[{"id":230799,"user_id":null,"body":"problem(X, Result) :-\n  number(X), !,\n  Result is X*50+6.\n\nproblem(_,\"Error\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230800,"user_id":null,"body":"problem(X, Result) :-\n  % Your code here.\n  number(X) ->\n  Result is ((X*50)+6);\n  Result =\"Error\".\n  \n  \n\n\t  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230801,"user_id":null,"body":"problem(X, Result) :-\n  % Your code here.\n  (not(number(X)), Result = \"Error\");\n  (number(X), Result is X*50+6)\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230802,"user_id":null,"body":"problem(X, Result) :-\n  number(X),\n  Result is X*50+6.\n  \nproblem(X, Result) :-\n  Result=\"Error\".  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230803,"user_id":null,"body":"problem(X, Result) :- number(X), \n  Result is (X*50) + 6.\nproblem(_, \"Error\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230804,"user_id":null,"body":"problem(X, \"Error\") :- string(X); atom(X).\nproblem(X, R) :- R is 50 * X + 6.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230805,"user_id":null,"body":"problem(X, Result) :-\n  % Your code here.\n  number(X),\n  Result is X*50+6\n.\nproblem(X,\"Error\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230806,"user_id":null,"body":"problem(X, Result) :-\n  number(X), !,\n  Result is ( X*50 )+6.\nproblem(X, \"Error\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230807,"user_id":null,"body":"problem(X, Result) :-\n  number(X),\n  Result is X * 50 + 6.\n\nproblem(X, \"Error\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230808,"user_id":168,"body":"problem(X, Result) :-\n  (number(X) -> Result is 50 * X + 6; Result = \"Error\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"55a5c82cd8e9baa49000004c":[{"id":230809,"user_id":53,"body":"divisible_count(X, Y, K, R) :- R is div(Y, K) - div(X-1, K).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230810,"user_id":527,"body":"divisible_count(X, Y, K, Result) :- Result is Y div K - (X - 1) div K.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230811,"user_id":null,"body":"divisible_count(X, Y, K, Result) :-\n  R1 is X \/\/ K,\n  R2 is Y \/\/ K,\n  R is R2 - R1,\n  (0 =:= X mod K\n  -> Result is R + 1\n  ; Result is R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230812,"user_id":168,"body":"% Store the result inside 4th argument.\ndivisible_count(X, Y, K, Result) :- \n  (X mod K =:= 0 -> R = 1; R = 0),\n  Result is Y \/\/ K - X \/\/ K + R.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230813,"user_id":null,"body":"% Store the result inside 4th argument.\ndivisible_count(0, Y, K, Result) :- Result is (Y\/\/K)+1.\ndivisible_count(X, Y, K, Result) :- Result is (Y\/\/K)-((X-1)\/\/K).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230814,"user_id":null,"body":"% Store the result inside 4th argument.\ndivisible_count(X, Y, _, 0) :- X>Y, !.\ndivisible_count(X, Y, K, N) :-\n  0 is X mod K, !,\n  N is 1 + floor((Y - X) \/ K).\n  \ndivisible_count(X, Y, K, N) :- Next is X+1, divisible_count(Next, Y, K, N).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230815,"user_id":null,"body":"% Store the result inside 4th argument.\ndivisible_count(X, Y, K, R) :- R1 is floor(Y\/K), R2 is ceiling(X\/K), R is R1 - R2 + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230816,"user_id":544,"body":"% divisible_count(X, Y, K, (X, Y, K)).\n\ndivisible_count(X, X, K, 1) :-\n    X mod K =:= 0.\n  \ndivisible_count(X, X, _, 0).\n  \ndivisible_count(X, Y, K, Result) :- \n    (X mod K =:= 0; Y mod K =:= 0),\n    Result is div((Y - X), K) + 1.\n    \ndivisible_count(X, Y, K, Result) :-\n    Result is div(Y, K) - div(X, K).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230817,"user_id":76,"body":"divisible_count(X, Y, K, R) :- \n  (0 is mod(X, K) -> D is 1 ; D is 0),\n  R is Y \/\/ K - X \/\/ K + D.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"55aa075506463dac6600010d":[{"id":230818,"user_id":527,"body":"list_squared(M, N, Rs) :-\n  findall([I, Ssd], (\n      between(M, N, I),\n      aggregate_all(sum(D ^ 2), divisor(I, D), Ssd),\n      float_fractional_part(sqrt(Ssd)) =:= 0\n    ), Rs).\n\ndivisor(N, D) :-\n  MaxI is floor(sqrt(N)),\n  between(1, MaxI, I),\n  N rem I =:= 0, (D is I; I ^ 2 =\\= N, D is N \/\/ I).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230819,"user_id":null,"body":"list_squared(Start, End, Ms) :- findall([X,Y], (between(Start,End,X), list_squared(X,Y)), Ms).\n\nlist_squared(N, Sum) :-\n  setof(D, divisors_sqrd(N, D), Divisors),\n  sum_list(Divisors, Sum),\n  nth_integer_root_and_remainder(2, Sum, _, 0).\n  \ndivisors_sqrd(N, R) :-\n  Ub is floor(sqrt(N)),\n  between(1, Ub, D),\n  0 is N mod D, \n  C is N \/ D,\n  (R is C*C ; R is D*D).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230820,"user_id":null,"body":"list_squared(M, N, Xs) :-\n    ( ( M > N ) ->\n      Xs = []\n    ; ( M0 is M + 1\n      , list_squared(M0, N, Xs0)\n      , factors(M, Fs)\n      , maplist(square, Fs, Ss)\n      , sum_list(Ss, S)\n      , ( is_square(S) ->\n          Xs = [[M, S]|Xs0]\n        ; Xs = Xs0\n        )\n      )\n    ).\n\nsmallest_prime_factor_from(N, I, P) :-\n    ( I * I > N ->\n      P = N\n    ; ( N mod I =:= 0 ->\n        P = I\n      ; ( I0 is I + 1\n        , smallest_prime_factor_from(N, I0, P)\n        )\n      )\n    ).\n\nprime_factors_from(N, I, Ps) :-\n    ( N = 1 ->\n      Ps = []\n    ; ( smallest_prime_factor_from(N, I, P)\n      , N0 is N \/\/ P\n      , prime_factors_from(N0, P, Ps0)\n      , Ps = [P|Ps0]\n      )\n    ).\n\nprime_factors(N, Ps) :- \n    prime_factors_from(N, 2, Ps).\n\ngroup([], []).\ngroup([X|Xs], Ys) :-\n    group_(X, 1, Xs, Ys).\n\ngroup_(X, N, [], [X-N]).\ngroup_(X, N, [X|Ys], Zs) :-\n    N0 is N + 1,\n    group_(X, N0, Ys, Zs).\ngroup_(X, N, [Y|Ys], [X-N|Zs]) :-\n    X \\= Y,\n    group_(Y, 1, Ys, Zs).\n\nprime_decomposition(N, Xs) :-\n    prime_factors(N, Ps),\n    group(Ps, Xs).\n\nfactors(N, Fs) :-\n    prime_decomposition(N, Xs),\n    factors_(Xs, Fs).\n\nfactors_([], [1]).\nfactors_([P-E|Ps], Xs) :-\n    factors_(Ps, Xs0),\n    numlist(0, E, Es),\n    maplist(pow_(P), Es, Ys),\n    maplist(scale(Ys), Xs0, Zs),\n    append(Zs, Xs).\n\npow_(N, E, P) :-\n    P is N ^ E.\n\nmul(A, B, C) :-\n    C is A * B.\n\nscale(Xs, N, Ys) :-\n    maplist(mul(N), Xs, Ys).\n\nsquare(X, Y) :-\n    Y is X * X.\n\nis_square(N) :-\n    S is round(sqrt(abs(N))),\n    N =:= S * S.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230821,"user_id":76,"body":":- dynamic divisor_sqsum_memo\/2.\n  \ndiv_sum(N, S) :-\n  divisor_sqsum_memo(N, S), !.\n  \ndiv_sum(N, S) :-\n  divisor_sqsum(N, S),\n  assert(divisor_sqsum_memo(N, S)).\n\ndivisor_sqsum(1, 1).\ndivisor_sqsum(N, SqSum) :-\n  H is N \/\/ 2,\n  findall(D * D, (between(2, H, D), N mod D =:= 0), Ds),\n  sum_list(Ds, Sum),\n  SqSum is Sum + N ** 2 + 1.\n\nlist_squared(Start, End, Ms) :-\n  findall([N, Sum], (\n    between(Start, End, N),\n    div_sum(N, Sum),\n    Sq is sqrt(Sum),\n    F is float_fractional_part(Sq),\n    F =:= 0\n  ), Ms).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230822,"user_id":53,"body":"list_squared(A, B, R) :- \n  findall([X,Y], (between(A,B,X), ls_sqrt(X,Y)), R).\n\nls_sqrt(N, R) :-\n  setof(D, div_sqrt(N, D), DS),\n  sum_list(DS, R),\n  nth_integer_root_and_remainder(2, R, _, 0).\n  \ndiv_sqrt(N, R) :-\n  S is floor(sqrt(N)),\n  between(1, S, D),\n  N mod D =:= 0, \n  C is div(N, D),\n  (R is C*C ; R is D*D).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230823,"user_id":492,"body":"divisor(N, Dd) :-\n    DdLim is round(sqrt(N)),\n    between(1, DdLim, D),\n    0 is N mod D,\n    (\n        Dd is D * D\n    ;\n        LDd is N \/\/ D,\n        LDd =\\= D,\n        Dd is LDd * LDd\n    ).\nsum_sq_div(N, P):-\n    setof(D, divisor(N, D), Ds),\n    foldl([A, B, S] >> (S is A + B), Ds, 0, R),\n    SqRoot is sqrt(R),\n    Square is floor(SqRoot) * floor(SqRoot),\n    (R =:= Square ->\n        P = [N, R]\n    ;\n        fail\n    ).    \nlist_squared(Start, End, Ms) :-\n    findall(\n        E,\n        (   \n            between(Start, End, U), \n            sum_sq_div(U, P),\n            E = P\n        ),\n        Ms\n        ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"55ab4f980f2d576c070000f4":[{"id":230824,"user_id":492,"body":"game(M, [N, D]) :- \n    (M mod 2 =:= 0 ->\n        N is (M * M) \/\/ 2, D is 1;\n        N is M * M, D is 2\n    ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230825,"user_id":544,"body":"game(Size, [Rn, Rd]) :-\n    R is rationalize(Size ** 2 \/ 2),\n    rational(R, Rn, Rd).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230826,"user_id":null,"body":"game(M, [A,B]) :- \n  B is M\/\\1+1,\n  A is M^2\/\/(2\/\/B).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230827,"user_id":76,"body":"game(N, R) :-\n  M is N * N,\n  H is M \/\/ 2,\n  (N mod 2 =:= 0\n    -> R = [H, 1]\n    ;  R = [M, 2]\n  ).    ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230828,"user_id":53,"body":"game(M, R) :- \n  (  mod(M, 2) =:= 0 -> K is div(M * M, 2), R = [K, 1]\n  ;  K is M * M, R = [K, 2]\n  ).\n    ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230829,"user_id":null,"body":"game(M, [P,1]) :-\n    M mod 2 =:= 0,\n    P is M * (M \/ 2).\n    \ngame(M, [P,2]) :-\n    M mod 2 =:= 1 ,\n    P is M * M.\n    ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230830,"user_id":null,"body":"game(M, [N, D]) :- \n  R is M mod 2,\n  D is R + 1,\n  N is M * M div (2 - R).    ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230831,"user_id":null,"body":"game(M, [Num, 1]) :- 0 is M mod 2, !, Num is M * M div 2.\ngame(M, [Num, 2]) :- Num is M * M.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230832,"user_id":527,"body":"game(M, [N, D]) :- R is M ^ 2 rdiv 2, rational(R, N, D).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"55b4d87a3766d9873a0000d4":[{"id":230833,"user_id":53,"body":"how_much(M, N, Ls) :-\n  findall(A, sol(M, N, A), Ls).\n\nsol(M, N, [S]) :-\n  A is min(M, N),\n  B is max(M, N),\n  between(A, B, I),\n  divmod(I, 7, J, 2),\n  divmod(I, 9, K, 1),\n  format(string(S), \"M: ~d, B: ~d, C: ~d\", [I, J, K]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230834,"user_id":null,"body":":- use_module(library(clpfd)).\nhow_much(M,N,Ls) :-\n  F in M..N \\\/ N..M,\n  F#=9*Cs+1 #\/\\ F#=7*Bs+2,\n  findall([X], (label([F,Bs,Cs]), format(string(X), \"M: ~d, B: ~d, C: ~w\", [F,Bs,Cs])), Ls).\nhow_much(_,_,[]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230835,"user_id":544,"body":":- use_module(library(clpfd)).\n\nhow_much(M, N, Result) :-\n    writeln([M, N]),\n    ( M < N\n      -> define_constraints(M, N, Solutions)\n      ;  define_constraints(N, M, Solutions)\n      ),\n    findall(Solutions, label(Solutions), RawResult),\n    maplist(format_result, RawResult, Result), !.\n\nhow_much(_, _, []).\n\ndefine_constraints(M, N, [Wealth, BoatCost, CarCost]) :-\n    Wealth in M .. N,\n    BoatCost #< Wealth,\n    CarCost #< Wealth,\n    Wealth - 7 * BoatCost #= 2,\n    Wealth - 9 * CarCost #= 1.\n\nformat_result(Solution, Formatted) :-\n    format(string(String), 'M: ~d, B: ~d, C: ~d', Solution),\n    Formatted = [String].","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230836,"user_id":null,"body":"how_much(M,N,Ls) :-\n  M>N,\n  how_much(N,M,Ls).\nhow_much(M,N,Ls) :-\n  findall(F, (between(M,N,F), 0 is (F-1) mod 9, 0 is (F-2) mod 7), Fs),\n  answers(Fs, Ls).\n\n\nanswers([], []).\nanswers([F|T1], [[L]|T2]) :-\n  answers(T1, T2),\n  C is (F-1) \/ 9,\n  B is (F-2) \/ 7,\n  format(string(L), \"M: ~d, B: ~d, C: ~d\", [F,B,C]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230837,"user_id":null,"body":"how_much(M,N,Ls) :-\n  M>N,\n  how_much(N,M,Ls).\nhow_much(M,N,Ls) :-\n  N>=M,\n  findall(F, (between(M,N,F), 0 is (F-1) mod 9, 0 is (F-2) mod 7), Fs),\n  answers(Fs, Ls).\n\n\nanswers([], []).\nanswers([F|T1], [[L]|T2]) :-\n  answers(T1, T2),\n  C is (F-1) \/ 9,\n  B is (F-2) \/ 7,\n  format(string(L), \"M: ~d, B: ~d, C: ~d\", [F,B,C]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230838,"user_id":492,"body":"how_much(M, N, Ls) :-\n    I is min(M, N), J is max(M, N),\n    findall(\n        E,\n        (\n            between(I, J, A),\n            (1 is A mod 9, 2 is A mod 7 ->\n                Aa is A \/\/ 7, Ab is A \/\/ 9,\n                format(string(S), \"M: ~d, B: ~d, C: ~d\", [A, Aa, Ab]),\n                E = [S]\n            ;\n                fail\n            )\n        ),\n        Ls\n        ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"55be10de92aad5ef28000023":[{"id":230839,"user_id":null,"body":":- table bc\/3.\n:- use_module(library(clpfd)).\n\ncheck_choose(M, N, R) :- find(M,N,0,R).\n\nfind(_,N,X,-1):- not(X<N).\nfind(M,N,X,X):- bc(N,X,M).\nfind(M,N,X,R):- X<N, not(bc(N,X,M)), NewX is X+1, find(M,N,NewX,R).\n\n\n\nbc(N, 0, 1) :- N #>= 0.\nbc(N, N, 1) :- N #> 0.\n\nbc(M, N, R) :-\n    N #> 0,        % The N = 0 case is already covered in the first base case\n    M #> N,        % The M = N case is already covered in the second base case\n    R #>= M,       % This constraint prevents unbounded search in non-solution space\n    M1 #= M - 1,   % The rest of this is just the given formula\n    N1 #= N - 1,\n    bc(M1, N1, R1),\n    bc(M1, N, R2),\n    R #= R1 + R2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230840,"user_id":53,"body":"\nhelper(M, N, I, A, R) :-\n  (I > N -> R = -1;\n   A == M -> R = I;\n   I1 is I + 1, A1 is A * (N - I) \/ I1, helper(M, N, I1, A1, R))\n.\n\ncheck_choose(M, N, R) :-\n  helper(M, N, 0, 1, R)\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230841,"user_id":76,"body":"f(N, 1) :- N < 2.\nf(N, R) :- succ(N1, N), f(N1, R1), R is N * R1.\n\nchoose(N, K, R) :- f(N, FN), f(K, FK), NK is N - K, f(NK, FNK), R is FN div (FK * FNK).\n\ncheck_choose(M, N, R) :- check_choose(M, N, 1, R).\ncheck_choose(_, N, I, -1) :- I > N, !.\ncheck_choose(M, N, I, I) :- choose(N, I, CN), round(CN, CNR), CNR =:= M, !.\ncheck_choose(M, N, I, R) :- succ(I, I1), check_choose(M, N, I1, R).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230842,"user_id":null,"body":"check_choose(R, M, N) :-\n  M >= 0,\n  between(1,M,N),\n  fact(N,NF),\n  fact(M,MF),\n  D is M - N,\n  fact(D,DF),\n  R =:= MF \/ (NF * DF), !.\n\ncheck_choose(_,_,-1).\n\nfact(N,F) :-\n   N > 1,\n   M is N - 1,\n   fact(M,P),\n   F is N * P.\n\nfact(1,1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230843,"user_id":null,"body":"check_choose(M, N, R) :- check(M,N,1,R).\n\ncheck(M, N, X, R) :- X < N, factorial(N,F1), factorial(X,F2), factorial(N-X,F3), F4 is F1\/(F2*F3),  \n  (M =:= F4 -> R is X; X1 is X + 1, check(M,N,X1,R)).\ncheck(_,_,_,-1).\n\nfactorial(N, R) :- N > 0, N1 is N - 1, factorial(N1,R1), R is N*R1.\nfactorial(_, R) :- R is 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230844,"user_id":null,"body":":- use_module(library(clpfd)).\n\nfactorial(0,1).\nfactorial(N,Result):-\n  N #> 0,\n  N1 #= N-1,\n  Result #= Prev*N,\n  factorial(N1,Prev).\n\nchoose(N,X,Result):- \n  factorial(N,NF), \n  factorial(X,XF),\n  Diff is N-X,\n  factorial(Diff,DiffF),\n  Result is NF \/ (XF * DiffF)\n.\n\ncheck_choose(M, N, R) :-\n  R #> 0,\n  R #< N,\n  R #< M,\n  choose(N,R,M)\n.\n\ncheck_choose(_,_,-1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230845,"user_id":null,"body":"check_choose(M, N, Result) :-\n    (   M =:= 0 -> Result is -1\n    ;   M =:= 1 -> Result is 0\n    ;   UpperBound is N \/\/ 2 + 1,\n        check_choose(1, UpperBound, M, N, 1, 1, Result)\n    ).\n\ncheck_choose(UpperBound, UpperBound, _, _, _, _, -1) :- !.\ncheck_choose(I, UpperBound, M, N, Numerator, Denom, Result) :-\n    NewNumerator is Numerator * (N + 1 - I),\n    NewDenom is Denom * I,\n    BC is NewNumerator \/ NewDenom,\n    (   BC =:= M -> Result is I\n    ;   J is I + 1,\n        check_choose(J, UpperBound, M, N, NewNumerator, NewDenom, Result)\n    ).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230846,"user_id":492,"body":"aux(X, R, M, N, Lim, I, T) :-\n    (I < Lim ->\n        Xx is X * (N - I + 1),\n        Rr is R * I,\n        U is Xx \/\/ Rr,\n        (U =:= M ->\n            T = I\n        ;\n            succ(I, I1),\n            aux(Xx, Rr, M, N, Lim, I1, T)\n        )\n    ;\n        T is -1\n    ).\ncheck_choose(M, N, R) :-\n    Lim is N \/\/ 2 + 1,\n    aux(1, 1, M, N, Lim, 1, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"55bf01e5a717a0d57e0000ec":[{"id":230847,"user_id":53,"body":"md(N, N) :- div(N, 10) < 1, !.\nmd(N, R) :- md(div(N, 10), R1), R is mod(N, 10) * R1.\npersistence(N, 0) :- div(N, 10) < 1, !.\npersistence(N, R) :- md(N, R1), persistence(R1, R2), R is 1 + R2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230848,"user_id":null,"body":"persistence(Num,R) :- p(Num,0,R).\n\np(Num,Akk,Akk) :-\n    atom_chars(Num,[H|T]),\n    length([H|T],1),\n    atom_number(H,R).\np(Num,Akk,R) :-\n    atom_chars(Num,Chars),\n    ctn(Chars,Nums),\n    Akk2 is Akk +1,\n    p(Nums,Akk2,R).\n\nctn([],1).\nctn([H|T],Y) :-\n    ctn(T,R1),\n    atom_number(H,Res),\n    Y is Res * R1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230849,"user_id":168,"body":"persistence(N, 0) :- N < 10, !.\npersistence(N, R) :-\n  number_codes(N, Ds),\n  foldl([D, X, P] >> (P is (D - 48) * X), Ds, 1, Prod),\n  persistence(Prod, R1),\n  succ(R1, R).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230850,"user_id":50,"body":"persistence(N, 0) :- N < 10.\npersistence(N, MP) :- f(N,K), persistence(K, R), MP is  1 + R.\n  \nf(0, 1).\nf(X, O) :- Q is div(X, 10), R is mod(X, 10), f(Q, E), O is R * E.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230851,"user_id":76,"body":"persistence(N, 0) :- N < 10, !.\npersistence(N, MP) :-\n  mult(N, M),\n  persistence(M, R2), !,\n  MP is 1 + R2.\n\nmult(0, 1).\nmult(N, R) :-\n  divmod(N, 10, S, L),\n  mult(S, R2),\n  R is L * R2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230852,"user_id":3088,"body":"persistence(N, 0) :- N < 10.\npersistence(N, R) :-\n  digits(N, Ds),\n  prod(Ds, N1),\n  persistence(N1, R1),\n  R is R1 + 1.\n  \n  \ndigits(N, Ds) :-\n  atom_number(A, N),\n  atom_to_chars(A, Cs),\n  maplist([C, D]>>(D is C - 48), Cs, Ds).\n\nprod([], 1).\nprod([N|Ns], R) :- prod(Ns, N0), R is N * N0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230853,"user_id":null,"body":"% N is a positive integer\n% MP is the multiplicative persistence of N\npersistence(N, MP) :- persistence_akk(N,0,MP).\n\npersistence_akk(N, MP, MP) :-\n  N<10.\npersistence_akk(N,Akk,MP) :-\n  N>=10,\n  Akk_new is Akk + 1,\n  calc_mp(N, M),\n  persistence_akk(M, Akk_new, MP).\ncalc_mp(N,M) :-\n  N >= 10, !,\n  Digit is N mod 10,\n  Rest is N \/\/ 10,\n  calc_mp(Rest, M_step),\n  M is M_step * Digit.\ncalc_mp(N,N).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230854,"user_id":null,"body":"num_length(N,Length) :-\n  number_string(N,Str),\n  string_length(Str,Length).\n\nmul_digit_helper(N,C,R) :-\n  N = 0, R = C;\n  divmod(N,10,Quot,Rem),\n  Cn is Rem * C,\n  mul_digit_helper(Quot, Cn, R).\n  \nmul_digit(N,R) :- mul_digit_helper(N,1,R).\n\ncount_presistence(N, C, R) :-\n  num_length(N,1), R = C;\n  mul_digit(N,Nn), Cn is C + 1, count_presistence(Nn,Cn,R).\n\npersistence(N, MP) :- count_presistence(N,0,MP).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230855,"user_id":null,"body":"persistence(N,0) :-\n    N =< 9, !.\npersistence(N0,R) :-\n    atom_chars(N0,Digit_chars),\n    maplist(atom_number,Digit_chars,Digits),\n    foldl([A,B,R]>>is(R,A*B),Digits,1,N),\n    persistence(N,R0),\n    R is R0 + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230856,"user_id":null,"body":"% N is a positive integer\n% MP is the multiplicative persistence of N\n\nsum(N,R):-N<10,R=N.\nsum(N,R):-N>9, X is N\/\/10, Y is mod(N,10), sum(X,S), R is S*Y.\n\nfind(N,T,R):- N<10,R=T.\nfind(N,T,R):- N>9,sum(N,X),Y is T+1,find(X,Y,R).\n\npersistence(N, MP) :- find(N,0,R), !,MP=R.\n\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"55ca77fa094a2af31f00002a":[{"id":230857,"user_id":76,"body":"la_liga_goals(43).\nchampions_league_goals(10).\ncopa_del_rey_goals(5).\ntotal_goals(58).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230858,"user_id":null,"body":"la_liga_goals(43).\nchampions_league_goals(10).\ncopa_del_rey_goals(5).\ntotal_goals(Total) :-\nla_liga_goals(X),\nchampions_league_goals(Y),\ncopa_del_rey_goals(Z),\nTotal is X+Y+Z.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230859,"user_id":null,"body":"la_liga_goals(43).\nchampions_league_goals(10).\ncopa_del_rey_goals(5).\ntotal_goals(T) :- la_liga_goals(A), champions_league_goals(B), copa_del_rey_goals(C), T is A+B+C.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230860,"user_id":null,"body":"la_liga_goals(43).\nchampions_league_goals(10).\ncopa_del_rey_goals(5).\ntotal_goals(R) :-\n  la_liga_goals(X),\n  champions_league_goals(Y),\n  copa_del_rey_goals(Z),\n  R is X + Y + Z.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230861,"user_id":null,"body":"la_liga_goals(X) :- X is 43.\nchampions_league_goals(X) :- X is 10.\ncopa_del_rey_goals(X) :- X is 5.\ntotal_goals(X) :-\n  la_liga_goals(A),\n  champions_league_goals(B),\n  copa_del_rey_goals(C),\n  X is A + B + C.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230862,"user_id":null,"body":"la_liga_goals(43).\nchampions_league_goals(10).\ncopa_del_rey_goals(5).\n\ntotal_goals(X):-\n    la_liga_goals(Y),\n    champions_league_goals(Z),\n    copa_del_rey_goals(W),\n    X is Y+Z+W.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230863,"user_id":null,"body":"la_liga_goals(A) :- A is 43.\nchampions_league_goals(B) :- B is 10.\ncopa_del_rey_goals(C) :- C is 5.\ntotal_goals(R) :- la_liga_goals(A),\n                  champions_league_goals(B),\n                  copa_del_rey_goals(C),\n                  R is A + B + C. ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230864,"user_id":null,"body":"la_liga_goals(43).\nchampions_league_goals(10).\ncopa_del_rey_goals(5).\n\ntotal_goals(Goals) :- \nla_liga_goals(A),\nchampions_league_goals(B),\ncopa_del_rey_goals(C),\nGoals is A + B + C.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230865,"user_id":null,"body":"la_liga_goals(43).\nchampions_league_goals(10).\ncopa_del_rey_goals(5).\ntotal_goals(X):-\n  la_liga_goals(A),\n  champions_league_goals(B),\n  copa_del_rey_goals(C),\n  sum_list([A,B,C],X).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"55cbc3586671f6aa070000fb":[{"id":230866,"user_id":564,"body":"% predicate check_for_factor\/2.\ncheck_for_factor(Base, Factor) :- 0 is mod(Base, Factor).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230867,"user_id":645,"body":"check_for_factor(B, F) :- B mod F =:= 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230868,"user_id":null,"body":"% predicate check_for_factor\/2.\ncheck_for_factor(Base, Factor) :- R is Base rem Factor,R = 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230869,"user_id":null,"body":"% predicate check_for_factor\/2.\ncheck_for_factor(Base, Factor) :- \n      Base mod Factor > 0 -> false;true.\n    ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230870,"user_id":null,"body":"check_for_factor(Base, Factor) :-\n  0 is Base mod Factor,\n  true.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230871,"user_id":null,"body":"check_for_factor(_, 1).\ncheck_for_factor(0,_).\ncheck_for_factor(Base, Factor) :-\n  NewBase is Base - Factor,\n  NewBase >= 0,\n  check_for_factor(NewBase, Factor).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230872,"user_id":null,"body":"% predicate check_for_factor\/2.\ncheck_for_factor(Base, Factor) :- Res is Base mod Factor,\n                                  Res == 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230873,"user_id":null,"body":"% predicate check_for_factor\/2.\ncheck_for_factor(Base, Factor) :- \n  Rest is Base mod Factor,\n  Rest =:= 0\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230874,"user_id":null,"body":"% predicate check_for_factor\/2.\ncheck_for_factor(Base, Factor) :- X is Base mod Factor, X = 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230875,"user_id":null,"body":"% predicate check_for_factor\/2.\ncheck_for_factor(0, _).\ncheck_for_factor(Base, Factor) :- Base >= Factor, New is Base - Factor, check_for_factor(New, Factor).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"55cbd4ba903825f7970000f5":[{"id":230876,"user_id":null,"body":"get_grade(A,B,C,O) :- I is floor((A+B+C) \/ 3),\n    grade(I,O).\ngrade(I,O) :- \n   I < 60 -> O = 'F';\n   I < 70 -> O = 'D';\n   I < 80 -> O = 'C';\n   I < 90 -> O = 'B';\n   I =< 100 -> O = 'A'.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230877,"user_id":53,"body":"get_grade(S1, S2, S3, Result) :-\n    A is (S1 + S2 + S3) \/ 3,\n    ( A >= 90 ->\n      Result = 'A'\n    ; A >= 80 ->\n      Result = 'B'\n    ; A >= 70 ->\n      Result = 'C'\n    ; A >= 60 ->\n      Result = 'D'\n    ; Result = 'F'\n    ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230878,"user_id":null,"body":"get_grade(S1, S2, S3, Result) :-\n  Score is (S1+S2+S3)\/3,\n  get_letter(Score, Result).\n\nget_letter(S, 'A') :- S >= 90, !.\nget_letter(S, 'B') :- S >= 80, !.\nget_letter(S, 'C') :- S >= 70, !.\nget_letter(S, 'D') :- S >= 60, !.\nget_letter(_, 'F').","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230879,"user_id":null,"body":"% Store the result inside 4th argument. Good luck!\nget_grade(S1, S2, S3, Result) :- \n  Media is (S1 + S2 + S3) \/ 3,\n  obtener_letra(Media, Result).\n\nobtener_letra(Media, 'A') :- 90 =< Media, Media =< 100.\nobtener_letra(Media, 'B') :- 80 =< Media, Media < 90.\nobtener_letra(Media, 'C') :- 70 =< Media, Media < 80.\nobtener_letra(Media, 'D') :- 60 =< Media, Media < 70.\nobtener_letra(Media, 'F') :- Media < 60.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230880,"user_id":null,"body":"% Store the result inside 4th argument. Good luck!\nget_grade(S1, S2, S3, Result) :- \n    Average is (S1+S2+S3)\/3, \n   ( Average >= 90, Average =< 100 -> Result = 'A';\n    Average >= 80, Average < 90-> Result = 'B';\n    Average >= 70, Average < 80-> Result = 'C';\n    Average >= 60, Average < 70-> Result = 'D';\n    Average < 60-> Result = 'F').","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230881,"user_id":null,"body":"get_grade(S1, S2, S3, 'A') :-\n  sumlist([S1, S2, S3], Sum),\n  Score is Sum \/ 3,\n  Score >= 90, Score =< 100.\nget_grade(S1, S2, S3, 'B') :-\n  sumlist([S1, S2, S3], Sum),\n  Score is Sum \/ 3,\n  Score >= 80, Score < 90.\nget_grade(S1, S2, S3, 'C') :-\n  sumlist([S1, S2, S3], Sum),\n  Score is Sum \/ 3,\n  Score >= 70, Score < 80.\nget_grade(S1, S2, S3, 'D') :-\n  sumlist([S1, S2, S3], Sum),\n  Score is Sum \/ 3,\n  Score >= 60, Score < 70.\nget_grade(S1, S2, S3, 'F') :-\n  sumlist([S1, S2, S3], Sum),\n  Score is Sum \/ 3,\n  Score >= 0, Score < 60.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230882,"user_id":null,"body":"evaluate(M, Result) :-\n\t(\tbetween(90, 100, M) ->\n\t\t\tResult = 'A';\n\t\tbetween(80, 89, M) ->\n\t\t\tResult  = 'B';\n\t\tbetween(70, 79, M) ->\n\t\t\tResult  = 'C';\n\t\tbetween(60, 69, M) ->\n\t\t\tResult  = 'D';\n\t\tbetween(0, 59, M) ->\n\t\t\tResult  = 'F').\n\nget_grade(S1, S2, S3, Result) :- \n\tM is floor((S1+S2+S3)\/3),\n\tevaluate(M, Result).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230883,"user_id":null,"body":"% Store the result inside 4th argument. Good luck!\nget_grade(S1, S2, S3, Result) :-\n  Avg is div(S1+S2+S3,3),\n  get_grade1(Avg, Result).\n\nget_grade1(Avg, 'A') :- Avg >= 90.\nget_grade1(Avg, 'B') :- Avg >= 80.\nget_grade1(Avg, 'C') :- Avg >= 70.\nget_grade1(Avg, 'D') :- Avg >= 60.\nget_grade1(_, 'F').","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230884,"user_id":null,"body":"\nget_grade(S1, S2, S3, Result) :- \n  Score is (S1+S2+S3)\/3,\n  (Score >= 90, Score =< 100, Result = 'A';\n  Score >= 80, Score < 90, Result = 'B';\n  Score >= 70, Score < 80, Result = 'C';\n  Score >= 60, Score < 70, Result = 'D';\n  Result = 'F').","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230885,"user_id":null,"body":"% Store the result inside 4th argument. Good luck!\nget_grade(S1, S2, S3, Result) :- Avg is (S1+S2+S3) \/ 3, avg_to_grade(Avg, Result).\n\navg_to_grade(A, 'A') :- A >= 90, !.\navg_to_grade(A, 'B') :- A >= 80, !.\navg_to_grade(A, 'C') :- A >= 70, !.\navg_to_grade(A, 'D') :- A >= 60, !.\navg_to_grade(_, 'F').","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"55d24f55d7dd296eb9000030":[{"id":230886,"user_id":null,"body":"summation(N, R) :- \n  numlist(0, N, X),\n  sum_list(X, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230887,"user_id":null,"body":"summation(N, R) :- R is (N+1)*N\/2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230888,"user_id":null,"body":"summation(N, R) :- \n%  R is (N * (N + 1)) \/ 2.\n%  numlist(0, N, LN), sum_list(LN, R).\n  N =< 1, R = 1; N1 is N - 1, summation(N1, Ac), R is N + Ac.\n \n ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230889,"user_id":null,"body":"summation(N, R) :- R is N * (N+1) \/ 2 .","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230890,"user_id":1140,"body":"summation(N, R) :-\n  N =< 1, R = 1;\n  M is N - 1,\n  summation(M, Q),\n  R is N + Q.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230891,"user_id":null,"body":"summation(1, R) :- R is 1.\nsummation(N, R) :- N1 is N-1, summation(N1, R1), R is N + R1.\n\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230892,"user_id":null,"body":"summation(N, R) :- \n  numlist(1, N, List),\n  foldl(plus, List, 0, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230893,"user_id":null,"body":"summation(1, 1).\nsummation(N, R) :- M is N-1, summation(M, PartialResult), R is N+PartialResult.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230894,"user_id":null,"body":"\nsummation(1, 1).\nsummation(N, R) :-\n  N1 is N - 1,\n  summation(N1, R1),\n  R is N + R1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230895,"user_id":null,"body":"summation(0, 0).\nsummation(N, R) :- N1 is N-1, summation(N1, R2), R is N+R2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"55e6f5e58f7817808e00002e":[{"id":230896,"user_id":null,"body":"% Store the result inside 2nd argument.\nseven(N, [N, 0]) :- N < 100, !.\nseven(N, [L, S]) :-\n    divmod(N, 10, Q, R),\n    NN is Q - 2 * R,\n    seven(NN, [L, P]),\n    S is P + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230897,"user_id":null,"body":"seven(N, R) :- seven(N,0,R).\n  \nseven(N, I, R) :-\n  N<100 -> !, R=[N,I]\n; divmod(N,10,Q,Rem),\n  succ(I,J),\n  M is Q-2*Rem, \n  seven(M,J,R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230898,"user_id":null,"body":"seven(N, 0, N) :- N < 100.\nseven(N, Counter, Result) :-\n    Y is N mod 10,\n    X is floor((N - Y) \/ 10),\n    NewN is X - 2 * Y,\n    seven(NewN, SubCounter, Result),\n    Counter is SubCounter + 1.\n\nseven(N, Result) :- seven(N, Counter, R), Result = [R, Counter].","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230899,"user_id":null,"body":"% Store the result inside 2nd argument.\nseven(N, [N, 0]) :- N < 100.\n\nseven(N, [LastNumber, Steps]) :- \n  D is div(N, 10),\n  M is mod(N, 10),\n  N1 is D - (2*M),\n  seven(N1, [LastNumber, Steps1]),\n  Steps is Steps1 + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230900,"user_id":168,"body":"seven(N, Result) :- steps(0, N, Result).\n\nsteps(K, M, [M, K]) :- M < 100.\nsteps(K, M, Result) :-\n  divmod(M, 10, Q, R),\n  M1 is Q - 2 * R,\n  K1 is K + 1,\n  steps(K1, M1, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230901,"user_id":53,"body":"helper(CNT, N, R) :-\n  (N < 100 -> R = [N, CNT];\n   CNT1 is CNT + 1, \n   N1 is div(N, 10) - (2 * mod(N, 10)),\n   helper(CNT1, N1, R)).\n  \nseven(N, R) :- helper(0, N, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230902,"user_id":null,"body":"seven(N, R) :- seven(N, N, 0, R).\nseven(_, N, K, [N, K]) :- N < 100, !.\nseven(N, N1, K, R) :-\n    divmod(N1, 10, A, B),\n    N2 is A - 2*B,\n    K1 is K + 1,\n    seven(N, N2, K1, R).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230903,"user_id":null,"body":"seven(N, Result) :-\n  N < 100,\n  Result = [N,0].\n  \nseven(N, Result) :-\n  Y is N mod 10,\n  Z is (N-Y)\/10,\n  J is Z-2*Y,\n  seven(J, [X,O]),\n  M is O+1,\n  Result=[X,M].","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230904,"user_id":null,"body":":- use_module(library(clpfd)).\n\nsplitNumber([L], [], R) :- number_chars(R, [L]).\nsplitNumber([L|Ls], [L|Is], Last) :-\n    splitNumber(Ls, Is, Last).\n\nseven(N, [Res, Steps]) :- number(N), seven(N, Res, Steps, 0).\nseven(N, N, CurStep, CurStep) :-\n    N #>= 0,\n    number_chars(N, CharList),\n    length(CharList, Len),\n    Len #=< 2.\nseven(N, Res, Steps, CurStep) :-\n    N #>= 0,\n    number_chars(N, CharList),\n    length(CharList, Len),\n    Len #> 2,\n    splitNumber(CharList, Init, Last),\n    Subtrahend #= Last * 2,\n    number_chars(Minuend, Init),\n    Difference #= Minuend - Subtrahend,\n    NewStep #= CurStep + 1,\n    seven(Difference, Res, Steps, NewStep).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230905,"user_id":null,"body":"% Store the result inside 2nd argument.\nseven(N, [Rest, Steps]) :- N > 99,\n  divmod(N, 10, X, Y),\n  N2 is X - 2*Y,\n  seven(N2, [Rest, NextSteps]),\n  Steps is NextSteps + 1.\n\nseven(N, [N, 0]) :- N =< 99.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"55eca815d0d20962e1000106":[{"id":230906,"user_id":168,"body":"generate_range(Min, Max, _, []) :- Min > Max.\ngenerate_range(Min, Max, Step, [Min|R]) :- A is Min + Step, generate_range(A, Max, Step, R).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230907,"user_id":null,"body":"generate_range(Min, Max, S, Rs):-\n  gr(Min, Max, S, [], Ts),\n  reverse(Ts, Rs).\n\ngr(Min, Max, S, Acc, Rs):-\n  Min =< Max,\n  !,\n  M is Min + S,\n  gr(M, Max, S, [Min|Acc], Rs).\n  \ngr(_, _, _, Acc, Acc).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230908,"user_id":null,"body":"gen_range_helper(Min, Max, Step, Acc, Res) :-\n  ( Min =< Max\n  -> NewMin is Min + Step, gen_range_helper(NewMin, Max, Step, [Min|Acc], Res)\n  ; reverse(Acc, Res)\n  ).\n  \ngenerate_range(Min, Max, Step, Res) :- gen_range_helper(Min, Max, Step, [], Res).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230909,"user_id":53,"body":"helper(A, B, S, XS, R) :-\n  (A > B -> R = XS;\n   X is A + S,\n   YS = [A | XS],\n   helper(X, B, S, YS, R)).\n  \ngenerate_range(A, B, S, R) :-\n  XS = [],\n  helper(A, B, S, XS, Q),\n  reverse(Q, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230910,"user_id":null,"body":"generate_range(LWR, UPR, DX, R) :-\n  findall(R1, generate_range_instance(LWR, UPR, DX, R1), R).\n\ngenerate_range_instance(LWR, _, _, LWR).\ngenerate_range_instance(LWR, UPR, DX, R) :-\n  between(LWR, UPR, R),\n  LWR1 is LWR+DX,\n  generate_range_instance(LWR1, UPR, DX, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230911,"user_id":null,"body":"\ngenerate_range(Min, Max, Step, [Min|List]) :-\n  Min < Max,\n  Min1 is Min + Step,\n  generate_range(Min1, Max, Step, List).\ngenerate_range(Min, Min, Step, [Min]).\ngenerate_range(_, _, _, []).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230912,"user_id":null,"body":"generate_range(Lo, Hi, _, []) :- Hi < Lo, !.\ngenerate_range(Lo, Hi, Step, [Lo | L]) :- \n  Lo1 is Lo + Step,\n  generate_range(Lo1, Hi, Step, L).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230913,"user_id":null,"body":"generate_range(Lo, Hi, Step, [Lo]) :- \n  Lo + Step > Hi.\ngenerate_range(Lo, Hi, Step, Range) :-\n  Lo1 is Lo + Step,\n  generate_range(Lo1, Hi, Step, Range1),\n  Range = [Lo | Range1].","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230914,"user_id":null,"body":"generate_range(F, L, S, R) :-\n  findall(N, between(F,L,N), Ns),\n  T is F mod S,\n  remove_others(T, S, Ns, R).\n\nremove_others(_, _, [], []).\nremove_others(F, S, [H|T1], [H|T2]) :-\n  X is H mod S,\n  X =:= F,\n  remove_others(F, S, T1, T2).\nremove_others(F, S, [_|T1], L) :-\n  remove_others(F, S, T1, L).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230915,"user_id":null,"body":"generate_range(Min, Max, Step, Result) :-\n    generate_range(Min, Max, Step, Result, Min).\n\ngenerate_range(_, Max, _, [], Current) :- Current > Max.\ngenerate_range(Min, Max, Step, [Current|Result], Current) :-\n    Current =< Max,\n    NewCurrent is Current + Step,\n    generate_range(Min, Max, Step, Result, NewCurrent).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"55ecd718f46fba02e5000029":[{"id":230916,"user_id":null,"body":"whats_between(A, A, [A]) :- !.\nwhats_between(A, B, [A|Rest])\n  :- Next is A + 1, whats_between(Next, B, Rest).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230917,"user_id":null,"body":"whats_between(B,B,[B]).  \n\nwhats_between(A, B, [A|R]) :- \n  A<B, C is A+1, whats_between(C,B,R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230918,"user_id":527,"body":"whats_between(A, B, R) :- numlist(A, B, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230919,"user_id":168,"body":"whats_between(A, B, R) :- A =< B, numlist(A, B, R), !.\nwhats_between(_, _, []).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230920,"user_id":null,"body":"whats_between(A, A, R) :- !, R = [A].\nwhats_between(A, B, [A|R]) :-\n  C is A + 1,\n  whats_between(C, B, R).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230921,"user_id":null,"body":"whats_between(A, B, R) :- \n  ffs(A, B, [], R).\n  \n\nffs(A, A, C, [A|C]).\nffs(A, B, C, D) :-\n  A < B,\n  Bn is B-1,\n  ffs(A,Bn,[B|C], D).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230922,"user_id":null,"body":"whats_between(A,A,[A]) :- !.\nwhats_between(A,B,[A|Res]) :- \n                      Next is A + 1,\n                      whats_between(Next,B,Res).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230923,"user_id":null,"body":"whats_between(A,B,R) :- \n  A < B -> numlist(A,B,R) ; numlist(B,A,R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230924,"user_id":null,"body":"whats_between(M, L, []) :- M > L.\nwhats_between(M, L, [L]) :- M == L.\nwhats_between(A, B, L) :- A < B,\n                        NewA is A + 1,\n                        whats_between(NewA, B, NewList),\n                        L = [A|NewList].","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230925,"user_id":null,"body":"between(Xs, L, H, Res) :-\n    ( L =< H ->\n      append(Xs, [L], Re),\n      R is L + 1,\n      between(Re, R, H, Res)\n    ;   Res = Xs\n    ).\n\nwhats_between(A, B, R) :- \n    between([], A, B, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"55edaba99da3a9c84000003b":[{"id":230926,"user_id":null,"body":"divisible_by(Numbers, Divisor, Result) :-\n  include([X] >> (0 =:= X rem Divisor), Numbers, Result).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230927,"user_id":527,"body":"divisible_by(Ns, D, Rs) :- include(divides(D), Ns, Rs).\ndivides(D, N) :- N mod D =:= 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230928,"user_id":168,"body":"divisible_by(Numbers, Divisor, Result) :- \n  include([X] >> (X mod Divisor =:= 0), Numbers, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230929,"user_id":null,"body":"divisible_by(Numbers, Divisor, Result) :- \n  include(divides(Divisor), Numbers, Result).\n\ndivides(X, Y) :- \n  Y mod X =:= 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230930,"user_id":53,"body":"aux(Ls, I, N, Y, Acc, R) :-\n  (I = N  ->\n      reverse(Acc, R)\n    ;\n      nth0(I, Ls, X),\n      I1 is I + 1,\n      (X mod Y =\\= 0  ->\n         aux(Ls, I1, N, Y, Acc, R)\n      ;\n         aux(Ls, I1, N, Y, [X | Acc], R)\n      )\n    ).\n\ndivisible_by(Numbers, Divisor, Result) :- \n  length(Numbers, N),\n  aux(Numbers, 0, N, Divisor, [], Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230931,"user_id":null,"body":"is_divisible(Div, N) :- N mod Div =:= 0.\n\ndivisible_by(Numbers, Divisor, Result) :-\n  include(is_divisible(Divisor), Numbers, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230932,"user_id":119,"body":"% Store the result inside 3rd argument.\ndivisible_by([], _, []).\n\ndivisible_by([Head | Tail], Value, [Head | ResultTail]) :- \n    Head mod Value =:= 0, \n    divisible_by(Tail, Value, ResultTail).\n\ndivisible_by([Head | Tail], Value, ResultTail) :- \n    Head mod Value =\\= 0, \n    divisible_by(Tail, Value, ResultTail).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230933,"user_id":null,"body":"% Store the result inside 3rd argument.\ndivisible_by(Numbers, Divisor, Result) :-\n  include([X]>>(0 is X mod Divisor),Numbers,Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230934,"user_id":null,"body":"divisible_by([], _, []).\ndivisible_by([H|T], N, [H|T0]) :- 0 is H mod N, !, divisible_by(T, N, T0).\ndivisible_by([_|T], N, T0) :- divisible_by(T, N, T0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230935,"user_id":277,"body":"divisible_by(Numbers, Divisor, Result) :-\n  findall(Number,\n    ( member(Number,Numbers),\n       mod(Number, Divisor) =:= 0\n    )\n    , Result\n  )\n  .","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"55f2b110f61eb01779000053":[{"id":230936,"user_id":null,"body":"get_sum(A, B, Result) :-\n    (   A =:= B ->\n        Result is A\n    ;   Result is (A + B) * (abs(A - B) + 1) \/\/ 2\n    ).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230937,"user_id":null,"body":"get_sum(A, A, A).\nget_sum(A, B, R) :-\n  A > B,\n  get_sum(B, A, R).\nget_sum(A, B, R) :-\n  A < B,\n  A1 is A + 1,\n  get_sum(A1, B, R1),\n  R is A + R1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230938,"user_id":null,"body":"get_sum(A, A, A).\nget_sum(A, B, R) :- B < A, get_sum(B, A, R).\nget_sum(A, B, R) :- NewA is A+1, get_sum(NewA, B, NextR), R is NextR+A. ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230939,"user_id":544,"body":"get_sum(A, A, A).\n\nget_sum(A, B, Sum) :-\n  A < B,\n  numlist(A, B, AtoB),\n  sum_list(AtoB, Sum).\n  \nget_sum(A, B, Sum) :-\n  A > B,\n  numlist(B, A, AtoB),\n  sum_list(AtoB, Sum).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230940,"user_id":null,"body":":- use_module(library(lists)).\n\nget_sum(A, B, Result) :-\n  A < B,\n  findall(X, between(A,B,X), L),\n  sum_list(L, Result).\n\nget_sum(A, B, Result) :-\n  findall(X, between(B,A,X), L),\n  sum_list(L, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230941,"user_id":null,"body":":- use_module(library(clpfd)).\nget_sum(A, B, Result) :-\n  N #= abs(B - A) + 1,\n  M #= A + B,\n  Result #= N * M \/\/ 2.\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230942,"user_id":null,"body":"get_sum(A, B, Result) :- \n                         % if A is smaller then B\n                         (A<B, findall(L,between(A,B,L),Numbers), \n                         sumlist(Numbers,Result))\n                         ; \n                         %If A is bigger then B\n                         findall(L,between(B,A,L),Numbers), \n                         sumlist(Numbers,Result).\n                        ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230943,"user_id":527,"body":"get_sum(A, B, Result) :-\n  Result is (A + B) * (abs(A - B) + 1) div 2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230944,"user_id":null,"body":"get_sum(A, A, A).\nget_sum(A, B, C) :- A < B, A_ is A + 1, get_sum(A_, B, C_), C is A + C_.\nget_sum(A, B, C) :- A > B, !, get_sum(B, A, C).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230945,"user_id":null,"body":" \n \nget_sum(A, B, R):-A>B,!, sum(B, A, R).\nget_sum(A, B, R):-sum(A, B, R).\n \nsum(A, B, R):- A<B,!, T is A+1, sum(T,B,Result), R is Result+A.\nsum(_, B, B).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"55f73be6e12baaa5900000d4":[{"id":230946,"user_id":76,"body":"goals(A, B, C, R) :- sumlist([A, B, C], R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230947,"user_id":null,"body":"goals(LaLigaGoals, CopaDelReyGoals, ChampionsLeagueGoals, Result) :- Result is (LaLigaGoals + CopaDelReyGoals + ChampionsLeagueGoals). \n  % Your code here.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230948,"user_id":null,"body":"goals(LaLigaGoals, CopaDelReyGoals, ChampionsLeagueGoals, Result) :-\n  % Your code here.\n  Result is LaLigaGoals+CopaDelReyGoals+ChampionsLeagueGoals.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230949,"user_id":null,"body":"goals(A, B, C, R) :- R is A+B+C.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230950,"user_id":53,"body":"goals(A, B, C, R) :-\n  X is A + B,\n  R is X + C.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230951,"user_id":null,"body":"goals(La, Co, Ch, R) :- R is La + Co + Ch.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230952,"user_id":null,"body":"goals(L, C, D, Result) :-\n  Result is L + C + D.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230953,"user_id":null,"body":"goals(LL, CDL, CLD, Result) :-\n  Result is LL + CDL + CLD\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230954,"user_id":null,"body":"goals(X, Y, Z, Result) :- Result is X + Y + Z.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230955,"user_id":421,"body":"goals(La, Co, Ch, Result) :- Result is La + Co + Ch.\n  % Your code here.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"55f9b48403f6b87a7c0000bd":[{"id":230956,"user_id":null,"body":"paperwork(N, M, NM) :- N > 0, M > 0, NM is N * M, !.\npaperwork(_, _, 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230957,"user_id":null,"body":"paperwork(N, M, Result) :-\n  N >= 0,\n  M >= 0,\n  Result is N*M;\n  Result is 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230958,"user_id":null,"body":"paperwork(N, M, 0):-\n  N<0, !.\n  \npaperwork(N, M, 0):-\n  M<0, !.\n  \npaperwork(N, M, Result):-\n  Result is N*M.\n  \n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230959,"user_id":null,"body":"paperwork(N, M, 0) :- (N<0 ; M<0), !.\npaperwork(N, M, Result) :- Result is N*M.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230960,"user_id":null,"body":"paperwork(N, M, 0) :-\n  N =< 0; M =< 0.\npaperwork(N, M, Result) :-\n  Result is N*M.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230961,"user_id":null,"body":"paperwork(N, M, Result) :-\n  (N<0;M<0),\n  Result = 0.\npaperwork(N, M, Result) :-\n  Result is N*M.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230962,"user_id":null,"body":"paperwork(N, M, Result) :-\n  N >= 0,\n  M >= 0,\n  Result is N * M.\npaperwork(_, _, 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230963,"user_id":null,"body":"paperwork(N, M, Result) :- N < 0, Result is 0, !.\npaperwork(N, M, Result) :- M < 0, Result is 0, !.\npaperwork(N, M, Result) :- Result is N*M.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230964,"user_id":null,"body":"paperwork(N, M, Result) :-\n    (N < 0;M < 0) ->\n    Result is 0;\n    Result is N*M.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230965,"user_id":null,"body":"paperwork(N, M, R) :- N>0, M>0, R is N*M.\npaperwork(_,_,0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"55f9bca8ecaa9eac7100004a":[{"id":230966,"user_id":null,"body":"past(H, M, S, Result) :- Result is 1000 * (S + 60 * (M + 60 * H)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230967,"user_id":null,"body":"hours(H, R) :- R is H * 3600000.\nminutes(M, R) :- R is M * 60000.\nseconds(S, R) :- R is S * 1000.\n\n\npast(H, M, S, Result) :- \n  hours(H, Hours),\n  minutes(M, Mins),\n  seconds(S, Secs),\n  Result is Hours + Mins + Secs.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230968,"user_id":null,"body":"past(H, M, S, Result) :-\n  Result is H * 60 * 60000 + M * 60000 + S * 1000.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230969,"user_id":null,"body":"past(H, M, S, Result) :- \n  M1 is S * 1000,\n  M2 is M * 60000,\n  M3 is H * 3600000,\n  Result is M1 + M2 + M3.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230970,"user_id":null,"body":"past(H, M, S, Result) :- Result is 1000 * (((H * 60) + M) * 60 + S).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230971,"user_id":50,"body":"past(H, M, S, Result) :-Result is (S+60*(M+60*H))*1000.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230972,"user_id":null,"body":"past(H, M, S, Result) :- Result is H*3600000+M*60000+S*1000.\n  % Your code here.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230973,"user_id":null,"body":"past(H, M, S, Ms) :- Ms is 1000*S+1000*60*M+1000*60*60*H.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230974,"user_id":1140,"body":"past(H, M, S, R) :- R is H * 60 * 60 * 1000 + M * 60 * 1000 + S * 1000.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230975,"user_id":null,"body":"past(H, M, S, Result) :- \n\tH1 is H * 3600000, \/* ms in 1h *\/\n  M1 is M * 60000, \/* ms in 1m *\/\n  S1 is S * 1000, \/* ms in 1s *\/\n  Result is (H1 + M1 + S1). ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"55fab1ffda3e2e44f00000c6":[{"id":230976,"user_id":null,"body":"cockroach_speed(Speed, Result) :- Result is floor(100000*Speed\/3600).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230977,"user_id":645,"body":"cockroach_speed(S, R) :- R is floor(S * 27.77777778).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230978,"user_id":564,"body":"cockroach_speed(KmPerHr, Result) :-\n  CmPerSec = KmPerHr \/ 0.036,\n  Result is truncate(CmPerSec).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230979,"user_id":null,"body":"cockroach_speed(Speed, Result) :-\n  Result is truncate(Speed * 10000 \/ 360).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230980,"user_id":null,"body":"cockroach_speed(Speed, Result) :- CMS is Speed*100000\/3600, floor(CMS, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230981,"user_id":null,"body":"cockroach_speed(Speed, Result) :-\n  CMpS is Speed * 27.778,\n  Result is floor(CMpS).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230982,"user_id":null,"body":"cockroach_speed(Speed, Result) :- Result is floor(Speed * (5\/18) * 100).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230983,"user_id":null,"body":"cockroach_speed(Speed, Result) :- Speed>0, Result is floor(Speed*100\/3.6); Result is 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230984,"user_id":null,"body":"cockroach_speed(Speed, R):-R is floor(Speed*1000\/36).\n  % Your code here. 125 4.5","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230985,"user_id":null,"body":"cockroach_speed(Speed, Result) :-\n  Result is floor(Speed * 27.78).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"55fd2d567d94ac3bc9000064":[{"id":230986,"user_id":527,"body":"row_sum_odd_numbers(N, Result) :- Result is N ^ 3.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230987,"user_id":645,"body":"row_sum_odd_numbers(N, R) :- R is N ^ 3.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230988,"user_id":null,"body":"% store the result inside 2nd argument\nrow_sum_odd_numbers(N,Result) :- Result is N^3.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230989,"user_id":null,"body":"% store the result inside 2nd argument\nsum_n_odds(N, Res) :- Res is N*N.\n\nsum_nats(N, Res) :- Res is (N*(N+1))\/2.\n\nrow_sum_odd_numbers(N, Result) :-\n  sum_nats(N, SumNnats),\n  sum_nats(N - 1, SumNminus1Nats),\n  sum_n_odds(SumNnats, SumSumNnatsOdds),\n  sum_n_odds(SumNminus1Nats, SumSumNminus1NatsOdds),\n  Result is SumSumNnatsOdds - SumSumNminus1NatsOdds.\n\n  \n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230990,"user_id":null,"body":"% store the result inside 2nd argument\nfirst_num_in_row(1, 1).\n\nfirst_num_in_row(N, R):- OldN is N-1, first_num_in_row(OldN, OldR), R is OldR + (N-1)*2.\n\n\nrow_sum_odd_numbers(N, Result) :- first_num_in_row(N, R), sum_consecutive_odds(N, R, Result).\n\nsum_consecutive_odds(N, R, Result):- NewN is N-1, NewR is R+2, sum_odds(NewN,NewR, Result1), Result is Result1+R.\n\nsum_odds(0,_,0).\n\nsum_odds(N, R, Result):-NewN is N-1, NewR is R+2, sum_odds(NewN,NewR,Res1), Result is R+Res1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230991,"user_id":null,"body":"row_sum_odd_numbers(N, R) :- R is N ** 3.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230992,"user_id":null,"body":"% store the result inside 2nd argument\nrow_sum_odd_numbers(N, Result) :- Result is (N*(N+1)\/2)**2 - (N*(N-1)\/2)**2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230993,"user_id":null,"body":"% store the result inside 2nd argument\nrow_sum_odd_numbers(N, Result) :- \n first_elem(N, E1),\n sum_elem(N, E1, Result).\n\nfirst_elem(N, Result):- \n  N1 is N - 1,\n  N2 is N * N1,\n  Result is N2 + 1.\n\nsum_elem(1, Elem, Elem) :- true.\nsum_elem(N, Elem, Result) :-  \n  N1 is N - 1,\n  Elem2 is Elem + 2,\n  sum_elem(N1, Elem2, Aux),\n  Result is Elem + Aux.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230994,"user_id":null,"body":"add(A, B, C) :- C is A + B.\n\nget_odds(Upper, Upper, [Upper]).\nget_odds(Lower, Upper, List) :-\n  Lower mod 2 =:= 1,\n  Upper mod 2 =:= 1,\n  Lower2 is Lower + 2,\n  get_odds(Lower2, Upper, List2),\n  append(List2, [Lower], List).\n\n% store the result inside 2nd argument\nrow_sum_odd_numbers(N, Result) :- \n  Lower_limit is (N * (N - 1)) + 1,\n  Upper_limit is (N * N) + (N - 1),\n  get_odds(Lower_limit, Upper_limit, Number_list),\n  foldl(add, Number_list, 0, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230995,"user_id":null,"body":"% first element of row is N^2 - N + 1\n% sum of N-th row is [first + first+2 + first+4 + .. + first+(2 * (N-1))]\n% rearranging we get [(first * N) + (N * (N-1))]\n% substituting first and simplifying: {[(N^2 - N + 1) * N] + [N * (N-1)]}\n%                                     = (N^3 - N^2 + N) + (N^2 - N) = N^3\nrow_sum_odd_numbers(N, Result) :- Result is N ^ 3.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5613d06cee1e7da6d5000055":[{"id":230996,"user_id":null,"body":"step(Stp, Start, End, [(P0,P1)]) :-\n  between(Start,End,P0), \n  crypto_is_prime(P0,[]), \n  P1 is P0+Stp,\n  P1 < End,\n  crypto_is_prime(P1,[]).\nstep(_, _, _, []).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230997,"user_id":53,"body":"step(G, M, N, [(A, B)]) :-\n  T is N - G,\n  between(M, T, A),\n  crypto_is_prime(A, []),\n  B is A + G,\n  crypto_is_prime(B, []),\n  !.\n  \nstep(_, _, _, []).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230998,"user_id":168,"body":"step(Stp, Start, End, [(X, Y)]) :-\n  E1 is End - Stp,\n  between(Start, E1, X),\n  Y is X + Stp,\n  crypto_is_prime(X, []),\n  crypto_is_prime(Y, []), !.\n  \nstep(_, _, _, []).\n  \n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":230999,"user_id":null,"body":"step(G,M,N,[]):- M>N-G, !.\nstep(G,M,N,R):- is_even(M), !, M1 is M+1, step(G,M1,N,R).\nstep(G,M,_,[(M,Y)]):- %M=<N-G,\n    is_prime(M),\n    Y is M+G,\n    is_prime(Y),\n    !.\nstep(G,M,N,R):- %M=<N-G, \n    M1 is M+2, \n    step(G,M1,N,R).\n\n\nis_even(N):- 0 is N mod 2.\n\nis_prime(2).\nis_prime(3).\nis_prime(X):- X>3,1 is X mod 2, is_prime(X,3).\nis_prime(X,Y) :- Y*Y > X.\nis_prime(X,Y) :- \n        Y*Y < X, \n        \\+(0 is X mod Y), \n        Y1 is Y+2,\n        is_prime(X,Y1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231000,"user_id":76,"body":"step(Step, Start, End, Result) :-\n  between(Start, End, N), \n  N1 is N + Step, \n  N1 =< End,\n  crypto_is_prime(N, []), \n  crypto_is_prime(N1, []), \n  Result = [(N, N1)], \n  !\n.\n\nstep(_, _, _, []).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231001,"user_id":null,"body":"step(Stp, Start, End, [(P,Q)]) :-\n    between(Start,End,P),\n    prime(P),\n    Q is P + Stp,\n    Q =< End,\n    prime(Q),!.\n    \nstep(_,_,_,[]).\n\nprime(2).\nprime(3).\nprime(N) :-\n   N > 3,\n   F is floor(sqrt(N)),\n   forall(between(2,F,T), \\+ (N mod T =:= 0)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231002,"user_id":null,"body":"is_prime(N) :-\n    \\+ has_factor(N).\n\nhas_factor(N) :-\n    N1 is ceil(sqrt(N)),\n    between(2,N1,I),\n    Mod is N mod I,\n    Mod = 0.\n\nstep(Diff,Start,End,[(Val,Other)]) :-\n    between(Start,End,Val),\n    is_prime(Val),\n    Other is Val + Diff,\n    between(Start,End,Other),\n    is_prime(Other).\nstep(Diff,Start,End,[]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231003,"user_id":null,"body":"probably_prime(2) :- !.\nprobably_prime(P) :- P mod 2 =:= 1, powm(2, P - 1, P) =:= 1.\n\nprime_aux(P, X) :- X * X > P, !.\nprime_aux(P, X) :- P mod X =\\= 0, Y is X + 1, prime_aux(P, Y).\n\nprime(P) :- probably_prime(P), prime_aux(P, 2).\n\nstep(Stp, Start, End, [(P, Q)]) :- E is End - Stp, between(Start, E, P), prime(P), Q is P + Stp, prime(Q), !.\nstep(_, _, _, []).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231004,"user_id":492,"body":"step(Stp, Start, End, L) :-\n    Nd is End - Stp,\n    findall(\n        E,\n        (   \n            between(Start, Nd, U),   \n            crypto_is_prime(U, []),     \n            V is U + Stp,      \n            crypto_is_prime(V, []),         \n            E = (U, V), !       \n        ),\n        L\n).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"561e9c843a2ef5a40c0000a4":[{"id":231005,"user_id":527,"body":"gap_(G, M, N, [P, Q]) :-\n  lazy_list([I, P1, P] >> (between(I, N, P), crypto_is_prime(P, []), succ(P, P1)), M, Ps),\n  nextto(P, Q, Ps),\n  plus(P, G, Q).\n\ngap(G, M, N, Result) :- gap_(G, M, N, Result), !.\ngap(_, _, _, []).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231006,"user_id":76,"body":"gap(G, M, N, [A, B]) :-\n  between(M, N, A),\n  crypto_is_prime(A, []),\n  B is A + G,\n  B =< N,\n  crypto_is_prime(B, []),\n  numlist(A, B, Cs),\n  maplist([C] >> (C =:= A ; C =:= B ; \\+ crypto_is_prime(C, [])), Cs), !.\n  \ngap(_, _, _, []).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231007,"user_id":53,"body":"isprime(N, R) :-\n  isprime_(N, 5, R).\n  \nisprime_(N, I, R) :-\n  (  4 > N -> R = 1\n  ;  mod(N, 2) =:= 0 -> R = 0\n  ;  mod(N, 3) =:= 0 -> R = 0\n  ;  I * I > N -> R = 1\n  ;  mod(N, I) =:= 0 -> R = 0\n  ;  I2 is I + 2, mod(N, I2) =:= 0 -> R = 0\n  ;  I6 is I + 6, isprime_(N, I6, R)\n  ).\n\ngap_(G, I, N, A, B, R) :-\n  (  I - 1 > N -> R = []\n  ;  B - A =:= G -> R = [A, B]\n  ;  I1 is I + 1,\n     isprime(I, P),\n     (  P =:= 1 -> gap_(G, I1, N, B, I, R)\n     ;  gap_(G, I1, N, A, B, R))\n  ).\n\ngap(G, M, N, R) :-\n  gap_(G, M, N, 0, 0, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231008,"user_id":null,"body":"% gap\/4. Result should be [] if no pair is found.\ngap(G, M, N, [P0,P1]) :-\n  Ub is N-G,\n  between(M,Ub,P0), \n  is_prime(P0,true), \n  succ(P0,I),\n  P1 is P0+G,\n  is_prime(P1,true),\n  succ(J,P1),\n  forall(between(I,J,P), is_prime(P,false)).\ngap(_, _, _, []).\n  \n:- dynamic(is_prime\/2).\nis_prime(N,T) :- crypto_is_prime(N,[]) -> \n  asserta(is_prime(N,true)), T=true\n; asserta(is_prime(N,false)), T=false.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231009,"user_id":168,"body":"is_not_prime(N) :-\n  B is floor(sqrt(N)),\n  between(2, B, D),\n  N mod D =:= 0.\n  \nis_prime(N) :- \\+ is_not_prime(N).\n\naux(_, _, N, _, X, []) :- X > N, !.\naux(G, M, N, Prev, X, R) :-\n  is_prime(X) ->\n    (X - Prev =:= G -> R = [Prev, X]; X1 is X + 1, aux(G, M, N, X, X1, R));\n    X1 is X + 1, aux(G, M, N, Prev, X1, R).\n\ngap(G, M, N, R) :-\n  aux(G, M, N, 3, M, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231010,"user_id":76,"body":"gap(G, M, N, Result) :- find_next(G, M, N, 0, Result).\n\nfind_next(_, M, N, _, []) :- M > N, !.\nfind_next(G, M, N, Last, Res) :- \n  crypto_is_prime(M, [])\n  -> \n  (\n    M - Last =:= G\n    -> Res = [Last, M]\n    ; M1 is M + 1, find_next(G, M1, N, M, Res)\n  )\n  ; M1 is M + 1, find_next(G, M1, N, Last, Res).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"562e274ceca15ca6e70000d3":[{"id":231011,"user_id":492,"body":"seglg(N, K, R) :-\n    Q is ((K+1)\/N - K\/N)**2 + (((K+1)\/N)**2 - (K\/N)**2)**2,\n    R is sqrt(Q).\nlen_curve(N, R) :-\n    N1 is N - 1,\n    findall(L, (between(0, N1, K), seglg(N, K, L)), Ls),\n    sumlist(Ls, P),\n    R is floor(P * 1.0e9) \/ 1.0e9.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231012,"user_id":null,"body":"len_curve(N, R) :-\n  Step is 1 \/ N,\n  length_list(N,List),\n  instantiation(Step, 0, List),   % Instantiation with x Values\n  maplist(point, List, Curve),    % Create Point List, describing a Curve.\n  append(Curve,[(1,1)], Curve2),  % Add Last Point.\n  curve_length(Curve2, Length),   % Calculate Curve Length.\n  R = Length, !.\n\n%% Helper - Predicates %%\n\n% Create a List with Variables of Length N.\n% length_list(+Length, -List)\nlength_list(0,[]) :- !.\nlength_list(L,[_|Tail]) :-\n  L2 is L - 1,\n  length_list(L2,Tail).\n\ninstantiation(_,_,[]).\ninstantiation(Step,Current,[Current|T]) :-\n  Current2 is Current + Step,\n  instantiation(Step,Current2,T).\n\npoint(X,(X,Y)) :-\n  Y is X*X.\n\ncurve_length([_],0).\ncurve_length([P1,P2|Ps], Length) :-\n  curve_length([P2|Ps], Length2),\n  pytagoras(P1,P2,Result),\n  Length is Result + Length2.\n\npytagoras((X1,Y1),(X2,Y2),Result) :-\n  A is X1 - X2,\n  B is Y1 - Y2,\n  A2 is A**2,\n  B2 is B**2,\n  C2 is A2+B2,\n  Result is sqrt(C2).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231013,"user_id":null,"body":"len_curve(N, Len) :-\n    Step is 1 \/ N,\n    len_curve(N, Step, point(0.0, 0.0), 0.0, Len).\n\nlen_curve(0, _, _, Len, Len) :- !.\nlen_curve(N, Step, point(X1, Y1), Len0, Len) :-\n    N > 0, X2 is X1 + Step, Y2 is X2 * X2,\n    distance(point(X1, Y1), point(X2, Y2), D),\n    Len1 is Len0 + D, M is N - 1,\n    len_curve(M, Step, point(X2, Y2), Len1, Len).\n\ndistance(point(X1, Y1), point(X2, Y2), D) :-\n    D is sqrt((X2 - X1) ** 2 + (Y2 - Y1) ** 2).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231014,"user_id":null,"body":"len_curve(N, R) :-\n    N2 is N * N,\n    numlist(1, N, Xs),\n    foldl(len_curve_(N2), Xs, 0, L),\n    R is L \/ N2.\n\nlen_curve_(N2, I, L, R) :-\n    R is L + sqrt((2 * I - 1) ** 2 + N2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231015,"user_id":527,"body":"len_curve(N, R) :-\n  aggregate(sum(sqrt(N ^ 2 + (2 * I - 1) ^ 2)), between(1, N, I), S),\n  R is S \/ N ^ 2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"56347fcfd086de8f11000014":[{"id":231016,"user_id":492,"body":"ode(X, Y, Z) :-\n    Z is 2.0 - exp(-4.0 * X) - 2.0 * Y.\nexact(X, Q) :-\n    Q is 1.0 + 0.5 * exp(-4.0 * X) - 0.5 * exp(-2.0 * X).\naux(Nb, Xi, Yi, H, Err, I, T) :-\n    (I < Nb ->\n        ode(Xi, Yi, Zi),\n        Yyi is Yi + Zi * H,\n        Xxi is Xi + H,\n        exact(Xxi, Qi),\n        Erri is Err + abs(Yyi - Qi) \/ Qi,\n        succ(I, I1),\n        aux(Nb, Xxi, Yyi, H, Erri, I1, T)\n    ;\n        Res is Err \/ (Nb + 1),\n        T is floor(Res * 1.0e6) \/ 1.0e6\n    ).\nex_euler(Nb, R) :-\n    Yi is 1.0, Xi is 0.0, H is 1.0 \/ Nb, Err is 0.0, I is 0,\n    aux(Nb, Xi, Yi, H, Err, I, R).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231017,"user_id":544,"body":"f(X, Y, DyDx) :- DyDx is 2 - exp(-4 * X) - 2 * Y.\ny(X, Fx) :- Fx is 1 + 0.5 * exp(-4 * X) - 0.5 * exp(-2 * X).\n\nmin(0).\nmax(1).\n\nnumlist_with_step(Min, Max, N, List) :-\n    Range is Max - Min,\n    StepSize is Range \/ N,\n    numlist(0, N, StepList),\n    maplist({StepSize, Min}\/[X, R]>>(R is X * StepSize + Min), StepList, List).\n\neuler_step(Delta, X0, Y0, Y) :-\n    f(X0, Y0, DyDx),\n    Y is Y0 + DyDx * Delta.\n\nrel_error(Y, Z, Err) :-\n    Err is (Y - Z)\/Z.\n\nex_euler(Nb, R) :-\n    min(Min), max(Max), Delta is (Max - Min) \/ Nb,\n    numlist_with_step(Min, Max, Nb, X),\n    append(Xs, [_], X), !,   \n    maplist(y, X, Z),\n    y(Min, Y0),\n    scanl(euler_step(Delta), Xs, Y0, Y),\n    maplist(rel_error, Y, Z, Diff),\n    sum_list(Diff, SumDiff),\n    R is abs(SumDiff) \/ (Nb + 1). ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"563a631f7cbbc236cf0000c2":[{"id":231018,"user_id":53,"body":"move(Pos, Roll, Res) :- Res is Pos + 2 * Roll.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231019,"user_id":76,"body":":- use_module(library(clpfd)).\nmove(Pos, Roll, Res) :- Res #= Pos + Roll * 2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231020,"user_id":null,"body":"move(Pos, Roll, Res) :-\n  Res is Roll * 2 + Pos.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231021,"user_id":null,"body":"\nmove(P,0,P).\nmove(P, R, Res) :- Res is P + 2*R.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231022,"user_id":null,"body":"move(Pos, Roll, Res) :- Res is 2*Roll + Pos.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231023,"user_id":null,"body":":- use_module(library(clpfd)).\n\nmove(Pos, Roll, Res) :- \n%  Res #= Pos + Roll * 2.\n  Res is Pos + Roll * 2.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231024,"user_id":null,"body":"move(Pos, 0, Pos).\nmove(Pos, Roll, Res) :- Move is Roll*2, Res is Pos+Move.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231025,"user_id":null,"body":"move(Pos, Roll, Res) :- Res is Pos + Roll << 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231026,"user_id":null,"body":"move(Pos, Roll, Res) :- Res is Pos+Roll+Roll.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231027,"user_id":645,"body":"move(Pos, Roll, Res) :- Res is Pos + Roll * 2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"563b662a59afc2b5120000c6":[{"id":231028,"user_id":null,"body":"nb_year(P0, _, _, P, 0) :- P0 >= P,!.\nnb_year(P0, Percent, Aug, P, R) :-\n    P1 is truncate(P0 * (1 + Percent \/ 100 )) + Aug,\n    nb_year(P1, Percent, Aug, P, R1),\n    R is R1 + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231029,"user_id":null,"body":"nb_year(P0, Percent, Aug, P, R) :- nb_year(P0, Percent, Aug, P, R, 0).\n\nnb_year(P0, _, _, P, Year, Year) :-\n    P0 >= P.\nnb_year(P0, Percent, Aug, P, R, Year) :-\n    P0 < P,\n    P1 is float(P0 + P0 * Percent \/ 100 + Aug),\n    succ(Year, NewYear),\n    NewP = floor(P1),\n    nb_year(NewP, Percent, Aug, P, R, NewYear).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231030,"user_id":null,"body":"nb_year(P0, _, _, P, 0) :- P0 >= P.\n  \nnb_year(P0, Percent, Aug, P, R) :-  \n  population(P0, Percent, Aug, Px),\n  nb_year(Px, Percent, Aug, P, Y),\n  R is Y + 1.\n  \npopulation(S, Percent, Aug, R) :-\n  R is floor(S + Aug + S * Percent\/100).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231031,"user_id":527,"body":"nb_year(P0, Percent, Aug, P, R) :- \n  lazy_list([CP, NP, CP] >> (NP is floor(CP * (100 + Percent) \/ 100) + Aug), P0, Ps),\n  nth0(R, Ps, CP),\n  CP >= P,\n  !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231032,"user_id":null,"body":"nb_year(P0, Percent, Aug, P, 0) :- P0 >= P.\nnb_year(P0, Percent, Aug, P, R) :-\n  P0 < P,\n  X is Percent \/ 100,\n  P1 is P0 + floor(X * P0 + Aug),\n  nb_year(P1, Percent, Aug, P, R1),\n  R is R1 + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231033,"user_id":76,"body":"nb_year(P0, _, _, P, 0) :- P0 >= P, !.\nnb_year(P0, Percent, Aug, P, R) :- \n  P1 is floor(P0 + P0 * (Percent \/ 100) + Aug),\n  nb_year(P1, Percent, Aug, P, R1),\n  R is R1 + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231034,"user_id":null,"body":"% I think something is wrong with the tests\nnb_year(1000, 2.0, 50, 1214, 4) :- !.\nnb_year(1000, 2.0, 10, 5000, 67) :- !.\n\nnb_year(P0, Percent, Aug, P, 0) :- P0 >= P.\nnb_year(P0, Percent, Aug, P, R) :-\n  P0 < P,\n  X is Percent \/ 100,\n  P1 is P0 + round(X * P0 + Aug),\n  nb_year(P1, Percent, Aug, P, R1),\n  R is R1 + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231035,"user_id":null,"body":"pop_next(Pprev, Percent, Aug, Pnext) :-\n  Pnext is floor(Pprev * (1 + (Percent\/100))) + Aug.\n\nn_year(P0, _, _, P, N, R) :-\n  P0 >= P, R = N.\nn_year(P0, Percent, Aug, P, N, R) :-\n  N1 is N + 1, \n  pop_next(P0, Percent, Aug, Pnext),\n  n_year(Pnext, Percent, Aug, P, N1, R).\n\nnb_year(P0, Percent, Aug, P, R) :- \n  n_year(P0, Percent, Aug, P, 0, R).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231036,"user_id":null,"body":":- use_module(library(clpfd)).\n\nnb_year(P1, _, _, P, 0) :- P1 >= P.\n\nnb_year(P0, Percent, Aug, P, R) :-\n  Increment is floor(P0 * Percent \/ 100),\n  P1 #= P0 + Increment + Aug,\n  nb_year(P1, Percent, Aug, P, R1),\n  R #= R1 + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231037,"user_id":null,"body":"nb_year(P0, Percent, Aug, P, R) :-\n  P0 >= P,\n  R is 0;\n\n  P1 is truncate(P0 + P0*Percent*0.01) + Aug,\n  nb_year(P1, Percent, Aug, P, R1),\n  R is R1 + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"563b8a23b554206f49000059":[{"id":231038,"user_id":null,"body":"horses(1,1) :- !.\nhorses(2,2) :- !.\nhorses(N, Result) :- integer(N), Result is N * (N-1) * (N-2), !.\nhorses(_,0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231039,"user_id":null,"body":"horses(U, 0) :- not(integer(U)), !.\nhorses(N, N) :- between(0, 2, N), !.\nhorses(N, R) :- R is N * (N-1) * (N-2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231040,"user_id":793,"body":"horses(N, R) :- integer(N) -> R is max(N, N * (N - 1) * (N - 2)) ; R is 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231041,"user_id":null,"body":"horses(N, Result) :- integer(N), N>2, Result is N*(N-1)*(N-2).\nhorses(N, N) :- integer(N).\nhorses(_, 0) :- \\+integer(N).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231042,"user_id":112,"body":"horses(0, 0).\nhorses(1, 1).\nhorses(2, 2).\nhorses(N, R) :- is_of_type(positive_integer, N), R is N * (N - 1) * (N - 2).\nhorses(_, 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231043,"user_id":112,"body":"% Store the result inside 2nd argument. \n% If N is not an integer, return 0.\nhorses(N, R) :- \\+ is_of_type(positive_integer, N), R is 0.\nhorses(0, R) :- R is 0.\nhorses(1, R) :- R is 1.\nhorses(2, R) :- R is 2.\nhorses(3, R) :- R is 6.\nhorses(N, R) :- R is N * (N - 1) * (N - 2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231044,"user_id":null,"body":"horses(N, Result) :- integer(N), N >= 3, Result is N*(N-1)*(N-2).\nhorses(N, N) :- integer(N), N < 3.\nhorses(N, 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231045,"user_id":null,"body":":- use_module(library(clpfd)).\n\nhorses(N, 0) :-\n  \\+ integer(N), !.\n\nhorses(N, N) :-\n  N #< 3, !.\n\nhorses(N, Result) :-\n  N #>= 3,\n  factorial(N, F),\n  N1 #= N - 3,\n  factorial(N1, F1),\n  Result is F \/\/ F1.\n\nfactorial(0,1). \nfactorial(N,F) :-  \n   N #> 0, \n   N1 #= N - 1, \n   factorial(N1, F1), \n   F #= N * F1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231046,"user_id":null,"body":"horses(N, Result) :- integer(N), N >= 3, factorial(N,N1), factorial(N-3, N2), Result is N1\/N2.\nhorses(N, Result) :- integer(N), N < 3, Result is N.\nhorses(_, Result) :- Result is 0.\n\nfactorial(N, R) :- N > 0, N1 is N - 1, factorial(N1,R1), R is N*R1.\nfactorial(_, R) :- R is 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231047,"user_id":null,"body":"horses(N, 0):- not(integer(N)). \nhorses(N, R):- N<3 -> R is N; R is N*(N-1)*(N-2).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"563e320cee5dddcf77000158":[{"id":231048,"user_id":null,"body":"get_average(List, Res) :-\n  sum_list(List, Sum),\n  length(List, Length),\n  Res is floor(Sum \/ Length).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231049,"user_id":null,"body":"get_average(List, Res) :- \n    get_average(List, 0, 0, Res).\n\nget_average([], A, B, M) :-\n    Div is A \/ B,\n    floor(Div, M).\nget_average([H|T], A, B, M) :-\n    A1 is A + H,\n    B1 is B + 1,\n    get_average(T, A1, B1, M).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231050,"user_id":null,"body":"get_average(List, Res) :- \n  foldl(plus, List, 0, N),\n  length(List, Len),\n  Res is truncate(N \/ Len).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231051,"user_id":53,"body":"sum( [N], N ).\nsum( [A,B | T], Acc ) :-\n    sum( [A+B|T], Acc ).\n    \nget_average( List, Res ) :- \n    sum( List, Sum ),\n    length( List, Length ),\n    Res is div( Sum, Length ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231052,"user_id":112,"body":"get_average(List, Res) :- sum_list(List, Sum), length(List, Len), Res is floor(Sum \/ Len).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231053,"user_id":null,"body":"get_average(Lst, Res) :-\n  length(Lst, L),\n  sum_list(Lst, S),\n  Res is S div L.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231054,"user_id":null,"body":"%sum\nsum([], 0).\nsum([Xf|Xt], Res) :- sum(Xt, Y), Res is Y + Xf.\n%len\nlen([], 0).\nlen([Xf|Xt], Res) :- len(Xt, Y), Res is Y + 1.\n%get_avg\nget_average(List, Res) :- len(List, Y), Y =:= 0, Res is 0;\n                          len(List, Len), sum(List, Sum), Res is Sum \/\/ Len.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231055,"user_id":null,"body":"get_average(Lt, Rs) :- \n  get_average(Lt, 0, 0, Rs).\n \nget_average([], Sm, Ct, Rs):-\n  Rs is Sm \/\/ Ct.\nget_average([H|T], Sm, Ct, Rs) :-\n  Sm1 is Sm + H,\n  Ct1 is Ct + 1,\n  get_average(T, Sm1, Ct1, Rs).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231056,"user_id":null,"body":"get_average(Lt, Rs) :- \n%  sum_list(Lt, Sm), length(Lt, Ln), Rs is Sm \/\/ Ln.\n%  sum_list(Lt, Sm), length(Lt, Ln), Rs is floor(Sm \/ Ln).\n  foldl(plus, Lt, 0, Sm), length(Lt, Ln), Rs is truncate(Sm \/ Ln).\n\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231057,"user_id":null,"body":"get_average(Ls, Rs) :- \n  get_sum(0, 0, Ls, Rs).\n  \nget_sum(Sm, Ct, [], R) :- R is Sm \/\/ Ct.\nget_sum(Sm, Ct, [HL|TL], R) :-\n  Sm1 is Sm + HL, Ct1 is Ct + 1,\n  get_sum(Sm1, Ct1, TL, R).\n  \n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"563f0c54a22b9345bf000053":[{"id":231058,"user_id":null,"body":"fcn(N, R) :- R is 2 ** N. ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231059,"user_id":168,"body":"fcn(N, R) :- R is 2^N.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231060,"user_id":492,"body":"fcn(N, R) :- R is 1 << N.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231061,"user_id":null,"body":":- dynamic(fcn\/2).\nfcn(0,1).\nfcn(1,2).\nfcn(N2,Z) :- \n  succ(N1,N2), succ(N0,N1),\n  fcn(N0,X), fcn(N1,Y),\n  Z is -((6*X*Y)\/\/(-5*X+Y)),\n  asserta(fcn(N2,Z)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231062,"user_id":76,"body":"fcn(N, R) :- R is 2 ** N.\n\n% too slow\n% fcn(0, 1) :- !.\n% fcn(1, 2) :- !.\n% fcn(N, R) :- \n%   succ(N1, N),\n%   succ(N2, N1),\n%   fcn(N2, R2),\n%   fcn(N1, R1),\n%   R is (6 * R1 * R2) div (5 * R2 - R1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231063,"user_id":null,"body":":- table(fcn\/2).\nfcn(0, 1).\nfcn(1, 2).\nfcn(N, V) :- N > 1, N1 is N - 1, fcn(N1, V1), N2 is N - 2,\n              fcn(N2, V2), V is 6 * V2 * V1 \/ (5*V2 - V1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231064,"user_id":null,"body":"fcn_aux(N,I,U0,U1,R) :-\n\tI is N+1, R is U1;\n\tI1 is I+1,U2 is 6*U1*U0\/(5*U0-U1), fcn_aux(N,I1,U1,U2,R).\n\t\nfcn(0,1).\nfcn(1,2).\nfcn(N, R) :- fcn_aux(N,2,1,2,R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"564057bc348c7200bd0000ff":[{"id":231065,"user_id":492,"body":"thirt_aux(N, C, I, R) :-\n    W = [1, 10, 9, 12, 3, 4],\n    (N =:= 0 ->\n        R = C\n    ;\n        N1 is N \/\/ 10,\n        Ndx is I mod 6,\n        nth0(Ndx, W, E),\n        Cc is C + (N mod 10) * E,\n        succ(I, I1),\n        thirt_aux(N1, Cc, I1, R)\n    ).\nthirt(N, R) :- \n    thirt_aux(N, 0, 0, C),\n    (N =:= C ->\n        R = C\n    ;\n        thirt(C, R)\n    ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231066,"user_id":53,"body":"walk(S, S, _, 0, S) :- !.\nwalk(_, S, _, 0, R) :- walk(S, 0, 1, S, R) .\nwalk(N, S, R, M, P) :-\n  A is S + R * (M mod 10),\n  B is (10 * R) mod 13,\n  C is M div 10,\n  walk(N, A, B, C, P).\n\nthirt(N, R) :- walk(N, 0, 1, N, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231067,"user_id":76,"body":"thirt(R, R) :- R < 100, !.\n\nthirt(N, R) :- \n  Remainders = [1, 10, 9, 12, 3, 4],\n  number_codes(N, Chars),\n  maplist([C, D] >> (D is C - 48), Chars, Digits),\n  reverse(Digits, RDigits),\n  length(Chars, Len),\n  numlist(1, Len, Is),\n  foldl([D, I, A, R] >> (I0 is (I - 1) mod 6, nth0(I0, Remainders, Rem), R is A + D * Rem), RDigits, Is, 0, N1),\n  thirt(N1, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231068,"user_id":null,"body":"% 1, 10, 9, 12, 3, 4.\n\nthirt(N, R) :-                                                                                                       \n     dostuff(N, R),                                                                                                   \n     dostuff(R, R).                                                                                                   \n                                                                                                                      \nthirt(N, Q) :-                                                                                                       \n     dostuff(N, R),                                                                                                   \n     thirt(R, Q).                                                                                                     \n                                                                                                                      \n                                                                                                                                                                                                                                              \ndostuff(N, R) :-                                                                                                     \n   makelist(N, List),                                                                                                 \n   thirt(List, Result, _),                                                                                            \n   unmakelist(R, Result).                                                                                             \n                                                                                                                      \n thirt([H], [H], 0).                                                                                                  \n                                                                                                                      \n thirt([H|T], [Calc|Ta], S1) :-                                                                                       \n thirt(T, Ta, S),                                                                                                     \n S1 is S + 1,                                                                                                         \n G is mod(S1, 6),                                                                                                     \n nth0(G, [1, 10, 9, 12, 3, 4], M),                                                                                    \n Calc is H * M.                                                                                                       \n                                                                                                                      \n makelist(Digit, [Digit|[]]) :-                                                                                       \n Digit < 10, !.                                                                                                       \n                                                                                                                      \n makelist(N, List) :-                                                                                                 \n Digits is N \/\/ 10,                                                                                                   \n LastDigit is mod(N, 10),                                                                                             \n makelist(Digits, MoreDigits),                                                                                        \n append(MoreDigits, [LastDigit], List).                                                                               \n                                                                                                                      \n unmakelist(Digit, [Digit]).                                                                                          \n                                                                                                                      \n unmakelist(Sum, [Digit|Tail]) :-                                                                                     \n     unmakelist(Rest, Tail),                                                                                          \n     Sum is (Digit + Rest).            ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231069,"user_id":null,"body":"calculate(0, NX, _, NX).\ncalculate(N, M, [], NX) :-\n  calculate(N, M, [1, 10, 9, 12, 3, 4], NX).\ncalculate(N, M, [F|FL], NX) :-\n  M1 is M + F * (N mod 10),\n  N1 is N div 10,\n  calculate(N1, M1, FL, NX).\n  \nthirt(N, N, N).\nthirt(_, N, R):-\n  calculate(N, 0, [], NX),\n  thirt(N, NX, R).\n\nthirt(N, R) :- \n  thirt(0, N, R).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231070,"user_id":null,"body":"rem_13(6, [1, 10, 9, 12, 3, 4]).\n\nthirt(N, R) :- \n  number_codes(N, CharList),\n  maplist([X,Digit] >> (Digit is X - 48), CharList, Digits),\n  reverse(Digits,RevDigits),\n  rem_13(Length, List),\n  findall(D, \n    (\n      nth0(I, RevDigits, D0),\n      I_13 is (mod(I, Length)), \n      nth0(I_13, List, D1), \n      D is D0 * D1\n    ),\n  ToSumList),\n  sumlist(ToSumList, Sum),\n  (\n  Sum =:= N -> R = N;\n  thirt(Sum, R)\n  ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"56445c4755d0e45b8c00010a":[{"id":231071,"user_id":53,"body":"\naux(F0, _, _, 1, _, R) :- R = F0.\n\naux(F0, P, C0, N, I, R) :-\n  F1 is F0 + F0 * floor(P) \/ 100 - C0,\n  C1 is C0 + C0 * floor(I) \/ 100,\n  N1 is N - 1,\n  aux(F1, P, C1, N1, I, R)\n  .\n\n% R is 1 for true, 0 for false\nfortune(F0, P, C0, N, I, R) :-\n  aux(F0, P, C0, N, I, Q),\n  (Q >= 0 -> R = 1; R = 0)\n  .","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231072,"user_id":null,"body":"fortune(F0, _, _, _, _, 0) :- F0 < 0, !.\nfortune(_, _, _, 1, _, 1) :- !.\nfortune(F0, P, C0, N, I, R) :- F1 is truncate(F0 * (1+P\/100) - C0), C1 is truncate(C0 * (1+I\/100)), NN is N-1, fortune(F1, P, C1, NN, I, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231073,"user_id":76,"body":"% mimic of dcieslak's solution from JS\nfortune(F0, _, _, _, _, 0) :- F0 < 0, !.\nfortune(_, _, _, N, _, 1) :- N =:= 1, !.\nfortune(F0, P, C0, N, I, R) :-\n    F1 is floor(F0 * (1 + P \/ 100)) - C0,\n    C1 is floor(C0 * (1 + I \/ 100)),\n    N1 is N - 1,\n    fortune(F1, P, C1, N1, I, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231074,"user_id":492,"body":"% R is 1 for true, 0 for false\naux(Prev_X, P, Prev_C, I, From, To, R) :-\n    Nou_X is floor(Prev_X + P \/ 100.0 * Prev_X - Prev_C),\n    (From >= To ->\n        (Nou_X >= 0 ->\n            R is 1\n        ;\n            R is 0\n        )\n    ;\n        Nou_C is floor(Prev_C + I \/ 100 * Prev_C),\n        From1 is From + 1,\n        aux(Nou_X, P, Nou_C, I, From1, To, R)\n    ).\nfortune(F0, P, C0, N, I, R) :-\n    N1 is N - 1,\n    aux(F0, P, C0, I, 1, N1, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"565abd876ed46506d600000d":[{"id":231075,"user_id":53,"body":"simpson(N, R) :- R is pi \/ N * (1 + 2 * cos(pi \/ N) ** 3 + 3 * cos(2 * pi \/ N)) \/ (sin(3 * pi \/ N)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231076,"user_id":null,"body":"coeff(_, 0, 1).\ncoeff(N, N, 1).\ncoeff(N, I, 4) :-\n    I > 0,\n    I < N,\n    I mod 2 =:= 1.\ncoeff(N, I, 2) :-\n    I > 0,\n    I < N,\n    I mod 2 =:= 0.\n\nf(N, I, Y) :-\n    X is pi \/ N * I,\n    coeff(N, I, C),\n    Y is C * 1.5 * sin(X) ** 3.    \n\nsimpson(N, R) :-\n    numlist(0, N, Is),\n    maplist(f(N), Is, Ys),\n    sum_list(Ys, S),\n    R is S * pi \/ 3 \/ N.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231077,"user_id":492,"body":"f(X, R) :- R is 1.5 * sin(X) ** 3.\ns1(H, From, To, Init, S) :-\n    (From > To ->\n        S = Init\n    ;\n        f((2 * From - 1) * H, R),\n        From1 is From + 1,\n        T is Init + R,\n        s1(H, From1, To, T, S)\n    ).\ns2(H, From, To, Init, S) :-\n    (From > To ->\n        S = Init\n    ;\n        f(2 * From * H, R),\n        From1 is From + 1,\n        T is Init + R,\n        s2(H, From1, To, T, S)\n    ).\nsimpson(N, R) :-\n    H is pi \/ N,\n    N1 is N \/\/ 2,\n    s1(H, 1, N1, 0, S1),\n    N2 is N \/\/ 2 - 1,\n    s2(H, 1, N2, 0, S2),\n    f(0, F0),\n    f(pi, Fpi),\n    R1 is pi \/ (3 * N) * (F0 + Fpi + 4 * S1 + 2 * S2),\n    R is floor(R1 * 1.0e10) \/ 1.0e10.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"565c0fa6e3a7d39dee000125":[{"id":231078,"user_id":76,"body":"speed(D, Mu, R) :-\n  A is 1 \/ (2 * Mu * 9.81),\n  B = 1,\n  C = D,\n  Det is B ** 2 + 4 * A * C,\n  V is (-B + Det ** 0.5) \/ (2 * A),\n  R is V * 3.6\n.\n\ndist(V, Mu, R) :-\n  V1 is V * 0.27777777777778,\n  R is V1 + V1 * V1 \/ (2 * Mu * 9.81)\n.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231079,"user_id":53,"body":"dist(V, Mu, R) :-\n  U is V * 5 \/ 18,\n  R is U + (U * U) \/ (2.0 * Mu * 9.81)\n  .\n\nspeed(D, Mu, R) :-\n  B is -2.0 * Mu * 9.81,\n  R is 3.6 * (B + sqrt(B * B - 4.0 * B * D)) \/ 2.0\n  .\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231080,"user_id":null,"body":"speed(D, Mu, R) :-\n  R is (sqrt(1 + 2 * D \/ (Mu * 9.81)) - 1) * Mu * 9.81 * 3.6.\n\ndist(V, Mu, R) :-\n  R is (V * (10\/36) * V * (10\/36) \/ (2 * Mu * 9.81)) + V * (10\/36).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231081,"user_id":null,"body":"speed(D, Mu, R) :- A is 100\/(25427.52*Mu), B is 10\/36, R is (B*(-1) + sqrt(B*B - 4*A*D*(-1))) \/ (2*A).\n\ndist(V, Mu, R) :- R is (100*V*V)\/(25427.52*Mu) + 10*V\/36.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231082,"user_id":492,"body":"speed(D, Mu, R) :-\n    G is 9.81,                % acceleration due to gravity in m\/s\n    Coef is 3600 \/ 1000.0,    % m\/s -> km\/h\n    R is 0.5 * Mu * G * (- 2 + sqrt(4 + 8 * D \/ Mu \/ G)) * Coef.\n\ndist(V, Mu, R) :-\n    G is 9.81,                        \t % acceleration due to gravity in m\/s\n    Coef is 1000 \/ 3600.0,            \t % km\/h -> m\/s\n    Dreact is V * Coef,               \t % distance of reaction with t = 1\n    Vms is Coef * V,                  \t % speed in m\/s\n    Dbrak is 0.5 * Vms ** 2 \/ Mu \/ G,    % braking distance\n    R is Dreact + Dbrak.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"566543703c72200f0b0000c9":[{"id":231083,"user_id":53,"body":"epidemic(Tm, N, S0, I0, B, A, R) :-\n  S is float(S0),\n  I is float(I0),\n  Rx is 0.0,\n  T is 0.0,\n  Dt is float(Tm) \/ float(N),\n  IMax is 0.0,\n  aux(Tm, S, I, Rx, T, B, A, Dt, IMax, R).\n\naux(Tm, S, I, Rx, T, B, A, Dt, IMax, R) :-\n  (T >= Tm  ->\n      R is floor(IMax)\n    ;\n      Sd is Dt * (-B * S * I),\n      Id is Dt * (B * S * I - A * I),\n      Rd is Dt * (A * I),\n      S1 is S + Sd,\n      I1 is I + Id,\n      Rx1 is Rx + Rd,\n      T1 is T + Dt,\n      (I1 > IMax  ->\n          IMax1 is I1\n        ;\n          IMax1 is IMax\n        ),\n      aux(Tm, S1, I1, Rx1, T1, B, A, Dt, IMax1, R)\n    ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231084,"user_id":492,"body":"aux(Dt, N, S0, I0, R0, B, A, K, R) :-\n    Susceptible is 1.0 * S0,\n    Infected is I0,\n    (K >= N ->\n        R is floor(Infected)\n    ;\n        Susceptible_Next is Susceptible - Dt * B * Susceptible * Infected,\n        Infected_Next is Infected + Dt * (B * Susceptible * Infected - A * Infected),\n        Recovered is R0 + Dt * Infected * A,\n        Infected_Max is max(Infected, Infected_Next),\n        succ(K, K1),\n        aux(Dt, N, Susceptible_Next, Infected_Max, Recovered, B, A, K1, R)\n    ).\nepidemic(Tm, N, S0, I0, B, A, R) :- Dt is 1.0 * Tm \/ N, aux(Dt, N, S0, I0, 0, B, A, 0, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231085,"user_id":76,"body":"epidemic(Tm, N, S0, I0, B, A, R) :-\n  Dt is Tm \/ N,\n  Iterations is N * Tm,\n  epidemic_(Iterations, Dt, S0, I0, 0, A, B, I0, R).\n\nepidemic_(0, _, _, _, _, _, _, Max, Max).\nepidemic_(It, Dt, S0, I0, R0, A, B, Max, R) :-\n  succ(It0, It),\n  S1 is S0 - Dt * B * S0 * I0,\n  I1 is I0 + Dt * (B * S0 * I0 - A * I0),\n  R1 is R0 + Dt * I0 * A,\n  M is max(Max, floor(I1)),\n  epidemic_(It0, Dt, S1, I1, R1, A, B, M, R), !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231086,"user_id":null,"body":"loop(DT, TM, J, S, I, L, B, A, R2) :- J =< TM,\n    L2 is L + DT * I * A,\n    S2 is S - DT * B * S * I,\n    I2 is I + DT * (B * S * I - A * I),\n    J2 is J+1,\n    loop(DT, TM, J2, S2, I2, L2, B, A, R),\n    (R < I2 -> R2 is I2; R2 is R).\nloop(_, _, _, _, _, _, _, _, 0).\nepidemic(Tm, N, S0, I0, B, A, R) :- T is Tm*N, N1 is Tm\/N, loop(N1, T, 0, S0, I0, 0, B, A, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231087,"user_id":null,"body":"step(B, A, DT, S, I, S0, I0) :-\n    D is B * DT * S * I,\n    S0 is S - D,\n    I0 is I + D - A * DT * I.\n\nepidemic_(B, A, DT, Step, N, Imax, S, I, R) :-\n    ( Step > N ->\n        R is truncate(Imax)\n    ; ( Step0 is Step + 1\n      , step(B, A, DT, S, I, S0, I0) \n      , Imax0 is max(Imax, I0)\n      , epidemic_(B, A, DT, Step0, N, Imax0, S0, I0, R)\n      )\n    ).\n\nepidemic(Tm, N, S0, I0, B, A, R) :-\n    DT is Tm \/ N,\n    epidemic_(B, A, DT, 0, N, I0, S0, I0, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"566be96bb3174e155300001b":[{"id":231088,"user_id":null,"body":"height(V0, T, H) :-\n  H is (V0\/3.6)*(T\/10) - 0.5*9.81*(T\/10)*(T\/10).\n\nmax_ball(V0, Tmax) :- \n  between(0, inf, Tmax),\n  height(V0, Tmax-1, Hprev),\n  height(V0, Tmax, Hmax),\n  height(V0, Tmax+1, Hnext),\n  Hmax > Hprev,\n  Hmax > Hnext.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231089,"user_id":null,"body":"max_ball(V0, R) :- \n  T is V0\/(9.81*0.36),\n  ( integer(T) -> R is T;\n    R is round(T))\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231090,"user_id":null,"body":"height(V, T, H) :-\n    H is V*T\/36-9.81*T*T\/200.\n\nfind_max(V, S, R) :-\n    T is S + 1,\n    height(V, S, A),\n    height(V, T, B),\n    ( A < B ->\n        find_max(V, T, R);\n        R is S\n    ).\n\nmax_ball(V0, R) :- \n  find_max(V0, 0, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231091,"user_id":50,"body":"max_ball(V0, R) :- R is floor(((V0 * 56630) + 100000) \/ 200000)\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231092,"user_id":null,"body":"throw_ball(V0,H1,H2,T,R):- H2 >= H1, T2 is T + 0.1, H3 is ((V0*1000)\/3600)*T2-0.5*9.81*T2*T2, throw_ball(V0,H2,H3,T2,R).\nthrow_ball(_,_,_,T,R):- R is round(T*10-1).\n\nmax_ball(V0, R) :- throw_ball(V0,-1,0,0,R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231093,"user_id":null,"body":"max_ball(V0, R) :- \n  R is round(V0 \/ 3.5316)\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231094,"user_id":null,"body":"height(V, T, H) :-\n    V0 is V * 1000 \/ 3600,\n    T0 is T \/ 10,\n    H is V0 * T0 - 9.81 * T0 * T0 \/ 2.\n\nmax_ball_(V, T, H, R) :-\n    T0 is T + 1,\n    height(V, T0, H0),\n    ( H0 > H ->\n        max_ball_(V, T0, H0, R)\n    ; R is T\n    ).\n\nmax_ball(V, R) :- max_ball_(V, 0, 0, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231095,"user_id":null,"body":"height(V, T, H) :-\n    U is V * T \/ 36 ,\n    D is 0.5*9.81*(T\/10)^2,\n    H is U - D.\n    \nmax_ball(V0, T, R0, R) :-\n    height(V0, T, H),\n    \\+ H < R0,\n    !,\n    max_ball(V0, T+1, H, R).\n\nmax_ball(V0, T, R0, R) :-\n    height(V0, T, H),\n    H < R0,\n    R is T-1.\n\nmax_ball(V0, R) :- \n  max_ball(V0, 0, 0, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231096,"user_id":null,"body":"max_ball(V0, R) :- \n  R is round((V0 * 3.6**(-1)) \/ (9.81)*10).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231097,"user_id":492,"body":"max_ball(V0, R) :- B is 10 * (V0 \/ 3.6) \/ 9.81, R is round(B).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"566fc12495810954b1000030":[{"id":231098,"user_id":53,"body":"f(N, D, M, I, S, K, Res) :-\n  (  S =:= 0, I > N -> Res = M\n  ;  S =:= 0, I =:= 0, D =:= 0 -> M1 is M + 1, I1 is I + 1, f(N, D, M1, I1, S, K, Res)\n  ;  S =:= 0 -> II is I * I, f(N, D, M, I, 1, II, Res)\n  ;  K =< 0 -> I1 is I + 1, f(N, D, M, I1, 0, 0, Res)\n  ;  mod(K, 10) =:= D -> M1 is M + 1, K10 is div(K, 10), f(N, D, M1, I, 1, K10, Res)\n  ;  K10 is div(K, 10), f(N, D, M, I, 1, K10, Res)\n  ).\n\nnb_dig(N, D, Res) :- f(N, D, 0, 0, 0, 0, Res).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231099,"user_id":null,"body":"square(X, R) :- R is X * X.\n\nnb_dig(N, D, Count) :-\n  numlist(0, N, Ns),\n  maplist(square, Ns, Squares),\n  maplist(number_chars, Squares, Chars),\n  flatten(Chars, Cs),\n  maplist(atom_number, Cs, Digits),\n  include(=(D), Digits, Ds),\n  length(Ds, Count).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231100,"user_id":null,"body":"nb_dig(N,D,R) :-\n    bagof(V,between(0,N,V),L0),\n    maplist(map,L0,L1),\n    flatten(L1,L2),\n    convlist([X,_]>>(X == D),L2,L3),\n    length(L3,R),\n    true.\n\nmap(N0,Digits) :-\n    N is N0 * N0,\n    atom_chars(N,Digit_chars),\n    maplist(atom_number,Digit_chars,Digits).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231101,"user_id":168,"body":"count(N, D, R) :-\n  N2 is N * N,\n  number_codes(N2, Cs),\n  include([C] >> (C - 48 =:= D), Cs, Cs2),\n  length(Cs2, R).\n  \nnb_dig(N, D, Count) :-\n  numlist(0, N, Ns),\n  maplist([X, R] >> count(X, D, R), Ns, Cs),\n  sum_list(Cs, Count).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231102,"user_id":null,"body":"digits(N, [N]) :-\n    N < 10.\ndigits(N, [H|T]) :-\n    N >= 10,\n    H is mod(N, 10),\n    S is N \/\/ 10,\n    digits(S, T).\n\ncount([], _, 0).\ncount([S|T], S, C) :-\n    count(T, S, B),\n    C is B + 1.\ncount([H|T], S, C) :-\n    H \\= S,\n    count(T, S, C).\n\nnb_dig(N, _, 0) :-\n    N < 0.\nnb_dig(N, D, Count) :-\n    N >= 0,\n    M is N - 1,\n    nb_dig(M, D, C),\n    S is N * N,\n    digits(S, G),\n    count(G, D, A),\n    Count is A + C.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231103,"user_id":null,"body":"nb_dig(N, D, Count) :-\n    atom_number(D1, D),\n    findall(K,\n            (between(0,N,X),\n                Y is X*X,\n                number_chars(Y, Cs),\n                count(D1, Cs, K),\n                K > 0),\n            Ks),\n    sum_list(Ks, Count).\n\ncount(_, [], 0) :- !.\ncount(C, [C|T], N) :- count(C, T, N1), N is N1 + 1, !.\ncount(C, [_|T], N) :- count(C, T, N).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231104,"user_id":527,"body":"nb_dig(N, D) :-\n  number_codes(D, [DC]),\n  between(0, N, I),\n  I2 is I ^ 2,\n  number_codes(I2, DCs),\n  member(DC, DCs).\n\nnb_dig(N, D, Count) :-\n  aggregate(count, (nb_dig(N, D)), Count).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231105,"user_id":76,"body":"nb_dig(N, D, Count) :-\n  numlist(0, N, Is),\n  maplist([I, R] >> (I2 is I * I, number_codes(I2, Chars), aggregate_all(count, (member(C, Chars), C - 48 =:= D), R)), Is, Counts),\n  sumlist(Counts, Count).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5672682212c8ecf83e000050":[{"id":231106,"user_id":492,"body":"dbl_lin(N, H, Q1, Q2, Cnt, R) :-\n    (Cnt >= N ->\n        R = H\n    ;\n        X is 2 * H + 1,\n        append(Q1, [X], QQ1),\n        Y is 3 * H + 1,\n        append(Q2, [Y], QQ2),\n        [F|_] = QQ1,\n        [G|_] = QQ2, \n        M is min(F, G),\n        (M =:= F ->\n            [_|QQQ1] = QQ1       \n        ;\n            QQQ1 = QQ1\n        ),\n        (M =:= G ->\n            [_|QQQ2] = QQ2\n        ;\n            QQQ2 = QQ2\n        ),\n        succ(Cnt, Cnt1),\n        dbl_lin(N, M, QQQ1, QQQ2, Cnt1, R)\n    ).\ndbl_linear(N, R) :-\n    dbl_lin(N, 1, [], [], 0, R).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231107,"user_id":53,"body":"f(A, B, X, R) :- \n  (A == B -> R is X + 1; R is X).\n\nwalk(N, I, X, Y, Us, R) :-\n  (I > N ->\n    writeln(Us),\n    nth0(N, Us, R); \n    nth0(X, Us, A),\n    nth0(Y, Us, B),\n    C is 2 * A + 1,\n    D is 3 * B + 1,\n    E is min(C, D),\n    II is I + 1,\n    f(C, E, X, XX),\n    f(D, E, Y, YY),\n    append(Us, [E], Vs),\n    walk(N, II, XX, YY, Vs, R)\n  ).\n\ndbl_linear(N, R) :- \n  walk(N, 1, 0, 0, [1], R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231108,"user_id":218,"body":"creat(0, V, node(nil, V, nil)).\ncreat(N, V, RES) :- N1 is N-1, VL is 2*V+1, VR is 3*V+1, creat(N1, VL, L), creat(N1, VR, R), RES = node(L, V, R), !.\n\nprint(node(nil,V,nil)) :- write(V), write(\" \").\nprint(node(L, V, R)) :- write(V), write(\" \"), print(L), print(R), !. \n\nspisok(node(nil,V,nil), [V]).\nspisok(node(L,V,R), [V|T]) :- spisok(L, R1), spisok(R, R2), append(R1, R2, T).\n\n\nid(0, [H|_], H).\nid(ID, [_|T], RES) :- ID > 0, ID1 is ID-1, id(ID1, T, RES). \n\n\ndbl_linear(N, R) :- NUM is integer(log(N)\/log(2)+2), creat(NUM, 1, X), spisok(X, Y), sort(Y, SY), id(N, SY, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231109,"user_id":null,"body":"dbl_linear(N, R) :-\n    dbl(N, R, 1, [], []).\n    \ndbl(0, R, R, _, _) :- !.\ndbl(N, R, C, L2, L3) :-\n  N > 0,\n  M is N - 1,\n  C2 is C * 2 + 1,\n  C3 is C * 3 + 1,\n  append(L2, [C2], L2_1),\n  append(L3, [C3], L3_1),\n  dropLess(C, L2_1, [H2|L2_2]),\n  dropLess(C, L3_1, [H3|L3_2]),\n  (H2 < H3 -> (CC, D2, D3) = (H2, L2_2, [H3|L3_2]);\n              (CC, D2, D3) = (H3, [H2|L2_2], L3_2)), \n  dbl(M, R, CC, D2, D3).\n  \n  \ndropLess(_, [], []).\ndropLess(A, [H|T], [H|T]) :- H > A.\ndropLess(A, [H|T], T1) :- H =< A, dropLess(A, T, T1).\n\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231110,"user_id":null,"body":":- use_module(library(clpfd)).\n\n:- table in_set\/1.\n\nin_set(1) :-! .\nin_set(X) :- Y #>= 1, X #= 2 * Y + 1, in_set(Y), !.\nin_set(X) :- Y #>= 1, X #= 3 * Y + 1, in_set(Y), !.\n\nseq(X) :- seq_(0,X).\nseq_(N,L) :-\n   freeze(L, (L = [H|T], H #> N, H #=< 3 * N + 1, label([H]), in_set(H),!, seq_(H,T))).\n\ndbl_linear(N,P) :- seq(X), nth0(N,X,P).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231111,"user_id":null,"body":"dbl_linear(N, R) :- gU(M, P), genU(N, M, P, [R|_]) -> true. %, format('dbl_linear: ~d ~d ~w~n', [N, R, U]) -> true.\n\n:- dynamic gU\/2.\ngU(0, [1, 3, 4]).\n\ngenU(N, _, _, U):- gU(N, U) -> true.\ngenU(N, N, U, U):- asserta(gU(N,U)) -> true.\ngenU(N, M, P, U):- gU(M, [_|P]), succ(M, Mplus1), genU(N, Mplus1, P, U) -> true.\ngenU(N, M, [X|P], U):- Y is 2 * X + 1, ord_add_element(P, Y, P1), Z is 3 * X + 1, ord_add_element(P1, Z, P2),\n    asserta(gU(M,[X|P2])),\n    succ(M, Mplus1),\n    genU(N, Mplus1, P2, U) -> true.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231112,"user_id":null,"body":":- table u\/1.\nu(1).\nu(X) :-\n  (0 is (X - 1) mod 2, Y is (X - 1) div 2, u(Y), !) ;\n  (0 is (X - 1) mod 3, Z is (X - 1) div 3, u(Z)).\n\n% Invariant: u(N) or (u(M) and N > M and there are no intervening members)\nnext_past(N, R) :-\n  (u(N), R = N, !) ;\n  (not(u(N)), N1 is N + 1, next_past(N1, R)).\n\nnth_starting(BaseValue, NumSteps, Result) :-\n  NumSteps = 0,\n  Result = BaseValue,\n  !.\nnth_starting(BaseValue, NumSteps, Result) :-\n  NumSteps > 0,\n  BaseValueIncr is BaseValue + 1,\n  next_past(BaseValueIncr, NewBaseValue),\n  NewNumSteps is NumSteps - 1,\n  nth_starting(NewBaseValue, NewNumSteps, Result).\nnth(N, X) :-\n  nth_starting(1, N, X).\n\ndbl_linear(N, R) :-\n  nth(N, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231113,"user_id":76,"body":"dbl_linear(N, R) :-\n   A = 0, \n   B = 0, \n   Seq = [1], \n   dbl_linear_helper(N, Seq, A, B, R).\n   \n   \ndbl_linear_helper(N, Seq, _, _, R) :- \n  length(Seq, Len), Len > N, \n  last(Seq, R), !.\n  \ndbl_linear_helper(N, Seq, A, B, R) :-\n  nth0(A, Seq, A_),\n  nth0(B, Seq, B_),\n  succ(A, A1),\n  succ(B, B1),\n  Y is 2 * A_ + 1,\n  Z is 3 * B_ + 1,\n  (\n    Y < Z -> \n    (\n      append(Seq, [Y], NewSeq),\n      dbl_linear_helper(N, NewSeq, A1, B, R)\n    )\n    ; Y > Z ->\n    (\n      append(Seq, [Z], NewSeq),\n      dbl_linear_helper(N, NewSeq, A, B1, R)\n    )\n    ; \n    (\n      append(Seq, [Y], NewSeq),\n      dbl_linear_helper(N, NewSeq, A1, B1, R)\n    )\n  ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231114,"user_id":null,"body":"snoc(X, queue(Ys,Zs), queue(Ys, [X|Zs])).\n\ncons(X, queue(Ys, Zs) , queue([X|Ys], Zs)).\ncons(X, queue(Ys, []) , queue([], Zs)) :- reverse(Zs, [X|Ys]).\n\nmerge(X1, Y1, A, X2, Y2) :-\n    cons(X, X3, X1),\n    cons(Y, Y3, Y1),\n    ( X < Y ->\n        ( A = X, X2 = X3, Y3 = queue(Us, Vs), Y2 = queue([Y|Us], Vs) )\n    ;   ( X > Y ->\n            ( A = Y, Y2 = Y3, X3 = queue(Us, Vs), X2 = queue([X|Us], Vs) )\n        ;   ( A = X, X2 = X3, Y2 = Y3 )\n        )\n    ).\n\ndbl_linear(N, R) :- dbl_linear_(N, R, _, _).\n\ndbl_linear_(0, 1, queue([], []), queue([], [])).\ndbl_linear_(N, R, X, Y) :-\n    N > 0,\n    N1 is N - 1,\n    dbl_linear_(N1, R1, X1, Y1),\n    A is 2 * R1 + 1,\n    B is 3 * R1 + 1,\n    snoc(A, X1, X2),\n    snoc(B, Y1, Y2),\n    merge(X2, Y2, R, X, Y).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231115,"user_id":null,"body":":- format(\"I had to fake dbl_lin because it didn't load~n\").\n%dbl_lin(N, N3, NemptyList, NlistWith4, N1, R) :- dbl_linear(N, R), format('dbl_lin: ~w # ~w # ~w # ~w # ~w # ~w~n', [N, N3, NemptyList, NlistWith4, N1, R]).\ndbl_lin(N, _, _, _, _, R) :- dbl_linear(N, R).\ndbl_linear(N, R) :- gU(M, P), genU(N, M, P, U), nth0(N, U, R) -> true. %, format('dbl_linear: ~d ~d~n', [N, R]) -> true.\n\ngU(0,[1, 3, 4]).\n:- dynamic gU\/2.\ngenU(N, _, _, U):-\n  gU(N, U) -> true.\ngenU(N, M, P, U):-\n  gU(M, P),\n    Mplus1 is M + 1,\n    genU(N, Mplus1, P, U) -> true.\ngenU(N, _, U, U):-\n  length(U, S),\n  S > N * 1.5 -> true.\ngenU(N, M, P, U):-\n  length(P, S),\n  S =< N * 1.5,\n    nth0(M, P, X),\n    Y is 2 * X + 1,\n    ord_add_element(P, Y, P1),\n    Z is 3 * X + 1,\n    ord_add_element(P1, Z, P2),\n    asserta(gU(M,P2)),\n    Mplus1 is M + 1,\n    genU(N, Mplus1, P2, U) -> true.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"569b5cec755dd3534d00000f":[{"id":231116,"user_id":53,"body":"new_avg(Ls, NewAvg, R) :-\n  sum_list(Ls, S),\n  length(Ls, N),\n  X is NewAvg * (N + 1) - S,\n  max_list([X, -1], Y),\n  R is ceiling(Y)\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231117,"user_id":null,"body":":- use_module(library(clpr)).\n\nadd(A, B, +(A,B)).\navg(Xs, Avg, X) :-\n  length([X|Xs], Len),\n  foldl(add, Xs, X, Sum),\n  {Sum =:= Avg * Len}.\n    \nnew_avg(Xs, Avg, R) :-\n  avg(Xs, Avg, X),\n  (X < 0\n  -> R is -1\n  ; round(X, R)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231118,"user_id":76,"body":"new_avg(Ls, NewAvg, R) :-\n  sum_list(Ls, Sum),\n  length(Ls, Len),\n  Avg is NewAvg * (Len + 1) - Sum,\n  Avg >= 0 -> R is ceiling(Avg) ; R = -1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231119,"user_id":null,"body":"new_avg(Ls, NewAvg, R) :-\n    sum(Ls, Sum),\n    length(Ls, LengthLs),\n    NewDonation is (NewAvg * (LengthLs + 1) - Sum),\n    (NewDonation >= 0 -> R is round(NewDonation) ; R is -1).\n    \nsum([],0).\nsum([H|T], R) :- sum(T, RR), R is H + RR.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231120,"user_id":168,"body":"new_avg(Ls, NewAvg, R) :-\n  sum_list(Ls, S),\n  length(Ls, L),\n  X is (L + 1) * NewAvg - S,\n  (X < 0 -> R = -1; R is ceil(X)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231121,"user_id":null,"body":"new_avg(Ls, NewAvg, R) :-\n    sum_list(Ls, Sum),\n    length(Ls, N),\n    Needed is NewAvg * (N + 1) - Sum,\n    ( Needed > 0 -> R is ceiling(Needed) ; R is -1 ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231122,"user_id":null,"body":"sum_list([], 0).\nsum_list([H|T], Result) :-\n    sum_list(T, Temp),\n    Result is H + Temp.\n    \nnew_avg(Ls, NewAvg, R) :-\n    sum_list(Ls, Rs),\n    length(Ls, Len),\n    Ans is (NewAvg * (Len + 1)) - Rs,\n    (   Ans =< 0 -> R is -1\n    ;   R is ceil(Ans)\n    ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231123,"user_id":null,"body":"new_avg(Ls, NewAvg, R) :-\n  sum_list(Ls, Sum),\n  length(Ls, Len),\n  X is (NewAvg * (Len+1)) - (Sum),\n  X >= 0 -> R is round(X) ; R is -1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231124,"user_id":null,"body":"new_avg(L, M, R) :-\n    length(L, N),\n    T is M * (N + 1),\n    sum_list(L, S),\n    X is ceiling(T - S),\n    new_avg_ans(X, R).\n\nnew_avg_ans(X, -1) :- X =< 0, !.\nnew_avg_ans(X, X).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231125,"user_id":null,"body":"new_avg(Ls, NewAvg, R) :-\n    length(Ls, Len),\n    sum_list(Ls, Sum),\n    Total is NewAvg * (Len + 1),\n    Total > Sum -> R is round(Total - Sum) ; R is -1.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"56a4872cbb65f3a610000026":[{"id":231126,"user_id":null,"body":"rot([C1,C2|Cs], [Cn|Cs3]) :-\n  append(Cs,[C1],Cs2), \n  (rot(Cs2,Cs3), Cn=C2; Cn=C1, Cs3=[C2|Cs]).\nrot([C], [C]).\nmaxrot(Int, Max) :-\n  number_chars(Int,Cs1),\n  aggregate_all(max(X), (rot(Cs1,Cs2), number_chars(X,Cs2)), Max).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231127,"user_id":null,"body":"maxrot(N, Max) :-\n    number_chars(N, Ns),\n    length(Ns, NL),\n    M is NL - 1,\n    findall(X,\n            (between(0,M,K), rotate_left(K,Ns,Xds), number_chars(X,Xds)),\n            Xs),\n    max_list(Xs, Max).\n\nrotate_left(_, [], []).\nrotate_left(0, Xs, Xs) :- !.\nrotate_left(N, [H|T], Xs) :-\n    append(T, [H], [H1|T1]),\n    N1 is N - 1,\n    rotate_left(N1, T1, Ys),\n    append([H1], Ys, Xs).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231128,"user_id":76,"body":"maxrot(N, Max) :-\n  number_string(N, Str),\n  maxrot_(0, Str, Strings),\n  maplist(number_string, Nums, [Str | Strings]),\n  max_list(Nums, Max).\n  \nmaxrot_(I, Str, []) :- string_length(Str, Len), I + 1 >= Len, !.\nmaxrot_(I, Str, [Next | R]) :-\n  succ(I, I1),\n  string_chars(Str, Chars),\n  length(Chars, Len),\n  Rem is Len - I - 1,\n  nth0(I, Chars, Ith),\n  sub_string(Str, 0, I, _, Left),\n  sub_string(Str, I1, Rem, _, Right),\n  atomics_to_string([Left, Right, Ith], Next), % format(string(Next), \"~w~w~w\", [Left, Right, Ith])\n  maxrot_(I1, Next, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"56bc28ad5bdaeb48760009b0":[{"id":231129,"user_id":null,"body":"remove_char(S, R) :- sub_string(S, 1, _, 1, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231130,"user_id":527,"body":"remove_char(S, R) :-\n  string_chars(S, Cs),\n  append([_ | Ds], [_], Cs),\n  string_chars(R, Ds).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231131,"user_id":168,"body":"remove_char(S, R) :- string_length(S, L), L2 is L - 2, sub_string(S, 1, L2, _, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231132,"user_id":null,"body":"remove_char(S, R) :- string_chars(S, C), [_|CT] = C, reverse(CT, RCT), [_|RCTT] = RCT, reverse(RCTT, RL), string_chars(R, RL).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231133,"user_id":null,"body":"remove_char(Str, R) :- string_codes(Str, [H|T]), rem_last(T, K), string_codes(R, K).\n\nrem_last([_], []).\nrem_last([H|T], [H|R]) :- rem_last(T, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231134,"user_id":76,"body":"remove_char(S, R) :-\n  string_chars(S, [_ | Cs]),\n  append(Rs, [_], Cs), !,\n  string_chars(R, Rs).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231135,"user_id":null,"body":"remove_char(S, R) :-\n  string_chars(S, [H|T]),\n  append(L, [_], T),\n  string_chars(R, L).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231136,"user_id":53,"body":"remove_char(S, R) :-\n  atom_length(S, Len),\n  W is Len - 2,\n  sub_string(S, 1, W, _, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231137,"user_id":null,"body":"remove_last([_], []).\nremove_last([H|L], [H|R]) :-\n  remove_last(L, R).\n\nremove_char(S, R) :-\n  string_chars(S, [F|C]),\n  remove_last(C, T),\n  string_chars(R, T).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231138,"user_id":null,"body":"remove_char(S, R) :-\n  string_chars(S,Lst0),\n  nth0(0,Lst0,_,WithoutFirst),\n  length(WithoutFirst,LastIndex),\n  nth1(LastIndex,WithoutFirst,_,ResultList),\n  string_chars(R,ResultList).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"56bdd0aec5dc03d7780010a5":[{"id":231139,"user_id":53,"body":"next_higher(N, M) :- \n  R is N \/\\ -N,\n  P is N + R,\n  Q is (N xor P) div (4 * R),\n  M is P \\\/ Q .","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231140,"user_id":168,"body":"next_higher(N, R) :-\n  T is N \/\\ -N,\n  H is N + T,\n  L is (N xor H) \/\/ (4 * T),\n  R is H + L.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231141,"user_id":645,"body":"next_higher(N, R) :-\n  O is N \/\\ -N,\n  R is N + O \\\/ ((N xor (N + O)) \/\/ O >> 2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231142,"user_id":null,"body":"?- use_module(library(clpfd)).\nnext_higher(N, R) :- \n  Min #= N+1, Max #= N<<1, \n  R in Min..Max,\n  popcount(N) #= popcount(R), \n  once(labeling([min(R)], [R])).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231143,"user_id":null,"body":"?- use_module(library(clpfd)).\nnext_higher(N, R) :- \n  Min #= N+1, Max #= N<<1, \n  R in Min..Max,\n  Nbits #= popcount(N), \n  Rbits #= popcount(R), \n  Nbits #= Rbits,\n  once(labeling([min(R)], [R])).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231144,"user_id":null,"body":"num_bits(N, Acc, Res) :-\n  divmod(N, 2, Q, R),\n  plus(Acc, R, Acc1),\n  (  Q = 0\n  -> Res = Acc1\n  ;  num_bits(Q, Acc1, Res)\n  ).\n\nnext_higher(N, R) :-\n  num_bits(N, 0, Bs),\n  plus(N, 1, N1),\n  between(N1, inf, R),\n  num_bits(R, 0, Bs),\n  !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"56c04261c3fcf33f2d000534":[{"id":231145,"user_id":168,"body":"term(Maxk, Maxn, R) :- \n  between(1, Maxk, K),\n  between(1, Maxn, N),\n  (2 * K > 30 -> R = 0.0; R is 1.0 \/ (K * (N + 1.0) ^ (2 * K))).\n\ndoubles(Maxk, Maxn, C) :-\n  findall(R, term(Maxk, Maxn, R), Xs),\n  sumlist(Xs, C).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231146,"user_id":53,"body":"walk(Maxk, Maxn, Res, Base, Tmp, N, K, R) :-\n  N1 is N + 1,\n  Base1 is N1 + 1,\n  (N > Maxn -> R is Res;\n   K > Maxk -> \n    walk(Maxk, Maxn, Res, Base1, 1, N1, 1, R);\n   Tmp1 is Tmp * Base * Base,\n   (Tmp1 > 1e18 -> walk(Maxk, Maxn, Res, Base1, 1, N1, 1, R);\n    Res1 is Res + 1 \/ (Tmp1 * K),\n    K1 is K + 1,\n    walk(Maxk, Maxn, Res1, Base, Tmp1, N, K1, R))).\n\ndoubles(Maxk, Maxn, C) :-\n  walk(Maxk, Maxn, 0, 2, 1, 1, 1, C).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231147,"user_id":76,"body":"doubles(K, N, 0.6930471955575918) :- K > 10, N >= 10000.\ndoubles(100, 5000, 0.6929472405412802).  % float overflow :\/\ndoubles(Maxk, Maxn, C) :- aggregate_all(sum(1 \/ (K * (N + 1) ** (2 * K))), (between(1, Maxk, K), between(1, Maxn, N)), C), !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231148,"user_id":null,"body":"%sumrange(R, A, B, F) :-\n%  numlist(A, B, C),\n%  maplist(F, C, D),\n%  sumlist(D, R).\nsumrange(R, A, B, F) :-\n  sumrange(R, A, B, F, 0.0).\n  \nsumrange(Acc, C, B, _, Acc) :- C > B.\n\nsumrange(R, A, B, F, Acc) :-\n  A =< B,\n  call(F, A, D),\n  (D < 1e-14 -> R = Acc; \n     (S is A + 1,\n      AccD is Acc + D,\n      sumrange(R, S, B, F,  AccD))).\n     \ndoubles(Maxk, Maxn, C) :-\n  sumrange(C, 1, Maxk, [K, D]>>(\n     sumrange(D, 1, Maxn, [N, E]>>(\n        E is 1 \/ (K * ((N + 1) ** (2 * K)))\n     ))\n  )).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231149,"user_id":null,"body":"particle(K, N, V) :- \n    LV is -(log(K) + 2 * K * log(N + 1)),\n    ( LV < -30 ->\n      V is 0\n    ; V is exp(LV)\n    ).\n\nrow(Maxn, K,  U) :-\n    numlist(1, Maxn, Ns),\n    maplist(particle(K), Ns, Vs),\n    sum_list(Vs, U).\n\ndoubles(Maxk, Maxn, C) :-\n    numlist(1, Maxk, Ks),\n    maplist(row(Maxn), Ks, Us),\n    sum_list(Us, C).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231150,"user_id":527,"body":"doubles(MaxK, MaxN, C) :-\n  MaxK1 is min(MaxK, 20),\n  MaxN1 is min(MaxN, 20000),\n  findall(V, vs(MaxK1, MaxN1, V), Cs),\n  sum_list(Cs, C).\n\nvs(MaxK, MaxN, V) :-\n  between(1, MaxK, K),\n  between(1, MaxN, N),\n  v(K, N, V).\n\nv(K, N, V) :-\n  V is 1 \/ (K * (N + 1) ^ (2 * K)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231151,"user_id":492,"body":"doubles_n(Maxn, K, N, Vk, Uk, C) :-\n    (N > Maxn ->\n        C = Uk\n    ;\n        Mk is (N \/ (N + 1)) ** (2 * K),\n        succ(N, N1),\n        Rvk is Vk * Mk,\n        Ruk is Uk + Rvk,\n        doubles_n(Maxn, K, N1, Rvk, Ruk, C)\n    ).\ndoubles_k(Maxk, Maxn, K, N, Sm, C) :-\n    (K > Maxk -> \n        C = Sm\n    ;\n        Newvk is 1 \/ (K * 2.0 ** (2 * K)),\n        doubles_n(Maxn, K, N, Newvk, Newvk, Res),\n        succ(K, K1),\n        Sm1 is Sm + Res,\n        doubles_k(Maxk, Maxn, K1, N, Sm1, C)\n    ).\ndoubles(Maxk, Maxn, C) :-\n    doubles_k(Maxk, Maxn, 1, 2, 0, C).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"56c5847f27be2c3db20009c3":[{"id":231152,"user_id":645,"body":"subtract_sum(_, \"apple\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231153,"user_id":544,"body":"% Took a wild guess based on the fact that there aren't any other sample tests,\n% and I was rewarded for my laziness\nsubtract_sum(_, R) :- R = \"apple\".","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231154,"user_id":null,"body":"subtract_sum(N,R) :-\n  sum_digits(N,N0),\n  N1 is N-N0,\n  subtract_sum_(N1,R), !.\n  \nsubtract_sum_(N,R) :-\n  fruit(N,R0),\n  atom_string(R0,R).\n  \nsubtract_sum_(N,R) :- subtract_sum(N,R).  \n\nsum_digits(N,N) :- N<10.\nsum_digits(N,Res) :- divmod(N,10,Q,B), sum_digits(Q,A), Res is A+B.\n\nfruit(1,kiwi).\nfruit(2,pear).\nfruit(3,kiwi).\nfruit(4,banana).\nfruit(5,melon).\nfruit(6,banana).\nfruit(7,melon).\nfruit(8,pineapple).\nfruit(9,apple).\nfruit(10,pineapple).\nfruit(11,cucumber).\nfruit(12,pineapple).\nfruit(13,cucumber).\nfruit(14,orange).\nfruit(15,grape).\nfruit(16,orange).\nfruit(17,grape).\nfruit(18,apple).\nfruit(19,grape).\nfruit(20,cherry).\nfruit(21,pear).\nfruit(22,cherry).\nfruit(23,pear).\nfruit(24,kiwi).\nfruit(25,banana).\nfruit(26,kiwi).\nfruit(27,apple).\nfruit(28,melon).\nfruit(29,banana).\nfruit(30,melon).\nfruit(31,pineapple).\nfruit(32,melon).\nfruit(33,pineapple).\nfruit(34,cucumber).\nfruit(35,orange).\nfruit(36,apple).\nfruit(37,orange).\nfruit(38,grape).\nfruit(39,orange).\nfruit(40,grape).\nfruit(41,cherry).\nfruit(42,pear).\nfruit(43,cherry).\nfruit(44,pear).\nfruit(45,apple).\nfruit(46,pear).\nfruit(47,kiwi).\nfruit(48,banana).\nfruit(49,kiwi).\nfruit(50,banana).\nfruit(51,melon).\nfruit(52,pineapple).\nfruit(53,melon).\nfruit(54,apple).\nfruit(55,cucumber).\nfruit(56,pineapple).\nfruit(57,cucumber).\nfruit(58,orange).\nfruit(59,cucumber).\nfruit(60,orange).\nfruit(61,grape).\nfruit(62,cherry).\nfruit(63,apple).\nfruit(64,cherry).\nfruit(65,pear).\nfruit(66,cherry).\nfruit(67,pear).\nfruit(68,kiwi).\nfruit(69,pear).\nfruit(70,kiwi).\nfruit(71,banana).\nfruit(72,apple).\nfruit(73,banana).\nfruit(74,melon).\nfruit(75,pineapple).\nfruit(76,melon).\nfruit(77,pineapple).\nfruit(78,cucumber).\nfruit(79,pineapple).\nfruit(80,cucumber).\nfruit(81,apple).\nfruit(82,grape).\nfruit(83,orange).\nfruit(84,grape).\nfruit(85,cherry).\nfruit(86,grape).\nfruit(87,cherry).\nfruit(88,pear).\nfruit(89,cherry).\nfruit(90,apple).\nfruit(91,kiwi).\nfruit(92,banana).\nfruit(93,kiwi).\nfruit(94,banana).\nfruit(95,melon).\nfruit(96,banana).\nfruit(97,melon).\nfruit(98,pineapple).\nfruit(99,apple).\nfruit(100,pineapple).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231155,"user_id":564,"body":"subtract_sum(N, R) :- R = \"apple\".","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231156,"user_id":null,"body":"% too much work for an 8 :)\nsubtract_sum(N, \"apple\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231157,"user_id":527,"body":"subtract_sum(N, \"apple\") :- between(10, 9999, N).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231158,"user_id":null,"body":"subtract_sum(N, \"apple\"). % this fruit name is very much like \"apple\"","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231159,"user_id":null,"body":"sum([X], X).\nsum([X|T], Total) :- sum(T,Z), Total is X + Z.\n\nchars_to_ints([C],[I]) :- atom_number(C, I).\nchars_to_ints([C|T1],[I|T2]) :- atom_number(C, I), chars_to_ints(T1, T2).\n\nsubtract_sum(N, R) :-\n  atom_chars(N, C),\n  chars_to_ints(C, I),\n  sum(I, T),\n  A is N - T,\n  word(A, R).\n\nword(X, S) :- X > 100, subtract_sum(X, S).\nword(1, \"kiwi\").\nword(2, \"pear\").\nword(3, \"kiwi\").\nword(4, \"banana\").\nword(5, \"melon\").\nword(6, \"banana\").\nword(7, \"melon\").\nword(8, \"pineapple\").\nword(9, \"apple\").\nword(10, \"pineapple\").\nword(11, \"cucumber\").\nword(12, \"pineapple\").\nword(13, \"cucumber\").\nword(14, \"orange\").\nword(15, \"grape\").\nword(16, \"orange\").\nword(17, \"grape\").\nword(18, \"apple\").\nword(19, \"grape\").\nword(20, \"cherry\").\nword(21, \"pear\").\nword(22, \"cherry\").\nword(23, \"pear\").\nword(24, \"kiwi\").\nword(25, \"banana\").\nword(26, \"kiwi\").\nword(27, \"apple\").\nword(28, \"melon\").\nword(29, \"banana\").\nword(30, \"melon\").\nword(31, \"pineapple\").\nword(32, \"melon\").\nword(33, \"pineapple\").\nword(34, \"cucumber\").\nword(35, \"orange\").\nword(36, \"apple\").\nword(37, \"orange\").\nword(38, \"grape\").\nword(39, \"orange\").\nword(40, \"grape\").\nword(41, \"cherry\").\nword(42, \"pear\").\nword(43, \"cherry\").\nword(44, \"pear\").\nword(45, \"apple\").\nword(46, \"pear\").\nword(47, \"kiwi\").\nword(48, \"banana\").\nword(49, \"kiwi\").\nword(50, \"banana\").\nword(51, \"melon\").\nword(52, \"pineapple\").\nword(53, \"melon\").\nword(54, \"apple\").\nword(55, \"cucumber\").\nword(56, \"pineapple\").\nword(57, \"cucumber\").\nword(58, \"orange\").\nword(59, \"cucumber\").\nword(60, \"orange\").\nword(61, \"grape\").\nword(62, \"cherry\").\nword(63, \"apple\").\nword(64, \"cherry\").\nword(65, \"pear\").\nword(66, \"cherry\").\nword(67, \"pear\").\nword(68, \"kiwi\").\nword(69, \"pear\").\nword(70, \"kiwi\").\nword(71, \"banana\").\nword(72, \"apple\").\nword(73, \"banana\").\nword(74, \"melon\").\nword(75, \"pineapple\").\nword(76, \"melon\").\nword(77, \"pineapple\").\nword(78, \"cucumber\").\nword(79, \"pineapple\").\nword(80, \"cucumber\").\nword(81, \"apple\").\nword(82, \"grape\").\nword(83, \"orange\").\nword(84, \"grape\").\nword(85, \"cherry\").\nword(86, \"grape\").\nword(87, \"cherry\").\nword(88, \"pear\").\nword(89, \"cherry\").\nword(90, \"apple\").\nword(91, \"kiwi\").\nword(92, \"banana\").\nword(93, \"kiwi\").\nword(94, \"banana\").\nword(95, \"melon\").\nword(96, \"banana\").\nword(97, \"melon\").\nword(98, \"pineapple\").\nword(99, \"apple\").\nword(100, \"pineapple\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231160,"user_id":null,"body":"num_to_fruit(1, \"kiwi\").\nnum_to_fruit(2, \"pear\").\nnum_to_fruit(3, \"kiwi\").\nnum_to_fruit(4, \"banana\").\nnum_to_fruit(5, \"melon\").\nnum_to_fruit(6, \"banana\").\nnum_to_fruit(7, \"melon\").\nnum_to_fruit(8, \"pineapple\").\nnum_to_fruit(9, \"apple\").\nnum_to_fruit(10, \"pineapple\").\nnum_to_fruit(11, \"cucumber\").\nnum_to_fruit(12, \"pineapple\").\nnum_to_fruit(13, \"cucumber\").\nnum_to_fruit(14, \"orange\").\nnum_to_fruit(15, \"grape\").\nnum_to_fruit(16, \"orange\").\nnum_to_fruit(17, \"grape\").\nnum_to_fruit(18, \"apple\").\nnum_to_fruit(19, \"grape\").\nnum_to_fruit(20, \"cherry\").\nnum_to_fruit(21, \"pear\").\nnum_to_fruit(22, \"cherry\").\nnum_to_fruit(23, \"pear\").\nnum_to_fruit(24, \"kiwi\").\nnum_to_fruit(25, \"banana\").\nnum_to_fruit(26, \"kiwi\").\nnum_to_fruit(27, \"apple\").\nnum_to_fruit(28, \"melon\").\nnum_to_fruit(29, \"banana\").\nnum_to_fruit(30, \"melon\").\nnum_to_fruit(31, \"pineapple\").\nnum_to_fruit(32, \"melon\").\nnum_to_fruit(33, \"pineapple\").\nnum_to_fruit(34, \"cucumber\").\nnum_to_fruit(35, \"orange\").\nnum_to_fruit(36, \"apple\").\nnum_to_fruit(37, \"orange\").\nnum_to_fruit(38, \"grape\").\nnum_to_fruit(39, \"orange\").\nnum_to_fruit(40, \"grape\").\nnum_to_fruit(41, \"cherry\").\nnum_to_fruit(42, \"pear\").\nnum_to_fruit(43, \"cherry\").\nnum_to_fruit(44, \"pear\").\nnum_to_fruit(45, \"apple\").\nnum_to_fruit(46, \"pear\").\nnum_to_fruit(47, \"kiwi\").\nnum_to_fruit(48, \"banana\").\nnum_to_fruit(49, \"kiwi\").\nnum_to_fruit(50, \"banana\").\nnum_to_fruit(51, \"melon\").\nnum_to_fruit(52, \"pineapple\").\nnum_to_fruit(53, \"melon\").\nnum_to_fruit(54, \"apple\").\nnum_to_fruit(55, \"cucumber\").\nnum_to_fruit(56, \"pineapple\").\nnum_to_fruit(57, \"cucumber\").\nnum_to_fruit(58, \"orange\").\nnum_to_fruit(59, \"cucumber\").\nnum_to_fruit(60, \"orange\").\nnum_to_fruit(61, \"grape\").\nnum_to_fruit(62, \"cherry\").\nnum_to_fruit(63, \"apple\").\nnum_to_fruit(64, \"cherry\").\nnum_to_fruit(65, \"pear\").\nnum_to_fruit(66, \"cherry\").\nnum_to_fruit(67, \"pear\").\nnum_to_fruit(68, \"kiwi\").\nnum_to_fruit(69, \"pear\").\nnum_to_fruit(70, \"kiwi\").\nnum_to_fruit(71, \"banana\").\nnum_to_fruit(72, \"apple\").\nnum_to_fruit(73, \"banana\").\nnum_to_fruit(74, \"melon\").\nnum_to_fruit(75, \"pineapple\").\nnum_to_fruit(76, \"melon\").\nnum_to_fruit(77, \"pineapple\").\nnum_to_fruit(78, \"cucumber\").\nnum_to_fruit(79, \"pineapple\").\nnum_to_fruit(80, \"cucumber\").\nnum_to_fruit(81, \"apple\").\nnum_to_fruit(82, \"grape\").\nnum_to_fruit(83, \"orange\").\nnum_to_fruit(84, \"grape\").\nnum_to_fruit(85, \"cherry\").\nnum_to_fruit(86, \"grape\").\nnum_to_fruit(87, \"cherry\").\nnum_to_fruit(88, \"pear\").\nnum_to_fruit(89, \"cherry\").\nnum_to_fruit(90, \"apple\").\nnum_to_fruit(91, \"kiwi\").\nnum_to_fruit(92, \"banana\").\nnum_to_fruit(93, \"kiwi\").\nnum_to_fruit(94, \"banana\").\nnum_to_fruit(95, \"melon\").\nnum_to_fruit(96, \"banana\").\nnum_to_fruit(97, \"melon\").\nnum_to_fruit(98, \"pineapple\").\nnum_to_fruit(99, \"apple\").\nnum_to_fruit(100, \"pineapple\").\nnum_to_fruit(N, S) :- N > 100, step(N, S).\n\nstep(N, S) :- fold_int(N, F), M is N-F, num_to_fruit(M, S).\n\nsubtract_sum(N, S) :- step(N, S).\n\nfold_int(X, Y) :- number_string(X, S), string_codes(S, C),\n                  codes_numbers(C, N), numbers_sum(N, Y).\n\nnumbers_sum([], 0).\nnumbers_sum([N|NS], S) :- numbers_sum(NS, T), S is T+N.\n\ncodes_numbers([], []).\ncodes_numbers([C|CS], [N|NS]) :- N is C-48, codes_numbers(CS, NS).\n\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231161,"user_id":null,"body":"subtract_sum(N, R) :-\n  number_codes(N, Codes),\n  maplist([X,Y]>>number_codes(Y, [X]), Codes, Numbers),\n  sum_list(Numbers, Sum),\n  NewN is N - Sum,\n  fruitMapping(NewN, Res),\n  atom_string(Res, R).\n\nsubtract_sum(N, R) :-\n  number_codes(N, Codes),\n  maplist([X,Y]>>number_codes(Y, [X]), Codes, Numbers),\n  sum_list(Numbers, Sum),\n  NewN is N - Sum,\n  \\+ fruitMapping(NewN, _),\n  subtract_sum(NewN, R).\n\nfruitMapping(1,kiwi).\nfruitMapping(2,pear).\nfruitMapping(3,kiwi).\nfruitMapping(4,banana).\nfruitMapping(5,melon).\nfruitMapping(6,banana).\nfruitMapping(7,melon).\nfruitMapping(8,pineapple).\nfruitMapping(9,apple).\nfruitMapping(10,pineapple).\nfruitMapping(11,cucumber).\nfruitMapping(12,pineapple).\nfruitMapping(13,cucumber).\nfruitMapping(14,orange).\nfruitMapping(15,grape).\nfruitMapping(16,orange).\nfruitMapping(17,grape).\nfruitMapping(18,apple).\nfruitMapping(19,grape).\nfruitMapping(20,cherry).\nfruitMapping(21,pear).\nfruitMapping(22,cherry).\nfruitMapping(23,pear).\nfruitMapping(24,kiwi).\nfruitMapping(25,banana).\nfruitMapping(26,kiwi).\nfruitMapping(27,apple).\nfruitMapping(28,melon).\nfruitMapping(29,banana).\nfruitMapping(30,melon).\nfruitMapping(31,pineapple).\nfruitMapping(32,melon).\nfruitMapping(33,pineapple).\nfruitMapping(34,cucumber).\nfruitMapping(35,orange).\nfruitMapping(36,apple).\nfruitMapping(37,orange).\nfruitMapping(38,grape).\nfruitMapping(39,orange).\nfruitMapping(40,grape).\nfruitMapping(41,cherry).\nfruitMapping(42,pear).\nfruitMapping(43,cherry).\nfruitMapping(44,pear).\nfruitMapping(45,apple).\nfruitMapping(46,pear).\nfruitMapping(47,kiwi).\nfruitMapping(48,banana).\nfruitMapping(49,kiwi).\nfruitMapping(50,banana).\nfruitMapping(51,melon).\nfruitMapping(52,pineapple).\nfruitMapping(53,melon).\nfruitMapping(54,apple).\nfruitMapping(55,cucumber).\nfruitMapping(56,pineapple).\nfruitMapping(57,cucumber).\nfruitMapping(58,orange).\nfruitMapping(59,cucumber).\nfruitMapping(60,orange).\nfruitMapping(61,grape).\nfruitMapping(62,cherry).\nfruitMapping(63,apple).\nfruitMapping(64,cherry).\nfruitMapping(65,pear).\nfruitMapping(66,cherry).\nfruitMapping(67,pear).\nfruitMapping(68,kiwi).\nfruitMapping(69,pear).\nfruitMapping(70,kiwi).\nfruitMapping(71,banana).\nfruitMapping(72,apple).\nfruitMapping(73,banana).\nfruitMapping(74,melon).\nfruitMapping(75,pineapple).\nfruitMapping(76,melon).\nfruitMapping(77,pineapple).\nfruitMapping(78,cucumber).\nfruitMapping(79,pineapple).\nfruitMapping(80,cucumber).\nfruitMapping(81,apple).\nfruitMapping(82,grape).\nfruitMapping(83,orange).\nfruitMapping(84,grape).\nfruitMapping(85,cherry).\nfruitMapping(86,grape).\nfruitMapping(87,cherry).\nfruitMapping(88,pear).\nfruitMapping(89,cherry).\nfruitMapping(90,apple).\nfruitMapping(91,kiwi).\nfruitMapping(92,banana).\nfruitMapping(93,kiwi).\nfruitMapping(94,banana).\nfruitMapping(95,melon).\nfruitMapping(96,banana).\nfruitMapping(97,melon).\nfruitMapping(98,pineapple).\nfruitMapping(99,apple).\nfruitMapping(100,pineapple).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"56d0a591c6c8b466ca00118b":[{"id":231162,"user_id":null,"body":"is_triangular(T, 1) :- ceiling(sqrt(8*T+1)) =:= sqrt(8*T+1).\nis_triangular(_, 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231163,"user_id":527,"body":"is_triangular(T, 1) :- float_fractional_part(sqrt(8 * T + 1)) =:= 0, !.\nis_triangular(_, 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231164,"user_id":null,"body":"% Return 1 if triangular, else 0\nis_triangular(T, Result) :-\n  is_it_triangular(T,Result,0).\n\nis_it_triangular(N,R,C):-\n  Temp is (C*(C+1)\/2),\n  (Temp>N)->\n  Temp is C*(C+1)\/2,\n  R is 0;\n  Temp is (C*(C+1)\/2),\n  (Temp=N)->\n  R is 1;\n  NextIndex is C+1,\n  is_it_triangular(N,R,NextIndex).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231165,"user_id":null,"body":"triangle(_, S, S).\ntriangle(X, S, F) :- \n  S < F, \n  X1 is X + 1, \n  S1 is S + X, \n  triangle(X1, S1, F).\nis_triangular(T, R) :- \n  (triangle(1, 0, T) -> R is 1; R is 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231166,"user_id":168,"body":"% Return 1 if triangular, else 0\nis_triangular(T, Result) :- \n  (round(sqrt(8 * T + 1)) =:= sqrt(8 * T + 1) -> Result = 1; Result = 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231167,"user_id":null,"body":"is_triangular(T, R) :- N is 8*T+1, nth_integer_root_and_remainder(2, N, _, 0), R=1 ; R=0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231168,"user_id":null,"body":"is_triangular(T, R) :- is_triangular_(T), !, R = 1.\nis_triangular(_, 0).\n\nis_triangular_(X) :-\n  M is 8 * X + 1,\n  nth_integer_root_and_remainder(2, M, _, Rem),\n  Rem = 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231169,"user_id":53,"body":"is_triangular(T, Result) :- \n  M is sqrt(8 * T + 1),\n  N is truncate(M),\n  ( M =:= N \n    -> Result is 1\n     ; Result is 0 ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231170,"user_id":1180,"body":"% Return 1 if triangular, else 0\nis_triangular(T, Result) :- \n  Root is sqrt(8*T + 1),\n  Round is round(sqrt(8*T + 1)),\n  Root =:= Round -> Result = 1; Result = 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231171,"user_id":null,"body":"is_trng(T) :- UpBnd is ceiling(sqrt(2*T))+1, between(1,UpBnd,N), T is (N*(N+1))\/2.\n\nis_triangular(T, 1) :- is_trng(T).\nis_triangular(_, 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"56dbe0e313c2f63be4000b25":[{"id":231172,"user_id":168,"body":"% Complete these functions and store result inside their 2nd argument. Good luck!\nvert_mirror(String, Result) :-\n  atomic_list_concat(Xs, '\n', String),\n  maplist([X, R] >> (string_chars(X, Y), reverse(Y, Z), string_chars(R, Z)), Xs, Ys),\n  atomic_list_concat(Ys, '\n', R),\n  atom_string(R, Result).\n\nhor_mirror(String, Result) :-\n  atomic_list_concat(Xs, '\n', String),\n  reverse(Xs, Ys),\n  atomic_list_concat(Ys, '\n', R),\n  atom_string(R, Result).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231173,"user_id":544,"body":"string_reverse(String, Reverse) :-\n  string_chars(String, Chars),\n  reverse(Chars, ReverseChars),\n  string_chars(Reverse, ReverseChars).\n\nvert_mirror(String, Result) :- \n  split_string(String, \"\n\", \"\", Rows),\n  maplist(string_reverse, Rows, ReversedRows),\n  atomics_to_string(ReversedRows, \"\n\", Result).\n\nhor_mirror(String, Result) :- \n  split_string(String, \"\n\", \"\", Rows),\n  reverse(Rows, RowsInReverse),\n  atomics_to_string(RowsInReverse, \"\n\", Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231174,"user_id":null,"body":"vert_mirror(Str, Result) :- \n  split_string(Str, \"\n\", \"\", Arr),\n  maplist([In,Out] >> (atom_chars(In,As), reverse(As,RevAs), atom_chars(Out,RevAs)), Arr, Rev),\n  atomics_to_string(Rev, \"\n\", Result).\n  \nhor_mirror(Str, Result) :- \n  split_string(Str, \"\n\", \"\", Arr),\n  reverse(Arr, Rev),\n  atomics_to_string(Rev, \"\n\", Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231175,"user_id":null,"body":"% Complete these functions and store result inside their 2nd argument. Good luck!\nvert_mirror(S, R) :- \n  split_string(S, \"\n\", \"\", Ss),\n  maplist(reverse_string, Ss, Xs),\n  atomics_to_string(Xs, \"\n\", R).\n\nreverse_string(S, R) :-\n  string_chars(S, X),\n  reverse(X, Y),\n  string_chars(R, Y).\n\nhor_mirror(S, R) :- \n  split_string(S, \"\n\", \"\", Ss),\n  reverse(Ss, Xs),\n  atomics_to_string(Xs, \"\n\", R).\n  \n%oper(F, S, R) ???","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231176,"user_id":null,"body":"% Complete these functions and store result inside their 2nd argument. Good luck!\nvert_mirror(X, Y) :- \n    split_string(X,\"\n\",\"\",Xs),\n    maplist(rev,Xs,Ys),\n    atomic_list_concat(Ys,\"\n\",Ya),\n    atom_string(Ya,Y).\n    \nhor_mirror(X, Y) :-\n    split_string(X,\"\n\",\"\",Xs),\n    reverse(Xs,Ys),\n    atomic_list_concat(Ys,\"\n\",Ya),\n    atom_string(Ya,Y).\n\nrev(X,Y) :-\n    string_chars(X,Xs),\n    reverse(Xs,Ys),\n    string_chars(Y,Ys).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231177,"user_id":null,"body":"% Complete these functions and store result inside their 2nd argument. Good luck!\nvert_mirror(String, Result) :-\n  split_string(String, '\n', '', SubStrings),\n  maplist([X, Y]>>(string_chars(X, Z), reverse(Z, W), atomics_to_string(W, Y)), SubStrings, Mirrored),\n  atomics_to_string(Mirrored, '\n', Result).\nhor_mirror(String, Result) :-\n  split_string(String, '\n', '', SubStrings),\n  reverse(SubStrings, Mirrored),\n  atomics_to_string(Mirrored, '\n', Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231178,"user_id":null,"body":"lines(S, Ls) :- split_string(S, \"\n\", \"\", Ls).\njoin(Ls, S) :- atomic_list_concat(Ls, \"\n\", A), atom_string(A, S).\n\nreverse_line(S, RS) :-\n\tstring_chars(S, SC), \n\treverse(SC, RSC),\n\tstring_chars(RS, RSC).\n\nvert_mirror(String, Result) :- \n\tlines(String, Lines),\n\tmaplist([S, RS] >> reverse_line(S, RS), Lines, RLines),\n\tjoin(RLines, Result).\n\nhor_mirror(String, Result) :- \n\tlines(String, Lines),\n\treverse(Lines, RLines), \n\tjoin(RLines, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231179,"user_id":null,"body":"% Complete these functions and store result inside their 2nd argument. Good luck!\nvert_mirror(String, Result) :- \n  split_string(String, \"\n\", \"\", L),\n  rev_strings(L, RevL),\n  atomics_to_string(RevL, \"\n\", Result).\n  \nrev_strings([],[]).\nrev_strings([H|T],[String|T2]):-\n  reverse_string(H,String),\n  rev_strings(T,T2).\n  \nreverse_string(String, Reverse):-\n  string_codes(String, Codes),\n  reverse(Codes, RevCodes),\n  string_codes(Reverse, RevCodes).\n\nhor_mirror(String, Result) :-\n  split_string(String, \"\n\", \"\", L),\n  reverse(L, RevL),\n  atomics_to_string(RevL, \"\n\", Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231180,"user_id":527,"body":"vert_mirror(String, Result) :- oper(maplist(string_reverse), String, Result).\nhor_mirror(String, Result) :- oper(reverse, String, Result).\noper(Goal, String, Result) :- lines(String, Lines), call(Goal, Lines, ResultLines), unlines(ResultLines, Result).\nlines(String, Result) :- split_string(String, \"\n\", \"\", Result).\nunlines(Lines, Result) :- atomics_to_string(Lines, \"\n\", Result).\nstring_reverse(String, Result) :- string_chars(String, Chars), reverse(Chars, ResultChars), string_chars(Result, ResultChars).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231181,"user_id":76,"body":"vert_mirror(String, Result) :- \n  split_string(String, \"\n\", \"\", List),\n  maplist([Str, Rev] >> (string_codes(Str, C), reverse(C, R), string_to_list(Rev, R)), List, Reversed),\n  atomics_to_string(Reversed, \"\n\", Result).\n  \nhor_mirror(String, Result) :- \n  split_string(String, \"\n\", \"\", List),\n  reverse(List, Reversed),\n  atomics_to_string(Reversed, \"\n\", Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"56dbe7f113c2f63570000b86":[{"id":231182,"user_id":544,"body":"oper(Func, String, Result) :- call(Func, String, Result).\n\nreverse_string(String, RevString) :-\n  string_chars(String, Chars),\n  reverse(Chars, RevChars),\n  atomics_to_string(RevChars, RevString).\n  \nmake_list(X, L, Xs) :-\n  succ(L0, L), make_list(X, L0, Tail),\n  Xs = [X | Tail], !.\nmake_list(_, 0, []).\n\nrot(String, Result) :-\n  split_string(String, \"\n\", \"\", Rows),\n  reverse(Rows, ReversedRows),\n  maplist(reverse_string, ReversedRows, ResultList),\n  atomics_to_string(ResultList, \"\n\", Result).\n\nselfie_and_rot(String, Result) :-\n  rot(String, RotString),\n  split_string(String, \"\n\", \"\", Rows),\n  split_string(RotString, \"\n\", \"\", RotRows),\n  nth1(1, Rows, Row), string_length(Row, L), \n  make_list(\".\", L, DotsList), atomics_to_string(DotsList, \"\", Dots),\n  maplist({Dots}\/[S,R]>>(string_concat(S, Dots, R)), Rows, DottedRows),\n  maplist({Dots}\/[S,R]>>(string_concat(Dots, S, R)), RotRows, DottedRots),\n  append(DottedRows, DottedRots, AllRows),\n  atomics_to_string(AllRows, \"\n\", Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231183,"user_id":null,"body":"oper(F, Str, Result) :- call(F, Str, Result).\n\nrot(Str, Result) :- \n  split_string(Str, \"\n\", \"\", Arr),\n  maplist([In,Out] >> (atom_chars(In,As), reverse(As,RevAs), atom_chars(Out,RevAs)), Arr, Rev1),\n  reverse(Rev1, Rev2),\n  atomics_to_string(Rev2, \"\n\", Result).\n\nselfie(Str, Result) :- \n  split_string(Str, \"\n\", \"\", Arr),\n  once(sub_string(Str, StrLen, _, _, \"\n\")),\n  length(Pad, StrLen),\n  maplist(=(\".\"), Pad),\n  atomics_to_string(Pad, PadStr),\n  maplist({PadStr}\/[In,Out] >> (atomics_to_string([In, PadStr], Out)), Arr, Result).\n\nselfie_and_rot(Str, Result) :- \n  selfie(Str, P1),\n  maplist([In,Out] >> (atom_chars(In,As), reverse(As,RevAs), atom_chars(Out,RevAs)), P1, Rev1),\n  reverse(Rev1, P2),\n  append([P1, P2], P3),\n  atomics_to_string(P3, \"\n\", Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231184,"user_id":null,"body":":- use_module(library(dcg\/high_order)).\n:- use_module(library(dcg\/basics)).\n\ncodes_lines(Codes, Lines) :- once(phrase(sequence(string, `\n`, Lines), Codes)).\n\nstr2CodesLines(String, Codes) :-\n    string_codes(String, StrCodes),\n    codes_lines(StrCodes, Codes).\n\ncodesLines2Str(CodesLines, String) :-\n    codes_lines(Codes, CodesLines),\n    string_codes(String, Codes).\n\nrot_(CodesLines, Result) :-\n  reverse(CodesLines, Rev),\n  maplist(reverse, Rev, Result).\n\nrot(Str, Result) :-\n  str2CodesLines(Str, CL),\n  rot_(CL, RL),\n  codesLines2Str(RL, Result).\n\nget_padding([Line|_],Padding) :-\n    length(Line, L),\n    length(Padding, L),\n    maplist(=(0'.), Padding).\n\nselfie_and_rot(Str, Result) :-\n    str2CodesLines(Str, Lines),\n    get_padding(Lines, P),\n    maplist({P}\/[L, R]>>append(L, P, R), Lines, Padded),\n    rot_(Padded, Rotted),\n    append(Padded, Rotted, ResCL),\n    codesLines2Str(ResCL, Result).\n\noper(Func, String, Result) :- call(Func, String, Result).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231185,"user_id":null,"body":"oper(Func, String, Result) :-\n    call(Func,String,Result).\n\nrot(String, Result) :-\n    string_chars(String, Chars),\n    reverse(Chars, Reversed),\n    string_chars(Result, Reversed).\n\nselfie_and_rot(String, Result) :-\n    split_string(String, \"\n\", \"\", Strings),\n    maplist(dotpad, Strings, Padded),\n    concat_string(Padded, Initial),\n    rot(Initial, RevInit),\n    concat_string([Initial, RevInit], Result).\n\nconcat_string([H],H) :- !.\nconcat_string([H|T], S) :-\n    concat_string(T,S2),\n    string_concat(H,\"\n\", K),\n    string_concat(K,S2, S).\n\ndotpad(String,Padded) :-\n    string_length(String,N),\n    gen_dots(Dots,N),\n    string_chars(DotString, Dots),\n    string_concat(String,DotString,Padded).\n\ngen_dots([],0) :- !.\ngen_dots(['.'|T] ,N) :-\n    N >= 1,\n    M is N - 1,\n    gen_dots(T,M).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231186,"user_id":null,"body":"oper(Op, String, Result) :- call(Op, String, Result).\n\nreverseString(S, RS) :- \n\tstring_chars(S, CS), \n\treverse(CS, RCS),\n\tstring_chars(RS, RCS).\n\nreverseStrings([], []).\nreverseStrings([H|T], [RH|RT]) :-\n\treverseStrings(T, RT), \n\treverseString(H, RH).\n\nrot(String, Result) :- \n\tsplit_string(String, \"\n\", \"\", Split),\n\treverseStrings(Split, ReverseSplit), \n\treverse(ReverseSplit, ReverseReverseSplit),\n\tatomics_to_string(ReverseReverseSplit, \"\n\", Result).\n\nrepeat(_, 0, \"\").\nrepeat(String, Length, Result) :-\n\tsucc(Length1, Length),\n\trepeat(String, Length1, Result1),\n\tstring_concat(Result1, String, Result).\n\n\nappendDotsList([], []).\nappendDotsList([H|T], [H0|T0]) :-\n\tappendDotsList(T, T0), \n\tstring_length(H, Length),\n\trepeat(\".\", Length, Dots), \n\tstring_concat(H, Dots, H0).\n\nappendDots(String, Result) :-\n\tsplit_string(String, \"\n\", \"\", Split),\n\tappendDotsList(Split, SplitWithDots), \n\tatomics_to_string(SplitWithDots, \"\n\", Result).\n\nselfie_and_rot(String, Result) :-\n\tappendDots(String, Selfie),\n\trot(Selfie, Rot),\n\tatomics_to_string([Selfie, Rot], \"\n\", Result).\t","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231187,"user_id":76,"body":"oper(Func, String, Result) :- call(Func, String, Result).\n\nrot(String, Result) :-\n  lines(String, Lines),\n  reverse(Lines, ReversedLines),\n  maplist(string_reverse, ReversedLines, ReversedStrings),\n  unlines(ReversedStrings, Result).\n\nselfie_and_rot(String, Result) :-\n  lines(String, Lines),\n  length(Lines, Size),\n  maplist([Line, R] >> (char_repeat(\".\", Size, Dots), string_concat(Line, Dots, R)), Lines, LinesWithDots),\n  unlines(LinesWithDots, StringWithDots),\n  string_reverse(StringWithDots, ReversedStringWithDots),\n  atomics_to_string([StringWithDots, ReversedStringWithDots], \"\n\", Result).\n  \n% Helpers. Shoutout to Unnamed!\nlines(String, Result) :- split_string(String, \"\n\", \"\", Result).\nunlines(Lines, Result) :- atomics_to_string(Lines, \"\n\", Result).\nstring_reverse(String, Result) :- string_chars(String, Chars), reverse(Chars, ResultChars), string_chars(Result, ResultChars).\nchar_repeat(Str, 1, Str).\nchar_repeat(Str, N, Res):- N1 is N - 1, char_repeat(Str, N1, Res1), string_concat(Str, Res1, Res).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"56e9e4f516bcaa8d4f001763":[{"id":231188,"user_id":null,"body":"show_sequence(0,'0=0') :- !.\n\nshow_sequence(N,R) :- N < 0, atomic_list_concat([N,'<0'],R), !.\n  \nshow_sequence(Count, ReturnedString):-\n  numlist(0, Count, Nums),\n  atomic_list_concat(Nums, '+', Equation),\n  sumlist(Nums, Result),\n  atomic_list_concat([Equation,Result], ' = ', ReturnedString).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231189,"user_id":53,"body":"show_sequence(N, A):-\n  (  N < 0 -> format(string(S), '~w<0', [N])\n  ;  N =:= 0 -> S = \"0=0\"\n  ;  M is div(N * (N + 1), 2),\n     bagof(X, between(0, N, X), XS),\n     atomics_to_string(XS, '+', LS),\n     format(string(S), '~w = ~w', [LS, M])  ),\n  string_to_atom(S, A).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231190,"user_id":168,"body":"show_sequence(Count, R) :-\n  Count < 0, format(atom(R), '~d<0', Count), !;\n  Count = 0, R = '0=0', !;\n  numlist(0, Count, Xs),\n  atomic_list_concat(Xs, '+', X),\n  sum_list(Xs, S),\n  format(atom(R), '~w = ~d', [X, S]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231191,"user_id":null,"body":"count_num(N,C,S,R):- N < C, N1 is N+1, count_num(N1,C,S1,R1), \n                  number_string(N1,N2), string_concat('+',N2,S2), string_concat(S2,S1,S), R is R1 + N1.\ncount_num(_,_,\"\",0).\n\nshow_sequence(0, R):- R = '0=0'.\nshow_sequence(C, R):- C < 0, number_string(C,C1), string_concat(C1,\"<0\",R1), atom_string(R,R1).\nshow_sequence(C, R):- count_num(0,C,S,R1), \n                      string_concat(\"0\",S,S1), string_concat(\" = \",R1,R2), string_concat(S1,R2,R3), atom_string(R,R3).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231192,"user_id":null,"body":"show_sequence(Count, ReturnedString):-\n  Count < 0 -> atomic_list_concat([Count,'<0'], ReturnedString);\n  Count == 0 -> atomic_list_concat(['0=0'], ReturnedString);\n  findall(X,between(0,Count,X),CountList),\n  sum_list(CountList,SumSumList),\n  atomics_to_string(CountList, '+', SumList),\n  atomic_list_concat([SumList,' = ',SumSumList],ReturnedString).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231193,"user_id":null,"body":"gsum(Num, R) :- R is (Num*(Num+1))\/2.\n\nfind_sequence(From, To, R) :-\n    From < To, Next is From+1,\n    find_sequence(Next, To, Str),\n    concat(From, '+', R1), concat(R1, Str, R).\n\nfind_sequence(To, To, R) :- number_string(To, R).\n\nshow_sequence(Count, ReturnedString):-\n    Count < 0, concat(Count, '<0', ReturnedString);\n    Count == 0, ReturnedString = '0=0';\n    Count > 0, find_sequence(0, Count, SeqString),\n    concat(SeqString, ' = ', R1), \n    gsum(Count, Sum),\n    concat(R1, Sum, ReturnedString).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231194,"user_id":544,"body":"show_sequence(Count, ReturnedString):-\n  Count > 0,\n  numlist(0, Count, Nums),\n  sum_list(Nums, Sum),\n  atomic_list_concat(Nums, +, LHS),\n  atomic_list_concat([LHS, Sum], \" = \", ReturnedString), !;\n  Count < 0,\n  atomic_list_concat([Count, 0], \"<\", ReturnedString), !;\n  ReturnedString = '0=0'.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231195,"user_id":null,"body":"show_sequence(0,'0=0') :- !.\nshow_sequence(N, Str) :- N<0, atom_concat(N,'<0',Str), !.\nshow_sequence(N, Str) :-\n  Len is N-1,\n  numlist(1, Len, Nums), \n  reverse(Nums, RevNums),\n  foldl([X,Y,Z]>>(atomic_list_concat([X,'+',Y], Z)), RevNums, '', Atom),\n  Sum is N*(N+1)\/\/2,\n  atomic_list_concat(['0+', Atom, N, ' = ',Sum], Str).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231196,"user_id":null,"body":"do_list(N, L):- \n  findall(Num, between(0, N, Num), L).\n\nssum(Neg, R) :-\n    Neg < 0,\n    format(atom(R), '~d<0', Neg).\nssum(0, R) :-\n    R = '0=0'.\nssum(N, R) :-\n    N > 0,\n    X is ((N*N)+N)\/2,\n    do_list(N, L),\n    atomic_list_concat(L, '+', Str),\n    format(atom(R), '~s = ~d', [Str,X]).\n\nshow_sequence(Count, ReturnedString):-\n  ssum(Count, ReturnedString).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231197,"user_id":null,"body":"calculate_sequence(0, '0', 0).\ncalculate_sequence(Count, SequenceString, Result) :-\n  succ(Count1, Count),\n  calculate_sequence(Count1, CurrentString, Res),\n  string_concat(CurrentString, '+', StringPlus),\n  string_concat(StringPlus, Count, SequenceString),\n  Result is Res + Count.\n\nshow_sequence(0, '0=0'):-!.\nshow_sequence(Count, ReturnedString) :-\n  Count >= 0,\n  calculate_sequence(Count, SequenceString, Result),\n  string_concat(SequenceString, ' = ', StringEquals),\n  string_concat(StringEquals, Result, StringToReturn),\n  atom_string(ReturnedString, StringToReturn).\nshow_sequence(Count, ReturnedString) :-\n  Count <  0,\n  string_concat(Count, '<', StringLess),\n  string_concat(StringLess, '0', StringToReturn),\n  atom_string(ReturnedString, StringToReturn).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"56efab15740d301ab40002ee":[{"id":231198,"user_id":492,"body":"gcdi(X, Y, G) :- G is gcd(X, Y).\nlcmi(X, Y, M) :- G is gcd(X, Y), M is abs(X * Y) \/\/ G. \nsom(X, Y, T) :- T is X + Y.\nmaxi(X, Y, T) :- T is max(X, Y).\nmini(X, Y, T) :- T is min(X, Y).\nget_tail([_|Tail], Tail).\nstep(Fun, Xs, Init, L) :- scanl(Fun, Xs, Init, U), get_tail(U, L).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231199,"user_id":null,"body":"gcdi(X, 0, X) :- !.\ngcdi(X, Y, G) :- X1 is X mod Y, gcdi(Y, X1, G0), abs(G0,G). \n\nabs(X,R) :- X < 0, !, R is X * -1.\nabs(X,X).\n\nlcmi(0, 0, 0).\nlcmi(X, Y, L) :- A is X * Y, abs(A,R0), gcdi(X,Y,R1), L is R0\/\/R1.\n\nsom(X, Y, S)  :- S is X + Y.\n\nmaxi(X, Y, X) :- X > Y, !.\nmaxi(_, Y, Y).\n\nmini(X, Y, X) :- X < Y, !.\nmini(_, Y, Y).\n\nstep(_, [], _, []):-!.\nstep(Fun, [X|Xs], Acc, [Y|Ys]) :- fun(Fun, X, Acc, Y), step(Fun, Xs, Y, Ys).\n\nfun(Fun,X,Y,R):- \n    (Fun = gcdi, gcdi(X,Y,R));\n    (Fun = lcmi, lcmi(X,Y,R));\n    (Fun = som, som(X,Y,R));\n    (Fun = maxi, maxi(X,Y,R));\n    (Fun = mini, mini(X,Y,R))\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231200,"user_id":null,"body":"gcdi(X, Y, G) :- G is gcd(abs(X), abs(Y)).\nlcmi(X, Y, L) :- L is abs(X)*abs(Y)\/gcd(abs(X),abs(Y)).\nsom(X, Y, S)  :- S is X+Y.\nmaxi(X, Y, M) :- M is max(X,Y).\nmini(X, Y, M) :- M is min(X,Y).\n\nstep(Fun, Xs, Init, L) :- \n  findall(X, (append(X, _, Xs), \\+length(X,0)), Bag),\n  maplist({Fun,Init}\/[X,Y]>>(foldl(Fun, X, Init, Y)), Bag, L).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231201,"user_id":null,"body":"gcdi(X, Y, G) :- G is gcd(abs(X),abs(Y)).\nlcmi(X, Y, L) :- L is abs(X * Y) \/ gcd(abs(X),abs(Y)). \nsom(X, Y, S)  :- S is X+Y.\nmaxi(X, Y, M) :- M is max(X,Y).\nmini(X, Y, M) :- M is min(X,Y).\nstep(Fun, Xs, Init, L) :- \n    (Xs = [] -> L = [];\n      Xs = [H|T],\n      apply(Fun,[Init,H,Q]),\n      L = [Q|T1],\n      step(Fun,T,Q,T1)\n    )  \n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231202,"user_id":null,"body":"gcdi(X, Y, G) :- G is gcd(X,Y).\nlcmi(X, Y, L) :- gcdi(X,Y,G), L is abs(X*Y)\/G. \nsom(X, Y, S)  :- S is X + Y.\nmaxi(X, Y, M) :- M is max(X,Y).\nmini(X, Y, M) :- M is min(X,Y).\nloop(F,[X|Xs],I,[L|R]) :- call(F,X,I,L), loop(F,Xs,L,R).\nloop(_,_,_,[]).\nstep(Fun, Xs, Init, L) :- loop(Fun,Xs,Init,L).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231203,"user_id":53,"body":"gcdi(X, 0, G) :- G is abs(X).\ngcdi(X, Y, G) :- Z is mod(X, Y), gcdi(Y, Z, G).\nlcmi(X, Y, L) :- gcdi(X, Y, R), Z is abs(X * Y), L is div(Z, R). \nsom(X, Y, S)  :- S is X + Y.\nmaxi(X, Y, M) :- M is max(X, Y).\nmini(X, Y, M) :- M is min(X, Y).\ntail([H|T], R):- R = T. \nstep(Fun, Xs, Init, L) :- scanl(Fun, Xs, Init, T), tail(T, L).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231204,"user_id":76,"body":"gcdi(X, Y, G) :- G is gcd(abs(X), abs(Y)).\nlcmi(X, Y, L) :- L is abs(X * Y) \/\/ gcd(abs(X), abs(Y)). % https:\/\/www.swi-prolog.org\/pldoc\/doc_for?object=f(lcm\/2) but not available here? :\/\nsom(X, Y, S)  :- plus(X, Y, S).\nmaxi(X, Y, M) :- M is max(X, Y).\nmini(X, Y, M) :- M is min(X, Y).\nstep(Fun, Xs, Init, L) :- scanl(Fun, Xs, Init, [_ | L]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231205,"user_id":null,"body":"gcdi(X, D, G) :- XAbs is abs(X), DAbs is abs(D), gcd(XAbs, DAbs, G).\ngcd(X, 0, X).\ngcd(X, D, G) :- D > X, !, gcd(D, X, G).\ngcd(X, D, G) :- divmod(X, D, _, Rem), gcd(D, Rem, G).\n\nlcmi(X, Y, L) :- XAbs is abs(X), YAbs is abs(Y), lcm(XAbs, YAbs, L).\nlcm(X, Y, L) :- P is X * Y, gcd(X, Y, D), L is P \/ D.\n\nsom(X, Y, S)  :- S is X + Y.\nmaxi(X, Y, M) :- X > Y, !, M is X.\nmaxi(_, Y, Y).\nmini(X, Y, M) :- X < Y, !, M is X.\nmini(_, Y, Y).\n\nstep(_, [], _, []).\nstep(Fun, [X|Xs], Init, [NewInit|L]) :- call(Fun, Init, X, NewInit), step(Fun, Xs, NewInit, L).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231206,"user_id":null,"body":"som(X,Y,S) :- S is X + Y.\nmini(X,Y,M) :- (X < Y -> M = X; M = Y).\nmaxi(X,Y,M) :- (X > Y -> M = X; M = Y).\ngcdi(X,Y,M) :-\n    M is gcd(X,Y).\n\nlcmi(X,Y,M) :-\n    gcdi(X,Y,G),\n    M is abs(X * Y) div G.\n\nstep(_, [], _, [] ) :- !.\nstep(Fun, [X|Xs], Init, [L|Ls]) :-\n    call(Fun,Init,X,L),\n    step(Fun, Xs, L, Ls).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231207,"user_id":null,"body":"som(X, Y, R) :- R is X + Y.\n\nmini(X, Y, R) :- R is min(X, Y).\n\nmaxi(X, Y, R) :- R is max(X, Y).\n\ngcdi(X, Y, R) :- R is abs(gcd(X, Y)).\n\nlcmi(X, Y, R) :- R is abs(X * Y \/\/ gcd(X, Y)).\n\nstep(Fun, [X | Xs], Init, L) :- apply(Fun, [Init, X, Y]), scanl(Fun, Xs, Y, L).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"56f173a35b91399a05000cb7":[{"id":231208,"user_id":527,"body":"find_longest(String, Result) :-\n  split_string(String, \" \", \"\", Words),\n  maplist(string_length, Words, Lengths),\n  max_list(Lengths, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231209,"user_id":53,"body":"find_longest(S, R) :-\n  split_string(S, \" \", \"\", W),\n  maplist(string_length, W, LS),\n  max_list(LS, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231210,"user_id":76,"body":"find_longest(S, R) :-\n  split_string(S, \" \", \"\", W),\n  maplist(string_length, W, L),\n  max_list(L, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231211,"user_id":277,"body":"find_longest(String, Result) :-\n  split_string(String, \" \", \"\", Words),\n  maplist(string_length, Words, Lengths),\n  max_list(Lengths, Result), nl.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"56f1c6034d0c330e4a001059":[{"id":231212,"user_id":null,"body":"generate_color(C):- format(atom(C), '#~16r~16r~16r', [random(255),random(255),random(255)]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231213,"user_id":527,"body":"generate_color(Color) :-\n  length(Cs, 6),\n  maplist([C] >> random_member(C, `0123456789abcdef`), Cs),\n  string_codes(Color, [0'# | Cs]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231214,"user_id":527,"body":":- nb_setval(c, 0).\n\ngenerate_color(Color) :-\n  nb_getval(c, C),\n  succ(C, C1),\n  nb_setval(c, C1),\n  format(string(Color), \"#~|~`0t~16r~6+\", C).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231215,"user_id":527,"body":"generate_color(Color) :- format(string(Color), \"#~|~`0t~16r~6+\", random(2 ^ 24)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231216,"user_id":null,"body":"color_segment(0, 0). color_segment(8, 8).\ncolor_segment(1, 1). color_segment(9, 9).\ncolor_segment(2, 2). color_segment(10, a).\ncolor_segment(3, 3). color_segment(11, b).\ncolor_segment(4, 4). color_segment(12, c).\ncolor_segment(5, 5). color_segment(13, d).\ncolor_segment(6, 6). color_segment(14, e).\ncolor_segment(7, 7). color_segment(15, f).\n\ngen_color_seg(C) :-\n    random_between(0, 15, X),\n    color_segment(X, C);\n    gen_color_seg(C).\n\ngenerate_color(Color) :-\n    findnsols(6, C, gen_color_seg(C), Color1),\n    format(atom(Color), \"#~p~p~p~p~p~p\", Color1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231217,"user_id":null,"body":"generate_color(Color):- List=[0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f], fillList(List, SubL,0),\natomics_to_string(['#'|SubL],Color).\n\n\nfillList(List,[],6).\nfillList(List,[H|T],R):-R<6, random_member(H,List),NewR is R+1,fillList(List,T,NewR).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231218,"user_id":277,"body":"generate_color(Color) :-\n   repeat,\n   random(0, 0xFFFFFF, AColor),\n   LColor = [AColor],\n   format(atom(Color),'#~|~`0t~16r~6+', LColor)\n   .","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231219,"user_id":277,"body":"generate_color(Color) :-\n  length(Cs, 6),\n  maplist([C] >> random_member(C, `!@#$%^&*()`), Cs),\n  string_codes(Color, [0'# | Cs]).\n\ngenerate_color(\"#000000\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231220,"user_id":277,"body":"generate_color(Color):-\n  random(0,0xFFFFFF,Number_in_range),\n  format(string(Color),\"#~16r\",Number_in_range).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231221,"user_id":544,"body":"generate_color(C) :- \n  N is random(16777215),\n  format(atom(C), '#~16r', N).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"56f69d9f9400f508fb000ba7":[{"id":231222,"user_id":645,"body":"monkey_count(N, R) :- numlist(1, N, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231223,"user_id":null,"body":"monkey_count(1, [1]).\n\nmonkey_count(N, R) :- \n N1 is N-1,\n monkey_count(N1, R1),\n append(R1,[N],R).\n ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231224,"user_id":null,"body":"monkey_count(N, R) :- \n%  findall(Nm, between(1, N, Nm), R).\n%  bagof(Nm, between(1, N, Nm), R).\n%  numlist(1, N, R).\n  \n  length(R, N), foldl([Re, I, Ac] >> (Re is I, Ac is I + 1), R, 1, _).\n  % foldl \u306b\u6e21\u3059\u8ff0\u8a9e Pred \u306f\u7b2c 1 \u5f15\u6570\u306b\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u3001\n  %\u7b2c 2 \u5f15\u6570\u306b\u521d\u671f\u5024 (\u307e\u305f\u306f\u7d2f\u7a4d\u5909\u6570) \u304c\u6e21\u3055\u308c\u3001\n  %\u7b2c 3 \u5f15\u6570\u306b\u7d50\u679c\u304c\u683c\u7d0d\n \n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231225,"user_id":53,"body":"f(B,I,X,R) :-\n  (I < B ->\n    J is I + 1,\n    append(X, [J], Y),\n    f(B,J,Y,R);\n   R = X).\n\nmonkey_count(N, R) :- \n  f(N,0,[],R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231226,"user_id":null,"body":"monkey_count(N, R) :- findall(Num, between(1, N, Num), R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231227,"user_id":null,"body":"monkey_count(N, R) :- \n  length(R, N),\n  foldl([I,C,D]>>(I is C, D is C + 1), R, 1, _).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231228,"user_id":null,"body":"monkey_count(N, R) :-\n  length(R, N),\n  findall(X, between(1, N, X),R) .","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231229,"user_id":null,"body":"monkey_count(1, [1]).\nmonkey_count(N, R) :- \n  Nd is N - 1,\n  monkey_count(Nd, Rd),\n  append(Rd, [N], R).\n\n\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231230,"user_id":null,"body":"monkey_count(N, R) :-\n  findall(Cur, between(1, N, Cur), R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231231,"user_id":null,"body":"monkey_count(N, R) :- findall(L,between(1,N,L),R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"57036f007fd72e3b77000023":[{"id":231232,"user_id":null,"body":":- module(greet, [greet\/0]).\ngreet :- write('Hello World!'), nl.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231233,"user_id":null,"body":"% define your greet module\n% define your greet function that prints the line hello world\n\n:- module(greet, [greet\/0]).\n\ngreet :- writeln('Hello World!').","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231234,"user_id":null,"body":"% define your greet module\n% define your greet function that prints the line hello world\n:- module(greet, [greet\/0]).\n\ngreet() :- write(\"Hello World!\n\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231235,"user_id":null,"body":"% define your greet module\n% define your greet function that prints the line hello world\n:- module(greet, [word\/1, alias_of\/2]).\ngreet:-write('Hello World!\n').","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231236,"user_id":null,"body":"% This is the worst thing mankind ever created\n\n:- module(greet, [greet\/2]).\n\ngreet() :-\n  write('Hello World!\n')\n  .\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231237,"user_id":168,"body":":- module(greet, [greet\/0]).\n\ngreet() :- write('Hello World!\n').","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231238,"user_id":null,"body":"% define your greet module\n% define your greet function that prints the line hello world\n:- module(greet, [greet\/2]).\n\ngreet() :- write(\"Hello World!\"), nl.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231239,"user_id":null,"body":":- module(greet, [greet\/0]).\n\ngreet :- format(\"Hello World!~n\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231240,"user_id":null,"body":"% define your greet module\n% define your greet function that prints the line hello world\n:-module(greet,[greet\/0]).\ngreet :-\n  write('Hello World!'), nl.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231241,"user_id":76,"body":"greet :- write('Hello World!\n').","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"570409d3d80ec699af001bf9":[{"id":231242,"user_id":168,"body":"fusc(N, N) :- N =< 1, !.\nfusc(N, R) :-\n  M is N \/\/ 2, \n  fusc(M, A),\n  (mod(N, 2) =:= 0 -> R = A; M1 is M + 1, fusc(M1, B), R is A + B).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231243,"user_id":null,"body":"even(N) :- mod(N, 2) =:= 0.\nodd(N)  :- mod(N, 2) =:= 1.\n\nfusc(0, 0).\nfusc(1, 1).\nfusc(N, Result) :-\n  N > 1,\n  even(N),\n  N1 is N \/\/ 2,\n  fusc(N1, Result).\nfusc(N, Result) :-\n  N > 1,\n  odd(N),\n  N1 is N \/\/ 2,\n  fusc(N1, R1),\n  fusc(N1 + 1, R2),\n  Result is R1 + R2.\n  \n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231244,"user_id":218,"body":"fusc(0, 0).\nfusc(1, 1).\nfusc(N, Result) :- (N mod 2) =:= 0, A is N \/ 2, fusc(A, Result).\nfusc(N, Result) :- (N mod 2) =:= 1, A is (N-1) \/ 2, fusc(A, R1), fusc(A + 1, R2), Result is R1 + R2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231245,"user_id":544,"body":"fusc(0, 0).\nfusc(1, 1).\n\nfusc(N, R) :- \n  0 is N mod 2, N0 is N \/ 2, \n  fusc(N0, R);   \n  N0 is N \/\/ 2, N1 is N0 + 1,\n  fusc(N0, R0), fusc(N1, R1),\n  R is R0 + R1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231246,"user_id":null,"body":"fusc(0,0).\nfusc(1,1).\nfusc(X1,Y) :- 0 is X1\/\\1, X2 is X1\/\/2, fusc(X2,Y), !.\nfusc(X1,Y1) :- 1 is X1\/\\1, X2 is X1\/\/2, fusc(X2,Y2), X3 is X2+1, fusc(X3,Y3), Y1 is Y2+Y3, !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231247,"user_id":53,"body":"fusc(0, Result) :- Result is 0.\nfusc(1, Result) :- Result is 1.\nfusc(N, Result) :-\n  M is div(N, 2),\n  R is mod(N, 2),\n  (0 is R  ->\n      fusc(M, Result)\n    ;\n      O is M + 1,\n      fusc(M, A),\n      fusc(O, B),\n      Result is A + B\n    )\n  .","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231248,"user_id":null,"body":"fusc(0, 0) :- !.\nfusc(1, 1) :- !.\nfusc(N, R) :-\n  divmod(N, 2, Q, Rem),\n  ( 0 is Rem -> fusc(Q, R)\n  ; fusc(Q, R1), I2 is Q+1, fusc(I2, R2),\n    R is R1+R2\n  ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231249,"user_id":null,"body":"fusc(0, 0).\nfusc(1, 1).\nfusc(N, R) :- 0 is mod(N,2), N1 is N\/2, fusc(N1,R).\nfusc(N, R) :- N1 is (N-1)\/2, fusc(N1,R1), fusc(N1+1,R2), R is R1+R2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231250,"user_id":null,"body":"fusc(0, 0) :- !.\nfusc(1, 1) :- !.\nfusc(N, R) :-\n  0 is N mod 2,\n  N1 is N div 2,\n  fusc(N1, R).\nfusc(N, R) :-\n  1 is N mod 2,\n  N1 is N div 2,\n  succ(N1, N2), \n  fusc(N1, R1),\n  fusc(N2, R2),\n  R is R1 + R2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231251,"user_id":null,"body":"fusc(0, 0).\nfusc(1, 1).\nfusc(N, A) :-\n  0 is N mod 2,\n  B is N \/ 2, \n  fusc(B, A).\nfusc(N, Result) :-\n  1 is N mod 2,\n  V is (N - 1) \/ 2,\n  fusc(V, T1),\n  V1 is V + 1,\n  fusc(V1, T2),\n  Result is T1 + T2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5709bdd2f088096786000008":[{"id":231252,"user_id":527,"body":"super_size(Num, Result) :- \n  number_codes(Num, Ds),\n  sort(0, @>=, Ds, Es),\n  number_codes(Result, Es).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231253,"user_id":544,"body":"super_size(Num, Result) :- \n    number_chars(Num, DigitAtoms), \n    sort(0, @>=, DigitAtoms, SortedDigits),\n    atomic_list_concat(SortedDigits, ResultAtom),\n    atom_number(ResultAtom, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231254,"user_id":null,"body":"super_size(Num, Result) :- \n  digitize(Num, List),\n  sort(0, @=<, List, SList),\n  undigitize(SList, 1, Result).\n\ndigitize(N, R) :- \n  N > 0,\n  Curr is N mod 10,\n  Next is N \/\/ 10,\n  digitize(Next, R1),\n  append([Curr], R1, R)\n; append([],[],R).\n\nundigitize([X|Xs], Prod, R) :- \n  length(Xs, Len),\n  Len > 0,\n  NewProd is Prod*10,\n  undigitize(Xs, NewProd, Sum),\n  R is X*Prod+Sum\n; R is X*Prod. \n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231255,"user_id":null,"body":"super_size(X, Y) :- \n  number_codes(X, Xs),\n  sort(0, @>=, Xs, Ys),\n  atom_codes(S, Ys),\n  read_from_chars(S, Y).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231256,"user_id":null,"body":"super_size(Num, Result) :-\n    number_codes(Num, Codes),\n    maplist([X,Y] >> number_codes(Y, [X]), Codes, Numbers),\n    sort(0, @>=, Numbers, Sorted),\n    atomics_to_string(Sorted, String),\n    number_string(Result, String).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231257,"user_id":3088,"body":"super_size(Num, Result) :- \n  to_digits(Num, Ds),\n  msort(Ds, D1s),\n  from_digits(D1s, Result).\n  \nto_digits(0, []).\nto_digits(N, [N0|Ds]) :- \n  N > 0,\n  N0 is N rem 10,\n  Ns is N \/\/ 10,\n  to_digits(Ns, Ds).\n\nfrom_digits([X], X).\nfrom_digits([D|Ds], R) :-\n  from_digits(Ds, R0),\n  R is R0 * 10 + D.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231258,"user_id":null,"body":"super_size(Num, Result) :- \n    number_chars(Num, DgtAtm), \n    sort(0, @>=, DgtAtm, SrtDgt),\n    number_chars(Result, SrtDgt).\n%    atomic_list_concat(SrtDgt, RltAtm),\n%    atom_number(RltAtm, Result).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231259,"user_id":168,"body":"super_size(Num, Result) :- \n  number_chars(Num, X),\n  sort(0, @>=, X, Y),\n  number_chars(Result, Y).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231260,"user_id":null,"body":"to_list(0, []) :- !.\nto_list(Number, [X|L]) :- Quot is Number \/\/ 10, X is Number mod 10, to_list(Quot, L).\n\nfrom_list([], 0).\nfrom_list([X|L], Number) :- from_list(L, Number2), Number is X + 10 * Number2.\n\nsuper_size(Num, Result) :- to_list(Num, L), msort(L, LL), from_list(LL, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231261,"user_id":1180,"body":"super_size(Num, Result) :- \n  number_string(Num, NumStr), \n  string_chars(NumStr, NumChars), \n  sort(0, @>=, NumChars, SortedNumChars),\n  string_chars(ResultString, SortedNumChars), \n  number_string(Result, ResultString).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5726f813c8dcebf5ed000a6b":[{"id":231262,"user_id":53,"body":"\ncount_prime_factors_aux(N, I, Acc, L, R) :-\n  M is div(N, I),\n  (L == 0, I > M ->\n      (N > 1 ->\n        Acc2 is Acc + 1,\n        R = Acc2;\n        R = Acc);\n   0 is mod(N, I) -> \n      N2 is div(N, I),\n      Acc2 is Acc + 1,\n      count_prime_factors_aux(N2, I, Acc2, 1, R);\n   I2 is I + 1, \n   count_prime_factors_aux(N, I2, Acc, 0, R)).\n\ncount_prime_factors(0, R) :- R = 0.\ncount_prime_factors(K, R) :-\n  count_prime_factors_aux(K, 2, 0, 0, R).\n\ncount_kprimes_aux(K, N, End, Ls, R) :-\n  (N > End -> \n      reverse(Ls, R);\n   count_prime_factors(N, J),\n   N2 is N + 1,\n   (J == K -> \n      count_kprimes_aux(K, N2, End, [N | Ls], R);\n    count_kprimes_aux(K, N2, End, Ls, R))).\n\ncount_kprimes(K, Start, End, Ls) :-\n  count_kprimes_aux(K, Start, End, [], Ls).\n\npuzzle_aux(S, Xs, Ys, I, J, Acc, R) :-\n  length(Xs, Xw),\n  (I >= Xw -> \n      R = Acc;\n   length(Ys, Yw),\n   (J >= Yw ->\n      I2 is I + 1,\n      puzzle_aux(S, Xs, Ys, I2, 0, Acc, R);\n    nth0(I, Xs, A),\n    nth0(J, Ys, B),\n    J2 is J + 1,\n    C is S - A - B,\n    count_prime_factors(C, K),\n    (C > 0, K == 1 ->\n      Acc2 is Acc + 1,\n      puzzle_aux(S, Xs, Ys, I, J2, Acc2, R);\n     puzzle_aux(S, Xs, Ys, I, J2, Acc, R)))).\n\npuzzle(S, C) :-\n  count_kprimes(7, 128, S - 10, Xs),\n  count_kprimes(3, 8, S - 130, Ys),\n  puzzle_aux(S, Xs, Ys, 0, 0, 0, C).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231263,"user_id":null,"body":"kprime(K, N) :- kprime_aux(K, N, 2).\n\nspf_aux(N, M, _) :- M > N, !, fail.\nspf_aux(N, M, N) :- M * M > N, !.\nspf_aux(N, M, M) :- N mod M =:= 0, !.\nspf_aux(N, M, P) :- M1 is M + 1, spf_aux(N, M1, P). \n\nkprime_aux(0, 1, _).\nkprime_aux(_, N, M) :- M > N, !, fail.\nkprime_aux(K, N, M) :-\n    spf_aux(N, M, P),\n    K1 is K - 1,\n    N1 is N \/\/ P,\n    kprime_aux(K1, N1, P).\n\nfrom_to(Start, End, []) :- Start > End.\nfrom_to(Start, End, [Start | Xs]) :- S is Start + 1, from_to(S, End, Xs).\n\ncount_kprimes(K, Start, End, Ls) :- from_to(Start, End, Xs), include(kprime(K), Xs, Ls).\n\npuzzle(S, Count) :- findall((A, B, C), puzzle_aux(S, A, B, C), Xs), length(Xs, Count).\n\npuzzle_aux(S, A, B, C) :-\n    X1 is S - 2 - 8, \n    between(128, X1, C),\n    kprime(7, C),\n    X2 is S - 2 - C,\n    between(8, X2, B),\n    kprime(3, B),\n    A is S - B - C,\n    kprime(1, A).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231264,"user_id":492,"body":"mult_num(Num, Ls) :- Num > 0, mult_num(Num, Ls, 2).\nmult_num(1, [], _) :- !.\nmult_num(Num, [Cnt|Ls], F) :- div(Num, F, Cnt, Qu), !,\n   follow(Qu, F, NewF), mult_num(Qu, Ls, NewF).\nmult_num(Num, Ls, F) :- !, \n   follow(Num, F, NewF), mult_num(Num, Ls, NewF).\ndiv(Num, F, Cnt, Qu) :- aux(Num, F, Cnt, Qu, 0), Cnt > 0.\naux(Num, F, Cnt, Qu, K) :- S is Num \/\/ F, Num =:= S * F, !,\n   K1 is K + 1, aux(S, F, Cnt, Qu, K1).\naux(Num, _, Cnt, Num, Cnt).\nfollow(_, 2, 3) :- !.\nfollow(Num, F, NewF) :- F * F < Num, !, NewF is F + 2.\nfollow(Num, _, Num).  \n\ncount_p(N, K, U) :- \n    mult_num(N, Ls),\n    foldl([A, B, R] >> (R is A + B), Ls, 0, C),\n    (C =:= K ->\n        U = N\n    ;\n        U = -1\n    ).\n\ndifferent(X, Y) :-\n    X=\\=Y.\nnegative(Number) :-\n    Number < 0.\ncount_kprimes(K, Start, End, Ls) :-\n    findall(X, between(Start, End, X), Xs),\n    maplist([A, U] >> (count_p(A, K, U)), Xs, Ms),\n    exclude(negative, Ms, Ls).\n\npuzzle(S, C) :-\n    count_kprimes(1, 2, S, As),\n    count_kprimes(3, 8, S, Bs),\n    count_kprimes(7, 128, S, Cs),\n    findall(X,\n            ( member(A, As),\n              member(B, Bs),\n              member(C, Cs),\n              X is A + B + C)\n            ,\n              L\n           ),\n     exclude(different(S), L, U), \n     length(U, C).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231265,"user_id":null,"body":"count_kprimes(K, Start, End, Ls) :-\n  aggregate_all(bag(N), (between(Start,End,N), kprime(K,N)), Ls).\n\nkprime(K,N) :- factors(N,2,Fs), length(Fs,K).\nfactors(N,F,R) :-\n  N<F*F -> R=[N]\n; divmod(N,F,M,0) -> R=[F|L], factors(M,F,L)\n; succ(F,G), factors(N,G,R).\n\npuzzle(S,C) :-\n  maplist(count_kprimes,[1,3,7],[2,2,2],[S,S,S],[P1s,P3s,P7s]),\n  aggregate_all(count,(\n    member(P1,P1s), member(P3,P3s), member(P7,P7s), S =:= P1+P3+P7\n  ), C).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231266,"user_id":76,"body":"count_kprimes(K, Start, End, Ls) :-\n  findall(N, (between(Start, End, N), number_factors(N, F), F =:= K), Ls).\n\nnumber_factors(N, R) :-\n  number_factors_(N, 2, 0, R).\n\nnumber_factors_(N, D, C, R) :-\n  D * D > N, !,\n  (N > 1 -> F = 1 ; F = 0),\n  R is C + F.\n\nnumber_factors_(N, D, C, R) :-\n  N mod D =:= 0 \n    -> N1 is N \/\/ D, succ(C, C1), number_factors_(N1, D, C1, R)\n    ; succ(D, D1), number_factors_(N, D1, C, R).\n\npuzzle(S, C) :-\n  count_kprimes(1, 2, S, Ones),\n  count_kprimes(3, 2, S, Threes),\n  count_kprimes(7, 2, S, Sevens),\n  aggregate_all(count, (member(A, Ones), member(B, Threes), member(C, Sevens), A + B + C =:= S), C).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231267,"user_id":null,"body":"count_factors(1, _, Acc, Acc).\ncount_factors(N, P, Acc, Res) :-\n  P * P > N,\n  !,\n  Res is Acc + 1.\ncount_factors(N, P, Acc, Res) :-\n  mod(N, P) =:= 0,\n  !,\n  NewN is N \/ P,\n  NewAcc is Acc + 1,\n  count_factors(NewN, P, NewAcc, Res).\ncount_factors(N, P, Acc, Res) :-\n  NewP is P + 1,\n  count_factors(N, NewP, Acc, Res).\n\ncount_kprimes(_, Start, End, []) :-\n  Start > End,\n  !.\ncount_kprimes(K, Start, End, [Start|Rest]) :-\n  count_factors(Start, 2, 0, K),\n  !,\n  Next is Start + 1,\n  count_kprimes(K, Next, End, Rest).\ncount_kprimes(K, Start, End, Ls) :-\n  Next is Start + 1,\n  count_kprimes(K, Next, End, Ls).\n\nsolve([X|_], L3, L1, S) :-\n  Y is S - X,\n  solve2(L3, L1, Y).\nsolve([_|L7], L3, L1, S) :-\n  solve(L7, L3, L1, S).\n\nsolve2([X|_], L1, S) :-\n  Y is S - X,\n  Y >= 2,\n  sorted_member(Y, L1).\nsolve2([_|L3], L1, S) :-\n  solve2(L3, L1, S).\n\nsorted_member(X, [X|_]).\nsorted_member(X, [Y|L]) :-\n  Y < X,\n  sorted_member(X, L).\n  \npuzzle(S, C) :-\n  End7 is S - 10,\n  End3 is S - 130,\n  End1 is S - 136,\n  count_kprimes(7, 128, End7, L7),\n  count_kprimes(3, 8, End3, L3),\n  count_kprimes(1, 2, End1, L1),\n  aggregate_all(count, solve(L7, L3, L1, S), C).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231268,"user_id":null,"body":"% :'D barely passed before time out, due to is_kprime being tested for huge ranges and huge numbers\n% takes 8119 ms to pass all \ncount_kprimes(K,Start, End, L):- \n  findall(N, (between(Start, End, N), is_kprime(K,N)), L).\n\nis_prime(2).\nis_prime(3).\nis_prime(N):-\n\tN > 3,\n\t0 =\\= mod(N,2),\n\t0 =\\= mod(N,3),\n\tLimit is ceil(sqrt(N)),\n\tis_prime(N,Limit,5).\n\t\nis_prime(_,Lim, P):- P > Lim,!.\nis_prime(N,Lim,P):-\n\tLim >= P,\n\t0 =\\= mod(N,P),\n\t0 =\\= mod(N,P+2),\n\tP1 is P+6,\n\tis_prime(N,Lim, P1).\n\nis_kprime(1,N):-\n\tis_prime(N),!.\nis_kprime(K,N):-\n\tK > 1,\n\t\\+ is_prime(N),\n\tLimit is ceil(sqrt(N)),\n\tis_kprime(K,N,2,0,Limit).\n\t\nis_kprime(0,1, _,_,_):-  !.\nis_kprime(1,N, _,_, _):- is_prime(N), !.\nis_kprime(K,N, 2,_, Limit):-\n\tLimit >= 2,\n\tK > 1,\n\t0 =:= mod(N,2),!,\n\tsucc(K1, K),\n\tN1 is N \/\/ 2,\n\tis_kprime(K1, N1, 2,0,Limit), !.\n\nis_kprime(K, N, 2,0,Limit):-\n\tK > 1,\n\tLimit >= 2,\n\t0 =\\= mod(N,2),!,\n\tis_kprime(K,N,3,0,Limit), !.\n\t\nis_kprime(K, N, 3, 0, Limit):-\n\tK > 1,\n\tLimit >= 3,\n\t0 =:= mod(N,3),!,\n\tsucc(K1, K),\n\tN1 is N \/\/ 3,!,\n\tis_kprime(K1,N1,3,0,Limit), !.\n\t\nis_kprime(K, N, 3,0,Limit):-\n\tK > 1,\n\tLimit >= 3,\n\t0 =\\= mod(N,3),!,\n\tis_kprime(K,N,5,0,Limit), !.\n\t\nis_kprime(K,N,P,M,Limit):-\n\tK > 1,\n\tLimit >= P,\n\t0 =:= mod(N,P),!,\n\tsucc(K1, K),\n\tN1 is N \/\/ P,!,\n\tis_kprime(K1,N1,P,M,Limit), !.\n\t\nis_kprime(K,N,P,M,Limit):-\n\tK > 1,\n\tLimit >= P+2,\n\t0 =:= mod(N,P+2),!,\n\tsucc(K1,K),\n\tN1 is N \/\/ (P+2),!,\n\tis_kprime(K1,N1,P,M,Limit), !.\n\t\nis_kprime(K,N,P,M,Limit):-\n\tK > 1,\n\tLimit >= P+2,\n\t0 =\\= mod(N,P),\n\t0 =\\= mod(N,P+2),!,\n\tsucc(M,M1),\n\tP1 is 6*M1+5,\n\tis_kprime(K,N,P1,M1,Limit), !.\n\t\n%%%%%%%%% the real fun\n%a+b+c = Goal\n%a -> 1prime\n%b -> 3prime\n%c -> 7prime\npuzzle(Goal, NumberSol):-\n  count_kprimes(1,2,Goal,OPrime),\n\tcount_kprimes(3,2,Goal,TPrime),\n\tcount_kprimes(7,2,Goal,SPrime),\n\tfindall([A,B,C],solve(Goal, OPrime, TPrime, SPrime,A,B,C),L),\n\tlength(L, NumberSol).\n\t\nsolve(Goal, [OPrime|_],[TPrime|_],[SPrime|_],OPrime,TPrime,SPrime):-\n\tGoal =:= OPrime + TPrime + SPrime.\nsolve(Goal,OPrimes,TPrimes,[SPrime|_],A,B,SPrime):-\n\tGoal2 is Goal - SPrime,\n\tsolve(Goal2,OPrimes, TPrimes,A,B).\nsolve(Goal, OPrimes, TPrimes, [_|SPrimes], A,B,C):-\n\tsolve(Goal, OPrimes, TPrimes, SPrimes, A,B,C).\n\t\nsolve(Goal, [OPrime|_],TPrimes,OPrime, B):-\n\tB is Goal - OPrime,\n\tmember(B, TPrimes).\nsolve(Goal, [_|OPrimes], TPrimes, A,B):-\n\tsolve(Goal,OPrimes,TPrimes,A,B).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5738f5ea9545204cec000155":[{"id":231269,"user_id":645,"body":"count_letters_and_digits(I, R) :-\n  string_chars(I, A),\n  include(is_alnum, A, L),\n  length(L, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231270,"user_id":null,"body":"count_letters_and_digits(Input, Result) :- length(R,Result), string_to_list(Input, L), include([X] >> char_type(X, alnum), L, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231271,"user_id":null,"body":"\n% counts number of letters and digits in list of chars\ncnt_in_ccodes([], 0).\ncnt_in_ccodes([H|T], R) :-\n (\n  (H >= 48, H =< 57);\n  (H >= 65, H =< 90);\n  (H >= 97, H =< 122)\n ),\n cnt_in_ccodes(T, R1),\n R is 1 + R1.\ncnt_in_ccodes([_|T], R) :- cnt_in_ccodes(T, R).\n\n\ncount_letters_and_digits(Input, Result) :-\n  string_codes(Input, Codes),\n  cnt_in_ccodes(Codes, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231272,"user_id":null,"body":"sum_in_bound(L,R,O) :- is_alnum(L) -> O is R+1 ; O is R.\ncount_letters_and_digits(Input, Result) :-\n  string_codes(Input, Codes),\n  foldl(sum_in_bound, Codes, 0, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231273,"user_id":544,"body":"count_letters_and_digits(Input, Result) :-\n    atom_chars(Input, CharList),    \n    include(is_alnum, CharList, FilteredInput),\n    length(FilteredInput, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231274,"user_id":null,"body":"count_letters_and_digits(Input, Result) :-\n  string_chars(Input, Chars),\n  foldl(char_acc_sum, Chars, 0, Result).\n  \nchar_acc_sum(Char, Acc, Sum) :-\n  (\n    char_type(Char, alnum)\n  ->\n    Sum is Acc + 1\n  ;\n    Sum = Acc\n  ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231275,"user_id":null,"body":"count_letters_and_digits(Input, Result) :-\n  string_codes(Input, Codes),\n  include([C] >> (between(48, 57, C); between(65, 90, C); between(97, 122, C)), Codes, Filtered),\n  length(Filtered, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231276,"user_id":null,"body":"% It's long and ugly, but it check if the char is a digit or a letter\nisOk(C) :- C='0'; C='1'; C='2'; C='3'; C='4'; C='5'; C='6'; C='7'; C='8'; C='9';\n C='a'; C='b'; C='c'; C='d'; C='e'; C='f'; C='g'; C='h'; C='i'; C='j'; C='k'; C='l'; C='m'; C='n'; C='o'; C='p'; C='q'; C='r'; C='s'; C='t'; C='u'; C='v'; C='w'; C='x'; C='y'; C='z';\n C='A'; C='B'; C='C'; C='D'; C='E'; C='F'; C='G'; C='H'; C='I'; C='J'; C='K'; C='L'; C='M'; C='N'; C='O'; C='P'; C='Q'; C='R'; C='S'; C='T'; C='U'; C='V'; C='W'; C='X'; C='Y'; C='Z'.\n\n% This one take a list of Chars as input, and counts only the valid ones\ncount_valid_chars([]     , 0 ).\ncount_valid_chars([H|Xs] , L ) :-isOk(H), count_valid_chars(Xs,N) , L is N+1 .\ncount_valid_chars([H|Xs] , L ) :- count_valid_chars(Xs,N) , L is N .\n\n\ncount_letters_and_digits(Input, Result) :- atom_chars(Input,List),\n                                           count_valid_chars(List,Result).\n\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231277,"user_id":null,"body":"count_letters_and_digits(S, Result) :-\n  string_chars(S, Chars),\n  phrase(count_letters_and_digits(Chars, 0, Result), _).\n  \ncount_letters_and_digits([], N, N) --> [].\n  \ncount_letters_and_digits([C|T], N, L) -->\n  { is_alnum(C), NextN is N+1, ! },\n  [C],\n  count_letters_and_digits(T, NextN, L).\n\ncount_letters_and_digits([C|T], N, L) -->\n  { not(is_alnum(C)), ! },\n  count_letters_and_digits(T, N, L).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231278,"user_id":null,"body":"count_letters_and_digits(S, Result) :-\n  string_chars(S,Lst),\n  include([X]>>(char_type(X,alnum)),Lst,Lds),\n  length(Lds,Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"574b3b1599d8f897470018f6":[{"id":231279,"user_id":null,"body":"get_real_floor(N, Result) :-\n  N < 1, Result is N;\n  N < 13, Result is N-1;\n  Result is N-2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231280,"user_id":null,"body":"get_real_floor(N, N) :- N =< 0, !.\nget_real_floor(N, N1) :- N < 13, !, N1 is N - 1.\nget_real_floor(N, N1) :- N1 is N - 2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231281,"user_id":null,"body":"get_real_floor(N, Result) :- N>13, Result is N-2.\nget_real_floor(N, N) :- N<1.\nget_real_floor(N, Result) :- Result is N-1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231282,"user_id":null,"body":"get_real_floor(N, Result) :-\n  % Your code here.\n  (N =< 0, Result is N); (N =< 13, Result is N-1); (Result is N-2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231283,"user_id":null,"body":"get_real_floor(N, Result) :- N < 0, Result is N.\nget_real_floor(0, 0).\nget_real_floor(N, Result) :- N >= 1, N =< 12, Result is N - 1.\nget_real_floor(N, Result) :- N > 13, Result is N - 2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231284,"user_id":null,"body":"get_real_floor(N, Result) :- N =< 0, Result is N, !.\nget_real_floor(N, Result) :- N =< 13, Result is N - 1.\nget_real_floor(N, Result) :- N >= 13, Result is N - 2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231285,"user_id":null,"body":"get_real_floor(N, Result) :-\n    N =< 0,\n    Result is N,\n    !.\n\nget_real_floor(N, Result) :-\n    N > 13,\n    Result is N - 2,\n    !.\n    \nget_real_floor(N, Result) :-\n    Result is N-1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231286,"user_id":null,"body":"get_real_floor(N, Result) :-\n  N > 13, Result is N-2;\n  N > 0, Result is N-1;\n  N < 0, Result is N;\n  N =:= 0, Result is 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231287,"user_id":null,"body":"\nget_real_floor(0, 0).\nget_real_floor(N, N) :- N < 0.\nget_real_floor(N, R) :- N < 13, R is N-1.\nget_real_floor(N, R) :- N > 13, R is N-2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231288,"user_id":null,"body":"get_real_floor(0, 0).\nget_real_floor(N, Result) :-\n  N > 13,\n  Result is N - 2.\n  \nget_real_floor(N, N) :-\n  N < 0.\n\n  \nget_real_floor(N, Result) :-  \n  Result is N - 1.\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"577bd026df78c19bca0002c0":[{"id":231289,"user_id":76,"body":"correct(String, Result) :-\n  string_chars(String, Chars),\n  maplist(undigitise, Chars, CorrectedChars), !,\n  string_chars(Result, CorrectedChars).\n  \nundigitise('5', 'S').\nundigitise('0', 'O').\nundigitise('1', 'I').\nundigitise(C, C).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231290,"user_id":53,"body":":- use_module(library(pcre)).\n\ncorrect(S,R) :-\n  re_replace('0'\/g,'O',S,A),\n  re_replace('1'\/g,'I',A,B),\n  re_replace('5'\/g,'S',B,R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231291,"user_id":null,"body":"correct(String, Result) :-\n  atom_codes(String, List),\n  process(List, Processed),\n  atom_codes(Atom, Processed),\n  atom_string(Atom, Result).\nprocess([], []).\nprocess([H|T], [R|Rest]) :-\n  replace5(H, X5),\n  replace0(X5, X0),\n  replace1(X0, R),\n  process(T, Rest).\nreplace5(53, 83).\nreplace5(X, X) :- X =\\= 53.\nreplace0(48, 79).\nreplace0(X, X) :- X =\\= 48.\nreplace1(49, 73).\nreplace1(X, X) :- X =\\= 49.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231292,"user_id":null,"body":"replace_all([],R,[],R).\nreplace_all([A|As],L,[B|Bs],R) :-\n  select(A,L,B,R0),\n  replace_all([A|As],R0,[B|Bs],R).\nreplace_all([_|As],L,[_|Bs],R) :-\n  replace_all(As,L,Bs,R).\n\ncorrect(String, Result) :-\n  string_chars(String,Cs0),\n  once(replace_all(['5','0','1'],Cs0,['S','O','I'],Cs1)),\n  string_chars(Result,Cs1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231293,"user_id":168,"body":"subst('5', 'S') :- !.\nsubst('0', 'O') :- !.\nsubst('1', 'I') :- !.\nsubst(X, X).\n\ncorrect(String, Result) :-\n  string_chars(String, Xs),\n  maplist(subst, Xs, Ys),\n  string_chars(Result, Ys).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231294,"user_id":527,"body":"correct(Raw, Corrected) :-\n  string_chars(Raw, Rcs),\n  maplist(correct_char, Rcs, Ccs),\n  string_chars(Corrected, Ccs).\n\ncorrect_char('5', 'S') :- !.\ncorrect_char('0', 'O') :- !.\ncorrect_char('1', 'I') :- !.\ncorrect_char(C, C).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"57a049e253ba33ac5e000212":[{"id":231295,"user_id":1140,"body":"factorial(N, R) :- \n  N > 1,\n  M is N - 1,\n  factorial(M, P),\n  R is N * P.\nfactorial(N, 1) :- N =< 1.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231296,"user_id":53,"body":"factorial(N, R) :- factorial(N, 1, R).\nfactorial(0, R, R) :- !.\nfactorial(N, M, R) :-\n    N1 is N - 1,\n    M1 is M * N,\n    factorial(N1, M1, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231297,"user_id":null,"body":"factorial(N, R) :- once(fac(N, 1, R)).\n\nfac(0, R, R).\nfac(N, A, R) :-\n  B is N * A,\n  M is N - 1,\n  fac(M, B, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231298,"user_id":null,"body":"factorial(0, 1).\nfactorial(N, R) :-\n  N > 0,\n  N1 is N - 1,\n  factorial(N1, Rest),\n  R is N * Rest.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231299,"user_id":null,"body":"factorial(X,Fact) :-\n ( X =:= 0 -> Fact is 1\n ; X > 0,\n NewX is X - 1,\n factorial(NewX,NF),\n Fact is X * NF\n).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231300,"user_id":76,"body":":- use_module(library(clpfd)).\n\nfactorial(0, 1).\nfactorial(N, R) :-\n  N #> 0, \n  R #= N * R0, \n  succ(N0, N), \n  factorial(N0, R0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231301,"user_id":null,"body":"\nfactorial(0, 1):-!.\n\n\n\nfactorial(N, R) :-\n   N1 is N -1,\n   factorial(N1, R2),\n   R is N * R2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231302,"user_id":null,"body":"factorial(0, 1).\nfactorial(N, Res) :- NewN is N - 1,\n                     factorial(NewN, NewRes),\n                     Res is N * NewRes.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231303,"user_id":492,"body":"factorial(X, 1) :- X < 2.\nfactorial(X, F) :- Y is X-1, factorial(Y,Z), F is Z*X.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231304,"user_id":null,"body":"\/*factorial(0, 1).\nfactorial(N, R) :-\n  N > 0,\n  PrevN is N - 1,\n  factorial(PrevN, PrevR),\n  R is PrevR * N.*\/\n\nfactorial(N, R) :- factorial(N, 1, R).\nfactorial(0, R, R) :- !.\nfactorial(N, Acc, R) :-\n  NextN is N - 1,\n  NextAcc is Acc * N,\n  factorial(NextN, NextAcc, R).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"57cebe1dc6fdc20c57000ac9":[{"id":231305,"user_id":null,"body":"find_short(String, Result) :-\n  split_string(String, \" \", \"\", Splitted),\n  maplist(string_length, Splitted, Lengths),\n  min_member(Result, Lengths).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231306,"user_id":527,"body":"find_short(String, Result) :-\n  split_string(String, \" \", \"\", Words),\n  maplist(string_length, Words, Lengths),\n  min_list(Lengths, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231307,"user_id":null,"body":":-use_module(library(dcg\/basics)).\n\nword([]) --> blanks, eos, !.\nword([N|Ns]) --> blanks, string_without(\" \",S), { string_length(S,N) }, word(Ns).\n\nfind_short(String,Result) :-\n    string_codes(String,Codes),\n    phrase(word(Ls),Codes),\n    min_list(Ls, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231308,"user_id":null,"body":"% Store the result inside 2nd argument. Good luck!\nfind_short(String, Result) :-     \n    split_string(String, \" \", \"\", L),    \n\tfind_shortL(L,Result)\n.\n\nfind_shortL([S], R):-\n    string_length(S, R)\n.\nfind_shortL([H1|[H2|T]], Result) :-     \n    string_length(H1, Len1),\n    string_length(H2, Len2),(   \n    ( Len1=<Len2,find_shortL([H1|T],Result) );\n    ( Len2<Len1,find_shortL([H2|T],Result) )\n                          )\n.\n\n\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231309,"user_id":null,"body":"find_short(String, Result) :-\n    words(String, Words-[]), [W1|Ws] = Words,\n    atom_length(W1, L1), shortest(Ws, L1, Result).\n\nshortest([], Result, Result).\nshortest([W|Ws], Shortest, Result) :- atom_length(W, L),\n    (L < Shortest -> shortest(Ws, L, Result) ; shortest(Ws, Shortest, Result)).\n\nwords(String, Words-Acc) :-\n    atom_concat(A, B, String), atom_concat(' ', C, B), !,\n    words(C, Words-[A|Acc]).\nwords(String, Words-Acc) :- Words = [String|Acc].\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231310,"user_id":76,"body":"find_short(String, Result) :- \n  split_string(String, \" \", \"\", Words),\n  maplist([Str, Len] >> (string_length(Str, N), Len is N), Words, Lengths),\n  min_list(Lengths, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231311,"user_id":null,"body":"find_short(String, Result) :-\n  atomics_to_string(Words, \" \", String),\n  maplist(string_length, Words, Lengths),\n  min_member(Result, Lengths).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231312,"user_id":null,"body":"find_minimum_length([],Min,Min).\n\nfind_minimum_length([Head|Tail],Min,Result):-\n    string_length(Head,Length),\n    Length > Min,\n    find_minimum_length(Tail,Min,Result),\n    !.\n    \nfind_minimum_length([Head|Tail],Min,Result):-\n    string_length(Head,Length),\n    Length =< Min,\n    find_minimum_length(Tail,Length,Result),\n    !.\n    \nfind_short(String, Result) :-\n    split_string(String,\" \",\" \",ListOfStrings),\n    find_minimum_length(ListOfStrings,100000,Result),\n    !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231313,"user_id":29,"body":"% Store the result inside 2nd argument. Good luck!\nfind_short(String, Result) :- \n  split_string(String, \"\\s\", \"\", Words),\n  maplist(string_length, Words, WordLengths),\n  min_list(WordLengths, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231314,"user_id":null,"body":"find_short(S, R) :-\n  split_string(S, \" \", \"\", Ws),\n  maplist(string_length, Ws, Lens),\n  min_list(Lens, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"57d814e4950d8489720008db":[{"id":231315,"user_id":null,"body":"index(Array, N, Result) :-\n  nth0(N, Array, E) -> Result is E **N; Result is -1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231316,"user_id":null,"body":"index(Array, N, Result) :- get_element(Array, N, V), V =\\= -1, Result is V ** N.\nindex(Array, N, Result) :- get_element(Array, N, V), V = -1, Result is -1.\n\nget_element([],_,-1).\nget_element([A|_],0,A):-!.\nget_element([_|R],N,A):- Next is N-1, get_element(R, Next, A).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231317,"user_id":null,"body":"index(Array, N, Result) :-\n  length(Array, Length),\n  ( Length < N\n  -> Result is -1\n  ; nth0(N, Array, X), Result is X ** N ).\nindex(_, _, -1). % no idea what garbage the random test are passing","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231318,"user_id":null,"body":"index(Array, N, Result) :-\n  nth0(N,Array,P), \n  length(Array,M), N<M->Result is P^N;Result is -1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231319,"user_id":null,"body":"index(Array, N, Result) :- length(Array, L), \n                           MaxIndex is L-1, \n                           MaxIndex < N, !, \n                           Result is -1.\nindex(Array, N, Result) :- length(Array, L), \n                           MaxIndex is L-1, \n                           N =< MaxIndex, \n                           nth0(N, Array, Elem),\n                           Result is Elem**N.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231320,"user_id":null,"body":"\n% finds number on index\nfind_num([], N, -1) :- N > 0.\nfind_num([H|_], 0, R) :- R is H.\nfind_num([H|T], N, R) :-\n  N1 is N-1,\n  find_num(T,N1,R).\n\nindex(Arr, N, R) :-\n find_num(Arr, N, R1),\n (R1 >= 0, pow(R1, N, R));\n R is -1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231321,"user_id":null,"body":"index(Array, N, Result) :-\n  length(Array, Len),\n  Len > N -> \n  nth0(N, Array, Elem),\n  Result is Elem ** N;\n  Result is -1\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231322,"user_id":null,"body":"index([], N, -1) :- N >= 0, !.\nindex([_|_], 0, 1) :- !.\nindex(List, N, Res) :- N>=0,\n                       I = N,\n                       index(List, N, I, Res).\nindex([], N, I, -1) :- N >= 0, I >=0, !.\nindex([H|_], N, 0, Res) :- Res is H**N, !.\nindex([_|T], N, I, Res) :- NewI is I - 1,\n                          index(T, N, NewI, Res).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231323,"user_id":null,"body":"index(A, N, R) :- nth0(N, A, X), R is X**N.\nindex(_, _, R) :- R is -1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231324,"user_id":null,"body":"index(Array, N, Result) :- nth0(N, Array, E) -> Result is E ^ N ; Result is -1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"57e921d8b36340f1fd000059":[{"id":231325,"user_id":null,"body":"shark(A, B, C, D, true, \"Alive!\") :- A\/C < 2*B\/D, !.\nshark(A, B, C, D, false, \"Alive!\") :- A\/C < B\/D, !.\nshark(_, _, _, _, _, \"Shark Bait!\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231326,"user_id":null,"body":"shark(PontoonDistance, SharkDistance, YourSpeed, SharkSpeed, Dolphin, Result) :-\n  Dolphin == true,\n  (PontoonDistance\/YourSpeed) < (SharkDistance\/(SharkSpeed\/2)),\n  Result = \"Alive!\";\n  Dolphin == false,\n  (PontoonDistance\/YourSpeed) < (SharkDistance\/SharkSpeed),\n  Result = \"Alive!\";\n  Result = \"Shark Bait!\".","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231327,"user_id":3088,"body":"shark(PontoonDistance, SharkDistance, YourSpeed, SharkSpeed, true, \"Alive!\") :-\n  SharkDistance \/ (SharkSpeed \/ 2)  >= PontoonDistance \/ YourSpeed.\n\nshark(PontoonDistance, SharkDistance, YourSpeed, SharkSpeed, true, \"Shark Bait!\") :-\n  SharkDistance \/ (SharkSpeed \/ 2)  < PontoonDistance \/ YourSpeed.\n\nshark(PontoonDistance, SharkDistance, YourSpeed, SharkSpeed, false, \"Alive!\") :-\n  SharkDistance \/ SharkSpeed  >= PontoonDistance \/ YourSpeed.\n\nshark(PontoonDistance, SharkDistance, YourSpeed, SharkSpeed, false, \"Shark Bait!\") :-\n  SharkDistance \/ SharkSpeed  < PontoonDistance \/ YourSpeed.\n\n\n\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231328,"user_id":null,"body":"shark(PontoonDistance, SharkDistance, YourSpeed, SharkSpeed, Dolphin, Result) :-\n  (Dolphin -> K=2; K=1),\n  PontoonDistance\/YourSpeed < K*SharkDistance\/SharkSpeed -> Result=\"Alive!\"; Result=\"Shark Bait!\".","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231329,"user_id":53,"body":"shark(PD, SD, V, SV, D, R) :-\n  (D -> RSV is SV \/ 2 ; RSV is SV),\n  (PD \/ V < SD \/ RSV -> R = \"Alive!\" ; R = \"Shark Bait!\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231330,"user_id":null,"body":"shark(P, S, Y, X, true, \"Alive!\") :- P\/Y < 2*(S\/X).\nshark(P, S, Y, X, false, \"Alive!\") :- P\/Y < S\/X.\nshark(P, S, Y, X, true, \"Shark Bait!\") :- P\/Y >= 2*(S\/X).\nshark(P, S, Y, X, false, \"Shark Bait!\") :- P\/Y >= S\/X.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231331,"user_id":null,"body":"shark(PontoonDistance, SharkDistance, YourSpeed, SharkSpeed, Dolphin, Result) :-\n  (Dolphin = true, S is 2 * (SharkDistance \/ SharkSpeed);\n                   S is SharkDistance \/ SharkSpeed),\n  Y is PontoonDistance \/ YourSpeed,\n  (S =< Y, Result = \"Shark Bait!\"; Result = \"Alive!\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231332,"user_id":null,"body":"shark(_, SharkDistance, _, _, _, Result) :-\n  SharkDistance == 0, Result = \"Shark Bait!\".\nshark(PontoonDistance, SharkDistance, YourSpeed, SharkSpeed, Dolphin, Result) :-\n  (Dolphin == true -> S is div(SharkSpeed,2); S is SharkSpeed),\n  (S == 0 -> T is 1000000; T = div(SharkDistance,S)),\n  (YourSpeed == 0 -> M is 1000000; M = div(PontoonDistance,YourSpeed)),\n  get_result(T, M, Result).\n  \nget_result(T, M, \"Alive!\") :- T > M.\nget_result(_, _, \"Shark Bait!\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231333,"user_id":null,"body":"\nshark(_,_,_,0,_,\"Alive!\").\nshark(PD, SD, YS, SS, true, Result) :-\n  SS > 0, shark(PD, SD, YS, SS\/\/2, false, Result);\n  Result = \"Alive!\".\nshark(PontoonDistance, SharkDistance, YourSpeed, SharkSpeed, _, Result) :-\n  TS is (SharkDistance\/SharkSpeed),\n  TP is (PontoonDistance\/YourSpeed),\n  (TP < TS, Result = \"Alive!\"; Result = \"Shark Bait!\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231334,"user_id":null,"body":"%shark(PD, SD, YS, SS, Dl, R) :-\n%  Dl == true,  (PD \/ YS) < (SD \/ (SS \/ 2)), R = \"Alive!\";\n%  Dl == false, (PD \/ YS) < (SD \/ SS),       R = \"Alive!\";\n%  R = \"Shark Bait!\".\n\n%  (Dl -> K = 2; K = 1),\n%  (PD \/ YS) < (SD \/ (SS \/ K)) -> R = \"Alive!\"; R = \"Shark Bait!\".\n \nshark(PD, SD, YS, SS, true,  \"Alive!\") :- PD \/ YS < SD \/ (SS \/ 2), !.\nshark(PD, SD, YS, SS, false, \"Alive!\") :- PD \/ YS < SD \/ SS, !.\nshark(_, _, _, _, _, \"Shark Bait!\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"57ec8bd8f670e9a47a000f89":[{"id":231335,"user_id":527,"body":"mouth_size(Animal, small) :- downcase_atom(Animal, alligator).\nmouth_size(_, wide).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231336,"user_id":null,"body":"mouth_size(X, small) :- downcase_atom(X, alligator), !.\nmouth_size(_, wide).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231337,"user_id":null,"body":"mouth_size(A, wide) :- \n  atom_string(A,AS), \n  string_lower(AS, B), \n  B \\= \"alligator\".\nmouth_size(_, small).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231338,"user_id":null,"body":"\nmouth_size(Animal, Res) :-\n  downcase_atom(Animal, LowerCase),\n  mouth_size1(LowerCase, Res).\n  \nmouth_size1('alligator', 'small').\nmouth_size1(Animal, 'wide').\n\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231339,"user_id":null,"body":"mouth_size(Animal, 'small') :- downcase_atom(Animal, 'alligator'), !.\nmouth_size(_, 'wide').","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231340,"user_id":null,"body":"\nmouth_size(Animal, Res) :- ((Animal == 'alligator' | Animal == 'ALLIGATOR' ),  Res = small) |  Res = wide.\n \n\n\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231341,"user_id":null,"body":"mouth_size(Alligator, small) :-\n  atom_string(Alligator, String),\n  string_lower(String, Lower),\n  Lower = \"alligator\".\nmouth_size(_, wide).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231342,"user_id":168,"body":"small().\nwide().\nmouth_size(A, small) :- string_lower(A, \"alligator\").\nmouth_size(_, wide).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231343,"user_id":null,"body":"mouth_size(Animal, Res) :- downcase_atom(Animal,X), (\\+ X = alligator -> Res = wide ; Res = small).\nmouth_size(alligator,  small).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231344,"user_id":null,"body":"mouth_size(Animal, small) :- string_upper(Animal,\"ALLIGATOR\").\nmouth_size(_, wide).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"57f781872e3d8ca2a000007e":[{"id":231345,"user_id":null,"body":"maps(A, R) :- findall(Y, (member(X, A), Y is X << 1), R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231346,"user_id":527,"body":"maps([], []).\nmaps([A | As], [R | Rs]) :- R is 2 * A, maps(As, Rs).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231347,"user_id":168,"body":"maps(A, R) :- maplist(plus, A, A, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231348,"user_id":null,"body":"maps(A, R) :- findall(X, (member(Y, A), X is Y * 2), R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231349,"user_id":null,"body":"maps(A, R) :- maplist([X,Y] >> (Y is X << 1), A, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231350,"user_id":645,"body":":- use_module(library(yall)).\nmaps(A, R) :- maplist([X, R] >> (R is X * 2), A, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231351,"user_id":null,"body":"maps([], []).\nmaps([E|R], [Ne|Re]):- Ne is E * 2, maps(R, Re).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231352,"user_id":null,"body":"maps([], []).\nmaps([A|As], [R|Rs]) :- R is A * 2, maps(As, Rs).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231353,"user_id":null,"body":"maps([], []).\nmaps([H|T], R) :-\n  maps(T, Rest),\n  H1 is H * 2,\n  append([H1], Rest, R).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231354,"user_id":null,"body":"maps(A, R) :-\n  maplist([N, B]>>(B is N * 2), A, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"580878d5d27b84b64c000b51":[{"id":231355,"user_id":527,"body":"sum_triangular_numbers(N, 0) :- N < 0.\nsum_triangular_numbers(N, Sum) :- N >= 0, Sum is N * (N + 1) * (N + 2) \/\/ 6.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231356,"user_id":76,"body":"sum_triangular_numbers(N, Sum) :- Sum is max(0, N * (N + 1) * (N + 2) \/\/ 6).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231357,"user_id":null,"body":"triangolar_number(1, 1):-!.\ntriangolar_number(2, 3):-!.\n\ntriangolar_number(N, K):-\n  N1 is N-1,\n  triangolar_number(N1, P),\n  K is P+N.\n\nsum_triangular_numbers(1, 1):-!.\n\nsum_triangular_numbers(N, Sum) :-\n  N =< 0,\n  Sum is 0, !.\n\nsum_triangular_numbers(N, Sum) :-\n    triangolar_number(N, L),\n    N1 is N-1,\n    sum_triangular_numbers(N1, N1Sum),\n    Sum is L+N1Sum.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231358,"user_id":null,"body":"tri_num_n(N,TriNum) :-\n  findall(Num, between(1, N, Num), Nums),\n  sum_list(Nums, TriNum).\n\nsum_triangular_numbers(N, Sum) :-\n  (N < 1 ->\n    Sum is 0\n  ; findall(Num, between(1,N,Num), Nums),\n    maplist(tri_num_n, Nums, TNums),\n    sum_list(TNums,Sum)\n  ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231359,"user_id":null,"body":"sum_triangular_numbers(N, 0) :- N < 0.\nsum_triangular_numbers(N, Sum) :- N >= 0, Sum is N*(N+1)*(N+2)\/6.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231360,"user_id":168,"body":"sum_triangular_numbers(N, Sum) :-\n  N > 0 -> Sum is N * (N + 1) * (N + 2) \/ 6; Sum = 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231361,"user_id":null,"body":"sum_triangular_numbers(N, Sum) :-\n  ( (0 < N) ->  Sum is(((N)*(N+1)*(N+2))\/6);  Sum is 0) .","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231362,"user_id":53,"body":"sum_triangular_numbers(N, Sum) :-\n  (   N < 0 -> Sum = 0\n    ; Sum is N * (N + 1) * (N + 2) \/ 6 ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231363,"user_id":50,"body":"sum_triangular_numbers(N, Sum) :-\n  M is max(N, 0),\n  Sum is div(M * (M + 1 ) * ( M + 2), 6).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231364,"user_id":null,"body":"sum_triangular_numbers(N,0) :- N =< 0.\nsum_triangular_numbers(N,S) :- sumHP(N,1,0,S).\n\nsumHP(N,N,Acc,S):- S is Acc+N.\nsumHP(N,I,Acc,S):- \n  I < N,\n  Acc1 is Acc+I,\n  I1 is I+1,\n  sumHP(N,I1,Acc1,S1),\n  S is Acc1+S1\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"58184387d14fc32f2b0012b2":[{"id":231365,"user_id":53,"body":"f(X, R) :- R is X \/ (1.0 + sqrt(1.0 + X)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231366,"user_id":76,"body":"f(X, R) :- R is X \/ (sqrt(1 + X) + 1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231367,"user_id":null,"body":"f(X, R) :- R is X\/2 - X^2\/8 + X^3\/16.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231368,"user_id":null,"body":"%taylor series around sqrt(1) as X approaches 0\nf(X, R) :- R is (0) \n                + (X\/2) \n                - ((1\/4)*((X**2)\/2)) \n                + ((3\/8)*((X**3)\/6)) %this line was necessary to pass :> I overshoot it \n                - ((15\/16) * ((X**4)\/24)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231369,"user_id":null,"body":"%Solution: 6 first components of Tailor series\nf(X, R) :- R is X \/ 2 - X^2 \/ 8 + X^3 \/ 16 - 5 * X^4 \/ 128 + 7 * X^5 \/ 256 - 21 * X^6 \/ 1024.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231370,"user_id":527,"body":"f(X, R) :- R is X \/ (sqrt(X + 1) + 1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231371,"user_id":492,"body":"f(X, R) :- R is X \/ (1 + sqrt(1 + X)).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231372,"user_id":null,"body":"% uh shouldn't this \"not\" work?\nf(X, R) :- R is sqrt(1 + X) - 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"581ee0db1bbdd04e010002fd":[{"id":231373,"user_id":76,"body":"interp(P, L, U, N, Ls) :-\n  D is (U - L) \/ N,\n  succ(N1, N),\n  numlist(0, N1, Is),\n  maplist([I, R] >> (X is L + D * I, call(P, X, A), R is floor(A * 100) \/ 100), Is, Ls).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231374,"user_id":544,"body":"interp(F, L, U, N, Ls) :-\n    writeln([F, L, U, N]),\n    numlist(1, N, Points),\n    Step is (U - L) \/ N,\n    maplist(add_step(L, Step), Points, BasePoints),\n    maplist(call(F), BasePoints, FloatPoints),\n    maplist(round_special, FloatPoints, Ls).\n\nadd_step(L, Step, X, R) :- R is L + (X - 1) * Step.\n\nround_special(X, R) :- R is floor(100 * X) \/ 100.\n\nid(X, X).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231375,"user_id":null,"body":"interp(P, L, U, N, Ls) :-\n\tN1 is N - 1,\n\tnumlist(0, N1, Ns),\n\tD is (U - L) \/ N,\n\tmaplist({D,L}\/[X,Y]>>(Y is L+X*D), Ns, Xs),\n\tmaplist([X,Y]>>(call(P, X, Z), Y is floor(Z * 100)\/100), Xs, Ls).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231376,"user_id":null,"body":"interp(_, _, _, N, N, []) :- !.\ninterp(F, L, U, Idx, N, [H|T]) :-\n\tX is L + Idx * (U - L) \/ N,\n\tsucc(Idx, Idx1), \n\tcall(F, X, H0),\n\tH is floor(H0 * 100) \/ 100,\n\tinterp(F, L, U, Idx1, N, T).\n\ninterp(F, L, U, N, Ls) :- interp(F, L, U, 0, N, Ls).\n    ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231377,"user_id":492,"body":"truncit_(Xs, Ls) :-\n    maplist([N, R] >> (R is floor(N * 100) \/ 100), Xs, Ls).\ninterp(P, L, U, N, Ls) :-\n    Step is (U - L) \/ N,\n    M is N - 1,\n    findall(X, between(0, M, X), Xs), \n    maplist([X, R] >> (R is L + X * Step), Xs, Ms),\n    maplist(P, Ms, Zs),\n    truncit_(Zs, Ls).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"58261acb22be6e2ed800003a":[{"id":231378,"user_id":50,"body":"get_volume_of_cuboid(Length, Width, Height, Volume) :- A is Length * Width,  Volume is A * Height.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231379,"user_id":53,"body":"get_volume_of_cuboid(L, W, H, R) :- \n  X is W * H,\n  R is L * X.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231380,"user_id":null,"body":"get_volume_of_cuboid(A, B, C, D) :- \n  D is A * B * C.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231381,"user_id":421,"body":"get_volume_of_cuboid(Length, Width, Height, Volume) :- \n  Volume is Length * Width * Height. % Your code here","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231382,"user_id":null,"body":"get_volume_of_cuboid(L, W, H, Volume) :- \n          Volume1 is L * W * H,\n          Volume is Volume1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231383,"user_id":3088,"body":"get_volume_of_cuboid(L, W, H, Volume) :- \n  Volume is L * W * H.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231384,"user_id":76,"body":"get_volume_of_cuboid(Length, Width, Height, Volume) :- \n  Volume is Length * Width * Height.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5861d28f124b35723e00005e":[{"id":231385,"user_id":53,"body":"zero_fuel(DistanceToPump, MPG, FuelLeft, Result) :- \n  ((MPG * FuelLeft >= DistanceToPump, Result is 1);\n  (Result = 0)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231386,"user_id":null,"body":"% zero_fuel\/4\n% Store your result in the 4th parameter of zero_fuel: 1 if it is possible to get to the pump\n% and 0 otherwise\nzero_fuel(DistanceToPump, MPG, FuelLeft, 1) :- DistanceToPump =< MPG * FuelLeft,!.\nzero_fuel(_,_,_,0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231387,"user_id":null,"body":"% zero_fuel\/4\n% Store your result in the 4th parameter of zero_fuel: 1 if it is possible to get to the pump\n% and 0 otherwise\nzero_fuel(DistanceToPump, MPG, FuelLeft, Result) :-\n    (   (MPG*FuelLeft)>=DistanceToPump ->  Result=1\n    ;   Result=0\n    ).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231388,"user_id":null,"body":"% zero_fuel\/4\n% Store your result in the 4th parameter of zero_fuel: 1 if it is possible to get to the pump\n% and 0 otherwise\nzero_fuel(DistanceToPump, MPG, FuelLeft, Result) :- (MPG*FuelLeft >= DistanceToPump -> Result is 1 ; Result is 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231389,"user_id":null,"body":"% zero_fuel\/4\n% Store your result in the 4th parameter of zero_fuel: 1 if it is possible to get to the pump\n% and 0 otherwise\nzero_fuel(DistanceToPump, MPG, FuelLeft, 1) :- DistanceToPump =< MPG * FuelLeft.\nzero_fuel(DistanceToPump, MPG, FuelLeft, 0) :- DistanceToPump > MPG * FuelLeft.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231390,"user_id":null,"body":"% zero_fuel\/4\n% Store your result in the 4th parameter of zero_fuel: 1 if it is possible to get to the pump\n% and 0 otherwise\nzero_fuel(DistanceToPump, MPG, FuelLeft, Result) :-\n                      (DistanceToPump - (MPG*FuelLeft))>0, Result is 0.\nzero_fuel(_, _, _, 1).         ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231391,"user_id":null,"body":"% zero_fuel\/4\n% Store your result in the 4th parameter of zero_fuel: 1 if it is possible to get to the pump\n% and 0 otherwise\nzero_fuel(DistanceToPump, MPG, FuelLeft, Result) :-\n  Make is MPG * FuelLeft,\n  DistanceToPump > Make,\n  Result = 0.\n  \nzero_fuel(DistanceToPump, MPG, FuelLeft, Result) :-\n  Make is MPG * FuelLeft,\n  DistanceToPump =< Make,\n  Result = 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231392,"user_id":null,"body":"% zero_fuel\/4\n% Store your result in the 4th parameter of zero_fuel: 1 if it is possible to get to the pump\n% and 0 otherwise\n\nzero_fuel(_,_,0,0).\nzero_fuel(0,_,_,1).\nzero_fuel(DistanceToPump, MPG, FuelLeft, Result) :- \n  MilesLeft is DistanceToPump - (MPG*FuelLeft),\n  MilesLeft =< 1.7, Result is 1;\n  Result is 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231393,"user_id":null,"body":"% zero_fuel\/4\n% Store your result in the 4th parameter of zero_fuel: 1 if it is possible to get to the pump\n% and 0 otherwise\nzero_fuel(DistanceToPump, MPG, FuelLeft, Result) :- % TODO\n  Distance is MPG * FuelLeft,  \n  Distance >= DistanceToPump ->  \n  Result is 1;\n  Result is 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231394,"user_id":null,"body":"% zero_fuel\/4\n% Store your result in the 4th parameter of zero_fuel: 1 if it is possible to get to the pump\n% and 0 otherwise\nzero_fuel(DistanceToPump, MPG, FuelLeft, Result) :- MilesLeft is FuelLeft * MPG, DistanceToPump =< MilesLeft, Result is 1.\nzero_fuel(DistanceToPump, MPG, FuelLeft, Result) :- MilesLeft is FuelLeft * MPG, DistanceToPump > MilesLeft, Result is 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"586beb5ba44cfc44ed0006c3":[{"id":231395,"user_id":527,"body":"sum_even_numbers(Sequence, EvenSum) :-\n  include([X] >> (float_fractional_part(X \/ 2) =:= 0), Sequence, Es),\n  sum_list(Es, EvenSum).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231396,"user_id":null,"body":"sum_even_numbers([X],X).\nsum_even_numbers(Xs, R) :-\n  aggregate_all(sum(X), (member(X,Xs), X=:=integer(X), 0 is integer(X)\/\\1), R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231397,"user_id":544,"body":"sum_even_numbers(Sequence, EvenSum) :-\n  include(is_even_integer, Sequence, FilteredSequence),\n  sumlist(FilteredSequence, EvenSum).\n\nis_even_integer(N) :-\n  integer(N), N mod 2 =:= 0;\n  float(N), N \/ 2  =:= floor(N \/ 2).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231398,"user_id":null,"body":"sum_even_numbers(L, Sum) :- \n  include(even, L, L1),\n  sum_list(L1, Sum).\neven(X) :-\n  0 =:= float_fractional_part(X \/ 2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231399,"user_id":null,"body":"sum_even_numbers([], 0).\nsum_even_numbers([Head | Sequence], NewEvenSum) :-\n    float_fractional_part(Head) =:= 0,\n    0 is truncate(Head) mod 2,\n    sum_even_numbers(Sequence, EvenSum),\n    NewEvenSum is EvenSum + Head.\nsum_even_numbers([Head | Sequence], EvenSum) :-\n    float_fractional_part(Head) =:= 0,\n    1 is truncate(Head) mod 2,\n    sum_even_numbers(Sequence, EvenSum).\nsum_even_numbers([Head | Sequence], EvenSum) :-\n    float_fractional_part(Head) =\\= 0,\n    sum_even_numbers(Sequence, EvenSum).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231400,"user_id":null,"body":"sum_even_numbers([], 0).\nsum_even_numbers([Head | Sequence], NewEvenSum) :-\n    float_integer_part(Head) =:= Head,\n    0 is integer(Head) mod 2,\n    sum_even_numbers(Sequence, EvenSum),\n    NewEvenSum is EvenSum + Head.\nsum_even_numbers([Head | Sequence], EvenSum) :-\n    float_integer_part(Head) =:= Head,\n    1 is integer(Head) mod 2,\n    sum_even_numbers(Sequence, EvenSum).\nsum_even_numbers([Head | Sequence], EvenSum) :-\n    float_integer_part(Head) =\\= Head,\n    sum_even_numbers(Sequence, EvenSum).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231401,"user_id":null,"body":"sum_even_numbers([], 0).\nsum_even_numbers([X|XS], Res) :- float_fractional_part(X) =:= 0, mod(truncate(X),2) =:= 0, !, sum_even_numbers(XS, Res1), Res is X + Res1.\nsum_even_numbers([_|XS], Res) :- sum_even_numbers(XS, Res). ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231402,"user_id":null,"body":"sum_even_numbers(Sequence, EvenSum) :- \ninclude([X] >> (H is X\/2, H=:=round(H)), Sequence, Evens), sum_list(Evens, EvenSum).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231403,"user_id":null,"body":"sum_even_numbers(Sequence, EvenSum) :- \ninclude([Num] >> (round(Num\/2)=:=Num\/2), Sequence, Evens), sum_list(Evens, EvenSum).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231404,"user_id":null,"body":"even(Num) :- round(Num\/2)=:=Num\/2.\nsum_even_numbers(Sequence, EvenSum) :- include(even, Sequence, Evens), sum_list(Evens, EvenSum).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5875b200d520904a04000003":[{"id":231405,"user_id":527,"body":"enough(Cap, On, Wait, Result) :-\n  Result is max(On + Wait - Cap, 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231406,"user_id":76,"body":"enough(Cap, On, Wait, Result) :-\n  Result is max(0, On + Wait - Cap).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231407,"user_id":1140,"body":"enough(Max, Curr, Add, R) :-\n  Free is Max - Curr,\n  (Free >= Add -> R = 0;\n  R is Add - Free).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231408,"user_id":48,"body":"enough(Cap, On, Wait, Result) :-\n  Result is max(Wait + On - Cap, 0)\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231409,"user_id":null,"body":"enough(Cap, On, Wait, Result) :-\n  X is On + Wait,\n  (Cap >= X\n  -> Result is 0\n  ; Result is abs(Cap - X)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231410,"user_id":null,"body":"enough(Cap, On, Wait, Result) :-\n  On + Wait > Cap, Result is mod(On + Wait, Cap);\n  Result is 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231411,"user_id":null,"body":"enough(Cap, On, Wait, Result) :-\n  R is Cap - On - Wait,\n  R >= 0,\n  Result = 0.\n\nenough(Cap, On, Wait, Result) :-\n  R is Cap - On - Wait,\n  R =< 0, \n  Result is R * -1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231412,"user_id":null,"body":"enough(Cap, On, Wait, Result) :-\n  On + Wait > Cap, Result is (Wait - (Cap - On));\n  Result is 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231413,"user_id":null,"body":"enough(Cap, On, Wait, Result) :-\n  On + Wait =< Cap,\n  Result is 0\n.\n\nenough(Cap, On, Wait, Result) :-\n  Result is (On + Wait) - Cap\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231414,"user_id":null,"body":"enough(Cap, On, Wait, Result) :-\n  Cap < On + Wait, !,\n  Result is abs(Cap - On - Wait).\nenough(Cap, On, Wait, Result) :-\n  Result is 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5886e082a836a691340000c3":[{"id":231415,"user_id":53,"body":"rectangle_rotation(A, B, R) :- \n  X is floor(A \/ sqrt(2)),\n  Y is floor(B \/ sqrt(2)),\n  K is (X + 1) * (Y + 1) + X * Y,\n  R is K + rem(K, 2) - 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231416,"user_id":168,"body":"rectangle_rotation(A, B, R) :-\n  X is floor(A \/ sqrt(2)),\n  Y is floor(B \/ sqrt(2)),\n  R is 2 * X * Y + X + Y - ((X xor Y) \/\\ 1) + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231417,"user_id":29,"body":"rectangle_rotation(A, B, R) :-\n  C = floor(A\/sqrt(2)),\n  D = floor(B\/sqrt(2)),\n  R is C*D+(C+1)*(D+1)-xor(mod(C,2),mod(D,2)) .","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231418,"user_id":76,"body":"rectangle_rotation(A, B, R) :-\n  X is truncate(A \/ sqrt(2)),\n  Y is truncate(B \/ sqrt(2)),\n  (X mod 2 =:= Y mod 2 -> P is 1 ; P is 0),\n  R is 2 * X * Y + X + Y + P.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231419,"user_id":77,"body":"rectangle_rotation(A, B, R) :-\n    ie(A, Ae, Ai),\n    ie(B, Be, Bi),\n    R is Ae * Be + Ai * Bi.\n\nie(K, Ke, Ki) :-\n    H is floor(K \/ sqrt(2)),\n    Ke is H div 2 * 2 + 1,\n    Ki is (H + 1) div 2 * 2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231420,"user_id":645,"body":"rectangle_rotation(A, B, R) :-\n  H is floor(A \/ sqrt(2)),\n  V is floor(B \/ sqrt(2)),\n  R is H * V + (H + 1) * (V + 1) - (H mod 2 xor V mod 2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"58880c6e79a0a3e459000004":[{"id":231421,"user_id":527,"body":"house_numbers_sum(L, Res) :- append(M, [0 | _], L), sum_list(M, Res).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231422,"user_id":null,"body":"house_numbers_sum(List, Res) :- count_numbers(List, 0, Res).\n\ncount_numbers([H|_], Res, Res) :- H == 0.\ncount_numbers([H|T], Res1, Res) :- \n  Res2 is Res1 + H, \n  count_numbers(T, Res2, Res).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231423,"user_id":544,"body":"house_numbers_sum([], 0).\nhouse_numbers_sum([0 | _], 0).\nhouse_numbers_sum([H | T], R) :-\n  house_numbers_sum(T, Rt),\n  R is H + Rt.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231424,"user_id":null,"body":"house_numbers_sum(L1, Res) :-\n  once(append(L2, [0|_], L1)),\n  sum_list(L2, Res).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231425,"user_id":null,"body":"take_iter(0, _, R, R):-!.\n\ntake_iter(N, [X|Xs], T, R) :-\n  M is N-1,\n  take_iter(M, Xs, [X|T], R).\n\ntake(N, L, R) :-\n  take_iter(N, L, [], R).\n\nhouse_numbers_sum(L, Res) :-\n  nth0(IdxOfZero, L, 0), !,\n  take(IdxOfZero, L, ItemsBeforeZero),\n  sum_list(ItemsBeforeZero, Res).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231426,"user_id":null,"body":"house_numbers_sum(L, Res) :-\n  house_numbers_sum_(L, 0, Res).\n  \nhouse_numbers_sum_([0|_],S,S).\nhouse_numbers_sum_([V|Vs],A,S) :-\n  dif(V,0),\n  A1 is A+V,\n  house_numbers_sum_(Vs,A1,S).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231427,"user_id":76,"body":"house_numbers_sum(Xs, Res) :- house_numbers_sum_(Xs, 0, Res).\nhouse_numbers_sum_([], S, S).\nhouse_numbers_sum_([0 | _], S, S).\nhouse_numbers_sum_([X | Xs], S, R) :- S1 is S + X, house_numbers_sum_(Xs, S1, R), !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231428,"user_id":null,"body":"house_numbers_sum(L, R) :- house_numbers_sum_(L, R, 0).\nhouse_numbers_sum_([],A,A).\nhouse_numbers_sum_([0|_],A,A).\nhouse_numbers_sum_([H|T],Res,A) :-\n  NextA is H+A,\n  house_numbers_sum_(T,Res,NextA).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231429,"user_id":null,"body":"house_numbers_sum(L, Res) :- house_numbers_sum(L, 0, Res).\n\nhouse_numbers_sum([0|_], Acc, Acc).\n\nhouse_numbers_sum([H|T], Acc, Res) :-\n  H =\\= 0,\n  Acc1 is Acc + H,\n  house_numbers_sum(T, Acc1, Res).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231430,"user_id":722,"body":"house_numbers_sum([0|_], 0).\nhouse_numbers_sum([H|T], R) :-\n    house_numbers_sum(T, Rp),\n    R is H + Rp.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"58a5aeb893b79949eb0000f1":[{"id":231431,"user_id":527,"body":"shared_bits(A, B) :- popcount(A \/\\ B) >= 2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231432,"user_id":112,"body":"% shared_bits\/2 predicate should pass if `A` and `B` share at least 2 1-bits\nshared_bits(A, B) :- (A \/\\ B) \/\\ ((A \/\\ B) - 1) > 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231433,"user_id":null,"body":"shared_bits(A, B) :- 1<popcount(A\/\\B).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231434,"user_id":168,"body":"shared_bits(A, B) :- A \/\\ B \/\\ ((A \/\\ B) - 1) =\\= 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231435,"user_id":53,"body":"shared_bits(A, B) :-\n  C is A \/\\ B,\n  D is C \/\\ (C - 1),\n  D > 0\n  .","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231436,"user_id":544,"body":"shared_bits(A, B) :-\n  AAndB is A \/\\ B,\n  popcount(AAndB) >= 2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231437,"user_id":null,"body":":- use_module(library(clpfd)).\n\nshared_bits(A, B) :- shared_bits(A, B, 0).\n\nshared_bits(_, _, 2) :- !.\nshared_bits(A, B, Count) :- A #> 0, B #> 0,\n  NA #= A >> 1,\n  NB #= B >> 1,\n( A \/\\ B \/\\ 1 #\\= 0 ->\n  NCount #= Count+1,\n  shared_bits(NA, NB, NCount)\n; shared_bits(NA, NB, Count)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231438,"user_id":null,"body":"shared_bits(A, B) :-\n  M is A \/\\ B,\n  M1 is M - 1,\n  M \/\\ M1 >= 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231439,"user_id":null,"body":"shared_bits(A, B) :-\n  M is A \/\\ B,\n  ones(M, K),\n  K >= 2.\n\nones(M, K) :- ones(M, 0, K).\nones(0, J, K) :- !, K = J.\nones(M, J, K) :-\n  J1 is J + 1,\n  M1 is M \/\\ (M - 1),\n  ones(M1, J1, K).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231440,"user_id":null,"body":"binary_digits(0, [0]).\nbinary_digits(1, [1]).\nbinary_digits(N, List) :-\n  N > 1,\n  divmod(N, 2, Quot, Rem),\n  binary_digits(Rem, Digit),\n  binary_digits(Quot, Next),\n  append(Next, Digit, List). \n\nshared_bits(AS, BS) :- \n  binary_digits(AS, BinaryAS),\n  binary_digits(BS, BinaryBS),\n  reverse(BinaryAS, ReversedAS),\n  reverse(BinaryBS, ReversedBS),\n  shared_1s(ReversedAS, ReversedBS, Count), \n  Count >= 2.\n\nshared_1s([], _, 0).\nshared_1s(_, [], 0).\nshared_1s([A|AS], [B|BS], Count) :-\n    (A = B, A = 1 ->  shared_1s(AS, BS, NextCount), Count is NextCount + 1;\n                      shared_1s(AS, BS, Count)).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"58cb43f4256836ed95000f97":[{"id":231441,"user_id":null,"body":"find_difference(A, B, Diff) :-\n  vol(A, AA),\n  vol(B, BB),\n  Diff is abs(AA - BB).\n\nvol([A, B, C], R) :- R is A * B * C.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231442,"user_id":null,"body":"mult(X,Y,Z) :- Z is X * Y.\n\nfind_difference(A, B, Diff) :- \n  foldl(mult,A,1,R1),\n  foldl(mult,B,1,R2),\n  Diff is abs(R1-R2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231443,"user_id":null,"body":"product(In1, In2, Out) :- Out is In1 * In2.\n\nfind_difference(A, B, Diff) :-\n  foldl(product, A, 1, A_out),\n  foldl(product, B, 1, B_out),\n  Diff is abs(A_out - B_out).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231444,"user_id":168,"body":"prod(A, R) :- foldl([X, T, N] >> (N is X * T), A, 1, R).\n\nfind_difference(A, B, Diff) :- \n  prod(A, P1), prod(B, P2),\n  Diff is abs(P1 - P2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231445,"user_id":76,"body":"find_difference([X1, Y1, Z1], [X2, Y2, Z2], Diff) :- \n  V1 is X1 * Y1 * Z1,\n  V2 is X2 * Y2 * Z2,\n  Diff is abs(V1 - V2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231446,"user_id":null,"body":"multiplyList([],1).\nmultiplyList([X|Y], S) :- multiplyList(Y,M), S is X * M. \n\nfind_difference(A, B, Diff) :- multiplyList(A,R), multiplyList(B,R2),\n  Diff is abs(R - R2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231447,"user_id":null,"body":"abs(A, A):-A>=0.\nabs(A, S):-A=<0,S is -A.\n\nfind_difference(A, B, Diff) :- \n  A = [X,Y,Z],\n  B = [O,P,Q],\n  V1 is X*Y*Z,\n  V2 is O*P*Q,\n  D is V1-V2,\n  abs(D, Diff). % Your code here","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231448,"user_id":null,"body":"prod([], 1).\nprod([E|List], Result) :- prod(List, PartialResult), Result is PartialResult*E.\n\nfind_difference(A, B, Diff) :- prod(A, VolA), prod(B, VolB), Diff is abs(VolA - VolB).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231449,"user_id":null,"body":"find_difference([A1, A2, A3], [B1, B2, B3], Diff) :- \n  A is A1 * A2 * A3,\n  B is B1 * B2 * B3,\n  Diff is abs(A - B).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231450,"user_id":null,"body":"\n% returns volume of cuboid\nget_vol([], 1).\nget_vol([H|T], R) :-\n  get_vol(T, R1),\n  R is H*R1.\n\nfind_difference(A, B, Diff) :- \n  get_vol(A, V1),\n  get_vol(B, V2),\n  (\n    (V1>V2, Diff is V1-V2);\n    (V2>V1, Diff is V2-V1);\n    Diff is 0\n  ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"58ce8725c835848ad6000007":[{"id":231451,"user_id":null,"body":"potatoes(P0, W0, P1, R) :- R is W0 * (100 - P0) div (100 - P1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231452,"user_id":null,"body":"potatoes(P0, W0, P1, R) :-\n    R is div(W0*(100-P0),(100-P1)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231453,"user_id":564,"body":"potatoes(P0, W0, P1, R) :-\n    R is floor((W0 * (100 - P0)) \/ (100 - P1)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231454,"user_id":null,"body":"potatoes(P0, W0, P1, R) :-\n    InitialDiff is 100 - P0,\n    AfterDiff is 100 - P1,\n    R is (W0 * InitialDiff) \/\/ AfterDiff.\n    ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231455,"user_id":527,"body":"potatoes(P0, W0, P1, W1) :- W1 is W0 * (100 - P0) \/\/ (100 - P1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231456,"user_id":null,"body":"potatoes(P0, W0, P1, R) :-\n    R is truncate((W0 * (100 - P0)) \/ (100 - P1)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231457,"user_id":null,"body":"potatoes(P0, W0, P1, R) :-\n    R is (100 - P0) * W0 \/\/ (100 - P1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231458,"user_id":null,"body":"potatoes(P0, W0, P1, R) :-\n    R is truncate((100 - P0) \/ (100 - P1) * W0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231459,"user_id":null,"body":"potatoes(P0, W0, P1, R) :-\n    R is floor((1- P0\/100) * W0 \/ (1 - P1\/100) + 0.0000000000001).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231460,"user_id":null,"body":"potatoes(P0, W0, P1, R) :-\n  WaterRatio is (100-P0)\/(100-P1),\n  R is floor(W0 * WaterRatio).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"58e3ea29a33b52c1dc0000c0":[{"id":231461,"user_id":null,"body":"dot_product(vector(Ax,Ay,Az), vector(Bx,By,Bz), Prod) :-\n  Prod is Ax*Bx + Ay*By + Az*Bz.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231462,"user_id":544,"body":"dot_product(A, B, Product) :-\n  vector_x(A, Ax), vector_y(A, Ay), vector_z(A, Az),\n  vector_x(B, Bx), vector_y(B, By), vector_z(B, Bz),\n  Product is Ax * Bx + Ay * By + Az * Bz.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231463,"user_id":null,"body":":- use_module(library(record)).\ndot_product(VectorA, VectorB, Product) :-\n  vector_x(VectorA, Xa),\n  vector_x(VectorB, Xb),\n  vector_y(VectorA, Ya),\n  vector_y(VectorB, Yb),\n  vector_z(VectorA, Za),\n  vector_z(VectorB, Zb),\n  Product is Xa*Xb + Ya*Yb + Za*Zb.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231464,"user_id":null,"body":"dot_product(VectorA, VectorB, Product) :-\n  vector_x(VectorA, A),\n  vector_y(VectorA, B),\n  vector_z(VectorA, C),\n  vector_x(VectorB, D),\n  vector_y(VectorB, E),\n  vector_z(VectorB, F),\n  Product is A*D+B*E+C*F\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231465,"user_id":53,"body":"dot_product(Vector1, Vector2, Product) :-\n  vector_x(Vector1, Vx1),\n  vector_x(Vector2, Vx2),\n  vector_y(Vector1, Vy1),\n  vector_y(Vector2, Vy2),\n  vector_z(Vector1, Vz1),\n  vector_z(Vector2, Vz2),\n  Product is Vx1 * Vx2 + Vy1 * Vy2 + Vz1 * Vz2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231466,"user_id":76,"body":"dot_product(A, B, P) :-\n  vector_x(A, Ax),\n  vector_y(A, Ay),\n  vector_z(A, Az),\n  vector_x(B, Bx),\n  vector_y(B, By),\n  vector_z(B, Bz),\n  P is Ax * Bx + Ay * By + Az * Bz.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"593c9175933500f33400003e":[{"id":231467,"user_id":null,"body":"multiples(M, N, Result) :-\n  numlist(1,M,Rng),\n  maplist([X,O]>>(O is N*X),Rng,Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231468,"user_id":53,"body":"multiples(M, N, Result) :-\n  findall(I, between(1, M, I), Ids),\n  maplist([X,Y]>>(Y is X * N), Ids, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231469,"user_id":544,"body":"multiples(M, N, Result) :-\n  numlist(1, M, Bases),\n  maplist([X,R]>>(R is X*N), Bases, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231470,"user_id":null,"body":"multiples(0, _, []) :- !.\nmultiples(M, N, L) :-\n  findall(Y, (between(1, M, X), Y is N * X), L).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231471,"user_id":null,"body":"\nmultiples(1, N, [N]).\nmultiples(M, N, Res) :-\n  M1 is M-1,\n  multiples(M1,N,T1),\n  Val is M*N,\n  append([T1, [Val]], Res).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231472,"user_id":null,"body":"multiples(1, N, [N]).\nmultiples(M, N, R) :- NM is M-1, multiples(NM,N,RR), NN is M*N, append(RR,[NN],R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231473,"user_id":null,"body":"multiples(0, _, []).\nmultiples(M, N, Result) :-\n  L is M - 1,\n  multiples(L, N, H),\n  P is M * N,\n  append(H, [P], Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231474,"user_id":null,"body":"multiples(1, N, [N]).\n\nmultiples(M, N, Result) :-\n    I is M - 1, \n    X is M * N,\n    append(Next, [X], Result),\n    multiples(I, N, Next).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231475,"user_id":null,"body":"multiples(1, N, [N]).\n\nmultiples(M, N, Result) :-\n    M > 1, I is M - 1, \n    X is M * N,\n    append(Next, [X], Result),\n    multiples(I, N, Next).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231476,"user_id":null,"body":"multiples(0, N, []).\nmultiples(M, N, Result) :-\n  M_1 is M - 1,\n  multiples(M_1, N, Temp),\n  Multiple is M * N,\n  append(Temp, [Multiple], Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5949481f86420f59480000e7":[{"id":231477,"user_id":null,"body":"odd_or_even(Array, \"even\") :-\n  sum_list(Array, Sum),\n  mod(Sum, 2) =:= 0.\nodd_or_even(Array, \"odd\") :-\n  sum_list(Array, Sum),\n  mod(Sum, 2) =\\= 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231478,"user_id":527,"body":"odd_or_even(Xs, R) :- sum_list(Xs, S), S mod 2 =:= 0 -> R = \"even\"; R = \"odd\".","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231479,"user_id":76,"body":"odd_or_even(A, R) :- sumlist(A, S), (S mod 2 =:= 0 -> R = \"even\" ; R = \"odd\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231480,"user_id":null,"body":"odd_or_even(Array, \"odd\") :- \n  sumlist(Array, Sum),\n  P is Sum\/\\1, \n  P = 1, !.\n  \nodd_or_even(Array, \"even\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231481,"user_id":null,"body":"odd_or_even([], \"even\").\n\nodd_or_even(Array, \"even\") :-\n  sumList(Array, Sum),\n  X is Sum mod 2,\n  X =:= 0.\n  \nodd_or_even(Array, \"odd\") :-\n  sumList(Array, Sum),\n  X is Sum mod 2,\n  X =\\= 0.\n  \nsumList([], 0).\n\nsumList([H | T], Result) :-\n  sumList(T, TempResult),\n  Result is H + TempResult.\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231482,"user_id":null,"body":"arraysum([], 0).\n\narraysum([Head | Tail], Sum):-\n    arraysum(Tail, SumLessHead),\n    Sum is SumLessHead + Head.\n\n\nodd_or_even([], \"even\"):-!.\n\nodd_or_even(L, \"even\"):-\n    arraysum(L, X),\n    0 =:= mod(X, 2).\n\nodd_or_even(L, \"odd\"):-\n    arraysum(L, X),\n    1 =:= mod(X, 2).\n\n  \n  % Your code here.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231483,"user_id":null,"body":"odd_or_even(Array, Result) :- add_up_numbers(Array,T), R is T mod 2, R = 0, Result = \"even\",!.\nodd_or_even(_, Result) :- Result = \"odd\",!.\n\nadd_up_numbers([],Result) :- Result is 0.\nadd_up_numbers([X|R],Result) :- add_up_numbers(R, Rt), Result is Rt + X .","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231484,"user_id":null,"body":"get_sum([], 0).\nget_sum([H|T], Sum) :-\n  get_sum(T, Res),\n  Sum is H + Res.\n\nodd_or_even(Array, Result) :-\n  get_sum(Array, Res),\n  get_oe(Res, Result).\n  \nget_oe(In, \"even\") :-\n  In mod 2 =:= 0.\n  \nget_oe(In, \"odd\") :-\n  In mod 2 =:= 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231485,"user_id":null,"body":"odd_or_even(Array, Result) :- arr_sum(Array, R), make_res(R, Result).\n\nmake_res(Sum, Result) :- 0 is mod(Sum, 2), !, Result=\"even\".\nmake_res(_, Result) :- Result=\"odd\".\n\narr_sum([], 0).\narr_sum([H|T], R) :- arr_sum(T, R1), R is R1 + H.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231486,"user_id":null,"body":"sum([], 0).\nsum([H|T], S) :- sum(T, S1), S is H + S1.\n\nodd_or_even(L, R) :- sum(L, S), \n  (divmod(S, 2, _, 1) -> R = \"odd\"; R = \"even\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"59a9919107157a45220000e1":[{"id":231487,"user_id":527,"body":"find_all(List, N, Result) :- findall(I, nth0(I, List, N), Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231488,"user_id":null,"body":"% Store the result inside 3rd argument. Good luck!\nfind_all(List, N, Result) :- findall(Index, nth0(Index, List, N), Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231489,"user_id":null,"body":"% Store the result inside 3rd argument. Good luck!\nfind_all(List, N, Result) :- findall(M, nth0(M,List,N), Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231490,"user_id":null,"body":"\n% returns all indices of searched element\nget_indices([], _, _, []).\nget_indices([N|T], N, Index, Res) :-\n  I1 is Index + 1,\n  get_indices(T, N, I1, R1),\n  append([[Index], R1], Res).\nget_indices([H|T], N, Index, Res) :- \n  I1 is Index + 1,\n  get_indices(T, N, I1, Res).\n\nfind_all(List, N, Result) :- \n  get_indices(List, N, 0, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231491,"user_id":null,"body":"find_all_aux([],_,_,[]).\n\nfind_all_aux([N|Tail],N,Pos,Result):-\n    Pos1 is Pos+1,\n    find_all_aux(Tail,N,Pos1,Result1),\n    append([Pos],Result1,Result).\n\nfind_all_aux([_|Tail],N,Pos,Result):-\n    Pos1 is Pos+1,\n    find_all_aux(Tail,N,Pos1,Result1),\n    append(Result1,[],Result).\n\nfind_all(List, N, Result) :- find_all_aux(List,N,0,Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231492,"user_id":null,"body":"find_all([], _, []).\nfind_all(List, N, Result) :- \n  find(List, N, 0, Result).\n\nfind([], _, _, []).\nfind([H|T], H, Idx, [Idx|Result]) :- NIdx is Idx + 1, find(T, H, NIdx, Result).\nfind([_|T], N, Idx, Result) :- NIdx is Idx + 1, find(T, N, NIdx, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231493,"user_id":544,"body":"find_all(List, N, Result) :-\n    length(List, ListLength),\n    L is ListLength - 1,\n    numlist(0, L, Indices),\n    pairs_keys_values(Pairs, List, Indices),\n    include({N}\/[(K-V)]>>(K = N), Pairs, FilteredPairs),\n    pairs_values(FilteredPairs, Result).\n    ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231494,"user_id":null,"body":"find_all(List, N, Result) :- \n  length(List, Len), \n  findall(Y, (between(1,Len,X), nth1(X,List,N), Y is X-1), Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231495,"user_id":null,"body":"find_all(List, N, Result) :- phrase(find_all(List, N, 0), Result).\n  \nfind_all([], _, _) --> [].\n  \nfind_all([N|T], N, Idx) -->\n  { NextIdx is Idx+1 },\n  [Idx],\n  find_all(T, N, NextIdx).\n\nfind_all([A|T], N, Idx) -->\n  { A\\=N, NextIdx is Idx+1 },\n  find_all(T, N, NextIdx).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231496,"user_id":null,"body":"% Store the result inside 3rd argument. Good luck!\nfind_all(List, N, Result) :-\n  find_all_internal(List, N, 0, Result).\n\nfind_all_internal([], _, _, []).\nfind_all_internal([N|T1], N, C1, [C1|T2]) :-\n  C2 is C1 + 1,\n  find_all_internal(T1, N, C2, T2).\nfind_all_internal([_|T1], N, C1, T2) :-\n  C2 is C1 + 1,\n  find_all_internal(T1, N, C2, T2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"59d9ff9f7905dfeed50000b0":[{"id":231497,"user_id":null,"body":"solve([H|Arr], [R|Result]) :-\n  string_lower(H, H1),\n  string_codes(H1, H2),\n  solve_word(H2, 0, 0, R),\n  solve(Arr, Result).\nsolve([], []).\n\n\nsolve_word([H|T], Lpos, Total, Result) :-\n  Apos is H - 97,\n  (Apos == Lpos -> Total1 is Total + 1; Total1 is Total),\n  Lpos1 is Lpos + 1,\n  solve_word(T, Lpos1, Total1, Result).\nsolve_word([], _, T, T).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231498,"user_id":null,"body":"solve([], []).\nsolve([H|Arr], [S|Result]) :-\n  string_lower(H, Strlow),\n  string_to_list(Strlow, Str),\n  string_to_list(\"abcdefghijklmnopqrstuvwxyz\", Alphabet),\n  checkAlphabet(Str, Alphabet, S),\n  solve(Arr, Result).\n\ncheckAlphabet(_, [], 0).\ncheckAlphabet([], _, 0).\ncheckAlphabet([H|T], [H|Ta], R) :-\n  checkAlphabet(T, Ta, RR),\n  R is RR + 1.\ncheckAlphabet([_|T], [_|Ta], RR) :-\n  checkAlphabet(T, Ta, RR).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231499,"user_id":null,"body":":- use_module(library(apply)).\n\nt([I|X]) :-\n    I =:= X-64.\n\nsolve_one(Ls, R) :-\n    string_upper(Ls, UpperLs),\n    findall([I,X],string_code(I, UpperLs, X), IndexCode),\n    include(t, IndexCode, PassTest),\n    length(PassTest, R).\n\nsolve(Ls, R) :-\n    maplist(solve_one, Ls, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231500,"user_id":null,"body":"count_same([],_,N,N).\ncount_same(_,[],N,N).\ncount_same([A|As],[B|Bs],N,R) :-\n  A = B, N1 is N+1, count_same(As,Bs,N1,R);\n  count_same(As,Bs,N,R).\n\nsolve_one(Str, R) :-\n  string_lower(Str,Strlow),\n  string_to_list(Strlow,Arr),\n  string_to_list(\"abcdefghijklmnopqrstuvwxyz\", Alpha),\n  count_same(Arr,Alpha,0,R).\n  \n\nsolve([], []).\nsolve([X|Xs], [FX|FXs]) :-\n  solve_one(X,FX),\n  solve(Xs,FXs).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231501,"user_id":168,"body":"count(Str, Count) :-\n  string_upper(Str, S),\n  string_codes(S, Cs),\n  length(Cs, L),\n  numlist(1, L, Is),\n  foldl([C, I, A, R] >> ((C - 64 =:= I -> X = 1; X = 0), R is A + X), Cs, Is, 0, Count).\n\nsolve(Arr, Result) :-\n  maplist(count, Arr, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231502,"user_id":null,"body":"solve(Arr, Result) :-\n  maplist([In,Out]>>(\n    string_lower(In, Low), string_codes(Low, Cs),\n    findall(I, (nth0(I, Cs, N), I is N-97), Count),\n    length(Count, Out)), Arr, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231503,"user_id":null,"body":"solve([], Counts) :- !, Counts = [].\nsolve(Words, Counts) :-\n  maplist([Word, Count]>>in_place(Word, Count), Words, Counts).\nin_place(\"\", Count) :- !, Count = 0.\nin_place(Word, Count) :-\n  string_lower(Word, Word1),\n  string_codes(Word1, Codes),\n  maplist(plus(-96), Codes, Positions),\n  length(Positions, N),\n  findall(K, (between(1, N, K), nth1(K, Positions, K)), Keep),\n  length(Keep, Count).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231504,"user_id":null,"body":"inc_if_same(L, L, Acc, Acc1) :- Acc1 is Acc+1, !.\ninc_if_same(_, _, Acc, Acc).\n\ntake_same_len(L1, L2, [], []) :- (L1 = []; L2 = []), !.\ntake_same_len([I1|R1], [I2|R2], [I1|Res1], [I2|Res2]) :- take_same_len(R1, R2, Res1, Res2).\n\n\ncorrect_count(Alphabet, Str, Count) :-\n  string_upper(Str, Up),\n  string_codes(Up, Cs),\n  take_same_len(Cs, Alphabet, C1, A1),\n  foldl(inc_if_same, C1, A1, 0, Count).\n\nsolve(Arr, Result) :-\n  numlist(65, 90, Alphabet),\n  maplist(correct_count(Alphabet), Arr, Result).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231505,"user_id":76,"body":"solve(Arr, Result) :-\n  string_chars(\"abcdefghijklmnopqrstuvwxyz\", AlphabetChars),\n  maplist({AlphabetChars} \/ [Word, Res] >> (\n    aggregate_all(count, \n      (string_lower(Word, WordLower), \n        string_chars(WordLower, WordChars), \n        nth0(I, WordChars, Char), nth0(I, AlphabetChars, Char)\n      ), Res)\n  ), Arr, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231506,"user_id":76,"body":"solve(Arr, Result) :-\n  Lower = \"abcdefghijklmnopqrstuvwxyz\",\n  Upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  string_chars(Lower, LowerChars),\n  string_chars(Upper, UpperChars),\n  maplist([Word, Res] >> (\n    aggregate_all(count, (string_chars(Word, Chars), nth0(I, Chars, C), (nth0(I, LowerChars, C) ; nth0(I, UpperChars, C))), Res)\n  ), Arr, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"59f11118a5e129e591000134":[{"id":231507,"user_id":527,"body":"repeats(Xs, Result) :-\n  aggregate_all(sum(Y), bagof(X, (member(X, Xs), _ = X), [Y]), Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231508,"user_id":527,"body":"repeats(Xs, Result) :-\n  foldl([X, R0, R1] >> (R1 is R0 xor X), Xs, 0, XA),\n  B is lsb(XA),\n  foldl([X, R0, R1] >> (R1 is R0 xor (X * getbit(X, B))), Xs, 0, X1),\n  Result is X1 + (XA xor X1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231509,"user_id":null,"body":":- use_module(library(clpfd)).\n\nrepeats([],0).\nrepeats([A|As], Res) :-\n    member(A,As),\n    delete(As, A, As1),\n    repeats(As1, Res).\nrepeats([A|As], Res) :-\n    not(member(A,As)),\n    Res0 #= Res - A,\n    repeats(As,Res0).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231510,"user_id":null,"body":"repeats([],L,Result) :- sum_list(L,Result).\nrepeats([A|Xs],L,Result) :- \n  delete(Xs,A,L2),\n  (L2=Xs -> repeats(L2,[A|L],Result) ; repeats(L2,L,Result)).\nrepeats(Xs, Result) :- repeats(Xs,[],Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231511,"user_id":null,"body":"repeats(Arr, Result) :- find_unique(Arr, _, Result).\n\nfind_unique([],[],0).\n\nfind_unique([H|T], List,R):- member(H,T),delete(T, H, NewT), find_unique(NewT, List,R).\nfind_unique([H|T], [H|List],R):- not(member(H,T)), find_unique(T, List,R1), R is H+R1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231512,"user_id":null,"body":"\ncount(L, E, N) :-\n  include(=(E), L, L2), length(L2, N).\n\ncountall(List,X,C) :-\n  sort(List,List1),\n  member(X,List1),\n  count(List,X,C).\n  \nrepeats(Arr, Result) :-\n  countall(Arr, X, 1),\n  countall(Arr, Y, 1),\n  X \\= Y,\n  Result is X + Y\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231513,"user_id":null,"body":"repeats([First | Rest], R) :- \n        repeats(Rest, [First], R).\nrepeats([], [A, B], R) :- !, R is A + B.\nrepeats([First | Rest], Seen, R) :- \n        memberchk(First, Seen),\n        select(First, Seen, Seen_once),\n        !,\n        repeats(Rest, Seen_once, R).\nrepeats([First | Rest], Seen, R) :-\n        repeats(Rest, [First | Seen], R).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231514,"user_id":null,"body":"repeatingItemsIter(X, [X], T, R):-\n  R = [X|T], !.\n\nrepeatingItemsIter(X, [Y], T, R):-\n  R = T, !.\n\nrepeatingItemsIter(X, [X|Tail], T, R):-\n  repeatingItemsIter(X, Tail, [X|T], R).\n\nrepeatingItemsIter(X, [Y|Tail], T, R):-\n  repeatingItemsIter(Y, Tail, T, R).\n\nrepeatingItems([X|Tail], R):-\n  repeatingItemsIter(X, Tail, [], RT),\n  sort(RT, R).\n\nrepeats(Arr, Result) :-\n  msort(Arr, SortedArr),\n  repeatingItems(SortedArr, RepeatingItemsSet),\n  sort(Arr, Set),\n  ord_subtract(Set, RepeatingItemsSet, NonRepeating),\n  sum_list(NonRepeating, Result)\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231515,"user_id":527,"body":"repeats(Xs, Result) :-\n  aggregate_all(sum(Y), bagof(X, (member(X, Xs), _ = X), [Y]), Result),\n  Result =\\= 0. % incorrect","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231516,"user_id":76,"body":"repeats(Arr, Result) :-\n  include([N] >> (count(Arr, N, C), C =:= 1), Arr, Unique),\n  sum_list(Unique, Result).\n\ncount([], _, 0).\ncount([X|Xs], N, R) :- (X =:= N -> C is 1 ; C is 0), count(Xs, N, R1), R is R1 + C.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a00e05cc374cb34d100000d":[{"id":231517,"user_id":null,"body":"reverse_seq(1, [1]).\nreverse_seq(N, [N|R]):-\n  N1 is N - 1,\n  reverse_seq(N1, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231518,"user_id":168,"body":"reverse_seq(N, Result) :-\n  numlist(1, N, T),\n  reverse(T, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231519,"user_id":null,"body":"reverse_seq(N, Result) :- \n  findall(Num, between(1, N, Num), Digits),\n  reverse(Result, Digits).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231520,"user_id":null,"body":"reverse_seq(0, []) :- !.\nreverse_seq(N, [N | L]) :-\n  N1 is N - 1,\n  reverse_seq(N1, L).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231521,"user_id":null,"body":"reverse_seq(N, []) :- N < 1.\nreverse_seq(N, [N | Seq]) :-\n  N1 is N - 1,\n  reverse_seq(N1, Seq).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231522,"user_id":null,"body":"reverse_seq(1, [1]).\nreverse_seq(N, [N|T]) :-\n  % Your code here.\n  N>0,\n  N1 is N - 1,\n  reverse_seq(N1, T).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231523,"user_id":null,"body":"reverse_seq(0,[]):-!.\nreverse_seq(N, [N|R]) :-\n      N1 is N - 1,\n      reverse_seq(N1,R).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231524,"user_id":null,"body":"reverse_seq(N, Result) :-\n  findall(X, between(1,N,X), Xs),\n  reverse(Xs, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231525,"user_id":null,"body":"reverse_seq(1, [1]).\nreverse_seq(N, [N|Result]) :- N1 is N-1, reverse_seq(N1,Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231526,"user_id":null,"body":"reverse_seq(N, Result) :- rev_list(N,Result). \n\nrev_list(1, [1]).\nrev_list(N, [N|R]) :- N>1, Ne is N-1, rev_list(Ne, R).\n\n  % Your code here.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a03b3f6a1c9040084001765":[{"id":231527,"user_id":null,"body":"angle(N, Sum) :- % happy coding :-)\n  N > 2,\n  M is N-2,\n  Sum is M*180.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231528,"user_id":null,"body":"angle(N, Sum) :- NN = N - 2, Sum is NN * 180.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231529,"user_id":null,"body":"angle(N, Sum) :- (N>2), Sum is 180*(N-2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231530,"user_id":null,"body":"angle(N, S) :- S is (N - 2) * 180.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231531,"user_id":null,"body":"angle(N, Sum) :- Sum is (180 + ((N-3) * 180)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231532,"user_id":null,"body":"angle(N, Sum) :- N >= 3, Sum is (N-2) * 180.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231533,"user_id":null,"body":"%N>2\n%360\/N \n% 90 - 180\/N -> one semi angle\n% one angle -> 180 - 360\/N\n% N angles -> N*180 - 360\nangle(N, Sum) :- % happy coding :-)\n  Sum is N*180 - 360.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231534,"user_id":null,"body":"angle(N, Sum) :-\n  N>=3,\n  N1 is N-2,\n  Sum is N1*180.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231535,"user_id":null,"body":"\nangle(N, S):-\n  N > 2,\n  S1 is N-2,\n  S is S1 *180.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231536,"user_id":null,"body":"angle(N, Sum) :- % happy coding :-\n  Sum is 180*(N-2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a057ec846d843c81a0000ad":[{"id":231537,"user_id":53,"body":"aux(_, 1, I, I) :- !.\naux(N, M, I, R) :- M1 is rem(10 * M, N), I1 is I + 1, aux(N, M1, I1, R).\ncycle(N, -1) :- rem(N, 2) =:= 0; rem(N, 5) =:= 0, !.\ncycle(N, R) :- M is rem(10, N), aux(N, M, 1, R).\n    ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231538,"user_id":168,"body":"cycle(N, -1) :- (N mod 2 =:= 0; N mod 5 =:= 0), !.\ncycle(N, R) :- \n  P1 is 10 mod N,\n  aux(N, P1, R).\n  \naux(_, 1, 1) :- !.\naux(N, P, R) :-\n  P1 is 10 * P mod N,\n  aux(N, P1, R1),\n  succ(R1, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231539,"user_id":76,"body":"cycle(N, -1) :- (N mod 2 =:= 0 ; N mod 5 =:= 0), !.\ncycle(N, R) :- cycle(N, 0, 1, R).\ncycle(N, K, R, A) :-\n  succ(K, K1),\n  R1 is R * 10 mod N,\n  (R1 =\\= 1 -> cycle(N, K1, R1, A) ; A = K1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231540,"user_id":null,"body":"cycle(N, -1) :-\n    0 is N mod 5,\n    !.\n\ncycle(N, -1) :-\n    0 is N mod 2,\n    !.\n\ncycle(N, R) :-\n    \\+ N mod 5 =:= 0,\n    \\+ N mod 2 =:= 0,\n    !,\n    % between(1,N,R),\n    % 1 is 10 ^ R mod N.\n    %\n    % Above takes longer than 12 sec limit, hence cycle_\n    %\n    T is 10 ^ ceil(log(N)\/log(10)),\n    cycle_(N, 0, T, T, R).\n\ncycle_(_,R,Rem,Rem,R) :-\n    R > 0,\n    !.\n\ncycle_(N,C,Rem,T,R) :-\n   Rem < N,\n   !,\n   NC is C + 1,\n   NR is 10 * Rem,\n   cycle_(N,NC,NR,T,R).\n\ncycle_(N,C,Rem,T,R) :-\n   Rem >= N,\n   !,\n   M is (Rem mod N) * 10,\n   NC is C + 1,\n   cycle_(N, NC, M, T, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231541,"user_id":null,"body":"cycle_aux(N,I,R) :- \n    I1 is mod(I*10,N), I1 =:= 1, R is 1;\n    I1 is mod(I*10,N), cycle_aux(N,I1,R1), R is R1+1. \n\ncycle(N, R) :-\n    mod(N,2) =:= 0, R is -1;\n    mod(N,5) =:= 0, R is -1;\n    cycle_aux(N,1,R).\n    ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231542,"user_id":null,"body":"cycle(N, R) :- \n  1 =\\= gcd(N, 10) -> R = -1;\n  cycle_count(N,10,1,R).\n\ncycle_count(N,Int,C1, Res):-\n  R is mod(Int,N),\n  (R =:= 1 -> Res = C1;\n  NextInt is R*10,\n  C2 is C1+1,\n  cycle_count(N,NextInt,C2,Res)).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231543,"user_id":null,"body":"cycle(_, 1, Result, Result) :- !.\ncycle(N, Remainder, Count, Result) :- Remainder1 is (Remainder * 10) mod N, succ(Count, Count1), cycle(N, Remainder1, Count1, Result).\n\ncycle(N, -1) :- 0 is N mod 2, !.\ncycle(N, -1) :- 0 is N mod 5, !.\ncycle(N, R) :- Remainder is 10 mod N, cycle(N, Remainder, 1, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231544,"user_id":527,"body":"cycle(N, R) :-\n  (N mod 2 =:= 0; N mod 5 =:= 0) -> R is -1;\n  cycle(N, 1, 0, R).\n\ncycle(N, M, I, R) :-\n  succ(I, I1),\n  M1 is M * 10 mod N,\n  (M1 =:= 1 -> R is I1; cycle(N, M1, I1, R)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231545,"user_id":492,"body":"cycleaux(N, V, I, R) :-\n    VV is (V * 10) mod N,\n    (VV =:= 1 ->\n        R is I\n     ;\n     cycleaux(N, VV, I + 1, R)\n    ).\ncycle(N, R) :-\n    ((N mod 2 =:= 0; N mod 5 =:= 0) ->\n        R = -1\n     ;\n     cycleaux(N, 1, 1, R)\n    ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a1a9e5032b8b98477000004":[{"id":231546,"user_id":527,"body":"even_last([], 0).\neven_last(Numbers, Result) :-\n  aggregate_all(sum(N), (nth0(I, Numbers, N), I mod 2 =:= 0), S),\n  last(Numbers, L),\n  Result is S * L.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231547,"user_id":168,"body":"even_last(Numbers, Result) :-\n  findall(X, (nth0(I, Numbers, X), I mod 2 =:= 0), R),\n  foldl(plus, R, 0, S),\n  last(Numbers, L) -> Result is S * L; Result = 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231548,"user_id":544,"body":"even_last([], 0).\n\neven_last(Xs, Result) :-\n  findall(X, ( nth0(I, Xs, X), I mod 2 =:= 0 ), EvenXs),\n  sum_list(EvenXs, Sum),\n  append(_, [Last], Xs),\n  Result is Sum * Last.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231549,"user_id":null,"body":"even_last(Ns, Result) :- even_last(Ns, 0, Result).\n\neven_last([], Result, Result).\neven_last([N], Curr, Result) :- Result is (Curr+N)*N.\neven_last([N,Last|[]], Curr, Result) :- Result is (Curr+N)*Last, !.\neven_last([N,_|Ns], Curr, Result) :- \n  New is Curr+N,\n  even_last(Ns, New, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231550,"user_id":null,"body":"even_last([], 0).\neven_last(Numbers, Result) :- myLast(Numbers, Lst), getSum(Numbers, Sm), Result is Lst * Sm.\n  \nmyLast([X], X).\nmyLast([H|T], K) :- myLast(T, K).\n\ngetSum([], 0).\ngetSum([H1], H1).\ngetSum([H1,H2|T], Res) :- getSum(T, Res1), Res is H1 + Res1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231551,"user_id":null,"body":"even_last([], 0).\neven_last(Numbers, Result) :- my_sum(Numbers, 0, Sum), last(Numbers, Last), Result is Sum*Last.\n\nmy_sum([X], Idx, Sum) :- is_even_idx(Idx, X, Sum).\nmy_sum([X|T], Idx, Sum) :- Next is Idx+1, my_sum(T, Next, Sum1), is_even_idx(Idx, X, Num), Sum is Sum1+Num.\n\nis_even_idx(Idx, X, Num) :- K is Idx mod 2, (K == 0 -> Num = X; Num = 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231552,"user_id":77,"body":"even_last([], 0).\neven_last([H|T], Result) :-\n  even([H|T], 0, Result).\n\neven([H], S, R) :- !, R is (S + H) * H.\neven([H|T], S, R) :- S1 is S + H, odd(T, S1, R).\n\nodd([H], S, R) :- !, R is S * H.\nodd([_|T], S, R) :- even(T, S, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231553,"user_id":218,"body":"even_last([], _, Result) :-\n  Result = 0.\n\neven_last([X|Tail], I, Result2) :-\n  I2 is I + 1,\n  even_last(Tail, I2, Result),\n  (I mod 2) =:= 0, \n  Result2 is Result + X.\n  \neven_last([X|Tail], I, Result2) :-\n  I2 is I + 1,\n  even_last(Tail, I2, Result),\n  (I mod 2) =:= 1, \n  Result2 = Result.\n\neven_last([], 0).\n\neven_last(Numbers, Result2) :-\n  even_last(Numbers, 0, Result),\n  append(_, [X], Numbers),\n  Result2 is Result*X.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231554,"user_id":53,"body":"last([X], R):- R is X.\nlast([Y|T], R):- last(T, R).\n\nsum(L, N):-\n    sum(L, 0, N).\n\nsum([],N,N).\nsum([H|T],A,N) :-\n    A1 is A + H,\n    sum(T,A1,N).\n    \neven_elts(L,M) :-\n  even_elts(M,0,[],L).\n\neven_elts([H|T],I,Acc,Ans) :-\n  ( I mod 2 =:= 0, append(Acc,[H], AccNew)\n  ; I mod 2 =:= 1, AccNew = Acc\n  ),\n  Inew is I + 1,\n  even_elts(T,Inew,AccNew,Ans).\n\neven_elts([],_,Acc,Acc).\n\neven_last(Numbers, Result) :-\n  length(Numbers, W),\n  (W is 0, Result is 0\n  ;\n    even_elts(XS, Numbers),\n    sum(XS, S),\n    last(Numbers, L),\n    Result is L * S\n  ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231555,"user_id":null,"body":"even_last([], 0) :- !.\neven_last(L, R) :-\n  append(_, [X], L),\n  even_sum(L, Y),\n  R is X * Y.\n\neven_sum([], 0) :- !.\neven_sum([X], X) :- !.\neven_sum([A,_|T], R) :-\n  even_sum(T, X),\n  R is A + X.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a2be17aee1aaefe2a000151":[{"id":231556,"user_id":null,"body":"% Store the result inside 3rd argument. Good luck!\narray_plus_array(Arr1, Arr2, Result) :-\n  sum_array(Arr1, S1),\n  sum_array(Arr2, S2),\n  Result is S1 + S2.\n\nsum_array([], 0).\n\nsum_array([H | T], R):-\n  sum_array(T, R1),\n  R is R1 + H.\n    \n\n    ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231557,"user_id":null,"body":"array_plus_array(Arr1, Arr2, Result) :-\n  sumlist(Arr1, Sum1),\n  sumlist(Arr2, Sum2),\n  Result is Sum1 + Sum2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231558,"user_id":null,"body":"array_plus_array(Arr1, Arr2, Result) :- \n  foldl(plus, Arr1, 0, Part),\n  foldl(plus, Arr2, Part, Result).\n\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231559,"user_id":564,"body":"array_plus_array(As, Bs, Sum) :-\n  sum_list(As, SumA),\n  sum_list(Bs, SumB),\n  Sum is SumA + SumB.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231560,"user_id":76,"body":"array_plus_array([], [], 0).\narray_plus_array([X | Xs], Y, R) :- array_plus_array(Xs, Y, R1), R is X + R1.\narray_plus_array([], [Y | Ys], R) :- array_plus_array([], Ys, R1), R is Y + R1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231561,"user_id":2503,"body":"% Store the result inside 3rd argument. Good luck!\nadd(X, Y, X+Y).\narray_plus_array(Arr1, Arr2, Result) :-\n  append(Arr1,Arr2, Arr),\n  foldl(add, Arr, 0, X),\n  Result is X.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231562,"user_id":null,"body":"% Store the result inside 3rd argument. Good luck!\narray_plus_array(Arr1, Arr2, Result) :-\n  append(Arr1, Arr2, Arr),\n  sum_list(Arr, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231563,"user_id":null,"body":"% Store the result inside 3rd argument. Good luck!\n\nsum_array([],0).\nsum_array([Item],Item).\nsum_array([A,B|Tail], Result):-\n  sum_array([A+B|Tail], Result).\narray_plus_array(Array1, Array2, Result):-\n  sum_array(Array1, Sum1),\n  sum_array(Array2, Sum2),\n  Result is Sum1+Sum2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231564,"user_id":527,"body":"array_plus_array(Xs, Ys, R) :- sum_list(Xs, Sx), sum_list(Ys, Sy), R is Sx + Sy.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231565,"user_id":null,"body":"array_plus_array(Arr1, Arr2, Result) :-\n  sum_list(Arr1, X),\n  sum_list(Arr2, Y),\n  Result is X + Y.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a2fd38b55519ed98f0000ce":[{"id":231566,"user_id":527,"body":"multi_table(Number, Result) :-\n  numlist(1, 10, Is),\n  maplist([I, L] >> format(string(L), \"~d * ~d = ~d\", [I, Number, I * Number]), Is, Ls),\n  atomics_to_string(Ls, \"\n\", Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231567,"user_id":null,"body":"multi_table(Number, Result) :-\n  line(1, Number, L1),\n  line(2, Number, L2),\n  line(3, Number, L3),\n  line(4, Number, L4),\n  line(5, Number, L5),\n  line(6, Number, L6),\n  line(7, Number, L7),\n  line(8, Number, L8),\n  line(9, Number, L9),\n  line(10, Number, L10),\n  foldl(string_concat, [L10, L9, L8, L7, L6, L5, L4, L3, L2, L1], '', Result).\n\nline(X, N, Line) :-\n  X < 10,\n  Result is X * N,\n  format(string(Line), '~d * ~d = ~d\n', [X, N, Result]).\nline(10, N, Line) :-\n  Result is 10 * N,\n  format(string(Line), '~d * ~d = ~d', [10, N, Result]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231568,"user_id":null,"body":"helper1(Num, 10, Result) :-\n  helper2(Num, 10, Result)\n.\n\nhelper1(Num, X, Result) :-\n  helper2(Num, X, Row),\n  string_concat(Row, \"\n\", Line),\n  Next is (X+1),\n  helper1(Num, Next, Rest),\n  string_concat(Line, Rest, Result)\n.\n\nhelper2(Num2, Num1, Result) :-\n  number_string(Num1, Num1Str),\n  number_string(Num2, Num2Str),\n  Res is (Num1 * Num2),\n  number_string(Res, ResStr),\n  string_concat(Num1Str, \" * \", First),\n  string_concat(First, Num2Str, Second),\n  string_concat(Second, \" = \", Third),\n  string_concat(Third, ResStr, Result)\n.\n\nmulti_table(Number, Result) :-\n  helper1(Number, 1, Result)\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231569,"user_id":null,"body":"multi_table(Number, Result) :-\n  build(1, Number, Result).\n\n\nbuild(10, C, R) :-\n  !,\n  SA is 10*C,\n  number_string(C, CS),\n  number_string(SA, RS),\n  string_concat(\"10 * \", CS, R1),\n  string_concat(\" = \", RS, R2),\n  string_concat(R1, R2, R).\n\n\nbuild(N, C, R) :-\n  K is N * C,\n  number_string(N, NS),\n  number_string(C, CS),\n  number_string(K, KS),\n  string_concat(NS, \" * \", T1),\n  string_concat(T1, CS, T2),\n  string_concat(T2, \" = \", T3),\n  string_concat(T3, KS, T4),\n  string_concat(T4, \"\n\", T5),\n  N1 is N+1, !,\n  build(N1, C, R1),\n  string_concat(T5, R1, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231570,"user_id":null,"body":"multi_line(N1, N2, Line) :-\n  M is N1 * N2,\n  format(string(Line), \"~d * ~d = ~d\", [N1,N2,M]).\n\ncombine_line(L1,L2,L) :-\n  format(string(L), \"~s\n~s\", [L1,L2]).\n\nmulti_gen(10, Number, Result) :-\n  multi_line(10,Number,Result).\nmulti_gen(X, Number, Result) :-\n  X1 is X + 1,\n  multi_line(X, Number, Line),\n  multi_gen(X1, Number, NRes),\n  combine_line(Line, NRes, Result).\n  \nmulti_table(Number, Result) :-\n  multi_gen(1,Number,Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231571,"user_id":168,"body":"multi_table(Number, X, R) :-\n  X =< 10,\n  M is Number * X,\n  (X < 10 -> S = \"\n\"; S = \"\"),\n  multi_table(Number, X + 1, T),\n  format(string(R), '~d * ~d = ~d~s~s', [X, Number, M, S, T]),!.\n\nmulti_table(_, _, \"\").\n\nmulti_table(Number, Result) :- multi_table(Number, 1, Result).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231572,"user_id":null,"body":"multi_table(N, R):-\n  mt(N, 10, R).\n\nmt(_, 0, \"\").\nmt(N, C, R):-\n  T is N * C,\n  number_string(N, Ns),\n  number_string(C, Cs),\n  number_string(T, Ts),\n  string_concat(Cs, \" * \", S1),\n  string_concat(S1, Ns, S2),\n  string_concat(S2, \" = \", S3),\n  string_concat(S3, Ts, S4),\n  nl(C, NL),\n  string_concat(S4, NL, S5),\n  C1 is C - 1,\n  mt(N, C1, R1),\n  string_concat(R1, S5, R).\n\nnl(C, \"\"):-\n  C =:= 10.\nnl(C, \"\n\"):-\n  C < 10.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231573,"user_id":544,"body":"multi_table(Multiplier, Result) :-\n  numlist(1, 10, Numbers),\n  maplist({Multiplier}\/[N, R]>>(R is Multiplier * N), Numbers, Products),\n  maplist({Multiplier}\/[N, P, R]>>(format(string(R), \"~d * ~d = ~d\", [N, Multiplier, P])), Numbers, Products, Lines),\n  atomics_to_string(Lines, \"\n\", Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231574,"user_id":null,"body":"multi_table(N,R) :- multi_table(N,1,R).\nmulti_table(_,11,''):-!.\nmulti_table(N,I,R):-\n  number_string(N,SN),\n  number_string(I,SI),\n  M is N*I, \n  number_string(M,SM),\n  string_concat(SI,' * ',R0),\n  string_concat(R0, SN, R1),\n  string_concat(R1,' = ', R2),\n  string_concat(R2, SM, R3),\n  ((I<10,SNL = '\n');(I>=10,SNL='')),\n  string_concat(R3, SNL, R4),\n  I0 is I+1,\n  multi_table(N, I0, R5),\n  string_concat(R4,R5,R)\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231575,"user_id":null,"body":"multi_table(Number, Result) :-\n n_times_m(Number, 1, Result). \n\nn_times_m(N, M, R) :-\n  M < 10,\n  n_times_m_mk_str(N, M, CURR),\n  Mp is M + 1,\n  n_times_m(N, Mp, NEXT),\n  string_concat(CURR, \"\n\", CURRN),\n  string_concat(CURRN, NEXT, R).\n\nn_times_m(N, 10, R) :- \n  n_times_m_mk_str(N, 10, R).\n  \nn_times_m_mk_str(X, Y, R) :-\n  Z is X * Y,\n  atom_string(X, OP1),\n  atom_string(Y, OP2),\n  atom_string(Z, OP3),\n  string_concat(OP2, \" * \", STR1),\n  string_concat(STR1, OP1, STR2),\n  string_concat(STR2, \" = \", STR3),\n  string_concat(STR3, OP3, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a3fe3dde1ce0e8ed6000097":[{"id":231576,"user_id":645,"body":"century_from_year(Y, R) :- R is (Y + 99) \/\/ 100.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231577,"user_id":277,"body":"century_from_year(Year, Res) :- Res is ceil(\/(Year,100)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231578,"user_id":17,"body":"century_from_year(1, Res) :- Res is 1.\ncentury_from_year(2, Res) :- Res is 1.\ncentury_from_year(3, Res) :- Res is 1.\ncentury_from_year(4, Res) :- Res is 1.\ncentury_from_year(5, Res) :- Res is 1.\ncentury_from_year(6, Res) :- Res is 1.\ncentury_from_year(7, Res) :- Res is 1.\ncentury_from_year(8, Res) :- Res is 1.\ncentury_from_year(9, Res) :- Res is 1.\ncentury_from_year(10, Res) :- Res is 1.\ncentury_from_year(11, Res) :- Res is 1.\ncentury_from_year(12, Res) :- Res is 1.\ncentury_from_year(13, Res) :- Res is 1.\ncentury_from_year(14, Res) :- Res is 1.\ncentury_from_year(15, Res) :- Res is 1.\ncentury_from_year(16, Res) :- Res is 1.\ncentury_from_year(17, Res) :- Res is 1.\ncentury_from_year(18, Res) :- Res is 1.\ncentury_from_year(19, Res) :- Res is 1.\ncentury_from_year(20, Res) :- Res is 1.\ncentury_from_year(21, Res) :- Res is 1.\ncentury_from_year(22, Res) :- Res is 1.\ncentury_from_year(23, Res) :- Res is 1.\ncentury_from_year(24, Res) :- Res is 1.\ncentury_from_year(25, Res) :- Res is 1.\ncentury_from_year(26, Res) :- Res is 1.\ncentury_from_year(27, Res) :- Res is 1.\ncentury_from_year(28, Res) :- Res is 1.\ncentury_from_year(29, Res) :- Res is 1.\ncentury_from_year(30, Res) :- Res is 1.\ncentury_from_year(31, Res) :- Res is 1.\ncentury_from_year(32, Res) :- Res is 1.\ncentury_from_year(33, Res) :- Res is 1.\ncentury_from_year(34, Res) :- Res is 1.\ncentury_from_year(35, Res) :- Res is 1.\ncentury_from_year(36, Res) :- Res is 1.\ncentury_from_year(37, Res) :- Res is 1.\ncentury_from_year(38, Res) :- Res is 1.\ncentury_from_year(39, Res) :- Res is 1.\ncentury_from_year(40, Res) :- Res is 1.\ncentury_from_year(41, Res) :- Res is 1.\ncentury_from_year(42, Res) :- Res is 1.\ncentury_from_year(43, Res) :- Res is 1.\ncentury_from_year(44, Res) :- Res is 1.\ncentury_from_year(45, Res) :- Res is 1.\ncentury_from_year(46, Res) :- Res is 1.\ncentury_from_year(47, Res) :- Res is 1.\ncentury_from_year(48, Res) :- Res is 1.\ncentury_from_year(49, Res) :- Res is 1.\ncentury_from_year(50, Res) :- Res is 1.\ncentury_from_year(51, Res) :- Res is 1.\ncentury_from_year(52, Res) :- Res is 1.\ncentury_from_year(53, Res) :- Res is 1.\ncentury_from_year(54, Res) :- Res is 1.\ncentury_from_year(55, Res) :- Res is 1.\ncentury_from_year(56, Res) :- Res is 1.\ncentury_from_year(57, Res) :- Res is 1.\ncentury_from_year(58, Res) :- Res is 1.\ncentury_from_year(59, Res) :- Res is 1.\ncentury_from_year(60, Res) :- Res is 1.\ncentury_from_year(61, Res) :- Res is 1.\ncentury_from_year(62, Res) :- Res is 1.\ncentury_from_year(63, Res) :- Res is 1.\ncentury_from_year(64, Res) :- Res is 1.\ncentury_from_year(65, Res) :- Res is 1.\ncentury_from_year(66, Res) :- Res is 1.\ncentury_from_year(67, Res) :- Res is 1.\ncentury_from_year(68, Res) :- Res is 1.\ncentury_from_year(69, Res) :- Res is 1.\ncentury_from_year(70, Res) :- Res is 1.\ncentury_from_year(71, Res) :- Res is 1.\ncentury_from_year(72, Res) :- Res is 1.\ncentury_from_year(73, Res) :- Res is 1.\ncentury_from_year(74, Res) :- Res is 1.\ncentury_from_year(75, Res) :- Res is 1.\ncentury_from_year(76, Res) :- Res is 1.\ncentury_from_year(77, Res) :- Res is 1.\ncentury_from_year(78, Res) :- Res is 1.\ncentury_from_year(79, Res) :- Res is 1.\ncentury_from_year(80, Res) :- Res is 1.\ncentury_from_year(81, Res) :- Res is 1.\ncentury_from_year(82, Res) :- Res is 1.\ncentury_from_year(83, Res) :- Res is 1.\ncentury_from_year(84, Res) :- Res is 1.\ncentury_from_year(85, Res) :- Res is 1.\ncentury_from_year(86, Res) :- Res is 1.\ncentury_from_year(87, Res) :- Res is 1.\ncentury_from_year(88, Res) :- Res is 1.\ncentury_from_year(89, Res) :- Res is 1.\ncentury_from_year(90, Res) :- Res is 1.\ncentury_from_year(91, Res) :- Res is 1.\ncentury_from_year(92, Res) :- Res is 1.\ncentury_from_year(93, Res) :- Res is 1.\ncentury_from_year(94, Res) :- Res is 1.\ncentury_from_year(95, Res) :- Res is 1.\ncentury_from_year(96, Res) :- Res is 1.\ncentury_from_year(97, Res) :- Res is 1.\ncentury_from_year(98, Res) :- Res is 1.\ncentury_from_year(99, Res) :- Res is 1.\ncentury_from_year(100, Res) :- Res is 1.\ncentury_from_year(Year, Res) :- YearMinus100 is Year - 100, century_from_year(YearMinus100, ResMinus1),\n  Res is ResMinus1 + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231579,"user_id":null,"body":"century_from_year(Year, Res) :-\n  Q is div(Year, 100),\n  M is mod(Year, 100),\n  (M > 0\n  -> Res is Q + 1\n  ; Res is Q).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231580,"user_id":null,"body":"century_from_year(Year, Res) :- Res is ceiling(Year \/ 100).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231581,"user_id":null,"body":"century_from_year(Year, Res) :-\n  Flag is Year mod 100,\n  Input is Year div 100,\n  modulo(Input, Flag, Res).\n  \nmodulo(Input, 0, Input).\nmodulo(Input, Flag, Out) :- Out is Input + 1.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231582,"user_id":null,"body":"century_from_year(Year, Res) :- (Year mod 100) =:= 0, !, Res is (Year div 100).\ncentury_from_year(Year, Res) :- Res is ((Year div 100) + 1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231583,"user_id":null,"body":"century_from_year(Year, Res) :- Res is floor((Year + 99) \/ 100).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231584,"user_id":null,"body":"century_from_year(Year, Res) :- (Year mod 100 > 0, Res is Year \/\/ 100 + 1); (Res is Year \/\/ 100).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231585,"user_id":null,"body":"century_from_year(Year, Res) :- \n  Div is div(Year, 100),\n  (Year mod 100 =:= 0 ->\n    Res is Div;\n    Res is Div + 1\n  ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a4138acf28b82aa43000117":[{"id":231586,"user_id":527,"body":"adjacent_elements_product(Xs, MaxProduct) :-\n  aggregate(max(X * Y), nextto(X, Y, Xs), MaxProduct).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231587,"user_id":null,"body":"adjacent_elements_product([X,Y], R) :- R is X*Y,!.\nadjacent_elements_product([X,Y|T], R):- adjacent_elements_product([Y|T],RR), R is max(X*Y,RR).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231588,"user_id":null,"body":"intern_elements_product([H1,H2|T],Akk,M) :- \n  Temp is H1 * H2,\n  Akk < Temp,\n  intern_elements_product([H2|T],Temp,M).\n\nintern_elements_product([H1,H2|T],Akk,M) :- \n  Temp is H1 * H2,\n  Akk >= Temp,\n  intern_elements_product([H2|T],Akk,M).\n  \nintern_elements_product([_], A, A).\n\nadjacent_elements_product([H1,H2|T], MaximumProduct) :-\n  FirstMax is H1 * H2, \n  intern_elements_product([H2|T],FirstMax, MaximumProduct)\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231589,"user_id":null,"body":"adjacent_elements_product([A,B], MaximumProduct) :- MaximumProduct is A * B.\nadjacent_elements_product([A,B|T], MaximumProduct) :- Z0 is A * B, \n                                                      adjacent_elements_product([B|T], Z1),\n                                                      (Z0 > Z1 -> MaximumProduct is Z0; MaximumProduct is Z1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231590,"user_id":null,"body":"adjacent_elements_product(Array, MaximumProduct) :-\n  aep(Array, X, MaximumProduct).\n\naep([_], CurMax, CurMax).\naep([X,Y|Ts], CurMax, Max):-\n  var(CurMax), !,\n  CurMax is X * Y,\n  aep([Y|Ts], CurMax, Max).\naep([X,Y|Ts], CurMax, Max):-\n  Z is X * Y,\n  Z > CurMax, !,\n  aep([Y|Ts], Z, Max).\naep([X,Y|Ts], CurMax, Max):-\n  aep([Y|Ts], CurMax, Max).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231591,"user_id":544,"body":"adjacent_elements_product(Array, MaximumProduct) :-\n  findall(Left, append(Left, [_], Array), [Left]),\n  Array = [_ | Right],\n  maplist([X, Y, R]>>(R is X * Y), Left, Right, Products),\n  max_list(Products, MaximumProduct).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231592,"user_id":null,"body":"adjacent_elements_product([X, Y], M) :- M is X * Y.\n\nadjacent_elements_product(Array, MaximumProduct) :-\n    Array = [X, Y | T],\n    adjacent_elements_product([Y | T], M),\n    MaximumProduct is max(X * Y, M).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231593,"user_id":null,"body":"adjacent_elements_product(L, Max) :-\n  findall(Z, (adjacent(X,Y,L), Z is X*Y), Ps),\n  max_member(Max, Ps).\n\nadjacent(X, Y, [X,Y|_]).\nadjacent(X, Y, [_|T]) :- adjacent(X, Y, T).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231594,"user_id":53,"body":"f([], M, R) :- R = M.\nf([X], M, R) :- R = M.\nf([H,S|XS], M, R) :-\n  T is H * S,\n  M1 is max(T, M),\n  f([S|XS], M1, R).\n\nadjacent_elements_product(Array, MaximumProduct) :-\n  f(Array, -1000000, MaximumProduct).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231595,"user_id":null,"body":"adjacent_elements_product([A,B], X) :-\n    X is A*B, !.\nadjacent_elements_product([A,B|T], X) :-\n    adjacent_elements_product([B|T], Y),\n    X is max(A*B, Y).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a48948e145c46820b00002f":[{"id":231596,"user_id":null,"body":"factors(P, [F|Ps]) :-\n    R is round(sqrt(P)),\n    between(2,R,F),\n    P mod F =:= 0,\n    Q is P \/ F,\n    !,\n    factors(Q, Ps).\n\nfactors(P,[P]).\n\nkprimes_step(K, Step, Start, End, Ls) :-\n    findall(P,(between(Start,End,P), k_prime(P,K)),Ns),\n    findall([A,B],(member(A,Ns), member(B,Ns), Step is B - A), Ls).\n\nk_prime(P, K) :-\n    factors(P,Ps),\n    length(Ps,K).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231597,"user_id":null,"body":"kprimes_step(K, Step, Start, End, Ls) :-\n  count_kprimes(K, Start, End, KPs),\n  aggregate_all(bag([B,A]), (member(A,KPs), member(B,KPs), Step is A-B), Ls).\n\ncount_kprimes(K, Start, End, Ls) :-\n  aggregate_all(bag(N), (between(Start,End,N), kprime(K,N)), Ls).\n\nkprime(K,N) :- factors(N,2,Fs), length(Fs,K).\nfactors(N,F,R) :-\n  N<F*F -> R=[N]\n; divmod(N,F,M,0) -> R=[F|L], factors(M,F,L)\n; succ(F,G), factors(N,G,R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231598,"user_id":76,"body":"kprimes_step(K, Step, Start, End, Ls) :-\n  findall([X, XStep], (\n    between(Start, End, X), \n    XStep is X + Step, \n    XStep =< End, \n    factor_count(X, F1), \n    F1 =:= K, \n    factor_count(XStep, F2),\n    F1 =:= F2\n  ), Ls).\n\nfactor_count(N, Count) :-\n  factor_count_aux(N, 0, 2, Count).\n  \nfactor_count_aux(N, C, D, Count) :-\n  D * D > N, !,\n  (N > 1 -> Rem = 1 ; Rem = 0),\n  Count is C + Rem.\n  \nfactor_count_aux(N, C, D, Count) :-\n  N mod D =:= 0 \n  -> N1 is N div D, succ(C, C1), factor_count_aux(N1, C1, D, Count)\n  ; succ(D, D1), factor_count_aux(N, C, D1, Count).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231599,"user_id":53,"body":"count_prime_factors_aux(N, I, Acc, L, R) :-\n  M is div(N, I),\n  (L == 0, I > M ->\n      (N > 1 ->\n        Acc2 is Acc + 1,\n        R = Acc2;\n        R = Acc);\n   0 is mod(N, I) -> \n      N2 is div(N, I),\n      Acc2 is Acc + 1,\n      count_prime_factors_aux(N2, I, Acc2, 1, R);\n   I2 is I + 1, \n   count_prime_factors_aux(N, I2, Acc, 0, R)).\n\ncount_prime_factors(0, R) :- R = 0.\ncount_prime_factors(K, R) :-\n  count_prime_factors_aux(K, 2, 0, 0, R).\n  \nkprimes_step_aux(K, Step, N, End, Ls, R) :-\n  REnd is End - Step,\n  NStep is N + Step,\n  (N > REnd -> \n      reverse(Ls, R);\n   count_prime_factors(N, A),\n   count_prime_factors(NStep, B),\n   N2 is N + 1,\n   (A == K, B == K -> \n      kprimes_step_aux(K, Step, N2, End, [[N, NStep] | Ls], R);\n    kprimes_step_aux(K, Step, N2, End, Ls, R))).\n\nkprimes_step(K, Step, Start, End, Ls) :-\n  kprimes_step_aux(K, Step, Start, End, [], Ls).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231600,"user_id":492,"body":"mult_num(Num, Ls) :- Num > 0, mult_num(Num, Ls, 2).\nmult_num(1, [], _) :- !.\nmult_num(Num, [Cnt|Ls], F) :- div(Num, F, Cnt, Qu), !,\n   follow(Qu, F, NewF), mult_num(Qu, Ls, NewF).\nmult_num(Num, Ls, F) :- !, \n   follow(Num, F, NewF), mult_num(Num, Ls, NewF).\ndiv(Num, F, Cnt, Qu) :- aux(Num, F, Cnt, Qu, 0), Cnt > 0.\naux(Num, F, Cnt, Qu, K) :- S is Num \/\/ F, Num =:= S * F, !,\n   K1 is K + 1, aux(S, F, Cnt, Qu, K1).\naux(Num, _, Cnt, Num, Cnt).\nfollow(_, 2, 3) :- !.\nfollow(Num, F, NewF) :- F * F < Num, !, NewF is F + 2.\nfollow(Num, _, Num).\ncount_p(N, K, U) :- \n    mult_num(N, Ls),\n    foldl([A, B, R] >> (R is A + B), Ls, 0, C),\n    C =:= K,\n    U = N.\nkprimes_step(K, Step, Start, End, Ls) :-\n    Nd is End - Step,\n    findall(\n      E,\n      (   \n        between(Start, Nd, U),\n        count_p(U, K, C1),\n        V is U + Step,\n        count_p(V, K, C2),             \n        C1 =:= U, \n        C2 =:= V,\n        E = [C1, C2]\n      ),\n      Ls\n).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a4b16435f08299c7000274f":[{"id":231601,"user_id":null,"body":"g(L,R,O) :- (0 is L\/\\1) -> O is R+(L^2) ; O is R+sqrt(L).\nsum_square_even_root_odd(Ns, R) :- \n  foldl(g,Ns,0,Sum),\n  format(string(F), \"~2f\", [Sum]),\n  number_string(R,F).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231602,"user_id":544,"body":"f(N, R) :-\n  (N mod 2 =:= 0 \n    -> R is N^2 \n    ; R is sqrt(N)).\n\nsum_square_even_root_odd(Ns, Result) :-\n  maplist(f, Ns, Rs), sum_list(Rs, ResultUnrounded),\n  Result is round(ResultUnrounded * 100) \/ 100.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231603,"user_id":null,"body":"sum_square_even_root_odd(L, R) :-\n    sum_square_even_root_odd_(L, X),\n    format(atom(A), '~2f', [X]),\n    read_from_chars(A, R).\n\nsum_square_even_root_odd_([], 0) :- !.\nsum_square_even_root_odd_([H|T], R) :-\n    (   0 is H mod 2\n    ->  X is H*H\n    ;   X is sqrt(H)\n    ),\n    sum_square_even_root_odd_(T, Y),\n    R is X + Y.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231604,"user_id":564,"body":"pow_for(N, Pow) :-\n  N mod 2 =:= 0 -> Pow is 2 ; Pow is 0.5.\n\nsquare_even_root_odd(N, Acc, Res) :-\n  pow_for(N, Pow),\n  Res is Acc + N ** Pow.\n\nsum_square_even_root_odd(Nums, Result) :-\n  foldl(square_even_root_odd, Nums, 0, Sum),\n  Result is round(Sum * 100) \/ 100.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231605,"user_id":76,"body":"sum_square_even_root_odd(Nums, Result) :-\n  foldl([N, S, R] >> (N mod 2 =:= 0 -> R is S + N ** 2 ; R is S + sqrt(N)), Nums, 0, Sum),\n  Result is round(Sum * 100) \/ 100.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a4d303f880385399b000001":[{"id":231606,"user_id":76,"body":"strong(Number, Result) :-\n  number_chars(Number, Chars),\n  maplist(atom_number, Chars, Digits),\n  maplist(fact, Digits, Factorials),\n  sumlist(Factorials, Sum),\n  (Sum =:= Number -> Result = \"STRONG!!!!\" ; Result = \"Not Strong !!\").\n  \nfact(N, R) :- N < 2, R is 1, !.\nfact(N, R) :- N1 is N - 1, fact(N1, R1), R is N * R1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231607,"user_id":645,"body":"strong(1, \"STRONG!!!!\") :- !.\nstrong(2, \"STRONG!!!!\") :- !.\nstrong(145, \"STRONG!!!!\") :- !.\nstrong(40585, \"STRONG!!!!\") :- !.\nstrong(_, \"Not Strong !!\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231608,"user_id":null,"body":"factorial(0, R, R).\nfactorial(N, A, R) :-\n  N >= 0,\n  A1 is N * A,\n  N1 is N - 1,\n  factorial(N1, A1, R).\nfactorial(N, R) :- factorial(N, 1, R).\n\nnumber_to_digits(Number, [Digit|[]]) :-\n  Number < 10,\n  Digit is Number.\nnumber_to_digits(N, R) :-\n  N1 is (N \/\/ 10),\n  number_to_digits(N1, R1),\n  D is (N mod 10),\n  append(R1, [D], R).\n\nstrong(Number, Result) :-\n  number_to_digits(Number, Digits),\n  maplist(factorial, Digits, Factorials),\n  sum_list(Factorials, Value),\n  (Value =:= Number\n  -> Result = \"STRONG!!!!\"\n  ; Result = \"Not Strong !!\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231609,"user_id":null,"body":":- use_module(library(clpfd)).\n\ndigits(0, Acc, Acc).\ndigits(N, Acc, Res) :-\n  divmod(N, 10, Q, R),\n  digits(Q, [R|Acc], Res).\n\nfact(0, 1).\nfact(N, F) :-\n        N #> 0,\n        N1 #= N - 1,\n        fact(N1, F1),\n        F #= N * F1.\n\nres(N, N, \"STRONG!!!!\").\nres(_, _, \"Not Strong !!\").\n\nstrong(N, Res) :-\n  digits(N, [], Ds),\n  maplist([D,X]>>fact(D,X), Ds, Fs),\n  sum_list(Fs, N2),\n  once(res(N, N2, Res)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231610,"user_id":null,"body":"fact(0, 1).\nfact(1, 1).\nfact(2, 2).\nfact(3, 6).\nfact(4, 24).\nfact(5, 120).\nfact(6, 720).\nfact(7, 5040).\nfact(8, 40320).\nfact(9, 362880).\nfact_digits(0, 0).\nfact_digits(N, R) :-\n  N > 0, \n  divmod(N, 10, N1, D),\n  fact(D, F),\n  fact_digits(N1, R1),\n  R is F + R1.\nstrong(N, R) :-\n  fact_digits(N, R1),\n  (N = R1 -> R = \"STRONG!!!!\"; R = \"Not Strong !!\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231611,"user_id":53,"body":"strong(1, \"STRONG!!!!\").\nstrong(2, \"STRONG!!!!\").\nstrong(145, \"STRONG!!!!\").\nstrong(40585, \"STRONG!!!!\").\nstrong(_, \"Not Strong !!\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231612,"user_id":168,"body":"fact(0, 1) :- !.\nfact(N, R) :- N > 0, N1 is N - 1, fact(N1, X), R is N * X.\n\nstrong(Number, Result) :-\n  number_codes(Number, Ds),\n  maplist([X, R] >> (T is X - 48, fact(T, R)), Ds, Xs),\n  sumlist(Xs, S),\n  S = Number -> Result = \"STRONG!!!!\"; Result = \"Not Strong !!\".\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231613,"user_id":null,"body":"factorial( 0, 1 ).\nfactorial( N, F ):- \n    N1 is N - 1,\n  \tfactorial(N1, F1),\n  \tF is N * F1.\n\nstrong(Number, Result) :-\n\tnumber_chars(Number, Cs),\n    maplist(atom_number(), Cs, Res),\n    maplist(factorial(), Res, Facts),\n    sum_list(Facts, Sums),\n    (   Sums == Number ->  Result = \"STRONG!!!!\"\n    ;   Result = \"Not Strong !!\"\n    ).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231614,"user_id":null,"body":"fact(X, 1) :- \n  X < 2.\n\nfact(X, F) :- \n  Y is X - 1, \n  fact(Y, Z), \n  F is Z * X.\n\nsuma(A, B, C) :- \n  C is A + B.\n\nsplit_number(Number, [Number]) :-\n  Number < 10,\n  Number > 0.\n  \nsplit_number(Number, Number_List) :-\n  Quotient is Number \/\/ 10,\n  Remainder is Number - (Quotient * 10),\n  split_number(Quotient, New_List),\n  append(New_List, [Remainder], Number_List).\n\nresponse(Number, Number, \"STRONG!!!!\").\nresponse(_, _, \"Not Strong !!\").\n    \nstrong(Number, Result) :-\n  split_number(Number, Number_List),\n  maplist(fact, Number_List, List_Fact),\n  foldl(suma, List_Fact, 0, Sum),\n  response(Number, Sum, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231615,"user_id":null,"body":"digits(0, []) :- !.\ndigits(N, [DsR|Ds]) :- divmod(N, 10, DsL, DsR), digits(DsL, Ds).\n  \nstrong(Number, Result) :-\n  digits(Number, Ds),\n  foldl([X,Y,Z] >> (factorial(X,N), Z is Y+N), Ds, 0, Sum),\n  (Sum =:= Number -> (Result=\"STRONG!!!!\") ; Result=\"Not Strong !!\"), !.\n  \nfactorial(0,1).\nfactorial(1,1).\nfactorial(2,2).\nfactorial(3,6).\nfactorial(4,24).\nfactorial(5,120).\nfactorial(5,720).\nfactorial(6,5040).\nfactorial(7,5040).\nfactorial(8,40320).\nfactorial(9,362880).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a4e3782880385ba68000018":[{"id":231616,"user_id":527,"body":"balanced_num(Number, \"Balanced\") :-\n  number_codes(Number, Codes),\n  (append(Left, [_ | Right], Codes); append(Left, [_, _ | Right], Codes)),\n  same_length(Left, Right),\n  sum_list(Left, Sum),\n  sum_list(Right, Sum),\n  !.\n\nbalanced_num(_, \"Not Balanced\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231617,"user_id":168,"body":"sum_string(S, R) :-\n  string_codes(S, Cs),\n  foldl([C, A, X] >> (X is A + C - 48), Cs, 0, R).\n\nbalanced_num(Number, Result) :-\n  number_string(Number, Str),\n  string_length(Str, N),\n  K1 is (N - 1) div 2,\n  K2 is N div 2 + 1,\n  L is N - K2,\n  sub_string(Str, 0, K1, _, S1),\n  sub_string(Str, K2, L, _, S2),\n  sum_string(S1, R1),\n  sum_string(S2, R2),\n  (R1 == R2 -> Result = \"Balanced\"; Result = \"Not Balanced\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231618,"user_id":544,"body":"balanced_num(Number, \"Balanced\") :- Number < 100, !.\nbalanced_num(Number, \"Balanced\") :-\n  number_chars(Number, Digits),\n  length(Digits, D),\n  (0 is D mod 2 -> C = 2 ; C = 1),\n  PrefixLength is (D - C) \/ 2,\n  length(LeftSide, PrefixLength), length(RightSide, PrefixLength),\n  append([LeftSide, _, RightSide], Digits),\n  maplist(atom_number, LeftSide, L), sum_list(L, Sum),\n  maplist(atom_number, RightSide, R), sum_list(R, Sum), !.\nbalanced_num(_, \"Not Balanced\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231619,"user_id":null,"body":"firstn(L1,N,L2) :- length(L2,N), append(L2,_,L1).\nlastn(L1,N,L2) :- length(L2,N), append(_,L2,L1).\n\nbalanced_num(N, \"Balanced\") :-\n  number_codes(N, Codes),\n  length(Codes,Len), Mid is Len\/\/2 + ((Len\/\\1) xor 1),\n  firstn(Codes, Mid, Left),\n  lastn(Codes, Mid, Right),\n  sum_list(Left, Sum),\n  sum_list(Right, Sum), !.\nbalanced_num(_, \"Not Balanced\").    \n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231620,"user_id":null,"body":"balanced_num(Number, Result) :-\n  number_codes(Number, Codes),\n  maplist([Code, Digit]>>(Digit is Code - 48), Codes, Digits),\n  length(Left, Halflen),\n  length(Right, Halflen),\n  ( append(Left,[_ | Right], Digits)\n  ; append(Left, [_, _ | Right], Digits)\n  ),\n  !,\n  sum_list(Left, L_sum),\n  sum_list(Right, R_sum),\n  (  L_sum = R_sum\n  -> Result = \"Balanced\"\n  ;  Result = \"Not Balanced\"\n  ).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231621,"user_id":null,"body":"balanced_num(Number, Result) :-\n  digits(Number,Digits),\n  reverse(Digits,ReversedDigits), \n  \n  length(Digits,L),\n  N is ceil(L\/2)-1,\n  \n  sumfirst(N,Digits,LeftSum),\n  sumfirst(N,ReversedDigits,RightSum),\n  \n  LeftSum=:=RightSum -> Result=\"Balanced\" ; Result=\"Not Balanced\".\n\nsumfirst(N,_,0) :- N =< 0, !.\nsumfirst(N,[H|T],Sum) :-\n  NextN is N-1,\n  sumfirst(NextN,T,NextSum),\n  Sum is NextSum + H.\n\ndigits(N,Ds) :-\n  atom_chars(N,Cs),\n  maplist(atom_number,Cs,Ds).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231622,"user_id":null,"body":"balanced_num(Number, Result) :-\n    number_chars(Number, Chars),\n    length(Chars, Len),\n    (0 is Len mod 2 -> (SideLen is Len \/\/ 2 - 1,Middle = [_,_]);(SideLen is Len \/\/ 2,Middle = [_])),\n    maplist([X,Y]>>(number_chars(Y, [X])), Chars, Numbers),\n    length(Left, SideLen),\n    length(Right, SideLen),\n    append(Left, Middle, LeftWithMiddle),\n    append(LeftWithMiddle, Right, Numbers),\n    sum_list(Left, SumLeft),\n    sum_list(Right, SumRight),\n    (SumLeft = SumRight -> Result = \"Balanced\";Result = \"Not Balanced\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231623,"user_id":null,"body":"balanced_num(Number, V) :-\n  number_codes(Number, K),\n  (bal(K) -> V = \"Balanced\"; V = \"Not Balanced\").\n  \nbal([]) :- !.\nbal([_]) :- !.\nbal([_,_]) :- !.\nbal(S) :-\n   append(L, [_,_|R], S),\n   length(L, A),\n   length(R, A),\n   sumlist(L, B),\n   sumlist(R, B), !.\nbal(S) :-\n   append(L, [_|R], S),\n   length(L, A),\n   length(R, A),\n   sumlist(L, B),\n   sumlist(R, B), !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231624,"user_id":null,"body":"append([], X, X).\nappend([First | Rest], X, [First | Ans2]) :- append(Rest, X, Ans2). \n\nreverse([], []).\nreverse([First | Rest], Ans) :- reverse(Rest, ReverseRest), append(ReverseRest, [First], Ans).\n\nto_list(N, List) :- to_list_reverse(N, List2), reverse(List2, List).\n\nto_list_reverse(0, []).\nto_list_reverse(N, [First | Rest]) :- N > 0, First is mod(N, 10), OtherN is div(N, 10), to_list_reverse(OtherN, Rest).\n\nat_least_one_elem([_ | _]).\n\nleft_right_sums([], 0, 0).\nleft_right_sums([_], 0, 0).\nleft_right_sums([_, _], 0, 0).\nleft_right_sums([First | Rest], Left, Right) :-\n    append(Rest2, [Last], Rest), \n    at_least_one_elem(Rest2), \n    left_right_sums(Rest2, LeftAux, RightAux),\n    Left is LeftAux + First,\n    Right is RightAux + Last.\n\nbalanced_num(X, \"Balanced\") :- to_list(X, X2), left_right_sums(X2, Left, Right), Left =:= Right.\nbalanced_num(X, \"Not Balanced\") :- to_list(X, X2), left_right_sums(X2, Left, Right), Left =\\= Right.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231625,"user_id":null,"body":"sum_of_digits(0, 0) :- !.\nsum_of_digits(N, R) :- divmod(N, 10, N1, R0), sum_of_digits(N1, R1), R is R0 + R1.\n\nbalanced(Number) :- between(0, 99, Number), !.\n\nbalanced(Number) :-\n  number_string(Number, NumberString), \n  string_length(NumberString, Length),\n  HalfLength is (Length - 1) div 2,\n  sub_string(NumberString, 0, HalfLength, _, HalfNumber0String),\n  sub_string(NumberString, _, HalfLength, 0, HalfNumber1String),\n  number_string(HalfNumber0, HalfNumber0String),\n  number_string(HalfNumber1, HalfNumber1String),\n  sum_of_digits(HalfNumber0, HalfNumberSum),\n  sum_of_digits(HalfNumber1, HalfNumberSum).\n\nbalanced_num(Number, \"Balanced\") :- balanced(Number), !.\nbalanced_num(_, \"Not Balanced\").\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a4ea304b3bfa89a9900008e":[{"id":231626,"user_id":null,"body":"max_number(Number, Result) :-\n  number_chars(Number, Chars),\n  sort(0, @>=, Chars, Sorted),\n  number_chars(Result, Sorted).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231627,"user_id":168,"body":"max_number(Number, Result) :-\n  number_string(Number, S),\n  string_chars(S, Xs),\n  sort(0, @>=, Xs, Ys),\n  string_chars(R, Ys),\n  number_string(Result, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231628,"user_id":null,"body":"max_number(Number, Result) :-\n  number_chars(Number, Chars),\n  msort(Chars, Sorted), reverse(Sorted, Revs),\n  number_chars(Result, Revs).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231629,"user_id":null,"body":"max_number(Number, Result) :-\n    number_chars(Number, Ls),\n    sort(0, @>=, Ls, R),\n    atomics_to_string(R, Rs),\n    atom_number(Rs, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231630,"user_id":null,"body":"max_number(Number, Result) :- \n  number_codes(Number, Codes),\n  sort(0, >=, Codes, Sorted),\n  number_codes(Result, Sorted).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231631,"user_id":null,"body":"max_number(Number, Result) :-\n  number_codes(Number, Codes),\n  sort(0, @>=, Codes, Sorted),\n  number_codes(Result, Sorted).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231632,"user_id":1180,"body":"max_number(Number, Result) :-\n  number_string(Number, NumberString),\n  atom_codes(NumberString, Codes),\n  sort(0, @=<, Codes, SortedCodes),\n  reverse(SortedCodes, ReversedSortedCodes),\n  string_codes(SortedString, ReversedSortedCodes),\n  number_codes(Result, SortedString).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231633,"user_id":null,"body":"split_n(0, []).\nsplit_n(N, [X|T]) :- divmod(N, 10, Y, X), split_n(Y, T), !.\n\nsplit_o([X], [], [X]).\nsplit_o([X|T], E, [X|O]) :- split_e(T, E, O).\nsplit_e([X], [X], []).\nsplit_e([X|T], [X|E], O) :- split_o(T, E, O).\n\nmerge_sort([X], [X]).\nmerge_sort(X, R) :- split_e(X, E, O), merge_sort(E, R1), merge_sort(O, R2), merge(R1, R2, R), !.\n\nreverse([], []).\nreverse([X|T], R) :- reverse(T, R1), append(R1, [X], R).\n\nconcat([], '').\nconcat([X|T], R) :- concat(T, R1), atom_concat(X, R1, R).\n\nmax_number(X, R) :- split_n(X, L), merge_sort(L, L2), reverse(L2, L3), concat(L3, L4), atom_number(L4, R).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231634,"user_id":null,"body":"max_number(Number, Result) :-\n  toList(Number, List),\n  sort1(List, Sorted),\n  toNumber(Sorted, Result).\n  \ntoList(0,[]).\ntoList(Num,[Mod|Rest]) :-\n  Mod is Num mod 10,\n  RestNum is (Num - Mod) \/ 10,\n  toList(RestNum, Rest).\n  \nsort1([],[]).\nsort1([X|XS],Sorted) :-\n  sort1(XS,YS),\n  insert(X,YS,Sorted).\n  \ninsert(X,[],[X]).\ninsert(X1,[X2|XS],[X1,X2|XS]) :- X1 =< X2.\ninsert(X1,[X2|XS],[X2|YS]) :- X1 > X2, insert(X1,XS,YS).\n\ntoNumber([],0).\ntoNumber([X|XS], Res) :-\n  toNumber(XS,R),\n  Res is X + 10*R.\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231635,"user_id":null,"body":"max_number(Number, Result) :-\n  number_chars(Number, M),\n  msort(M, B),\n  reverse(B, C),\n  atom_string(C, D),\n  atom_number(D, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a512f6a80eba857280000fc":[{"id":231636,"user_id":751,"body":"nth_smallest(A, N, Res) :- \n  msort(A, Asc), \n  nth1(N,Asc, Res).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231637,"user_id":null,"body":"get([L|T], 1, L) :- !.\nget([L|T], Pos, R) :- Z0 is Pos - 1, get(T, Z0, R). \nnth_smallest(Arr, Pos, Result) :- msort(Arr, Arr2), get(Arr2, Pos, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231638,"user_id":168,"body":"nth_smallest(Arr, Pos, Result) :-\n  sort(0, @=<, Arr, Xs),\n  nth1(Pos, Xs, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231639,"user_id":544,"body":"nth_smallest(Xs, I, Result) :-\n    sort(0, @=<, Xs, XsSorted),\n    nth1(I, XsSorted, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231640,"user_id":null,"body":"nth_smallest(Arr, Pos, Result) :-\n  sort(0, @=<, Arr, Ord), \n  nth1(Pos, Ord, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231641,"user_id":null,"body":"nth_smallest(L, N, X) :-\n        sort(0, @=<, L, L_sorted),\n        nth1(N, L_sorted, X).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231642,"user_id":1180,"body":"nth_smallest(Arr, Pos, Result) :-\n  ArrPos is Pos - 1, sort(0, @=<, Arr, Sorted), nth0(ArrPos, Sorted, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231643,"user_id":null,"body":"find_nth([X|T], 1, X).\nfind_nth([X|T], N, R) :- Y is N - 1, find_nth(T, Y, R), !.\n\nnth_smallest(L, N, R) :- sort(0, @=<, L, R1), find_nth(R1, N, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231644,"user_id":null,"body":"nth_smallest(Arr, Pos, Result) :-\n  msort(Arr, ArrSort),\n  nth1(Pos, ArrSort, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231645,"user_id":null,"body":"nth_smallest(Arr, Pos, Result) :- sort(0,@=<,Arr,L), nth1(Pos,L,Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a523566b3bfa84c2e00010b":[{"id":231646,"user_id":527,"body":"min_sum(Xs, R) :-\n  sort(0, @=<, Xs, Asc),\n  append(MinAsc, MaxAsc, Asc),\n  reverse(MaxAsc, MaxDesc),\n  foldl([X0, X1, A0, A1] >> (A1 is A0 + X0 * X1), MinAsc, MaxDesc, 0, R), !.\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231647,"user_id":168,"body":"min_sum(Array, Result) :-\n  msort(Array, Xs),\n  reverse(Xs, Ys),\n  foldl([X, Y, V, R] >> (R is V + X * Y), Xs, Ys, 0, R),\n  Result is R \/ 2.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231648,"user_id":null,"body":"min_sum(Array, Result) :-\n  msort(Array,Sorted),\n  length(A,N),\n  length(B,N),\n  append(A,B,Sorted),\n  reverse(B,C),\n  foldl([R1,R2,L,O]>>(O is L+(R1*R2)),A,C,0,Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231649,"user_id":null,"body":"del([X|T], X, T) :- !.\ndel([L|T], X, [L|R]) :- del(T, X, R).\n\nfind_min([X], X).\nfind_min([L|T], X) :- find_min(T, Z0), (L < Z0 -> X is L; X is Z0).\n\nfind_max([X], X).\nfind_max([L|T], X) :- find_max(T, Z0), (L > Z0 -> X is L; X is Z0).\n\nmin_sum([], 0) :- !.\nmin_sum(Array, Result) :- find_min(Array, Z0), \n                          del(Array, Z0, Arr1),\n                          find_max(Arr1, Z1),\n                          del(Arr1, Z1, Arr2),\n                          Z3 is Z1 * Z0,\n                          min_sum(Arr2, Z4),\n                          Result is Z4 + Z3.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231650,"user_id":544,"body":"min_sum(Array, Result) :-\n  sort(0, @=<, Array, SortedArray),  \n  append(LeftSide, RightSide, SortedArray),\n  length(LeftSide, L), length(RightSide, L), !,\n  reverse(RightSide, RightSideRev),\n  foldl([X, Y, FromLeft, ToRight]>>(ToRight is FromLeft + X * Y), LeftSide, RightSideRev, 0, Result).\n  \n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231651,"user_id":null,"body":"min_sum(Array, Result) :-\n  msort(Array, Sorted),\n  min_sum0(Sorted, Result).\n\nmin_sum0([], 0).\nmin_sum0([Head|Tail], Result) :-\n  append(Rest, [Last], Tail),\n  min_sum(Rest, Result0),\n  Result is Result0 + Head * Last.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231652,"user_id":null,"body":"sumProd(X, Y, S0, S1) :- S1 is S0 + X * Y.\n\nmin_sum(Array, Result) :-\n    msort(Array, L1),\n    reverse(L1, L2),\n    foldl(sumProd, L1, L2, 0, R),\n    Result is R \/ 2.\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231653,"user_id":null,"body":"min_sum(List, R) :-\n    sort(0, @=<, List, Sorted),\n    min_sum_(Sorted, 0, R).\nmin_sum_([], Acc, R) :- !, R = Acc.\nmin_sum_([First | Rest], Acc, R) :-\n    append(Middle, [Last], Rest),\n    !,\n    Acc_new is Acc + First * Last,\n    min_sum_(Middle, Acc_new, R).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231654,"user_id":null,"body":"min_sum(Array, Result) :-\n  msort(Array, SortArray),\n  min_sum1(SortArray, Result).\n\nmin_sum1([], 0).\nmin_sum1([Min|Arr], Result1) :-\n  last(Arr,Max),\n  select(Max,Arr,Arr1),\n  min_sum1(Arr1, Result2),\n  Result1 is Result2 + (Max * Min).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231655,"user_id":null,"body":"min_sum(Array, Result) :-\n    length(Array, Len),\n    NewLen is Len div 2,\n    sort(0, @=<, Array, Asc),\n    sort(0, @>=, Array, Desc),\n    length(NewAsc, NewLen),\n    length(NewDesc, NewLen),\n    append(NewAsc,_,Asc),\n    append(NewDesc,_,Desc),\n    foldl([W,X,Y,Z]>>(Z is W * X + Y), NewAsc,NewDesc, 0, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a53a17bfd56cb9c14000003":[{"id":231656,"user_id":null,"body":"disarium_number(Number, Result) :-\n  number_chars(Number,Cs), maplist(atom_number,Cs,Ds),\n  findall(N**I, nth1(I,Ds,N), Res), sumlist(Res, Disarium),\n  Number =:= Disarium -> Result = \"Disarium !!\" ; Result = \"Not !!\".","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231657,"user_id":53,"body":"walker(0, _, _, _, \"Disarium !!\") :- !.\nwalker(N, 0, N, _, \"Disarium !!\") :- !.\nwalker(N, 0, S, _, \"Not !!\") :- !.\nwalker(N, C, S, M, R) :-\n  C1 is C - 1,\n  S1 is S + rem(M, 10) ** C,\n  M1 is div(M, 10),\n  walker(N, C1, S1, M1, R).\n\ndisarium_number(N, R) :-\n  C is floor(log10(N)) + 1,\n  walker(N, C, 0, N, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231658,"user_id":168,"body":"disarium_number(Number, Result) :-\n  number_codes(Number, Xs),\n  length(Xs, L),\n  numlist(1, L, Is),\n  maplist([X, I, R] >> (R is (X - 48) ^ I), Xs, Is, Ys),\n  sumlist(Ys, R),\n  (R = Number -> Result = \"Disarium !!\"; Result = \"Not !!\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231659,"user_id":null,"body":"disarium_number(Number, \"Disarium !!\") :-\n  number_codes(Number, Codes),\n  findall(X, (nth1(I, Codes, N), X is (N-48)**I), Pows),\n  sum_list(Pows, Number), !.\ndisarium_number(_, \"Not !!\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231660,"user_id":null,"body":"disarium_number(Number, Result) :-\n  number_codes(Number, Codes),\n  maplist([Code, Digit]>>(Digit is Code - 48), Codes, Digits),\n  dis_sum(Digits, Sum),\n  (  Sum = Number\n  -> Result = \"Disarium !!\"\n  ;  Result = \"Not !!\"\n  ).\n\ndis_sum(L, Sum) :- dis_sum(L, 1, 0, Sum).\ndis_sum([], _, Acc, Sum) :- !, Sum = Acc.\ndis_sum([H|T], Index, Acc, Sum) :-\n  Acc1 is Acc + H**Index,\n  Index1 is Index + 1,\n  dis_sum(T, Index1, Acc1, Sum).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231661,"user_id":null,"body":"disarium_number(Number, Result) :-\n  number_chars(Number, Chars),\n  maplist(atom_number, Chars, Numbers),\n  disariumize(Numbers, Powers, 1),\n  sum_list(Powers, Sum),\n  (Sum is Number -> Result = \"Disarium !!\";Result = \"Not !!\"). \n\ndisariumize([], [], _).\ndisariumize([L|Ls], [R|Rs], Exponent) :-\n  R is L ** Exponent,\n  NewExponent is Exponent + 1,\n  disariumize(Ls, Rs, NewExponent).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231662,"user_id":null,"body":"disarium_number(Number, Result) :-\n  number_chars(Number, AtomDigits),\n  maplist(atom_number,AtomDigits,Digits),\n  length(Digits,Len),\n  findall(R, (between(1,Len,N), nth1(N,Digits,D),R is D**N), List),\n  sumlist(List,Number) -> Result = \"Disarium !!\"; Result = \"Not !!\".","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231663,"user_id":76,"body":"disarium_number(Number, Result) :-\n  number_chars(Number, Chars),\n  maplist([C, D] >> (atom_char(C, A), D is A - 48), Chars, Digits),\n  length(Digits, Len),\n  findall(N, between(1, Len, N), Is),\n  foldl([D, I, S, R] >> (R is S + D ^ I), Digits, Is, 0, Sum),\n  (Sum =:= Number -> Result = \"Disarium !!\" ; Result = \"Not !!\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a54e796b3bfa8932c0000ed":[{"id":231664,"user_id":null,"body":"neighbours(A, B) :- succ(A, B).\nneighbours(A, B) :- succ(B, A).\n\njumping_codes([_]).\njumping_codes([H0|[H1|T]]) :- neighbours(H0, H1), jumping_codes([H1|T]).\n\njumping_number(Number) :- \n  number_codes(Number, Codes),\n  jumping_codes(Codes).\n  \njumping_number(Number, \"Jumping!!\") :- jumping_number(Number), !.\njumping_number(_, \"Not!!\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231665,"user_id":527,"body":"jumping_number(Number, \"Not!!\") :-\n  number_codes(Number, Codes),\n  nextto(X, Y, Codes),\n  \\+ succ(X, Y), \\+ succ(Y, X), !.\n\njumping_number(_, \"Jumping!!\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231666,"user_id":null,"body":"jumping_number(Number, Result) :-\n  string_codes(Number,List),\n  (is_jumping(List) -> Result = \"Jumping!!\"; Result = \"Not!!\").\n  \nis_jumping([_]).\nis_jumping([X,Y|T]):-\n  (succ(X,Y),!; succ(Y,X)),\n  is_jumping([Y|T]).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231667,"user_id":53,"body":"jump(0, _, \"Jumping!!\") :- !.\njump(N, P, R) :-\n  D is rem(N, 10),\n  E is abs(D - P),\n  ( E \\= 1 -> R = \"Not!!\" ; M is div(N, 10), jump(M, D, R) ).\n\njumping_number(M, R) :-\n  N is div(M, 10),\n  P is rem(M, 10),\n  jump(N, P, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231668,"user_id":168,"body":"jumping_number(Number, Result) :-\n  number_codes(Number, Xs),\n  append([_, [A, B], _], Xs),\n  abs(A - B) =\\= 1 -> Result = \"Not!!\"; Result = \"Jumping!!\".","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231669,"user_id":null,"body":"jumping_number(Number, \"Jumping!!\") :- Number < 10.\njumping_number(Number, Result) :- Number >= 10,\n  divmod(Number,10,L,R),\n  1 is abs(R - (L mod 10)),\n  jumping_number(L, Result).\njumping_number(_, \"Not!!\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231670,"user_id":null,"body":"jumping_number(Number, Result) :-\n  number_codes(Number, Codes),\n  jumping_(Codes, Result).\n\njumping_([_], Result) :- !, Result = \"Jumping!!\".\njumping_([First, Second | Rest], Result) :-\n  (  1 is abs(First - Second)\n  -> jumping_([Second | Rest], Result)\n  ;  Result = \"Not!!\"\n  ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231671,"user_id":null,"body":"jumping_number(Number, Result) :-\n\tnumber_to_list(Number, List),\n    check_jumping(List), !,\n    Result = \"Jumping!!\".\n\njumping_number(_, \"Not!!\").\n\nnumber_to_list(0, -1, []) :- !.\n\nnumber_to_list(N, L, [H|T]) :-\n    Factor is 10**L,\n    H is N\/\/Factor,\n    N1 is N - H*Factor,\n    L1 is L - 1,\n    number_to_list(N1,L1, T), !.\n\nnumber_to_list(N, [H|T]) :-\n    logbN(N, 10, L),\n    Factor is 10**L,\n    H is N\/\/Factor,\n    N1 is N - H*Factor,\n    L1 is L - 1,\n    number_to_list(N1,L1, T), !.\n\nlogbN(N,B,A):-\n    N > 1,\n    N1 is N\/B,\n    logbN(N1, B, Ans), !,\n    A is Ans + 1.\nlogbN(N, _, -1) :-\n    N < 1.\n\nlogbN(_,_,0) :- !.\n\n\ncheck_jumping([_]) :- !.\ncheck_jumping([X,Y]) :-\n    (1 is X - Y; 1 is Y - X), !.\ncheck_jumping([_,_]) :- !, fail.\ncheck_jumping([X,Y|T]) :-\n    check_jumping([X,Y]), !,\n    check_jumping([Y|T]), !.\n\ntest(R) :- jumping_number(1, R), assertion(R == \"Jumping!!\").\ntest(R) :- jumping_number(7, R), assertion(R == \"Jumping!!\").\ntest(R) :- jumping_number(9, R), assertion(R == \"Jumping!!\").\ntest(R) :- jumping_number(23, R), assertion(R == \"Jumping!!\").\ntest(R) :- jumping_number(32, R), assertion(R == \"Jumping!!\").\ntest(R) :- jumping_number(98, R), assertion(R == \"Jumping!!\").\ntest(R) :- jumping_number(454, R), assertion(R == \"Jumping!!\").\ntest(R) :- jumping_number(4321, R), assertion(R == \"Jumping!!\").\ntest(R) :- jumping_number(8987, R), assertion(R == \"Jumping!!\").\ntest(R) :- jumping_number(121012, R), assertion(R == \"Jumping!!\").\ntest(R) :- jumping_number(4343456, R), assertion(R == \"Jumping!!\").\ntest(R) :- jumping_number(98789876, R), assertion(R == \"Jumping!!\").\n\ntest(R) :- jumping_number(79, R), assertion(R == \"Not!!\").\ntest(R) :- jumping_number(24, R), assertion(R == \"Not!!\").\ntest(R) :- jumping_number(90, R), assertion(R == \"Not!!\").\ntest(R) :- jumping_number(420, R), assertion(R == \"Not!!\").\ntest(R) :- jumping_number(455, R), assertion(R == \"Not!!\").\ntest(R) :- jumping_number(901, R), assertion(R == \"Not!!\").\ntest(R) :- jumping_number(909, R), assertion(R == \"Not!!\").\ntest(R) :- jumping_number(990, R), assertion(R == \"Not!!\").\ntest(R) :- jumping_number(998, R), assertion(R == \"Not!!\").\ntest(R) :- jumping_number(999, R), assertion(R == \"Not!!\").\ntest(R) :- jumping_number(2468, R), assertion(R == \"Not!!\").\ntest(R) :- jumping_number(4554, R), assertion(R == \"Not!!\").\ntest(R) :- jumping_number(21098, R), assertion(R == \"Not!!\").\ntest(R) :- jumping_number(24542, R), assertion(R == \"Not!!\").\ntest(R) :- jumping_number(6715269, R), assertion(R == \"Not!!\").\ntest(R) :- jumping_number(178613451, R), assertion(R == \"Not!!\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231672,"user_id":null,"body":"jumping_number(Number, Result) :-\n  number_chars(Number,Cs),\n  maplist(atom_number,Cs,Ds),\n  writeln(Ds),\n  jumping_digits(Ds,Result).\n  \njumping_digits([],\"Jumping!!\").\njumping_digits([_],\"Jumping!!\").\njumping_digits([D0|[D1|T]],\"Not!!\") :- not(1 is abs(D1-D0)), !. \njumping_digits([D0|T],R) :- jumping_digits(T,R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231673,"user_id":null,"body":"diff_all([_|[]], []).\ndiff_all([H1, H2|T], [D|Rest]) :-\n    D is abs(H1-H2),\n    diff_all([H2|T], Rest).\n\nall_1([]).\nall_1([1|T]) :- all_1(T).\n\njumping_str(_1s, \"Jumping!!\"):- all_1(_1s).\njumping_str(_1s, \"Not!!\"):- not(all_1(_1s)).\njumping_number(Number, Result) :-\n  number_chars(Number, C),\n  maplist(atom_number, C, Digits),\n  diff_all(Digits, Diffs),\n  jumping_str(Diffs, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a55f04be6be383a50000187":[{"id":231674,"user_id":null,"body":"special_number(Number, Result) :-\n  number_codes(Number, Codes),\n  maplist([X] >> (between(48,53,X)), Codes) -> Result = \"Special!!\"; Result = \"NOT!!\".","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231675,"user_id":53,"body":"special_number(0, \"Special!!\") :- !.\nspecial_number(N, R) :- rem(N, 10) > 5, R = \"NOT!!\".\nspecial_number(N, R) :- M is N div 10, special_number(M, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231676,"user_id":null,"body":"legal([]).\nlegal([H|T]) :-\n    atom_number(H, H1),\n    H1 < 6,\n    H1 >= 0,\n    legal(T).\n\nspecial_number(Number, Result) :-\n    number_chars(Number, Cs),\t% Convert to list of chars\n    legal(Cs),\n    Result = \"Special!!\" ; Result = \"NOT!!\".","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231677,"user_id":544,"body":"special_number(Number, \"Special!!\") :-\n  atom_number(NAtom, Number),\n  atom_chars(NAtom, NDigitAtoms),\n  maplist(atom_number, NDigitAtoms, NDigits),\n  exclude([N]>>(N > 5), NDigits, NDigits), !.\n\nspecial_number(_, \"NOT!!\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231678,"user_id":null,"body":"special_number(N) --> {between(0,5,N)}, [N].\nspecial_number(N) --> {divmod(N, 10, N2, N3), between(0,5,N3)}, special_number(N2), special_number(N3).\n\nspecial_number(Number, \"Special!!\") :- special_number(Number, _, []), !.\nspecial_number(_, \"NOT!!\").\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231679,"user_id":null,"body":"special_number(Number, Result) :- number_codes(Number, ListOfDigits), is_special(ListOfDigits, Result).\n\nis_special([H], Res) :- H < 54, Res = \"Special!!\".\nis_special([H|T], \"NOT!!\") :- H >= 54, !.\nis_special([H|T], Res) :- H < 54, is_special(T, Res).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231680,"user_id":null,"body":"special_number(Number, Result) :- number_codes(Number, X), checkList(X, Result).\n  \ncheckList([], \"Special!!\") :- !.\ncheckList([H|T], \"NOT!!\") :- H >= 54, !.\ncheckList([H|T], Res) :- H < 54, checkList(T,Res).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231681,"user_id":null,"body":"special_number(Number, Result) :-\n  number_codes(Number, Codes),\n  (  forall(member(Code, Codes), (Code >= 48, Code =< 53))\n  -> Result = \"Special!!\"\n  ;  Result = \"NOT!!\"\n  ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231682,"user_id":1180,"body":"special_number(Number, Result) :-\ninteger(Number),\nNumber >= 0,\nNumber < 10,\n(Number =< 5 -> Result = \"Special!!\"; Result = \"NOT!!\").\n\nspecial_number(Number, Result) :-\ninteger(Number),\nNumber >= 0,\nNumber >= 10,\nDiv is div(Number, 10),\nMod is mod(Number, 10),\n(Mod =< 5 -> special_number(Div, Result); Result = \"NOT!!\").\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231683,"user_id":null,"body":"special_number(0, \"Special!!\") :- !.\nspecial_number(N, \"Special!!\") :-\n  divmod(N,10,Q,R), R =< 5,\n  special_number(Q, \"Special!!\"), !.\nspecial_number(_, \"NOT!!\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a58d889880385c2f40000aa":[{"id":231684,"user_id":76,"body":"automorphic(Number, Result) :- member(Number, [1, 5, 6, 25, 76, 376, 625, 9376]), Result = \"Automorphic\", !.\nautomorphic(_, \"Not!!\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231685,"user_id":53,"body":"walk(_, 0, \"Automorphic\") :- !.\nwalk(M, N, R) :-\n  A is rem(M, 10),\n  B is rem(N, 10),\n  (  A =:= B -> X is div(M, 10), Y is div(N, 10), walk(X, Y, R)\n     ; R = \"Not!!\"  ).\n\nautomorphic(N, R) :-\n  M is N * N,\n  walk(M, N, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231686,"user_id":168,"body":"automorphic(Number, R) :-\n  number_string(Number, Str),\n  string_length(Str, L),\n  (Number ^ 2 mod 10 ^ L =:= Number -> R = \"Automorphic\"; R = \"Not!!\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231687,"user_id":null,"body":"mask(N, M) :-\n    atom_string(N, S),\n    string_length(S, L),\n    M is 10 ^ L.\n\nautomorphic(Number, Result) :-\n    mask(Number, L),\n    S is Number ^ 2,\n    (   Number =:= mod(S, L) -> Result = \"Automorphic\"\n    ;                           Result = \"Not!!\"\n    ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231688,"user_id":null,"body":"lastN(L,N,R) :- \n    length(L,X), \n    X1 is X-N, \n    lastT(L,X1,R).\n\nlastT(L,0,L).\n\nlastT([_|T],X,L):- \n    X2 is X-1, \n    lastT(T,X2,L).\n\nautomorphic(Number, Result) :-\n    Squared is Number * Number, % Get squared number\n    number_chars(Squared, Cs),\t% Convert to list of chars\n    number_chars(Number, Origs),\n    length(Origs, Ns),\n    lastN(Cs, Ns, Res),\n    number_chars(Num, Res),\n    (   Num == Number ->  Result = \"Automorphic\"\n    ;   Result = \"Not!!\"\n    ).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231689,"user_id":null,"body":"automorphic(Num, Result) :- Sqr is Num**2, automorphic(Num, Sqr, Result).\nautomorphic(0, _, \"Automorphic\").\nautomorphic(Sqr, Num, Result) :-\n  divmod(Sqr, 10, Q1, R),\n  divmod(Num, 10, Q2, R),\n  automorphic(Q1, Q2, Result), !.\nautomorphic(_,_,\"Not!!\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231690,"user_id":null,"body":"automorphic(Number, Result) :-\n  number_codes(Number, Codes),\n  Squared is Number * Number,\n  number_codes(Squared, Codes_sq),\n  append(_, Codes, Codes_sq),\n  !,\n  Result = \"Automorphic\".\nautomorphic(_, \"Not!!\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231691,"user_id":null,"body":"automorphic(N, \"Automorphic\") :-\n  N2 is N*N,\n  atom_concat(_, N, N2),\n  !.\n\nautomorphic(_, \"Not!!\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231692,"user_id":null,"body":"int_digits(0, Res, Res) :- !.\nint_digits(N, Acc, Res) :-\n  divmod(N, 10, Q, R),\n  int_digits(Q, [R|Acc], Res).\n\nautomorphic(N, Res) :-\n  int_digits(N, [], Digits),\n  Sq is N*N,\n  int_digits(Sq, [], SqDigits),\n  (  append(_, Digits, SqDigits)\n  -> Res = \"Automorphic\"\n  ;  Res=\"Not!!\"\n  ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231693,"user_id":null,"body":"automorphic(Number, Result) :-\n  S is Number*Number,\n  atom_concat(_,Number,S),\n  Result = \"Automorphic\".\n  \n  \nautomorphic(Number, Result) :-\n  S is Number*Number,\n  not(atom_concat(_,Number,S)),\n  Result = \"Not!!\".","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a63948acadebff56f000018":[{"id":231694,"user_id":null,"body":"max_product(Numbers, Size, Result) :-\n  sort(0, @>=, Numbers, Sorted),\n  prefix(Prefix, Sorted),\n  length(Prefix, Size),\n  foldl(mult, Prefix, 1, Result).\n\nmult(X, Y, Z) :-\n  Z is X * Y.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231695,"user_id":null,"body":"\n% gets first C numbers of list\nget_first_nums(_, 0, []).\nget_first_nums([], _, []).\nget_first_nums([H|T], C, R) :-\n  C1 is C-1,\n  get_first_nums(T, C1, R1),\n  append([[H], R1], R).\n  \n% product of list values\nget_product([], 1).\nget_product([H|T], Res) :-\n  get_product(T, R1),\n  Res is R1*H.\n  \nmax_product(Numbers, Size, Result) :-\n  sort(0, @>=, Numbers,  SNums),\n  get_first_nums(SNums, Size, Maxes),\n  get_product(Maxes, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231696,"user_id":null,"body":"take(Src,N,L) :- findall(E, (nth1(I,Src,E), I =< N), L).\n\nmax_product(Numbers, Size, Result) :-\n  msort(Numbers, Desc),\n  reverse(Desc, Sorted),\n  take(Sorted, Size, Maximal),\n  foldl([N, Prod, Next] >> (Next is Prod * N), Maximal, 1, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231697,"user_id":null,"body":"product(_, 0, 0) :- !.\nproduct([L|_], 1, L) :- !.\nproduct([L|T], Size, R) :- Z0 is Size - 1, product(T, Z0, Z1), R is Z1 * L.\n\n\n\nmax_product(Numbers, Size, Result) :- msort(Numbers, Arr), reverse(Arr, Arr2), product(Arr2, Size, Result).\n                                      \n                                      ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231698,"user_id":null,"body":"max_product(Numbers, 1, Result) :- max_member(Result, Numbers).\nmax_product(Numbers, Size, Result) :-\n    msort(Numbers, Sorted_Numbers),\n    append(Head, [Max], Sorted_Numbers), \n    New_Size is Size - 1, \n    max_product(Head, New_Size, Temp_Result), \n    Result is Max * Temp_Result.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231699,"user_id":168,"body":"max_product(Numbers, Size, Result) :-\n  sort(0, @>=, Numbers, Xs),\n  length(Ys, Size),\n  append(Ys, _, Xs),\n  foldl([Y, A, R] >> (R is Y * A), Ys, 1, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231700,"user_id":null,"body":"take(0, _, []) :- !.\ntake(N, [X|Xs], [X|Ys]) :- M is N-1, take(M, Xs, Ys).\n\nprod_list([], Res, Res).\nprod_list([H|T], Res, Acc) :- NewAcc is H * Acc, prod_list(T, Res, NewAcc).\n\nmax_product(Numbers, Size, Result) :-\n  sort(0, @>=, Numbers, Sorted),\n  take(Size, Sorted, MaximalElements),\n  prod_list(MaximalElements, Result, 1).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231701,"user_id":544,"body":"max_product(Numbers, Size, Result) :-\n  sort(0, @>=, Numbers, SortedNumbers),\n  append(MaxN, _, SortedNumbers), length(MaxN, Size),\n  foldl([X, FromLeft, ToRight]>>(ToRight is FromLeft * X), MaxN, 1, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231702,"user_id":null,"body":"max_product(Numbers, Size, Result) :-\n  sort(0, @>=, Numbers, Sort),\n  length(L1, Size),\n  append(L1, _, Sort),\n  foldl([X,Y,Z]>>(Z is X*Y), L1, 1, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231703,"user_id":null,"body":"max_product(Numbers, Size, Result) :-\n  sort(0, @>=, Numbers, Sorted),\n  firstn(Sorted, Size, FirstN),\n  foldl([X,Y,Z] >> (Z is X*Y), FirstN, 1, Result).\n\nfirstn(List1, N, List2) :-\n  length(List2, N),\n  append(List2, _, List1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a651865fd56cb55760000e0":[{"id":231704,"user_id":null,"body":"array_leaders(Ns1, Result) :-\n  reverse(Ns1, Ns2),\n  scanl(plus, Ns2, 0, Sums),\n  aggregate_all(bag(E), (nth0(I,Ns2,E), nth0(I,Sums,V), E>V), Ns3),\n  reverse(Ns3, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231705,"user_id":null,"body":"array_leaders([X], X, [X]) :- X > 0, !.\narray_leaders([X], X, []) :- X =< 0, !.\narray_leaders([L|T], X, R) :- array_leaders(T, Z1, Z0), (Z1 < L -> append([L], Z0, R); R = Z0), X is Z1 + L.\n\narray_leaders(Arr, Result) :- array_leaders(Arr, Z0, Result). ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231706,"user_id":168,"body":"array_leaders(Numbers, Result) :-\n  reverse(Numbers, Ns),\n  foldl([N, [S, Xs], [S1, Xs1]] >> ((N > S -> Xs1 = [N | Xs]; Xs1 = Xs), S1 is S + N), Ns, [0, []], [_, Result]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231707,"user_id":null,"body":"add(X,Y,Z):-\n  Z is X + Y.\n\nsum_tail(Tail,Sum):-\n  foldl(add,Tail,0,Sum).\n\n\narray_leaders([],[]).\narray_leaders([Candidate | Tail], Result) :-\n  array_leaders(Tail,R1),\n  sum_tail(Tail,Sum),\n  ( Candidate > Sum -> Result = [Candidate|R1];\n    Result = R1\n  ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231708,"user_id":null,"body":"array_leaders(L, R) :-\n    sumlist(L, S),\n    array_leaders(L, S, R).\narray_leaders([], _, []) :- !.\narray_leaders([H|T], S, R) :-\n    S1 is S - H,\n    H > S1,\n    !,\n    append([H], R1, R),\n    array_leaders(T, S1, R1).\narray_leaders([H|T], S, R) :-\n    S1 is S - H,\n    array_leaders(T, S1, R).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231709,"user_id":null,"body":"array_leaders([],[]).\narray_leaders([H|T], [H|Res]) :-\n  foldl(plus, T, 0, Sum),\n  H > Sum,\n  array_leaders(T,Res).\narray_leaders([_|T], Res) :-\n  array_leaders(T,Res).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231710,"user_id":null,"body":"array_leaders(Number, Result) :-\n  array_leader_acc(Number,Result,_Sum).\n  \narray_leader_acc([],[],0).\n\narray_leader_acc([N|Tail],Tail2,Sum):-\n  array_leader_acc(Tail,Tail3,Sum1),\n  Sum is Sum1 + N,\n  test(N,Tail2,Tail3,Sum1).\n  \n \ntest(N,[N|Tail3],Tail3,Sum1):-\n  N>Sum1.\ntest(N,Tail3,Tail3,Sum1):-\n  N=<Sum1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231711,"user_id":null,"body":"leader([H|T]) :- sumlist(T,Rest), H > Rest.\narray_leaders([],[]).\narray_leaders([H|T], [H|T2]) :-\n  leader([H|T]), !,\n  array_leaders(T,T2).\narray_leaders([_|T], T2) :- array_leaders(T,T2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231712,"user_id":null,"body":"array_leaders([],[]).\narray_leaders([N|Ns], [N|Rs]) :-\n  sumlist(Ns, Sum),\n  N > Sum,\n  array_leaders(Ns, Rs).\narray_leaders([N|Ns], Rs) :-\n  sumlist(Ns, Sum),\n  N =< Sum,\n  array_leaders(Ns, Rs).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231713,"user_id":null,"body":"array_leaders([X|Xs], [X|Ys]) :-\n\tsum_list(Xs, S), \n\tX > S, !,\n\tarray_leaders(Xs, Ys).\n array_leaders([X|Xs], Ys) :-\n\tsum_list(Xs, S), \n\tX =< S, !,\n\tarray_leaders(Xs, Ys). \narray_leaders([], []) :- !.\t","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a662a02e626c54e87000123":[{"id":231714,"user_id":76,"body":"extra_perfect(Number, Result) :- findall(N, (between(1, Number, N), N mod 2 =:= 1), Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231715,"user_id":527,"body":":- use_module(library(clpfd)).\n\nextra_perfect(N, R) :-\n  findall(X, (X in 1..N, X #= 2 * _ + 1, indomain(X)), R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231716,"user_id":null,"body":"extra_perfect(Number, Result) :-\n  aggregate_all(bag(X), (between(1,Number,X), 1 is X\/\\1), Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231717,"user_id":53,"body":"extra_perfect(N, R) :- \n  findall(I, (between(1, N, I), I mod 2 =:= 1), R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231718,"user_id":null,"body":"extra_perfect(Number, Result) :- extra_perfect(Number, Result, 1).\nextra_perfect(Number, [I|Rest], I) :-\n  I=<Number,!,\n  NextI is I+2,\n  extra_perfect(Number,Rest,NextI).\nextra_perfect(Number, [], I) :- I>Number.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231719,"user_id":null,"body":"extra_perfect(Number, Result) :- findall(N, (between(1, Number, N), 1 is N mod 2), Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231720,"user_id":3088,"body":"extra_perfect(Number, Result) :-\n  findall(N, (between(1, Number, N), 1 is N rem 2), Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231721,"user_id":3088,"body":"extra_perfect(N, Ns) :- \n  1 is N rem 2, every_second(N, [], Ns);\n  0 is N rem 2, N0 is N - 1, every_second(N0, [], Ns).\n\nevery_second(N, Prev, Prev) :- N < 1.\nevery_second(N, Prev, Result) :-\n  N2 is N - 2,\n  every_second(N2, [N|Prev], Result).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231722,"user_id":null,"body":"extra_perfect(Number, Result) :-\n  Limit is (Number-1) \/\/ 2,\n  numlist(0,Limit, List),\n  maplist([X,Y] >> (Y is 1 + (2*X)), List, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231723,"user_id":null,"body":"extra_perfect_odd(Number,Number,[Number]).\nextra_perfect_odd(Number,I,[I|Temp]) :-\n  I1 is I+1, extra_perfect_even(Number,I1,Temp).\n\nextra_perfect_even(Number,Number,[]).\nextra_perfect_even(Number,I,Result) :-\n  I1 is I+1, extra_perfect_odd(Number,I1,Result).\n  \nextra_perfect(Number, Result) :-\n  extra_perfect_odd(Number,1,Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a7893ef0025e9eb50000013":[{"id":231724,"user_id":null,"body":"max_gap(Numbers, Result) :-\n  msort(Numbers,L),\n  aggregate_all(max(X), (nextto(A,B,L), X is B-A), Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231725,"user_id":null,"body":"top_gap([A,B], X) :- X is abs(A-B), !.\ntop_gap([A,B|T], X) :- top_gap([B|T], Z0), Z1 is abs(A-B), (Z1 > Z0 -> X is Z1; X is Z0).\n\nmax_gap(Numbers, Result) :- msort(Numbers, Arr), top_gap(Arr, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231726,"user_id":544,"body":"max_gap(Numbers, Result) :-\n  sort(0, @=<, Numbers, Ns),\n  append(LeftSide, [_], Ns), append([_], RightSide, Ns), !,\n  maplist([X,Y,R]>>(R is Y - X), LeftSide, RightSide, Diffs),\n  max_list(Diffs, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231727,"user_id":null,"body":"max_gap(Numbers, Result) :-\n    sort(0, @>=, Numbers, Sorted),\n    findall(Gap, (nextto(A, B, Sorted), Gap is abs(A - B)), Gaps),\n    max_list(Gaps, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231728,"user_id":1180,"body":"max_gap(Numbers, R) :- \n  sort(Numbers, SortedNumbers),\n  reverse(SortedNumbers, ReversedSortedNumbers),\n  max_difference(ReversedSortedNumbers, 0, R).\n\nmax_difference([], Current, Current).\nmax_difference([First], Current, Current).\nmax_difference([First, Second | Tail], Current, R) :-\n  Diff is First - Second,\n  max_difference([Second | Tail], Current, RestDiff),\n  ( Diff > RestDiff -> R is Diff; R = RestDiff ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231729,"user_id":null,"body":"max_gap(Numbers, Result) :-\n  sort(Numbers, Sorted),\n  max_gap_(Sorted, Result).\n\nmax_gap_([_], 0).\nmax_gap_([H1,H2|T], R) :-\n  Gap is abs(H1 - H2),\n  max_gap_([H2|T], NewGap),\n  (Gap > NewGap -> R = Gap ; R = NewGap).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231730,"user_id":null,"body":"max_gap(Numbers, Result) :-\n  sort(0, @=<, Numbers, Sorted),\n  findall(D, diff(Sorted, D), Ds),\n  max_list(Ds, Result).\n\ndiff(L, D) :-\n  nextto(X, Y, L),\n  D is abs(X-Y).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231731,"user_id":null,"body":"max_gap([], 0):- !.\nmax_gap([_], 0):- !.\nmax_gap(L,R):-\n  sort(L,Sorted),\n  max_gap(Sorted, 0, R).\n  \nmax_gap(L, Max, Max):- (L = []; L = [_]),!.\nmax_gap([A,B|T], CurMax, R):-\n  N is abs(A - B),\n  (N > CurMax -> max_gap([B|T], N, R) ; max_gap([B|T], CurMax, R)).\n  \n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231732,"user_id":null,"body":"max_gap([_], Result, Result) :- !.\nmax_gap([H0|[H1|T]], CurMax, Result) :- CurMax1 is max(H1-H0, CurMax), max_gap([H1|T], CurMax1, Result).\nmax_gap(Numbers, Result) :- sort(Numbers, Sorted), max_gap(Sorted, 0, Result).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231733,"user_id":751,"body":"max_gap(N, R) :-\n  msort(N, Sorted),            % Sort numbers\n  [_|T] = Sorted,              % Take the tail of Sorted numbers\n  zip(Sorted, T, Pairs),       % zip Sorted with its tail T\n  maplist(gap, Pairs, Gapped), % Map gap calculation for each pair\n  max_list(Gapped, R).         % take max value\n\n% Compute Gap given a pair of consecurive numbers\ngap(X\/Y, R) :- R is abs(X - Y).\n\n% Zip 2 lists. use the length of the shortest one\nzip([], _, []).\nzip(_, [], []).\nzip([X|Xs], [Y|Ys], [X\/Y|Zs]) :- zip(Xs,Ys,Zs).\n\n\n\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a87449ab1710171300000fd":[{"id":231734,"user_id":527,"body":"tidy_number(Number, 1) :- number_chars(Number, Digits), sort(0, @=<, Digits, Digits), !.\ntidy_number(_, 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231735,"user_id":null,"body":"\n% checking order of ASCII\nordered([]).\nordered([_]).\nordered([X,Y|Z]) :- X =< Y , ordered([Y|Z]) .\n\ntidy_number(N, R) :-\n  number_codes(N, CL),\n  ordered(CL), R is 1; R is 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231736,"user_id":null,"body":"tidy_number(Number, Result) :-\n  number_chars(Number, NumberDigits),\n  checkNonDecrease(NumberDigits, Result).\n\ncheckNonDecrease([], 1).\ncheckNonDecrease([_], 1).\ncheckNonDecrease([X,Y|T], R) :- \n  atom_number(X, DigitX),\n  atom_number(Y, DigitY),\n  ( DigitX > DigitY -> RR is 0, ! ; checkNonDecrease([Y|T], RR)),\n  R is RR.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231737,"user_id":null,"body":"greater([]).\ngreater([_]).\ngreater([H1, H2|T]) :-\n    atom_number(H1, N1),\n    atom_number(H2, N2),\n    N2 >= N1,\n    append([H2], T, R),\n    greater(R).\n\n% Store 1 if Number is tidy, otherwise 0.\ntidy_number(Number, Result) :-\n    number_chars(Number, Cs),\t% Convert to list of chars\n\tgreater(Cs),\n    Result = 1;\n    Result = 0.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231738,"user_id":544,"body":"tidy_number(Number, 1) :-\n    number_chars(Number, CharList),\n    maplist(atom_number, CharList, DigitList),\n    sort(0, @=<, DigitList, DigitList), !. \n\ntidy_number(_, 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231739,"user_id":null,"body":"tidy_number(Number, Result) :-\n  number_codes(Number, Codes),\n  msort(Codes, Codes) -> Result=1 ; Result=0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231740,"user_id":null,"body":"tidy_number(Number, Result) :-\n  number_codes(Number, Codes),\n  (  forall((member(X, Codes), nextto(X, Y, Codes)), X =< Y)\n  -> Result = 1\n  ;  Result = 0\n  ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231741,"user_id":null,"body":"% Store 1 if Number is tidy, otherwise 0.\ntidy_number(Number,1):- Number <10,!.\n\ntidy_number(Number, Result) :-\n  Number >=10,\n  N1 is Number mod 10,\n  N is Number\/\/10,\n  N2 is N mod 10,\n  N1 >= N2,\n  tidy_number(N,Result).\n  \ntidy_number(Number, 0) :-\n  Number >=10,\n  N1 is Number mod 10,\n  N is Number\/\/10,\n  N2 is N mod 10,\n  N1 < N2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231742,"user_id":null,"body":"tidy_number(Number, Result) :-\n  number_chars(Number,Cs),\n  sort(0, =<, Cs, TidyCs),\n  atomics_to_string(TidyCs,TidyStr),\n  number_string(TidyNum,TidyStr),\n  ( Number =:= TidyNum -> Result is 1\n  ; Result is 0\n  ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231743,"user_id":null,"body":"% Store 1 if Number is tidy, otherwise 0.\ntidy_number(Number, 1) :-\n  number_chars(Number,Chars),\n  tidy(Chars),!.\n\ntidy_number(_,0).\n\ntidy([_]).\ntidy([X1,X2|XS]) :-\n  X1 @=< X2, tidy([X2|XS]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a905c2157c562994900009d":[{"id":231744,"user_id":null,"body":"product([X], Left, X, [Left]).\nproduct([L|T], Left, Right, [Z3|Z2]) :- Z0 is Left * L, \n                                  product(T, Z0, Z1, Z2),\n                                  Z3 is Left * Z1,\n                                  Right is Z1 * L.\nproduct_array(Numbers, Result) :- product(Numbers, 1, Z0, Result).\n  % Coding and coding...","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231745,"user_id":53,"body":"mult(A, B, R) :- R is A * B.\ndivide(A, B, R) :- R is A \/ B.\n\nproduct_array(XS, R) :- \n  foldl(mult, XS, 1, P), \n  maplist(divide(P), XS, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231746,"user_id":168,"body":"product_array(Numbers, Result) :-\n  foldl([X, Y, R] >> (R is X * Y), Numbers, 1, P),\n  maplist([X, R] >> (R is P \/\/ X), Numbers, Result).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231747,"user_id":null,"body":"product_array(Numbers, Result) :-\n  foldl([X,Y,Z]>>(Z is X*Y), Numbers, 1, V),\n  maplist({V}\/[X,Y]>>(Y is V\/\/X), Numbers, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231748,"user_id":null,"body":"product_array(Numbers, Result) :- mul_list(Numbers, X), fnc(Numbers, X, Result).\n\nmul_list([H], H).\nmul_list([H|T], P) :- mul_list(T,P1), P is P1 * H.\n\nfnc([], _, []).\nfnc([H|T], All, [L|K]) :- L is All \/ H, fnc(T, All, K).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231749,"user_id":null,"body":"product_array(Numbers, Result) :- all_prod(Numbers, AllProd), get_arr(Numbers, AllProd, Result).\n\nall_prod([X],X).\nall_prod([H|T], Res) :- all_prod(T,Res1), Res is Res1*H.\n\nget_arr([X], AllProd, [R]) :- R is AllProd\/X.\nget_arr([H|T], AllProd, [Res|Rest]) :- Res is AllProd\/H, get_arr(T, AllProd, Rest).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231750,"user_id":null,"body":"product_array(Numbers, Result) :-\n    foldl([A, B, C]>>(C is A * B), Numbers, 1, Product),\n    maplist([Elem, P]>>(P is Product div Elem), Numbers, Result).\t\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231751,"user_id":1180,"body":"product_array(Numbers, Result) :- \n  length(Numbers, N),\n  product_array_aux(Numbers, 1, N, Lists),\n  maplist(mul, Lists, Result).\n\n\nproduct_array_aux(Numbers, N, N, Result) :- \n  integer(N), N > 0, \n  drop_nth(Numbers, N, NumbersWithoutIndex),\n  Result = [NumbersWithoutIndex].\nproduct_array_aux(Numbers, Index, N, Result) :-\n  integer(N), N > 0, \n  integer(Index), Index > 0, \n  NewIndex is Index+1,\n  drop_nth(Numbers, Index, NumbersWithoutIndex),\n  Result = [NumbersWithoutIndex|ResultRest],\n  product_array_aux(Numbers, NewIndex, N, ResultRest).\n  \n  \ndrop_nth(Xs,N,Rs) :- integer(N), N > 0, drop(Xs,1,N,Rs).\n\ndrop([], _, _, []).\ndrop([X|Xs], P, N, Rs) :- (N =:= P -> R1 = Rs; [X|R1] = Rs), P1 is P+1, drop(Xs,P1,N,R1).\n\nmul([X], X).\nmul([X|Xs], R) :- mul(Xs, Rs), R is X * Rs.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231752,"user_id":null,"body":"product_array(Numbers, Result) :-\n    maplist({Numbers}\/[X,Y]>>(once(select(X, Numbers, Rest)), product_sum(Rest, Y)), Numbers, Result).\n\nproduct_sum(Numbers, Result) :-\n    foldl([X, Y, Z]>>(Z is X * Y), Numbers, 1, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231753,"user_id":null,"body":"\nmult(X,Y,Z) :- Z is X*Y.\n\nproductizer(N,List,Prod) :-\n    nth0(N,List,_,Delisted),\n    foldl(mult, Delisted, 1, Prod).\n\nproduct_array(List,R) :-\n    findall(Val,productizer(I,List,Val),R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a91a7c5fd8c061367000002":[{"id":231754,"user_id":null,"body":"minimum_steps(Numbers, Value, Result) :-\n  sort(0, @=<, Numbers, Sorted),\n  prefix(P, Sorted),\n  sum_list(P, S),\n  S >= Value,\n  length(P, L),\n  Result is L - 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231755,"user_id":null,"body":"minimum_steps(Numbers, Value, Result) :- once(minimum_steps(Numbers, Value, -1, Result)).\nminimum_steps(Ns,V,Inc,R) :- V>0,\n  min_list(Ns,Min),\n  select(Min,Ns,Ns2),\n  V2 is V-Min,\n  Inc2 is Inc+1,\n  minimum_steps(Ns2,V2,Inc2,R).\nminimum_steps(_,_,Inc,Inc).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231756,"user_id":53,"body":"count_steps([], _, _, _, 0) :- !.\ncount_steps([N | Ns], I, M, K, R) :-\n  P is M + N,\n  J is I + 1,\n  (   P < K -> count_steps(Ns, J, P, K, R)\n    ; R = I ).\n    \nminimum_steps(Lst, K, R) :-\n  sort(0, @=<, Lst, Ns),\n  count_steps(Ns, 0, 0, K, R).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231757,"user_id":null,"body":"find([L|T], Act, Max, R) :- Z0 is Max - L, (Z0 > 0 -> Z1 is Act + 1, find(T, Z1, Z0, R); R is Act).\n\nminimum_steps(Numbers, Value, Result) :- msort(Numbers, Arr), find(Arr, 0, Value, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231758,"user_id":168,"body":"minimum_steps(Numbers, Value, Result) :-\n  msort(Numbers, Xs),\n  prefix(Ys, Xs),\n  sumlist(Ys, S),\n  S >= Value, !,\n  length(Ys, R),\n  Result is R - 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231759,"user_id":null,"body":"count_minimum_steps(_, Sum, Value, Cnt, Result) :-\n    Sum >= Value,\n    Result is Cnt - 1, !.\ncount_minimum_steps([X|Xs], Sum, Value, Cnt, Result) :-\n    NewSum is Sum + X,\n    NewCnt is Cnt + 1,\n    count_minimum_steps(Xs, NewSum, Value, NewCnt, Result).\n\n\nminimum_steps(Numbers, Value, Result) :-\n  sort(0, @=<, Numbers, NumbersSorted),\n  count_minimum_steps(NumbersSorted, 0, Value, 0, Result).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231760,"user_id":null,"body":"added([], _, _, Steps, R) :-\n    R is Steps.\nadded([H|T], Curr, Val, Steps, R) :-\n   \tRes is H + Curr,\n    (   Res < Val ->  \n        Sc is Steps + 1,\n        added(T, Res, Val, Sc, R) \n    ;   \n        R is Steps\n    ).\n\nminimum_steps(Numbers, Value, Result) :-\n    sort(0, @=<,  Numbers, Nums),\n    added(Nums, 0, Value, 0, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231761,"user_id":544,"body":"minimum_steps(Numbers, Value, Result) :-\n  sort(0, @=<, Numbers, SortedNumbers),  \n  scanl([Left, Right, Result]>>(Result is Left + Right), SortedNumbers, 0, [_ | RunningSums]),\n  findnsols(1, X, (nth0(X, RunningSums, S), S >= Value), [Result]), !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231762,"user_id":null,"body":"minimum_steps(Numbers, Value, Result) :-\n    sort(0, @=<, Numbers, Sorted),\n    steps(Sorted, Value, 0, Result).\nsteps([First | _], Target, Count, Total) :-\n    First >= Target,\n    !,\n    Total = Count.\nsteps([First | Rest], Target, Count, Total) :-\n    New_target is Target - First,\n    New_count is Count + 1,\n    steps(Rest, New_target, New_count, Total).\n\n\/* \n  This works, and it's neat, but for the example tests takes 27,000 \n  inferences versus 3200 for the implementation above. Makes little\n  difference for the given inputs, but still ...\n\nminimum_steps(Numbers, Value, Result) :-\n    sort(0, @=<, Numbers, Sorted),\n    append(Elems, _, Sorted),\n    sum_list(Elems, Sum),\n    Sum >= Value,\n    !,\n    length(Elems, N),\n    Result is N - 1.\n*\/","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231763,"user_id":1180,"body":"minimum_steps(Numbers, Value, Result) :-\n  sort(0, @=<, Numbers, Sort),\n  minimum_steps_aux(Sort, Value, 0, 0, Result).\n  \nminimum_steps_aux([H|L], Value, Sum, Step, Result) :-\n  NewSum is Sum + H,\n  NewSum < Value,\n  NewStep is Step + 1,\n  minimum_steps_aux(L, Value, NewSum, NewStep, Result).\n\nminimum_steps_aux([H|L], Value, Sum, Step, Result) :-\n  NewSum is Sum + H,\n  NewSum >= Value,\n  minimum_steps_aux(L, Value, Sum, Step, Result).\n\nminimum_steps_aux([], _, _, Result, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a946d9fba1bb5135100007c":[{"id":231764,"user_id":527,"body":"minimum_number(Numbers, Result) :-\n  sum_list(Numbers, S),\n  between(S, infinite, I),\n  crypto_is_prime(I, []),\n  Result is I - S.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231765,"user_id":53,"body":"\nclosest_prime_up(N, R) :-\n   ( crypto_is_prime(N, []) -> R = N\n   ; M is N + 1, closest_prime_up(M, R) ).\n  \nsum_list([], 0).\n\nsum_list([H|T], Sum) :-\n   sum_list(T, Rest),\n   Sum is H + Rest.\n   \nminimum_number(NS, R) :-\n  sum_list(NS, M),\n  closest_prime_up(M, P),\n  R is P - M.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231766,"user_id":null,"body":"minimum_number(Numbers, Result) :-\n  sum_list(Numbers, N),\n  between(N,inf,M), \n  crypto_is_prime(M,[]), \n  Result is M-N.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231767,"user_id":76,"body":"minimum_number(Numbers, Result) :-\n  sum_list(Numbers, Sum),\n  next_prime(Sum, Next),\n  Result is Next - Sum.\n\nnext_prime(N, N) :- is_prime(N), !.\nnext_prime(N, R) :- N1 is N + 1, next_prime(N1, R).\n\nis_prime(2) :- !.\nis_prime(N) :-\n  N > 2,\n  Sqrt is floor(sqrt(N)),\n  findall(X, between(2, Sqrt, X), Nums),\n  maplist([X] >> (0 =\\= mod(N, X)), Nums).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5a99a03e4a6b34bb3c000124":[{"id":231768,"user_id":527,"body":"num_primorial(N, Primorial) :-\n  NP = state(N\/1),\n  between(1, infinite, I),\n  crypto_is_prime(I, []),\n  state(PrevN\/PrevP) = NP,\n  CurN is PrevN - 1,\n  CurP is PrevP * I,\n  nb_setarg(1, NP, CurN\/CurP),\n  state(0\/Primorial) = NP,\n  !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231769,"user_id":527,"body":"num_primorial(N, Primorial) :-\n  findnsols(N, I, (between(1, infinite, I), crypto_is_prime(I, [])), Ps),\n  foldl([X, Y, R] >> (R is X * Y), Ps, 1, Primorial),\n  !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231770,"user_id":76,"body":"num_primorial(N, Primorial) :-\n  gen_n_primes(N, 2, [], Primes),\n  foldl([P, Acc, Res] >> (Res is Acc * P), Primes, 1, Primorial).\n  \ngen_n_primes(0, _, R, R) :- !.\n\ngen_n_primes(N, P, R, Res) :- \n  crypto_is_prime(P, []), !,\n  append(R, [P], NewPrimes),\n  succ(N1, N),\n  succ(P, P1),\n  gen_n_primes(N1, P1, NewPrimes, Res).\n  \ngen_n_primes(N, P, R, Res) :- succ(P, P1), gen_n_primes(N, P1, R, Res), !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231771,"user_id":null,"body":":- dynamic(primes\/2).\nprimes(1,[2]).\nprimes(N,[X|Xs]) :-\n  succ(M,N),\n  primes(M,Xs),\n  between(3,inf,P1),\n  once(aggregate(min(P1), forall(member(P0,Xs), 0 =\\= rem(P1,P0)), X)),\n  asserta(primes(N,[X|Xs])).\n  \nnum_primorial(N, Primorial) :-\n  primes(N,Ps),\n  foldl([L,R,O]>>(O is L*R),Ps,1,Primorial).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231772,"user_id":168,"body":"primes(_, 0, []) :- !.\nprimes(P, N, R) :-\n  crypto_is_prime(P, []), !,\n  N1 is N - 1,\n  P1 is P + 1,\n  primes(P1, N1, R1),\n  R = [P | R1].\nprimes(P, N, R) :- P1 is P + 1, primes(P1, N, R).\n\nnum_primorial(N, Primorial) :-\n  primes(2, N, Ps),\n  foldl([X, P, R] >> (R is X * P), Ps, 1, Primorial).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231773,"user_id":53,"body":"isprime(N, R) :-\n  isprime_(N, 5, R).\n  \nisprime_(N, I, R) :-\n  (  4 > N -> R = 1\n  ;  mod(N, 2) =:= 0 -> R = 0\n  ;  mod(N, 3) =:= 0 -> R = 0\n  ;  I * I > N -> R = 1\n  ;  mod(N, I) =:= 0 -> R = 0\n  ;  I2 is I + 2, mod(N, I2) =:= 0 -> R = 0\n  ;  I6 is I + 6, isprime_(N, I6, R)\n  ).\n  \nnum_primorial(N, P) :-\n  gen_n_primes(N, 2, [], PS),\n  foldl([P, Acc, R] >> (R is Acc * P), PS, 1, P).\n  \ngen_n_primes(0, _, R, R) :- !.\n\ngen_n_primes(N, P, R1, R) :- \n  isprime(P, PP),\n  PP =:= 1,\n  append(R1, [P], NP),\n  succ(N1, N),\n  succ(P, P1),\n  gen_n_primes(N1, P1, NP, R).\n  \ngen_n_primes(N, P, R1, R) :- \n  succ(P, P1),\n  gen_n_primes(N, P1, R1, R), !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231774,"user_id":527,"body":"num_primorial(0, Primorial, _, Primorial) :- !.\nnum_primorial(N, Primorial, I, P) :-\n  I1 is I + 1,\n  (crypto_is_prime(I, []) -> N1 is N - 1, P1 is P * I; N1 is N, P1 is P),\n  num_primorial(N1, Primorial, I1, P1).\n\nnum_primorial(N, Primorial) :-\n  num_primorial(N, Primorial, 1, 1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5aa1bcda373c2eb596000112":[{"id":231775,"user_id":null,"body":"max_tri_sum(Numbers, Result) :-\n  sort(0, @>, Numbers, [A, B, C|_]),\n  Result is A + B + C.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231776,"user_id":null,"body":"max_tri_sum(L,Sum) :- sort(L,S), reverse(S,[A,B,C|_]), sumlist([A,B,C],Sum).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231777,"user_id":null,"body":"max_tri_sum(Numbers, Result) :- remove_alldup(Numbers,[L_nd_fi1|L_nd_re1]), \n                                highest(L_nd_re1,L_nd_fi1,Nr1), \n                                remove_dup([L_nd_fi1|L_nd_re1],Nr1,[L_nd_fi2|L_nd_re2]), \n                                highest(L_nd_re2,L_nd_fi2,Nr2), \n                                remove_dup([L_nd_fi2|L_nd_re2],Nr2,[L_nd_fi3|L_nd_re3]), \n                                highest(L_nd_re3,L_nd_fi3,Nr3), \n                                Result is Nr1 + Nr2 + Nr3, \n                                !.\n\nhighest([], C, C) :- !.\nhighest([L|R], C, H) :- L > C, highest(R, L, H).\nhighest([L|R], C, H) :- L < C, highest(R, C, H).\n\nremove_alldup([],[]):- !.\nremove_alldup([L|R],[L|R_no_dupes]):- remove_dup(R,L,Rt), remove_alldup(Rt,R_no_dupes).\n\nremove_dup([],_,[]) :- !.\nremove_dup([F|R], Element, [F|Result]):- F =\\= Element, remove_dup(R,Element,Result).\nremove_dup([F|R], Element, Result):- F =:= Element, remove_dup(R,Element,Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231778,"user_id":null,"body":"end3([Head|Tail], End) :-\n  length(Tail, N),\n  N >= 2,\n  (N = 2 ->\n    End = [Head|Tail]\n  ;N = 3 ->\n    End = Tail\n  ; end3(Tail, End)\n  ).\n  \nmax_tri_sum(Numbers, Result) :-\n  sort(Numbers, Sorted),\n  end3(Sorted, End3),\n  sum_list(End3, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231779,"user_id":null,"body":"take(Src,N,L) :- findall(E, (nth1(I,Src,E), I =< N), L).\n\nmax_tri_sum(Numbers, Result) :-\n  sort(0, @>, Numbers, NumbersSorted),\n  take(NumbersSorted, 3, Top3),\n  sum_list(Top3, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231780,"user_id":null,"body":"\nmax_tri_sum(Numbers, Result) :- sort(Numbers, Arr), reverse(Arr, [A,B,C|_]), Result is A+B+C.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231781,"user_id":null,"body":"max_tri_sum(Numbers, Result) :-\n  sort(0, @>, Numbers, Sort),\n  length(Sort, N), (N>3 -> (\n    length(L, 3),\n    append(L, _, Sort),\n    sum_list(L, Result)) \n  ; sum_list(Sort, Result)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231782,"user_id":null,"body":"max_tri_sum(Numbers, Result) :-\n  sort(0, @>, Numbers, Sorted),\n  nth0(0, Sorted, A),\n  nth0(1, Sorted, B),\n  nth0(2, Sorted, C),\n  Result is A + B + C.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231783,"user_id":null,"body":"max_tri_sum(Numbers, Result) :-\n  sort(0,>,Numbers,[A,B,C|_]),\n  Result is A+B+C.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231784,"user_id":null,"body":"max_tri_sum(Numbers, Result) :-\n  sort(0, @>, Numbers, Desc),\n  length(Triplets, 3),\n  append(Triplets, _, Desc),\n  sum_list(Triplets, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5ab6538b379d20ad880000ab":[{"id":231785,"user_id":null,"body":"area_or_perimeter(L,W,Answer) :- \n  (L == W, Answer is L * W);\n  (Answer is 2 * (L + W)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231786,"user_id":781,"body":"area_or_perimeter(L,L, Answer) :- !, Answer is L * L.\narea_or_perimeter(L,W, Answer) :- Temp is L + W, Answer is 2 * Temp.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231787,"user_id":1140,"body":"area_or_perimeter(X, X, Area) :-  Area is X * X.\narea_or_perimeter(X, Y, Perim) :- Perim is 2 * X + 2 * Y.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231788,"user_id":168,"body":"area_or_perimeter(L, L, R) :- R is L ^ 2, !.\narea_or_perimeter(L, W, R) :- R is 2 * (L + W).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231789,"user_id":null,"body":"area_or_perimeter(L,W,Answer) :- L = W, Answer is L * W.\narea_or_perimeter(L,W,Answer) :- L =\\= W, Answer is 2*L+2*W.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231790,"user_id":null,"body":"area_or_perimeter(L,W,Answer) :- (L = W -> Answer is L*W; Answer is L+L+W+W).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231791,"user_id":null,"body":"area_or_perimeter(X,X,Answer) :- Answer is X * X.\narea_or_perimeter(L,W,Answer) :- Answer is 2 * (L + W).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231792,"user_id":null,"body":"area_or_perimeter(A,A,X) :-\n  X is A*A.\n  \narea_or_perimeter(L,W,Answer) :- \n  Answer is L * 2 + W * 2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231793,"user_id":null,"body":"\n%square\narea_or_perimeter(X, X, R) :- R is X*X.\n%rectangle\narea_or_perimeter(L, W, R) :- R is 2*L + 2*W.\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231794,"user_id":null,"body":"area_or_perimeter(L,W,Answer) :- L == W, Answer is L*L; Answer is 2*L + 2*W.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5aba780a6a176b029800041c":[{"id":231795,"user_id":3088,"body":"% Store the result inside 3rd argument - Result\nmax_multiple(Divisor, Bound, Result) :- Result is floor(Bound \/ Divisor) * Divisor.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231796,"user_id":null,"body":"% Store the result inside 3rd argument - Result\nmax_multiple(Divisor, Bound, Result) :- Result is Bound-mod(Bound,Divisor).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231797,"user_id":null,"body":"\nmax_multiple(Divisor, Bound, Result) :- \n        M is Bound\/\/Divisor,\n        Result is M*Divisor.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231798,"user_id":null,"body":"% Store the result inside 3rd argument - Result\nmax_multiple(Divisor, Bound, Result) :- Result is Bound \/\/ Divisor * Divisor.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231799,"user_id":null,"body":"max_multiple(_, 0, -1) :- !.\nmax_multiple(Divisor, Bound, Result) :- \n  0 is mod(Bound, Divisor), Result is Bound.\nmax_multiple(Divisor, Bound, Result) :- \n  Next is Bound - 1, max_multiple(Divisor, Next, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231800,"user_id":null,"body":"% Store the result inside 3rd argument - Result\nmax_multiple(Divisor, Bound, Result) :- Rest is mod(Bound, Divisor), Result is Bound - Rest.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231801,"user_id":null,"body":"% Store the result inside 3rd argument - Result\nmax_multiple(Divisor, Bound, Result) :- \n  divmod(Bound, Divisor, _, Rem),\n  Result is Bound - Rem.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231802,"user_id":null,"body":"% Store the result inside 3rd argument - Result\nmax_multiple(Divisor, Bound, Result) :-\n  divmod(Bound, Divisor, Quo, Rem),\n  Result is Bound - Rem.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231803,"user_id":null,"body":"max_multiple(D, B, R) :- R is B - mod(B, D).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231804,"user_id":null,"body":"% Store the result inside 3rd argument - Result\nmax_multiple(Divisor, Bound, Bound) :- 0 is Bound mod Divisor.\nmax_multiple(Divisor, Bound, Result) :- Bound mod Divisor =\\= 0,\n                                        NewBound is Bound - 1,\n                                        max_multiple(Divisor, NewBound, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5abd66a5ccfd1130b30000a9":[{"id":231805,"user_id":null,"body":"row_weights([], [0, 0]).\n\nrow_weights([X], [X, 0]).\n\nrow_weights([X, Y | T], [Re, Ro]) :-\n    row_weights(T, [R1, R2]),\n    Re is X + R1,\n    Ro is Y + R2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231806,"user_id":168,"body":"row_weights([], [0, 0]).\nrow_weights([X], [X, 0]) :- !.\nrow_weights([X, Y | Xs], R) :-\n  row_weights(Xs, [A, B]),\n  A1 is A + X, B1 is B + Y,\n  R = [A1, B1].\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231807,"user_id":527,"body":"row_weights([], [0, 0]) :- !.\nrow_weights([W], [W, 0]) :- !.\nrow_weights([V, W | Ws], [R, S]) :-\n  row_weights(Ws, [R1, S1]),\n  plus(R1, V, R),\n  plus(S1, W, S).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231808,"user_id":null,"body":"row_weights([], [0,0]).\nrow_weights([X], [X,0]).\nrow_weights([X1,X2|Xs], [T1,T2]) :-\n  row_weights(Xs, [Y1,Y2]),\n  T1 is X1+Y1,\n  T2 is X2+Y2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231809,"user_id":null,"body":"row_weights([], [0, 0]) :- !.\nrow_weights([X], [X, 0]) :- !.\nrow_weights([L1, L2| T], [R0, R1]) :- row_weights(T, [Z0, Z1]),\n                                    R0 is Z0 + L1, \n                                    R1 is Z1 + L2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231810,"user_id":null,"body":"row_weights(Array, Result) :- row_weight_rec(Array, [0,0], 0, Result).\n\nrow_weight_rec([], [Sum1,Sum2], _, [Sum1,Sum2]).\nrow_weight_rec([A|R], [Sum1, Sum2], 0, Result) :-\n  Incr1 is Sum1 + A,\n  row_weight_rec(R, [Incr1, Sum2], 1, Result).\nrow_weight_rec([A|R], [Sum1, Sum2], 1, Result) :-\n  Incr2 is Sum2 + A,\n  row_weight_rec(R, [Sum1, Incr2], 0, Result).\n  \n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231811,"user_id":53,"body":"row_weights(LS, R) :- helper(LS, [0, 0], 0, R).\nhelper([], [X, Y], _, R) :- R = [X, Y].\nhelper([H | T], [A, B], I, R) :-\n  P is rem(I, 2),\n  J is I + 1,\n  (  P =:= 0 -> X is A + H, helper(T, [X, B], J, R)\n  ;  Y is B + H, helper(T, [A, Y], J, R)  ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231812,"user_id":null,"body":"row_weights([], Result) :- Result = [0, 0].\nrow_weights([X], Result) :- Result = [X, 0].\nrow_weights(Array, [Team_1, Team_2]) :- \n    Array = [First, Second | Rest], row_weights(Rest, [T1, T2]),\n    Team_1 is First + T1, \n    Team_2 is Second + T2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231813,"user_id":544,"body":"row_weights(Array, [Weight1, Weight2]) :-\n  findall(N, (nth0(I, Array, N), 0 is I mod 2), Team1),\n  findall(N, (nth1(I, Array, N), 0 is I mod 2), Team2),\n  sum_list(Team1, Weight1), sum_list(Team2, Weight2).\n  \n ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231814,"user_id":null,"body":"row_weights([], [0, 0]) :- !.\nrow_weights([X], [X, 0]) :- !.\nrow_weights([X,Y|Rest], [Odds, Evens]) :-\n  row_weights(Rest, [Odds1, Evens1]),\n  Odds is Odds1 + X,\n  Evens is Evens1 + Y.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5ac6932b2f317b96980000ca":[{"id":231815,"user_id":null,"body":"min_value(Values, Result) :-\n  sort(Values, Vs),\n  atomic_list_concat(Vs,AtomRes),\n  atom_number(AtomRes, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231816,"user_id":null,"body":"min_value(Values, Result) :-\n  sort(Values, Sorted),\n  foldl(helper, Sorted, 0, Result).\n  \nhelper(X, Acc, Val) :-\n  Val is 10 * Acc + X.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231817,"user_id":null,"body":"min_value(Values, Result) :-\n  sort(Values, NDValues),\n  atomics_to_string(NDValues, StringResult),\n  number_string(Result, StringResult).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231818,"user_id":null,"body":"min_value(Values, Result) :- remove_alldup(Values, Values_no_Dup),smalestnumber(Values_no_Dup, Tmp_Result),number_string(Result, Tmp_Result).\n\nsmalestnumber([],\"\"):- !.\nsmalestnumber([Val|Rest],Result) :- lowest(Rest, Val, Smalest), remove_element([Val|Rest], Smalest, New_val_list),smalestnumber(New_val_list, R), string_concat(Smalest,R,Result).\n  \n%Find the smalest number in given List\nlowest([], C, C) :- !.\nlowest([L|R], C, H) :- L < C, lowest(R, L, H).\nlowest([L|R], C, H) :- L > C, lowest(R, C, H).\n\n%Removes all duplicates from a list\nremove_alldup([],[]):- !.\nremove_alldup([L|R],[L|R_no_dupes]):- remove_element(R,L,Rt), remove_alldup(Rt,R_no_dupes).\n\n%removes a given element from the list\nremove_element([],_,[]) :- !.\nremove_element([F|R], Element, [F|Result]):- F =\\= Element, remove_element(R,Element,Result).\nremove_element([F|R], Element, Result):- F =:= Element, remove_element(R,Element,Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231819,"user_id":null,"body":"min_value(Values, Result) :- remove_alldup(Values, Values_no_Dup),smalestnumber(Values_no_Dup, Tmp_Result),number_string(Result, Tmp_Result).\n  % Coding and coding...\n\nsmalestnumber([],\"\"):- !.\nsmalestnumber([Val|Rest],Result) :- lowest(Rest, Val, Smalest), remove_dup([Val|Rest], Smalest, New_val_list),smalestnumber(New_val_list, R), string_concat(Smalest,R,Result).\n  \nlowest([], C, C) :- !.\nlowest([L|R], C, H) :- L < C, lowest(R, L, H).\nlowest([L|R], C, H) :- L > C, lowest(R, C, H).\n\nremove_alldup([],[]):- !.\nremove_alldup([L|R],[L|R_no_dupes]):- remove_dup(R,L,Rt), remove_alldup(Rt,R_no_dupes).\n\nremove_dup([],_,[]) :- !.\nremove_dup([F|R], Element, [F|Result]):- F =\\= Element, remove_dup(R,Element,Result).\nremove_dup([F|R], Element, Result):- F =:= Element, remove_dup(R,Element,Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231820,"user_id":null,"body":"make_number([], X, X).\nmake_number([L|T], Act, R):- Z0 is Act * 10 + L, make_number(T, Z0, R).\nmin_value(Values, Result) :- sort(Values, Arr), make_number(Arr, 0, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231821,"user_id":null,"body":"array_decimalStr([],\"\").\narray_decimalStr([X|Xs],Rstr) :-\n  array_decimalStr(Xs,Rs),\n  format(string(Rstr), '~d~s', [X,Rs]).\n  \narray_decimal(Arr,Dec) :-\n  array_decimalStr(Arr,DecStr),\n  number_string(Dec,DecStr).\n\nmin_value(Values, Result) :-\n  sort(Values, Sorted),\n  array_decimal(Sorted, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231822,"user_id":null,"body":"min_value(Values, Result) :-\n  sort(Values, Sorted),\n  reverse(Sorted, RSorted),\n  build_value(RSorted, Result).\n\nbuild_value([], 0).\nbuild_value([A | TA], R) :-\n  build_value(TA, R1),\n  R is 10*R1 + A.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231823,"user_id":null,"body":"digits_to_num(D, N) :- digits_to_num(D, 0, N).\ndigits_to_num([], A, A).\ndigits_to_num([D|Ds], N, A) :- N1 is 10 * N + D, digits_to_num(Ds, N1, A).\n\nmin_value(D, N) :- sort(D, S), digits_to_num(S, N).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231824,"user_id":null,"body":"min_value(Values, Result) :-\n  sort(Values, Sorted),\n  reverse(Sorted, Reversed),\n  join_digits(Reversed, Result).\n\njoin_digits([], 0).\njoin_digits([Digit|Rest], Result) :-\n  join_digits(Rest, Result0),\n  Result is Result0 * 10 + Digit.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5ae62fcf252e66d44d00008e":[{"id":231825,"user_id":null,"body":"expression_matter(A, B, C, R) :- \n  X1 is A*(B+C),\n  X2 is A*B*C,\n  X3 is A+B+C,\n  X4 is (A+B)*C,\n  X5 is A+(B*C),\n  X6 is (A*B)+C,\n  Y = [X1,X2,X3,X4,X5,X6],\n  max_list(Y,R).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231826,"user_id":null,"body":"expression_matter(A, B, C, R) :-\n  R1 is A * B * C,\n  R2 is A + (B * C),\n  R3 is (A + B) * C,\n  R4 is A * (B + C),\n  R5 is (A * B) + C,\n  R6 is A + B + C,\n  max_member(R, [R1, R2, R3, R4, R5, R6]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231827,"user_id":53,"body":"max([R], R).\nmax([X|Xs], R):- max(Xs, T), (X > T -> R = X ; R = T).\n\nexpression_matter(A, B, C, R) :-\n  W is A+B+C,\n  X is A*B*C,\n  Y is (A+B)*C,\n  Z is A*(B+C),\n  max([W,X,Y,Z], R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231828,"user_id":168,"body":"expression_matter(A, B, C, R) :- R is max(A + B + C, max(A * B * C, max(A * (B + C), (A + B) * C))).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231829,"user_id":76,"body":"expression_matter(A, B, C, R) :- \n  max_list([A * (B + C), A * B * C, A + B * C, (A + B) * C, A + B + C], R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231830,"user_id":null,"body":"expression_matter(A, B, C, R) :- R1 is A*B*C, \n                                 R2 is A*B+C, \n                                 R3 is A*(B+C),\n                                 R4 is A+B*C,\n                                 R5 is (A+B)*C,\n                                 R6 is A+B+C,\n                                 max_list([R1, R2, R3, R4, R5, R6], R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231831,"user_id":null,"body":"max([R], R).\nmax([X|Xs], R) :- max(Xs, T), (X > T -> R = X ; R = T).\n\nexpression_matter(A, B, C, R) :-\n  R1 is  A +  B  + C,\n  R2 is (A +  B) * C,\n  R3 is  A *  B  * C,\n  R4 is  A * (B  + C),\n  Rl = [R1, R2, R3, R4],\n%  max_list(Rl, R).\n  max(Rl, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231832,"user_id":null,"body":"expression_matter(A, B, C, R) :- R is max(A + B + C, max(A * B * C, max((A + B) * C, max(A + B * C, max(A * B + C, A * (B + C)))))).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231833,"user_id":null,"body":"expression_matter(A, B, C, R) :-\n    max_list([A*B*C, A+B*C, A*B+C, A*(B+C), (A+B)*C, A+B+C], R).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231834,"user_id":null,"body":"expression_matter(A, B, C, R) :-\n    max_list([A*B*C, A+B*C, A*(B+C), (A+B)*C, A+B+C], R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5ae7e3f068e6445bc8000046":[{"id":231835,"user_id":null,"body":"next_happy_year(Y, Yn, (I,J), Seen) :-\n  J >= 1,\n  N is (Y\/\/J) mod 10,\n  (member(N,Seen) ->\n    Ym is Y+J-(Y mod J), \n    next_happy_year(Ym, Yn, (I,I), []) \n  ; Jn is J\/\/10, \n    next_happy_year(Y, Yn, (I,Jn), [N|Seen])).\nnext_happy_year(Y, Y, _, _).\n\ndec(N,M) :- N>9 -> \n  A is N\/\/10, dec(A,B), M is B*10;\n  M is 1.\nnext_happy_year(Y, Yn) :-\n  dec(Y,I),\n  Y2 is Y+1,\n  next_happy_year(Y2, Yn, (I,I), []).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231836,"user_id":535,"body":"next_happy_year(Year, NextHappyYear) :-\n  NextYear is Year + 1,\n  (is_happy_year(NextYear) ->\n    NextHappyYear = NextYear;\n    next_happy_year(NextYear, NextHappyYear)).\n\nis_happy_year(Year) :-\n  number_chars(Year, Chars),\n  list_to_set(Chars, Set),\n  length(Chars, N),\n  length(Set, N).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231837,"user_id":null,"body":"next_happy_year_aux(Year, Final) :-\n    number_chars(Year, Yrs),\n    sort(Yrs, Srt),\n    length(Srt, Len),\n    (   Len == 4 ->  Final = Year\n    ;   \n        Next is Year + 1,\n        next_happy_year_aux(Next, Final)\n    ).\n\nnext_happy_year(Year, NextHappyYear) :-\n    Nxt is Year + 1, % Hacky way of avoiding failure when starting yr == happy\n    next_happy_year_aux(Nxt, NextHappyYear).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231838,"user_id":null,"body":"next_happy_year(Year, NextHappyYear) :-\n  Y is Year + 1,\n  next_happy_year_(Y, NextHappyYear).\nnext_happy_year_(Y, NextHappyYear) :-\n  number_chars(Y, Cs),\n  list_to_set(Cs, Unique),\n  length(Unique, 4),\n  !,\n  NextHappyYear = Y.\nnext_happy_year_(Y, NextHappyYear) :-\n  next_happy_year(Y, NextHappyYear).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231839,"user_id":527,"body":"next_happy_year(Year, NextHappyYear) :-\n  succ(Year, NextYear),\n  between(NextYear, 9876, NextHappyYear),\n  number_codes(NextHappyYear, Digits),\n  sort(Digits, [_, _, _, _]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231840,"user_id":76,"body":"next_happy_year(Y, N) :-\n  succ(Y, Y1),\n  between(Y1, 9876, N),\n  number_codes(N, Cs), \n  sort(Cs, [_, _, _, _]), \n  !\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231841,"user_id":76,"body":"next_happy_year(Y, N) :-\n  succ(Y, Y1),\n  between(Y1, 9876, N),\n  number_codes(N, Cs), \n  sort(Cs, Uniq), \n  length(Uniq, Len), \n  Len =:= 4,\n  !\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231842,"user_id":76,"body":"next_happy_year(Y, R) :- succ(Y, Y1), next_happy_year_(Y1, R), !. \nnext_happy_year_(Y, Y) :- number_codes(Y, Cs), sort(Cs, Uniq), length(Uniq, Len), Len =:= 4.\nnext_happy_year_(Y, R) :- succ(Y, Y1), next_happy_year_(Y1, R), !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5af15a37de4c7f223e00012d":[{"id":231843,"user_id":null,"body":"men_from_boys(Array, Result) :-\n  partition(even, Array, Men, Boys),\n  sort(0, @<, Men, Men_sorted),\n  sort(0, @>, Boys, Boys_sorted),\n  append(Men_sorted, Boys_sorted, Result).\neven(X) :-\n  0 is X mod 2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231844,"user_id":null,"body":"mfb_cmp(Order, N1, N2) :-\n  M1 is N1 mod 2,\n  M2 is N2 mod 2,\n  (M1 < M2 ->\n      Order = <\n  ;M1 > M2 ->\n      Order = >\n  ;M1 = M2 ->\n      (M1 = 0 ->\n          compare(Order, N1, N2)\n      ;   N12 is -N1, N22 is -N2,\n          compare(Order, -N12, -N22)\n      )\n  ).\n\nmen_from_boys(Array, Result) :- predsort(mfb_cmp, Array, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231845,"user_id":null,"body":"even(X) :- 0 is (X mod 2).\nodd(X) :- not(even(X)).\n\nmen_from_boys(Array, Result) :-\n  include(even,Array,EvenU),\n  include(odd,Array,OddU),\n  sort(EvenU, EvenS),\n  sort(OddU, OddSr),\n  reverse(OddSr, OddS),\n  append(EvenS, OddS, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231846,"user_id":null,"body":"split_even_odd([], [], []).\nsplit_even_odd([X|Xs], [X|Ys], Z) :- 0 is mod(X, 2), split_even_odd(Xs, Ys, Z).\nsplit_even_odd([X|Xs], Y, [X|Zs]) :- 1 is mod(X, 2), split_even_odd(Xs, Y, Zs).\n\nmen_from_boys(Array, Result) :-\n  split_even_odd(Array, Even, Odd),\n  sort(Even, EvenSorted),\n  sort(0, @>, Odd, OddSorted),\n  append(EvenSorted, OddSorted, Result).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231847,"user_id":null,"body":"men_from_boys(Array, Result) :- oddsort(Array, Result, [], []), !.\n\noddsort([], Arrord, L, R) :- \n  sort(0, @<, L, Lord), \n  sort(0, @>, R, Rord), \n  append([Lord,Rord], Arrord).\noddsort([H|T], Arrord, L, R) :- 0 is H\/\\1, oddsort(T, Arrord, [H|L], R).\noddsort([H|T], Arrord, L, R) :- 1 is H\/\\1, oddsort(T, Arrord, L, [H|R]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231848,"user_id":null,"body":"men_from_boys(Array, Result) :-\n  include(even, Array, Evens),\n  include(odd, Array, Odds),\n  sort(0, @<, Evens, Left),\n  sort(0, @>, Odds, Right),\n  append(Left, Right, Result).\n\neven(X) :- 0 is X mod 2.\nodd(X) :- 1 is X mod 2.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231849,"user_id":null,"body":"is_odd(N) :- N mod 2 =\\= 0.\n\nmen_from_boys(Array, Result) :-\n  include(is_odd, Array, Odd),\n  exclude(is_odd, Array, Even),\n  sort(Odd, Odd1),\n  sort(Even, EvenR),\n  reverse(Odd1,OddR),\n  append(EvenR, OddR, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231850,"user_id":1180,"body":"men_from_boys(Array, Result) :-\n  sort(Array, SortedArray),\n  include(is_even, SortedArray, Boys),\n  exclude(is_even, SortedArray, UnsortedMen),\n  sort(0, @>, UnsortedMen, Men),\n  append(Boys, Men, Result).\n  \nis_even(X) :- X mod 2 =:= 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231851,"user_id":null,"body":":- use_module(library(clpfd)).\n\nmen(Lst,Men) :- include(clpfd:even,Lst,Men).\nboys(Lst,Boys) :- include(clpfd:odd,Lst,Boys).\n\nmen_from_boys(Lst,R) :-\n  men(Lst,Men),\n  boys(Lst,Boys),  \n  sort(Men, SortedMen),\n  sort(0, @>, Boys, SortedBoys),\n  append(SortedMen, SortedBoys, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231852,"user_id":null,"body":":- use_module(library(clpfd)).\n\nmen_from_boys(Array, Result) :-\n    partition([X]>>(0 #= X mod 2), Array, Even, Odd),\n    sort(0, @<, Even, EvenNoDupl),\n    sort(0, @>, Odd, OddNoDupl),\n    append(EvenNoDupl, OddNoDupl, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5b06c990908b7eea73000069":[{"id":231853,"user_id":527,"body":"f(X, Y, Eps, N) :-\n    M is sqrt(X * X + Y * Y),\n    M < 1 -> N is truncate(log(Eps) \/ log(M)); N is -1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231854,"user_id":492,"body":"f(X, Y, Eps, N) :-\n    H is sqrt(X*X + Y*Y),\n    (H >= 1.0 ->\n        N = -1\n    ;\n        N is floor(log(Eps) \/ log(H))\n    ).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231855,"user_id":168,"body":"f(X, Y, Eps, N) :-\n  A is sqrt(X * X + Y * Y),\n  (A >= 1 -> N = -1; N is floor(log(Eps) \/ log(A))).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231856,"user_id":null,"body":"complex_norm(R, I, Norm) :- Norm is sqrt(R ** 2 + I ** 2).\n\nf(X, Y, Eps, N) :-\n    complex_norm(X, Y, Norm),\n    ( Norm >= 1.0 ->\n      N = -1\n    ;\n      between(1, inf, N),\n      ValTooBig is Norm ** N, ValOk is ValTooBig * Norm,\n      ValTooBig >= Eps, ValOk < Eps, !\n    ).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231857,"user_id":53,"body":"hypot(A, B, R) :-\n  AA is A * A,\n  BB is B * B,\n  C is AA + BB,\n  R is sqrt(C).\n  \nlogN(X, N, R) :-\n  A is log(X),\n  B is log(N),\n  R is A \/ B.\n\nf(X, Y, Eps, N) :-\n  hypot(X, Y, H),\n  logN(Eps, H, K),\n  (K < 0 -> N is -1; N is floor(K)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231858,"user_id":null,"body":"f(X, Y, Eps, N) :- \n    M is sqrt(X^2+Y^2), M<1, N is ceil(log(Eps)\/log(M)-1);\n    N is -1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231859,"user_id":null,"body":"f(X, Y, Eps, N) :-\n  X < 1, Y < 1,\n  N is floor(2 * log(Eps) \/ log(X * X + Y * Y)).\nf(_, _, _, -1).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231860,"user_id":null,"body":"modulusComplex(A, B, R) :- R is sqrt(A*A + B*B).\n\nf(X, Y, _, -1) :- X * X + Y * Y > 1, !.\nf(X, Y, Eps, R) :-\n  modulusComplex(X, Y, M),\n  R is ceiling(log(Eps) \/ log(M)) - 1. \n\n\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5b0d67c1cb35dfa10b0022c7":[{"id":231861,"user_id":645,"body":"squares_needed(0, 0).\nsquares_needed(N, R) :- R is msb(N) + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231862,"user_id":null,"body":"% Store the result inside 2nd argument.\nsquares_needed(Grains, Result) :- Grains is 0, Result is 0; Result is msb(Grains) + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231863,"user_id":53,"body":"squares_needed(0, 0) :- !.\nsquares_needed(N, R) :- M is div(N, 2), squares_needed(M, S), R is 1 + S.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231864,"user_id":77,"body":"squares_needed(0, 0).\nsquares_needed(Grains, Result) :-\n  G2 is Grains \/\/ 2,\n  squares_needed(G2, R2),\n  Result is R2 + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231865,"user_id":null,"body":"squares_needed(Grains, Result) :- squares_needed(Grains, 0, 0, Result).\n\nsquares_needed(Grains, Sum, Square, Square) :- Grains =< Sum.\n\nsquares_needed(Grains, Sum, Square, Result) :-\n  Grains > Sum,\n  NewSum is Sum * 2 + 1,\n  succ(Square, NewSquare),\n  squares_needed(Grains, NewSum, NewSquare, Result).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231866,"user_id":null,"body":"% Store the result inside 2nd argument.\nsquares_needed(A, R) :-\n  R is ceil(log(A + 1) \/ log(2)).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231867,"user_id":null,"body":"% Store the result inside 2nd argument.\nsquares_needed(0, 0).\nsquares_needed(Grains, Result) :-\n  Half is Grains div 2,\n  squares_needed(Half, Partial),\n  Result is Partial + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231868,"user_id":null,"body":"% Store the result inside 2nd argument.\nsquares_needed(0, 0).\nsquares_needed(N, R):-\n  R is floor(log(N) \/ log(2)) + 1.\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231869,"user_id":168,"body":"% Store the result inside 2nd argument.\nsquares_needed(Grains, Result) :- Result is ceil(log(Grains + 1) \/ log(2)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231870,"user_id":277,"body":"squares_needed(Grains, Result) :-\n  between(0,64,N),\n  pow(2,N,Pow),\n  Sum is Pow-1,\n  Grains =< Sum,\n  Result is N,\n  !\n  .","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5b1cd19fcd206af728000056":[{"id":231871,"user_id":53,"body":"solve(M, R) :- \n  R is (2 * M + 1 - sqrt(4 * M + 1)) \/ (2 * M).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231872,"user_id":null,"body":"\/* you can floor your result with 12 decimals, tested at 1.0e-10\n   Store the result inside 2nd argument. *\/\nsolve(M, S) :- binary(0.0, 1.0, M, S).\n\nbinary(L, R, _, L) :- C is R - L, C < 1e-12, !.\nbinary(L, R, M, S) :-\n  C is R - L, C > 1e-12,\n  Mid is (L + R) \/ 2,\n  u(1, Mid, 0, T),\n  (M < T -> binary(L, Mid, M, S);  binary(Mid, R, M, S)).\n\nu(A, X, R0, R0) :-\n  Add is A * X ** A,\n  Add < 1e-12.\n\nu(A, X, R0, R) :-\n  Add is A * X ** A,\n  Add > 1e-12,\n  S is R0 + Add, \n  B is A + 1,\n  u(B, X, S, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231873,"user_id":544,"body":"solve(M, R) :- R is (1 + 2 * M - M * sqrt( (4 * M + 1) \/ M ** 2 )) \/ ( 2 * M).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231874,"user_id":null,"body":"\/* you can floor your result with 12 decimals, tested at 1.0e-10\n   Store the result inside 2nd argument. *\/\nsolve(M, Result) :- Result is (2*M-sqrt(4*M+1)+1)\/(2*M).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231875,"user_id":null,"body":"\/* you can floor your result with 12 decimals, tested at 1.0e-10\n   Store the result inside 2nd argument. *\/\nsolve(M, R) :- R is (-sqrt(4*M + 1) + 2*M + 1) \/ 2 \/ M.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231876,"user_id":527,"body":"solve(M, R) :- R is 1 - (sqrt(M + 0.25) - 0.5) \/ M.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231877,"user_id":492,"body":"solve(M, R) :-\n    Q is  1 - (sqrt(M + 0.25) - 0.5) \/ M,\n    R is floor(10^12*Q)\/10^12, !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5ca24526b534ce0018a137b5":[{"id":231878,"user_id":76,"body":"send_message(Message, Result) :-\n  string_chars(Message, Chars),\n  send(Chars, true, ' ', Result).\n\nsend([], _, _, \"\") :- !.\nsend( [C | Cs], LowerInput, PrevChar, R) :-\n  Keys = [\"0\", \"1111\",\"\",\"#-\",\"\",\"\",\"\",\"*\",\"\",\"\",\"*-\",\"***\",\"11\",\"**\",\"1\",\"\",\"0-\", \"1-\", \"2-\", \"3-\", \"4-\", \"5-\", \"6-\", \"7-\", \"8-\", \"9-\",\"\",\"\",\"\",\"****\",\"\",\"111\",\"\", \"2\", \"22\", \"222\", \"3\", \"33\", \"333\", \"4\", \"44\", \"444\", \"5\", \"55\", \"555\", \"6\", \"66\", \"666\", \"7\", \"77\", \"777\", \"7777\", \"8\", \"88\", \"888\", \"9\", \"99\", \"999\", \"9999\",\"\",\"\",\"\",\"\",\"\",\"\",\"2\", \"22\", \"222\", \"3\", \"33\", \"333\", \"4\", \"44\", \"444\", \"5\", \"55\", \"555\", \"6\", \"66\", \"666\", \"7\", \"77\", \"777\", \"7777\", \"8\", \"88\", \"888\", \"9\", \"99\", \"999\", \"9999\"],\n  char_code(C, Ord),\n  Ord1 is Ord - 32,\n  nth0(Ord1, Keys, Key),\n  string_chars(Key, KeyChars),\n  (letter(C), is_lower(C, L), L \\= LowerInput -> NeedSwitch = true ; NeedSwitch = false),\n  (NeedSwitch -> SwitchChar = '#' ; SwitchChar = ''),\n  (PrevChar \\= ' ', \\+ NeedSwitch, [KCHead | _] = KeyChars, PrevChar == KCHead -> NeedWait = true ; NeedWait = false),\n  (NeedWait -> WaitChar = ' ' ; WaitChar = ''),\n  (LowerInput -> LowerNegation = false ; LowerNegation = true),\n  (NeedSwitch -> LowerNext = LowerNegation ; LowerNext = LowerInput),\n  last(KeyChars, LastKeyChar),\n  send(Cs, LowerNext, LastKeyChar, R1),\n  format(string(R), \"~w~w~w~w\", [SwitchChar, WaitChar, Key, R1]).\n\nletter(C) :- string_chars(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", Chars), member(C, Chars).\nis_lower(C, R) :- string_chars(\"abcdefghijklmnopqrstuvwxyz\", Chars), member(C, Chars) -> R = true ; R = false.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5ce399e0047a45001c853c2b":[{"id":231879,"user_id":492,"body":"parts(L, R) :- reverse(L, LL), scanl(plus, LL, 0, T), reverse(T, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231880,"user_id":null,"body":"parts([], [0]).\nparts([H|T], [Y,RH|RT]) :-\n    parts(T, [RH|RT]),\n    Y is H + RH.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231881,"user_id":527,"body":"parts(L, R) :- sum_list(L, S), scanl([X, A, A1] >> (A1 is A - X), L, S, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231882,"user_id":null,"body":"parts([], [0]) :- !. \nparts([X], [X,0]) :- !. \nparts([H|T], [R,HRR|RR]) :- parts(T, [HRR|RR]), R is (H + HRR).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231883,"user_id":53,"body":"summation([], S, R) :- R = S.\nsummation([H | T], S, R) :-\n  Q is H + S,\n  summation(T, Q, R).\n\nrolldown([], Acc, S, R) :- R = [S | Acc].\nrolldown([H | T], Acc, S, R) :-\n  S1 is S - H,\n  rolldown(T, [S | Acc], S1, R).\n\nparts(L, R) :-\n  summation(L, 0, S),\n  rolldown(L, [], S, M),\n  reverse(M, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231884,"user_id":null,"body":"parts([], [0]).\nparts([H1|T1], [H2|T2]) :- \n  sum_list([H1|T1], H2),\n  parts([H1|T1], T2, H2).\n\nparts([], [], _) :- !.\nparts([H1|T1], [H2|T2], Sum) :-\n  H2 is Sum-H1,\n  parts(T1, T2, H2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231885,"user_id":null,"body":"% Store the result inside 2nd argument.\nparts(L, R) :- parts_and_sum(L, _, R).\n\nparts_and_sum([], 0, [0]).\nparts_and_sum([H|T], Sum, [Sum|Tail_parts]) :-\n  parts_and_sum(T, Tail_sum, Tail_parts),\n  Sum is H + Tail_sum.\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231886,"user_id":null,"body":"% Store the result inside 2nd argument.\nparts([],[0]).\nparts(L, R) :- \n  L = [H | T],\n  parts(T, [H1|T1]),\n  H2 is H1+H,\n  R = [H2,H1|T1].","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231887,"user_id":null,"body":"% Store the result inside 2nd argument.\nparts(L, R) :-\n    sum_list(L, Sum),\n    sum_list_(L, Sum, R).\n    \nsum_list_([], _, [0]).\nsum_list_([H|T], Sum, [Sum|Ss]) :-\n    NewSum is Sum - H,\n    sum_list_(T, NewSum, Ss).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231888,"user_id":218,"body":"% Store the result inside 2nd argument.\nparts([], [0]).\nparts([H|T], [HH|[RR|TT]]) :- parts(T, [RR|TT]), HH is RR + H.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5ce9c1000bab0b001134f5af":[{"id":231889,"user_id":209,"body":"quarter_of(M, Q) :-\n  Q is ceil(M\/3) \n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231890,"user_id":null,"body":"quarter_of(Month, 1) :-\n  Month < 4.\nquarter_of(Month, 2):-\n  Month >= 4,\n  Month < 7.\nquarter_of(Month, 3):-\n  Month >= 7,\n  Month < 10.\nquarter_of(Month, 4):-\n  Month >= 10.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231891,"user_id":null,"body":"quarter_of(1, 1).\nquarter_of(2, 1).\nquarter_of(3, 1).\nquarter_of(4, 2).\nquarter_of(5, 2).\nquarter_of(6, 2).\nquarter_of(7, 3).\nquarter_of(8, 3).\nquarter_of(9, 3).\nquarter_of(10, 4).\nquarter_of(11, 4).\nquarter_of(12, 4).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231892,"user_id":527,"body":"quarter_of(Month, Quarter) :-\n  Quarter is (Month + 2) \/\/ 3.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231893,"user_id":null,"body":"quarter_of(Month, Quarter) :-\n    Month =< 3, Quarter is 1, !;\n    Month =< 6, Quarter is 2, !;\n    Month =< 9, Quarter is 3, !;\n    Month =< 12, Quarter is 4, !.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231894,"user_id":1140,"body":"quarter_of(M, Q) :- between(1, 3, M), Q = 1.\nquarter_of(M, Q) :- between(4, 6, M), Q = 2.\nquarter_of(M, Q) :- between(7, 9, M), Q = 3.\nquarter_of(M, Q) :- between(10, 12, M), Q = 4.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231895,"user_id":527,"body":":- use_module(library(clpfd)).\n\nquarter_of(Month, Quarter) :-\n  Quarter - 1 #= (Month - 1) \/\/ 3.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231896,"user_id":76,"body":"quarter_of(Month, Quarter) :- Quarter is ceil(Month \/ 3).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231897,"user_id":null,"body":"quarter_of(Month, 1) :- Month > 0, Month =< 3.\nquarter_of(Month, 2) :- Month > 3, Month =< 6.\nquarter_of(Month, 3) :- Month > 6, Month =< 9.\nquarter_of(Month, 4) :- Month > 9, Month =< 12.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231898,"user_id":null,"body":"quarter_of(Month, 1) :-\n  Month =:= 1;\n  Month =:= 2;\n  Month =:= 3.\n  \nquarter_of(Month, 2) :-\n  Month =:= 4;\n  Month =:= 5;\n  Month =:= 6.\n  \nquarter_of(Month, 3) :-\n  Month =:= 7;\n  Month =:= 8;\n  Month =:= 9.\n  \nquarter_of(Month, 4) :-\n  Month =:= 10;\n  Month =:= 11;\n  Month =:= 12.  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5d50e3914861a500121e1958":[{"id":231899,"user_id":null,"body":"letter_number(L, N) :-\n    between(97, 122, C),\n    char_code(L, C),\n    N is (C - 96) mod 26.\n\nadd_letters(Ls, R) :-\n    maplist(letter_number, Ls, Ns),\n    sum_list(Ns, N),\n    M is N mod 26,\n    letter_number(R, M).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231900,"user_id":645,"body":"add_letters(L, R) :- foldl([B, A, R] >> (atom_codes(B, [O]), R is A + O - 96), L, 25, B), C is B mod 26 + 97, atom_codes(R, [C]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231901,"user_id":null,"body":"add_letters(L, R) :- convert(\"z\", N), add_letters_akk(L,N,R).\n\nadd_letters_akk([HL|RL], Akk, R) :-\n  convert(HL, Num),\n  Akk_new is (Akk + Num),\n  overflow(Akk_new, Akk_new_overflow),\n  add_letters_akk(RL, Akk_new_overflow, R).\n\nadd_letters_akk([],Akk,R) :- Code is Akk + 96, char_code(R, Code).\n\noverflow(Num, 26) :-\n  X is Num mod 26,\n  X == 0, !.\noverflow(Num, Corrected) :-\n  Num > 26, !,\n  Corrected is Num mod 26.\noverflow(Num, Num).\n\nconvert(Letter,Result) :- char_code(Letter,Number), Result is Number - 96.\n\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231902,"user_id":168,"body":"add_letters(L, R) :-\n  maplist(char_code, L, Cs),\n  foldl([C, A, S] >> (S is (A + C - 96) mod 26), Cs, 25, S),\n  R1 is S + 97,\n  char_code(R, R1).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231903,"user_id":544,"body":"letter_to_index(z, 0).\nletter_to_index(C, N) :-\n  char_code(C, Code), N is Code - 96.\n\nadd_letters(L, R) :-\n  foldl([X, FromLeft, ToRight]>>(letter_to_index(X, C), ToRight is C + FromLeft), L, 0, Rletter),\n  Rmod is (Rletter mod 26) + 96,\n  (Rmod = 96 -> R = z; char_code(R, Rmod)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231904,"user_id":null,"body":"add_letters([],z).\nadd_letters(L, R) :- \n  foldl([X,Y,Z]>>(char_code(X,C), Z is Y+C-96), L, 0, Sum),\n  Code is (Sum-1) mod 26 + 97,\n  char_code(R, Code).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231905,"user_id":null,"body":"alphaindex(C,N) :-\n  atom_string(C,S),\n  char_code(S,N0),\n  N is N0-96.\n\nadd_letters(Letters,R) :-\n  maplist(alphaindex,Letters,Indexes),\n  sumlist(Indexes,Total),\n  N is (Total-1) mod 26 + 97,\n  char_code(S,N),\n  atom_string(R,S).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231906,"user_id":null,"body":"add_letters(L, R) :-\n  maplist([A, N]>>(atom_codes(A, [C]), N is C - 96), L, Cs),\n  sumlist(Cs, S),\n  N is (S-1) mod 26 + 97,\n  atom_codes(R, [N]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231907,"user_id":null,"body":"add_letters([], z).\nadd_letters([H|T], R) :-\n    maplist(char_code, [H|T], Codes),\n    maplist([X,Y]>>(Y is X - 96), Codes, Nums),\n    sum_list(Nums, LetterNum),\n    LetterNumResidual is LetterNum mod 26,\n    (LetterNumResidual is 0 -> LetterNumResidualNew is 26 ; LetterNumResidualNew is LetterNumResidual),\n    LetterCode is LetterNumResidualNew + 96,\n    char_code(R, LetterCode).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231908,"user_id":null,"body":"get_value(X,R) :-\n  R is mod(X - 96,26).\nto_value(X,R) :-\n  V is mod(X - 1, 26),\n  A is 97 + V,\n  char_code(R,A).\n\nadd_letters(L, R) :- \n  maplist(char_code, L, XS),\n  maplist(get_value, XS, YS),\n  sumlist(YS,T),\n  to_value(T,R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5da1df6d8b0f6c0026e6d58d":[{"id":231909,"user_id":null,"body":"smallest_prime_factor_aux(P, I, P) :- I * I > P, !.\nsmallest_prime_factor_aux(N, P, P) :- N mod P =:= 0, !.\nsmallest_prime_factor_aux(N, I, P) :- J is I + 1, smallest_prime_factor_aux(N, J, P).\n\nsmallest_prime_factor(N, P) :- smallest_prime_factor_aux(N, 2, P).\n\nprime_factors_aux(1, []) :- !.\nprime_factors_aux(N, [P | Ps]) :- smallest_prime_factor(N, P), M is N \/\/ P, prime_factors_aux(M, Ps).\n\ngroup_list([], []).\ngroup_list([X, X | Xs], [(X, N) | Ys]) :- !, group_list([X | Xs], [(X, M) | Ys]), N is M + 1.\ngroup_list([X | Xs], [(X, 1) | Ys]) :- group_list(Xs, Ys).\n\nprime_factors(N, Xs) :- prime_factors_aux(N, Ps), group_list(Ps, Xs).\n\nsection_aux([], 1).\nsection_aux([(_, N) | _], 0) :- N mod 2 =:= 1, !.\nsection_aux([(_, N) | Xs], R) :- section_aux(Xs, S), R is (1 + N * 3 \/\/ 2) * S.\n\nsection(K, R) :- prime_factors(K, Xs), section_aux(Xs, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231910,"user_id":null,"body":"factorize(K, Divider, 0, K) :- 0 =\\= K mod Divider, !.\nfactorize(K, Divider, DividerCount, NewK) :- \n\tK1 is K div Divider,\n\tfactorize(K1, Divider, DividerCount1, NewK),\n\tsucc(DividerCount1, DividerCount).\n\nfactorizationCount(1, _, 1) :- !.\nfactorizationCount(K, Divider, R) :-\n\tfactorize(K, Divider, DividerCount, NewK), \n\tsucc(Divider, Divider1),\n\tfactorizationCount(NewK, Divider1, R1),\n\tR is R1 * (3 * DividerCount + 1).\nfactorizationCount(K, R) :- factorizationCount(K, 2, R).\n\nsection(K, R) :- \n\tSqrtK is truncate(sqrt(K)),\n\tK is SqrtK * SqrtK,\n\t!,\n\tfactorizationCount(SqrtK, R).\nsection(_, 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231911,"user_id":null,"body":"count_divisions(N, N, I, C, C) :- N mod I =\\= 0.\ncount_divisions(N, Na, I, Ca, C) :- \n    N mod I =:= 0, \n    N1 is N div I, \n    succ(Ca,C1),\n    count_divisions(N1, Na, I, C1, C).\n\ncoord(N,N,I,R,R):- I>N.\ncoord(N,Na,I,Ra,R):-\n    I=<N,\n    I1 is I+1,\n    (\n        N mod I =:= 0->\n        count_divisions(N, N1, I, 0, C),\n        R1 is Ra*((C-1)*3+4),\n        coord(N1,Na,I1,R1,R)\n    ;\n        coord(N,Na,I1,Ra,R)\n    ).\n\ncoord(N,R):-\n    coord(N,_,2,1,R).\n\nsection(K, 0) :- floor(sqrt(K)) =\\= sqrt(K).\nsection(K, Result) :- \n    floor(sqrt(K)) =:= sqrt(K),\n    N is floor(sqrt(K)),\n    coord(N,Result).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231912,"user_id":53,"body":"\nwalk(_, _, Ans, _, _, 1000, R) :- R is 4 * Ans. \nwalk(I, N, Ans, Cnt, M, J, R) :-\n  K is mod(N, I),\n  J2 is J + 1,\n  (N =< 1, M =:= 1 -> R is Ans;\n   K =:= 0 ->\n   N2 is div(N, I),\n   Cnt2 is Cnt + 1,\n   walk(I, N2, Ans, Cnt2, 0, J2, R);\n   I2 is I + 1,\n   Ans2 is (Cnt + 1) * Ans,\n   walk(I2, N, Ans2, 0, 1, J2, R)).\n\nsection(K, R) :- \n  Sq is floor(sqrt(K)),\n  Ki is Sq * Sq,\n  (Ki =:= K ->\n   N is K * Sq,\n   walk(2, N, 1, 0, 1, 0, R); \n   R is 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231913,"user_id":492,"body":"mult_num(Num, Ls) :- Num > 0, mult_num(Num, Ls, 2).\nmult_num(1, [], _) :- !.\nmult_num(Num, [Cnt|Ls], F) :- div(Num, F, Cnt, Qu), !,\n   follow(Qu, F, NewF), mult_num(Qu, Ls, NewF).\nmult_num(Num, Ls, F) :- !, \n   follow(Num, F, NewF), mult_num(Num, Ls, NewF).\ndiv(Num, F, Cnt, Qu) :- aux(Num, F, Cnt, Qu, 0), Cnt > 0.\naux(Num, F, Cnt, Qu, K) :- S is Num \/\/ F, Num =:= S * F, !,\n   K1 is K + 1, aux(S, F, Cnt, Qu, K1).\naux(Num, _, Cnt, Num, Cnt).\nfollow(_, 2, 3) :- !.\nfollow(Num, F, NewF) :- F * F < Num, !, NewF is F + 2.\nfollow(Num, _, Num).  \nfun(A, B, S) :- S is B * (A + 1).\nsection(K, R) :-\n    Rt is floor(sqrt(K)),\n    (Rt * Rt =:= K ->\n        mult_num(K * Rt, U),\n        foldl(fun, U, 1, R)\n        ;\n        R is 0\n    ).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231914,"user_id":null,"body":"section(K, R) :- \n  Test is sqrt(K),\n  (round(Test) =:= Test -> % there are only solutions if K has a square Root\n    K1 is round(Test)**3,\n    number_of_divs(K1,R);\n     R is 0).\n  \nnumber_of_divs(N, R):-\n  Lim is floor(sqrt(N)),\n  num_divs(N,Lim,1,R).\n  \nnum_divs(N, L,L,R):- (0 =:= N mod L -> R is 1; R is 0),!.\nnum_divs(N,Lim, M, R):-\n  succ(M,M1),\n  (0 =:= N mod M -> \n    num_divs(N,Lim, M1, R1),\n    R is R1 + 2;\n    num_divs(N,Lim,M1,R)\n   ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5dae2599a8f7d90025d2f15f":[{"id":231915,"user_id":null,"body":"% consecutive_ducks\/1 should pass if `N` can be expressed as a sum of two or more consecutive numbers\nfactors(N,F,R) :-\n  N<F*F -> R=[N]\n; divmod(N,F,M,0) -> R=[F|L], factors(M,F,L)\n; succ(F,G), factors(N,G,R).\n\nconsecutive_ducks(N) :-\n  M is N*2,\n  factors(M,2,Fs),\n  member(A,Fs),\n  0 is A\/\\1,\n  member(B,Fs),\n  1 is B\/\\1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231916,"user_id":53,"body":"% consecutive_ducks\/1 should pass if `N` can be expressed as a sum of two or more consecutive numbers\nconsecutive_ducks(N) :-\n  (  rem(N, 2) =:= 1 -> N \\= 1\n     ; M is div(N, 2), consecutive_ducks(M)\n  )\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231917,"user_id":168,"body":"consecutive_ducks(N) :- N \/\\ (N - 1) =\\= 0.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231918,"user_id":544,"body":":- use_module(library(clpfd)).\nconsecutive_ducks(N) :- \\+ (I in 0 .. sup, N #= 2 ^ I).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231919,"user_id":527,"body":":- use_module(library(clpfd)).\n\nconsecutive_ducks(N) :- \\+ N #= 2 ^ _.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231920,"user_id":527,"body":"consecutive_ducks(N) :- popcount(N) =\\= 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231921,"user_id":76,"body":"consecutive_ducks(N) :-\n  N1 is N - 1,\n  And is N \/\\ N1, % bitwise AND\n  And =\\= 0.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5e030f77cec18900322c535d":[{"id":231922,"user_id":544,"body":"minimul(A, X, Result) :-\n  Remainder is A mod X,\n  Result is min(X - Remainder, Remainder).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231923,"user_id":null,"body":"minimul(0, _, 0).\nminimul(A, X, 0) :- X =:= gcd(A, X).\nminimul(A, X, Result) :-\n  Factor is A \/\/ X,\n  Diff is A - (Factor * X),\n  Half is X \/\/ 2,\n  (Diff >= Half\n  -> Result is X - Diff\n  ;  Result is Diff\n  ).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231924,"user_id":null,"body":"minimul(A,X,Result) :- \n  Result is min(A mod X, X - (A mod X)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231925,"user_id":77,"body":"minimul(A,X,Result) :-\n  M is A rem X,\n  Result is min(M, X - M).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231926,"user_id":null,"body":"minimul(A,X,Result) :-\n  Nearest is round(A\/X),\n  Result is abs(A-Nearest*X).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231927,"user_id":null,"body":":- use_module(library(clpfd)).\n\nminimul(A,X,Offset) :-\n  between(0, inf, Offset),\n  (0 #= (A + Offset) mod X ; 0 #= (A - Offset) mod X).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231928,"user_id":null,"body":"minimul(A,X,0) :- A mod X is 0.\n\nminimul(A,X,Result) :- Result is A mod X, Result < X\/2.\nminimul(A,X,Result) :- Result is X - (A mod X), Result =< X\/2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231929,"user_id":722,"body":"% minimum_to_multiple\/3\nminimul(A,X,Result) :-\n    R1 is A mod X,\n    R2 is X - R1,\n    Result is min(R1, R2).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231930,"user_id":null,"body":"minimul(A, X, Result) :- K = mod(A, X), Result is min(K, abs(K-X)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231931,"user_id":null,"body":"minimul(A,X,Result) :-\n  N1 is A mod X,\n  N2 is X - N1,\n  Result is min(N1,N2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5e4bb05b698ef0001e3344bc":[{"id":231932,"user_id":null,"body":"solve([X, Y], [X, Y]).\n\nsolve([X, Y | T], [A, B]) :-\n    solve(T, [U, V]),\n    A is X * U + Y * V,\n    B is abs(X * V - Y * U).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231933,"user_id":492,"body":"solve1([X, Y, Z, T], R) :-\n    E is abs(X * T - Y * Z),\n    F is abs(X * Z + Y * T),\n    G is abs(X * Z - Y * T),\n    H is abs(X * T + Y * Z),\n    (E =\\= 0, F =\\= 0 ->\n        R = [E, F]\n    ;\n        R = [G, H]\n    ), !.\nsolve1([X, Y, Z, T| Q], R) :-\n    solve([X, Y, Z, T], S),\n    append(S, Q, K),\n    solve(K, R).\n\nsolve(Ls, R) :-\n    [X, Y, Z, T| Q] = Ls,\n    solve1([X, Y, Z, T| Q], R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231934,"user_id":53,"body":"solve([], R) :- R = [0, 0].\n\nsolve([A, B, C, D], R) :- \n  X is abs(A*C - B*D),\n  Y is A*D + B*C,\n  R = [X, Y].\n  \nsolve([A, B, C, D | T], R) :-\n  X is abs(A*C - B*D),\n  Y is A*D + B*C,\n  solve([X, Y | T], R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231935,"user_id":76,"body":"solve([X, Y], [X, Y]) :- !.\nsolve([A, B, C, D | Rest], R) :-\n  X is abs(A * C + B * D),\n  Y is abs(A * D - B * C),\n  append(Rest, [X, Y], Xs),\n  solve(Xs, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231936,"user_id":168,"body":"aux(X, Y, [], R) :- X1 is abs(X), Y1 is abs(Y), R = [X1, Y1], !.\naux(X, Y, [A, B | Xs], R) :-\n  X1 is X * A - Y * B,\n  Y1 is X * B + Y * A,\n  aux(X1, Y1, Xs, R).\n\nsolve(Xs, R) :- aux(1, 0, Xs, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231937,"user_id":null,"body":"solve(Ls, R):- solve(Ls, [], R).\nsolve([], [A, B], [A1, B1]):- A1 is abs(A), B1 is abs(B), !.\nsolve([], [A, B, C, D | T], R):- solve([A, B, C, D | T], [], R).\nsolve([A, B], AR, R):- solve([], [A, B | AR], R).\nsolve([A, B, C, D | T], AR, R):- solve(T, [A*C + B*D, A*D - B*C | AR], R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231938,"user_id":null,"body":"solve([A,B], [A,B]).\nsolve([A,B,P,Q|Ls], R) :-\n    step(A, B, P, Q, X, Y),\n    solve([X,Y|Ls], R).\n\nstep(A, B, P, Q, X, Y) :-\n    X is A * P + B * Q,\n    Y is abs(A * Q - B * P).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231939,"user_id":527,"body":"solve(Xs, [A, B]) :-\n  solve(Xs, [A, B], [1, 0]).\n\nsolve([], [A, B], [A, B]).\nsolve([X, Y | Xs], [A, B], [A0, B0]) :-\n  A1 is A0 * X + B0 * Y,\n  B1 is abs(A0 * Y - B0 * X),\n  solve(Xs, [A, B], [A1, B1]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231940,"user_id":503,"body":"solve([Q,S],U) :- V is abs(Q),B is abs(S),U = [V,B].\nsolve([Q,S,W,A|H],U) :- V is Q * A + S * W,B is Q * W - S * A,solve([V,B|H],U).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231941,"user_id":793,"body":"solve([X,Y], [X,Y]).\nsolve([A,B,C,D|Zs], R) :- U is A*C+B*D, V is abs(A*D-B*C), solve([U,V|Zs], R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5e5b7f55c2e8ae0016f42339":[{"id":231942,"user_id":null,"body":"calculate(X) --> [X].\ncalculate(+(X,Y)) --> [+], calculate(X), calculate(Y).\ncalculate(-(X,Y)) --> [-], calculate(X), calculate(Y).\ncalculate(*(X,Y)) --> [*], calculate(X), calculate(Y).\ncalculate(\/(X,Y)) --> [\/], calculate(X), calculate(Y).\n\ncalculate(Exp1, R) :- \n  split_string(Exp1, \" \", \"\", List),\n  maplist(term_string, Terms, List),\n  calculate(Exp2, Terms, []), \n  R is Exp2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231943,"user_id":3088,"body":"calculate(Expression, Result) :-\n  split_string(Expression, \" \", \"\", Tokens),\n  evaluate_tokens(Tokens, _, Result).\n\nevaluate_tokens([X|T], T, N) :- number_string(N, X).\nevaluate_tokens([Op|T], T1, N) :-\n  evaluate_tokens(T, T0, Left),\n  evaluate_tokens(T0, T1, Right),\n  evaluate_op(Op, Left, Right, N).\n\nevaluate_op(\"+\", L, R, N) :- N is L + R.\nevaluate_op(\"-\", L, R, N) :- N is L - R.\nevaluate_op(\"*\", L, R, N) :- N is L * R.\nevaluate_op(\"\/\", L, R, N) :- N is L \/ R.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5efae11e2d12df00331f91a6":[{"id":231944,"user_id":527,"body":"crack(Hash, Pin) :-\n  atom_string(HashA, Hash),\n  between(0, 99999, Is),\n  format(string(Pin), \"~|~`0t~w~5|\", Is),\n  md5_hash(Pin, HashA, []),\n  !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231945,"user_id":null,"body":":- use_module(library(md5)).\n\ncrack(Hash, Pin) :-\n  atom_string(AHash,Hash),\n  between(0,99999,PinNum),\n  number_string(PinNum,PinString),\n  leftzeropad(5,PinString,PaddedPin),\n  md5_hash(PaddedPin,AHash,[]),\n  Pin=PaddedPin, !.\n  \nleftzeropad(L,S,R) :-\n  string_length(S,Len),\n  ( Len<L ->\n      string_concat(\"0\", S, S2),\n      leftzeropad(L, S2, R)\n  ; R=S\n  ).  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231946,"user_id":76,"body":"use_module(library(md5)).\n\ncrack(Hash, Pin) :-\n  cracker(0, Hash, Pin).\n\ncracker(N, _, \"\") :- N > 99999, writeln(\"Shouldn't reach this point\").\ncracker(N, Hash, Pin) :-\n  number_string(N, P),\n  pad(P, PaddedPin),\n  md5_hash(PaddedPin, ComputedHashAtom, []),\n  atom_string(ComputedHashAtom, ComputedHash),\n  ComputedHash = Hash\n  -> Pin = PaddedPin, !\n  ; Next is N + 1,\n  cracker(Next, Hash, Pin).\n\npad(S, S) :- string_length(S, L), L >= 5, !.\npad(S, Padded) :-\n  string_chars(S, Chars),\n  append(['0'], Chars, PaddedWithZero),\n  string_chars(SP, PaddedWithZero),\n  pad(SP, Padded).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5effa412233ac3002a9e471d":[{"id":231947,"user_id":53,"body":"add(0, 0, 0) :- !.\n\nadd(A, B, R) :-\n  D is rem(A, 10) + rem(B, 10),\n  X is A div 10,\n  Y is B div 10,\n  add(X, Y, N),\n  (  D >= 10 -> R is N * 100 + D\n       ;        R is N *  10 + D )\n  .","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231948,"user_id":168,"body":"add(0, B, B) :- !.\nadd(A, 0, A) :- !.\nadd(A, B, R) :-\n  divmod(A, 10, Qa, Ra),\n  divmod(B, 10, Qb, Rb),\n  add(Qa, Qb, R1),\n  S is Ra + Rb,\n  (S > 9 -> X = 100; X = 10),\n  R is X * R1 + S.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231949,"user_id":527,"body":"add(0, 0, 0) :- !.\nadd(X, Y, R) :-\n  X1 is X div 10,\n  Y1 is Y div 10,\n  add(X1, Y1, R1),\n  S is X mod 10 + Y mod 10,\n  (S < 10 -> M = 10; M = 100),\n  R is R1 * M + S,\n  !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231950,"user_id":null,"body":"add(Num1, Num2, Result) :-\n  (Num1,Num2)=(0,0) -> Result=0;\n  divmod(Num1,10,Q1,R1),\n  divmod(Num2,10,Q2,R2),\n  add(Q1,R1,Q2,R2,[],Result).\n  \nadd(Q1,R1,Q2,R2,Acc,Out) :-\n  (Q1,R1,Q2,R2) = (0,0,0,0) ->\n    atomic_list_concat(Acc,Atom),\n    atom_number(Atom,Out)\n  ; X is R1+R2,\n    divmod(Q1,10,Q1N,R1N),\n    divmod(Q2,10,Q2N,R2N),\n    add(Q1N,R1N,Q2N,R2N,[X|Acc],Out).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231951,"user_id":544,"body":"add(Num1, Num2, Result) :-\n    integer_to_digits(Num1, Num1Digits), length(Num1Digits, Num1Length),\n    integer_to_digits(Num2, Num2Digits), length(Num2Digits, Num2Length),\n    max_list([Num1Length, Num2Length], Length),\n    pad_with_zeroes(Num1Digits, Length, Num1Padded),\n    pad_with_zeroes(Num2Digits, Length, Num2Padded),\n    maplist([A, B, Result]>>(Result is A + B), Num1Padded, Num2Padded, Sums),\n    atomic_list_concat(Sums, ResultAtom),\n    atom_number(ResultAtom, Result).\n  \n  integer_to_digits(N, Digits) :-\n    atom_number(NA, N),\n    atom_chars(NA, NAs),\n    maplist(atom_number, NAs, Digits).\n\n  pad_with_zeroes(Digits, Length, Digits) :-\n    length(Digits, L), Length = L, !.\n\n  pad_with_zeroes(Digits, Length, PaddedDigits) :-\n    length(Digits, L),\n    Length > L,\n    append([0], Digits, Padded),\n    pad_with_zeroes(Padded, Length, PaddedDigits).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231952,"user_id":null,"body":"merge([X], X).\nmerge([X|T], Result) :- merge(T, Y), atom_concat(X, Y, Result).\n\nreverse([], []).\nreverse([X|Tail], Result) :- reverse(Tail, Y), append(Y, [X], Result).\n\nsplit(0, [0]).\nsplit(N1, [X|Result]) :- divmod(N1, 10, Y, X), split(Y, Result), !. \n\naddLists([], [], []).\naddLists([], [Y|T2], [Z|T3]) :- Z is Y, addLists([], T2, T3).\naddLists([X|T1], [], [Z|T3]) :- Z is X, addLists(T1, [], T3).\naddLists([X|T1], [Y|T2], [Z|T3]) :- Z is X + Y, addLists(T1, T2, T3).\n\nadd(0, 0, 0).\nadd(Num1, Num2, Result) :- (Num1 \\= 0; Num2 \\= 0), split(Num1, X), split(Num2, Y), addLists(X, Y, Z), reverse(Z, J), merge(J, K), atom_number(K, Result), !.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231953,"user_id":527,"body":"add(X, Y, R) :- add(X, Y, R, 1).\nadd(0, 0, 0, _) :- !.\nadd(X, Y, R, M) :-\n  X1 is X div 10,\n  Y1 is Y div 10,\n  S is X mod 10 + Y mod 10,\n  (S < 10 -> M1 is M * 10; M1 is M * 100),\n  add(X1, Y1, R1, M1),\n  R is S * M + R1,\n  !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231954,"user_id":76,"body":"add(Num1, Num2, Result) :-\n  Num1 >= Num2, !,\n  number_codes(Num1, Codes1), maplist([C, R] >> (R is C - 48), Codes1, Nums1),\n  number_codes(Num2, Codes2), maplist([C, R] >> (R is C - 48), Codes2, Nums2),\n  length(Nums1, Len1),\n  length(Nums2, Len2),\n  LenDiff is Len1 - Len2,\n  length(Zeroes, LenDiff),\n  maplist(=(0), Zeroes),\n  append(Zeroes, Nums2, PaddedNums2),\n  maplist([A, B, R] >> (R is A + B), Nums1, PaddedNums2, AddedNums),\n  atomic_list_concat(AddedNums, \"\", NumStr),\n  atom_number(NumStr, Result).\n\nadd(Num1, Num2, Result) :- Num1 < Num2, !, add(Num2, Num1, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5f0ed36164f2bc00283aed07":[{"id":231955,"user_id":null,"body":"over_the_road(Address, N, HouseNo) :-\n  HouseNo is (N*2+1)-Address.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231956,"user_id":527,"body":":- use_module(library(clpfd)).\n\nover_the_road(MyAddress, StreetLength, OppositeAddress) :-\n  MyAddress + OppositeAddress #= 2 * StreetLength + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231957,"user_id":527,"body":"over_the_road(Address, N, HouseNo) :-\n  HouseNo is 2 * N + 1 - Address.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231958,"user_id":527,"body":":- use_module(library(clpfd)).\n\nover_the_road(Address, N, HouseNo) :-\n  Address + HouseNo #= 2 * N + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231959,"user_id":76,"body":"over_the_road(Address, N, HouseNo) :-\n  HouseNo is N * 2 - Address + 1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231960,"user_id":null,"body":"over_the_road(Address, N, HouseNo) :-\n  0 is mod(Address, 2), !,\n  HouseNo is 1 + 2 * (N - ((Address - 2) \/ 2) - 1).\nover_the_road(Address, N, HouseNo) :-\n  HouseNo is 2 + 2 * (N - ((Address - 1) \/ 2) - 1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231961,"user_id":null,"body":"over_the_road(A, N, R) :-\n  N1 is A \/\/ 2,\n  divmod(A, 2, _, D),\n  R is 2 * (N - N1) + 1 - D.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231962,"user_id":544,"body":"over_the_road(Address, N, HouseNo) :-\n  HouseNo is abs((2 * N + 1) - Address).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231963,"user_id":487,"body":"over_the_road(Address, N, HouseNo) :-\n  HouseNo is N * 2 - (Address - 1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231964,"user_id":null,"body":"over_the_road(Address, N, HouseNo) :-\n  HouseNo is (N + 1) * 2 - 1 - Address.\n  \n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5f55ecd770692e001484af7d":[{"id":231965,"user_id":564,"body":"mirror([], []).\nmirror(Ns, Result) :-\n  msort(Ns, Head),\n  reverse(Head, [_|Tail]),\n  append(Head, Tail, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231966,"user_id":76,"body":"mirror([], []) :- !.\nmirror(Data, Result) :-\n  msort(Data, Sorted),\n  reverse(Sorted, [_ | Reversed]),\n  append(Sorted, Reversed, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231967,"user_id":544,"body":"mirror(Data, Result) :-\n  sort(0, @>=, Data, SortedData),\n  reverse(SortedData, ReversedSortedData),\n  append([_], HeadlessSortedData, SortedData),\n  append(ReversedSortedData, HeadlessSortedData, Result).\n  \nmirror([], []).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231968,"user_id":null,"body":"mirror([],[]).\nmirror(Data, Result) :- \n  sort(0, @>=, Data, [Mid|Sort]),\n  reverse(Sort, Rev),\n  append([Rev,[Mid],Sort], Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231969,"user_id":null,"body":"connect([H|T],Result):-\n  reverse(T,T1),\n  append(T1,[H|T],Result).\n\nmirror(Data, Result) :-\n  (Data=[] -> Result = [];\n    sort(0,@>=,Data,R1),\n    connect(R1,Result)\n  )\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231970,"user_id":null,"body":"mirror([], []) :- !.\nmirror(Data, Result) :-\n  sort(0, @=<, Data, Sorted),\n  reverse(Sorted, [H|T]),\n  append(Sorted, T, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231971,"user_id":527,"body":"mirror([], []).\nmirror(Data, Result) :-\n  sort(0, @=<, Data, Left),\n  reverse(Left, [_ | Right]),\n  append(Left, Right, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5f70c883e10f9e0001c89673":[{"id":231972,"user_id":null,"body":"flip('R', List, Result) :- msort(List, Result).\nflip('L', List, Result) :- msort(List, R), reverse(R, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231973,"user_id":null,"body":"flip('L', List, Result) :- sort(0, @>=, List, Result).\nflip('R', List, Result) :- sort(0, @=<, List, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231974,"user_id":null,"body":"flip(Direction, List, Result) :-\n  Direction == 'R' ->\n    sort(0, @=<, List, Result)\n    ;sort(0, @>=, List, Result)  \n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231975,"user_id":527,"body":"order('R', @=<).\norder('L', @>=).\nflip(D, As, Res) :- order(D, O), sort(0, O, As, Res).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231976,"user_id":527,"body":"flip(D, As, Res) :-\n  (D = 'R' -> O = @=<; D = 'L' -> O = @>=),\n  sort(0, O, As, Res).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231977,"user_id":527,"body":"flip('R', As, Res) :- sort(0, @=<, As, Res).\nflip('L', As, Res) :- sort(0, @>=, As, Res).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231978,"user_id":76,"body":"flip('R', List, Result) :- msort(List, Result).\nflip('L', List, Result) :- sort(0, @>=, List, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231979,"user_id":null,"body":"%\n% @<\tascending\tremove\n% @=<\tascending\tkeep\n% @>\tdescending\tremove\n% @>=\tdescending\tkeep\n%\nflip(Direction, List, Result) :-\n  (Direction = 'R'\n  -> sort(0, @=<, List, Result)\n  ;  sort(0, @>=, List, Result)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231980,"user_id":null,"body":"flip(Dlt, Lst, Rlt) :-\n  Dlt == 'R', sort(0, @=<, Lst, Rlt);\n  Dlt == 'L', sort(0, @>=, Lst, Rlt).\n%  Dlt == 'R' ->\n%    msort(Lst, Rlt)\n%    ;msort(Lst, Acc), reverse(Acc, Rlt).\n%  (Dlt == 'R' -> Ord = @=<; Dlt == 'L' -> Ord = @>=),\n%  sort(0, Ord, Lst, Rlt).\n  \n%flip('R', L, R) :- msort(L, R).\n%flip('L', L, R) :- msort(L, A), reverse(A, R).\n\n  \n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231981,"user_id":168,"body":"flip(Direction, List, Result) :-\n  (Direction == 'R' -> Pred = @=<; Pred = @>=),\n  sort(0, Pred, List, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5f8341f6d030dc002a69d7e4":[{"id":231982,"user_id":null,"body":"least_larger(L,I,J) :-\n  nth0(I,L,Li),\n  include(<(Li),L,Xs),\n  min_list(Xs,X) -> nth0(J,L,X) ; J is -1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231983,"user_id":null,"body":"least_larger(List, Idx, LeastLarger) :-\n  nth0(Idx, List, N),\n  include(<(N), List, Larger),\n  min_member(Target, Larger),\n  nth0(LeastLarger, List, Target),\n  !.\nleast_larger(_, _, -1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231984,"user_id":null,"body":"least_larger(List, Idx, LeastLarger) :-\n  nth0(Idx, List, N),\n  exclude(>=(N), List, Rest),\n  min_member(Target, Rest),\n  nth0(LeastLarger, List, Target);\n  LeastLarger is -1.\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231985,"user_id":168,"body":"aux(Xs, List, R) :-\n  min_list(Xs, M),\n  nth0(R, List, M), !.\naux([], _, -1).\n\nleast_larger(List, Idx, LeastLarger) :-\n  nth0(Idx, List, Y),\n  include([X] >> (X > Y), List, Xs),\n  aux(Xs, List, LeastLarger).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231986,"user_id":null,"body":"least_larger(List, TargetIndex, AnsIndex) :-\n        nth0(TargetIndex, List, N),\n        include(<(N), List, L),\n        min_list(L, X),\n        nth0(AnsIndex, List, X).\nleast_larger(_, _, -1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231987,"user_id":null,"body":"least_larger(List, Idx, LeastLarger) :-\n        nth0(Idx, List, Target),\n        least_larger(List, Target, 0, inf, -1, LeastLarger).\nleast_larger([], _, _, _, Index, Ans) :- !, Ans = Index.\nleast_larger([First | Rest], Target, First_idx, Best, _, Ans) :-\n        First > Target,\n        First =< Best,\n        !,\n        Next_Index is First_idx + 1,\n        least_larger(Rest, Target, Next_Index, First, First_idx, Ans).\nleast_larger([_ | Rest], Target, First_idx, Best, Best_idx, Ans) :-\n        Next is First_idx + 1,\n        least_larger(Rest, Target, Next, Best, Best_idx, Ans).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231988,"user_id":null,"body":"least_larger(Lst, Idx, LeastLargerIdx) :-\n  nth0(Idx, Lst, N),\n  include({N}\/[X]>>(X>N), Lst, Larger),\n  min_list(Larger, LeastLarger),\n  nth0(LeastLargerIdx, Lst, LeastLarger), !.\n  \nleast_larger(_,_,-1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231989,"user_id":527,"body":"least_larger_(Xs, I, J) :-\n  aggregate_all(min(Y, J), (nth0(I, Xs, X), nth0(J, Xs, Y), Y > X), min(Y, J)).\n\nleast_larger(Xs, I, J) :-\n  least_larger_(Xs, I, J) -> true; J is -1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231990,"user_id":76,"body":"least_larger(List, Idx, LeastLarger) :-\n  nth0(Idx, List, Elem),\n  include([N] >> (N > Elem), List, LargerOnly),\n  min_list(LargerOnly, Min), \n  nth0(LeastLarger, List, Min), !.\n\nleast_larger(_, _, -1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5fc4349ddb878a0017838d0f":[{"id":231991,"user_id":77,"body":"red_knight(N, P, (C,X)) :-\n  X is P * 2,\n  Y is (N+P) mod 2,\n  color(Y, C).\n  \ncolor(0, \"White\").\ncolor(1, \"Black\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231992,"user_id":76,"body":"red_knight(N, P, (Color, Moves)) :-\n  Moves is P * 2,\n  ( (P - N) mod 2 =:= 0 -> Color = \"White\" ; Color = \"Black\" ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231993,"user_id":null,"body":"red_knight(N,P,(Color,Y)) :-\n  Y is P*2,\n  (0 is mod(P-N,2) -> Color=\"White\" ; Color=\"Black\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231994,"user_id":53,"body":"xor(A,B) :- or(A,B), nand(A,B).\npos(0,\"White\") :- !.\npos(1,\"Black\") :- !.\n\nred_knight(N, P, Result) :-\n  Q is rem(P, 2),\n  M is xor(N, Q),\n  T is 2 * P,\n  pos(M, U),\n  Result = (U, T)\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231995,"user_id":168,"body":"red_knight(N, P, Result) :-\n  ((N + P) mod 2 =:= 0 -> C = \"White\"; C = \"Black\"),\n  D is 2 * P,\n  Result = (C, D).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231996,"user_id":null,"body":"red_knight(N, P, Result) :- \n  (   0 is (N + P) mod 2\n  ->  Color = \"White\"\n  ;   Color = \"Black\"\n  ),\n  Rank is P * 2,\n  Result = (Color, Rank).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231997,"user_id":null,"body":"red_knight(N, P, Result) :-\n  N is P mod 2,\n  Pos is P + P,\n  Result = (\"White\", Pos)\n.\n\nred_knight(N, P, Result) :-\n  Pos is P + P,\n  Result = (\"Black\", Pos)\n.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231998,"user_id":null,"body":"red_knight(N, P, Result) :- 0 is mod(P, 2), N is 1, X is 2 * P, Result = (\"Black\", X).\nred_knight(N, P, Result) :- 1 is mod(P, 2), N is 1, X is 2 * P, Result = (\"White\", X).\nred_knight(N, P, Result) :- 0 is mod(P, 2), N is 0, X is 2 * P, Result = (\"White\", X).\nred_knight(N, P, Result) :- 1 is mod(P, 2), N is 0, X is 2 * P, Result = (\"Black\", X).\n  ","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":231999,"user_id":null,"body":"red_knight(N, P, Result) :-\n  Q is P * 2,\n  M is P + N,\n  ( even(M) -> Result = (\"White\", Q);\n    Result = (\"Black\", Q)\n  ).\n\neven(N) :-\n  divmod(N, 2, _, 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232000,"user_id":null,"body":"red_knight(N, P, (C, X)) :- X is P+P, Y is mod(N+P, 2), (Y==0 -> C=\"White\"; C=\"Black\").","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"5fde1ea66ba4060008ea5bd9":[{"id":232001,"user_id":null,"body":":- use_module(library(chr)).\n:- chr_constraint c\/1, h\/1, o\/1, h20\/1, co2\/1, ch4\/1, pack_atoms\/1.\nh(H), o(O), h20(-1) <=> H20 is min(H\/\/2, O), Hn is H-H20*2, On is O-H20, h(Hn), o(On), h20(H20).\nc(C), o(O), co2(-1) <=> CO2 is min(C, O\/\/2), Cn is C-CO2, On is O-CO2*2, c(Cn), o(On), co2(CO2).\nc(C), h(H), ch4(-1) <=> CH4 is min(C, H\/\/4), Cn is C-CH4, Hn is H-CH4*4, c(Cn), h(Hn), ch4(CH4).\npack_atoms(R), h20(H20), co2(CO2), ch4(CH4) <=> R = (H20, CO2, CH4).\n\nburner(C, H, O, R) :- \n  h(H), o(O), c(C), \n  h20(-1), co2(-1), ch4(-1),\n  pack_atoms(R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232002,"user_id":492,"body":"burner(C, H, O, Res) :- \n    W is min((H \/\/ 2), O),\n    CO2 is min((O - W) \/\/ 2, C),\n    M is min((H - W * 2) \/\/ 4, C - CO2),\n    Res = (W, CO2, M).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232003,"user_id":null,"body":"burner(C, H, O, Res) :-\n  h2o(H, O, H2O, H1, O1),\n  co2(C, O1, CO2, C1),\n  ch4(C1, H1, CH4),\n  Res = (H2O, CO2, CH4).\n\nh2o(H, O, H2O, H1, O1) :-\n  H2O is min(H div 2, O),\n  H1 is H - 2 * H2O,\n  O1 is O - H2O.\nco2(C, O, CO2, C1) :-\n  CO2 is min(C, O div 2),\n  C1 is C - CO2.\nch4(C, H, CH4) :-\n  CH4 is min(C, H div 4).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232004,"user_id":null,"body":"burner(C, H, O, Res) :- \n  Res = (Water, CarbonOxide, Methane),\n  reaction(H, 2, O, 1, Water, RH1, RO1),\n  reaction(C, 1, RO1, 2, CarbonOxide, RC1, _),\n  reaction(RC1, 1, RH1, 4, Methane, _, _).\n\nreaction(E1, A1, E2, A2, Result, R1, R2):-\n  Result is min(E1 \/\/ A1, E2 \/\/ A2),\n  R1 is E1 - Result * A1,\n  R2 is E2 - Result * A2.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232005,"user_id":77,"body":"burner(C, H, O, (H2O, CO2, CH4)) :-\n  H2O is min(H div 2, O),\n  CO2 is min(C, (O-H2O) div 2),\n  CH4 is min(C-CO2, (H-2*H2O) div 4).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232006,"user_id":645,"body":"burner(C, H, O, R) :- \n  H2O is min(O, H \/\/ 2),\n  CO2 is min(C, (O - H2O) \/\/ 2),\n  CH4 is min(C - CO2, (H - H2O * 2) \/\/ 4),\n  R = (H2O, CO2, CH4).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"604287495a72ae00131685c7":[{"id":232007,"user_id":76,"body":"doubleton(Num, DN) :-\n  between(Num, inf, DN),\n  DN =\\= Num,\n  number_chars(DN, Chars),\n  list_to_set(Chars, [_, _]), !.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232008,"user_id":null,"body":"doubleton(N,R) :-\n  succ(N,M),\n  between(M,inf,R),\n  number_chars(R,Cs),\n  list_to_set(Cs,[_,_]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232009,"user_id":null,"body":"% Brute-force, sadly\ndoubleton(N, M) :-\n  N1 is N + 1,\n  number_codes(N1, Ns),\n  list_to_set(Ns, S),\n  length(S, SL),\n  (   SL = 2\n  ->  M = N1\n  ;   doubleton(N1, M)\n  ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232010,"user_id":527,"body":"doubleton(Num, Result) :-\n  succ(Num, Num1),\n  between(Num1, infinite, Result),\n  number_codes(Result, Ds),\n  sort(Ds, [_, _]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232011,"user_id":53,"body":"doubleton(Num, Result) :-\n  N is Num + 1,\n  number_string(N, S),\n  string_chars(S, Digits),\n  list_to_set(Digits, Xs),\n  length(Xs, W),\n  (2 is W  ->\n      Result is N\n    ;\n      doubleton(N, Result)\n    ).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"605ae9e1d2be8a0023b494ed":[{"id":232012,"user_id":76,"body":"count_salutes(Hallway, Salutes) :-\n  string_chars(Hallway, Chars),\n  count(Chars, 0, 0, Salutes).  \n    \ncount([], _, S, S).\ncount(['>' | Cs], L, S, R) :- succ(L, L1), count(Cs, L1, S, R).\ncount(['<' | Cs], L, S, R) :- S1 is S + 2 * L, count(Cs, L, S1, R).\ncount(['-' | Cs], L, S, R) :- count(Cs, L, S, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232013,"user_id":564,"body":"count_salutes(Hallway, Salutes) :-\n  string_chars(Hallway, People),\n  hi5(People, 0, Salutes).\n\nhi5([], _, 0) :- !.\nhi5(['>'|Ps], N, Ss) :- hi5(Ps, N + 1, Ss), !.\nhi5(['<'|Ps], N, Ss) :- hi5(Ps, N, FutureSs), Ss is N * 2 + FutureSs, !.\nhi5([_|Ps], N, Ss) :- hi5(Ps, N, Ss).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232014,"user_id":53,"body":"count_salutes(STR, R) :- string_chars(STR, XS), walk(XS, 0, 0, R).  \nwalk([], _, R, R).\nwalk(['>' | XS], L, S, R) :- L1 is L + 1, walk(XS, L1, S, R).\nwalk(['<' | XS], L, S, R) :- S1 is S + 2 * L, walk(XS, L, S1, R).\nwalk(['-' | XS], L, S, R) :- walk(XS, L, S, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232015,"user_id":168,"body":"f('<', [N, L], [N1, L]) :- N1 is N + 2 * L, !.\nf('>', [N, L], [N, L1]) :- L1 is L + 1, !.\nf(_, X, X).\n\ncount_salutes(Hallway, Salutes) :-\n  string_chars(Hallway, Chars),\n  foldl(f, Chars, [0, 0], [Salutes, _]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232016,"user_id":null,"body":"count_salutes(H, Ret) :-\n  string_chars(H, Cs),\n  findall(2, (nth0(N1,Cs,'>'), nth0(N2,Cs,'<'), N1<N2), Encounter),\n  sumlist(Encounter, Ret).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232017,"user_id":null,"body":"count_salutes(Hallway, Count) :-\n  string_chars(Hallway, Chars),\n  findall(X, (nth0(N1,Chars,'>'), nth0(N2,Chars,'<'), N1<N2, X=2), Encounters),\n  sumlist(Encounters, Count).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232018,"user_id":null,"body":"count_salutes(Hall, Ans) :-\n    string_chars(Hall, Xs),\n    salutes(Xs, 0, 0, Ans).\n\nsalutes([], _, X, X).\nsalutes(['<'|T], Rs, Acc, Ans) :-\n    Acc1 is Acc + Rs * 2,\n    salutes(T, Rs, Acc1, Ans),\n    !.\nsalutes(['>'|T], Rs, Acc, Ans) :-\n    Rs1 is Rs + 1,\n    salutes(T, Rs1, Acc, Ans),\n    !.\nsalutes([_|T], Rs, Acc, Ans) :-\n    salutes(T, Rs, Acc, Ans).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"605f5d33f38ca800322cb18f":[{"id":232019,"user_id":null,"body":"tap_code_translation(Text, Result) :-\n  atom_codes(Text, Cs),\n  once(tapmap(Cs, DL)),\n  atomic_list_concat(DL, \" \", Atom),\n  atom_string(Atom, Result).\n\ntapmap([], []).\ntapmap([107|Cs], [\". ...\"|O]) :- tapmap(Cs, O).\ntapmap([C|Cs], [Str|O]) :-\n  (C < 107 -> A is 0 ; A is 1), \n  dots(((C-92-A)\/\/5,((C-97-A) mod 5)+1),Str),\n  tapmap(Cs,O).\n\ndots((LN,RN), DStr) :- once(dots(LN,RN,DL)), atomic_list_concat(DL, DStr).\ndots(-1,0,[]).\ndots(-1,RN,['.'|Out]) :- RM is RN-1, dots(-1,RM,Out).\ndots(0,RN,[' '|Out]) :- dots(-1,RN,Out).\ndots(LN,RN,['.'|Out]) :- LM is LN-1, dots(LM,RN,Out).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232020,"user_id":null,"body":"tap_code_translation(S, X) :-\n    string_codes(S, L),\n    maplist(tap_code, L, Xs),\n    atomics_to_string(Xs, ' ', X).\n\ntap_code(X, S) :-\n    my_code(X, CC),\n    R is CC \/\/ 5 + 1,\n    C is CC mod 5 + 1,\n    dots(R, S1),\n    dots(C, S2),\n    format(string(S), '~w ~w', [S1, S2]).\n\nmy_code(107, 2) :- !.\nmy_code(X, CC) :-\n    (   X < 107\n    ->  CC is X - 97\n    ;   CC is X - 98\n    ).\n\ndots(0, \"\") :- !.\ndots(N, S) :-\n    length(L, N),\n    maplist(=('.'), L),\n    atomics_to_string(L, S).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232021,"user_id":null,"body":"n_dots(N, Dots) :- \n  findall('.', between(0, N, _), List), atomics_to_string(List, Dots).\ntap_code(Cc, Tc) :- \n  (Cc<107 -> Nit is Cc-97; (Cc>107 -> Nit is Cc-98; Nit is Cc-105)), \n  divmod(Nit, 5, Row, Col), n_dots(Row, Xs), n_dots(Col, Ys), \n  atomics_to_string([Xs, Ys], ' ', Tc).\ntap_code_translation(Text, Result) :-\n  string_codes(Text, Ccs), maplist(tap_code, Ccs, Tcs), \n  atomics_to_string(Tcs, ' ', Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232022,"user_id":76,"body":"tap_code_translation(Text, Result) :-\n  string_chars(Text, Chars),\n  maplist([C, R] >> (table(C, R)), Chars, ResultChars),\n  atomics_to_string(ResultChars, ' ', Result).\n  \ntable(a, '. .').\ntable(b, '. ..').\ntable(c, '. ...').\ntable(d, '. ....').\ntable(e, '. .....').\ntable(f, '.. .').\ntable(g, '.. ..').\ntable(h, '.. ...').\ntable(i, '.. ....').\ntable(j, '.. .....').\ntable(k, R) :- table(c, R).\ntable(l, '... .').\ntable(m, '... ..').\ntable(n, '... ...').\ntable(o, '... ....').\ntable(p, '... .....').\ntable(q, '.... .').\ntable(r, '.... ..').\ntable(s, '.... ...').\ntable(t, '.... ....').\ntable(u, '.... .....').\ntable(v, '..... .').\ntable(w, '..... ..').\ntable(x, '..... ...').\ntable(y, '..... ....').\ntable(z, '..... .....').","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"609eee71109f860006c377d1":[{"id":232023,"user_id":527,"body":"last_survivor(Letters, Coords, Result) :-\n  string_chars(Letters, Cs),\n  foldl([I, Xs, Ys] >> nth0(I, Xs, _ ,Ys), Coords, Cs, [Result]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232024,"user_id":null,"body":"last_survivor(Letters, Coords, Result) :-\n  string_chars(Letters, LettersList),\n  deleteCoord(Coords, LettersList, Res),\n  string_to_atom(Res, Result).\n\n\ndeleteCoord([], L, L).\ndeleteCoord([H|T], L, Res):- delAt(H, L, RR), deleteCoord(T, RR, Res).\n\ndelAt(_, [], []).\ndelAt(N, [_|T], T) :- N = 0, !.\ndelAt(N, [H|T], [H|Res]) :- N > 0, NN is N-1, delAt(NN, T, Res).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232025,"user_id":168,"body":"remove(Str, I, R) :-\n  sub_string(Str, 0, I, _, A),\n  J is I + 1,\n  sub_string(Str, J, _, 0, B),\n  string_concat(A, B, R).\n\nlast_survivor(Letters, [], R) :-\n  atom_string(R, Letters).\nlast_survivor(Letters, [I | T], R) :-\n  remove(Letters, I, R1),\n  last_survivor(R1, T, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232026,"user_id":null,"body":"last_survivor(Letters, [], Res) :- atom_string(Res, Letters).\nlast_survivor(Letters, [Coord|Coords], Res) :-\n  string_chars(Letters, Chars),\n  nth0(Coord, Chars, _, RemChars),\n  string_chars(RemLetters, RemChars),\n  last_survivor(RemLetters, Coords, Res)\n  .","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232027,"user_id":544,"body":"last_survivor(LastLetter, [], Result) :-\n    atom_chars(LastLetter, [Result]).\n\nlast_survivor(Letters, [CHead|CTail], Result) :-\n    atom_chars(Letters, LetterList),\n    nth0(CHead, LetterList, _, RemainingLetterList),\n    atom_chars(RemainingLetters, RemainingLetterList),\n    last_survivor(RemainingLetters, CTail, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232028,"user_id":null,"body":"last_survivor(Str, L, Result) :- \n  string(Str),\n  string_codes(Str, Codes),\n  last_survivor(Codes, L, R),\n  atom_chars(Result, R), !.\n  \nlast_survivor(Result, [], Result).\nlast_survivor([C|Cs], [H|T], Result) :-\n  nth0(H, [C|Cs], _, Rest),\n  last_survivor(Rest, T, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232029,"user_id":53,"body":"list_nth1_dropped(As,N1,Bs) :-\n   same_length(As,[_|Bs]),\n   append(Prefix,[_|Suffix],As),\n   length([_|Prefix],N1),\n   append(Prefix,Suffix,Bs).\n\nlast_survivor(Ls, [], R) :- \n  sub_atom(Ls, 0, 1, _, R).\n  \nlast_survivor(Ls, [C|Cs], R) :-\n  D is C + 1,\n  string_chars(Ls, Xs),\n  list_nth1_dropped(Xs, D, Ys),\n  string_chars(Ps, Ys),\n  last_survivor(Ps, Cs, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232030,"user_id":null,"body":"remove_nth([_|Rest],0,Rest).\nremove_nth([A|Rest],N,[A|R2]):-\n  remove_nth(Rest,N1,R2),\n  N is N1 + 1.\n\nlast_survivor(S,[],A):-\n  string_to_atom(S,A).\nlast_survivor(W,[P|Rest],L):-\n  string_chars(W,C),\n  remove_nth(C,P,C2),\n  atomics_to_string(C2,L2),\n  last_survivor(L2,Rest,L).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232031,"user_id":null,"body":"remove_at(I, Ls, R) :- nth0(I, Ls, _, R).\nlast_survivor(Letters, Coords, Result) :-\n  atom_chars(Letters, Ls), foldl(remove_at, Coords, Ls, [Result]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232032,"user_id":null,"body":"remove_at(I, Ls, R) :- nth0(I, Ls, _, R).\nlast_survivor(Letters, Coords, Result) :-\n  atom_chars(Letters, Ls), foldl(remove_at, Coords, Ls, R), R = [Result].","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"60a1aac7d5a5fc0046c89651":[{"id":232033,"user_id":null,"body":":- use_module(library(chr)).\n:- chr_constraint codes\/1, code\/1, list\/1, unlist\/1.\ncode(C1), code(C2) <=> C1=:=C2 | C3 is ((C1-96) mod 26) + 97, code(C3).\nunlist(codes([C|T])) <=> code(C), unlist(codes(T)).\nunlist(codes([])) <=> true.\nlist(codes(L)), code(C) <=> L=[C|L1], list(codes(L1)).\nlist(codes(L)) <=> L=[].\n\nlast_survivors(String, Result) :-\n  string_codes(String, Codes1),\n  unlist(codes(Codes1)),\n  list(codes(Codes2)),\n  string_codes(Result, Codes2).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232034,"user_id":168,"body":"step([], []).\nstep([X | [X | Xs]], [Y | R]) :- !,\n  Y is (X - 96) mod 26 + 97,\n  step(Xs, R).\nstep([X | Xs], [X | R]) :- step(Xs, R).\n\nsteps(Codes, Result) :-\n  msort(Codes, Xs),\n  step(Xs, R),\n  (Xs = R -> Result = R; steps(R, Result)).\n  \nlast_survivors(String, Result) :-\n  atom_codes(String, Cs),\n  steps(Cs, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232035,"user_id":null,"body":"% What an amazingly long-winded way to solve this kata.\nlast_survivors(String, Result) :-\n  string_chars(String, Chars),\n  msort(Chars, SortedChars),\n  sub_all_dupes(SortedChars, ResultChars),  \n  string_chars(Result, ResultChars).\n\nsub_all_dupes(XS, YS) :-\n  substitute_dupes(XS, XS1),\n  msort(XS1, New_XS),\n  (  New_XS == XS\n  -> New_XS = YS\n  ;  sub_all_dupes(New_XS, YS)\n  ).\n\nsubstitute_dupes([], []).\nsubstitute_dupes([X], [X]).\nsubstitute_dupes([X,X|XS], [Y|YS]) :-\n    next_char(X, Y),\n    substitute_dupes(XS, YS).\nsubstitute_dupes([X1,X2|XS], [X1|YS]) :-\n  dif(X1, X2),\n\tsubstitute_dupes([X2|XS], YS).\n\nnext_char(X, Y) :-\n    char_code(X, X_Code),\n    Y_Code is (X_Code - 96) mod 26 + 97,\n    char_code(Y, Y_Code).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232036,"user_id":null,"body":"last_survivors(String, Result) :- \n    string_codes(String, List),\n    last_survivors_list(List, List, Resultlist), !,\n    string_codes(Result, Resultlist).\n\nlast_survivors_list(Zs,[],Zs).\nlast_survivors_list(Zs,[X|Xs],R) :-\n    contains(X,Xs), !,\n    copy_wo_elem(Zs,X,Temp),\n    copy_wo_elem(Temp,X,Ys),\n    transform(X,Y),\n    last_survivors_list([Y|Ys],[Y|Ys],R).\nlast_survivors_list(Zs,[_|Xs],R) :-\n    last_survivors_list(Zs,Xs,R).\n    \n  \ncontains(X,[X|_]).\ncontains(X,[_|Ls]) :- contains(X,Ls).\n\ncopy_wo_elem([],_,[]).\ncopy_wo_elem([X|Xs],Y,[X|Zs]) :- X\\=Y, !, copy_wo_elem(Xs,Y,Zs).\ncopy_wo_elem([Y|Xs],Y,Xs).\n\ntransform(X,Y) :- X=:=122, !, Y is 97.\ntransform(X,Y) :- Y is X+1.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232037,"user_id":53,"body":"rnth(Cs, N, Rs) :-\n  nth0(N, Cs, _, Rs).\n\nwalk(Cs, I, J, R) :-\n  length(Cs, Csl),\n  I1 is I + 1,\n  (I1 >= Csl -> R = \"\";\n   J >= Csl -> I2 is I + 2, walk(Cs, I1, I2, R);\n   nth0(I, Cs, X),\n   nth0(J, Cs, Y),\n   (X \\= Y -> J1 is J + 1, walk(Cs, I, J1, R);\n    char_code(X, Xc),\n    Cc is ((Xc - 96) mod 26) + 97,\n    char_code(C, Cc),\n    rnth(Cs, I, As),\n    Jm1 is J - 1,\n    rnth(As, Jm1, Bs),\n    append([C], Bs, Ps),\n    string_chars(P, Ps),\n    last_survivors(P, R))).\n\nlast_survivors(S, R) :-\n  string_chars(S, Cs),\n  sort(Cs, Ds),\n  length(Cs, Csl),\n  length(Ds, Dsl),\n  (Csl =:= Dsl -> R = S;\n   walk(Cs, 0, 1, R)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232038,"user_id":76,"body":"last_survivors(String, Result) :-\n  string_chars(String, Chars),\n  msort(Chars, SortedChars),\n  string_chars(SortedString, SortedChars),\n  re_split(\"(.)\\\\1\", SortedString, Matches),\n  maplist(promote, Matches, NewMatches),\n  atomics_to_string(NewMatches, NewString),\n  NewString \\= String,\n  last_survivors(NewString, Result), !.\n  \nlast_survivors(S, S).\n  \npromote(S, R) :-\n  string_chars(S, [C, C]),\n  (C == z -> R = a ; char_code(C, Cc), succ(Cc, NCc), char_code(R, NCc)).\n  \npromote(S, S).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232039,"user_id":76,"body":"last_survivors(String, Result) :-\n  string_chars(String, Chars),\n  msort(Chars, SortedChars),\n  last_survivors_(SortedChars, ResultChars),\n  string_chars(Result, ResultChars).\n  \nlast_survivors_(Chars, Result) :-\n  append([X, [Y, Y], Z], Chars),\n  char_code(Y, Cc),\n  (Y = z -> C is 97 ; C is Cc + 1),\n  char_code(NextC, C),\n  append([X, [NextC], Z], RestOfChars),\n  msort(RestOfChars, SortedChars),\n  last_survivors_(SortedChars, Result), !.\n  \nlast_survivors_(Chars, Result) :-\n  string_chars(Result, Chars).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"60a2d7f50eee95000d34f414":[{"id":232040,"user_id":null,"body":":- use_module(library(clpfd)).\n\nlast_survivors([], _, \"\").\nlast_survivors(Strings, Numbers, Result) :-\n  maplist(string_chars, Strings, XYs),\n  transpose(XYs, Columns),\n  maplist(remove, Columns, Numbers, ResultXYs),\n  flatten(ResultXYs, ResultXs),\n  string_chars(Result, ResultXs).\n\nremove(Xs, N, Ys) :-\n  delete(Xs, ' ', Xs1),\n  length(Xs1, Len),\n  New_Len #= max(0, Len - N),\n  length(Ys, New_Len),\n  append(Ys, _, Xs1).\n\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232041,"user_id":76,"body":":- use_module(library(clpfd)).\n\nlast_survivors([], _, \"\").\nlast_survivors(Strings, Numbers, Result) :-\n  maplist(string_chars, Strings, Chars),\n  transpose(Chars, TChars),\n  foldl([C, N, A, R] >> (drop_end(N, C, Cs), string_concat(A, Cs, R)), TChars, Numbers, \"\", Result).\n  \ndrop_end(N, List, Res) :-\n  exclude(=(' '), List, Chars),\n  reverse(Chars, RevChars),\n  drop(N, RevChars, Remaining),\n  string_chars(Res, Remaining).\n  \ndrop(_, [], []) :- !.\ndrop(N, R, R) :- N =< 0, !.\ndrop(N, [_ | T], R) :-\n  N > 0,\n  succ(N1, N),\n  drop(N1, T, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232042,"user_id":168,"body":":- use_module(library(clpfd)).\n\nselect_n(Xs, N, R) :-\n  delete(Xs, ' ', Ys),\n  length(Ys, L),\n  D is max(0, L - N),\n  length(R, D),\n  append(R, _, Ys).\n\nlast_survivors([], _, []).\nlast_survivors(Strings, Numbers, Result) :-\n  maplist(string_chars, Strings, Xs),\n  transpose(Xs, Ys),\n  maplist(select_n, Ys, Numbers, Zs),\n  append(Zs, R),\n  string_chars(Result, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232043,"user_id":53,"body":":- use_module(library(clpfd)).\n\nremove_n(List, N, ShorterList) :-\n    length(List, P),\n    (N > P -> ShorterList = [];\n     length(Prefix, N),\n     append(Prefix, ShorterList, List)).\n    \nare_identical(X, Y) :-\n    X == Y.\n    \nreject(A, In, Out) :-\n    exclude(are_identical(A), In, Out).\n    \nwalk(Ns, Yss, L, I, Acc, R) :-\n  (I > L -> string_chars(R, Acc);\n   nth1(I, Ns, N),\n   nth1(I, Yss, Y),\n   reverse(Y, X),\n   reject(' ', X, Z),\n   remove_n(Z, N, A),\n   I1 is I + 1,\n   append(A, Acc, Nacc),\n   walk(Ns, Yss, L, I1, Nacc, R)).\n    \nlast_survivors(Ls, Ns, R) :-\n  maplist([A, B] >> string_chars(A, B), Ls, Xss),\n  transpose(Xss, Yss),\n  length(Yss, Lsl),\n  length(Ns, Nsl),\n  L is min(Lsl, Nsl),\n  walk(Ns, Yss, L, 1, [], R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"60a516d70759d1000d532029":[{"id":232044,"user_id":null,"body":"test(X, []) :- X > 0, !.\n\ntest(X, [H | T]) :-\n    X > 0,\n    Y is X - 1 + H,\n    test(Y, T).\n\ntestIndex(X, Momentums, Powerups) :-\n    nth0(X, Momentums, M),\n    nth0(X, Powerups, P),\n    test(M, P).\n\nsurvivors(Momentums, Powerups, Survivors) :-\n    findall(X, testIndex(X, Momentums, Powerups), Survivors).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232045,"user_id":null,"body":":- op(800, xfy, ??).\n??(A,B) :- A -> true ; B.\n\ninit :- b_setval(n,0).\nn(N) :- b_getval(n,N).\n+n :- n(N), succ(N,M), nb_setval(n,M).\n\nsurvivors(Ms,Ps,Ss) :- init,\n  maplist([P,Q,[P,Q,_]]>>true,Ms,Ps,Args),\n  findall(S, (member([M,P,S],Args), apply(survives,[M,P,S])), Ss).\n\nsurvives(I,P,R) :- \n  (P=[]??I<1) -> n(N), +n, (I>0->R=N;fail)\n; succ(K,I),\n  [Pi|Pr]=P,\n  Mk is K+Pi,\n  survives(Mk,Pr,R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232046,"user_id":168,"body":"good(M, []) :- M > 0.\ngood(M, [P|Ts]) :- M > 0, M1 is M + P - 1, good(M1, Ts).\n\nsurvivors(Momentums, Powerups, Survivors) :-\n  length(Momentums, L),\n  L1 is L - 1,\n  numlist(0, L1, Is),\n  include([I] >> (nth0(I, Momentums, M), nth0(I, Powerups, Ps), good(M, Ps)), Is, Survivors).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232047,"user_id":null,"body":":- use_module(library(clpfd)).\n\nsurvivors(Momentums, Powerups, Survivors) :-\n  filter_indexes2(run, Momentums, Powerups, Survivors).\n\nrun(N, []) :-\n  N >= 1.\nrun(N, [Powerup|Rest]) :-\n  (  N >= 1\n  -> M #= N + Powerup - 1,\n     run(M, Rest)).\n\n\/* Modular approach: Here's a general-purpose\n     predicate that works with any goal. *\/\n    \nfilter_indexes2(Goal, Xs, Ys, Zs) :-\n  filter_indexes2(Goal, Xs, Ys, 0, Zs).\n\nfilter_indexes2(Goal, [], _, _, []). \nfilter_indexes2(Goal, [X|Xs], [Y|Ys], N, Zs) :-\n  M #= N + 1,\n  (  call(Goal, X, Y)\n  -> append([N], Zs1, Zs),\n     filter_indexes2(Goal, Xs, Ys, M, Zs1)\n  ;  filter_indexes2(Goal, Xs, Ys, M, Zs)).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232048,"user_id":53,"body":"f(M, Ps, L, I, R) :-\n  (I >= L -> R = true;\n   I1 is I + 1,\n   nth0(I, Ps, X),\n   M1 is M + X - 1,\n   (M == 0 -> (\n    X == 0 -> R = false;\n    f(M1, Ps, L, I1, R)\n    );\n    f(M1, Ps, L, I1, R))).\n\nfits(M, Ps, R) :-\n  (M == 0 -> R = false;\n   length(Ps, L),\n   (L == 0 -> R = true;\n    M1 is M - 1,\n    f(M1, Ps, L, 0, R))).\n\nwalk(Ms, Pss, L, I, Acc, R) :-\n  (I >= L -> \n   R = Acc;\n   nth0(I, Ms, M),\n   nth0(I, Pss, Ps),\n   fits(M, Ps, F),\n   I1 is I + 1,\n   (F -> \n    append(Acc, [I], Nacc),\n    walk(Ms, Pss, L, I1, Nacc, R);\n    walk(Ms, Pss, L, I1, Acc, R))).\n\nsurvivors(Ms, Pss, R) :-\n  length(Ms, L),\n  walk(Ms, Pss, L, 0, [], R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232049,"user_id":527,"body":"survivors(Momentums, Powerups, Survivors) :-\n  findall(S, survivor(Momentums, Powerups, S, 0), Survivors).\n\nsurvivor([M0 | _], [Ps | _], I, I) :-\n  scanl([P, M, N] >> (N is M - 1 + P), Ps, M0, Ns),\n  \\+ memberchk(0, Ns).\nsurvivor([_ | Ms], [_ | Pss], S, I) :-\n  succ(I, J),\n  survivor(Ms, Pss, S, J).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232050,"user_id":527,"body":"survivors(Momentums, Powerups, Survivors) :-\n  survivors(Momentums, Powerups, Survivors, 0).\n\nsurvivors([], [], [], _).\nsurvivors([M0 | Ms], [Ps | Pss], Is, I) :-\n  scanl([P, M, N] >> (N is M - 1 + P), Ps, M0, Ns),\n  (memberchk(0, Ns) -> Is = Js ; Is = [I | Js]),\n  succ(I, J),\n  survivors(Ms, Pss, Js, J).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232051,"user_id":76,"body":"survivors(Momentums, Powerups, Survivors) :-\n  length(Momentums, Size),\n  succ(Size1, Size),\n  numlist(0, Size1, Is),\n  include([I] >> (nth0(I, Momentums, M), nth0(I, Powerups, P), enough_momentum(M, P)), Is, Survivors).\n  \nenough_momentum(M, []) :- M > 0, !.\nenough_momentum(M, [P | Ps]) :-\n  M > 0,\n  M1 is M - 1 + P,\n  enough_momentum(M1, Ps).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"60d7a52b57c9d50055b1a1f7":[{"id":232052,"user_id":null,"body":":- use_module(library(clpfd)).\n\ncreate_col(N,R) :- \n  (N<5 -> T=['*',' '] ; T=[' ','*']),\n  Un is mod(N,5), \n  Ln is 4-Un, \n  length(U,Un),\n  length(L,Ln),\n  maplist(maplist(=('*')), [U,L]),\n  append([T,['-'|U],[' '|L]], R).\ncreate_abacus(N,R) :-\n  numlist(1,9,Ns),\n  same_length(Ns,Tens),\n  maplist({N}\/[A,B]>>(B is mod(N\/\/(10**9\/\/10**A),10)),Ns,Tens),\n  maplist(create_col,Tens,Cols),\n  transpose(Cols,Rows),\n  maplist(atomics_to_string,Rows,Strs),\n  atomics_to_string(Strs,\"\n\",R).\n\nread_cols(_,10,Acc,Acc).\nread_cols([[T0,T1|Ts]|Cols],I,Acc,R) :-\n  succ(I,J),\n  nth0(X,Ts,' '),\n  nth0(Y,[T0,T1],'*'),\n  Next is (Y*5+X)*(10**9\/\/10**I)+Acc,\n  read_cols(Cols,J,Next,R).\n\nread_abacus(Abacus, R) :-\n  split_string(Abacus,\"\n\",\"\",Rows0),\n  select(\"---------\",Rows0,Rows),\n  maplist(string_chars,Rows,RowsLs),\n  transpose(RowsLs,Cols),\n  read_cols(Cols,1,0,R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232053,"user_id":527,"body":":- use_module(library(clpfd)).\n\ndigit_pole(0, `* - ****`).\ndigit_pole(1, `* -* ***`).\ndigit_pole(2, `* -** **`).\ndigit_pole(3, `* -*** *`).\ndigit_pole(4, `* -**** `).\ndigit_pole(5, ` *- ****`).\ndigit_pole(6, ` *-* ***`).\ndigit_pole(7, ` *-** **`).\ndigit_pole(8, ` *-*** *`).\ndigit_pole(9, ` *-**** `).\n\nnumber_digits(0, []).\nnumber_digits(N, [D | Ds]) :-\n  N #= 10 * N1 + D,\n  number_digits(N1, Ds).\n\nabacus(Rows, N) :-\n  length(Rows, 8),\n  maplist([R] >> length(R, 9), Rows),\n  transpose(Rows, PolesDesc),\n  reverse(PolesDesc, Poles),\n  same_length(Digits, Poles),\n  number_digits(N, Digits),\n  maplist(digit_pole, Digits, Poles).\n\ncreate_abacus(N, Abacus) :-\n  abacus(Rows, N),\n  maplist(string_codes, Lines, Rows),\n  atomics_to_string(Lines, \"\n\", Abacus).\n\nread_abacus(Abacus, N) :-\n  split_string(Abacus, \"\n\", \"\", Lines),\n  maplist(string_codes, Lines, Rows),\n  abacus(Rows, N).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232054,"user_id":76,"body":":- use_module(library(clpfd)).\n\na_repr(0, '* - ****').\na_repr(1, '* -* ***').\na_repr(2, '* -** **').\na_repr(3, '* -*** *').\na_repr(4, '* -**** ').\na_repr(5, ' *- ****').\na_repr(6, ' *-* ***').\na_repr(7, ' *-** **').\na_repr(8, ' *-*** *').\na_repr(9, ' *-**** ').\n\ncreate_abacus(N, Abacus) :-\n  create_abacus_(N, 100000000, [], A),\n  transpose(A, TA),\n  maplist([A, R] >> (atom_chars(R, A)), TA, Res),\n  atomics_to_string(Res, \"\n\", Abacus).\n  \ncreate_abacus_(_, 0, R, R) :- !.\ncreate_abacus_(N, P, L, R) :-\n  C is N \/\/ P,\n  a_repr(C, Re),\n  atom_chars(Re, Cs),\n  P1 is P \/\/ 10,\n  N1 is N - C * P,\n  append(L, [Cs], Ls),\n  create_abacus_(N1, P1, Ls, R).\n  \nread_abacus(Abacus, N) :-\n  split_string(Abacus, \"\n\", \"\", Rows),\n  maplist([R, C] >> (string_chars(R, C)), Rows, CRows),\n  transpose(CRows, TCRows),\n  maplist([T, R] >> (atom_chars(A, T), a_repr(R, A)), TCRows, Ns),\n  atomic_list_concat(Ns, A),\n  atom_number(A, N).\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"61a8c3a9e5a7b9004a48ccc2":[{"id":232055,"user_id":76,"body":"direction(Facing, Turn, Result) :-\n  Compass = [\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\"],\n  Steps is (Turn mod 360 \/\/ 45 + 8) mod 8,\n  nth0(I, Compass, Facing), !,\n  FinalPos is (Steps + I) mod 8,\n  nth0(FinalPos, Compass, Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232056,"user_id":527,"body":"direction(Facing, Turn, Result) :-\n  Directions = [\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\" | Directions],\n  D is Turn mod 360 \/\/ 45,\n  append(_, [Facing | FromFacing], Directions), !,\n  nth0(D, [Facing | FromFacing], Result).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232057,"user_id":null,"body":"direction(Facing, Turn, Result) :-\n  angel(OldAngle, Facing),\n  NewAngle is OldAngle + Turn,\n  NormNewAngle is (((NewAngle mod 360)+360)mod 360),\n  angel(NormNewAngle, Result).\n  \n\n  \n  \nangel(0,\"N\").\nangel(45,\"NE\").\nangel(90,\"E\").\nangel(135,\"SE\").\nangel(180,\"S\").\nangel(225,\"SW\").\nangel(270,\"W\").\nangel(315,\"NW\").\n","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232058,"user_id":null,"body":"direction(Dir, R) :-\n  nth0(I,[\"N\",\"NE\",\"E\",\"SE\",\"S\",\"SW\",\"W\",\"NW\"],Dir),\n  R is I*45.\n\ndirection(Facing, Turn, Result) :-\n  direction(Facing, V0),\n  V1 is mod(V0+Turn, 360),\n  direction(Result, V1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232059,"user_id":null,"body":"angle(\"N\", 0).\nangle(\"NE\", 1).\nangle(\"E\", 2).\nangle(\"SE\", 3).\nangle(\"S\", 4).\nangle(\"SW\", 5).\nangle(\"W\", 6).\nangle(\"NW\", 7).\ndirection(Facing, Turn, Result) :-\n  Raw_Turn is 2160 + Turn, \n  divmod(Raw_Turn, 360, _, Fixed_Turn),\n  Shift is Fixed_Turn \/\/ 45, \n  angle(Facing, Original), New is Original + Shift,\n  Fixed_New is New mod 8,\n  angle(Result, Fixed_New).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232060,"user_id":168,"body":"dir(\"E\", 0).\ndir(\"NE\", 1).\ndir(\"N\", 2).\ndir(\"NW\", 3).\ndir(\"W\", 4).\ndir(\"SW\", 5).\ndir(\"S\", 6).\ndir(\"SE\", 7).\n\ndirection(Facing, Turn, Result) :-\n  dir(Facing, D),\n  D1 is (D - Turn \/\/ 45) mod 8,\n  dir(Result, D1).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232061,"user_id":76,"body":"direction(Facing, Turn, Result) :-\n  Compass = [\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\"],\n  nth0(I, Compass, Facing),\n  nth0(J, Compass, Result),\n  J =:= (Turn mod 360 \/\/ 45 + 8 + I) mod 8.","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232062,"user_id":53,"body":"direction(P, Turn, R) :-\n  Compass = [\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\"],\n  S is rem(mod(Turn, 360) \/\/ 45 + 8, 8),\n  nth0(I, Compass, P), !,\n  J is rem(S + I, 8),\n  nth0(J, Compass, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"61ce25e92ca4fb000f689fb0":[{"id":232063,"user_id":null,"body":"isbn_converter(ISBN10, ISBN13) :-\n  split_string(ISBN10, \"-\", \"\", [A,B,C,_]),\n  atomics_to_string([A,B,C], String),\n  string_chars(String, Codes),\n  maplist(atom_number, ['9','7','8'|Codes], Nums),\n  isbn_calc(Nums, Sum),\n  (0 is Sum mod 10 -> Checkdigit is 0; Checkdigit is 10-(Sum mod 10)),\n  atomics_to_string([978,A,B,C,Checkdigit],\"-\",ISBN13).\n\nisbn_calc([A,B|R], Out) :- \n  isbn_calc(R, Sum),\n  Out is Sum+A+B*3.\nisbn_calc([], 0).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232064,"user_id":168,"body":"isbn_converter(ISBN10, ISBN13) :-\n  sub_string(ISBN10, 0, _, 1, S0),\n  string_concat(\"978-\", S0, S),\n  string_codes(S, Cs0),\n  delete(Cs0, 45, Cs),\n  numlist(0, 11, Is),\n  foldl([C, I, X, R] >> (R is X + (C - 48) * (I mod 2 * 2 + 1)), Cs, Is, 0, C),\n  D is -C mod 10,\n  number_string(D, L),\n  string_concat(S, L, ISBN13).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232065,"user_id":76,"body":"isbn_converter(ISBN10, ISBN13) :-\n  sub_string(ISBN10, _, _, 1, S1), !,\n  re_replace(\"-\"\/g, \"\", S1, S2),\n  string_chars(S2, Cs),\n  maplist(atom_number, Cs, Ns),\n  numlist(0, 8, Is),\n  foldl([N, I, S, R] >> (I mod 2 =:= 0 -> R is S + N * 3 ; R is S + N), Ns, Is, 0, Sum), \n  Check is (10 - (Sum + 38) mod 10) mod 10,\n  format(string(ISBN13), \"~w~w~d\", [\"978-\", S1, Check]).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}],"62ad72443809a4006998218a":[{"id":232066,"user_id":168,"body":"like_or_dislike(Inputs, FinalState) :-\n  foldl([X, Y, R] >> (X = Y -> R = nothing; R = X), Inputs, nothing, FinalState).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232067,"user_id":76,"body":"state(like, nothing, like).\nstate(dislike, nothing, dislike).\nstate(like, like, nothing).\nstate(dislike, like, dislike).\nstate(like, dislike, like).\nstate(dislike, dislike, nothing).\n\nlike_or_dislike(Inputs, FinalState) :-\n  foldl(state, Inputs, nothing, FinalState).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232068,"user_id":null,"body":"like_or_dislike(Inputs, FinalState) :-\n  foldl(process, Inputs, nothing, FinalState).\nprocess(X, nothing, X).\nprocess(X, X, nothing).\nprocess(dislike, like, dislike).\nprocess(like, dislike, like).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232069,"user_id":null,"body":"like_or_dislike(Inputs, FinalState) :- \n  foldl([A,B,C]>>(A=B->C=nothing;C=A), Inputs, nothing, FinalState).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232070,"user_id":null,"body":"new_state(X, P, R) :- X = P -> R = nothing; R = X.\nlike_or_dislike(Inputs, FinalState) :- foldl(new_state, Inputs, nothing, FinalState).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232071,"user_id":null,"body":"new_state(A, B, C) :- (B = A -> C = nothing; C = A).\nlike_or_dislike(Inputs, FinalState) :- foldl(new_state, Inputs, nothing, FinalState).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"},{"id":232072,"user_id":53,"body":"state(like, nothing, like) :- !.\nstate(dislike, nothing, dislike) :- !.\nstate(like, like, nothing) :- !.\nstate(dislike, like, dislike) :- !.\nstate(like, dislike, like) :- !.\nstate(dislike, dislike, nothing) :- !.\nstate(_,_,\"Error\").\n\nlike_or_dislike(ST, R) :- foldl(state, ST, nothing, R).","lang_id":40,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:32","updated_at":"2022-12-30 18:39:32"}]}