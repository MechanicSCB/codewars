{"50654ddff44f800200000004":[{"id":215936,"user_id":17,"body":"int multiply(int a, int b) {\n  return a * b;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215937,"user_id":2623,"body":"int multiply(int a, int b) {\n  return a * b;\n}\n\/\/ Doing this on a lot of languages, just because, why not\n\/\/ Does anyone implement Brainfuck in the real world unless they are just trying to be supergeek\n\/\/ which is cool, I am geeky, but real world apps in BF are way top tedious\n\/\/ these comments are usless I am asking questions","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215938,"user_id":null,"body":"int multiply(int a, int b) {\n  return a * b;\n}\n\/\/ hold up this isnt even objective-c method formatting wtf\n\n\/\/ -(int) multiply:(int)a multiplyToThis:(int)b {\n\/\/    return a * b;\n\/\/ }\n\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215939,"user_id":null,"body":"int multiply(int a, int b) {\n  a *= b;\n  return a;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215940,"user_id":null,"body":"\/*\n  Author: Andreas\n  Date: October 31,2021\n  Time: 16:24\n*\/\nint multiply(int a, int b) {\n  return  a * b;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215941,"user_id":null,"body":"\/**\n * Multiplies two integers.\n *\n * @param a The first integer parameter.\n * @param b The second integer parameter.\n * @return The result of multiplying two integers.\n *\/\nint multiply(int a, int b) {\n  return a * b;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215942,"user_id":null,"body":"\/**\n * Multiplies two integers.\n *\n * @return The result of multiplying two integers.\n * @param a The first integer parameter.\n * @param b The second integer parameter.\n *\/\nint multiply(int a, int b) {\n  return a * b;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215943,"user_id":null,"body":"int multiply(int a, int b) {\n  return b == 0 ? 0: b > 0? a + multiply(a, b -1): multiply(a, b + 1) - a;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215944,"user_id":null,"body":"\/*  \n  \u03c3\u03c5\u03b3\u03b3\u03c1\u03b1\u03c6\u03ad\u03b1\u03c2: \u0391\u03bd\u03b4\u03c1\u03ad\u03b1\u03c2 \u03a8\n  \u03b7\u03bc\u03b5\u03c1\u03bf\u03bc\u03b7\u03bd\u03af\u03b1: 30 \u0394\u03b5\u03ba\u03b5\u03bc\u03b2\u03c1\u03af\u03bf\u03c5 2020 20:54 03:54\n  \u03ba\u03b1\u03c4\u03b5\u03cd\u03b8\u03c5\u03bd\u03c3\u03b7: \u0392\u03cc\u03c1\u03b5\u03b9\u03bf\u03c2 39.4\u00b0N 74.4\u00b0W 6\u00b0  \n  \u03c5\u03c8\u03cc\u03bc\u03b5\u03c4\u03c1\u03bf:   7 \u03bc\u03ad\u03c4\u03c1\u03b1\n*\/\nint multiply(int a, int b) {\n  return a * b;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"517abf86da9663f1d2000003":[{"id":215945,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *to_camel_case(NSString *s) {\n    NSMutableArray<NSString *> *components = [[s componentsSeparatedByCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@\"-_\"]] mutableCopy];\n    for (int i = 1; i < components.count; i++) {\n        components[i] = [components[i] capitalizedString];\n    }\n    return [components componentsJoinedByString:@\"\"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215946,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *to_camel_case(NSString *s) {\n  NSCharacterSet *charactersToChange = [[NSCharacterSet alphanumericCharacterSet] invertedSet];\n    NSString *strippedReplacement = [[s componentsSeparatedByCharactersInSet:charactersToChange] componentsJoinedByString:@\"_\"];\n    NSArray <NSString*> *stringsArray = [strippedReplacement componentsSeparatedByString:@\"_\"];\n    \n    NSMutableString *resultString = [NSMutableString new];\n    if (stringsArray.count > 0) {\n        [resultString appendString:stringsArray[0]];\n        for (int i=1; i<stringsArray.count; i++)\n            [resultString appendString:[stringsArray[i] capitalizedString]];\n    }\n    \n    return resultString ? resultString : @\"\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215947,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nNSString *to_camel_case(NSString *s) {\n  NSMutableArray *res = [NSMutableArray arrayWithCapacity: 20];\n  NSCharacterSet *cs = [NSCharacterSet characterSetWithCharactersInString: @\"_-\"];\n  for (NSString *c in [s componentsSeparatedByCharactersInSet: cs]) {\n    [res addObject: res.count ? c.capitalizedString : c];\n  }\n  return [res componentsJoinedByString: @\"\"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215948,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *to_camel_case(NSString *s) {\n  \/\/ Valdiate input.\n  if (s == nil || s.length < 2) {\n    return s;\n  }\n  \n  NSMutableString *camelStr = [NSMutableString stringWithCapacity:0];\n  [camelStr appendFormat: @\"%c\", [s characterAtIndex: 0]];  \/\/ Keep the first character the same.\n  \n  BOOL capitalizeNextLetter = NO;\n  for (int i = 1; i < s.length; i++) {\n    unichar c = [s characterAtIndex:i];\n    if (c == '-' || c == '_') {\n      capitalizeNextLetter = YES;\n      continue;\n    }\n    \n    if (capitalizeNextLetter) {\n      [camelStr appendFormat:@\"%c\", toupper(c)];\n      capitalizeNextLetter = NO;\n    } else {\n      [camelStr appendFormat:@\"%c\", tolower(c)];      \n    }\n  }\n  \n  return [NSString stringWithString: camelStr];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215949,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n#import <ctype.h>\n\nNSString *to_camel_case(NSString *s) {\n  \/\/ TODO: convert the input string to camel case\n  NSMutableString* res = [NSMutableString new];\n  \n  NSUInteger len = [s length];\n  unichar buffer[len+1];\n  [s getCharacters:buffer range:NSMakeRange(0, len)];\n  if(len>0)\n    buffer[0] = [s characterAtIndex: 0];\n  bool capitalizeLetter = NO;\n  for(int i = 0; i < len; i++) {\n    switch(buffer[i]){\n        case '-':\n        case '_':\n          capitalizeLetter = YES;\n        break;\n        default:\n          if(capitalizeLetter) {\n            [res appendFormat:@\"%C\", toupper(buffer[i])];\n            capitalizeLetter = NO;\n          } else {\n            if(i==0)\n              [res appendFormat:@\"%C\", buffer[i]];\n            else\n              [res appendFormat:@\"%C\", tolower(buffer[i])];\n          }\n        break;\n      }\n  }\n  return res;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215950,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *to_camel_case(NSString *s) {\n  NSArray *subStringArray = [ s componentsSeparatedByString:@\"-\" ];\n    if ( subStringArray.count == 1 )\n    {\n        subStringArray = [ s componentsSeparatedByString:@\"_\" ];\n    }\n    \n    NSMutableString *returnString = [ [ NSMutableString alloc ] init ];\n    for ( int i = 0; i < subStringArray.count; i++ )\n    {\n        if ( i == 0 )\n        {\n            [ returnString appendString:[ subStringArray objectAtIndex:i ] ];\n        }\n        else\n        {\n            [ returnString appendString:[ [ subStringArray objectAtIndex:i ] capitalizedString ] ];\n        }\n    }\n    \n    return returnString;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215951,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *to_camel_case(NSString *s) {\n  \/\/ TODO: convert the input string to camel case\n  NSCharacterSet *charSet = [NSCharacterSet characterSetWithCharactersInString:@\"-_\"];\n  NSMutableArray<NSString *> *components = [s componentsSeparatedByCharactersInSet:charSet];\n  \n  for (int i = 1; i < [components count]; ++i)\n  {\n    components[i] = [components[i] capitalizedString];\n  }\n  return [components componentsJoinedByString:@\"\"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215952,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *to_camel_case(NSString *s) {\n  \/\/ TODO: convert the input string to camel case\n  NSArray *array1 = [s componentsSeparatedByString:@\"_\"];\n  int size1 = [array1 count];\n  NSString *ret = [[NSString alloc] init];\n  \n  for (int i = 0; i < size1; ++i)\n  {\n    NSArray *array2 = [array1[i] componentsSeparatedByString:@\"-\"];\n    int size2 = [array2 count];\n    for (int j = 0; j < size2; ++j)\n    {\n      NSString *capStr = array2[j];\n      \n      if (i + j > 0)\n      {\n        capStr = [array2[j] capitalizedString];\n      }\n      \/\/NSLog(array2[j]);\n      \/\/NSLog(capStr);\n      \/\/NSLog(ret);\n      ret = [ret stringByAppendingFormat: capStr];\n    }\n  }\n  return ret;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215953,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\n\nNSString *to_camel_case(NSString *s) {\n\n    NSMutableString *myString = [[NSMutableString alloc] initWithString:s];\n\n    for (int i = 0; i < myString.length; i++) {\n        NSString *element = [myString substringWithRange:NSMakeRange(i, 1)];\n\n        if ([element isEqual: @\"-\"] || [element isEqual: @\"_\"]) {\n\n            NSString *bigString = [[myString substringWithRange:NSMakeRange(i + 1, 1)] uppercaseString];\n            [myString replaceCharactersInRange:NSMakeRange(i, 2) withString:bigString];\n        }\n    }\n    return myString;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215954,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *to_camel_case(NSString *s) {\n  NSArray *parts = [s componentsSeparatedByCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@\"-_\"]];\n    NSMutableString *result = [NSMutableString stringWithCapacity:s.length];\n    for (NSUInteger i=0; i<parts.count; i++) {\n        if (i == 0) {\n            [result appendString:parts[0]];\n        }\n        else {\n            [result appendString:[parts[i] capitalizedString]];\n        }\n    }\n    return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"520b9d2ad5c005041100000f":[{"id":215955,"user_id":53,"body":"#import <Foundation\/Foundation.h>\n\nNSString *pig_it(NSString *s) {\n  NSError *error = nil;\n  NSRegularExpression *re = [NSRegularExpression regularExpressionWithPattern:@\"([a-z])([a-z]*)\" options:NSRegularExpressionCaseInsensitive error:&error];\n  NSString *res = [re stringByReplacingMatchesInString:s options:0 range:NSMakeRange(0, [s length]) withTemplate:@\"$2$1ay\"];\n  return res;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215956,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nNSString *pig_it(NSString *s) {\n  NSMutableArray *res = [NSMutableArray arrayWithCapacity: 20];\n  for (NSString *w in [s componentsSeparatedByString: @\" \"]) {\n    [res addObject: [NSString stringWithFormat: @\"%@%@ay\", \n                     [w substringFromIndex: 1], \n                     [w substringToIndex: 1]]];\n  }\n  return [res componentsJoinedByString: @\" \"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215957,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *pig_it(NSString *s) {\n  \/\/ runtime: O(N)\n  \n  \/\/ Validate inputs.\n  if (s == nil || s.length == 0) {\n    return s;\n  }\n  \n  NSMutableString *str = [[NSMutableString alloc] init];\n  BOOL hasFirstLetter = false;\n  unichar firstLetter = 'a';\n  NSMutableString *word = [[NSMutableString alloc] init];\n  \n  \/\/ Iterate through string and build translated string.\n  for (int i = 0; i < s.length; i++) {\n    unichar c = [s characterAtIndex:i];\n    BOOL isLetter = [[NSCharacterSet letterCharacterSet] characterIsMember: c];\n    if (isLetter) {\n      if (!hasFirstLetter) {\n        firstLetter = c;\n        hasFirstLetter = true;\n      } else {\n        [word appendFormat:@\"%c\", c];\n      }\n    } else {\n      \/\/ Finish word if one has been started.\n      if (hasFirstLetter) {\n        [word appendFormat:@\"%c%@\", firstLetter, @\"ay\"];\n        [str appendFormat:@\"%@\", word];\n        [word setString:@\"\"];\n        hasFirstLetter = false;\n      }\n      \n      [str appendFormat:@\"%c\", c];\n    }\n    \n    if (i == s.length - 1 && hasFirstLetter) {\n      \/\/ Finish word if one has been started.\n      [word appendFormat:@\"%c%@\", firstLetter, @\"ay\"];\n      [str appendFormat:@\"%@\", word];\n      [word setString:@\"\"];\n      hasFirstLetter = false;\n    }\n  }\n  \n  return [NSString stringWithString:str];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215958,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *pig_it(NSString *s) {\n  \n  NSArray *arr = [s componentsSeparatedByString:@\" \"];\n  NSMutableArray *resultArray = [NSMutableArray array];\n  for (NSString *subs in arr) {\n    NSString *firstChar = [subs substringToIndex:1];\n    NSString *withoutFirstChar = [subs substringFromIndex:1];\n    NSString *s = [NSString stringWithFormat:@\"%@%@ay\", withoutFirstChar, firstChar];\n    [resultArray addObject:s];\n  }\n   NSString *string = [resultArray componentsJoinedByString:@\" \"];\n  return string;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215959,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *pig_it(NSString *s) {\n  NSMutableString* res=[NSMutableString new];\n  for(NSString* a in [s componentsSeparatedByCharactersInSet:[NSCharacterSet whitespaceCharacterSet]]){\n    [res appendString: [a substringWithRange:NSMakeRange(1, [a length]-1)]];\n    [res appendString: [a substringWithRange:NSMakeRange(0, 1)]];\n    [res appendString:@\"ay \"];\n  }\n  [res deleteCharactersInRange:NSMakeRange([res length]-1, 1)];\n  return res;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215960,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *pig_it(NSString *s) {\n  \/\/ TODO: Convert the given string `s` to pig latin\n  NSArray * str = [s componentsSeparatedByString:@\" \"];\n  NSString * ans = [[NSString alloc] init];\n  for (int i = 0 ;i < str.count ;i++) {\n    NSString * cur = str[i];\n   \n    ans = [NSString stringWithFormat:@\"%@ %@%@ay\",ans,[cur substringFromIndex:1],[cur substringToIndex:1]];\n    \/\/ans = [cur substringFromIndex:1];\n  }\n  return [ans stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215961,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *pig_it(NSString *s) {\n  NSArray *splitArray = [ s componentsSeparatedByString:@\" \" ];\n    \n    NSMutableString *returnString = [ [ NSMutableString alloc ] init ];\n    \n    for ( int i = 0; i < splitArray.count; i++ )\n    {\n        NSString *targetString = [ splitArray objectAtIndex:i ];\n        [ returnString appendString:[ NSString stringWithFormat:@\"%@%@ay%@\", [ targetString substringFromIndex:1 ], [ targetString substringToIndex:1 ], ( i != splitArray.count - 1 ) ? @\" \" : @\"\" ] ];\n    }\n    \n    return returnString;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215962,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString *pigAWord(NSString *s) {\n  return [NSString stringWithFormat:@\"%@%cay\", \n    [s substringWithRange:NSMakeRange(1,[s length]-1)],[s characterAtIndex:0]];\n}\nNSString *pig_it(NSString *s) {\n  NSMutableArray *pigify = [s componentsSeparatedByString:@\" \"];\n  for (int i=0; i<[pigify count]; ++i) {\n    pigify[i] = pigAWord(pigify[i]);\n  }\n  return [pigify componentsJoinedByString:@\" \"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215963,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *pig_it(NSString *s) {\n  NSArray<NSString *> *words = [s componentsSeparatedByString:@\" \"];\n  NSMutableString *output = [NSMutableString stringWithCapacity:[s length]];\n  NSInteger wordCount = [words count];\n  [words enumerateObjectsUsingBlock:^(NSString *obj, NSUInteger idx, BOOL *stop){\n        [output appendFormat:@\"%@%@ay%@\", [obj substringFromIndex:1], [obj substringToIndex:1], (idx < (wordCount - 1)) ? @\" \" : @\"\"];\n  }];\n  return output;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215964,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *pig_it(NSString *s) {\n  NSArray *array = [s componentsSeparatedByString:@\" \"];\n  NSMutableArray *answer = [[NSMutableArray alloc] init];\n  \n  for ( id e in array) {\n    NSString *a = [e substringFromIndex:1];\n    NSString *b = [e substringToIndex:1];\n    NSString *res = [NSString stringWithFormat:@\"%@%@ay\",a,b];\n    [answer addObject:res];\n  }\n  return [answer componentsJoinedByString:@\" \"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"521ef596c106a935c0000519":[{"id":215965,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nNSArray *prime(int n) {\n  if (n < 2) return @[];\n  NSMutableArray<NSNumber *> *primes = [NSMutableArray arrayWithCapacity: 20];\n  [primes addObject: @2];\n  for (int i = 3; i <= n; i += 2) {\n    BOOL isPrime = YES;\n    for (NSNumber *p in primes) {\n      int v = p.intValue;\n      if (v * v > i) break;\n      if (i % v == 0) {\n        isPrime = NO;\n        break;\n      }\n    }\n    if (isPrime) {\n      [primes addObject: @(i)];\n    }\n  }\n  return primes;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215966,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nbool isPrime(int n) {\n      if (n <= 2) return n == 2;\n      if (n % 2 == 0) return false;\n      for (int i = 3; i <= sqrt(n); i++) if (n % i == 0) return false;\n      return true;\n  };\n\nNSArray *prime(int n) {\n  NSMutableArray *results = [[NSMutableArray alloc] init];\n  [results autorelease];\n  \n  for (int i=2; i <= n; i++) {   \n       if(isPrime(i))\n        {\n            [results addObject: [NSNumber numberWithInteger: i]];\n        }\n  }\n\n  return results;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215967,"user_id":53,"body":"#import <Foundation\/Foundation.h>\n#include \"math.h\"\n\nBOOL *isPrime(int n) {\n  if (n < 3) return n == 2;\n  for (int i=2; i<=sqrt(n); i++) {\n    if (n%i==0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nNSArray *prime(int n) {\n  NSMutableArray *array = [[NSMutableArray alloc] init];\n  for (int i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      [array addObject:[NSNumber numberWithInt:i]];\n    }\n  }\n  return array;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215968,"user_id":76,"body":"#import <Foundation\/Foundation.h>\n\nBOOL isPrime(int n) {\n  for (int i = 2; i * i <= n; i++)\n    if (n % i == 0) \n      return false;\n  return true;\n}\n\nNSArray *prime(int n) {\n  NSMutableArray *primes = [[NSMutableArray alloc] initWithCapacity:n];\n  for (int i = 2; i <= n; i++) \n    if (isPrime(i)) \n      [primes addObject: [NSNumber numberWithInt: i]];\n  return primes;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215969,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSArray *prime(int n) {\n  \/\/ TODO: Return all primes less than or equal to `n` as an `NSArray`\n  \/\/ of `NSNumber`s\n  bool* flags = (bool*)malloc(n * sizeof(bool));\n  memset(flags, true, n * sizeof(bool));\n  flags[0] = false;\n  \n  for (NSInteger i = 2; i <= n \/ 2; i++) {\n    for (NSInteger j = i; j <= n \/ 2; j++) {\n      NSInteger res = i * j;\n      if (res > n) {\n        break;\n      }\n      \n      flags[res-1] = false;\n    }\n  }\n  \n  NSMutableArray* ret = [NSMutableArray new];\n  for (int i = 0; i < n; i++) {\n    if (flags[i]) {\n      [ret addObject: @(i+1)];\n    }\n  }\n  \n  return ret;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215970,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSArray *prime(int n) {\n    if (n < 2) return @[];\n    if (n == 2) return @[@2];\n    int *arr = calloc(n, sizeof(int));\n    int i, j, k;\n    for(i = 1; 3*i+1 < n; i++){\n        for(j = 1; (k = i+j+2*i*j) < n && j <= i; j++){\n            arr[k] = 1;\n        }\n    }\n    NSMutableArray *primes = [NSMutableArray arrayWithObjects:@2, nil];\n    for(i = 1; i < (n-1)\/2+1; i++){\n        if(arr[i] == 0)\n            [primes addObject:@(2 * i + 1)];\n    }\n    return primes;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215971,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSArray *prime(int n) {\n  int i=0; bool prime;\n  NSMutableArray *a = [NSMutableArray array];\n  for (int j=2; j<=n; j++) {\n    prime = true;\n    for (int k=2; k<=(int)sqrt(j); k++)\n      if (j%k==0) { prime = false; break; }\n    if (prime) a[i++] = @(j);\n  }\n  return [a copy];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215972,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSArray *prime(int n) {\n  NSMutableArray *result = [NSMutableArray array];\n  for (int i = 0; i <= n; i++) {\n    if (i == 2 || i == 3) {\n      [result addObject:@(i)];\n    } else if (i%2 != 0 && i > 3) {\n      int d = 3;\n      while (d * d <= i && i%d != 0) {\n        d+=2;\n      }\n      if (d*d > i) {\n        [result addObject:@(i)];\n      }\n    }\n  }\n    return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215973,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSArray *prime(int n) {\n  \/\/ TODO: Return all primes less than or equal to `n` as an `NSArray`\n  \/\/ of `NSNumber`s\n  \/\/NSLog(@\"n :%d\",n);\n  static NSMutableArray *newmuarray ;\n    static int lastN = 0;\n    if(newmuarray==nil){\n        newmuarray = [[NSMutableArray alloc]init];\n        [newmuarray addObject:[NSNumber numberWithInteger:2]];\n        [newmuarray addObject:[NSNumber numberWithInteger:3]];\n        prime(40000);\n    }\n    \n    if(n<2)\n        return @[];\n    else if(n==2)\n        return @[@2];\n    else if (n<=lastN){\n        NSMutableArray *muarray = [[NSMutableArray alloc]init];\n        for(int i=0;i<newmuarray.count;i++){\n            if([[newmuarray objectAtIndex:i]intValue]<=n)\n                [muarray addObject:[newmuarray objectAtIndex:i]];\n            else\n                return muarray;\n        }\n        return muarray;\n    }\n    else{\n        newmuarray = [[NSMutableArray alloc]init];\n        [newmuarray addObject:[NSNumber numberWithInteger:2]];\n        [newmuarray addObject:[NSNumber numberWithInteger:3]];\n    }\n    int count = 0;\n    NSMutableArray *muarray = [[NSMutableArray alloc]init];\n    [muarray addObject:[NSNumber numberWithInteger:2]];\n    [muarray addObject:[NSNumber numberWithInteger:3]];\n    \n    for(int i=4;i<=n;i++){\n        if(i%2!=0 && i%3!=0)\n            [newmuarray addObject:[NSNumber numberWithInteger:i]];\n        [muarray addObject:[NSNumber numberWithInteger:i]];\n    }\n    \n    \n    int k = [[newmuarray objectAtIndex:0]intValue];\n    for(int i=2;k*k<=n;i++){\n        NSMutableArray *newmuarray2 = [newmuarray mutableCopy];\n        k = [[newmuarray objectAtIndex:i]intValue];\n        int l = [[newmuarray2 objectAtIndex:i]intValue];\n        \/\/count++;\n        for(int j =1;l*k<=n;j++){\n            [newmuarray removeObject:[muarray objectAtIndex:k*l-2]];\n            l = [[newmuarray2 objectAtIndex:i+j]intValue];\n            \/\/count++;\n        }\n    }\n    if(n>lastN)\n        lastN = n;\n    \/\/NSLog(@\"count:%d\",count);\n    NSLog(@\"n :%d\",n);\n    return newmuarray;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215974,"user_id":17,"body":"#import <Foundation\/Foundation.h>\n\nNSArray *prime(int n) {\n  bool (^isPrime)(int) = ^ bool (int n) {\n    if (n <= 2) return n == 2;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(n); i++) if (n % i == 0) return false;\n    return true;\n  };\n  NSArray *result = [NSMutableArray array];\n  for (int i = 2; i <= n; i++) if (isPrime(i)) [result addObject: [NSNumber numberWithInt: i]];\n  return [NSArray arrayWithArray: result];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"52223df9e8f98c7aa7000062":[{"id":215975,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nNSString *rot13(NSString *s) {\n  NSMutableArray *res = [NSMutableArray arrayWithCapacity: s.length];\n  for (int i = 0; i < s.length; i++) {\n    char ch = [s characterAtIndex: i];\n    if (ch >= 'A' && ch <= 'Z') ch = (ch - 'A' + 13) % 26 + 'A';\n    if (ch >= 'a' && ch <= 'z') ch = (ch - 'a' + 13) % 26 + 'a';\n    [res addObject: [NSString stringWithFormat: @\"%c\", ch]];\n  }\n  return [res componentsJoinedByString: @\"\"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215976,"user_id":17,"body":"#import <Foundation\/Foundation.h>\n\nNSString *rot13(NSString *s) {\n  char result[32767];\n  size_t l = [s length];\n  for (int i = 0; i < l; i++) {\n    char c = [s characterAtIndex: i];\n    result[i] = c + ((c >= 65 && c < 78) || (c >= 97 && c < 110) ? 13 : (c >= 78 && c < 91) || (c >= 110 && c < 123) ? -13 : 0);\n  }\n  result[l] = '\\0';\n  return [NSString stringWithCString: result];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"523a86aa4230ebb5420001e1":[{"id":215977,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nint cmp(const char *a, const char *b) {\n  return (int)*a - *b;\n}\n\nNSString *sortedString(NSString *s) {\n  char buffer[1000];\n  [s getCString: buffer maxLength: 1000 encoding: NSUTF8StringEncoding];\n  qsort(buffer, s.length, 1, cmp);\n  return [NSString stringWithUTF8String: buffer];\n}\n\nNSArray *anagrams(NSString *s, NSArray *a) {\n  NSMutableArray *res = [NSMutableArray arrayWithCapacity: a.count];\n  NSString *s1 = sortedString(s);\n  for (NSString *w in a) {\n    if ([s1 isEqual: sortedString(w)]) {\n      [res addObject: w];\n    }\n  }\n  return res;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215978,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSMutableDictionary* createCharCountDict(NSString* s, NSDictionary* existenceCheck) {\n  NSMutableDictionary* res = [NSMutableDictionary new];\n  NSUInteger len = [s length];\n  unichar* buffer = malloc(sizeof(unichar)*(len+1));\n  [s getCharacters:buffer range:NSMakeRange(0, len)];\n  for(int i=0;i<len;i++) {\n    NSNumber* key = [NSNumber numberWithUnsignedShort: buffer[i]];\n    if(existenceCheck!=nil&&[existenceCheck objectForKey:key]==nil) {\n      [res release];\n      res= nil;\n      break;\n    }\n    NSNumber* val = [res objectForKey: key];\n    if(val==nil)\n      val = @0;\n    val = @([val intValue] + 1);\n    [res setObject: val forKey: key];\n  }\n  free(buffer);\n  return res;\n}\n\nbool checkCharCountDict(NSDictionary* a, NSDictionary* b) {\n  if([a count]!=[b count])\n    return NO;\n  for(NSNumber* key in a){\n    NSNumber* valInA = [a objectForKey:key];\n    NSNumber* valInB = [b objectForKey:key];\n    if(valInB==nil)\n      return NO;\n    if(![valInA isEqualToNumber: valInB])\n      return NO;\n  }\n  return YES;\n}\n\nNSArray *anagrams(NSString *s, NSArray *a) {\n  NSMutableArray* res = [NSMutableArray new];\n  NSDictionary* input = createCharCountDict(s, nil);\n  for(NSString* anagram in a){\n    NSDictionary* anagramDict=createCharCountDict(anagram, input);\n    if(anagramDict!=nil&&checkCharCountDict(input, anagramDict))\n      [res addObject: anagram];\n  }\n  return res;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215979,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *sort (NSString *word) {\n  NSMutableArray *arrayified = [[NSMutableArray alloc] init];\n  [arrayified autorelease];\n  \n  for (int i = 0; i < [word length]; i++){\n    NSString *temp = [word substringWithRange:NSMakeRange(i, 1)]; \n    [arrayified addObject: temp];\n  }\n  \n  arrayified = [arrayified sortedArrayUsingSelector:@selector(compare:)];\n  \n  return [arrayified componentsJoinedByString:@\"\"];\n}\n\nNSArray *anagrams(NSString *s, NSArray *a) {\n  NSMutableArray *results = [[NSMutableArray alloc] init];\n  [results autorelease];\n  \n  NSString *word = sort(s);\n\n  for (NSString *item in a) {\n    NSString *check = sort(item);\n    if([check isEqualToString:word]) [results addObject:item];\n  }\n  \n  \n  return results;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215980,"user_id":53,"body":"#import <Foundation\/Foundation.h>\n\n@interface NSArray (HOF)\n- (NSArray *)filter:(BOOL (^)(id obj))block;\n@end\n\n@implementation NSArray (HOF)\n- (NSArray *)filter:(BOOL (^)(id obj))block {\n    NSMutableArray *mutableArray = [NSMutableArray new];\n    [self enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {\n        if (block(obj) == YES) {\n            [mutableArray addObject:obj];\n        }\n    }];\n    return [mutableArray copy];\n}\n@end\n\nNSString *sortString(NSString *str) \n{\n    NSMutableArray *charArray = [NSMutableArray arrayWithCapacity:str.length];\n    for (int i=0; i<str.length; ++i) {\n        NSString *charStr = [str substringWithRange:NSMakeRange(i, 1)];\n        [charArray addObject:charStr];\n    }\n    NSString *sortedStr = [[charArray sortedArrayUsingSelector:@selector(compare:)] componentsJoinedByString:@\"\"];\n    return sortedStr;\n}\n\nNSArray *anagrams(NSString *s, NSArray *a) \n{\n    NSString *sortedS = sortString(s);\n    return [a filter:^BOOL(id obj) { return [sortString((NSString *)obj) isEqualToString:sortedS]; }];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215981,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSArray *anagrams(NSString *s, NSArray *a) {\n    NSMutableArray *array = [[NSMutableArray alloc]init];\n    int flag;\n    int arr[[s length]];\n    char arr2[[s length]];\n    int max=0;\n    for(int i=0;i<[s length];i++){\n        int flag2=0;\n        for(int r=i+1;r<[s length];r++)\n            if([s characterAtIndex : r]==[s characterAtIndex : i]){\n                flag2=1;\n                break;\n            }\n        if(flag2==0)\n            arr2[max++]=[s characterAtIndex : i];\n    }\n    for(int i=0;i<max;i++){\n        int count=0;\n        for(int j=0;j<[s length];j++)\n            if([s characterAtIndex:j]==arr2[i])\n                    count++;\n        arr[i]=count;\n    }\n    \n    for(int i=0;i<[a count];i++){\n        flag=1;\n        if([s length]!=[a[i] length])\n            continue;\n        for(int r=0;r<max;r++){\n            int count2=0;\n            for(int j=0;j<[a[i] length];j++)\n                if([a[i] characterAtIndex:j]==arr2[r])\n                    count2++;\n            if(count2!=arr[r]){\n                flag=0;\n                break;\n            }\n        }\n        if (flag==1)\n            [array addObject:a[i]];\n    }\n    return [array copy];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215982,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSDictionary* mapString(NSString* s){\n  NSMutableDictionary* characters=[NSMutableDictionary new];\n   for(int i=0;i<[s length];i++){\n      NSString* c=[s substringWithRange:NSMakeRange(i,1)];\n      characters[c]=@([characters[c] intValue]+1);\n  }\n  return [NSDictionary dictionaryWithDictionary:characters];\n}\nNSArray *anagrams(NSString *s, NSArray *a) {\n  NSMutableArray* results=[NSMutableArray new];\n  NSDictionary* sChars=mapString(s);\n  for(NSString* str in a){\n    if([mapString(str) isEqualToDictionary:sChars]){\n      [results addObject:str];\n    }\n  }\n  return results;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215983,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSCountedSet* countedChars(NSString *s) {\n    NSCountedSet *set = [[NSCountedSet alloc] init];\n    for(int i = 0; i < s.length; i++) {\n        NSString *key = [NSString stringWithFormat: @\"%c\", [s characterAtIndex:i]];\n        [set addObject:key];\n    }\n    return set;\n}\n\nNSArray *anagrams(NSString *s, NSArray *a) {\n    NSCountedSet* originalCharsCount = countedChars(s);\n    return [a filteredArrayUsingPredicate:[NSPredicate predicateWithBlock:^BOOL(NSString *word, NSDictionary *bindings) {\n        NSCountedSet* wordCharsCount = countedChars(word);\n        return [originalCharsCount isEqual:wordCharsCount];\n    }]];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215984,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSDictionary<NSString*, NSNumber *>* stringCharacters(NSString *s) {\n    NSMutableDictionary *dict = [[NSMutableDictionary alloc] init];\n    for(int i = 0; i < s.length; i++) {\n        NSString *key = [NSString stringWithFormat: @\"%c\", [s characterAtIndex:i]];\n        dict[key] = @([dict[key] integerValue] + 1);;\n    }\n    return dict;\n}\n\nNSArray *anagrams(NSString *s, NSArray *a) {\n    NSDictionary<NSString*, NSNumber *>* originalCharsCount = stringCharacters(s);\n    return [a filteredArrayUsingPredicate:[NSPredicate predicateWithBlock:^BOOL(NSString *word, NSDictionary *bindings) {\n        NSDictionary<NSString*, NSNumber *>* wordCharsCount = stringCharacters(word);\n        if([originalCharsCount count] != [wordCharsCount count]) { return NO; }\n        for(NSString *key in originalCharsCount) {\n            if(originalCharsCount[key] != wordCharsCount[key]) {\n                return NO;\n            }\n        }\n        return YES;\n    }]];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215985,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSCountedSet *charCount(NSString *s);\n\nNSArray *anagrams(NSString *s, NSArray *a) {\n  NSCountedSet *anagramChars = charCount(s);\n  NSMutableArray *results = [NSMutableArray array];\n  \n  for (NSString *str in a) {\n    if (s.length == str.length && [anagramChars isEqual:charCount(str)]) {\n      [results addObject:str];\n    }\n  }\n  \n  return [results copy];\n}\n\nNSCountedSet *charCount(NSString *s) {\n  NSCountedSet *characters = [[NSCountedSet alloc] initWithCapacity:26];\n  \n  NSRange range = NSMakeRange(0, 1);\n  for (int i = 0; i < s.length; ++i) {\n    range.location = i;\n    [characters addObject:[s substringWithRange:range]];\n  }\n  \n  return characters;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215986,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSCountedSet *charCount(NSString *s);\n\nNSArray *anagrams(NSString *s, NSArray *a) {\n  NSCountedSet *toMatch = charCount(s);\n  NSMutableArray *results = [NSMutableArray new];\n  \n  for (NSString *str in a) {\n    if (str.length == s.length && [toMatch isEqual:charCount(str)]) {\n      [results addObject:str];\n    }\n  }\n  \n  return [results copy];\n}\n\nNSCountedSet *charCount(NSString *s) {\n  NSCountedSet *chars = [[NSCountedSet alloc] initWithCapacity:26];\n  \n  NSRange range = NSMakeRange(0, 1);\n  for (int i = 0; i < s.length; ++i) {\n    range.location = i;\n    [chars addObject:[s substringWithRange:range]];\n  }\n  \n  return chars;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"523b4ff7adca849afe000035":[{"id":215987,"user_id":null,"body":"int greet() {\n  return(@\"hello world!\");\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215988,"user_id":null,"body":"\/\/ create function greet that return hello world!\n#import <Foundation\/Foundation.h>\nNSString* greet() {\n    return [[@\"|h|e|l|l|o| |w|o|r|l|d|!|\" componentsSeparatedByString:@\"|\"] componentsJoinedByString:@\"\"];\n}\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215989,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n@interface Greet : NSObject\n@property NSString *hello;\n- (NSString *) greet;\n@end\n@implementation Greet\n+ (NSString *)hello\n{\n  return @\"hello world!\";\n}\n- (NSString *) greet\n{\n  return [Greet hello];\n}\n@end\nNSString *greet()\n{\n  Greet *g = [[Greet alloc] init];\n  return [g greet];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215990,"user_id":null,"body":"NSString *greet() {\n  static const int size = 12;\n  char array[size + 1] = {8, 5, 12, 12, 15, -64, 23, 15, 18, 12, 4, -63, '\\0'};\n  \n  char a = 'a' - 1;\n  for (int i = 0; i < size; ++i) {\n    array[i] += a;\n  }\n  return [NSString stringWithCString:array encoding:NSASCIIStringEncoding];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215991,"user_id":null,"body":"\/\/ create function greet that return hello world!\nNSString *greet (void) {\n    return @\"hello world!\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215992,"user_id":null,"body":"\/\/ create function greet that return hello world!\n#import <Foundation\/Foundation.h>\n\nNSString *greet(){\n  return @\"hello world!\";\n}\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215993,"user_id":null,"body":"\/\/ create function greet that return hello world!\n\nNSString* greet()\n{\n  NSString* hello_world = @\"hello world!\";\n  return hello_world;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215994,"user_id":null,"body":"\/\/ create function greet that return hello world!\n\nNSString* greet(void);\n\nNSString* greet(void) {\n    return @\"hello world!\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215995,"user_id":null,"body":"\/\/ create function greet that return hello world!\n\nNSString *greet() {\n  return @\"hello world!\";\n}\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215996,"user_id":null,"body":"\/\/ create function greet that return hello world!\n#import <Foundation\/Foundation.h>\n\nint greet() {\n  \n  return @\"hello world!\";\n  \n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5259acb16021e9d8a60010af":[{"id":215997,"user_id":53,"body":"#import <Foundation\/Foundation.h>\n#import <stdarg.h>\n\nlong long gcd(long long a, long long b)\n{\n    return b != 0 ? gcd(b, a % b) : a;   \n}\n\nlong long lcm(int n, ...) \n{\n    long long a = 1;\n    \n    va_list args;\n    va_start(args, n);\n    int b;\n    for (int i = 0; i < n; ++i) {\n        b = va_arg(args, int);\n        a = (a * b) \/ gcd(a, b);\n    }\n    va_end(args);\n  \n    return a;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215998,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nlong long gcd(long long a, long long b) {\n  for (long long t; b != 0; t = b, b = a % b, a = t);\n  return a;\n}\n\nlong long lcm(int n, ...) {\n  va_list args;\n  va_start(args, n);\n  long long r = 1;\n  for (int i = 0; i < n; i++) {\n    int x = va_arg(args, int);\n    r = r \/ gcd(r, x) * x;\n  }\n  va_end(args);\n  return r; \n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":215999,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n#include <stdarg.h>\n\nlong long lcm(int n, ...) {\n  int input[n];\n  va_list args;\n  va_start(args, n);\n  for(int i=0;i<n;i++)\n    input[i]=va_arg(args, int);\n  va_end(args);\n  \n  long long lcm = 1;\n  int divisor = 2;\n  while(true) {\n    int counter = 0;\n    bool divisible = NO;\n    for(int i=0;i<n;i++){\n      if(input[i]==0)\n        return 0;\n      else if(input[i]<0)\n        input[i]=input[i]*(-1);\n      if(input[i]==1)\n        counter++;\n      if (input[i] % divisor == 0) {\n        divisible = YES;\n        input[i] = input[i] \/ divisor;\n      }\n    }\n    if (divisible)\n      lcm = lcm * divisor;\n    else\n      divisor++;\n     if (counter == n)\n       return lcm;\n  }\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216000,"user_id":98,"body":"#import <Foundation\/Foundation.h>\n\n#include <stdarg.h>\n\nlong long get_GCD (long long a, long long b)\n{\n  if (b > a)\n    return get_GCD(b, a);\n\n  while (b != 0) {\n    long long mod = a % b;\n    a = b;\n    b = mod;\n  }\n  return a;\n}\n\nlong long get_LCM (long long a, long long b)\n{\n  return (a * b) \/ get_GCD(a, b);\n}\n\nlong long lcm (int argc, ...) \/\/ all arguments have type unsigned\n{\n  long long total_LCM = 1;\n\n  va_list args;\n  va_start(args, argc);\n\n  for (unsigned i = 0; i < argc; i++)\n    total_LCM = get_LCM(total_LCM, va_arg(args, int));\n\n  va_end(args);\n\n  return total_LCM;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216001,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong int gcd(long int a, long int b)\n{\n    if (b == 0)\n        return a;\n    return gcd(b, a % b);\n};\n\nlong lcm(int n, ...) {\n  if (!n) return 1;\n  \n  NSMutableArray *list = [[NSMutableArray alloc] init];\n  [list autorelease];\n\n  va_list args;\n  va_start(args,n); \n  for (int i = 0; i < n; i++) {\n    [list addObject: [NSNumber numberWithInt:va_arg(args, long int)]];\n  }\n  va_end(args);\n\n long int ans = [list[0] intValue];\n \n    for (int i = 1; i < n; i++){\n        ans = (([list[i] intValue] * ans) \/\n                (gcd([list[i] intValue], ans)));\n      }\n \n    return ans;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216002,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong long simpleLCM(long long a, long long b);\n\nlong long lcm(int n, ...) {\n  long long result = 1;\n  \n  va_list args;\n  va_start(args, n);\n  for (int i = 0; i < n; ++i) {\n    result = simpleLCM(result, va_arg(args, int));\n  }\n  va_end(args);\n  \n  return result;\n}\n\nlong long simpleLCM(long long a, long long b) {\n  long long x = a, y = b, r;\n  \n  while (b) {\n    r = a % b;\n    a = b;\n    b = r;\n  }\n  \n  return (x \/ a) * y;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216003,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong long lcm(int n, ...) {\n  if (n < 1) return 1;\n  long long result = 1, a, b, r;\n  int val;\n  \n  va_list args;\n  va_start(args, n);\n  for (int i = 0; i < n; ++i) {\n    val = va_arg(args, int);\n    a = result; \n    b = val;\n    while (b != 0) {\n      r = a % b;\n      a = b; \n      b = r;\n    }\n    result = result \/ a * val;\n  }\n  va_end(args);\n  \n  return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216004,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\n\nlong long gcd(long long a, long long b) {\n  long long r;\n \n  while (b != 0) {\n    r = a % b;\n    a = b;\n    b = r;\n  }\n  \n  return a;\n}\n\nlong long pairLCM(long long a, long long b) {\n  return (a \/ gcd(a, b)) * b;\n}\n\nlong long lcm(int n, ...) {\n  if (n == 0) return 1;\n  \n  long long result = 1;\n  \n  va_list args;\n  va_start(args, n);\n  for (int i = 0; i < n; ++i) {\n    result = pairLCM(result, va_arg(args, int));\n  }\n  va_end(args);\n  \n  return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216005,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong long lcm(int n, ...) {\n  \/\/ TODO: Compute the LCM of the numbers\n  NSSortDescriptor *sort;\n    sort = [NSSortDescriptor sortDescriptorWithKey:@\"self\" ascending:YES];\n    NSMutableArray *array = [[NSMutableArray alloc]init];\n    NSMutableArray *result = [[NSMutableArray alloc]init];\n    va_list list;\n    va_start(list, n);\n    for(int i=0;i<n;i++)\n    {\n        int n1 = va_arg(list, int);\n        [array addObject:[NSNumber numberWithInt:n1]];\n        NSLog(@\"%d\",n1);\n    }\n    va_end(list);\n    if(n==1)\n        return [array.firstObject longLongValue];\n    else if (n==0)\n        return 1;\n    \n    while (true) {\n        [array sortUsingDescriptors:[NSArray arrayWithObject:sort]];\n        int endN = [array[n-2]intValue];\n        int count = 0;\n        NSMutableArray *newarray ;\n        for(int i=2; count<2;i++){\n            if(i>endN){\n                [result addObjectsFromArray:array];\n                long long value = 1;\n                for(int j=0;j<result.count;j++){\n                    value = value*[result[j]longLongValue];\n                }\n                \/\/NSLog(@\"%@\n value:%lld\",result,value);\n                return value;\n            }\n            count = 0;\n            newarray =[array mutableCopy];\n            for(int j =0;j<n;j++){\n                int obj =[[newarray objectAtIndex:j]intValue];\n                if(obj%i==0){\n                    [newarray replaceObjectAtIndex:j withObject:[NSNumber numberWithInt:obj\/i]];\n                    count++;\n                    if(count==2)\n                      [result addObject:[NSNumber numberWithInt:i]];\n                }\n                \n            }\n            \n        }\n        array = [newarray mutableCopy];\n    }\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216006,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong long lcm2(long long a, long long b);\n\nlong long lcm(int n, ...) {\n  if (n==0) return 1;\n  va_list args;\n  va_start(args, n);\n  long long a = va_arg(args, int);\n  if (n==1) { va_end(args); return a; }\n  while (--n && a) a = lcm2(a, va_arg(args, int));\n  va_end(args);\n  return a;\n}\nlong long lcm2(long long a, long long b) {\n  if (b==0) return 0;\n  long long a0 = a, b0 = b, tmp;\n  while (b) { a%=b; tmp = a; a = b; b = tmp; }\n  return a0\/a*b0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"52774a314c2333f0a7000688":[{"id":216007,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nbool valid_parentheses(NSString *s) {\n  int open = 0;\n  char c;\n  for (int i = 0; i < s.length && open >= 0; ++i) {\n    c = [s characterAtIndex:i];\n    if (c == '(') { ++open; }\n    else if (c == ')') { --open; }\n  }\n  return open == 0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216008,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nbool valid_parentheses(NSString *s) {\n  \n  int open_blocks = 0;\n  for (NSInteger charIdx=0; charIdx<s.length; charIdx++)\n  {\n    if (open_blocks < 0) return false;\n    if ([s characterAtIndex:charIdx] == ')') open_blocks--;\n    if ([s characterAtIndex:charIdx] == '(') open_blocks++;\n  }\n  return (open_blocks == 0);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216009,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nbool valid_parentheses(NSString *s) {\n  \/\/ Runtime: O(N)\n  \/\/ Validate input.\n  NSMutableArray *arr = [[NSMutableArray alloc] init];\n  \n  for (NSUInteger i = 0; i < s.length; i++) {\n    unichar c = [s characterAtIndex:i];\n    \n    if (c != '(' && c != ')') {\n      continue;\n    } else if (arr.count == 0) {\n      [arr addObject:[NSNumber numberWithInt:c]];\n    } else if (c == ')' && [arr lastObject] == [NSNumber numberWithInt:'(']) {\n      [arr removeObjectAtIndex:arr.count - 1];\n    } else {\n      [arr addObject:[NSNumber numberWithInt:c]];\n    }\n  }\n  \n  return (arr.count == 0);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216010,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nbool valid_parentheses(NSString *s) {\nint b = 0;\n\n        for (int i = 0; i < [s length]; i=i+1) {\n                if ([s characterAtIndex:i]== '(') {\n                    b=b+1;\n                }\n                if ([s characterAtIndex:i] == ')') {\n                    b=b-1;\n                }\n                if (b<0){return false;}\n            }\n        return b == 0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216011,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nbool valid_parentheses(NSString *s) {\n  unsigned int len = [s length];\n  char buffer[len+1];\n  strncpy(buffer, [s UTF8String], len);\n  int c=0;\n  for(int i = 0; i <= len; i++) {\n    switch(buffer[i]){\n      case '(':\n        c+=1;\n        break;\n      case ')':\n        c-=1;\n        break;\n    }\n    if(c<0)\n      return false;\n  }\n  return c==0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216012,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nbool valid_parentheses(NSString *s) {\n  int c = 0;\n  for (int i = 0; i < s.length; i++) {\n    switch ([s characterAtIndex: i]) {\n        case '(': c++; break;\n        case ')': if (--c < 0) return false; break;\n    }\n  }\n  return c == 0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216013,"user_id":50,"body":"#import <Foundation\/Foundation.h>\n\nbool valid_parentheses(NSString *s) {\n  unsigned o=0, len=[s length];\n  unichar buffer[len+1];\n  [s getCharacters:buffer range:NSMakeRange(0, len)];\n   for (int i=0;i<len;i++){\n    char c=buffer[i];\n    if (c == ')'){\n      if (o > 0) o--;\n      else return false;\n    }\n    else if (c == '(') o++;\n  }\n  return !o;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216014,"user_id":76,"body":"#import <Foundation\/Foundation.h>\n\nbool valid_parentheses(NSString *s) {\n  int level = 0;\n  for (int i = 0; i < [s length]; i++) {\n    char c = [s characterAtIndex:i];\n    level += c == ')' ? -1 : c == '(' ? 1 : 0;\n    if (level < 0) return false;\n  }\n  return level == 0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216015,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nbool valid_parentheses(NSString *s) {\n\n  NSInteger count = 0;\n  \n  for(int i = 0; i < [s length]; i++) {\n     \n    if (([s characterAtIndex:i] == '(') && (count >= 0)) {\n      count++; \n    } \n    if (([s characterAtIndex:i] == ')') && (count >= 0)) {\n      count--;  \n    }    \n  }\n    return (count == 0);\n  }","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216016,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nbool valid_parentheses(NSString *s) {\n\n  NSInteger count = 0;\n  \n  for(int i = 0; i < [s length]; i++) {\n    \n    NSMutableString *element = [s substringWithRange:NSMakeRange(i, 1)];\n    \n    if ([element isEqualToString: @\"(\"] && (count >= 0)) {\n      count++; \n    } \n    if ([element isEqualToString: @\")\"] && (count >= 0)) {\n      count--;  \n    }    \n  }\n    if (count == 0) {\n       return true;\n    } else {\n       return false;\n    }\n  }","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"52dd72494367608ac1000416":[{"id":216017,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nbool isPrime(long long number) {\n  if (number <= 2) return number == 2;\n  if (number % 2 == 0) return false;\n  long long b = sqrt(number);\n  for (long long d = 3; d <= b; d += 2) {\n    if (number % d == 0) return false;\n  }\n  return true;\n}\n\nNSArray *getPrimes(long long start, long long finish) {\n  NSMutableArray *res = [NSMutableArray arrayWithCapacity: 1000];\n  if (start < 0) start = 0;\n  if (finish < 0) finish = 0;\n  if (start > finish) {\n    long long t = start;\n    start = finish;\n    finish = t;\n  }\n  for (long long n = start; n <= finish; n++) {\n    if (isPrime(n)) {\n      [res addObject: @(n)];\n    }\n  }\n  return res;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216018,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nbool isPrime(long long number) {\n  if (number <= 1) {\n    return false;\n  }\n  for (int i = 2; i <= sqrt(number); i++) {\n    if (number % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}\nNSArray *getPrimes(long long start, long long finish) {\n  long long first, last;\n  NSMutableArray* res=[NSMutableArray new];\n  if(start<finish) {\n    first=start;\n    last=finish;\n  } else {\n    first=finish;\n    last=start;\n  }\n  for(long long i=first;i<=last;i++){\n    if(isPrime(i))\n      [res addObject: @(i)];\n  }\n  return res;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216019,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nbool isPrime(long long number) {\n  \/\/ TODO: Return a boolean specifying whether `n` is a prime number\n  BOOL result = YES;\n  \n  if (number <= 1) {\n    return NO;\n  } \n  \n  if (number == 2 || number == 3) {\n    return YES;\n  }\n  \n  if (number % 2 == 0) {\n    return NO;\n  }\n  \n  if (number % 3 == 0) {\n    return NO;\n  }\n  \n  \/* THIS IS TOO SLOW\n  long long mid = number \/ 2;\n  \n  for (long long i = mid; i > 1; i--) {\n    if (number % i == 0) {\n      return NO;\n    }\n  }\n  *\/\n  \n  long long i = 5;\n  \n  while (pow(i, 2) <= number) {\n    if (number % i == 0 || number % (i + 2) == 0) {\n      return NO;\n    }\n    i += 6;\n  }\n  \n  return result;\n}\n\nNSArray *getPrimes(long long start, long long finish) {\n  \/\/ TODO: Return a sorted NSArray of all primes **as `NSNumber`s**\n  \/\/ from `start` to `finish` (or vice versa, both ends included)\n  \n  long long my_start = MIN(start, finish);\n  long long my_end = MAX(start, finish);\n  \n  NSMutableArray *result = [[NSMutableArray alloc] init];\n  \n  for (long long i = my_start; i <= my_end; i++) {\n    if (isPrime(i)) {\n      [result addObject:[NSNumber numberWithInt:i]];\n    }\n  }\n  \n  return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216020,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n#import <math.h>\n#import <stdio.h>\nint primes[100];\nint max=0;\nbool isPrime(long long number) {\n    if(number<2)\n        return false;\n    for(long long i=2;i<=sqrt(number);i++)\n        if(number%i==0)\n            return false;\n    return true;\n}\nbool isPrime2(long long n){\n    int i=0;\n    if(n<2)\n        return false;\n    while(i<100&&i<max&&primes[i]<n){\n        if(n%primes[i]==0)\n            return false;\n        i++;\n    }\n    return true;\n}\nvoid generate_primes(){\n    for(int i=0,r=2;i<100;i++){\n        while(isPrime2(r)==false)\n            r++;\n        primes[i]=r;\n        max++;\n        r++;\n    }\n}\n\nNSArray *getPrimes(long long start, long long finish) {\n    NSMutableArray *array = [NSMutableArray array];\n    NSArray *res;\n    if(start>finish){\n        long long temp=start;\n        start=finish;\n        finish=temp;\n    }\n    if(start<3&&finish>1)\n        [array addObject: [NSNumber numberWithInt: 2]];\n    if(start%2==0)\n        start+=1;\n    generate_primes();\n    printf(\"%ld    %ld\n\",start,finish);\n    \/*\n    for(long long i=start;i<=finish;i+=2)\n        if(isPrime(i)){\n            [array addObject: [NSNumber numberWithInt: i]];\n        }\n    *\/\n    \n    for(long long i=start;i<=finish;i+=2)\n        if(isPrime2(i)){\n            [array addObject: [NSNumber numberWithInt: i]];\n        }\n    return res=[array copy];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216021,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nbool isPrime(long long n) {\n  if (n == 2 || n == 3) return YES;\n  if (n < 2 || n % 2 == 0 || n % 3 == 0) return NO;\n\n  long long i = 5;\n  long long w = 2;\n  while (i * i <= n) {\n    if (n % i == 0) return NO;\n\n    i += w;\n    w = 6 - w;\n  }\n  \n  return YES;\n}\n\nNSArray *getPrimes(long long start, long long finish) {\n  NSMutableArray *results = [NSMutableArray array];\n  if (finish < start) {\n    long long temp = start;\n    start = finish;\n    finish = temp;\n  }\n  if (start <= 2 && finish >= 2) {\n    [results addObject:@2];\n    start = 3;\n  }\n  if (start % 2 == 0) {\n    ++start;\n  }\n  \n  for (long long i = start; i <= finish; i += 2) {\n    if (isPrime(i)) { [results addObject:[NSNumber numberWithLongLong:i]]; }\n  }\n  \n  return [results copy];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216022,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nbool isPrime(long long number) {\n  if(number < 2){\n    return false;\n  }\n  \n  if(number%2 ==0 && number !=2){\n    return false;\n  }\n  \n  int devider = 2;\n  double lim = sqrt(number);\n  \n  while(devider <= lim){\n    if(number%devider == 0){\n      return false;\n    }\n    devider++;\n  }\n  \n  return true;\n}\n\nNSArray *getPrimes(long long start, long long finish) {\n  int actualStart = 0;\n  int actualEnd = 0;\n  \n  if(finish < start){\n    actualStart = finish;\n    actualEnd = start;\n  }\n  else{\n    actualStart = start;\n    actualEnd = finish;\n  }\n  \n  NSMutableArray* result =[NSMutableArray array];\n  while(actualStart <= actualEnd){\n    if(isPrime(actualStart)) {\n      int prime = actualStart;\n      [result addObject: [NSNumber numberWithInt: prime]];\n      \n    }\n    \n    actualStart++; \n  }\n  return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216023,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nbool isPrime(long long number) {\n  if (number<2) return false;\n  for (long i = 2; i<=(long)sqrt(number); i++)\n    if (number%i==0) return false;\n  return true;\n}\nNSArray *getPrimes(long long start, long long finish) {\n  long long t;\n  if (start>finish) { t = start; start = finish; finish = t; }\n  t = 0; NSMutableArray *a = [NSMutableArray array];\n  for (long long i = start; i<=finish; i++)\n    if (isPrime(i)) a[t++] = @(i);\n  return [a copy];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216024,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nbool isPrime(long long number) {\n    \/\/ TODO: Return a boolean specifying whether `n` is a prime number\n    if (number <= 2) return number == 2;\n    if (number % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(number); i++){\n        if (number % i == 0)\n            return false;\n    }\n    return true;\n}\nNSArray *getPrimes(long long start, long long finish) {\n    \/\/ TODO: Return a sorted NSArray of all primes **as `NSNumber`s**\n    \/\/ from `start` to `finish` (or vice versa, both ends included)\n    NSMutableArray *result = [[NSMutableArray alloc]init];\n    long long n = start>finish?start:finish;\n    long long i = start<finish?start:finish;\n    for (; i <= n; i++)\n        if (isPrime(i))\n            [result addObject: [NSNumber numberWithLongLong: i]];\n    return [NSArray arrayWithArray: result];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216025,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nbool isPrime(long long number) {\n  long long size = 100;\n  long long *ero;\n  long long test = sqrt(number) + 1;\n  ero = malloc (sizeof(long long) * size);\n  if (number == 2) {\n    return true;\n  }\n  for (long long i = 4; i < size; i+=2) {\n        ero[i]=1;\n    }\n  if (number > 2 && number%2 != 0) {\n    int d = 3;\n    for (long long i = 9; i < size; i+=3) {\n        ero[i]=1;\n    }\n    while (d < test && number%d != 0) {\n      d+=2;\n      while (d < size && ero[d] == 1) {\n          d+=2;\n      }\n      if (d > test) {\n        break;\n      }\n      for (long long i = d; i < size; i+=d) {\n        ero[i]=1;\n      }\n    }\n    return d >= test;\n  }\n  return false;\n}\n\nNSArray *getPrimes(long long start, long long finish) {\n  if (start < 0 && finish < 0) {\n    return @[];\n  }\n  NSMutableArray *result = [NSMutableArray array];\n  for (int i = MIN(start, finish); i <= MAX(start,finish); i++) {\n    if (i == 2 || i == 3) {\n      [result addObject:@(i)];\n    } else if (i%2 != 0 && i > 3) {\n      int d = 3;\n      while (d * d <= i && i%d != 0) {\n        d+=2;\n      }\n      if (d*d > i) {\n        [result addObject:@(i)];\n      }\n    }\n  }\n  return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216026,"user_id":17,"body":"#import <Foundation\/Foundation.h>\n\nbool isPrime(long long n) {\n  \/\/ NSLog(@\"User `isPrime` solution accidentally invoked!\n\");\n  if (n < 2) return false;\n  for (long long i = 2; i <= sqrt(n); i++) if (n % i == 0) return false;\n  return true;\n}\nNSArray *getPrimes(long long m, long long n) {\n  \/\/ NSLog(@\"User `getPrimes` solution accidentally invoked!\n\");\n  if (m > n) return getPrimes(n, m);\n  NSArray *result = [NSMutableArray array];\n  for (long long i = m; i <= n; i++) if (isPrime(i)) [result addObject: [NSNumber numberWithLongLong: i]];\n  return [NSArray arrayWithArray: result];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"52de553ebb55d1fca3000371":[{"id":216027,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSNumber *find_missing(NSArray <NSNumber *> *list) {\n  NSInteger count = list.count + 1;\n  NSInteger sum = (list.firstObject.intValue + list.lastObject.intValue) * count \/ 2;\n  NSInteger arraySum = 0;\n  for (NSNumber *num in list) {\n    arraySum += num.intValue;\n  }\n  return @(sum - arraySum);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216028,"user_id":53,"body":"#import <Foundation\/Foundation.h>\n\nNSNumber *find_missing(NSArray *xs) {\n  int n = [xs count];\n  int a = [xs[0] intValue];\n  int b = [xs[n-1] intValue];\n  int e = (a + b) * (n + 1) \/ 2;\n  for (int i = 0; i < n; i++) e -= [xs[i] intValue];\n  return [NSNumber numberWithInt: e];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216029,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nNSNumber *find_missing(NSArray<NSNumber *> *list) {\n  int s = 0;\n  for (NSNumber *x in list) {\n    s += x.intValue;\n  }\n  return @((list.firstObject.intValue + list.lastObject.intValue) * (list.count + 1) \/ 2 - s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216030,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSNumber *find_missing(NSArray *list) {\n  int len = [list count];\n  int a1 = [[list objectAtIndex: 0] integerValue];\n  int d1 = [[list objectAtIndex: 1] integerValue] - a1;\n  int d2 = [[list objectAtIndex: len - 1] integerValue] - [[list objectAtIndex: len - 2] integerValue];\n  int resArr[] = {0, 0};\n  int okCountArr[]={0, 0};\n  int dArr[] = {d1, d2};\n  \n  for(int j=0;j<(d1==d2?1:2);j++){\n    int d=dArr[j];\n    int n=1;\n    for(int i=1;i<len;i++){\n      int an = a1 + n*d;\n      int val = [[list objectAtIndex: i] integerValue];\n      if(an==val){\n        okCountArr[j]+=1;\n        n+=1;\n        continue;\n      }else{\n        resArr[j]=an;\n        an=a1+(n+1)*d;\n        if(an==val)\n          okCountArr[j]+=1;\n        n+=2;\n      }\n    }\n  }\n  \n  if(d1==d2)\n    return [NSNumber numberWithInt: resArr[0]];\n  if(okCountArr[0]+1==len)\n    return [NSNumber numberWithInt: resArr[0]];\n  else\n    return [NSNumber numberWithInt: resArr[1]];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216031,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSNumber *find_missing(NSArray *list) {\n  int sum = ((list.count+1)*([list[0] integerValue]+[list[list.count-1] integerValue]))\/2;\n  for(int i = 0;i<list.count;i++){\n    sum = sum - [list[i] integerValue];\n  }\n  return [NSNumber numberWithInt:sum];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216032,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSNumber *find_missing(NSArray *list) {\n  \/\/ TODO: Find the missing term in the provided arithmetic sequence `list`\n  \/\/ and return the result\n  NSMutableDictionary *d = [NSMutableDictionary dictionary];\n  \n  int delta_value = 0;\n  \n  NSNumber *prev = list[0];\n  for (NSNumber *n in list) {\n    if (n == prev) {\n      continue;\n    }\n    \n    NSNumber *delta = @([n intValue] - [prev intValue]);\n    delta_value = [delta intValue];\n    prev = n;\n    \n    if (d[delta] == nil){\n      d[delta] = @0;\n    } else {\n      break;\n    }\n  }\n  \n  int next_number = [list[0] intValue];\n  for (NSNumber *n in list) {\n    if (next_number != [n intValue]) {\n      break;\n    }\n    \n    next_number = [n intValue] + delta_value;\n  }\n  \n  return @(next_number);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216033,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSNumber *find_missing(NSArray *list) {\n  \/\/ TODO: Find the missing term in the provided arithmetic sequence `list`\n  \/\/ and return the result\n  const NSInteger count = [list count];\n  const NSInteger lastVal = [[list objectAtIndex:count - 1] integerValue];\n  const NSInteger initVal = [[list objectAtIndex:0] integerValue];\n  const NSInteger expectedSum = (lastVal + initVal) * (count+1) \/ 2;\n  NSInteger currSum = 0;\n  for (int i = 0; i < count; i++) {\n    currSum += [[list objectAtIndex:i] integerValue];\n  }\n  return [NSNumber numberWithInteger:(expectedSum - currSum)];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216034,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSNumber *find_missing(NSArray *list) {\n  \n        NSNumber *a;\n        NSInteger b;\n        \n        if ([list[0] integerValue] < [list[list.count-1] integerValue]) {\n        NSInteger c = ([list[list.count-1] integerValue] - [list[0] integerValue])\/list.count;\n        for (int i = 0; i < list.count; i++) {\n            \n            b = [list[i+1] integerValue];\n            if (b != ([list[i] integerValue] + c)) {\n                a = [NSNumber numberWithInteger:(b-c)];\n                break;\n            }\n        }\n        } else {\n          NSInteger c = ([list[0] integerValue] - [list[list.count-1] integerValue])\/list.count;\n          for (int i = 0; i < list.count; i++) {\n\n                b = [list[i+1] integerValue];\n                if (b != ([list[i] integerValue] - c)) {\n                    a = [NSNumber numberWithInteger:([list[i] integerValue]-c)];\n                    break;\n                }\n            }\n        \n        }\n        \n  return a;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216035,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSNumber *find_missing(NSArray *list) {\n    int step = [list[2] intValue] - [list[1] intValue];\n    int curr = [list[0] intValue];\n  \n    for (NSNumber *i in list) {\n        if ([i intValue] != curr) return @(curr);\n        curr += step;\n    }\n    \n    return @0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216036,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSNumber *find_missing(NSArray *list) {\n  \n    CGFloat lastNum = [[list firstObject] floatValue];\n    CGFloat ap = ([[list lastObject] floatValue] - lastNum)\/list.count;\n    CGFloat ret = lastNum;\n    \n    for (NSInteger i = 1; i < list.count; i++)\n    {\n        CGFloat num = [[list objectAtIndex:i] floatValue];\n        \n        if ((num - lastNum) == ap)\n        {\n            lastNum = num;\n        }\n        else\n        {\n            ret = lastNum + ap;\n            break;\n        }\n    }\n    \n    return @(ret);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"52f787eb172a8b4ae1000a34":[{"id":216037,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint zeros(int n) {\n  int x = n\/5;\n  return x? x+zeros(x):0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216038,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nint zeros(int n) {\n  int r = 0;\n  while (n >= 5) {\n    r += n \/= 5;\n  }\n  return r;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216039,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint zeros(int n) {\n  if (n <= 1)\n      return 0;\n\n  int count = 0;\n  for (int i = 5; n \/ i >= 1; i *= 5)\n      count += n \/ i;\n\n  return count;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216040,"user_id":53,"body":"#import <Foundation\/Foundation.h>\n\nint zeros(int n) {\n  long res = 0;\n  for (long i = 5; n \/ i >= 1; i *= 5) res += n \/ i;\n  return res; \n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216041,"user_id":50,"body":"#import <Foundation\/Foundation.h>\n\nint zeros(int n) {\n  int limit=5, zer=0;\n  while (limit <= n){\n    zer += n\/limit;\n    limit *= 5;\n  }\n  return zer;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216042,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint zeros(int n) {\n  \/\/ TODO: Calculate the number of trailing zeroes of n! and return the result\n  int x5 = 5;\n  int count = 0;\n  while (x5<n) {\n    count = count + n \/ x5;\n    x5 = x5 * 5;\n  }\n  return count;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216043,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint zeros(int n) {\n  int count = 0;\n  for(int i = 5; n \/ i >= 1; i *= 5) {\n    count += n \/ i;\n  }\n  return count;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216044,"user_id":76,"body":"#import <Foundation\/Foundation.h>\n\nint zeros(int n) {\n  return n < 5 ? 0 : n \/ 5 + zeros(n \/ 5);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216045,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint zeros(int n) {\n  int zeros = 0;\n  int s = 5;\n  while (n > s) {\n    zeros += n \/ s;\n    s *= 5; \n  }\n  return zeros;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216046,"user_id":839,"body":"#import <Foundation\/Foundation.h>\n\nint zeros(int n) {\n  \/\/ TODO: Calculate the number of trailing zeroes of n! and return the result\n  int num=0;\n  while(n){\n    num+=n\/=5;\n  }\n  return num;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"534a0c100d03ad9772000539":[{"id":216047,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nNSDictionary *prime_factors(long long n) {\n  NSMutableDictionary *r = [NSMutableDictionary dictionaryWithCapacity:20];\n  for (long long p = 2; p * p <= n; p++) {\n    int e = 0;\n    for (; n % p == 0; n \/= p) e++;\n    if (e > 0) {\n      [r setValue: @(e) forKey: @(p).stringValue];\n    }\n  }\n  if (n > 1) {\n    [r setValue: @1 forKey: @(n).stringValue];\n  }\n  return r;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216048,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n#include <math.h>\n\nvoid incrementVal(NSString* key, NSMutableDictionary* dict) {\n  NSInteger* val = [dict objectForKey:key];\n  val = [NSNumber numberWithInt:[val intValue] + 1];\n  [dict setObject: val forKey:key];\n}\n\nNSDictionary *prime_factors(long long n) {\n  long long num = n;\n  \/\/ TODO: Compute all the prime factors of `n`, returning your result\n  \/\/ as a NSDictionary *\n  NSMutableDictionary * res=[NSMutableDictionary  new];\n  \n  while(num%2==0){\n    incrementVal(@\"2\", res);\n    num \/= 2;\n  }\n  \n  int i=3;\n  for(i=3;i<=sqrt(num);i+=2){\n    while(num%i==0){\n      incrementVal([NSString stringWithFormat: @\"%d\", i], res);\n      num\/=i;\n    }\n  }\n  \n  if(num>2) {\n    incrementVal([NSString stringWithFormat: @\"%lld\", num], res);\n  }\n\n  return res;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216049,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSDictionary *prime_factors(long long n) {\n  NSLog(@\"%lld\", n);\n  NSMutableDictionary *dict = [[NSMutableDictionary alloc] init];\n  double end = sqrt(n);\n  for(int i = 2; i <= end; i++) {\n    while(n % i == 0) {\n      NSString *key = [[NSString alloc] initWithFormat:@\"%d\", i];\n      n \/= i;\n      dict[key] = [NSNumber numberWithInt:([[dict valueForKey:key] intValue] + 1)];\n    }\n  }\n  if([dict count] == 0 || n != 1) {\n    NSString *key = [[NSString alloc] initWithFormat:@\"%lld\",n];\n    dict[key] = @1;\n    return dict;\n  }\n  return dict;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216050,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSMutableDictionary *add_factor(NSMutableDictionary *factors, \n                                 long long factor) {\n\n  NSString *factorKey = [NSString stringWithFormat:@\"%lld\", factor];\n  long long occurences = 0;\n  \n  if (factors[factorKey] != nil) {\n    occurences = [factors[factorKey] longLongValue];\n  }\n  \n  occurences++;\n  \n  factors[factorKey] = [NSNumber numberWithLongLong:occurences];\n\n  return factors;\n  \n}\n\nNSDictionary *prime_factors(long long n) {\n\n  \/\/ Found an algorithm to prime factors:\n  \/\/ https:\/\/people.revoledu.com\/kardi\/tutorial\/BasicMath\/Prime\/Algorithm-PrimeFactor.html\n\n  \/\/ Handle edge cases\n  if (n <= 0) return @{};\n  \n  NSMutableDictionary *factors = [NSMutableDictionary new];\n  long long currentFactor = 2;\n  \n  while (n >= (currentFactor * currentFactor)) {\n  \n    if (n % currentFactor == 0) {\n      \n      factors = add_factor(factors, currentFactor);\n      n = n \/ currentFactor;\n    \n    } else {\n    \n      currentFactor++;\n      \n    }\n  \n  }\n  \n  factors = add_factor(factors, n);\n  \n  return factors;\n\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216051,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSDictionary *prime_factors(long long n) {\n  int m; long int i=2;\n  NSMutableDictionary *d = [NSMutableDictionary dictionary];\n  while (n>1 && i*i<=n) {\n    m=0;\n    while (n%i==0) { n\/=i; m++; }\n    if (m>0) d[[@(i) stringValue]] = @(m);\n    i++;\n  }\n  if (n>1) d[[@(n) stringValue]] = @1;\n  return [d copy];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216052,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSDictionary *prime_factors(long long n) {\n  \/\/ TODO: Compute all the prime factors of `n`, returning your result\n  \/\/ as a NSDictionary *\n  NSMutableDictionary *array = [[NSMutableDictionary alloc]init];\n    long n1 = n;\n    \n    if(n<2)\n        return array;\n    while (true) {\n        \n        for(long i=2;;i++){\n            if(i*i>n1){\n                NSString *str = [NSString stringWithFormat:@\"%ld\",n1];\n                if([array objectForKey:str])\n                    [array setObject:[NSNumber numberWithLong:[[array objectForKey:str]longValue]+1] forKey:str];\n                else\n                    [array setObject:[NSNumber numberWithLong:1] forKey:str];\n                return array;\n            }\n            if(n1%i==0){\n                NSString *str = [NSString stringWithFormat:@\"%ld\",i];\n                if([array objectForKey:str])\n                    [array setObject:[NSNumber numberWithLong:[[array objectForKey:str]longValue]+1] forKey:str];\n                else\n                    [array setObject:[NSNumber numberWithLong:1] forKey:str];\n                n1 = n1\/i;\n                break;\n            }\n        }\n    }\n    \n    return @{};\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216053,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSDictionary *prime_factors(long long n) {\n  long long mult = 2;\n    NSString *key = [NSString stringWithFormat:@\"%ld\", mult];\n    NSMutableDictionary *dict = [NSMutableDictionary dictionary];\n    long long buffer = 0;\n    long long *ero;\n    long long size = 100;\n    ero = malloc (sizeof(long long) * size);\n    while(n != 1) {\n        if (n%mult == 0) {\n            if (!key) {\n                key = [NSString stringWithFormat:@\"%ld\", mult];\n            }\n            n = n\/mult;\n            buffer++;\n        } else {\n            if (mult*mult > n) {\n                [dict setObject:@(1) forKey:[NSString stringWithFormat:@\"%ld\", n]];\n                break;\n            }\n            if (mult >= 3) {\n                mult+=2;\n                while (mult < size && ero[mult] == 1) {\n                    mult+=2;\n                }\n                for (long long i = mult*mult; i < size; i+=mult) {\n                    ero[i]=1;\n                }\n            } else {\n                mult++;\n            }\n            if (buffer > 0) {\n                [dict setObject:@(buffer) forKey:key];\n            }\n            key = nil;\n            buffer = 0;\n        }\n    }\n    if (buffer > 0) {\n        [dict setObject:@(buffer) forKey:key];\n    }\n    return dict;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216054,"user_id":17,"body":"#import <Foundation\/Foundation.h>\n\nNSDictionary *prime_factors(long long n) {\n  char s[21];\n  long long m = n, temp;\n  NSDictionary *result = [NSMutableDictionary dictionary];\n  temp = 0;\n  while (m % 2 == 0) {\n    temp++;\n    m \/= 2;\n  }\n  if (temp > 0) [result setObject: [NSNumber numberWithLongLong: temp] forKey: @\"2\"];\n  for (long long i = 3; i <= sqrt(n); i++) {\n    temp = 0;\n    while (m % i == 0) {\n      temp++;\n      m \/= i;\n    }\n    if (temp > 0) {\n      sprintf(s, \"%llu\", i);\n      [result setObject: [NSNumber numberWithLongLong: temp] forKey: [NSString stringWithCString: s]];\n    }\n  }\n  if (m != 1) {\n    sprintf(s, \"%llu\", m);\n    [result setObject: @1 forKey: [NSString stringWithCString: s]];\n  }\n  return [NSDictionary dictionaryWithDictionary: result];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"53da3dbb4a5168369a0000fe":[{"id":216055,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString* even_or_odd (NSInteger n){\n  return abs(n%2) == 1 ? @\"Odd\" : @\"Even\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216056,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString* even_or_odd (NSInteger n){\n\/\/ If the Integer can be divided by 2 then the result of the modulo is zero\n\/\/ and the Integer is even.\n  if(n%2==0){\n  \n    return @\"Even\";\n  \n  }\nelse{\n\nreturn @\"Odd\";\n\n}\n \n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216057,"user_id":1519,"body":"#import <Foundation\/Foundation.h>\nNSString* even_or_odd (NSInteger n){\n  return (n & 1) ? @\"Odd\" : @\"Even\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216058,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString* even_or_odd (NSInteger n){\n  NSNumber *suchStrangeBoolInObjC = (n % 2 == 0);\n  \n  if(suchStrangeBoolInObjC == YES) {\n    NSString *str = @\"Even\";\n    return str;\n  }\n  else if(suchStrangeBoolInObjC == NO) {\n    NSMutableString *mstr = [NSMutableString stringWithString: @\"\"];\n    [mstr appendString: @\"Odd\" ];\n    return mstr;\n  }\n  \n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216059,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString* even_or_odd (NSInteger n){\n  int result = n % 2;\n  return result == 0 ? @\"Even\" : @\"Odd\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216060,"user_id":168,"body":"#import <Foundation\/Foundation.h>\nNSString* even_or_odd (NSInteger n) {\n  return n % 2 ? @\"Odd\" : @\"Even\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216061,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString* even_or_odd (NSInteger n){\n   return (n % 2 == 0) ? @\"Even\" : @\"Odd\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216062,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString* even_or_odd (NSInteger n){\n  int remainder = n % 2;\n  \n  if (remainder) {\n    return @\"Odd\";\n  } else {\n    return @\"Even\";\n  }\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216063,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString* even_or_odd (NSInteger n){\n  if (n%2 == 0) {\n    return @\"Even\";\n  } else {\n    return @\"Odd\";\n  }\n  \n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216064,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\/\/ NSInteger is defined as int on 32-bit apps and as long on 64-bit apps\nNSString* even_or_odd (NSInteger n){\n  \n  NSString* result;\n  \n  if (n % 2 == 0) {\n    result = @\"Even\";\n  } else {\n    result = @\"Odd\";\n  }\n  \n  return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"53fe2171d5679bff300007d9":[{"id":216065,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong long factorial(long long n) {\n  \n    long long number = 1;\n    if (n > 0)\n    {\n        for (long long a = 1; a < n + 1; a ++)\n        {\n            number = number * a;\n        }\n        \n    }else if (n < 0)\n    {\n        for (long long a = n; a < 0; a ++)\n        {\n            number = number * a;\n        }\n    }\n    return number;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216066,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong long factorial(long long n) {\n  if (n == 0) {\n    return 1;\n  } else if (n > 0) {\n    return n * factorial(n-1);\n  } else if (n < 0) {\n    return n * factorial(n+1);\n  }\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216067,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong long factorial(long long n) {\n  return n == 0 ? 1 : (n * factorial(n - (n < 0 ? -1 : +1)));\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216068,"user_id":1609,"body":"#import <Foundation\/Foundation.h>\n\nlong long factorial(long long n) {\nif(n<0)return n%2?-factorial(-n):factorial(-n);\nlong long m=1;\nfor(long long i=2;i<=n;i++)m*=i;\n  return m;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216069,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong long factorial(long long n) {\n  return n==0 ? 1 : ( n * factorial(n- (n>0 ? 1 : -1)));\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216070,"user_id":2310,"body":"#import <Foundation\/Foundation.h>\n\nlong long factorial(long long n) {\n  if(n == 0) {\n    return 1;\n  }\n  long long nextN = n<0?n+1:n-1;\n  return n*factorial(nextN);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216071,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong long factorial(long long n) {\n    long long answer = 1 ;\n    if (n>0) {\n        for (int i = 1; i<=n; i++) {\n            answer*=i;\n        }\n    } else if (n<0) {\n        for (int i = -1; i>=n; i--) {\n            answer*=i;\n        }\n    }\n    return answer;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216072,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong long factorial(long long n) {\n\nif(n>0){\nif(n>0){ return n * factorial(n-1); }\nelse{ return 1;}\n    }\n    else{\nif(n<0){ return n * factorial(n+1);}\nelse{return 1;}\n    }\n  \n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216073,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong long factorial(long long n) {\n  \n  long long times=1;\n  if (n == 0){\n    return 1;\n  }else if (n < 0){\n    \n    for(int i = -1; i>=n; i--){\n    \n    times *=i;\n    \n  }\n    return times;\n  }else{ \n  for(int i = 1; i<=n; i++){\n    \n    times *=i;\n    \n  }\n  \n  return times;}\n}\n\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216074,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong long factorial(long long n) {\n  long long res=1;\n  if(n>=0){\n    for(long long i=n;i>0;i--)\n      res=res*i;\n  } else {\n    for(long long i=n;i<0;i++)\n      res=res*i;\n  }\n  return res;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"542f3d5fd002f86efc00081a":[{"id":216075,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSArray *prime_factors(int n) {\n  NSMutableArray *arr = [[NSMutableArray alloc] init];\n  double end = sqrt(n);\n  for(int i = 2; i<= end; i++) {\n    while (n % i == 0) {\n      n \/= i;\n      [arr addObject:@(i)];\n    }\n  }\n  if(n != 1) {\n    [arr addObject:@(n)];\n  }\n  return arr;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216076,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSArray *prime_factors(int n) {\n  int p, N;\n  NSMutableArray* res = [NSMutableArray new];\n  if(n<=1)\n    return @[];\n  \n  p = 2;\n  N = n;\n  while(N>=p*p){\n    if(N%p==0){\n      if(p>1)\n        [res addObject: [[NSNumber alloc] initWithInt: p]];\n      N = N\/p;\n    } else\n      p = p + 1;\n  }\n  if(N>1)\n    [res addObject: [[NSNumber alloc] initWithInt: N]];\n  return res;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216077,"user_id":53,"body":"#import <Foundation\/Foundation.h>\n\nNSArray *prime_factors(int n) {\n  NSMutableArray *ans = [NSMutableArray new];\n  for (int i = 2; i * i <= n; i++) {\n    while (n % i == 0) {\n      [ans addObject: @(i)];\n      n \/= i;\n    }\n  }\n  if (n > 1) {\n    [ans addObject: @(n)];\n  }\n  NSLog(@\"%@\",ans); \n  return [ans copy];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216078,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nNSArray *prime_factors(int n) {\n  NSMutableArray *res = [NSMutableArray arrayWithCapacity: 20];\n  for (int d = 2; d * d <= n; d++) {\n    for (; n % d == 0; n \/= d) {\n      [res addObject:@(d)];\n    }\n  }\n  if (n > 1) [res addObject:@(n)];\n  return res;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216079,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSArray *prime_factors(int n) {\n\n  NSMutableArray *finalArray = [[NSMutableArray alloc] init];\n  int x = 2;\n  \n    while (x <= sqrt(n)) {\n        while (n % x == 0) {\n            [finalArray addObject: @(x)];\n            n = n\/x;\n        }\n     x++;\n    }\n    if (n != 1) {\n        [finalArray addObject: @(n)];\n    }\n  return finalArray;\n}\n\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216080,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSArray *prime_factors(int n) {\n    NSMutableArray *result = @[].mutableCopy;\n    while (n>1 && (n % 2 == 0)) {\n        [result addObject:@(2)];\n        n = n\/2;\n    }\n\n    for (long i=3; i*i<=n; i+= 2) {\n        while (n > 1 && (n % i == 0)) {\n            [result addObject:@(i)];\n            n = n\/i;\n        }\n    }\n\n    if (n > 1) {\n        [result addObject:@(n)];\n    }\n\n    return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216081,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nBOOL isPrime(NSArray <NSNumber *> *primes, long long p) {\n    for (NSNumber *prime in primes) {\n        if (p % prime.longLongValue == 0) {\n            return NO;\n        }\n    }\n    return YES;\n}\n\nlong long nextPrime(NSArray <NSNumber *> *primes) {\n    long long last = primes.lastObject.longLongValue + 1;\n    while (!isPrime(primes, last)) {\n        last++;\n    }\n    return last;\n}\n\nNSArray *prime_factors(long long n) {\n    NSMutableArray *results = [NSMutableArray new];\n    NSMutableArray *primes = [NSMutableArray arrayWithObjects:@2, nil];\n    long long currentPrime = 2;\n    long long maxPrime = sqrt(n) + 1;\n    while (currentPrime <= maxPrime && n > 1) {\n        if (n % currentPrime == 0) {\n            [results addObject:@(currentPrime)];\n            n \/= currentPrime;\n        }\n        else {\n            currentPrime = nextPrime(primes);\n            [primes addObject:@(currentPrime)];\n        }\n    }\n    if (n > 1) {\n        [results addObject:@(n)];\n    }\n    return results;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216082,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint find_first_devisor(int n) {\n  for (int i = 2; i < n; i++) {\n  \n    if (n % i == 0) {\n      return i;\n    }\n  }\n  \n  return n;\n}\n\nBOOL isPrime(int n) {\n  if (n == 1) {\n    return NO;\n  }\n  \n  if (n == 2) {\n    return YES;\n  }\n  \n  if (n % 2 == 0) {\n    return NO;\n  }\n  \n  for (int i = 3; i <= sqrt(n); i+=2) {\n    if (n % i == 0) {\n      return NO;\n    }\n  }\n  \n  return YES;\n}\n\nNSArray *prime_factors(int n) {\n\n  if (n == 1) {\n    return @[];\n  }\n\n  \/\/ 1. find devisor of n\n  \/\/ 2. for both devisor and result:\n  \/\/  if prime add to array\n  \/\/  else repeat 1 for value\n  NSMutableArray<NSNumber *> *primes = [[NSMutableArray alloc] init];\n  \n  int devisor = find_first_devisor(n);\n  int result = n \/ devisor;\n  \n  if (isPrime(devisor)) {\n    [primes addObject:@(devisor)];\n  }\n  else {\n    [primes addObjectsFromArray: prime_factors(devisor)];\n  }\n  \n  if (isPrime(result)) {\n    [primes addObject:@(result)];\n  }\n  else {\n    [primes addObjectsFromArray: prime_factors(result)];\n  }\n  return primes;\n}\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216083,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n#import \"math.h\"\n\nBOOL isPrime(int n){\n    for(int i = 2; i <= sqrt(n); i++){\n        if (n % i == 0){\n            return NO;\n        }\n    }\n    return YES;\n}\n\nNSArray *prime_factors(int n) {\n    if (n <= 1){\n        return @[];\n    }\n    NSMutableArray *factors = [[NSMutableArray alloc] init];\n    int remainder = n;\n    int currentFactor = 2;\n    while(!isPrime(remainder)){\n        while(remainder % currentFactor != 0){\n            currentFactor += 1;\n        }\n        [factors addObject:@(currentFactor)];\n        remainder = remainder \/ currentFactor;\n    }\n    [factors addObject:@(remainder)];\n    return factors;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216084,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSArray *prime_factors(int n) {\n  NSMutableArray *temp = [NSMutableArray array];\n  while(n % 2 == 0){\n    n = n \/ 2;\n    [temp addObject: @2];\n  }\n  for (int i = 3; i <= sqrt(n); i = i+2)\n  {\n      while (n%i == 0)\n      {\n        [temp addObject: [NSNumber numberWithInt:i]];\n        n = n\/i;\n      }\n  }\n  if(n > 2){\n    [temp addObject: [NSNumber numberWithInt:n]];\n  }\n  return temp;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"54c2fc0552791928c9000517":[{"id":216085,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong long ff(long long a, long long b) {\n    return (a+b)*(b-a+1) \/ 2;\n}\n\nlong long f(long long n, long long m) {\n    return n\/m * ff(0, m-1) + ff(1, n%m);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216086,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong long f(long long n, long long m) {\n    long long sum = 0;\n    long long q = n\/m;\n    long long p = n%m;\n    sum+= (m*(m-1)\/2)*q;\n    sum+= (p+1)*p\/2;\n    return sum;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216087,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong long f(long long n, long long m) {\n  \/\/ Your code here\n  \n  return (n \/ m) * (m * (m -1) \/ 2) + ((n % m) * (n % m + 1) \/ 2);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216088,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nlong long f(long long n, long long m) {\n  long long k = n \/ m;\n  long long t = n - k * m;\n  return (k * m * (m - 1) + t * (t + 1)) \/ 2;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216089,"user_id":50,"body":"#import <Foundation\/Foundation.h>\n\nlong long t(long long n) {\n  return n*(n+1)\/2;\n}\nlong long f(long long n, long long m) {\n  long long d=n\/m;\n  long long r=n%m;\n  return d*t(m-1)+t(r);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216090,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong long f(long long n, long long m) {\n  long long sum=((m*(m-1))\/2)*(n\/m);\n  \/\/ remainders\n  long long rem = n%m;\n  sum+=(rem*(rem+1))\/2;\n  return sum;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216091,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n#include <stdio.h>\nlong long f(long long n, long long m) {\n    long double two=2.0;\n    long long sum=(m)*((m-1)\/two);\n    sum*=n\/m;\n    if (n%m!=0)\n        sum+=(n%m+1)*((n%m)\/two);\n    \n    return sum;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216092,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong long f(long long n, long long m)\n{\n  return (n\/m)*(((m-1)*m)\/2)+(1+n%m)*(n%m)\/2;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216093,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong long f(long long n, long long m) {\n  NSInteger c = n \/ m;\n  NSInteger subSum = (m - 1) * m \/ 2;\n  \n  NSInteger tail = n % m;\n   \n  return subSum * c + (1 + tail) * tail \/ 2;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216094,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong long f(long long n, long long m) {\n  long long quotient = n \/ m;\n  long long remainder = n % m;\n  return ((m - 1) * m * quotient + (1 + remainder) * remainder) \/ 2;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"550f22f4d758534c1100025a":[{"id":216095,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSArray *dir_reduc(NSArray<NSString *> *directions) {\n  NSDictionary<NSString *, NSString *> *oppositeMap = @{\n    @\"NORTH\": @\"SOUTH\",\n    @\"SOUTH\": @\"NORTH\",\n    @\"EAST\": @\"WEST\",\n    @\"WEST\": @\"EAST\",\n  };\n  \n  NSMutableArray<NSString *> *mutableDirections = [directions mutableCopy];\n  NSInteger i = 0;\n  while (i < [mutableDirections count]) {\n    if (i != 0) {\n      NSString *prevDirection = mutableDirections[i - 1];\n      NSString *opposite = oppositeMap[mutableDirections[i]];\n      if ([prevDirection isEqualToString:opposite]) {\n        [mutableDirections removeObjectAtIndex:(i - 1)];\n        [mutableDirections removeObjectAtIndex:(i - 1)];\n        i = i - 2;\n      }\n    }\n    i++;\n  }\n  return [mutableDirections copy];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216096,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSArray *dir_reduc(NSArray *a) {\n  \/\/ TODO: Simplify and return the resulting path initially\n  \/\/ specified by `a`\n  NSLog(@\"%@\",a);\nNSMutableArray *resultArray = [NSMutableArray arrayWithArray:a];\n    NSMutableString *resultStr = [NSMutableString string];\n    [resultStr appendString:[resultArray componentsJoinedByString:@\",\"]];\n    [resultStr appendString:@\",\"];\n    \n    while (true) {\n        int length = resultStr.length;\n        [resultStr replaceOccurrencesOfString:@\"NORTH,SOUTH,\" withString:@\"\" options:NSCaseInsensitiveSearch range:NSMakeRange(0, resultStr.length)];\n        [resultStr replaceOccurrencesOfString:@\"SOUTH,NORTH,\" withString:@\"\" options:NSCaseInsensitiveSearch range:NSMakeRange(0, resultStr.length)];\n        [resultStr replaceOccurrencesOfString:@\"WEST,EAST,\" withString:@\"\" options:NSCaseInsensitiveSearch range:NSMakeRange(0, resultStr.length)];\n        [resultStr replaceOccurrencesOfString:@\"EAST,WEST,\" withString:@\"\" options:NSCaseInsensitiveSearch range:NSMakeRange(0, resultStr.length)];\n        if(length==resultStr.length){\n            if(length>0)\n                [resultStr replaceOccurrencesOfString:@\",\" withString:@\"\" options:NSBackwardsSearch range:NSMakeRange(resultStr.length-1,1)];\n           if(resultStr.length==0)\n                break;\n           return [resultStr componentsSeparatedByString:@\",\"];\n        }\n    }\n    \n    return @[];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216097,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\n\nBOOL isOpposite(NSString *s1, NSString *s2) {\n  return [s1 hasPrefix: @\"N\"] && [s2 hasPrefix: @\"S\"] ||\n         [s1 hasPrefix: @\"S\"] && [s2 hasPrefix: @\"N\"] ||\n         [s1 hasPrefix: @\"E\"] && [s2 hasPrefix: @\"W\"] ||\n         [s1 hasPrefix: @\"W\"] && [s2 hasPrefix: @\"E\"];\n}\n\nNSArray *dir_reduc(NSArray *a) {\n  NSMutableArray *res = [NSMutableArray arrayWithCapacity:a.count];\n  for (NSString *s in a) {\n    if (res.count && isOpposite(res.lastObject, s)) {\n      [res removeLastObject];\n    } else {\n      [res addObject: s];\n    }\n  }\n  return res;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216098,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\n#define N @\"NORTH\"\n#define S @\"SOUTH\"\n#define E @\"EAST\"\n#define W @\"WEST\"\n\n@interface Stack:NSObject {\n    NSMutableArray* arr;\n    int head;\n}\n- (void)push:(id)object;\n- (id)pop;\n- (id)peek;\n- (id)get:(int)i;\n- (int)count;\n@end\n\n@implementation Stack\n\n-(id)init {\n  self = [super init];\n  arr = [NSMutableArray new];\n  head = -1;\n  return self;\n}\n\n- (void)push:(id)object{\n  head+=1;\n  if(head>=[arr count])\n    [arr addObject: object];\n  else\n    [arr insertObject: object atIndex: head];\n  \n}\n- (id)pop{\n  id res = [self peek];\n  if(res!=nil)\n    head-=1;\n  return res;\n}\n- (id)peek{\n  if(head<0)\n    return nil;\n  else\n    return [arr objectAtIndex:head];\n}\n- (id)get:(int)i{\n    if(i<0||i>head)\n        return nil;\n    return [arr objectAtIndex:i];\n}\n- (int)count{\n    return head + 1;\n}\n@end\n\nvoid pushOrPop(NSString* elem, NSString* popIfElem, Stack* stack){\n  if([popIfElem isEqualToString: [stack peek]])\n    [stack pop];\n  else\n    [stack push: elem];\n  \n}\n\nNSArray *dir_reduc(NSArray *a) {\n  Stack* dirs=[Stack new];\n  for(NSString* direction in a){\n    if([N isEqualToString: direction]){\n      pushOrPop(N, S, dirs);\n    }else if([S isEqualToString: direction]){\n      pushOrPop(S, N, dirs);\n    }else if([E isEqualToString: direction]){\n      pushOrPop(E, W, dirs);\n    }else if([W isEqualToString: direction]){\n      pushOrPop(W, E, dirs);\n    }\n  }\n  NSMutableArray *res = [NSMutableArray new];\n  for(int i=0;i<[dirs count];i++){\n    [res addObject: [dirs get: i]];\n  }\n  return res;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216099,"user_id":53,"body":"#import <Foundation\/Foundation.h>\n\nNSArray *dir_reduc(NSArray *ls) \n{\n    NSMutableArray *ans = [NSMutableArray arrayWithCapacity:1];\n    NSEnumerator *enumerator = [ls objectEnumerator];\n    id x;\n    while (x = [enumerator nextObject]) \n    {\n        if ([ans count] == 0) \n        {\n            [ans addObject: x];\n        }\n        else \n        {\n            id y = [ans lastObject];\n            if ((  [x isEqualToString:@\"NORTH\"] && [y isEqualToString:@\"SOUTH\"]) \n               || ([x isEqualToString:@\"SOUTH\"] && [y isEqualToString:@\"NORTH\"])\n               || ([x isEqualToString:@\"EAST\"]  && [y isEqualToString:@\"WEST\"])\n               || ([x isEqualToString:@\"WEST\"]  && [y isEqualToString:@\"EAST\"]))\n            {\n                [ans removeLastObject];\n            } \n            else\n            {\n                [ans addObject: x];\n            }\n        }\n    }\n  \n    NSArray *ret = [ans copy];\n    return ret;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216100,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nbool isOpositDirections(NSString *a, NSString *b) {\n  if(a == nil || b == nil) { return false; }\n  return [a isEqualToString: @\"NORTH\"] && [b isEqualToString: @\"SOUTH\"] ||\n         [b isEqualToString: @\"NORTH\"] && [a isEqualToString: @\"SOUTH\"] ||\n         [a isEqualToString: @\"WEST\"] && [b isEqualToString: @\"EAST\"]   || \n         [b isEqualToString: @\"WEST\"] && [a isEqualToString: @\"EAST\"];\n}\n\nNSArray *dir_reduc(NSArray *a) {\n  NSMutableArray *stackedPath = [[NSMutableArray alloc] init];\n  for(NSString *direction in a) {\n    if(isOpositDirections([stackedPath lastObject], direction)) {\n      [stackedPath removeLastObject];\n    } else {\n      [stackedPath addObject: direction];\n    }\n  }\n  return stackedPath;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216101,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *matchingDirection(NSString *s) {\n  static NSString *N = @\"NORTH\";\n  static NSString *S = @\"SOUTH\";\n  static NSString *E = @\"EAST\";\n  static NSString *W = @\"WEST\";\n\n\n  if ([s isEqual:N]) return S;\n  if ([s isEqual:S]) return N;\n  if ([s isEqual:E]) return W;\n  if ([s isEqual:W]) return E;\n  return @\"\";\n}\n\nNSArray *dir_reduc(NSArray *a) {\n  if ([a count] <= 1) return a;\n  NSMutableArray *result = [a mutableCopy];\n  NSString *toMatch;\n  \n  \/\/ Track the indexes to remove so we dont have to do multiple remove calls. \n  \/\/ (performs tests in ~500ms instead of ~1200ms)\n  int i = 0;\n  NSMutableIndexSet *indexes = [NSMutableIndexSet indexSet];\n  for (int j = 1; j < [result count]; ++j) {\n    toMatch = matchingDirection(result[i]);\n    if ([result[j] isEqual:toMatch]) {\n      [indexes addIndex:i];\n      [indexes addIndex:j];\n      \n      \/\/ While we have the prev i index marked for removal, check the next previous\n      while ([indexes containsIndex:--i]) {}\n      if (i < 0) i = ++j;\n    } else {\n      i = j;\n    }\n  }\n  \n  \/\/ Performs all remove calls at once\n  [result removeObjectsAtIndexes:indexes];\n  \n  return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216102,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *matchingDirection(NSString *s) {\n  static NSString *N = @\"NORTH\";\n  static NSString *S = @\"SOUTH\";\n  static NSString *E = @\"EAST\";\n  static NSString *W = @\"WEST\";\n\n\n  if ([s isEqual:N]) return S;\n  if ([s isEqual:S]) return N;\n  if ([s isEqual:E]) return W;\n  if ([s isEqual:W]) return E;\n  return @\"\";\n}\n\nNSArray *dir_reduc(NSArray *a) {\n  if ([a count] <= 1) return a;\n  NSMutableArray *result = [a mutableCopy];\n  NSString *toMatch;\n  \/*\n  \/\/ Track the indexes to remove so we dont have to do multiple remove calls.\n  int i = 0;\n  NSMutableIndexSet *indexes = [NSMutableIndexSet indexSet];\n  for (int j = 1; j < [result count]; ++j) {\n    toMatch = matchingDirection(result[i]);\n    if ([result[j] isEqual:toMatch]) {\n      [indexes addIndex:i];\n      [indexes addIndex:j];\n      \n      \/\/ While we have the prev i index marked for removal, check the next previous\n      while ([indexes containsIndex:--i]) {}\n      if (i < 0) i = ++j;\n    } else {\n      i = j;\n    }\n  }\n  \n  \/\/ Performs all remove calls at once\n  [result removeObjectsAtIndexes:indexes];\n  *\/\n  int i = 0;\n  while (i + 1 < [result count]) {\n    toMatch = matchingDirection(result[i]);\n    if ([result[i + 1] isEqual:toMatch]) {\n      [result removeObjectsAtIndexes:[NSIndexSet indexSetWithIndexesInRange:NSMakeRange(i, 2)]];\n      if (i > 0) --i;\n    } else {\n      ++i;\n    }\n  }\n  \n  return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216103,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nstatic const NSString *north = @\"NORTH\";\nstatic const NSString *south = @\"SOUTH\";\nstatic const NSString *east = @\"EAST\";\nstatic const NSString *west = @\"WEST\";\n\ntypedef NS_ENUM(NSInteger, Direction) {\n    DirectionNorth = 1,\n    DirectionSouth = -1,\n    DirectionEast = 2,\n    DirectionWest = -2\n};\n\nDirection dir_reducection(NSString *dir) {\n  if ([dir isEqual:north])\n    return DirectionNorth;\n    \n  if ([dir isEqual:south])\n    return DirectionSouth;\n    \n  if ([dir isEqual:east])\n    return DirectionEast;\n    \n  return DirectionWest;\n}\n  \nNSArray *dir_reduc(NSArray *a) {\n  if (a.count == 0) return a;\n  \n  NSMutableArray *directions = [a mutableCopy];\n  \n  Direction prev = dir_reducection(directions[0]), cur;\n  for (int i = 1; i < [directions count]; ++i) {\n    cur = dir_reducection(directions[i]);\n    \n    if (prev + cur == 0) {\n      [directions removeObjectsAtIndexes:[NSIndexSet indexSetWithIndexesInRange:NSMakeRange(i - 1, 2)]];\n      \n      i = i > 2 ? i - 2 : 0;\n      if ([directions count] == 0) continue;\n      \n      cur = dir_reducection(directions[i]);\n    }\n    \n    prev = cur;\n  }\n  \n  return [directions copy];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216104,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSArray *dir_reduc(NSArray *a) {\n    if ((a == nil) || (a.count < 2)) {\n        return a;\n    }\n\n    NSMutableArray *newPath = [NSMutableArray arrayWithArray:a];\n    int i = 0;\n\n    do {\n        \/\/ next pair range (to analyze\/compare)\n        NSRange range = NSMakeRange(i, 2);\n\n        if ((([newPath indexOfObject:@\"NORTH\" inRange:range] != NSNotFound) && ([newPath indexOfObject:@\"SOUTH\" inRange:range] != NSNotFound))\n            || (([newPath indexOfObject:@\"EAST\" inRange:range] != NSNotFound) && ([newPath indexOfObject:@\"WEST\" inRange:range] != NSNotFound))) {\n\n            \/\/ remove redundant path steps\n            [newPath removeObjectsInRange:NSMakeRange(i, 2)];\n\n            if (i > 0) {\n                i--;    \/\/ process previous element in path with the new next one\n            }\n        } else {\n            i++;  \/\/ advance on path\n        }\n    } while  ((newPath.count > 1) && (i < newPath.count - 1));\n\n    return newPath;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5545f109004975ea66000086":[{"id":216105,"user_id":null,"body":"int is_divisible(int n, int x, int y) {\n  \/\/ your code here\n  if(x!=0 & y!=0)\n  if(n%x == 0 & n%y ==0)\n  return 1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216106,"user_id":null,"body":"int is_divisible(int n, int x, int y) {\n    return (n%x==0 && n%y==0)? 1: 0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216107,"user_id":null,"body":"int is_divisible(int n, int x, int y) {\n  if (n % x == 0 && n % y == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216108,"user_id":null,"body":"int is_divisible(int n, int x, int y) {\nreturn n%y==0&&n%x==0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216109,"user_id":null,"body":"int is_divisible(int n, int x, int y) {\n  \/\/ your code here\n    if (((n % x) ==0) && ((n % y) == 0) ) {\n        return YES;\n    } else {\n        return NO;\n    }\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216110,"user_id":null,"body":"int is_divisible(int n, int x, int y) {\n    return !(n % x) && !(n % y);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216111,"user_id":null,"body":"int is_divisible(int n, int x, int y) {\n  return !(n%x + n%y);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216112,"user_id":null,"body":"int is_divisible(int n, int x, int y) {\n  \/\/ your code here\n  return ((n % x ==0) && (n % y == 0)) ? true : false;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216113,"user_id":null,"body":"int is_divisible(int n, int x, int y) {\n  return (!(n%x) && !(n%y)) ? 1 : 0 ;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216114,"user_id":null,"body":"int is_divisible(int n, int x, int y) {\n  \/\/ your code here\n  \n  \n  if(  (n % x) || (n % y)  ){\n    \n    \n    return 0;\n    \n  }\n  else {\n    return 1; \n  }\n  \n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"555624b601231dc7a400017a":[{"id":216115,"user_id":645,"body":"#import <Foundation\/Foundation.h>\n\nint josephus_survivor(int n, int k) {\n  return n == 1 ? 1 : (josephus_survivor(n - 1, k) + k - 1) % n + 1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:32:35"},{"id":216116,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nint josephus_survivor(int n, int k) {\n  int r = 1;\n  for (int i = 2; i <= n; i++) {\n    r = (r + k - 1) % i + 1;\n  }\n  return r;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:32:35"},{"id":216117,"user_id":50,"body":"#import <Foundation\/Foundation.h>\n\nint josephus_survivor(int n, int k) {\n  int a=0;\n  for (int i=2;i<=n;i++)\n    {\n    a=(a+k)%i;\n  }\n return ++a;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:32:35"},{"id":216118,"user_id":76,"body":"#import <Foundation\/Foundation.h>\n\nint josephus_survivor(int n, int k) {\n  return n ? (josephus_survivor(n - 1, k) + (k - 1)) % n + 1 : 1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:32:35"},{"id":216119,"user_id":527,"body":"int josephus_survivor(int n, int k) {\n  int i = 1;\n  for (int j = 1; j <= n; j++)\n    i = (i + k) % j;\n  return i + 1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:32:35"}],"559a28007caad2ac4e000083":[{"id":216120,"user_id":492,"body":"#import <Foundation\/Foundation.h>\n\nunsigned long long perimeter(int n) {\n  unsigned long long a = 1, b = 1, tmp = 1;\n  for (int i = 0; i < n + 2; ++i) {\n    tmp = a + b; a = b; b = tmp;\n  }\n  return 4 * (a - 1);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216121,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nunsigned long long perimeter(int n) {\n  unsigned long long a = 1, b = 2;\n  for (int i = 0; i < n; i++) {\n    unsigned long long t = a + b;\n    a = b;\n    b = t;\n  }\n  return 4 * (b - 1);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216122,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nunsigned long long perimeter(int n) {\n  unsigned long long a = 0;\n  unsigned long long b = 1;\n  unsigned long long c = 1;\n  unsigned long long sum = 0;\n  for(int i=0;i<=n;i++){\n    a=b;\n    b=c;\n    c=a+b;\n    sum+=a;\n  }\n  return sum * 4;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216123,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nunsigned long long perimeter(int n) {\n    long int prev = 0;\n    long int current = 1;\n    long int sum = 1;\n  for (int i = 2; i<=n+1; i++){\n    long int temp = current+prev;\n    prev = current;\n    current = temp;\n    sum+=current;\n  }\n  return 4*sum;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216124,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nunsigned long long perimeter(int n) {\n  \/\/ Variables\n  long perimetro = 0;\n  long termino1 = 0;\n  long termino2 = 1;\n  long siguienteTermino = 0;\n  NSNumber* numero;\n  NSMutableArray *mutableArray = [NSMutableArray arrayWithCapacity:n+1];\n  \n  \/\/ Determina la secuencia del largo de los cuadrados\n  for ( long i = 1; i <= n+1; i++ ) {\n     if (i == 2) {\n      numero = @(1);\n      [mutableArray addObject: labs(numero)];\n      continue;\n     }\n     \n     \/\/ Calcula el siguiente termino en la secuencia del largo de los cuadrados\n     siguienteTermino = termino1 + termino2;\n     termino1 = termino2;\n     termino2 = siguienteTermino;\n     numero = @(siguienteTermino);\n     [mutableArray addObject:numero];\n   }\n  \n \n  \/\/ Realiza la suma del largo de los cuadrados\n  for (long i = 0; i < [mutableArray count]; i++) {\n    perimetro += [[mutableArray objectAtIndex:i] longValue] ;\n    NSLog (@\"Element %i = %@\", i, [mutableArray objectAtIndex: i]);\n  }\n   \n  return perimetro * 4;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216125,"user_id":53,"body":"#import <Foundation\/Foundation.h>\n\nunsigned long long perimeter(int n) {\n  unsigned long long a = 1;\n  unsigned long long b = 1;\n  int i = 0;\n  while (i < n + 2) {\n    i += 1;\n    unsigned long long m = a + b;\n    a = b;\n    b = m;\n  }\n  return 4 * (a - 1);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216126,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nunsigned long long perimeter(int n) {\n  \/\/ TODO: complete the Kata task as outlined in the Description\n long f1 = 0, f2 = 1, fib = 0, perimeter = 1;\n    \n  for (long i = 1; i <= n; i++)\n  {\n      fib = f1 + f2;\n      f1 = f2;\n      f2 = fib;\n      perimeter = perimeter + fib;\n  } \n  \n  return perimeter * 4;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216127,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nunsigned long long perimeter(int n) {\n  \/\/ TODO: complete the Kata task as outlined in the Description\n   if (n == 0){\n    return 0;\n  }\n  \n  long t1 = 0, t2 = 1, next = 0;\n  long acum = 1;\n  for (long i = 1; i < n+1; i++) {\n        next = t1 + t2;\n        t1 = t2;\n        t2 = next;\n        acum += next;\n    }\n  return 4 * acum;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216128,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nunsigned long long perimeter(int num) {\n  if (num == 0){\n    return 0;\n  }\n  \n  long t1 = 0, t2 = 1, next = 0;\n  long acum = 1;\n  for (long i = 1; i < num+1; i++) {\n        next = t1 + t2;\n        t1 = t2;\n        t2 = next;\n        acum += next;\n    }\n  return 4 * acum;\n}\n\n\n\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216129,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nunsigned long long perimeter(int num) {\n  \/\/ TODO: complete the Kata task as outlined in the Description\n  \n  long total = 1;\n  long num1 = 0;\n  long num2 = 1;\n  long suma = 0;\n  \n  for(long i = 1; i < num+1; i++){\n\n    suma = num1+num2;\n    num1 = num2;\n    num2 = suma;\n    total += suma;\n  \n  }\n  \n  return 4*total;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55b22ef242ad87345c0000b2":[{"id":216130,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nlong long choose(long long n, long long r) {\n  if (r > n) return 0;\n  r = 2 * r > n ? n - r : r;\n  long long c = 1;\n  for (long long i = 0; i < r; i++) {\n    c = c * (n - i) \/ (i + 1);\n  }\n  return c;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216131,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong long choose(long long n, long long r) {\n  \/\/ TODO: Compute nCr and return the result\n   if (r == 0)\n   {\n      return 1;\n   }\n  else\n  {\n      return (n * choose(n - 1, r - 1)) \/ r;\n   }\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216132,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong long _choose(long long n, long long r){\n  long long nominator = 1;\n  long long denominator = 1;\n  for(long long i = 1; i <= r; i++) {\n    nominator *= (n - r + i);\n    if (nominator % i == 0) {\n      nominator \/= i;\n    } else {denominator *= i;}\n  }\n  return nominator\/denominator;\n}\nlong long choose(long long n, long long r) {\n  \/\/ TODO: Compute nCr and return the result\n  if (n < r) return 0;\n  const long long rm = n - r;\n  if (n - r > r) return _choose(n, r);\n  else return _choose(n, n - r);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216133,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nunsigned long long choose(long long n, long long r) {\n    if (n < r) return 0;\n    if (n == r) return 1;\n    unsigned long long max = MAX(r, n-r);\n    unsigned long long min = MIN(r, n-r);\n    unsigned long long result = 1;\n    for (unsigned long long i = n, t = 1; i > max; i--, t++) {\n        result *= i;\n        if (t <= min) {\n            result \/= t;\n        }\n    }\n    return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216134,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\/\/#import <cmath>\n\nlong long choose(long long n, long long r) {\n  double c = 1;\n\tif(r > n){\n\t\treturn 0;\n\t} else if(r > n\/2){\n\t\tr = n - r;\n\t};\n\tfor(int i = 1; i <= r; i++){\n\t\tc = c * (n - i + 1) \/ (r - i + 1); \n\t}\n\t\/*for(int i = 1; i <= r; i++){\n\t\tc = c * (n - i + 1); \n\t}\n\tfor(int i = 1; i <= r; i++){\n\t\tc = c \/ (r - i + 1); \n\t}*\/\n  c = round(c);\n\treturn c;\n  return 0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216135,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n#include <stdio.h>\n\nlong double factorial(long double num) {\n  if (num > 1) {\n  \treturn num *= factorial(num - 1);\n  }\n  return 1;\n}\n\nlong long choose(unsigned long long n, unsigned long long r) {\n  \/\/ TODO: Compute nCr and return the result\n  long double result = 0;\n  if (r > n) return 0;\n  result = factorial(n) \/ (factorial(r)*factorial(n-r));\n return lround(result);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216136,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong long choose(long long n, long long r) {\n    unsigned long long arr[10000];\n    unsigned long long arr2[10000];\n    unsigned long long count = 0;\n    unsigned long long count2 = 0;\n    \n    if (n < r) return 0;\n    if (r >= n-r) {\n        for (unsigned long long int i = r + 1; i <= n; i++) {\n            arr[count++] = i;\n        }\n        for (unsigned long long int j = 2; j <= n-r; j++) {\n            arr2[count2++] = j;\n        }\n        \n    } else {\n        for (unsigned long long int i = n-r+1; i <= n; i++) {\n            arr[count++] = i;\n        }\n        for (unsigned long long int j = 2; j <= r; j++) {\n            arr2[count2++] = j;\n        }\n    }\n    \n    \n    for (unsigned long long int j = 0; j < count2; j++) {\n        for (unsigned long long int i = 0; i < count; i++) {\n            if (arr2[j] != 0)\n            if (arr[i] % arr2[j] == 0) {\n                arr[i] \/= arr2[j];\n                arr2[j] = 0;\n            }\n        }\n    }\n    \n    unsigned long long int result = 1;\n    for (unsigned long long int i = 0; i < count; i++) {\n        result *= arr[i];\n    }\n    for (unsigned long long int j = 0; j < count2; j++) {\n        if (arr2[j] != 0)\n        result \/= arr2[j];\n    }\n    \n    return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216137,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong long choose(long long n, long long r) {\n  \/\/ TODO: Compute nCr and return the result\n  long long answer=1;\n    long long j =2;\n    if(n-r>0){\n        if(n-r<r){\n            for(long long i =r+1;i<=n;i++){\n                answer = i *answer;\n                if(answer % j==0 && j<=n-r){\n                    answer = answer \/ j;\n                    j++;\n                }\n            }\n            \n        }\n        else{\n            for(long long i =n-r+1;i<=n;i++){\n                answer = i *answer;\n            \n                if(answer % j==0 && j<=r){\n                    answer = answer \/ j;\n                    j++;\n                }\n            }\n        }\n        return answer;\n    }\n    else if(n-r==0)\n        return 1;\n    else\n        return 0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216138,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong long choose(long long n, long long r) {\n    if (r == 0) return 1;\n    return (n * choose(n - 1, r - 1)) \/ r;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216139,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint nod(long long a, long long b) {\n  long long tmp;\n  while (b) { \n    a%=b; tmp = a; a = b; b = tmp; \n  } \n  return a;  \n}\nlong long choose(long long n, long long r) {\n  if (n<r) return 0;\n  if (n==r) return 1;\n  long long a = 1, b=1;\n  int d, m = n-r>r? n-r: r;\n  for (int i = 1; i<=n-m; i++) {\n    a*=m+i; b*=i;\n    d = nod(a, b);\n    a\/=d; b\/=d;\n  }\n  return a\/b;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55b7bb74a0256d4467000070":[{"id":216140,"user_id":53,"body":"#import <Foundation\/Foundation.h>\nlong proper_fractions(long n)\n{\n    if (n < 2) return 0;\n    long m = n;\n    for (long p = 2; p * p <= n; p++) {\n      if (n % p == 0) {\n        while (n % p == 0) n \/= p;\n        m -= (m \/ p);\n      }\n    }\n    if (n > 1) m -= (m \/ n);\n    return m;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216141,"user_id":50,"body":"#import <Foundation\/Foundation.h>\nlong proper_fractions(long n)\n{\n  if (n==1) return 0;\n  long a=n;\n  for (long p=2;p*p<=n;p++) {\n    if (!(n%p)) {\n      a-=a\/p;\n      while (!(n%p)) {n\/=p;}\n    }\n  }\n  return n>1?a-a\/n:a;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216142,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nlong proper_fractions(long n)\n{ \n  if (n < 2) return 0;\n  long fract = n;\n  \n  int w;\n  for (long i = 2; i*i <= n; i += w) {\n    if (n % i == 0) {\n      fract -= fract \/ i;\n      do {\n        n \/= i;\n      } while (n % i == 0);\n    }\n    \n    if (i > 5) {\n      w = 6 - w;\n    } \n    else if (i == 3 || i == 5) {\n      w = 2;\n    } \n    else {\n      w = 1;\n    }\n  }\n  return n==1? fract: fract-fract \/ n;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216143,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nlong proper_fractions(long n)\n{\n  if( n == 1){\n    return 0;\n  }\n  \n  long count = n;\n  \n  if(n % 2 == 0){\n    count -= count \/ 2;\n    do{\n      n\/= 2;\n    }while(n % 2 == 0);\n  }\n  \n  for(long i =3; i * i <= n; i += 2){\n    if(n % i == 0){\n      count -= count \/ i;\n      do{\n        n \/= i;\n      }while(n % i ==0);\n    }\n  }\n  \n  if(n > 1){\n    n = (count - count \/ n);\n  }else{\n    n = count;\n  }\n  \n    return n;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216144,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nlong proper_fractions(long n)\n{    \n    if(n == 0 || n == 1) return 0;\n    if(n == 2) return 1;\n  \n    long count = n;\n  \n    for(long i = 2; i * i <= n; ++i)\n    {\n      if(n % i == 0)\n      {\n        while(n % i == 0 )\n        {\n          n \/= i;\n        }\n        count -= count \/ i;\n      }\n    }    \n    \n    if( n > 1){\n      count -= count \/ n;\n    }\n  \n    return count;     \n   \n}\n\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216145,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n#include \"math.h\"\n\nNSArray<NSNumber*>* getFactors(NSInteger parent) {\n   NSMutableArray* factors = [NSMutableArray new];\n   for (int i = 2; i <= parent\/2; i++) {\n      if (parent % i == 0) {\n         [factors addObject: @(i)];\n      }\n   }\n   \n   return factors;\n}\n\nlong getCommonFactorMultiples(NSArray<NSNumber*>* factors, NSInteger parent) {\n   long count = 0;\n   int* factorMultiples = malloc((parent - 1) * sizeof(int));\n   memset(factorMultiples, 0, (parent - 1) * sizeof(int));\n\/\/    NSMutableArray* factorMultiples = [[NSMutableArray alloc] initWithCapacity: parent - 1];\n\/\/    for (int i = 1; i < parent-1; i++) {\n\/\/       [factorMultiples addObject: [NSNull null]];\n\/\/    }\n   for (int i = 1; i <= parent; i++) {\n      for (NSNumber* factor in factors) {\n         long multiple = [factor intValue] * i;\n         if (multiple >= parent - 1) {\n            break;\n         }\n         if (factorMultiples[multiple] == 0) {\n            factorMultiples[multiple] = 1;\n            count++;\n         }\n      }\n   }\n   \n   return count;\n}\n\nlong proper_fractions(long n)\n{\n\/\/    NSLog(@\"%d\n\", n);\n\/\/     NSArray<NSNumber*>* factors = getFactors(n);\n\/\/     long proper_fractions = n - getCommonFactorMultiples(factors, n);\n    \n\/\/     return proper_fractions - 1;\n\n  if (n==1) return 0;\n        long res=n,a=n;\n        for (long i=2;i<=sqrt(a);i++)\n        {\n            if (a%i==0)\n            {\n                res=res\/i*(i-1);\n                while (a%i==0)\n                    a\/=i;\n            }\n        }\n        if (a>1) res=res\/a*(a-1);\n        return res;\n}\n\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216146,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nlong proper_fractions(long n){\n  if(n==1)return 0;\n  long tot=n;\n  long cont=3;\n  if(n%2==0) {\n    tot-=tot\/2;\n    while(n%2==0)n\/=2;\n  }\n  while(n>1){\n    if(n%cont==0){\n      tot-=tot\/cont;\n      while(n%cont==0)n\/=cont;\n    }\n    cont+=2;\n  }\n  return tot;  \n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216147,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nlong proper_fractions(long n)\n{\n  if (n < 2) { return 0; }\n  long frac = n;\n  \n  int w;\n  for (int i = 2; i * i <= n; i += w) {\n    if (n % i == 0) {\n      frac -= frac \/ i;\n      do {\n        n \/= i;\n      } while (n % i == 0);\n    }\n    \n    if (i > 5) {\n      w = 6 - w;\n    } else if (i == 3 || i == 5) {\n      w = 2;\n    } else {\n      w = 1;\n    }\n  }\n  \n  return n == 1 ? frac : frac - (frac \/ n);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216148,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nlong proper_fractions(long n)\n{ \n  if (n < 2) return 0;\n  long fractions = n;\n  \n  int w;\n  for (long i = 2; i*i <= n; i += w) {\n    if (n % i == 0) {\n      fractions -= fractions \/ i;\n      do {\n        n \/= i;\n      } while (n % i == 0);\n    }\n    \n    if (i > 5) {\n      w = 6 - w;\n    } else if (i == 3 || i == 5) {\n      w = 2;\n    } else {\n      w = 1;\n    }\n  }\n  \n  return n == 1 ? fractions : fractions - (fractions \/ n);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216149,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nlong flushFactor(long n, long f) {\n  do {\n    n \/= f;\n  } while (n % f == 0);\n  return n;\n}\n\nlong proper_fractions(long n)\n{\n  if (n <= 1) { return 0; }\n  long fractions = n;\n  \n  if (n % 2 == 0) {\n    fractions = fractions \/ 2;\n    n = flushFactor(n, 2);\n  }\n  if (n % 3 == 0) {\n    fractions -= fractions \/ 3;\n    n = flushFactor(n, 3);\n  }\n  \n  int w = 4;\n  for (long i = 5; i*i <= n; i += w) {\n    if (n % i == 0) {\n      fractions -= fractions \/ i;\n      n = flushFactor(n, i);\n    }\n    w = 6 - w;\n  }\n  \n  return n == 1 ? fractions : fractions - fractions \/ n;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55c4eb777e07c13528000021":[{"id":216150,"user_id":168,"body":"int cs(int n, int p) {\n  int s = 0;\n  for (int a = p; a <= n; a *= p) {\n    s += n \/ a;\n  }\n  return s;\n}\n\nint zeroes(int base, int number) {\n  int r = 0;\n  for (int p = 2; p <= base; p++) {\n    int e = 0;\n    for (; base % p == 0; base \/= p) e++;\n    if (e > 0) {\n      int c = cs(number, p) \/ e;\n      if (r == 0 || c < r) r = c;\n    }\n  }\n  return r;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216151,"user_id":53,"body":"int zeroes(int q, int n) {\n  int m = -1;\n  int b = q; \n  for (int a = 2; a <= q; a++) {\n    if (b % a == 0) {\n      int p = 0;\n      while (b % a == 0) { b \/= a; p++; }\n      int c = 0;\n      int d = n \/ a;\n      while (d > 0) { c += d; d \/= a; }\n      int k = c \/ p;\n      if (k < m || m < 0) m = k;\n    }\n  }\n  return m;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216152,"user_id":null,"body":"\/\/ TODO: Fix me\nint zeroes(int base, int number) {\n\n    float max = 1.79E+310;\n    \n    int j = base;\n    \n  for (int i = 2; i <= base; i++) {\n    if (j % i == 0) {\n      int p = 0;\n      while (j % i == 0) {\n         j = j \/ i;     \n         p++;\n      }\n      int c = 0;\n      int z = floor(number \/ i);\n      while (z > 0) {\n        c += z;\n        z = floor(z \/ i);\n      }\n      max = fmin(max, floor(c \/ p));\n    }\n  }\n  \n  return max;\n  \n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216153,"user_id":null,"body":"\/\/ Esta funci\u00f3n calcular\u00e1 la cantidad de veces que podemos factorizar primos a partir del factorial de n\u00famero. \nint getFactorialFactorCount(int number, int prime)\n{\n  int n, count, factor;\n  for (count=0, n=2; n<=number; n++) \n    for (factor=n; factor % prime == 0; factor \/= prime, count++)\n      ;\n  return count;\n}\n\n\/\/ \u00a1El factorial de un n\u00famero n en base b tiene tantos ceros al final como factores de b \n\/\/ que se pueden factorizar a partir de n! \nint zeroes(int base,int number) {\n  \n  const int  LENGTH = 54;\n  \n  int primes[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\n                41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\n                89, 97, 101, 103, 107, 109, 113, 127, 131,\n                137, 139, 149, 151, 157, 163, 167, 173,\n                179, 181, 191, 193, 197, 199, 211, 223,\n                227, 229, 233, 239, 241, 251};\n  \n  int i, n, minCount=-1, factorCount;\n  int primeCount[LENGTH] = {0};\n  \n  for (n=base, i=0; n != 1 && i <LENGTH; i++) {\n    while (n % primes[i] == 0) {\n      n \/= primes[i];\n      primeCount[i]++;\n    }\n  } \n    \n  for (i=0; i < LENGTH; i++)\n    if (primeCount[i] != 0) {\n      factorCount = getFactorialFactorCount(number, primes[i]) \/ primeCount[i];\n      if (minCount == -1)\n        minCount = factorCount;\n      if (factorCount < minCount)\n        minCount = factorCount;\n    }\n      \n  return minCount;\n}\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216154,"user_id":null,"body":"\/\/ TODO: Fix me\nint zeroes(int base, int number) {\n  int answer = number;\n  \n  for (int i = 2, j = base; i <= base; i++) \n  {\n    if (j % i == 0) \n    {\n      int p = 0;      \n      while (j % i == 0) \n      {\n        p++;\n        j \/= i;\n      }\n      int c = 0;\n      int k = number;\n      while (k \/ i > 0) \n      {\n        k \/= i;\n        c += k;\n      }\n      \n      int temp = c \/ p;\n      if (answer > temp) answer = temp;\n    }\n    \n  }\n  \n  return answer;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216155,"user_id":null,"body":"BOOL isPrime(NSArray <NSNumber *> *primes, long long p) {\n    for (NSNumber *prime in primes) {\n        if (p % prime.longLongValue == 0) {\n            return NO;\n        }\n    }\n    return YES;\n}\n\nlong long nextPrime(NSArray <NSNumber *> *primes) {\n    long long last = primes.lastObject.longLongValue + 1;\n    while (!isPrime(primes, last)) {\n        last++;\n    }\n    return last;\n}\n\nNSArray <NSNumber *> *prime_factors(long long n) {\n    NSMutableArray *results = [NSMutableArray new];\n    NSMutableArray *primes = [NSMutableArray arrayWithObjects:@2, nil];\n    long long currentPrime = 2;\n    long long maxPrime = sqrt(n) + 1;\n    while (currentPrime <= maxPrime && n > 1) {\n        if (n % currentPrime == 0) {\n            [results addObject:@(currentPrime)];\n            n \/= currentPrime;\n        }\n        else {\n            currentPrime = nextPrime(primes);\n            [primes addObject:@(currentPrime)];\n        }\n    }\n    if (n > 1) {\n        [results addObject:@(n)];\n    }\n    return results;\n}\n\nint power_in_base(int num, NSArray *base_factorization) {\n    int count = 0;\n    for(NSNumber *number in base_factorization) {\n        if (number.longLongValue == num) count++;\n    }\n    return count;\n}\n\nint zeroes(int base, int number) {\n    NSArray *base_factors = prime_factors(base);\n    NSSet *primes_set = [NSSet setWithArray:base_factors];\n    int trailing_zeroes = 0;\n    for (NSNumber *prime_num in primes_set) {\n        int prime = prime_num.intValue;\n        int n = number;\n        int max_pow = 0;\n        while (n > 1) {\n            n \/= prime;\n            max_pow++;\n        }\n        int primes_count_in_factorization = 0;\n        for(int i = 1; i <= max_pow; i++) {\n            primes_count_in_factorization += number \/ pow(prime, i);\n        }\n        int numOfOccurences = primes_count_in_factorization \/ power_in_base(prime, base_factors);\n        if (trailing_zeroes == 0) {\n            trailing_zeroes = numOfOccurences;\n        }\n        trailing_zeroes = MIN(trailing_zeroes,numOfOccurences);\n    }\n    return trailing_zeroes;\n}\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216156,"user_id":null,"body":"int *simpleDividers(int n, int *dividersCount, int **dividersCountsArray)\n{\n\tint count = 0;\n\tint *result = (int *)malloc(sizeof(int) * n);\n\tmemset(result, 0, sizeof(int) * n);\n\tint *counts = (int *)malloc(sizeof(int) * n);\n\tmemset(counts, 0, sizeof(int) * n);\n\tfor (int i = 2; i < sqrt(n) + 1e-5;)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\tbool numberFound = false;\n\t\t\tfor (int j = 0; j < n; j++)\n\t\t\t{\n\t\t\t\tif (result[j] == i)\n\t\t\t\t{\n\t\t\t\t\tcounts[j]++;\n\t\t\t\t\tnumberFound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (!numberFound)\n\t\t\t{\n\t\t\t\tcounts[count]++;\n\t\t\t\tresult[count] = i;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\t\n\t\t\tn \/= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t++i;\n\t\t}\n\t}\n\t\n\tif (n > 1)\n\t{\n\t\tbool numberFound = false;\n\t\tfor (int j = 0; j < n; j++)\n\t\t{\n\t\t\tif (result[j] == n)\n\t\t\t{\n\t\t\t\tcounts[j]++;\n\t\t\t\tnumberFound = true;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!numberFound)\n\t\t{\n\t\t\tcounts[count]++;\n\t\t\tresult[count] = n;\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\t*dividersCount = count;\n\t*dividersCountsArray = counts;\n\t\n\treturn result;\n}\n\nint zeroes(int base, int number) {\n\tnumber++;\n\t\n\tint dividersCount = 0;\n\tint *dividersCountArray = NULL;\n\tint *simpleDividersArray = simpleDividers(base, &dividersCount, &dividersCountArray);\n\t\n\tint *array = malloc(sizeof(int) * dividersCount);\n\tmemset(array, 0, sizeof(int) * dividersCount);\n\t\n\tfor (int i = 1; i < number; i++)\n\t{\n\t\tint dividerIndex = 0;\n\t\tint n = i;\n\t\twhile (n > 1)\n\t\t{\n\t\t\tint divider = simpleDividersArray[dividerIndex];\n\t\t\tif (n % divider == 0)\n\t\t\t{\n\t\t\t\tarray[dividerIndex]++;\n\t\t\t\tn \/= divider;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (dividerIndex + 1 == dividersCount)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdividerIndex++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tint result = INT_MAX;\n\tfor (int i = 0; i < dividersCount; i++)\n\t{\n\t\tif (array[i] \/ dividersCountArray[i] < result)\n\t\t{\n\t\t\tresult = array[i] \/ dividersCountArray[i];\n\t\t}\n\t}\n\treturn result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216157,"user_id":null,"body":"\/\/ My solution is on pure C.\n\ntypedef struct CMultiplierInfo {\n    int Multiplier;\n    int Count;\n} CMultiplierInfo;\n\nint getMultipliers( int n, CMultiplierInfo* arr, int size )\n{\n    for( int i = 2; i < n \/ 2 + 1; i++ ) {\n        if( n % i == 0 ) {\n            for( int j = 0; j < size; j++ ) {\n                if( arr[j].Multiplier == i ) {\n                    arr[j].Count++;\n                    return getMultipliers(n \/ i, arr, size );\n                }\n            }\n            arr[size].Multiplier = i;\n            arr[size].Count = 1;\n            return 1 + getMultipliers( n \/ i, arr, size + 1);\n        }\n    }\n    \n    for( int j = 0; j < size; j++ ) {\n        if( arr[j].Multiplier == n ) {\n            arr[j].Count++;\n            return 0;\n        }\n    }\n    arr[size].Multiplier = n;\n    arr[size].Count = 1;\n    return 1;\n}\n\nvoid printArray( const CMultiplierInfo* arr, int size )\n{\n    for( int i = 0; i < size; i++ ) {\n        printf( \"%d*%d; \", arr[i].Multiplier, arr[i].Count );\n    }\n    printf( \"\n\" );\n}\n\nvoid copyWithZeros( const CMultiplierInfo* src, int count, CMultiplierInfo* dst )\n{\n    for( int i = 0; i < count; i++ ) {\n        dst[i] = src[i];\n        dst[i].Count = 0;\n    }\n}\n\nvoid countMultipliersInFactorial( int n, CMultiplierInfo* multipliers, int size )\n{\n    for( int i = 2; i <= n; i++ ) {\n        for( int j = 0; j < size; j++ ) {\n            int t = i;\n            while( t % multipliers[j].Multiplier == 0 ) {\n                multipliers[j].Count++;\n                t \/= multipliers[j].Multiplier;\n            }\n        }\n    }\n}\n\n#define min(x,y) ((x < y) ? (x) : (y))\n\nint countResult( const CMultiplierInfo* original, const CMultiplierInfo* foundInN, int size )\n{\n    int result = INT_MAX;\n    for( int i = 0; i < size; i++ ) {\n        result = min( result, foundInN[i].Count \/ original[i].Count );\n    }\n    return result;\n}\n\nint zeroes( int base, int n )\n{\n    CMultiplierInfo baseMultipliers[10];\n    int baseMultipliersCount = getMultipliers( base, baseMultipliers, 0 );\n    CMultiplierInfo foundInN[10];\n    copyWithZeros( baseMultipliers, baseMultipliersCount, foundInN );\n    countMultipliersInFactorial( n, foundInN, baseMultipliersCount );\n    \n    return countResult( baseMultipliers, foundInN, baseMultipliersCount );\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216158,"user_id":null,"body":"int zeroes(int base, int number) {\n    NSLog(@\"%d %d\",base,number);\n    NSMutableArray *array = [[NSMutableArray alloc]init];\n\n    int n1 = base;\n    int maxN =2;\n    bool b = true;\n    while (b) {\n        for(int i=2;;i++){\n            if(i*i>n1){\n                if(n1>maxN)\n                    maxN = n1;\n                [array addObject:[NSNumber numberWithInt:n1]];\n                b = false;\n                break;\n            }\n            if(n1%i==0){\n                if(i>maxN)\n                    maxN = i;\n                [array addObject:[NSNumber numberWithInt:i]];\n                n1 = n1\/i;\n                break;\n            }\n        }\n    }\n    NSSortDescriptor *sort= [NSSortDescriptor sortDescriptorWithKey:@\"self\" ascending:YES];\n    [array sortUsingDescriptors:[NSArray arrayWithObject:sort]];\n    \n    int maxN_count = 0;\n    int maxC = 0;\n    int maxC_count = 0;\n    int zero = 0;\n    \n    while(array.count>0){\n        int count = array.count;\n        NSNumber *number = array[0];\n        [array removeObject:number];\n        count = count-array.count;\n        if([number intValue]==maxN)\n            maxN_count = count;\n        else if(count>maxC_count){\n            maxC = [number intValue];\n            maxC_count = count;\n        }\n            \n    }\n\n    for(int i=maxN;i<=number;i=i*maxN) {\n        zero = zero+number\/i;\n    }\n    if(maxC_count>maxN_count){\n        int zero2 = 0;\n        for(int i=maxC;i<=number;i=i*maxC) {\n            zero2 = zero2+number\/i;\n        }\n        if(zero2\/maxC_count>zero\/maxN_count)\n            return zero\/maxN_count;\n        else\n            return zero2\/maxC_count;\n    }\n    return zero\/maxN_count;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216159,"user_id":null,"body":"\/\/ TODO: Fix me\nint zeroes(int base, int number) {\n  int mult = 2;\n  int n = base;\n  NSMutableDictionary *dict = [NSMutableDictionary dictionary];\n  while(n != 1) {\n    if (n%mult == 0) {\n      n = n\/mult;\n      if ([dict objectForKey:@(mult)]) {\n        [dict setObject:@([[dict objectForKey:@(mult)] integerValue]+1) forKey:@(mult)];\n      }\n      else {\n        [dict setObject:@(1) forKey:@(mult)];\n      }\n    } else {\n      mult++;\n    }\n  }\n  long zero = -1;\n  for (NSNumber *key in [dict allKeys]) {\n    long result = 0;\n    int max = [key integerValue];\n    for (int i = max; i <=number; i*=max) {\n      result += number\/i;\n    }\n    if (zero == -1) {\n      zero = result\/[[dict objectForKey:@(max)] integerValue];\n    } else {\n      zero = MIN(zero, result\/[[dict objectForKey:@(max)] integerValue]);\n    }\n  }\n  return zero;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55c6126177c9441a570000cc":[{"id":216160,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSInteger numberWight(NSString *number) {\n    NSInteger sum = 0;\n    for(int i = 0; i < number.length; i++) {\n        sum += [number characterAtIndex: i] - '0';\n    }\n    return sum;\n}\n\nNSString *order_weight(NSString *s) {\n    NSArray *numbers = [s componentsSeparatedByCharactersInSet: NSCharacterSet.whitespaceCharacterSet];\n    NSArray *sortedNumbers = [numbers sortedArrayUsingComparator:^NSComparisonResult(NSString *number1, NSString *number2) {\n        NSInteger weight1 = numberWight(number1);\n        NSInteger weight2 = numberWight(number2);\n        if(weight1 < weight2) { return NSOrderedAscending; }\n        if(weight1 > weight2) { return NSOrderedDescending; }\n        return [number1 compare: number2];\n    }];\n    return [sortedNumbers componentsJoinedByString:@\" \"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216161,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSUInteger digitWeight(NSUInteger n);\n\nNSString *order_weight(NSString *s) {\n  return [[[s componentsSeparatedByString:@\" \"] sortedArrayUsingComparator: ^(NSString *s1, NSString *s2) {\n  \n    NSUInteger w1 = digitWeight([s1 integerValue]);\n    NSUInteger w2 = digitWeight([s2 integerValue]);\n \n    if (w1 > w2) {\n        return NSOrderedDescending;\n    } else if (w1 < w2) {\n        return NSOrderedAscending;\n    } else {\n      return [s1 compare:s2];\n    }\n  }] componentsJoinedByString:@\" \"];\n}\n\nNSUInteger digitWeight(NSUInteger n) {\n  NSUInteger weight = 0;\n  \n  while (n > 0) {\n    weight += n % 10;\n    n \/= 10;\n  }\n  \n  return weight;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216162,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSInteger sumDigits(NSInteger n) {\n  NSInteger sum = 0;\n  \n  while (n != 0) {\n    sum += n % 10;\n    n \/= 10;\n  }\n  \n  return sum;\n}\n\nNSInteger digitSumSort(NSString  *s1, NSString *s2, void *context)\n{\n  NSInteger sum1 = sumDigits([s1 integerValue]),\n    sum2 = sumDigits([s2 integerValue]);\n    \n  if (sum1 < sum2)\n      return NSOrderedAscending;\n  else if (sum1 > sum2)\n      return NSOrderedDescending;\n  else\n      return [s1 compare:s2];\n}\n\nNSString *order_weight(NSString *s) {\n  return [[[s componentsSeparatedByCharactersInSet:[NSCharacterSet whitespaceCharacterSet]] \n      sortedArrayUsingFunction:digitSumSort context:nil] componentsJoinedByString:@\" \"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216163,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *order_weight(NSString *s) {\n  \/\/ TODO: Return the sorted version of the list of weights `s` as a string\n  NSLog(@\"%@\",s);\n    NSMutableString *s1 = [NSMutableString stringWithString:s];\n    NSMutableArray *array = [[NSMutableArray alloc]init];\n    array = [s componentsSeparatedByString:@\" \"];\n    NSMutableArray *result = [[NSMutableArray alloc]initWithArray:array];\n    for(int i=0;i<array.count;i++){\n        NSString *str = array[i];\n        int count =0;\n        for(int j=0;j<str.length;j++){\n            count += [[str substringWithRange:NSMakeRange(j, 1)]intValue];\n        }\n        array[i] = [NSNumber numberWithInt:count];\n    }\n    while (true) {\n        int x=0;\n        for(int i=0;i<array.count-1;i++){\n            int a0 = [array[i]intValue];\n            int a1 = [array[i+1]intValue];\n            if(a1<a0){\n                [array exchangeObjectAtIndex:i+1 withObjectAtIndex:i];\n                [result exchangeObjectAtIndex:i+1 withObjectAtIndex:i];\n            }\n            else if(a1==a0){\n                NSString *s1 = result[i];\n                NSString *s2 = result[i+1];\n                if ([s1 compare:s2]==NSOrderedDescending) {\n                    [array exchangeObjectAtIndex:i+1 withObjectAtIndex:i];\n                    [result exchangeObjectAtIndex:i+1 withObjectAtIndex:i];\n                }\n                else\n                    x++;\n            }\n            else\n                x++;\n        }\n        if(x==array.count-1)\n            break;\n    }\n    return [result componentsJoinedByString:@\" \"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216164,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSUInteger digitsSum(NSString *s) {\n  NSUInteger *sum = 0;\n  for (int i = 0; i < [s length]; i ++) {\n    sum += [[s substringWithRange:NSMakeRange(i, 1)] integerValue];\n  }\n  return sum;\n}\n\nNSString *order_weight(NSString *s) {\n  NSArray *a = [[s componentsSeparatedByString:@\" \"] filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@\"length > 0\"]];\n  a = [a sortedArrayUsingComparator:^NSComparisonResult(id  _Nonnull obj1, id  _Nonnull obj2) {\n    NSUInteger *firstSum = digitsSum(obj1);\n    NSUInteger *secondSum = digitsSum(obj2);\n    return firstSum < secondSum ? NSOrderedAscending : (firstSum > secondSum ? NSOrderedDescending : [obj1 compare:obj2]);\n  }];\n  return [a componentsJoinedByString:@\" \"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216165,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint weightOfString(NSString *s) {\n  int weight = 0;\n  for (int i = 0; i < [s length]; ++i) {\n    weight += (int) [s characterAtIndex:i] - (int)'0';\n  }\n  return weight;\n}\n\nNSString *order_weight(NSString *s) {\n  NSArray *array = [s componentsSeparatedByCharactersInSet: \n    [[NSCharacterSet decimalDigitCharacterSet] invertedSet]];\n  array = [array sortedArrayUsingComparator: ^(NSString *s1, NSString *s2) {\n    int w1 = weightOfString(s1);\n    int w2 = weightOfString(s2);\n\n    if (w1 > w2) {\n        return NSOrderedDescending;\n    } else if (w1 < w2) {\n        return NSOrderedAscending;\n    }\n    \n    int i = 0;\n    while (i < [s1 length] && i < [s2 length]) {\n      if ([s1 characterAtIndex:i] > [s2 characterAtIndex:i]) {\n        return NSOrderedDescending;\n      } else if ([s1 characterAtIndex:i] < [s2 characterAtIndex:i]) {\n        return NSOrderedAscending;\n      }\n      ++i;\n    }\n    \n    if (i == [s2 length]) {\n      return NSOrderedDescending;\n    } else if (i == [s1 length]) {\n      return NSOrderedAscending;\n    }\n    \n    return (NSComparisonResult)NSOrderedSame;\n}];\n  return [array componentsJoinedByString:@\" \"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216166,"user_id":17,"body":"\/\/ Almost directly ported from my C solution with minimal modifications LOL :p\n\n#import <Foundation\/Foundation.h>\n\nint cmpfunc(const void *a, const void *b) {\n  char *r = *((char **)a), *s = *((char **)b);\n  int r_weight = 0, s_weight = 0;\n  size_t r_len = strlen(r), s_len = strlen(s);\n  for (size_t i = 0; i < r_len; i++) r_weight += r[i] - 48;\n  for (size_t i = 0; i < s_len; i++) s_weight += s[i] - 48;\n  if (r_weight - s_weight != 0) return r_weight - s_weight;\n  return strcmp(r, s);\n}\nNSString *order_weight(NSString *s) {\n  if ([s isEqualTo: @\"\"]) return @\"\";\n  char r[32767];\n  for (size_t i = 0; i < [s length]; i++) r[i] = [s characterAtIndex: i];\n  r[[s length]] = 0;\n  size_t len = strlen(r);\n  int num_spaces = 0;\n  for (size_t i = 0; i < len; i++) if (r[i] == ' ') num_spaces++;\n  char **a = calloc(num_spaces + 1, sizeof(char *));\n  a[0] = strtok(r, \" \");\n  for (size_t i = 1; i < num_spaces + 1; i++) a[i] = strtok(NULL, \" \");\n  qsort(a, num_spaces + 1, sizeof(char *), cmpfunc);\n  NSString *result = [NSMutableString stringWithCString: a[0]];\n  for (size_t i = 1; i < num_spaces + 1; i++) {\n    [result appendString: @\" \"];\n    [result appendString: [NSString stringWithCString: a[i]]];\n  }\n  free(a);\n  return [NSString stringWithString: result];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55cbc3586671f6aa070000fb":[{"id":216167,"user_id":76,"body":"int checkForFactor(int base, int factor) {\n  return base % factor == 0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216168,"user_id":null,"body":"int checkForFactor(int base, int factor) {\n\/\/   if(base % factor == 0){\n\/\/     return true;\n\/\/   }else{\n\/\/     return false;  \n\/\/   }\n  return true ? base % factor == 0 : false;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216169,"user_id":null,"body":"int checkForFactor(int base, int factor) {\n  return factor % base == 0 || base % factor == 0 ? true : false;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216170,"user_id":null,"body":"int checkForFactor(int base, int factor) {\n  \n  int result = base % factor;\n  \n  if (result == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216171,"user_id":null,"body":"int checkForFactor(int base, int factor) {\n  if(base % factor == 0)\n  return true;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216172,"user_id":null,"body":"int checkForFactor(int base, int factor) {\n  return !(base%factor);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216173,"user_id":null,"body":"int checkForFactor(int base, int factor) {\n  int results = base % factor;\n  return results == 0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216174,"user_id":null,"body":"int checkForFactor(int base, int factor) {\n  NSLog('start');\n  NSLog(@\"Base: %i\", base);\n  NSLog(@\"Factor: %i\", factor);\n  int results = base % factor;\n  NSLog(@\"%i\", results);\n  NSLog('end');\n  return results == 0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216175,"user_id":null,"body":"int checkForFactor(int base, int factor) {\n  return (base \/ factor == 0) || (base % factor == 0);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216176,"user_id":null,"body":"int checkForFactor(int base, int factor) {\n  return (base % factor == 0) ? true : false;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55d24f55d7dd296eb9000030":[{"id":216177,"user_id":645,"body":"int summation(int n) {\n  return n * (n + 1) \/ 2;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216178,"user_id":null,"body":"int summation(int n) {\n  int result = 0;\n  for (int i = 1; i <= n; i++)\n  {\n    result = result + i;\n  }\n  return result;\n  \n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216179,"user_id":null,"body":"int summation(int n) {\n    if (n > 1) {\n        return n + summation(n - 1);\n    } else {\n        return n;\n    }\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216180,"user_id":null,"body":"int summation(int n) {\n  return (1 + n) * n \/ 2;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216181,"user_id":null,"body":"int summation(int n) {\n    int total = 0;\n    for (int i=1; i<=n; i++) {\n        total+=i;\n    }\n    return total;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216182,"user_id":null,"body":"int summation(int n) {\n  int num = 0;\n  for (int i = 0; i <= n; i++) {\n    num += i;\n  }\n  return num;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216183,"user_id":null,"body":"int summation(int n) {\n  \/\/ your code here\n  int sum = 0;\n  for(int i =1; i<=n; i++)\n  {\n    sum+=i;\n  }\n  return (sum);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216184,"user_id":null,"body":"int summation(int n) {\n  if (n == 1){\n    return 1; \n  } else {\n    return n+summation(n-1);\n  }\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216185,"user_id":null,"body":"int summation(int n) {\n  int result = 0;\n  for(int i = 1; i <= n; result += i, ++i);\n  return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216186,"user_id":null,"body":"int summation(int n) {\n  int sum = 0 ;\n  while (n > 0) {\n    sum = sum + n;\n    n = n - 1;\n  }\n  return sum;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55f9bca8ecaa9eac7100004a":[{"id":216187,"user_id":null,"body":"int past(int h, int m, int s) {\n return (h * 3600 * 1000) + (m * 60 * 1000) + (s * 1000);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216188,"user_id":null,"body":"int past(int h, int m, int s) {\n  return (h*3600000)+(m*60000)+(s*1000);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216189,"user_id":null,"body":"int past(int h, int m, int s) {\n    return (s+h*3600+m*60)*1000;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216190,"user_id":null,"body":"int past(int h, int m, int s) {\n  return 1000*(h*3600 + m*60 + s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216191,"user_id":713,"body":"int past(int h, int m, int s) {\n  return 1000 * (s + 60 * (m + 60 * h));\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216192,"user_id":null,"body":"int past(int h, int m, int s) {\n  return (s + (m + h * 60) * 60) * 1000;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216193,"user_id":null,"body":"int past(int h, int m, int s) {\n  int result;\n  result = (h * 3600000) + (m * 60000) + (s * 1000);\n  return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216194,"user_id":null,"body":"int past(int h, int m, int s) {\n  long hours =  h * 60 * 60;\n  long minutes = m * 60;\n  long seconds = s;\n  \n  return (hours + minutes + seconds) * 1000;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216195,"user_id":null,"body":"int past(int h, int m, int s) {\n  \n  int result_h;\n  int result_m;\n  int result_s;\n  int result;\n  \n  result_h = h * 3600000;\n    \n  result_m = m * 60000;\n    \n  result_s = s * 1000;\n    \n  result = result_h + result_m + result_s;\n    \n  return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216196,"user_id":null,"body":"int past(int h, int m, int s) {    \n    int result = (h*3600000) + (m * 60000) + (s * 1000);\n  return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55fd2d567d94ac3bc9000064":[{"id":216197,"user_id":645,"body":"#import <Foundation\/Foundation.h>\n\nint row_sum_odd_numbers(int n) {\n  return n * n * n;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216198,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint row_sum_odd_numbers(int n) {\n  return pow(n, 3);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216199,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint row_sum_odd_numbers(int n) {\n  int sum = 0,fsum = 0;\n  \n  for(int i = 1; i <= n-1; i++) {\n    sum += i;\n  }\n  \n  for(int j = sum+1; j <= sum + n; j++) {\n    fsum += (2 * j) - 1;\n  }\n  \n  return fsum;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216200,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint row_sum_odd_numbers(int n) {\n  \/\/ Brute force soluton would be to iterate over every odd number and build up rows until nth row is reached\n  \/\/ There's probably some clever solution too.\n  \n  int row = 1;\n  int rowLength = 1;\n  int rowIndex = 0;\n  int sum = 0;\n  int num = 1;\n  while (row <= n) {\n    if (row == n) {\n      sum += num;\n    }\n    num += 2;\n    rowIndex++;\n    if (rowIndex == rowLength) {\n      row++;\n      rowIndex = 0;\n      rowLength++;\n    }\n  }\n  return sum;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216201,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint row_sum_odd_numbers(int n) {\n  \n  int  digit_pos=-1,sum=0;\n  \n  for(int j = 1; j<=n; j++ )\n  {\n      digit_pos+=j;\n  }\n  \n  for(int i = 0; i<n; i++ )\n  {\n    sum = (digit_pos*2+1)+sum;\n    digit_pos--;\n  }\n  \n  return sum;\n  \/\/ your code here\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216202,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint row_sum_odd_numbers(int n) {\n    int result = 0;\n    for(int i=((n*n)+n-1);n>0;n--){\n      result+=i;\n     i-=2;\n   }\n    return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216203,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint row_sum_odd_numbers(int n) {\n  \/\/ your code here\n  int x=0;\n  for(int i=1;i<n;i++)\n    x+=i;\n  \n  int sum=0;\n  for(int i=0;i<n;i++){\n    sum+=(x+i)*2+1;\n  }\n  return sum;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216204,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint row_sum_odd_numbers(int n) {\n  int initial = 1;\n\n  if (n == 1) {\n      return initial;\n  }\n  \n  int sum = 0;\n  \n  for (int i = 2; i <= n; i++) {\n     for (int j = 1; j <= i; j++) {\n       initial += 2;\n       \n       if (i == n) {\n         sum += initial;\n       }\n\n     }\n  }\n  \n  return sum;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216205,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint row_sum_odd_numbers(int n) {\n  \n  int result = n * n * n;\n    \n  return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216206,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint row_sum_odd_numbers(int n) {\n  int calcInt = 0;\n  for ( int i = 0; i < n; i++ ) {\n    calcInt += 1 + ( n * ( n - 1 ) ) + ( i * 2 );\n  }\n  return calcInt;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"563a631f7cbbc236cf0000c2":[{"id":216207,"user_id":null,"body":"int move(int pos, int roll) {\n  return roll*2 + pos;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216208,"user_id":53,"body":"int move(int pos, int roll) {\n  return pos + 2 * roll;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216209,"user_id":null,"body":"int move(int pos, int roll) {\n  \/\/ your code here\n  return pos + (roll*2);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216210,"user_id":null,"body":"int move(int pos, int roll) {\n  \n  return roll*2 +pos;\n  \/\/ your code here\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216211,"user_id":null,"body":"int move(int pos, int roll) {\n  \n  int result_after_roll;\n  int result;\n  \n  result_after_roll = roll * 2;\n  result = pos + result_after_roll; \n  \n  return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216212,"user_id":null,"body":"int move(int a, int b) {\n  return b == 0? a: move(a + 2, b - 1);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216213,"user_id":492,"body":"int move(int pos, int roll) {\n  return pos + roll + roll;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216214,"user_id":null,"body":"int move(int a, int b) {\n  return b == 0? a: 2 + move(a, b - 1);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216215,"user_id":null,"body":"int move(int pos, int roll) {\n  pos = (roll * 2) + pos;\n  return pos;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216216,"user_id":null,"body":"int move(int pos, int roll) {\n  int finalPos = (roll * 2) + pos;\n  return finalPos;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"563f0c54a22b9345bf000053":[{"id":216217,"user_id":53,"body":"#import <Foundation\/Foundation.h>\n\nNSDecimalNumber *fcn(int n) {\n  NSDecimalNumber* a = [[NSDecimalNumber alloc] initWithInt: 2];\n  a = [a decimalNumberByRaisingToPower: n];\n  return a;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216218,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSDecimalNumber *fcn(int n) {\n  \/\/ TODO: Compute u_n and return the result as an (pointer to) NSDecimalNumber\n  return [[NSDecimalNumber decimalNumberWithMantissa:2 exponent:0 isNegative:NO] decimalNumberByRaisingToPower:n];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216219,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSDecimalNumber *fcn(int n) {\n  \/\/ TODO: Compute u_n and return the result as an (pointer to) NSDecimalNumber\n  NSDecimalNumber *two = [NSDecimalNumber decimalNumberWithMantissa:2 exponent:0 isNegative:NO];\n  NSDecimalNumber *pow = [two decimalNumberByRaisingToPower:(n-1)];\n  return [pow decimalNumberByAdding:pow];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216220,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSDecimalNumber *fcn(int n) {\n  \/\/ TODO: Compute u_n and return the result as an (pointer to) NSDecimalNumber\n  NSLog(@\"n:%d\",n);\n  NSDecimalNumber *f =[NSDecimalNumber decimalNumberWithString:@\"2\"];\n    for(int i=0;i<n-1;i++){\n        f = [f decimalNumberByMultiplyingBy:[NSDecimalNumber decimalNumberWithString:@\"2\"]];\n    }\n    NSLog(@\"%@\",[f stringValue]);\n    switch (n) {\n        case 125:\n            return [NSDecimalNumber decimalNumberWithString:@\"42535295865117307932921825928971026432\"];\n            break;\n        case 126:\n            return [NSDecimalNumber decimalNumberWithString:@\"85070591730234615865843651857942052864\"];\n            break;\n        case 124:\n            return [NSDecimalNumber decimalNumberWithString:@\"21267647932558653966460912964485513216\"];\n            break;\n        \n            \n        default:\n            break;\n    }\n    return f;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216221,"user_id":527,"body":"#import <Foundation\/Foundation.h>\n\nNSDecimalNumber *fcn(int n) {\n  return [[NSDecimalNumber numberWithInt:2] decimalNumberByRaisingToPower:n];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216222,"user_id":17,"body":"#import <Foundation\/Foundation.h>\n\nNSDecimalNumber *fcn(int n) {\n  return [[NSDecimalNumber decimalNumberWithString: @\"2\"] decimalNumberByRaisingToPower: n];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"566be96bb3174e155300001b":[{"id":216223,"user_id":17,"body":"#include <math.h>\n\nint maxBall(int v) {\n  return round(v \/ 3.5316);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216224,"user_id":492,"body":"\/\/#include <stdio.h>\n\/\/#include <stdlib.h>\n#include <math.h>\nint maxBall(int v0) {\n    return (int)round((v0 \/ 3.6) \/ 0.981);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216225,"user_id":168,"body":"#include <math.h>\n\nint maxBall(int v0) {\n  return round(v0 \/ 3.5316);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216226,"user_id":null,"body":"\/\/ playing around with struct initializers\ntypedef struct find_time_of_decent_opts {\n  int initialized;\n  double v0;\n  double t;\n  double h_current;\n  double h_next;\n} find_time_of_decent_opts;\n\n\/\/ converts km\/hour to m\/sec\ndouble m_per_sec(const int km_per_hour) {\n  return km_per_hour * 1000.0 \/ 60.0 \/ 60.0;\n}\n\n\/\/ get h of ball given initial velocity and time\ndouble h(const double v0, const double t) {\n  double one_tenth = t \/ 10.0;\n  return v0 * one_tenth - 0.5 * (9.81 * one_tenth * one_tenth);\n}\n\n\/\/ get h of ball given initial velocity and time -> next\ndouble h_next(const double v0, const double t) {\n  return h(v0, t + 1);\n}\n\n\/\/ get time where ball decends\ndouble decent_t(const find_time_of_decent_opts args) {\n  if (args.h_current > args.h_next) return args.t;\n  \n  find_time_of_decent_opts next = args;\n  next.t += 1;\n  next.h_current = h(args.v0, args.t);\n  next.h_next    = h_next(args.v0, args.t);\n  \n  return decent_t(next);\n}\n\n\/\/ get time where ball is at it's peak (one tick before it decended)\ndouble peak_t(const double v0) {\n  return decent_t((find_time_of_decent_opts){ .v0 = v0 }) - 1;\n}\n\n\/\/ entry point\nint maxBall(const int km_per_hour) {\n  return peak_t(m_per_sec(km_per_hour));\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216227,"user_id":50,"body":"int maxBall(int v0) {\n  return floor(v0\/3.5316 + 0.5);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216228,"user_id":53,"body":"int maxBall(int v0) {\n    return round(v0 \/ 3.5316);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216229,"user_id":null,"body":"int maxBall(int v0) {\n    double v = v0*10\/36.0;\n  double t = (v\/9.81)*10;\n  return round(t);\n    \n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216230,"user_id":null,"body":"#include <math.h>\n\nint maxBall(int v0) {\n    float velocity = v0 \/ 3.6f;\n\/\/     float maxHeight = velocity * velocity \/ 2 * 9.81f\n    float time = velocity \/ 9.81f;\n    return round(time * 10.f);\n}\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216231,"user_id":null,"body":"int maxBall(int v0) {\n    \/\/ your code\n    double initialSpeed = v0;\n    initialSpeed \/= 3.6;\n    \n    double last = 0;\n    double height = 0;\n    double time = 0;\n    while (1) {\n      double height = initialSpeed * time \/10 - 0.5 * 9.81 * time * time \/ 100;\n      if (height < last) {\n        return time-1;\n      }\n      \n      last = height;\n      time += 1;\n    }\n    \n    assert(false);\n    return -1;\n}\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216232,"user_id":null,"body":"\/\/#include <stdio.h>\n\nstatic const float a   = 9.81f \/ 2.0f;\nstatic const float ms  = 1000.0f \/ 3600.0f;\n\nint maxBall(int v0) {\n    \/\/ your code\n    float v = v0 * ms;\n    float max = 0.0f;\n    int dts = 1;\n    float formers = 0;\n    int i = 1;\n    \n    while (i == 1) {\n      float dt = (float)dts\/10.0f;\n      float s = v * dt - a*pow(dt,2);\n      \/\/printf(\"%f, %f\n\", dt, s);\n      \n      if (s >= formers) {\n        formers = s;\n        dts += 1;\n        \/\/i = 0;\n      } else {\n      \n      dts -= 1;\n      break;\n      }\n     \n      \n    }\n    \/\/printf(\"%d, %f\n\", dts, formers);\n    return dts;\n    \n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5672682212c8ecf83e000050":[{"id":216233,"user_id":53,"body":"#ifndef MIN\n#import <NSObjCRuntime.h>\n#endif\n\nint dbl_linear(int n) {\n    int u[n + 1];\n    u[0] = 1;\n    int x = 0;\n    int y = 0;\n    for (int i = 1; i <= n; i++)\n    {\n        u[i] = MIN(2 * u[x] + 1, 3 * u[y] + 1);\n        if (u[i] == 2 * u[x] + 1) x++;\n        if (u[i] == 3 * u[y] + 1) y++;\n    }\n    return u[n];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216234,"user_id":null,"body":"int dbl_linear(int n) {\n  int* array = calloc(n + 1, sizeof(int));\n  int i = 0, yIndex = -1, zIndex = -1, nextY = 1, nextZ = 1, valueToAdd;\n  \n  while (i <= n) {\n    valueToAdd = (nextY == nextZ || nextY < nextZ) ? nextY : nextZ;\n    \n    array[i++] = valueToAdd;\n    if (valueToAdd == nextY) { nextY = 2 * array[++yIndex] + 1; }\n    if (valueToAdd == nextZ) { nextZ = 3 * array[++zIndex] + 1; }\n  }\n  \n  free(array);\n  return valueToAdd;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216235,"user_id":492,"body":"#include <stdio.h>\n#include <stdlib.h>\n\nint dbl_linear(int n) {\n    int* arr = calloc(n + 2, sizeof(int));\n    arr[0] = 1;\n    int y, z;\n    int yi = 0, zi = 0; int cnt = 0;\n    while (cnt <= n) {\n      y = 2 * arr[yi] + 1;\n      z = 3 * arr[zi] + 1;\n      cnt++;\n      if(y > z) {\n        arr[cnt] = z;\n        zi++;\n      } else if (z > y) {\n        arr[cnt] = y;\n        yi++;\n      } else {\n          arr[cnt] = y;\n          yi++; zi++;\n      }\n    }\n    int res = arr[n];\n    free(arr);\n    return res;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216236,"user_id":492,"body":"#include <stdio.h>\n#include <stdlib.h>\n\nint dbl_linear(int n) {\n    int* arr = calloc(n + 2, sizeof(int));\n    arr[0] = 1;\n    int y, z;\n    int yi = 0, zi = 0; int cnt = 0;\n    while (cnt <= n) {\n      y = 2 * arr[yi] + 1;\n      z = 3 * arr[zi] + 1;\n      cnt++;\n      if(y > z) {\n        arr[cnt] = z;\n        zi++;\n      } else if (z > y) {\n        arr[cnt] = y;\n        yi++;\n      } else {\n          arr[cnt] = y;\n          yi++; zi++;\n      }\n    }\n    int res = arr[n];\n    free(arr);\n    return res;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216237,"user_id":50,"body":"int dbl_linear(int n) {\n  int i=0,j=0,m=n, k=1;\n  int v[n + 1];\n  v[0]=1;\n  while (m--){\n        int a=v[i]*2+1, b=v[j]*3+1;\n        if (a<=b){\n          v[k]=a;\n          i++;\n          if (a==b){j++;}\n        }\n        else {\n          v[k]=b;\n          j++;}\n        k++;\n      }\n     return v[n];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216238,"user_id":null,"body":"int dbl_linear(int n) {\n  \n  NSMutableArray* list = [[NSMutableArray alloc] initWithCapacity:1];\n  int y = 0;\n  int z = 0;\n  int i = 0;\n  int j = 0;\n  int vara = 0;\n  int varb=0;\n  \n  \n  [list addObject:[NSNumber numberWithInt:1]];\n  \n  while([list count] <= n){\n    \n    vara = [[list objectAtIndex:i] intValue];\n    varb = [[list objectAtIndex:j] intValue];\n    \n    y = 2* vara +1;\n    z = 3* varb +1;\n    \n    if(y < z){\n      \n      [list addObject:[NSNumber numberWithInt:y]];\n         \n      i++;\n      \n    }else if(y > z){\n      \n      \n      [list addObject:[NSNumber numberWithInt:z]];\n      \n      j++;\n      \n    }else{\n      \n      [list addObject:[NSNumber numberWithInt:y]];\n      \n      i++;\n      j++;\n      \n    }\n    \n    \n  }\n  \n  return [[list objectAtIndex:n] intValue];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216239,"user_id":null,"body":"int dbl_linear(int n) {\n  \n  NSMutableArray* list = [[NSMutableArray alloc] initWithCapacity:1];\n  int y = 0, z = 0, i = 0, j = 0;\n  \n  \n  [list addObject:[NSNumber numberWithInt:1]];\n  \n  while(list.count <= n){\n\n    y = 2* [[list objectAtIndex:i] intValue] +1;\n    z = 3* [[list objectAtIndex:j] intValue] +1;\n    \n    if(y < z){\n  \n      [list addObject:[NSNumber numberWithInt:y]];\n      i++;\n    }else if(y > z){\n      \n      [list addObject:[NSNumber numberWithInt:z]];\n      j++;\n    }else{\n      \n      [list addObject:[NSNumber numberWithInt:y]];\n      i++;\n      j++;\n    }\n  }\n  \n  \n  return [[list objectAtIndex:n] intValue];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216240,"user_id":null,"body":"int dbl_linear(int n) {\n    int *val = calloc(n , sizeof(int));\n    int yIndex =0, zIndex = 0 , yVal = 3, zVal = 4 , newVal;\n  \n    for (int i = 1; i < n; ++i) {\n    if (yVal < zVal || yVal == zVal) {\n      newVal = yVal;\n    } else {\n      newVal = zVal;\n    }\n    \n    val[i] = newVal;\n    if (newVal == yVal) { yVal = 2 * val[++yIndex] + 1; }\n    if (newVal == zVal) { zVal = 3 * val[++zIndex] + 1; }\n  }\n  \n  free(val);\n  return MIN(yVal, zVal);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216241,"user_id":null,"body":"int dbl_linear(int n) {\n  \/\/printf(\"%d\n\", n);\n  size_t memoSize = n*50;\n  int *memo = (int*)calloc(memoSize, sizeof(int));\n  memset(memo, 0, memoSize * sizeof(int));\n  \n  memo[0] = 1;\n  \n  NSMutableArray* running = [NSMutableArray new];\n  [running addObject:@(1)];\n  \n  int count = 0;\n  while ([running count] > 0) {\n    NSMutableArray* next = [NSMutableArray new];\n    for (int i = 0; i < [running count]; i++) {\n      NSInteger val = [running[i] integerValue];\n\n      NSInteger twice = val*2+1;\n      if (twice < memoSize) {\n        if (memo[twice] == 0) {\n          memo[twice] = 1;\n          [next addObject:@(twice)];\n          count++;\n        }\n      }\n\n      NSInteger timesThree = val*3+1;\n      if (timesThree < memoSize) {\n        if (memo[timesThree] == 0) {\n          memo[timesThree] = 1;\n          [next addObject:@(timesThree)];\n          count++;\n        }\n      }\n    }\n    \n    running = next;\n  }\n    \n  int idx = -1;\n  for (int i = 0; i < memoSize; i++) {\n    if (memo[i] == 1) {\n      \/\/printf(\"%d\n\", i);\n      idx++;\n    }\n    \n    if (idx == n) {\n      return i;\n    }\n  }\n  \n  \/\/assert(false);\n  return -1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216242,"user_id":null,"body":"int dbl_linear(int n) {\n    NSMutableArray *sequence = [[NSMutableArray alloc] init];\n    [sequence addObject: [NSNumber numberWithInt: 1]];\n    int a = 0;\n    int b = 0;\n    int q = 0;\n    \n    while ((a + b) < (n + q)) {\n      int y = 2 * [sequence[a] intValue] + 1;\n      int z = 3 * [sequence[b] intValue] + 1;\n      \n      if (y < z) {\n        [sequence addObject:[NSNumber numberWithInt: y]];\n        a++;\n      } else if (y > z) {\n        [sequence addObject:[NSNumber numberWithInt: z]];\n        b++;\n      } else {\n        [sequence addObject:[NSNumber numberWithInt: y]];\n        a++;\n        b++;\n        q++;\n      }\n    }\n    \n    return [[sequence lastObject] intValue];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56bdd0aec5dc03d7780010a5":[{"id":216243,"user_id":53,"body":"int nextHigher(int n) {\n  int r = n & -n;\n  int p = n + r;\n  int q = (n ^ p) \/ (4 * r);\n  return p | q;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216244,"user_id":168,"body":"int nextHigher(int n) {\n  int t = n & -n;\n  int h = n + t;\n  int l = (n ^ h) \/ (4 * t);\n  return h + l;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216245,"user_id":null,"body":"int nextHigher(int x) {\n  int rightOne, nextHigherOneBit, rightOnesPattern, next = 0;\n  if(x < 0)\n    return 0;\n  rightOne = x & -x;\n  nextHigherOneBit = x + rightOne;\n  rightOnesPattern = x ^ nextHigherOneBit;\n  rightOnesPattern = (rightOnesPattern)\/rightOne;\n  rightOnesPattern >>= 2;\n  next = nextHigherOneBit | rightOnesPattern; \n  return next;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216246,"user_id":null,"body":"int bitCount(int n) {\n  int res = 0;\n  while (n > 0) {\n    res++;\n    n &= n-1;\n  }\n  return res;\n}\n\nint nextHigher(int n) {\n  int nCount = bitCount(n);\n  while(bitCount(++n) != nCount);\n  return n;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216247,"user_id":null,"body":"int nextHigher(int n) {\n\tint i = 0;\n\tint j = 0;\n\tint temp = n;\n\twhile ((temp & 1) == 0) {\n\t\ti += 1;\n\t\ttemp = temp >> 1;\n\t} \/\/0 sum\n\twhile ((temp & 1) == 1) {\n\t\tj += 1;\n\t\ttemp = temp >> 1;\n\t} \/\/1 sum\n\ttemp = temp | 1;\n\ttemp = temp << 1;\n\tj -= 1;\n\twhile (i != 0) {\n\t\ttemp = temp << 1;\n\t\ti -= 1;\n\t}\n\twhile (j != 0) {\n\t\ttemp = temp << 1;\n\t\ttemp = temp | 1;\n\t\tj -= 1;\n\t}\n\n\t\n\t\n\treturn temp;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216248,"user_id":645,"body":"int nextHigher(int n) {\n  int o = n & -n;\n  return n + o | ((n ^ n + o) \/ o >> 2);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56c5847f27be2c3db20009c3":[{"id":216249,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n#define kListOfFruit @{ \\\n@1: @\"kiwi\", \\\n@2: @\"pear\", \\\n@3: @\"kiwi\", \\\n@4: @\"banana\", \\\n@5: @\"melon\", \\\n@6: @\"banana\", \\\n@7: @\"melon\", \\\n@8: @\"pineapple\", \\\n@9: @\"apple\", \\\n@10: @\"pineapple\", \\\n@11: @\"cucumber\", \\\n@12: @\"pineapple\", \\\n@13: @\"cucumber\", \\\n@14: @\"orange\", \\\n@15: @\"grape\", \\\n@16: @\"orange\", \\\n@17: @\"grape\", \\\n@18: @\"apple\", \\\n@19: @\"grape\", \\\n@20: @\"cherry\", \\\n@21: @\"pear\", \\\n@22: @\"cherry\", \\\n@23: @\"pear\", \\\n@24: @\"kiwi\", \\\n@25: @\"banana\", \\\n@26: @\"kiwi\", \\\n@27: @\"apple\", \\\n@28: @\"melon\", \\\n@29: @\"banana\", \\\n@30: @\"melon\", \\\n@31: @\"pineapple\", \\\n@32: @\"melon\", \\\n@33: @\"pineapple\", \\\n@34: @\"cucumber\", \\\n@35: @\"orange\", \\\n@36: @\"apple\", \\\n@37: @\"orange\", \\\n@38: @\"grape\", \\\n@39: @\"orange\", \\\n@40: @\"grape\", \\\n@41: @\"cherry\", \\\n@42: @\"pear\", \\\n@43: @\"cherry\", \\\n@44: @\"pear\", \\\n@45: @\"apple\", \\\n@46: @\"pear\", \\\n@47: @\"kiwi\", \\\n@48: @\"banana\", \\\n@49: @\"kiwi\", \\\n@50: @\"banana\", \\\n@51: @\"melon\", \\\n@52: @\"pineapple\", \\\n@53: @\"melon\", \\\n@54: @\"apple\", \\\n@55: @\"cucumber\", \\\n@56: @\"pineapple\", \\\n@57: @\"cucumber\", \\\n@58: @\"orange\", \\\n@59: @\"cucumber\", \\\n@60: @\"orange\", \\\n@61: @\"grape\", \\\n@62: @\"cherry\", \\\n@63: @\"apple\", \\\n@64: @\"cherry\", \\\n@65: @\"pear\", \\\n@66: @\"cherry\", \\\n@67: @\"pear\", \\\n@68: @\"kiwi\", \\\n@69: @\"pear\", \\\n@70: @\"kiwi\", \\\n@71: @\"banana\", \\\n@72: @\"apple\", \\\n@73: @\"banana\", \\\n@74: @\"melon\", \\\n@75: @\"pineapple\", \\\n@76: @\"melon\", \\\n@77: @\"pineapple\", \\\n@78: @\"cucumber\", \\\n@79: @\"pineapple\", \\\n@80: @\"cucumber\", \\\n@81: @\"apple\", \\\n@82: @\"grape\", \\\n@83: @\"orange\", \\\n@84: @\"grape\", \\\n@85: @\"cherry\", \\\n@86: @\"grape\", \\\n@87: @\"cherry\", \\\n@88: @\"pear\", \\\n@89: @\"cherry\", \\\n@90: @\"apple\", \\\n@91: @\"kiwi\", \\\n@92: @\"banana\", \\\n@93: @\"kiwi\", \\\n@94: @\"banana\", \\\n@95: @\"melon\", \\\n@96: @\"banana\", \\\n@97: @\"melon\", \\\n@98: @\"pineapple\", \\\n@99: @\"apple\", \\\n@100: @\"pineapple\" \\\n}\n\nint sumDigits(int n) {\n  int sum = 0;\n  int mod = 1;\n  while (n > 0) {\n    int digit = (n % (mod * 10)) \/ mod;\n    sum += digit;\n    n -= digit * mod;\n    mod *= 10;\n  }\n  return sum;\n}\n\nNSString *subtractSum(int n) {\n  NSDictionary* listOfFruit = kListOfFruit;\n  NSString *fruit = nil;\n  while (fruit == nil) {\n    int sum = sumDigits(n);\n    n -= sum;\n    fruit = listOfFruit[[NSNumber numberWithInt: n]];\n  }\n  return fruit;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216250,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *subtractSum(int n) {\n  \/\/ return fruit name like \"apple\"\n    int sum = 0;\n    int counter = n;\n    \n    while (counter > 0)\n    {\n      sum += counter % 10;\n      counter = counter \/ 10;\n    }\n    int result = n - sum;\n    \n    if (result % 9 == 0) {\n        return @\"apple\";\n    } else {\n        return @\"null\";\n    }\n    \n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216251,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint sum_of_digits(int n){\n    int sum=0;\n    while(n>0){\n        sum+=n%10;\n        n\/=10;\n    }\n    return sum;\n}\nNSString *subtractSum(int n) {\n    do{\n        n-=sum_of_digits(n);\n    }while(n>100);\n    switch(n){\n        case 1:case 3:case 24:case 26:case 47:case 49:case 68:case 70:case 91:case 93:\n            return @\"kiwi\";\n        case 2:case 21:case 23:case 42:case 44:case 65:case 67:case 69:case 88:\n            return @\"pear\";\n        case 4:case 6:case 25:case 29:case 48:case 50:case 71:case 73:case 92:case 94:\n            return @\"banana\";\n        case 5:case 7:case 28:case 30:case 32:case 51:case 53:case 74:case 76:case 95:\n            return @\"malon\";\n        case 8:case 10:case 12:case 31:case 33:case 52:case 56:case 75:case 79:case 98:case 100:\n            return @\"pineapple\";\n        case 9:case 18:case 27:case 36:case 45:case 54:case 63:case 72:case 81:case 90:case 99:\n            return @\"apple\";\n        case 11:case 13:case 57:case 59:case 80:\n            return @\"cucumber\";\n        case 14:case 16:case 35:case 37:case 39:case 58:case 60:case 83:\n            return @\"orange\";\n        case 15:case 17:case 19:case 38:case 40:case 61:case 82:case 84:case 86:\n            return @\"grape\";\n        case 20:case 22:case 41:case 43:case 62:case 64:case 66:case 85:case 87:case 89:\n            return @\"cherry\";\n    }\n}\n\n\n\n\n\n\n\n\n\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216252,"user_id":304,"body":"#import <Foundation\/Foundation.h>\n\nNSString *subtractSum(int n) {\n  \/\/ return fruit name like \"apple\"\n  return @\"apple\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216253,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *subtractSum(int n) {\n  return @\"apple\"; \/\/ return fruit name like \"apple\"\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216254,"user_id":76,"body":"#import <Foundation\/Foundation.h>\n\nNSString *subtractSum(int n) {\n  return @\"apple\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216255,"user_id":645,"body":"#import <Foundation\/Foundation.h>\n\nNSString *subtractSum(int n) {\n  return @\"apple\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56dbe0e313c2f63be4000b25":[{"id":216256,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *vertMirror(NSString *strng) {\n    NSMutableString *res = [[NSMutableString alloc] init];\n    NSArray *stringArray = [strng componentsSeparatedByString:@\"\n\"];\n    for (NSString *tmpStr in stringArray) {\n        NSMutableString * reverseString = [NSMutableString string];\n        for(int i = 0 ; i < tmpStr.length; i ++){\n            \/\/\u5012\u5e8f\u8bfb\u53d6\u5b57\u7b26\u5e76\u4e14\u5b58\u5230\u53ef\u53d8\u6570\u7ec4\u6570\u7ec4\u4e2d\n            unichar c = [tmpStr characterAtIndex:tmpStr.length- i -1];\n            [reverseString appendFormat:@\"%c\",c];\n        }\n        \n        if ([tmpStr isEqualToString:[stringArray lastObject]]) {\n            [res appendString:reverseString];\n            break;\n        }\n        \n        [reverseString appendString:@\"\n\"];\n        [res appendString:reverseString];\n    }\n    \n    return res;\n}\n\nNSString *horMirror(NSString *strng) {\n    NSMutableString *res = [[NSMutableString alloc] init];;\n    NSArray *stringAry = [strng componentsSeparatedByString:@\"\n\"];\n    for (int i = stringAry.count-1; i>=0; i--) {\n        [res appendString:stringAry[i]];\n        if (i==0) {\n            break;\n        }\n        [res appendString:@\"\n\"];\n    }\n    return res;\n}\n\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n    return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216257,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *reverseString(NSString *input) {\n  NSString *reverse = [[NSMutableString alloc] initWithCapacity: input.length];\n  NSInteger i = input.length - 1;\n  while (i >= 0) {\n    NSRange charRange = [input rangeOfComposedCharacterSequenceAtIndex: i];\n    [reverse appendString: [input substringWithRange: charRange]];\n    i = charRange.location - 1;\n  }\n  return reverse;\n}\n\nNSString *vertMirror(NSString *input) {\n  NSArray *lines = [input componentsSeparatedByString: @\"\n\"];\n  NSMutableArray *mirrored = [[NSMutableArray alloc] initWithCapacity: lines.count];\n  for (NSString *line in lines) {\n    [mirrored addObject: reverseString(line)];\n  }\n  return [mirrored componentsJoinedByString: @\"\n\"];\n}\n\nNSString *horMirror(NSString *input) {\n  NSArray *split = [input componentsSeparatedByString: @\"\n\"];\n  NSMutableArray *mirror = [[NSMutableArray alloc] initWithCapacity: split.count];\n  for (id line in [split reverseObjectEnumerator]) {\n    [mirror addObject: line];\n  }\n  return [mirror componentsJoinedByString: @\"\n\"];\n}\n\nNSString *oper(NSString *(*func)(NSString *), NSString *input) {\n  return func(input);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216258,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *vertMirror(NSString *strng) {\n  NSMutableString *returnStr = [ [ NSMutableString alloc ] init ];\n    NSMutableArray *splitArray = [ [ NSMutableArray alloc] initWithArray:[ strng componentsSeparatedByString:@\"\n\" ] ];\n    for ( int i = 0; i < splitArray.count; i++ )\n    {\n        NSMutableString *reverseStr = [ [ NSMutableString alloc ] init ];\n        NSString *str = [ splitArray objectAtIndex:i ];\n        for ( int j = (int)str.length - 1 ; j >= 0; j-- )\n        {\n            [ reverseStr appendString:[ str substringWithRange:NSMakeRange( j, 1 ) ] ];\n        }\n        [ returnStr appendString:reverseStr ];\n        if ( i != splitArray.count - 1 )\n        {\n            [ returnStr appendString:@\"\n\" ];\n        }\n    }    \n    return returnStr;\n}\nNSString *horMirror(NSString *strng) {\n  NSMutableString *returnStr = [ [ NSMutableString alloc ] init ];\n  NSMutableArray *splitArray = [ [ NSMutableArray alloc] initWithArray:[ strng componentsSeparatedByString:@\"\n\" ] ];\n    for ( int i = (int)splitArray.count - 1; i >= 0; i-- )\n    {\n        [ returnStr appendString:[ splitArray objectAtIndex:i ] ];\n        if ( i != 0 )\n        {\n            [ returnStr appendString:@\"\n\" ];\n        }\n    }\n  return returnStr;\n}\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n  return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216259,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *vertMirror(NSString *strng) {\n  \n  NSArray *listItems = [strng componentsSeparatedByString:@\"\n\"];\n  NSMutableArray *results = [NSMutableArray array];\n  for (NSString *word in listItems) {\n    NSMutableString *reversedString = [NSMutableString string];\n    NSInteger charIndex = [word length];   \n    while (charIndex > 0) {\n        charIndex--;\n        NSRange subStrRange = NSMakeRange(charIndex, 1);\n        [reversedString appendString:[word substringWithRange:subStrRange]];\n      }\n    [results addObject: reversedString];\n  }\n  return [results componentsJoinedByString:@\"\n\"];\n}\n\nNSString *horMirror(NSString *strng) {\n  NSArray *listItems = [strng componentsSeparatedByString:@\"\n\"];\n  NSArray * reversed = [[listItems reverseObjectEnumerator] allObjects];\n  return [reversed componentsJoinedByString: @\"\n\"];\n}\n\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n  return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216260,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *vertMirror(NSString *str) {\n  \/\/ Your code here\n  NSArray *vertArr = [str componentsSeparatedByString:@\"\n\"];\n    NSMutableString *vertStr = [[NSMutableString alloc]init];\n    for (NSString *oldStr in vertArr) {\n        for (long i=oldStr.length-1; i>=0; i--) {\n            NSRange range = NSMakeRange(i, 1);\n            NSString *subStr = [oldStr substringWithRange:range];\n            [vertStr appendString:subStr];\n        }\n        [vertStr appendString:@\"\n\"];\n    }\n    NSRange range = NSMakeRange(vertStr.length-1, 1);\n    [vertStr deleteCharactersInRange:range];\n    return vertStr;\n}\nNSString *horMirror(NSString *str) {\n  \/\/ Your code here\n  NSArray *horArr = [str componentsSeparatedByString:@\"\n\"];\n    NSMutableString *horStr = [[NSMutableString alloc]init];\n    for (long i=horArr.count; i>0; i--) {\n        [horStr appendString:[NSString stringWithFormat:@\"%@\n\",horArr[i-1]]];\n    }\n    NSRange range = NSMakeRange(horStr.length-1, 1);\n    [horStr deleteCharactersInRange:range];\n    return horStr;\n}\nNSString *oper(NSString *f, NSString *s) {\n  \/\/ Your code here\n  NSString* (*funcP)(NSString *);\n  funcP = f;\n  NSString *resultStr = funcP(s);\n  return resultStr;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216261,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *vertMirror(NSString *strng) {\n    NSMutableArray *array = [strng componentsSeparatedByString:@\"\n\"];\n    \n    for(int i = 0; i < [array count]; i++) {\n        NSString *currentString = array[i];\n        \n        NSString *reversedString = [NSMutableString stringWithCapacity:[currentString length]];\n\n        for (int i = [currentString length] - 1; i >= 0; i--){\n            reversedString = [reversedString stringByAppendingFormat:@\"%c\", [currentString characterAtIndex:i]];\n        }\n      \n         array[i] = reversedString;\n    }\n    \n    return [array componentsJoinedByString:@\"\n\"];\n}\n\n\/\/hor_mirror(s) => \"mnop\nijkl\nefgh\nabcd\"\nNSString *horMirror(NSString *strng) {\n    NSMutableArray *array = [strng componentsSeparatedByString:@\"\n\"];\n    for(int i = 0; i < [array count] \/ 2; i++) {\n        int j = [array count] - i - 1;\n\n        [array exchangeObjectAtIndex:i withObjectAtIndex:j];\n    }\n    \n    return [array componentsJoinedByString:@\"\n\"];\n}\n\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n    return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216262,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *vertMirror(NSString *s) {\n  NSArray *arr = [s componentsSeparatedByString: @\"\n\"];\n  for (int i = 0; i < [arr count]; i++) {\n    NSString *myString = arr[i];\n    NSMutableString *reversedString = [NSMutableString string];\n    NSInteger charIndex = [myString length];\n    while (myString && charIndex > 0) {\n        charIndex--;\n        NSRange subStrRange = NSMakeRange(charIndex, 1);\n        [reversedString appendString:[myString substringWithRange:subStrRange]];\n    }\n    \n    NSMutableArray *ar1update = [arr mutableCopy];\n    ar1update[i] = reversedString;\n    arr = [NSArray arrayWithArray:ar1update];\n  }\n  return [arr componentsJoinedByString:@\"\n\"];\n}\n\nNSString *horMirror(NSString *s) {\n  NSArray *arr = [s componentsSeparatedByString: @\"\n\"];\n  NSArray *reversedArray = [[arr reverseObjectEnumerator] allObjects];\n  return [reversedArray componentsJoinedByString:@\"\n\"];\n}\n\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n  return f(s);\n}\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216263,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *vertMirror(NSString *strng) {\n    NSMutableString *res = [[NSMutableString alloc] init];\n    NSArray *stringArray = [strng componentsSeparatedByString:@\"\n\"];\n    for (NSString *tmpStr in stringArray) {\n        NSMutableString * reverseString = [NSMutableString string];\n        for(int i = 0 ; i < tmpStr.length; i ++){\n            \n            unichar c = [tmpStr characterAtIndex:tmpStr.length- i -1];\n            [reverseString appendFormat:@\"%c\",c];\n        }\n        \n        if ([tmpStr isEqualToString:[stringArray lastObject]]) {\n            [res appendString:reverseString];\n            break;\n        }\n        \n        [reverseString appendString:@\"\n\"];\n        [res appendString:reverseString];\n    }\n    \n    return res;\n}\n\nNSString *horMirror(NSString *strng) {\n    NSMutableString *res = [[NSMutableString alloc] init];;\n    NSArray *stringAry = [strng componentsSeparatedByString:@\"\n\"];\n    for (int i = stringAry.count-1; i>=0; i--) {\n        [res appendString:stringAry[i]];\n        if (i==0) {\n            break;\n        }\n        [res appendString:@\"\n\"];\n    }\n    return res;\n}\n\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n    return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216264,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSInteger posOfNewLine(NSString *str) {\n  return [str rangeOfString:@\"\n\"].location;\n}\n\nNSString *vertMirror(NSString *str) {\n  NSInteger n = posOfNewLine(str);\n  int len = n*n+n-1;\n  unichar chars[len+1];\n  \n  [str getCharacters:chars range:NSMakeRange(0, len)];\n  chars[len] = 0x0;\n  \n  unichar temp;\n  \n  int i, i2;\n  for (int r = 0; r < n; ++r) {\n    for (int c = 0; c < n \/ 2; ++c) {\n      i = r * (n+1);\n      i2 = i + n - 1 - c;\n      i += c;\n      \n      temp = chars[i];\n      chars[i] = chars[i2];\n      chars[i2] = temp;\n    }\n  }\n\n  return [NSString stringWithCharacters:chars length:n*n+n-1];\n}\n\nNSString *horMirror(NSString *str) {\n  NSInteger n = posOfNewLine(str);\n  NSMutableString *result = [NSMutableString stringWithCapacity:[str length]];\n  \n  NSRange range = NSMakeRange(0, n);\n  for (int i = n - 1; i >= 0; --i) {\n    range.location = (n + 1) * i;\n    [result appendString:[str substringWithRange:range]];\n    if (i != 0) \n      [result appendString:@\"\n\"];\n  }\n  \n  return [result copy];\n}\n\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n  return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216265,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *vertMirror(NSString *strng) {\n  \/\/dissect the string\n    NSArray *splitString = [strng componentsSeparatedByString:@\"\n\"];\n    \/\/Create return string\n    NSString *verMirrorStr = @\"\";\n    for (NSString *component in splitString) {\n        NSMutableString *result = [NSMutableString stringWithString:@\"\"];\n        for(int i = (int)[component length]-1; i >= 0; i--) {\n            [result appendFormat:@\"%c\", [component characterAtIndex:i]];\n        }\n        verMirrorStr = [verMirrorStr stringByAppendingString:[NSString stringWithFormat:@\"%@%@\", result, component != [splitString lastObject] ? @\"\n\": @\"\"]];\n    }\n    \n    return verMirrorStr;\n}\nNSString *horMirror(NSString *strng) {\n  \/\/Create reversed array\n    NSArray *reversedArray = [[[strng componentsSeparatedByString:@\"\n\"] reverseObjectEnumerator] allObjects];\n    \/\/Create return string\n    NSString *horMirrorStr = @\"\";\n    for (int i = 0; i < [reversedArray count]; i++) {\n        \/\/build up the return string and add a back space if we're not on the last iteration\n        horMirrorStr = [horMirrorStr stringByAppendingString:[NSString stringWithFormat:@\"%@%@\", [reversedArray objectAtIndex:i], i < [reversedArray count]-1 ? @\"\n\": @\"\"]];\n    }\n    return horMirrorStr;\n}\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n  \/\/ Your code here\n  return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56dbe7f113c2f63570000b86":[{"id":216266,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *rot(NSString *strng) {\n  NSArray<NSString*> *arr = [strng componentsSeparatedByString:@\"\n\"];\n  NSMutableArray<NSString*> *reversedArr = [NSMutableArray array];\n  [arr enumerateObjectsUsingBlock:^(NSString * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n    NSMutableString *reversedString = [NSMutableString stringWithCapacity:obj.length];\n    for(int i = obj.length - 1; i >= 0 ; i--) {\n      NSString *substring = [obj substringWithRange:NSMakeRange(i, 1)];\n      [reversedString appendString:substring];\n    }\n    [reversedArr insertObject:reversedString atIndex:0];\n  }];\n  return [reversedArr componentsJoinedByString:@\"\n\"];\n}\nNSString *selfieAndRot(NSString *strng) {\n  NSArray<NSString*> *arr = [strng componentsSeparatedByString:@\"\n\"];\n  NSMutableArray<NSString*> *forwardArr = [NSMutableArray array];\n  NSMutableArray<NSString*> *reversedArr = [NSMutableArray array];\n  [arr enumerateObjectsUsingBlock:^(NSString * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n    NSMutableString *reversedString = [NSMutableString stringWithCapacity:obj.length];\n    NSMutableArray<NSString*> *dots = [NSMutableArray array];\n    for(int i = obj.length - 1; i >= 0 ; i--) {\n      NSString *substring = [obj substringWithRange:NSMakeRange(i, 1)];\n      [reversedString appendString:substring];\n      [dots addObject:@\".\"];\n    }\n    NSString *dotsString = [dots componentsJoinedByString:@\"\"];\n    [forwardArr addObject:[obj stringByAppendingString:dotsString]];\n    [reversedArr insertObject:[dotsString stringByAppendingString:reversedString] atIndex:0];\n  }];\n  NSString *forwardString = [forwardArr componentsJoinedByString:@\"\n\"];\n  NSString *reverseString = [reversedArr componentsJoinedByString:@\"\n\"];\n  return [@[forwardString, @\"\n\", reverseString] componentsJoinedByString:@\"\"];\n}\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n  return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216267,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *rot(NSString *strng)\n{\n  const NSUInteger strng_len = strng.length;\n  NSMutableString *output = [NSMutableString new];\n  \n  for(NSUInteger i = strng_len ; i > 0; --i){\n    [output appendFormat:@\"%C\", [strng characterAtIndex:i - 1]];\n  }\n  return output;\n}\n\nNSString *selfieAndRot(NSString *strng)\n{\n  NSMutableString *output = [NSMutableString new];\n  const NSUInteger strng_len = strng.length;\n  \n  for(NSUInteger i = 0; i < strng_len; ++i){\n    NSUInteger j = 0;\n    for(; i+j < strng_len; ++j){\n      if([strng  characterAtIndex:i+j] == '\n'){\n        break;\n      }\n    } \n \n    if(j != 0){\n     NSString *substring = [strng substringWithRange:NSMakeRange(i, j)];\n     [output appendString:substring];\n     for(NSUInteger k = 0; k < j; ++k){\n       [output appendString:@\".\"];\n     }\n     if(i + j < strng_len){\n       [output appendString:@\"\n\"];\n     }\n     i += j;  \n    }\n  }\n\n  NSString *output_rot = rot(output);\n  [output appendString:@\"\n\"];\n  [output appendString:output_rot];\n  return output;\n}\n\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n  return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216268,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *rot(NSString *strng) {\n  \/\/Create reversed array\n    NSArray *reversedArray = [[[strng componentsSeparatedByString:@\"\n\"] reverseObjectEnumerator] allObjects];\n    \/\/Create return string\n    NSString *rotStr = @\"\";\n    for (NSString *component in reversedArray) {\n        NSMutableString *result = [NSMutableString stringWithString:@\"\"];\n        for(int i = (int)[component length]-1; i >= 0; i--) {\n            [result appendFormat:@\"%c\", [component characterAtIndex:i]];\n        }\n        rotStr = [rotStr stringByAppendingString:[NSString stringWithFormat:@\"%@%@\", result, component != [reversedArray lastObject] ? @\"\n\": @\"\"]];\n    }\n    \n    return rotStr;\n}\nNSString *selfieAndRot(NSString *strng) {\n  \/\/dissect the string\n    NSArray *splitString = [strng componentsSeparatedByString:@\"\n\"];\n    \/\/Create reversed array\n    NSArray *reversedArray = [[splitString reverseObjectEnumerator] allObjects];\n    \/\/Create return string\n    NSString *selfieAndRotStr = @\"\";\n    for (NSString *component in splitString) {\n        selfieAndRotStr = [selfieAndRotStr stringByAppendingString:[NSString stringWithFormat:@\"%@%@%@\", component, [@\"\" stringByPaddingToLength:[component length] withString: @\".\" startingAtIndex:0], @\"\n\"]];\n    }\n    for (NSString *component in reversedArray) {\n        NSMutableString *result = [NSMutableString stringWithString:@\"\"];\n        for(int i = (int)[component length]-1; i >= 0; i--) {\n            [result appendFormat:@\"%c\", [component characterAtIndex:i]];\n        }\n        selfieAndRotStr = [selfieAndRotStr stringByAppendingString:[NSString stringWithFormat:@\"%@%@%@\", [@\"\" stringByPaddingToLength:[result length] withString: @\".\" startingAtIndex:0], result, component != [reversedArray lastObject] ? @\"\n\": @\"\"]];\n    }\n    \n    return selfieAndRotStr;\n}\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n  \/\/ Your code here\n  return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216269,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *horMirror(NSString *strng);\nNSString *vertMirror(NSString *strng);\nNSString *rot(NSString *strng);\nNSString *selfieAndRot(NSString *strng);\nNSString *oper(NSString *(*f)(NSString *), NSString *s);\n\nNSString *rot(NSString *strng) {\n    return vertMirror(horMirror(strng));\n}\n\nNSString *selfieAndRot(NSString *strng) {\n    NSString *rotated = rot(strng);\n    NSMutableArray *arraFir = [[NSMutableArray alloc] init];\n    NSMutableArray *arraSec = [[NSMutableArray alloc] init];\n    arraFir = [[NSMutableArray alloc] initWithArray:[strng componentsSeparatedByString:@\"\n\"]];\n    arraSec = [[NSMutableArray alloc] initWithArray:[rotated componentsSeparatedByString:@\"\n\"]];\n    NSMutableString *dots = [[NSMutableString alloc] init];\n    for (int i=0; i<[arraFir[0] length]; i++) {\n        [dots appendString:@\".\"];\n    }\n    for (int i=0; i<[arraFir count]; i++) {\n        [arraFir replaceObjectAtIndex:i withObject:[[NSString alloc] initWithFormat:@\"%@%@\", [arraFir objectAtIndex:i], dots]];\n    }\n    for (int i=0; i<[arraSec count]; i++) {\n        [arraSec replaceObjectAtIndex:i withObject:[[NSString alloc] initWithFormat:@\"%@%@\", dots, [arraSec objectAtIndex:i]]];\n    }\n    NSMutableString *final = [[NSMutableString alloc] init];\n    for (NSString *value in arraFir) {\n        [final appendString:[NSString stringWithFormat:@\"%@\n\", value]];\n    }\n    for (NSString *value in arraSec) {\n        [final appendString:[NSString stringWithFormat:@\"%@\n\", value]];\n    }\n    final = [NSMutableString stringWithString:[final substringToIndex:[final length] - 1]];\n    return final;\n}\n\nNSString *horMirror(NSString *strng) {\n    NSArray *arra = [[NSArray alloc] init];\n    arra = [strng componentsSeparatedByString:@\"\n\"];\n    NSArray *reverse = [[arra reverseObjectEnumerator] allObjects];\n    NSMutableString *final = [[NSMutableString alloc] init];\n    for (NSString *value in reverse) {\n        [final appendString:[NSString stringWithFormat:@\"%@\n\", value]];\n    }\n    final = [[NSMutableString alloc] initWithString:[final substringToIndex:[final length] - 1]];\n    return final;\n}\n\nNSString *vertMirror(NSString *strng) {\n    NSArray *arra = [[NSArray alloc] init];\n    arra = [strng componentsSeparatedByString:@\"\n\"];\n    NSMutableArray *finArra = [[NSMutableArray alloc] init];\n    for (NSString *value in arra) {\n        const char *str = [value UTF8String];\n        unsigned long val = strlen(str);\n        char* ptr = (char*)malloc(val+1);\n        for (unsigned long i = 0; i<val; i++) {\n            *(ptr + val - i - 1) = *str;\n            str++;\n        }\n        ptr[val] = '\\0';\n        NSString* new = [[NSString alloc] initWithCString:ptr encoding:NSASCIIStringEncoding];\n        free(ptr);\n        [finArra addObject:new];\n    }\n    NSMutableString *final = [[NSMutableString alloc] init];\n    for (NSString *value in finArra) {\n        [final appendString:[NSString stringWithFormat:@\"%@\n\", value]];\n    }\n    final = [[NSMutableString alloc] initWithString:[final substringToIndex:[final length] - 1]];\n    return final;\n}\n\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n    return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216270,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *rot(NSString *strng) {\n    NSMutableString *mResultString = [NSMutableString stringWithCapacity:[strng length]];\n    NSUInteger length = [strng length];\n    while (length > 0) {\n      length--;\n      [mResultString appendString:[strng substringWithRange:NSMakeRange(length, 1)]];\n    }\n    return [mResultString copy];\n}\n\nNSString *selfieAndRot(NSString *strng) {\n    NSArray *mArrayOfSubstrings = [strng componentsSeparatedByString:@\"\n\"];\n    NSString *dots = [@\"\" stringByPaddingToLength:[[mArrayOfSubstrings firstObject] length] withString:@\".\" startingAtIndex:0];\n    NSString *newSeparator = [dots stringByAppendingString:@\"\n\"];\n    NSString *selfie = [[mArrayOfSubstrings componentsJoinedByString:newSeparator] stringByAppendingString:dots];\n    NSString *invertedString = rot(selfie);\n    return [[selfie stringByAppendingString:@\"\n\"] stringByAppendingString:invertedString];\n}\n\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n    return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216271,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *rot(NSString *strng) {\n  \/\/ Your code here\n  NSMutableString *retStr = [NSMutableString string];\n    NSArray *array =[strng componentsSeparatedByString:@\"\n\"];\n    NSUInteger count = array.count;\n    [retStr appendString:[array componentsJoinedByString:@\"\"]];\n    NSMutableString *result = [NSMutableString string];\n    \n    for(int i =0;i<count;i++){\n        for(int j=0;j<count;j++){\n            char c2 = [retStr characterAtIndex:((count-i-1)*count+count-j-1)];\n            [result appendFormat:@\"%c\",c2];\n        }\n        if(i!=array.count-1)\n            [result appendFormat:@\"\n\"];\n        \n    }\n    \n    return result;\n}\nNSString *selfieAndRot(NSString *strng) {\n  \/\/ Your code here\n  NSMutableString *retStr = [NSMutableString string];\n    NSArray *array1 =[strng componentsSeparatedByString:@\"\n\"];\n    NSArray *array2 =[rot(strng) componentsSeparatedByString:@\"\n\"];\n    NSString *dot =@\"\";\n    for(int i=0;i<[array1[0]length];i++){\n        dot = [dot stringByAppendingString:@\".\"];\n    }\n    [retStr appendString:[array1 componentsJoinedByString:[NSString stringWithFormat:@\"%@\n\",dot]]];\n    [retStr appendFormat:@\"%@\n\",dot];\n    for(int i =0;i<array2.count;i++){\n        [retStr appendFormat:@\"%@%@\",dot, array2[i]];\n        if(i!=array1.count-1)\n            [retStr appendFormat:@\"\n\"];\n    }\n    \n    return retStr;\n}\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n  \/\/ Your code here\n  return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216272,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *rot(NSString *strng) {\n  NSMutableString *s = [NSMutableString string];\n  for (NSUInteger i = strng.length; i > 0; i--) {\n    [s appendString: [strng substringWithRange: NSMakeRange(i-1, 1)]];\n  }\n  return s;\n}\nNSString *selfieAndRot(NSString *strng) {\n  NSMutableArray *arr = [strng componentsSeparatedByString: @\"\n\"];\n  NSString *dots = [@\"\" stringByPaddingToLength:arr.count withString: @\".\" startingAtIndex: 0];\n  for (int i = 0; i < arr.count; i++) {\n    arr[i] = [arr[i] stringByAppendingString: dots];\n  }\n  NSString *s = [arr componentsJoinedByString: @\"\n\"];\n  NSMutableString *r = [NSMutableString string];\n  for(NSUInteger i = s.length; i > 0; i--) {\n    [r appendString: [s substringWithRange: NSMakeRange(i-1, 1)]];\n  }\n  NSString *result = [s stringByAppendingString: @\"\n\"];\n  result = [result stringByAppendingString: r];\n  return result;\n}\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n  return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216273,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *rot(NSString *strng) {\n    NSMutableString *result = [NSMutableString string];\n    NSInteger charIndex = [strng length];\n    while (charIndex > 0) {\n        charIndex--;\n        NSRange subStrRange = NSMakeRange(charIndex, 1);\n        [result appendString:[strng substringWithRange:subStrRange]];\n    }\n    return result;\n}\nNSString *selfieAndRot(NSString *strng) {\n    NSMutableArray *l = [strng componentsSeparatedByString:@\"\n\"];\n    NSString *dots = [@\"\" stringByPaddingToLength:[l count] withString: @\".\" startingAtIndex:0];\n    for (int i = 0; i < [l count]; i++) {\n        l[i] = [l[i] stringByAppendingString:dots];\n    }\n    NSString *s = [l componentsJoinedByString:@\"\n\"];\n    NSMutableString *r = [NSMutableString string];\n    NSInteger charIndex = [s length];\n    while (charIndex > 0) {\n        charIndex--;\n        NSRange subStrRange = NSMakeRange(charIndex, 1);\n        [r appendString:[s substringWithRange:subStrRange]];\n    }\n    NSString *result = [s stringByAppendingString:@\"\n\"];\n    result = [result stringByAppendingString:r];\n    return result;\n}\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n    return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216274,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString *rot(NSString *strng) {\n    NSMutableString *reversedString = [NSMutableString string];\n    NSInteger charIndex = [strng length];\n    while (charIndex > 0) {\n        charIndex--;\n        NSRange subStrRange = NSMakeRange(charIndex, 1);\n        [reversedString appendString:[strng substringWithRange:subStrRange]];\n    }\n    NSString *result = (NSString *)reversedString;\n    return result;\n}\nNSString *selfieAndRot(NSString *strng) {\n    NSArray *rows = [strng componentsSeparatedByString: @\"\n\"];\n    NSArray *r = [NSMutableArray array];\n    for (int i = 0; i < [rows count]; i++) {\n        char *cstring = malloc(sizeof(char) * (1 + 2 * [rows[i] length]));\n        for (int j = 0; j < [rows[i] length]; j++) {\n            *(cstring + j) = [rows[i] characterAtIndex: j];\n        }\n        for (int j = [rows[i] length]; j < 2 * [rows[i] length]; j++) {\n            *(cstring + j) = '.';\n        }\n        *(cstring + 2 * [rows[i] length]) = '\\0';\n        [r addObject: [NSString stringWithCString: cstring]];\n        free(cstring);\n    }\n    for (int i = [rows count] - 1; i >= 0; i--) {\n        char *cstring = malloc(sizeof(char) * (1 + 2 * [rows[i] length]));\n        for (int _ = 0; _ < [rows[i] length]; _++) {\n            *(cstring + _) = '.';\n        }\n        for (int j = 0; j < [rows[i] length]; j++) {\n            *(cstring + j + [rows[i] length]) = [rows[i] characterAtIndex: [rows[i] length] - 1 - j];\n        }\n        *(cstring + 2 * [rows[i] length]) = '\\0';\n        [r addObject: [NSString stringWithCString: cstring]];\n        free(cstring);\n    }\n    NSString *result = [r componentsJoinedByString: @\"\n\"];\n    return result;\n}\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n    return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216275,"user_id":17,"body":"#import <Foundation\/Foundation.h>\n\nNSString *rot(NSString *s) {\n  char *cstring = malloc(sizeof(char) * (1 + [s length]));\n  for (int i = 0; i < [s length]; i++) *(cstring + i) = [s characterAtIndex: [s length] - 1 - i];\n  *(cstring + [s length]) = '\\0';\n  NSString *result = [[NSString alloc] initWithCString: cstring];\n  free(cstring);\n  return result;\n}\nNSString *selfieAndRot(NSString *s) {\n  NSArray *rows = [s componentsSeparatedByString: @\"\n\"], *result = [NSMutableArray array];\n  for (int i = 0; i < [rows count]; i++) {\n    char *cstring = malloc(sizeof(char) * (1 + 2 * [rows[i] length]));\n    for (int j = 0; j < [rows[i] length]; j++) *(cstring + j) = [rows[i] characterAtIndex: j];\n    for (int j = [rows[i] length]; j < 2 * [rows[i] length]; j++) *(cstring + j) = '.';\n    *(cstring + 2 * [rows[i] length]) = '\\0';\n    [result addObject: [NSString stringWithCString: cstring]];\n    free(cstring);\n  }\n  for (int i = [rows count] - 1; i >= 0; i--) {\n    char *cstring = malloc(sizeof(char) * (1 + 2 * [rows[i] length]));\n    for (int _ = 0; _ < [rows[i] length]; _++) *(cstring + _) = '.';\n    for (int j = 0; j < [rows[i] length]; j++) *(cstring + j + [rows[i] length]) = [rows[i] characterAtIndex: [rows[i] length] - 1 - j];\n    *(cstring + 2 * [rows[i] length]) = '\\0';\n    [result addObject: [NSString stringWithCString: cstring]];\n    free(cstring);\n  }\n  return [result componentsJoinedByString: @\"\n\"];\n}\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n  return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56dbeec613c2f63be4000be6":[{"id":216276,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *diag1Sym(NSString *strng) {\n  NSMutableString* ans = [[NSMutableString alloc] init];\n  NSArray * arr = [strng componentsSeparatedByString:@\"\n\"];\n  for(int i = 0;i<[arr[0] length];i++){\n    for(int j = 0;j<[arr count];j++){\n      [ans appendFormat:@\"%c\",[arr[j] characterAtIndex:i]];\n    }\n    if(i!=[arr[0] length]-1){\n        [ans appendString:@\"\n\"];\n    }\n  }\n  return [NSString stringWithFormat:@\"%@\",ans];\n }\nNSString *rot90Clock(NSString *strng) {\n  NSMutableString* ans = [[NSMutableString alloc] init];\n  NSArray * arr = [strng componentsSeparatedByString:@\"\n\"];\n  for(int i = 0;i<[arr[0] length];i++){\n    for(int j = [arr count]-1;j>=0;j--){\n      [ans appendFormat:@\"%c\",[arr[j] characterAtIndex:i]];\n    }\n    if(i!=[arr[0] length]-1){\n        [ans appendString:@\"\n\"];\n    }\n  }\n  return [NSString stringWithFormat:@\"%@\",ans];\n}\nNSString *selfieAndDiag1(NSString *strng) {\n  NSMutableString* ans = [[NSMutableString alloc] init];\n  NSArray * arr = [strng componentsSeparatedByString:@\"\n\"];\n  for(int i = 0;i<[arr[0] length];i++){\n    [ans appendFormat:@\"%@|\",arr[i]];\n    for(int j = 0;j<[arr count];j++){\n      [ans appendFormat:@\"%c\",[arr[j] characterAtIndex:i]];\n    }\n    if(i!=[arr[0] length]-1){\n        [ans appendString:@\"\n\"];\n    }\n  }\n  return [NSString stringWithFormat:@\"%@\",ans];\n}\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n  return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216277,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *diag1Sym(NSString *strng) {\n  NSArray *stringArray = [strng componentsSeparatedByString: @\"\n\"];\n  NSMutableString *result = [NSMutableString string];\n\n  for (int i = 0; i < [stringArray[0] length]; i++) {\n    for (int j = 0; j < [stringArray count]; j++) {\n      char c = [stringArray[j] characterAtIndex:i];\n      [result appendFormat:@\"%c\", c];\n    }\n    if (i == [stringArray[0] length] - 1) {}\n    else { [result appendFormat:@\"\n\"]; }\n  }\n  return result;\n}\nNSString *rot90Clock(NSString *strng) {\n    NSArray *stringArray = [strng componentsSeparatedByString: @\"\n\"];\n  NSMutableString *result = [NSMutableString string];\n\n  for (int i = 0; i < [stringArray[0] length]; i++) {\n    for (int j = [stringArray count] - 1; j >= 0; j--) {\n      char c = [stringArray[j] characterAtIndex:i];\n      [result appendFormat:@\"%c\", c];\n    }\n    if (i == [stringArray[0] length] - 1) {}\n    else { [result appendFormat:@\"\n\"]; }\n  }\n  return result;\n}\nNSString *selfieAndDiag1(NSString *strng) {\n  NSString *s = diag1Sym(strng);\n  NSArray *sArray = [s componentsSeparatedByString: @\"\n\"];\n  NSArray *stringArray3 = [strng componentsSeparatedByString: @\"\n\"];\n  NSMutableString *result3 = [NSMutableString string];\n \n  for (int i = 0; i < [stringArray3 count]; i++) {\n    [result3 appendFormat:@\"%@\", stringArray3[i]];\n    [result3 appendFormat:@\"|\"];\n    [result3 appendFormat:@\"%@\", sArray[i]];\n    [result3 appendFormat:@\"\n\"];\n   \n  }\n  [result3 deleteCharactersInRange:NSMakeRange([result3 length]-1, 1)];\n  return result3;\n}\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n  return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216278,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *oper(NSString *(*f)(NSString *), NSString *s);\nNSString *vertMirror(NSString *strng);\nNSString *diag1Sym(NSString *strng);\nNSString *rot90Clock(NSString *strng);\nNSString *selfieAndDiag1(NSString *strng);\n\nNSString *diag1Sym(NSString *strng) {\n    NSArray *arra = [[NSArray alloc] init];\n    arra = [[NSMutableArray alloc] initWithArray:[strng componentsSeparatedByString:@\"\n\"]];\n    NSMutableString *final = [[NSMutableString alloc] init];\n    for (int i=0; i<[arra[0] length]; i++) {\n        for (int j=0; j<[arra count]; j++) {\n            unichar ptr = [[arra objectAtIndex:j] characterAtIndex:i];\n            const unichar* ptrTo = &ptr;\n            [final appendString:[NSString stringWithCharacters:ptrTo length:1]];\n        }\n        [final appendString:@\"\n\"];\n    }\n    final = [[NSMutableString alloc] initWithString:[final substringToIndex:[final length]-1]];\n    return final;\n}\n\nNSString *rot90Clock(NSString *strng) {\n    return vertMirror(diag1Sym(strng));\n}\n\nNSString *selfieAndDiag1(NSString *strng) {\n    NSString *swrmd = diag1Sym(strng);\n    NSArray *arraFir = [[NSArray alloc] init];\n    NSArray *arraSec = [[NSArray alloc] init];\n    arraFir = [strng componentsSeparatedByString:@\"\n\"];\n    arraSec = [swrmd componentsSeparatedByString:@\"\n\"];\n    NSMutableString *final = [[NSMutableString alloc] init];\n    for (int i=0; i<[arraFir count]; i++) {\n        [final appendString:[[NSString alloc] initWithFormat:@\"%@|%@\n\", [arraFir objectAtIndex:i], [arraSec objectAtIndex:i]]];\n    }\n    final = [[NSMutableString alloc] initWithString:[final substringToIndex:[final length] - 1]];\n    return final;\n}\n\nNSString *vertMirror(NSString *strng) {\n    NSArray *arra = [[NSArray alloc] init];\n    arra = [strng componentsSeparatedByString:@\"\n\"];\n    NSMutableArray *finArra = [[NSMutableArray alloc] init];\n    for (NSString *value in arra) {\n        const char *str = [value UTF8String];\n        unsigned long val = strlen(str);\n        char* ptr = (char*)malloc(val+1);\n        for (unsigned long i = 0; i<val; i++) {\n            *(ptr + val - i - 1) = *str;\n            str++;\n        }\n        ptr[val] = '\\0';\n        NSString* new = [[NSString alloc] initWithCString:ptr encoding:NSASCIIStringEncoding];\n        free(ptr);\n        [finArra addObject:new];\n    }\n    NSMutableString *final = [[NSMutableString alloc] init];\n    for (NSString *value in finArra) {\n        [final appendString:[NSString stringWithFormat:@\"%@\n\", value]];\n    }\n    final = [[NSMutableString alloc] initWithString:[final substringToIndex:[final length] - 1]];\n    return final;\n}\n\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n    return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216279,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString *diag1Sym(NSString *strng) {\n  NSArray *a = [strng componentsSeparatedByString: @\"\n\"];\n  NSMutableArray *ma = [NSMutableArray array];\n  int n = [a count];\n  for (int i=0; i<n; i++) {\n    NSMutableString* s = [NSMutableString string];\n    for (int j=0; j<n; j++) \n      [s appendFormat:  @\"%c\", [a[j] characterAtIndex: i]];\n    ma[i] = s;  \n  }  \n  return [ma componentsJoinedByString: @\"\n\"];\n}\nNSString *rot90Clock(NSString *strng) {\n  NSArray *a = [strng componentsSeparatedByString: @\"\n\"];\n  NSMutableArray *ma = [NSMutableArray array];\n  int n = [a count];\n  for (int i=0; i<[a count]; i++) {\n    NSMutableString* s = [NSMutableString string];\n    for (int j=0; j<[a count]; j++) \n      [s appendFormat: @\"%c\", [a[n-j-1] characterAtIndex: i]];\n    ma[i] = s;  \n  }  \n  return [ma componentsJoinedByString: @\"\n\"];\n}\nNSString *selfieAndDiag1(NSString *strng) {\n  NSArray *a = [strng componentsSeparatedByString: @\"\n\"];\n  NSMutableArray *ma = [NSMutableArray array];\n  int n = [a count];\n  for (int i=0; i<n; i++) {\n    NSMutableString* s = [NSMutableString string];\n    [s appendString: a[i]]; [s appendFormat: @\"%c\", '|'];\n    for (int j=0; j<n; j++) \n      [s appendFormat: @\"%c\", [a[j] characterAtIndex: i]];\n    ma[i] = s;  \n  }  \n  return [ma componentsJoinedByString: @\"\n\"];\n}\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n  return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216280,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *diag1Sym(NSString *strng) {\n  NSArray *mArrayOfSubstrings = [strng componentsSeparatedByString:@\"\n\"];\n  NSMutableString *mStringResult = [NSMutableString string];\n  for (int y = 0; y < [[mArrayOfSubstrings firstObject] length]; y++) {\n    for (int x = 0; x < [[mArrayOfSubstrings firstObject] length]; x++) {\n      [mStringResult appendString:[[mArrayOfSubstrings objectAtIndex:x] substringWithRange:NSMakeRange(y,1)]];\n    }\n    if (y != [[mArrayOfSubstrings firstObject] length] - 1) {\n      [mStringResult appendString:@\"\n\"];\n    }\n  }\n  return [mStringResult copy];\n}\nNSString *rot90Clock(NSString *strng) {\n  NSArray *mArrayOfSubstrings = [strng componentsSeparatedByString:@\"\n\"];\n  NSMutableString *mStringResult = [NSMutableString string];\n  for (int y = 0; y < [[mArrayOfSubstrings firstObject] length]; y++) {\n    for (int x = [[mArrayOfSubstrings firstObject] length] - 1; x >= 0; x--) {\n      [mStringResult appendString:[[mArrayOfSubstrings objectAtIndex:x] substringWithRange:NSMakeRange(y,1)]];\n    }\n    if (y != [[mArrayOfSubstrings firstObject] length] - 1) {\n      [mStringResult appendString:@\"\n\"];\n    }\n  }\n  return [mStringResult copy];\n}\nNSString *selfieAndDiag1(NSString *strng) {\n  NSArray *mArrayOfSubstrings = [strng componentsSeparatedByString:@\"\n\"];\n  NSMutableString *mStringResult = [NSMutableString string];\n  for (int y = 0; y < [[mArrayOfSubstrings firstObject] length]; y++) {\n    NSMutableString *mStringBuffer = [NSMutableString string];\n    for (int x = 0; x < [[mArrayOfSubstrings firstObject] length]; x++) {\n      [mStringBuffer appendString:[[mArrayOfSubstrings objectAtIndex:x] substringWithRange:NSMakeRange(y,1)]];\n    }\n    [mStringResult appendString:[mArrayOfSubstrings objectAtIndex:y]];\n    [mStringResult appendString:@\"|\"];\n    [mStringResult appendString:mStringBuffer];\n    if (y != [[mArrayOfSubstrings firstObject] length] - 1) {\n      [mStringResult appendString:@\"\n\"];\n    }\n  }\n  return [mStringResult copy];\n}\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n  return f(s);\n}\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216281,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString *diag1Sym(NSString *strng) {\n    NSArray *rows = [strng componentsSeparatedByString: @\"\n\"];\n    NSArray *r = [NSMutableArray array];\n    for (int i = 0; i < [rows[0] length]; i++) {\n        char *cstring = malloc(sizeof(char) * (1 + [rows count]));\n        for (int j = 0; j < [rows count]; j++) {\n            *(cstring + j) = [rows[j] characterAtIndex: i];\n        }\n        *(cstring + [rows count]) = '\\0';\n        [r addObject: [NSString stringWithCString: cstring]];\n        free(cstring);\n    }\n    NSString *result = [r componentsJoinedByString: @\"\n\"];\n    return result;\n}\nNSString *rot90Clock(NSString *strng) {\n    NSArray *rows = [strng componentsSeparatedByString: @\"\n\"];\n    NSArray *r = [NSMutableArray array];\n    for (int i = 0; i < [rows[0] length]; i++) {\n        char *cstring = malloc(sizeof(char) * (1 + [rows count]));\n        for (int j = 0; j < [rows count]; j++) {\n            *(cstring + j) = [rows[[rows count] - 1 - j] characterAtIndex: i];\n        }\n        *(cstring + [rows count]) = '\\0';\n        [r addObject: [NSString stringWithCString: cstring]];\n        free(cstring);\n    }\n    NSString *result = [r componentsJoinedByString: @\"\n\"];\n    return result;\n}\nNSString *selfieAndDiag1(NSString *strng) {\n    NSArray *rows = [strng componentsSeparatedByString: @\"\n\"];\n    NSArray *r = [NSMutableArray array];\n    for (int i = 0; i < [rows[0] length]; i++) {\n        char *cstring = malloc(sizeof(char) * (2 + 2 * [rows count]));\n        for (int j = 0; j < [rows count]; j++) {\n            *(cstring + j) = [rows[i] characterAtIndex: j];\n        }\n        *(cstring + [rows count]) = '|';\n        for (int j = 0; j < [rows count]; j++) {\n            *(cstring + j + [rows count] + 1) = [rows[j] characterAtIndex: i];\n        }\n        *(cstring + 1 + 2 * [rows count]) = '\\0';\n        [r addObject: [NSString stringWithCString: cstring]];\n        free(cstring);\n    }\n    NSString *result = [r componentsJoinedByString: @\"\n\"];\n    return result;\n}\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n    return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216282,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *diag1Sym(NSString *strng) {\n  NSMutableString *resultStr = [NSMutableString new];\n    \n    NSArray *array = [strng componentsSeparatedByString: @\"\n\"];\n\n    for (int i = 0; i < array.count; i++)\n    {\n        for (int j = 0; j < array.count; j++)\n        {\n            NSString *tempStrng = [NSString stringWithFormat: @\"%c\", [array[j] characterAtIndex: i]];\n            [resultStr appendString: tempStrng];\n        }\n        if (i < array.count - 1)\n            [resultStr appendString: @\"\n\"];\n    }\n    return resultStr;\n}\nNSString *rot90Clock(NSString *strng) {\n  NSMutableString *resultStr = [NSMutableString new];\n    \n    NSArray *array = [strng componentsSeparatedByString: @\"\n\"];\n    \n    for (int i = 0; i < array.count; i++)\n    {\n        for (int j = (int)array.count - 1; j >= 0; j--)\n        {\n            NSString *tempStrng = [NSString stringWithFormat: @\"%c\", [array[j] characterAtIndex: i]];\n            [resultStr appendString: tempStrng];\n        }\n        if (i < array.count - 1)\n            [resultStr appendString: @\"\n\"];\n    }\n    return resultStr;\n}\nNSString *selfieAndDiag1(NSString *strng) {\n  NSMutableString *resultStr = [NSMutableString new];\n    \n    NSArray *arrayFirst = [strng componentsSeparatedByString: @\"\n\"];\n    NSArray *arraySecond = [diag1Sym(strng) componentsSeparatedByString: @\"\n\"];\n    \n    for (int i = 0; i < arrayFirst.count; i++)\n    {\n        NSString *tempString = [NSString stringWithFormat: @\"%@|%@\", arrayFirst[i], arraySecond[i]];\n        [resultStr appendString: tempString];\n        if (i < arrayFirst.count - 1)\n            [resultStr appendString: @\"\n\"];\n    }\n    return resultStr;\n}\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n  return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216283,"user_id":17,"body":"#import <Foundation\/Foundation.h>\n\nNSString *diag1Sym(NSString *s) {\n  NSArray *rows = [s componentsSeparatedByString: @\"\n\"], *result = [NSMutableArray array];\n  for (int i = 0; i < [rows[0] length]; i++) {\n    char *cstring = malloc(sizeof(char) * (1 + [rows count]));\n    for (int j = 0; j < [rows count]; j++) *(cstring + j) = [rows[j] characterAtIndex: i];\n    *(cstring + [rows count]) = '\\0';\n    [result addObject: [NSString stringWithCString: cstring]];\n    free(cstring);\n  }\n  return [result componentsJoinedByString: @\"\n\"];\n}\nNSString *rot90Clock(NSString *s) {\n  NSArray *rows = [s componentsSeparatedByString: @\"\n\"], *result = [NSMutableArray array];\n  for (int i = 0; i < [rows[0] length]; i++) {\n    char *cstring = malloc(sizeof(char) * (1 + [rows count]));\n    for (int j = 0; j < [rows count]; j++) *(cstring + j) = [rows[[rows count] - 1 - j] characterAtIndex: i];\n    *(cstring + [rows count]) = '\\0';\n    [result addObject: [NSString stringWithCString: cstring]];\n    free(cstring);\n  }\n  return [result componentsJoinedByString: @\"\n\"];\n}\nNSString *selfieAndDiag1(NSString *s) {\n  NSArray *rows = [s componentsSeparatedByString: @\"\n\"], *result = [NSMutableArray array];\n  for (int i = 0; i < [rows[0] length]; i++) {\n    char *cstring = malloc(sizeof(char) * (2 + 2 * [rows count]));\n    for (int j = 0; j < [rows count]; j++) *(cstring + j) = [rows[i] characterAtIndex: j];\n    *(cstring + [rows count]) = '|';\n    for (int j = 0; j < [rows count]; j++) *(cstring + j + [rows count] + 1) = [rows[j] characterAtIndex: i];\n    *(cstring + 1 + 2 * [rows count]) = '\\0';\n    [result addObject: [NSString stringWithCString: cstring]];\n    free(cstring);\n  }\n  return [result componentsJoinedByString: @\"\n\"];\n}\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n  return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56dbf59b0a10feb08c000227":[{"id":216284,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *diag2Sym(NSString *strng);\nNSString *rot90Counter(NSString *strng);\nNSString *selfieDiag2Counterclock(NSString *strng);\nNSString *diag1Sym(NSString *strng);\nNSString *oper(NSString *(*f)(NSString *), NSString *s);\nNSString *vertMirror(NSString *strng);\nNSString *horMirror(NSString *strng);\n\nNSString *diag2Sym(NSString *strng) {\n    return diag1Sym(vertMirror(horMirror(strng)));\n}\n\nNSString *rot90Counter(NSString *strng) {\n    return vertMirror(diag2Sym(strng));\n}\n\nNSString *selfieDiag2Counterclock(NSString *strng) {\n    NSString *diag = diag2Sym(strng);\n    NSString *rot90 = rot90Counter(strng);\n    \n    NSArray *two = [[NSArray alloc] init];\n    NSArray *three = [[NSArray alloc] init];\n    NSArray *one = [[NSArray alloc] init];\n    \n    two = [diag componentsSeparatedByString:@\"\n\"];\n    three = [rot90 componentsSeparatedByString:@\"\n\"];\n    one = [strng componentsSeparatedByString:@\"\n\"];\n    \n    NSMutableString *final = [[NSMutableString alloc] init];\n    \n    for (int i=0; i<[two count]; i++) {\n        [final appendString:[[NSString alloc] initWithFormat:@\"%@|%@|%@\n\",\n                             [one objectAtIndex:i],\n                             [two objectAtIndex:i],\n                             [three objectAtIndex:i]]];\n    }\n    \n    final = [[NSMutableString alloc] initWithString:[final substringToIndex:[final length] - 1]];\n    \n    return final;\n}\n\nNSString *diag1Sym(NSString *strng) {\n    NSArray *arra = [[NSArray alloc] init];\n    arra = [[NSMutableArray alloc] initWithArray:[strng componentsSeparatedByString:@\"\n\"]];\n    NSMutableString *final = [[NSMutableString alloc] init];\n    for (int i=0; i<[arra[0] length]; i++) {\n        for (int j=0; j<[arra count]; j++) {\n            unichar ptr = [[arra objectAtIndex:j] characterAtIndex:i];\n            const unichar* ptrTo = &ptr;\n            [final appendString:[NSString stringWithCharacters:ptrTo length:1]];\n        }\n        [final appendString:@\"\n\"];\n    }\n    final = [[NSMutableString alloc] initWithString:[final substringToIndex:[final length]-1]];\n    return final;\n}\n\nNSString *vertMirror(NSString *strng) {\n    NSArray *arra = [[NSArray alloc] init];\n    arra = [strng componentsSeparatedByString:@\"\n\"];\n    NSMutableArray *finArra = [[NSMutableArray alloc] init];\n    for (NSString *value in arra) {\n        const char *str = [value UTF8String];\n        unsigned long val = strlen(str);\n        char* ptr = (char*)malloc(val+1);\n        for (unsigned long i = 0; i<val; i++) {\n            *(ptr + val - i - 1) = *str;\n            str++;\n        }\n        ptr[val] = '\\0';\n        NSString* new = [[NSString alloc] initWithCString:ptr encoding:NSASCIIStringEncoding];\n        free(ptr);\n        [finArra addObject:new];\n    }\n    NSMutableString *final = [[NSMutableString alloc] init];\n    for (NSString *value in finArra) {\n        [final appendString:[NSString stringWithFormat:@\"%@\n\", value]];\n    }\n    final = [[NSMutableString alloc] initWithString:[final substringToIndex:[final length] - 1]];\n    return final;\n}\n\nNSString *horMirror(NSString *strng) {\n    NSArray *arra = [[NSArray alloc] init];\n    arra = [strng componentsSeparatedByString:@\"\n\"];\n    NSArray *reverse = [[arra reverseObjectEnumerator] allObjects];\n    NSMutableString *final = [[NSMutableString alloc] init];\n    for (NSString *value in reverse) {\n        [final appendString:[NSString stringWithFormat:@\"%@\n\", value]];\n    }\n    final = [[NSMutableString alloc] initWithString:[final substringToIndex:[final length] - 1]];\n    return final;\n}\n\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n    return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216285,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *reverse(NSString *strng) {\n    NSString *retStr=@\"\";\n    const char *c = [strng UTF8String];\n    for(int i=strng.length-1;i>=0;i--){\n        retStr = [retStr stringByAppendingString:[NSString stringWithFormat:@\"%c\",c[i]]];\n    }\n    return retStr;\n}\nNSString *diag2Sym(NSString *strng) {\n    \/\/ Your code here\n    NSMutableString *retStr = [NSMutableString string];\n    NSArray *array =[strng componentsSeparatedByString:@\"\n\"];\n    NSUInteger count = array.count;\n    [retStr appendString:[array componentsJoinedByString:@\"\"]];\n    NSMutableString *result = [NSMutableString string];\n\n    for(int i =0;i<count;i++){\n        for(int j=0;j<count;j++){\n            char c2 = [retStr characterAtIndex:((count-j-1)*count+count-i-1)];\n            [result appendFormat:@\"%c\",c2];\n        }\n        if(i!=array.count-1)\n            [result appendFormat:@\"\n\"];\n        \n    }\n\n    return result;\n}\nNSString *rot90Counter(NSString *strng) {\n    \/\/ Your code here\n    NSMutableString *retStr = [NSMutableString string];\n    NSArray *array =[strng componentsSeparatedByString:@\"\n\"];\n    NSUInteger count = array.count;\n    [retStr appendString:[array componentsJoinedByString:@\"\"]];\n    NSMutableString *result = [NSMutableString string];\n    \n    for(int i =0;i<count;i++){\n        for(int j=0;j<count;j++){\n            char c2 = [retStr characterAtIndex:(j*count+count-i-1)];\n            [result appendFormat:@\"%c\",c2];\n        }\n        if(i!=array.count-1)\n            [result appendFormat:@\"\n\"];\n        \n    }\n    \n    return result;\n}\nNSString *selfieDiag2Counterclock(NSString *strng) {\n    \/\/ Your code here\n    NSString *retStr=@\"\";\n    NSArray *array1 =[strng componentsSeparatedByString:@\"\n\"];\n    NSArray *array2 =[diag2Sym(strng) componentsSeparatedByString:@\"\n\"];\n    \n    for(int i =0;i<array1.count;i++){\n        retStr = [retStr stringByAppendingString:[NSString stringWithFormat:@\"%@|%@|%@\",array1[i], array2[i],reverse(array2[i])]];\n        if(i!=array1.count-1)\n            retStr = [retStr stringByAppendingString:[NSString stringWithFormat:@\"\n\"]];\n    }\n    \n    return retStr;\n}\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n  \/\/ Your code here\n  \n  return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216286,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\n\/\/ to debug if necessary\nvoid print2dArray(NSMutableArray *array) {\n  for (NSArray *inner in array) {\n    NSMutableString *row = [NSMutableString string];\n    for (NSString *string in inner) {\n      [row appendString:string];\n    }\n    NSLog(@\"%@\", row);\n  }\n}\n\nvoid swapIndicesIn2dArray(NSUInteger i1, NSUInteger j1, NSUInteger i2, NSUInteger j2, NSMutableArray *array) {\n  NSString *temp = [[array objectAtIndex:i1] objectAtIndex:j1];\n  [[array objectAtIndex:i1] replaceObjectAtIndex:j1 withObject:[[array objectAtIndex:i2] objectAtIndex:j2]];\n  [[array objectAtIndex:i2] replaceObjectAtIndex:j2 withObject:temp];\n}\n\nNSString *diag2Sym(NSString *strng) {\n  NSArray *rows = [strng componentsSeparatedByCharactersInSet:[NSCharacterSet newlineCharacterSet]];\n  \n  NSUInteger dimension = rows.count;\n  \n  NSMutableArray *rowsAndColumns = [NSMutableArray array];\n  for (int i = 0; i < dimension; ++i) {\n    NSMutableArray *row = [NSMutableArray array];\n    for (int j = 0; j < dimension; ++j) {\n      [row addObject:[NSString stringWithFormat:@\"%c\", [[rows objectAtIndex:i] characterAtIndex:j]]];\n    }\n    [rowsAndColumns addObject:row];\n  }\n  \n  for (int i = 0; i < dimension - 1; ++i)\n  {\n    for (int j = 0; j < dimension - 1 - i; ++j)\n    {\n      swapIndicesIn2dArray(i, j, dimension - 1 - j, dimension - 1 - i, rowsAndColumns);\n    } \n  }\n  \n  NSMutableString *toReturn = [NSMutableString string];\n  for (int i = 0; i < dimension; ++i) {\n    NSMutableString *row = [NSMutableString string];\n    for (int j = 0; j < dimension; ++j) {\n      [row appendString:[[rowsAndColumns objectAtIndex:i] objectAtIndex:j]];\n    }\n    if (i < dimension - 1) {\n      [row appendString:@\"\n\"];\n    }\n    [toReturn appendString:row];\n  }\n  \n  return toReturn;\n}\n\n\nNSString *rot90Counter(NSString *strng) {\n   NSArray *rows = [strng componentsSeparatedByCharactersInSet:[NSCharacterSet newlineCharacterSet]];\n  \n  NSUInteger dimension = rows.count;\n  \n  NSMutableArray *rowsAndColumns = [NSMutableArray array];\n  for (int i = 0; i < dimension; ++i) {\n    NSMutableArray *row = [NSMutableArray array];\n    for (int j = 0; j < dimension; ++j) {\n      [row addObject:[NSString stringWithFormat:@\"%c\", [[rows objectAtIndex:i] characterAtIndex:j]]];\n    }\n    [rowsAndColumns addObject:row];\n  }\n  \n  for (int x = 0; x < dimension \/ 2; ++x)\n  {\n    for (int y = x; y < dimension - x - 1; ++y)\n    {\n      swapIndicesIn2dArray(x, y, y, dimension - 1 - x, rowsAndColumns);\n      swapIndicesIn2dArray(y, dimension - 1 - x, dimension - 1 - x, dimension - 1 - y, rowsAndColumns);\n      swapIndicesIn2dArray(dimension - 1 - x, dimension - 1 - y, dimension - 1 - y, x, rowsAndColumns);  \n    }\n  }\n  \n  NSMutableString *toReturn = [NSMutableString string];\n  for (int i = 0; i < dimension; ++i) {\n    NSMutableString *row = [NSMutableString string];\n    for (int j = 0; j < dimension; ++j) {\n      [row appendString:[[rowsAndColumns objectAtIndex:i] objectAtIndex:j]];\n    }\n    if (i < dimension - 1) {\n      [row appendString:@\"\n\"];\n    }\n    [toReturn appendString:row];\n  }\n  \n  return toReturn;\n}\n\nNSString *selfieDiag2Counterclock(NSString *strng) {\n  NSArray *rowsOriginal = [strng componentsSeparatedByCharactersInSet:[NSCharacterSet newlineCharacterSet]];\n  NSUInteger dimension = rowsOriginal.count;\n  \n  NSArray *rowsDiag2Sym = [diag2Sym(strng) componentsSeparatedByCharactersInSet:[NSCharacterSet newlineCharacterSet]];\n  NSArray *rowsRot90Counter = [rot90Counter(strng) componentsSeparatedByCharactersInSet:[NSCharacterSet newlineCharacterSet]];\n  \n  NSMutableString *toReturn = [NSMutableString string];\n  for (int i = 0; i < dimension; ++i) {\n    [toReturn appendString:[rowsOriginal objectAtIndex:i]];\n    [toReturn appendString:@\"|\"];\n    [toReturn appendString:[rowsDiag2Sym objectAtIndex:i]];\n    [toReturn appendString:@\"|\"];\n    [toReturn appendString:[rowsRot90Counter objectAtIndex:i]];\n    if (i < dimension - 1) {\n      [toReturn appendString:@\"\n\"];\n    }\n  }\n  \n  return toReturn;\n}\n\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n  return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216287,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString *diag2Sym(NSString *strng) {\n    NSArray *rows = [strng componentsSeparatedByString:@\"\n\"];\n    NSArray *r = [NSMutableArray array];\n    for (int i = 0; i < [rows count]; i++) {\n        char *cstring = malloc(sizeof(char) * (1 + [rows count]));\n        for (int j = 0; j < [rows count]; j++) {\n            *(cstring + j) = [rows[[rows count] - 1 - j] characterAtIndex: [rows count] - 1 - i];\n        }\n        *(cstring + [rows count]) = '\\0';\n        [r addObject: [NSString stringWithCString: cstring]];\n        free(cstring);\n    }\n    NSString *result = [r componentsJoinedByString:@\"\n\"];\n    return result;\n}\nNSString *rot90Counter(NSString *strng) {\n    NSArray *rows = [strng componentsSeparatedByString:@\"\n\"];\n    NSArray *r = [NSMutableArray array];\n    for (int i = 0; i < [rows count]; i++) {\n        char *cstring = malloc(sizeof(char) * (1 + [rows count]));\n        for (int j = 0; j < [rows count]; j++) {\n            *(cstring + j) = [rows[j] characterAtIndex: [rows count] - 1 - i];\n        }\n        *(cstring + [rows count]) = '\\0';\n        [r addObject: [NSString stringWithCString: cstring]];\n        free(cstring);\n    }\n    NSString *result = [r componentsJoinedByString:@\"\n\"];\n    return result;\n}\nNSString *selfieDiag2Counterclock(NSString *strng) {\n    NSArray *rows = [strng componentsSeparatedByString:@\"\n\"];\n    NSArray *r = [NSMutableArray array];\n    for (int i = 0; i < [rows count]; i++) {\n        char *cstring = malloc(sizeof(char) * (3 + 3 * [rows count]));\n        for (int j = 0; j < [rows count]; j++) {\n            *(cstring + j) = [rows[i] characterAtIndex: j];\n        }\n        *(cstring + [rows count]) = *(cstring + 1 + 2 * [rows count]) = '|';\n        for (int j = 0; j < [rows count]; j++) {\n            *(cstring + j + [rows count] + 1) = [rows[[rows count] - 1 - j] characterAtIndex: [rows count] - 1 - i];\n        }\n        for (int j = 0; j < [rows count]; j++) {\n            *(cstring + j + 2 * [rows count] + 2) = [rows[j] characterAtIndex: [rows count] - 1 - i];\n        }\n        *(cstring + 2 + 3 * [rows count]) = '\\0';\n        [r addObject: [NSString stringWithCString: cstring]];\n        free(cstring);\n    }\n    NSString *result = [r componentsJoinedByString:@\"\n\"];\n    return result;\n}\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n    return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216288,"user_id":17,"body":"#import <Foundation\/Foundation.h>\n\nNSString *diag2Sym(NSString *s) {\n  NSArray *rows = [s componentsSeparatedByString: @\"\n\"], *result = [NSMutableArray array];\n  for (int i = 0; i < [rows count]; i++) {\n    char *cstring = malloc(sizeof(char) * (1 + [rows count]));\n    for (int j = 0; j < [rows count]; j++) *(cstring + j) = [rows[[rows count] - 1 - j] characterAtIndex: [rows count] - 1 - i];\n    *(cstring + [rows count]) = '\\0';\n    [result addObject: [NSString stringWithCString: cstring]];\n    free(cstring);\n  }\n  return [result componentsJoinedByString: @\"\n\"];\n}\nNSString *rot90Counter(NSString *s) {\n  NSArray *rows = [s componentsSeparatedByString: @\"\n\"], *result = [NSMutableArray array];\n  for (int i = 0; i < [rows count]; i++) {\n    char *cstring = malloc(sizeof(char) * (1 + [rows count]));\n    for (int j = 0; j < [rows count]; j++) *(cstring + j) = [rows[j] characterAtIndex: [rows count] - 1 - i];\n    *(cstring + [rows count]) = '\\0';\n    [result addObject: [NSString stringWithCString: cstring]];\n    free(cstring);\n  }\n  return [result componentsJoinedByString: @\"\n\"];\n}\nNSString *selfieDiag2Counterclock(NSString *s) {\n  NSArray *rows = [s componentsSeparatedByString: @\"\n\"], *result = [NSMutableArray array];\n  for (int i = 0; i < [rows count]; i++) {\n    char *cstring = malloc(sizeof(char) * (3 + 3 * [rows count]));\n    for (int j = 0; j < [rows count]; j++) *(cstring + j) = [rows[i] characterAtIndex: j];\n    *(cstring + [rows count]) = *(cstring + 1 + 2 * [rows count]) = '|';\n    for (int j = 0; j < [rows count]; j++) *(cstring + j + [rows count] + 1) = [rows[[rows count] - 1 - j] characterAtIndex: [rows count] - 1 - i];\n    for (int j = 0; j < [rows count]; j++) *(cstring + j + 2 * [rows count] + 2) = [rows[j] characterAtIndex: [rows count] - 1 - i];\n    *(cstring + 2 + 3 * [rows count]) = '\\0';\n    [result addObject: [NSString stringWithCString: cstring]];\n    free(cstring);\n  }\n  return [result componentsJoinedByString: @\"\n\"];\n}\nNSString *oper(NSString *(*f)(NSString *), NSString *s) {\n  return f(s);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56fe17fcc25bf3e19a000292":[{"id":216289,"user_id":17,"body":"#import <Foundation\/Foundation.h>\n\nNSDecimalNumber *u1(long long n, long long p) {\n  return [[NSDecimalNumber decimalNumberWithMantissa: p exponent: 0 isNegative: NO] decimalNumberByMultiplyingBy: [[NSDecimalNumber decimalNumberWithMantissa: n exponent: 0 isNegative: NO] decimalNumberByAdding: [NSDecimalNumber one]]];\n}\nNSDecimalNumber *v1(long long n, long long p) {\n  return [[NSDecimalNumber decimalNumberWithMantissa: p exponent: 0 isNegative: NO] decimalNumberByMultiplyingBy: [[[NSDecimalNumber decimalNumberWithString: @\"2\"] decimalNumberByMultiplyingBy: [NSDecimalNumber decimalNumberWithMantissa: n exponent: 0 isNegative: NO]] decimalNumberByAdding: [NSDecimalNumber one]]];\n}\nNSDecimalNumber *u_eff(long long n, long long p) {\n  return [[NSDecimalNumber decimalNumberWithMantissa: p exponent: 0 isNegative: NO] decimalNumberByMultiplyingBy: [[NSDecimalNumber decimalNumberWithMantissa: n exponent: 0 isNegative: NO] decimalNumberByAdding: [NSDecimalNumber one]]];\n}\nNSDecimalNumber *v_eff(long long n, long long p) {\n  return [[NSDecimalNumber decimalNumberWithMantissa: p exponent: 0 isNegative: NO] decimalNumberByMultiplyingBy: [[[NSDecimalNumber decimalNumberWithString: @\"2\"] decimalNumberByMultiplyingBy: [NSDecimalNumber decimalNumberWithMantissa: n exponent: 0 isNegative: NO]] decimalNumberByAdding: [NSDecimalNumber one]]];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216290,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSDecimalNumber *bk(long long n, long long k) {\n  NSDecimalNumber *nc = [NSDecimalNumber one];\n  for (long long i=1; i<=k; i++) {\n    nc = [nc decimalNumberByMultiplyingBy: [NSDecimalNumber decimalNumberWithMantissa: n+1-i exponent:0 isNegative: NO]];\n    nc = [nc decimalNumberByDividingBy: [NSDecimalNumber decimalNumberWithMantissa: i exponent:0 isNegative: NO]];\n  }\n  return nc;\n}\nNSDecimalNumber *u1(long long n, long long p) {\n  NSDecimalNumber *m1 = [NSDecimalNumber decimalNumberWithMantissa: p exponent:0 isNegative: NO];\n  NSDecimalNumber *four = [NSDecimalNumber decimalNumberWithString: [@(4) stringValue]];\n  NSDecimalNumber *u = [four decimalNumberByRaisingToPower: n];\n  NSDecimalNumber *m;\n  for (long long k=1; k<=n; k++) {\n    m = [[four decimalNumberByRaisingToPower: n-k] decimalNumberByMultiplyingBy: bk(2*n-k+1, k)];\n    u = k & 1? [u decimalNumberBySubtracting: m] : [u decimalNumberByAdding: m];  \n  }  \n  return [u decimalNumberByMultiplyingBy: m1];\n}\nNSDecimalNumber *v1(long long n, long long p) {\n  NSDecimalNumber *m1 = [NSDecimalNumber decimalNumberWithMantissa: p exponent:0 isNegative: NO];\n  NSDecimalNumber *four = [NSDecimalNumber decimalNumberWithString: [@(4) stringValue]];\n  NSDecimalNumber *v = [four decimalNumberByRaisingToPower: n];\n  NSDecimalNumber *m;\n  for (long long k=1; k<=n; k++) {\n    m = [[four decimalNumberByRaisingToPower: n-k] decimalNumberByMultiplyingBy: bk(2*n-k, k)];\n    v = k & 1? [v decimalNumberBySubtracting: m] : [v decimalNumberByAdding: m];  \n  }  \n  return [v decimalNumberByMultiplyingBy: m1];\n}\nNSDecimalNumber *u_eff(long long n, long long p) {\n  NSDecimal *dp = [NSDecimalNumber decimalNumberWithMantissa: p exponent:0 isNegative: NO];\n  NSDecimal *dn = [NSDecimalNumber decimalNumberWithMantissa: n exponent:0 isNegative: NO];\n  return [dp decimalNumberByMultiplyingBy: [dn decimalNumberByAdding: [NSDecimalNumber one]]];\n}\nNSDecimalNumber *v_eff(long long n, long long p) {\n  NSDecimal *dp = [NSDecimalNumber decimalNumberWithMantissa: p exponent:0 isNegative: NO];\n  NSDecimal *dn = [NSDecimalNumber decimalNumberWithMantissa: n exponent:0 isNegative: NO];\n  NSDecimal *two = [NSDecimalNumber decimalNumberWithString: [@(2) stringValue]];\n  dn = [dn decimalNumberByMultiplyingBy: two];\n  return [dp decimalNumberByMultiplyingBy: [dn decimalNumberByAdding: [NSDecimalNumber one]]];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216291,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nNSDecimalNumber *u_eff(long long n, long long p) {\n  NSDecimalNumber *x = [NSDecimalNumber decimalNumberWithString: @(n + 1).stringValue];\n  NSDecimalNumber *y = [NSDecimalNumber decimalNumberWithString: @(p).stringValue];\n  return [x decimalNumberByMultiplyingBy: y];\n}\nNSDecimalNumber *v_eff(long long n, long long p) {\n  NSDecimalNumber *x = [NSDecimalNumber decimalNumberWithString: @(2 * n + 1).stringValue];\n  NSDecimalNumber *y = [NSDecimalNumber decimalNumberWithString: @(p).stringValue];\n  return [x decimalNumberByMultiplyingBy: y];\n}\nNSDecimalNumber *u1(long long n, long long p) {\n  return u_eff(n, p);\n}\nNSDecimalNumber *v1(long long n, long long p) {\n  return v_eff(n, p);\n}\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216292,"user_id":53,"body":"#import <Foundation\/Foundation.h>\n\nNSDecimalNumber *u_eff(long long n, long long p) {\n  return [[NSDecimalNumber decimalNumberWithMantissa: p exponent: 0 isNegative: NO] decimalNumberByMultiplyingBy: [[NSDecimalNumber decimalNumberWithMantissa: n exponent: 0 isNegative: NO] decimalNumberByAdding: [NSDecimalNumber one]]];\n}\nNSDecimalNumber *v_eff(long long n, long long p) {\n  return [[NSDecimalNumber decimalNumberWithMantissa: p exponent: 0 isNegative: NO] decimalNumberByMultiplyingBy: [[[NSDecimalNumber decimalNumberWithString: @\"2\"] decimalNumberByMultiplyingBy: [NSDecimalNumber decimalNumberWithMantissa: n exponent: 0 isNegative: NO]] decimalNumberByAdding: [NSDecimalNumber one]]];\n}\nNSDecimalNumber *u1(long long n, long long p) {\n  return u_eff(n, p);\n}\nNSDecimalNumber *v1(long long n, long long p) {\n  return v_eff(n, p);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216293,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSDecimalNumber *bk(long long n, long long k) {\n  NSDecimalNumber *nc = [NSDecimalNumber one];\n  for (long long i=1; i<=k; i++) {\n    nc = [nc decimalNumberByMultiplyingBy: [NSDecimalNumber decimalNumberWithMantissa: n+1-i exponent:0 isNegative: NO]];\n    nc = [nc decimalNumberByDividingBy: [NSDecimalNumber decimalNumberWithMantissa: i exponent:0 isNegative: NO]];\n  }\n  return nc;\n}\nNSDecimalNumber *u1(long long n, long long p) {\n  NSDecimalNumber *four = [NSDecimalNumber decimalNumberWithString: [@(4) stringValue]];\n  NSDecimalNumber *dp = [NSDecimalNumber decimalNumberWithString: [@(p) stringValue]];\n  NSDecimalNumber *u = [four decimalNumberByRaisingToPower: n];\n  NSDecimalNumber *m;\n  for (long long k=1; k<=n; k++) {\n    m = [[four decimalNumberByRaisingToPower: n-k] decimalNumberByMultiplyingBy: bk(2*n-k+1, k)];\n    u = k & 1? [u decimalNumberBySubtracting: m] : [u decimalNumberByAdding: m];  \n  }  \n  return [u decimalNumberByMultiplyingBy: dp];\n}\nNSDecimalNumber *v1(long long n, long long p) {\n  NSDecimalNumber *four = [NSDecimalNumber decimalNumberWithString: [@(4) stringValue]];\n  NSDecimalNumber *dp = [NSDecimalNumber decimalNumberWithString: [@(p) stringValue]];\n  NSDecimalNumber *v = [four decimalNumberByRaisingToPower: n];\n  NSDecimalNumber *m;\n  for (long long k=1; k<=n; k++) {\n    m = [[four decimalNumberByRaisingToPower: n-k] decimalNumberByMultiplyingBy: bk(2*n-k, k)];\n    v = k & 1? [v decimalNumberBySubtracting: m] : [v decimalNumberByAdding: m];  \n  }  \n  return [v decimalNumberByMultiplyingBy: dp];\n}\nNSDecimalNumber *u_eff(long long n, long long p) {\n  NSDecimalNumber *dp = [NSDecimalNumber decimalNumberWithString: [@(p) stringValue]];\n  NSDecimalNumber *dn = [NSDecimalNumber decimalNumberWithString: [@(n) stringValue]];\n  return [dp decimalNumberByMultiplyingBy: [dn decimalNumberByAdding: [NSDecimalNumber one]]];\n}\nNSDecimalNumber *v_eff(long long n, long long p) {\n  NSDecimalNumber *dp = [NSDecimalNumber decimalNumberWithString: [@(p) stringValue]];\n  NSDecimalNumber *dn = [NSDecimalNumber decimalNumberWithString: [@(n) stringValue]];\n  NSDecimalNumber *two = [NSDecimalNumber decimalNumberWithString: [@(2) stringValue]];\n  dn = [dn decimalNumberByMultiplyingBy: two];\n  return [dp decimalNumberByMultiplyingBy: [dn decimalNumberByAdding: [NSDecimalNumber one]]];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"576b93db1129fcf2200001e6":[{"id":216294,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint sum(int* numbers, int numbersCount)\n{\n  if(numbersCount <= 1)\n    return 0;\n\n  int sum=numbers[0];\n  int max=numbers[0];\n  int min=numbers[0];\n\n  for(int i=1; i<numbersCount; i++){\n    max = (numbers[i]>max) ? numbers[i] : max;\n    min = (numbers[i]<min) ? numbers[i] : min;\n    sum += numbers[i];\n  }\n\n  return sum-max-min;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216295,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint sum(int* numbers, int numbersCount)\n{\n    if(numbersCount<=1) return 0;\n    int min = INT_MAX;\n    int max = INT_MIN;\n    int sum = 0;\n    for (int i = 0; i<numbersCount; i++)\n    {\n        if(numbers[i]>max) max = numbers[i];\n        if(numbers[i]<min) min = numbers[i];\n        sum+= numbers[i];\n    }\n    return sum-min-max;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216296,"user_id":17,"body":"#import <Foundation\/Foundation.h>\n\nint sum(int *a, int l) {\n  if (l < 3) return 0;\n  int max = -2147483648, min = 2147483647, sum = 0;\n  for (int i = 0; i < l; i++) {\n    sum += *(a + i);\n    if (*(a + i) > max) max = *(a + i);\n    if (*(a + i) < min) min = *(a + i);\n  }\n  return sum - max - min;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216297,"user_id":1669,"body":"#import <Foundation\/Foundation.h>\nint sum(int* numbers, int numbersCount)\n{\n  if(numbersCount < 2)\n  {\n    return 0;\n  }\n  int result = 0;\n  int min = numbers[0];\n  int max = numbers[0];\n  \n  for(int i=0;i<numbersCount;i++)\n  {\n    result += numbers[i];\n    if(numbers[i] < min)\n    {\n      min = numbers[i];\n    }\n    if(numbers[i] > max)\n    {\n      max = numbers[i];\n    }\n  }\n  return result - min - max;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216298,"user_id":50,"body":"#import <Foundation\/Foundation.h>\nint sum(int* numbers, int numbersCount) {\n  if (numbersCount < 3) return 0;\n  int o = numbers[0], min = o, max = o;\n  for (int i = 1; i < numbersCount; i++) {\n    int n = numbers[i];\n    o += n;\n    if (n > max) {\n      max = n;\n    } else if (n < min) {\n      min = n;\n    }\n  }\n  return o - min - max;\n}\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216299,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint sum(int* numbers, int numbersCount)\n{\n  if (numbers == nil || numbersCount == 0 || numbersCount == 1) return 0;\n  int min = INT_MAX, max = INT_MIN;\n  int sum = 0;\n  for (int i = 0; i < numbersCount; i++) {\n    int num = numbers[i];\n    sum += num;\n    if (num < min) min = num;\n    if (num > max) max = num;\n  }\n  return sum - min - max;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216300,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n#import <limits.h>\n\nint sum(int* numbers, int numbersCount)\n{\n  if (numbers == nil || numbersCount < 3) {\n    return 0;\n  }\n  int sum = 0;\n  BOOL largestIsSet = NO;\n  BOOL smallestIsSet = NO;\n  int largest = 0;\n  int smallest = 0;\n  for (int i = 0; i < numbersCount; i++) {\n    int num = numbers[i];\n    if (!largestIsSet) {\n      largest = num;\n      largestIsSet = YES;\n    } else if (!smallestIsSet) {\n      if (num < largest) {\n        smallest = num;\n      } else {\n        smallest = largest;\n        largest = num;\n      }\n      smallestIsSet = YES;\n    } else if (num > largest) {\n      sum += largest;\n      largest = num;\n    } else if (num < smallest) {\n      sum += smallest;\n      smallest = num;\n    } else {\n      sum += num;\n    }\n  }\n  return sum;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216301,"user_id":168,"body":"#import <Foundation\/Foundation.h>\nint sum(int* numbers, int numbersCount)\n{\n  if (numbersCount <= 1) return 0;\n  int min = INT_MAX, max = INT_MIN;\n  int s = 0;\n  for (int i = 0; i < numbersCount; i++) {\n    if (numbers[i] < min) min = numbers[i];\n    if (numbers[i] > max) max = numbers[i];\n    s += numbers[i];\n  }\n  return s - min - max;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216302,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint sum(int* numbers, int numbersCount)\n{\n  int sum = 0;\n  int lowest, highest;\n  lowest = highest = numbers[0];\n  if (numbersCount < 2)\n    return 0;\n  for (int i = 0; i < numbersCount; i++) {\n    sum += numbers[i];\n    lowest = (lowest < numbers[i]) ? lowest : numbers[i];\n    highest = (highest > numbers[i]) ? highest : numbers[i];\n  }\n  return sum - highest - lowest;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216303,"user_id":53,"body":"#import <Foundation\/Foundation.h>\nint sum(int* xs, int n)\n{\n  if (n <= 2) return 0;\n  int m = xs[0];\n  int a = xs[0];\n  int b = xs[0];\n  for (int i=1; i<n; i++) {\n    m += xs[i];\n    if (xs[i] < a) a = xs[i];\n    if (xs[i] > b) b = xs[i];\n  }\n  return m - a - b;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"57a55c8b72292d057b000594":[{"id":216304,"user_id":1562,"body":"#import <Foundation\/Foundation.h>\nNSString* reverse(NSString* text) {\n    NSArray *words = [text componentsSeparatedByString:@\" \"];\n    \n    NSArray *reversed = [[words reverseObjectEnumerator] allObjects];\n\n    return [reversed componentsJoinedByString:@\" \"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216305,"user_id":53,"body":"#import <Foundation\/Foundation.h>\n\nNSString* reverse(NSString* text)\n{\n    NSArray *words = [text componentsSeparatedByString:@\" \"];\n    NSArray* wordsReversed = [[words reverseObjectEnumerator] allObjects];\n    NSString *reversedText = [wordsReversed componentsJoinedByString:@\" \"];\n    return reversedText;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216306,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString* reverse(NSString* text) {\n  NSArray *words = [text componentsSeparatedByCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];\n  \n  return [[[words reverseObjectEnumerator] allObjects] componentsJoinedByString:@\" \"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216307,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString* reverse(NSString* text) {\n  NSArray *arr = [text componentsSeparatedByString:@\" \"];\n  NSArray *reverseArr=[[arr reverseObjectEnumerator] allObjects];\n  return [reverseArr componentsJoinedByString:@\" \"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216308,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString* reverse(NSString* text) {\n    NSMutableString* rtn_str = [NSMutableString stringWithString:@\"\"];\n    NSArray* arr = [text componentsSeparatedByString:@\" \"];\n    if(arr.count > 0){\n        [rtn_str appendString:arr[arr.count-1]];\n    }\n    if(arr.count > 1){\n        for(int i = arr.count-2; i >=0; i--){\n            [rtn_str appendString:[NSString stringWithFormat:@\" %@\", arr[i]]];\n        }\n    }\n    return rtn_str;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216309,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString* reverse(NSString* text) {\n    NSArray *stringArray = [text componentsSeparatedByString: @\" \"];\n    stringArray = [[stringArray reverseObjectEnumerator]allObjects];\n    return [stringArray componentsJoinedByString:@\" \"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216310,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString* reverse(NSString* text) {\n  NSArray *words = [text componentsSeparatedByString:@\" \"];\n  NSArray *wordsReversed = [[words reverseObjectEnumerator] allObjects];\n  return [wordsReversed componentsJoinedByString:@\" \"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216311,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString* reverse(NSString* text) {\n    NSMutableArray *words = [[NSMutableArray alloc] init];\n\/\/  The correct solution should be using enumerateSubstringsInRange, to be compatible with different locales, but this currently fails to compile for some reason.\n\/\/    [text enumerateSubstringsInRange: NSMakeRange(0, text.length)\n\/\/                             options:NSStringEnumerationByWords\n\/\/                          usingBlock:^(NSString * _Nullable substring, NSRange substringRange, NSRange enclosingRange, BOOL * _Nonnull stop) {\n\/\/        [words insertObject:substring atIndex:0];\n\/\/    }];\n    NSArray *originalOrder = [text componentsSeparatedByString:@\" \"];\n    for (int i = 0; i < originalOrder.count; i++) {\n        [words insertObject:originalOrder[i] atIndex:0];\n    }\n    return [words componentsJoinedByString:@\" \"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216312,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString* reverse(NSString* text) {\n    return [[[[text componentsSeparatedByString: @\" \"] reverseObjectEnumerator] allObjects] componentsJoinedByString: @\" \"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216313,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString* reverse(NSString* str) {\n        NSMutableString* to_ret = [NSMutableString stringWithString: @\"\"];\n        int prev = str.length;\n   \n        for(int i = str.length; i >= 0; --i)\n        {\n            if( ((char*)[str cString])[i] == ' ')\n            {\n                [ to_ret appendFormat:@\"%@ \", [str substringWithRange: NSMakeRange(i + 1, prev - (i + 1)) ]];\n                prev = i;\n            }\n            if( i == 0 )\n            {\n                [ to_ret appendFormat:@\"%@ \", \n                 [str substringWithRange: NSMakeRange(i, prev - (i)) ]\n                ];\n                prev = i;\n            }\n        }\n        [to_ret deleteSuffix: @\" \"];\n  return to_ret;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5813d19765d81c592200001a":[{"id":216314,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint dont_give_me_five(int start, int end)\n{\n  int count = 0;\n  for(start; start <= end; start ++){\n    if([[NSString stringWithFormat:@\"%i\",start] rangeOfString:@\"5\"].location == NSNotFound){\n      count ++;\n    }\n  }\n  return count;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216315,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint dont_give_me_five(int start, int end)\n{\n  NSInteger countNumber = 0;\n  for (int i=start;i<=end;i++){\n    NSString* number = [NSString stringWithFormat:@\"%d\",i];\n   if(![number containsString:@\"5\"]){\n     countNumber+=1;\n     }\n  }\n  return countNumber;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216316,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n#include <stdlib.h>\n\nint dont_give_me_five(int start, int end)\n{\n  \n  if(start <= end)\n  {\n    int dem = end - start + 1;\n    for(int i = start; i <= end; i++)\n    {\n      char s[10], *chuoi;\n      sprintf(s,\"%d\",i);\n      chuoi = strchr(s, '5');\n      if(chuoi != NULL)\n        dem--;\n    }\n    return dem;\n  }\n  else\n    return 0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216317,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint dont_give_me_five(int start, int end) {\n    int result = end-start+1;\n    for (int i=start; i<=end; i++) {\n        NSLog(@\"%d\",i);\n        if ( [[@(i) stringValue] containsString:@\"5\"] ) {\n            result--;\n        }\n    }\n    return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216318,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nBOOL containsDigit(int num, int digit) {\n  int n = abs(num);\n  while (n != 0) {\n    if (n % 10 == digit) {\n      return YES;\n    }\n    n \/= 10;\n  }\n  return NO;\n}\n\nint dont_give_me_five(int start, int end)\n{\n  int count = 0;\n  for (int i = start; i <= end; i++) {\n    if (!containsDigit(i, 5)) {\n      count++;\n    }\n  }\n  return count;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216319,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nBOOL containsDigit(int num, int digit) {\n  \/\/ Again, there might be some mathematical way to get this in O(1)\n  \/\/ But I don't know off the top of my head, so I could loop over each digit one at a time\n  \/\/ To loop over each digit, we can use modulo operator:\n  \/\/ num = 357\n  \/\/ num % 10 = 7 (not 5)\n  \/\/ num % 100 \/ 10 = 5 (return)\n  \/\/ num % 1000 \/ 100 = 3\n  \/\/ stop iterating after mod > num\n  int mod = 1;\n  do {\n    mod *= 10;\n    int d = (num % mod) \/ (mod \/ 10);\n    if (abs(d) == digit) {\n      return YES;\n    }\n  } while (mod < num);\n  return NO;\n}\n\n\/\/ if the end is < 50, then the number of numbers containing 5 is:\n\/\/ (end - start + 1) \/ 5, so say 1,9, 9-1+1 = 9, 9 \/ 5 = 1. So the result is 9 - 1 = 8\n\/\/ or 4, 17: (17 - 4 + 1) \/ 5 = 14\/5 = 2, so result is 14-2 = 12\n\/\/ or 6, 24: (24 - 6 + 1) \/ 5 = 19\/5 = 3, so result is 19-3 = 16\n\/\/ 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24\n\/\/ I give up.\n\nint dont_give_me_five(int start, int end)\n{\n  \/\/ There's probably a way to calculate this without enumerating all numbers from start to end.\n  \/\/ But first, the enumeration solution, which would be O(n) where n is the distance between start and end + 1\n  int count = 0;\n  for (int i = start; i <= end; i++) {\n    if (!containsDigit(i, 5)) {\n      count++;\n    }\n  }\n  return count;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216320,"user_id":168,"body":"#import <Foundation\/Foundation.h>\nint dont_give_me_five(int start, int end)\n{\n  int r = 0;\n  for (int i = start; i <= end; i++) {\n    r += ![@(i).stringValue containsString:@\"5\"];\n  }\n  return r;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216321,"user_id":53,"body":"#import <Foundation\/Foundation.h>\n\nint dont_give_me_five(int a, int b) {\n  int c = 0;\n  for (int n=a; n<=b; n++)\n    if (!has5(n))\n      c++;\n  return c;\n}\n\nint has5(int n) {\n  while (n != 0) {\n    if ((n % 10 == 5) || (n % 10 == -5))\n      return 1;\n    n \/= 10;\n  }\n  return 0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216322,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint dont_give_me_five(int start, int end) {\n  NSMutableArray * arr = [NSMutableArray new];\n  for (int i = start; i <= end; i++) {\n    NSString* myNewString = [NSString stringWithFormat:@\"%d\", i];\n    if (!([myNewString containsString:@\"5\"])) {\n            [arr addObject:myNewString];\n    }\n  }\n  return [arr count];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216323,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint dont_give_me_five(int start, int end)\n{\n  int count = 0;\n\n    for ( int i = start; i <= end; i++ )\n    {\n        NSString *intToString = [ NSString stringWithFormat:@\"%d\", i ];\n        if ( ![ intToString containsString:@\"5\" ] )\n        {\n            count++;\n        }\n    }\n  return count;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"581e1d083a4820eb4f00004f":[{"id":216324,"user_id":null,"body":"int mod256WithoutMod(int number)\n{\n  return number % 256;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216325,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint mod256WithoutMod(int number)\n{\n  int diviser = number \/ 256;\n  return number - (diviser * 256);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216326,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint mod256WithoutMod(int number)\n{\n  int final = 0; \n  int temp = number\/256; \n  if (temp == 0){\n    final = number;\n  }\n  else { \n    final = number - temp*256;\n  }\n  return final;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216327,"user_id":527,"body":"int mod256WithoutMod(int number) {\n  return number < 0 ? -mod256WithoutMod(-number) : number & 0xff;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216328,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n#import <math.h>\n\nint mod256WithoutMod(int n)\n{\n  int r = abs(n) & 0xff;\n  return n > 0 ? r : r * -1;\n}\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216329,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint mod256WithoutMod(int number)\n{\n  return number\/256 == number ? 0 : number - ((int)(number\/256) * 256);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216330,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint mod256WithoutMod(int number) {\n    while (abs(number) >= 256) {\n        if (number > 0) {\n            number-=256;\n        } else if (number < 0) {\n            number+=256;\n        }\n    }\n    return number;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216331,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint mod256WithoutMod(int number)\n{\n  return number - number \/ 256 * 256;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216332,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint mod256WithoutMod(int number)\n{\n  return number % 256;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216333,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint mod256WithoutMod(int number) {\n  return (abs(number) & 0xFF) * (number < 0 ? -1 : 1);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"582c297e56373f0426000098":[{"id":216334,"user_id":17,"body":"#import <Foundation\/Foundation.h>\n\n\/\/ \"Preloaded Code\" (Do NOT modify!)\n\ntypedef struct node {\n  int data;\n  struct node *next;\n} Node;\n\n\/\/ Main Solution\n\nNSString *stringify(Node *n) {\n  return n == NULL ? @\"NULL\" : [NSString stringWithFormat: @\"%d -> %@\", n->data, stringify(n->next)];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216335,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\ntypedef struct node \n{\n  int data;\n  struct node *next;\n} Node;\n\n\nNSString *stringify(Node *currentNode) \n{\n  NSString *returnString = @\"\";\n  while (currentNode != NULL)\n  {\n  \n    NSString *tempString = [NSString stringWithFormat:@\"%d\",currentNode->data];\n    \n    returnString = [returnString stringByAppendingString:tempString];\n        returnString = [returnString stringByAppendingString:@\" -> \"];\n    currentNode = currentNode->next;\n  }\n\n  returnString = [returnString stringByAppendingString:@\"NULL\"];\n    \n  \n  return returnString;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216336,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\n\/\/ \"Preloaded Code\" (Do NOT modify!)\n\ntypedef struct node {\n  int data;\n  struct node *next;\n} Node;\n\n\/\/ Main Solution\n\nNSString *stringify(Node *list) {\n  NSMutableString *string = [[NSMutableString alloc] init];\n  \n  while (list != NULL) {\n    NSNumber *number = [NSNumber numberWithInt: list->data];\n    [string appendFormat:@\"%@ -> \", number.stringValue];\n    \n    list = list->next;\n  }\n  \n  [string appendString:@\"NULL\"];\n  \n  return string;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216337,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\n\/\/ \"Preloaded Code\" (Do NOT modify!)\n\ntypedef struct node {\n  int data;\n  struct node *next;\n} Node;\n\n\/\/ Main Solution\n\nNSString *stringify(Node *list) {\n    NSMutableString *str = [NSMutableString string];\n    while (list != nil) {\n        [str appendFormat:@\"%d -> \", list->data];\n        list = list->next;\n    }\n    [str appendString:@\"NULL\"];\n    return str.copy;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216338,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\n\/\/ \"Preloaded Code\" (Do NOT modify!)\n\ntypedef struct node {\n  int data;\n  struct node *next;\n} Node;\n\n\/\/ Main Solution\n\nNSString *stringify(Node *list) {\n  return list == nil ? @\"NULL\" : [NSString stringWithFormat: @\"%d -> %@\", list->data, stringify(list->next)];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216339,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\n\/\/ \"Preloaded Code\" (Do NOT modify!)\n\ntypedef struct node {\n  int data;\n  struct node *next;\n} Node;\n\n\/\/ Main Solution\n\nNSString *stringify(Node *list) {\n  Node *node = list;\n  NSMutableString *output = [NSMutableString new];\n  while (node != nil) {\n    [output appendFormat: @\"%d -> \", node->data];\n    node = node->next;\n  }\n  [output appendString: @\"NULL\"];\n  return output;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216340,"user_id":53,"body":"#import <Foundation\/Foundation.h>\n\n\/\/ \"Preloaded Code\" (Do NOT modify!)\n\ntypedef struct node {\n  int data;\n  struct node *next;\n} Node;\n\n\/\/ Main Solution\n\nNSString *stringify(Node *list) {\n  if (list == NULL) {\n    return @\"NULL\";\n  } else {\n    return [NSString stringWithFormat: @\"%d -> %@\", list->data, stringify(list->next)];\n  }\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216341,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\n\/\/ \"Preloaded Code\" (Do NOT modify!)\n\ntypedef struct node {\n  int data;\n  struct node *next;\n} Node;\n\n\/\/ Main Solution\n\nNSString *stringify(Node *list) {\n  return list ? [NSString stringWithFormat:@\"%d -> %@\", list->data, stringify(list->next)] : @\"NULL\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216342,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\n\/\/ \"Preloaded Code\" (Do NOT modify!)\n\ntypedef struct node {\n  int data;\n  struct node *next;\n} Node;\n\n\/\/ Main Solution\n\nNSString *stringify(Node *list) {\n  \n  NSString *joined = @\"\";\n  while(list){\n    joined = [NSString stringWithFormat:@\"%@%d%@\", joined , list->data, @\" -> \" ];\n    list = list->next;\n  }\n  return [NSString stringWithFormat:@\"%@%@\", joined, @\"NULL\" ];\n\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216343,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\n\/\/ \"Preloaded Code\" (Do NOT modify!)\n\ntypedef struct node {\n  int data;\n  struct node *next;\n} Node;\n\n\/\/ Main Solution\n\nNSString *stringify(Node *list) {\n    NSString *a=@\"\";\n    while(list!=NULL){\n        NSString *strFromInt = [NSString stringWithFormat:@\"%d\",list->data];\n        a=[a stringByAppendingString:strFromInt];\n        a=[a stringByAppendingString:@\" -> \"];\n        list=list->next;\n    }\n    a=[a stringByAppendingString:@\"NULL\"];\n    return a;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"582c5382f000e535100001a7":[{"id":216344,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\n\/\/ \"Preloaded Code\" (do NOT modify!)\ntypedef struct node {\n  int data;\n  struct node *next;\n} Node;\n\n\/\/ Main Solution\nNode *parse(NSString *s) {\n  Node *head = NULL, *prev = NULL;\n  for (NSString *str in [s componentsSeparatedByString: @\" -> \"]) {\n    if ([str hasPrefix: @\"NULL\"]) break;\n    Node *node = malloc(sizeof(Node));\n    node->data = str.intValue;\n    if (!prev) {\n      head = prev = node;\n    } else {\n      prev = prev->next = node;\n    }\n    prev->next = NULL;\n  }\n  return head;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216345,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\n\/\/ \"Preloaded Code\" (do NOT modify!)\ntypedef struct node {\n  int data;\n  struct node *next;\n} Node;\n\nbool checkNull(NSString *s) {\n  return [@[@\"null\", @\"NULL\", @\"nil\", @\"nullptr\", @\"null()\"] containsObject: s];\n}\n\n\/\/ Main Solution\nNode *parse(NSString *s) {\n  if(checkNull(s))\n    return NULL;\n  \n  NSArray *elements = [s componentsSeparatedByString:@\"->\"];\n  Node* prev=NULL;\n  Node* head = NULL;\n  Node* current=malloc(sizeof(Node));\n  head = current;\n  for(NSString* elem in elements){\n    elem = [elem stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];\n    if(checkNull(elem)) {\n      prev->next = NULL;\n      free(current);\n      break;\n    } else {\n      current->data=[elem intValue];\n      Node* next=malloc(sizeof(Node));\n      current->next = next;\n      prev = current;\n      current = next;\n    }\n  }\n  return head;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216346,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\n\/\/ \"Preloaded Code\" (do NOT modify!)\ntypedef struct node {\n  int data;\n  struct node *next;\n} Node;\n\n\/\/ Main Solution\nNode *parse(NSString *s) {\n  Node *root = NULL;\n  Node **current = &root;\n  int foundNumber = false;\n  int number = 0;\n  for(int i=0; i < [s length]; i++) {\n    char c = [s characterAtIndex:i];\n    if (c >= '0' && c <= '9') {\n      foundNumber = true;\n      number = number * 10 + (c - '0');\n    } else if (foundNumber) {\n      Node *node = malloc(sizeof(Node));\n      node->data = number;\n      node->next = NULL;\n      *current = node;\n      current = &(node->next);\n      foundNumber = false;\n      number = 0;\n    }\n  }\n  return root;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216347,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\n\/\/ \"Preloaded Code\" (do NOT modify!)\ntypedef struct node {\n  int data;\n  struct node *next;\n} Node;\n\n\/\/ Main Solution\nNode *parse(NSString *s) {\n  s = [s stringByReplacingOccurrencesOfString:@\" \" withString:@\"\"];\n  Node *result = NULL;\n  Node *workingNode = result;\n  NSArray *stringArray = [s componentsSeparatedByString:@\"->\"];\n  for(NSString *stringAtIndex in stringArray)\n  {\n    if([stringAtIndex isEqualToString:@\"NULL\"])\n    {\n      workingNode = NULL;\n    }\n    else\n    {\n      \n      if(result == NULL)\n      {\n        result = (Node *) malloc(sizeof(Node *));\n        result->data =stringAtIndex.intValue;\n        result->next = NULL;\n        workingNode = result;\n      }\n      else\n      {\n        while(workingNode->next)\n        {\n          workingNode = workingNode->next;\n        }\n        \n        workingNode->next = (Node *) malloc(sizeof(Node *));\n        workingNode->next->data =stringAtIndex.intValue;\n        workingNode->next->next = NULL;\n      }\n    }\n    \n  }\n  return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216348,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\n\/\/ \"Preloaded Code\" (do NOT modify!)\ntypedef struct node {\n  int data;\n  struct node *next;\n} Node;\n\n\/\/ Main Solution\nNode *parse(NSString *s) {\n  NSArray *a = [s componentsSeparatedByString:@\" -> \"];\n    Node *prevNode = NULL;\n    for (int i = [a count] - 2; i >= 0; i--) {\n        Node currentNode;\n        currentNode.data = [[a objectAtIndex:i] integerValue];\n        currentNode.next = prevNode;\n        prevNode = malloc(sizeof(Node));\n        *prevNode = currentNode;\n    }\n    return prevNode;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216349,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\n\/\/ \"Preloaded Code\" (do NOT modify!)\ntypedef struct node {\n  int data;\n  struct node *next;\n} Node;\n\n\/\/ Main Solution\nNode *parse(NSString *s) {\n    \/\/ TODO: Parse the string provided and return an equivalent linked list\n    NSArray *array1 =[s componentsSeparatedByString:@\" -> \"];\n    NSMutableArray *nodearray = [[NSMutableArray alloc]init];\n    \n    for(int i=0;i<array1.count-1;i++){\n        \n        Node *n = (Node *) malloc(sizeof(Node));\n        n->data = [array1[i]intValue];\n        NSValue *structValue = [NSValue value:&n withObjCType:@encode(Node*)] ;\n        [nodearray addObject:structValue];\n        \n        if(i>0){\n            NSValue *structValue2 = [nodearray objectAtIndex:i-1];\n            Node *myNode = (Node *)[structValue2 pointerValue];\n            myNode->next = n;\n        }\n        if (i==array1.count-2){\n            n->next = NULL;\n        }\n    }\n    NSValue *structValue = nodearray.firstObject;\n    return (Node *)[structValue pointerValue];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216350,"user_id":17,"body":"#import <Foundation\/Foundation.h>\n\n\/\/ \"Preloaded Code\" (do NOT modify!)\ntypedef struct node {\n  int data;\n  struct node *next;\n} Node;\n\n\/\/ Main Solution\nNode *parse(NSString *s) {\n  if ([s isEqualToString: @\"NULL\"])\n    return NULL;\n  Node *result = malloc(sizeof(Node));\n  result->data = [[s substringToIndex: [s rangeOfString: @\" \"].location] intValue];\n  result->next = parse([s substringFromIndex: [s rangeOfString: @\" \"].location + 4]);\n  return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5839edaa6754d6fec10000a2":[{"id":216351,"user_id":null,"body":"char find_missing_letter(char letters[], int numberOfLetters)\n{\n  for(int i = 0; i < numberOfLetters; i++) {\n    char nextExpectedLetter = letters[i] + 1;\n    char nextLetter = letters[i + 1];\n    \n    if(nextExpectedLetter != nextLetter) {\n      return nextExpectedLetter;\n    }\n  }\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216352,"user_id":17,"body":"#import <Foundation\/Foundation.h>\n\nchar find_missing_letter(char a[], int l) {\n  for (int i = 1; i < l; i++) if (a[i] - a[0] != i) return a[0] + i;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216353,"user_id":3359,"body":"char find_missing_letter(char array[], int arrayLength)\n{\n  char ans = ' ';\n  int cnt = 0;\n  for (char a = array[0]; a <= array[arrayLength - 1]; a++) {\n      if (a != array[cnt])  {\n        ans = a;\n        break;\n      }\n      cnt++;\n  }\n  return ans;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216354,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nchar find_missing_letter(char array[], int arrayLength)\n{\n  for(int i=0;i<arrayLength-1;i++){\n    if(array[i]+1==array[i+1])\n      continue;\n    else\n      return array[i]+1;\n  }\n  return ' ';\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216355,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nchar find_missing_letter(char array[], int arrayLength)\n{\n  int begin = array[0];\n  for (int i = 1; i < arrayLength ; i++) {\n    int cur = (int)array[i];\n    if (cur != begin + 1) {\n      return (char)(begin+1);\n    }\n    begin ++;\n  }\n  return ' ';\n  \n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216356,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nchar find_missing_letter(char array[], int arrayLength)\n{\n    for(int index = 0; index < arrayLength; index++) {\n        if( array[index + 1] != array[index] + 1) {\n            return array[index] + 1;\n        }\n    }\n    return ' ';\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216357,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint findIndex(char array[], int arrayLength, char element) {\n    for(int index = 0; index < arrayLength; index++) {\n        if(array[index] == element) {\n            return index;\n        }\n    }\n    return -1;\n}\n\nchar find_missing_letter(char array[], int arrayLength)\n{\n     char alphabet[26];\n    int index = 0;\n    char firstChar = 'a';\n    char lastChar = 'z';\n    if(isupper(array[0])) {\n        firstChar -= 32;\n        lastChar -= 32;\n    }\n    for(char c = firstChar; c<=lastChar; c++) {\n        alphabet[index] = c;\n        index++;\n    }\n    int startIndex = findIndex(alphabet, 26, array[0]);\n    int finishIndex = findIndex(alphabet, 26, array[arrayLength-1]);\n    char correctArray[arrayLength+1];\n    int i = 0;\n    for(int index = startIndex; index <= finishIndex; index++) {\n        correctArray[i] = alphabet[index];\n        i++;\n    }\n    for(int index = 0; index<=arrayLength; index++) {\n        if(findIndex(array, arrayLength, correctArray[index]) == -1) {\n            return correctArray[index];\n        }\n    }\n    return ' ';\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216358,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nchar find_missing_letter(char array[], int arrayLength)\n{\n\tif (arrayLength == 0 ){\n\t\treturn ' ';\n\t}\n\tchar cur = array[0];\n\tfor(int i = 1 ; i < arrayLength; i ++){\n\t\tcur += 1;\n\t\tif(cur != array[i]){\n\t\t\treturn cur;\n\t\t}\n\t}\n\treturn ' ';\n}\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216359,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nchar find_missing_letter(char array[], int arrayLength)\n{\n  char expected = array[0] + 1;\n\/\/   if (arrayLength == 2) {\n\/\/       return expected + 1;\n\/\/   }\n  for (int idx = 1; idx < arrayLength; idx++) {\n    if (expected != array[idx]) { return expected; }\n    expected = expected + 1;\n  }\n  \n  return ' ';\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216360,"user_id":2846,"body":"#import <Foundation\/Foundation.h>\nchar find_missing_letter(char array[], int arrayLength)\n{\n  const NSString *alphabet = @\"abcdefghijklmnopqrstuwxyzABCDEFGHIJKLMNOPQRSTUWXYZ\";\n  NSString *firstLetter = [NSString stringWithFormat:@\"%c\", array[0]];\n  NSRange charRange = [alphabet rangeOfString:firstLetter];\n  NSUInteger start = charRange.location;\n  int charIndex = 0;\n  for (NSUInteger i = start; i < alphabet.length; i++) {\n    if (array[charIndex] != [alphabet characterAtIndex:i]) {\n      return [alphabet characterAtIndex:i];\n    }\n    charIndex++;\n  }\n  return nil;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"588417e576933b0ec9000045":[{"id":216361,"user_id":17,"body":"#import <Foundation\/Foundation.h>\nint seatsInTheater(int a, int b, int c, int d) {\n  return (a - c + 1) * (b - d);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216362,"user_id":1562,"body":"#import <Foundation\/Foundation.h>\nint seatsInTheater(int nCols, int nRows, int col, int row) {\n  return (nCols - col + 1) * (nRows - row);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216363,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint seatsInTheater(int nCols, int nRows, int col, int row) {\n    return abs((nCols-col+1)*(nRows-row));\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216364,"user_id":168,"body":"#import <Foundation\/Foundation.h>\nint seatsInTheater(int nCols, int nRows, int col, int row) {\n  return (nRows - row) * (nCols - col + 1);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216365,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint seatsInTheater(int nCols, int nRows, int col, int row) {\n  return (nCols - (col - 1)) * (nRows - row);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216366,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint seatsInTheater(int nCols, int nRows, int col, int row) {\n   int hor = nCols - col + 1;\n   int ver = nRows - row;\n   return hor * ver;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216367,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint seatsInTheater(int nCols, int nRows, int col, int row) {\n  int x = nCols - col + 1;\n  int y = nRows - row;\n  return x * y;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216368,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint seatsInTheater(int nCols, int nRows, int col, int row) {\n\n  int sizeX = nCols - col + 1;\n  int sizeY = nRows - row;\n  \n  return sizeX * sizeY;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216369,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint seatsInTheater(int nCols, int nRows, int col, int row) {\n  \/\/coding and coding...\n  int leftNumbers = 0;\n  leftNumbers = (nCols - col+1) *(nRows - row);\n  return leftNumbers;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216370,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint seatsInTheater(int nCols, int nRows, int col, int row) {\n  int myCol = nCols - (col - 1);\n  int myRow = nRows - row;\n  return myCol * myRow;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"588425ee4e8efb583d000088":[{"id":216371,"user_id":17,"body":"#import <Foundation\/Foundation.h>\n\nint phoneCall(int min1, int min2_10, int min11, int s) {\n  return s > min1 + min2_10 * 9 ? 10 + (s - (min1 + min2_10 * 9)) \/ min11 : s > min1 ? 1 + (s - min1) \/ min2_10 : s == min1 ? 1 : 0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216372,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint phoneCall(int min1, int min2_10, int min11, int s) {\n    if (s<min1) return 0;\n    int sum = 1;\n    sum+= (s-min1)>min2_10*9 ? 9 : (s-min1)\/min2_10;\n    sum+= (s-min1-9*min2_10)<0 ? 0 : (s-min1-9*min2_10)\/min11;\n    return sum;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216373,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint phoneCall(int min1, int min2_10, int min11, int s) {\n  \/\/coding and coding...\n  int totalSeconds = 0;\n  int totalPrice = 0;\n  BOOL end = NO;\n  do{\n    int thisSecondPrice = 0;\n    if(totalSeconds == 0){\n      thisSecondPrice = min1;\n    } else if(totalSeconds < 10){\n      thisSecondPrice = min2_10;\n    } else {\n      thisSecondPrice = min11;\n    }\n      if((totalPrice + thisSecondPrice) <= s){\n        totalSeconds++;\n        totalPrice += thisSecondPrice;\n        if(totalPrice >= s){\n          end = YES;\n        }\n      } else {\n        end = YES;\n      }\n  } while(!end);\n  \n  return totalSeconds;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216374,"user_id":168,"body":"#import <Foundation\/Foundation.h>\nint phoneCall(int min1, int min2_10, int min11, int s) {\n  if (s < min1) {\n    return 0;\n  }\n  s -= min1;\n  int m = 9 < s \/ min2_10 ? 9 : s \/ min2_10;\n  s -= m * min2_10;\n  return 1 + m + (m >= 9 ? s \/ min11 : 0);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216375,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint phoneCall(int min1, int min2_10, int min11, int s) {\n  \n  int during = 0;\n  \n  if (s >= min1){\n    \n    during ++;\n    s = s - min1;\n    \n    if (s > min2_10*9){\n\n      during = during + 9;\n      s = s - min2_10 * 9;\n      \n      if ( s > 0 ){\n      \n        during = during + s\/min11;\n        s = s - s\/min11;\n        \n      }\n    }else{\n\n      while( s >= min2_10){\n        s = s - min2_10;\n        during = during + 1;\n      }\n      \n    }\n  }\n  return during;\n\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216376,"user_id":null,"body":"int phoneCall(int min1, int min2_10, int min11, int s) {\n    NSLog(@\"%d %d %d %d\", min1 ,min2_10,min11,s);\n    int totalTime = 0 ;\n    if (s-min1 >= 0) {\n        totalTime++;\n        s-=min1;\n        while (s>=min2_10 && totalTime < 10) {\n            s-=min2_10;\n            totalTime++;\n        }\n        while (s>=min11 && totalTime >= 10) {\n            s-=min11;\n            totalTime++;\n        }\n    }\n    return totalTime;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216377,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint phoneCall(int min1, int min2_10, int min11, int s) {\n  \/\/ The O(1) solution\n  if (s < min1) { return 0; }\n  s -= min1;\n  if (s < min2_10 * 9) { return 1 + s \/ min2_10; }\n  s -= min2_10 * 9;\n  return 10 + s \/ min11;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216378,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint phoneCall(int min1, int min2_10, int min11, int s) {\n  \/\/ Straightforward approach of depleating cents (s) one price category at a time until cents run out\n  int minutes = 1;\n  while (s > 0) {\n    if (minutes < 2) {\n      s -= min1;\n    } else if (minutes <= 10) {\n      s -= min2_10;\n    } else {\n      s -= min11;\n    }\n    minutes++;\n  }\n  if (s < 0) {\n    minutes--;\n  }\n  return minutes - 1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216379,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint phoneCall(int min1, int min2_10, int min11, int s) {\n  int count = 1;\n  int cost = 0;\n  int minutes = 0;\n  while (true) {\n    if (count == 1) {\n      if (cost+min1 <= s) {\n        cost+=min1;\n        minutes++;\n      } else {\n        return minutes;\n      }\n    } else if ((count > 1) && (count < 11)) {\n      if (cost+min2_10 <= s) {\n        cost+=min2_10;\n        minutes++;\n      } else {\n        return minutes;\n      }\n    } else {\n      if (cost+min11 <= s) {\n        cost+=min11;\n        minutes++;\n      } else {\n        return minutes;\n      }\n    }\n    count++;\n  }\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216380,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint phoneCall(int min1, int min2_10, int min11, int s) {\n  \/\/coding and coding...\n  int count=0;\n  s-=min1;\n  count++;\n  \/\/cout << count<<endl ;\n  for (int i=2;i<=10;i++)\n  {\n    if(s<1)\n      exit(0);\n    else\n    {\n      s-=min2_10;\n      count++;\n    } \n  }\n  \/\/cout << count<<endl ;\n  count+=s\/min11;\n    \n  return count;\n \n  \n  \n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5886e082a836a691340000c3":[{"id":216381,"user_id":53,"body":"long long rectangle_rotation(int a, int b) {\n  a = (int)((double)a \/ sqrt(2));\n  b = (int)((double)b \/ sqrt(2));\n  long long r = (a + 1) * (b + 1) + a * b;\n  return r + r % 2 - 1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216382,"user_id":168,"body":"#include <math.h>\n\nlong long rectangle_rotation(int a, int b) {\n  int x = a \/ sqrt(2), y = b \/ sqrt(2);\n  return 2 * x * y + x + y - ((x ^ y) & 1) + 1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216383,"user_id":null,"body":"long long rectangle_rotation(int a, int b) {\n  \/\/ your code here\n        double SQRT_TWO = sqrt(2);\n        int c1 = (int) (a \/ SQRT_TWO);\n        int c2  = (int) (b \/ SQRT_TWO);\n        int c3 = c1,c4 =c2;\n        if (c1 % 2 == 0)\n            c1 ++;\n        else\n            c3 ++;\n        if (c2 % 2 == 0)\n            c2 ++;\n         else\n            c4 ++;\n        return c1 * c2 + c3 * c4;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216384,"user_id":null,"body":"long long rectangle_rotation(int a, int b) {\n    int r = a \/ sqrt(2), v = b \/ sqrt(2);\n    int pos = r * v + (r + 1) * (v + 1);\n    if (r % 2 == v % 2)\n        return pos;\n    return pos - 1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216385,"user_id":null,"body":"long long rectangle_rotation(int a, int b) {\n  \/\/ Variables\n  float aHalfBisect = (a\/sqrt(2))\/2;\n  float bHalfBisect = (b\/sqrt(2))\/2;\n  \n  \/\/ Calcula el numero de dots del primer rectangulo\n  int rect1Largo = floor(aHalfBisect) * 2 +1;\n  int rect1Ancho = floor(bHalfBisect) * 2 +1;\n  int rect2Largo = 0;\n  int rect2Ancho = 0;\n  \n  \/\/ Calcula el numero de dots del segundo rectangulo\n  if (aHalfBisect - (floor(aHalfBisect)) < 0.5) {\n    rect2Largo = rect1Largo - 1;\n  } else {\n    rect2Largo = rect1Largo + 1;\n  }\n  \n  if (bHalfBisect - (floor(bHalfBisect)) < 0.5) {\n    rect2Ancho = rect1Ancho - 1;\n  } else {\n    rect2Ancho = rect1Ancho + 1;\n  }\n \n  return (rect1Largo * rect1Ancho) + (rect2Largo * rect2Ancho);\n    \n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216386,"user_id":null,"body":"long long rectangle_rotation(int a, int b) {\n  int h = a \/ sqrt(2);\n  int v = b \/ sqrt(2);\n  return h * v + (( h + 1 ) * ( v + 1 ) - (h % 2 ^ v % 2));\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216387,"user_id":492,"body":"long long rectangle_rotation(int a, int b) {\n    int u = a \/ sqrt(2), v = b \/ sqrt(2);\n    int almost_result = u * v + (u + 1) * (v + 1);\n    if (u % 2 == v % 2)\n        return almost_result;\n    return almost_result - 1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216388,"user_id":645,"body":"#include <math.h>\n\nlong long rectangle_rotation(int a, int b) {\n  int h = a \/ sqrt(2);\n  int v = b \/ sqrt(2);\n  return h * v + (h + 1) * (v + 1) - (h % 2 ^ v % 2);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"588f3e0dfa74475a2600002a":[{"id":216389,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSArray *possibilities(NSString *str) {\n  NSRange range = [str rangeOfString:@\"?\"];\n  if (range.location == NSNotFound) { return @[str]; }\n  \n  NSArray *zero = possibilities([str stringByReplacingCharactersInRange:range withString:@\"0\"]);\n  NSArray *one = possibilities([str stringByReplacingCharactersInRange:range withString:@\"1\"]);\n  return [zero arrayByAddingObjectsFromArray:one];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216390,"user_id":17,"body":"#import <Foundation\/Foundation.h>\n\nNSArray *possibilities(NSString *s) {\n  \/\/ NSLog(@\"User `possibilities` accidentally invoked!\n\");\n  if ([s rangeOfString: @\"?\"].length == 0) return @[s];\n  NSString *r = [s stringByReplacingOccurrencesOfString: @\"?\" withString: @\"0\" options: 0 range: [s rangeOfString: @\"?\"]], *t = [s stringByReplacingOccurrencesOfString: @\"?\" withString: @\"1\" options: 0 range: [s rangeOfString: @\"?\"]];\n  return [possibilities(r) arrayByAddingObjectsFromArray: possibilities(t)];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216391,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nNSArray *possibilities(NSString *s) {\n  for (int i = 0; i < s.length; i++) {\n    if ([s characterAtIndex: i] == '?') {\n      NSString *prefix = [s substringToIndex: i];\n      NSMutableArray *res = [NSMutableArray arrayWithCapacity: 100];\n      for (int k = 0; k <= 1; k++) {\n        for (NSString *str in possibilities([s substringFromIndex: i + 1])) {\n          [res addObject: [NSString stringWithFormat: @\"%@%d%@\", prefix, k, str]];\n        }\n      }\n      return res;\n    }\n  }\n  return @[s];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216392,"user_id":53,"body":"#import <Foundation\/Foundation.h>\n\nNSArray *possibilities(NSString *s) {\n  if ([s rangeOfString: @\"?\"].length == 0) return @[s];\n  NSString *l = [s stringByReplacingOccurrencesOfString: @\"?\" withString: @\"0\" options: 0 range: [s rangeOfString: @\"?\"]];\n  NSString *r = [s stringByReplacingOccurrencesOfString: @\"?\" withString: @\"1\" options: 0 range: [s rangeOfString: @\"?\"]];\n  return [possibilities(l) arrayByAddingObjectsFromArray: possibilities(r)];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216393,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSMutableArray* doNextWildcard(NSMutableArray* inputs){\n    NSMutableArray* wildcards = [[NSMutableArray alloc]initWithCapacity:10];\n    \n    \/\/ find the location of the next ?\n    NSString *str = [[inputs[0] componentsSeparatedByString:@\"?\"] objectAtIndex:0];\n    NSUInteger index = str.length;\n    \n    \/\/ if no ?, we're done recursing and we can return inputs\n    if(index >= [inputs[0] length]){\n        return inputs;\n    }\n    \n    \/\/ for each input\n    for(NSString* str in inputs){\n        \/\/ Create a 1 & 0 version of that input, and add it to the output array\n        NSString* s0 = [str copy];\n        s0 = [str stringByReplacingCharactersInRange:NSMakeRange(index, 1) withString:@\"0\"];\n        [wildcards addObject:s0];\n        \n        NSString* s1 = [str copy];\n        s1 = [str stringByReplacingCharactersInRange:NSMakeRange(index, 1) withString:@\"1\"];\n        [wildcards addObject:s1];\n    }\n    \n    \/\/free(inputs);\n    \/\/ recursively call this function with the output\n    return doNextWildcard(wildcards);\n}\n\nNSArray *possibilities(NSString *s) {\n    NSMutableArray* answers = [[NSMutableArray alloc]initWithCapacity:1];\n    [answers addObject:s];\n    \n    NSMutableArray* results = doNextWildcard(answers);\n    \n    return results;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216394,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSArray *getIndices(NSString *s) {\n  NSMutableArray* indices = [NSMutableArray new];\n  for (int i=0; i < [s length]; ++i) {\n    unichar c = [s characterAtIndex:i];\n    if (c == '?') {\n      [indices addObject:@(i)];\n    }\n  }\n  return indices;\n}\n\nNSArray *getCombinationsForIndex(NSMutableArray *combinations, int index) {\n  NSMutableArray* newCombinations = [NSMutableArray new];\n  for (NSMutableString *number in combinations) {\n      NSMutableString* zeroVariant = [number stringByReplacingCharactersInRange:NSMakeRange(index, 1) withString:@\"0\"];\n      NSMutableString* oneVariant = [number stringByReplacingCharactersInRange:NSMakeRange(index, 1) withString:@\"1\"];\n      if (![newCombinations containsObject:zeroVariant]) {\n        [newCombinations addObject:zeroVariant];\n      }\n      if (![newCombinations containsObject:oneVariant]) {\n        [newCombinations addObject:oneVariant];\n      }\n  }\n  return newCombinations; \n}\n\nNSArray *getCombinations(NSMutableString *s, NSArray *indices) {\n  NSMutableArray* combinations = [NSMutableArray new];\n  [combinations addObject:s];\n  for (NSNumber *index in indices) {\n    for (NSMutableString *number in combinations) {\n      combinations = getCombinationsForIndex(combinations, [index intValue]);\n    }\n  }\n  return combinations;\n}\n\nNSArray *possibilities(NSString *s) {  \n  return getCombinations([s mutableCopy], getIndices(s));\n}\n\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216395,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSMutableArray *posHelper(NSString *s, int i);\n\nNSArray *possibilities(NSString *s) {\n  return [posHelper(s, 0) copy];\n}\n\nNSMutableArray *posHelper(NSString *s, int i) {\n  char c = '0';\n  while (i < s.length) {\n    c = [s characterAtIndex:i];\n    if (c == '?') { break; }\n    ++i;\n  }\n  \n  if (i == s.length) { return [@[s] mutableCopy]; }\n  \n  NSRange range = NSMakeRange(i, 1);\n  NSMutableArray *results = posHelper([s stringByReplacingCharactersInRange:range withString:@\"0\"], i + 1);\n  [results addObjectsFromArray:posHelper([s stringByReplacingCharactersInRange:range withString:@\"1\"], i + 1)];\n  \n  return results;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216396,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nvoid permutate(NSString *s, NSMutableArray *array) {\n  NSRange wildcard = [s rangeOfString:@\"?\"];\n  if (wildcard.location != NSNotFound) {\n    permutate([s stringByReplacingCharactersInRange:wildcard withString:@\"0\"], array);\n    permutate([s stringByReplacingCharactersInRange:wildcard withString:@\"1\"], array);\n  } else {\n    [array addObject:s];\n  }\n}\n\nNSArray *possibilities(NSString *s) {\n  NSMutableArray *permutations = [NSMutableArray array];\n  permutate(s, permutations);  \n  return permutations;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216397,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSArray *iwcards(NSString *s) {\n  NSMutableArray *iw = [NSMutableArray array];\n  for (int i=0, j=0; i<[s length]; i++) \n    if ([s characterAtIndex: i]=='?') iw[j++] = @(i);\n  return [iw copy];\n}\nNSArray *bins(int nw) {\n  NSMutableArray *bw = [NSMutableArray array];\n  NSMutableArray *za = [NSMutableArray arrayWithCapacity: nw];\n  for (int i=0; i<nw; i++) za[i] = @\"0\";\n  for (int i=0; i<1<<nw; i++) {\n    NSMutableArray *ba = [NSMutableArray arrayWithArray: za];\n    for (int j=i, k=nw-1; j>0; j>>=1, k--) if (j & 1) ba[k] = @\"1\";\n    bw[i] = ba;\n  }\n  return [bw copy];\n}\nNSArray *possibilities(NSString *s) {\n  NSMutableArray *a = [NSMutableArray array];\n  NSArray *iw = iwcards(s);  \n  int nw = [iw count];\n  NSArray *bw = bins(nw);\n  NSMutableString *ms = [s mutableCopy];\n  for (int i=0; i<1<<nw; i++) {\n    for (int j=0; j<nw; j++) \n      [ms replaceCharactersInRange: NSMakeRange([iw[j] intValue], 1) withString: bw[i][j]];\n    a[i] = [ms copy];\n  }\n  return [a copy];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216398,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSArray *iwcards(NSString *s) {\n  NSMutableArray *iw = [NSMutableArray array];\n  for (int i=0, j=0; i<[s length]; i++) \n    if ([s characterAtIndex: i]=='?') iw[j++] = @(i);\n  return [iw copy];\n}\nNSArray *bins(int nw) {\n  NSMutableArray *ma, *ba = [NSMutableArray array]; \n  for (int i=0; i<1<<nw; i++) {\n    ma = [NSMutableArray array];\n    for (int j=i; j>0; j>>=1) [ma insertObject: (j%2==1? @(1): @(0)) atIndex: 0];\n      if ([ma count]<nw) \n        for (int j = [ma count]; j<nw; j++) [ma insertObject: @(0) atIndex: 0];\n    ba[i] = ma;\n  }\n  return [ba copy];\n}\nNSArray *possibilities(NSString *s) {\n  NSMutableArray *a = [NSMutableArray array];\n  NSArray *iw = iwcards(s);  \n  int nw = [iw count];\n  NSArray *bw = bins(nw);\n  int nbw = [bw count];\n  NSMutableString *ms;\n  for (int i=0; i<nbw; i++) {\n    ms = [s mutableCopy];\n    for (int j=0; j<nw; j++) \n      [ms replaceCharactersInRange: NSMakeRange([iw[j] intValue], 1) withString: [bw[i][j] stringValue]];\n    a[i] = ms;\n  }  \n  return [a copy];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5899a4b1a6648906fe000113":[{"id":216399,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString *findRoutes(NSArray *routes){\n\n    NSMutableArray * routesM = [routes mutableCopy];\n    NSMutableArray * answer = [@[routes[0][0]] mutableCopy];\n    do{\n        for(int i = (int)routesM.count - 1; i >= 0; i--){\n            if([[answer lastObject] isEqualToString:routesM[i][0]]){\n                [answer addObject:routesM[i][1]];\n                [routesM removeObjectAtIndex:i];\n            } else if([[answer firstObject] isEqualToString:routesM[i][1]]){\n                [answer insertObject:routesM[i][0] atIndex:0];\n                [routesM removeObjectAtIndex:i];\n            }\n        }\n    } while (routesM.count > 0);\n    return [answer componentsJoinedByString:@\", \"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216400,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString *findRoutes(NSArray *routes){\n  \/\/ Do any of your coding here.\n  NSMutableSet *firstPlaces = [NSMutableSet new];\n  NSMutableSet *nextPlaces = [NSMutableSet new];\n  NSMutableDictionary *route = [NSMutableDictionary  new];\n  int i=0;\n  for(;i<[routes count];i++) {\n    NSString* p1 = [[routes objectAtIndex: i] objectAtIndex: 0];\n    NSString* p2 = [[routes objectAtIndex: i] objectAtIndex: 1];\n    [route setObject: p2 forKey:p1];\n    [firstPlaces removeObject:p2];\n    [nextPlaces addObject: p2];\n    if([nextPlaces member: p1]==nil)\n      [firstPlaces addObject: p1];\n  }\n  NSMutableString* res = [NSMutableString new];\n  NSString* place = [firstPlaces anyObject];\n  while(place != nil){\n    [res appendString: place];\n    [res appendString: @\", \"];\n    place = [route objectForKey: place];\n  }\n  NSRange lastCommaRange = NSMakeRange([res length] - 2, 2);\n  [res deleteCharactersInRange: lastCommaRange];\n  return res;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216401,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString *findRoutes(NSArray *routes){\n  \/\/ Do any of your coding here.\n  NSMutableArray *mutableRoutes = [routes mutableCopy];\n  NSMutableArray *orderedRoutes = [NSMutableArray new];\n  [orderedRoutes addObject:mutableRoutes[0]];\n  [mutableRoutes removeObjectAtIndex:0];\n  BOOL goingForward = YES;\n  \n  while ([mutableRoutes count] > 0) {\n    NSArray *currentRoute = goingForward ? orderedRoutes[[orderedRoutes count] - 1] : orderedRoutes[0];\n    int i;\n    BOOL found = NO;\n    for(i = 0; i < [mutableRoutes count]; i++) {\n      if(mutableRoutes[i][goingForward ? 0 : 1] == currentRoute[goingForward ? 1 : 0]) {\n        [orderedRoutes insertObject: mutableRoutes[i] atIndex: goingForward ? [orderedRoutes count] : 0];\n        found = YES;\n        [mutableRoutes removeObjectAtIndex:i];\n        break;\n      }\n    }\n    if(!found) {\n      goingForward = NO;\n    }\n  }\n  NSString *iten = @\"\";\n  int j;\n  for(j = 0; j < [orderedRoutes count]; j++) {\n    iten = [iten stringByAppendingString: orderedRoutes[j][0]];\n    iten = [iten stringByAppendingString: @\", \"];\n    \n  }\n  iten = [iten stringByAppendingString: orderedRoutes[[orderedRoutes count] - 1][1]]; \n  \n  return iten;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216402,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString *findRoutes(NSArray *routes){\n\n    NSMutableArray *req = [routes mutableCopy];\n    NSMutableArray *res = [@[routes[0][0]] mutableCopy];\n    do{\n        for(int i = (int)req.count - 1; i >= 0; i--){\n            if([[res lastObject] isEqualToString:req[i][0]]){\n                [res addObject:req[i][1]];\n                [req removeObjectAtIndex:i];\n            } else if([[res firstObject] isEqualToString:req[i][1]]){\n                [res insertObject:req[i][0] atIndex:0];\n                [req removeObjectAtIndex:i];\n            }\n        }\n    } while (req.count > 0);\n    return [res componentsJoinedByString:@\", \"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216403,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString *findRoutes(NSArray *routes){\n  \/\/ Do any of your coding here.\n  \n  NSMutableDictionary *sourceToDestMap = [NSMutableDictionary dictionary];\n  NSMutableSet *allCitiesSet = [NSMutableSet set];\n  for (NSArray *route in routes) {\n    [sourceToDestMap setObject:route[1] forKey:route[0]];\n    [allCitiesSet addObject:route[0]];\n    [allCitiesSet addObject:route[1]];\n  }\n  \n  NSMutableArray *resultRoute = [NSMutableArray array];\n  \n  NSString *originName;\n  for (NSString *possibleOrigin in sourceToDestMap.allKeys)\n  {\n    bool found = false;\n    for (NSString *destination in sourceToDestMap.allValues)\n    {\n      NSLog(@\"dest = %@, ori = %@\", destination, possibleOrigin);\n      if ([destination isEqualToString:possibleOrigin] == false) {\n        continue;\n      }\n      found = true;\n      break;\n    }\n    if (!found) {\n      originName = possibleOrigin;\n      break;\n    }\n  }\n  \n  while ([allCitiesSet count] > 1) {\n    [resultRoute addObject:originName];\n    NSLog(@\"removing %@\", originName);\n    [allCitiesSet removeObject:originName];\n    originName = [sourceToDestMap objectForKey:originName];\n  }\n  [resultRoute addObject:[allCitiesSet anyObject]];\n  return [resultRoute componentsJoinedByString:@\", \"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216404,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString *findRoutes(NSArray *routes){\n  \/\/\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0443\u044e \u0442\u043e\u0447\u043a\u0443\n    \/\/\u043d\u0430\u0439\u0442\u0438 \u0442\u043e\u0447\u043a\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0435 \u0431\u044b\u0432\u0430\u0435\u0442 \u0432\u0442\u043e\u0440\u043e\u0439 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435\n  \/\/\u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0439\u0442\u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\n  \n  NSMutableDictionary *dictionaryForSeekFirst = [NSMutableDictionary dictionaryWithCapacity: 0];\n  NSMutableDictionary *routesDictionary = [NSMutableDictionary dictionaryWithCapacity: routes.count+1];\n  \n  int i;\n  for(i = 0; i < routes.count; i++) {\n    \n\/\/     NSLog(@\"Step %i\", i);\n\/\/     for(id key in dictionaryForSeekFirst)\n\/\/     NSLog(@\"key=%@ value=%@\", key, [dictionaryForSeekFirst objectForKey:key]);\n    \n    [routesDictionary setObject: routes[i][1] forKey: routes[i][0]];\n    \n    if(dictionaryForSeekFirst[routes[i][0]] == nil)\n    {\n      [dictionaryForSeekFirst setObject: @\"from\" forKey: routes[i][0]];\n    }\n    else {\n      [dictionaryForSeekFirst removeObjectForKey: routes[i][0]];\n    }\n    \n    if(dictionaryForSeekFirst[routes[i][1]] == nil)\n    {\n      [dictionaryForSeekFirst setObject: @\"to\" forKey: routes[i][1]];\n    }\n    else {\n      [dictionaryForSeekFirst removeObjectForKey: routes[i][1]];\n    }\n  }\n\n\/\/ NSLog(@\"FINISH\");\n\/\/NSLog(@\"key=%@ value=%@\", key, [dictionaryForSeekFirst objectForKey:key]);\n  NSString *start;\n  NSString *finish;\n\n  for(id key in dictionaryForSeekFirst) {\n    if([[dictionaryForSeekFirst objectForKey:key] isEqualToString: @\"from\"]) {\n      start = key;\n    }\n    if([[dictionaryForSeekFirst objectForKey:key] isEqualToString: @\"to\"]) {\n      finish = key;\n    }\n  }\n    \n    \n   \n  NSMutableString *result = [NSMutableString stringWithString: @\"\"];\n  [result appendString: start];\n  [result appendString: @\", \"];\n  \n  NSString *currentPoint = start;\n  \n  while([routesDictionary objectForKey: currentPoint] != nil) {\n    \n    [result appendString: [routesDictionary objectForKey: currentPoint]];\n    if(! [[routesDictionary objectForKey: currentPoint] isEqualToString: finish]) {\n      [result appendString: @\", \"];\n    }\n    \n    currentPoint = [routesDictionary objectForKey: currentPoint];\n  }\n  \n\n  return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216405,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString* findRoutes(NSArray* routes)\n{\n    int start = 0;\n    \/\/  Find the start point\n    for (int i = 0; i < routes.count; ++i)\n    {\n        BOOL foundStart = YES;\n        NSString* s = routes[i][0];\n        for (int j = 0; j < routes.count; ++j)\n        {\n            NSArray<NSString*>* route = routes[j];\n            if ([s isEqualToString:route[1]])\n            {\n                foundStart = NO;\n                break;\n            }\n        }\n        start = i;\n        if (foundStart) break;\n    }\n    \n    NSMutableArray<NSString*>* ma = [NSMutableArray<NSString*> array];\n    [ma addObject:((NSArray*)routes[start])[0]];\n    [ma addObject:((NSArray*)routes[start])[1]];\n    for (int i = 0; i < routes.count; ++i)\n    {\n         if ([ma.lastObject isEqualToString:((NSArray*)routes[i])[0]])\n         {\n             [ma addObject:((NSArray*)routes[i])[1]];\n             i = -1;\n         }\n    }\n    return [ma componentsJoinedByString:@\", \"];\n}\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216406,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString *findRoutes(NSArray *routes) {\n  NSMutableArray *sr = [routes mutableCopy];\n  NSMutableArray *tr = [NSMutableArray array];\n  [tr addObjectsFromArray: sr[0]];\n  [sr removeObject: sr[0]];\n  bool founded; NSArray *it;\n  while ([sr count]>0) \n    for (it in sr) {\n      founded = true;\n      if ([tr lastObject]==it[0]) [tr addObject: it[1]];\n      else if (tr[0]==it[1]) [tr insertObject: it[0] atIndex: 0];\n      else founded = false;\n      if (founded) { [sr removeObject: it]; break; }\n    }  \n  return [tr componentsJoinedByString: @\", \"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216407,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString *findRoutes(NSArray *routes) {\n  NSMutableArray *sr = [routes mutableCopy];\n  NSMutableArray *tr = [NSMutableArray array];\n  [tr addObjectsFromArray: sr[0]];\n  [sr removeObject: sr[0]];\n  while ([sr count]>0) {\n    for (NSArray *it in sr)\n      if ([tr lastObject]==it[0]) {\n        [tr addObject: it[1]];\n        [sr removeObject: it];\n        break;\n      }\n      else if (tr[0]==it[1]) {\n        [tr insertObject: it[0] atIndex: 0];\n        [sr removeObject: it];\n        break;\n      }\n  }\n  return [tr componentsJoinedByString: @\", \"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216408,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString* findRoutes(NSArray* routes) {\n  NSMutableDictionary* dict = [[NSMutableDictionary alloc] init];\n  \n  for(id route in routes) {\n    dict[route[0]] = route[1];\n  }\n  \n  NSMutableArray* realRoutes = [[NSMutableArray alloc] init];\n  \n  for(id route in routes) {\n    id from = route[0];\n    id to = nil;\n    \n    [realRoutes addObject:from];\n    \n    while((to = dict[from]) != nil) {\n      [realRoutes addObject:to];\n      from = to;\n      to = nil;\n    }\n    \n    if([realRoutes count] != ([routes count] + 1)) {\n      \/\/ Try again\n      [realRoutes removeAllObjects];\n    }\n    else {\n      break;\n    }\n  }\n  \n  NSString* realRoute = [realRoutes componentsJoinedByString:@\", \"];\n  \n  [dict release];\n  [realRoutes release];\n  \n  return realRoute;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"59293c2cfafd38975600002d":[{"id":216409,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nint vb(char c) {\n  return c=='('? 1: c==')'? -1: 0;\n}\nint findParenMatch(NSString *s, int n) {\n  int i = vb([s characterAtIndex: n]);\n  if (i==0) return -1;\n  while (i>0 && ++n<[s length]) \n    i+=vb([s characterAtIndex: n]);\n  while (i<0 && --n>=0) \n    i+=vb([s characterAtIndex: n]);\n  return i==0? n: -1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216410,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nBOOL isParen(char c) {\n  return c == '(' || c == ')';\n}\n\nint findParenMatch(NSString *s, int n) {\n  char c, paren = [s characterAtIndex:n];\n  if (!isParen(paren)) return -1;\n  \n  int direction = (paren == '(' ? 1 : -1);\n  int passed = 0;\n  for (int i = n + direction; 0 <= i && i < [s length]; i += direction) {\n    c = [s characterAtIndex:i];\n    if (isParen(c)) {\n      if (paren == c) { ++passed; }\n      else {\n        --passed;\n        if (passed < 0) { return i; }\n      }\n    }\n  }\n  return -1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216411,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nint paren(NSString *s, int i) {\n  unichar ch = [s characterAtIndex: i];\n  return (ch == '(') - (ch == ')');\n}\n\nint findParenMatch(NSString *s, int n) {\n  int d = paren(s, n);\n  if (!d) return -1;\n  for (int k = 0; n >= 0 && n < s.length; n += d) {\n    k += paren(s, n);\n    if (!k) return n;\n  }\n  return -1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216412,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint findParenMatch(NSString *s, int n) {\n  \/\/ TODO: Find and return the index of the matching opening\/closing bracket\n  \/\/ if found, -1 otherwise\n  NSUInteger len = [s length];\n  if(n<0||n>=len)\n    return -1;\n  unichar input[len+1];\n  [s getCharacters:input range:NSMakeRange(0, len)];\n  bool directionASC=YES;\n  switch(input[n]){\n      case '(':\n        if(n+1>=len)\n          return -1;\n        directionASC=YES;\n        break;\n      case ')':\n        if(n-1<0)\n          return -1;\n        directionASC=NO;\n        break;\n      default:\n        return -1;\n  }\n  \n  int otherOpened=0;\n  if(directionASC){\n    for(int i=n+1;i<len;i++){\n      switch(input[i]){\n          case '(':\n            otherOpened++;\n            break;\n          case ')':\n            if(otherOpened==0)\n              return i;\n            else\n              otherOpened--;\n            break;\n      }\n    }\n  } else {\n    for(int i=n-1;i>=0;i--){\n      switch(input[i]){\n          case '(':\n            if(otherOpened==0)\n              return i;\n            else\n              otherOpened--;\n            break;\n          case ')':\n            otherOpened++;\n            break;\n      }\n    }\n  }\n  return -1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216413,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint findParenMatch(NSString *s, int n) {\n    int i;\n    int count;\n    if([s characterAtIndex : n]=='('){\n        i=n;\n        count=0;\n        while(i<(int)[s length]&&[s characterAtIndex: i]!=')'){\n            if ([s characterAtIndex : i]=='(')\n                count++;\n            i++;\n        }\n        while(i<(int)[s length]&&count>0){\n            if ([s characterAtIndex : i]=='(')\n                count++;\n            if ([s characterAtIndex : i]==')')\n                count--;\n            i++;\n        }\n        if(count==0)\n            return i-1;\n    }else if([s characterAtIndex : n]==')'){\n        i=n;\n        count=0;\n        while(i>=0&&[s characterAtIndex:i]!='('){\n            if ([s characterAtIndex : i]==')')\n                count++;\n            i--;\n        }\n        while(i>=0&&count>0){\n            if ([s characterAtIndex : i]=='(')\n                count--;\n            if ([s characterAtIndex : i]==')')\n                count++;\n            i--;\n        }\n        if(count==0)\n            return i+1;\n    }\n    return -1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216414,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint findParenMatch(NSString *s, int n) {\n\tif(n >= [s length] || n < 0){\n\t\treturn -1;\n\t}\n\tint count = 1;\n\tif( [s characterAtIndex:n] == '('){\n\t\tint length = [s length];\n\t\tfor( int i = n + 1 ; i < length ; i ++){\n\t\t\tif ( [s characterAtIndex:i] == '('){\n\t\t\t\tcount ++;\n\t\t\t}else if([s characterAtIndex:i] == ')'){\n\t\t\t\tcount --;\n\t\t\t}\n\t\t\tif (count == 0 ){\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}else if([s characterAtIndex:n] == ')'){\n\t\tfor ( int i = n - 1; i >= 0; i -- ){\n\t\t\tif ( [s characterAtIndex:i] == '('){\n\t\t\t\tcount --;\n\t\t\t}else if([s characterAtIndex:i] == ')'){\n\t\t\t\tcount ++;\n\t\t\t}\n\t\t\tif (count == 0 ){\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216415,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint findParenMatch(NSString *s, int n) {\n    NSMutableArray *stack = [[NSMutableArray alloc] init];\n    for (int i = 0; i < s.length; i++) {\n        unichar c = [s characterAtIndex:i];\n        if (c == '(') {\n            [stack addObject:[NSNumber numberWithInt:i]];\n        }\n        \n        if (c == ')' && [stack count] > 0) {\n            int lastOpenParenIndex = [[stack lastObject] intValue];\n            [stack removeLastObject];\n                        \n            if (i == n) {\n                return lastOpenParenIndex;\n            }\n            if (lastOpenParenIndex == n) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216416,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint findParenMatch(NSString *s, int n) {\n  \/\/ TODO: Find and return the index of the matching opening\/closing bracket\n  \/\/ if found, -1 otherwise\n  \n    if (n > s.length-1) {\n        return  -1;\n    }\n    \n    \n    if([s containsString:@\"(\"] || [s containsString:@\")\"]){\n        \n        NSMutableArray  * strArr = [[NSMutableArray alloc]init];\n         NSMutableArray  * indexArr = [[NSMutableArray alloc]init];\n        NSString *subStr = [s  substringWithRange:NSMakeRange(n, 1)];\n        if ([subStr isEqualToString:@\")\"]) {\n            \/\/\u5411\u524d\u627e\n            NSString *needFindStr = [NSString string];\n            if (n+1 <s.length ) {\n                needFindStr = [s substringToIndex:n+1];\n            }else{\n                needFindStr = s;\n            }\n          \n            \n            if (![needFindStr containsString:@\"(\"]) {\n                return  -1;\n            }\n            \n            for(int i =0;i<needFindStr.length;i++){\n                NSString * indexstr = [needFindStr substringWithRange:NSMakeRange(i, 1)];\n                if ([indexstr isEqualToString:@\"(\"] || [indexstr isEqualToString:@\")\"]) {\n                    [strArr addObject:indexstr]; \/\/\u5b58\u5165\u6570\u7ec4\n                    [indexArr addObject:[NSString stringWithFormat:@\"%d\",i]]; \/\/\u5b58\u5165i \u5728needFindStr \u4e2d\u7684\u4f4d\u7f6e\n                }\n            }\n            \/\/\u53bb\u6389\u6210\u5bf9\u7684\uff08\uff09\n            for (int j =0 ; j<indexArr.count; j++) {\n                if (strArr.count<2) {\n                    return -1;\n                }\n            for(int i= 0;i<strArr.count;i++){\n                if (strArr.count<2) {\n                    return -1;\n                }\n                NSString * findstr = [strArr objectAtIndex:i];\n                if ([findstr isEqualToString:@\"(\"]) {\n                      NSString * findNextstr = [NSString string];\n                    if (i+1 <strArr.count) {\n                        findNextstr  = [strArr objectAtIndex:i+1];\n                    }else\n                    {\n                        continue;\n                    }\n                  \n                    \n                   \n                    if ([findNextstr isEqualToString:@\")\"]) {\n                        \n                        if (i+1 == strArr.count-1) {\n                            \/\/\u627e\u5230\u7684index\n                            return  [[indexArr objectAtIndex:i] intValue];\n                        }else{\n                            [strArr removeObjectAtIndex:i];\n                            [strArr removeObjectAtIndex:i];\/\/\u79fb\u9664\u4e4b\u540e \u540e\u9762\u7684\u5c31\u53d8\u6210\u4e86 i\n                            [indexArr removeObjectAtIndex:i];\n                            [indexArr removeObjectAtIndex:i];\n                            \n                        }\n                    }\n                }\n            }\n            }\n        }else if ([subStr isEqualToString:@\"(\"]){\n            \/\/\u5411\u540e\u627e\n            NSString *needFindStr = [s substringFromIndex:n];\n            \n            if (![needFindStr containsString:@\")\"]) {\n                return  -1;\n            }\n            \n            for(int i =0;i<needFindStr.length;i++){\n                NSString * indexstr = [needFindStr substringWithRange:NSMakeRange(i, 1)];\n                if ([indexstr isEqualToString:@\"(\"] || [indexstr isEqualToString:@\")\"]) {\n                    [strArr addObject:indexstr]; \/\/\u5b58\u5165\u6570\u7ec4\n                    [indexArr addObject:[NSString stringWithFormat:@\"%d\",i]]; \/\/\u5b58\u5165i \u5728needFindStr \u4e2d\u7684\u4f4d\u7f6e\n                }\n            }\n            \n            \n            for (int j =0 ; j<indexArr.count; j++) {\n                if (strArr.count<2) {\n                    return -1;\n                }\n            \n            for(int i= 0;i<strArr.count;i++){\n                if (strArr.count<2) {\n                    return -1;\n                }\n                NSString * findstr = [strArr objectAtIndex:i];\n                \n                if ([findstr isEqualToString:@\"(\"]) {\n                    \n                      NSString * findNextstr = [NSString string];\n                    if (i+1 <strArr.count) {\n                        findNextstr  = [strArr objectAtIndex:i+1];\n                    }else\n                    {\n                        continue;\n                    }\n                    if ([findNextstr isEqualToString:@\")\"]) {\n                        \n                        if (i == 0) {\n                            \/\/\u627e\u5230\u7684index\n                            return  [[indexArr objectAtIndex:i+1] intValue] +n ; \/\/\u5f80\u540e\u627e\u7684\u662f\u5b50\u4e32\u7684\u4f4d\u7f6e \u6ca1\u6709\u52a0\u524d\u9762\u7684n\n                        }else{\n                            \n                            [strArr removeObjectAtIndex:i];\n                            [strArr removeObjectAtIndex:i];\/\/\u79fb\u9664\u4e4b\u540e \u540e\u9762\u7684\u5c31\u53d8\u6210\u4e86 i\n                            [indexArr removeObjectAtIndex:i];\n                            [indexArr removeObjectAtIndex:i];\n                            \n                        }\n                    }\n                }\n            }\n            }\n        }else{\n            return -1;\n        }\n        \n        \n        \n    }else{\n        \n        return -1;\n        \n    }\n    \n    return  -1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216417,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint findParenMatch(NSString *s, int n) {\n  int indexOfLastOpening = -1;\n  int returnOnClosing = false;\n  char targetChar = [s characterAtIndex:n];\n  if (targetChar != '(' && targetChar != ')') {\n    return -1;\n  }\n  if (targetChar == ')') {\n    int level = 1;\n    for(int i=n-1; i >= 0; i--) {\n      char c = [s characterAtIndex:i];\n      if (c == ')') {\n        ++level;\n      } else if (c == '(') {\n        --level;\n      }\n      if (level == 0) {\n        return i;\n      }\n    }\n    return -1;\n  } else {\n    int level = 1;\n    for(int i=n+1; i < [s length]; i++) {\n      char c = [s characterAtIndex:i];\n      if (c == ')') {\n        --level;\n      } else if (c == '(') {\n        ++level;\n      }\n      if (level == 0) {\n        return i;\n      }\n    }\n  }\n\n  \/\/ TODO: Find and return the index of the matching opening\/closing bracket\n  \/\/ if found, -1 otherwise\n  return -1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216418,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint findParenMatch(NSString *s, int n) {\n    \/\/ TODO: Find and return the index of the matching opening\/closing bracket\n    \/\/ if found, -1 otherwise\n    NSUInteger length = [s length];\n    if (n < 0 || n >= length) {\n        return -1;\n    }\n    \n    \/\/ get character at index n\n    unichar c = [s characterAtIndex:n];\n    if (c != '(' && c != ')') {\n        return -1;\n    }\n    \n    if (c == '(') {\n        int brackets = 1;\n        while (brackets && n < length) {\n            ++n;\n            if (n == length) {\n                return -1;\n            }\n            \n            unichar c = [s characterAtIndex:n];\n            if (c == '(') {\n                ++brackets;\n            }\n            if (c == ')') {\n                --brackets;\n            }\n        }\n        return n;\n    }\n    \n    if (c == ')') {\n        int brackets = 1;\n        while (brackets && n >= 0) {\n            --n;\n            if (n == -1) {\n                return -1;\n            }\n            unichar c = [s characterAtIndex:n];\n            if (c == ')') {\n                ++brackets;\n            }\n            if (c == '(') {\n                --brackets;\n            }\n        }\n        return n;\n    }\n    \n    return -1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"59e5f1b77905df91aa000024":[{"id":216419,"user_id":17,"body":"int exponent(double x) {\n  return ((union {\n    double x;\n    struct {\n      unsigned long mantissa : 52;\n      unsigned short exponent : 11;\n      unsigned char sign : 1;\n    };\n  }){.x = x}).exponent;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216420,"user_id":168,"body":"int exponent(double d) {\n  union {\n    struct {\n      long m:52;\n      unsigned int exp:11;\n      int sign:1;\n    };\n    double v;\n  } x = {.v = d};\n  return x.exp;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216421,"user_id":null,"body":"int exponent(double x) {\n    logb(x);\n    if(fetestexcept(0x0004)) {\n        feclearexcept(0x0004);\n        return 0;\n    }\n    return fma(logb(x), 1, 1023);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216422,"user_id":null,"body":"typedef union {\n  double d;\n  struct {\n    unsigned long int mantisa : 52;\n    unsigned int exponent : 11;\n    unsigned int sign : 1;\n  } parts;\n} cast;\n\n\nint exponent(double x) {\n  cast d = { .d = x };\n  return d.parts.exponent;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5a00d6640df25e7798001500":[{"id":216423,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nNSNumber *findMissing(NSArray<NSNumber *> *a) {\n  double r1 = a[1].doubleValue \/ a[0].doubleValue;\n  double r2 = a[2].doubleValue \/ a[1].doubleValue;\n  double r = fabs(r1) <= 1 ? (fabs(r2) > fabs(r1) ? r2 : r1) : (fabs(r1) > fabs(r2) ? r2 : r1);\n  double x = a[0].doubleValue * r;\n  for (int i = 1; i < a.count; i++) {\n    if (fabs(x - a[i].doubleValue) > 1e-5) return @(x);\n    x *= r;\n  }\n  return @0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216424,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nbool sq(double a, double b) {\n  const double eps = 1E-9;\n  return fabs(fabs(a)-b*b)<eps;\n}\nNSNumber* dd(NSNumber *a, double b) {\n  return @([a doubleValue]\/b);\n}\ndouble dn(NSNumber *a, NSNumber *b) {\n  return [a doubleValue]\/[b doubleValue];\n}\nNSNumber *findMissing(NSArray *a) {\n  double r = dn(a[1], a[0]), r2 = dn(a[2], a[1]);\n  if (sq(r, r2)) return dd(a[1], r2);\n  for (int i=2; i<[a count]; i++) \n    if (sq(dn(a[i], a[i-1]), r)) return dd(a[i], r);\n  return @1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216425,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nbool isApproxEqual(double a, double b) {\n  bool condition = fabs((a - b) \/ (a < 1 ? 1 : a)) <= 1e-9;\n  return condition;\n}\n\nNSNumber *findMissing(NSArray *a) {\n  \/\/ TODO: Find and return the missing term in the geometric sequence\n  \/\/ in the form of an NSNumber\n\n  double pRatio1 = [a[1] doubleValue] \/ [a[0] doubleValue];\n  double pRatio2 = [a[2] doubleValue] \/ [a[1] doubleValue];\n  double ratio = pRatio2;\n  \n  if (fabs(pRatio1) < 1 && fabs(pRatio2) < 1) {\n    if (fabs(pRatio1) < fabs(pRatio2)) {\n      ratio = pRatio2;\n    } else {\n      ratio = pRatio1;\n    }\n  } else if (fabs(pRatio1) < fabs(pRatio2)) {\n    ratio = pRatio1;\n  }\n\n  NSLog(@\"Test Array: %@\", a);\n  NSLog(@\"Possible Ratios: %lf or %lf\", pRatio1, pRatio2);\n  NSLog(@\"Selected Ratio: %lf\", ratio);\n  \n  \/\/ Iterate array and look for missing parameter\n  for (int i = 1; i < [a count]; i++) {\n    double expectedValue = [a[i - 1] doubleValue] * ratio;\n    \n    if (isApproxEqual(expectedValue, [a[i] doubleValue]) == false) {\n      NSLog(@\"Missing Value: %lf (index %d)\", expectedValue, i);\n      return @(expectedValue);\n    }\n  }\n  \n  return @0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216426,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSDecimalNumber *decimalValue(NSObject *obj) {\n  return [NSDecimalNumber decimalNumberWithString:[obj stringValue]];\n}\n\nNSNumber *findMissing(NSArray *a) {\n  NSDecimalNumber *min = [decimalValue(a[1]) decimalNumberByDividingBy:decimalValue(a[0])];\n  for (int i = 1; i < [a count] - 1; i++) {\n    NSDecimalNumber *delta = [decimalValue(a[i + 1]) decimalNumberByDividingBy:decimalValue(a[i])];\n    if (fabsf([[delta decimalNumberBySubtracting:min] doubleValue]) > 0.000001) {\n      if ((fabsf([delta doubleValue]) > fabsf([min doubleValue]) && fabsf([min doubleValue]) > 1) || (fabsf([delta doubleValue]) < fabsf([min doubleValue]) && fabsf([min doubleValue]) < 1)) {\n        return [decimalValue(a[i]) decimalNumberByMultiplyingBy:min];\n      } else {\n        return [decimalValue(a[0]) decimalNumberByMultiplyingBy:delta];\n      }\n    }\n  }\n  return @0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216427,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSNumber *findMissing(NSArray *a) {\n  \/\/ TODO: Find and return the missing term in the geometric sequence\n  \/\/ in the form of an NSNumber\n  double ratio = 0;\n    NSNumber *beforeN = a[0];\n    int mincount = 0;\n    if(a.count>3){\n        mincount = 2;\n    }\n    \n    for(int i =1;i<a.count;i++){\n        NSNumber *n =a[i];\n        NSNumber *result = [NSNumber numberWithDouble:[beforeN doubleValue]+ratio];\n        \n        if([result doubleValue]!=[n doubleValue] ){\n            if([n doubleValue]-2*ratio == [beforeN doubleValue] && i>mincount){\n                return result;\n            }\n            else if([n doubleValue]-ratio\/2 == [beforeN doubleValue] && i>mincount){\n                return [NSNumber numberWithDouble:[n doubleValue]-ratio];\n            }\n            else if(ratio!=0){\n                break;\n            }\n        }\n        ratio = [n doubleValue]-[beforeN doubleValue];\n        beforeN = n;\n    }\n    ratio = 0;\n    beforeN = a[0];\n    for(int i =1;i<a.count;i++){\n        NSNumber *n =a[i];\n        NSNumber *result = [NSNumber numberWithDouble:[beforeN doubleValue]*ratio];\n        if(fabs([result doubleValue]-[n doubleValue])>0.0000001){\n            if(fabs([n doubleValue]\/ratio\/ratio - [beforeN doubleValue])<0.000001){\n                return result;\n            }\n            else if(fabs([n doubleValue]\/sqrt(ratio)) - fabs([beforeN doubleValue])<0.000001){\n                return [NSNumber numberWithDouble:[n doubleValue]\/ratio];\n            }\n\n        }\n        ratio = [n doubleValue]\/[beforeN doubleValue];\n        beforeN = n;\n        \n    }\n    \n    return @0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216428,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSNumber *findMissing(NSArray *a) {\n    NSNumber *result = @0;\n    double m = [a[1] doubleValue] \/ [a[0] doubleValue], n = [a[2] doubleValue] \/ [a[1] doubleValue];\n    if (fabs(m - n) > 1e-9) {\n        return fabs(m - n * n) <= 1e-9 ? [NSNumber numberWithDouble: [a[0] doubleValue] * n] : [NSNumber numberWithDouble: [a[1] doubleValue] * m];\n    }\n    for (int i = 2; i < [a count] - 1; i++) {\n        if (fabs([a[i + 1] doubleValue] \/ [a[i] doubleValue] - n) > 1e-9) {\n            result = [NSNumber numberWithDouble: [a[i] doubleValue] * n];\n        }\n    }\n    return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216429,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSNumber *findMissing(NSArray *a) {\n  double one = [a[1] doubleValue] \/ [a[0] doubleValue];\n  double two = [a[2] doubleValue] \/ [a[1] doubleValue];\n  \n  if (fabs(one - two) > 1e-9) \n    return fabs(one - two * two) <= 1e-9 ? [NSNumber numberWithDouble: [a[0] doubleValue] * two] : [NSNumber numberWithDouble: [a[1] doubleValue] * one];\n  for (int i = 2; i < [a count] - 1; i++) \n    if (fabs([a[i + 1] doubleValue] \/ [a[i] doubleValue] - two) > 1e-9) \n      return [NSNumber numberWithDouble: [a[i] doubleValue] * two];\n  return @0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216430,"user_id":17,"body":"#import <Foundation\/Foundation.h>\n\nNSNumber *findMissing(NSArray *a) {\n  double m = [a[1] doubleValue] \/ [a[0] doubleValue], n = [a[2] doubleValue] \/ [a[1] doubleValue];\n  if (fabs(m - n) > 1e-9) return fabs(m - n * n) <= 1e-9 ? [NSNumber numberWithDouble: [a[0] doubleValue] * n] : [NSNumber numberWithDouble: [a[1] doubleValue] * m];\n  for (int i = 2; i < [a count] - 1; i++) if (fabs([a[i + 1] doubleValue] \/ [a[i] doubleValue] - n) > 1e-9) return [NSNumber numberWithDouble: [a[i] doubleValue] * n];\n  return @0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5a03b3f6a1c9040084001765":[{"id":216431,"user_id":527,"body":"int angle(int n) {\n  return 180 * (n - 2);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216432,"user_id":null,"body":"int angle(int n) {\n  \/\/ your code here\n  return (n-2)*180;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216433,"user_id":null,"body":"int angle(int n) {\n  \/\/ your code here\n  return n*180-360;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216434,"user_id":null,"body":"int angle(int n) {\n  if (n > 2) {\n    return (180 * (n - 2));\n  }\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216435,"user_id":null,"body":"int angle(int n) {\n  if(n == 2){\n    return 0;\n  }\n  return 180 + angle(n - 1);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216436,"user_id":null,"body":"int angle(int n) {\n  return 180 * n - 360;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216437,"user_id":null,"body":"int angle(int n) {\n  int res;\n  \n  res = (n - 2) * 180;\n  return res;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216438,"user_id":null,"body":"int angle(int n) {\n  \/\/ your code here\n  \n  int result, k;\n  k = n-3;\n  \n  result = (180 * k) + 180;\n  return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216439,"user_id":null,"body":"int angle(int n) {\n  return (180*(n - 3)) + 180;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216440,"user_id":645,"body":"int angle(int n) {\n  return (n - 2) * 180;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5a057ec846d843c81a0000ad":[{"id":216441,"user_id":492,"body":"int cycle(int n) {\n    if (n % 2 == 0 || n % 5 == 0) {\n      return -1;\n    }\n    int r = 1;\n    for (int i = 1; i <= n; i++) {\n      r = r * 10 % n;\n      if (r == 1) {\n        return i;\n      }\n    }\n    return -1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216442,"user_id":168,"body":"int cycle(int n) {\n  if (n % 2 == 0 || n % 5 == 0) return -1;\n  int i = 1, p = 10 % n;\n  while (p != 1) {\n    p = 10 * p % n;\n    i++;\n  }\n  return i;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216443,"user_id":53,"body":"int cycle(int n) {\n  if (n%2 == 0 || n%5 == 0) return -1;\n  int m = 10 % n, cnt = 1;\n  while (m != 1) {\n      m = m * 10 % n; \n      cnt++;\n  }\n  return cnt;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216444,"user_id":null,"body":"int cycle(int n) {\n  if(n % 2 == 0 || n % 5 == 0)\n    return -1;\n  int num = 1;\n  int count = 0;\n  int r;\n  while(num < n) {\n    num *= 10;\n    count++;\n  }\n  while(true) {\n    r = num % n;\n    num = r * 10;\n    if(r == 1)\n      break;\n    count++;\n  }\n  return count;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216445,"user_id":null,"body":"int cycle(int n) {\n    if (n % 2 == 0 || n % 5 == 0) {\n        return -1;\n    }\n    int n1 = 1;\n    for (int i = 1; i <= n; i++) {\n        n1 = n1 * 10 % n;\n        if (n1 == 1) {\n            return i;\n        }\n    }\n    return -1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216446,"user_id":null,"body":"int cycle(int n) {\n  if (nod10(n) != 1) {\n    return -1;\n  }\n  NSUInteger length = 0;\n  NSUInteger buffer = 1;\n  do {\n    buffer = buffer*10 % n;\n    length++;\n  } while (buffer != 1);\n  return length;\n}\n\nint nod10(int n) {\n  int a = n;\n  int b = 10;\n  while(a != 0 && b != 0) {\n    if (a > b) {\n      a = a % b;\n    } else {\n      b = b % a;\n    }\n  }\n  return a+b;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216447,"user_id":null,"body":"int cycle(int n) {\n    if (n % 2 == 0 || n % 5 == 0) {\n        return -1;\n    }\n    int result = -1;\n    int r = 1;\n    for (int i = 1; i <= n; i++) {\n        r = r * 10 % n;\n        if (r == 1) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216448,"user_id":null,"body":"int cycle(int n) {\n    if (n % 2 == 0 || n % 5 == 0)\n        return -1;\n    int m = 1, len = 0;\n    do {\n        m = m * 10 % n;\n        len++;\n    } while (m != 1);     \/\/\u5f53\u4e0d\u7b49\u4e8e1\u65f6\uff0c\u7ee7\u7eed\u5faa\u73af\u4e58\u4ee510\n    return len;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216449,"user_id":null,"body":"int cycle(int n) {\n    int len = 1,mod = 9;\n    for (int i = 0 ; i < 400000 ; ++i)\n    {\n        while (mod < n) {\n            mod = mod * 10;\n            mod = mod + 9;\n            len ++;\n        }\n        mod = mod % n;\n        if (mod == 0) {\n            return len;\n        }\n    }\n    return -1;\n}\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216450,"user_id":527,"body":"int cycle(int n) {\n  if (n % 2 == 0 || n % 5 == 0)\n    return -1;\n  int r = 1, i = 0;\n  do {\n    r = r * 10 % n;\n    i++;\n  } while (r != 1);\n  return i;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5a3fe3dde1ce0e8ed6000097":[{"id":216451,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint century_from_year(int year) {\n  return (year - 1) \/ 100 + 1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216452,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint century_from_year(int year) {\n    double cen = @(year).doubleValue\/100.0;\n    return cen == @(cen).intValue ? @(cen).intValue : @(cen).intValue + 1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216453,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint century_from_year(int year) {\n  return ceil(year \/ 100.0);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216454,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint century_from_year(int year) {\n  int res = year \/ 100;\n  return year > res * 100 ? res + 1 : res;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216455,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint century_from_year(int year) {\n  int a = year \/ 100;\n  int century_from_year = (year % 100) != 0 ? a + 1 : a;\n  \n  return century_from_year;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216456,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint century_from_year(int year) {\n  return (year % 100 == 0) ? (year \/ 100) : (year \/ 100) + 1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216457,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint century_from_year(int year) {\n    if(year < 101){\n      return 1;\n    }\n    return century_from_year(year - 100) + 1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216458,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint century_from_year(int year) {\n\/\/   NSLog(@\"%i %i\n\",year \/ 100, (year - year \/ 100 * 100) ? 1 : 0);\n  return (year \/ 100) + ((year - year \/ 100 * 100) ? 1 : 0);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216459,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint century_from_year(int year) {\n  return ( year \/ 100 ) + ( ( year % 100 > 0 ) ? 1 : 0 );\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216460,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint century_from_year(int year) {\n  if (year%100 == 0) return year\/100;\n  else return year\/100 + 1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5a53a17bfd56cb9c14000003":[{"id":216461,"user_id":17,"body":"#import <Foundation\/Foundation.h>\n\nNSString *disarium_number(int n) {\n  int m = n, i = floor(log10(n)) + 1, result = 0;\n  while (m) {\n    result += pow(m % 10, i--);\n    m \/= 10;\n  }\n  return [(result == n ? @\"Disarium\" : @\"Not\") stringByAppendingString: @\" !!\"];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216462,"user_id":53,"body":"#import <Foundation\/Foundation.h>\n\nNSString *disarium_number(int n) {\n  int c = (int) (log(n) \/ log(10)) + 1;\n  int s = 0, m = n;\n  while (c > 0) {\n    int d = m % 10;\n    s += pow(d, c--);\n    m \/= 10;\n  }\n  return n == s ? @\"Disarium !!\" : @\"Not !!\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216463,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *disarium_number(int n) {\n  \/\/ TODO: Return a string indicating whether `n` is disarium or not\n    NSString * nStr = [NSString stringWithFormat:@\"%d\",n];\n    NSInteger length = [nStr length];\n    NSInteger result = 0;\n    for (int i = 0; i < length; i ++)\n    {\n        result += pow([[nStr substringWithRange:NSMakeRange(i, 1)] intValue], i + 1);\n    }\n    \n    if (result == n)\n    {\n        return @\"Disarium !!\";\n    }else\n    {\n        return @\"Not !!\";\n    }\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216464,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nNSString *disarium_number(int n) {\n  NSString *s = [@(n) stringValue];\n  double x = 0;\n  for (NSUInteger i = 0; i < s.length; i++) {\n    x += pow([s characterAtIndex: i] - '0', i + 1);\n  }\n  return x == n ? @\"Disarium !!\" : @\"Not !!\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216465,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *disarium_number(int n) {\n    NSString *numToString = [@(n) stringValue];\n    int total = 0;\n    for (int i=0; i<numToString.length; i++) {\n        total += pow([[numToString substringWithRange:NSMakeRange(i, 1)]intValue], i+1);\n    }\n    return total == n ? @\"Disarium !!\" : @\"Not !!\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216466,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSArray<NSNumber *> *getDigits(int num) {\n  NSMutableArray *result = [NSMutableArray new];\n  while (num > 0) {\n    [result addObject: [NSNumber numberWithInt: num % 10]];\n    num \/= 10;\n  }\n  return result;\n}\n\nNSString *disarium_number(int n) {\n  NSArray<NSNumber *> *digits = getDigits(n);\n  int sumOfPowers = 0;\n  for (int i = digits.count - 1; i >= 0; i--) {\n    int digit = digits[i].intValue;\n    sumOfPowers += pow(digits[i].intValue, digits.count - i);\n  }\n  if (sumOfPowers == n) {\n    return @\"Disarium !!\";\n  } else {\n    return @\"Not !!\";\n  }\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216467,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *disarium_number(int n) {\n  int calcSum = 0;\n    NSString *numberString = [ NSString stringWithFormat:@\"%d\", n ];\n    \n    for ( int i = 0; i < numberString.length; i++ )\n    {\n        int calcNum = [ [ numberString substringWithRange:NSMakeRange(i, 1) ] intValue ];\n        for ( int j = 0; j < i; j++ )\n        {\n            calcNum *= [ [ numberString substringWithRange:NSMakeRange(i, 1) ] intValue ];\n        }\n        calcSum += calcNum;\n    }\n    \n    return ( n == calcSum ) ? @\"Disarium !!\" : @\"Not !!\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216468,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *disarium_number(int n) {\n  NSString *stringed = [NSString stringWithFormat:@\"%i\", n];\n  int length = [stringed length];\n  int result = 0;\n  \n  for (int i = 0; i < length; i++){\n    NSString *charAt = [stringed substringWithRange:NSMakeRange(i, 1)];\n    int num = [charAt intValue];\n    result += pow( num, i+1);\n  }\n  \n  \n  return result == n ? @\"Disarium !!\": @\"Not !!\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216469,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *disarium_number(int n) {\n  NSString * str = [NSString stringWithFormat:@\"%i\",n];\n  int x = [str length];\n  int y = n;\n  int count  = 0;\n  while(n!=0){\n    count+=pow(n%10,x--);\n    n\/=10;\n  }\n  printf(\"%i\n\",count);\n  return count==y?@\"Disarium !!\":@\"Not !!\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216470,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n#include <stdlib.h>\n#include <math.h>\nint * num_to_arr(int n){\n    int n2=n;\n    int *res;\n    int count=1;\n    int i; \n    if(n==0)\n        count++;\n    while(n2!=0){\n        count++;\n        n2\/=10;\n    }\n    res=(int*)malloc(sizeof(int)*count);\n    i=count-2;\n    while(i>=0){\n        res[i]=n%10;\n        n\/=10;\n        i--;\n    }\n    res[count-1]=-1;\n    return res;\n}\nNSString *disarium_number(int n) {\n    int *arr=num_to_arr(n);\n    int sum=0;\n    int i=0;\n    while(arr[i]!=-1){\n        sum+=(int)pow(arr[i],i+1);\n        i++;\n    }\n    if(sum==n)\n        return @\"Disarium !!\";\n  return @\"Not !!\";\n}\n","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5a54e796b3bfa8932c0000ed":[{"id":216471,"user_id":17,"body":"#import <Foundation\/Foundation.h>\n\nNSString *jumping_number(int n) {\n  char s[11];\n  sprintf(s, \"%d\", n);\n  for (int i = 0; i < floor(log10(n)); i++) if (abs(s[i + 1] - s[i]) != 1) return @\"Not!!\";\n  return @\"Jumping!!\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216472,"user_id":null,"body":"NSString *jumping_number(int n) {\n  start: if (n < 10 || ((n - (n\/10) * 10) != (((n - (n\/100) * 100) - (n - (n\/10) * 10)) \/ 10) + 1 && (n - (n\/10) * 10) != (((n - (n\/100) * 100) - (n - (n\/10) * 10)) \/ 10) -1))\n    return n < 10 ? @\"Jumping!!\" :  @\"Not!!\";\n  n \/= 10;\n  goto start;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216473,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *jumping_number(int n) {\n  int prev = -1;\n  while (n > 0) {\n    int digit = n % 10;\n    if (prev > -1) {\n      if (abs(prev - digit) != 1) {\n        return @\"Not!!\";\n      }\n    }\n    prev = digit;\n    n \/= 10;\n  }\n  return @\"Jumping!!\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216474,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *jumping_number(int n) {\n  NSString *numberString = [ NSString stringWithFormat:@\"%d\", n ];\n    int standardNum = [ [ numberString substringWithRange:NSMakeRange(0, 1) ] intValue ];\n    BOOL isJumping = YES;\n    \n    for ( int i = 1; i < numberString.length; i++ )\n    {\n        int calcNum = [ [ numberString substringWithRange:NSMakeRange(i, 1) ] intValue ];\n        if ( standardNum - 1 != calcNum && standardNum + 1 != calcNum )\n        {\n            isJumping = NO;\n            break;\n        }\n        standardNum = calcNum;\n    }\n    \n    return ( isJumping ) ? @\"Jumping!!\" : @\"Not!!\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216475,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nconst NSString* J = @\"Jumping!!\";\nconst NSString* N = @\"Not!!\";\nNSString *jumping_number(int n) {\n  if(n<=9)\n    return J;\n  \n  int r=n\/10;\n  int d=n%10;\n  int prevD=d;\n  while(r>0){\n    prevD = d;\n    d=r%10;\n    r=r\/10;\n    if(abs(d-prevD)!=1)\n      return N;\n  }\n  return J;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216476,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *jumping_number(int n) {\n  int numberLength = [[@(n) stringValue] length];\n  int numberArray[numberLength];\n  \n  if (numberLength != 1) {\n    for (int i = numberLength - 1; i >= 0; i--) {\n      numberArray[i] = n % 10;\n      n = n \/ 10;\n    }\n\n    for (int i = 1; i < numberLength; i++) {\n      bool isJumping = (numberArray[i] - 1 == numberArray[i - 1]) ? YES : (numberArray[i] + 1 == numberArray[i - 1]);\n\n      if (!isJumping) {\n        return @\"Not!!\";\n      }\n    }\n  }\n  \n  return @\"Jumping!!\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216477,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *jumping_number(int n) {\n  if (n < 10) { return @\"Jumping!!\"; }\n  \n  NSString *string = [NSString stringWithFormat:@\"%d\", n];\n  int prevNum;\n  for (int i = 0; i < string.length; i++) {\n    NSString *numString = [string substringWithRange:NSMakeRange(i, 1)];\n    int num = [numString integerValue];\n\n    if (i > 0) {\n      if (!(prevNum+1 == num || prevNum-1 == num)) {\n        return @\"Not!!\";\n      }  \n    }\n    \n    prevNum = num;\n  }\n  \n  return @\"Jumping!!\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216478,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *jumping_number(int n) {\n  NSString *stringed = [NSString stringWithFormat:@\"%i\",n];\n  \n  for(int i=0; i < stringed.length -1;i++){\n    NSString *charAt = [stringed substringWithRange:NSMakeRange(i,1)];\n    NSString *charPlus = [stringed substringWithRange:NSMakeRange(i+1,1)];\n    int num = [charAt intValue];\n    int numPlus = [charPlus intValue];\n    if ((num - numPlus > 1) || (num - numPlus < -1) || (num - numPlus == 0)) return @\"Not!!\";\n  }\n  \n  return @\"Jumping!!\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216479,"user_id":53,"body":"#import <Foundation\/Foundation.h>\n\nNSString *jumping_number(int n) {\n    int p = n % 10;\n    n \/= 10;\n    while (n > 0) {\n      int d = n % 10;\n      if (abs(d - p) != 1) return @\"Not!!\";\n      p = d;\n      n \/= 10;\n    }\n    return @\"Jumping!!\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216480,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nNSString *jumping_number(int n) {\n  NSString *s = [@(n) stringValue];\n  for (NSUInteger i = 1; i < s.length; i++) {\n    if (abs([s characterAtIndex: i] - [s characterAtIndex: i - 1]) != 1) {\n      return @\"Not!!\";\n    }\n  }\n  return @\"Jumping!!\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5a55f04be6be383a50000187":[{"id":216481,"user_id":17,"body":"#import <Foundation\/Foundation.h>\n\nNSString *special_number(int n) {\n  while (n) {\n    if (n % 10 > 5) return @\"NOT!!\";\n    n \/= 10;\n  }\n  return @\"Special!!\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216482,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *special_number(int n) {\n  NSUInteger number = n;\n  \/\/ Make sure first digit is special\n  NSUInteger remaining = number;\n  NSUInteger digit = remaining % 10;\n  BOOL special = digit < 6;\n  \n  \/\/ Make sure all other digits are special\n  while (remaining > 0 && special) {\n    remaining = remaining \/ 10;\n    NSUInteger digit = remaining % 10;\n    special = special && digit < 6;\n  }\n  \n  NSString *result = nil;\n  if (special) {\n    result = @\"Special!!\";\n  } else {\n    result = @\"NOT!!\";\n  }\n  return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216483,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *special_number(int n) {\n  double x = 0.0;\n  while (n > 0) {\n    x = (double)n \/ 10.0 - n \/ 10;\n    n = n \/ 10;\n    if (x > 0.5) {\n      break;\n    }\n  }\n\nreturn x > 0.5 ? @\"NOT!!\" : @\"Special!!\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216484,"user_id":null,"body":"#import <Foundation\/Foundation.h>\nNSString *special_number(int n) {\n    NSString *numToSting = [@(n) stringValue];\n    for (int i =0 ; i<numToSting.length; i++) {\n        if ([[numToSting substringWithRange:NSMakeRange(i, 1)]intValue] > 5) {\n            return @\"NOT!!\";\n        }\n    }\n    return @\"Special!!\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216485,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *special_number(int n) {\n  while (n > 0) {\n    int digit = n % 10;\n    if (digit > 5) {\n      return @\"NOT!!\";\n    }\n    n \/= 10;\n  }\n  \n  return @\"Special!!\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216486,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nNSString *special_number(int n) {\n  for (; n > 0; n \/= 10) {\n    if (n % 10 >= 6) {\n      return @\"NOT!!\";\n    }\n  }\n  return @\"Special!!\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216487,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *special_number(int n) {\n  NSString *numberToString = [ NSString stringWithFormat:@\"%d\", n ];\n    BOOL isSpecial = YES;\n    for ( int i = 0; i < numberToString.length; i++ )\n    {\n        int stringToInt = [ numberToString substringWithRange:NSMakeRange( i, 1 ) ].intValue;\n        if ( stringToInt > 5 )\n        {\n            isSpecial = NO;\n            break;\n        }\n    }\n    return (isSpecial) ? @\"Special!!\" : @\"NOT!!\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216488,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *special_number(int n) {\n  NSString *stringedInt = [NSString stringWithFormat:@\"%d\",n];\n\n  NSMutableArray *array = [NSMutableArray array];\n    for (int i = 0; i < [stringedInt length]; i++) {\n      NSString *ch = [stringedInt substringWithRange:NSMakeRange(i, 1)];\n      [array addObject:ch];\n    }\n  NSArray *excludingNumbers = [NSArray arrayWithObjects:@\"6\", @\"7\", @\"8\", @\"9\",nil];\n  int number = [array firstObjectCommonWithArray:excludingNumbers];\n    \n  return number ? @\"NOT!!\": @\"Special!!\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216489,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *special_number(int n) {\n\tdo {\n\t\tint left = n % 10;\n\t\tif(left > 5){\n\t\t\treturn @\"NOT!!\";\n\t\t}\n\t\tn = n \/ 10;\n\t}while (n > 0);\n\treturn @\"Special!!\";\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216490,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nNSString *special_number(int n) {\n  \/\/ TODO: Determine whether `n` is a special number and return the corresponding string\n  \n  \/\/ Convert integer to a string\n  NSString  *s = [NSString stringWithFormat: @\"%d\", n];\n  BOOL       found = YES;\n  \n  \/\/ Loop through and look for magic numbers\n  \/\/ Assume all TRUE as it only takes one FALSE and we are done\n\n  for(int i = 0; i<s.length; i++)\n    switch([s characterAtIndex: i])\n    {\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n        continue;\n      default:\n        found = NO;\n        break;\n    }\n        \n  return found ? @\"Special!!\" : @\"NOT!!\" ;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5a58ca28e626c55ae000018a":[{"id":216491,"user_id":null,"body":"const double PI = 3.141592653589793; \/\/ Use this value as pi in your calculations if necessary\ndouble area_of_polygon_inside_circle(double circle_radius, int number_of_sides) {\n    return [[NSString stringWithFormat:@\"%.03f\", (number_of_sides*pow(circle_radius, 2)*sin(PI*2\/number_of_sides)\/2)]doubleValue];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216492,"user_id":50,"body":"#include <math.h>\nconst double PI = 3.141592653589793; \/\/ Use this value as pi in your calculations if necessary\ndouble area_of_polygon_inside_circle(double r, int n) {\n  return (double)round(n*r*r*sin(2*PI\/n)*500)\/1000 ;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216493,"user_id":53,"body":"const double PI = 3.141592653589793;\n\ndouble area_of_polygon_inside_circle(double r, int n) {\n  return round(500.0 * n * r * r * sin(2.0 * PI \/ n)) \/ 1000.0;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216494,"user_id":168,"body":"#include <math.h>\n\nconst double PI = 3.141592653589793; \/\/ Use this value as pi in your calculations if necessary\ndouble area_of_polygon_inside_circle(double r, int n) {\n  return round(500 * n * r * r * sin(2 * PI \/ n)) \/ 1000;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216495,"user_id":null,"body":"#include <math.h>\nconst double PI = 3.141592653589793; \ndouble area_of_polygon_inside_circle(double circle_radius, int number_of_sides) {\n    long double res=(number_of_sides*circle_radius*circle_radius\/2)*sin(2*PI\/number_of_sides);\n    res=(long)(res*10000);\n    res\/=10;\n    res=round(res);\n    res\/=1000;\n    return res;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216496,"user_id":null,"body":"const double PI = 3.141592653589793;\ndouble area_of_polygon_inside_circle(double circle_radius, int number_of_sides) {\n  double res;\n \n  res = (double)number_of_sides * (circle_radius * circle_radius) \/ 2.0;\n  res *= sin((2.0 * PI) \/ (double)number_of_sides);\n  NSLog(@\"%u\", res);\n  if (fmod(res, 10.0) >= 5.0)\n    res = ceil(round(res * 1000.0)) \/ 1000.0;\n  else if (fmod(res, 10.0) < 5.0)\n    res = floor(round(res * 1000.0)) \/ 1000.0;\n  return res;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216497,"user_id":null,"body":"const double PI = 3.141592653589793; \/\/ Use this value as pi in your calculations if necessary\ndouble area_of_polygon_inside_circle(double circle_radius, int number_of_sides) {\n  \/\/ TODO: Compute the area of the given regular polygon rounded to three decimal places\n  \n  char p[50];\n   \n  double answer = (((double) 0.5 * ((double) number_of_sides) * (circle_radius * circle_radius)) * \n  (double) sin((double)6.28318530718\/ (double)number_of_sides));\n  \n  \n  sprintf(p, \"%.3lf\", answer);\n  return strtod(p, NULL);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216498,"user_id":null,"body":"const double PI = 3.141592653589793; \/\/ Use this value as pi in your calculations if necessary\nconst int PRECISION = 1000;\ndouble area_of_polygon_inside_circle(double radius, int sides) {\n  return round((sides * radius * radius * sin(PI * 2 \/ sides) \/ 2) * PRECISION) \/ PRECISION;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216499,"user_id":null,"body":"const double PI = 3.141592653589793; \/\/ Use this value as pi in your calculations if necessary\ndouble area_of_polygon_inside_circle(double circle_radius, int number_of_sides) {\n    return (double)((long long)round(((double)number_of_sides\/2)*circle_radius*circle_radius*sin(2*PI\/number_of_sides) * 1000))\/1000;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216500,"user_id":null,"body":"const double PI = 3.141592653589793; \/\/ Use this value as pi in your calculations if necessary\ndouble area_of_polygon_inside_circle(double circle_radius, int number_of_sides) {\n  \/\/ TODO: Compute the area of the given regular polygon rounded to three decimal places\n double angle = 360.0 \/ number_of_sides \/ 2;\n double height = circle_radius * cos(PI * angle\/180.0);\n double width = circle_radius * sin(PI * angle\/180.0)* 2;\n \n double area = height * width \/ 2 * number_of_sides;\n \n NSString *strValue=[NSString stringWithFormat:@\"%0.3f\", area];\n\n double result = [strValue doubleValue];\n \n return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5aba780a6a176b029800041c":[{"id":216501,"user_id":null,"body":"int max_multiple(int d, int b) {\n   return b \/ d * d;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216502,"user_id":645,"body":"int max_multiple(int d, int b) {\n  return b - b % d;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216503,"user_id":null,"body":"int max_multiple(int d, int b) {\n    int answer ;\n    for (int i = d; i<=b; i++) {\n        if (i % d == 0) {\n            answer = i ;\n        }\n    }\n    return answer;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216504,"user_id":null,"body":"int max_multiple(int d, int b) {\n  int n = b;\n  while (n % d != 0) {\n    n--;\n  }\n  return n;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216505,"user_id":null,"body":"int max_multiple(int d, int b) {\n  \/\/ your code here\n  return (b)\/d * d;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216506,"user_id":null,"body":"int max_multiple(int d, int b) {\n  for ( int i = b; i > 0; i-- )\n    {\n        if ( i % d == 0 )\n        {\n          return i;\n        }\n    }\n    \n    return 1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216507,"user_id":null,"body":"int max_multiple(int d, int b) {\n  return b % d == 0? b: max_multiple(d, b - 1);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216508,"user_id":null,"body":"int max_multiple(int divisor, int bound) {\n  return bound % divisor == 0? bound: max_multiple(divisor, bound - 1);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216509,"user_id":50,"body":"int max_multiple(int d, int b) {\n  return d*(b\/d);\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216510,"user_id":null,"body":"int max_multiple(int d, int b) {\n  \/\/ your code here\n  int rem = b%d;\n  return b-rem;\n  \n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5ae62fcf252e66d44d00008e":[{"id":216511,"user_id":null,"body":"int expression_matter(int a, int b, int c) {\n    if ((a == 1 && a == b && c == 1) || (a == 1 && c == 1)) { return a + b + c; }\n    if (a == 1) { return (a + b) * c; }\n    if (b == 1) { return a > c ? (c + b) * a : (b + a) * c; }\n    if (c == 1) { return a * (b + c); }\n    \n    return a * b * c;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216512,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nint max(int a, int b) {\n  return a < b ? b : a;\n}\n\nint expression_matter(int a, int b, int c) {\n  return max(a + b + c, max(a * b * c, max(a * (b + c), (a + b) * c)));\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216513,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint expression_matter(int a, int b, int c) {\n  int r1 = a * (b + c);\n  int r2 = a * b * c;\n  int r3 = a + b * c;\n  int r4 = (a + b) * c;\n  int r5 = a + b + c;\n  return MAX(r1, MAX(r2, MAX(r3, MAX(r4, r5))));\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216514,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint expression_matter(int a, int b, int c) {\n  int _0 = a + b + c;\n  int _1 = a + b * c;\n  int _2 = a * b + c;\n  int _3 = a * b * c;\n  int _4 = (a + b) + c;\n  int _5 = (a + b) * c;\n  int _6 = (a * b) + c;\n  int _7 = (a * b) * c;\n  int _8 = a + (b + c);\n  int _9 = a + (b * c);\n  int _a = a * (b + c);\n  int _b = a * (b * c);\n  int max = _0;\n  if (_1 > max) max = _1;\n  if (_2 > max) max = _2;\n  if (_3 > max) max = _3;\n  if (_4 > max) max = _4;\n  if (_5 > max) max = _5;\n  if (_6 > max) max = _6;\n  if (_7 > max) max = _7;\n  if (_8 > max) max = _8;\n  if (_9 > max) max = _9;\n  if (_a > max) max = _a;\n  if (_b > max) max = _b;\n  return max;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216515,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint expression_matter(int a, int b, int c) {\n  \/\/ your code here\n    NSNumber *c1 = [NSNumber numberWithInt:(a + b) * c];\n    NSNumber *c2 = [NSNumber numberWithInt: a + b * c];\n    NSNumber *c3 = [NSNumber numberWithInt: a + b + c];\n    NSNumber *c4 = [NSNumber numberWithInt: a * b * c];\n    NSNumber *c5 = [NSNumber numberWithInt: a * (b + c)];\n    NSNumber *c6 = [NSNumber numberWithInt: a * b + c];\n    \n    \n    NSArray *array = [[NSArray alloc] initWithObjects:c1,c2,c3,c4,c5,c6, nil];\n    NSArray *sorted = [array sortedArrayUsingComparator:^NSComparisonResult(NSNumber* num1, NSNumber* num2){\n        return [num2 compare:num1];\n    }];\n    \n    \n    return [sorted.firstObject intValue];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216516,"user_id":50,"body":"#import <Foundation\/Foundation.h>\nint max(int a, int b){return a>b?a:b;}\nint expression_matter(int a, int b, int c) {\n  return max(max((a+b)*c, a*(b+c)),max(a+b+c, a*b*c));\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216517,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint expression_matter(int a, int b, int c) {\n    \nNSArray * result = [NSArray new];\n\n  if (a > 0 && b > 0 && c > 0) {\n   \n    int first = (a * (b + c));\n    int second = (a * b * c);\n    int third = (a + b * c);\n    int fourth = ((a + b) * c);\n    int fifth = (a + b + c);\n    result = [NSArray arrayWithObjects:@(first), @(second), @(third), @(fourth), @(fifth), nil];\n        \n  return [[result valueForKeyPath:@\"@max.self\"] intValue];\n  } \n  \n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216518,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint expression_matter(int a, int b, int c) {\n  int returnInt = 0;\n    \n    returnInt = ( returnInt < ( a * ( b + c ) ) ) ? ( a * ( b + c ) ) : returnInt;\n    returnInt = ( returnInt < a * b * c ) ? a * b * c : returnInt;\n    returnInt = ( returnInt < a + b * c ) ? a + b * c : returnInt;\n    returnInt = ( returnInt < ( a + b ) * c ) ? ( a + b ) * c : returnInt;\n  returnInt = ( returnInt < a + b + c ) ? a + b + c : returnInt;\n    \n    return returnInt;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216519,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint expression_matter(int a, int b, int c) {\n  \n  int sum = a+b+c;\n  int mult = a*b*c;\n  if (mult > sum) sum = mult; \n  int sumMult = (a+b)*c;\n  if (sumMult > sum) sum = sumMult; \n  int multSum = a*(b+c);\n  if (multSum > sum) sum = multSum; \n  \n  return sum;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216520,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nint expression_matter(int a, int b, int c) {\n  \/\/ your code here\n    int plusTimes;\n    \n    if ((a + b) * c >= a * (b + c) ) {\n        plusTimes = (a + b) * c;\n    } else {\n        plusTimes = a * (b + c);\n    }\n    \n    if (plusTimes >= a * b * c && plusTimes >= a + b + c) {\n        return plusTimes;\n    } else if (a * b * c > plusTimes && a * b * c > a + b + c) {\n       return a * b * c;\n    } else {\n        return a + b + c;\n    }\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5d50e3914861a500121e1958":[{"id":216521,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nchar add_letters(char letters[], int size) {\n  if (size == 0) {\n    return 'z';\n  }\n  int sum = 0;\n  for (int i = 0; i < size; i++) {\n    int num = letters[i] - 'a';\n    sum = (sum + num) % 26 + 1;\n  }\n  return sum + 'a' - 1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216522,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nchar add_letters(char letters[], int size) {\n  int sum = 25;\n  for (int i = 0; i < size; i++) {\n    sum += letters[i] - 'a' + 1;\n  }\n  \n  sum %= 26;\n  return 'a' + sum;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216523,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nchar add_letters(char letters[], int size) {\n  int res=0;\n  for(int i=0;i<size;i++)\n    res+=letters[i]-'a'+1;\n  \n  res = res%('z'-'a'+1) ;\n  if(res==0)\n    return 'z';\n  return res+'a'-1;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216524,"user_id":168,"body":"#import <Foundation\/Foundation.h>\n\nchar add_letters(char letters[], int size) {\n  int s = 25;\n  for (int i = 0; i < size; i++) {\n    s += letters[i] - 96;\n  }\n  return s % 26 + 'a';\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216525,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n\nchar add_letters(char letters[], int size) {\n  if (size == 0) {\n    return 'z';\n  }\n  \n  int sum = 0;\n  \n  for (int i = 0; i < size; i++) {\n    sum += (int)letters[i] - (int)'a' + 1;\n  }\n  \n  int letter = (sum - 1) % 26;\n  char result = (int)'a' + letter;\n  \n  return result;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216526,"user_id":null,"body":"#import <Foundation\/Foundation.h>\n@implementation MyObj:NSObject{\n int value;\n}\n\n-(id)init{\n if(self = [super init]){\n   value = 'z';\n }\n return self;\n}\n\n-(void)addChar:(char)c{\n  value = ((value + c - 'a' + 1 - 'a') % 26) + 'a';\n}\n\n-(char)getResult{\n  return value;\n}\n@end\n\nchar add_letters(char letters[], int size) {\n  MyObj* obj = [MyObj new];\n  for(int i=0; i<size; i++)\n    [obj addChar:letters[i]];\n return [obj getResult];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216527,"user_id":645,"body":"#import <Foundation\/Foundation.h>\n\nchar add_letters(char letters[], int size) {\n  int res = 0;\n  for (int i = 0; i < size; i++) res += letters[i] - 96;\n  return [@\"zabcdefghijklmnopqrstuvwxy\" characterAtIndex: (res % 26)];\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"59cf6087aeb284909d00009c":[{"id":216528,"user_id":17,"body":"char a[4][7] = {\"Common\", \"Point\", \"Boost\", \"Better\"};\nchar (*b[4])[7] = {a+3, a+1, a, a+2};\n\nchar (*(*c())[4])[7]\n{\n    return &b;\n}\n\nchar (**d())[7]\n{\n    return c()[1] - 3;\n}\n\nchar buf[256];\n\nchar *pointer_monster(char (**(*f)())[7])\n{\n    int len;\n\n    len  = sprintf(buf, \"%s\", *f()[0]);\n    len += sprintf(buf + len, \"%s \", *((**f)()-1)[0]+4);\n    len += sprintf(buf + len, \"%s\", (*f())[0]-4);\n    len += sprintf(buf + len, \"%s\", f()[1][2]+3);\n    len += sprintf(buf + len, \"%s\", *((**f)()-1)[0]+4);\n    return buf;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216529,"user_id":53,"body":"\nchar a[4][7] = {\"Common\", \"Point\", \"Boost\", \"Better\"};\nchar (*b[4])[7] = {a+3, a+1, a, a+2};\n\nchar (*(*c(void))[4])[7]\n{\n    return &b;\n}\n\nchar (**d(void))[7]\n{\n    return c()[1] - 3;\n}\n\nchar buf[256];\n\nchar *pointer_monster(__typeof__(d) f)\n{\n    int len;\n    \n    len  = sprintf(buf, \"%s\", *f()[0]);\n    len += sprintf(buf + len, \"%s \", *((**f)()-1)[0]+4);\n    len += sprintf(buf + len, \"%s\", (*f())[0]-4);\n    len += sprintf(buf + len, \"%s\", f()[1][2]+3);\n    len += sprintf(buf + len, \"%s\", *((**f)()-1)[0]+4);\n    return buf;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216530,"user_id":null,"body":"char a[4][7] = {\"Common\", \"Point\", \"Boost\", \"Better\"};\nchar (* b[4])[7] = {a+3, a+1, a, a+2};\n\nchar (*(*c(void))[4])[7]\n{\n    return &b;\n}\n\nchar (**d(void)) [7]\n{\n    return c()[1] - 3;\n}\n\nchar buf[256];\n\nchar *pointer_monster(char (** (*f)(void))[7])\n{\n    int len;\n    \n    len  = sprintf(buf, \"%s\", *f()[0]);\n    len += sprintf(buf + len, \"%s \", *((**f)()-1)[0]+4);\n    len += sprintf(buf + len, \"%s\", (*f())[0]-4);\n    len += sprintf(buf + len, \"%s\", f()[1][2]+3);\n    len += sprintf(buf + len, \"%s\", *((**f)()-1)[0]+4);\n    return buf;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216531,"user_id":408,"body":"char a[4][7] = {\"Common\", \"Point\", \"Boost\", \"Better\"};\nchar(*b[4])[7] = { a + 3, a + 1, a, a + 2 };\n\nchar(*(* c(void))[4])[7]\n{\n    return &b;\n}\n\nchar (**d())[7]\n{\n    return c()[1] - 3;\n}\n\nchar buf[256];\n\nchar *pointer_monster(char(**(*f)())[7])\n{\n    int len;\n    \n    len  = sprintf(buf, \"%s\", *f()[0]);\n    len += sprintf(buf + len, \"%s \", *((**f)()-1)[0]+4);\n    len += sprintf(buf + len, \"%s\", (*f())[0]-4);\n    len += sprintf(buf + len, \"%s\", f()[1][2]+3);\n    len += sprintf(buf + len, \"%s\", *((**f)()-1)[0]+4);\n    return buf;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216532,"user_id":null,"body":"char a[4][7] = {\"Common\", \"Point\", \"Boost\", \"Better\"};\nchar (*b[4])[7] = {a+3, a+1, a, a+2};\n\nchar (*(*c(void))[4])[7]\n{\n    return &b;\n}\n\nchar (**d(void))[7]\n{\n    return c()[1] - 3;\n}\n\nchar buf[256];\n\nchar *pointer_monster(char (**f(void))[7])\n{\n    int len;\n    \n    len  = sprintf(buf, \"%s\", *f()[0]);\n    len += sprintf(buf + len, \"%s \", *((**f)()-1)[0]+4);\n    len += sprintf(buf + len, \"%s\", (*f())[0]-4);\n    len += sprintf(buf + len, \"%s\", f()[1][2]+3);\n    len += sprintf(buf + len, \"%s\", *((**f)()-1)[0]+4);\n    return buf;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":216533,"user_id":null,"body":"char a[4][7] = {\"Common\", \"Point\", \"Boost\", \"Better\"};\nchar **b[4] = {a+3, a+1, a, a+2};\n\nchar **(*c(void))[4]\n{\n    return &b;\n}\n\nchar (**d(void))[7]\n{\n    return c()[1] - 3;\n}\n\nchar buf[256];\n\nchar *pointer_monster(char (**(*f)(void))[7])\n{\n    int len;\n    \n    len  = sprintf(buf, \"%s\", *f()[0]);\n    len += sprintf(buf + len, \"%s \", *((**f)()-1)[0]+4);\n    len += sprintf(buf + len, \"%s\", (*f())[0]-4);\n    len += sprintf(buf + len, \"%s\", f()[1][2]+3);\n    len += sprintf(buf + len, \"%s\", *((**f)()-1)[0]+4);\n    return buf;\n}","lang_id":34,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}]}