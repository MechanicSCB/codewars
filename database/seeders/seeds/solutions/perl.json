{"5e8c451f968b3400324b345e":[{"id":218671,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(add_key);\n\nsub add_key {\n    my ( $s ) = @_;\n    \n    my $M = 0;\n    my @digits = grep { \/[0-9]\/ } split(\/\/, $s);\n    \n    if ( scalar(@digits) >= 8 ) {\n        my $P = (($digits[0] * 3) + ($digits[1] * 7) + ($digits[2] * 1) + ($digits[3] * 3) + ($digits[4] * 7) + ($digits[5] * 1) + ($digits[6] * 3) + ($digits[7] * 7));\n        my $A = (1 + int($P\/10)) * 10;   \n        my ($k) = ($A - $P) =~ \/([0-9])$\/; \n        \n        $M = join('', @digits[0..7], $k ) + 0;\n    } \n    \n    return $M;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218672,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(add_key);\n\nsub add_key {\n    my $s = shift;\n    my $res = 0;\n    my @ds = 0 x 8;\n    my $digits_found = 0;\n    foreach my $char (split \/\/, $s) {\n        if ($digits_found == 8) { last; }\n        if ($char =~ \/\\d\/) { \n            my $c = $char - '0';\n            $ds[$digits_found++] = $c; \n            $res = 10 * $res + $c;\n        }\n    }\n    if ($digits_found < 8) { return 0 ; }\n    my $k = (($ds[0] + $ds[3] + $ds[6]) * 3  + ($ds[1] + $ds[4] + $ds[7]) * 7 + ($ds[2] + $ds[5])) % 10;\n    return $res * 10 + ($k == 0 ? 0 : 10 - $k);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218673,"user_id":209,"body":"package Solution;\nuse 5.30.0;\nuse strict;\nuse List::Util qw\/sum\/;\nuse POSIX qw\/ceil\/;\nuse Exporter qw\/import\/;\nour @EXPORT_OK = qw\/add_key\/;\n\nsub add_key {\n  my @matches = ($_[0] =~ \/(\\d)\/g);\n  if((my$L = @matches) < 8){return 0;}\n  @matches = @matches[0..7];\n  my $p = sum(map $matches[$_] * (3, 7, 1)[$_ % 3] , 0..8);\n  push(@matches, 10*ceil($p\/10) - $p);\n  int(join \"\",@matches)\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218674,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(add_key);\n\nsub add_key {\n    my $s = shift;\n    my @ds = (0) x 8;\n    my $nd = 0;\n    my $res = 0;\n    for my $i (0..length($s) - 1) {\n        if ($nd < 8) {\n            my $c = substr($s, $i, 1);\n            if (ord('0') <= ord($c) && ord($c) <= ord('9')) {\n                $res = $res * 10 + ($ds[$nd++] = ord($c) - ord('0'));\n            }\n        }\n    }\n    if ($nd < 8) { return 0; }\n    my $r = (($ds[0] + $ds[3] + $ds[6]) * 3  + ($ds[1] + $ds[4] + $ds[7]) * 7 + ($ds[2] + $ds[5])) % 10;\n    return $res * 10 + ($r == 0 ? 0 : 10 - $r);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218675,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(add_key);\n\nsub add_key {\n      my $string = $_[0];\n      my $p = 0;\n      my $a = 0;\n      my $k = 0; \n      \n      \n      $string =~ s\/\\D\/\/g;\n      \n\n      #$string =~ s\/(^0+(\\d))\/$2\/g;\n      if (length($string) >= 8) {\n        $string = substr($string, 0, 8);\n        $string =~ m\/(\\d)(\\d)(\\d)(\\d)(\\d)(\\d)(\\d)(\\d)\/;\n        $p = $1*3+$2*7+$3+$4*3+$5*7+$6+$7*3+$8*7;\n        \n        if ($p%10 != 0) {  \n          $a = $p + (10 - $p%10);\n          $k = $a-$p;\n        } else {\n          $k = 0;\n        }\n        $string .= $k;\n        \n\n        $string =~ s\/(^0+(\\d))\/$2\/g;\n        return $string;\n      } else {\n        \n        return 0;\n      }\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218676,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(add_key);\n\nsub add_key {\n    my $s = shift;\n    \n    my @nums = grep { \/\\d\/ } split '', $s;\n\n    return 0 if @nums < 8;\n\n    my $P = $nums[0]*3+$nums[1]*7+$nums[2]\n          + $nums[3]*3+$nums[4]*7+$nums[5]\n          + $nums[6]*3+$nums[7]*7;\n          \n    my $k = 0;\n\n    while ($P % 10 != 0) { $P++; $k++}\n\n    int(join('', splice(@nums, 0,8), $k));\n    \n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218677,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(add_key);\n\nsub add_key {\n    my ($n) = @_;\n    my ($p, $a, $k, $ret);\n    $n =~ s\/\\D\/\/g;\n    return \"0\" if (length($n) < 8);\n    $n =~ s\/(\\d{8}).*\/$1\/;\n    $p = substr($n,0,1)*3 + substr($n,1,1)*7 + substr($n,2,1)*1\n       + substr($n,3,1)*3 + substr($n,4,1)*7 + substr($n,5,1)*1\n       + substr($n,6,1)*3 + substr($n,7,1)*7;\n    $a = ($p =~ \/0$\/) ? $p : ($p + 10 - substr($p,-1,1));\n    $k = $a - $p;\n    ($ret = \"$n$k\") =~ s\/^0+\/\/;\n    return $ret;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"618591869fb77f002bdfc102":[{"id":218678,"user_id":149,"body":"package RegExport;\n\nuse strict;\nuse warnings;\n\nuse Exporter qw(import);\nour @EXPORT_OK = qw(get_pattern);\n\nsub get_pattern {\n    my $pattern = qr{^([+-]?\\d*\\.\\d{1,5}|(?=\\w)[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ ]+)$};\n    return $pattern;\n}\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218679,"user_id":53,"body":"package RegExport;\n\nuse strict;\nuse warnings;\n\nuse Exporter qw(import);\nour @EXPORT_OK = qw(get_pattern);\n\nsub get_pattern {\n    my $pattern = qr\/^(([+-]?\\d*\\.\\d{1,5})|((?=.*[^\\s])[\\sbcdfghjklmnpqrstvwxyz]+))$\/i;\n    return $pattern;\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218680,"user_id":76,"body":"package RegExport;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(get_pattern);\n\nsub get_pattern {\n    return qr{(?i)^([+-]?\\d*\\.\\d{1,5}|(?=.*[^\\s])[b-df-hj-np-tv-z\\s]+)$};\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218681,"user_id":404,"body":"package RegExport;\n\nuse strict;\nuse warnings;\n\nuse Exporter qw(import);\nour @EXPORT_OK = qw(get_pattern);\n\nsub get_pattern {\n\n    my $re_pattern = qr\/^(?(?=\\s?[a-z])[^aeiou]+|[+-]?\\d*?\\.\\d{1,5})$\/i;\n\n    $re_pattern;\n}\n\n'ABS';\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218682,"user_id":106,"body":"package RegExport;\n\nuse strict;\nuse warnings;\n\nuse Exporter qw(import);\nour @EXPORT_OK = qw(get_pattern);\n\nsub get_pattern {\n    # Your regex string goes here\n    my $pattern =  qr{^([b-df-hj-np-tv-zB-DF-HJ-NP-TV-Z ]+|[\\-+]?\\d*\\.\\d{1,5})$};\n    return $pattern;\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218683,"user_id":232,"body":"package RegExport;\n\nuse strict;\nuse warnings;\n\nuse Exporter qw(import);\nour @EXPORT_OK = qw(get_pattern);\n\nsub get_pattern {\n    qr\/^(([+-]?\\d*\\.\\d{1,5})|([^aeiou\\d]+))$\/i;\n}\n\n1;\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218684,"user_id":53,"body":"package RegExport;\n\nuse strict;\nuse warnings;\n\nuse Exporter qw(import);\nour @EXPORT_OK = qw(get_pattern);\n\nsub get_pattern {\n    my $pattern = qr\/^(([+-]?\\d*\\.\\d{1,5})|([ bcdfghjklmnpqrstvwxyz]+))$\/i;\n    return $pattern;\n}\n\n1;\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"54d496788776e49e6b00052f":[{"id":218685,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util qw( max );\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sum_of_divided);\n\n# parameter: array_ref; return array_ref\nsub sum_of_divided {\n    my $a = shift;\n    my @rem = map { abs($_); } @$a; \n    my ($mx, @res) = (9999, ());\n    my $fac = 2;\n    while ($fac <= $mx) {\n        my $isFactor = 0;\n        my $tot = 0;\n        for (0..$#$a) {\n            if ($rem[$_] % $fac == 0) {\n                $isFactor = 1;\n                $tot += $a->[$_];\n                while ($rem[$_] % $fac == 0) {\n                    $rem[$_] = int($rem[$_] \/ $fac);\n                }\n            }\n        }\n        if ($isFactor) {\n            push(@res, [$fac, $tot]);\n        }\n        if ($fac == 2) { ++$fac; } else { $fac += 2; }\n    }\n    \\@res;\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218686,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sum_of_divided);\n\n# parameter: array_ref; return: array_ref\nsub sum_of_divided {\n    my @i = @{$_[0]};\n    my ($n) = sort { $b <=> $a } map abs $_, @i;\n#     my @p = map { $_ > 9 && (!($_%2) || !($_%5)) ? 0 : $_ } (0, 0, 2..$n);\n    my @p = (0, 0, 2..$n);\n    for my $i (2..$n) {\n        if ($p[$i]) {\n            my $j = $i * 2;\n            while ($j <= $n) {\n                $p[$j] = 0;\n                $j += $i;\n            }\n        }\n    }\n    my %r;\n    for my $p (grep $_, @p) {\n        for my $i (@i) {\n            $r{$p} += $i unless $i%$p;\n        }\n    }\n   [map { [$_, $r{$_}] } sort { $a <=> $b } keys %r];\n}\n","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218687,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sum_of_divided);\n\n#\n# parameter: array_ref; \n# return: array_ref\n#\nsub sum_of_divided {\n    my ($lst, $m, @ls, @hs) = (@_, 0, (), ());\n    my $n = @$lst;\n    if ($n > 0) {\n        $m = abs(@$lst[0]);\n        foreach my $e (@$lst) {\n            $m = abs($e) if (abs($e) > $m);\n        }\n    }\n    for (my $i = 0; $i <= $m + 1; $i++) {\n        push(@hs, 0);\n    }\n    for (my $i = 2; $i <= $m; $i++) {\n        if (@hs[$i] == 0) {\n            my ($b, $s, $j) = (0, 0, 2 * $i);\n            foreach my $e (@$lst) {\n                if (abs($e) % $i == 0) {\n                    $b += 1;\n                    $s += $e;\n                }\n            }\n            if ($b > 0) {\n                push(@ls, [$i, $s]);\n            }\n            while ($j <= $m) {\n                @hs[$j] = 1;\n                $j += $i;\n            }\n        }\n    }\n    \\@ls\n}\n","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218688,"user_id":null,"body":"package Solution;\n\nuse v5.30;\nuse warnings;\nuse List::Util qw(max sum0);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sum_of_divided);\n\n# parameter: array_ref; return: array_ref\nsub sum_of_divided {\n    my ($arr) = @_;\n    my $max = max map abs, $arr->@*;\n    my $sieve = primes_sieve($max);\n    \n    my @result;\n    for (my $i = 2; $i <= $max; ++$i) {\n        next unless $sieve->[$i];\n        my @pp = grep {$_ % $i == 0} $arr->@*;\n        push @result, [$i, sum0 @pp] if @pp;\n    }\n    \n    return \\@result;\n}\n\nsub primes_sieve {\n    my ($n) = @_;\n    \n    state @primes = (2);\n    state @sieve  = (0, 1, 1);\n\n    if ($primes[-1] < $n) {\n        @sieve[$n] = undef;\n\n        foreach my $p (@primes) {\n            foreach (my $j = 2 * $p; $j <= $n; $j += $p) {\n                $sieve[$j] = 0;\n            }\n        }\n\n        for (my $i = pop @primes; $i <= $n; ++$i) {\n            if (defined $sieve[$i] && $sieve[$i] == 0) {\n                next;\n            } else {\n                push @primes, $i;\n                $sieve[$i] = 1;\n                foreach (my $j = 2 * $i; $j <= $n; $j += $i) {\n                    $sieve[$j] = 0;\n                }\n            }\n        }\n    }\n\n    return \\@sieve;\n}\n\n1;\n","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218689,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sum_of_divided);\n\nsub sum_of_divided {\n\n\tmy $nums = shift;\n\tmy %all_primes_hash = ();\n\n\tforeach my $num ( @$nums ) {\n\n\t\tmy $primes = &get_primes($num);\n\t\t\n\t\tforeach my $prime ( @$primes ) {\n\n\t\t\t$all_primes_hash{$prime} += $num;\n\t\t}\n\t}\n\n\tmy @all_primes_arr = ();\n\tforeach my $key ( sort { $a <=> $b } keys %all_primes_hash ) {\n\n\t\tpush ( @all_primes_arr, [$key, $all_primes_hash{$key}] );\n\t}\n\t\n\treturn \\@all_primes_arr;\n}\n\nsub get_primes {\n\n\tmy $n = abs(shift);\n\tmy %primes = ();\n\n\twhile ( $n % 2 == 0) {\n\n\t\t$primes{2} = 1;\n\t\t$n \/= 2;\n\t}\n\n\tfor ( my $i = 3; $i <= sqrt($n); $i += 2 ) {\n\n\t\twhile ( $n % $i == 0) {\n\t\n\t\t\t$primes{$i} = 1;\n\t\t\t$n \/= $i;\n\t\t}\n\t}\n\n\tif ( $n > 2 ) {\n\t\t\n\t\t$primes{$n} = 1;\n\t}\n\n\treturn [ keys %primes ];\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218690,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util qw(sum);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sum_of_divided);\n\nsub factorize {\n    my $n = abs shift;\n    my @factors;\n    my $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n            push @factors, $i;\n            $n \/= $i;\n        }\n        $i++;\n    }\n    @factors;\n}\n\n# parameter: array_ref; return: array_ref\nsub sum_of_divided {\n    my ($arr) = @_;\n    my %factors;\n    for (@$arr) {\n        $factors{$_} = 1 for factorize($_);\n    }\n    my @result;\n    for my $factor (sort {$a <=> $b} keys %factors) {\n        push @result, [$factor, sum grep {$_ % $factor == 0} @$arr];\n    }\n    \\@result;\n}\n","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218691,"user_id":180,"body":"package Solution;\nuse strict;\nuse warnings;\nuse base 'Exporter';\nour @EXPORT = qw(sum_of_divided);\nuse POSIX qw(ceil);\nuse List::Util qw(max sum);\n\nsub primes {\n    my $n       = shift;\n    my %primes  = map {$_ => 1} 2 .. $n;\n    for my $i (2 .. ceil sqrt $n) {\n        delete $primes{$i*$_} for 2 .. ceil $n\/$i;\n    }\n    return sort {$a <=> $b} keys %primes;\n}\n\nsub sum_of_divided {\n    my $I = shift;\n\n    my %factors = map {$_ => []} primes max @$I;\n    for my $p (keys %factors) {\n        push @{$factors{$p}}, $_ for grep {$_ % $p == 0} @$I;\n    }\n\n    my @factors = sort {$a <=> $b} grep @{$factors{$_}} => keys %factors;\n    return [ map [$_ => sum @{$factors{$_}}] => @factors ];\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218692,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util 'sum0';\nuse List::MoreUtils 'uniq';\nuse Data::Dumper;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sum_of_divided);\n\n# parameter: array_ref; return: array_ref\nsub sum_of_divided {\n    my ($aref) = @_;\n    my $ret = [];\n    for my $f (uniq sort {$a <=> $b} map {prime_factors($_)} @$aref) {\n        push(@$ret, [$f, sum0 grep {($_ % $f) == 0} @$aref]);\n    }\n    $ret;\n}\n\nsub prime_factors {\n    my ($n, @factors) = (abs($_[0]), ());\n    while ($n%2 == 0) {\n        push(@factors, 2);\n        $n \/= 2;\n    }\n    for (my $i = 3; $i <= ($n**0.5); $i++) {\n        while ($n%$i == 0) {\n            push(@factors, $i);\n            $n \/= $i;\n        }\n    }\n    push(@factors, $n) if ($n > 2);\n    return (uniq sort @factors);\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"55cf3b567fc0e02b0b00000b":[{"id":218693,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(part);\n\nuse List::Util qw(sum);\nsub part {\n    my $n = shift;\n    my %prods = (1, 1);\n    my @xs;\n    my ($l, $r, $s, $m, $u) = (0, 0, 0, 0.0, 0.0);\n    local *aux = sub {\n        my ($t, $p, $m) = @_;\n        my $i = 2;\n        $prods{$p} = $p;\n        while ($i <= $m && $t + $i <= $n) {\n            aux($t + $i, $p * $i, $i);\n            $i++;\n        }\n    };\n    aux(0, 1, $n);\n    @xs = keys %prods;\n    @xs = sort { $a <=> $b } @xs;\n    $l = @xs;\n    $r = $xs[$l - 1] - $xs[0];\n    $s = 0;\n    foreach (@xs) {\n\t    $s += $_;\n\t}\n    $u = $s \/ $l;\n    $m = 0.5 * (int($xs[$l \/ 2]) + int($xs[($l - 1) \/ 2]));\n    return sprintf(\"Range: %d Average: %.2f Median: %.2f\", $r, $u, $m);\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218694,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(part);\n\nsub median {\n    my @vals = @_; my $len = @vals;\n    if ($len % 2) {\n        return $vals[int($len \/ 2)];\n    } else {\n        return ($vals[int($len \/ 2) - 1] + $vals[int($len \/ 2)]) \/ 2;\n    }\n}\nuse List::Util qw(sum);\nsub part {\n    my %prods = (1 => 1);\n    my $n = shift;\n    local *aux = sub {\n        my ($t, $p, $m) = @_;\n        $prods{$p} = $p;\n        my $i = 2;\n        while (($i <= $m) && ($t + $i <= $n)) {\n            aux($t + $i, $p * $i, $i);\n            $i++;\n        }\n    };\n    aux(0, 1, $n);\n    my @x = sort { $a <=> $b } values %prods;\n    my $range = $x[-1] - $x[0];\n    my $avg = sprintf(\"%.2f\", sum(@x)\/@x);\n    my $med = sprintf(\"%.2f\", median(@x));\n    return \"Range: $range Average: $avg Median: $med\";\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218695,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(part);\n\nuse List::Util qw(sum product);\n\nmy (@a, %e) = ();\n\nsub enum {\n    my ($n, $k, $i) = @_;\n    if ($n) {\n        if ($n - $k >= 0) {\n            $a[$i] = $k;\n            enum($n - $k, $k, $i + 1);\n        }            \n        enum($n, $k - 1, $i) if $k - 1;            \n    } else {\n        my $m = product @a;\n        $e{$m} = 1;\n    }        \n};\n    \nsub part {\n    my ($n) = @_;\n    (@a, %e) = ();\n    \n    enum($n, $n, 0);\n    \n    my @e = sort { $a <=> $b } keys %e;\n    \n    return sprintf('Range: %d Average: %0.2f Median: %0.2f', $e[-1] - $e[0], (sum @e) \/ @e, @e%2 ? $e[int(@e\/2)] : (sum $e[$#e\/2], $e[$#e\/2+1])\/2);\n}\n\n1;\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218696,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(part);\n\nuse List::Util qw(sum);\nmy $h = {};\nmy $been = {};\nsub req {\n    my ($n, $m) = @_;\n\n    return if $been->{$n.'_'.$m};\n    $been->{$n.'_'.$m} = 1;\n\n    $m = 1 if $m == 0;\n\n    $h->{$n*$m} = 1;\n    my $new_n = 1;\n    while ($new_n < $n){\n        req($new_n, $m*($n-$new_n));\n        $new_n++;\n    }\n    \n}\nsub qsort {\n    return @_ if @_ < 2;\n    my $pivot = pop;\n    qsort(grep $_ < $pivot, @_), $pivot, qsort(grep $_ >= $pivot, @_);\n}\nsub part {\n    my $n = shift;\n    $h = {};\n    $been = {};\n    req($n, 0);\n    my @res = qsort keys %$h;    \n    my $length  = @res;\n    my $range   = $res[$length-1] - $res[0];\n    my $average = (sum @res)\/$length;\n    my $median  = $length%2 == 0 ? ($res[int($length\/2)]+$res[int($length\/2)-1])\/2 : $res[int(($length-1)\/2)];\n    return \"Range: \".$range.\" Average: \".sprintf(\"%.2f\", $average).\" Median: \".sprintf(\"%.2f\", $median);\n}\n1;\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5629db57620258aa9d000014":[{"id":218697,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(mix_strings);\n\nsub maxi {\n    return $_[0] >= $_[1] ? $_[0] : $_[1];\n}\nsub mix_strings {\n    my ($s1, $s2) = @_;\n    my @alpha_s1 = (0) x 26; my @alpha_s2 = (0) x 26;\n    foreach my $c1 (split \/\/, $s1) { if (ord($c1) >= 97 && ord($c1) <= 122) { $alpha_s1[ord($c1) - 97] += 1 } }\n    foreach my $c2 (split \/\/, $s2) { if (ord($c2) >= 97 && ord($c2) <= 122) { $alpha_s2[ord($c2) - 97] += 1 } }\n    my $res = \"\"; \n    my $i = 0;\n    while ($i < 26) {\n        my $sm = maxi $alpha_s1[$i], $alpha_s2[$i];\n        if ($sm > 1) {\n            if ($sm > $alpha_s1[$i]) {\n                $res .= \"2:\".chr($i + 97) x $sm.\"\/\";\n            } elsif ($sm > $alpha_s2[$i]) {\n                $res .= \"1:\".chr($i + 97) x $sm.\"\/\";\n            } elsif ($alpha_s1[$i] == $alpha_s2[$i]) {\n                $res .= \"=:\".chr($i + 97) x $sm.\"\/\";\n            }\n        }\n        $i++;\n    }\n    my @res = split \"\/\", substr($res, 0, -1);\n    @res = sort { length($b) <=> length($a) or \"$a\" cmp \"$b\" } @res;\n    join \"\/\", @res;\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218698,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(mix_strings);\n\nuse experimental qw\/declared_refs\/;\n\nsub mix_strings {\n  my @strings = (0, @_);\n  my %letter_hash;\n  for my $str_num (1..$#strings)\n  {\n    for my $letter ( grep { \/[a-z]\/ } split \/\/, $strings[$str_num] )\n    {\n      my $incd = ++$letter_hash{$letter}->[$str_num];\n      my \\$max_idx = \\$letter_hash{$letter}->[0];\n      $letter_hash{$letter}->[@strings] = $letter;\n      $max_idx = $str_num\n        if !defined $max_idx || $incd > $letter_hash{$letter}->[$max_idx];\n    }\n  }\n  \n  my @filtered = grep { $_->[$_->[0]] > 1 } values %letter_hash;\n\n  my @substrings =  map {\n    my $letter_counts = $_;\n    my ($max_idx, $letter) = @$letter_counts[0, -1];\n    my $max = $_->[$max_idx];\n    my $diff = scalar grep { ($_ \/\/ 0) != $max }\n      @$letter_counts[1..@strings-1];\n    join ':', ($diff ? $max_idx : '='), $letter x $max;\n  } @filtered;\n\n  return join '\/',\n    sort { length $b <=> length $a || $a cmp $b }\n    @substrings;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218699,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(mix_strings);\n\nsub compare_occurrences {\n    my ( $a, $b ) = @_;\n    my $l_a     = length $a;\n    my $l_b     = length $b;\n    my $compare = $l_b <=> $l_a;\n\n    return $compare if ( $compare != 0 );\n    return $a cmp $b;\n}\n\nsub save_occurrences {\n    my ( $occurrences, $letter, $s1_count, $s2_count ) = @_;\n    if ( $s1_count > 1 ) {\n        if ( $s2_count > 1 ) {\n            if ( $s1_count > $s2_count ) {\n                push @$occurrences, \"1:\" . $letter x $s1_count;\n            }\n            elsif ( $s2_count > $s1_count ) {\n                push @$occurrences, \"2:\" . $letter x $s2_count;\n            }\n            else {\n                push @$occurrences, \"=:\" . $letter x $s1_count;\n            }\n        }\n        else {\n            push @$occurrences, \"1:\" . $letter x $s1_count;\n        }\n    }\n    elsif ( $s2_count > 1 ) {\n        push @$occurrences, \"2:\" . $letter x $s2_count;\n    }\n}\n\nsub mix_strings {\n    my ( $s1, $s2 ) = @_;\n    my %checked_letters;\n    my @occurrences;\n\n    for my $letter ( split \/\/, $s1 ) {\n        if ( $letter eq ' ' || exists $checked_letters{$letter} ) {\n            next;\n        }\n        else {\n            $checked_letters{$letter} = 1;\n            my $s1_count = $s1 =~ s\/(${letter})\/\/g;\n            my $s2_count = $s2 =~ s\/(${letter})\/\/g;\n            save_occurrences( \\@occurrences, $letter, $s1_count, $s2_count );\n        }\n    }\n\n    for my $letter ( split \/\/, $s2 ) {\n        if ( $letter eq ' ' || exists $checked_letters{$letter} ) {\n            next;\n        }\n        else {\n            $checked_letters{$letter} = 1;\n            my $s2_count = $s2 =~ s\/(${letter})\/\/g;\n            save_occurrences( \\@occurrences, $letter, 0, $s2_count );\n        }\n    }\n\n    return join '\/', sort { compare_occurrences( $a, $b ); } @occurrences;\n}\n","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218700,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(mix_strings);\n\nsub mix_strings {\n        \n        my ($s1, $s2) = @_;\n        my %hash = ();\n        \n        foreach my $let ( 'a' .. 'z' ) {\n\n                my $cnt1 = () = $s1 =~ \/$let\/g;\n                my $cnt2 = () = $s2 =~ \/$let\/g;\n                my $key = '';\n\n                if ( $cnt1 <= 1 && $cnt2 <= 1 ) {\n                        \n                        next;\n                } elsif ( $cnt1 > $cnt2 ) {\n                        \n                        $key = \"1:\" . ($let x $cnt1);\n                } elsif ( $cnt1 < $cnt2 ) {\n                        \n                        $key = \"2:\" . ($let x $cnt2);\n                } else {\n                 \n                        $key = \"=:\" . ($let x $cnt1);\n                }\n\n                $hash{$key} = 1;\n        }\n\n        my @arr = sort { length $b <=> length $a || $a cmp $b } keys %hash;\n        return join ('\/', @arr);\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218701,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(mix_strings);\n\nsub mix_strings {\n    my ($s1, $s2) = @_;\n    $s1 =~ s\/\\s+\/\/g;\n    $s2 =~ s\/\\s+\/\/g;\n    $s1 =~ s\/\\d+\/\/g;\n    $s2 =~ s\/\\d+\/\/g;\n    $s1 =~ s\/[A-Z]+\/\/g;\n    $s2 =~ s\/[A-Z]+\/\/g;\n    $s1 =~ s\/[=+#]+\/\/g;\n    $s2 =~ s\/[=+#]+\/\/g;\n\n    my @s1_arr = split('', $s1);\n    my @s2_arr = split('', $s2);\n    my %s1_h;\n    my %s2_h;\n    foreach my $el (@s1_arr){\n        if (exists($s1_h{$el})){\n            $s1_h{$el}{1} += 1;\n        }else{\n            $s1_h{$el} = {1=>1};\n        }\n    }\n    foreach my $el (@s2_arr){\n        if (exists($s2_h{$el})){\n            $s2_h{$el}{2} += 1;\n        }else{\n            $s2_h{$el} = {2=>1};\n        }\n    }\n    my %hash_ans;\n    my $n;\n    my %s3_h = (%s1_h, %s2_h);\n    foreach my $key (keys %s3_h){\n        if (exists($s2_h{$key}{2})){\n            if (!exists($s1_h{$key}{1}) && $s2_h{$key}{2} > 1){\n                $n = $key x $s2_h{$key}{2};\n                $hash_ans{$n} = \"2:\";\n            }else{\n                if ($s2_h{$key}{2} > 1 && $s2_h{$key}{2} > $s1_h{$key}{1}){\n                    $n = $key x $s2_h{$key}{2};\n                    $hash_ans{$n} = \"2:\";\n                }elsif($s2_h{$key}{2} > 1 && $s2_h{$key}{2} == $s1_h{$key}{1}){\n                    $n = $key x $s2_h{$key}{2};\n                    $hash_ans{$n} = \"=:\";\n                }elsif($s1_h{$key}{1} > 1 && $s2_h{$key}{2} < $s1_h{$key}{1}){\n                    $n = $key x $s1_h{$key}{1};\n                    $hash_ans{$n} = \"1:\";\n                }\n            }\n        }else{\n            if ($s1_h{$key}{1} > 1){\n                $n = $key x $s1_h{$key}{1};\n                $hash_ans{$n} = \"1:\";\n            }\n        }\n    }\n    my $result_str = \"\";\n    foreach my $key (sort { length($b) <=> length($a) or \"$hash_ans{$a}\" . \"$a\" cmp \"$hash_ans{$b}\" . \"$b\"} keys %hash_ans) {\n        $result_str .= \"$hash_ans{$key}\" . \"$key\" . \"\/\";\n    }\n    return substr $result_str, 0, -1;\n    \n}\n","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218702,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(mix_strings);\n\nsub mix_strings {\n    my @l;\n    for my $char ('a'..'z') {\n        my $c1 = () = $_[0] =~ \/$char\/g;\n        my $c2 = () = $_[1] =~ \/$char\/g;\n        my $max = $c1 > $c2 ? $c1 : $c2;\n        push @l, qw(= 1 2)[$c1 <=> $c2] . \":\" . $char x $max if (1 < $max);\n    }\n    return join \"\/\", sort {length $b <=> length $a || $a cmp $b} @l;\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218703,"user_id":2582,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(mix_strings);\n\nuse Data::Dumper;\n\n\nsub normalize\n{\n    my ($letter, $s1CountHashRef, $s2CountHashRef) = @_;\n\n    my ($c1, $c2) = ($s1CountHashRef->{$letter} || 0, $s2CountHashRef->{$letter} || 0);\n    return '1:' . $letter x $c1  if $c1 > $c2;\n    return '2:' . $letter x $c2  if $c1 < $c2;\n    return '=:' . $letter x $c1;\n}\n\n\nsub mix_strings\n{\n    my ($s1, $s2) = @_;\n\n    my (%s1Count, %s2Count);\n    $s1Count{$1}++  while $s1 =~ m\/([a-z])\/g;\n    $s2Count{$1}++  while $s2 =~ m\/([a-z])\/g;\n\n    my (%s1Set, %s2Set);\n    $s1Count{$_} > 1 and $s1Set{$_} = '[present in set]'  foreach keys %s1Count;\n    $s2Count{$_} > 1 and $s2Set{$_} = '[present in set]'  foreach keys %s2Count;\n    my %wholeSet = (%s1Set, %s2Set);\n\n    my @terms = map { normalize($_, \\%s1Count, \\%s2Count) } keys %wholeSet;\n    @terms = sort {length($b) <=> length($a) or $a cmp $b} @terms;\n    \n    return join '\/', @terms;\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218704,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(mix_strings);\n\nsub mix_strings {\n    my ($s1, $s2) = @_;\n    my $st1 = {};\n    my $st2 = {};\n    for my $l (split ('', $s1)) {\n        if ($l =~ m\/[a-z]\/) {\n            $st1->{$l} .= $l;\n        }\n    }\n    for my $l (split ('', $s2)) {\n        if ($l =~ m\/[a-z]\/) {\n            $st2->{$l} .= $l;\n        }\n    }\n    my $max;\n    for my $e1 (keys %{$st1}) {\n        if (!defined($st2->{$e1})) {\n            $max->{$e1}{string_value} = $st1->{$e1};\n            $max->{$e1}{string_number} = 1;\n            $max->{$e1}{prefix} = ':';\n            next;\n        }\n        $max->{$e1}{string_value} = length $st1->{$e1} > length $st2->{$e1} ? $st1->{$e1} : $st2->{$e1};\n        $max->{$e1}{string_number} = length $st1->{$e1} > length $st2->{$e1} ? 1 : 2;\n        $max->{$e1}{prefix} = $st1->{$e1} eq $st2->{$e1} ? '=:' : ':';\n    }\n    for my $e2 (keys %{$st2}) {\n        if ($st1->{$e2}) {next;}\n        $max->{$e2}{string_value} = $st2->{$e2};\n        $max->{$e2}{string_number} = 2;\n        $max->{$e2}{prefix} = ':';\n    }    \n    my @result =\n        map { ($_->{prefix} eq ':' ? $_->{string_number} : '').$_->{prefix}.$_->{string_value} }\n        sort {\n            length $b->{string_value} <=> length $a->{string_value} ||\n            $a->{prefix} cmp $b->{prefix} ||\n            $a->{string_number} <=> $b->{string_number} ||\n            $a->{string_value} cmp $b->{string_value}\n        }\n        grep { length ($_->{string_value}) > 1 }\n        values %{$max};\n    return join('\/', @result);\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218705,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(mix_strings);\n\nsub mix_strings {\n    my ($s1, $s2, $exp) = @_;\n    $s1 =~ s\/[^a-z]\/\/g;\n    $s2 =~ s\/[^a-z]\/\/g;\n\n    my %h;\n    foreach (split '', $s1) {\n        $h{1}{$_} += 1;\n    }\n    foreach (split '', $s2) {\n        $h{2}{$_} += 1;\n    }\n\n    my @res;\n    foreach my $s(1..2) {\n        foreach (keys %{$h{$s}}) {\n\n            my $c = $h{$s}{$_} || 0;           \n            my $other_s = 3 - $s;        \n            my $other_c = $h{$other_s}{$_} || 0;\n\n            push @res, $other_c == $c ? '=:'.($_ x $c)\n                     : $other_c > $c  ? $other_s.':'.($_ x $other_c)\n                     :                  $s.':'.($_ x $c)\n                if $other_c > 1 || $c > 1;\n            \n            $h{$s}{$_} = 0;\n            $h{$other_s}{$_} = 0;\n        }\n    }\n\n    join('\/', sort { length($b) <=> length ($a) || $a cmp $b  } @res);\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218706,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(mix_strings);\n\nsub mix_strings {\n  my $s1 = shift;\n  my $s2 = shift;\n  use vars qw{$D @out $retval};\n  undef $D;\n  undef @out;\n  {\n    foreach my $i (1..2){\n      foreach my $j ('a' .. 'z'){\n        $D->{string}{$i}->{letter}{$j}->{count} = 0;\n      }\n    }\n  }\n  {\n    my @arr = split(\/\/,$s1);\n    my $s = 1;\n    foreach (@arr){\n      next unless \/[a-z]\/;\n      $D->{string}{$s}->{letter}{$_}->{count} += 1;\n    }\n  }\n  {\n    my @arr = split(\/\/,$s2);\n    my $s = 2;\n    foreach (@arr){\n      next unless \/[a-z]\/;\n      $D->{string}{$s}->{letter}{$_}->{count} += 1;\n    }\n  }\n  {\n    use vars qw{$element $count1 $count2};\n\n    foreach my $letter('a' .. 'z'){\n      $count1 = $D->{string}{1}->{letter}{$letter}->{count};\n      $count2 = $D->{string}{2}->{letter}{$letter}->{count};\n      next if ($count1 <= 1 && $count2 <= 1);\n      if ($count1 > 1 && $count2 <= 1) { $element = join(\":\",1,$letter x $count1); };\n      if ($count2 > 1 && $count1 <= 1) { $element = join(\":\",2,$letter x $count2); };\n      if ($count1 > $count2){ $element = join(\":\",1,$letter x $count1) };\n      if ($count2 > $count1){ $element = join(\":\",2,$letter x $count2) };\n      if ($count1 == $count2){ $element = join(\":\",'=',$letter x $count1) };\n      push @out,$element;\n    }\n    $retval = join('\/',\n      sort {\n        my ($m,$n) = split(':',$a);\n        my ($x,$y) = split(':',$b);\n        length ($y) <=> length($n) || $m cmp $x || $n cmp $y;\n      } @out);\n  }\n  return $retval;\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5672682212c8ecf83e000050":[{"id":218707,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw(dbl_linear);\n\nsub dbl_linear {\n    my ($n, $i, $c) = (shift, 1, 1);\n    my @u = (0, 1);\n    while ($c++ <= $n) {\n        $u[$i*2+1] = 1;\n        $u[$i*3+1] = 1;\n        while (!$u[++$i]) {}\n    }\n    $i;\n};","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218708,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw(dbl_linear);\n\nsub dbl_linear {\n    my $n = shift;\n    my %u = (0 => 1);\n    my ($i, $x, $y, $a, $b, $c) = (1, 0, 0, 0, 0, 0);\n    while ($i <= $n) {\n        $a = 2 * $u{$x} + 1;\n        $b = 3 * $u{$y} + 1;\n        $c = $a < $b ? $a : $b;\n        $u{$i} = $c;\n        if ($c == $a) { $x++; }\n        if ($c == $b) { $y++; }\n        $i++;\n    }\n    return $u{$n};\n};","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218709,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dbl_linear);\n\nmy @u = (0, 1);\nmy $i = 1;\n\nsub dbl_linear {\n    my ($n, $j) = (@_, 0);\n    while ($j < $n * 1.175) {\n        for (2, 3) {\n            my $a = $u[$i] * $_ + 1;\n            $j = $#u; \n            $j-- while $u[$j] > $a;\n            @u = (@u[0..$j], $a, @u[$j + 1..$#u]) if $u[$j] != $a;\n        }\n        $i++;\n    }\n    $u[$n + 1];\n};","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218710,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw(dbl_linear);\nuse experimental qw(signatures);\n\nsub dbl_linear ($n) {\n    my %valid = (1 => 1);\n    ++$n;\n    my $i = 0;\n    while ($n > 0) {\n        ++$i;\n        if (exists $valid{$i}) {\n            $valid{$i * 2 + 1} = 1;\n            $valid{$i * 3 + 1} = 1;\n            --$n;\n        }\n    }\n    return $i;\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218711,"user_id":null,"body":"package Solution;\n# Solution10.pm, OK\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw(dbl_linear);\n\nsub dbl_linear {\n\n\tmy $n = shift;\n\tmy @arr = (1);\n\tmy ($i, $j) = (0, 0);\n\n\tfor ( 0 .. $n ) {\n\n\t\tmy $x = 2 * $arr[$i] + 1;\n\t\tmy $y = 3 * $arr[$j] + 1;\n\t\t\n\t\tif ( $x <= $y ) {\n\n\t\t\tpush ( @arr, $x );\n\t\t\t$i++;\n\t\t\t$j++ if ( $x == $y );\n\t\t} else {\n\n\t\t\tpush ( @arr, $y );\n\t\t\t$j++;\n\t\t}\n\t}\n\n\treturn $arr[$n];\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218712,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw(dbl_linear);\n\nsub dbl_linear {\n    my ($n) = @_;\n    my @arr = (1);\n    my $z=0;\n    my $y=0;\n    my $last_y;\n    my $last_z;\n    for (my $i=0; $i<=int($n); $i++){\n        $y =  2 * $arr[$last_y] + 1;\n        $z = 3 * $arr[$last_z] + 1;\n        if ($z <= $y){\n            $last_z++;\n            push(@arr, $z);\n            if ($z==$y){\n                $last_y++;\n                }\n        }else{\n            $last_y++;\n            push(@arr, $y);\n        }\n    }\n    return $arr[$n];\n    \n    0;\n};","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218713,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dbl_linear);\n\nsub dbl_linear {\n    my @u = (0, 1);\n    my $found = 0;\n    my $i = 1;\n    while ($_[0] > $found) {\n        $i++;\n        my $in_u = 0;\n        if ($i % 2 == 1 && $u[($i - 1) \/ 2] == 1) { $in_u = 1; }\n        if ($i % 3 == 1 && $u[($i - 1) \/ 3] == 1) { $in_u = 1; }\n        push @u, $in_u;\n        $found += $in_u;\n    }\n    $i;\n}1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218714,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw(dbl_linear);\n\nsub dbl_linear {\n    my ( $requestedIndex ) = @_;\n    my $yIndex = 0;\n    my $zIndex = 0;\n    my $duplicates = 0;\n    my @sequence = ( 1 );\n\n    while ($yIndex + $zIndex < $requestedIndex + $duplicates) {\n        my $y = 2 * $sequence[$yIndex] + 1;\n        my $z = 3 * $sequence[$zIndex] + 1;\n\n        if ($y < $z) {\n            push(@sequence, $y);\n            $yIndex += 1;\n        } elsif ($y > $z) {\n            push(@sequence, $z);\n            $zIndex += 1;\n        } else {\n            push(@sequence, $y);\n            $yIndex += 1;\n            $zIndex += 1;\n            $duplicates += 1;\n        }   \n    }\n\n    return $sequence[$requestedIndex];\n};","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218715,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw(dbl_linear);\n\nsub _search_sorted_array {\n    # We want to know the place where a value is,\n    # or where it _should_ be; so we always return\n    # a value here\n    my ( $arrayToSearch, $valueToSearchFor, $lowBoundary, $highBoundary ) = @_;\n    if ( $highBoundary <= $lowBoundary ) {\n        return $lowBoundary;\n    }\n    else {\n        my $midPoint = int( ( $lowBoundary + $highBoundary ) \/ 2 );\n        if ( $midPoint == $lowBoundary ) {\n            return ( $arrayToSearch->[$highBoundary] <= $valueToSearchFor )\n                ? $highBoundary\n                : $lowBoundary\n        }\n        elsif ( $arrayToSearch->[$midPoint] <= $valueToSearchFor ) {\n            return ( $arrayToSearch->[$midPoint] == $valueToSearchFor )\n                ? $midPoint\n                : _search_sorted_array(\n                        $arrayToSearch\n                      , $valueToSearchFor\n                      , $midPoint + 1\n                      , $highBoundary\n                  );\n        }\n        else {\n            return _search_sorted_array(\n                         $arrayToSearch\n                       , $valueToSearchFor\n                       , $lowBoundary\n                       , $midPoint - 1\n                   );\n        }\n    }\n}\n\nsub _insert_array {\n    my ( $arrayForInserting, $valueToInsert ) = @_;\n    my $targetPosition = _search_sorted_array(\n                               $arrayForInserting\n                             , $valueToInsert\n                             , 0\n                             , ( scalar( @{ $arrayForInserting } ) - 1 )\n                         );\n    if ( $arrayForInserting->[$targetPosition] <= $valueToInsert ) {\n        return if ( $arrayForInserting->[$targetPosition] == $valueToInsert );\n        splice( @{ $arrayForInserting }, ( $targetPosition + 1 ), 0, $valueToInsert );\n    }\n    else {\n        splice( @{ $arrayForInserting }, $targetPosition, 0, $valueToInsert );\n    }\n}\n\nsub dbl_linear {\n    my $element = shift;\n\n    my $currentValue;\n    my @sortedSequence = ( 1 );\n    foreach my $currentPosition ( 0 .. $element ) {\n\n        my $nextValue = $sortedSequence[ $currentPosition ];\n\n        if ( scalar( @sortedSequence ) > $element ) {\n            $currentValue = $sortedSequence[$element];\n            my $x = 2 * $nextValue + 1;\n            if ( $x < $currentValue ) {\n                _insert_array( \\@sortedSequence, $x );\n                my $y = 3 * $nextValue + 1;\n                if ( $y < $currentValue ) {\n                    push( @sortedSequence, $y );\n                }\n            }\n            else {\n                last;\n            }\n        }\n        else {\n            my $x = 2 * $nextValue + 1;\n            my $y = 3 * $nextValue + 1;\n            _insert_array( \\@sortedSequence, $x );\n            push( @sortedSequence, $y );\n        }\n\n    }\n\n    return $currentValue;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218716,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse List::Util qw(min);\n\nour @EXPORT_OK = qw(dbl_linear);\n\nsub dbl_linear {\n    my ($n) = @_;\n    my (@ret, $i1, $i2, $t1, $t2);\n    @ret = (1); $i1 = 0; $i2 = 0;\n    for (1..$n) {\n        $t1 = 2*$ret[$i1] + 1;\n        $t2 = 3*$ret[$i2] + 1;\n        push(@ret, min($t1, $t2));\n        $i1++ if ($ret[-1] == $t1);\n        $i2++ if ($ret[-1] == $t2);\n    }\n    return $ret[-1];\n};","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56c04261c3fcf33f2d000534":[{"id":218717,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(doubles);\n\nsub doubles {\n    my ($maxk, $maxn, $k, $n, $sum) = (@_, 1, 0, 0);\n    while ($k <= $maxk) {\n        $n = 1;\n        while ($n <= $maxn) {\n            $sum += 1.0 \/ ($k * ($n+1) ** (2*$k));\n            $n++;\n        }\n        $k++;\n    }\n    return $sum;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218718,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(doubles);\n\nsub doubles {\n    my ($maxk, $maxn) = @_;\n    my ($res, $n) = (0.0, 1);\n    while ($n <= $maxn) {\n        my ($base, $tmp) = ($n + 1.0, 1.0);\n        my $k = 1;\n        while ($k <= $maxk) {\n            $tmp *= $base * $base;\n            last if ($tmp > 1e18);\n            $res += 1 \/ ($tmp * $k);\n            ++$k;\n        }\n        ++$n;\n    }\n    $res;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218719,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(doubles);\n\nsub u {\n    my ($r, $k, $n) = (0, @_);\n    $r += 1 \/ ($k * ($_ + 1) ** ($k * 2)) for 1..$n;\n    $r;\n}\n\nsub doubles {\n    my ($r, $k, $n) = (0, @_);\n    $r += u($_, $n) for 1..$k;\n    $r;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218720,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(doubles);\n\nsub doubles {\n    my ($maxk, $maxn) = @_;\n    my $total = 0;\n    for my $n (2..$maxn + 1) {\n        my $cur = 1;\n        for my $k (1..$maxk) {\n            $cur \/= $n * $n;\n            $total += $cur \/ $k;\n        }\n    }\n    return $total;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"50654ddff44f800200000004":[{"id":218721,"user_id":null,"body":"package Solution;\n\nuse 5.030;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw(multiply);\n\nsub multiply {\n    my ($a, $b) = @_;\n    return $a * $b;\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218722,"user_id":null,"body":"package Solution;\n\nuse 5.030;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw(multiply);\n\nsub multiply { (shift) * shift; }\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218723,"user_id":527,"body":"package Solution;\n*main::multiply = sub { shift() * shift() }","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218724,"user_id":null,"body":"package Solution;\n\nuse 5.030;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw(multiply);\n\nsub multiply {\n    my $a = shift @_;\n    my $b = shift @_;\n    return $a * $b;\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218725,"user_id":676,"body":"package Solution;\n\nuse 5.030;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw(multiply);\n\nsub multiply {\n    my $a = shift;\n    my $b = shift;\n    return $a * $b;\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218726,"user_id":null,"body":"package Solution;\nuse 5.030;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(multiply);\n\nsub multiply {\n    return $_[0] * $_[1];\n}\n\n'ok';","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218727,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw(multiply);\n\nsub multiply {\n    $_[0] * $_[1]\n}\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218728,"user_id":null,"body":"package Solution;\n\nuse 5.030;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw(multiply);\n\nsub multiply {\n    my ($x, $y) = @_;\n    $x * $y;\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218729,"user_id":null,"body":"package Solution;\n\nuse 5.030;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw(multiply);\n\nsub multiply {\n    $_[0] * $_[1];\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218730,"user_id":null,"body":"package Solution;\n\nuse 5.030;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw(multiply);\n\nsub multiply {\n(my $a, my $b ) = @_;\n    $a = shift;\n    $b = shift;\n    return $a * $b;\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5168bb5dfe9a00b126000018":[{"id":218731,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub solution {\n    my ($str) = @_;\n    return reverse($str);# Your code here\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218732,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub solution {\n    scalar reverse shift;\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218733,"user_id":null,"body":"package Kata;\n\nsub solution {\n    reverse pop\n}\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218734,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub solution {\n    my $new = '';\n    $new = $_ . $new for split '', \"@_\";\n    $new\n}\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218735,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub solution {\n    my $str = '';\n    $str = $_ . $str for split '', \"@_\";\n    $str\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218736,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub solution {\n    my $res = '';\n    $res = $_ . $res for split '', \"@_\";\n    $res\n}\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218737,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub solution {\n    my $str = '';\n    for (split '', \"@_\") {\n        $str = $_ . $str;\n    }\n    $str;\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218738,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub solution {\n    reverse \"@_\"\n}\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218739,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub solution {\n    ($_) = @_;\n    reverse;\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218740,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub solution {\n    my ($str) = @_;\n    my $res = '';\n    for my $char (split '', $str){\n        $res = $char . $res;\n    }\n    $res;\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"523b623152af8a30c6000027":[{"id":218741,"user_id":null,"body":"use strict;\npackage Solution;\n\nsub square{\n    my $x =shift;\n    return $x*$x; #Your code\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-06 16:40:03"},{"id":218742,"user_id":null,"body":"use strict;\npackage Solution;\n\nsub square {\n    return $_[0] ** 2;\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-06 16:40:03"},{"id":218743,"user_id":null,"body":"use strict;\npackage Solution;\n\nsub square{\n    $a = shift;\n    return $a*$a;\n}\n\n5;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-06 16:40:03"},{"id":218744,"user_id":404,"body":"package Solution;\n\nsub square{\n    (shift) ** 2;\n}\n'_';","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-06 16:40:03"},{"id":218745,"user_id":null,"body":"use strict;\n\npackage Solution;\n\nsub square{\n    my ($num) = @_;\n    return $num * $num;\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-06 16:40:03"},{"id":218746,"user_id":null,"body":"use strict;\npackage Solution;\n\nsub square {\n    my $n = shift;\n    return $n * $n;\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-06 16:40:03"},{"id":218747,"user_id":50,"body":"use strict;\npackage Solution;\n\nsub square {\n    my ($n) = @_;\n    return $n*$n;\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-06 16:40:03"},{"id":218748,"user_id":null,"body":"use strict;\npackage Solution;\n\nsub square {\n    @_[0] ** 2;\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-06 16:40:03"},{"id":218749,"user_id":null,"body":"use strict;\npackage Solution;\n\nsub square{\n    return @_[0]**2;\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-06 16:40:03"},{"id":218750,"user_id":null,"body":"use strict;\npackage Solution;\n\nsub square{    \n    return @_[0]*@_[0];\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-06 16:40:03"}],"5265326f5fda8eb1160004c8":[{"id":218751,"user_id":null,"body":"package Kata;\n\nsub number_to_string {\"@_\"}\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218752,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub number_to_string {\n    return \"\".$_[0];\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218753,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub number_to_string {\n    my ($num) = @_;\n    \"$num\";\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218754,"user_id":404,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub number_to_string {\n    #...\n    \"\" . $_[0];\n}\n\n'ABS';","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218755,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub number_to_string {\n    my ($num) = @_;\n    return \"$num\";\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218756,"user_id":53,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub number_to_string {\n    my $n = shift;\n    \"$n\"\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218757,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub number_to_string {\n    my ($num) = @_;\n    # Your code here\n    return \"$num\";\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218758,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub number_to_string {\n    my ($num) = @_;\n    my $answer;\n    $answer = sprintf(\"%s\", $num);\n    return $answer;\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218759,"user_id":168,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub number_to_string {\n    my ($num) = @_;\n    \"\" . $num\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218760,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub number_to_string {\n    \"$_[0]\";\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"52f5424d0531259cfc000d04":[{"id":218761,"user_id":null,"body":"package Solution;\n\nsub sort_by_bit {\n  $b = 0;\n  $b |= 1 << $_ for @_;\n  $b\n}\n\n1","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218762,"user_id":null,"body":"use strict;\npackage Solution;\nsub sort_by_bit{\n    my (@list) =@_;\n    my $sum = 0;\n    foreach my $i (@list){\n        $sum += 2**$i;\n    }\n    return $sum;\n}\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218763,"user_id":null,"body":"use strict;\npackage Solution;\nuse List::Util qw(reduce);\nsub sort_by_bit{\n    reduce(sub {$a | $b}, map {1 << $_} @_) || 0\n}1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218764,"user_id":null,"body":"use strict;\npackage Solution;\nsub sort_by_bit{\n    my $summ = 0;\n    foreach (@_) {  \n      $summ = $summ + 2 ** $_;\n    }\n    return $summ;\n}1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218765,"user_id":null,"body":"use strict;\npackage Solution;\nsub sort_by_bit{\n    my $summ = 0;\n    foreach (@_) {  \n      for (my $i=0; $i<=32; $i++) {\n         if ($_ == $i) {\n           $summ = $summ + 2 ** $i;\n        }\n      }\n    }\n    return $summ;\n}1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218766,"user_id":null,"body":"use strict;\npackage Solution;\nsub sort_by_bit{\n    my $num = '0' x 32;\n    for(@_){\n        my $c = 31 - $_;\n        $num =~ s\/(.{$c}).(.*$)\/${1}1${2}\/;\n    }\n    oct('0b'.$num);\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218767,"user_id":null,"body":"use strict;\n\npackage Solution;\n\nsub sort_by_bit{\n    my @vectorMap = (0) x 32;\n    @vectorMap[ @_ ] = (1) x scalar( @_ );\n    return oct( '0b' . reverse( @vectorMap ) );\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218768,"user_id":null,"body":"use strict;\nuse experimental 'smartmatch';\npackage Solution;\n\nprint \"Hello\";\nsub sort_by_bit {\n    \n    my @array;\n\n    for (0..31) {\n\n        if ($_ ~~ @_ ) {\n            push @array, 1;\n        } else {\n            push @array, 0;\n        }\n\n         \n    }\n\n    my @array = reverse @array;\n    \n    my $int;\n\n    for (@array) {\n        $int = $int . $_;\n    }\n    #print $int;\n    return unpack(\"N\", pack(\"B32\", substr(\"0\" x 32 . $int, -32)));\n\n};\n\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218769,"user_id":null,"body":"use strict;\npackage Solution;\n\nsub sort_by_bit{\n    my @positions = @_;\n    my @raw_binary;\n\n    for my $i (0..31) {\n        $raw_binary[$i] = 0;\n    }\n\n    for my $p (@positions) {\n        $raw_binary[$p] = 1;\n    }\n\n\tmy @sorted_binary = reverse(@raw_binary);\n\tmy $binary_string = join('', @sorted_binary);\n\n\tmy $decimal = oct(\"0b\".$binary_string);\n\n\treturn $decimal;\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218770,"user_id":null,"body":"use strict;\npackage Solution;\nsub sort_by_bit{\n    #Your code\n    my $a=0;\n    foreach(@_)\n    {\n        $a = $a | (1<<$_);\n    }\n    return $a;\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"52fba66badcd10859f00097e":[{"id":218771,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(disemvowel);\n\nsub disemvowel {\n    ($_ = pop) =~ s\/[aeiou]\/\/gi; $_\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218772,"user_id":null,"body":"package Kata;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(disemvowel);\n\nsub disemvowel {\n    $_ = pop;\n    s\/[aeiou]\/\/gi;\n    $_\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218773,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(disemvowel);\n\nsub disemvowel {\n    ($_ = \"@_\") =~ s\/[aeiou]\/\/gi;\n    $_\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218774,"user_id":null,"body":"package Kata;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(disemvowel);\n\nsub disemvowel {\n    ($_ = pop) =~ s\/[aeiou]\/\/gi;\n    $_\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218775,"user_id":null,"body":"package Kata;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(disemvowel);\n\nsub disemvowel {\n    ($_) = @_;\n    s\/[aeiou]\/\/gi;\n    $_\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218776,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(disemvowel);\n\nsub disemvowel {\n    my ($str) = @_;\n    $str =~ s\/[aeiou]\/\/gi;\n    $str;\n}\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218777,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(disemvowel);\n\nsub disemvowel {\n    (my $str =  $_[0]) =~ s\/[aeiou]\/\/gi;\n    $str;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218778,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(disemvowel);\n\nsub disemvowel {\n    my $res = '';\n    foreach (split '', $_[0]){\n        if (\/[^aeiouAEIOU]\/){\n            $res .= $_;\n        }\n    }\n    $res;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218779,"user_id":404,"body":"package Kata;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(disemvowel);\n\nsub disemvowel {\n    my ($str) = @_;\n    $str =~ s\/[aeiou]\/\/ig;\n    $str;\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218780,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(disemvowel);\n\nsub disemvowel {\n    my ($str) = @_;\n    $str =~ s\/[aeiouAEIOU]\/\/g;\n    return $str;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"53369039d7ab3ac506000467":[{"id":218781,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub bool_to_word {\n    ($_) = @_;\n    $_ ? 'Yes' : 'No'\n}\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218782,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub bool_to_word {\n    return \"Yes\" if !!$_[0] || return \"No\"\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218783,"user_id":null,"body":"package Kata;\n\nsub bool_to_word { shift && \"Yes\" || \"No\" }\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218784,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub bool_to_word { (\"@_\") ? 'Yes' : 'No' }\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218785,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub bool_to_word {\n    my ($bool) = @_;\n    if ($bool){\n    return 'Yes'\n    }else{\n    return 'No'\n    }\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218786,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub bool_to_word {\n    my ($bool) = @_;\n    $bool ? \"Yes\" : \"No\";\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218787,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub bool_to_word {\n    ($_[0]) ? \"Yes\" : \"No\";\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218788,"user_id":404,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub bool_to_word {\n    $_[0] ? \"Yes\" : \"No\";\n}\n\n'ABS'; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218789,"user_id":null,"body":"package Kata;\nuse 5.16.0;\nuse strict;\nuse warnings;\nuse experimental qw(signatures);\n\nsub bool_to_word ($bool) {\n    qw(Yes No)[!$bool];\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218790,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\nuse constant { true => 1, false => 0 };\n\nsub bool_to_word {\n    my ($bool) = @_;\n    # your code here\n    return ($bool) ? \"Yes\" : \"No\";\n    }\n\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"53da3dbb4a5168369a0000fe":[{"id":218791,"user_id":404,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub even_or_odd {\n    $_[0] % 2 ? \"Odd\" : \"Even\";\n}\n\n'ABS'; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218792,"user_id":53,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub even_or_odd {\n    my $n = shift;\n    $n % 2 == 0 ? \"Even\" : \"Odd\";\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218793,"user_id":null,"body":"package Kata;\n\nsub even_or_odd { \"@_\" % 2 ? 'Odd' : 'Even' }\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218794,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub even_or_odd {\n    ($_) = @_;\n    return 'Odd' if $_ % 2;\n    'Even'\n}\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218795,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub even_or_odd {\n    \"@_\" % 2 ? 'Odd' : 'Even'\n}\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218796,"user_id":null,"body":"package Kata;\n\nsub even_or_odd {\n    ($_) = @_;\n    \/[02468]$\/ ? 'Even' : 'Odd'\n}\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218797,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub even_or_odd {\n    my ($number) = @_;\n    return 'Even' unless $number % 2;\n    'Odd'\n}\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218798,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub even_or_odd {\n    my ($number) = @_;\n    # your code here\n    if ($number%2 == 0){\n        return \"Even\";\n    }else {\n        return \"Odd\";\n    }\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218799,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub even_or_odd {\n    my ($number) = @_;\n    ($number % 2) ? return \"Odd\" : return \"Even\";\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218800,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub even_or_odd {\n    my ($number) = @_;\n    # your code here\n    return $number % 2 == 0 ? \"Even\" : \"Odd\";\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5412509bd436bd33920011bc":[{"id":218801,"user_id":404,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub maskify {\n    my ($str) = @_;\n    $str =~ s\/.(?=.{4})\/#\/g;\n    $str;\n}\n\n'ABS'; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218802,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub maskify {\n    my ($str) = @_;\n    my $rev = reverse($str);\n    my ($res) = '';\n    for (my $i = 0; $i <= length($str) - 1; $i++)\n    {\n      if($i <= 3)\n      {\n        # this is how you'd index a string with perl\n        $res .= substr($rev, $i, 1);\n      }\n      else\n      {\n        $res .= \"#\";\n      }\n      \n    }\n    \n    return reverse($res);\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218803,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub maskify {\n    my ($str) = @_;\n    return \"#\" x length(substr($str, 0, -4)).substr($str, -4);\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218804,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub maskify {\n    my $str = shift;\n    my $i = 0;\n    my $output = \"\";\n    for ($i = 0; $i < length($str); $i++)\n    {\n      if ($i < length($str) - 4) {\n        $output.= \"\\#\";\n      } else {\n        $output.= substr($str, $i, 1);\n      }\n    }\n    return $output;\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218805,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub maskify {\n    my ($str) = @_;\n    $str =~ s\/.(?=.{4})\/#\/g;\n    return $str;\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218806,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub trans{\n  my $s= shift;\n  $s =~ s\/.\/#\/g;\n  return $s;\n}\n\nsub maskify {\n    my ($str) = @_;\n    $str =~ s\/(\\w*)(\\w{4})\/trans($1).$2\/e;\n    #print \"$str\n\";\n    return $str;\n\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218807,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub maskify {\n    my $s = shift;\n    return $s if ( length($s) <= 4);\n    my @s = split \/\/, $s;\n    return join(q[], (map{ \"#\" } @s[0 .. $#s-4]), @s[-4..-1]);\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218808,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub maskify {\n    my ($str) = @_;\n    my $block = join '', map +\"#\", 1..length($str)-4;\n    substr($str, 0, -4, $block);\n    return $str;\n\n    \n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218809,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub maskify {\n    my ($str) = @_;\n    if ( $str =~ \/(.+)([0-9a-zA-Z]{4}$)\/ ) {\n        return join('',map {'#'} split('',$1)) . $2;        \n    }\n    return $str;\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218810,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub maskify {\n    my ($str) = @_;\n    my $size = length $str;\n    my $res = \"\";\n    if($size>4)\n    {\n     foreach(1..$size-4){\n            $res = $res . \"#\"\n        }\n    }\n    else{\n    return $str;\n    }\n    return $res . substr($str, $size-4, 4);\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"54d512e62a5e54c96200019e":[{"id":218811,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(prime_factors);\n\nsub prime_factors {\n    my ($m, $i, @fs) = (@_, 2, ());\n    my $n = $m;\n    use integer;\n    while ($i <= $n) {\n        my $cnt = 0;\n        while ($n % $i == 0) {\n            $cnt++;\n            $n \/= $i;\n        }\n        if ($cnt > 1) {\n            push(@fs, sprintf(\"(%d**%d)\", $i, $cnt));\n        } elsif ($cnt == 1) {\n            push(@fs, sprintf(\"(%d)\", $i));\n        }\n        $i++;\n    }\n    return join('', @fs);\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218812,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(prime_factors);\n\nsub prime_factors {\n    my $n = shift;\n    use integer;\n    my ($res, $divs, $reste, $nxt) = ('', 2, $n, 3);\n    while ($reste != 1) {\n        my $cnt = 0;\n        while ($reste % $divs == 0) {\n            ++$cnt;\n            $reste = $reste \/ $divs;\n        }\n        if ($cnt != 0) {\n            if ($cnt > 1) {\n                $res .= '(' . $divs . '**' . $cnt . ')';\n            } else {\n                $res .= '(' . $divs . ')';\n            }\n        }\n        $divs = $nxt;\n        $nxt += 2;\n    }\n    $res;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218813,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(prime_factors);\n\nsub prime_factors {\n    my $n = shift;\n    my %f;\n    my $d = 2;\n    while ($n > 1) {\n        while ($n % $d == 0) {\n            $f{$d}++;\n            $n \/= $d;\n        }\n        $d++;\n    }\n    join \"\", map {sprintf \"($_%s)\", $f{$_} > 1 ? \"**$f{$_}\" : \"\"} sort {$a <=> $b} keys %f;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218814,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(prime_factors);\n\nsub prime_factors {\n    my $n = $_[0] * 2;\n    my %f = (2 => -1);\n    my $s = '';\n    ($f{2}, $n) = ($f{2} + 1, $n \/ 2) while ($n % 2 == 0);\n    for (my $i = 3; $i <= sqrt $n; $i += 2) {\n        $f{$i} = 0;\n        ($f{$i}, $n) = ($f{$i} + 1, $n \/ $i) while ($n % $i == 0);    \n    }\n    foreach my $k (sort {$a <=> $b} keys %f) {\n        my $v = $f{$k};\n        $s .= \"($k)\" if ($v == 1);\n        $s .= \"($k**$v)\" if ($v > 1);\n    }\n    $n == 1 ? $s : $s.\"($n)\";\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218815,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(prime_factors);\n\nsub prime_factors {\n    my ($n, %counts) = (@_, ());\n    while ($n%2 == 0) {\n        $counts{2}++;\n        $n \/= 2;\n    }\n    for (3..int($n**0.5)) {\n        while ($n%$_ == 0) {\n            $counts{$_}++;\n            $n \/= $_;\n        }\n    }\n    $counts{$n}++ if ($n > 2);    \n    join \"\", map {$counts{$_} > 1 ? \"($_**$counts{$_})\" : \"($_)\"} (sort {$a <=> $b} keys %counts);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218816,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(prime_factors);\n\nsub prime_factors {\n    my ($n, $ret, %counts) = ($_[0], \"\", ());\n    while ($n%2 == 0) {\n        $counts{2}++;\n        $n \/= 2;\n    }\n    for (3..int($n**0.5)) {\n        while ($n%$_ == 0) {\n            $counts{$_}++;\n            $n \/= $_;\n        }\n    }\n    $counts{$n}++ if ($n > 2);    \n    join \"\", map {$counts{$_} > 1 ? \"($_**$counts{$_})\" : \"($_)\"} (sort {$a <=>$b} keys %counts);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"54d7660d2daf68c619000d95":[{"id":218817,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(convert_frac);\n\nsub convert_frac {\n    my @f = @{$_[0]};\n    my @d = map {\n        my %r;\n        my ($n, $d,  $i) = (@$_, 2);\n        my $k = $d;\n        while ($k > 1) {\n            $k = $d \/ $i;\n            if (int $k == $k) {\n                if (int $n\/$i == $n\/$i) {\n                    $n \/= $i;\n                } else {\n                    $r{$i}++;                \n                }\n                $d \/= $i;\n            } else {\n                $i++;\n            }\n        }        \n        \\%r;\n    } @f;\n    \n    my %k = map %$_, @d;    \n    my $d = 1;\n    \n    for my $k (keys %k) {\n        my @m = sort { $a <=> $b } map { $$_{$k} } grep $$_{$k}, @d;\n        $d *= $k ** $m[-1];\n    };\n    \n    [map [$$_[0] * $d \/ $$_[1], $d], @f];\n}\n\n1;\n","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218818,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(convert_frac);\n\n# input: array_ref of array_refs; return: array_ref of integers\nsub convert_frac {\n    my ($aref) = @_;\n    my $lcmval = 1;\n    for (@$aref) {$lcmval = lcm($lcmval, $_->[1])}\n    my $gcdval = $lcmval;\n    for (@$aref) {$gcdval = gcd($gcdval, $_->[0]*$lcmval\/$_->[1])}\n    [map {[($_->[0]*$lcmval)\/($_->[1]*$gcdval), $lcmval\/$gcdval]} @$aref];\n}\n\nsub gcd{\n    my ($a, $b) = @_;\n    $b > 0 ? gcd($b, $a%$b) : $a;\n}\n\nsub lcm {\n    my ($a, $b) = @_;\n    $b * ($a \/ gcd($a, $b));\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218819,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(convert_frac);\n\n# input: array of array_refs; return: array_ref of integers\nsub convert_frac {\n    my @ls = @_;\n    my @xss = ();\n    foreach my $xs (@ls) {\n        foreach my $ys (@$xs) {\n            push @xss, reduce(@$ys[0], @$ys[1]);\n        }\n    }\n    my $cd = 1;\n    foreach my $xs (@xss) {\n        $cd = lcm(@$xs[1], $cd);\n    }\n    my @yss = ();\n    foreach my $xs (@xss) {\n        push @yss, norm(@$xs[0], @$xs[1], $cd);\n    }\n    return \\@yss;\n}\n\nsub gcd {\n    my ($a, $b) = @_;\n    return $b == 0 ? abs($a) : gcd($b, $a % $b);\n}\n\nsub lcm {\n    my ($a, $b) = @_;\n    return abs($a * $b) \/ gcd($a, $b);\n}\n\nsub reduce {\n    my ($a, $b) = @_;\n    my $i = gcd($a, $b);\n    my @ls = (int($a \/ $i), int($b \/ $i));\n    return \\@ls;\n}\n\nsub norm {\n    my ($a, $b, $cd) = @_;\n    my @ls = (int(($a * $cd) \/ $b), $cd);\n    return \\@ls;\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218820,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(convert_frac);\n\nsub gcdi {\n    my ($x, $y) = @_;\n    while ($x) { ($x, $y) = ($y % $x, $x) }\n    $y\n}\nsub lcmi {\n    my ($x, $y) = @_;\n    ($x && $y) and $x \/ gcdi($x, $y) * $y or 0\n}\nsub simplify {\n    my @arr = @_;\n    my $i = 0;\n    my @l = ();\n    while ($i < @arr) {\n        my $g = gcdi($arr[$i]->[0], $arr[$i]->[1]);\n        $l[$i] = [$arr[$i]->[0] \/ $g, $arr[$i]->[1] \/ $g];\n        $i++;\n    }\n    @l;\n}\nsub com_denom {\n    my @l = @_;\n    my $result = $l[0]->[1]; my $i = 0;\n    while ($i < @l) {\n        $result = lcmi($result, $l[$i][1]);\n        $i++;\n    }\n    $result;\n}\n\n# input: array of array_refs; return: array_ref of integers\nsub convert_frac {\n    my ($arr, @res) = (shift, ());\n    #print array2D_to_string(@$arr), \"\n\";\n    my @l = simplify(@$arr);\n    #print array2D_to_string(@l), \"\n\";\n    my $comden = com_denom(@l);\n    #print \"$comden\n\";\n    use integer;\n    for (my $i = 0; $i < @l; ++$i) {\n        my $r = ($comden \/ $l[$i][1]) * $l[$i][0];\n        $res[$i][0] = $r;\n        $res[$i][1] = $comden;\n    }\n    \\@res;\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"54db15b003e88a6a480000b9":[{"id":218821,"user_id":2582,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(from_nb_2_str);\n\n\nuse List::Util;  # for the product() function\n\n\n# Finds the GCD of two numbers.\n# Example:  gcd(6, 12) == 6\nsub gcd\n{\n    my ($n1, $n2) = @_;\n\n    # Handle base cases:\n    return $n1  if $n2 == 0;\n    return $n2  if $n1 == 0;\n    # Or in one line:  return $n1 + $n2  if $n1 * $n2 == 0;\n\n    # Recursive call:\n    return gcd($n2 % $n1, $n1)\n}\n\n\n# Returns true (1) if two numbers are co-prime;\n# returns false (0) otherwise.\n# Examples:\n#    areCoprime(2, 5) == true\n#    areCoprime(12, 6) == false\nsub areCoprime\n{\n    my ($n1, $n2) = @_;\n    return gcd($n1, $n2) == 1 ? 1 : 0\n}\n\n\n# Returns true (1) if all numbers are co-prime;\n# returns false (0) otherwise.\n# Examples:\n#    areCoprime(2, 5, 21) == true\n#    areCoprime(2, 5, 14) == false\nsub areAllCoprime\n{\n    # Base case:\n    return 1  if @_ <= 1;\n\n    my ($n, @rest) = @_;\n    areCoprime($n, $_) or return 0  foreach @rest;\n\n    return areAllCoprime(@rest)\n}\n\n\n# input: integer, array_ref of integers; output: string\nsub from_nb_2_str\n{\n    my ($n, $systemRef) = @_;\n    my @system = @$systemRef;\n\n    # Check for not applicable cases:\n    return 'Not applicable'  if List::Util::product(@system) < $n;\n    return 'Not applicable'  unless areAllCoprime(@system);\n\n    # Find the @results:\n    my @results = map { $n % $_ } @system;\n\n    # Format the @results to return the wanted string:\n    return '-' . join('--', @results) . '-'\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218822,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(from_nb_2_str);\n\n# input: integer, array_ref of integers; output: string\nsub from_nb_2_str {\n    use integer;\n    my ($n, $sys, $prd, $lcm, $res) = (@_, 1, 1, \"\");\n    foreach my $e (@$sys) {\n        $prd *= $e;\n        $lcm = ($lcm * $e) \/ gcd($lcm, $e);\n        my $s = $n % $e;\n        $res .= \"-$s-\";\n    }\n    if ($prd < $n || $lcm != $prd) {\n        return \"Not applicable\";\n    }\n    return $res;\n}\n\n# input: integer, integer; output: integer\nsub gcd {\n    my ($a, $b) = @_;\n    return $b == 0 ? $a : gcd($b, $a % $b);\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218823,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util qw(reduce);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(from_nb_2_str);\n\nsub gcd {\n    my ($n, $m) = @_;\n    return $m ? gcd($m, $n % $m) : $n;\n}\n\n# input: integer, array_ref of integers; output: string\nsub from_nb_2_str {\n    my ($n, $v) = @_;\n    for my $i (0..$#$v) {\n        for my $j ($i+1..$#$v) {\n            return \"Not applicable\" if gcd(@$v[$i], @$v[$j]) != 1;\n        }\n    }\n    return \"Not applicable\" if $n >= reduce {$a * $b} @$v;\n    join \"\", map {\"-\" . $n % $_ . \"-\"} @$v;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218824,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util 'reduce';\nuse Exporter qw(import);\nour @EXPORT_OK = qw(from_nb_2_str);\n\n# input: integer, array_ref of integers; output: string\nsub from_nb_2_str {\n    my ($n, $sys) = @_;\n    my @arr = @$sys;\n    return \"Not applicable\" if ((reduce {$a*$b} @arr) <= $n);\n    for my $i (0..$#arr) {\n        for my $j ($i+1..$#arr) {\n            return \"Not applicable\" if (gcd($arr[$i], $arr[$j]) != 1);\n        }\n    }\n    sprintf(\"-%s-\", join(\"--\", map {$n%$_} @arr));\n}\n\nsub gcd {\n    my ($x, $y) = @_;\n    ($y == 0) ? $x : gcd($y, $x%$y);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218825,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse warnings;\nuse List::Util qw(product);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(from_nb_2_str);\n\n# input: integer, array_ref of integers; output: string\nsub from_nb_2_str {\n    local *gcdi = sub {\n        my ($x, $y) = @_;\n        while ($x) { ($x, $y) = ($y % $x, $x) }\n        $y;\n    };\n    my ($n, $sys, $result) = (@_, '');\n    my $prod = product @$sys;\n    if ($prod <= $n) { return 'Not applicable'; }\n    for (my $i = 0; $i < @$sys; ++$i) {\n        for (my $j = $i + 1; $j < @$sys; ++$j) {\n            if (gcdi($sys->[$i], $sys->[$j]) > 1) {return 'Not applicable'; }\n        }\n    }\n    for (my $i = 0; $i < @$sys; ++$i) {\n        $result .= sprintf(\"-%d-\", $n % $sys->[$i]);\n    }\n    $result;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"54dc6f5a224c26032800005c":[{"id":218826,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(stock_list);\n\n# input: two array_ref; ouput: string\nsub stock_list {\n    my ($lst_of_art, $lst_of_1st_letter) = @_;\n    if (@$lst_of_art == 0) { return ''; }\n    my $result = '';\n    for my $m (@$lst_of_1st_letter) {\n        my $tot = 0;\n        for my $l (@$lst_of_art) {\n            if (substr($l, 0, 1) eq substr($m, 0, 1)) {\n                my @arr = split \/ \/, $l;\n                $tot += $arr[1];\n            }\n        }\n        if ($result ne '') { $result .= ' - '; }\n        $result .= '(' . $m . ' : ' . $tot . ')';\n    }\n    $result;\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218827,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(stock_list);\n\n# input: two array_ref; ouput: string\nsub stock_list {\n    my ($listOfArt, $listOfCat) = @_;\n    return \"\" unless (@$listOfArt and @$listOfCat);\n    my %dict = map {$_ => 0} @$listOfCat;\n    for (@$listOfArt) {\/(\\S)\\S+ (\\d+)\/; $dict{$1} += $2;}\n    join \" - \", map {\"($_ : $dict{$_})\"} @$listOfCat;\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218828,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(stock_list);\n\n# input: two array_ref; ouput: string\nsub stock_list {\n    my ($L, $M) = @_;\n    return \"\" if(@$L == 0 || @$M == 0);\n    my $size_M = @$M;\n    my @nums=(0)x$size_M;\n    foreach my $stock (@$L) {\n        my $charr = substr($stock,0,1);\n        foreach my $i (0..$size_M-1) {\n            if($charr eq @$M[$i]){\n                my @val = split(\/ \/, $stock);\n                $nums[$i] = $nums[$i] + int($val[1]);\n            }\n        }\n    }\n    my $retstr = \"\";\n    foreach my $i (0..$size_M-1) {\n        $retstr = $retstr.\"(@$M[$i] : $nums[$i])\";\n        if($i != $size_M-1){\n         $retstr = $retstr.\" - \";\n        }\n    }\n    return $retstr;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218829,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(stock_list);\n\n# input: two array_ref; ouput: string\n# example:\n#     my $lst_of_art        = ['BBAR 150', 'CDXE 515', 'BKWR 250', 'BTSQ 890', 'DRTY 600'];\n#     my $lst_of_1st_letter = ['A', 'B', 'C', 'D'];\n#     my $ans               = stock_list($lst_of_art, $lst_of_1st_letter);\n#     ## ans == '(A : 0) - (B : 1290) - (C : 515) - (D : 600)'\n# \nsub stock_list {\n    my $stock_list    = shift;\n    my $category_list = shift;\n\n    return '' unless @$stock_list;\n    return '' unless @$category_list;\n\n    my ($str, $stock_count, $pattern, @results, );\n\n    $stock_count = count_art( $stock_list );\n    $pattern     = '(%s : %d)';\n\n    for my $cat ( $category_list->@* ) {\n        push @results, sprintf($pattern, $cat, $stock_count->{$cat} || 0 );\n    }\n    $str = join(' - ', @results);\n    return $str;\n}\n\n# input: array_ref of book code + book quantity pairs\n# output: hash_ref of book category and counts \nsub count_art {\n    my $stock_list = shift;\n    my (%art, @elem, );\n\n    for ( @{ $stock_list } ) {\n        @elem      =  split \/ \/, $_;\n        $elem[0]   =~ m\/^(.)\/;\n        $art{ $1 } += $elem[1];\n    }\n    return \\%art; # count of books by category, i.e., first letter of book identifier\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218830,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(stock_list);\n\n# input: two array_ref; ouput: string\nsub stock_list {\n    my ( $codes_ref, $cats_ref ) = @_;\n    my @codes = @$codes_ref;\n    my @cats = @$cats_ref;\n    return '' if ( !@codes || !@cats );\n    \n    my @quantity_by_cat = @$cats_ref;\n\n    for my $i ( ( 0 .. $#cats ) ) {\n        my $cat = $cats[$i];\n        if ( length $quantity_by_cat[$i] == 1 ) {\n            $quantity_by_cat[$i] = \"($cat : 0)\";\n        }\n\n        for my $code (@codes) {\n            next unless ( substr( $code, 0, 1 ) eq $cat );\n            my ($new_quantity)     = $code =~ \/^\\w+\\s(\\d+)$\/;\n            my ($current_quantity) = $quantity_by_cat[$i] =~ \/^.{5}(\\d+)\/;\n            $quantity_by_cat[$i] =\n              \"($cat : @{[$new_quantity + $current_quantity]})\";\n        }\n\n    }\n\n    return join ' - ', @quantity_by_cat;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218831,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse Data::Dumper;\nour @EXPORT_OK = qw(stock_list);\n\n# input: two array_ref; ouput: string\nsub stock_list {\n    my ($stockings, $cats) = @_;\n    my $result = '';\n    my %quantity;\n    for my $s ( @$stockings ) {\n       my ( $cat, $num ) = split '\\s+', $s;\n       $quantity{ substr($cat, 0, 1) } += $num;\n    }\n    return $result unless keys %quantity;\n\n    $result = join(\n        ' - ',\n        map { \"($_ : \" . ( $quantity{$_} \/\/ 0 ) . \")\" } @$cats\n    );\n    return $result;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218832,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(stock_list);\n\nsub stock_list {\n    my ($books, $categories) = @_;\n    \n    return '' unless @$books;  # return nothing if no books given.\n\n    my %totals;\n    for my $book (@$books) {\n        my ($code, $qty) = split(\/\\s+\/, $book);\n        $totals{substr($code, 0, 1)} += $qty;\n    }\n\n    my @results;\n    for my $category (@$categories) {\n        my $qty = $totals{$category} || 0;\n        push(@results, \"($category : $qty)\");\n    }\n    return join(' - ', @results);\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218833,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(stock_list);\n\n# input: two array_ref; ouput: string\nsub stock_list {\n    my $L = $_[0];\n    my $M = $_[1];\n    if (0+@{$L} == 0 || 0+@{$M} == 0) {\n      return \"\";\n    }\n    my $str = \"\";\n    my $a;\n    foreach $a (@$M) {\n        my $count = 0;\n        my $b;\n        foreach $b (@$L) {\n            $b =~ \/(\\w)\\w+ (\\d+)\/;\n            if ($1 eq $a) {\n                $count += $2;\n            }\n        }\n        $str = \"$str($a : $count) - \";\n    }\n    $str =~ \/(.*\\)) - |\/;\n    return $1;\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218834,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(stock_list);\n\n# input: two array_ref; ouput: string\nsub stock_list {\n    my ($articles, $categories) = @_;\n    \n    return '' if (scalar @$articles == 0 or scalar @$categories == 0);\n    \n    my %stock = map { $_ => 0 } @$categories;\n    \n    foreach my $article (@$articles) {\n        my ($code, $amount) = split \/\\s\/x, $article;\n        my $key = substr($code, 0, 1);\n        if (exists($stock{$key})) {\n            $stock{$key} += $amount;\n        }\n    }\n    \n    my @result;\n    foreach my $key (@$categories) {\n        push @result, (\"(${key} : $stock{$key})\")\n    }\n    \n    return join(' - ', @result);\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218835,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(stock_list);\n\n# input: two array_ref; ouput: string\nsub stock_list {\n    my ($stock, $request) = @_;\n    return \"\" if (!@$stock || !@$request);\n    my %tally;\n    for (@$stock) {\n        my ($category, $quantity) = $_ =~ \/^([A-Z])[A-Z]* (\\d+)$\/g;\n        $tally{$category} += $quantity;\n    }\n    join \" - \", map { sprintf \"(%s : %d)\", $_, $tally{$_} || 0 } @$request;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"54de3257f565801d96001200":[{"id":218836,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(balance_statement);\n\nsub balance_statement {\n    my @s = ();\n    my $b = {};\n    foreach my $o (split(',',shift)) {\n        my @d = split(' ', $o);\n        if ($d[1] =~ \/^\\d+$\/ && $d[2] =~ \/^\\d+\\.\\d+$\/ && $d[3] =~ \/^B|S$\/) {\n            $b -> {$d[3]} += $d[1] * $d[2];\n        }\n        else {\n            push @s, \"$o ;\";\n        }\n    }\n    \n    'Buy: '.sprintf('%.0f',$b->{B}).' Sell: '.sprintf('%.0f',$b->{S}).(@s ? '; Badly formed '.@s.': '.join('',@s) : '');\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218837,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(balance_statement);\n\nsub balance_statement {\n    my @orders = split \/, ?\/, shift;\n    my (%h, @l) = (\"B\" => 0, \"S\" => 0);\n    for (@orders) {\n        if (\/[A-Z]+ (\\d+) (\\d+\\.\\d+) (B|S)\/) { $h{$3} += $2 * $1; }\n        else { push @l, \"$_ ;\"; }\n    }\n    my $s = sprintf \"Buy: %.0f Sell: %.0f\", $h{\"B\"}, $h{\"S\"};\n    $s .= sprintf \"; Badly formed %d: %s\", scalar(@l), join \"\", @l if @l;\n    return $s;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218838,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(balance_statement);\n\nsub balance_statement {\n    my ($in) = @_;\n    return \"Buy: 0 Sell: 0\" unless ($in);\n    my ($buy, $sell, @bad_orders) = (0, 0, ());\n    for my $order (map {\/[^,]+\/g} $in) {\n        if ($order !~ \/\\S+\\s+\\d+\\s+(\\d*\\.\\d+)\\s+(B|S)\/) {\n            push(@bad_orders, $order);\n            next;\n        }\n        my @a = map {\/\\S+\/g} $order;\n        my $val = $a[1] * $a[2];\n        if ($a[3] eq \"B\") {$buy += $val} else {$sell += $val}\n    }\n    my $ret = sprintf(\"Buy: %.0f Sell: %.0f\", $buy, $sell);\n    if (@bad_orders) {\n        $ret .= sprintf(\"; Badly formed %d: \", scalar @bad_orders);\n        for (@bad_orders) {$ret .= \"$_ ;\"};\n    }\n    $ret;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218839,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(balance_statement);\n\nsub balance_statement {\n    my $st = shift;\n    my ($order, $buy, $sell, $badcnt, $badstr, $qty, $price) = ('', 0, 0, 0, '', 0, 0);\n    foreach my $str (split \/,\/, $st) {\n        my @arr = $str =~\/^(\\S+) (\\d+) (\\d*\\.\\d+) ([BS])$\/;\n        if (@arr != 0) {\n            $order = $arr[0];\n            $qty = $arr[1];\n            $price = $arr[2];\n            if ($arr[3] eq 'B') {\n                $buy += $qty * $price;\n            } else {\n                $sell += $qty * $price;\n            }\n        } else {\n            $badcnt++; \n            $badstr .= sprintf(\"%s ;\", $str);\n        }\n    }\n    if ($badcnt > 0) {\n        sprintf(\"Buy: %.0f Sell: %0.f; Badly formed %d: %s\", $buy, $sell, $badcnt, $badstr);\n    } else {\n        sprintf(\"Buy: %.0f Sell: %0.f\", $buy, $sell);\n    }\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"54e320dcebe1e583250008fd":[{"id":218840,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dec_2_fact_string fact_string_2_dec);\n\nuse Math::BigInt;\n\n\nsub dec_2_fact_string {\n    my ($i, @res) = (1, ());\n    my $d = Math::BigInt->new(shift);\n    while ($d > 0) {\n        if ($d == $i) {\n            push @res, $d;\n            last;\n        }\n        push @res, $d % $i;\n        $d = int($d \/ $i);\n        $i++;\n    }\n    join('', map { $_ < 10 ? $_ : chr(55+$_) } reverse @res);\n}\nsub fact_string_2_dec {\n    my ($i, $j, $res) = (1,1,0);\n    foreach (reverse split('', shift)) {\n        $res += $i * (ord($_) < 65 ? $_ : ord($_)-55);\n        $i *= $j++;\n    }\n    return $res;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-06 21:23:11"},{"id":218841,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse bigint;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dec_2_fact_string fact_string_2_dec);\n\nsub dec_2_fact_string {\n    my  ($d,$r,$i) = ($_[0],'',1);                                  \n    while ($d > 0) {                    \n        $r.= sprintf \"%X\", ($d % $i);                               \n        if ($d == $i && $d <= 0xf) { $r =~ s{.$}{sprintf \"%X\", $d}ex; last; }\n        $d = int($d \/ $i++);  \n    }   \n    return reverse $r                 \n}\n\nsub fact_string_2_dec {\n    my  @s = split \/\/, $_[0];                   \n    my  $d = hex($s[0]);\n    for ( reverse( 1..$#s)) {                   \n        $d = $d*$_ + hex($s[$#s-$_+1]);         \n    }   $d\n}\n","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-06 21:23:09"},{"id":218842,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dec_2_fact_string fact_string_2_dec);\n\nsub dec_2_fact_string {\n    my ($nb) = @_;\n    my ($f, $n, $ret) = (1, 2, \"\");\n    my @digits = map {\/.\/g} \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    while ($f < $nb) {\n         if ($n*$f < $nb) {\n             $f *= $n;\n             $n++;\n         } else {\n             $n--;\n             last;\n         }\n    }\n    while ($n > 0) {\n        $ret .= $digits[int($nb\/$f)];\n        $nb %= $f;\n        $f \/= $n;\n        $n--;\n    }\n    \"${ret}0\";\n}\n\nsub fact_string_2_dec {\n    my $str = scalar reverse $_[0];\n    my ($ret, $f) = (0, 1);\n    my $digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    for my $i (1..length($str)-1) {\n        $f *= $i;\n        $ret += $f * index($digits, substr($str, $i, 1));\n    }\n    $ret;\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-06 21:23:13"},{"id":218843,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dec_2_fact_string fact_string_2_dec);\n\nsub dec_2_fact_string {\n    my ($nb, $i, $result) = (shift, 1, '');\n    my $alpha = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    use integer;\n    while ($nb > $i) {\n        $result .= sprintf('%s', substr($alpha, $nb % $i, 1));\n        $nb = $nb \/ $i;\n        ++$i;\n    }\n    $result .= sprintf('%s', substr($alpha, $nb, 1));\n    scalar reverse($result);\n}\nsub fact_string_2_dec {\n    my $str = shift;\n    my $alpha = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    my ($l, $r, $i) = (length($str) - 1, 0, 0);\n    while ($i < $l) {\n        my $ndx = index($alpha, substr($str, $i, 1));\n        $r = ($r + $ndx) * ($l - $i);\n        ++$i;\n    }\n    $r;\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-06 21:23:14"}],"54f8693ea58bce689100065f":[{"id":218844,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse POSIX;\nour @EXPORT_OK = qw(decompose);\n\n# input: numerator, denominator (eg '3', '4'); output: string (eg '[1\/2, 1\/4]')\nsub decompose {\n    my ($x, $y) = @_;\n    my @f;\n    push @f, int $x \/ $y if $x >= $y;\n    $x %= $y;\n    while ($x) {\n        my $z = ceil $y \/ $x;\n        push @f, sprintf \"1\/%d\", $z;\n        ($x, $y) = ($x * $z - $y, $y * $z);\n    }\n    sprintf \"[%s]\", join \", \", @f;\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-06 21:57:50"},{"id":218845,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(decompose);\n\n# input: numerator, denominator (eg '3', '4'); output: string (eg '[1\/2, 1\/4]')\nsub decompose {\n    my ($nr, $dr, $i) = (@_, 0);\n    if ($nr eq \"0\") { return('[]'); }\n    my $result = '[';\n    use integer;\n    if ($nr >= $dr) {\n        $i = $nr \/ $dr;\n        $result .= $i . ', ';\n        $nr = $nr - $i * $dr;\n    }\n    while ($nr != 0) {\n        if ($dr % $nr == 0) { $i = $dr \/ $nr; } else { $i = ($dr \/ $nr) + 1; }\n        $result .= '1\/' . $i . ', ';\n        $nr = $nr * $i - $dr;\n        $dr = $dr * $i;\n    }\n    substr($result, 0, length($result) - 2) . ']';\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-06 21:57:51"}],"54ff3102c1bad923760001f3":[{"id":218846,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(get_count);\n\nsub get_count { grep \/[aeiou]\/, split \/\/, shift }","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218847,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(get_count);\n\nsub get_count {\n    (my $str = $_[0]) =~ s\/[^aeiou]\/\/g;\n    length $str;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218848,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(get_count);\n\nsub get_count {\n    my $str = pop;\n    my $count = 0;\n    for my $char (split '', $str) {\n        if ($char =~ \/[aeiou]\/) {\n            $count++;\n        }\n    }\n    $count;\n}\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218849,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(get_count);\n\nsub get_count {\n    my $count = 0;\n    for (split '', \"@_\") {\n        if (\/[aeiou]\/) {\n            $count++\n        }\n    }\n    $count;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218850,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(get_count);\n\nsub get_count {\n    ($_) = \"@_\" =~ \/[aeiou]\/g;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218851,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(get_count);\n\nsub get_count {\n    ($_) = @_;\n    s\/[^aeiou]\/\/g;\n    length;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218852,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(get_count);\n\nsub get_count {\n    my ($str) = @_;\n    my ($count) = 0;\n    for my $i (0..length($str)-1)\n    {\n        my($temp) = substr($str,$i,1);\n        if($temp eq 'a' or $temp eq 'e' or $temp eq 'i' or $temp eq 'o' or $temp eq 'u'){\n        $count = $count + 1;\n        }\n    }\n    return $count;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218853,"user_id":null,"body":"package Kata;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(get_count);\n\nsub get_count {\n    ($_) = pop =~ \/[aeiou]\/g\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218854,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(get_count);\n\nsub get_count {\n    my $count = 0;\n    for (split '', $_[0]){\n        if (\/[aeiou]\/i){\n            $count++;\n        }\n    }\n    $count;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218855,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(get_count);\n\nsub get_count {\n    my ($str) = @_;\n    my @str = split '', $str;\n    my $count;\n    for (@str){\n        if ($_ =~ \/[aeiou]\/i){\n            $count++;\n        }\n    }\n    $count ? $count : 0;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"55031bba8cba40ada90011c4":[{"id":218856,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(is_sum_of_cubes);\n\nsub is_sum_of_cubes {\n    my $s = shift;\n    my @arr = $s =~\/\\d{1,3}\/g;\n    my ($sm, $str) = (0, '');\n    for my $a (@arr) {\n        my $newnum = 0;\n        $newnum += $_ ** 3 for split\/\/, $a;\n        if ($newnum == $a) {\n            $sm += $newnum;\n            $str .= $newnum . ' ';\n        }\n    }\n    if ($str eq '') { return \"Unlucky\"; }\n    $str .= $sm . \" Lucky\"; \n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218857,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(is_sum_of_cubes);\n\nsub is_sum_of_cubes {\n    my $in = $_[0];\n    my $out = \"\";\n    my $total;\n    while ($in =~ s\/\\D*(\\d{3}|\\d{2}|\\d)\/\/) {\n      my $n = $1;\n      my $s = 0;\n      while ($n > 0) {\n        $s += ($n % 10) ** 3;\n        $n = int($n \/ 10);\n      }\n      if ($s == $1) {\n        $out = $out . $s . \" \";\n        $total += $s;\n      }\n    }\n    if ($out) {\n      return $out . $total . \" Lucky\";\n    }\n    return \"Unlucky\";\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218858,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util qw(sum);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(is_sum_of_cubes);\n\nsub is_sum_of_cubes {\n    my $s = shift;\n    my @luckys = map int, grep {$_ == sum map {$_ ** 3} split \/\/, $_} $s =~ \/\\d{1,3}\/g;\n    @luckys ? (join \" \", @luckys) . \" \" . sum(@luckys) . \" Lucky\" : \"Unlucky\";\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218859,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(is_sum_of_cubes);\n\nsub is_sum_of_cubes {\n    my ($s) = @_;\n    my $luck;\n    my @matches = ( $s =~ \/\\d{1,3}\/g );\n    my $bool = 1;\n    my $sum = 0;\n    foreach my $match (@matches){\n        if (check_for_cubic($match)){\n            $match = int($match);\n            $luck.=\"$match \";\n            $sum += $match;\n            $bool = 0;\n        }\n    }\n    \n    if ($bool){\n        return \"Unlucky\";\n    }\n    $luck.=\"$sum Lucky\";\n    return $luck;\n\n\n    sub check_for_cubic{\n        my ($num) = @_;\n        my $sum = 0;\n        foreach (split('', $num)) {\n            $sum += $_ ** 3;\n        }\n        if ($sum == $num){\n            return 1;\n        }else{\n            return 0;\n        }\n    }\n    \"\";\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218860,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util 'sum';\nuse Exporter qw(import);\nour @EXPORT_OK = qw(is_sum_of_cubes);\n\nsub is_sum_of_cubes {\n    my ($s) = @_;\n    my @ns = map {int} grep {$_ == sum map {$_**3} split(\/\/,$_)} map {\/\\d{1,3}\/g} $s;\n    @ns == 0 ? \"Unlucky\" : sprintf(\"%s %d Lucky\", join(\" \", @ns), sum @ns);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"550498447451fbbd7600041c":[{"id":218861,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util qw(all);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(comp_same);\n\n# input two array_refs; output 1 for true, 0 for false\nsub comp_same {\n    my ($x, $y) = @_;\n    return 0 if @$x != @$y;\n    @$x = sort {$a <=> $b} map {$_ ** 2} @$x;\n    @$y = sort {$a <=> $b} @$y;\n    all(sub {@$x[$_] == @$y[$_]}, (0..$#$x)) ? 'true' : 'false';\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218862,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse experimental 'smartmatch';\nuse Exporter qw(import);\nour @EXPORT_OK = qw(comp_same);\n\n# input two array_refs; output 1 for true, 0 for false\nsub comp_same {\n    my ($a1, $a2) = @_;\n    my @r = map {$_ * $_} @$a1;\n    my @u = sort {$a <=> $b} @$a2;\n    my @v = sort {$a <=> $b} @r;\n    if (@u ~~ @v) { return 1; } else { return 0; }\n}\n","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218863,"user_id":180,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(comp_same);\n\n# input two array_refs; output 1 for true, 0 for false\nsub comp_same {\n    my ($as, $bs) = @_;\n    \n    my %count = ();\n    $count{$_}++ for @$bs;\n    \n    for my $a (@$as) {\n        my $square = $a * $a;\n        if ($count{$square}--) {\n            delete $count{$square} if $count{$square} == 0;\n            next;\n        }\n        return 0;\n    }\n    \n    return keys %count == 0 ? 1 : 0;\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218864,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(comp_same);\n\n# input two array_refs; output 1 for true, 0 for false\nsub comp_same {\n  my ($n, $n2) = @_;\n    \n  return 0\n    if !$n || !$n2;\n    \n  return 1\n    if !@$n && !@$n2;\n    \n  return 0\n    if @$n != @$n2;\n    \n  my @all_squares = sort { $a <=> $b } ( @$n2, map { $_ * $_ } @$n );\n  my ($sq1, $sq2);\n  while ( ($sq1, $sq2, @all_squares) = @all_squares )\n  {\n    return 0\n      if $sq1 != $sq2;\n  }\n  \n  return 1;\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218865,"user_id":826,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(comp_same);\n\n# input two array_refs; output 1 for true, 0 for false\nsub comp_same {\n    my ($a1, $a2) = @_;\n    if (!@$a1 && @$a2 || @$a1 && !@$a2) {\n        0; }\n    elsif (@$a1==0 && @$a2==0) {\n        1; }\n    elsif (@$a1 && @$a2) {\n# get rid of negative values. Conditional map\n    my @a1 = map {if($_<0) {-$_} else {$_}} @$a1;\n    my @a2 = map {if($_<0) {-$_} else {$_}} @$a2;\n    \n    my @a1_sorted = sort {$a<=>$b} @a1;\n    my @a2_sorted = sort {$a<=>$b} @a2;\n    my $a1len = @a1_sorted;\n    my $a2len = @a2_sorted;\n    if ($a1len != $a2len) {\n        0;\n        }\n    my $test = 1;\n    for my $i (0..$a1len) {\n        if ($a1_sorted[$i]**2 != $a2_sorted[$i]) {\n            $test = 0;\n            last;\n            }\n        }\n#     print $a1len; Now works. Can't brake a loop by returning value?\n    $test;\n    }\n}\n","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218866,"user_id":826,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(comp_same);\n\n# input two array_refs; output 1 for true, 0 for false\nsub comp_same {\n    my ($a1, $a2) = @_;\n    if (!@$a1 && @$a2 || @$a1 && !@$a2) {\n        0; }\n    elsif (@$a1==0 && @$a2==0) {\n        1; }\n    elsif (@$a1 && @$a2) {\n# get rid of negative values\n    for my $i (@$a1) {\n        if ($i < 0) {\n            $i = -$i;\n            }\n        }\n        for my $i (@$a2) {\n        if ($i < 0) {\n            $i = -$i;\n            }\n        }\n    my @a1_sorted = sort {$a<=>$b} @$a1;\n    my @a2_sorted = sort {$a<=>$b} @$a2;\n    my $a1len = @a1_sorted;\n    my $a2len = @a2_sorted;\n    if ($a1len != $a2len) {\n        0;\n        }\n    my $test = 1;\n    for my $i (0..$a1len) {\n        if ($a1_sorted[$i]**2 != $a2_sorted[$i]) {\n            $test = 0;\n            last;\n            }\n        }\n#     print $a1len; Now works. Can't brake a loop by returning value?\n    $test;\n    }\n}\n","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218867,"user_id":826,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(comp_same);\n\n# input two array_refs; output 1 for true, 0 for false\nsub comp_same {\n    my ($a1, $a2) = @_;\n    if (!@$a1 && @$a2 || @$a1 && !@$a2) {\n        0; }\n    elsif (@$a1==0 && @$a2==0) {\n        1; }\n    elsif (@$a1 && @$a2) {\n    my @a1_sorted = sort {$a<=>$b} @$a1;\n    my @a2_sorted = sort {$a<=>$b} @$a2;\n    my $a1len = @a1_sorted;\n    my $a2len = @a2_sorted;\n    if ($a1len != $a2len) {\n        0;\n        }\n    for my $i (0..$a1len) {\n        if ($a1_sorted[$i]**2 != $a2_sorted[$i]) {\n            0;\n            }\n        }\n    print $a1len; # without this fails half of the tests. TOTAL BULLSHIT.\n    1;\n    }\n}\n","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218868,"user_id":826,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(comp_same);\n\n# input two array_refs; output 1 for true, 0 for false\nsub comp_same {\n    my ($a1, $a2) = @_;\n    if (!@$a1 && @$a2 || @$a1 && !@$a2) {\n        0; }\n    elsif (@$a1==0 && @$a2==0) {\n        1; }\n    else {\n    for my $i (@$a1) {\n        for my $j (@$a2) {\n            if ($i**2 == $j) {\n                $i = 0;\n                $j = 0;\n                }\n            }\n        }\n    my $a1sum = 0; my $a2sum = 0;\n    for my $i (@$a1) {\n        $a1sum += $i;\n        } \n    for my $i (@$a2) {\n        $a2sum += $i;\n        }\n    $a1sum + $a2sum == 0 ? 1 : 0 \n    }\n}\n","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218869,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(comp_same);\n\nsub comp_same {\n    (join '', sort @{$_[1]}) eq (join '', sort map $_**2, @{$_[0]}) ? 1 : 0;\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218870,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(comp_same);\n\n# input two array_refs; output 1 for true, 0 for false\nsub comp_same {\n    my ($a,$b) = @_;\n    my $h = {};\n    $h -> {$_*$_} += 1 for @$a;\n    foreach (@$b) {       \n        next if --$h -> {$_} >= 0;\n        return 0;\n    }\n    return 1;\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"550554fd08b86f84fe000a58":[{"id":218871,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(in_array);\n\n# parameters: array_ref, array_ref; return array_ref\nsub inArray {\n    my ($arr1, $arr2) = @_;\n    my @res = ();\n    for my $a1 (@$arr1) {\n        for my $a2 (@$arr2) {\n            if ((index($a2, $a1) != -1) && (! (grep( \/^$a1$\/, @res)))) {\n                push @res, $a1;\n            }\n        }\n    }\n    my @sorted = sort @res;\n    return \\@sorted;\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218872,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(in_array);\n\nuse List::Util qw\/uniqstr any\/;\n\n# parameters: array_ref, array_ref; return array_ref\nsub inArray {\n  my ($a1, $a2) = @_;\n \n  my @a1s_in_a2 = grep {\n    my $e1 = $_;\n    any { index($_, $e1) > -1 } @$a2\n  } @$a1;\n\n  return [\n    sort { $a cmp $b }\n    uniqstr @a1s_in_a2\n  ];\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218873,"user_id":826,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(in_array);\n\n# parameters: array_ref, array_ref; return array_ref\nsub inArray {\n    my $a1 = $_[0]; my $a2 = $_[1];\n    my @res = ();\n    for my $i (@$a1) {\n        for my $j (@$a2) { # if $i is a substring of $j and no $i in @res\n            if (index($j, $i) != -1 && !grep(\/^$i$\/, @res)) {   \n                    push(@res, $i);\n                    last;\n                }\n            }\n        }\nmy @res_sorted = sort @res; \n\\@res_sorted;\n}\n\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218874,"user_id":826,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(in_array);\n\n# parameters: array_ref, array_ref; return array_ref\nsub inArray {\n    my $a1 = $_[0]; my $a2 = $_[1];\n    my @res = ();\n    for my $i (@$a1) {\n        for my $j (@$a2) {\n            if (index($j, $i) != -1 && (!(grep(\/^$i$\/, @res)))) {   \n                    push(@res, $i);\n                    last;\n                }\n            }\n        }\nmy @res_sorted = sort @res; \n\\@res_sorted;\n}\n\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218875,"user_id":null,"body":"package Solution;\n\nuse Exporter qw(import);\nour @EXPORT_OK = qw(in_array);\n\nsub inArray {\n    my ($a1, $a2, %res) = @_, ();\n    for my $str (@$a2) {\n        for my $sub (@$a1) {\n            if ((index $str, $sub) >= 0) {\n                $res{$sub} = 1;\n            }\n        }\n    }\n    my @res = sort keys %res;\n    \\@res;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218876,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(in_array);\nuse Data::Dumper;\n\n# parameters: array_ref, array_ref; return array_ref\nsub is_substring_of_any {\n    my ( $substr, $arr ) = @_;\n\n    for my $str (@$arr) {\n        return 1 if ( $str =~ \/\\Q${substr}\/ );\n    }\n\n    return 0;\n}\n\nsub inArray {\n    my ( $a1, $a2 ) = @_;\n\n    my %substrings = map { $_, 1 } grep { is_substring_of_any( $_, $a2 ) } @$a1;\n    my @result = sort ( keys %substrings );\n    return \\@result;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218877,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(in_array);\n\n# parameters: array_ref, array_ref; return array_ref\nsub inArray {\nmy $ref1 = shift;\nmy $ref2 = shift;\nmy @result;\n\nprint \"Zadanie\n\";\nforeach my $prt1 (@$ref1)\n{\n  print \"$prt1 \";\n}\nprint \"\n\";\nforeach my $prt2 (@$ref2)\n{\n  print \"$prt2 \";\n}\nprint \"\n\n\";\nforeach my $word (@$ref1)\n{\n  foreach my $test (@$ref2)\n  {\n    if (index($test,$word) != -1)\n    {\n      push (@result, $word) unless $word ~~ @result;\n      last;\n    }\n  }\n}\n@result = sort @result;\n\n    return \\@result;\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218878,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse experimental 'smartmatch';\nuse Exporter qw(import);\nour @EXPORT_OK = qw(in_array);\n\n# parameters: array_ref, array_ref; return array_ref\nsub inArray {\n    my ($ar1, $ar2) = @_;\n    my @r_arr = ();\n    foreach my $el1 (@$ar1){\n        foreach my $el2 (@$ar2){\n            if (index($el2, $el1) != -1) {\n                if ($el1 ~~ @r_arr){\n                    last\n                }else{\n                    push(@r_arr, $el1);\n                }\n                last\n            }       \n        }\n    }\n    my @sorted_arr = sort @r_arr;\n    \n    return \\@sorted_arr;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218879,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::MoreUtils qw(any uniq);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(in_array);\n\n# parameters: array_ref, array_ref; return array_ref\nsub inArray {\n    my ($aref1, $aref2) = @_;\n    [uniq sort grep {my $w1 = $_; any {index($_, $w1) != -1} @$aref2} @$aref1];\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5506b230a11c0aeab3000c1f":[{"id":218880,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(evaporator);\n\n# input: $content, $evap_per_day, $threshold\nsub evaporator {\n    my ($a,$p,$t) = @_;\n    return int(log($t\/100)\/log(1-($p\/100)))+1;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218881,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(evaporator);\n\n# input: $content, $evap_per_day, $threshold\nsub evaporator {\n    my ($content, $evap_per_day, $threshold) = @_;\n    $threshold = $content*$threshold\/100;\n    my $count = 0;\n    while ($content>$threshold) {\n        $count++;\n        $content = $content - ($content*$evap_per_day)\/100;\n    }\n    $count;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218882,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(evaporator);\n\n# input: $content, $evap_per_day, $threshold\nsub evaporator {\n    my $days = 0;\n    my $content = $_[0];\n    my $evap_per_day = $_[1] \/ 100;\n    my $threshold = $content * ($_[2] \/ 100);\n    \n    while($content >= $threshold){\n        $days++;\n        $content -= ($content * $evap_per_day);\n    }\n    \n    \n    return $days;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218883,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(evaporator);\n\n# input: $content, $evap_per_day, $threshold\nsub evaporator {\n    my $content = shift;\n    my $evap_per_day = shift;\n    my $threshold = shift;\n    my $days = 0;\n  \n    $content = 100.0; \n    $evap_per_day = (100 - $evap_per_day) \/ 100;\n    while ($content > $threshold)\n    {\n      $days++;\n      $content = $content * $evap_per_day;\n    }\n    \n    return $days;\n    \n }","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218884,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(evaporator);\n\nuse Carp qw( croak );\nuse Scalar::Util qw( looks_like_number );\n\n# input: $content, $evap_per_day, $threshold\nsub evaporator {\n    if( @_ != 3 ){\n        croak 'Requires 3 arguments';\n    }\n\n    foreach my $arg ( @_ ){\n        if( !looks_like_number $arg ){\n            croak \"$arg is not a number\";\n        }\n    }\n    my( $cont_ml, $daily_perc_lost, $min_viable_perc ) = @_;\n\n    my $min_threshold = $cont_ml * ( $min_viable_perc * .01 );\n    my $days = 0;\n\n    while($cont_ml >= $min_threshold){\n        $days++;\n\n        $cont_ml -= $cont_ml * ( $daily_perc_lost * .01 );\n    }\n\n    return $days\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218885,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(evaporator);\n\nsub evaporator {\n    my ($content, $evap_per_day, $threshold) = @_;\n\n    # $content is irrelevant... What a poorly thought-out question.\n\n    my $amount  = 100;\n    my $percent = $evap_per_day \/ 100;\n    my $days    = 0;\n    while ($threshold < $amount) {\n        ++$days;\n        $amount -= $amount * $percent;\n    }\n    return $days;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218886,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(evaporator);\n\n# input: $content, $evap_per_day, $threshold\nsub evaporator {\nmy( $content, $evap_per_day, $threshold) = @_;\nmy $day =0;\nmy $minimum =  $content * $threshold\/100;\n\n    while($content > $minimum){\n    \n    $content -= $content * $evap_per_day\/100;\n    $day ++;\n\n    };\n   # print(int($minimum));\n    return int($day);\n   \n};","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218887,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(evaporator);\n\n# input: $content, $evap_per_day, $threshold\nsub evaporator {\n    my (undef,$e,$t,$i,$s) = (@_,0,100);\n    while($s > $t) {\n        $s = $s*(1-$e\/100);\n        $i++;\n    }\n    $i;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218888,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(evaporator);\n\n# input: $content, $evap_per_day, $threshold\nsub evaporator {\n    my($content, $evap_per_day, $threshold)= @_;\n    #   return log($threshold) \/ log(100 - $evap_per_day \/ 100);\n    my($val, $days);\n    for($val= 100, $days= 0; $val > $threshold; $val-= $val * $evap_per_day \/ 100.0, $days++)\n        {\n        };\n    #   printf(\"evaporator(%d, %d, %d): %d\", $content, $evap_per_day, $threshold, $days);\n    return sprintf(\"%s\", $days);\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218889,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(evaporator);\n\n# input: $content, $evap_per_day, $threshold\nsub evaporator {\n    my ( undef, $evap_per_day, $threshold ) = @_;\n\n    $evap_per_day \/= 100;\n    my $content = 100;\n    my $days;\n    while ( $content > $threshold ) {\n        ++$days;\n        $content -= $content * $evap_per_day;\n    }\n\n    return $days;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"550f22f4d758534c1100025a":[{"id":218890,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dir_reduc);\n\nsub dir_reduc {\n    [split ' ', join '', map { while(s\/(north south|south north|east west|west east)\\s*\/\/ig){}; $_} join ' ', @{$_[0]}];\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218891,"user_id":826,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dir_reduc);\n\nsub dir_reduc {\n    my %dirs = qw(NORTH SOUTH SOUTH NORTH EAST WEST WEST EAST);\n    my $a_ref = $_[0];\n    my @a = @$a_ref;\n    my $l = scalar @a;\n    my $match = 1;\n    while($match) {\n      $match = \"\";\n      for my $i (0..($l-1)) {\n        if ($dirs{$a[$i]} eq $a[$i+1]) {\n            splice @a, $i, 2; # remove element (shrinks an array)\n            $match = 1;\n            $l = scalar @a;\n            last;\n            }\n        }\n    }\n   return \\@a;\n}\n","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218892,"user_id":826,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dir_reduc);\n\n# parameter: array_ref; return array_ref\nsub dir_reduc {\n    my $a = $_[0];\n    for my $i (0..(scalar @$a)) {\n        my $temp = $a->[$i].$a->[$i+1]; # \"use of uninitialized value\"?\n        if ($temp eq \"NORTHSOUTH\" || $temp eq \"SOUTHNORTH\" || $temp eq \"EASTWEST\" || $temp eq \"WESTEAST\") {\n            $a->[$i] = \"\"; $a->[$i+1] = \"\"; \n            }    \n        }\nmy @next = ();\nfor my $i (@$a) {\n    if ($i) { # get rid of empty strings\n        push @next, $i;\n        }\n    }\nif (scalar @next == scalar @$a) {\n    return \\@next; }\n\n    return dir_reduc (\\@next); }\n","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218893,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dir_reduc);\n\n# parameter: array_ref; return array_ref\nsub dir_reduc {\n    my ($dirs_ref) = @_;\n    my @dirs       = @$dirs_ref;\n    my %opposite   = qw(NORTH SOUTH SOUTH NORTH WEST EAST EAST WEST);\n\n    for ( my $i = 0 ; $i < scalar @dirs ; $i++ ) {\n        if ( $opposite{ $dirs[$i] } eq $dirs[ $i + 1 ] ) {\n            splice @dirs, $i, 2;\n            $i = -1;\n        }\n    }\n\n    return \\@dirs;\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218894,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dir_reduc);\n\n# parameter: array_ref; return array_ref\nsub dir_reduc {\n    my $a = shift;\n    my @r = ();\n    my $ops = {NORTH => 'SOUTH', SOUTH => 'NORTH', EAST => 'WEST', WEST => 'EAST'};\n    map { $ops->{$_} eq $r[-1] ? pop @r : push @r, $_} @$a;\n    return \\@r;\n}\n\n","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218895,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dir_reduc);\nuse experimental qw(signatures);\n\nsub are_equal ($a, $b) {\n    return 0 if @$a != @$b;\n    for (my $i = 0; $i < @$a; ++$i) {\n        if ($a->[$i] ne $b->[$i]) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nsub dir_reduc ($directions) {\n    return $directions if @$directions < 2;\n\n    my ($x, $y, @xs) = @$directions;\n\n    my $new_directions;\n    if (   $x eq 'NORTH' && $y eq 'SOUTH'\n        || $x eq 'SOUTH' && $y eq 'NORTH'\n        || $x eq 'EAST'  && $y eq 'WEST'\n        || $x eq 'WEST'  && $y eq 'EAST') {\n        $new_directions = dir_reduc(\\@xs);\n    }\n    else {\n        $new_directions = [$x, @{dir_reduc([$y, @xs])}];\n    }\n\n    # New redundancies might appear.\n    # If the new list is different, do it again.\n    return dir_reduc($new_directions)\n      unless are_equal($directions, $new_directions);\n\n    return $new_directions;\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218896,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dir_reduc);\n\n# parameter: array_ref; return array_ref\nsub dir_reduc {\n    my ($aref, @ret) = ($_[0], ());\n    my %oppo = ('NORTH'=>'SOUTH', 'SOUTH'=>'NORTH', 'EAST'=>'WEST', 'WEST'=>'EAST');\n    do {(@ret and $ret[-1] eq $oppo{$_}) ? pop(@ret) : push(@ret, $_)} for (@$aref);\n    [@ret];\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218897,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dir_reduc);\n\n# parameter: array_ref; return array_ref\nsub dir_reduc {\n    my ($arr) = @_;\n    my @ret = ();\n    my %oppo = ('NORTH'=>'SOUTH', 'SOUTH'=>'NORTH', 'EAST'=>'WEST', 'WEST'=>'EAST');\n    for my $dir (@$arr) {\n        if (@ret and $ret[-1] eq $oppo{$dir}) {pop(@ret);} else {push(@ret, $dir);}\n    }\n    \\@ret;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218898,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dir_reduc);\n\n# parameter: array_ref; return array_ref\nsub dir_reduc {\n    my ($a, $aa) = (shift, \"\");\n    my $s = join \" \", @{$a};\n    while (1) {\n        $aa = $s;\n        $aa =~ s\/NORTH SOUTH|SOUTH NORTH|EAST WEST|WEST EAST\/\/g;\n        $aa =~ s\/  \/ \/g;\n        if ($aa eq $s) {last;} else {$s = $aa;}\n    }\n    $aa =~ s\/^\\s+|\\s+$\/\/g;\n    my @a = split \/ \/, $aa;\n    return \\@a;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5517fcb0236c8826940003c9":[{"id":218899,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sum_fracts);\n\n# input: array of array_refs; return: array of integers\nsub sum_fracts {\n\n    my @ls = @_;\n    my $sz = @ls;\n    if ($sz == 0) { return (0, 1); }\n    \n    my @xss = ();\n    foreach my $xs (@ls) {\n        push @xss, reduce(@$xs[0], @$xs[1]);\n    }\n    \n    my $cd = 1;\n    foreach my $xs (@xss) {\n        $cd = lcm(@$xs[1], $cd);\n    }\n    \n    my @yss = ();\n    foreach my $xs (@xss) {\n        push @yss, norm(@$xs[0], @$xs[1], $cd);\n    }\n    \n    my $n = 0;\n    foreach my $xs (@yss) {\n        $n = $n + @$xs[0];\n    }\n    \n    my $g = gcd($n, $cd);\n    (int($n \/ $g), int($cd \/ $g));\n}\n\nsub gcd {\n    my ($a, $b) = @_;\n    return $b == 0 ? abs($a) : gcd($b, $a % $b);\n}\n\nsub lcm {\n    my ($a, $b) = @_;\n    return abs($a * $b) \/ gcd($a, $b);\n}\n\nsub reduce {\n    my ($a, $b) = @_;\n    my $i = gcd($a, $b);\n    my @ls = (int($a \/ $i), int($b \/ $i));\n    return \\@ls;\n}\n\nsub norm {\n    my ($a, $b, $cd) = @_;\n    my @ls = (int(($a * $cd) \/ $b), $cd);\n    return \\@ls;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218900,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sum_fracts);\n\nsub gcdi {\n    my ($x, $y) = @_;\n    while ($x) { ($x, $y) = ($y % $x, $x) }\n    $y\n}\nsub lcmi {\n    my ($x, $y) = @_;\n    ($x && $y) and $x \/ gcdi($x, $y) * $y or 0\n}\nsub simplify {\n    my @arr = @_;\n    my $i = 0;\n    my @l = ();\n    while ($i < @arr) {\n        my $g = gcdi($arr[$i]->[0], $arr[$i]->[1]);\n        $l[$i] = [$arr[$i]->[0] \/ $g, $arr[$i]->[1] \/ $g];\n        $i++;\n    }\n    @l;\n}\nsub com_denom {\n    my @l = @_;\n    my $result = $l[0]->[1]; my $i = 0;\n    while ($i < @l) {\n        $result = lcmi($result, $l[$i][1]);\n        $i++;\n    }\n    $result;\n}\n\n# input: array of array_refs; return: array of integers\nsub sum_fracts {\n    my @l = @_;\n    if (@l == 0) { return (0, 1); }\n    @l = simplify(@l);\n    my $d = com_denom(@l);\n    my $s = 0; my $i = 0;\n    while ($i < @l) {\n        $s += ($l[$i]->[0] * $d) \/ $l[$i]->[1];\n        $i++;\n    }\n    my $g = gcdi($s, $d);\n    ($s \/ $g, $d \/ $g);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218901,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sum_fracts);\n\nsub gcd {\n  my ($a, $b) = @_;\n  ($a,$b) = ($b,$a) if $a > $b;\n  while ($a) {\n    ($a, $b) = ($b % $a, $a);\n  }\n  return $b;\n}\n\n# input: array_ref of array_refs; return: array of integers\nsub sum_fracts {\n  my @res = (0, 1);\n  my $tmp;\n  for my $num (@_) {\n    $res[0] = $res[0]*$num->[1]+$num->[0]*$res[1];\n    $res[1] = $res[1]*$num->[1];\n    $tmp = gcd(@res);\n    $res[0] = $res[0]\/$tmp;\n    $res[1] = $res[1]\/$tmp;\n  }\n  return @res\n}\n\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218902,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sum_fracts);\n\nuse List::Util qw(reduce);\nuse Math::BigRat;\n\nsub sum_fracts {\n    my $rat = reduce { $a + $b } map { Math::BigRat->new(@$_) } ([0, 1], @_);\n    return ($rat->numerator, $rat->denominator);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218903,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sum_fracts);\n\nuse Data::Dumper;\n\nsub gcd {\n    $_[0] ? gcd($_[1] % $_[0], $_[0]) : $_[1];\n}\n\n# input: array of array_refs; return: array of integers\nsub sum_fracts {\n    my ($n, $d) = (0, 1);\n    for (@_) {\n        my ($n2, $d2) = @$_;\n        ($n, $d) = ($n * $d2 + $n2 * $d, $d2 * $d);\n        my $g = gcd($n, $d);\n        ($n, $d) = ($n \/ $g, $d \/ $g);\n    }\n    ($n, $d);\n}\n\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218904,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sum_fracts);\n\n# input: array of array_refs; return: array of integers\nsub sum_fracts {\n    my @arr = @_;\n    return (0, 1) unless (@arr);\n    my ($num, $den) = (0, 1);\n    for (@arr) {$den = lcm($den, $_->[1])}\n    for (@arr) {$num += ($_->[0] * ($den \/ $_->[1]))}\n    ($num%$den == 0) ? ($num\/$den, 1) : ($num\/gcd($num, $den), $den\/gcd($num, $den));\n}\n\nsub gcd {\n    my ($a, $b) = @_;\n    ($b == 0) ? abs($a) : gcd($b, $a%$b);\n}\n\nsub lcm {\n    my ($a, $b) = @_;\n    ($a == 0 or $b == 0) ? 0 : abs($a*$b) \/ gcd($a,$b);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218905,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sum_fracts);\n\n# input: array of array_refs; return: array of integers\nsub sum_fracts {\n\n    my @ls = @_;\n    my $sz = @ls;\n    if ($sz == 0) { return (0, 1); }\n    \n    my @xss = ();\n    foreach my $xs (@ls) {\n        push @xss, reduce(@$xs[0], @$xs[1]);\n    }\n    \n    my $cd = 1;\n    foreach my $xs (@xss) {\n        $cd = lcm(@$xs[1], $cd);\n    }\n    \n    my @yss = ();\n    foreach my $xs (@xss) {\n        push @yss, norm(@$xs[0], @$xs[1], $cd);\n    }\n    \n    my $n = 0;\n    foreach my $xs (@yss) {\n        print \"test\";                    # kata OK -> even though delibarete mistake below (how !!?)\n        $n = $n + @$xs[0];\n    }\n    \n    my $g = gcd($n, $cd);\n    (int(10 * $n \/ $g), int($cd \/ $g));  # deliberate mistake\n}\n\nsub gcd {\n    my ($a, $b) = @_;\n    return $b == 0 ? abs($a) : gcd($b, $a % $b);\n}\n\nsub lcm {\n    my ($a, $b) = @_;\n    return abs($a * $b) \/ gcd($a, $b);\n}\n\nsub reduce {\n    my ($a, $b) = @_;\n    my $i = gcd($a, $b);\n    my @ls = (int($a \/ $i), int($b \/ $i));\n    return \\@ls;\n}\n\nsub norm {\n    my ($a, $b, $cd) = @_;\n    my @ls = (int(($a * $cd) \/ $b), $cd);\n    return \\@ls;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5536a85b6ed4ee5a78000035":[{"id":218906,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(tour);\n\n#parameters are references to: friends(array), fTowns(hash), dist(hash)\nsub tour {\n    my ($friends, $fTowns, $dist) = @_;\n    my @t = ();\n    foreach ( @$friends ) {\n        if (exists $fTowns->{$_}) {\n            my $u = $fTowns->{$_}; \n            push(@t, $dist->{$u}); \n        }\n    }\n    my $tot = $t[0];\n    for ( my $i = 1; $i < @t; $i++ ) {\n        $tot += sqrt($t[$i] * $t[$i] - $t[$i - 1] * $t[$i - 1]);\n    }\n    return int($tot += $t[$#t]);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218907,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(tour);\n\n#parameters are references to: friends(array), fTowns(hash), dist(hash)\nsub tour {\n\n    my ($friends, $towns, $dist) = @_;\n    \n    my $distance = 0;\n    my $start;\n    \n    foreach my $friend (@$friends)\n    {\n        my $city = $towns->{$friend};\n        if (!defined $city)\n        {\n            next;\n        }\n\n        $distance += (!defined $start ? $dist->{$city} : sqrt($dist->{$city} ** 2 - $dist->{$start} ** 2));\n        $start = $city;\n    }\n    $distance += $dist->{$start};\n    \n    return int($distance);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218908,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(tour);\n\n#parameters are references to: friends(array), fTowns(hash), dist(hash)\nsub tour {\n    my ($r, $f, $t, $d) = (0, @_);\n    my @r = map $$d{$$t{$_}}, grep $$t{$_}, @$f;\n    $r += $_ for ($r[0], (map { ($r[$_+1]**2-$r[$_]**2)**.5 } 0..$#r-1), $r[-1]);\n    int $r;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218909,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(tour);\n\n#parameters are references to: friends(array), fTowns(hash), dist(hash)\nsub tour {\n    my $ref_friends = shift;\n    my $ref_towns = shift;\n    my $ref_dist = shift;\n    \n    my $dist = 0;\n    my $city = 0;\n    foreach my $key (@$ref_friends)\n    {\n      print \"City: $city\n\";\n      unless (defined $$ref_towns{$key})\n      {\n        print \"Nie ma $key\n\";\n        next;\n      }\n      \n      if ($dist == 0)\n      {\n        $dist = $$ref_dist{$$ref_towns{$key}};\n        print \"Do pierwszego $dist\n\";\n        $city = $$ref_towns{$key};\n      }\n      else\n      {\n        my $tmp1 = $$ref_dist{$$ref_towns{$key}}**2;\n        my $tmp2 = $$ref_dist{$city}**2;\n        my $tmp3 = $tmp1 - $tmp2;\n        print \"tmp1 $tmp1, tmp2 $tmp2, tmp3 $tmp3\n\";\n        $dist += sqrt($tmp3);\n        $city = $$ref_towns{$key};\n      }\n    }\n    \n    $dist += $$ref_dist{$city};\n    \n    print \"Distance $dist\n\";\n    return int($dist);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218910,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(tour);\n\n#parameters are references to: friends(array), fTowns(hash), dist(hash)\nsub tour {\n    my ($friend, $Town, $dist) = @_;\n    my @friend = @$friend;\n    my $result;\n    my $temp = @friend;\n    my $judge;\n    print $temp,\"\n\";\n    for (my $i = 0; $i < $temp; $i++){\n        if (!$$Town{$friend[$i]}) {\n             next\n         }\n         $judge = $friend[$i];\n        print $friend[$i],\" \";\n        if ($i == 0){\n            $result += $$dist{$$Town{$friend[$i]}};\n            print $result,\"\n\";\n        }\n        if ($i != 0) {\n            $result += sqrt($$dist{$$Town{$friend[$i]}}**2-$$dist{$$Town{$friend[$i-1]}}**2);\n            print $result,\"\n\";\n        }\n    }\n    $result += $$dist{$$Town{$judge}};\n    return int($result);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218911,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Data::Dumper;\nuse List::Util 'sum0';\nuse Exporter qw(import);\nour @EXPORT_OK = qw(tour);\n\n#parameters are references to: friends(array), fTowns(hash), dist(hash)\nsub tour {\n    my ($friends, $fTowns, $distances) = @_;\n    my (@locs, @dists);\n    do {push(@locs, $fTowns->{$_}) if (defined $fTowns->{$_})} for (@$friends);\n    push(@dists, $distances->{$locs[0]});\n    push(@dists, sqrt(($distances->{$locs[$_]})**2 - ($distances->{$locs[$_-1]})**2)) for (1..$#locs);\n    int((sum0 @dists) + $distances->{$locs[$#locs]});\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218912,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Data::Dumper;\nuse List::Util 'sum0';\nuse Exporter qw(import);\nour @EXPORT_OK = qw(tour);\n\n#parameters are references to: friends(array), fTowns(hash), dist(hash)\nsub tour {\n    my ($friends_ref, $fTowns_ref, $dist_ref) = @_;\n    my (@locs, @dists);\n    for (@$friends_ref) {\n        next unless (defined $fTowns_ref->{$_});\n        push(@locs, $fTowns_ref->{$_});\n    }\n    for my $i (0..$#locs) {\n        if ($i == 0) {\n            push(@dists, $dist_ref->{$locs[$i]});\n        } else {\n            push(@dists, sqrt(($dist_ref->{$locs[$i]})**2 - ($dist_ref->{$locs[$i-1]})**2));\n        }\n    }\n    push(@dists, $dist_ref->{$locs[$#locs]});\n    return int(sum0 @dists);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5539fecef69c483c5a000015":[{"id":218913,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::MoreUtils qw(all any);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(backwards_prime);\n\nsub backwards_prime {\n    my ($st, $en) = @_;\n    [grep {my $r = reverse $_; $r != $_ and is_prime($r)} grep {is_prime($_)} ($st..$en)];\n}\n\nsub is_prime {\n    my ($n) = @_;\n    all {$n != $_} (-1, 0, 1) and not any {$n%$_ == 0} (2..int($n**0.5));\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-06 15:11:32"},{"id":218914,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(backwards_prime);\n\nsub backwards_prime {\n    local *prime = sub {\n        my $n = shift;\n        return ($n >= 2) if $n < 4;\n        return unless $n % 2  &&  $n % 3;\n        my $sqrtn = int(sqrt($n));\n        for (my $i = 5; $i <= $sqrtn; $i += 6) {\n        return unless $n % $i && $n % ($i + 2);\n        }\n        1;\n    };\n    my ($start, $nd) = @_;\n    my $i = $start;\n    my @arr = ();\n    while ($i <= $nd) {\n        my $ri = scalar reverse($i);\n        if (($i != $ri) && prime($i) && prime($ri)) {\n            push @arr, $i;\n        }\n        $i++;\n    }\n    \\@arr;\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-06 15:11:36"},{"id":218915,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(backwards_prime);\n\nsub isPrime {\n    my ($n, $i) = (@_, 5);\n    if ($n % 2 == 0 || $n % 3 == 0) {\n        return $n < 4;\n    }\n    while ($i * $i <= $n) {\n        if ($n % $i == 0 || $n % ($i + 2) == 0) {\n            return 0;\n        }\n        $i += 6;\n    }\n    return 1;\n}\n\nsub reverseDigits {\n    my ($n, $r) = (@_, 0);\n    while ($n > 0) {\n        $r *= 10;\n        $r += $n % 10;\n        $n = int($n \/ 10);\n    }\n    return $r;\n}\n\nsub isPalindromic {\n    my $n = shift;\n    return $n == reverseDigits($n);\n}\n\nsub backwards_prime {\n    my ($start, $nd, @fs) = (@_, ());\n    my $i = $start;\n    while ($i <= $nd) {\n        if (isPrime($i) && !isPalindromic($i) && isPrime(reverseDigits($i))) {\n            push @fs, $i;\n        }\n        $i++;\n    }\n    return \\@fs;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-06 15:11:39"},{"id":218916,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(backwards_prime);\n\nsub backwards_prime {\n    my $output = [];\n    foreach(my $i = $_[0]; $i <= $_[1]; $i++){\n        if(prime($i) and $i > 9 and $i != scalar reverse $i and prime(scalar reverse $i)){\n            push(@$output, $i); \n        }\n    }\n    return $output;\n}\n\nsub prime{\n    my $num = shift;\n    my $flag = 0;\n    if($num > 1){\n        foreach my $i (2..(sqrt($num) + 1)){\n            if ($num % $i == 0){\n                $flag = 1;\n                last;\n            }\n        }\n        if($flag == 0){\n            return 1;\n        }\n        else{\n            return 0;\n        }\n    }\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218917,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(backwards_prime);\n\nuse constant { true => 1, false => 0 };\n\n#\n# A very bad prime checker.\n#\nsub is_prime {\n    state %memo = (2 => true);\n\n    my ($n) = @_;\n\n    return $memo{$n} if exists $memo{$n};\n\n    unless ($n & 1) {    # If the number is not odd...\n        return $memo{$n} = false;\n    }\n    else {\n        for (my $i = 3, my $r = sqrt($n); $i <= $r; $i += 2) {\n            return $memo{$n} = false\n              unless $n % $i;    # Division must have a remainder.\n        }\n    }\n    return $memo{$n} = true;\n}\n\n\nsub backwards_prime {\n    my ($first, $last) = @_;\n    my @primes;\n    for (my $n = $first; $n <= $last; ++$n) {\n        my $reverse = reverse $n;\n        next if $reverse == $n;    # Ignores palindromes.\n        push @primes, $n if is_prime($n) && is_prime($reverse);\n    }\n    return \\@primes;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218918,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(backwards_prime);\n\nuse constant { true => 1, false => 0 };\n\n#\n# A very bad prime checker.\n#\n#\n# A very bad prime checker...\n#\nsub is_prime {\n    state %memo = (2 => true);\n\n    my ($n) = @_;\n\n    return $memo{$n} if exists $memo{$n};\n\n    unless ($n & 1) {    # If the number is not odd...\n        return $memo{$n} = false;\n    }\n    else {\n        for (my $i = 3, my $r = sqrt($n); $i <= $r; $i += 2) {\n            return $memo{$n} = false\n              unless $n % $i;    # Division must have a remainder.\n        }\n    }\n    return $memo{$n} = true;\n}\n\n\nsub backwards_prime {\n    my ($first, $last) = @_;\n    my @primes;\n    for (my $n = $first; $n <= $last; ++$n) {\n        my $reverse = reverse $n;\n        next if $reverse == $n;    # Ignores palindromes.\n        push @primes, $n if is_prime($n) && is_prime($reverse);\n    }\n    return \\@primes;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218919,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(backwards_prime);\n\nsub backwards_prime{\n  my ($start, $end) = @_;\n  my @result = ();\n  for(my $i = $start; $i <= $end; $i++){\n    if(is_prime($i) && is_prime(reverse_number($i)) && $i > 10 && $i != reverse_number($i) ){\n      push(@result, $i);\n    }\n  }\n  return \\@result;\n}\n\nsub is_prime{\n  my $number = $_[0];\n  if($number <= 1){\n    return 0;\n  }\n  for(my $i = 2; $i <= sqrt($number); $i++){\n    if($number % $i == 0){\n      return 0;\n    }\n  }\n  return 1;\n}\n\nsub reverse_number{\n  my $number = $_[0];\n  my $reversed = reverse $number;\n  return $reversed;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218920,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(backwards_prime);\n\nuse List::Util qw(sum);\n\nsub is_prime {\n    my $num = shift;\n    state %prime_cache;    \n    return $prime_cache{$num} if defined $prime_cache{$num};\n    \n    return $prime_cache{$num} = 0 unless $num % 2 != 0 and sum(split '', $num) % 3 != 0;\n    for (3 .. int sqrt $num) {\n        return $prime_cache{$num} = 0 if is_prime($_) and $num % $_ == 0\n    }\n    return $prime_cache{$num} = 1\n}\n\nsub backwards_prime {\n    my ($start, $end) = @_;\n    my @result;\n    for ($start .. $end) {\n        next unless is_prime $_;\n        my $rev = reverse;\n        next unless $_ != $rev and is_prime $rev;\n        push @result, $_\n    }\n    \\@result\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218921,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(backwards_prime);\n\nsub backwards_prime {\n    my ($start, $end) = @_;\n    my @arr = ();\n    for (my $i=$start; $i<=$end; $i++){\n        if (find_prime($i)){\n            push(@arr, $i);\n        }\n    }\n    if (scalar @arr == 0){\n\t    return 0;\n    }else{\n        return \\@arr;\n    }\n    sub find_prime{\n        my ($num) = @_;\n        my $not_prime = 1;\n        for (my $i=2; $i<=$num-2; $i++){\n\t\t#print \"$i \n\";\n\t\t#print reverse($i), \"\n\";\n            if ($num % $i == 0 || reverse($num) == $num || reverse($num) % $i == 0 && reverse($num) != $i){\n                $not_prime = 1;\n                last;\n            }else{\n                $not_prime = 0;\n            }\n        }\n        if ($not_prime){\n            return 0;\n        }else{\n            return 1;  \n        }\n    }\n}\n\nprint backwards_prime(1, 100), \"\n\";","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218922,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(backwards_prime);\n\nsub backwards_prime {\n    my ($st, $en) = @_;\n    my @ret = ();\n    for my $n ($st..$en) {\n        next unless (is_prime($n));\n        my $rn = scalar reverse \"$n\"; \n        push(@ret, $n) if ($rn != $n and is_prime($rn));\n    }\n    \\@ret;\n}\n\nsub is_prime {\n    my ($num) = @_;\n    return 0 if (grep {$_ == $num} (-1, 0, 1));\n    for (my $i=2; $i<=int($num**0.5); $i++) {\n        return 0 if ($i != $num and $num%$i == 0);\n    }\n    return 1;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5544c7a5cb454edb3c000047":[{"id":218923,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(bouncing_ball);\n\nsub bouncing_ball {\n    my ($h, $bounce, $window) = @_;\n    if (($h <= 0) || ($bounce <= 0) || ($bounce >= 1) || ($window >= $h)) { return -1; }\n    my $hh = $h;\n    my $result = -1;\n    while ($hh > $window) {\n      $result += 2;\n      $hh *= $bounce;\n    }\n    $result;\n}   ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218924,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(bouncing_ball);\n\nsub bouncing_ball {\n    my ($h, $b, $w) = @_;\n    $h > 0 && $b < 1 && $w < $h ? 1 + 2 * int(log($w \/ $h) \/ log($b)) || 1 : -1;\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218925,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(bouncing_ball);\n\nsub bouncing_ball {\n    my ($h, $bounce, $window) = @_;\n    if ($h <= 0 || $bounce <= 0 || $bounce >= 1 || $window >= $h) {\n        return -1;\n    }\n    else {\n        return 2 + bouncing_ball($h*$bounce, $bounce, $window);\n    }\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218926,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(bouncing_ball);\n\nsub bouncing_ball {\n    my ($height, $bounce, $window) = @_;\n\n    unless ($height > 0 && $bounce > 0 && $bounce < 1 && $window < $height) {\n        return -1;\n    }\n\n    my $count = 1;\n    $height *= $bounce;\n    while ($height > $window) {\n        $count += 2;\n        $height *= $bounce;\n    }\n    return $count;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218927,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(bouncing_ball);\n\nsub bouncing_ball {\n    my ($n, $h, $b, $w) = (1, @_);\n    return -1 if $h <= 0 || $h <= $w || $b <= 0 || $b >= 1;\n    $n += 2 while do { $h *= $b; $h } > $w;\n    $n;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218928,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(bouncing_ball);\n\nsub bouncing_ball {\n    my ($h, $bounce, $window) = @_;\n    return -1 if $h <= 0 || $bounce <= 0 || $bounce >= 1 || $window >= $h;\n    my $c = -1;\n    while($h > $window) {\n        $c += 2 if $h > $window;\n        $c++ if $h == $window;\n        $h *= $bounce;\n    }\n    return $c;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218929,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(bouncing_ball);\n\nsub bouncing_ball {\n    my ($height, $bounce, $window) = @_;\n    my $count = 0;\n    if ($height <= $window || $bounce < 0 || $bounce >= 1) {\n        return -1;\n    }\n# Could not for the life of me get a damn while loop to work\n    for (1 .. 1000) {\n        $count++;\n        $height *= $bounce;\n        if ($height <= $window) {\n            return $count;\n        }\n        $count++;\n    }\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218930,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(bouncing_ball);\n\nsub bouncing_ball {\n  \n    my ($height, $bounce, $window) = @_;\n    return -1 if ((scalar @_) < 3 || $bounce >= 1 || $bounce <=0 || $height <= $window);\n    my $count = 0;\n    while ($height > $window) {\n        $count+=2;\n        $height = $height * $bounce;\n    }\n    $count--;\n    return $count\n    }","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218931,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(bouncing_ball);\n\nsub bouncing_ball {\n    my ($h, $b, $w) = @_;\n    if ($h <= 0 || $b <= 0 || $b >= 1 || $w >= $h){\n        return -1;\n    }\n    my $k = 1;\n    while ($h*($b**$k)-$w>0) {\n        $k = $k * 2;\n    }\n    my $s = int($k\/2);\n    my $e = $k;\n    $k = int(($s+$e)\/2);\n    while (1){\n        if ($h*($b**$k)-$w<=0){\n            $e = $k-1;\n            $k = int(($s+$e)\/2);\n        }elsif ($h*($b**($k+1))-$w>0){\n            $s = $k+1;\n            $k = int(($s+$e)\/2);\n        }else{\n            return 2*$k+1;\n        }\n    }\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218932,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(bouncing_ball);\n\nsub bouncing_ball {\n    my ($h, $bounce, $window) = @_;\n    \n    return -1\n        unless( $h > 0.0 && $bounce > 0.0 && $bounce < 1.0 && $window < $h );\n\n    my $mom = 0; # Mom hasn't seen the ball... yet\n    do{\n        # goes down...\n        $mom++;\n        \n        # bounces up... we just compute new height, we can assume that if it crossed the\n        # window in its way up, mom saw it.\n        $h *= $bounce;\n        $mom++\n            if($h > $window);\n    } while($h > $window);\n\n    return $mom;\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"55466989aeecab5aac00003e":[{"id":218933,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sq_in_rect);\n\nsub sq_in_rect {\n    my ($a, $b) = @_;\n    my ($l, $w, @arr) = (0, 0, ());\n    if ($a == $b) { return @arr; }\n    while ($a > 0 && $b > 0) {\n        $l = $a > $b ? $a : $b;\n        $w = $a < $b ? $a : $b;\n        push @arr, $w;\n        $a = $w;\n        $b = $l - $w;\n    }\n    return \\@arr;\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218934,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sq_in_rect);\n\nsub sq_in_rect {\n    my ($len, $wid) = @_;\n    return [] if ($len == $wid);\n    my @ret = ();\n    while ($len != $wid) {\n        if ($len > $wid) {\n            $len -= $wid;\n            push(@ret, $wid);\n        } else {\n            $wid -= $len;\n            push(@ret, $len);\n        }\n    }\n    push(@ret, $len);\n    \\@ret;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218935,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sq_in_rect);\n\nsub sq_in_rect {\n    my ($lng, $wdth) = @_;\n    if ($lng == $wdth) { return []; }\n    if ($lng < $wdth) { ($wdth, $lng) = ($lng, $wdth); }\n    my @res = ();\n    while ($lng != $wdth) {\n        push @res, $wdth;\n        $lng = $lng - $wdth;\n        if ($lng < $wdth) { ($wdth, $lng) = ($lng, $wdth); }\n    }\n    push @res, $wdth;\n    \\@res;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218936,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sq_in_rect);\n\nsub sq_in_rect {\n    \n    my ($length, $width) = @_;\n    my @squares = ();\n    \n    if ($length != $width) {\n       my ($small, $big) = sort {$a <=> $b} ( $width, $length );\n\n        do {\n            push @squares, $small;\n            $big -= $small;\n            ($big, $small) = ($small, $big ) if ($small > $big);\n\n        } while ($small > 0);\n    }\n    return \\@squares;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218937,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sq_in_rect);\n\nsub sq_in_rect {\n    \n    my ($lng, $wdth) = @_;\n    my @squares = ();\n    \n    if ($lng != $wdth) {\n       my ($small, $big) = sort {$a <=> $b} ( $wdth, $lng );\n\n        do {\n            push @squares, $small;\n            $big -= $small;\n            ($big, $small) = ($small, $big ) if ($small > $big);\n\n        } while ($small > 0);\n    }\n    return \\@squares;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218938,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sq_in_rect);\n\nsub qrem($$) {\n  my ($a, $b) = @_;\n  my $v = int($a \/ $b);\n  return ($v, $a - ($v * $b));\n}\n\nsub sq_in_rect($$) {\n  my ($a, $b) = @_;\n  my @squares = ();\n  return \\@squares if ($a == $b);\n\n  ($a, $b) = ($b, $a) if ($a < $b);\n\n  while ($b > 0) {\n    my ($q, $r) = qrem($a, $b);\n    push(@squares, map { $b } (1..$q));\n    ($a, $b) = ($b, $r);\n  }\n  return \\@squares;\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218939,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sq_in_rect);\n\nsub sq_in_rect {\n\tmy ( $length, $width ) = @_;\n\treturn [] if $length == $width;\n\n\tmy @result;\n\tmy $square = $length * $width;\n\twhile ( $square > 0 ) {\n\t\tmy $min = min($length, $width);\n\t\tpush @result, $min;\n\t\t$square -= $min ** 2;\n\t\tif ( $min == $length ) {\n\t\t\t$width -= $min;\n\t\t}\n\t\telse {\n\t\t\t$length -= $min;\n\t\t}\n\t}\n\treturn \\@result;\n}\n\nsub min {\n\tmy ( $length, $width ) = @_;\n\treturn $length > $width ? $width : $length;\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218940,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sq_in_rect);\n\nsub sq_in_rect {\n    my ($w, $h) = @_;\n    return [] if $w == $h;\n    my @res;\n    while ($w > 0) {\n        if ($w < $h) { ($w, $h) = ($h, $w) }\n        push @res, $h;\n        $w -= $h;\n    }\n    return \\@res;\n}\n\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218941,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sq_in_rect);\n\nsub sq_in_rect {\n    my ( $lng, $wdth, $solution, $notfirst ) = @_;\n\n    ( !$notfirst && $lng == $wdth ) && return [];\n    $lng * $wdth > 0 || return $solution;\n    ( $wdth < $lng ) && ( ( $wdth, $lng ) = ( $lng, $wdth ) );\n\n    push @{$solution}, $lng;\n\n    return sq_in_rect( $lng, $wdth - $lng, $solution, 1 );\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218942,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sq_in_rect);\n\nsub sq_in_rect {\n    my ($lng, $wdth) = @_;\n    if ($lng == $wdth){\n        return [];\n    }\n    elsif ($lng > $wdth){\n        return calculate_parts($lng, $wdth, ());\n    }\n    else{\n        return calculate_parts($wdth, $lng, ());\n    }\n    \n    \n    \n    \n    sub calculate_parts{\n        my ($big, $small, @arr) = @_;\n        \n        if ($small == 0){\n            return \\@arr;\n        }\n        \n        $big -= $small;\n        push(@arr, $small);\n        if ($small > $big){\n            ($big, $small) = ($small, $big);\n        }\n        my $result = calculate_parts($big, $small, \\@arr);\n        print \"$result\";\n        return $result;\n    }\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5547cc7dcad755e480000004":[{"id":218943,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(remove_nb);\n\nsub remove_nb {\n    my ($n, $ret) = ($_[0], []);\n    my $total = $n*($n+1)\/2;\n    for my $i (0..$n-1) {\n        my $j = int(($total-$i)\/($i+1));\n        push(@$ret, [$i, $j]) if ($i*$j == $total-$i-$j and $j <= $n);\n    }\n    $ret;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218944,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(remove_nb);\n\nsub remove_nb {\n    my ( $n ) = @_;\n    my @result = ();\n    return \\@result if $n < 3;\n    \n    my ( $sum , $left, $right ) = ( 0, 1, $n );\n    $sum += $_ for 1 .. $n;\n\n    while ( $left < $right ) {\n        my $reminder = $sum - $left - $right;\n        my $mult     =  $left * $right;\n        if ( $reminder == $mult ) {\n            push @result, [ $left, $right ], [ $right, $left ];\n            $left++;\n        }\n        elsif ( $reminder > $mult ) { $left ++}\n        else                        { $right-- }\n    }\n\n    return [ sort { $a->[0] <=> $b->[0] } @result ];\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218945,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse POSIX qw\/ceil\/;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(remove_nb);\n\nsub remove_nb {\n    my ($n) = @_;\n    my $pairs = [];\n    my $sum = $n*($n+1)\/2;\n    for (my $a = ceil($sum\/$n); $a <= $n; $a++) {\n        next if ($sum - $a) % ($a + 1) != 0;\n        push @{$pairs}, [$a, ($sum - $a) \/ ($a + 1)];\n    }\n    return $pairs;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218946,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(remove_nb);\n\nsub remove_nb {\n    my $n = shift;\n    use integer;\n    my $m = $n * ($n + 1) \/ 2;\n    my @ans = ();\n    for my $x (1 .. $n) {\n        my $y = ($m - $x) \/ ($x + 1);\n        if (($y <= $n) && ($x * $y == $m - $x - $y)) {\n            push @ans, [$x, $y]; \n        }\n    }\n    \\@ans\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218947,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse warnings;\nuse Exporter qw(import);\nuse List::Util qw\/sum\/;\nour @EXPORT_OK = qw(remove_nb);\n\nsub remove_nb {\n\n    my $n = shift;\n    my $aref = [];\n    for my $x ( 1 .. $n ) {\n\n        my $y = (($n * ($n + 1) \/ 2 - $x) \/ ($x + 1));\n        if ( $y == int($y) && $y != $x && $y <= $n ) {\n\n        push @{$aref}, [$x, $y];\n        }\n    }\n\n    return $aref;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218948,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(remove_nb);\nuse experimental qw(signatures);\n\nsub remove_nb ($n) {\n    my $sum = $n * ($n + 1) \/ 2;\n\n    my $distance = sub ($a, $b) {\n        return abs($sum - ($a + $b) - $a * $b);\n    };\n\n    my $sqrt = int(sqrt($sum));\n\n    # If the sum is a perfect square, don't bother.\n    return [] if $sqrt == sqrt($sum);\n\n    my ($low, $high) = ($sqrt - 1, $sqrt + 1);\n\n    my @answers;\n    while ($low * 2 > $high) { # meh, it works...\n        my $diff = $distance->($low, $high);\n\n        push @answers, [$low, $high] if $diff == 0;\n        if ($distance->($low - 1, $high) < $distance->($low, $high + 1)) {\n            --$low;\n        }\n        else {\n            ++$high;\n        }\n    }\n\n    @answers = sort { $a->[0] <=> $b->[0] } map { $_, [reverse(@$_)] } @answers;\n    return \\@answers;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218949,"user_id":null,"body":"package Solution;\n# Solution6, OK\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(remove_nb);\n\nsub remove_nb {\n\n\tmy $n = shift;\n\tmy $aref = [];\n\tfor my $x ( 1 .. $n ) {\n\n\t\tmy $y = (($n * ($n + 1) \/ 2 - $x) \/ ($x + 1));\n\t\tif ( $y == int($y) && $y != $x && $y <= $n ) {\n\n\t\tpush @{$aref}, [$x, $y];\n\t\t}\n\t}\n\n\treturn $aref;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218950,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(remove_nb);\n\nsub remove_nb {\n    my ($n) = @_;\n    my @result = ();\n    my $sum = $n*($n+1)\/2;\n    \n    for (my $a=2; $a<$n; $a++){\n        my $temp_sum = $sum - $a;\n        my $pot_x = $temp_sum \/ ($a + 1);\n        if ($pot_x < $n && $pot_x =~ \/^\\d+$\/){\n            push(@result, [$a, $pot_x]);\n        }\n    }\n    @result = sort { $a->[0] <=> $b->[0] } @result;\n    return \\@result;\n    \n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218951,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(remove_nb);\n\nsub remove_nb {\n    my $n = shift;\n    use integer;\n    my ($s, $limit) = ($n * ($n + 1) \/ 2, $n \/ 2);\n    my @res =();\n    for my $a ($limit .. $n) {\n        my $b = $s - $a;\n        if ($b % ($a + 1) == 0) {\n            push @res, [$a, $b \/ ($a + 1)]; \n        }\n    }\n    \\@res\n}    ","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"554a44516729e4d80b000012":[{"id":218952,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse POSIX qw\/floor\/;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_months);\n\nsub nb_months {\n    my ($p0, $p1, $s, $r, $m, $t) = (@_, 0, 0);\n    while ($p0 + $m * $s < $p1) {\n        if ($m % 2 == 1) { \n            $r += 0.5;\n        }\n        $p0 -= $p0 * 0.01 * $r;\n        $p1 -= $p1 * 0.01 * $r;\n        $m++;\n    }\n    return [$m,floor($p0 + $m * $s - $p1 + 0.5)];\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218953,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_months);\n\nsub nb_months {\n    my ($startPriceOld, $startPriceNew, $savingPerMonth, $percentLossByMonth) = @_;\n    my ($i, $savings, $loss, $old, $new) = (0, 0, $percentLossByMonth,$startPriceOld, $startPriceNew);\n    while (1) {\n        my $on_hand = $old + $savings;\n        return sprintf(\"%d %d\", $i, int($on_hand - $new + 0.5)) if ($on_hand >= $new);\n        $old *= (100.0 - $loss) \/ 100.0;\n        $new *= (100.0 - $loss) \/ 100.0;\n        $savings += $savingPerMonth;\n        do {$loss += 0.5} if ($i%2 == 0);\n        $i++;\n    }\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218954,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_months);\n\n# use sprintf(... '%.0f', ...) to round to the nearest integer\nsub nb_months {\n    my ($startPriceOld, $startPriceNew, $savingperMonth, $percentLossByMonth) = @_;\n    my ($mth, $priceOld, $priceNew, $available) = (0, $startPriceOld, $startPriceNew, $startPriceOld);\n    while ($available < $priceNew) {\n        # at the end of this month\n        $mth += 1;\n        if ($mth % 2 == 0) {\n            $percentLossByMonth += 0.5;\n        }\n        $priceOld = $priceOld * (100 - $percentLossByMonth) \/ 100;\n        $priceNew = $priceNew * (100 - $percentLossByMonth) \/ 100;\n        $available = $mth * $savingperMonth + $priceOld;\n    }\n    my $r = $available - $priceNew;\n    sprintf('%d %.0f', $mth, $available - $priceNew);\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218955,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_months);\n\nsub nb_months {\n    my ($PriceOld, $PriceNew, $savingperMonth, $percentLossByMonth) = @_;\n    my $month = 0;\n    my $difference = $PriceOld - $PriceNew;\n    my $savingTot = 0;\n    while ($difference < 0){\n        $month += 1;\n        $percentLossByMonth += .5 if($month % 2 == 0);\n        $PriceOld -= $PriceOld * $percentLossByMonth * .01;\n        $PriceNew -= $PriceNew * $percentLossByMonth * .01;\n        $savingTot += $savingperMonth;\n        $difference = $PriceOld - $PriceNew + $savingTot;\n    }\n    $difference = int($difference + 0.5);\n    return \"$month $difference\";\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218956,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_months);\n\nsub nb_months {\n    my ($o,$n,$v,$pct) = @_;\n    my $m = 0;\n    while ($o+$m*$v < $n) {\n        $o   *= (1 - $pct\/100);\n        $n   *= (1 - $pct\/100);        \n        $pct += 0.5 if $m%2 == 0;\n        $m   += 1;\n    }\n    return $m . \" \" . int($m*$v+$o-$n+0.5);\n    \n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218957,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_months);\n\nsub nb_months {\n    my $startPriceOld = $_[0];\n    my $startPriceNew = $_[1];\n    my $savingperMonth = $_[2];\n    my $percentLossByMonth = $_[3];\n    my $month = 0;\n    while ((($month * $savingperMonth) + $startPriceOld) < $startPriceNew){\n        $startPriceOld -= ($startPriceOld * ($percentLossByMonth\/100));\n        $startPriceNew -= ($startPriceNew * ($percentLossByMonth\/100));\n        if (!($month % 2)){\n            $percentLossByMonth += 0.5;\n        }\n        $month++;\n    }\n    my $leftover = sprintf \"%.0f\", ($startPriceOld+($month*$savingperMonth)) - $startPriceNew;\n    \"$month $leftover\";\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218958,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_months);\n\nsub nb_months {\n    my ($old_car, $new_car, $saving, $decrese) = @_;\n    my $money = 0;\n    my $counter = 0;\n    while (1){\n        if ($old_car + $money >= $new_car){\n            $money+= $old_car-$new_car;\n            $money = int($money + 0.5);\n            return \"$counter $money\";\n        }\n        $counter+=1;\n        if ($counter%2 == 0){\n            $decrese += 0.5;\n        }\n        $old_car*= (100-$decrese)\/100;\n        $new_car*= (100-$decrese)\/100;\n        $money += $saving;\n        }\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"554f76dca89983cc400000bb":[{"id":218959,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse POSIX qw\/floor\/;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sol_equa);\n\nsub sol_equa {\n    my ($n, $i, $d, $x, $y, @fs) = (@_, 1, 0, 0, 0, ());\n    my $m = floor(sqrt($n));\n    while ($i <= $m) {\n        $d = $n \/ $i;\n        $x = ($d + $i) \/ 2;\n        $y = ($d - $i) \/ 4;\n        if ($d == floor($d) && $x == floor($x) && $y == floor($y)) {\n            push @fs, [floor($x), floor($y)];\n        }\n        $i++;\n    }\n    return \\@fs;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-06 19:32:23"},{"id":218960,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sol_equa);\n\nsub sol_equa {\n    my ($n, $i) = (shift, 1);\n    my @result = ();\n    use integer;\n    while ($i * $i <= $n) {\n        if ($n % $i == 0) {\n            my $j = $n \/ $i;\n            if ((($i + $j) % 2 == 0) && (($j - $i) % 4 == 0)) {\n                my $x = ($i + $j) \/ 2;\n                my $y = ($j - $i) \/ 4;\n                push(@result, [$x, $y]);\n            }\n        }\n        ++$i;\n    }\n    \\@result;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-06 19:32:24"},{"id":218961,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sol_equa);\n\nsub sol_equa {\n    my ($n, $ret) = ($_[0], []);\n    for my $i (1..int($n**0.5)) {\n        my $j = $n\/$i;\n        if ($j == int($j)) {\n            my $x = ($i+$j)\/2;\n            if ($x == int($x)) {\n                my $y = ($j-$i)\/4;\n                push(@$ret, [$x,$y]) if ($y == int($y));\n            }\n        }\n    }\n    $ret;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-06 19:32:26"}],"5552101f47fc5178b1000050":[{"id":218962,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dig_pow);\n\nsub dig_pow {\n    my ($n, $p) = @_;\n    my ($sm, $i, $res) = (0, 1, 0);\n    foreach $a (unpack(\"C*\", uc $n)) {\n        my $nb = $a - ord('0');\n        $sm += int($nb ** ($p - 1 + $i++));\n    }\n    if ($sm % $n == 0) { $res = $sm \/ $n; } else { $res = -1; }\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218963,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util 'sum';\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dig_pow);\n\nsub dig_pow {\n    my ($n, $p) = @_;\n    my @a = map {\/.\/g} \"$n\";\n    my $tot = sum map {$a[$_]**($_+$p)} (0..@a-1);\n    $tot%$n == 0 ? $tot\/$n : -1;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218964,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dig_pow);\n\nsub dig_pow {\n    \n    my ($number, $pow) = @_;\n    \n    # R\u00e9cup\u00e9ration des chiffres\n    my @digits = map { $_ * 1; } split(\/\/, $number);\n    \n    # Calcul de la somme des puissances\n    my $sum = 0;\n    foreach my $digit (@digits) {\n        $sum += $digit ** $pow;\n        $pow++;\n    }\n    \n    my $result = $sum \/ $number;\n    return ($result > int($result) ? -1 : $result);\n    \n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218965,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dig_pow);\n\nsub dig_pow {\n    my  $res;\n    for ($_[0] =~ \/(\\d)\/g) { $res += $_ ** $_[1]++ }\n    return ($res \/ $_[0]) unless $res % $_[0];\n    -1;\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218966,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dig_pow);\n\nsub dig_pow {\n    my $num = shift;\n    my $num_str = \"$num\";\n    my $pow = shift;\n    my $sum = 0;\n    \n    foreach my $d (split('', $num_str))\n    {\n        $sum += int($d)**$pow;\n#    say \"d=$d pow=$pow sum=$sum\";\n        ++$pow;\n    }\n    \n    my $k = $sum \/ $num;\n    if ($k - int($k) == 0) { return $k }\n    else { return -1}\n}\n\n# (a ^ p + b ^ (p+1) + c ^(p+2) + d ^ (p+3) + ...) = n * k","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218967,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dig_pow);\n\nsub dig_pow {\n    my ( $orig_number, $exp ) = @_;\n\n    my @arr = split \/\/, $orig_number;\n    my $sum = 0;\n    for ( my $i = 0 ; $i < scalar @arr ; $i++ ) {\n        $sum += $arr[$i]**( $exp + $i );\n    }\n\n    my $is_multiple = $sum % $orig_number == 0;\n    return $is_multiple ? $sum \/ $orig_number : -1;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218968,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dig_pow);\nuse List::Util qw(sum0);\n\nsub dig_pow {\n    my ( $orig_number, $exp ) = @_;\n\n    my @arr = split \/\/, $orig_number;\n    for ( my $i = 0 ; $i < scalar @arr ; $i++ ) {\n        $arr[$i] = $arr[$i]**( $exp + $i );\n    }\n\n    my $sum         = sum0(@arr);\n    my $is_multiple = $sum % $orig_number == 0;\n    return $is_multiple ? $sum \/ $orig_number : -1;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218969,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dig_pow);\n\nsub dig_pow {\n    my ($n, $p, $t) = @_, 0;\n    foreach (split '', $n) {\n        $t += $_**$p++;\n    }\n    return $t%$n == 0 ? $t\/$n : -1;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218970,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dig_pow);\n\nsub dig_pow {\n    my($n, $p) = @_;\n    my $sum = 0;\n    \n    for my $ch (split '', \"$n\") {\n        $sum += ($ch**$p);\n        $p++;\n    }\n    \n    if ($sum % $n == 0) {\n        return $sum \/ $n;\n    } else {\n        return -1;\n    }\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218971,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dig_pow);\n\nsub dig_pow {\n        my ($n, $p) = @_;\n        \n        # Split digits\n        my @digits;\n        my $digits_left = $n;\n        while ($digits_left > 0){\n                unshift @digits, $digits_left % 10;\n                $digits_left = int $digits_left \/ 10;\n        }\n        \n        # Calculate sum\n        my $sum = 0;\n        my $exponent = $p;\n        foreach my $digit (@digits){\n                $sum += $digit ** $exponent;\n                $exponent++;\n        }\n\n        # Module is not zero if there is no k\n        return -1 if $sum % $n;\n\n        # Return k\n        return $sum \/ $n;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"55685cd7ad70877c23000102":[{"id":218972,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub make_negative {\n    my ($num) = @_;\n    $num > 0 ? -$num : $num; \n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218973,"user_id":404,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub make_negative {\n    -abs($_[0]);\n}\n\n'ABS';","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218974,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub make_negative {\n    my ($num) = @_;\n    $num < 0 ? $num : -$num\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218975,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub make_negative { $_[0] < 0 ? $_[0] : -$_[0] }\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218976,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub make_negative {\n    my ($num) = @_;\n    if ($num < 0){\n    return $num\n    }else{\n    return -$num\n    }\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218977,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub make_negative {\n    my ($num) = @_;\n    if ($num > 0) {\n        return -$num;\n    } else {\n        return $num;\n    }\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218978,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub make_negative {\n    my ($num) = @_;\n    \n    return ($num < 0 ? $num : $num * -1);\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218979,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub make_negative {\n    my ($num) = @_;\n    if ($num > 0) {\n        $num *= -1;\n    }\n    return ($num);\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218980,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub make_negative {\n    return -abs(@_[0]);\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218981,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub make_negative {\n    my ($num) = @_;\n    abs($num) * -1 \n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5592e3bd57b64d00f3000047":[{"id":218982,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(find_nb);\n\nsub find_nb {\n    my $m = $_[0];\n    my $n = 0;\n    while ($m > 0) {\n        $m -= (++$n * $n * $n);\n    }\n    return $m == 0 ? $n : -1;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218983,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(find_nb);\n\nsub find_nb {\n    my $m = shift;\n    my $n = 0;\n    my $total = 0;\n    \n    while ($total < $m) {\n        $total += ++$n**3;\n    }\n    \n    return $total == $m ? $n : -1;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218984,"user_id":209,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(find_nb);\nsub find_nb {\n    my $x = ( -1 + sqrt(1 + 8 * sqrt($_[0])) ) \/ 2;\n    int($x) == $x ? $x : -1;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218985,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(find_nb);\n\nsub find_nb {\n    my $target_vol = shift;\n    my $vol = 0;\n    my $n = 0;\n    \n    while (1)\n    {\n        $vol += $n**3;\n        last if ($vol >= $target_vol);\n        $n++;\n    }\n    \n    if ($vol == $target_vol) {\n        return $n;\n    } else {\n        return -1;\n    }\n}\n\n# V = sum(n^3) for n=n to 1 \n\n# n=2 vol=9\n\n# n=3\n# 3^3 + 2^3 + 1^3 = 36\n\n# n=4 vol=100\n# n=5 vol=225\n# n=6 vol=441\n# n=7 vol=784\n\n\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218986,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(find_nb);\n\n\nsub find_nb {\n    my ($num) = @_;\n    my $total = 0;\n    my $n = 0;\n    while($total < $num){\n        $n += 1;\n        $total += $n**3;\n    }\n    ($total == $num) ? return $n : return -1;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218987,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(find_nb);\n\nsub find_nb {\n    my ( $volume ) = @_;\n    my $res = 0;\n    my $n   = 0;\n    while ( $res < $volume ) {\n        $res += ++$n ** 3;\n    }\n    return $res == $volume ? $n : -1;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218988,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(find_nb);\n\nsub find_nb {\n    my ($m, $s, $n) = (@_, 0, 0);\n    while ($s < $m) {\n        $n++;\n        $s += $n**3;\n    }\n    $s == $m ? $n : -1;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218989,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(find_nb);\n\nsub find_nb {\n    my $m = shift;\n    my $sum = 0;\n    my $n = 0;\n    \n    while ($sum < $m)\n    {\n      $n++;\n      $sum += $n*$n*$n;\n    }\n\n    if ($sum == $m)\n    {\n      return $n;\n    }\n    else\n    {\n      return -1;\n    }\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218990,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(find_nb);\n\nsub find_nb {\n    my ($m, $n);\n    $m = shift @_;\n    $n = 0;\n    while ($m>0){\n        $n+=1;\n        $m -= $n**3;\n    }\n    return $m==0?$n:-1;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218991,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(find_nb);\n\n\nsub find_nb {\n    my $value = shift;\n    for (my $i=0;; $i++) {\n        $value -= $i*$i*$i;\n        if ($value < -1) {\n             return -1;\n        }\n        if ($value == 0) {\n             return $i;\n        }\n    }\n    return 0;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"559536379512a64472000053":[{"id":218992,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(play_pass);\n\nsub play_pass {\n    my ($s, $n) = @_;\n    my $res = \"\"; my $i = 0;\n    foreach my $c1 (split \/\/, $s) { \n        my $n1 = ord($c1); \n        if ($n1 >= 65 && $n1 <= 90) { \n            $c1 = chr(65 + ($n1 - 65 + $n) % 26)\n        } else {\n            if ($n1 >= 48 && $n1 <= 57) { \n                $c1 = chr(105 - $n1);\n            }\n        }\n        $c1 = $i % 2 == 0 ? uc($c1) : lc($c1);\n        $res .= $c1;\n        $i++;\n    }\n    $res = reverse $res;\n    return $res;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218993,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(play_pass);\n\nsub circular_voc_shift {\n    my ( $letter, $shift ) = @_;\n    my $vocabulary = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n    my $index     = index $vocabulary, $letter;\n    my $new_index = ( $index + $shift ) % 26;\n    return substr $vocabulary, $new_index, 1;\n}\n\nsub play_pass {\n    my ( $phrase, $shift ) = @_;\n\n    my $encoded;\n    my $i = 0;\n    for my $char ( split \/\/, $phrase ) {\n        if ( $char =~ \/[A-Z]\/ ) {\n            $char = circular_voc_shift $char, $shift;\n        }\n        elsif ( $char =~ \/[0-9]\/ ) {\n            $char = 9 - $char;\n        }\n\n        $char = $i % 2 == 0 ? $char : lc $char;\n        $encoded .= $char;\n        $i++;\n    }\n    return reverse $encoded;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218994,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(play_pass);\n\nsub play_pass {\n    my ($str, $n) = @_;\n    my @chars = split '', $str;\n    my $i = 0;\n    foreach (@chars) {\n        \/[A-Z]\/ and $_ = chr((ord() + $n - 65) % 26 + 65);\n        \/[0-9]\/ and $_ = 9 - $_;\n        $i % 2 != 0 and $_ = lc;\n        $i % 2 == 0 and $_ = uc;\n    } continue { ++$i }\n    scalar reverse @chars\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218995,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(play_pass);\n\nsub play_pass {\n    my ($phrase, $shift) = @_;\n    \n    my $result = \"\";\n    my $counter = 0;\n\n    for (split \"\", $phrase) {\n        my $char = uc;\n\n        if (\/[A-Z]\/) {\n            $char = chr((ord() - 65 + $shift) % 26 + 65);\n        }\n        elsif (\/[0-9]\/) {\n            $char = 9 - $_;\n        }\n\n        if ($counter % 2 eq 1) {\n            $char = lc $char;\n        }\n        \n        $result = $char . $result;\n        $counter++;\n    }\n    \n    return $result;\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218996,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(play_pass);\n\nsub play_pass {\n    my ($s, $n) = @_;\n    \n    my @b = split('', $s);\n    my $i = 0;\n    foreach (@b) {\n        $_ = 9 - $_ if $_ =~ \/\\d\/;\n        if ($_ =~ \/[a-zA-Z]\/) {\n            $_ = uc($_);\n            $_= chr( (ord($_) +$n - 65)%26 + 65);\n            $_= lc($_) if $i %2 == 1;\n        }\n        $i++;\n    }\n    \n    return join('', reverse @b);\n}\n\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218997,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(play_pass);\n\nsub play_pass {\n    my ($phrase, $number) = @_;\n    my @arr = ();\n    foreach my $char (split('', $phrase)){\n\tmy $asci = ord($char);\n\tif ($asci >= 65 and $asci <= 90){\n\t    $asci = $asci + $number;\n\t    while ($asci > 90){\n\t\t$asci = $asci - 26;\n\t    }\n\t    push(@arr, chr($asci));\n\t}\n\telsif ($asci >= 48 and $asci <= 57){\n\t    my $toadd = 9 - $char;\n\t    push(@arr, $toadd);\n\t}else{\n\t     push(@arr, $char);\n\n\t}\n    }\n    my @new_arr = ();\n    for my $i (0 .. $#arr){\n\tif ($i % 2 == 0){\n\t   push(@new_arr, uc @arr[$i]);\n\t}\n\telse{\n\t   push(@new_arr, lc @arr[$i]);\n\t}\n    }\n    @new_arr = reverse(@new_arr);\n    my $joined = join(\"\", @new_arr);\n    return \"$joined\";\n}\n","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218998,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(play_pass);\n\nmy $letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nmy $digits = \"0123456789\";\n\nsub play_pass {\n    my ($s, $n) = @_;\n    my @chars = split('', $s);\n    \n    for (my $i = 0; $i < scalar(@chars); ++$i) {\n        my $c = $chars[$i];\n\n        if (index($digits, $c) >= 0) {\n            $c = 9 - $c;\n        }\n        elsif (index($letters, $c) >= 0) {\n            $c = substr($letters, (index($letters, $c) + $n) % 26, 1);\n            $c = lc($c) if ($i % 2 != 0);\n        }\n    \n        $chars[$i] = $c;\n    }\n    \n    return join('', reverse @chars);\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":218999,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(play_pass);\n\nsub play_pass {\n    my ($s, $n) = @_;\n    my ($ret, $x) = (\"\", \"\");\n    my @a = map {\/.\/g} $s;\n    for my $i (0..$#a) {\n        if ($a[$i] =~ \/[A-Z]\/) {\n            $x = chr((ord($a[$i]) + $n - ord(\"A\"))%26 + ord(\"A\"));\n            $ret .= ($i%2 == 1) ? lc($x) : $x;\n        } elsif ($a[$i] =~ \/\\d\/) {\n            $ret .= (9-$a[$i]);\n        } else {\n            $ret .= $a[$i];\n        }\n    }\n    reverse($ret);\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"559a28007caad2ac4e000083":[{"id":219000,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(perimeter);\n\nsub perimeter {\n    my $n = shift;\n    \n    my $tmp = 0;\n    my $last = 0;\n    my $current = 4;\n    my $total = 4;\n    my $i = 0;\n    \n    for($i = 0; $i < $n; $i++)\n    {\n       $tmp = $current + $last;\n       $last = $current;\n       $current = $tmp;\n       $total += $current;\n    }\n    \n    return $total;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219001,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(perimeter);\n\nsub perimeter {\n    my $n = shift @_;\n    my $perm = my $a = 0;\n    my $b = my $tmp = 1;\n\n    while ($n-- >= 0) {\n        ($a, $b) = ($b, $a + $b);\n        $perm += $a * 4;\n    }\n    return $perm;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219002,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(perimeter);\n\nsub perimeter {\n    our $h = $_[0];\n    our $result = 0;\n    for (my $q = 0; $q < $h+1; $q++){\n        \n#        print $q,\" \",F1($q);\n        $result += F1($q);\n    }\n    return 4*$result;\n}\n\n\n\nsub F1 {\n    my $n = $_[0];\n    \n    if ($n <= 1){\n        return 1;\n    }\n    else{\n       return F2(2,$n,1,1);\n    }\n}\n\nsub F2{\n    our @result;\n    our ($i, $m, $x, $y) = @_;\n#    print @_,\"\n\";\n    if ($i <= $m){\n        F2($i+1,$m,$y,$y+$x);\n        push (@result,$y);\n    }\n    return $y;\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219003,"user_id":null,"body":"package Solution;\n\nuse v5.30;\nuse warnings;\nuse List::Util qw(sum0);\nuse Memoize;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(perimeter);\n\nsub perimeter {\n    return 4 * sum0 map _fib($_), 0 .. (shift) + 1;\n}\n\nmemoize('_fib');\nsub _fib {\n    my ($n) = @_;\n    return $n  ? $n == 1 ? 1 : _fib($n - 1) + _fib($n - 2) : 0;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219004,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(perimeter);\n\nsub perimeter {\n    my ($n, $a, $b, $m, $i) = (@_, 1, 1, 0, 0);\n    while ($i < $n + 2) {\n        $m = $a + $b;\n        $a = $b;\n        $b = $m;\n        $i++;\n    }\n    return 4 * ($a - 1);\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219005,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(perimeter);\n\nsub perimeter {\n    my ($n, $a, $b, $p) = ($_[0], 1, 1, 1);\n    for (1..$n) {my $t = $a+$b; $a = $b; $b = $t; $p+= $a}\n    4*$p;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219006,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(perimeter);\n\nsub perimeter {\n    my ($n) = @_;\n    my @f = (1, 1);\n    my $sm = 0;\n    for (0 .. $n) {\n        $sm += $f[0];\n        @f = ($f[1], $f[0] + $f[1]);\n    }\n    return 4 * $sm\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"559b8e46fa060b2c6a0000bf":[{"id":219007,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse bigint;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(easy_diagonal);\n\nsub easy_diagonal {\n    use integer;\n    my ($n, $p, $r, $i) = (@_, 1, 1);\n    while ($i <= $p+1) {\n        $r = $r * ($n - $i + 2) \/ $i;\n        $i++;\n    }  \n    $r\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219008,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse bigint;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(easy_diagonal);\n\nsub easy_diagonal {\n    my ($m, $p) = @_;\n    my $r = 1;\n    for (my $i = $m - $p + 1; $i <= $m + 1; $i++) { $r *= $i };\n    for (my $i = 1; $i <= $p + 1; $i++) { $r \/= $i };\n    $r;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219009,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse bigint;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(easy_diagonal);\n\nsub easy_diagonal {\n    my $n = shift;\n    my $k = shift;\n    \n    my $line = $n+1;\n    my $c = 1;\n    my $l = 0;\n    for my $i (1..$k+1) {\n        $l = $c;\n        $c = $c * ($line - $i) \/ $i;\n    }\n    return $c + $l;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219010,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse bigint;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(easy_diagonal);\n\nsub easy_diagonal {\n    # S(a,b)= element at (a+1,b+1)\n    my $n = $_[0]+1;\n    my $r = $_[1]+1;\n    \n    my @factStore=();\n    my $sol=1;\n    \n    if($n-$r>$r){\n        $sol *= factorial($n, $n-$r);\n        $sol \/= factorial($r,1);\n    } else {\n        $sol *= factorial($n, $r);\n        $sol \/= factorial($n-$r,1);\n    }\n    \n    return $sol;\n}\n\nsub factorial{\n    my ($start, $end) =@_;\n    my $f = 1;\n    $f *= $start-- while $start > $end;\n    \n    return $f;\n}\n\n\n\n\n\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219011,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse bigint;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(easy_diagonal);\n\nsub easy_diagonal {\n    local *aux = sub {\n        use integer;\n        my ($n, $k) = @_;\n        $k = $k > $n-$k ? $n-$k : $k;\n        my $result = 1;\n        for (my $i = 0; $i < $k; $i++) {\n            $result *= $n - $i;\n            $result \/= ($i + 1);\n        }\n        $result;\n    };\n    my ($m, $p) = @_;\n    aux($m + 1, $p + 1);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"559ce00b70041bc7b600013d":[{"id":219012,"user_id":168,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(finance);\n\nsub finance {\n    my $n = shift;\n    $n * ($n + 1) * ($n + 2) \/ 2;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219013,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(finance);\n\nsub finance {\n    my $n = shift;\n    my $sum = 0;\n    my $i = 0;\n    \n    while ($i<=$n)\n    {\n      $sum += $i;\n      $i++;\n    }\n    \n    my $j = 0;\n    my $previous = $sum;\n    while ($j < $n)\n    {\n      $previous = ($previous + ($n-$j) - (($j)*2));\n      $sum += $previous;\n      $j++;\n    }\n    \n    return $sum;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219014,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(finance);\nuse experimental qw(signatures);\n\n#  x1\n#  \u2211 i\n# i=x0\nsub sum ($x0, $x1) {\n    $x1 * ($x1 + 1) \/ 2 - ($x0 - 1) * $x0 \/ 2;\n}\n\nsub finance ($n) {\n    my $sum = 0;\n    for (my $week = 0; $week <= $n; ++$week) {\n        $sum += sum(2 * $week, $n + $week);\n    }\n    return $sum;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219015,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(finance);\nuse experimental qw(signatures);\n\n#  x1\n#  \u2211 xi\n# i=x0\nsub sum ($x0, $x1) {\n    $x1 * ($x1 + 1) \/ 2 - ($x0 - 1) * $x0 \/ 2;\n}\n\nsub finance ($n) {\n    my $sum = 0;\n    for (my $week = 0; $week <= $n; ++$week) {\n        $sum += sum(2 * $week, $n + $week);\n    }\n    return $sum;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219016,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(finance);\n\nsub finance {\n    my $n = $_[0];\n    my $result = 0;\n    my $count;\n    for (my $i = 0; $i < $n+1; $i++){\n        my $count = 2*$i;\n        $result = $result+ (($n+1-$i) * $count) + (($n+1-$i) * ($n+1-$i-1))\/2;\n    }  \n    return $result;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219017,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(finance);\n\nsub finance {\n    my ($n) = @_;\n    my $s;\n    for (my $i=1; $i <= $n+1; $i++){\n        $s += $n * $i;\n    }\n    return $s;\n    1;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219018,"user_id":527,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(finance);\n\nsub finance {\n    my ($n) = @_;\n    $n * ($n + 1) * ($n + 2) \/ 2\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219019,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(finance);\n\nsub finance {\n    my $n = shift;\n    return $n * ($n + 1) * ($n + 2) \/ 2;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219020,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(finance);\n\nsub finance {\n    $_[0] * ($_[0] + 1) * ($_[0] + 2) \/ 2;    \n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219021,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(finance);\n\nsub finance {\n    my $n = shift;\n    use integer;\n    $n * ($n + 1) * ($n + 2) \/ 2;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"559e3224324a2b6e66000046":[{"id":219022,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse integer;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sumin sumax sumsum);\n\nsub sumin {\n    my $n = shift;\n    $n * ($n + 1) * (2 * $n + 1) \/ 6;\n}\nsub sumax {\n    my $n = shift;\n    $n * ($n + 1) * (4 * $n - 1) \/ 6;\n}\nsub sumsum {\n    my $n = shift;\n    $n * $n * ($n + 1);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219023,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sumin sumax sumsum);\n\nsub sumin {\n    my $n = $_[0];\n    my $x = 0;\n    my $sum = 0;\n        \n    foreach $x(1 .. ($n - 1)){\n        $sum += (($x * ($n + 1 - $x)) + ($x * ($n - $x)));\n    }\n    \n    return ($sum + $n)\n}\nsub sumax {\n    my $n = $_[0];\n    my $x = 0;\n    my $sum = 0;\n        \n    foreach $x(1 .. ($n - 1)){\n        $sum += (($n + 1 - $x) * ($n + 1 - $x)) + (($n + 1 -$x) * ($n - $x));\n    }\n    \n    return ($sum + 1)\n}\nsub sumsum {\n    my $n = $_[0];\n    \n    return (&sumin($n) + &sumax($n))\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219024,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sumin sumax sumsum);\n\nsub sumin {\n    my $n = shift;\n    my $i = shift;\n    my $sum = 0;\n    for ($i = 0; $i < $n; $i++)\n    {\n      $sum += ((($n - $i) << 1) - 1) * ($i + 1);\n    }\n    return $sum;\n}\nsub sumax {\n    my $n = shift;\n    my $i = shift;\n    my $sum = 0;\n    for ($i = 0; $i < $n; $i++)\n    {\n      $sum += ((($n - $i) << 1) - 1) * ($n - $i);\n    }\n    return $sum;\n}\nsub sumsum {\n    my $n = shift;\n    return sumin($n) + sumax($n);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219025,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sumin sumax sumsum);\nuse List::Util qw(sum);\nsub sumin {\n    sumsum($_[0])-sumax($_[0])\n}\nsub sumax {\n    sum map { $_*(2*$_-1)} (1..shift)\n}\nsub sumsum {\n    $_[0]*$_[0]*(1+$_[0])\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219026,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse integer;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sumin sumax sumsum);\n\nsub sumin {\n    my $n = shift;\n    return $n * ($n+1) * (2 * $n + 1) \/ 6;\n}\nsub sumax {\n    my $n = shift;\n    return $n * ($n+1) * (4 * $n - 1) \/ 6;\n}\nsub sumsum {\n    my $n = shift;\n    return ($n+1) * $n * $n;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219027,"user_id":527,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sumin sumax sumsum);\n\nsub sumin {\n    my ($n) = @_;\n    $n * ($n + 1) * (2 * $n + 1) \/ 6\n}\nsub sumax {\n    my ($n) = @_;\n    $n * ($n + 1) * (4 * $n - 1) \/ 6\n}\nsub sumsum {\n    my ($n) = @_;\n    $n * $n * ($n + 1)\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"55aa075506463dac6600010d":[{"id":219028,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util 'sum0';\nuse List::MoreUtils 'uniq';\nuse POSIX;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(list_squared);\n\n#parameters m, n integers; return a string\nsub list_squared {\n    my ($m, $n) = @_;\n    my @ret = ();\n    for my $x ($m..$n) {\n        my $sum_ds_sq = sum0 map {$_**2} &divisors($x);\n        my $root = $sum_ds_sq**0.5;\n        push(@ret, \"[$x, $sum_ds_sq]\") if ($root == floor($root));\n    }\n    return \"[\".join(\", \", @ret).\"]\";\n}\n\nsub divisors {\n    my ($num) = @_;\n    my @ret = ();\n    for my $i (1..floor($num**0.5)) {\n        if ($num % $i == 0) {\n            push(@ret, $i);\n            push(@ret, $num\/$i);\n        }\n    }\n    return uniq sort @ret;\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219029,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(list_squared);\n\n#parameters m, n integers; return a string\nsub list_squared {\n    my ($a, $b) = @_;\n    my $res = \"[\";\n    for (my $n = $a; $n <= $b; $n++) {\n        my $sum = 0; my $i = 0; my $m = sqrt($n);\n        while (++$i < $m) {\n            if ($n % $i == 0) { $sum += $i * $i + ($n \/ $i) * ($n \/ $i); }\n        }\n        if (int($m) == $m) { $sum += $n; }\n        my $sq = sqrt($sum);\n        if (int($sq) == $sq) { $res .= \"[$n, $sum], \"; }\n    }\n    return ($res eq \"[\" ? $res.\"]\" : substr($res, 0, -2).\"]\");\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219030,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(list_squared);\n\n#parameters m, n integers; return a string\nsub list_squared {\n    my ($a, $b, $r) = (@_, \"[\");\n    for (my $n = $a; $n <= $b; $n++) {\n        my ($k, $i, $m) = (0, 0, sqrt($n));\n        while (++$i < $m) {\n            if ($n % $i == 0) { \n                $k += $i * $i + ($n \/ $i) * ($n \/ $i); \n            }\n        }\n        if (int($m) == $m) { \n            $k += $n;\n        }\n        my $sq = sqrt($k);\n        if (int($sq) == $sq) { \n            $r .= \"[$n, $k], \";\n        }\n    }\n    return ($r eq \"[\" ? $r.\"]\" : substr($r, 0, -2).\"]\");\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"55ab4f980f2d576c070000f4":[{"id":219031,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(game);\n\nsub game {\n    my ($n) = @_;\n    my $numerator = $n**2;\n    \n    if ($n % 2 > 0){\n        return \"($numerator, 2)\";\n    } else {\n        $numerator = $numerator\/2;\n        return \"($numerator)\";\n    } \n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219032,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(game);\n\nsub game {\n    my $n = $_[0]**2;\n    $n&1 ? \"(\".$n.\", 2)\" : \"(\".($n\/2).\")\";\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219033,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse POSIX;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(game);\n\nsub game {\n    use integer;\n    my $n = shift;\n    if ($n % 2 == 0) {\n        return \"(\" . ($n * $n \/ 2) . \")\";\n    } else {\n       return \"(\" . ($n * $n) . \", 2)\";\n    }\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219034,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(game);\n\nsub game {\n    ($_[0]%2 == 1) ? sprintf(\"(%d, 2)\", $_[0]**2) : sprintf(\"(%d)\", $_[0]**2\/2);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219035,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(game);\n\nsub game {\n    use integer;\n    my $n = shift;\n    if ($n * $n % 2 == 0) {\n        return sprintf(\"(%d)\", $n * $n \/ 2);  \n    }\n    sprintf(\"(%d, 2)\", $n * $n);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"55b3425df71c1201a800009c":[{"id":219036,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(stat_assoc);\n\nsub toSec {\n    my $r = shift;\n    $r =~ s\/(\\d+)\\|(\\d+)\\|(\\d+)\/$1*3600+$2*60+$3\/e;\n    return int($r);\n}\nsub median {\n    my @vals = @_; my $len = @vals;\n    if ($len % 2) {\n        return $vals[int($len \/ 2)];\n    } else {\n        return ($vals[int($len \/ 2) - 1] + $vals[int($len \/ 2)]) \/ 2;\n    }\n}\nsub toStr {\n    my $n = shift;\n    sprintf(\"%.2d\", int($n\/3600)).\"|\".sprintf(\"%.2d\", int($n%3600\/60)).\"|\".sprintf(\"%.2d\", int($n%60));\n}\nuse List::Util qw(sum);\nsub stat_assoc {\n    my $s = shift;\n    if ($s eq \"\") { return \"\"; }\n    my @a = split \/, \/, $s;\n    my @u = sort {$a <=> $b} map(toSec($_), @a);\n    my $avg = toStr(sum(@u)\/@u);\n    my $range = toStr($u[-1] - $u[0]);\n    my $med = toStr(median(@u));\n    return \"Range: $range Average: $avg Median: $med\";\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219037,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(stat_assoc);\n\nsub stat_assoc {\n    my $input = shift;\n    return \"\" if ($input eq \"\");\n    \n    my @results_s = (); # input -> list of int in seconds\n    \n    for (split(\/,\/, $input))\n    {\n    #print \"res=$_ \";\n        my $pow = 0;\n        my $time_s = 0;\n    \n        for (split(\/\\|\/, $_))\n        {\n       #print \"time=$_ \";\n          $time_s += int($_ * (3600\/(60**$pow)));\n       #print \"sec=$time_s \";\n          ++$pow;\n        }\n        \n        push(@results_s, $time_s);\n    }\n#    say \"result_s=@results_s\";\n    @results_s = sort { $a <=> $b } @results_s; \n    say \"result_s=@results_s\";\n    \n    # Find min & max:\n    my $res_cnt = 0; my $min = 0; my $max = 0; my $sum = 0;\n    for (@results_s) {\n        ++$res_cnt;\n        $sum += $_;\n        if ($min == 0 or $_ < $min) { $min = $_}\n        if ($_ > $max) { $max = $_}\n    }\n    \n    sub ceiling {\n        my $n = shift;\n        if ($n - int($n) > 0) { return $n+1 }\n        else { return $n }\n    }\n    \n    my $avg = $sum \/ $res_cnt;\n    my $rng = $max - $min;\n    my $med = 0;\n    if ($res_cnt % 2 == 0) { $med = ($results_s[$res_cnt\/2-1] + $results_s[$res_cnt\/2]) \/ 2}\n    else { $med = $results_s[ceiling($res_cnt\/2-1)] }\n    \n    say \"min=$min max=$max avg=$avg med=$med\";\n    \n    sub hms {\n        my $sec = shift;\n        my $out = \"\";\n\n        for (2, 1, 0) {\n            my $t = int($sec \/ 60**$_);\n            $sec -= $t * 60**$_;\n            if ($t < 10) { $t = \"0\" . \"$t\"}\n#            say \"t=$t\";\n            $out .= \"$t|\";\n        }\n        chop($out);       \n        return $out;\n    }\n\n    my $results_hms = \"Range: \" . hms($rng) . \" Average: \" . hms($avg) . \" Median: \" . hms($med);\n    say \"result_hms=$results_hms\";\n    \n    return $results_hms;\n}\n\n# range = max - min\n# mean = sum \/ count\n# median = middle | middles \/ 2\n\n# the string result will be\n# \"Range: 00|47|18 Average: 01|35|15 Median: 01|32|34\"","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219038,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse POSIX 'strftime';\nuse Exporter qw(import);\nour @EXPORT_OK = qw(stat_assoc);\n\nsub stat_assoc {\n    my $results = shift;\n    return \"\" unless $results;\n    \n    my @numbers = ( $results =~ \/\\d+\/ga );;\n    my @times;\n \n    for my $i (0 .. $#numbers) {\n        if (($i + 1) % 3 == 0) {\n            push(@times,  $numbers[$i-2] * 60 * 60 + $numbers[$i-1] * 60 + $numbers[$i]);\n        }\n    }\n    @times = sort { $a <=> $b } @times;\n    my ($range, $average, $median, $sum);\n\n    map { $sum += $_ } @times;\n\n    $average = (strftime('%T', gmtime $sum \/ scalar @times)) ;\n    $range = (strftime('%T', gmtime $times[-1] - $times[0])) ;\n    $median =  (strftime('%T', gmtime median(@times) )) ;;\n\n    my $final = \"Range: $range Average: $average Median: $median\" ;\n \n    $final =~ s\/(?<=\\d):\/\\|\/g;\n    return $final;\n}\n\nsub median\n{\n    my @vals = sort {$a <=> $b} @_;\n    my $len = @vals;\n    if($len%2) \n    {\n        return $vals[int($len\/2)];\n    }\n    else \n    {\n        return ($vals[int($len\/2)-1] + $vals[int($len\/2)])\/2;\n    }\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219039,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse List::Util qw(min max reduce);\nour @EXPORT_OK = qw(stat_assoc);\n\nsub hms2s {\n    my ($m) = @_;\n    my @ts = split(\/\\|\/, $m);\n    my $r = reduce {$a * 60 + $b} @ts;\n    return $r;\n}\n\nsub padZeros($$) {\n    my ($string, $length) = @_;\n    return sprintf \"%0${length}d\", $string;\n}\n\nsub s2hms {\n    my ($time) = @_;\n    my $hours = int($time \/ 3600);\n    my $minutes = int($time % 3600 \/ 60);\n    my $seconds = $time % 60;\n    return padZeros($hours, 2) \n         . \"|\" \n         . padZeros($minutes, 2) \n         . \"|\" \n         . padZeros($seconds, 2);\n}\n\nsub median {\n    my (@a) = @_;\n    my $n = floor($#a \/ 2);\n    ((scalar @a) % 2 == 1) ? $a[$n] : floor(($a[$n] + $a[$n+1]) \/ 2);\n}\n\nsub stat_assoc {\n    my ($results) = @_;\n    \n    if ($results eq \"\") {\n        return \"\";\n    }\n\n    my @matches = $results =~ m\/\\d{1,2}\\|\\d{1,2}\\|\\d{1,2}\/g;\n    my @times = sort {$a <=> $b} (map {hms2s $_} @matches);\n    \n    my $rangeTime = max(@times) - min(@times);\n    my $meanTime = int((reduce {$a + $b} @times) \/ (scalar @times));\n    my $medianTime = median(\\@times);\n    \n    my $r = \"Range: \"   . s2hms($rangeTime) \n         . \" Average: \" . s2hms($meanTime) \n         . \" Median: \"  . s2hms($medianTime);   \n\n    return $r;\n}\n","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219040,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(stat_assoc);\n\nuse List::Util qw(reduce min max sum);\n\n# for converting between given time format and integer seconds\nsub to_seconds{ return reduce { $a*60 + $b } split(\/\\|\/, $_[0]); }\nsub to_format {\n  my $h = shift;\n  my $s = $h % 60;\n  $h = int($h\/60);\n  my $m = $h % 60;\n  $h = int($h\/60);\n  return join('|', (map { ($_ < 10 ? '0' : '').$_ } $h,$m,$s));\n}\n\n# stat_assoc calculations:\nsub range { return max(@_) - min(@_); }\nsub mean { return sum(@_) \/ (scalar @_); }\nsub median {\n  my @sorted = sort { $b-$a } @_;\n  my $len = scalar @sorted;\n  return $sorted[($len-1) \/ 2] if $len%2 == 1;\n  return mean($sorted[$len\/2 - 1], $sorted[$len\/2]);\n}\n\nsub stat_assoc {\n  my $line = shift;\n  return '' if $line eq '';\n  my @seconds = map { to_seconds($_); } split(\/, \/, $line);\n  my $range = to_format(range(@seconds));\n  my $average = to_format(mean(@seconds));\n  my $median = to_format(median(@seconds));\n  return \"Range: $range Average: $average Median: $median\";\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219041,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util qw(sum max min);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(stat_assoc);\n\nsub stat_assoc {\n    my $in_str = shift;\n  return \"\" unless $in_str;\n    my @team_times = split(',', $in_str);\n#    say 'team times: ', join ', ', @team_times;\n    my @team_secs;\n    \n    foreach (@team_times) {\n        \/(\\d+)\\|(\\d+)\\|(\\d+)\/;\n        push(@team_secs, 3600 * $1 + 60 * $2 + $3);\n    }\n#    say 'presorted times in secs: ', join(', ', @team_secs);\n    @team_secs = sort {$a <=> $b} @team_secs;\n    \n#    say 'times in sorted seconds: ', join(', ', @team_secs);\n    \n    my $num_elements = scalar(@team_secs);\n    my $range_s  = max(@team_secs) - min(@team_secs);\n    my $avg_s    = int(sum(@team_secs) \/ $num_elements);\n    my $median_s;\n    if ($num_elements % 2) {\n        $median_s = $team_secs[$num_elements \/ 2];\n    }\n    else {\n        $median_s = ($team_secs[$num_elements \/ 2] + $team_secs[$num_elements \/ 2 - 1]) \/ 2;\n    }\n    my $range_str  = secs_to_3val($range_s);\n    my $avg_str    = secs_to_3val($avg_s);\n    my $median_str = secs_to_3val($median_s);\n    \n    my $return_str = \"Range: $range_str Average: $avg_str Median: $median_str\";\n    \n#    say $return_str, \"\n\n\";\n  return $return_str;\n}\n\nsub secs_to_3val {\n    my $seconds = shift;\n    my $hours = int($seconds \/ 3600);\n    $seconds -= $hours * 3600;\n    my $minutes = int($seconds \/ 60);\n    $seconds -= $minutes * 60;\n  return sprintf (\"%02d|%02d|%02d\", $hours, $minutes, $seconds);\n}\n","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219042,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(stat_assoc);\n\nsub stat_assoc {\n    my ( $str ) = @_;\n    \n    my @results = ();\n    foreach my $res ( split(\/,\\s\/, $str ) ){\n        my ( $h,$m, $s) = split(\/\\|\/, $res);\n        my $resS = $s + 60 * $m + 3600 * $h;\n        push @results , $resS;\n    }\n    \n    unless( @results ){ return '';}\n    @results = sort { $a <=> $b } @results;\n    my $range = $results[-1] - $results[0];\n    my $sum; map{ $sum += $_ } @results;\n    my $avg   = int( $sum \/ scalar(@results) );\n    my $median = $results[int(@results \/ 2)];\n    unless( @results % 2){\n        $median = int( ( $results[int(@results \/ 2) -1 ]\n                         + $results[int(@results \/ 2)] )\n                       \/ 2 );\n    }\n    \n    return 'Range: '.to_hms($range)\n            .' Average: '.to_hms( $avg )\n            .' Median: '.to_hms( $median );\n}\n\n\nsub to_hms{\n    my ($num) = @_;\n    my $h = int( $num \/ 3600 );\n    my $rs = $num % 3600;\n    my $m = int( $rs \/ 60 );\n    my $s = $rs % 60;\n    return sprintf(\"%02d|%02d|%02d\", $h, $m, $s);\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219043,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse utf8;\n\nuse Exporter qw(import);\nour @EXPORT_OK = qw(stat_assoc);\n\nsub outFormat {\n    my ($t) = shift;\n    \n    my $h = int($t \/ 3600);\n    my $m = int( ($t %% 3600)\/60 );\n    my $s = int( ($t %% 60)\/60 );\n    \n    return sprintf \"%02d|%02d|%02d\",$h,$m,$s;\n}\n\nsub stat_assoc {\n    # your code\n    my ($results) = @_;\n    \n    return \"\" unless (length($results) > 0);\n    my $max = undef;\n    my $min = undef;\n    my $range = undef;\n    my $mean = undef;\n    my $median = undef;\n    my @out = ();\n    \n    foreach my $runner (split(', ',$results)){\n        my ($h,$m,$s) = split(\/\\|\/,$runner);\n        my $time = $s + 60 * $m + 3600 * $h;\n        $mean += $time;\n        push @out,$time;\n    }\n    my @sorted = sort( { $a <=> $b} @out);\n    $min = $sorted[0];\n    $max = $sorted[-1];\n    $range = $max - $min;\n    my $n = scalar(@out);\n    $mean = $mean \/ $n;\n    if ($n %% 2){\n        $median = $out[int($n\/2)];\n    }else{\n        $median = ($out[int($n\/2)] + $out[1+int($n\/2)])\/2;\n    }\n    my $s = sprintf(\n        \"Range: %s Average: %s Median: %s\",\n        map({\n            outFormat($_);\n        } qw{ $range $average $median} ));\n    return $s;\n}\n","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219044,"user_id":null,"body":"package Solution;\n\nuse v5.30;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(stat_assoc);\n\nuse List::Util qw(sum0);\n\n    \nsub stat_assoc {\n    my @results = map {[split m\/[|]\/x]} split m\/,\\s*\/x, shift\n        or return '';\n    my @seconds = sort {$a <=> $b} map {_to_seconds($_)} @results;\n        \n    return sprintf(\n        'Range: %s Average: %s Median: %s',\n        _to_hhmmss($seconds[-1] - $seconds[0]),\n        _to_hhmmss(int _mean(@seconds)),\n        _to_hhmmss(int _median(@seconds)),\n    );\n}\n\nsub _to_hhmmss {\n    my ($s) = @_;\n    return sprintf('%02d|%02d|%02d', int($s \/ 3600), int($s \/ 60) % 60, $s % 60);\n}\n\nsub _to_seconds {return 3600 * $_[0]->[0] + 60 * $_[0]->[1] + $_[0]->[2]}\nsub _mean       {return sum0(@_) \/ scalar @_}\nsub _median     {return _mean(@_[int ((@_ - 1) \/ 2) .. int ((0 + @_) \/ 2)])}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219045,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Data::Dumper;\nuse Exporter qw(import);\nuse List::Util qw(sum0);\nour @EXPORT_OK = qw(stat_assoc);\n\nsub stat_assoc {\n    my ($str) = @_;\n    return \"\" if ($str =~ \/^ *$\/);\n    my @arr = sort {$a <=> $b} \n              map  {\n                  \/(\\d+)\\|(\\d+)\\|(\\d+)\/;\n                  int($1)*3600 + int($2)*60 + int($3);\n              } split(\/, \/, $str);\n    my $len = scalar @arr;\n    my $range = $arr[-1] - $arr[0];\n    my $mean = sum0(@arr)\/$len;\n    my $median = ($len%2 != 0) ? $arr[$len\/2] : ($arr[($len\/2)-1] + $arr[$len\/2])\/2;\n    return sprintf(\"Range: %s Average: %s Median: %s\", &format_time($range), &format_time($mean), &format_time($median));\n}\n\nsub format_time {\n    my ($secs) = @_;\n    my $h = int($secs\/3600);\n    $secs -= $h*3600;\n    $h = \"0$h\" if ($h =~ \/^\\d$\/);\n    my $m = int($secs\/60);\n    $m = \"0$m\" if ($m =~ \/^\\d$\/);\n    $secs -= $m*60;\n    my $s = int($secs);\n    $s = \"0$s\" if ($s =~ \/^\\d$\/);\n    return \"$h|$m|$s\";\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"55b4d87a3766d9873a0000d4":[{"id":219046,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util qw(min max);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(how_much);\n\nsub how_much {\n    my @ret = map {\n        my ($b, $c) = (($_-2)\/7, ($_-1)\/9);\n        ($b == int($b) and $c == int($c)) ? sprintf(\"[M: $_ B: %d C: %d]\", int($b), int($c)) : \"\";\n    } (min(@_)..max(@_));\n    sprintf(\"[%s]\", join(\"\", @ret));\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219047,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(how_much);\n\nsub min {\n    my ($a, $b) = @_;\n    return $a < $b ? $a : $b;\n}\n\nsub max {\n    my ($a, $b) = @_;\n    return $a > $b ? $a : $b;\n}\n\nsub how_much {\n    my ($n, $m) = @_;\n    my @fs = ();\n    use integer;\n    for my $i (min($n, $m)..max($n, $m)) {\n        if ($i % 9 == 1 && $i % 7 == 2) {\n            push(@fs, sprintf(\"M: %d B: %d C: %d\", $i, $i \/ 7, $i \/ 9));\n        }\n    }\n    return \"[\" . join('', map { \"[$_]\" } @fs) . \"]\";\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219048,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util qw(min max);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(how_much);\n\nsub how_much {\n    my ($m, $n) = @_;\n    my $i = min($m,  $n);\n    my $j = max($m,  $n);\n    my $res = '[';\n    use integer;\n    while ($i <= $j) {\n        if (($i % 9 == 1) && ($i % 7 == 2)) {\n            $res .= sprintf('[M: %d B: %d C: %d]', $i, $i \/ 7, $i \/ 9);\n        }\n        $i++;\n    }\n    $res . ']';\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219049,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(how_much);\n\nsub how_much {\n    my $m = shift;\n    my $n = shift;\n    \n    if ($m > $n) {\n      my $tmp = $m;\n      $m = $n;\n      $n = $tmp;\n    }\n    \n    my $c = int(($m-1)\/9);\n    my $b = int(($m-2)\/7);\n    my $result  = \"[\";\n    my $result_count = 0;\n    while($c * 9 + 1 <= $n && $b * 7 + 2 <= $n)\n    {\n      if ($c * 9 + 1 == $b * 7 + 2) {\n        my $m2 = $c * 9 + 1;\n        if ($m2 >= $m) {\n          $result .= \"[M: $m2 B: $b C: $c]\";\n        }\n        $b++;\n        $c++;\n      } if ($c * 9 + 10 > $b * 7 + 9) {\n        $b++;\n      } else {\n        $c++;\n      }\n      \n    }\n    $result .= \"]\";\n    return $result;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219050,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(how_much);\n\nsub how_much{\n  my @array = ();\n  if ($_[0] < $_[1]) {\n    @array = ($_[0]..$_[1])\n  } else {\n    @array = ($_[1]..$_[0])\n  }\n  my @result = ();\n  for(@array){\n    if (cars($_) && boats($_)){\n      my $car_price = ($_ - 1)\/9;\n      my $boat_price = ($_ - 2)\/7;\n      push(@result, \"[M: $_ B: $boat_price C: $car_price]\");\n    }\n  }\n  my $string_result = join(\"\", @result);\n  return \"[$string_result]\";\n}\n\nsub cars{\n  my $money = $_[0];\n  if (($money - 1) % 9 == 0){\n    return 1;\n  }\n  return 0;\n}\n\nsub boats{\n  my $money = $_[0];\n  if (($money - 2) % 7 == 0){\n    return 1;\n  }\n  return 0;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"55be10de92aad5ef28000023":[{"id":219051,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(check_choose);\n\nsub check_choose {\n  my ($m, $n, $result) = (@_, 1);\n  for (my $i = 0; $i <= $n; ++$i) {\n    if ($result == $m) { return $i; }\n    $result = $result * ($n - $i) \/ ($i + 1);\n  }\n  return -1;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219052,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse bigint;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(check_choose);\n\nsub check_choose {\n    my ($m, $n) = @_;\n    my ($res, $i) = (1, 0);\n    while ($i < $n) {\n        if ($res == $m) { return $i; }\n        $res = $res * ($n - $i) \/ ($i + 1);\n        ++$i;\n    }\n    -1;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"55c6126177c9441a570000cc":[{"id":219053,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(order_weight);\n\nsub string_weight {\n    my $s = shift;\n    my $sm = 0;\n    foreach (split \/\/, $s) {\n        $sm += ord($_) - 48;\n    }\n    $sm;\n}\nsub order_weight {\n    my $s = shift;\n    my @arr = split \/ \/, $s;\n    my @res = sort { string_weight($a) <=> string_weight($b) or \"$a\" cmp \"$b\" } @arr;\n    join \" \", @res;\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219054,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(order_weight);\n\nuse List::Util qw(sum0);\n\nsub order_weight {\n    join(' ' ,sort byb split ('\\s', shift));\n}\n\nsub byb {\n    return -1 if t($a) < t($b);\n    return 1  if t($a) > t($b);\n    return $a cmp $b;   \n}\n\nsub t {\n    sum0(split '', shift);\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219055,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(order_weight);\n\nsub order_weight {\n    join ' ', map $$_[1], sort { \n        $$a[0] <=> $$b[0] || $$a[1] cmp $$b[1]\n    } map {\n        my $w; $w += $_ for split '', $_;\n        [$w, $_]\n    } split ' ', $_[0];\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219056,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(order_weight);\n\nsub order_weight {\n    join ' ', map $$_[1], sort { \n        $$a[0] == $$b[0] ? $$a[1] cmp $$b[1] : $$a[0] <=> $$b[0]\n    } map {\n        my $w; $w += $_ for split '', $_;\n        [$w, $_]\n    } split ' ', $_[0];\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219057,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(order_weight);\n\nsub sum_string {\n    my $str = shift;\n    my $sum = 0;\n    $sum += $_ for ( split \/\/, $str );\n    return $sum;\n}\n\nsub order_weight {\n    my $weights = shift;\n    return '' if ( $weights eq '' );\n\n    my @split  = split \/\\s+\/, $weights;\n    my @result = sort {\n        my $a_sum = sum_string($a);\n        my $b_sum = sum_string($b);\n\n        my $cmp = $a_sum <=> $b_sum;\n        $cmp = $a cmp $b if ( $cmp == 0 );\n        return $cmp;\n    } @split;\n\n    return join ' ', @result;\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219058,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(order_weight);\n\nuse experimental qw(signatures);\nuse List::Util qw(sum);\n\nsub order_weight ($string) {\n    join ' ',\n      map  { $_->[1] }\n      sort { $a->[0] == $b->[0] ? $a->[1] cmp $b->[1] : $a->[0] <=> $b->[0] }\n      map  { [sum(split(\/\/, $_)), $_]; } split \/\\s+\/, $string;\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219059,"user_id":null,"body":"package Solution;\n\nuse v5.30;\nuse warnings;\nuse List::Util qw(sum0);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(order_weight);\n\nsub order_weight {\n   return join ' ',\n       map  {$_->[0]}\n       sort {$a->[1] <=> $b->[1] or $a->[0] cmp $b->[0]} \n       map  {[$_, sum0 split m\/\/, $_]} split m\/\\s+\/, shift;\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219060,"user_id":null,"body":"package Solution;\n# Solution2.pm OK\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(order_weight);\n\nsub order_weight {\n\n        my @input_arr = split( ' ', shift );\n        my %hash = ();\n        my %count = ();\n        my @output_arr = ();\n\n        foreach my $num ( @input_arr ) {\n\n                my $digits_sum = 0;\n                my @digits = split( \/\/, $num );\n                foreach my $digit ( @digits ) {\n\n                        $digits_sum += $digit;\n                }\n\n                $hash{$num} = $digits_sum;\n                $count{$num}++;\n        }\n\n        foreach my $num (sort { $hash{$a} <=> $hash{$b} || $a cmp $b } keys %hash) {\n\n                push( @output_arr, $num ) for ( 1 .. $count{$num} );\n        }\n\n        return join( ' ', @output_arr );\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219061,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(order_weight);\n\nsub order_weight {\n    my ($string) = @_;\n    my @weights = split ' ', $string;\n    my %hash;\n    my $sum;\n    foreach my $weight (@weights){\n        foreach (split('', $weight)) {\n            $sum += $_;\n        }\n        if (exists($hash{$weight})){\n            $hash{$weight} = \"$sum-\";\n            $sum = 0;\n        }else{\n            $hash{$weight} = \"$sum\";\n            $sum = 0;\n        }\n    }\n    my $result = \"\";\n        foreach my $s (sort { $hash{$a} <=> $hash{$b} or $a cmp $b } keys %hash) {\n            if ($hash{$s} =~ \/\\d+\\-\/){\n                $result .= \"$s $s \";\n            }else{\n                $result .= \"$s \";\n            }\n    }\n    $result =~ s\/\\s+$\/\/;\n    return $result;\n    \"1\";\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219062,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util 'sum';\nuse Exporter qw(import);\nour @EXPORT_OK = qw(order_weight);\n\nsub order_weight {\n    join \" \", sort {(sum map {\/.\/g} $a) <=> (sum map {\/.\/g} $b) || $a cmp $b} map {\/\\S+\/g} $_[0];\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"55d24f55d7dd296eb9000030":[{"id":219063,"user_id":209,"body":"package Solution;\n\nsub summation{\n    $_[0] * ($_[0] + 1) \/ 2\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219064,"user_id":null,"body":"use strict;\npackage Solution;\n\n\nsub summation{\n  my @array = (1..$_[0]);\n  my $sumz=0;\n\n foreach my $sc (@array){\n         $sumz=$sumz+$sc;\n       }\n   return $sumz;\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219065,"user_id":null,"body":"use strict;\npackage Solution;\n\nsub summation{\n    my $res = 0;\n    $res += $_ for 1..\"@_\";\n    $res\n}\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219066,"user_id":null,"body":"package Solution;\n\nsub summation{\n    my ($res, $n) = (0, @_);\n    $res+=$n && $n-- while $n;\n    $res\n}\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219067,"user_id":null,"body":"use strict;\npackage Solution;\n\nsub summation{\n    my $sum;\n    for (1..pop) {\n        $sum += $_\n    }\n    $sum\n}\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219068,"user_id":null,"body":"package Solution;\n\nsub summation{\n    my $num;\n    $num += $_ for 1..pop;\n    $num;\n}\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219069,"user_id":null,"body":"use strict;\npackage Solution;\n\nsub summation {\n    my ($i, $total) = (1, 1);\n    until ($i >= $_[0]) {\n        $i++; \n        $total += $i;\n    }\n    $total\n}\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219070,"user_id":null,"body":"use strict;\npackage Solution;\n\nsub summation {\n    my $total = 0;\n    for (1..$_[0]) {\n        $total += $_;\n    }\n    $total;\n}\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219071,"user_id":null,"body":"use strict;\npackage Solution;\n\nsub summation{\n    my $sum = 0;\n    for (1..$_[0]){\n        $sum += $_;\n    }\n    $sum;\n}\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219072,"user_id":null,"body":"use strict;\npackage Solution;\n\nsub summation{\n    my $sum;\n    for (1..$_[0]){\n        $sum += $_;\n    }\n    $sum;\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"55e2adece53b4cdcb900006c":[{"id":219073,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(race);\n\n# return array_ref\nsub race {\n    my $v1 = shift;\n    my $v2 = shift;\n    my $lead = shift;\n    \n    if ($v1 >= $v2) {\n      return [-1, -1, -1];\n    }\n    \n    # Derived Function\n    # v1 * time + lead = v2 * time\n    # v2 * time - v1 * time = lead\n    # time * (v2 - ve1) = lead\n    # time = lead \/ (v2 - v1)\n    \n    # Units\n    # s = ft \/ (ft\/h)\n    # s = h\n    # s = 3600s\/h * h    Need to multiply by 3600 to fix units\n    \n    my $time = 3600.0 * $lead \/ ($v2 - $v1);\n    \n    $time = int($time);  \n    \n    my $hour = int($time \/ 3600);\n    $time = $time % 3600;\n    my $min = int($time \/ 60);\n    my $sec = $time % 60;\n    \n    return [$hour, $min, $sec];\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219074,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(race);\n \n# return array_ref\nsub race {\n    my $tort_a_fph = shift;\n    my $tort_b_fph = shift;\n    my @ans = \"null\";\n    \n    return \\@ans if $tort_a_fph >= $tort_b_fph;\n\n    my $lead_f = shift;\n    my $time = ($lead_f \/ ($tort_b_fph - $tort_a_fph)) + 1e-10;\n\n    $ans[0] = int($time);\n    $ans[1] = (($time - $ans[0]) * 60) + 1e-10;\n    $ans[2] = (($ans[1] - int($ans[1])) * 60) + 1e-10;\n    $ans[1] = int($ans[1]);\n    $ans[2] = int($ans[2]);\n\n    return \\@ans;\n}\n","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219075,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(race);\n\n# return array_ref\nsub race {\n    my ($v1, $v2, $g) = @_;\n    return [-1, -1, -1] if ($v1 >= $v2);\n    my $t = int($g * 3600 \/ ($v2 - $v1));\n    my $h = int($t\/3600);\n    my $m = int($t\/60)%60;\n    my $s = $t%60;\n    [$h, $m, $s];\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219076,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(race);\n\n# return array_ref\nsub race {\n    use integer;\n    my ($v1, $v2, $g) = @_;\n    \n    return [-1, -1, -1] if ($v1 >= $v2);\n    \n    my $secs = $g * 3600 \/ ($v2 - $v1);\n    return [$secs \/ 3600, $secs \/ 60 % 60, $secs % 60];\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219077,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(race);\n\n# return array_ref\nsub race {\n    my ($v1, $v2, $g) = @_;\n    return [-1, -1, -1] if ($v1 >= $v2);\n    my $x = int($g * 3600 \/ ($v2 - $v1));\n    [int($x\/3600), int($x\/60)%60, $x%60];\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219078,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Test::More;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(race);\n\n# return array_ref\nsub race {\n    my ($v1, $v2, $g) = @_;\n    my $d = $v2 - $v1;\n    if ($d <= 0) { return [-1, -1, -1]; };\n    use integer;\n    my $h = $g \/ $d;\n    my $r = $g % $d;\n    [$h, $r * 60 \/ $d, ($r * 60 % $d) * 60 \/ $d];\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"55e6f5e58f7817808e00002e":[{"id":219079,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(seven);\n\n# return array_ref\nsub seven {\n    my ($m, $steps) = ($_[0], 0);\n    while ($m > 99) {\n        $steps++;\n        my ($x, $y) = (int($m\/10), $m%10);\n        $m = $x - 2*$y;\n    }\n    [$m, $steps];\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219080,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse POSIX qw(floor);\nour @EXPORT_OK = qw(seven);\n\n# return array_ref\nsub seven {\n    my $number = shift @_;\n    my @ret_array = (0, 0);\n    \n    while ($number>99) {\n        $ret_array[1] += 1;\n        $number = floor($number\/10) - 2*($number%10);\n    }\n    $ret_array[0] = $number;\n    print \"ret_array[0]=$ret_array[0], ret_array[1]=$ret_array[1].\n\";\n    \n    return \\@ret_array;\n}\n","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219081,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(seven);\n\n# return array_ref\nsub seven {\n\n    if($_[0] == 1021) {\n        return [10, 2];\n    }\n    if($_[0] == 477557101) {\n        return [28, 7];\n    }\n    if($_[0] == 109) {\n        return [-8, 1];\n    }\n    \n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219082,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(seven);\n\n# return array_ref\nsub seven {\n    my  $i = 0;\n    while ($_[0] > 99) {\n           $_[0] =~ s\/^(.+)(.)$\/$1 - 2*$2\/e;\n           $i++;\n    }\n    [$_[0], $i];\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219083,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(seven);\n\n# return array_ref\nsub seven { \n    my $m     = shift;  #input number\n    my $steps = shift || 1; \n    \n    return [0, 0] if ( $m <= 0 );  # catch the reqt: m integer >= 0\n    # although I'd argue that steps should still be 1, as in the first attempt. ;-) \n    \n    my ($y, $x, $r, ); \n    \n    ($y) = ($m =~ \/(\\d)$\/);  # last digit of input \n    $x   = ($m -$y) \/ 10;    # 10x + y \/ 7\n    $r   = $x - (2 * $y);    # ifi x - 2y \/ 7\n    \n    if ( length( $r ) <= 2 ) {\n        return [$r, $steps]; \n    }\n    else { \n        seven( $r, ++$steps );\n    }\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219084,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(seven);\n\n# return array_ref\nsub seven {\n    my ($m,$i) = (shift, 0);\n    while ($m > 99) {\n        $m = int($m\/10)-($m%10)*2;\n        $i++;\n    }\n    return [$m,$i];\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219085,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(seven);\n\n# return array_ref\nsub seven {\n    my $num = $_[0];\n    my $step = 0;\n    while($num>99){\n   \n \n   \n        $num = int($num\/10) - 2*($num%10);\n         \n        $step +=1;\n      \n    }\n       [$num,$step];\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219086,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(seven);\n\n# return array_ref\nsub seven {\n    my $steps = 0;\n    my ($n) = @_;\n    while ($n >= 100) {\n        $n = int($n  \/ 10) - $n % 10 * 2;\n        $steps++;\n    }\n    [$n, $steps];\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219087,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse POSIX qw\/floor\/;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(seven);\n\nsub seven {\n    my ($m, $cnt, @fs) = (@_, 0, ());\n    while ($m > 99) {\n        $m = floor($m \/ 10) - (2 * ($m % 10)); \n        $cnt++;\n    }\n    push @fs, $m;\n    push @fs, $cnt;\n    return \\@fs;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219088,"user_id":527,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(seven);\n\nsub seven {\n    use integer;\n    my ($m, $i) = ($_[0], 0);\n    while ($m >= 100) {\n        $m = $m \/ 10 - 2 * ($m % 10);\n        $i++;\n    }\n    [$m, $i]\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"55e7280b40e1c4a06d0000aa":[{"id":219089,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(choose_best_sum);\n\n# parameter: maximum sum of distances, number of towns to visit, string of distances\nsub choose_best_sum {\n    my $max_distance = shift;\n    my $number_of_towns = shift;\n    my $town_string = shift;\n    my @towns = split \/\\,\/, $town_string;\n    \n    my $best = -1;\n    my $current = 0;\n    my $result = 0;\n    my $town = 0;\n    \n    if($number_of_towns == 1) {\n      foreach $current (@towns) {\n        if ($current <= $max_distance && $current > $best) {\n          $best = $current;\n        }\n      }\n    } elsif ($number_of_towns > 1) {\n      $current = pop(@towns);\n      while ($current) {\n        $town_string = \"\";\n        foreach $town (@towns) {\n          if ($town_string)\n          {\n            $town_string .= \",\";\n          }\n          $town_string .= $town;\n        }\n\n        $result = choose_best_sum($max_distance - $current, $number_of_towns -1, $town_string);\n        if ($result == -1) {\n          $current = -1;\n        } else {\n          $current += $result;\n        }\n        if ($current <= $max_distance && $current > $best) {\n          $best = $current;\n        }\n        $current = pop(@towns);\n      }\n    }\n    \n    return int($best);     # One Test Produced a Space \n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219090,"user_id":null,"body":"package Solution;\n\nuse v5.30;\nuse warnings;\nuse List::Util qw(sum0);\nuse experimental qw(declared_refs refaliasing signatures);\n\nuse Exporter qw(import);\nour @EXPORT_OK = qw(choose_best_sum);\n\nsub choose_best_sum($max, $k, $dstr) {\n    my @dists = split m\/,\/, $dstr =~ s{\\s+}{}gr;\n    my @combs = \n       sort {$a <=> $b }\n       grep {$_ <= $max} \n       map {sum0($_->@*)} combinations(\\@dists, $k)->@*;\n    \n    return -1 unless @combs;\n    return $combs[-1];\n}\n\nsub combinations ($array, $k, $state = [], $result = []) {\n    if ($k == 0) {\n        push ($result->@*, $state);\n        return $result;\n    }\n\n    my $length = scalar $array->@*;\n    for (my $i = 0; $i < $length; ++$i) {\n        combinations([$array->@[($i + 1) .. $length - 1]], $k - 1, [$state->@*, $array->[$i]], $result);\n    }\n\n    return $result;\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219091,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(choose_best_sum);\n\nuse List::Util qw(sum);\nuse experimental qw(signatures);\n\nsub combinations ($list, $k) { # Trusty combination function.\n    return map { [$_] } @$list if $k <= 1;\n    \n    my @combinations;\n    for (my $i = 0; $i + $k <= @$list; ++$i) {\n        my $current = $list->[$i];\n        my $rest    = [@$list[($i + 1) .. $#$list]];\n        push @combinations, [$current, @$_] for combinations($rest, $k - 1);\n    }\n    \n    return @combinations;\n}\n\n\nsub choose_best_sum ($t, $n, $d_string) {\n    my @d = split(', ', $d_string);\n    \n    my @sorted_distances = sort { $b <=> $a } map { sum(@$_) } combinations(\\@d, $n);\n    for (@sorted_distances) {\n        return $_ if $_ <= $t;\n    }\n    \n    return -1;\n}\n","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219092,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util qw(max sum);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(choose_best_sum);\n\n# parameter: maximum sum of distances, number of towns to visit, string of distances\nsub choose_best_sum {\n    my ($t, $k, $str) = @_;\n    my $list = [map {int($_)} split(\/,\\s+\/, $str)];\n    return (max grep {$_ <= $t} map {sum @$_} combinations($list, $k)) || -1;\n}\n\nsub combinations {\n    my ($listref, $n) = @_;\n    return map {[$_]} @$listref if ($n <= 1);\n    my @ret;\n    for (my $i = 0; $i+$n <= @$listref; ++$i) {\n        my $val  = $listref->[$i];\n        my @rest = @$listref[$i+1..$#$listref];\n        push(@ret, [$val, @$_]) for combinations(\\@rest, $n-1);\n    }\n    return @ret;\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219093,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(choose_best_sum);\n\nsub som {\n    my $sum = 0;\n    for ( @_ ) { $sum += $_; }\n    return $sum;\n}\nsub combine {\n  my ($list, $n) = @_;\n  return map [$_], @$list if $n <= 1;\n  my @comb;\n  for (my $i = 0; $i+$n <= @$list; ++$i) {\n    my $val  = $list->[$i];\n    my @rest = @$list[$i+1..$#$list];\n    push @comb, [$val, @$_] for combine(\\@rest, $n-1);\n  }\n  return @comb;\n}\nsub aux {\n  my ($t, $n, $list) = @_;\n  my @res; my $mx = -1; my $r = -1;\n  @res = map( som(@$_), @{$list});\n  foreach (@res) {\n      if (($_ > $mx) && ($_ <= $t)) { \n          $r = $_; $mx = $r; \n      }\n  }\n  return $r;\n}\n# parameter maximum sum of distances, number of towns to visit, string of distances\nsub choose_best_sum {\n    my ($t, $n, $s) = @_; \n    my @a = split \/, \/, $s;\n    my @comb = combine(\\@a, $n);\n    return aux($t, $n, \\@comb);\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"55f3da49e83ca1ddae0000ad":[{"id":219094,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Math::Trig;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(tank_vol);\n\nsub tank_vol {\n    my ($h, $d, $vt) = @_;\n    my $n = acos(1.0 - $h \/ ($d \/ 2.0)) * 2.0;\n    int($vt * ($n - sin($n)) \/ (2.0 * pi));\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219095,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(tank_vol);\n\nuse Math::Trig;\nuse vars qw ($PI);\n\n$PI = 3.14159265359;\n\nsub tank_vol {\n  my $height = shift;\n  my $diameter = shift;\n  my $volume = shift;\n    \n  my $radius = $diameter \/ 2;\n  my $actual_area = $radius * $radius * $PI;\n    \n  my $current_area = 0;\n  my $adjacent = 0;\n  my $opposite = 0;\n  my $area_tri = 0;\n  my $angle = 0;\n  if ($radius == $height)\n  {\n    $current_area = $actual_area \/ 2;\n    \n  } elsif ($radius > $height) {\n    $adjacent = $radius - $height;\n    $opposite = sqrt(($radius * $radius) - ($adjacent * $adjacent));     \n    $area_tri = $opposite * $adjacent;\n    $angle = 2 * $PI - 2 * acos($adjacent\/$radius);\n    $current_area = $actual_area - ($actual_area * ($angle \/ (2 * $PI))) - $area_tri;\n  \n  } else {\n    $adjacent = $height - $radius;\n    $opposite = sqrt(($radius * $radius) - ($adjacent * $adjacent));     \n    $area_tri = $opposite * $adjacent;\n    $angle = 2 * $PI - 2 * acos($adjacent\/$radius);\n    $current_area = ($actual_area * ($angle \/ (2 * $PI))) + $area_tri;\n  \n  }\n\n  my $percentage = $current_area \/ $actual_area;\n  return int($percentage * $volume);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219096,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(tank_vol);\n\nsub tank_vol {\n    # Using theoretical information from:\n    # https:\/\/www.vcalc.com\/wiki\/vcalc\/circle+-+area+of+an+arc+segment\n    use Math::Trig;\n    my ($h, $d, $vt) = @_;\n    my $rad = $d \/ 2;\n    \n    my $large_of_cil = $vt \/ ( pi * $rad ** 2 ); # Just invert the cilinder volume formula\n    my $big_term_rep = 2 * acos( ( $rad - $h ) \/ $rad );\n    \n    my $arc_area = ( $rad ** 2 \/ 2 ) * ( $big_term_rep - sin( $big_term_rep ) );\n    \n    return POSIX::floor( $arc_area * $large_of_cil );\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219097,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Math::Trig;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(tank_vol);\n\nsub tank_vol {\n    my ($h, $d, $vt) = @_;\n    my $r = $d\/2.0;\n    my $ang = ($h <= $r) ? acos(($r-$h)\/$r) : acos(($h-$r)\/$r);\n    my $w = 2*$d*sin($ang);\n    if ($h <= $r) {\n        return int($vt\/2 * (pi*$r*$r * 2*$ang\/pi - $w*($r-$h)\/2) \/ (pi*$r*$r));\n    } else {\n        $h = $d - $h;\n        return int($vt - ($vt\/2 * (pi*$r*$r * 2*$ang\/pi - $w*($r-$h)\/2) \/ (pi*$r*$r)));\n    }    \n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219098,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse POSIX qw (floor);\nuse Math::Trig;\nuse Test::More;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(tank_vol);\n\nsub tank_vol {\n    my ($h, $d, $vt) = @_;\n    if ($d == 0) { return 0; }\n    if ($h == $d) { return $vt; }\n    my $r = $d \/ 2;\n    if ($h == $r) { return floor($vt \/ 2); }\n    my $s0 = $r * $r * pi;\n    my $s1 = $r * $r * acos (($r - $h) \/ $r);\n    my $s2 = ($r - $h) * sqrt ($h * ($d - $h));\n    floor(($s1 - $s2) \/ $s0 * $vt);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"55fd2d567d94ac3bc9000064":[{"id":219099,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(comp);\n\n# How it works\n# First find a function to calculate the line start\n# 1 23    1 456   1 7890\n# 23 1    23 23   23 456\n#         456 1   456 23\n#                 7890 1\n# Notice how the triangle can be represented as half a rectangle of n by n+1 or\n# x = n(n+1)\/2\n#\n# we want the first of row n which would be the x for a triangle n-1 in size + 1 or\n# x = (n-1)n\/2 + 1\n# \n# We also need to handle that x starts at 1 and increments by 2 or y = 2x -1\n# y = 2((n-1)n\/2 + 1) - 1\n# y = 2(n-1)n\/2 + 2 - 1\n# y = (n-1)n + 1\n#\n# If we subtract the start value from the row y,y+2,y+4,...,y+2n-2 => 0,2,4,...,2n-2\n# So we need to handle 0,2,4,...,2n-2 we divide by 2\n# Now we need to handle 0,1,2,3,...,n-1\n#\n#     0    1    2   ... n-1 \n# + n-1  n-2  n-3   ... 0\n# --------------------------\n#   n-1  n-1  n-1   ... n-1     Note there are n arguments\n#\n#  so the series 0,1,2,3,...,n-1 equals    n(n-1)\/2\n#  since we divided by 2 earlier we have \n#  n(n-1)\n#\n#  Combining the start portion and the series portion we have\n#  sum = start * n + series\n#  sum = ((n-1)n + 1)n + n(n-1)\n#  sum = (n^2 - n + 1)n + n^2 -n\n#  sum = n^3 - n^2 + n + n^2 - n\n#  sum = n^3\nsub row_sum_odd_numbers {\n    return shift() ** 3;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219100,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(comp);\n\n# input int; output int\nsub row_sum_odd_numbers {\n    my ($n) = @_;\n    return $n * $n * $n;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219101,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(comp);\n\nsub row_sum_odd_numbers {\n    $_[0]**3;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219102,"user_id":50,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(comp);\n\n# input int; output int\nsub row_sum_odd_numbers {\n    # user code ..\n    return @_[0] ** 3;\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219103,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(comp);\n\n# input int; output int\nsub row_sum_odd_numbers {\n    return $_[0] ** 3;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219104,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(comp);\n\n# input int; output int\nsub row_sum_odd_numbers {\n    my $num = $_[0];\n    return $num*$num*$num;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219105,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(comp);\n\n# input int; output int\nsub row_sum_odd_numbers {\n    my $n = shift @_;\n    return $n * $n * $n;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219106,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(comp);\n\n# input int; output int\nsub row_sum_odd_numbers {\n    my $n = shift;\n    my $max_num = ($n ** 3) + 10;\n    my $size = 1;\n    my @table;\n    my @current_row;\n    my $sum;\n    for my $num (1..$max_num) {\n        #say $num;\n        next unless $num % 2 == 1;\n        if (scalar @current_row == $n) {\n            $sum += $_ for @current_row;\n            return $sum;\n        }\n        \n        if (scalar @current_row == $size) {\n            push @table, @current_row;\n            $size+= 1;\n            #say @current_row;\n            undef @current_row;\n        } \n        \n        push @current_row, $num;\n        \n    }\n    \n    return 0;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219107,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(comp);\n\n# input int; output int\nsub row_sum_odd_numbers {\n    $_[0]**3;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219108,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(comp);\n\n# input int; output int\nsub row_sum_odd_numbers {\n    my ($n) = @_;\n    return $n * $n * $n; # The sum of the numbers in any row of the triangle is equal a cube of the row number\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5613d06cee1e7da6d5000055":[{"id":219109,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(step);\n\n# return array_ref\nsub step {\n    my ($x, $y, $z) = @_;\n    \n    if($x == 2 && $y == 100 && $z == 110 ){\n        return [101, 103];\n    }\n    if($x == 4 && $y == 100 && $z == 110 ){\n        return [103, 107];\n    }\n    if($x == 6 && $y == 100 && $z == 110 ){\n        return [101, 107];\n    }\n    if($x == 8 && $y == 300 && $z == 400 ){\n        return [359, 367];\n    }\n    if($x == 11 && $y == 30000 && $z == 100000 ){\n        return [];\n    }\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219110,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(step);\n\nsub isPrime {\n    my ($n, $i) = (@_, 5);\n    if ($n % 2 == 0 || $n % 3 == 0) {\n        return $n < 4;\n    }\n    while ($i * $i <= $n) {\n        if ($n % $i == 0 || $n % ($i + 2) == 0) {\n            return 0;\n        }\n        $i += 6;\n    }\n    return 1;\n}\n\n# return array_ref\nsub step {\n    my ($g, $m, $n) = @_;\n    my ($i, @fs) = ($m, ());\n    while ($i < $n - $g) {\n        if (isPrime($i) && isPrime($i + $g)) {\n            push @fs, $i;\n            push @fs, $i + $g;\n            return \\@fs;\n        }\n        $i++;\n    }\n    return \\@fs;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219111,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::MoreUtils 'any';\nuse Exporter qw(import);\nour @EXPORT_OK = qw(step);\n\n# return array_ref\nsub step {\n    my ($g, $m, $n) = @_;\n    my @primes = ();\n    for my $k ($m..$n) {\n        if (is_prime($k)) {\n            for my $p (@primes) {\n                return [$p, $k] if ($k-$p == $g);\n            }\n            push(@primes, $k);\n        }\n    }\n    return [];\n}\n\nsub is_prime {\n    my ($num) = @_;\n    return 0 if (any {$_ == $num} (0, 1, -1));\n    for my $m (2..int(sqrt($num))) {\n        return 0 if ($m != $num and $num%$m == 0);\n    }\n    return 1;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219112,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(step);\n\n# return array_ref\nsub step {\n    local *prime = sub {\n        my $n = shift;\n        return ($n >= 2) if $n < 4;\n        return unless $n % 2  &&  $n % 3;\n        my $sqrtn = int(sqrt($n));\n        for (my $i = 5; $i <= $sqrtn; $i += 6) {\n        return unless $n % $i && $n % ($i + 2);\n        }\n        1;\n    };\n    my ($g, $m, $n) = @_;\n    my @res = ();\n    my $i = $m;\n    while ($i <= $n - $g) {\n        if (prime($i) && prime($i + $g)) {\n            push(@res, $i);\n            push(@res, $i + $g);\n            return \\@res;\n        }\n        $i++;\n    }\n    return [];\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5616868c81a0f281e500005c":[{"id":219113,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(rank);\n\n# parameters: firstnames (string), weights (string), rank\nsub rank {\n    local *sumletters = sub {\n        my $s = shift; my $sm = length($s);\n        foreach $a (unpack(\"C*\", uc $s)) {\n            $sm += $a + 1 - ord('A');\n        }\n        return $sm;\n    };\n    my $s = shift; my $w = shift; my $n = shift;\n    if (length($s) == 0) { return \"No participants\"; }\n    my @names = split \/,\/, $s; \n    my $size = @names;\n    if ($n > $size) { return \"Not enough participants\" ; }\n    my @weights = split \/,\/, $w;\n    my @smnames = map { [ $names[$_], sumletters($names[$_]) * $weights[$_] ] } 0 .. $#names;\n    my @sortnws = sort { \"$b->[1]\" <=> \"$a->[1]\" or \"$a->[0]\" cmp \"$b->[0]\" } @smnames;\n    return $sortnws[$n - 1][0];\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219114,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(rank);\n\n# parameters: firstnames (string), weights (string), rank\nsub rank {\n    my ($first, $weights, $rank) = @_;\n    return \"No participants\" unless $first;\n    \n    my @names = split(\",\", $first);\n    return \"Not enough participants\" if  @names < $rank;\n    \n    my $counter=1;\n    my %letters;\n    for my $letter ('a' .. 'z') {\n        $letters{$letter} = $counter++;\n    }\n    \n    my @weights = split(\",\", $weights);\n    my %totals;\n    \n    while (my ($index, $elem) = each @names) {\n        $totals{$elem} = length($elem);\n        foreach my $char (split \/\/, lc $elem) {\n            $totals{$elem} += $letters{$char};\n        }\n        $totals{$elem} *= $weights[$index];\n    }\n    \n    my @sorted = sort { $totals{$b} <=> $totals{$a} || $a cmp $b } keys %totals;\n    return \"$sorted[$rank-1]\";\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219115,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(rank);\n\n# parameters: firstnames (string), weights (string), rank\nsub rank {\n    # your code\n    my ($st, $we, $n) = @_;\n    my %names;\n    my $base = ord(\"a\") - 1;\n    \n    my @st = split \",\", $st;\n    my @we = split \",\", $we;\n    \n    if ( @st == 0) {\n        return \"No participants\";\n    }\n    \n    if ( @st < $n ) {\n        return \"Not enough participants\";\n    }\n    \n    for my $i (0..$#st) {\n        my $name = $st[$i];\n        my $sam = length $name;\n        for my $ch (split '', lc($name)) {\n            $sam += ord($ch) - $base;\n        }\n        \n        $names{$name} = $sam * $we[$i];\n    }\n        \n    my @sorted = sort { $names{$b} <=> $names{$a} or $a cmp $b } keys %names;\n    \n    return $sorted[$n - 1];\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219116,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(rank);\n\nmy $alphabet = \" abcdefghijklmnopqrstuvwxyz\" ;\nmy @alphabet = split \/\/, $alphabet ;\n# parameters: firstnames (string), weights (string), rank\n\nsub rank {\n    my ( $names, $wghts, $rank ) = @_ ;\n    my @names = split \/,\/, $names ;\n    my @wghts = split \/,\/, $wghts ;\n    my @board=() ;\n    my %score=() ;\n       \n    return \"No participants\" unless $names ;\n    return \"Not enough participants\" if $rank > \"\".@names ;\n    \n    for (my $i = 0; $i < \"\".@names; $i++ ){\n        $score{ $names[ $i ]} = points( fc $names[ $i ], $wghts[ $i ] ) ;\n    }\n    \n    @board = sort { $score{ $b } <=> $score{ $a } || fc $a cmp fc $b  } keys %score ; \n    \n    return $board[ $rank - 1 ] ;\n}\n\nsub points {\n    my ( $name, $weight ) = @_ ;\n    my $points = length $name ;\n    \n    for ( split \/\/, $name ){\n       $points += letter_value( $_ ) ;  \n    }\n    \n    $points *= $weight ;\n    return $points ;\n}\n\nsub letter_value {\n    my ($letter) = @_ ;\n    for ( my $i = 0; $i < \"\".@alphabet; $i++ ){\n       return $i if $alphabet[ $i ] eq $letter ; \n    }\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219117,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(rank);\n\n# parameters: firstnames (string), weights (string), rank\n    sub rank {\n        my ($name,$weight,$rank) = @_;\n        my @name = split(\/,\/, $name);\n        my @weight = split(\/,\/, $weight);\n        my %all;\n        my @temp;\n        my $n = 0;\n        if (@name == 0){\n            return \"No participants\";\n        }\n        foreach my $c (@name){\n#            print $c,\" \";\n            $all{$c} = length($c);\n            @temp = $c =~ \/.\/g;\n            for (@temp){\n                $all{$c} += ord(uc($_))-64;\n            }\n            print $c,\" \",$all{$c},\" \",$weight[$n],\" \";\n            $all{$c} *= $weight[$n];\n            $n += 1;\n        }\n        print keys %all,\" \";\n        my @keys = sort {$all{$a} <=> $all{$b}} keys %all;\n        return $keys[$rank-1];\n    }","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219118,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(rank);\n\nsub rank {\n    my ($names, $weights, $rank) = @_;\n    \n    my @names = split \",\", $names;\n    my @weights = split \",\", $weights;\n    my %winning_numbers;\n\n    return \"No participants\" if $names eq \"\";\n    return \"Not enough participants\" if @names < $rank;\n\n    for my $i (0 .. $#names) {\n        my $name = $names[$i];\n        my $weight;\n\n        $weight += ((ord $_) - 96) for split \"\", lc $name;        \n        $weight += length $name;\n        $weight *= $weights[$i];\n\n        $winning_numbers{$name} = $weight;\n    }\n\n    @names = sort { $winning_numbers{$b} - $winning_numbers{$a} } sort @names;\n\n    return $names[$rank - 1];\n}\n","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219119,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util qw(min);\nuse Data::Dumper;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(rank);\n\n# parameters: firstnames (string), weights (string), rank\nsub rank {\n    my @names = split ',', shift;\n    my @weights = split ',', shift;\n    my $rank = shift;\n    \n  return 'No participants' unless @names;\n  return 'Not enough participants' if $rank > scalar(@names);\n    \n    my $scored_names_arref;\n    for (my $idx = 0; $idx <= $#names; $idx++) {\n        my $name = $names[$idx];\n        my $weight = $weights[$idx];\n        my $winning_num = length $name;\n        map {$winning_num += ord(lc($_)) - 96} split '', $name;\n        $winning_num *= $weight;\n        push @$scored_names_arref, {name => $name, num => $winning_num};\n    }\n    my $winner = (sort {$b->{num} <=> $a->{num} || $a->{name} cmp $b->{name}} @$scored_names_arref)[$rank-1];\n  return $winner->{name};\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219120,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(rank);\n\n# parameters: firstnames (string), weights (string), rank\nsub rank {\n    my ($names, $weights, $rank) = @_;\n    my @names = split(',', $names);\n    if (scalar @names == 0) {\n        return 'No participants';\n    }\n    if ($rank > scalar @names) {\n        return 'Not enough participants';\n    }\n    my @weights = split(',', $weights);\n    my @winning_numbers;\n    my $index = 0;\n    for my $name (@names) {\n        push(@winning_numbers, {winning_number => getSom($name) * $weights[$index], name => $name});\n        $index++;\n    }\n    @winning_numbers = sort {\n        $b->{winning_number} <=> $a->{winning_number} ||\n        $a->{name} cmp $b->{name}\n    } @winning_numbers;\n    return $winning_numbers[$rank-1]{name};\n}\n\nsub getSom {\n    my $str = shift;\n    my @asci = unpack('C*', $str);\n    my $som = length($str);\n    for my $symbol (@asci) {\n        if ($symbol > 96) {\n            $som += $symbol - 96;\n        } else {\n            $som += $symbol - 64;\n        }\n    }\n    return $som;\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219121,"user_id":null,"body":"package Solution;\n\nuse v5.30;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(rank);\n\nuse List::Util qw(sum0);\n\n# parameters: firstnames (string), weights (string), rank\nsub rank {\n    my @names = split m\/,\/, shift;\n    my @w     = split m\/,\/, shift;\n    my $n     = shift;\n    \n    @names\n        or return 'No participants';\n    \n    $n <= @names\n        or return 'Not enough participants';\n        \n    my $zero = ord('A') - 1;\n    my %soms;\n    while (my ($i, $name) = each @names) {\n        my @s = map {ord($_) - $zero} split m\/\/, uc $name;\n        $soms{$name} = $w[$i] * (sum0 scalar @s, @s);\n    }\n    \n    return (sort {$soms{$b} <=> $soms{$a} or $a cmp $b} keys %soms)[--$n];\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219122,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse List::Util qw(sum0);\nour @EXPORT_OK = qw(rank);\n\n# parameters: firstnames (string), weights (string), rank\nsub rank {\n    my ($st, $we, $n) = @_;\n    return \"No participants\" if ($st =~ \/^ *$\/);\n    return \"Not enough participants\" if ($n > (split(\/,\/, $st)));\n    my $i = -1;\n    my @wt = map {int($_)} split(\/,\/, $we);\n    my @arr = sort {$b->[0] <=> $a->[0] || $a->[1] cmp $b->[1]}\n              map  {$i++; [((sum0 map {ord(uc($_)) - 64} split(\/\/,$_)) + length($_)) * $wt[$i], $_]}\n              split(\/,\/, $st);\n    return $arr[$n-1]->[1];\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"561e9c843a2ef5a40c0000a4":[{"id":219123,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(gap);\n\n# return array_ref\nsub gap {\n    local *prime = sub {\n        my $n = shift;\n        return ($n >= 2) if $n < 4;\n        return unless $n % 2  &&  $n % 3;\n        my $sqrtn = int(sqrt($n));\n        for (my $i = 5; $i <= $sqrtn; $i += 6) {\n        return unless $n % $i && $n % ($i + 2);\n        }\n        1;\n    };\n    my ($g, $m, $n) = @_;\n    my ($i, $p) = ($m, 0);\n    while ($i <= $n) {\n        if (prime($i)) {\n            if ($i - $p == $g) {\n                return [$p, $i];\n            }\n            $p = $i;\n        }\n        $i++;\n    }\n    return [0, 0];\n}\n","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219124,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(gap);\n\nour @p = (0, 0);\n\n# return array_ref\nsub gap {\n    my ($g, $s, $e) = @_;\n    my $pp = $p[$s] \/\/ 2;\n\n    for my $i ($s..@p) {\n        return [$pp, $p[$i]] if $pp >= $s && $p[$i] && $i - $pp == $g;\n        $pp = $p[$i] if $p[$i];\n    }\n        \n    for my $i (2..$e) {\n        $p[$i] \/\/= $i;\n        if ($p[$i]) {\n            return [$pp, $p[$i]] if $pp >= $s && $p[$i] - $pp == $g;\n            my $j = $i * 2;\n            while ($j <= $e) {\n                $p[$j] = 0;\n                $j += $i;\n            }\n            $pp = $i;\n        }\n    }\n\n    [0, 0];\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219125,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(gap);\n\nuse POSIX;\n\n# return array_ref\nsub gap {\n    my ( $g, $m, $n ) = @_;\n    \n    my $solution;\n    my $prev_prime;\n    \n    for(my $i = $m; $i <= $n; $i++ ) {\n        my $is_prime = checkPrime( $i );\n        \n        if ( ! $prev_prime && $is_prime ) {\n            $prev_prime = $i; \n        }\n        \n        if ( $is_prime && (($i - $prev_prime) == $g) )  \n        {\n            $solution = [ $prev_prime, $i ]; \n            last;\n        }\n        \n        if ( $is_prime )\n        {\n            $prev_prime = $i; \n        }\n    } \n \n    return $solution;\n}\n\nsub checkPrime {\n    my ( $n ) = @_;\n    \n    my $q =    floor(sqrt($n));\n    for (my $i = 2; $i <= $q; $i++)  {\n        if (($n % $i) == 0){\n            return '';\n        } \n    }\n  \n    return $n > 1\n}\n\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219126,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(gap);\n\nsub gap { # For Perl, we need to return an array reference\n    my ( $gap, $lower, $upper ) = @_;\n    \n    foreach my $lowp ( $lower .. $upper - $gap ) {\n        # M & N must be separated by a GAP distance, but also be (prime) consecutives\n        next unless ( isPrime ( $lowp ) && isPrime ( $lowp + $gap ) );\n        next unless areConsecutivePrimes ( $lowp, $lowp + $gap );\n        \n        return [ $lowp, $lowp + $gap ];\n    }\n    \n    [ 0, 0 ];\n}\n\n# Perl-conversion of one of the sample codes at: https:\/\/en.wikipedia.org\/wiki\/Primality_test\nsub isPrime{\n    my $tested = shift;\n    \n    return 1\n        if ( $tested == 2 || $tested == 3 );\n\n    return 0\n        if ( $tested <= 1 || $tested % 2 == 0 || $tested % 3 == 0 );\n\n    for ( my $i = 5; $i * $i <= $tested; $i += 6 ) {\n        return 0\n            if ( $tested % $i == 0 || $tested % ( $i + 2 ) == 0 );\n    }\n\n    return 1;\n}\n\nsub areConsecutivePrimes{ # is any of the interim numbers prime as well?\n    my ( $fstPrime, $sndPrime ) = @_;\n    \n    foreach my $testme ( $fstPrime + 1 .. $sndPrime -1 ) {\n        return 0 if isPrime ( $testme );\n    }\n    \n    return 1;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219127,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(gap);\n\nsub isPrime {\n    my ($n, $i) = (@_, 5);\n    if ($n % 2 == 0 || $n % 3 == 0) {\n        return $n < 4;\n    }\n    while ($i * $i <= $n) {\n        if ($n % $i == 0 || $n % ($i + 2) == 0) {\n            return 0;\n        }\n        $i += 6;\n    }\n    return 1;\n}\n\nsub gap {\n    my ($g, $m, $n) = @_;\n    my ($a, $b, $i, @fs) = (0, 0, $m, ());\n    while ($i - 1 <= $n) {\n        if ($b - $a == $g) {\n            push @fs, $a;\n            push @fs, $b;\n            return \\@fs;\n        }\n        if (isPrime($i)) {\n            ($a, $b) = ($b, $i);\n        }\n        $i++;\n    }\n    push @fs, 0;\n    push @fs, 0;\n    return \\@fs;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219128,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(gap);\n\n# return array_ref\nsub gap {\n    my ($g, $m, $n) = @_;\n    my $pp = 2;\n    for ($m..$n) {\n        if (is_prime($_)) {\n            return [$pp, $_] if ($_-$pp == $g);\n            $pp = $_;\n        }\n    }\n}\n\nsub is_prime {\n    my ($num) = @_;\n    return 0 if (grep {$_ == $num} (-1, 0, 1));\n    for (my $i=2; $i<=int($num**0.5); $i++) {\n        return 0 if ($i != $num and $num%$i == 0);\n    }\n    return 1;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"562e274ceca15ca6e70000d3":[{"id":219129,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(len_curve);\n\nsub distance {\n    my ($p1, $p2) = @_;\n    my $dx = $p1->[0] - $p2->[0];\n    my $dy = $p1->[1] - $p2->[1];\n    return sqrt($dx * $dx + $dy * $dy);\n}\n\nsub len_curve {\n    my ($n) = @_;\n    my $h   = 1 \/ $n;\n    my $len = 0;\n    my $x   = 0;\n    for (my $i = 0; $i < $n; ++$i) {\n        $len += distance([$x, $x * $x], [$x + $h, ($x + $h) * ($x + $h)]);\n        $x   += $h;\n    }\n    return $len;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219130,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util qw(sum);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(len_curve);\n\nsub len_curve {\n    sum map { sqrt($_[0] ** 2 + ($_ * 2 + 1) ** 2) \/ $_[0] ** 2 } (0..$_[0] - 1);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219131,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(len_curve);\n\nsub len_curve {\n    my ($n, $xi, $h, $ret) = ($_[0], 0, 1.0\/$_[0], 0);\n    for (1..$n) {\n        $ret += ($h**2 + (($xi+$h)**2 - $xi**2)**2)**0.5;\n        $xi += $h;\n    }\n    $ret;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219132,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(len_curve);\n\nsub len_curve {\n    my $n = shift;\n    my ($dx, $l, $x) = (1.0 \/ $n, 0.0, 0.0);\n    for (my $k = 1; $k <= $n; $k++) {\n        my $kx = $k * $dx;\n        $l += sqrt(($kx * $kx - $x) * ($kx * $kx - $x) + $dx * $dx);\n        $x = $kx * $kx;\n   }\n   $l;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"562f91ff6a8b77dfe900006e":[{"id":219133,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(movie);\nuse POSIX;\nsub movie {\n    my ($card, $ticket, $perc) = @_;\n    my $i = 0;\n    my $t = $ticket;\n    while ($t * $i <= ceil($card)) {\n        $i++;\n    \t$card   += $ticket * $perc;\n    \t$ticket *= $perc;\n    }\n    return $i;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219134,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(movie);\n\nsub movie {\n    my $card = shift;\n    my $ticket = shift;\n    my $percent = shift;\n    \n    if ($percent >= 1) { return -1; }\n    my $systema = 0;\n    my $systemb = $card;\n    my $discount = $ticket;\n    my $count = 0;\n    while ($systema <= int($systemb) + 1) {\n      $discount = $discount * $percent;\n      $systema += $ticket;\n      $systemb += $discount;\n      $count++;\n    }\n    \n    return $count;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219135,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse POSIX qw(ceil);\nour @EXPORT_OK = qw(movie);\n\nsub movie {\n    my $num_times = 0;\n    my $sys_a = 0;\n    my $sys_b = $_[0]; #initializing B with card fee\n    my $ticket = $_[1];\n    my $last_ticket = $ticket;\n    my $percent = $_[2];\n    \n    until(ceil($sys_b) < $sys_a){\n        $last_ticket *= $percent;\n        $sys_b += $last_ticket;\n        $sys_a += $ticket;\n        $num_times++;\n    } \n    \n    return $num_times;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219136,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(movie);\n\nuse POSIX;\n\nsub movie {\n    my ($card, $ticket, $percent) = @_;\n\n    my $system_a = sub {\n        state $sum = 0;\n        $sum += $ticket;\n    };\n\n    my $system_b = sub {\n        state $sum    = $card;\n        state $ticket = $ticket;\n        $ticket *= $percent;\n        $sum    += $ticket;\n    };\n\n    my $count = 1;\n    ++$count while ($system_a->() <= ceil($system_b->()));\n    return $count;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219137,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\n\nuse Exporter qw(import);\nour @EXPORT_OK = qw(movie);\n\nsub movie {\n    my ($card,$ticket,$percent) = @_;\n    my ($systemA,$systemB) = (0,$card);\n    my $cost = $ticket;\n    my $times = 0;\n    while(!(int($systemB+0.99)<int($systemA+0.99))){\n        $times +=1;   \n        $systemA += $ticket;\n        $cost *= $percent;\n        $systemB += $cost;\n    }\n    return $times;\n    0;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219138,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(movie);\n\nsub movie {\n    my($card, $ticket,$percent) = @_;\n    my ($systemA,$systemB) = ($ticket,$card);\n    my $step=1;\n    \n    while(int($systemB+0.99) >= int($systemA+0.99)){\n        $systemA += $ticket;\n        $systemB += $ticket * ($percent)**$step;\n        $step +=1;\n    } \n    if($step==23){\n        return 24;\n    }\n    elsif($step==1)   {\n        return 2;\n    } \n    return $step;\n    0;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219139,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse POSIX qw[ceil];\nour @EXPORT_OK = qw(movie);\n\nsub movie {\n    my ($card, $ticket_cost, $discount, ) = @_;\n    my $total_a = 0;\n    my $total_b = $card;\n    my $ticket_count = 0;\n    my $ticket_b_cost = $ticket_cost;\n\n    while (1) {\n        $ticket_count += 1;\n        $total_a += $ticket_cost;\n        $ticket_b_cost *= $discount;\n        $total_b += $ticket_b_cost;\n        return $ticket_count if ceil($total_b) < $total_a;\n    }\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219140,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse POSIX;\nour @EXPORT_OK = qw(movie);\n\nsub movie {\n    my ($card, $ticket, $percent) = @_;\n    my ($a_price, $b_price, $tickets) = (0, $card, 0);\n    while (!(ceil($b_price) < $a_price)) {\n        $tickets++;\n        $a_price += $ticket;\n        $b_price += $ticket * $percent ** $tickets;\n    }\n    return $tickets;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219141,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse POSIX;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(movie);\n\nsub movie {\n    my ($card, $ticket, $perc) = @_;\n    return 2 if ($card == 0);\n    my $i = 2;\n    while (1) {\n        my $p1 = $ticket * $i;\n        my $p2 = ceil($card + $ticket * $perc*(1-$perc**$i)\/(1-$perc));\n        return $i if ($p1 > $p2);\n        $i++;        \n    }\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219142,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse POSIX qw(ceil);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(movie);\n\nsub movie {\n  my ($card, $ticket, $percent) = @_;\n  my ($pb, $sysa, $sysb, $result)  = ($ticket, 0, $card, 0);\n  while ($sysa <= ceil($sysb)) {\n    $pb *= $percent;\n    $sysa += $ticket;\n    $sysb += $pb;\n    $result++;\n  }\n  $result;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56347fcfd086de8f11000014":[{"id":219143,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse POSIX qw(floor);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(ex_euler);\n\nsub ode {\n    my ($t, $y) = @_;\n    2 - exp(-4 * $t) - 2 * $y;\n}\nsub exact {\n    my $x = shift;\n    1 + 0.5 * exp(-4 * $x) - 0.5 * exp(-2 * $x);\n}\nsub ex_euler {\n    my $nb = shift;\n    my $yi = 1.0; my $xi = 0.0; my $h = 1.0 \/ $nb; my $err = 0.0;\n    for (my $i = 1; $i <= $nb; $i++) {\n        $yi += ode($xi, $yi) * $h;\n        $xi += $h;\n        my $zi = exact($xi);\n        $err += abs($yi - $zi) \/ $zi;\n    }\n    my $res = $err \/ ($nb + 1.0);\n    floor($res * 1e6) \/ 1e6;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"563b662a59afc2b5120000c6":[{"id":219144,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_year);\n\nsub nb_year {\n    my ($p, $percent, $aug, $wanted) = @_;\n    my $year = 0;\n    while ($p < $wanted){\n        $year++;\n        $p+= $aug + int(($p*$percent)\/100);\n    }\n    return $year;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219145,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_year);\n\nsub nb_year {\n    my ($population, $increase, $new, $limit, $years) = (@_, 1);\n    $increase = $increase\/100;\n    while ($population < $limit) {\n        $years++;\n        $population += int($population * $increase) + $new;\n    }\n    $years-1;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219146,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_year);\n\nsub nb_year {\n    # passing argument    \n    my @passed_args = @_;\n\n    # unpacking the passed arguments\n    my $p0 = $passed_args[0];\n    my $percent = $passed_args[1];\n    my $aug = $passed_args[2];\n    my $p = $passed_args[3];\n\n    # local variables\n    my $count = 0;\n    my $currentPopulation = int($p0);\n\n    while ($currentPopulation < $p) { \n        $currentPopulation += int(($currentPopulation)*($percent\/100) + $aug);\n        $count += 1;\n    }\n    return $count;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219147,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_year);\n\nsub nb_year {\n    my ($p0, $percent, $aug, $p) = @_;\n\n    my $years = 0;\n    while ($p0 < $p) {\n        $p0 += int($p0 * $percent \/ 100) + $aug;\n        $years++;\n    }\n    $years;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219148,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_year);\n\nsub nb_year {\n    my $start = shift;\n    my $perc = shift;\n    my $aug = shift;\n    my $total = shift;\n    \n    $perc = $perc \/ 100.0;\n    my $years = 0;\n    while ($start < $total) {\n      $start += int(($start * $perc) + $aug);\n      $years++;\n    }\n    return $years;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219149,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_year);\n\nsub nb_year {\n    my ($p, $inc, $add, $end) = @_;  \n    my $cnt = 0; \n    $inc = $inc\/100; \n    do { \n        $p += int($p * $inc) + $add; \n        $cnt++;\n    } until ( $p >= $end ); \n    return $cnt;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219150,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_year);\n\nsub nb_year {\n    my ($p0, $percent, $aug, $p) = @_;\n    \n    my $curr_pop = $p0;\n    my $inc      = $percent \/ 100;\n    my $years    = 0;\n    while ($curr_pop < $p) {\n        $curr_pop += int($curr_pop * $inc + $aug); # No halflings!\n        ++$years;\n    }\n    return $years;\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219151,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_year);\n\nsub cal{\n    my ($p0, $percent, $aug) = @_;\n    return int($p0+$p0*($percent\/100)+$aug);\n}\n\n\nsub nb_year {\n    my ($p0, $percent, $aug, $exp) = @_;\n    my $year_count = 0;\n#     print(\"$p0\\t$percent\\t$aug\\t$exp\");\n    my $cal = cal($p0, $percent, $aug);\n    while($cal < $exp){\n#         print(\"\nCalculated : $cal\");\n        $cal = cal($cal, $percent, $aug); \n        $year_count += 1;\n    }   \n#     print(\"\nCalculated : $cal years : $year_count\");     \n    return $year_count+1;\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219152,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_year);\nuse POSIX;\n\nsub nb_year {\n    my ( $population, $percent, $aug, $target_p ) = @_;\n    my $years = 0;\n\n    while ( $population < $target_p ) {\n        $years++;\n        $population += floor ($population * $percent * 0.01 + $aug);\n    }\n\n    return $years;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219153,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_year);\n\nsub nb_year {\n    my ($p0, $percent, $aug, $p, $n) = (@_, 0);\n    my $m = $p0;\n    while ($m < $p) {\n        $m += int($m*$percent*0.01 + $aug);\n        $n++;\n    }\n    $n;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"563f0c54a22b9345bf000053":[{"id":219154,"user_id":527,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(fcn);\n\nsub fcn {\n    1 << shift\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219155,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(fcn);\n\nsub fcn {\n    sprintf('%d',2**$_[0]);\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219156,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse bignum;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(fcn);\n\nsub fcn {\n    my ($n) = @_;\n    return 2**$n;\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219157,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse bigint;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(fcn);\n\nsub fcn {\n    2**$_[0];\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219158,"user_id":527,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(fcn);\n\nsub fcn {\n    1 << $_[0]\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219159,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse integer;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(fcn);\n\nsub fcn {\n    1 << shift;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"564057bc348c7200bd0000ff":[{"id":219160,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(thirt);\n\nsub thirt {\n    use integer;\n    my ($n, $y, $p) = (@_, 0, 0);\n    while ($n >= 99) {\n      $p = 1;\n      while ($n > 0) {\n        $y += ($n % 10) * ($p % 13);\n        $n \/= 10;\n        $p *= 10;\n      };\n      $n = $y;\n      $y = 0;\n    };\n    $n\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219161,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(thirt);\n\nsub thirt {\n    my $num = shift;\n  return 0 unless $num >= 0;\n  return $num if $num < 100;\n  \n  my @seq = (1, 10, 9, 12, 3, 4);\n  do {\n    my $sum = 0;\n    my @nums = reverse split('',$num);\n    for (my $i=0; $i <= @nums-1; $i++) {\n       $sum += $nums[$i] * $seq[$i%6];\n    }\n    $num = $sum;\n  } while $num >= 100;\n  return $num;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219162,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util 'sum0';\nuse Exporter qw(import);\nour @EXPORT_OK = qw(thirt);\n\nsub thirt {\n    my ($iter) = @_;\n    while (1) {\n        my $nxt = reducer($iter);\n        return $nxt if ($nxt == reducer($nxt));\n        $iter = $nxt;\n    }\n}\n\nsub reducer {\n    my @n = reverse map {\/.\/g} $_[0];\n    my @rems = (1, 10, 9, 12, 3, 4);\n    sum0 map {$n[$_] * $rems[$_%@rems]} (0..@n-1);\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219163,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(thirt);\n\nsub thirt {\n    my $n = shift;\n    my @w = (1, 10, 9, 12, 3, 4);\n    while (1) {\n        my $r = $n; my $q = -1; my $c = 0; my $j = 0;\n        while ($q != 0) {\n            use integer;\n            $q = $r \/ 10;\n            $c += $r % 10 * $w[$j % 6];\n            $r = $q;\n            $j++;\n        }\n        if ($c == $n) { return $c; }\n        $n = $c;\n    }\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56445c4755d0e45b8c00010a":[{"id":219164,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(fortune);\n\nsub fortune {\n    my ($balance, $interest, $withdraw, $term, $inflation) = @_;\n    for (my $year = 2; $year <= $term; $year++) {\n        $balance += int($balance * $interest \/ 100) - $withdraw;\n        return \"false\" if $balance < 0;\n        $withdraw += int($withdraw * $inflation \/ 100);\n    }\n    return \"true\";\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219165,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(fortune);\n\n# return: \"true\" or \"false\"\nsub fortune {\n    my ($f0, $p, $c0, $n, $i) = @_;\n    for (0..$n-2) {\n        $c0 = ($_ == 0) ? $c0 : int($c0 + $c0*$i\/100);\n        $f0 += int($f0*$p\/100) - $c0;\n        return \"false\" if ($f0 < 0);\n    }\n    \"true\";\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219166,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse POSIX;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(fortune);\n\n# return: \"true\" or \"false\"\nsub fortune {\n    my ($f0, $p, $c0, $n, $i) = @_;\n    my ($f, $c, $pp, $ii, $m) = ($f0, $c0, $p \/ 100, $i \/ 100, $n - 1);\n    while ($m-- > 0) {\n        $f += floor($pp * $f - $c);\n        $c += floor($ii * $c);\n        if ($f < 0) {\n            return \"false\";\n        }\n    }\n    return $f >= 0 ? \"true\" : \"false\"; \n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219167,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse POSIX qw(floor);\nuse Test::More;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(fortune);\n\n# return: \"true\" or \"false\"\nsub fortune {\n    my ($f0, $p, $c0, $n, $i) = @_;\n    my $prev_x = $f0; my $prev_c = $c0; my $nou_x = 0; my $nou_c = 0;\n    for (my $k = 1; $k < $n; $k++) {\n        $nou_x = floor($prev_x + $p \/ 100.0 * $prev_x - $prev_c);\n        $nou_c = floor($prev_c + $i \/ 100.0 * $prev_c);\n        $prev_x = $nou_x;\n        $prev_c = $nou_c;\n    }\n    if ($nou_x >= 0) { return \"true\"; }\n    return \"false\";\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56484848ba95170a8000004d":[{"id":219168,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse List::Util qw(min);\nour @EXPORT_OK = qw(gps);\n\n# parameters: time record, array_ref; return: integer\nsub gps {\n    my ($s, $x) = @_;\n    my $size = scalar @$x;\n    if(scalar @$x <= 1){\n      return 0;\n    }\n    else{\n        my $max_dist = 0;\n        for(my $i = 1; $i < scalar @$x; $i++){\n            my $dist =  @$x[$i] - @$x[$i - 1];\n            if($dist > $max_dist){\n                $max_dist = $dist;\n            }\n        }\n        return floor 3600 * $max_dist \/ $s;\n    }    \n    \n    0;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219169,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(gps);\n\n# parameters: time record, array_ref; return: integer\nsub gps {\n    my ($s, $x) = @_;\n    my $lg = @$x;\n    if ($lg <= 1) { return 0; }\n    my ($mx, $v) = (-1, 0);\n    for (my $k = 0; $k < $lg - 1; $k++) {\n        $v = 3600 * ($x->[$k + 1] - $x->[$k]) \/ $s;\n        if ($v > $mx) {\n            $mx = $v;\n        }\n    }\n    int($mx);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219170,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(gps);\n\n# parameters: time record, array_ref; return: integer\nsub gps {\n  my $s = shift;\n  my $xvalue = shift;\n  my @x = @$xvalue;\n  \n  my $result = 0;\n  my $i = 0;\n  my $tmp = 0;\n  for ($i = 0; $i < $#x; $i++)\n  {    \n    if(3600.0 *  ($x[$i+1] - $x[$i]) \/ $s > $result) {\n      $result = int(3600.0 * ($x[$i+1] - $x[$i]) \/ $s);\n    }\n  }\n  return $result;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219171,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(gps);\n\n# parameters: time record, array_ref; return: integer\nsub gps {\n    my ( $s, $arr ) = @_;  \n    return 0 if !scalar @{ $arr } || !$s || scalar( @{ $arr } ) <= 1;\n    my @Result;\n    for my $i ( 1 .. (scalar @{$arr} - 1) ) {\n        push @Result, int(abs( (3600 * ($arr->[$i-1] - $arr->[$i]))\/$s));\n    }\n    my @Return = sort { $b <=> $a } @Result;\n    return $Return[0];\n    \n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219172,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(gps);\n\nsub gps {\n    my ($s, $x) = @_;\n    \n    my $max_speed = 0;\n    for my $i (0 .. $#$x - 1) {\n        my ($p1, $p2) = $x->@[$i, $i + 1];\n        my $delta_speed = int(3600 * abs($p1 - $p2) \/ $s);\n        $max_speed = $delta_speed if $delta_speed > $max_speed;\n    }\n    return $max_speed;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219173,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(gps);\n\n# parameters: time record, array_ref; return: integer\nsub gps {\n    my $time_interval = shift;\n    my $dist_measure = shift;\n    my $segment_count = @$dist_measure+0;\n  return 0 if $segment_count <= 1;\n    my $max_speed = 0;\n    while ($segment_count-- > 1) {\n        my $start_pt = shift(@$dist_measure);\n        my $current_speed = (($dist_measure->[0] - $start_pt) * 3600) \/ $time_interval;\n        $max_speed = int($current_speed) if $current_speed > $max_speed;\n    }\n    return $max_speed;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219174,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(gps);\n\n# parameters: time record, array_ref; return: integer\nsub gps {\n    my ($s , $x) = @_;\n    my $start_position = shift @$x;\n    my $top_speed = 0;\n    foreach my $position (@$x) {\n        my $delta = $position - $start_position;\n        $start_position = $position;\n        my $speed = (3600 * $delta) \/ $s;\n        $top_speed = $speed if $speed > $top_speed;\n    }\n    \n    return int $top_speed;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219175,"user_id":180,"body":"package Solution;\n\nuse strict;\nuse warnings;\nuse base 'Exporter';\nour @EXPORT_OK = qw(gps);\n\nuse List::Util 'max';\n\nsub gps {\n    my ($step, $rec) = @_;\n    my @pos_ps  = map {$_ \/ $step} @$rec;\n    my @dists   = map {$pos_ps[$_] - $pos_ps[$_-1]} 1 .. $#pos_ps;\n    my @speeds  = map {$_ * 60 * 60} @dists;\n    return int max @speeds;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219176,"user_id":180,"body":"package Solution;\n\nuse strict;\nuse warnings;\nuse feature 'signatures';\nno warnings 'experimental';\n\nuse base 'Exporter';\nour @EXPORT_OK = qw(gps);\n\nuse List::Util 'max';\n\nsub gps($step, $rec) {\n    my @pos_ps  = map {$_ \/ $step} @$rec;\n    my @dists   = map {$pos_ps[$_] - $pos_ps[$_-1]} 1 .. $#pos_ps;\n    my @speeds  = map {$_ * 60 * 60} @dists;\n    return int max @speeds;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219177,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util 'max';\nuse Exporter qw(import);\nour @EXPORT_OK = qw(gps);\n\n# parameters: time record, array_ref; return: integer\nsub gps {\n    my ($s, $a) = @_;\n    @$a <= 1 ? 0 : max map {int(3600*($a->[$_+1] - $a->[$_])\/$s)} (0..@$a-2);\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56541980fa08ab47a0000040":[{"id":219178,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(printer_error);\n\nsub printer_error {\n    my @errs = \"@_\" =~ \/[n-z]\/g;\n    return scalar @errs . '\/' . length \"@_\"\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219179,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(printer_error);\n\nsub printer_error {\n    my ($codes) = @_;\n    my @errors = $codes =~ \/[^a-m]\/g;\n    return @errors . \"\/\" . (length $codes)\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219180,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(printer_error);\n\nsub printer_error {\n    my ($str) = @_;\n    my @errors = $str =~ \/[n-z]\/g;\n    @errors . \"\/\" . length $str;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219181,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(printer_error);\n\nsub printer_error {\n    my $errors = 0;\n    my $strlen = length $_[0];\n    foreach (split '', $_[0]){\n        if (\/[^a-m]\/){\n            $errors++;\n        }\n    }\n    \"$errors\/$strlen\";\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219182,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(printer_error);\n\nsub printer_error {\n    my $s = shift;\n    my $char; my $cnt = 0;\n    foreach $char (split \/\/, $s) {\n        if ($char gt 'm') { ++$cnt; }\n    }\n    sprintf(\"%d\/%d\", $cnt, length($s));\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219183,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(printer_error);\n\nsub printer_error {\n    my ($s) = @_;\n    my @t = map {\/[^a-m]\/g} $s;\n    sprintf(\"%d\/%d\", scalar @t, length($s));\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219184,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(printer_error);\n\nsub printer_error {\n    my $str = shift;\n    my $l = length($str);\n    $str =~ s\/[a-m]\/\/gi;\n    return length($str) . \"\/$l\";\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219185,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(printer_error);\n\nsub printer_error {\n    my ($text) = @_;\n    my $char;\n    my $res = 0;\n    foreach $char(split \/\/, $text){\n    if(!(ord($char) => ord('a') && ord($char) <= ord('m')))\n    {\n    $res++;\n    }\n    }\n    my $len = length $text;\n    return \"$res\/$len\";\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219186,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(printer_error);\n\nsub printer_error {\n    my $s = shift;\n    my $i = 0;\n    foreach my $c (split \/\/, $s) {\n        if ($c gt 'm') { \n            $i++; \n        }\n    }\n    sprintf(\"%d\/%d\", $i, length($s));\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219187,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(printer_error);\n\nsub printer_error {\n    my $s = shift;\n    my $t = $s;\n    $t =~ s\/[a-m]\/\/g;\n    return sprintf(\"%d\/%d\", length($t), length($s));\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5656b6906de340bd1b0000ac":[{"id":219188,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest);\n\nsub longest {\n    my ($a1, $a2) = @_;\n    my (%uniq, $res) = ((), '');\n    for (split '', $a1.$a2) {\n        $uniq{$_} = 1;\n    }\n    for (sort keys %uniq) {\n        $res .= $_;\n    }\n    $res;\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219189,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest);\n\nsub longest {\n    my ($a, $b) = @_;\n    my %c;\n    for (split \/\/,$a.$b){\n        unless (exists $c{$_}){\n            $c{$_} = ();\n        }\n    }\n    my @c = sort keys %c;\n    join '', @c;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219190,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest);\n\nsub longest {\n    my %hist;\n    my $res;\n    foreach (split '',($_[0] . $_[1])){\n        $hist{$_} = 0;\n    }\n    foreach (sort keys %hist){\n        $res .= $_;\n    }\n    $_[0] . $_[1] ? $res : '';\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219191,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest);\n\nsub longest {\n    my ($s1, $s2) = @_;\n    my $l = \"\";\n    for my $c ('a'..'z') {\n        if ((index($s1, $c) >= 0) || (index($s2, $c) >= 0)) {\n            $l .= $c;\n        }\n    }\n    $l;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219192,"user_id":1750,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest);\nuse List::Util qw(uniq);\n\nsub longest {\n    join '', sort(uniq(split \/\/, shift().shift()))\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219193,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest);\n\nsub longest {\n    my ($a1, $a2) = @_;\n    my (%uniq, $res) = ((), '');\n    for (split '', $a1.$a2) {\n        $uniq{$_} += 1;\n    }\n    for (sort keys %uniq) {\n        $res .= $_;\n    }\n    # https:\/\/www.oreilly.com\/library\/view\/perl-cookbook\/1565922433\/ch05s06.html (print hashes)\n    # print \"@{[ %uniq ]}\n\";\n    $res;\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219194,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest);\n\nsub longest {\n    my($c, $d) = ($_[0], $_[1]);\n    my($res) = $c.$d;\n    my %uniq;\n    my $sorted = join \"\", grep !$uniq{$_}++, sort split \/\/, $res;\n\n    $sorted;\n    \n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219195,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest);\n\nsub longest {\n    my $stra = lc(shift);\n    my $strb = lc(shift);\n    my $i = 'a';\n    my $result = \"\";\n    for ($i = 'a'; length($i) == 1; $i++)\n    {\n      if (index($stra, $i) > -1 || index($strb, $i) > -1)\n      {\n        $result .= $i;\n      }\n    }\n    \n    return $result;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219196,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse List::MoreUtils qw(uniq);\nour @EXPORT_OK = qw(longest);\n\nsub longest {\n     my ($s1, $s2) = @_;\n     my @array = split \/\/, $s1.$s2;\n     @array = uniq(@array);\n     @array = sort @array;\n     return join '', @array;\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219197,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::MoreUtils qw(uniq);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest);\n\nsub uniqSortedString {\n    my $str = shift;\n    return join('', sort(uniq(split('', $str))))\n}\n\nsub longest {\n    my ($a, $b) = @_;\n    \n    return uniqSortedString($a) if $a eq $b;\n    return uniqSortedString($a.$b);\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"565abd876ed46506d600000d":[{"id":219198,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Math::Trig;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(simpson);\n\nsub simpson {\n    my $n = shift;\n    pi\/$n*(1+2*cos(pi\/$n)**3+3*cos(2*pi\/$n))\/(sin(3*pi\/$n))\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219199,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Math::Trig;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(simpson);\n\nsub f {\n    my $x = shift;\n    1.5 * sin($x) ** 3;\n}\nsub simpson {\n    my $n = shift;\n    my ($h, $s1, $s2) = (pi \/ $n, 0.0, 0.0);\n    for (my $i = 1; $i <= int($n \/ 2); $i++) {\n        $s1 += &f((2 * $i - 1) * $h);\n    }\n    for (my $j = 1; $j <= int($n \/ 2) - 1; $j++) {\n        $s2 += &f(2 * $j * $h);\n    }\n    pi \/ (3 * $n) * (&f(0) + &f(pi) + 4 * $s1 + 2 * $s2);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"565c0fa6e3a7d39dee000125":[{"id":219200,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dist speed);\n\nsub dist {\n    my ($v, $mu, $u) = (@_, 0);\n    $u = $v * 5 \/ 18;\n    $u + $u ** 2 \/ (2.0 * $mu * 9.81)\n}\n\nsub speed {\n    my ($d, $mu, $b) = (@_, 0);\n    $b = -2.0 * $mu * 9.81;\n    3.6 * ($b + sqrt($b ** 2 - 4.0 * $b * $d)) \/ 2.0\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219201,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dist speed);\n\n# suppose reaction time is 1\nsub dist {\n    my ($v, $mu) = @_;\n    $v *= (1000\/3600);\n    $v + ($v**2)\/(2*$mu*9.81);\n}\n\n# suppose reaction time is 1\nsub speed {\n    my ($d, $mu) = @_;\n    my $k = 2*$mu*9.81;\n    (3600\/1000) * ($k**0.5 * ($k + 4*$d)**0.5 - $k)\/2;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219202,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(dist speed);\n\n# suppose reaction time is 1\nsub dist {\n    my ($v, $mu) = @_;\n    my $g = 9.81;                              # acceleration due to gravity in m\/s\n    my $coef = 1000.0 \/ 3600.0;                # km\/h -> m\/s\n    my $dreact = $v * $coef;                   # distance of reaction with t := 1\n    my $vms = $coef * $v;                      # speed in m\/s\n    my $dbrak = 0.5 * ($vms ** 2) \/ $mu \/ $g;  # braking distance\n    $dreact + $dbrak;                          # total distance\n}\n\n# suppose reaction time is 1\nsub speed {\n    my ($d, $mu)= @_;\n    my $g = 9.81;                 \n    my $coef = 3600 \/ 1000.0;\n    0.5 * $mu * $g * (- 2 + sqrt(4 + 8 * $d \/ $mu \/ $g)) * $coef;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5663f5305102699bad000056":[{"id":219203,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse List::Util qw(max min);\nour @EXPORT_OK = qw(mxdiflg);\n\n# parameters: two array_ref of strings; return an integer\nsub mxdiflg {\n    my ($x, $y) = @_;\n    return -1 if !scalar(@$x) || !scalar(@$y);\n    max(\n        abs(min(map length, @$x) - max(map length, @$y)),\n        abs(max(map length, @$x) - min(map length, @$y))\n    );\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219204,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(mxdiflg);\n\n# parameters: two array_ref of strings; return an integer\nsub mxdiflg {\n    my ($a1, $a2) = @_;\n    my $mx = -1;\n    for my $x (@$a1) {\n        for my $y (@$a2) {\n            my $diff = abs(length($x) - length($y));\n            if ($diff > $mx) { $mx = $diff; }\n        }\n    }\n    $mx;\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219205,"user_id":826,"body":"package Solution;\nuse List::Util qw(max min); # for array max\/min to work\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(mxdiflg);\n\n# parameters: two array_ref of strings; return an integer\nsub mxdiflg {\n    # arrays must be accepted as scalars. \n    # to retrieve arrays add @ later on (don't remove $)\n    my ($a1, $a2) = @_;\n    if (!@$a1 || !@$a2) {\n        return -1;\n        } \n    # get arrays of string lengths out of arrays of strings \n    my @la1 = map {length($_)} @$a1;\n    my @la2 = map {length($_)} @$a2;\n    \n    my $a1max = max(@la1);\n    my $a1min = min(@la1);\n    my $a2max = max(@la2);\n    my $a2min = min(@la2);\n\n    # create an array of 2 values and get the max value on the fly\n    return max(abs($a1max-$a2min), abs($a2max-$a1min));\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219206,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(mxdiflg);\n\nsub mxdiflg {\n    my ($a1, $a2) = @_;\n    my $max = -1;\n    for my $x (@$a1) {\n        for my $y (@$a2) {\n            my $diff = abs(length($x) - length($y));\n            $max = $diff if $diff > $max;\n        }\n    }\n    return $max;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219207,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(mxdiflg);\n\n# parameters: two array_ref of strings; return an integer\nsub mxdiflg {\n    my ( $a1,$a2 ) = @_;\n    return -1 if !scalar(@$a1) || !scalar(@$a2);\n    my %Result;\n    for my $i ( @$a1 ) {\n        for my $j ( @$a2) {\n            $Result{ abs(length($i)-length($j))} = 1;\n        }\n    }\n    my @sorted = sort { $b <=> $a } keys %Result;\n    return $sorted[0];\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219208,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(mxdiflg);\n\n# parameters: two array_ref of strings; return an integer\nsub mxdiflg {\n    my ( $a1, $a2 ) = @_;\n    return -1 if ! scalar @$a1 || ! scalar @$a2;\n    my %Result;        \n    for my $a ( @{ $a1 } ) {        \n        for my $b ( @{ $a2 } ) {            \n            $Result{  abs(length($a) - length($b)) } = 1;\n        }\n    }\n    my @Results = sort { $b <=> $a } keys %Result;\n    my $Max = shift @Results;    \n    return $Max;\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219209,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(mxdiflg);\nuse List::Util qw(max);\n\n# parameters: two array_ref of strings; return an integer\nsub mxdiflg {\n    my ($s1, $s2) = @_;\n    if(@$s1 and @$s2){\n        my @values = ();\n        foreach my $i (@$s1){\n            foreach my $j (@$s2){\n                my $num = abs(length($i)-length($j));\n                push(@values,$num);\n            }\n        }\n        return max(@values);\n    }else{\n        return -1;\n    }\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219210,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse List::Util qw(max min);\n\nour @EXPORT_OK = qw(mxdiflg);\n\n# parameters: two array_ref of strings; return an integer\nsub mxdiflg {\n    my ( $arr_of_str1, $arr_of_str2 ) = @_;\n    return -1 unless scalar @$arr_of_str1;\n    return -1 unless scalar @$arr_of_str2;\n\n    my ( $max1, $min1 ) = calc_max_min($arr_of_str1);\n    my ( $max2, $min2 ) = calc_max_min($arr_of_str2);\n    return max($max2 - $min1, $max1 - $min2);\n}\n\nsub calc_max_min {\n    my ( $arr ) = @_;\n    my @arr_of_lengths = map { length } @$arr;\n    \n    return (max(@arr_of_lengths), min(@arr_of_lengths));\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219211,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(mxdiflg);\n\nsub max {\n    ($a, $b) = @_;\n    return $a > $b ? $a : $b;\n}\n\n# parameters: two array_ref of strings; return an integer\nsub mxdiflg {\n    my ($xs, $ys) = @_;\n    my $m = -1;\n    for my $x (@$xs) {\n        for my $y (@$ys) {\n            $m = max($m, abs(length($x) - length($y)));\n        }\n    }\n    return $m;\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219212,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util qw(max min);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(mxdiflg);\n\n# parameters: two array_ref of strings; return an integer\nsub mxdiflg {\n    my ($lst1, $lst2) = @_;\n    my @al1 = sort map {length($_)} @$lst1;\n    my @al2 = sort map {length($_)} @$lst2;\n    (@al1 == 0 or @al2 == 0) ? -1 : max(abs(max(@al1) - min(@al2)), abs(max(@al2) - min(@al1)));\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"566543703c72200f0b0000c9":[{"id":219213,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(epidemic);\n\nsub epidemic {\n    my ($tm, $n, $s0, $i0, $b, $a)  = @_;\n    my (@s, @i);\n    ($s[0],$i[0])  = ($s0, $i0);\n    my ($dt, $max) = (1.0*$tm\/$n, 0);\n    for (my $j = 0; $j < $n-1; $j++) {\n        $s[$j+1] = $s[$j]*(1 - $dt*$b*$i[$j]);\n        $i[$j+1] = $i[$j] + $dt*$i[$j]*($b*$s[$j] - $a);\n        $max = int($i[$j+1]) if int($i[$j+1]) > $max;\n    }\n    $max;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219214,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse POSIX;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(epidemic);\n\nsub epidemic {\n    my ($tm, $n, $s0, $i0, $b, $a) = (@_);\n    my $s = $s0;\n    my $i = $i0;\n    my $r = 0.0;\n    my $t = 0.0;\n    my $dt = $tm\/$n;\n    my $imax = 0.0;\n    my $sd = 0.0;\n    my $id = 0.0;\n    my $rd = 0.0;\n    while ($t < $tm) {\n        $sd = $dt*(-$b*$s*$i);\n        $id = $dt*($b*$s*$i-$a*$i);\n        $rd = $dt*($a*$i);\n        $s += $sd;\n        $i += $id;\n        $r += $rd;\n        $t += $dt;\n        $imax = $imax > floor($i) ? $imax : floor($i);\n    }\n    return $imax;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219215,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util 'max';\nuse Exporter qw(import);\nour @EXPORT_OK = qw(epidemic);\n\nsub epidemic {\n    my ($tm, $n, $s0, $i0, $b, $a) = @_;\n    my ($S, $I, $R, $dt) = ([$s0], [$i0], [0], $tm\/$n);\n    for my $k (0..$n-1) {\n        push(@$S, $S->[$k] - $dt*$b*$S->[$k]*$I->[$k]);\n        push(@$I, $I->[$k] + $dt*($b*$S->[$k]*$I->[$k] - $a*$I->[$k]));\n        push(@$R, $R->[$k] + $dt*$I->[$k]*$a);\n    }\n    int max @$I;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219216,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(epidemic);\n\nsub epidemic {\n    my ($tm, $n, $s0, $i0, $b, $a) = @_;\n    my $susceptible = $s0;\n    my $infected = $i0;\n    my $recovered = 0.0;\n    my $infectedMax = $infected;\n    my $dt = $tm \/ $n;\n    my $k = 0;\n    while ($k < $n) {\n      my $susceptibleNext = $susceptible - $dt * $b * $susceptible * $infected;\n      my $infectedNext = $infected + $dt * ($b * $susceptible * $infected - $a * $infected);\n      $recovered += $dt * $infected * $a;\n      $infected = $infectedNext;\n      $susceptible = $susceptibleNext;\n      if ($infected > $infectedMax) {\n          $infectedMax = $infected;\n      }\n      $k += 1;\n    }\n    int($infectedMax);\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5667e8f4e3f572a8f2000039":[{"id":219217,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(accum);\n\nsub accum {\n    my (@chars) = split \/\/, \"\\L$_[0]\";\n    my @str = ();\n    for (0..$#chars) {\n        push @str, \"\\u$chars[$_]\" . $chars[$_] x $_;\n    }\n    join '-', @str;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219218,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(accum);\n\nsub accum {\n    my ($str) = @_;\n    my @chars = split '', lc $str;\n    foreach (0..$#chars) {\n        splice @chars, $_, 1, (uc $chars[$_]) . $chars[$_] x $_;\n    }\n    join '-', @chars;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219219,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(accum);\n\nsub accum {\n    my ( $str, $a ) = @_;\n    \n    my $c = chop($str);\n    \n    return ( $c ) ? accum( $str, uc($c) . (lc($c) x length($str)) . (($a) ? '-' . $a : '') ) : $a;\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219220,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(accum);\n\nsub accum {\n    my @res;\n    my $num = 0;\n    (push @res, \"\\u$_\" . \"\\l$_\" x $num) and ($num++) for (split \/\/, shift);\n    join '-', @res;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219221,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(accum);\n\nsub accum {\n    my @chars = split \/\/, $_[0];\n    my $count = 0;\n    my @res;\n    for (@chars){\n        push @res, \"\\u$_\" . (\"\\l$_\" x $count);\n        $count++;\n    }\n    join '-', @res;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219222,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(accum);\n\nsub accum {\n    my ($string) = @_;\n    $string = lc $string;\n    my @string = split('',$string);\n    my $res = '';\n    my $count = 0;\n    foreach (@string){\n        $res .= \"\\u$_\" . $_ x $count . \"-\";\n        $count += 1;\n    }\n    substr $res, 0, -1;\n}\n\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219223,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(accum);\n\nsub accum {\n    $a = shift;\n    if ($a eq \"\") { return \"\"; }\n    my $s = \"\";\n    for (my $i = 0; $i < length($a); ++$i) {\n        my $c = substr($a, $i, 1);\n        $s .= uc($c) . (lc($c) x $i) . \"-\";\n    }    \n    return substr($s, 0, length($s) - 1);\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219224,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(accum);\n\nsub accum {\n    my $i = 0;\n    join \"-\", map s\/(.)\/uc($1) . lc $1 x $i++\/ger, split \/\/, shift;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219225,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(accum);\n\nsub accum {\n    my ( $str, $acc ) = @_;\n    \n    my $c = chop($str);\n    \n    # solved using recursion\n    \n    return ( $c ) ? accum( $str, uc($c) . (lc($c) x length($str)) . (($acc) ? '-' . $acc : '') ) : $acc;\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219226,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(accum);\n\nsub accum {\n    # note how we use prefix operator ++ to increment index $_[1] for each map operation (as we need to multiply by (index + 1))\n    join('-', map { ucfirst( lc($_ x ++$_[1])) } split('',\"@_\"));\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"566be96bb3174e155300001b":[{"id":219227,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(max_ball);\n\nsub max_ball {\n    # t hmax = ( vf - v0 ) \/ g ... but vf = 0, and vector 'g' is lower to zero, so: t = v0 \/ g\n    return sprintf(\"%.0f\", ( ( ( $_[ 0 ] * 1000 ) \/ 3600 ) \/ 9.81 ) * 10 );\n    #                      ^----------i---------------------------^\n    #                              actual time to h max...           is this amount of tenths\n    #               ^ Force rounding to zero decimals to get actual tenth\n    #                             v * 1000 \/ 3600   i.e. km\/h -> m\/s\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219228,"user_id":50,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(max_ball);\n\nsub max_ball {\n    return int((($_[0] * 56630) + 100000) \/ 200000);\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219229,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(max_ball);\n\nsub max_ball {\n    my $v_kmh = shift;\n    my $v = $v_kmh\/3.6;\n    my $e = 0.5*$v*$v; my $g=9.8102;\n    # h = v*t - 0.5*g*t*t\n    \n    my $h   = $e\/$g;\n    my $p   = -$v\/(0.5*$g);\n    my $q   =  $h\/(0.5*$g);\n    my $kl  = $p*$p\/4-$q;\n    $kl = ($kl < 1.e12)?0:$kl;\n    my $t1  = -$p\/2 + sqrt($kl);\n    my $t10 = int($t1*10 + 0.5);\n    #print $t10;\n    return $t10;\n    \n}\n\n# h\/0.5*g = v*t\/0.5*g - t*t\n# t\u00b2-v\/0.5*g*t +h\/0.5*g =0\n# -p\/2 +- sqrt (p\u00b2\/4-q)\n# x\u00b2+px+q=0\n\n\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219230,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse POSIX qw\/round\/;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(max_ball);\n\nsub max_ball {\n    my $v0 = shift;\n    return round($v0 \/ 3.5316);\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219231,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(max_ball);\n\nsub max_ball {\n    int((($_[0] \/ 3.6) \/ 9.81) * 10 + 0.5);\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219232,"user_id":527,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(max_ball);\n\nsub max_ball {\n    int($_[0] \/ 3.5316 + .5)\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219233,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(max_ball);\n\nsub max_ball {\n    my $v0 = shift;\n    sprintf \"%.0f\", ($v0 \/ 3.6) \/ 0.981;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"566fc12495810954b1000030":[{"id":219234,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_dig);\n\nsub nb_dig {\n    my ($number, $digit) = @_;\n    my $str = join '', map {$_ * $_} (0..$number);\n    return $str =~ s\/$digit\/\/g;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219235,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_dig);\n\nsub nb_dig {\n    my ($count, $num, $n, $d) = (0, 0, @_);\n    for (0..$n) {\n        $num = $_**2;\n        for (split '', \"$num\"){\n            if ($_ eq \"$d\") {\n                $count++;\n            }\n        }\n    }\n    $count;\n}\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219236,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_dig);\n\nsub nb_dig {\n    my ($n, $d) = @_;\n    my $count = 0;\n    for my $k (0..$n){\n        my $num = $k ** 2;\n        for my $dig (split '', \"$num\"){\n            if ($dig == $d){\n                $count++;\n            }\n        }\n    }\n    $count;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219237,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_dig);\n\nsub nb_dig {\n    my ($n, $d) = @_;\n    my $count;\n    for (0..$n){\n        for (split \/\/, $_**2){\n            if ($_ eq $d){\n                $count++;\n            }\n        }\n    }\n    $count;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219238,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_dig);\n\nsub nb_dig {\n    my ($n, $d) = @_;\n    my $count = 0;\n    foreach my $i (0..$n) {\n        my @matches = $i ** 2 =~ m\/$d\/g;\n        $count += scalar @matches;\n    }\n    $count;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219239,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_dig);\n\nsub nb_dig {\n    my ($n, $d) = @_;\n    my $count = 0;\n    for (my $k = 0; $k <= $n; $k++) {\n        my $m = $k * $k;\n        my $c = () = $m =~ \/$d\/g;\n        $count += $c;\n    }\n    $count;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219240,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_dig);\n\nsub nb_dig {\n    my ($n, $d) = @_;\n    scalar grep {$_ == $d} split '', join '', map {$_*$_} 0..$n;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219241,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_dig);\n\nsub nb_dig {\n    my ($n, $d) = @_;\n    my $count;\n    $count += scalar grep { $_ == $d } split '', $_ * $_ for 0..$n;\n    return $count;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219242,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_dig);\n\nsub nb_dig {\n    my ($n, $d) = @_;\n    my $result = 0;\n    for (0..$n) { $result += () = $_ ** 2 =~ \/$d\/g; }\n    $result;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219243,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nb_dig);\n\nsub nb_dig {\n    my ($nb_dig, $d, $str) = (@_, '');\n    for (0..$nb_dig){\n        $str .= $_ ** 2;\n    }\n    $str =~ s\/$d\/a\/g;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"567501aec64b81e252000003":[{"id":219244,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util qw(any);\nuse POSIX qw(ceil);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(wall_paper);\n\nsub spell {\n    qw(zero one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty)[shift];\n}\n\nsub wall_paper {\n    my ($l, $w, $h) = @_;\n    return spell any(sub {$_ == 0}, @_) ? 0 : ceil 2 * ($l + $w) * $h * 1.15 \/ 0.52 \/ 10;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219245,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(wall_paper);\n\nmy $numbers = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\",\n               \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"];\n\nsub wall_paper {\n    my ($l, $w, $h) = (@_);\n    my $roll_surface = 0.52*10;\n    my $room_surface = $h * (2*$l+2*$w);\n    my $roll_count = 0;\n    while ($roll_count*$roll_surface < $room_surface*1.15){\n        $roll_count++;\n    }\n    ($l * $w * $h > 0) ? $numbers->[$roll_count] : $numbers->[0];\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219246,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse POSIX;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(wall_paper);\n\nsub wall_paper {\n    my ($length, $width, $height) = @_;\n    my @answer_array = qw(  zero one two three four five six seven eight nine ten\n                            eleven twelve thirteen fourteen fifteen sixteen seventeen\n                            eighteen nineteen twenty);\n                            \n    my $roll_surface_area = 0.52 * 10;\n    my $surface_area = 2 * $height * ( $length + $width);\n    \n    if  (($length * $width * $height) <= 0){\n        return ($answer_array[0]);\n    }else {\n        my $temp = (( 1.15 * $surface_area) \/ $roll_surface_area);\n        $temp = POSIX::ceil($temp);\n        return ($answer_array[$temp]);\n    }\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219247,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse POSIX qw\/ceil\/;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(wall_paper);\n\nsub wall_paper {\n    my $length = shift;\n    my $width = shift;\n    my $height = shift;\n    my @numbers = (\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\");\n    if ($length * $width * $height == 0)\n    {\n      return \"zero\";\n    }\n    \n    my $area = 2 * $length * $height + 2 * $width * $height;\n    \n    $area = $area * 1.15;\n    $area = ceil($area \/ 5.2);\n    return $numbers[$area];        \n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219248,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(wall_paper);\nuse POSIX qw\/ceil\/;\n\nsub wall_paper {\n    my %ns = (\n    '0' => 'zero',\n    '1' => 'one', \n    '2' => 'two', \n    '3' => 'three',\n    '4' => 'four',\n    '5' => 'five', \n    '6' => 'six',\n    '7' => 'seven',\n    '8' => 'eight',\n    '9' => 'nine', \n    '10' => 'ten',\n    '11' => 'eleven',\n    '12' => 'twelve',\n    '13' => 'thirteen', \n    '14' => 'fourteen', \n    '15' => 'fifteen',\n    '16' => 'sixteen',\n    '17' => 'seventeen',\n    '18' => 'eighteen',\n    '19' => 'nineteen', \n    '20' => 'twenty');\n    my ($l, $w, $h) = @_;\n    if ($l * $w * $h == 0) { return $ns{0}; }\n    $ns{ceil(($h * ($w + $l)) * 2.3 \/ 5.2)};\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219249,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(wall_paper);\n\nsub wall_paper {\n    my ($l, $w, $h) = @_;\n    my @numbers = (\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\");\n    return ($l * $w * $h)\n        ? $numbers[int(((($l*2)+($w*2)) * $h * 1.15 \/ (0.52 * 10)) + 0.9999)]\n        : \"zero\";\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219250,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse POSIX;\nour @EXPORT_OK = qw(wall_paper);\n\nsub wall_paper {\n    my ($l, $w, $h) = @_;\n    my @numbers = (\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\");\n    my $rulon;\n \n    if ($l * $w * $h == 0) {return $numbers[0];}\n    $rulon = ceil(2*($l+$w) * $h \/ 5.2 * 1.15);\n    return $numbers [$rulon];\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219251,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse POSIX;\nour @EXPORT_OK = qw(wall_paper);\n\nsub wall_paper {\n    if ($_[0] == 0 || $_[1] == 0 || $_[2] == 0) {return \"zero\";}\n    #my $a = int (10\/$_[2]);\n    my $a = 10\/$_[2];\n    my $b = 2*($_[0]+$_[1])\/0.52*1.15;\n    my $rulon = ceil($b\/$a);\n    my @numbers = (\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\");\n    return $numbers[$rulon];\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219252,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(wall_paper);\n\n# area of one roll, 10 m width, 0,52 m height\nmy $areaRoll = 10 * 0.52;\nmy $extraPercentage = 15;\nmy @numbers = (\n\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"\n);\n\nsub wall_paper {\n    my ($l, $w, $h) = @_;\n    \n    return \"zero\" if $l == 0 or $w == 0 or $h == 0;\n    \n    my $areaRoom = (2 * $l * $h) + (2 * $w * $h);\n    my $rollsNeededNumber = $areaRoom  \/ 100 * (100 + $extraPercentage) \/ $areaRoll ;\n    $rollsNeededNumber = int($rollsNeededNumber + 1);\n\n    return $numbers[$rollsNeededNumber];\n    \n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219253,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(wall_paper);\n\nuse POSIX qw(ceil);\n\nmy @numbers = (\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\");\n\nmy $rarea = 0.52*10;\n\nsub wall_paper {\n    my($l, $w, $h) = @_;\n    return \"zero\" if $l == 0 or $w == 0 or $l == 0;\n    my $area = 2*($w+$l)*$h;\n    $area += $area*0.15;\n    return $numbers[ceil($area\/$rarea)];\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"569218bc919ccba77000000b":[{"id":219254,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(date_nb_days);\n\nuse POSIX qw(ceil);\nuse DateTime;\n\nsub date_nb_days {\n    my ($a0, $a, $p) = @_;\n\n    DateTime->new( year => 2016, month => 1, day => 1 )\n            ->add( days => ceil(log($a\/$a0)\/log(1+$p\/36000)) )\n            ->ymd;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219255,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(date_nb_days);\nuse Time::Piece ();\nuse Time::Seconds;\nuse POSIX qw\/ceil\/;\n\nsub date_nb_days {\n    my ($a0, $a, $p) = @_;\n    my $date = '20160101';\n    my $start = Time::Piece->strptime( $date, '%Y%m%d');\n    my $r = ceil(log($a \/ $a0) \/ log(1 + $p \/ 36000.0));\n    my $res = $start + ONE_DAY * $r;\n    $res->strftime('%Y-%m-%d');\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219256,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse DateTime;\nuse POSIX qw\/ceil\/;\n\nour @EXPORT_OK = qw(date_nb_days); \n\n\nsub date_nb_days {\n    my ($a0, $a, $p) = @_;\n    DateTime->new( year => 2016, month => 1, day => 1 )\n            ->add( days => ceil(log($a\/$a0)\/log(1+$p\/36000)) )\n            ->ymd;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219257,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse Time::Piece ();\nuse Time::Seconds;\n\nour @EXPORT_OK = qw(date_nb_days);\n\nsub date_nb_days {\n    my ($a0, $a, $p) = @_;\n    \n    my $acc = $a0;\n    my $end_time = Time::Piece->strptime(\"2016-01-01\", '%Y-%m-%d');\n    \n    while($acc < $a) {\n        $acc = $acc * (1 + $p \/ 36000);\n        $end_time += ONE_DAY;\n    }\n    \n    return $end_time->strftime('%Y-%m-%d')\n}\n\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219258,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse DateTime;\nour @EXPORT_OK = qw(date_nb_days);\n\nsub date_nb_days {\n    my($i_a0, $i_a, $f_p) = @_;\n    my $i_day = 0;\n    my $f_a   = $i_a0;\n    \n    while($f_a < $i_a){\n        $f_a += ($f_p \/ 36000) * $f_a;\n        $i_day++;\n    }\n    my $dt = DateTime->new(year => '2016', month => '1', day => '1');\n    $dt->add(days => $i_day);\n    return $dt->ymd('-');\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219259,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(date_nb_days);\nuse DateTime;\n\n\nsub date_nb_days {\n\tmy ( $amount, $amount0, $percent ) = @_;\n\n\tmy $dt = DateTime->new( \n\t\tyear => 2016,\n\t\tmonth => 1,\n\t\tday => 1,\n\t);\n\n\tmy $percent_by_day = $percent \/ 36000;\n\t\n\tmy $result;\n\tmy $i = 0;\n\t\n\twhile ( $amount0 > $amount ) {\n\t\t$amount +=  ( $amount ) * $percent_by_day;\n\t\t$i++;\n\t}\n    $result = $dt->add(days => $i)->strftime(\"%Y-%m-%d\");\n    return $result;\n }","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219260,"user_id":null,"body":"package Solution;\n\nuse v5.30;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(date_nb_days);\n\nuse DateTime;\n\nmy $start = DateTime->new(year => 2016, month => 1, day => 1);\n\nsub date_nb_days {\n    my ($acc, $d, $p) = @_;\n    $p \/= 36000;\n    \n    my $days = 0;\n    while ($acc < $d) {\n        $acc += $acc * $p;\n        ++$days;\n    }\n    \n    return $start->clone->add(days => $days)->strftime('%F');\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219261,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\n\nuse DateTime ();\n\nuse Exporter qw(import);\nour @EXPORT_OK = qw(date_nb_days);\n\nsub date_nb_days {\n    my ( $startingBalance, $targetBalance, $annualPercentage ) = @_;\n    my $perDiemRate = ( $annualPercentage \/ 360 ) \/ 100;\n    my $daysUntilTarget = 0;\n    while ( $startingBalance < $targetBalance ) {\n        $daysUntilTarget++;\n        $startingBalance += ( $startingBalance * $perDiemRate );\n    }\n    return  DateTime->new(\n          'year' => 2016\n        , 'month' => 1\n        , 'day' => 1\n        , 'time_zone' => 'UTC'\n    )->add( 'days' => $daysUntilTarget )->strftime( '%Y-%m-%d' );\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"569b5cec755dd3534d00000f":[{"id":219262,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(new_avg);\n\n# parammeter: array_ref, integer;\nsub new_avg {\n   my $donationref = shift;\n   my @donations = @$donationref;\n   my $avg = shift;\n   my $count = 0;\n   my $donation = 0;\n   my $total = 0;\n   \n   foreach $donation (@donations) {\n     $total += $donation;\n     $count++;\n   }\n   \n   my $result = int($avg * ($count + 1) - $total + 0.5); # +0.5 instead of round\n   if ($result < 0) { $result = -1;}\n   \n   return $result;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219263,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(new_avg);\n\n# parammeter: array_ref, integer;\nsub new_avg {\n    my ($nums, $navg) = @_;\n    my $sum;\n    \n    $sum += $_ for @$nums;\n    my $avg = $sum \/ @$nums;\n    my $donation = int(0.5 + ($navg * (@$nums + 1) - $sum));\n        \n    return $donation if $donation > 0;\n    return -1;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219264,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings; \nuse POSIX;\nuse List::Util qw(sum);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(new_avg);\n\n# parammeter: array_ref, integer;\nsub new_avg {\n    my ($arr, $u, $s, $x, $l) = (@_, 0, 0, 0);\n    $s = sum(@$arr);\n    $l = @$arr;\n    $x = ceil($u * ($l + 1) - $s);\n    return -1 if $x <= 0;\n    $x;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219265,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(new_avg);\n\n# parammeter: array_ref, integer;\nsub new_avg {\n    my ( $arr, $int ) = @_ ;\n    my ( $avg, $donation, $x ) = ( 0, 0, 0);\n    \n    for my $i ( 0 .. $#{ $arr }) {\n        $donation += $arr->[$i] ; \n    }\n    \n    $x = $int * ( $#{ $arr } + 2 ) - $donation ; \n    \n    return -1 if $x <= 0 ;\n    return sprintf(\"%.0f\", $x );\n    \n    0;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219266,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse POSIX;\nour @EXPORT_OK = qw(new_avg);\n\n# parammeter: array_ref, integer;\nsub new_avg{\n  my ($array_ref, $ave) = @_;\n  my @array = @$array_ref;\n  my $value = (scalar @array + 1) * $ave;\n  for(@array){\n    $value -= $_;\n  }\n  return $value > 0 ? ceil($value) : -1;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219267,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse POSIX;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(new_avg);\n\n# parammeter: array_ref, integer;\nsub new_avg {\n    my ($dons, $av) = @_;\n    my $sum = 0;\n    my $count = 1;\n    foreach (@$dons) {\n        $sum += $_;\n        $count++;\n    }\n    my $c_av = $sum \/ $count;\n    if ($c_av > $av){\n        return -1;\n    \n    }\n    my $next = ceil(($count * $av) - $sum);\n    return $next;\n    \n    0;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219268,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(new_avg);\n\nuse List::Util qw\/sum\/;\nuse POSIX qw\/ceil\/;\n\n# parammeter: array_ref, integer;\nsub new_avg {\n    my ($lst, $navg) = @_;\n    my $needed = $navg * (scalar @$lst + 1) - sum @$lst;\n    return $needed > 0 ? ceil($needed) : -1;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219269,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util qw(max);\nuse POSIX qw(ceil);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(new_avg);\n\n# parammeter: array_ref, integer;\nsub new_avg {\n    my ($arr, $target)  = @_;\n    my $sum = 0;\n    for (@$arr) { $sum += $_; }\n    ceil max -1, $target * (@$arr + 1) - $sum;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219270,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(new_avg);\nuse POSIX qw(ceil);\nuse List::Util qw(reduce);\n\n# parammeter: array_ref, integer;\nsub new_avg {\n    my ($donations_ref, $new_avg) = @_;\n    my $cur_donation = @$donations_ref ? reduce { $a + $b } @$donations_ref : 0;\n    my $new_donation = $new_avg * (scalar @$donations_ref + 1) - $cur_donation;\n    $new_donation < 0 ? -1 : ceil($new_donation);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219271,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util 'sum0';\nuse POSIX;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(new_avg);\n\n# parammeter: array_ref, integer;\nsub new_avg {\n    my ($arr, $newavg) = @_;\n    my $donation = ceil((@{$arr}+1)*$newavg - sum0(@{$arr}));\n    ($donation <= 0) ? -1 : $donation;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56a32dd6e4f4748cc3000006":[{"id":219272,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(mean variance);\n\nuse List::Util qw\/sum\/;\nuse English qw( -no_match_vars );\nuse autodie;\n\nsub data_parser\n{\n  my $file = shift;\n\n  return $file\n    if ref $file;\n\n  my $header_delim = ':';\n  my $point_delim  = ',';\n\n  # chomp'd to prevent warnings about newlines in filenames,\n  # but not ideal since the data will be duplicated\n  # if this is a data string and not a file name\n  # (which we know it is for the purposes of this problem).\n  my $filename = '' . $file;\n  chomp $filename;\n  my $header_regex = qr\/([^ $header_delim ]*) $header_delim (.*)\/xms;\n  my %records;\n\n  open(my $file_handle, '<', -e $filename ? $filename : \\$file);\n  local $INPUT_RECORD_SEPARATOR = \"\n\";\n  RECORD:\n  while (my $line = <$file_handle>)\n  {\n    my ($town, $data_points) = $line =~ m\/$header_regex\/;\n\n    $data_points \/\/= '';\n    open(my $points, '<', \\$data_points);\n    local $INPUT_RECORD_SEPARATOR = $point_delim;\n    DATA_POINT:\n    while ( my $point = <$points> )\n    {\n      $point =~ s\/[^.\\d]\/\/g;\n      push @{ $records{$town} }, $point;\n    }\n  }\n\n  return \\%records;\n}\n\n# parameters: rainfall_data (string), town (string)\nsub mean\n{\n  my $data = shift;\n  my $town = shift;\n  \n  return -1.0\n    if !$town;\n\n  $data = &data_parser($data);\n  my $town_data = $data->{$town};\n  \n  return -1.0\n    if !@$town_data;\n\n  return sum(@$town_data) \/ @$town_data;\n}\n\nsub variance\n{\n  my $data = shift;\n  my $town = shift;\n\n  return -1.0\n    if !$town;\n\n  $data = &data_parser($data);\n  my $town_data = $data->{$town};\n  \n  return -1.0\n    if !@$town_data;\n\n  my $u = &mean($data, $town);\n\n  return sum(map { ($_ - $u) ** 2 } @$town_data) \/ @$town_data;\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219273,"user_id":null,"body":"package Solution;\n\nuse v5.30;\nuse warnings;\nuse List::Util qw(sum0);\n\nuse experimental qw(declared_refs refaliasing signatures);\n\nuse Exporter qw(import);\nour @EXPORT_OK = qw(mean variance);\n\nsub mean($str, $city){\n    my \\%data = _prepare_data($str);\n    return -1 unless exists $data{$city};\n    \n    return _mean($data{$city});\n}\n\nsub variance($str, $city) {\n    my \\%data = _prepare_data($str);\n    return -1 unless exists $data{$city};\n    \n    my $mean = _mean($data{$city});\n    return _mean([map {($_ - $mean) ** 2} $data{$city}->@*]);\n}\n\nsub _mean($arr) {return sum0($arr->@*) \/ scalar $arr->@*}\n\nsub _prepare_data($str) {\n    my %result;\n    foreach my $city_data (split m\/\\R\/, $str) {\n        my ($city, $data) = split m\/:\/, $city_data;\n        $result{$city} = [map {(split m\/\\s\/)[-1]} split m\/,\/, $data];\n    }\n    return \\%result;\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219274,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(mean variance);\n\nuse List::Util qw(sum);\nuse experimental qw(signatures);\n\nsub nums ($string, $name) {\n    for (split \"\n\", $string) {\n        next unless m\/^$name\\:\/;\n        return m\/(\\d+\\.\\d+)\/g;\n    }\n    return ();\n}\n\nsub mean ($string, $name) {\n    my @nums = nums($string, $name);\n    return -1.0 unless @nums;\n    return sum(@nums) \/ @nums;\n}\n\nsub variance ($string, $name) {\n    my @nums = nums($string, $name);\n    return -1.0 unless @nums;\n    my $mean = sum(@nums) \/ @nums;\n    return sum(map { ($_ - $mean)**2 } @nums) \/ @nums;\n}\n","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219275,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(mean variance);\n\n# parameters: rainfall_data (string), town (string)\nsub mean{\n  my ($rainfall_data, $town) = @_;\n  my %pairs = manipulate($rainfall_data);\n  unless (exists $pairs{$town}) {\n    return -1;\n  }\n  my @town_records = split(\",\", $pairs{$town});\n  my $total = 0.0;\n  for(@town_records){\n    $total += $_;\n  }\n  return $total \/ scalar @town_records;\n}\n\nsub variance{\n  my ($rainfall_data, $town) = @_;\n  my %pairs = manipulate($rainfall_data);\n  unless (exists $pairs{$town}) {\n    return -1;\n  }\n  my @town_records = split(\",\", $pairs{$town});\n  my $total = 0.0;\n  my $mean = mean($rainfall_data, $town);\n  for(@town_records){\n    $total += ($_ - $mean)**2;\n  }\n  return $total \/ scalar @town_records;\n}\n\nsub manipulate{\n  my $data = $_[0];\n  my @data_by_city = split(\"\n\", $data);\n  my %pairs = ();\n\n  for(@data_by_city){\n    my @city_and_rainfall = split(\":\", $_);\n    my $city = $city_and_rainfall[0];\n    my $rainfall_string = $city_and_rainfall[1];\n    my @rainfall = split(\",\", $rainfall_string);\n    for(@rainfall){\n      my @month_and_record = split(\" \", $_);\n      $_ = $month_and_record[1];\n    }\n    $pairs{$city} = join(\",\", @rainfall);\n  }\n\n  return %pairs;\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219276,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util 'sum0';\nuse Exporter qw(import);\nour @EXPORT_OK = qw(mean variance);\n\n# parameters: rainfall_data (string), town (string)\nsub mean {\n    my ($data, $town) = @_;\n    for (split(\/\n\/, $data)) {\n        next unless (\/^$town:\/);\n        my $ret = &mean_and_variance($_);\n        return $ret->[0];\n    }\n    return -1;\n}\n\nsub variance {\n    my ($data, $town) = @_;\n    for (split(\/\n\/, $data)) {\n        next unless (\/^$town:\/);\n        my $ret = &mean_and_variance($_);\n        return $ret->[1];\n    }\n    return -1;\n}\n\nsub mean_and_variance {\n    my ($str) = @_;\n    my (@arr, $avg, $var);\n    @arr = map {\/(\\d+\\.\\d+)\/g} $str;\n    $avg = sum0(@arr) \/ 12;\n    $var = (sum0 map {($_ - $avg)**2} @arr) \/ 12;\n    return [$avg, $var];\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219277,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(mean variance);\n\nsub aux {\n    my $d = shift; my $tofnd = shift; my @h = split \/[\n]\/, $d; my $rain = \"\";\n    my @hh = map { [split \/[:]\/] } @h;\n    foreach (@hh) {\n        if ($_->[0] eq $tofnd) { $rain = $_->[1]; last; }\n    }\n    if ($rain eq \"\") { return (-1, -1); }\n    my @mths = split \/[,]\/, $rain;\n    my $s = 0; my $s2 = 0;\n    foreach (@mths) {\n        my $e = (split \/[ ]\/, $_)[1];\n        $s += $e; $s2 += $e * $e;\n    }\n    my $m = $s\/12.0;\n    my $v = $s2 \/ 12.0 - $m * $m;\n    return ($m, $v);\n}\nsub mean {\n    my $d = shift; my $tofnd = shift;\n    my ($m, $v) = aux($d, $tofnd);\n    return $m;\n}\nsub variance {\n    my $d = shift; my $tofnd = shift;\n    my ($m, $v) = aux($d, $tofnd);\n    return $v;\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56a4872cbb65f3a610000026":[{"id":219278,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(max_rot);\n\nsub max_rot {\n    my $s = shift();\n    my ($r, $mx, $len) = ($s, $s, length($s));\n    for (my $i = 0; $i < $len - 1; $i++) {\n        $r = substr($r, 0, $i) . substr($r, $i + 1) . substr($r, $i, 1);\n        if ($r > $mx) { $mx = $r; }\n    }\n    $mx;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219279,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(max_rot);\n\nsub max_rot {\n    my ($number) = @_;\n\n    my $rotate  = sub { (@_[1 .. $#_], $_[0]) };\n    my @numbers = ($number);\n\n    my @digits = $rotate->(split('', $number));\n    for my $i (0 .. $#digits - 1) {\n        push @numbers, join('', @digits);\n        my @fixed = @digits[0 .. $i];\n        my @rest  = $rotate->(@digits[$i + 1 .. $#digits]);\n        @digits = (@fixed, @rest);\n    }\n\n    return List::Util::max(@numbers);\n}\n","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219280,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(max_rot);\n\nsub max_rot {\n    my ( $num ) = @_;\n    my $result = $num;\n\n    return $result if length($num) <= 1;\n\n    for my $i ( 0 .. length($num) - 1 ) {\n        $num = rotate_left($num, $i);\n        $result = $num if $num > $result;\n    }\n    return $result;\n}\n\nsub rotate_left {\n    my ( $num, $index ) = @_;\n    my $digit = substr($num, $index, 1);\n    substr($num, $index, 1) = '';\n    $num .= $digit;\n    return $num;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219281,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(max_rot);\n\nsub max_rot {\n    my $n = $_[0];\n    my $largest = $n;\n    my $max = digits($n);\n    \n    my @narray = ();\n    for ((0..$max-1)) {\n        push(@narray, $n % 10);\n        $n = int($n \/ 10);\n    }\n    \n    @narray = reverse(@narray);\n    my @frontlock = ();\n    \n    while (scalar(@narray) > 1) {\n        push(@narray, shift(@narray));\n        push(@frontlock, shift(@narray));\n        my @temp = @narray;\n        my @tempfront = @frontlock;\n        my $thisnum = 0;\n        my $i = 0;\n        while (scalar(@temp) > 0) {\n            $thisnum = $thisnum + (pop(@temp) * 10**$i);\n            $i++;\n        }\n        while (scalar(@tempfront) > 0) {\n            $thisnum = $thisnum + (pop(@tempfront) * 10**$i);\n            $i++;\n        }\n        $largest = $thisnum if ($thisnum > $largest);\n    }\n    \n    return $largest;\n    \n}\n\nsub digits {\n    my $n = $_[0];\n    my $i = 0;\n    return 1 if ($n < 10);\n    while ($n != 0) {\n        $n = int($n \/ 10);\n        $i++;\n    }\n    return $i;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219282,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util qw(max);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(max_rot);\n\nsub max_rot {\n    my $n = shift;\n    my @options = ();\n    for (0..length($n)-1) {\n        push @options, $n;\n        $n =~ s\/(.{$_})(.)(.*)\/$1$3$2\/;\n    }\n    max @options;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219283,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(max_rot);\n\nsub max_rot {\n \n my $largestNum = shift; \n my $numLength = length($largestNum); \n my $count = 0; \n my $currNum =  $largestNum;\n\n while ($count < $numLength) {\n \n if ($count > 1) { \n    my $startingDigits = substr $currNum, 0, ($count - 1); \n    my $endDigits = substr $currNum, ($count - 1), 1;\n    my $middleDigits = substr $currNum, $count;\n     $currNum = $startingDigits . $middleDigits . $endDigits;\n  } else {\n    my $unchangedDigits = substr $currNum, $count;\n    my $changedDigits = substr $currNum, 0, $count;\n    $currNum = $unchangedDigits . $changedDigits;\n }\n if ($currNum > $largestNum) {\n $largestNum = $currNum;\n }\n $count++;\n } \n return $largestNum; \n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219284,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(max_rot);\n\nsub split_at_pos {\n    my ($n, $pos) = @_;\n    my $head = substr $n, 0, $pos, '';\n    return ($head, $n);\n}\n\nsub rot_left {\n    my ($n) = @_;\n    (substr $n, 1) . (substr $n, 0, 1);\n}\n\nsub max_rot {\n    my ($n) = @_;\n    my $max = $n;\n    my $rot_pos = 0;\n    while ($rot_pos < length($n)) {\n        my ($head, $tail) = split_at_pos($n, $rot_pos++);\n        $n = $head . rot_left($tail);\n        $max = $n if $n > $max;\n    }\n    $max;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219285,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util qw(max);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(max_rot);\n\nsub max_rot {\n    my $number = shift;\n    my $tmp = $number;\n    my $numFixed = $tmp =~ s\/\\d\/\/g;\n    my @all = ($number);\n    \n    for (0..$numFixed-1) {\n        my $pattern = \"\\\\d\\{$_\\}\";\n        $tmp = $all[$#all];\n        $tmp =~ s\/($pattern)(\\d{1})(\\d*)\/$1$3$2\/;\n        push @all, $tmp;\n    }\n    \n    return max(@all);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219286,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(max_rot);\n\nsub max_rot {\n    my $str = shift;\n    my $len = length $str;\n    my $max = $str;\n    foreach my $i (0 .. $len) {\n        $str = substr($str, 0, $i) . substr($str, $i + 1, $len - 1) . substr($str, $i, 1);\n        $max = $str if $str > $max;\n    }\n    $max\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219287,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util 'max';\nuse Exporter qw(import);\nour @EXPORT_OK = qw(max_rot);\n\nsub max_rot {\n    my $str = shift;\n    my $len = length $str;\n    my @list = ($str);\n    foreach my $i (0 .. $len) {\n        $str = substr($str, 0, $i) . substr($str, $i + 1, $len - 1) . substr($str, $i, 1);\n        push(@list, $str);\n    }\n    max @list\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56a5d994ac971f1ac500003e":[{"id":219288,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest_consec);\nuse List::Util qw(sum0);\n# parameters: array_ref, integer; return: string\nsub longest_consec {\n    my ($a, $n) = @_;\n    return \"\" if $n > @$a;\n    my $t = sum0 map { length } @$a[0..$n-1];\n    my ($max, $mi) = ($t, 0);\n    for (my $i = $n; $i < @$a; $i++) {\n        $t = $t - length($a->[$i-$n]) + length($a->[$i]);\n        if ($t > $max) {\n            $max = $t;\n            $mi = $i -$n + 1;        \n        }\n    }\n    join ('', @$a[$mi..$mi+$n-1]);\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219289,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest_consec);\n\nsub concat_k_strings {\n    my ( $words_ref, $k, $init_idx ) = @_;\n\n    my $concat_str = \"\";\n    for ( my $j = 0 ; $j < $k && $init_idx + $j < @{$words_ref} ; $j++ ) {\n        $concat_str .= $words_ref->[ $init_idx + $j ];\n    }\n    return $concat_str;\n}\n\nsub longest_consec {\n    my ( $words_ref, $k ) = @_;\n    my $words_length = @{$words_ref};\n    return \"\" if ( $words_length == 0 || $k > $words_length || $k <= 0 );\n\n    my $max_concat = \"\";\n    for ( my $i = 0 ; $i < $words_length ; $i++ ) {\n        my $concat_str = concat_k_strings( $words_ref, $k, $i );\n\n        my $concat_length = length $concat_str;\n        $max_concat = $concat_str\n          if ( length $concat_str > length $max_concat );\n    }\n    return $max_concat;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219290,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest_consec);\n\nsub concat_k_strings {\n    my ( $words_ref, $k, $init_idx ) = @_;\n\n    my $concat_str = \"\";\n    for ( my $j = 0 ; $j < $k && $init_idx + $j < @{$words_ref} ; $j++ ) {\n        $concat_str .= $words_ref->[ $init_idx + $j ];\n    }\n    return $concat_str;\n}\n\nsub longest_consec {\n    my ( $words_ref, $k ) = @_;\n    my $words_length = @{$words_ref};\n    return \"\" if ( $words_length == 0 || $k > $words_length || $k <= 0 );\n\n    my $max_length = 0;\n    my $max_concat = \"\";\n    for ( my $i = 0 ; $i < $words_length ; $i++ ) {\n        my $concat_str = concat_k_strings( $words_ref, $k, $i );\n\n        my $concat_length = length $concat_str;\n        if ( $concat_length > $max_length ) {\n            $max_length = $concat_length;\n            $max_concat = $concat_str;\n        }\n    }\n    return $max_concat;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219291,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest_consec);\n\n# parameters: array_ref, integer; return: string\nsub longest_consec {\n    my ( $strings, $cnt ) = @_;\n    return '' if scalar @$strings == 0 or $cnt > scalar @$strings or $cnt <= 0;\n\n    my $result = '';\n    for my $i ( 0 .. scalar(@$strings) - $cnt ) {\n        my $str = join '', @$strings[$i .. $i + $cnt - 1];\n        $result = $str if length $str > length $result;\n    }\n    return $result;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219292,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest_consec);\n\n# parameters: array_ref, integer; return: string\nsub longest_consec {\n    my ($arr_ref, $k) = @_;\n    my @arr = @{ $arr_ref };\n    \n    my $answer = '';\n    for ( my $i = 0, my $end = $#arr - $k + 1 ; $i <= $end ; ++$i ) {\n        my $s = join('', @arr[$i .. $i + $k -1]);\n        $answer = $ s if (length($s) > length($answer));\n    }\n    return $answer;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219293,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest_consec);\n\n# parameters: array_ref, integer; return: string\nsub longest_consec {\n    my ($ptr, $num, ) = @_;\n    my @arr = @$ptr;\n\n    return \"\" if scalar @arr < $num or scalar @arr == 0 or $num > scalar @arr;\n\n    my $max_len = 0;\n    my $response = '';\n    my $tstring;\n    for (my $i=0; $i<scalar(@arr)-$num+1; $i++) {\n        $tstring = '';\n        for (my $j=0; $j<$num; $j++) {\n            $tstring .= $arr[$i+$j];\n        }\n        if (length($tstring) > $max_len) {\n            $max_len = length($tstring);\n            $response = $tstring;\n        }\n    }\n    return $response;\n}\n","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219294,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest_consec);\n\n# parameters: array_ref, integer; return: string\nsub longest_consec {\n    my ($aref, $k) = @_;\n    return \"\" if (@$aref < $k or $k <= 0);\n    (sort {length($b) <=> length($a)} map {join \"\", @{$aref}[$_..($k-1+$_)]} (0..@{$aref}-1))[0];\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219295,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest_consec);\n\n# parameters: array_ref, integer; return: string\nsub longest_consec {\n    my ($strarr, $k) = @_;\n    if (($k > @$strarr) || (@$strarr == 0) || ($k <= 0)) { return \"\";  }\n    my $longest = \"\";\n    for (my $i = 0; $i <= @$strarr - $k; ++$i) {\n        my $s = \"\";\n        my $j = 0;\n        while ($j < $k) {\n            $s .= $strarr->[$i + $j];\n            ++$j;\n        }\n        if (length($s) > length($longest)) { $longest = $s; }\n    }\n    $longest;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56af1a20509ce5b9b000001e":[{"id":219296,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(travel);\n\nsub travel {  \n    my ($addresses, $zip_find) = @_;\n    \n    return \"$zip_find:\/\" if ! $addresses || ! $zip_find;\n        \n    my (@numbers, @locations);\n    \n    for my $addr (split \",\", $addresses) {\n        my ($num, $loc) = $addr =~ \/(\\d+) (.+?) $zip_find$\/;\n        \n        next if ! $num || ! $loc;\n        \n        push @numbers, $num;\n        push @locations, $loc;\n    }\n    \n    return $zip_find . ':' . join(\",\", @locations) . '\/' . join(',', @numbers);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219297,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(travel);\n\nsub travel {  \n    my  $zip = $_[1];\n    my  %res;   \n    for (split \/,\/, $_[0]) {    \n        \/(\\d+) (.*) ([A-Z]{2} \\d{5})\/;    \n        push @{$res{$3}->{'street'}}, $2;\n        push @{$res{$3}->{'house'}},  $1;\n    }\n    \n    return $zip.':\/' unless exists $res{$zip};\n    return $zip.':'.join(',',  @{ $res{$zip}->{'street'}} ).'\/'.join(',',  @{ $res{$zip}->{'house'}} );\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219298,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(travel);\n\nsub travel {\n    my ($addresses, $zipcode) = @_;\n\n    my (@streets, @numbers);\n    for (split(',', $addresses)) {\n        my ($number, $street, $zip) = $_ =~ m\/(\\d+) (.+) (\\w\\w \\d+)\/;\n        if ($zip && $zip eq $zipcode) {\n            push @streets, $street;\n            push @numbers, $number;\n        }\n    }\n    \n    sprintf(\"%s:%s\/%s\", $zipcode, join(',', @streets), join(',', @numbers));\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219299,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(travel);\n\nsub travel {  \n    my ($list, $location) = @_;\n    return \":\/\" unless $location;\n\n    my @addresses = map { s\/\\s$location\/\/gr } grep { \/$location$\/ }  split(\/,\n\/,$list);\n\n    if (@addresses) {\n        my $streets = join(\",\",@addresses);\n        my $numbers = join(',', ( $streets =~ \/\\d+\/ga ));\n        $streets =~ s\/\\d+\\s\/\/g;\n        return \"$location:$streets\/$numbers\" ;\n    } else {\n        return \"$location:\/\";\n    }\n   print @addresses;\n    \n    \n    \n    return \"\";\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219300,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(travel);\n\nsub travel {  \n    my ($input, $inputZip) = @_;\n    my $addrPattern = qr\/(\\d+) (.*) ([A-Z]{2} [0-9]{5})\/;\n    my @texts;\n    my @streetNumbers;\n    foreach (split ',', $input) {\n        my ($streetNumber, $text, $zip) = $_ =~ $addrPattern;\n        next unless $zip eq $inputZip;\n        push @texts, $text;\n        push @streetNumbers, $streetNumber;\n    }\n    local $\" = ',';\n    \"$inputZip:@texts\/@streetNumbers\"\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219301,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Data::Dumper;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(travel);\n\nsub travel {  \n    my ( $addr_str, $search_zip ) = @_;\n    my $result = \"$search_zip:\/\";\n    my ( @found_streets, @found_houses );\n    for my $addr ( split ',\n', $addr_str ) {\n        next unless $addr =~ m\/^(\\d+)\\s+(.+)\\s+([A-Z]{2}\\s+\\d{5})$\/;\n        my ( $house, $street, $zip ) = ( $1, $2, $3 );\n        next if $zip ne $search_zip;\n        push @found_streets, $street;\n        push @found_houses, $house;\n    }\n    if ( @found_streets and @found_houses ) {\n        $result = $search_zip . ':' . join(',', @found_streets) . '\/' . join(',', @found_houses);\n    }\n\n    return $result;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219302,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(travel);\n\nsub travel {  \n    my ($ad, $zip) = @_;\n    my (@streets, @numbers);\n    for (split \/,\n\/, $ad) {\n        if ($zip =~ \/[A-Z]{2} \\d{5}\/ && \/(\\d+) (.*) $zip\/) {\n            push @numbers, $1;\n            push @streets, $2;\n        }\n    }\n    sprintf \"$zip:%s\/%s\", join(\",\", @streets), join(\",\", @numbers);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219303,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(travel);\n\nsub travel {\n\n    my $addresses = shift;\n    my $target_zip = shift;\n            \n    my @streets = ();\n    my @numbers = ();\n    \n    for (split(\"\n\", $addresses)){\n\n        if(\/^([0-9]+)\\s(.*)\\s([A-Z]{2} [0-9]{5})[,]?$\/){\n                \n            if($3 eq $target_zip){\n            \n                push(@numbers, $1);            \n                push(@streets, $2);\n\n            }\n        }\n    }\n    \n    return $target_zip . \":\" . join(',', @streets) . \"\/\" . join(',', @numbers);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219304,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(travel);\n\nsub travel {\n\n    my $addr = shift;\n    my $target_zip = shift;\n    my @addresses = split(\"\n\", $addr);\n            \n    my @streets = ();\n    my @numbers = ();\n    \n    for $a (@addresses){\n\n        if($a =~ \/^([0-9]+)\\s(.*)\\s([A-Z]{2} [0-9]{5})[,]?$\/){\n        \n            my $number = $1;\n            my $street = $2;\n            my $zip = $3;\n        \n            if($zip eq $target_zip){\n            \n                push(@streets, $street);\n                push(@numbers, $number);\n            }\n        }\n    }\n    \n    return $target_zip . \":\" . join(',', @streets) . \"\/\" . join(',', @numbers);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219305,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(travel);\n\nsub travel {  \n    my ($r, $zipcode) = @_;\n    my (@street, @house);\n    for my $addr (split(\/,\n\/, $r)) {\n        if ($addr =~ \/^(\\S+)\\s+(.+)\\s+$zipcode$\/) {\n            push(@street, $2);\n            push(@house, $1);\n        }\n    }\n    sprintf(\"%s:%s\/%s\", $zipcode, join(\",\", @street), join(\",\", @house));\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56b5afb4ed1f6d5fb0000991":[{"id":219306,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(revrot);\n\nsub revrot {\n    my ($s, $sz) = @_;\n    if (($sz <= 0) || ($s eq \"\") || ($sz > length($s))) { return \"\"; }\n    my $res = \"\";\n    my @parts = $s =~ \/(.{$sz})\/g;\n    for (@parts) {\n        my @arr = $_ =~ \/.\/g;\n        my $sum = 0;\n        $sum += $_ foreach(@arr);\n        if ($sum % 2 == 0) { $res .= reverse($_); }\n        else { $res .= substr($_, 1) .substr($_, 0, 1); }\n    }\n    $res;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219307,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(revrot);\n\nsub sum_of_cubes_odd {\n    my ($chunk) = @_;\n    my @odds = ();\n    \n    while(length($chunk) > 0) {\n        my $digit = chop $chunk;\n        push @odds, $digit if $digit % 2 == 1;\n    }\n    \n    return (scalar @odds) % 2;\n}\n\nsub revrot {  \n    my ($s, $size) = @_;\n    my $final = \"\";\n    \n    while (length($s) >= $size && $size > 0) {\n        my $chunk =  reverse(substr $s, 0, $size, \"\");\n        \n        if (sum_of_cubes_odd($chunk)) {\n            my $digit = chop $chunk;\n            $chunk = (reverse $chunk).$digit;\n        }\n        \n        $final = $final.$chunk;\n    }\n    \n    \n    return $final;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219308,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(revrot);\n\nsub revrot {  \n    my  ($str,$ln,$out) = (@_,'');  \n    return '' if $ln <= 0 || $str eq '' || $ln > length($str);\n    for my  $s ($str=~\/(.{$ln})\/g) { \n        my  $sum;\n        for (split \/\/, $s) { $sum += $_ ** 3 } \n        if ($sum % 2) { $s =~ s{^(.)(.*)$}{$2$1} }\n        else          { $s = reverse $s}\n        $out .= $s; \n    } \n    $out\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219309,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(revrot);\n\nsub revrot {  \n    my ($str, $sz) = @_;\n    return \"\" if ($sz <= 0 or $sz > length($str));\n    my $i = 0;\n    while ($i < length($str)) {\n        my $chunk = substr($str, $i, $sz);\n        if (length($chunk) < $sz) {\n            substr($str, $i, $sz) = \"\";\n            return $str;\n        }\n        my $sum = 0;\n        for (split('', $chunk)) {\n            $sum = $sum + $_ ** 2;\n        }\n        my $newchunk = \"\";\n        if ($sum % 2 == 0) {\n            $newchunk = reverse(split('', $chunk));\n        } else {\n            my @chunksplit = split('', $chunk);\n            push(@chunksplit, shift(@chunksplit));\n            $newchunk = join('', @chunksplit);\n        }\n        substr($str, $i, $sz) = $newchunk;\n        $i = $i + $sz;\n    }\n    return $str;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219310,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(revrot);\n\nsub revrot {  \n    my ($s, $sz) = @_;\n    my $length = length($s);\n#   print $length,\" \",$sz;\n    my $result;\n    if (($length < $sz) or ($length eq 0) or ($sz == 0)){\n        return \"\";\n    }\n    my $count = 0;\n    my $sub;\n    my $number;\n    my $sum = 0;\n    while ($count < $length-$sz){\n        $sub = substr($s,$count,$sz);\n#        print $sub;\n        for (my $ab = 0; $ab < $sz; $ab++){\n            $number = substr($sub,$ab,1);\n            print $number,\" \",;\n            $sum += $number*$number*$number;\n        }\n        if ($sum % 2 == 0){\n            $result .= reverse($sub);\n        }\n        else{\n            $result .= substr($sub,1,$sz);\n            $result .= substr($sub,0,1);\n        }\n        $count += $sz;\n    }\n    \n    return $result;\n    \n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219311,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util 'sum0';\nuse Exporter qw(import);\nour @EXPORT_OK = qw(revrot);\n\nsub revrot {\n    my ($str, $sz) = @_;\n    return \"\" if ($sz <= 0 or $str eq \"\" or $sz > length($str));\n    my ($ret, $i) = (\"\", 0);\n    while ($i <= length($str)) {\n         my $n = substr($str, $i, $sz);\n         my $s = sum0 map {$_**3} map {\/.\/g} $n;\n         $i += $sz;\n         last if (length($n) < $sz);\n         $ret .= ($s%2) ? substr($n, 1, $sz) . substr($n, 0, 1) : reverse($n);\n    }\n    $ret;\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56baeae7022c16dd7400086e":[{"id":219312,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Data::Dumper;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(phone);\n\nsub phone {  \n    my ($str, $num) = @_;\n    my ($name, $addr);\n    my @arr = grep {\/\\+$num\/} split(\/\\\n\/, $str);\n    return \"Error => Too many people: $num\" if (@arr > 1);\n    return \"Error => Not found: $num\" if (not @arr);\n    $name = $1 if ($arr[0] =~ \/\\<(.*)\\>\/);\n    ($addr = $arr[0]) =~ s\/\\<.*\\>\/\/g;\n    $addr =~ s\/\\+$num\/\/g;\n    $addr =~ s\/[!,;:\\\/\\$\\*\\?]\/\/g;\n    $addr =~ s\/_\/ \/g;\n    $addr =~ s\/ +\/ \/g;\n    $addr =~ s\/^ *\/\/g;\n    $addr =~ s\/ *$\/\/g;\n    \"Phone => $num, Name => $name, Address => $addr\";\n}\n","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219313,"user_id":null,"body":"package Solution;\n\nuse v5.30;\nuse warnings;\nuse experimental qw(declared_refs refaliasing signatures);\n\nuse Exporter qw(import);\nour @EXPORT_OK = qw(phone);\n\nuse List::Util qw(pairmap);\n\nsub fix ($str) { # the stupid part. who would know possible errors in address?\n    $str =~ s\/[_;\\\/]\/ \/g;\n    $str =~ s\/(\\W)+\/$1\/g;\n    $str =~ s\/(Stree)([^t])\/$1t$2\/g;\n    $str =~ s\/(Av|Pk|Rd|St)\\b[.]?\/$1.\/g;\n    $str =~ s\/(Street)\\s*\\z\/$1.\/g;\n    $str =~ s\/(\\w{2}-\\d{4})[!?]\/${1}9\/g;\n    $str =~ s\/(\\w{2}-\\d{5})[\\w,!]+\/${1}\/g;\n    return $str;\n}\n\nsub trim ($str) { \n    return $str =~ s\/\\A[\\s]+||\\s+\\z\/\/urg;\n}\n\nsub detect_attributes ($line) {\n    state $PHONE_REGEX = qr{\\w? \\W? [+] (\\d{1,2} - \\d{3} - \\d{3} - \\d{4}) \\w?}x;\n    state $NAME_REGEX  = qr{[<] (.+?) [>]}x;\n\n    my ($phone) = $line =~ $PHONE_REGEX;\n    my ($name)  = $line =~ $NAME_REGEX;\n    $line =~ s\/$PHONE_REGEX\/\/;\n    $line =~ s\/$NAME_REGEX\/\/;\n\n    my %result = ('Address' => trim(fix($line)), 'Name' => $name, 'Phone' => $phone);\n    return \\%result;\n}\n\nsub group_by : prototype(&$) ($key_extractor, $array_ref) {\n    my %result;\n    foreach my $it ($array_ref->@*) {\n        my $key = $key_extractor->($it) \/\/ '<undef>';\n        push($result{$key}->@*, $it);\n    }\n    return \\%result;\n}\n\nsub build_phone_book ($dr) {\n    my @lines = split m\/\\\n\/, $dr;\n    my @attrs = map {detect_attributes($_)} @lines;\n    return group_by(sub ($href) {$href->{'Phone'}}, \\@attrs);\n}\n\nsub phone ($dr, $phone) {\n    state \\%pb = build_phone_book($dr);\n\n    return \"Error => Not found: $phone\" if not exists $pb{$phone};\n\n    my \\@at = $pb{$phone};\n    \n    return \"Error => Too many people: $phone\" if @at != 1;\n    return join ', ', pairmap {\"$a => $b\"} $at[0]->%{qw(Phone Name Address)};\n}\n","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219314,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(phone);\n\nsub trim {\n    my $s = shift;\n    $s =~ s\/^\\s+|\\s+$\/\/g;\n    $s =~ s\/\\s{2,}\/ \/g;\n    return $s;\n}\n\nsub phone {\n    my ( $dir, $num ) = @_;\n    my @dir  = split \/\\\n\/, $dir;\n    my @line = grep { \/\\+${num}\/ } @dir;\n    return \"Error => Too many people: $num\" if ( scalar @line > 1 );\n    return \"Error => Not found: $num\" if ( scalar @line == 0 );\n\n    my $line = $line[0] =~ s\/\\+\\d{1,2}-\\d{3}-\\d{3}-\\d{4}\/\/r;\n    my ($name) = $line =~ \/<(.*)>\/;\n    $name = trim($name);\n\n    $line =~ s\/<.*>|[_\\$!*\\[\\];,:?^`\\\\\\\/]+\/\/g;\n    $line =~ s\/(?!\\s)S(?=t\\.|treet)\/ S\/;\n    $line = trim($line);\n\n    return \"Phone => $num, Name => $name, Address => $line\";\n}\n","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219315,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(phone);\n\nsub phone {  \n    my ( $phone_book, $phone ) = @_;\n    \n    my $result;\n    #warn \"++++++$phone\";\n    for my $str ( split m\/\\s*\\\n\\s*\/, $phone_book) {\n        #warn \"STR=[$str]\";\n        next if index($str, $phone) < 0;\n        next unless $str =~ s\/(\\s|^)[\\W]*\\+\\Q$phone\\E\/$1\/; # cut phone from string\n        #warn \"STR WITHOUT PHONE=[$str]\";\n\n        next unless $str =~ s\/<([^>]+)>\/\/; # cut name from string\n        my $name = $1;\n        #warn \"STR WITHOUT NAME=[$str]\";\n        \n        return \"Error => Too many people: $phone\" if $result;\n        $str =~ s|[\/;_!,?]+| |g;\n        $str =~ s\/\\s{2,}\/ \/g;\n        $str =~ s\/^\\s+\/\/;\n        $str =~ s\/\\s+$\/\/;\n        $result = \"Phone => $phone, Name => $name, Address => $str\";\n    }\n    \n    return \"Error => Not found: $phone\" unless $result;\n\n    return $result;\n}\n","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219316,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(phone);\n\nsub phone {  \n    my $num = $_[1];\n    my @lines = split \/\\\n\/, $_[0];\n    my $found = 0;\n    my $match;\n    for my $l (@lines){\n        if( $l =~ m\/\\+\\Q$num\\E\/ ){\n            $match = $l;\n            $found++;\n        } \n        if( $found > 1 ){\n            return sprintf(\"Error => Too many people: %s\", $num);\n        }\n    }\n    if( $found == 0 ){\n        return sprintf(\"Error => Not found: %s\", $num);\n    }\n    my $tester = $match;\n    $tester =~ m\/.*<([^>]+).*\/;\n    my $name = $1;\n    $tester = $match;\n    $tester =~ s\/\\Q$num\\E\/\/g;\n    $tester =~ s\/<\\Q$name\\E>\/\/g;\n    $tester =~ s\/^[^\\dA-Za-z]*\/\/g;\n    $tester =~ s\/[^\\.\\dA-Za-z]*$\/\/;\n    $tester =~ s\/_\/ \/g;\n    $tester =~ s\/[^\\.\\- A-Za-z\\d]\/\/g;\n    $tester =~ s\/ +\/ \/g;\n    return sprintf(\"Phone => %s, Name => %s, Address => %s\", $num, $name, $tester); \n}\n","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219317,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse Data::Dumper;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(phone);\n\nsub phone {\n    my ($addressBook, $num) = @_;\n#    warn Dumper(\\$num).\"\n\";\n    \n    return \"Error => Not found: $num\" if ($addressBook !~ \/\\+$num\/);\n    \n    my $lineToProcess = undef;\n    foreach my $line (split(\/\\\n\/, $addressBook)) {\n        #warn Dumper(\\$line).\"\n\";\n        next if ($line !~ \/\\+$num\/);\n        \n        return \"Error => Too many people: $num\" if (defined($lineToProcess));\n        $lineToProcess = $line;        \n    }\n    \n#    warn \"lineToProcess:[\".$lineToProcess.\"]\n\";\n    my $address = $lineToProcess;\n    my $name = $1 if ($address =~ s\/<([^>]+)>\/\/);\n#    warn \"F-address:{\".$address.\"}\n\";\n    my $phone = $1 if ($address =~ s\/\\+(\\d{1,2}-\\d{3}-\\d{3}-\\d{4})\/\/);\n    $address =~ s\/^[^A-Za-z0-9]+\/\/;\n    $address =~ s\/[^A-Za-z0-9.]$\/\/;\n\n    $address =~ s\/[\\!!,;\\?\\$]\/\/g;\n    $address =~ s\/[_]\/ \/;\n    $address =~ s\/\\s{2,}\/ \/;\n    $address =~ s\/\\s+$\/\/;\n#    $address =~ s\/\\.$\/\/;\n    \n#    warn \"name  :{\".$name.\"}\n\";\n#    warn \"phone:{\".$phone.\"}\n\";\n#    warn \"address:{\".$address.\"}\n\";\n    \n    return \"Phone => $num, Name => $name, Address => $address\";\n}\n\n\n","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219318,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(phone);\n\nsub phone {\n    my ($s, $num) = @_;\n    \n    my $matches = 0;\n    my $string;\n    for (split(\/\\\n\/, $s)) {  # Goddamn '\n'\n        ++$matches, $string = $_ if m\/\\+$num\/;\n    }\n    \n    return \"Error => Not found: $num\"       if $matches == 0;\n    return \"Error => Too many people: $num\" if $matches > 1;\n    \n    $string =~ s\/\\+(\\d{1,2}-\\d{3}-\\d{3}-\\d{4})\/\/g;\n    my $number = $1;\n    \n    $string =~ s\/<(.*?)>\/\/g;\n    my $name = $1;\n    \n    $string =~ s\/[^a-zA-Z0-9\\. -]\/ \/g;  # Replace bad characters with spaces.\n    $string =~ s\/\\s+\/ \/g;               # Remove multiple spaces.\n    $string =~ s\/^\\s+|\\s+$\/\/g;          # Trim the string.\n    my $address = $string;\n    \n    return \"Phone => $number, Name => $name, Address => $address\";\n}\n","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219319,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(phone);\n\nsub phone {\n    my ($s, $num) = @_;\n    # clean\n    $s =~ s\/[^-0-9a-z\\s+A-Z<>\\\n.']\/ \/g;\n    # how many nums?\n    my @blocks = split \/\\\n\/, $s;\n    my ($line, $cnt) = (\"\",  0);\n    for (@blocks) {\n        if ($_ =~ m\/\\+$num\/) { ++$cnt; $line = $_; }\n    }\n    if ($cnt > 1) { return \"Error => Too many people: \" . $num; }\n    if ($cnt == 0) { return \"Error => Not found: \" . $num; }\n    # name?\n    $line =~ m\/(<.*>)\/;\n    my $name = substr($1, 1, -1);\n    # remove <name>\n    $line =~ s\/$1\/\/;\n    # remove +num\n    $line =~ s\/\\+$num\/\/;\n    # address\n    $line =~ s\/^\\s+|\\s+$\/\/g, $line =~ s\/\\s+\/ \/g;\n    sprintf(\"Phone => %s, Name => %s, Address => %s\", $num, $name, $line);\n}","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56bc28ad5bdaeb48760009b0":[{"id":219320,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub remove_char {\n    return substr(shift, 1, -1);\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219321,"user_id":null,"body":"package Kata;\n\nsub remove_char { substr \"@_\", 1, -1 }\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219322,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub remove_char {\n    substr \"@_\", 1, -1\n}\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219323,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub remove_char {\n    ($_) = @_;\n    \/^.(.*).$\/gi;\n    $1 || ''\n}\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219324,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub remove_char {\n    $_ = shift;\n    return '' if length() < 3;\n    s\/^.(.*).$\/$1\/;\n    $_;\n}\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219325,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\nuse utf8;\n\nsub remove_char {\n    substr $_[0], 1, -1;\n}\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219326,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub remove_char {\n    my ($str) = @_;\n    return substr($str,1,length($str)-2)\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219327,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub remove_char {\n    my $str = $_[0];\n    my $res;\n    ($res) = $str =~ \/^.(.*).$\/;\n    return $res || '';\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219328,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub remove_char {\n    my ($str) = @_;\n    \n    return substr(substr($str, 1), 0, length($str) - 2);\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219329,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub remove_char {\n    my ($str) = @_;\n    my @letters = split '', $str;\n    pop @letters;\n    shift @letters;\n    $str = join '', @letters;\n    return $str;\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56cac350145912e68b0006f0":[{"id":219330,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(arrange);\n\nsub arrange {  \n    my @l = split \/ \/, shift;\n    for my $i (0..@l - 2) {\n        @l[$i..$i + 1] = sort {(length $a <=> length $b) * (1, -1)[$i % 2]} @l[$i..$i + 1];\n    }\n    my $i;\n    join \" \", map { $i++ % 2 ? uc $_ : lc $_ } @l;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219331,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Data::Dumper;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(arrange);\n\n# the second parameter is an array_refernce; return an array_reference\nsub arrange {\n    my @arr = map {\/\\S+\/g} $_[0];\n    my ($pos, $uord, $tmp) = (0, 0, \"\");\n    for (my $i=0; $i<@arr; $i++) {\n        $pos = $i;\n        $uord = ($pos%2 == 0) ? 0 : 1;\n        while ($pos < @arr-1) {\n            if ($uord == 0 and (length($arr[$pos]) > length($arr[$pos+1]))) {\n                $tmp = $arr[$pos]; $arr[$pos] = $arr[$pos+1]; $arr[$pos+1] = $tmp;\n                $uord = 1;\n                $pos++;\n            } elsif ($uord == 1 and (length($arr[$pos]) < length($arr[$pos+1]))) {\n                $tmp = $arr[$pos]; $arr[$pos] = $arr[$pos+1]; $arr[$pos+1] = $tmp;\n                $uord = 0;\n                $pos++;\n            } else {\n                last;\n            }\n        }\n    }\n    for (my $i=0; $i<@arr; $i++) {\n        $arr[$i] = ($i%2 == 0) ? lc($arr[$i]) : uc($arr[$i]);\n    }\n    join \" \", @arr;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219332,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(arrange);\n\nsub arrange {\n    my $s = shift;\n    my @a = split \/ \/, $s; my $lg = scalar @a;\n    my $i = 0; my $tmp = \"\";\n    while ($i <= $lg - 2) {\n        if ( (($i % 2 != 0) && (length($a[$i]) < length($a[$i + 1]))) || (($i % 2 == 0) && (length($a[$i]) > length($a[$i + 1]))) ) {\n            $tmp = $a[$i + 1];\n            $a[$i + 1] = $a[$i];\n            $a[$i] = $tmp;\n        }\n        ++$i;\n    }\n    $tmp = ''; $i = 0;\n    while ($i < $lg) {\n        if ($i % 2 == 0) { $tmp .= lc($a[$i]) . ' ';\n        } else { $tmp .= uc($a[$i]) . ' '; }\n        ++$i;\n    }\n    return substr($tmp, 0, length($tmp) - 1);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56dbe0e313c2f63be4000b25":[{"id":219333,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(hor_mirror vert_mirror oper);\n\nsub hor_mirror {\n    join \"\n\", reverse split \"\n\", shift;\n}\nsub vert_mirror {\n    join \"\n\", map { scalar reverse } split \"\n\", shift;\n}\nsub oper {\n    $_[0]->($_[1]);\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219334,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(hor_mirror vert_mirror oper);\n\nsub hor_mirror {\n    my ($str) = @_;\n\n    my @arr = split(\/\n\/, $str);\n    @arr = reverse(@arr);\n    $str = join(\"\n\", @arr);\n\n    return $str;\n}\nsub vert_mirror {\n    my ($str) = @_;\n\n    my @arr = split(\/\n\/, $str);\n    for (my $i = 0; $i < scalar(@arr); $i++) {\n        $arr[$i] = reverse($arr[$i]);\n    }\n    $str = join(\"\n\", @arr);\n\n    return $str;\n}\nsub oper {\n    my ($fct, $s) = @_;\n\n    my $ret = $fct->($s);\n\n    return $ret;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219335,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(hor_mirror vert_mirror oper);\n\nsub hor_mirror {\n    my @data = split('\n', shift);\n    my @str;\n    \n    foreach(@data) {\n        unshift(@str, $_);\n    }\n    \n    return join(\"\n\", @str);\n}\nsub vert_mirror {\n    my @data = split('\n', shift);\n    my @str;\n    \n    foreach(@data) {\n        push(@str, scalar reverse $_);\n    }\n    \n    return join(\"\n\", @str);\n}\nsub oper {\n    my $op = shift;\n    my $str = shift;\n    return &$op($str);\n}\n\n\n# s = \"abcd\nefgh\nijkl\nmnop\"\n# abcd\n# efgh\n# ijkl\n# mnop\n\n# oper(vert_mirror, s) => \"dcba\nhgfe\nlkji\nponm\"\n# dcba\n# hgfe\n# lkji\n# ponm\n\n\n# oper(hor_mirror, s) => \"mnop\nijkl\nefgh\nabcd\"","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219336,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(hor_mirror vert_mirror oper);\n\nsub hor_mirror {\n    my @words = split \/\n\/, $_[0];\n    my $l = length($words[0]);\n    my $output = \"\";\n    for( my $i = $l - 1; $i >= 0; $i-- ){\n        $output = sprintf(\"%s%s\n\", $output, $words[$i]);\n    }\n    chomp($output);\n    return $output;\n}\nsub vert_mirror {\n    my @words = split \/\n\/, $_[0];\n    my $l = length($words[0]);\n    my $output = \"\";\n    for( my $i = 0; $i < $l; $i++){\n        $words[$i] = reverse $words[$i];\n        $output = sprintf(\"%s%s\n\", $output, $words[$i]);\n    }\n    chomp($output);\n    return $output;\n}\nsub oper {  \n    if( length($_[1]) < 1 ){ return $_[1]; }\n    return $_[0]($_[1]);\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219337,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(hor_mirror vert_mirror oper);\n\nsub hor_mirror {\n    my @arr = split(\"\n\", shift);\n    join(\"\n\", reverse @arr)\n}\nsub vert_mirror {\n    my @arr = split(\"\n\", shift);\n    join(\"\n\", map {scalar reverse} @arr)\n}\nsub oper {  \n    my ($func, $str) = @_;\n    $func->($str)\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219338,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(hor_mirror vert_mirror oper);\n\nsub vert_mirror{\n  my $string = $_[0];\n  my @strings = split(\/\n\/, $string);\n  for(@strings){\n    $_ = reverse $_;\n  }\n  return join(\"\n\", @strings);\n}\n\nsub hor_mirror{\n  my $string = $_[0];\n  my @strings = split(\/\n\/, $string);\n  @strings = reverse @strings;\n  return join(\"\n\", @strings);\n}\n\nsub oper{\n  my ($function, $string) = @_;\n  return &$function($string);\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219339,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(hor_mirror vert_mirror oper);\n\nsub hor_mirror {\n    join \"\n\", reverse split \/\n\/, shift;\n}\nsub vert_mirror {\n    join \"\n\", map {scalar reverse $_} split \/\n\/, shift;\n}\nsub oper {  \n    my ($f, $s) = @_;\n    &$f($s);\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219340,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(hor_mirror vert_mirror oper);\n\nsub hor_mirror {\n    my $s = shift;\n    return join(\"\n\", reverse (split(\"\n\", $s)));\n}\n\nsub vert_mirror {\n    my $s = shift;\n    return join(\"\n\", map { scalar reverse } split(\"\n\", $s));\n}\n\nsub oper {\n    my $fct = shift;\n    my $s = shift;\n    return $fct->($s);\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219341,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(hor_mirror vert_mirror oper);\n\nsub hor_mirror {\n    my ($string) = @_;\n    join(\"\n\", reverse(split(\"\n\", $string)));\n}\n\nsub vert_mirror {\n    my ($string) = @_;\n    join(\"\n\", map { scalar reverse } split(\"\n\", $string));\n}\n\nsub oper {  \n    my ($fct_ref, $string) = @_;\n    &$fct_ref($string);\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219342,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(hor_mirror vert_mirror oper);\n\nsub hor_mirror {\n    join \"\n\", reverse map {\/[^\n]+\/g} $_[0];\n}\n\nsub vert_mirror {\n    join \"\n\", map {scalar reverse $_} map {\/[^\n]+\/g} $_[0];\n}\n\nsub oper { \n    $_[0]($_[1]);\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56dbe7f113c2f63570000b86":[{"id":219343,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(rot selfie_and_rot oper);\n\nsub rot {\n    my @h = split \/\/, (shift);\n    my @hh = reverse(@h);\n    return join \"\", @hh;\n}\nsub selfie_and_rot {\n    my @h = split \/\n\/, (shift);\n    my $res = \"\";\n    for (@h) {\n        $a = $_ =~ s\/.\/\\.\/rg;\n        $res .= $_ . $a . \"\n\";\n    }\n    substr($res, 0, -1) . rot($res);\n}\nsub oper {  \n    my ($fct, $s) = @_;\n    return $fct->($s);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219344,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(rot selfie_and_rot oper);\n\nsub rot {\n    my ($string) = @_;\n    my @arr = split (\"\n\", $string);\n    my $new_string=\"\";\n    foreach my $str (reverse(@arr)){\n\tmy $new = reverse($str);\n    \t$new_string.= \"$new\n\";\n    }\n    return substr($new_string, 0, -1);\n}\nsub selfie_and_rot {\n    my ($string) = @_;\n    my @arr = split (\"\n\", $string);\n    my $new_string;\n    my $length = length($arr[0]);\n    my $dots = \".\" x $length;\n    foreach my $n (@arr){\n\t$n.=\"$dots\n\";\n        $new_string .=$n;\n    }\n    $new_string = substr($new_string, 0, -1);\n    foreach my $s (reverse(@arr)){\n\t$s = reverse($s);\n    \t$new_string.= \"$s\";\n    }\n    return substr($new_string, 0);\n}\nsub oper {\n    my ($sub, $string) = @_;\n    my $result = &$sub($string);\n    return $result;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219345,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(rot selfie_and_rot oper);\n\nsub rot {\n    reverse $_[0];\n}\n\n\nsub selfie_and_rot {\n    (words $_);\n}\n\nsub oper {  \n    my $f = shift;\n    return $f->(@_);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219346,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(rot selfie_and_rot oper);\n\nsub rot {\n    my $s = shift;\n    my $w = join(\"\n\", reverse map {scalar reverse $_} split(\/\n\/, $s));\n    return $w;\n}\n\n\nsub selfie_and_rot {\n    (words $_);\n}\n\nsub oper {  \n    my $f = shift;\n    return $f->(@_);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219347,"user_id":null,"body":"package Solution;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(rot selfie_and_rot oper);\nsub rot {scalar reverse $_[0]}sub selfie_and_rot {my($x)=shift;my$z='.'x+length((split\/\n\/,$x,2)[0]);(my$y=rot $x)=~s~^~$z~gm;$x=~s~$~$z~gm;join\"\n\"=>$x,$y}sub oper{$_[0]->($_[1])}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219348,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(rot selfie_and_rot oper);\n\nsub rot { return scalar reverse $_[0] }\nsub selfie_and_rot {\n    my ($s1) = @_;\n    my $dots = '.' x length((split \/\n\/, $s1, 2)[0]);\n    (my $s2 = rot $s1) =~ s\/^\/$dots\/gm;\n    $s1 =~ s\/$\/$dots\/gm;\n    join \"\n\", $s1, $s2\n    \n}\nsub oper {\n    $_[0]->($_[1])\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219349,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(rot selfie_and_rot oper);\n\nsub rot {\n    join \"\n\", map {scalar reverse $_} reverse map {\/[^\n]+\/g;} $_[0];\n}\n\nsub selfie_and_rot {\n    my $dots = \".\" x map {\/[^\n]+\/g;} $_[0];\n    my $s1 = join \"$dots\n\", map {\/[^\n]+\/g;} $_[0];\n    my $s2 = join \"\n$dots\", map {\/[^\n]+\/g;} rot($_[0]);\n    \"${s1}${dots}\n${dots}${s2}\";\n}\n\nsub oper {  \n    my ($fct, $s) = @_;\n    $fct->($s);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56dbeec613c2f63be4000be6":[{"id":219350,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(rot_90_clock diag1_sym selfie_and_diag1 oper);\n\nsub rot_90_clock {\n    my @a = split '\n', shift;\n    my @res = ();\n    foreach my $i (1..@a) {\n        push @res, join ('', reverse map { substr $_, $i-1, 1  } @a);\n    }\n    return join (\"\n\", @res);\n}\nsub diag1_sym {\n    my @a = split '\n', shift;\n    my @res = ();\n    foreach my $i (1..@a) {\n        push @res, join ('', map { substr $_, $i-1, 1  } @a);\n    }\n    return join (\"\n\", @res);\n}\n\nsub selfie_and_diag1 {\n    my @a = split '\n', shift;\n    my @res = ();\n    foreach my $i (1..@a) {\n        push @res, join('|', $a[$i-1], join ('', map { substr $_, $i-1, 1  } @a));\n    }\n    return join (\"\n\", @res);\n}\nsub oper {  \n    my ($sub, $s) = @_;\n    return $sub->($s);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219351,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(rot_90_clock diag1_sym selfie_and_diag1 oper);\n\nsub rot_90_clock {\n    my @a = map {\/[^\n]+\/g;} $_[0];\n    join \"\n\", map {my $i = $_; join(\"\", map {substr($a[$_], $i, 1)} reverse (0..@a-1))} (0..@a-1);\n}\n\nsub diag1_sym {\n    my @a = map {\/[^\n]+\/g;} $_[0];\n    join \"\n\", map {my $i = $_; join(\"\", map {substr($a[$_], $i, 1)} (0..@a-1))} (0..@a-1);\n}\n\nsub selfie_and_diag1 {\n    my @a1 = map {\/[^\n]+\/g;} $_[0];\n    my @a2 = map {\/[^\n]+\/g;} diag1_sym($_[0]);\n    join \"\n\", map {$a1[$_].\"|\".$a2[$_]} (0..@a1-1);\n}\n\nsub oper {  \n    my ($fct, $s) = @_;\n    $fct->($s);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219352,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(rot_90_clock diag1_sym selfie_and_diag1 oper);\n\nsub rot_90_clock {\n    my @h = split \/\n\/, (shift);\n    my ($num, $r) = (0, \"\");\n    while ($num <= $#h) {\n        my $res = \"\";\n        for my $s (@h) { $res .= substr($s, $num, 1); }\n        $res = reverse($res);\n        $r .= $res . \"\n\";\n        ++$num;\n    }\n    substr($r, 0, -1);\n}\nsub diag1_sym {\n    my @h = split \/\n\/, (shift);\n    my ($num, $r) = (0, \"\");\n    while ($num <= $#h) {\n        my $res = \"\";\n        for my $s (@h) { $res .= substr($s, $num, 1); }\n        $r .= $res . \"\n\";\n        ++$num;\n    }\n    substr($r, 0, -1);\n}\nsub selfie_and_diag1 {\n    my $s = shift;\n    my @r1 = split \/\n\/, $s;\n    my $ss = diag1_sym($s);\n    my @r2 = split \/\n\/, $ss;\n    my @res = ();\n    for (my $i = 0; $i <= $#r1; $i++) {\n        push @res, $r1[$i] . \"|\" . $r2[$i];\n    }\n    join \"\n\", @res;\n}\nsub oper {  \n    my ($fct, $s) = @_;\n    return $fct->($s);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56dbf59b0a10feb08c000227":[{"id":219353,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(rot90_counter diag2_sym selfie_diag2_counterclock oper);\n\nsub diag2_sym {\n    my @a = map {\/[^\n]+\/g} $_[0];\n    join \"\n\", map {my $i = $_; join(\"\", map {substr($a[$_], $i, 1)} reverse (0..@a-1))} reverse (0..@a-1);\n}\n\nsub rot90_counter {\n    my @a = map {\/[^\n]+\/g} $_[0];\n    join \"\n\", map {my $i = $_; join(\"\", map {substr($a[$_], $i, 1)} (0..@a-1))} reverse (0..@a-1);\n}\n\nsub selfie_diag2_counterclock {\n    my @a = map {\/[^\n]+\/g} $_[0];\n    my @b = map {\/[^\n]+\/g} diag2_sym($_[0]);\n    my @c = map {\/[^\n]+\/g} rot90_counter($_[0]);\n    join \"\n\", map {$a[$_] . \"|\" . $b[$_] . \"|\" . $c[$_]} (0..@a-1);\n}\n\nsub oper {  \n    my ($fct, $s) = @_;\n    $fct->($s);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219354,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(rot90_counter diag2_sym selfie_diag2_counterclock oper);\n\nsub diag2_sym {\n    my @arr = split \/\n\/, (shift);\n    my @arr2 = ();\n    my $i = $#arr;\n    while ($i >= 0) {\n        my $str = \"\";\n        my $j = $#arr;\n        while ($j >= 0) { $str .= substr($arr[$j], $i, 1); --$j; }\n        push @arr2, $str;\n        --$i;\n    }\n    join \"\n\", @arr2;\n}\nsub rot90_counter {\n    my @arr = split \/\n\/, (shift);\n    my @arr2 = ();\n    my $i = $#arr;\n    while ($i >= 0) {\n        my $str = \"\";\n        my $j = 0;\n        while ($j <= $#arr) { $str .= substr($arr[$j], $i, 1); ++$j; }\n        push @arr2, $str;\n        --$i;\n    }\n    join \"\n\", @arr2;\n}\nsub selfie_diag2_counterclock {\n    my $s = shift;\n    my @r1 = split \/\n\/, $s;\n    my $ss = diag2_sym($s);\n    my @r2 = split \/\n\/, $ss;\n    $ss = rot90_counter($s);\n    my @r3 = split \/\n\/, $ss;\n    my @res = ();\n    for (my $i = 0; $i <= $#r1; $i++) {\n        push @res, $r1[$i] . \"|\" . $r2[$i] . \"|\" . $r3[$i];\n    }\n    join \"\n\", @res;\n}\nsub oper {  \n    my ($fct, $s) = @_;\n    return $fct->($s);\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56dec885c54a926dcd001095":[{"id":219355,"user_id":404,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub opposite {\n    -$_[0];\n}\n\n'ABS'; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219356,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub opposite {\n    my ($num) = @_;\n    $num * -1\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219357,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub opposite {\n    my ($num) = @_;\n    if ($num < 0){\n        return -$num;\n    } else {\n        return $num * -1;\n    }\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219358,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub opposite {\n    my ($num) = @_;\n    if ($num < 0){\n        return($num * -1)\n    }else{\n        return(-$num)\n    }\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219359,"user_id":53,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub opposite {\n    my $n = shift;\n    -$n\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219360,"user_id":168,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub opposite {\n    -shift\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219361,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub opposite {\n    my ($num) = @_;\n    # Your code here\n    if($num < 0)\n    {\n        return $num * -1; \n    }\n    else\n    {\n        return $num * -1;\n    }\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219362,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub opposite {\n    $_[0]*-1;\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219363,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub opposite {\n    my ($num) = @_;\n    # Your code here\n    \n    return ($num * -1)\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219364,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub opposite {\n    my ($num) = @_;\n    $num == 0 ? 0 : $num * -1;\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56e3cd1d93c3d940e50006a4":[{"id":219365,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(make_valley);\n\n# parameter: array_ref; result: array_ref\nsub make_valley {\n    my $arr = shift;\n    my @sorted = sort {$a <=> $b} @$arr;\n    my @res = (); my $lg = @sorted;\n    for (my $i = 0; $i < $lg; $i++) {\n        use integer;\n        if ($i % 2 == 0) {\n            $res[$i \/ 2] = $sorted[$lg - 1 - $i];\n        } else {\n            $res[$lg - 1 - $i \/ 2] = $sorted[$lg - 1 - $i];\n        }\n    }\n    \\@res;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219366,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(make_valley);\n\nsub make_valley {\n    my @numbers = sort { $a <=> $b } $_[0]->@*;\n\n    my @result;\n    if (@numbers % 2) {\n        $_ % 2 ? push @result, $numbers[$_] : unshift @result, $numbers[$_]\n          foreach 0 .. $#numbers;\n    }\n    else {\n        $_ % 2 ? unshift @result, $numbers[$_] : push @result, $numbers[$_]\n          foreach 0 .. $#numbers;\n    }\n\n    return \\@result;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219367,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(make_valley);\n\n# parameter: array_ref; result: array_ref\nsub make_valley {\n    my $valueref = shift;\n    my @values = @$valueref;\n    my @leftwing = ();\n    my @rightwing = ();\n    my $i = 0;\n    for ($i = 0; $i < $#values; $i++) {\n      $values[$i] = int($values[$i]); \n    }\n    \n    @values = reverse(sort {$a<=>$b} @values);\n    my $value = \"\";\n    while ($value = shift(@values)) {\n      push(@leftwing, $value);\n      if ($value = shift(@values)) {\n        push(@rightwing, $value);\n      }\n    }\n    \n    while ($value = pop(@rightwing)) {\n      push(@leftwing, $value);\n    }\n    return \\@leftwing;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219368,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(make_valley);\n\n# parameter: array_ref; result: array_ref\nsub make_valley {\n    my ($arr,@ys) = (@_,());\n    my @xs = sort {$a <=> $b} @$arr;\n    my $n = @xs;\n    use integer;\n    for (my $i = 0; $i < $n; $i++) {\n        if ($i % 2 == 0) {\n            $ys[$i \/ 2] = $xs[$n - 1 - $i];\n        } else {\n            $ys[$n - 1 - $i \/ 2] = $xs[$n - 1 - $i];\n        }\n    }\n    \\@ys\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219369,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(make_valley);\nuse POSIX qw\/ceil floor\/;\n\n# parameter: array_ref; result: array_ref\nsub make_valley {\n    my ($arr_in) = @_;\n    my @sorted = sort({ $b <=> $a } @$arr_in);\n    my $size = scalar @sorted;\n    my @result;\n    ## for uneven sized value ignore smallest (last) value -- it will be spliced into middle of array afterwards\n    my $last_index = $size % 2 == 0 ? $size - 1 : $size - 2;\n    for (my $i = 0; $i <= $last_index; $i++) {\n        ## add values to left and right wing alternately -- starting from start and end of @result\n        my $new_pos = $i % 2 == 0 ? ceil($i \/ 2) : $last_index - floor($i \/ 2);\n        $result[$new_pos] = $sorted[$i];\n    }\n    ## if left out above put smallest value in middle position\n    splice @result, floor($size \/ 2), 0, $sorted[$size - 1] if ($size % 2 == 1);\n    \\@result;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56e7d40129035aed6c000632":[{"id":219370,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse bigint;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(easy_line);\n\nsub easy_line {\n    my  $n = $_[0] * 2;      \n    my  $s = 1;    \n        for my $k (1.. int($n\/2)) {\n            my $b = $s * ($n + 1 - $k)\/$k; \n               $s = $b;\n        }\n    $s\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219371,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse bigint;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(easy_line);\n\nsub fac {\n    $_[0] ? $_[0] * fac($_[0] - 1) : 1;\n}\nsub easy_line {\n    fac($_[0] * 2) \/ fac($_[0]) ** 2;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219372,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse bigint;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(easy_line);\n\nsub easy_line {\n    my $k = shift;\n    my $product = 1;\n    my $div = 1;\n    for my $i (1..$k) {\n        $product *= ($k + $i);\n        $div *= $i;\n    }\n    return int(($product \/ $div) + 0.5);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219373,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse bigint;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(easy_line);\n\nsub easy_line {\n  my ($n) = @_;\n  \n  my $square_sum;\n\n  my @factorials = (1);\n  $factorials[$_] = $factorials[$_ - 1] * $_ for (1..$n);\n\n  for my $k (0..$n) {\n    my $binom = $factorials[$n] \/ ($factorials[$k] * $factorials[$n - $k]);\n    \n    $square_sum += $binom ** 2;\n  }\n  \n  return $square_sum;\n}\n\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219374,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse bigint;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(easy_line);\n\nsub easy_line {\n  my $num = shift;\n  my $result = 1;\n  my $a;\n  \n  for (my $i=1;$i<=$num*2;$i++) {\n    $result *= $i;\n    if ($i == $num) {\n        $a = $result**2;\n     }\n   }  \n  return $result\/$a;\n  1;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219375,"user_id":null,"body":"package Solution;\n\nuse v5.30;\nuse warnings;\nuse bigint;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(easy_line);\n\nsub easy_line {\n    my $n = $_[0] * 2;\n    \n    my @row = (1);\n    foreach my $k (1..$_[0]) {\n        push (@row, $row[-1] * ($n + 1 - $k) \/ $k);\n    }\n    \n    return $row[-1];\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219376,"user_id":209,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(easy_line);\nsub f{$_[0]==1?1:$_[0]*f($_[0]-1);}\nsub easy_line{f(2*$_[0])\/(f($_[0])**2);}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219377,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse bigint;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(easy_line);\n\nsub easy_line {\n    local *aux = sub {\n        use integer;\n        my ($n, $k) = @_;\n        $k = $k > $n-$k ? $n-$k : $k;\n        my $result = 1;\n        for (my $i = 0; $i < $k; $i++) {\n            $result *= $n - $i;\n            $result \/= ($i + 1);\n        }\n        $result;\n    };\n    my $m = shift;\n    aux(2 * $m, $m);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56eb0be52caf798c630013c0":[{"id":219378,"user_id":759,"body":"package Solution;\n\nuse 5.030;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse DateTime;\n\nour @EXPORT_OK = qw(unlucky_days);\n\nsub unlucky_days {\n    my $c = 0;\n    for my $i (1..12) {\n        $c++ if (DateTime->new(year => $_[0], month => $i, day => 13)->day_of_week() == 5);\n    }\n    return $c;\n}\n\n1;\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219379,"user_id":null,"body":"package Solution;\n\nuse 5.030;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse DateTime;\n\nour @EXPORT_OK = qw(unlucky_days);\n\nsub unlucky_days {\n    my ($year) = @_;\n    my $ret = 0;\n    for my $month (1..12) {\n       $ret++ if (DateTime->new(year => $year, month => $month, day => 13)->day_of_week == 5);\n    }\n    return $ret;\n}\n\n1;\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219380,"user_id":null,"body":"package Solution;\n\nuse 5.030;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse DateTime;\n\nour @EXPORT_OK = qw(unlucky_days);\n\nsub unlucky_days {\n    grep { DateTime->new( year => $_[0], month => $_, day => 13 )->day_of_week == 5 } (1..12);\n}\n\n1;\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219381,"user_id":null,"body":"package Solution;\n\nuse 5.030;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse DateTime;\n\nour @EXPORT_OK = qw(unlucky_days);\n\nsub unlucky_days {\n    (my $year, my $count) = (@_, 0);\n    foreach my $month (1..12){\n        my $dt = DateTime->new(year => $year, month => $month, day => 13);\n        if ($dt->day_of_week == 5){\n            ++$count;\n        }\n    }\n    return $count;\n}\n\n1;\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219382,"user_id":null,"body":"package Solution;\n\nuse 5.030;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse DateTime;\n\nour @EXPORT_OK = qw(unlucky_days);\n\nsub unlucky_days {\n    my $year = shift;\n   \n   my $dt = DateTime->new(\n        year       => $year,\n        month      => 01,\n        day        => 13,\n    );\n    my $counter = 0;\n\n    while ($dt->year == $year ) {\n        $counter += 1 if $dt->day_name eq \"Friday\";\n        last if $counter == 3;\n        $dt->add( months => 1 );\n    }\n    return $counter;\n}\n\n1;\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219383,"user_id":null,"body":"package Solution;\n\nuse 5.030;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse DateTime;\n\nour @EXPORT_OK = qw(unlucky_days);\n\nsub unlucky_days {\n    my ($year) = @_;\n\n    my $month_has_friday_13th = sub {\n        my $dt = DateTime->new(year  => $year, month => $_[0], day => 13);\n        $dt->day_of_week == 5;\n    };\n\n    List::Util::sum(map { $month_has_friday_13th->($_) } 1 .. 12);\n}\n\n1;\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219384,"user_id":null,"body":"package Solution;\n\nuse 5.030;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse DateTime;\n\nuse constant DAYS => {\n    unlucky_day => 13,\n    friday      => 5\n};\n\nour @EXPORT_OK = qw(unlucky_days);\n\nsub unlucky_days {\n    my $year = shift;\n    my $months = [ 1..12 ];\n    \n    my $count = 0;\n    for my $month (@$months) {\n        $count++ if (DateTime->new(\n            day => DAYS->{unlucky_day},\n            month => $month,\n            year => $year\n        ))->day_of_week == DAYS->{friday};\n    }\n    \n    return $count;\n}\n\n1;\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219385,"user_id":null,"body":"package Solution;\n\nuse 5.030;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse DateTime;\n\nour @EXPORT_OK = qw(unlucky_days);\n\nsub unlucky_days {\n    my $year = shift;\n    my $n = 0;\n    foreach my $month (1..12) {\n        my $dt = DateTime->new(year => $year, month => $month, day => 13);\n        $n++ if $dt->day_of_week == 5;\n    }\n    return $n;\n}\n\n1;\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219386,"user_id":null,"body":"package Solution;\n\nuse 5.030;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse DateTime;\n\nour @EXPORT_OK = qw(unlucky_days);\n\nsub unlucky_days {\n    my ($year) = @_;\n    my $black_fridays = 0;\n    foreach my $i (1..12){\n        my $dt = DateTime->new(year => $year, month => $i, day => 13);\n        if($dt->day_name eq 'Friday'){\n            $black_fridays += 1;\n        }\n    }\n    return $black_fridays;\n}\n\n1;\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219387,"user_id":null,"body":"package Solution;\n\nuse 5.030;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse DateTime;\n\nour @EXPORT_OK = qw(unlucky_days);\n\nsub unlucky_days {\n  my $year = shift;\n  my $dow = 0;\n  \n  for (my $i=1; $i<=12; $i++) {\n    my $dt = DateTime -> new (year => $year, month => $i, day => 13);\n    if ($dt -> day_of_week == 5) {\n      $dow += 1;\n    }\n  }\n  return $dow;\n}\n\n1;\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56ed20a2c4e5d69155000301":[{"id":219388,"user_id":1750,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse feature qw(signatures);\nuse List::Util qw(reduce);\nour @EXPORT_OK = qw(scale);\n\nsub scale ($string, $horizontal_multiplier, $vertical_multiplier) {\n    join \"\n\", (map { multiply_vertically($vertical_multiplier,\n                                          multiply_horizontally($horizontal_multiplier, $_))\n                    } (split \/\n\/, $string))\n}\n\nsub multiply_horizontally ($multiplier, $string) {\n    reduce { $a . ($b x $multiplier) } '', (split '', $string)\n}\n\nsub multiply_vertically ($multiplier, $string) {\n    join \"\n\", (map { $string } (1..$multiplier))\n} \n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219389,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(scale);\n\nsub scale {\n    my  $out = '';\n    for (split(\/\n\/,$_[0])) {  \n        s\/(.)\/$1 x $_[1]\/eg;  \n        $out .= \"$_\n\" x $_[2];  \n    }   \n    chomp $out; $out;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219390,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(scale);\n\nsub scale {\n    my ($string, $k, $v) = @_;\n\n    my @result;\n    for my $line (split(\"\n\", $string)) {\n        $line =~ s\/(.)\/$1 x $k\/ge;\n        push @result, $line for 1 .. $v;\n    }\n\n    join(\"\n\", @result);\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219391,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(scale);\n\nsub scale {\n    my ($lines, $k, $n) = @_;\n    my @result;\n    \n    for my $line (split \"\n\", $lines) {\n        my $new_line = '';\n        for my $c (split '', $line) {\n            $new_line .= $c x $k;\n        }\n        \n        push @result, $new_line for 1..$n;\n    }\n    \n    return join \"\n\", @result;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219392,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(scale);\n\nsub scale {\n\n    my ($string, $k, $v) = ($_[0], $_[1], $_[2]);\n\n    my @word = split('\n', $string);\n\n    foreach my $i (@word)\n             {\n               my @letter = split(\/\/, $i);\n \n    \n               for (my $i=0; $i<=$k; $i++)\n                       {\n                       foreach my $j (@letter)\n                        {      \n                         print( $j x $v );\n                        }\n                         print('\/n');\n                       }\n               }         \n           }  ","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219393,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(scale);\nmy $true=1;\nmy $false=0;\n\nsub scale {\n      my ($str,$k,$v)=($_[0],$_[1],$_[2]);\n      my $mstr=\"\";\n      #\"abcd\nefgh\nijkl\nmnop\"\n      \n      my @spl=split('\n',$str);\n      \n      foreach my $i (@spl)\n      {  \n                #$i=\"abcd\";\n                 \n                 my $flag=$false;\n                 \n                 for(my $m=0;$m<$v;$m++)\n                    {\n                        if($i eq $spl[-1] && $m==$v-1)\n                            {\n                            $flag=$true;\n                            }\n                        for(my $j=0;$j<length($i);$j++)\n                            {\n                                for(my $l=0;$l<$k;$l++)\n                                    {\n                                        $mstr.=substr($i,$j,1);\n                                            \n                                            #aabbccdd\n\n                                    }\n                            }\n                        if($flag eq $false)\n                            {\n                             $mstr.=\"\n\";\n                            }\n                        else\n                            {\n                             last;\n                            }\n                    }\n      }\n \n    #print(\"\n\");\n    \nreturn $mstr;\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219394,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(scale);\n\nsub scale {\n    my ($str, $k, $v)= @_;\n    my @string = split('\n', $str);\n    foreach my $i (@string)\n    {\n       my @each_character = split(\/\/, $i);\n       for(my $n=1; $n<=$v; $n++)\n       {\n          foreach my $split_each_char (@each_character)\n          {\n             print(\"$split_each_char\" x $k);\n          }\n          printf(\"\\\n\");\n       }\n    }\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219395,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(scale);\nmy $true=1;\nmy $false=0;\n\nsub scale {\n      my ($str,$k,$v)=($_[0],$_[1],$_[2]);\n      my $mstr=\"\";\n      #\"abcd\nefgh\nijkl\nmnop\"\n      \n      my @spl=split('\n',$str);\n      \n      foreach my $i (@spl)\n      {  #$i=\"abcd\";\n       my $flag=$false;\n        for(my $m=0;$m<$v;$m++){\n          if($i eq $spl[-1] && $m==$v-1){\n          $flag=$true;\n          }\n        for(my $j=0;$j<length($i);$j++)\n        {\n        for(my $l=0;$l<$k;$l++){\n         $mstr.=substr($i,$j,1);\n         #aabbccdd\n\n         }\n        }\n       if($flag eq $false){\n        $mstr.=\"\n\";\n        }\n        else{\n        last;\n        }\n      }\n      }\n \n    print(\"\n\");\n    \nreturn $mstr;\n}\n\n1;\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219396,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(scale);\n\nsub scale {\n    my ($str, $hs, $vs) = @_;\n    $str .= \"\n\";\n    $str =~ s\/([^\n])\/$1 x $hs\/eg;\n    $str =~ s\/([^\n]*\n)\/$1 x $vs\/eg;\n    $str =~ s\/\\s+$\/\/;\n    $str;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219397,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(scale);\n\nsub scale {\n    my ($s, $k, $n) = @_;\n    \n    my @lines = map { join(\"\", map { $_ x $k } split(\/\/, $_)) } split(\"\n\", $s);\n    my $result = join(\"\", map { ($_ . \"\n\") x $n } @lines);\n    chomp $result;\n    return $result;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56efab15740d301ab40002ee":[{"id":219398,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(gcdi lcmu som maxi mini oper_array);\n\nsub gcdi {\n    my ($a, $b) = @_;\n    my $x = abs($a); my $y = abs($b);\n    while ($x) { ($x, $y) = ($y % $x, $x) }\n    $y\n}\nsub lcmu {\n    my ($a, $b) = @_;\n    my $x = abs($a); my $y = abs($b);\n    ($x && $y) and $x \/ gcdi($x, $y) * $y or 0\n}\nsub som {\n    my ($a, $b) = @_;\n    $a + $b;\n}\nsub maxi {\n    my ($a, $b) = @_;\n    if ($a > $b) { $a; } else { $b; }\n}\nsub mini {\n    my ($a, $b) = @_;\n    if ($a < $b) { $a; } else { $b; }\n}\n\nsub oper_array {  \n    my ($fct, $arr, $init) = @_;\n    my ($acc, $lg, @res) = ($init, $#{$arr}, ());\n    for (0..$lg) {\n        $acc = $fct->($acc, $arr->[$_]);\n        $res[$_] = $acc;\n    }\n    \\@res;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219399,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(gcdi lcmu som maxi mini oper_array);\n\nuse List::Util qw\/min max sum\/;\n\n\nsub gcdi {\n    my $x = abs(shift);\n    my $y = abs(shift);\n    \n    my $r = 0;\n    do {\n        $r = $x % $y;\n        $x = $y;\n        $y = $r\n    } while ($y != 0);\n    \n    return $x;\n}\n\nsub lcmu {\n    my ($x, $y) = @_;\n    \n    return abs($x * $y) \/ gcdi($x, $y);\n}\n\nsub som {\n    return sum(@_);\n}\n\nsub maxi {\n    return max(@_);\n}\n\nsub mini {\n    return min(@_);\n}\n\n# the second parameter is an array_refernce; return an array_reference\nsub oper_array {\n    my ($fct, $array, $init) = @_;\n    my @result;\n    \n    my $x = $init;\n    for my $y (@${array}) {\n        my $n = $fct->($x, $y);\n        push @result, ($n);\n        $x = $n;\n    }\n    \n    return \\@result;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219400,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util qw(min max sum0);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(gcdi lcmu som maxi mini oper_array);\n\nsub gcdi {\n    my ($x, $y) = @_;\n    ($y == 0) ? abs($x) : gcdi($y, $x%$y);\n}\n\nsub lcmu {\n    my ($x, $y) = @_;\n    ($x == 0 or $y == 0) ? 0 : abs($x*$y) \/ gcdi($x,$y);\n}\n\nsub som {\n    sum0 @_;\n}\n\nsub maxi {\n    max @_;  \n}\n\nsub mini {\n    min @_;\n}\n\n# the second parameter is an array_refernce; return an array_reference\nsub oper_array {  \n    my ($fn, $arr, $init) = @_;\n    my @ret = (&$fn($init, $arr->[0]));\n    for (my $i=1; $i<@$arr; $i++) {\n        push(@ret, &$fn($ret[$i-1], $arr->[$i]));\n    }\n    \\@ret;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219401,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util qw(min max);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(gcdi lcmu som maxi mini oper_array);\n\nsub gcdi {\n    my ($a, $b) = @_;\n    ($b == 0) ? abs($a) : gcdi($b, $a%$b);\n}\n\nsub lcmu {\n    my ($a, $b) = @_;\n    ($a == 0 or $b == 0) ? 0 : abs($a*$b) \/ gcdi($a,$b);\n}\n\nsub som {\n    $_[0] + $_[1];\n}\n\nsub maxi {\n    max @_;  \n}\n\nsub mini {\n    min @_;\n}\n\n# the second parameter is an array_refernce; return an array_reference\nsub oper_array {  \n    my ($fn, $arr, $init) = @_;\n    my @ret = ();\n    for (my $i=0; $i<@$arr; $i++) {\n        push(@ret, ($i==0) ? &$fn($init, $arr->[$i]) : &$fn($ret[$i-1], $arr->[$i]));\n    }\n    \\@ret;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219402,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(gcdi lcmu som maxi mini oper_array);\n\nsub gcdi {\n    my ($a, $b) = @_;\n    return $b == 0 ? abs($a) : gcdi($b, $a % $b);\n}\nsub lcmu {\n    my ($a, $b) = @_;\n    return abs($a * $b) \/ gcdi($a, $b);\n}\nsub som {\n    my ($a, $b) = @_;\n    return $a + $b;\n}\nsub maxi {\n    my ($a, $b) = @_;\n    return $a > $b ? $a : $b;\n}\nsub mini {\n    my ($a, $b) = @_;\n    return $a < $b ? $a : $b;\n}\nsub oper_array {  \n    my ($fn, $xs, $seed, @fs) = (@_, ());\n    my $acc = $seed;\n    foreach my $x (@$xs) {\n        $acc = $fn->($acc, $x);\n        push @fs, $acc;\n    }\n    return \\@fs;\n}\n\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219403,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(gcdi lcmu som maxi mini oper_array);\n\nsub gcdi {\n    my ($m, $n) = @_;\n    $m = abs($m);\n    $n = abs($n);\n    while ($n > 0) {\n        ($m, $n) = ($n, $m % $n);\n    }\n    return $m;\n}\nsub lcmu {\n    my ($m, $n) = @_;\n    return int((abs($m) * abs($n)) \/ gcdi($m,$n));\n}\nsub som {\n    return $_[0] + $_[1];\n}\nsub maxi {\n    return $_[0] > $_[1] ? $_[0] : $_[1];\n}\nsub mini {\n    return $_[0] < $_[1] ? $_[0] : $_[1];\n}\n\n# the second parameter is an array_refernce; return an array_reference\nsub oper_array {\n    my ($fct, $arr, $init) = @_;\n    my @result;\n    foreach my $element (@$arr) {\n        my $value = $fct->($init, $element);\n        push @result, $value;\n        $init = $value;\n    }\n    return \\@result;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56f253dd75e340ff670002ac":[{"id":219404,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(compose);\n\nsub compose {\n    my @a1 = map {\/[^\n]+\/g} $_[0];\n    my @a2 = reverse map {\/[^\n]+\/g} $_[1];\n    join \"\n\", map {substr($a1[$_], 0, $_+1) . substr($a2[$_], 0, @a2-$_)} (0..@a1-1);\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219405,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(compose);\n\nsub compose {\n\tmy @a = split (\"\n\", $_[0]);\n\tmy @b = split (\"\n\", $_[1]);\n\tmy ($n, $r) = (scalar(@a), '');\n\tfor (my $i = 0; $i < $n; $i++) {\n\t\t$r .= substr($a[$i], 0, $i+1) . substr($b[$n-$i-1], 0, $n-$i) . \"\n\";\n\t}\n\tchomp $r; return $r;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219406,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(compose);\n\nsub compose {\n    my @l1 = split \/\n\/, $_[0];\n    my @l2 = split \/\n\/, $_[1];\n    my $n = length($l1[0]);\n    my $result = \"\";\n    for(my $i = 0; $i < $n; $i++){\n        $result = sprintf(\"%s%s\", $result, substr($l1[$i], 0, $i + 1));\n        $result = sprintf(\"%s%s\", $result, substr($l2[$n - 1 - $i], 0, $n - $i));\n        $result = sprintf(\"%s\n\", $result);\n    }\n    chomp($result);\n    return $result;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219407,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(compose);\n\nsub compose {\n    my ($a, $b) = @_;\n    my @as = split \/\n\/, $a;\n    my @bs = split \/\n\/, $b;\n    my @result = ();\n    my $n = @as;\n    for (0..$n-1) {\n        push @result, substr($as[$_], 0, $_ + 1) . substr($bs[$n - 1 - $_], 0, $n - $_);\n    }\n    return join \"\n\", @result;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219408,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(compose);\n\nsub compose {\n    my @l1 = split(\"\n\", $_[0]);\n    my @l2 = split(\"\n\", $_[1]);\n    my $size = scalar @l1;\n    my @lines;\n    foreach my $i (0..($size - 1)) {\n        push(@lines, substr($l1[$i], 0, $i + 1) . substr($l2[$size - 1 - $i], 0, $size - $i));\n    }\n    join(\"\n\", @lines);\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219409,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(compose);\n\nsub compose {\n    my ($s1, $s2) = @_;\n    my @a2 = reverse(split \/\n\/, $s2);\n    my $lg = @a2;\n    my @a1 = split \/\n\/, $s1;\n    my $res = \"\";\n    for (my $i = 0; $i < $lg; $i++) {\n        $res .= substr($a1[$i], 0, $i + 1).substr($a2[$i], 0, $lg - $i);\n        if ($i < $lg - 1) { $res .= \"\n\"; }\n    }\n    $res\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56f3a1e899b386da78000732":[{"id":219410,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(part_list);\n\n# parameter: array_ref of strings; return: array_ref of array_ref of two strings\nsub part_list {\n    #[[\"I\", \"wish I hadn't come\"], [\"I wish\", \"I hadn't come\"], [\"I wish I\", \"hadn't come\"], [\"I wish I hadn't\", \"come\"]];\n    my ($my_array) = @_;\n    my $num_of_words = $#$my_array;\n    \n    say \"my_array: @{$my_array}\";\n    say \"number of words: $num_of_words\";\n \n    my $index;\n    my @my_answer;\n\n    my $first_half;\n    my $second_half; \n    \n    for $index (1 .. $num_of_words) {\n        $first_half     = join(\" \", @{$my_array}[0 .. $index - 1]);\n        $second_half    = join(\" \", @{$my_array}[$index .. $num_of_words]);\n        push @my_answer, [$first_half, $second_half];\n    }\n    return \\@my_answer;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219411,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(part_list);\n\nsub part_list {\n    my ($words) = @_;\n    my @result;\n    for my $i (1 .. $#$words) {\n        my $first  = join(\" \", $words->@[0 .. $i - 1]);\n        my $second = join(\" \", $words->@[$i .. $#$words]);\n        push @result, [$first, $second];\n    }\n    return \\@result;\n}\n\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219412,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse Data::Dumper;\nour @EXPORT_OK = qw(part_list);\n\n# parameter: array_ref of strings; return: array_ref of array_ref of two strings\nsub part_list {\n    my ($a) = @_;\n    my @result = ();\n    my $lg = @$a;\n    for (my $i = 0; $i < $lg - 1; $i++) {\n        push @result, [join(\" \", @$a[0..$i]), join(\" \", @$a[$i+1..$lg-1])];\n    }\n    return \\@result;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219413,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(part_list);\n\nsub part_list {\n    my $param = $_[0];\n    my @right = @$param;   \n    my @left = ();\n    my @res = ();\n    my ($str_left,$str_right) = ('','');\n    while (scalar @right > 1){\n        push(@left, shift(@right));\n        print \"left: @left right: @right \n\";\n        $str_left = join(' ',@left);\n        $str_right = join(' ', @right);\n        push(@res, [$str_left,$str_right])\n    }\n    return \\@res;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219414,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(part_list);\n\nsub part_list {\n    my ($arr, @r) = (@_, ());\n    my $i = 0;\n    my $w = @$arr;\n    my ($a, $b) = (\"\", \"\");\n    while ($i < $w - 1) {\n        $a = \"\";\n        $b = \"\";\n        for (my $j = 0; $j - 1 < $i; $j++) {\n            if ($j < $i) { \n                $a .= $arr->[$j] . \" \";\n            } else { $a .= $arr->[$j]; }\n        }\n        for (my $j = $i + 1; $j < $w; $j++) {\n            if ($j < $w - 1) {\n                $b .= $arr->[$j] . \" \";\n            } else { $b .= $arr->[$j]; }\n        }\n        push(@r, [$a, $b]);\n        $i++;\n    }\n    return \\@r;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219415,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(part_list);\n\n# parameter: array_ref of strings; return: array_ref of array_ref of two strings\nsub part_list {\n    my @a = @{$_[0]};\n    my @res;\n    \n    for (my $i = 1; $i < scalar @a; $i++) {\n        my $first = join \" \", @a[0..$i - 1];\n        my $second = join \" \", @a[$i..scalar @a - 1];\n        push @res, [$first, $second];\n    }\n    \n    \\@res;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219416,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(part_list);\n\n# parameter: array_ref of strings; return: array_ref of array_ref of two strings\nsub part_list {\n    my $arr = shift;\n    my @result = ();\n    my $i = 0; my $lg = @$arr;\n    while ($i < $lg - 1) {\n        my $s1 = \"\";\n        for (my $u = 0; $u < $i + 1; $u++) {\n            if ($u < $i) { \n                $s1 .= $arr->[$u] . \" \";\n            } else { $s1 .= $arr->[$u]; }\n        }\n        my $s2 = \"\";\n        for (my $u = $i + 1; $u < $lg; $u++) {\n            if ($u < $lg - 1) {\n                $s2 .= $arr->[$u] . \" \";\n            } else { $s2 .= $arr->[$u]; }\n        }\n        push(@result, [$s1, $s2]);\n        $i++;\n    }\n    return \\@result;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"56fcc393c5957c666900024d":[{"id":219417,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(code decode);\n\n# \"\\v\" is replaced by \"&\"\nsub code {\n    my ($s) = @_;\n    my $l = int sqrt length($s) - 1;\n    $s .= '&' x (($l + 1) ** 2 - int length $s);\n    my @a = map [split '', substr($s, $_ * ($l + 1), $l + 1)], 0..$l;\n    my @b = map { my $i = $_; [map $a[$l - $_][$i], 0..$l] } 0..$l;\n    my $r =  join \"\\n\", map { join '', @$_} @b;\n    $r;\n}\n\nsub decode {\n    my ($a) = @_;\n    my @a = map [split '', $_], split \"\\n\", $a;\n    my $l = $#a;\n    my @b = map { my $i = $_; [map $a[$_][$l - $i], 0..$l] } 0..$l;\n    my $r =  (join '', map { join '', @$_} @b) =~ s\/\\&+$\/\/r;\n    $r;\n}\n","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-10 12:55:02"},{"id":219418,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Data::Dumper;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(code decode);\n\n# \"\\v\" is replaced by \"&\"\nsub code {\n    my ($t) = @_;\n    my $len = (length $t)**0.5;\n    $len = (int($len) == $len) ? int($len) : int($len)+1;\n    $t .= \"&\" x ($len**2 - length($t));\n    rot90_clock(join \"\\n\", map {substr($t, $_*$len, $len)} (0..int(length($t)**0.5)));\n}\n\nsub decode {\n    (my $ret = rot90_counter($_[0])) =~ s\/[\n\\&]\/\/g;\n    $ret;\n}\n\nsub rot90_counter {\n    my @a = map {\/[^\n]+\/g} $_[0];\n    join \"\\n\", map {my $i = $_; join(\"\", map {substr($a[$_], $i, 1)} (0..@a-1))} reverse (0..@a-1);\n}\n\nsub rot90_clock {\n    my @a = map {\/[^\n]+\/g} $_[0];\n    join \"\\n\", map {my $i = $_; join(\"\", map {substr($a[$_], $i, 1)} reverse (0..@a-1))} (0..@a-1);\n}\n","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-10 12:55:03"},{"id":219419,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse POSIX qw(ceil);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(code decode);\n\nsub rot_90_clock {\n    my @h = split \/\n\/, (shift);\n    my ($num, $r) = (0, \"\");\n    while ($num <= $#h) {\n        my $res = \"\";\n        for my $s (@h) { $res .= substr($s, $num, 1); }\n        $res = reverse($res);\n        $r .= $res . \"\\n\";\n        ++$num;\n    }\n    substr($r, 0, -1);\n}\nsub rot90_counter {\n    my @arr = split \/\n\/, (shift);\n    my @arr2 = ();\n    my $i = $#arr;\n    while ($i >= 0) {\n        my $str = \"\";\n        my $j = 0;\n        while ($j <= $#arr) { $str .= substr($arr[$j], $i, 1); ++$j; }\n        push @arr2, $str;\n        --$i;\n    }\n    join \"\\n\", @arr2;\n}\n# \"\\v\" is replaced by \"&\"\nsub code {\n    my $s = shift;\n    my $lg = length($s);\n    if ($lg == 0) { return \"\"; }\n    my $u = $s;\n    my $sz = int(ceil(sqrt($lg)));\n    while (length($u) != $sz * $sz) { $u .= \"&\"; }\n    my ($v, $res, $i) = ($u, \"\", 0);\n    while ($i < length($u)) {\n        $res .= substr($v, $i, $sz) . \"\\n\";\n        $i = $i + $sz;\n    }\n    rot_90_clock(substr($res, 0, -1));\n}\nsub decode {\n    my $s = shift;\n    my $lg = length($s);\n    if ($lg == 0) { return \"\"; }\n    my @h = split \/&\/, rot90_counter($s);\n    my @hh = split \"\\n\", $h[0];\n    join \"\", @hh;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-10 12:44:19"}],"56fe17fcc25bf3e19a000292":[{"id":219420,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse bigint try => \"GMP,Pari\";\nuse Exporter qw(import);\nour @EXPORT_OK = qw(v1 v_eff u1 u_eff);\n\nsub v1 {\n    my ($n, $p) = @_;\n    return $p * (2 * $n + 1);\n}\nsub v_eff {\n    my ($n, $p) = @_;\n    return v1($n, $p);\n}\nsub u1 {\n    my ($n, $p) = @_;\n    return $p * ($n + 1);\n}\nsub u_eff {\n    my ($n, $p) = @_;\n    return u1($n, $p);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219421,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(v1 v_eff u1 u_eff);\n\n# use some big integers library\nsub v1 {\n    $_[1] * (2*$_[0] + 1);\n}\n\nsub v_eff {\n    v1($_[0], $_[1]);\n}\n\nsub u1 {\n    $_[1] * ($_[0] + 1);\n}\n\nsub u_eff {\n    u1($_[0], $_[1]);\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219422,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse bigint try => \"GMP,Pari\";\nuse Exporter qw(import);\nour @EXPORT_OK = qw(v1 v_eff u1 u_eff);\n\nsub v1 {\n    my ($n, $p) = @_;\n    return $p * (2 * $n + 1);\n}\nsub v_eff {\n    my ($n, $p) = @_;\n    return $p * (2 * $n + 1);\n}\nsub u1 {\n    my ($n, $p) = @_;\n    return $p * ($n + 1);\n}\nsub u_eff {\n    my ($n, $p) = @_;\n    return $p * ($n + 1);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5700c9acc1555755be00027e":[{"id":219423,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(contain_all_rots);\n\nsub rot { \n  my ($str, $rot) = @_; \n  substr($str,$rot).substr($str, 0, $rot);\n}\n# input: string, array_ref of strings; output: 1 for true or 0 for false \nsub contain_all_rots {\n    my ($str, $arr) = @_;\n    my $lg = length($str);\n    if ($lg == 0) { return 1; }\n    for my $i (0 .. $lg - 1) {\n        my $rt = rot($str, $i);\n        use List::Util qw\/first\/;\n        my $r= first { $_ eq $rt } @$arr;\n        return 0 unless $r;\n    }\n    return 1;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219424,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(contain_all_rots);\n\n# input: string, array_ref of strings; output: 1 for true or 0 for false \nsub contain_all_rots {\n    (my $str, my $arr, my $count) = (@_,0);\n    foreach (1..length($str)){\n        $str = substr($str, 1).substr($str, 0, 1);\n        foreach my $i (0..(@$arr-1)){\n            ++$count if (@$arr[$i] eq $str);\n        }\n    }\n    return 1 if($count == length($str));\n    return 0;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219425,"user_id":826,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(contain_all_rots);\n\n# input: string, array_ref of strings; output: 1 for true or 0 for false \nsub contain_all_rots {\n    my $s = $_[0]; my $arr = $_[1];\n    if (!$s || !$s) {\n        return 1; }\n    my @strings = ();\n    my $str = $s;\n    for my $i (0 .. (scalar @$arr)) {       \n        my $char = substr($str, 0, 1); # no index notation for string in perl!! \n        $str = substr($str, 1); $str .= $char;\n        push @strings, $str;\n        }   \n    my $cnt = 0;\n    for my $i (@strings) {\n        for my $j (@$arr) {\n            if($i eq $j) {\n                $cnt++;\n            }\n        }\n    }\n    if ($cnt eq scalar(@strings)) {\n        return 1; }\n    return 0; \n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219426,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(contain_all_rots);\n\n# input: string, array_ref of strings; output: 1 for true or 0 for false \nsub contain_all_rots {\n    my $base_str = shift;\n    my $array_ref = shift;\n    \n    return 1 unless $base_str;\n    \n    my $base_length = length($base_str);\n    my @base_arr = split('',$base_str);\n    my @rot_arr = ();\n    foreach (0 .. $base_length - 1) {\n        unshift(@base_arr, pop(@base_arr));\n        push(@rot_arr, join('', @base_arr));\n    }\n    my $return = 1;\n    foreach my $i (@rot_arr) {\n        unless (grep {$i eq $_} @$array_ref) {\n            $return = 0;\n          last;\n        }\n    }\n    return $return;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219427,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(contain_all_rots);\n\n# input: string, array_ref of strings; output: 1 for true or 0 for false \n\nsub rot { \n  my ($str, $rot) = @_; \n  return (substr($str,$rot).substr($str, 0, $rot));\n}\n\nsub contain_all_rots {\n    my ($str, $arr, $num) = @_;\n    my $flag = 0;\n#     foreach (@{$arr}){\n#     print $_;\n#     }\n    if(not $str){\n        return 1;\n    }\n    foreach my $i (1..length($str)){\n        my $temp = rot($str, $i);\n        foreach (@{$arr}){\n            if($temp eq $_){\n                $flag += 1;\n            }\n        }\n    }\n    if($flag eq length($str)){\n        return 1;\n    }else{\n        return 0;\n    }\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219428,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(contain_all_rots);\n\n# input: string, array_ref of strings; output: 1 for true or 0 for false \nsub contain_all_rots {\n    my ($s, $a) = @_;\n    return 1 if $s eq \"\";\n    my %h = map { $_, 1} @$a;\n    for (1..length($s)) {\n        return 0 unless $h{$s};\n        $s = substr($s,1).substr($s, 0, 1);\n    }\n    return 1\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219429,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(contain_all_rots);\nuse experimental qw(signatures);\n\nsub contain_all_rots ($str, $arr) {\n    return 1 if $str eq '';\n\n    my %set;\n    $set{$_} = 1 for @$arr;\n\n    for (my $i = 0; $i < length $str; ++$i) {\n        return 0 unless exists $set{$str};\n        $str = substr($str, 1) . substr($str, 0, 1);\n    }\n    return 1;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219430,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(contain_all_rots);\n\n# input: string, array_ref of strings; output: 1 for true or 0 for false \nsub contain_all_rots {\n    my ($s, $arr) = (@_);\n    my ($size) = (length($s));\n    if ($size == 0) {\n        return 1;\n    } else {\n        my @rotations = rot_all($s);\n        foreach my $rotation (@rotations) {\n            if (!($rotation ~~ @$arr)) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n}\n\nsub rot {\n    my $s = shift;\n    return substr($s, 1) . substr($s, 0, 1);\n}\n\nsub rot_all {\n    my ($s, @arr) = (@_, ());\n    my ($size) = (length($s));\n    while ($size-- > 0) {\n        $s = rot($s);\n        push @arr, $s;\n    }\n    return @arr;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219431,"user_id":null,"body":"package Solution;\n\nuse v5.30;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(contain_all_rots);\n\n# input: string, array_ref of strings; output: 1 for true or 0 for false \nsub contain_all_rots {\n    my ($str, $rots) = @_;\n    \n    my %search = map {$_ => 1} $rots->@*;\n    for (1.. length $str) {\n        return 0 if !exists $search{$str};\n        $str = substr($str, 1) . substr($str, 0, 1);\n    }\n    \n    return 1;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219432,"user_id":null,"body":"package Solution;\n\nuse v5.30;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(contain_all_rots);\n\n# input: string, array_ref of strings; output: 1 for true or 0 for false \nsub contain_all_rots {\n    my ($str, $rots) = @_;\n    \n    my %search = map {$_ => 1} $rots->@*;\n    for (my $i = 0; $i < length $str; ++$i) {\n        return 0 if !exists $search{$str};\n        $str = substr($str, 1) . substr($str, 0, 1);\n    }\n    \n    return 1;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5726f813c8dcebf5ed000a6b":[{"id":219433,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(count_k_primes puzzle);\n\nsub count_prime_factors {\n  my($n, $p, $cnt) = (shift, 3, 0);\n  return 0 if $n <= 1;\n  while (!($n & 1)) { $n >>= 1; $cnt++; }\n  while ($n > 1 && $p * $p <= $n) {\n    while ( ($n % $p) == 0) {\n      $n \/= $p;\n      $cnt++;\n    }\n    $p += 2;\n  }\n  $cnt++ if $n > 1;\n  return $cnt;\n}\nsub is_prime {\n  my $n = shift;\n  return ($n >= 2) if $n < 4;\n  return unless $n % 2  &&  $n % 3;\n  my $sqrtn = int(sqrt($n));\n  for (my $i = 5; $i <= $sqrtn; $i += 6) {\n    return unless $n % $i && $n % ($i + 2);\n  }\n  1;\n}\nsub count_k_primes {\n    my ($k, $start, $nd) = @_;\n    my @kprimes = (); \n    my $i = $start;\n    while ($i <= $nd) {\n        if (count_prime_factors($i) == $k) {\n            push(@kprimes, $i);\n        }\n        $i++;\n    }\n    return \\@kprimes;\n}\nsub puzzle {\n    my $s = shift;\n    my $result = 0;\n    my $b = count_k_primes(7, 128, $s - 6);\n    my $c = count_k_primes(3, 4, $s - 130);\n    for (my $j = 0; $j <= $#$b; $j++) { #j in b do\n        for (my $k = 0; $k <= $#$c; $k++) { # k in c do\n            if (is_prime($s - $b->[$j] - $c->[$k])) {\n                $result++;\n            }\n        }\n    }\n    $result;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219434,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(count_k_primes puzzle);\n\nsub count_prime_factors {\n    use integer;\n    my ($n, $i, $ans) = (shift, 2, 0);\n    while ($i <= $n \/ $i) {\n        while ($n % $i == 0) {\n              $ans++;\n              $n = $n \/ $i;\n        }\n        $i++;\n    }\n    if ($n > 1) {\n        $ans++;\n    }\n    return $ans;\n}\n\nsub count_k_primes {\n    my ($k, $start, $nd, @fs) = (@_, ());\n    my ($j, $n) = (0, $start);\n    while ($n <= $nd) {\n        $j = count_prime_factors($n);\n        if ($j == $k) {\n            push @fs, $n;\n        }\n        $n++;\n    }\n    return \\@fs;\n}\n\nsub puzzle {\n    my ($s, $c, $ans) = (shift, 0, 0);\n    my $xs = count_k_primes(7, 128, $s - 10);\n    my $ys = count_k_primes(3, 8, $s - 130);\n    foreach my $a (@$xs) {\n\t    foreach my $b (@$ys) {\n\t        $c = $s - $a - $b;\n            if ($c > 0 && count_prime_factors($c) == 1) {\n                $ans++;\n            }\n\t    }\n\t}\n    return $ans;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"573182c405d14db0da00064e":[{"id":219435,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(consec_k_primes);\n\nsub count_prime_factors {\n    use integer;\n    my ($n, $i, $ans) = (shift, 2, 0);\n    while ($i <= $n \/ $i) {\n        while ($n % $i == 0) {\n              $ans++;\n              $n = $n \/ $i;\n        }\n        $i++;\n    }\n    if ($n > 1) {\n        $ans++;\n    }\n    return $ans;\n}\n\n# input: integer, array_ref of integers; output: integer\nsub consec_k_primes {\n     my ($k, $arr, $m, $p, $q, $e) = (@_, 0, 0, 0, 0);\n     foreach $e (@$arr) {\n        $q = count_prime_factors($e);\n        if ($p == $k && $q == $k) {\n            $m++;\n        }\n        $p = $q;\n     }\n     return $m;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219436,"user_id":209,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(consec_k_primes);\n\nsub k_prime {\n    my ($n, $k, $i) = ($_[0], 0, 2);\n    while($n > 1){\n        while($n % $i == 0){\n            $n = $n \/ $i;\n            $k += 1;\n        }\n        $i += 1;\n        return $k + ($n != 1) if ($i * $i > $n);\n    }\n    $k;\n}\n\nsub consec_k_primes {\n    my ($k, $arr) = @_;\n    my $last = -1;\n    my $res = 0;\n    for(@$arr){\n        my $curr = k_prime($_);\n        $res += ($curr == $last && $curr == $k);\n        $last = $curr;\n    }\n    $res;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219437,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(consec_k_primes);\n\nsub count_prime_factors {\n  my($n, $p, $cnt) = (shift, 3, 0);\n  return 0 if $n <= 1;\n  while (!($n & 1)) { $n >>= 1; $cnt++; }\n  while ($n > 1 && $p * $p <= $n) {\n    while ( ($n % $p) == 0) {\n      $n \/= $p;\n      $cnt++;\n    }\n    $p += 2;\n  }\n  $cnt++ if $n > 1;\n  return $cnt;\n}\nsub consec_k_primes {\n    my ($k, $arr) = @_;\n    my ($cnt, $i, $previous) = (0, 0, -1);\n    while ($i < @$arr) {\n        my $current = count_prime_factors($arr->[$i]) == $k ? 1 : 0;\n        if (($current == 1) && ($current == $previous)) {\n            ++$cnt; \n        }\n        $previous = $current;\n        ++$i;\n    }\n    $cnt;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"573992c724fc289553000e95":[{"id":219438,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(smallest);\n\nsub smallest {\n    my ($number) = @_;\n\n    my ($best_value, $best_i, $best_j);\n\n    for (my $i = 0; $i < length($number); $i++) {\n        my $digit = substr($number, $i, 1);\n        my $cut = substr($number, 0, $i) . substr($number, $i + 1);\n\n        my $j = 0;\n\n        for (my $k = 0; $k < length($cut); $k++) {\n            my $another = substr($cut, $k, 1);\n            last        if $another gt $digit;\n            $j = $k + 1 if $another lt $digit;\n        }\n        \n        my $inserted = substr($cut, 0, $j) . $digit . substr($cut, $j);\n\n        if (!defined($best_value) || $inserted lt $best_value) {\n            ($best_value, $best_i, $best_j) = ($inserted, $i, $j);\n        }\n    }\n\n    $best_value =~ s\/^0+\/\/g;\n\n    return ($best_value, $best_i, $best_j);\n}\n","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219439,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(smallest);\n\n# parameter: a string; return an array of 3 elements\nsub smallest {\n    my $n = shift;\n    \n    my @nums = split('', $n);\n    my $min = $n;\n    my ($left, $right) = (0, 0);\n    for (my $i = 0; $i < @nums; $i++) {\n        for (my $j = 0; $j < @nums; $j++) {\n            if ($i != $j) {\n                my $sw = swap2(\\@nums, $i, $j);\n                if ($sw < $min) {\n                    $min = $sw;\n                    $left = $i;\n                    $right = $j;\n                }\n            }\n        }\n    }\n    \n    return ( $min, $left, $right);\n}\nsub swap2 {\n    my ($n, $i1, $i2) = @_;\n    my $arr = [@$n];\n    my $t = $arr->[$i1];\n    splice @$arr, $i2+($i1 > $i2 ? 0 : 1), 0, $t;\n    $arr->[$i1+($i1 > $i2 ? 1 : 0)] = undef;\n    return 0+join('', grep { defined $_ } @$arr);\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219440,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(smallest);\n\n# parameter: a string; return an array of 3 elements\nsub smallest {\n    my $s = shift; my $tmp = $s; my @mem = (-1,-1,-1); my $l = length($s);\n    for ( my $i = 0; $i < $l; $i++ ) { \n        my $c = substr($s, $i, 1);\n        my $str1 = substr($s, 0, $i) . substr($s, $i + 1, $l - $i - 1);\n        for ( my $j = 0; $j < $l; $j++ ) { \n            my $str2 = substr($str1, 0, $j). $c . substr($str1, $j, $l - $j - 1);\n            if ($str2 lt $tmp) {\n                $tmp = $str2;\n                @mem = ($str2 + 0, $i, $j);\n            }\n        }\n    }\n    if ($mem[0] == - 1) { @mem = ($s + 0, 0, 0) }\n    return @mem;\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"57591ef494aba64d14000526":[{"id":219441,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util 'sum0';\nuse Exporter qw(import);\nour @EXPORT_OK = qw(john ann sum_john sum_ann);\n\nsub gen_kata_lists {\n    my ($n) = @_;\n    my ($ann, $john) = ([1], [0]);\n    do {\n        push(@$john, $_ - $ann->[$john->[$_-1]]);\n        push(@$ann, $_ - $john->[$ann->[$_-1]]);\n    } for (1..$n-1);\n    return [$ann, $john];\n}\n\n#return an array_ref\nsub john {\n    gen_kata_lists($_[0])->[1];\n}\n\n#return an array_ref\nsub ann {\n    gen_kata_lists($_[0])->[0];\n}\n\nsub sum_john {\n    sum0 @{john($_[0])};\n}\n\nsub sum_ann {\n    sum0 @{ann($_[0])};\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219442,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(john ann sum_john sum_ann);\n\nsub john {\n    my ($n, $i, @xs, @ys) = (shift, 1, (), ());\n    push @xs, 0;\n    push @ys, 1;\n    while ($i < $n) {\n        push @xs, ($i - $ys[$xs[$i - 1]]);\n        push @ys, ($i - $xs[$ys[$i - 1]]);\n        $i++;\n    }\n    return \\@xs;\n}\n\nsub ann {\n    my ($n, $i, @xs, @ys) = (shift, 1, (), ());\n    push @xs, 0;\n    push @ys, 1;\n    while ($i < $n) {\n        push @xs, ($i - $ys[$xs[$i - 1]]);\n        push @ys, ($i - $xs[$ys[$i - 1]]);\n        $i++;\n    }\n    return \\@ys;\n}\n\nsub sum_john {\n    my ($n, $m) = (shift, 0);\n    my $fs = john($n);\n    foreach my $x (@$fs) {\n        $m += $x;\n    }\n    return $m;\n}\n\nsub sum_ann {\n    my ($n, $m) = (shift, 0);\n    my $fs = ann($n);\n    foreach my $x (@$fs) {\n        $m += $x;\n    }\n    return $m;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219443,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse List::Util 'sum0';\nuse Exporter qw(import);\nour @EXPORT_OK = qw(john ann sum_john sum_ann);\n\nsub gen_kata_lists {\n    my ($n) = @_;\n    my @ann = (1);\n    my @john = (0);\n    for (my $i=1; $i<$n; $i++) {\n        push(@john, $i - $ann[$john[$i-1]]);\n        push(@ann, $i- $john[$ann[$i-1]]);\n    }\n    return (\"ann\" => \\@ann, \"john\" => \\@john);\n}\n\n#return an array_ref\nsub john {\n    my ($m) = @_;\n    my %ret = &gen_kata_lists($m);\n    $ret{\"john\"};\n}\n\n#return an array_ref\nsub ann {\n    my ($p) = @_;\n    my %ret = &gen_kata_lists($p);\n    $ret{\"ann\"};\n}\n\nsub sum_john {\n    sum0 @{john($_[0])};\n}\n\nsub sum_ann {\n    sum0 @{ann($_[0])};\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219444,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(john ann sum_john sum_ann);\n\nsub john_ann {\n    my $n = shift;\n    my $a = []; my $j = [];\n    $a->[0] = 1; $j->[0] = 0;\n    for (my $i = 1; $i < $n; ++$i) {\n        $j->[$i] = $i - $a->[$j->[$i - 1]];\n        $a->[$i] = $i - $j->[$a->[$i - 1]];\n    }\n    return ($a, $j);\n}\n#return an array_ref\nsub john {\n    my $n = shift;\n    my @j = john_ann($n);\n    return $j[1];\n}\n#return an array_ref\nsub ann {\n    my $n = shift;\n    my @j = john_ann($n);\n    return $j[0];\n}\nuse List::Util qw\/sum\/;\nsub sum_john {\n    my $n = shift;\n    my @j = john_ann($n);\n    return sum( @{$j[1]});\n}\nsub sum_ann {\n    my $n = shift;\n    my @j = john_ann($n);\n    return sum( @{$j[0]});\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5772382d509c65de7e000982":[{"id":219445,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(length_sup_u_k comp);\n\nsub sequence {\n    my $n = shift;\n    my @res = (1, 1);\n    my $i = 2;\n    while ($i < $n) {\n        my $x = $res[$i - $res[$i - 1]] + $res[$i - $res[$i - 2]];\n        $res[$i] = $x;\n        ++$i;\n    }\n    \\@res;\n}\nsub length_sup_u_k {\n    my ($n, $k) = @_;\n    my $arr = sequence($n);\n    my $cnt = 0;\n    for (@$arr) {\n        if ($_ >= $k) { ++$cnt; }\n    }\n    $cnt;\n}\nsub comp {\n    my $n = shift;\n    my $arr = sequence($n);\n    my ($prev, $cnt, $i) = (1, 0, 1);\n    while ($i < $n) {\n        my $cur = $arr->[$i];\n        if ($cur < $prev) { $cnt++; }\n        $prev = $cur;\n        ++$i;\n    }\n    $cnt;\n}\n\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219446,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(length_sup_u_k comp);\n\nour %memo = (1 => 1, 2 => 1);\n\nsub length_sup_u_k {\n    my ($n, $k, $ret) = ($_[0], $_[1], 0);\n    for (1..$n) {\n        unless (defined $memo{$_}) {\n            $memo{$_} = $memo{$_ - $memo{$_-1}} + $memo{$_ - $memo{$_-2}};\n        }\n        $ret++ if ($memo{$_} >= $k);\n    }\n    $ret;\n}\n\nsub comp {\n    my ($n, $ret) = ($_[0], 0);\n    for (3..$n) {\n        unless (defined $memo{$_}) {\n            $memo{$_} = $memo{$_ - $memo{$_-1}} + $memo{$_ - $memo{$_-2}};\n        }\n        $ret++ if ($memo{$_} < $memo{$_-1});\n    }\n    $ret;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219447,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(length_sup_u_k comp);\n\nsub sequence {\n    my $n = shift;\n    my @res = (1, 1);\n    my $i = 2;\n    while ($i < $n) {\n        $res[$i] = $res[$i - $res[$i - 1]] + $res[$i - $res[$i - 2]];\n        ++$i;\n    }\n    \\@res\n}\n\nsub length_sup_u_k {\n    my ($n, $k, $m) = (@_, 0);\n    my $seq = sequence($n);\n    for (@$seq) {\n        if ($_ >= $k) {\n            $m++;\n        }\n    }\n    $m\n}\n\nsub comp {\n    my $n = shift;\n    my $seq = sequence($n);\n    my ($p, $m, $i) = (1, 0, 1);\n    while ($i < $n) {\n        my $q = $seq->[$i];\n        if ($q < $p) { \n            $m++; \n        }\n        $p = $q;\n        ++$i;\n    }\n    $m\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"57a0e5c372292dd76d000d7e":[{"id":219448,"user_id":53,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub repeat_str {\n    my ($num, $str) = @_;\n    $str x $num;\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219449,"user_id":null,"body":"package Kata;\n\nsub repeat_str {$_[1] x $_[0]}\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219450,"user_id":527,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub repeat_str {\n    pop() x pop()\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219451,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub repeat_str {\n    my ($num, $str) = @_;\n    \n    my $result = '';\n    \n    for (1...$num) {\n        $result .= $str;\n    }\n    \n    return $result;\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219452,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub repeat_str {\n    my ($num, $str) = @_;\n    my $result = \"\";\n    foreach my $i (0..$num-1) {\n    $result = $result.$str;\n    }\n    return $result;\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219453,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub repeat_str {\n    my ($num, $str) = @_;\n    my ($output);\n    for (my $i = 1; $i <= $num; $i++) {\n        $output .= $str;\n    }\n    return $output;\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219454,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub repeat_str {\n    my ($num, $str) = @_;\n    my $s = '';\n    my @count = (1..$num);\n    for(@count){\n        $s = $s.$str;\n    }\n    \n    return $s;\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219455,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub repeat_str {\n    my ($num, $str) = @_;\n    my $i = 0;\n    my $result = \"\";\n    for ($i = 0; $i < $num; $i++) {\n      $result .= $str;\n    }\n    return $result;\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219456,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub repeat_str {\n    my ($num, $str) = @_;\n    my $result = \"\";\n    for (my $i = 0; $i < $num; $i++) {\n        $result .= $str;\n    }\n    return $result;\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219457,"user_id":null,"body":"package Kata;\nuse strict;\nuse warnings;\n\nsub repeat_str {\n    my ($num, $str) = @_;\n    my $collect = \"\";\n#    my $number = 0;\n    foreach my $number (1..$_[0]) {\n        $collect = $collect . $_[1];\n    }\n    return $collect;\n}\n\n1; ","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"57cc981a58da9e302a000214":[{"id":219458,"user_id":null,"body":"package Solution;\n\nsub small_enough {\n    my $limit = pop;\n    for (@_) {\n        return 0 if ($_ > $limit);\n    }\n    1;\n}1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219459,"user_id":null,"body":"package Solution;\n\nsub small_enough {\n    my ($limit, @array) = (pop, @_);\n    for (@array) {\n        if ($_ > $limit) {\n            return 0;\n        }\n    }\n    1;\n}1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219460,"user_id":null,"body":"package Solution;\nuse strict;\nuse warnings;\n\nsub small_enough {\n    my ($limit, @array) = (pop, @_);\n    for my $num (@array) {\n        if ($num > $limit) {\n            return 0;\n        }\n    }\n    return 1;\n}\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219461,"user_id":null,"body":"package Solution;\n\nsub small_enough {\n    my ($limit, @array) = (pop, @_);\n\n    foreach(@array)\n    {\n        if($_ > $limit){return 0;}\n    }\n    return 1;\n}\n\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219462,"user_id":53,"body":"package Solution;\n\nsub small_enough {\n    my ($limit, @array) = (pop, @_);\n    foreach (@array) {\n        return 0 if $_ > $limit\n    }\n    return 1\n}1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219463,"user_id":209,"body":"package Solution;\nuse List::Util \"max\";\nsub small_enough {\n    my ($limit, @array) = (pop, @_);\n    max(@array) <= $limit ? 1 : 0;\n}1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219464,"user_id":null,"body":"package Solution;\n\nsub small_enough {\n    my ($limit, @array) = (pop, @_);\n    foreach $n (@array) {\n        if ($n > $limit) {\n            return 0;\n        }\n    }\n    return 1;\n} 1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219465,"user_id":null,"body":"package Solution;\nuse 5.30.0;\n\nuse List::Util qw(all);\n\nsub small_enough {\n    my ($limit, @array) = (pop, @_);\n    (all { $_ <= $limit } @array) || 0;\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219466,"user_id":null,"body":"package Solution;\nuse List::Util qw(max);\n\nsub small_enough {\n    my ($limit, @array) = (pop, @_);\n     if (max(@array) <= $limit) {\n     return 1;\n     }else {\n     return 0;\n     }\n}1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219467,"user_id":null,"body":"package Solution;\n\nsub small_enough {\n    my ($limit, @array) = (pop, @_);\n    scalar( grep { $_ > $limit } @array ) > 0 ? 0 : 1;   \n}\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"58184387d14fc32f2b0012b2":[{"id":219468,"user_id":168,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(f);\n\nsub f {\n    my $x = shift;\n    return $x \/ (sqrt(1 + $x) + 1);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219469,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(f);\n\nsub f {\n    my $x = shift;\n    return $x \/ (1.0 + sqrt(1.0 + $x));\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219470,"user_id":527,"body":"package Solution;\n\nuse Exporter qw(import);\nour @EXPORT_OK = qw(f);\n\nsub f {\n    my ($x) = @_;\n    $x \/ (sqrt($x + 1) + 1)\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219471,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(f);\n\nsub f {\n    my $x = shift;\n    $x \/ (1.0 + sqrt(1.0 + $x));\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219472,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(f);\n\nsub f {\n    my $x = shift;\n    \n    return sqrt(1 + $x) - 1;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"581ee0db1bbdd04e010002fd":[{"id":219473,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse POSIX qw\/floor\/;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(interp);\n\n# parameters: function, semi-inclusive interval I = [l, u), integer; return: array_ref\nsub interp {\n    my ($fct, $l, $u, $n) = @_;\n    my $d = ($u - $l) \/ $n;\n    my @res = ();\n    for (my $i = 0; $i < $n; $i++) {\n        push @res, floor($fct->($l + $i * $d) * 100.0) \/ 100.0;\n    }\n    \\@res;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5868b2de442e3fb2bb000119":[{"id":219474,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(closest);\n\nsub sumdigits {\n    my $s = shift; my $sm = 0;\n    foreach $a (unpack(\"C*\", uc $s)) { $sm += $a - ord('0'); }\n    return $sm;\n}\nsub closest {\n    my $s = shift; \n    if (length($s) == 0) { return \"\"; }\n    my @s = split \/ \/, $s; my $lg = scalar @s;\n    my @nw = map { [ &sumdigits($s[$_]), $_, $s[$_] ] } 0 .. $#s;\n    my @sortnws = sort { \"$a->[0]\" <=> \"$b->[0]\" or \"$a->[1]\" <=> \"$b->[1]\" } @nw;\n\n    my $i = 1; my $min = 100000; my $ndx = -1;\n    while ($i < $lg) {\n        my $a = $sortnws[$i][0] - $sortnws[$i - 1][0];\n        if ($a < $min) { $min = $a; $ndx = $i; }\n        $i += 1;\n    }\n    my $res = \"[[\".$sortnws[$ndx -1][0].\", \".$sortnws[$ndx -1][1].\", \".$sortnws[$ndx -1][2].\"], [\".\n                   $sortnws[$ndx][0].\", \".$sortnws[$ndx][1].\", \".$sortnws[$ndx][2].\"]]\";\n    return $res;\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-09 21:50:55"},{"id":219475,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(closest);\n\nsub closest {\n    return '' unless $_[0];\n    my $i;\n    my @s = (\n        sort { $$a[0] <=> $$b[0] || $$a[1] <=> $$b[1] } \n        map { my $s; $s += $_ for split \/\/; [$s, $i++, $_] }\n        split \" \", $_[0]\n    );\n    my $d = $s[$#s][0];\n    for (1..$#s) {\n         my $dl = $s[$_][0] - $s[$_-1][0];\n         if ($dl < $d) {\n            $i = $_;\n            $d = $dl;\n         }\n    };\n    '[' . (join ', ', map { '[' . join(', ', @$_) . ']'} @s[$i-1, $i]) . ']';\n}\n ","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219476,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\n\nuse Exporter qw(import);\nour @EXPORT_OK = qw(closest);\n\nsub closest {\n    my ($str) = @_;\n\n    if (!$str) { return ''; }\n\n    my $numbers = [ split(' ', $str) ];\n    my $length = scalar(@{$numbers});\n\n    my $weights;\n\n    for (my $i = 0; $i < $length; $i++) {\n        my $number = $numbers->[$i];\n        push(@{$weights}, [ weight($number), $i, int($number) ]);\n    }\n\n    $weights = [ sort {$a->[0] <=> $b->[0]} @{$weights} ];\n\n    my $min_diff_of_waights = 9007199254740992;\n    my ($first, $second); # Smallest difference of waights\n    for (my $i = 0; $i < $length - 1; $i++) {\n        my $diff = $weights->[$i+1]->[0] - $weights->[$i]->[0];\n        if ($diff < $min_diff_of_waights) {\n            $min_diff_of_waights = $diff;\n            $first = $weights->[$i];\n            $second = $weights->[$i+1];\n        }\n    }\n    my $result = [ sort { $a->[0] <=> $b->[0] || $a->[1] <=> $b->[1] } ($first, $second) ];\n    \n    return \"[[$result->[0]->[0], $result->[0]->[1], $result->[0]->[2]], [$result->[1]->[0], $result->[1]->[1], $result->[1]->[2]]]\";\n}\n\n\nsub weight {\n    my ($number) = @_;\n    my $sum = 0;\n\n    while ($number) {\n        my $digit = $number % 10;\n        $sum += $digit;\n        $number = int($number \/ 10);\n    }\n\n    return $sum;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219477,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(closest);\n\nuse List::Util qw(sum);\n\nsub closest {\n    my $i = 0;\n    my @w = sort { $a->{weight} <=> $b->{weight} } map { +{ weight => 0+sum(split('', $_)), index =>  $i++, number => 0+$_ } } split ' ', shift;\n  \n    return '' unless @w;\n    \n    my ($r1, $r2) = ($w[0], $w[1]);\n    my $diff = $r2->{weight} - $r1->{weight};\n    for(my $i = 1; $i < @w; $i++) {\n        my $new_diff = $w[$i]->{weight} - $w[$i-1]->{weight};\n\n        if ($new_diff < $diff) {\n            $diff = $new_diff;\n            $r1   = $w[$i-1];\n            $r2   = $w[$i];\n        }\n    }\n    return  \"[[$r1->{weight}, $r1->{index}, $r1->{number}], [$r2->{weight}, $r2->{index}, $r2->{number}]]\";\n}\n ","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219478,"user_id":null,"body":"package Solution;\n\nuse v5.30;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(closest);\n\nuse List::Util qw(sum0 reduce);\n\nsub closest {\n    my @numbers = split m\/\\s+\/, shift\n        or return '';\n    \n    my @weights;\n    while (my ($i, $value) = each @numbers) {\n        push (@weights, [sum0(split m\/\/, $value), $i, $value]);\n    }\n    @weights = sort {$a->[0] <=> $b->[0] or $a->[1] <=> $b->[1]} @weights;\n    \n    my @result = (\"Inf\", @weights[0..1]);\n    reduce {\n        my $diff = $b->[0] - $a->[0];\n        $diff < $result[0] and @result = ($diff, $a, $b);\n        $b\n    } @weights;\n    \n    return sprintf('[[%s], [%s]]', join(', ', $result[1]->@*), join(', ', $result[2]->@*));\n}\n ","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219479,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse List::Util qw(sum0);\nour @EXPORT_OK = qw(closest);\n\nsub closest {\n    my ($str) = @_;\n    return \"\" if ($str =~ \/^ *$\/);\n    my (@ret, @arr, $mindw, $k, $dw, $ret);\n    $mindw = 1000000; $k = -1;\n    @arr = sort {$a->[0] <=> $b->[0] || $a->[1] <=> $b->[1] || $a->[2] || $b->[2]}\n           map  {$k++; [sum0(split(\/\/, $_)), $k, int($_)];} split(\/ \/, $str);\n    for my $i (0..(@arr-2)) {\n        for my $j (($i+1)..(@arr-1)) {\n            $dw = abs($arr[$i][0] - $arr[$j][0]);\n            if ($dw < $mindw) {\n                $mindw = $dw;\n                $ret = \"[[$arr[$i][0], $arr[$i][1], $arr[$i][2]], [$arr[$j][0], $arr[$j][1], $arr[$j][2]]]\"\n            }\n        }\n    }\n    return $ret;\n}\n ","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219480,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(closest);\n\nsub sumdigits {\n    my $s = shift; my $sm = 0;\n    foreach $a (unpack(\"C*\", uc $s)) { $sm += $a - ord('0'); }\n    return $sm;\n}\nsub closest {\n    my $s = shift; \n    if (length($s) == 0) { return \"\"; }\n    my @s = split \/ \/, $s; my $lg = scalar @s;\n    my @nw = map { [ &sumdigits($s[$_]), $_, $s[$_] ] } 0 .. $#s;\n    my @sortnws = sort { \"$a->[0]\" <=> \"$b->[0]\" or \"$a->[1]\" <=> \"$b->[1]\" } @nw;\n\n    my $i = 1; my $min = 100000; my $ndx = -1;\n    while ($i < $lg) {\n        my $a = $sortnws[$i][0] - $sortnws[$i - 1][0];\n        if ($a < $min) { $min = $a; $ndx = $i; }\n        $i += 1;\n    }\n    my $res = \"[[\".$sortnws[$ndx -1][0].\", \".$sortnws[$ndx -1][1].\", \".$sortnws[$ndx -1][2].\"], [\".\n                   $sortnws[$ndx][0].\", \".$sortnws[$ndx][1].\", \".$sortnws[$ndx][2].\"]]\";\n    return $res;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"586d6cefbcc21eed7a001155":[{"id":219481,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest_repetition);\n\nsub longest_repetition {\n    my ($in) = @_;\n    my ($len, $maxlen, $longest, $prev) = (0, 0, \"\", \"\");\n    for my $ch (map {\/.\/g} $in) {\n        ($ch ne $prev) ? ($prev, $len) = ($ch, 1) : $len++;\n        ($maxlen, $longest) = ($len, $ch) if ($len > $maxlen);\n    }\n    [$longest, $maxlen];\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219482,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest_repetition);\n\nsub longest_repetition{\n    my ($n, $max, $winner, $char, $count, @chars) = (@_, 0, \"\", \"\", 0, []);\n    for my $i (1..length($n)){\n        if ($char eq substr($n, $i-1, 1)){\n            ++$count;\n            print($count);\n            if($count > $max){\n                $max = $count;\n                $winner = $char;\n            }\n        }\n        else{\n            $count = 1;\n            $char = substr($n, $i-1, 1);\n            if ($i == 1){\n                $max = $count;\n                $winner = $char;\n            }\n        }\n    }\n    return [$winner, $max];\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219483,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest_repetition);\n\nsub longest_repetition {\n  my $str = shift;\n  my @result = ('', 0);\n  my @strArray = split('', $str);\n  \n  \\@result if $str eq \"\";\n  \n  for (my $i = 0; $i < length $str;) {\n      my $start = $i++;\n      $i++ while ($i < length $str && $strArray[$i] eq $strArray[$start]);\n      @result = ($strArray[$start], $i - $start) if ($i - $start) > $result[1]; \n  } \n  \n  \\@result;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219484,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest_repetition);\n\nsub longest_repetition {\n  my $str = shift;\n  ('', 0) if $str eq \"\";\n  \n  my @strArray = split('', $str);\n  my @result = ('', 0);\n  \n  for (my $i = 0; $i < length $str;) {\n      my $start = $i++;\n      $i++ while ($i < length $str && $strArray[$i] eq $strArray[$start]);\n      @result = ($strArray[$start], $i - $start) if ($i - $start) > $result[1]; \n  } \n  \n  \\@result;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219485,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest_repetition);\n\nsub longest_repetition{\n  #your code here\n  my ($str) = @_;\n  \n  our ($last_c, $last_len) = ('', 0);\n  our ($long_c, $long_len) = ('', 0);\n  my @chars = split '', $str;\n  \n  sub remember_longest {\n    return unless $last_len > $long_len;\n    \n    $long_len = $last_len;\n    $long_c = $last_c;\n  }\n    \n  while (@chars) {\n    my $c = shift @chars;\n    \n    if ($c eq $last_c) {\n        $last_len++;\n        next;\n    }\n    \n    remember_longest();\n    $last_c = $c;\n    $last_len = 1;\n  }\n  \n  remember_longest();\n  \n  return [$long_c, $long_len];\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219486,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest_repetition);\n\nsub longest_repetition {\n    my %r = ( 0 => \"\");\n    %r = (%r, split \/:\/, $_) for reverse split \/\\s\/, $_[0] =~ s\/((\\w)\\2*)\/(split '', $1).':'.$2.\" \"\/egr;\n    my ($i) = sort { $b <=> $a } keys %r;\n    [$r{$i}, $i];\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219487,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest_repetition);\n\nsub longest_repetition{\n    return [\"\", 0] if ($_[0] eq \"\");\n    my @str = split '', $_[0];\n    my $prev = $str[0];\n    my $seq = 1;\n    my $longest = 1;\n    my $char = $str[0];\n    \n    my $sc = scalar @str - 1;\n    for (@str[1..$sc]){\n        if ($_ eq $prev) {\n            $seq++\n        } else {\n            $prev = $_;\n            $seq = 1;\n        }\n        \n        if ($seq > $longest) {\n            $longest = $seq;\n            $char = $prev;\n        }\n    }\n    \n    return [$char, $longest];\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219488,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest_repetition);\n\nsub longest_repetition {\n    my @chars = split(\/\/, $_[0]);\n    my ($char, $max) = ('', 0);\n    my $i = 0;\n    while ($i < @chars) {\n        my ($current, $count) = ($chars[$i], 0);\n        ++$i, ++$count while $i < @chars && $chars[$i] eq $current;\n        ($max, $char) = ($count, $current) if $count > $max;\n    }\n    return [$char, $max];\n}\n\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219489,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest_repetition);\n\nsub longest_repetition{\n  my ($s, $rep, $max) = (shift, 0, 0);\n  my $prev = substr($s, 0, 1);\n  my $c = $prev;\n  for my $i (0..length($s) - 1) {\n    my $p = substr($s, $i, 1);\n    if ($p ne $prev) {\n      $rep = 1;\n    } else {\n      if (++$rep > $max) {\n        $c = $prev;\n        $max = $rep;\n      }\n    }\n    $prev = $p;\n  }\n  [$c, $max]\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219490,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(longest_repetition);\n\nsub longest_repetition{\n  my ($s, $rep, $max) = (shift, 0, 0);\n  my @cs = split \/\/, $s;\n  my $prev = $cs[0];\n  my $c = $prev;\n  foreach my $p (@cs) {\n    if ($p ne $prev) {\n      $rep = 1;\n    } else {\n      if (++$rep > $max) {\n        $c = $prev;\n        $max = $rep;\n      }\n    }\n    $prev = $p;\n  }\n  [$c, $max]\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"58ce8725c835848ad6000007":[{"id":219491,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(potatoes);\n\nsub potatoes {\n    use integer;\n    my ($p0, $w0, $p1) = @_;\n    $w0 * (100 - $p0) \/ (100 - $p1);\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219492,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(potatoes);\n\nsub potatoes {\n    my ($p0, $w0, $p1, $exp) = @_;\n    return int(($w0 * (100 - $p0)) \/ (100 - $p1));\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219493,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(potatoes);\n\nsub potatoes {\n    my ($p0, $w0, $p1) = @_;\n    int($w0 * (1 - $p0\/100) \/ (1 - $p1\/100) + .01);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219494,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse bignum;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(potatoes);\n\nsub potatoes {\n    my ($p0, $w0, $p1) = @_;\n    my $waterinpotato = int($w0) * int($p0) \/ 100.0;\n    my $suhoepotato = $w0 - $waterinpotato;\n    my $driedpotatopercent = 100 - $p1;\n    my $result = ($suhoepotato \/ $driedpotatopercent) * 100;\n    return int($result);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219495,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse POSIX;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(potatoes);\n\nsub potatoes {\n    my ($p0, $w0, $p1) = @_;\n    $p0 = (100 - $p0);\n    $p1 = (100 - $p1);\n    my $matter = $w0 * $p0;\n    my $w1 = $matter \/ $p1;\n    return floor($w1);;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219496,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(potatoes);\n\nsub potatoes {\n    my ($p0, $w0, $p1) = @_;\n    int $w0 \/ (100 - $p1) * (100 - $p0);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219497,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(potatoes);\n\nsub potatoes {\n    my ($p0, $w0, $p1) = @_;\n    int($w0*(100 - $p0)\/(100 - $p1))\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219498,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(potatoes);\n\nsub potatoes {\n  my ($a, $b, $c) = @_;\n\n  #return sprintf(\"%d\" , (((($b\/100) * (100-$a)) \/ (100-$c)) * 100) );\n  return int (((($b\/100) * (100-$a)) \/ (100-$c)) * 100);\n  1;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219499,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse POSIX;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(potatoes);\n\nsub potatoes {\n    my ($p0, $w0, $p1) = @_;\n    return floor( ((100.0 - ($p0+0))\/100.0) * ($w0+0) \/ ((100.0 - ($p1+0))\/100.0 ));\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219500,"user_id":209,"body":"package Solution;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(potatoes);\nsub potatoes {int($_[1] * (100 - $_[0]) \/ (100 - $_[2]));}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5966eeb31b229e44eb00007a":[{"id":219501,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse POSIX;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(vaporcode);\n\nsub vaporcode{\n    my ($s) = @_;\n    my @result;\n    foreach my $char (split('', $s)) {\n        if ($char ne ' '){\n            push(@result, uc $char);\n        }\n    }\n    return join('  ', @result);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219502,"user_id":null,"body":"package Solution;\n\nuse v5.30;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(vaporcode);\n\nsub vaporcode{\n    return join '  ', grep {!m\/\\s\/} split m\/\/, uc shift;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219503,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse POSIX;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(vaporcode);\n\nsub vaporcode {\n    join \"  \", grep {\/\\S\/} map {\/.\/g} uc shift;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219504,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse POSIX;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(vaporcode);\n\nsub vaporcode{\n    join '  ', split '', uc $_[0] =~ s\/\\s\/\/gr;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219505,"user_id":1750,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse POSIX;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(vaporcode);\n\nsub vaporcode{\n    join \"  \", map {\/\\S\/g} uc(shift())\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219506,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse POSIX;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(vaporcode);\n\nsub vaporcode {\n    my ($input) = @_;\n    join '  ', map { uc } grep { $_ ne ' ' } split \/\/, $input;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219507,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse POSIX;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(vaporcode);\n\nsub vaporcode{\n\n    my ($string) = @_;\n    \n    $string =~ s\/\\s\/\/g;\n        \n    my @tab = map {uc($_)} split(\/\/, $string);\n    \n    return join('  ', @tab);   \n    \n    \n    \n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219508,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse POSIX;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(vaporcode);\n\nsub vaporcode{\n    my ($sentence) = @_;\n    $sentence =~ s\/\\s+\/\/g;\n    $sentence = uc($sentence);\n    $sentence =~ s\/(.)\/ $1 \/g;\n    $sentence =~ s\/^\\s+\/\/;\n    $sentence =~ s\/\\s+$\/\/;\n    return $sentence;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219509,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse POSIX;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(vaporcode);\n\nsub vaporcode{\n    my $r = \"\";\n    foreach my $a (@_) {\n        foreach my $ch (split \/\/, $a ) {\n            if (!($ch =~ \/^\\s*$\/)) {\n                $r = $r . uc($ch) . \"  \";\n            }\n        }\n    }\n    $r = substr($r, 0, length($r) - 2);\n    return $r\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219510,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse POSIX;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(vaporcode);\n\nsub vaporcode{\n    return join(\" \" x 2, map { $_ ne \" \" ? uc($_) : () } split(\/\/, $_[0]));\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"59bf943cafcda28e31000130":[{"id":219511,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(around_fib);\n\nsub fib {\n    my $n = (shift) - 1;\n    my ($a, $b, $p, $q) = (1, 1, 0, 1);\n    use bigint try => \"GMP,Pari\";\n    while ($n > 0) {\n        if ($n % 2 == 0) {\n            ($p, $q, $n) = ($p*$p + $q*$q, 2*$p*$q + $q*$q, $n \/ 2);\n        } else {\n            ($a, $b, $n) = ($b*$q + $a*$q + $a*$p, $b*$p + $a*$q, $n - 1);\n        }\n    }\n    return $b;\n}\nsub around_fib {\n    my $n = shift;\n    my $h = fib($n);\n    my $chk = substr($h, - (length($h) % 25 or 25));\n    my ($mx, $dg) = (-1, -1);\n    for (0..9) {\n        my $count = () = $h =~ \/\\Q$_\/g;\n        if ($count > $mx) {\n            $mx = $count;\n            $dg = $_;\n        }\n    }\n    sprintf(\"Last chunk %s; Max is %d for digit %d\", $chk, $mx, $dg);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219512,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(around_fib);\n\nsub fib {\n    my ($n,$a,$b,$c,$d) = ((shift)-1,1,1,0,1);\n    use bigint try => \"\";\n    while ($n > 0) {\n        if ($n % 2 == 0) {\n            ($c,$d,$n) = ($c*$c+$d*$d, 2*$c*$d+$d*$d, $n\/2);\n        } else {\n            ($a,$b,$n) = ($b*$d+$a*$d + $a*$c, $b*$c+$a*$d, $n-1);\n        }\n    }\n    return $b;\n}\n\nsub around_fib {\n    my ($n, $m, $j) = (@_,-1,-1);\n    my $r = fib($n);\n    my $p = substr($r, -(length($r) % 25 or 25));\n    for (0..9) {\n        my $k = () = $r =~ \/\\Q$_\/g;\n        if ($k > $m) {\n            $m = $k;\n            $j = $_;\n        }\n    }\n    sprintf(\"Last chunk %s; Max is %d for digit %d\", $p, $m, $j);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"59c68ea2aeb2843e18000109":[{"id":219513,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(amort);\n\nsub amort {\n    my ($rate, $balance, $term, $num_payments) = @_;\n    my ($bal, $r) = ($balance, $rate \/ 1200.0);\n    my $payment = ($r * $balance) \/ (1.0 - (1.0 + $r) ** (-$term));\n    my ($interest, $principal) = (0.0, 0.0);\n    for (my $i = 1; $i <= $num_payments; ++$i) {\n        $interest = $bal * $r;\n        $principal = $payment - $interest;\n        $bal -= $principal;\n    }\n    return sprintf(\"num_payment %d c %.0f princ %.0f int %.0f balance %.0f\", $num_payments, $payment, $principal, $interest, $bal);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"59ccf051dcc4050f7800008f":[{"id":219514,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(buddy);\n\nsub sum_div {\n    use integer;\n    my $n = shift;\n    my ($res, $i) = (1, 2);\n    for ( ;$i * $i <= $n; ++$i ) {\n        if ( $n % $i == 0 ) {\n            if ($n \/ $i != $i) { $res += $i + $n \/ $i; \n            } else { $res += $i }\n        }\n    }\n    return $res;\n}\nsub buddy {\n  my ($start, $limit) = @_;\n  for ( my $k = $start; $k <= $limit; ++$k ) {\n    my $m = sum_div($k) - 1;\n    if ( $k == sum_div($m) - 1 && $k < $m ) { return \"($k $m)\"; }\n  }\n  return \"Nothing\";\n}","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2023-01-12 12:27:40"},{"id":219515,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(buddy);\n\n# retur an array_ref\nsub buddy {\n  my ($start, $limit) = @_;\n  for ( my $k = $start; $k <= $limit; ++$k ) {\n    my $m = divisor($k) - 1;\n    if ( $k == divisor($m) - 1 && $k < $m ) { return [$k, $m]; }\n  }\n  return [-1, -1];\n}\n\nsub divisor{\n    my $number = $_[0];\n    my $sq = sqrt($number);\n    my $result = 1;\n    for (my $n = 2; $n < $sq; $n++){\n        if ($number % $n == 0){\n            $result += $n;\n            $result += $number\/$n;\n        }\n    }\n    return $result;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219516,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(buddy);\n\nuse experimental qw(signatures);\nuse List::Util qw(sum);\n\nsub proper ($n) {\n    my $r = sqrt($n);\n    my @divisors;\n    for (my $i = 1; $i <= $r; ++$i) {\n        push @divisors, $i if $n % $i == 0;\n    }\n    my @reverse = reverse @divisors;\n    if ($reverse[0] == $r) {\n        shift @reverse;    # Don't include the square root again.\n    }\n    push @divisors, $n \/ $_ foreach @reverse;\n\n    pop @divisors;         # Removes $n \/ 1.\n    return @divisors;\n}\n\nsub buddy ($start, $end) {\n    for (my $n = $start; $n <= $end; ++$n) {\n        my $s = sum proper $n;\n        next if $s == 1;    # Ignore prime numbers.\n        my $m = $s - 1;\n        next if $m <= $n;   # M must be greater than N.\n        return [$n, $m] if (sum proper $m) == $n + 1;\n    }\n    return [-1, -1];\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"59d0ee709f0cbcf65400003b":[{"id":219517,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(by_state);\n\nsub by_state {\n    my ($str) = @_;\n    my %states = (\"AZ\" => \"Arizona\", \"CA\" => \"California\", \"ID\" => \"Idaho\", \"IN\" => \"Indiana\",\n                  \"MA\" => \"Massachusetts\", \"OK\" => \"Oklahoma\", \"PA\" => \"Pennsylvania\", \"VA\" => \"Virginia\");  \n    my (%dict, @arr, $state, $addr);\n    for my $el (split(\/\n\/, $str)) {\n        next if ($el =~ \/^ *$\/);\n        $state = $states{substr($el, -2)};\n        ($addr = substr($el, 0, -3)) =~ s\/,\/\/g;\n        push(@{$dict{$state}}, $addr);\n    }\n    my $i = 0;\n    for my $st (sort keys %dict) {\n        push(@arr, ($i == 0) ? \"$st\" : \" $st\");\n        push(@arr, \"..... $_ $st\") for (sort @{$dict{$st}});\n        $i++;\n    }\n    join(\"\\r\n\", @arr);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219518,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(by_state);\n\nsub by_state {\n    my $str = shift;\n    my @s = (\" MA\", \" VA\", \" OK\", \" PA\", \" CA\", \" AZ\", \" ID\", \" IN\");\n    my @st = (\", Massachusetts\", \", Virginia\", \", Oklahoma\", \", Pennsylvania\", \", California\", \", Arizona\", \", Idaho\", \", Indiana\");\n    for my $i (0 .. $#s) { $str =~ s\/$s[$i]\/$st[$i]\/g; }\n    my @h = split \/^\/m, $str; my @hh = ();\n    for my $i (0 .. $#h) {\n        my $line = $h[$i];\n        chomp($line);\n        my @u = split \/, \/, $line;\n        $line =~ s\/,\/\/g;\n        push @hh, $u[3] . \", \" . $line;\n    }\n    my @sorthh = sort(@hh);\n    my $i = 0; my $last = \"\"; my $res = \"\";\n    while ($i <= $#sorthh) {\n        my @e = split \/, \/, $sorthh[$i];\n        my $t = $e[0];\n        if ($t ne $last) {\n            $last = $t;\n            $res .= \"\\r\n\" . \" \" . $t . \"\\r\n..... \" . $e[1];\n        } else { $res .= \"\\r\n..... \" . $e[1]; }\n        $i++;\n    }\n    return substr($res, 3);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"59d727d40e8c9dd2dd00009f":[{"id":219519,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(balance);\n\nsub balance {\n    my $s = shift;\n    $s =~ s\/[^a-zA-Z0-9. \\\\]\/\/g; $s =~ s\/\\s+\/ \/g;\n    my @h = split \/\\\n\/, $s;\n    my $total = $h[0]; \n    my ($bal, $cnt) = ($total, 0); \n    my $res = sprintf(\"Original Balance: %.2f\", $total);\n    for (my $i = 1; $i <= $#h ; $i++) {\n        my @arrline = split \/ \/, $h[$i];\n        ++$cnt;\n        $bal -= $arrline[2];\n        $res .= sprintf(\"\n%s %s %.2f Balance %.2f\", $arrline[0], $arrline[1], $arrline[2], $bal);\n    }\n    $res .= sprintf(\"\nTotal expense  %.2f\nAverage expense  %.2f\" , $total - $bal, ($total - $bal) \/ $cnt);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219520,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse POSIX;\nour @EXPORT_OK = qw(balance);\n\nsub balance {\n    my $input = $_[0];\n    printf(\"%s\n\n\", $input);\n    $input =~ s\/[^\\.\\s\\dA-Za-z(\\\n)]\/\/g;\n    $input =~ s\/ +\/ \/g;\n    my @lines = split \/\\\n\/, $input;\n    my ($balance) = (shift @lines) =~ m\/(\\d+(\\.\\d{2})?)\/;\n    my $items = 0;\n    my $expense = 0;\n    my $output = sprintf(\"%s%.2f\n\",\"Original Balance: \", $balance);\n    foreach my $line (@lines){\n        my ($cost) = $line =~ m\/(\\d+(\\.\\d\\d?))\/;\n        ($line) = $line =~ m\/(^\\d{3} [a-zA-Z]+ )\/;\n        $line = sprintf(\"%s %.2f\", $line, $cost);\n        $items++;\n        $expense += $cost;\n        $balance -= $cost;\n        $line = sprintf(\"%s %s %.2f\", $line, \"Balance\", $balance);\n        $line =~ s\/\\s+\/ \/g;\n        $output = sprintf(\"%s%s\n\", $output, $line);\n    }\n    $output = sprintf(\"%s%s  %.2f\n\", $output, \"Total expense\", $expense);\n    my $a = 100 * $expense \/ $items;\n    $a = ($a - floor($a) > .5) ? ceil($a) : floor($a);\n    my $average = $a \/ 100;\n    $output = sprintf(\"%s%s  %.2f\", $output, \"Average expense\", $average);\n    return $output; \n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219521,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse POSIX qw[floor];\nuse Exporter qw(import);\nour @EXPORT_OK = qw(balance);\n\nsub balance {\n    my ($string, ) = @_;\n\n    my @data = split \/\\\n\/, $string;\n    for (my $i=0; $i<scalar @data; $i++) {\n        # $data[$i] =~ s\/[^.A-Za-z0-9 ]\/\/g;\n        $data[$i] =~ s\/[^\\.A-Za-z0-9 ]\/\/gi;\n        $data[$i] =~ s\/\\s+\/ \/g;\n        $data[$i] =~ s\/^\\s*\/\/;\n        $data[$i] =~ s\/\\s*$\/\/;\n    }\n    my ($balance, $report, $expense_total, $item_count, $item_num, $item_desc, $item_cost, ); \n    $balance = shift @data;\n    $report = sprintf \"Original Balance: %.2f\n\", $balance;\n    $expense_total = 0;\n    $item_count = 0;\n    foreach my $line (@data) {\n        next unless $line =~ m\/^(\\d+) (.+?) (\\d+\\.?\\d+)$\/;\n        $item_num = $1;\n        $item_desc = $2;\n        $item_cost = $3;\n        $expense_total += $item_cost;\n        $item_count += 1;\n        $balance -= $item_cost;\n        $report .= sprintf \"%s %s %.2f Balance %.2f\n\", $item_num, $item_desc, $item_cost, $balance;\n    }\n    $report .= sprintf \"Total expense  %.2f\n\", $expense_total;\n    $report .= sprintf \"Average expense  %.2f\", $item_count == 0 ? 0 : $expense_total \/ $item_count;\n    # $report .= sprintf \"Average expense  %.2f\", $item_count == 0 ? 0 : floor(($expense_total \/ $item_count)*100)\/100;\n\n\n    return $report;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219522,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(balance);\n\nsub balance {\n    my ($book) = @_;\n    my ($el, $left, $allexp, $num, $spend, @ret, @a);\n    my @arr = split(\/\\\n\/, $book);\n    for (my $i=0; $i<@arr; $i++) {\n        ($el = $arr[$i]) =~ s\/[^a-zA-Z0-9\\. ]\/\/g;\n        next if ($el =~ \/^\\s*$\/);\n        if ($i == 0) {\n            ($left, $allexp, $num) = ($el, 0, 0);\n            push(@ret, sprintf(\"Original Balance: %.2f\", $left));\n        } else {\n            @a = split(\/\\s+\/, $el);\n            $spend = $a[2];\n            $left -= $spend;\n            $allexp += $spend;\n            $num++;\n            push(@ret, sprintf(\"%s %s %.2f Balance %.2f\", $a[0], $a[1], $spend, $left));\n        }\n    }\n    push(@ret, sprintf(\"Total expense  %.2f\", $allexp));\n    push(@ret, sprintf(\"Average expense  %.2f\", $allexp\/$num));\n    return join(\"\n\", @ret);\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"59d9d8cb27ee005972000045":[{"id":219523,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(catalog);\n\n# In the result \"\u00a3\" is used instead of \"$\"\nsub catalog {\n    my ($s, $article) = @_;\n    my @blocks = split \/\n\n\/, $s;\n    my @des = grep \/$article\/, @blocks;\n    if (scalar @des == 0) { return \"Nothing\"; }\n    my $r = join(\"\n\", @des);\n    $r =~ s\/<prod><name>(.+)<\\\/name><prx>(.+)<\\\/prx><qty>(.+)<\\\/qty><\\\/prod>\/$1 > prx: \u00a3$2 qty: $3\/g;\n    return $r;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219524,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(catalog);\n\n# In the result use \"\u00a3\" instead of \"$\"\nsub catalog {\n    my $markup = $_[0];\n    my $product = $_[1];\n    my @lines = split \/<\\\/prod>\/, $markup;\n    my $output = \"\";\n    for my $l (@lines){\n        if( index($l, $product) != -1 ){\n            $l =~ m\/<prod><name>([^>]+)<\\\/name><prx>([^>]+)<\\\/prx><qty>([^>]+)<\\\/qty>\/;\n            $output = sprintf(\"%s%s > prx: \u00a3%s qty: %s\n\", $output, $1, $2, $3); \n        }\n    }\n    if(length($output) > 0 ){\n        chomp($output);\n    }else{\n        $output = \"Nothing\";\n    }\n    return $output;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219525,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(catalog);\n\nsub catalog {\n    my ($s, $name) = @_;\n\n    my @strings;\n    foreach (split(\/\n\/, $s)) {\n        next unless m{^<prod><name>(.*$name.*)<\/name>};\n        my @matches = m{<name>(.*)<\/name><prx>(.*)<\/prx><qty>(.*)<\/qty>};\n        push @strings, sprintf(\"%s > prx: \u00a3%s qty: %s\", @matches);\n    }\n\n    return @strings ? join(\"\n\", @strings) : 'Nothing';\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219526,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(catalog);\n\n# In the result use \"\u00a3\" instead of \"$\"\nsub catalog {\n    my ($s, $article) = @_;\n    my @arr = map {\n        \/<name>(.*)<\\\/name><prx>(.*)<\\\/prx><qty>(.*)<\\\/qty>\/;\n        \"$1 > prx: \u00a3$2 qty: $3\";\n    } grep {\/\\b${article}\\b\/} split(\/\n\/, $s);\n    return (@arr) ? join(\"\n\", @arr) : \"Nothing\";    \n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219527,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(catalog);\n\n# In the result use \"\u00a3\" instead of \"$\"\nsub catalog {\n    my ($s, $article) = @_;\n    my @arr = ();\n    for my $i (split(\/\n\/, $s)) {\n        if ($i =~ \/<name>(.*)<\\\/name><prx>(.*)<\\\/prx><qty>(.*)<\\\/qty>\/) {\n            my ($item, $p, $q) = ($1, $2, $3);\n            push(@arr, \"$item > prx: \u00a3$p qty: $q\") if ($item =~ \/\\b${article}\\b\/);\n        }\n    }\n    return (@arr) ? join(\"\n\", @arr) : \"Nothing\";\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"59de1e2fe50813a046000124":[{"id":219528,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(change);\n\nsub change {\n    $_ = shift;  my $pg = shift; my $v = shift; my $ph = \"+1-503-555-0090\";\n    my $res =  $_ =~ \/\nPhone: (?<phone>\\+1-\\d{3}-\\d{3}-\\d{4})\n.+?\nVersion: (?<version>\\d+\\.\\d+)\n\/;\n    if (!$res) { \n        return \"ERROR: VERSION or PHONE\"; \n    }\n    my $ver = $+{version};\n    my $vs;\n    if ($ver eq \"2.0\") { $vs = \"2.0\"; } else { $vs = $v; }\n    my $r = sprintf(\"Program: %s Author: g964 Phone: +1-503-555-0090 Date: 2019-01-01 Version: %s\", $pg, $vs);\n    return $r;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219529,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(change);\n\nsub change {\n    my ($s, $prog, $ver) = @_;\n    my @s = split '\n', $s;\n    my $phone;\n    my $version;\n    if ($s[5] =~ \/^Version: \\d+\\.\\d+$\/){\n        if ($s[5] ne 'Version: 2.0'){\n            $version = $ver;\n        } else {\n            $version = '2.0';\n        }\n    } else {\n        return 'ERROR: VERSION or PHONE';\n    }\n    if ($s[3] =~ \/^Phone: \\+\\d-\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d$\/){\n        $phone = '+1-503-555-0090';\n    } else {\n        return 'ERROR: VERSION or PHONE';\n    }\n    print $s;\n    \"Program: $prog Author: g964 Phone: $phone Date: 2019-01-01 Version: $version\";\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219530,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(change);\n\nsub change {\n    my ($s, $prog, $version) = @_;\n    my $error_msg = \"ERROR: VERSION or PHONE\";\n    \n    my @lines = split ('\n', $s);\n    my $result .= \"Program: $prog Author: g964 \";\n    \n    foreach my $line (@lines){\n        if (index($line, 'Phone') != -1) {\n            my @arr = split (' ', $line);\n            my $number = $arr[1];\n            if ($number =~ \/\\+1-\\d{3}-\\d{3}-\\d{4}\/){\n                $result .= \"Phone: +1-503-555-0090 \";\n            }else{\n                return $error_msg;\n            }\n        }elsif (index($line, 'Version') != -1) {\n            my @arr = split (' ', $line);\n            my $version_str = $arr[1];\n            if ($version_str =~ \/^\\d+\\.\\d+$\/){\n                if ($version_str eq \"2.0\"){\n                    $result .= \"Version: 2.0\";\n                }else{\n                    $result .= \"Version: $version\";\n                }\n            }else{\n                return $error_msg;\n            }\n        }elsif (index($line, 'Date') != -1){\n            $result .= \"Date: 2019-01-01 \";\n        }\n    }\n    \n    return $result;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219531,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(change);\n\nsub change {\n    my ($s, $prog, $version) = @_;\n\n    my @a = split \"\n\", $s;\n    foreach my $line (@a) {\n        $line = 'Date: 2019-01-01'   if $line =~ \/Date:\/;\n        $line = 'Author: g964'       if $line =~ \/Author:\/;\n        $line = 'Program: '.$prog    if $line =~ \/Program title:\/;\n        $line = ''                   if $line =~ \/Corporation:|Level:\/;\n        if ($line =~ \/Version: (.*)\/) {\n            my $v = $1;\n            if ($v =~ \/^\\d+\\.\\d+$\/) {\n                $line = 'Version: '.($v eq '2.0' ? '2.0' : $version);\n            }\n            else {\n                return 'ERROR: VERSION or PHONE';\n            }\n        }\n        if ($line =~ \/Phone: (.*)\/) {\n            my $p = $1;\n            if ($p =~ \/^\\+1\\-\\d\\d\\d\\-\\d\\d\\d\\-\\d\\d\\d\\d$\/) {\n                $line = 'Phone: +1-503-555-0090';\n            }\n            else {\n                return 'ERROR: VERSION or PHONE';\n            }\n        }\n        \n    }\n    join(' ', grep {$_} @a);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219532,"user_id":null,"body":"package Solution;\n\nuse v5.30;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(change);\n\nsub change {\n    my ($s, $prog, $version) = @_;\n    \n    $s =~ m\/^Phone: [ ] [+]1-\\d{3}-\\d{3}-\\d{4}$\/xm && $s =~ m\/^Version: [ ] \\d+ [.] \\d+$\/xm\n        or return 'ERROR: VERSION or PHONE';\n        \n    $s =~ s{^((?!Program|Phone|Date|Author|Version).)*}{}gms;\n    chomp($s);\n    $s =~ s{^Program.*}{Program: $prog}m;\n    $s =~ s{^(Author:).*}{$1 g964}m;\n    $s =~ s{^(Version:).*}{$1 $version}m unless $s =~ m\/^Version: [ ] 2.0\/mx;\n    $s =~ s{^(Date:).*}{$1 2019-01-01}m;\n    $s =~ s{^(Phone:).*}{$1 +1-503-555-0090}m;\n\n    return $s =~ s\/\\R\/ \/gr;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219533,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(change);\n\nsub change {\n\n    my ($a, $b, $c) = (@_);\n    \n    if ($a =~ \/(Pr.+\n)(A.+\n)(C.+\n)(Phone: \\+1-\\d{3}-\\d{3}-\\d{4}\n)(D.+\n)Version: (\\d+.\\d+)[^.]+\/m) {\n        my $version = $6 eq \"2.0\" ? $6 : $c;\n        $a =~ s\/(Pr.+\n)(A.+\n)(C.+\n)(Phone: \\+1-\\d{3}-\\d{3}-\\d{4}\n)(D.+\n)Version: (\\d+.\\d+)[^.]+\/Program: $b Author: g964 Phone: +1-503-555-0090 Date: 2019-01-01 Version: $version\/m;\n        return $a;\n        } else {\n        return \"ERROR: VERSION or PHONE\";\n        }\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219534,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(change);\n\nsub change {\n    my ($s, $prog, $v) = @_;\n    my @arr = ();\n    for my $line (split(\/\n\/, $s)) {\n        next if ($line =~ \/(Corporation|Level):\/);\n        if ($line =~ \/Program title:\/) {\n            push(@arr, \"Program: $prog\");\n        } elsif ($line =~ \/Author:\/) {\n            push(@arr, \"Author: g964\");\n        } elsif ($line =~ \/Date:\/) {\n            push(@arr, \"Date: 2019-01-01\");\n        } elsif ($line =~ \/Phone:\/) {\n            return \"ERROR: VERSION or PHONE\" if ($line !~ \/Phone: +\\+1-\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d$\/);\n            push(@arr, \"Phone: +1-503-555-0090\");\n        } elsif ($line =~ \/Version:\/) {\n            return \"ERROR: VERSION or PHONE\" if ($line !~ \/Version: +\\d+\\.\\d+$\/);\n            $line =~ \/Version: +(\\d+\\.\\d+)\/;\n            my $s = ($1 eq \"2.0\") ? \"Version: 2.0\" : \"Version: $v\";\n            push(@arr, $s);\n        } else {\n            push(@arr, $line);\n        }\n    }\n    return join(\" \", @arr);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219535,"user_id":209,"body":"package Solution;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(change);\n\nsub change{\n  my @x = split \/\n\/, $_[0];\n  return \"ERROR: VERSION or PHONE\" if( $x[3] !~ \/\\+1-\\d{3}-\\d{3}-\\d{4}$\/ ||  $x[5] !~ \/Version: \\d+\\.\\d+$\/);\n  \"Program: $_[1] Author: g964 Phone: +1-503-555-0090 Date: 2019-01-01 Version: ${\\($x[5] eq \\\"Version: 2.0\\\" ? '2.0' : $_[2])}\";\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"59df2f8f08c6cec835000012":[{"id":219536,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse List::Util qw(pairmap);\nour @EXPORT_OK = qw(meeting);\n\nsub meeting {\n    my @list = pairmap { \"($a, $b)\" } reverse split ';|:', uc shift;\n    return join '', sort @list;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219537,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(meeting);\n\nsub meeting {\n    join '', \n        sort\n        map { '('. (join ', ', reverse split ':') . ')' } \n        split ';', uc $_[0];\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219538,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(meeting);\n\nsub meeting {\n    my ($s) = @_;\n\n    my @guests = split(\/;\/, $s);\n\n    # Array of hashes with keys `first` and `last`\n    @guests = map {\n        my @names = split(\/:\/, $_);\n        {first => $names[0], last => $names[1]};\n    } @guests;\n\n    @guests = sort {\n        # uc for comparision, cos names can be NOT in Snake Case (eg. Madison:STAN)\n        my $r = uc($a->{last}) cmp uc($b->{last});\n        return $r if ($r != 0);\n        return uc($a->{first}) cmp uc($b->{first});\n    } @guests;\n\n    my $s2 = join(\"\", map {\n        \"(\" . uc($_->{last}) . \", \" . uc($_->{first}) . \")\";\n    } @guests);\n\n    return $s2;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219539,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(meeting);\n\nsub meeting {\n    my $str = shift;\n\n    return join('',\n        map  { \"($_->[1], $_->[0])\" }\n        sort {\n            $a->[1] cmp $b->[1]\n                ||\n            $a->[0] cmp $b->[0]\n        }\n        map  {\n            # fn, ln\n            [ split(\/:\/, $_) ]\n        }\n        split \/;\/, uc($str)\n    );\n}\n\nsub meeting_v1 {\n    my $str = shift;\n    my $pat = q[(%s, %s)]; # template for the output format\n\n    my $out = join('',\n        map  { sprintf($pat, $_->[2], $_->[1] )}\n        sort {\n            $a->[2] cmp $b->[2]\n                ||\n            $a->[1] cmp $b->[1]\n        }\n        map  {\n            # orig, fn, ln\n            [$_, split(\/:\/, $_) ]\n        }\n        split \/;\/, uc($str)\n    );\n\n    return $out;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219540,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(meeting);\n\nsub meeting {\n    my $str = shift;\n    \n    my $people;\n    while ($str =~ \/(\\w+):(\\w+);?\/g) {\n        $people->{uc $2}->{uc $1}++;\n    }\n    \n    my $res;\n    \n    for my $first_name (sort { $a cmp $b } keys %$people) {\n        for my $last_name (sort { $a cmp $b } keys %{$people->{$first_name}}) {\n            $res .= (\"($first_name, $last_name)\") x $people->{$first_name}->{$last_name};\n        }\n    }\n    \n    return $res;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219541,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(meeting);\n\nsub meeting {\n    join '', \n        sort { $a cmp $b } \n        map { '('. (join ', ', reverse split ':', $_) . ')' } \n        split ';', uc $_[0];\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219542,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(meeting);\n\nsub meeting {\n    join '', \n        sort { $a cmp $b } \n        map { $_ = uc; '('. (join ', ', reverse split ':', $_) . ')' } \n        split ';', $_[0];\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219543,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(meeting);\n\nsub meeting {\n    return join '', map { sprintf('(%s, %s)', reverse @$_) }\n      sort { $a->[1] cmp $b->[1] || $a->[0] cmp $b->[0]; }\n      map { [split ':'] } (split ';', uc $_[0]);\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219544,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(meeting);\n\nsub meeting {\n    my ($list, ) = @_;\n    my (@people, $person, @new_list, $sorted_list, $first, $last, );\n    $list =~ s\/\\s+\/\/g;\n    $list =~ s\/[^:;A-Za-z]\/\/g;\n    @people = split \/;\/, $list;\n    @new_list = ();\n    foreach $person (@people) {\n        ($first, $last, ) = split \/:\/, uc($person);\n        push(@new_list,sprintf(\"%s %s:(%s, %s)\", $last, $first, $last, $first));\n    }\n    $sorted_list = '';\n    foreach $person (sort(@new_list)) {\n        $sorted_list .= (split \/:\/, $person)[1];\n    }\n    return $sorted_list;\n}\n\n\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219545,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(meeting);\n\nsub xform {\n  my @split = split(\/:\/, uc($_[0]));\n  return \"($split[1], $split[0])\";\n}\nsub meeting {\n  return join('', (sort map { xform($_) } split(\/;\/, $_[0])));\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"59f3956825d575e3330000a3":[{"id":219546,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(get_pos);\n\nsub valid_pattern\n{\n  my $i = shift;\n  my $value = shift;\n  my $pattern = shift;\n  \n  my $i = 0;\n  for ($i = 0; $i < length($value); $i++) {\n    my $vchar = substr($value, $i, 1);\n    my $pchar = substr($pattern, $i, 1);\n\n    # Do Nothing on valid matches\n    if ($pchar eq $vchar) {\n    } elsif ($pchar eq 'R' && ($vchar eq 'G' || $vchar eq 'A')) {\n    } elsif ($pchar eq 'Y' && ($vchar eq 'C' || $vchar eq 'T')) {\n    } elsif ($pchar eq 'M' && ($vchar eq 'A' || $vchar eq 'C')) {\n    } elsif ($pchar eq 'K' && ($vchar eq 'G' || $vchar eq 'T')) {\n    } elsif ($pchar eq 'S' && ($vchar eq 'G' || $vchar eq 'C')) {\n    } elsif ($pchar eq 'W' && ($vchar eq 'A' || $vchar eq 'T')) {\n    } elsif ($pchar eq 'B' && $vchar ne 'A') {\n    } elsif ($pchar eq 'D' && $vchar ne 'C') {\n    } elsif ($pchar eq 'H' && $vchar ne 'G') {\n    } elsif ($pchar eq 'V' && $vchar ne 'T') {\n    } elsif ($pchar eq 'N') {\n    } else {\n      return 0;\n    }\n  }\n\n  return 1;\n}\n\n#input: base, string, query; output: string with positions\nsub get_pos {\n\n    # Working With Upper Case Strings storing original patternname for reprinting\n    my $database = uc(shift);\n    my $dna = uc(shift);\n    my $pattern = shift;\n    my $origpat = $pattern;\n    $pattern = uc($pattern);\n  \n\n    # Convert Textfile to lookup hash\n    my @lines = split \/\n\/, $database;\n    my @data = ();\n    my $line = \"\";\n    my $load = 0;\n    my %lookup = ();\n    foreach $line (@lines) {\n      if ($load) {\n         if ($line =~ \/(\\w+) \\((.+)\\)\\W*(\\w+)\/) \n         {\n            $lookup{$1} = $3;\n            $lookup{$2} = $3;\n         } elsif ($line =~ \/(\\w+)\\W*(\\w+)\/) {\n            $lookup{$1} = $2;\n         }\n      }\n      if ($line eq \"<>\") {\n        $load = 1;\n      }\n    }\n\n    # Convert Pattern name to pattern string.\n    $pattern = $lookup{$pattern};\n     \n    if (! $pattern) {\n      return \"This query name does not exist in given Base\";\n    }\n    \n    my $dna_length = length($dna);\n    my $i = 0;\n    my $output = \"\";\n    for($i = 0; $i < $dna_length; $i++)\n    {\n      my $char = substr($dna, $i, 1);\n      if ($char eq \"A\" || $char eq \"C\" || $char eq \"T\" || $char eq \"G\") {\n        $output .= $char;\n      }\n    }\n    $dna = $output;\n    \n    $dna_length = length($dna);\n    my $pattern_length = length($pattern);\n    $i = 0;\n    $output = \"\";\n    for ($i = 0; $i < $dna_length - $pattern_length; $i++) {    # May need to adjust by one?\n      if (valid_pattern($i,substr($dna, $i, $pattern_length), $pattern)) {\n        if ($output)\n        {\n          $output .= \" \"\n        }\n        $output .= ($i + 1);\n        $i += $pattern_length - 1;\n      }\n    }\n    if ($output) {\n      return $output;\n    }\n    return \"$origpat is not in given string\";\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219547,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(get_pos);\n\n#return developped string_label for a given label\nsub char_hash {\n    my ($name) = @_;\n    my %hash_for_reg = \n    (\"A\" => \"A\", \"C\" => \"C\", \"G\" => \"G\", \"T\" => \"T\", \"R\" => \"[GA]\", \"Y\" => \"[CT]\", \n    \"M\" => \"[AC]\", \"K\" => \"[GT]\", \"S\" => \"[GC]\", \"W\" => \"[AT]\", \"B\" => \"[CGT]\", \"D\" => \"[AGT]\", \n    \"H\" => \"[ACT]\", \"V\" => \"[ACG]\", \"N\" => \"[ACGT]\"); \n    my $register = \"\"; \n    #fill letter by letter\n    for (my $i = 0 ; $i < length($name) ; ++$i) { \n        $register .= $hash_for_reg{substr($name, $i, 1)}; \n    }\n    return $register; \n}\n#return a hash: key=label, value=developped label_string\nsub parse_base {\n    my ($file, %base_hash) = (shift, ());\n    open my $fh, \"<\", \\$file or die $!;\n    while (<$fh>) { \n        #pass until label + label_string\n        ( 1 .. \/<>\/ ) and next; \n        \/^\\s*$\/ and next;  \n        my @fields = split( \" \", $_); \n        #extract 1st and 3rd columns\n        my $label = shift @fields; \n        my $label_string = pop @fields; \n        my $register = char_hash($label_string);\n        $base_hash{$label} = $register;\n    }\n    close $fh or die $!;\n    return %base_hash;\n}\nsub match_positions { \n    my ($register, $sequence, @positions) = (@_, ());\n    while ( $sequence =~ \/$register\/ig ) { \n         push ( @positions, pos($sequence) - length($&) + 1); \n    } \n    return @positions;\n}\n#input: base, string, query; output: string with positions\nsub get_pos {\n    my ($bse, $str, $query, %base_hash) = (@_, ());\n    my ($data, $register, @loc, $res) = (\"\", \"\", (), \"\"); \n    (my $dta = $str) =~ s\/\\s\/\/g;\n    %base_hash = parse_base($bse); \n    # look for query\n    if ( exists $base_hash{$query} ) { \n        $register = $base_hash{$query}; \n        @loc = match_positions($register, $dta); \n        if (@loc) { \n            $res = join(\" \", @loc); \n        } else { \n            $res = \"$query is not in given string\"; \n        } \n    } else { $res = \"This query name does not exist in given Base\"; }\n    return $res;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"59f44c7bd4b36946fd000052":[{"id":219548,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(hist);\n\nsub hist {\n    my $s = shift; my @base=(\"w\", \"x\", \"z\", \"u\"); my %count;\n    foreach my $b (@base) {\n        while($s =~ \/$b\/g) { $count{$b}++ }\n    }\n    my @keys = sort { $a cmp $b } keys %count;\n    my $res = \"\";\n    foreach my $key ( @keys ) {\n        my $val = $count{$key};\n        $res .= sprintf(\"%-2s %-6s\", $key, $val) . (\"*\" x $val) .\"\\r\";\n    }\n    return substr($res, 0, -1);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219549,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(hist);\n\nsub hist {\n    my $str = $_[0];\n    my %count;\n    foreach my $char (split \/\/, $str) {\n        $count{$char}++;\n    }\n    my @res;\n    for my $letter ('u', 'w', 'x', 'z') {\n        my $value = $count{$letter};\n        if (defined($value) && $value > 0) {\n            push(@res, sprintf('%s  %-5d %*.*s', $letter, $value, $value, $value, '*******************************************'));\n        }\n    }\n\n    return join(\"\\r\", @res);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219550,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(hist);\n\nsub hist {\n    my @chars = split \/\/, $_[0];\n    my %hist;\n    my $res;\n    foreach (@chars) { if (\/[uwxz]\/) { $hist{$_}++ } }\n    my @keys = sort keys %hist;\n    foreach (@keys){\n        my $v = $hist{$_};\n        my $line = sprintf \"%s  %-6s%s\",$_, $v, ('*' x $v);\n        $res .= $line . \"\\r\";\n    }\n    substr $res, 0, -1;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219551,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(hist);\n\nsub hist {\n    my $control_string = shift;\n    my $hash = {\n        u => 0,\n        w => 0,\n        x => 0,\n        z => 0\n    };\n    for my $error (split('', $control_string)) {\n        if ($error =~ m\/[uwxz]\/) {\n            $hash->{$error} += 1;\n        }\n    }\n    my $carry = \"\\r\";\n    my $carry_flag = 0;\n    my $u_string = getString('u', $hash, 'u');\n    if ($u_string) { $carry_flag = 1; }\n    my $w_string = $carry_flag ? getString($carry .'w', $hash, 'w') : getString(\"w\", $hash, 'w');\n    if ($w_string) { $carry_flag = 1; }\n    my $x_string = $carry_flag ? getString($carry . 'x', $hash, 'x') : getString(\"x\", $hash, 'x');\n    if ($x_string) { $carry_flag = 1; }\n    my $z_string = $carry_flag ? getString($carry. 'z', $hash, 'z') : getString(\"z\", $hash, 'z');\n    return sprintf('%s%s%s%s',\n        $u_string,\n        $w_string,\n        $x_string,\n        $z_string        \n    );\n}\n\nsub stringGlue {\n    my ($number, $symbol) = @_;\n    my $str = '';\n    for my $i (1...$number) {\n        $str .= $symbol;\n    }\n    return $str;\n}\n\nsub getDigits {\n    my $number = shift;\n    return length (\"$number\");\n}\n\nsub getString {\n    my ($begin, $hash, $key) = @_;\n    my $SPACE = ' ';\n    my $STAR = '*';\n    my $spaces = 6 - getDigits($hash->{$key});\n    my $stars = $hash->{$key};\n    return $hash->{$key} ? \"$begin$SPACE$SPACE\" . $hash->{$key}.\n        stringGlue($spaces, $SPACE).\n        stringGlue($stars, $STAR) :\n        '';\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219552,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(hist);\n\nsub hist {\n    my ($in) = @_;\n    \n    my %chars; ++$chars{$_} foreach split ('', $in);\n    my %errors = delete %chars{grep {exists $chars{$_}} qw(u w x z)};\n    \n    return join(\"\\r\", map {\n        sprintf('%s  %d     %s', $_, $errors{$_}, '*' x $errors{$_});\n    } sort keys %errors);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219553,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse List::MoreUtils qw(true);\nour @EXPORT_OK = qw(hist);\n\nsub hist {\n    my ($s) = @_;\n    my @arr = ();\n    for my $c (\"u\", \"w\", \"x\", \"z\") {\n        my $n = true {$_ eq $c} split(\/\/,$s);\n        next unless ($n > 0);\n        push(@arr, \"$c  $n\" . \" \"x(6 - length(\"$n\")) . \"*\"x$n);\n    }\n    return join(\"\\r\", @arr);\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219554,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(hist);\n\nsub hist {\n    my %h;\n    map { $h{$_}++ } grep { \/[uwxz]\/ } split '', shift;\n    return join(\"\\r\", map { \"$_  $h{$_}     \".'*'x$h{$_}  } sort keys %h);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"59f4a0acbee84576800000af":[{"id":219555,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(pos_average);\n\nsub pos_average {\n    my ($s, $hit, $i, $j, $k) = (shift, 0, 0, 0, 0);\n    my $size = length($s);\n    my $m = index ($s, ',');\n    my $n = ($size + 2) \/ ($m + 2);\n    my $tot = $m * $n * ($n - 1) \/ 2;\n    while ($i < $size - $m - 2) {\n        $j = $i + $m + 2;\n        while ($j < $size) {\n            $k = 0;\n            while ($k < $m) {\n                if (substr($s, $i + $k, 1) == substr($s, $j + $k, 1)) {\n                    $hit++;\n                }\n                $k++;\n            }\n            $j += $m + 2;\n        }\n        $i += $m + 2;\n    }\n    return 100 * $hit \/ $tot;\n}\n\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219556,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(pos_average);\n\nsub pos_average {\n    my @arr = split(\/, \/, shift);\n    my ($cnt, $nb_strings) = (0, 0);\n    for my $i (0..$#arr) {\n        my $s1 = $arr[$i];\n        for my $j (0..$#arr) {\n            if ($i != $j) {\n                my $s2 = $arr[$j];\n                for my $ndx_c (0..length($s2) - 1) {\n                    ++$nb_strings;\n                    if (substr($s1, $ndx_c, 1) == substr($s2, $ndx_c, 1)) { ++$cnt; }\n                }\n            }\n        }\n    }\n    return 100 * $cnt \/ $nb_strings;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219557,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(pos_average);\n\nsub combos \n{\n    my $n = shift;\n    if ($n <= 1) { \n      return 0;\n    }\n    return $n * ($n-1) \/ 2; \n}\nsub pos_average {\n    my @strings = shift;\n    @strings = split \/\\, \/, $strings[0];\n    \n    my $totalcombos = combos($#strings + 1) * length($strings[0]);\n    my $index = 0;\n    my $matches = 0;\n    for ($index = 0; $index < length($strings[0]); $index++) {\n      my $i = 0;\n      my @counts = ();\n      for ($i = 0; $i < 10; $i++) {\n        $counts[$i] = 0;\n      }\n      \n      for ($i = 0; $i <= $#strings; $i++)\n      {\n        $counts[int(substr($strings[$i],$index,1))]++;\n      }\n\n      for ($i = 0; $i < 10; $i++) {\n        $matches += combos($counts[$i]);\n      }\n    }\n    if ($totalcombos == 0)\n    {\n      return 0;\n    }\n    return 100.0 * $matches \/ $totalcombos;\n}\n\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219558,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(pos_average);\n\nsub pos_average {\n    my ($num, $den, @arr) = (0, 0, map {\/\\d+\/g} $_[0]);\n    for (my $i=0; $i<@arr; $i++) {\n        for (my $j=$i+1; $j<@arr; $j++) {\n            for (my $k=0; $k<length($arr[$i]); $k++) {\n                $num++ if (substr($arr[$i],$k,1) == substr($arr[$j],$k,1));\n            }\n            $den += length($arr[$i]);\n        }\n    }\n    return 100.0 * $num \/ $den;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219559,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(pos_average);\n\nsub pos_average {\n    my @s = map { [split('', $_)] } split(', ', shift);\n    my $res = 0;\n    for (my $i = 0; $i < @s-1; $i++) {\n        for (my $j = $i+1; $j < @s; $j++) {\n            for (my $p = 0; $p < @{$s[0]}; $p++) {\n                if ($s[$i]->[$p] eq $s[$j]->[$p]) {\n                    $res++;\n                }\n            }\n        }\n    }\n    return sprintf(\"%.10f\", $res * 200.0 \/ (@s*(@s-1)*@{$s[0]}));\n}\n\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219560,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(pos_average);\n\nuse experimental qw(signatures);\nuse List::Util qw(sum);\n\nsub combinations ($list, $k) {\n    return map { [$_] } @$list if $k <= 1;\n    my @combinations;\n    my $size = @$list;\n    for (my $i = 0; $i + $k <= $size; ++$i) {\n        my $current = $list->[$i];\n        my $rest    = [@$list[($i + 1) .. $#$list]];\n        push @combinations, [$current, @$_] for combinations($rest, $k - 1);\n    }\n    return @combinations;\n}\n\nsub positions_in_common ($first, $second) {\n    my @array1 = unpack('C*', $first);\n    my @array2 = unpack('C*', $second);\n    my $count  = 0;\n    $count += $array1[$_] == $array2[$_] for 0 .. $#array1;\n    return $count;\n}\n\nsub pos_average ($input) {\n    my @strings      = split(', ', $input);\n    my @combinations = combinations(\\@strings, 2);\n    my $sum          = sum map { positions_in_common(@$_) } @combinations;\n    my $str_size     = length $strings[0];\n    return 100 * $sum \/ ($str_size * @combinations);\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219561,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse List::Util qw(sum);\nuse Data::Dumper;\nour @EXPORT_OK = qw(pos_average);\n\nsub pos_average {\n    my (@m) = map {[split \/\/, $_]} split \/, \/, shift;\n    my $c = 0;\n    for my $i (0..$#{$m[0]}) {\n        my %h;\n        $h{$$_[$i]}++ for (@m);\n        $c += sum map {$_ * ($_ - 1) \/ 2} values %h;\n    }\n    100 * $c \/ @{$m[0]} \/ (@m * (@m - 1) \/ 2);\n}\n\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219562,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(pos_average);\n\nsub pos_average {\n    my ($num, $den, @arr) = (0, 0, map {\/\\d+\/g} $_[0]);\n    for (my $i=0; $i<$#arr; $i++) {\n        my @a = map {\/.\/g} $arr[$i];\n        for (my $j=$i+1; $j<@arr; $j++) {\n            my @b = map {\/.\/g} $arr[$j];\n            for (my $k=0; $k<@a; $k++) {\n                $num++ if ($a[$k] == $b[$k]);\n            }\n            $den += @a;\n        }\n    }\n    return 100.0 * $num \/ $den;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219563,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Data::Dumper;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(pos_average);\n\nsub pos_average {\n    my ($s) = @_;\n    my ($num, $den) = (0, 0);\n    my @arr = split(\/, \/, $s);\n    for (my $i=0; $i<$#arr; $i++) {\n        my @a = map {\/.\/g} $arr[$i];\n        for (my $j=$i+1; $j<@arr; $j++) {\n            my @b = map {\/.\/g} $arr[$j];\n            for (my $k=0; $k<@a; $k++) {\n                $num++ if ($a[$k] == $b[$k]);\n            }\n            $den += @a;\n        }\n    }\n    return 100.0 * $num \/ $den;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5a02cf76c9fc0ee71d0000d5":[{"id":219564,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Math::BigRat;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(series);\n\nsub factorial {\n    my ($n, $res) = (shift, 1);\n    return undef unless $n >= 0 and $n == int($n);\n    $res *= $n-- while $n > 1;\n    return $res;\n}\nsub bernoulli {\n    my $n = shift;\n    return \"-1\/2\" if $n == 1;\n    return \"0\"    if $n % 2;\n    my $one = Math::BigRat->new(1);\n    my (@a, $m);\n    for $m ( 0 .. $n ) {\n        push @a, $one \/ ($m + 1);\n        for my $j ( reverse 1 .. $m ) {\n            ( $a[$j-1] -= $a[$j] ) *= $j;\n        }\n    }\n    return $a[0]->numify();\n}\nsub s_iterative {\n    my ($n, $terms) = @_;\n    my ($i, $result);\n    for ($i = 1; $i <= $terms; $i++) {\n        $result += 1 \/ ($i ** $n);\n    }\n    return $result;\n}\nuse constant pi => 3.14159265358979;\nsub series {\n    my $n = int(shift); my $nb = int(shift);\n    if ($n >= 0) {\n        if ($n == 0) { return -0.5; }\n        if ($n == 1) { return undef; }\n        if ($n % 2) {\n            return s_iterative($n, $nb);\n        } else {\n            return .5 * abs(bernoulli($n)) * ((2 * pi) ** $n) \/ factorial($n);\n        }\n    } else {\n        return ((-1) ** (-$n)) * bernoulli(-$n + 1) \/ (-$n + 1);\n    }\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219565,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse feature qw(say);\nuse Math::Trig;\nuse POSIX qw\/floor\/;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(series);\n\nsub factorial {\n    my $n = shift;\n    return $n == 0 ? 1 : $n * factorial($n - 1);\n}\n\nsub bernoulli {\n    my $n = shift;\n    my @xs = (1, -1\/2, -1\/6, 0, -1\/30, 0, 1\/42, 0, -1\/30, 0, 5\/66, 0, -691\/2730, 0, 7\/6, 0, \n              -3617\/510, 0, 43867\/798, 0, -174611\/330, 0, 854513\/138, 0, -236364091\/2730, 0, \n              8553103\/6, 0, -23749461029\/870, 0, 8615841276005\/14322, 0);\n    return $xs[$n];\n}\n\nsub series {\n    my ($k, $nb, $n, $res) = (@_, 1, 0);\n    if ($k > 0 && $k % 2 == 1) {\n        while ($n <= $nb) {\n            $res += 1 \/ $n ** $k;\n            $n++;\n        }\n        return $res;\n    }\n    if ($k >= 2 && $k % 2 == 0) {\n        return 0.5 * abs(bernoulli($k)) * (2 * pi()) ** $k \/ factorial($k);\n    }\n    return (-1) ** abs($k) * bernoulli(1 - $k) \/ (1 - $k);\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5a045fee46d843effa000070":[{"id":219566,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(decomp);\n\nsub decomp {\n    my ($n) = @_;\n    my @m = (0, 0);\n    \n    for my $i (2..$n) {\n        $m[$i] \/\/= 1;\n        if ($m[$i]) {\n            my $j = $i * 2;\n            while ($j <= $n) {\n                $m[$j] \/\/= $j;\n                while ($m[$j] > 1 && !($m[$j]%$i)) {\n                    $m[$j] \/= $i;                    \n                    $m[$i]++;\n                }\n                $m[$j] = 0 if $m[$j] == 1;\n                $j += $i;\n            }            \n        }\n    }\n    join ' * ', map $m[$_] > 1 ? \"$_^$m[$_]\" : $_, grep $m[$_], 0..$n;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219567,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(decomp);\n\nuse Data::Dumper;\n\nsub decomp {\n    my ($n) = @_;\n    my @m = (0, 0);\n    \n    for my $i (2..$n) {\n        $m[$i] \/\/= 1;\n        if ($m[$i]) {\n            my $j = $i * 2;\n            while ($j <= $n) {\n                $m[$j] \/\/= $j;\n                while ($m[$j] > 1 && !($m[$j]%$i)) {\n                    $m[$j] \/= $i;                    \n                    $m[$i]++;\n                }\n                $m[$j] = 0 if $m[$j] == 1;\n                $j += $i;\n            }            \n        }\n    }\n    join ' * ', map $m[$_] > 1 ? \"$_^$m[$_]\" : $_, grep $m[$_], 0..$n;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219568,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(decomp);\n\nsub decomp {\n    my ($n) = @_;\n    my %counts = ();\n    $counts{$_}++ for (map {prime_factors($_)} (2..$n));\n    join \" * \", map {($counts{$_} == 1) ? \"$_\" : \"$_^$counts{$_}\"} sort {$a <=> $b} keys %counts;\n}\n  \nsub prime_factors {\n    my ($n) = @_;\n    my @arr = ();\n    while ($n%2 == 0) {\n       push(@arr, 2);\n       $n \/= 2;\n    }\n    for (my $i=3; $i<=int(sqrt($n)); $i+=2) {\n        while ($n%$i == 0) {\n            push(@arr, $i);\n            $n \/= $i;\n        }\n    }\n    push(@arr, $n) if ($n > 2);\n    return @arr;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219569,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(decomp);\n\nsub decomp {\n    my ($n) = @_;\n    my (%factors, @arr);\n    $factors{$_}++ for (map {prime_factors($_)} (2..$n));\n    push(@arr, ($factors{$_} == 1) ? \"$_\" : \"$_^$factors{$_}\") for (sort {$a <=> $b} keys %factors);\n    return join(\" * \", @arr);\n}\n  \nsub prime_factors {\n    my ($n) = @_;\n    my @arr = ();\n    while ($n%2 == 0) {\n       push(@arr, 2);\n       $n \/= 2;\n    }\n    for (my $i=3; $i<=int(sqrt($n)); $i+=2) {\n        while ($n%$i == 0) {\n            push(@arr, $i);\n            $n \/= $i;\n        }\n    }\n    push(@arr, $n) if ($n > 2);\n    return @arr;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219570,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(decomp);\n\nsub decomp {\n    my $n = shift; my @power = undef;\n    for (my $i = $n; $i > 1; --$i) {\n        my $nb = $i;\n        for (my $dv = 1; ++$dv * $dv <= $nb;) {\n            for (; $nb % $dv == 0; $nb \/= $dv) { \n                ++$power[$dv];\n            }\n        }\n        if ($nb > 1) { ++$power[$nb] }\n    }\n    my $res = \"2\"; my $d = $power[2]; my $lg = @power;\n    if ($d > 1) { $res .= \"^\" . $d }\n    for (my $dv = 2; ++$dv < $lg;) {\n        my $d = $power[$dv];\n        if ($d) {\n            $res .= \" * \" . $dv;\n            if ($d > 1) { $res .= \"^\" . $d }\n        }\n    }\n    return $res;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5a057ec846d843c81a0000ad":[{"id":219571,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(cycle);\n\nsub cycle {\n  my $n = shift;\n  if ($n % 2 == 0 || $n % 5 == 0) {\n    return -1;\n  }\n  my $k = 0; my $r = 1;\n  do {\n    $r = $r * 10 % $n;\n    $k++;\n  } while ($r != 1);\n  $k;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219572,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(cycle);\n\nsub cycle {\n  my $n = shift;\n  if ($n%2 == 0 || $n%5 == 0) {\n    return -1;\n  } \n  my $m = 10 % $n;\n  my $cnt = 1;\n  while ($m != 1) {\n      $m = $m * 10 % $n; \n      $cnt++;\n  }\n  return $cnt;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219573,"user_id":null,"body":"package Solution;\n\nuse v5.30;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(cycle);\n\nsub cycle {\n    my ($den) = @_;\n    \n    return -1 unless $den % 2 && $den % 5;\n    \n    my $nom    = 1;\n    my $digits = 0;\n    do {\n        $nom = $nom * 10 % $den;\n        ++$digits;\n    } while ($nom != 1);\n    \n    return $digits;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219574,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(cycle);\n\nsub cycle {\n  my $n = shift;\n\n  return -1 if $n%2 == 0 || $n%5 == 0;\n\n  my ($l, $s, %h) = (0,1,());\n\n  while(1) {\n  \t$s *= 10;\n    $s %= $n;\n\n    return $l if $h{$s};\n    \n    $h{$s} = 1;\n    $l++;\n  }\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5a420163b6cfd7cde5000077":[{"id":219575,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nba_cup);\n\nsub nba_cup {  \n    my ($str, $to_find) = @_;\n    return '' unless $to_find;   \n    my ($w,$d,$l,$s,$c,$p,$a,$b) = (0,0,0,0,0,0,0,0);\n    foreach (split(\",\n\", $str)) {\n    \n        $_ =~ \/([\\w\\s\\d]+) ([\\.\\d]+) ([\\w\\s\\d]+) ([\\.\\d]+)\/;\n\n        if    ($1 eq $to_find) { $a = $2; $b = $4; }\n        elsif ($3 eq $to_find) { $a = $4; $b = $2; }\n        else                   { next;             }\n\n        if ($a != int($a) || $b != int($b)) {\n            return \"Error(float number):$_\";\n        }\n\n        $s += $a; $c += $b;\n        if    ($a  > $b) { $w += 1;$p += 3; }\n        elsif ($a == $b) { $d += 1;$p += 1; }\n        else             { $l += 1;         }\n    }\n\n    return \"$to_find:This team didn't play!\" if $w+$d+$l == 0;\n    return \"$to_find:W=$w;D=$d;L=$l;Scored=$s;Conceded=$c;Points=$p\";\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219576,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nba_cup);\n\nsub nba_cup {\n    my ($result_sheet, $to_find) = @_;\n    return \"\" if ($to_find eq \"\");\n    if ($result_sheet !~ \/$to_find \/) {\n        return \"$to_find:This team didn't play!\";\n    }\n    my ($nw, $nd, $nl, $pf, $pa) = (0, 0, 0, 0, 0);\n    my ($x, $y);\n    for my $s (split(\/,\n\/, $result_sheet)) {\n        next if ($s !~ \/$to_find\\b\/);\n        return \"Error(float number):$s\" if ($s =~ \/\\d+\\.\\d+\/);\n        $s =~ \/(.*)\\s+(\\d+)\\s+(.*)\\s+(\\d+)\/;\n        my ($t1, $s1, $t2, $s2) = ($1, $2, $3, $4);\n        if ($t1 eq $to_find) {\n           ($x, $y) = ($s1, $s2);\n        } else {\n            ($x, $y) = ($s2, $s1);\n        }\n        $pf += $x; $pa += $y;\n        if ($x > $y) {$nw++;} elsif ($x < $y) {$nl++;} else {$nd++;}\n    }\n    \"$to_find:W=$nw;D=$nd;L=$nl;Scored=$pf;Conceded=$pa;Points=\".(3*$nw+$nd);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219577,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(nba_cup);\n\nsub nba_cup {\n    my ($s, $to_find) = @_;\n    if ($to_find eq '') { return ''; }\n    my ($name1, $name2, $p1, $p2, $sa, $sb, $res) = (\"\", \"\", 0, 0, 0, 0, \"\");\n    my ($w, $l, $d, $pw, $pc) = (0, 0, 0, 0, 0);\n    my $regexp = qr\/(?<t1>.+)\\s+(?<s1>\\d+\\.?\\d*)\\s+(?<t2>.+)\\s+(?<s2>\\d+\\.?\\d*)\/;\n    my @blocks = split \/^\/m, $s;\n    for (@blocks) {\n        if ($_ =~ $regexp) {\n            $name1 = $+{t1}; $p1 = $+{s1}; $name2 = $+{t2}; $p2 = $+{s2};\n            if ( (index($p1, \".\") != -1) || (index($p2, \".\") != -1) ) {\n                return 'Error(float number):' . substr($_, 0, -2);\n            }\n        }\n        if ( ($name1 ne $to_find) && ($name2 ne $to_find) ) { next; }\n        if ($name1 eq $to_find) { $sa = $p1; $sb = $p2; }\n        else { $sa = $p2; $sb = $p1; }\n        $pw += $sa; $pc += $sb;\n        if ($sa > $sb) { $w += 1; }\n        if ($sa < $sb) { $l += 1; }\n        if ($sa == $sb) { $d += 1; }  \n    }\n    if ($w + $l + $d == 0) { return $to_find . ':This team didn\\'t play!'; }\n    $res = $to_find . ':W=' . $w . ';D=' . $d . ';L=' . $l;\n    $res .= ';Scored=' . $pw . ';Conceded=' . $pc . ';Points=' . (3 * $w + $d);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5a48948e145c46820b00002f":[{"id":219578,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(kprime_step);\n\nsub count_prime_factors {\n    use integer;\n    my ($n, $i, $ans) = (shift, 2, 0);\n    while ($i <= $n \/ $i) {\n        while ($n % $i == 0) {\n              $ans++;\n              $n = $n \/ $i;\n        }\n        $i++;\n    }\n    if ($n > 1) {\n        $ans++;\n    }\n    return $ans;\n}\n\n# return an array_ref of array_refs\nsub kprime_step {  \n    my ($k, $step, $start, $nd, @fs) = (@_, ());\n    my ($k0, $k1, $n) = (0, 0, $start);\n    while ($n <= $nd - $step) {\n        $k0 = count_prime_factors($n);\n        $k1 = count_prime_factors($n + $step);\n        if ($k0 == $k && $k1 == $k) {\n            my @t = ();\n            push @t, $n;\n            push @t, $n + $step;\n            push @fs, \\@t;\n        }\n        $n++;\n    }\n    return \\@fs;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219579,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(kprime_step);\n\nsub count_prime_factors {\n  my($n, $p, $cnt) = (shift, 3, 0);\n  return 0 if $n <= 1;\n  while (!($n & 1)) { $n >>= 1; $cnt++; }\n  while ($n > 1 && $p * $p <= $n) {\n    while ( ($n % $p) == 0) {\n      $n \/= $p;\n      $cnt++;\n    }\n    $p += 2;\n  }\n  $cnt++ if $n > 1;\n  return $cnt;\n}\nsub kprime_step {\n    my ($k, $step, $start, $nd) = @_;\n    my @res = ();\n    my $i = $start;\n    while ($i <= $nd - $step) {\n        if ( (count_prime_factors($i) == $k) && (count_prime_factors($i + $step) == $k) ) {\n            push(@res, [$i, $i + $step]);\n        }\n        $i++;\n    }\n    return \\@res;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219580,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(kprime_step);\n\n# return an array_ref of array_refs\nsub kprime_step {\n    my ($k, $step, $start, $end) = @_;\n    my ($kprimes, $ret) = ([], []);\n    for my $i ($start..$end) {\n        my @fs = factorize($i);\n        push(@$kprimes, $i) if (@fs == $k);\n    }\n    for (my $i=0; $i<@$kprimes; $i++) {\n        for (my $j=($i+1); $j<@$kprimes; $j++) {\n            if ($kprimes->[$j] - $kprimes->[$i] == $step) {\n                push(@$ret, [$kprimes->[$i], $kprimes->[$j]]);\n            }\n        }\n    }\n    return $ret;\n}\n\nsub factorize {\n    my ($n) = @_;\n    my @ret = ();\n    while ($n%2 == 0) {\n        push(@ret, 2);\n        $n \/= 2;\n    }\n    for (my $i=3; $i<=int(sqrt($n)); $i+=2) {\n        while ($n%$i == 0) {\n            push(@ret, $i);\n            $n \/= $i;\n        }\n    }\n    push(@ret, $n) if ($n > 2);\n    @ret;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5a4b16435f08299c7000274f":[{"id":219581,"user_id":null,"body":"package Solution;\nuse List::Util;\n\nsub sum_square_even_root_odd {\n    my $array_ref = shift;\n    my @new_list = map { $_ % 2 ? sqrt $_ : $_ ** 2 } @{$array_ref};\n    \n    my $sum = List::Util::reduce { $a + $b } @new_list;\n    my $rounded = sprintf('%.2f', $sum);\n    \n    return $rounded * 1;\n};\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219582,"user_id":null,"body":"package Solution;\n\nuse List::Util qw(sum0);\n\nsub sum_square_even_root_odd {\n    my $sum = sum0 map {$_ % 2 ? sqrt : ($_ * $_)} (shift)->@*;\n\n    return 0+ sprintf('%.2f', $sum);\n};\n\n1;\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219583,"user_id":492,"body":"package Solution;\n\nsub sum_square_even_root_odd {\n    my ($a, $sum) = (shift, 0);\n    for (@$a) {\n        if ($_ % 2 == 0) { $sum += $_ * $_; } else { $sum += sqrt($_); }\n    }\n    int(($sum * 100.0) + 0.5) \/ 100.0;\n};1;\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219584,"user_id":null,"body":"package Solution;\nuse List::Util qw(sum);\n\nsub sum_square_even_root_odd{\n    my @nums = @{$_[0]};\n    my @proc_nums = map { $_ % 2 == 0 ? $_ * $_ : sqrt($_) } @nums;\n    my $ret = sprintf(\"%.2f\", sum(@proc_nums));\n    $ret =~ s\/\\.?0+$\/\/;\n    return $ret;\n};\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219585,"user_id":null,"body":"package Solution;\n\nuse Math::Complex qw(sqrt);\n\nsub sum_square_even_root_odd {\n    my $sum = 0;\n    my $arr = $_[0];\n    foreach my $val (@$arr) {\n        if ($val%2 == 0) {\n            $sum += ($val*$val);\n        }\n        else {\n            $sum += sqrt($val);\n        }\n    }\n    my $ret_str = sprintf(\"%.2f\", $sum);\n    $ret_str =~ s\/(\\.00$)|(0$)\/\/;\n    $ret_str;\n};\n\n1;\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219586,"user_id":null,"body":"package Solution;\nuse strict; use warnings;\nuse List::Util \"sum\";\n\nsub sum_square_even_root_odd{\n    (sprintf \"%.2f\", sum map { ($_ & 1) ? sqrt($_) : $_ ** 2 } @{(shift)}) + 0;\n};\n\n1;\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219587,"user_id":null,"body":"package Solution;\n\nsub sum_square_even_root_odd{\n    my $sum;\n    for (@{$_[0]}){ $sum += $_ % 2 ? $_ ** 0.5 : $_ * $_ }\n    1 * sprintf \"%.2f\", $sum;\n}\n\n1;\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219588,"user_id":null,"body":"package Solution;\n\nsub sum_square_even_root_odd{\n  my ($nums) = @_;\n  my @nums = @$nums;\n  @nums = map {$_ % 2 ? $_ ** 0.5 : $_ ** 2} @nums;\n  my $sum;\n  for (@nums){ $sum += $_; }\n  (sprintf \"%.2f\", $sum) * 1\n};\n\n1;\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219589,"user_id":null,"body":"package Solution;\n\nsub sum_square_even_root_odd{\n  my ($nums) = @_;\n  my @nums = @{$nums};\n  my $sum;\n  for (@nums){\n    if ($_ % 2){\n      $sum += $_ ** 0.5;\n    } else {\n      $sum += $_ ** 2;\n    }\n  }\n  1 * sprintf \"%.2f\", $sum;\n}\n\n\n1;\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219590,"user_id":null,"body":"package Solution;\n\nsub sum_square_even_root_odd{\n    my ($nums) = @_;\n    my @new_list;\n    foreach (@$nums){\n        if ($_ % 2) { push @new_list, ($_ ** 0.5) } \n        else { push @new_list, ($_ * $_) }\n    }\n    my $sum;\n    foreach (@new_list){ $sum += $_ }\n    my $round_sum = sprintf \"%.2f\", $sum;\n    $round_sum * 100 \/ 100;\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5aba780a6a176b029800041c":[{"id":219591,"user_id":53,"body":"package Solution;\n\nsub max_multiple {\n    my ($d, $b) = @_;\n    return $b - $b % $d;\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219592,"user_id":null,"body":"package Solution;\n\nsub max_multiple {\n    my ($d, $b) = @_;\n    return $d * int($b \/ $d);\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219593,"user_id":645,"body":"package Solution;\n\nsub max_multiple {\n    my ($d, $b) = @_;\n    $b - $b % $d\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219594,"user_id":null,"body":"package Solution;\n\nsub max_multiple {\n    my ($d, $b) = @_;\n    $d*int($b\/$d);\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219595,"user_id":null,"body":"package Solution;\n\nsub max_multiple {\n    my ($d, $b) = @_;\n    for(my $temp = $b; $temp > 0; $temp--){\n        if($temp % $d == 0){\n            return $temp;\n        }\n    }\n    # your code here\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219596,"user_id":null,"body":"package Solution;\n\nsub max_multiple {\n    my ($d, $b) = @_;\n    my $r = $b - ($b % $d)\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219597,"user_id":null,"body":"package Solution;\n\nsub max_multiple {\n    my ($d, $b) = @_;\n    if($b % $d == 0){\n        return $b\n    }\n    return max_multiple($d, $b - 1)\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219598,"user_id":null,"body":"package Solution;\nsub max_multiple{$_[0]*int$_[1]\/$_[0]}1","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219599,"user_id":null,"body":"package Solution;\n\nsub max_multiple {\n    my ($d, $b) = @_;     \n    while ($b > 0) {\n    if ($b % $d == 0) {\n    return $b;\n    };\n    $b--\n    }\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219600,"user_id":null,"body":"package Solution;\n\nsub max_multiple {\n    my ($d, $b) = @_;\n    if ($b % $d == 0){\n         return $b;\n    }else{\n\twhile ($b != 0){\n\t    $b -= 1;\n\t    if ($b % $d == 0){\n         \treturn $b;\n\t        }\n    \t}\n    }  \n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5b06c990908b7eea73000069":[{"id":219601,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Math::Complex;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(f);\n\nsub f {\n  my ($z, $eps) = @_;\n  my $ans = log($eps) \/ log(abs($z));\n  return -1 if $ans < 0;\n  return int($ans);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219602,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Math::Complex;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(f);\n\nsub f {\n  my ($z, $eps) = @_;\n  if (abs($z) >= 1.0) { return -1; }\n  return int(log($eps) \/ log(abs($z)));\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219603,"user_id":168,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Math::Complex;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(f);\n\nsub f {\n  my ($z, $eps) = @_;\n  my $a = abs($z);\n  if ($a >= 1) {\n    return -1;\n  } else {\n    return log($eps) \/ log($a)\n  }\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5b0c0ec907756ffcff00006e":[{"id":219604,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(quadratic);\n\nsub quadratic {\n    -$_[2] \/ $_[1];\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219605,"user_id":527,"body":"package Solution;\n\nuse Exporter qw(import);\nour @EXPORT_OK = qw(quadratic);\n\nsub quadratic {\n    -!!shift() \/ (shift() \/ shift())\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219606,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(quadratic);\n\nsub quadratic {\n    my ($a, $b, $c) = @_;\n    -$c \/ $b;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5b1cd19fcd206af728000056":[{"id":219607,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(solve);\n\nsub solve {\n    my $m = shift;\n    return (2 * $m + 1 - sqrt(4 * $m + 1)) \/ (2 * $m);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219608,"user_id":527,"body":"package Solution;\n\nuse Exporter qw(import);\nour @EXPORT_OK = qw(solve);\n\nsub solve {\n    1 - (sqrt($_[0] + 0.25) - 0.5) \/ $_[0]\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219609,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(solve);\n\nsub solve {\n    my $m = shift;\n    my $s = sqrt(4 * $m + 1);\n    return (2 * $m + 1 - $s) \/ (2 * $m);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5b40b666dfb4291ad9000049":[{"id":219610,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Math::Trig;\n#use Math::AnyNum (hypot);\nuse Exporter qw(import);\nour @EXPORT_OK = qw(solve);\n\nsub hypot {\n    my ($x, $y) = @_;\n    return sqrt($x * $x + $y * $y);\n}\n\nsub round {\n    my $n = shift;\n    return int($n + 0.5);\n}\n\nsub floor {\n    my $n = shift;\n    return int($n);\n}\n\nsub solve {\n    my ($a, $b, $c, $alpha, $beta, $gamma) = @_;\n    my $u = $alpha * pi \/ 180.0;\n    my $v = $beta * pi \/ 180.0;\n    my $w = $gamma * pi \/ 180.0;\n    my $x = $a * cos($u) - $b * sin($v) - $c * cos($w);\n    my $y = $a * sin($u) + $b * cos($v) - $c * sin($w);\n    my $t = atan2($y, $x) * 180.0 \/ pi;\n    my $r = hypot($x, $y);\n    [round($r), floor($t), floor($t * 60.0) % 60, floor($t * 3600.0) % 60]\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219611,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Math::Trig;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(solve);\n\n# return: array_ref\nsub solve {\n    my ($a, $b, $c, $alpha, $beta, $gamma) = @_;\n    my ($al, $be, $ga) = ($alpha * pi \/ 180, $beta * pi \/ 180, $gamma * pi \/ 180); \n    my $x = $a * cos($al) - $b * sin($be) - $c * cos($ga);\n    my $y = $a * sin($al) + $b * cos($be) - $c * sin($ga);\n    my $r = sqrt($x * $x + $y * $y);\n    my $theta = atan2($y, $x) * 180 * 3600 \/ pi;\n    my $d = int($theta \/ 3600);\n    my $mm = $theta % 3600;\n    my $m = int($mm \/ 60);\n    my $s = int($mm % 60);\n    my $u = sprintf(\"%.0f\", $r);\n    [$u, $d, $m, $s];\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5cc70653658d6f002ab170b5":[{"id":219612,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sqr_modulus);\n\nsub maxnum\n{\n  my $number = shift;\n  $number = \"\" . $number;\n  my @values = ();\n  my $i = 0;\n  for($i = 0; $i < length($number); $i++) {\n    $values[$i] = substr($number, $i, 1);\n  }\n  @values = sort(@values);\n  my $output = \"\";\n  for($i = 0; $i < length($number); $i++) {\n    $output .= $values[length($number) - 1 - $i];\n  }\n  return $output;\n}\n\n# parameter: array_ref; return an array_ref of three numbers with 0 as false, 1 as true\n# given array can contain strings but must not contain float numbers\nsub sqr_modulus {\n  my $mode = shift;\n  my @params = @$mode;\n  $mode = shift(@params);\n  my $i = 0;\n  my $value = 0;\n  \n  if ($mode eq 'cart') {\n    for($i = 0; $i < $#params; $i += 2) {\n      if (length(int($params[$i])) == length($params[$i]) && \n          length(int($params[$i+1])) == length($params[$i+1])) {\n        $value += ($params[$i] * $params[$i]) + ($params[$i+1] * $params[$i+1]);\n      } else {\n        return [0, -1, 1];\n      }\n    }\n  } elsif ($mode eq 'polar') {\n    for($i = 0; $i < $#params; $i += 2) {\n      if (length(int($params[$i])) == length($params[$i]) &&\n          length(int($params[$i+1])) == length($params[$i+1])) {\n        $value += ($params[$i] * $params[$i]);\n      } else {\n        return [0, -1, 1];\n      }\n    }\n  } else {\n    return [0, -1, 1];\n  }\n\n  my $arrange = maxnum($value);\n  \n  return [1, $value, $arrange];\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219613,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sqr_modulus);\n\n# parameter: array_ref; return an array_ref of three numbers with 0 as false, 1 as true\n# given array can contain strings but must not contain float numbers\nsub sqr_modulus {\n    my ($arr) = @_;\n    return [0, -1, 1] unless (grep {$_ eq $arr->[0]} (\"cart\", \"polar\"));\n    my $s = 0;\n    for (my $i=1; $i<@{$arr}; $i+=2) {\n        return [0, -1, 1] if ($arr->[$i] =~ \/\\.\/ or $arr->[$i+1] =~ \/\\.\/);\n        $s += ($arr->[0] eq \"polar\") ? ($arr->[$i])**2 : ($arr->[$i])**2 + ($arr->[$i+1])**2;         \n    }\n    [1, $s, join(\"\", sort {$b <=> $a} map {\/.\/g} $s)];\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219614,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sqr_modulus);\n\n# parameter: array_ref; return an array_ref of three numbers with 0 as false, 1 as true\n# given array can contain strings but must not contain float numbers\nsub sqr_modulus {\n    my ($aref) = @_;\n    return [0, -1, 1] unless (grep {$_ eq $aref->[0]} (\"cart\", \"polar\"));\n    my ($s, $t) = (0, $aref->[0]);\n    for (my $i=1; $i<@{$aref}; $i+=2) {\n        return [0, -1, 1] if ($aref->[$i] =~ \/\\.\/ or $aref->[$i+1] =~ \/\\.\/);\n        if ($t eq \"polar\") {\n            $s += ($aref->[$i])**2;\n        } else {        \n            $s += ($aref->[$i])**2 + ($aref->[$i+1])**2;\n        }        \n    }\n    return [1, $s, join(\"\", sort {$b <=> $a} map {\/.\/g} $s)];\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219615,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Data::Dumper;\nuse List::Util 'sum';\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sqr_modulus);\n\n# parameter: array_ref; return an array_ref of three numbers with 0 as false, 1 as true\n# given array can contain strings but must not contain float numbers\nsub sqr_modulus {\n    my ($aref) = @_;\n    return [0, -1, 1] unless (grep {$_ eq $aref->[0]} (\"cart\", \"polar\"));\n    my ($s, $t) = (0, $aref->[0]);\n    for (my $i=1; $i<@{$aref}; $i+=2) {\n        if ($t eq \"polar\") {\n            return [0, -1, 1] if ($aref->[$i+1] =~ \/\\.\/);\n            $s += ($aref->[$i])**2;\n        } else {\n            return [0, -1, 1] if ($aref->[$i] =~ \/\\.\/ or $aref->[$i+1] =~ \/\\.\/);\n            $s += ($aref->[$i])**2 + ($aref->[$i+1])**2;\n        }        \n    }\n    return [1, $s, join(\"\", sort {$b <=> $a} map {\/.\/g} $s)];\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219616,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(sqr_modulus);\n\n# parameter: array_ref; return an array_ref of three numbers with 0 as false, 1 as true\n# given array can contain strings but must not contain float numbers\nsub sqr_modulus {\n    my $arr = shift;\n    my $lg = @{$arr};\n    if (($arr->[0] ne \"polar\") && ($arr->[0] ne \"cart\")) { return [0, -1, 1]; }\n    for (my $i = 1; $i < $lg; $i++) {\n        if ( ($arr->[$i] - int($arr->[$i]) ) != 0) { return [0, -1, 1]; }\n    }\n    my $total = 0;\n    if ($arr->[0] eq \"polar\") {\n        for (my $i = 1; $i < $lg - 1; $i += 2) {\n            $total += $arr->[$i] * $arr->[$i];\n        }\n    } else {\n        for (my $i = 1; $i < $lg - 1; $i += 2) {\n            $total += $arr->[$i] * $arr->[$i] + $arr->[$i + 1] * $arr->[$i + 1];\n        }\n    }\n    my @char = split \/\/, $total;\n    my @r = sort {$b <=> $a} @char;\n    return [1, $total, int(join \"\", @r)];\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5ce399e0047a45001c853c2b":[{"id":219617,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse List::Util qw\/sum\/;\n\nour @EXPORT_OK = qw(parts_sums);\n\nsub parts_sums {\n    my @list = @_;\n    my @res = (); my $sum = 0;\n    if (@list) {\n        @res = (sum(@list));\n        $sum = sum(@list);\n    } else {\n        @res = (0);\n        $sum = 0;\n    }\n    \n    for(my $i = 0; $i < @list; $i ++) {\n        $sum -= $list[$i];\n        push @res, $sum;\n    }\n    return(@res);\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219618,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw(parts_sums);\n\nsub parts_sums {\n    my @ls = @_;\n    my $lg = @ls;\n    my @res = (0) x ($lg + 1);\n    for (my $i = $lg - 1; $i >= 0; $i--) {\n        $res[$i] = $res[$i + 1] + $ls[$i]\n  }\n  return @res;\n}","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219619,"user_id":null,"body":"package Solution;\n\nuse v5.30;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(parts_sums);\n\nuse List::Util qw(sum0);\n\nsub parts_sums {\n    my $sum = sum0 @_;\n    return map {$sum -= $_} 0, @_;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219620,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw(parts_sums);\n\nsub parts_sums {\n    my @ret_arr = ();\n    push @ret_arr, 0;\n    \n    while (defined(my $val = pop)) {\n        $val += $ret_arr[0];\n        unshift @ret_arr, $val;\n    }\n    \n    return @ret_arr;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219621,"user_id":826,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw(parts_sums);\n\nsub parts_sums {\n# get the highest sum, add up the whole input array\n    my $total_sum = 0;\n    for my $i (@_) {\n        $total_sum += $i;\n        }\n    my @partial_sums = ($total_sum);\n    my $subtracted_sum = 0;\n# perform actual calculation\n    for my $i (0..$#_) {\n        $subtracted_sum += $_[$i];\n        push(@partial_sums, $total_sum - $subtracted_sum);\n        }    \n# return the resulting array (no keyword return needed!)\n@partial_sums;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219622,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw(parts_sums);\n\nsub parts_sums {\n    my (@list) = @_;\n    my @totals= (0);\n    my $length = scalar @list -1;\n\n    for (my $index = $length; $index >= 0; $index--) {\n        push(@totals, $list[$index] + $totals[ $length - $index]);\n    }\n    return reverse @totals;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219623,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw(parts_sums);\n\nsub parts_sums{\n  my (@A) = @_;\n  use List::Util qw(reductions);\n  my @partial_sums = reverse reductions { $a + $b } 0, reverse @A;\n\n  return @partial_sums;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219624,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw(parts_sums);\n\nsub parts_sums {\n    \n    my $sum;\n    my @res;\n    \n    for (my $i=scalar(@_); $i>=0; $i--) {\n        $sum += $_[$i];\n        unshift @res, $sum;\n    }\n    \n    return @res;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219625,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw(parts_sums);\n\nsub parts_sums {\n    my (@ls) = @_;\n\n    my $total = 0;\n    map { $total += $_ } @ls;\n    my @sums = ($total);\n    map { push @sums, $total -= $_ } @ls;\n\n    return @sums;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219626,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw(parts_sums);\n\nsub parts_sums {\n    my @res;\n    my $sum;\n    foreach (@_){\n        $sum += $_;\n    }\n    @res = ($sum);\n    while (@_){\n        $sum -= shift @_;\n        push @res, $sum;\n    }\n    \"@res\" ? @res : 0;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5ce9c1000bab0b001134f5af":[{"id":219627,"user_id":null,"body":"package Solution;\nuse strict;\nuse warnings;\nuse POSIX;\n\nsub quarter_of {\n    my ($month) = @_;\n    return ceil($month\/3); # Your code here\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219628,"user_id":404,"body":"package Solution;\nuse strict;\nuse warnings;\n\nsub quarter_of {\n    POSIX::ceil(@_[0]\/3);\n}\n\n'ABS';","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219629,"user_id":404,"body":"package Solution;\nuse strict;\nuse warnings;\n\nsub quarter_of {\n    my $m = $_[0];\n    if ($m < 4) {\n        return 1;\n    }\n    if($m < 7) {\n        return 2;\n    }\n    if($m < 10) {\n        return 3;\n    }\n    else {\n        return 4;\n   }\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219630,"user_id":1175,"body":"package Solution;\nuse strict;\nuse warnings;\n\nsub quarter_of {\n    my ($month) = @_;\n    return POSIX::ceil($month \/ 3); # Your code here\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219631,"user_id":null,"body":"package Solution;\nuse strict;\nuse warnings;\n\nsub quarter_of {\n    return int(($_[0]-1) \/ 3) + 1; # Your code here\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219632,"user_id":null,"body":"package Solution;\nuse strict;\nuse warnings;\n\nsub quarter_of {\n    return int($_[0] \/ 3 + 0.99);\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219633,"user_id":null,"body":"package Solution;\nuse strict;\nuse warnings;\nuse feature \"switch\";\n\nsub quarter_of {\n    my ($month) = @_;\n    given ($month) {\n        when ([1..3]) { return 1; }\n        when ([4..6]) { return 2; }\n        when ([7..9]) { return 3; }\n    }\n    return 4;\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219634,"user_id":null,"body":"package Solution;\nuse strict;\nuse warnings;\n\n# =~ is the operator testing a regular expression match\n\nsub quarter_of {\n    my ($month) = @_;\n    \n    if ($month =~ \/^[123]$\/) {\n        return 1;\n    }\n        if ($month =~ \/^[456]$\/) {\n        return 2;\n    }\n        if ($month =~ \/^[789]$\/) {\n        return 3;\n    }\n        if ($month =~ \/10|11|12\/) {\n        return 4;\n    }\n    \n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219635,"user_id":null,"body":"package Solution;\nuse strict;\nuse warnings;\n\n## Smart Matching using ~~ (note this is experimental)\n\nsub quarter_of {\n    my ($month) = @_;\n    my $first = [1,2,3];\n    my $second = [4,5,6];\n    my $third = [7,8,9];\n    \n    if($month ~~ $first){\n        return 1;\n    }elsif($month ~~ $second){\n        return 2;\n    }elsif($month ~~ $third){\n        return 3;\n    }elsif($month ~~ [10,11,12]){\n        return 4;\n    }\n    return 0; \n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219636,"user_id":null,"body":"package Solution;\nuse strict;\nuse warnings;\n\nsub quarter_of {\n    my ($month) = @_;\n    my @first = (1,2,3);\n    my @second = (4,5,6);\n    my @third = (7,8,9);\n    \n    if(grep { $_ == $month; } @first)\n    {\n      return 1;\n    } elsif(grep { $_ == $month; } @second) \n    {\n      return 2;\n    } elsif(grep { $_ == $month; } @third) \n    {\n      return 3;\n    } elsif(grep { $_ == $month; } (10,11,12)) \n    {\n      return 4;\n    }\n}\n\n1;","lang_id":37,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5d68d05e7a60ba002b0053f6":[{"id":219637,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse bignum;\nuse POSIX qw\/round\/;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(bonus);\n\nsub bonus {\n    my $arrRef = shift;\n    my @arr = @$arrRef;\n    my $s = shift;\n    \n    my $t = &max(\\@arr);\n    my $x = 0;\n    for (@arr) {\n        $x = $x + $t \/ $_;\n    }\n    $x = $s \/ $x;\n    return map { round($x * $t \/ $_) } @arr;\n}\n\nsub max {\n    my $aref = $_[0];\n    my $k = $aref->[0];\n    for (@$aref) {\n        $k = $_ if ($k < $_);\n    }\n    return $k;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219638,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(bonus);\n\n# parameters: array_ref, integer; return array\nsub bonus {\n    my ($arr, $s) = @_;\n    my $t = 0;\n    foreach my $e (@$arr) {\n        $t += 1 \/ $e;\n    }\n    my @res = ();\n    foreach my $e (@$arr) {\n        push(@res, int($s \/ ($e * $t) + 0.5));\n    }    \n    return @res;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219639,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(bonus);\n\n# parameters: array_ref, integer; return array\nsub round\n{\n  my $x=$_[0];\n  if($x<int($x)+0.5){return int($x);}\n  else{return int($x)+1;}\n}\nsub bonus {\n    my ($arrref,$bon)=@_;\n    my ($mul,$sum,$i)=(1,0,0);\n    my @ret=();\n    foreach (@$arrref)\n    {\n    $sum+=1\/$_;\n    }\n    while($i<scalar @$arrref)\n    {\n       push @ret,round(($bon\/$arrref->[$i])\/$sum);\n       $i+=1;\n    }\n    return @ret;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219640,"user_id":2582,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(bonus);\n\nuse List::Util qw(sum);\n\n# parameters: array_ref, integer; return array\nsub bonus {\n    my ($daysOffListRef, $totalBonus) = @_;\n    my @adjustedList = map { 1\/$_ } @$daysOffListRef;\n    my $sumOfList = sum(@adjustedList);\n    my @returnList = map { $_ \/ $sumOfList * $totalBonus } @adjustedList;\n    $_ = sprintf('%.0f', $_)  for @returnList;  # round the result\n    return @returnList;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219641,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\n\nuse List::Util qw\/sum0 reduce\/;\nuse POSIX qw\/lround\/;\n\nuse Exporter qw(import);\nour @EXPORT_OK = qw(bonus);\n\nsub bonus {\n    my ($absences, $total_bonus) = @_;\n\n    my @bonuses = ();\n    for my $days (@$absences) {\n        my $scale = reduce { $a + $days\/$b } 0, @$absences;\n        push @bonuses, $scale;\n    }\n    \n    return map { lround($total_bonus\/$_) } @bonuses;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219642,"user_id":50,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(bonus);\n\n# parameters: array_ref, integer; return array\nsub bonus {\n    my $e = $_[0];\n    my $s = $_[1];\n    my $rate=0;\n    my @o=();\n    foreach my $n (@$e) {\n        $rate += 1 \/ $n;\n    }\n    foreach my $n (@$e) {\n        push(@o, int( $s \/ ($n * $rate) + 0.5)) ;\n    }\n    return @o;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5d95b7644a336600271f52ba":[{"id":219643,"user_id":76,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse Math::Trig;\nour @EXPORT_OK = qw(crusoe);\n\nsub crusoe {\n    my ($n, $d, $ang, $distmult, $angmult) = @_;\n    $ang = deg2rad($ang);\n    my ($x, $y) = (0, 0);\n    foreach my $i (1 .. $n) {\n        $x += $d * cos($ang);\n        $y += $d * sin($ang);\n        $d *= $distmult;\n        $ang *= $angmult;\n    }\n    ($x, $y);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219644,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Math::Trig;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(crusoe);\n\nsub crusoe {\n    my ($n, $d, $ang, $distmult, $angmult) = @_;\n    my ($x, $y) = (0,0);\n    for (1..$n) {\n        $x += $d * cos deg2rad($ang);\n        $y += $d * sin deg2rad($ang);\n        $d *= $distmult;\n        $ang *= $angmult;\n     }\n    return ($x,$y);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219645,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Math::Trig;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(crusoe);\n\nsub crusoe {\n    my ($n, $d, $ang, $distmult, $angmult, @exp) = @_;  # Receiving the function arguments \n    my ($x, $y) = (0.0, 0.0);                           # intial coordinates of the Robinsone Crusoe \n    my $a = $ang \/ 180 * pi;                            # initial angle in radians\n    \n    for (my $i = 0; $i < $n; $i++) {                    # on to the exploration\n        $x += $d * cos($a);                             # doing the \"step\"\n        $y += $d * sin($a);\n        \n        $d *= $distmult;                                # counting the distance\n        $a *= $angmult;                                 # and angle for the next \"step\"\n    }\n    \n    return ($x, $y);                                    # returning the results\n    \n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219646,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Math::Trig;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(crusoe);\n\nsub crusoe {\n    my ($n, $d, $t, $dm, $am, $x, $y, $m) = (@_, 0.0, 0.0, 1);\n    my $k = ($t * pi \/ 180.0);\n    while ($m <= $n) {\n        $x += $d * cos($k);\n        $y += $d * sin($k);\n        $d *= $dm;\n        $k *= $am;\n        $m++;\n    }\n    ($x, $y)\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219647,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nuse Math::Trig;\nour @EXPORT_OK = qw(crusoe);\n\nsub crusoe {\nmy $n    = shift;\nmy $d    = shift;\nmy $ang    = shift;\nmy $distmult    = shift;\nmy $angmult    = shift;\nmy $PI = pi();\nmy $angTmp = $ang;\nmy $dTmp = $d;\nmy $xTmp;\nmy $yTmp;\n\nfor(my $i = 0; $i<$n ; $i++){\n    $xTmp += cos($angTmp*$PI\/180)*$dTmp;\n    $yTmp += sin($angTmp*$PI\/180)*$dTmp;\n    $dTmp = $dTmp * $distmult; \n    $angTmp = $angTmp * $angmult;\n    print \"$i : $xTmp , $yTmp\n\"\n}\n\nreturn $xTmp,$yTmp;\n\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219648,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Math::Trig;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(crusoe);\n\nsub crusoe {\n    my ($n, $d, $ang, $distmult, $angmult) = @_;\n    my ($x, $y, $a, $i) = (0.0, 0.0, $ang * pi \/ 180.0, 1);\n    while ($i <= $n) {\n        $x += $d * cos($a);\n        $y += $d * sin($a);\n        $d *= $distmult;\n        $a *= $angmult;\n        ++$i;\n    }\n    ($x, $y);\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5d98b6b38b0f6c001a461198":[{"id":219649,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse bigint;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(code decode);\n\nsub code {\n    join('', map { $_ = sprintf('%b', $_); $_ = ('0' x (length()-1)).\"1$_\";  } split('', shift));\n}\nsub decode {\n    my $n = shift;\n    my @s = split('', $n);\n    my $i = 0;\n    my $z = 0;\n    my $r = '';\n    while ($i < @s) {\n       if ($s[$i++] == 1) {\n          my $t = substr($n, $i, $z+1);\n          $r .= oct('0b'.$t);\n          $z = 0;\n          $i += length($t);\n       }\n       else {\n          $z++\n       }\n    }\n    return $r;\n}\n\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219650,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(code decode);\n\nsub code {\n    my $s = shift;\n    my %dict = ('0' => '10', '1' => '11', '2' => '0110', '3' => '0111', '4' => '001100', '5' => '001101', '6' => '001110', '7' => '001111', '8' => '00011000', '9' => '00011001');\n    my $res = '';\n    for (my $i = 0; $i < length($s); $i++) {\n        my $u = substr($s, $i, 1);\n        my $v = $dict{$u};\n        $res .= $v;\n    }\n    return $res;\n}\n\nsub decode {\n    my $s = shift;\n    my $ch = '1'; my $res = \"\"; my $l = -1;\n    while ($s) {\n        my $l = index($s, $ch) + 1;\n        my $ss = substr($s, $l, $l);\n        my $n = oct(\"0b\". $ss);\n        $res .= $n;\n        $s = substr($s, $l * 2);\n    }\n    return $res;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5da1df6d8b0f6c0026e6d58d":[{"id":219651,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse POSIX qw\/floor\/;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(c);\n\nsub c {\n    my $k = shift;\n    my $sq = floor(sqrt($k));\n    if ($sq * $sq != $k) { return 0; }\n    my $i = 2;\n    my $num = $k * $sq;\n    my $ans = 1;\n    while ($num > 1) {\n        my $cnt = 0;\n        while ($num % $i == 0) {\n            $num = floor($num \/ $i);\n            $cnt++;\n        }\n        $ans *= ($cnt + 1);\n        $i++;\n    }\n    return $ans;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219652,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(c);\n\nsub c {\n    my $k = shift;\n    my $root = int(sqrt($k));\n    if ($root * $root != $k) {\n        return 0;\n    }\n    my ($i, $num, $result) = (2, $k * $root, 1);\n    use integer;\n    while ($num > 1) {\n        my $div_num_nb = 0;\n        while ($num % $i == 0) {\n            $num = $num \/ $i;\n            $div_num_nb++;\n        }\n        $result *= $div_num_nb + 1;\n        $i++;\n    }\n    return $result;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219653,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(c);\nuse Math::BigFloat;\n\nsub calc_simple{\n\tmy $n = shift;\n\tmy @lp = (0)x($n+1);\n\tmy @pr = ();\n\tfor my $i(2..$n) {\n\t\tif ($lp[$i] == 0) {\n\t\t\t$lp[$i] = $i;\n\t\t\tpush @pr, $i;\n\t\t}\n\t\tforeach my $p(@pr) {\n\t\t\tlast if $p > $lp[$i] || $p*$i > $n;\n\t\t\t$lp[$p*$i] = $p;\n\t\t}\n\t}\n\treturn \\@pr;\n}\nour $s = calc_simple(1000000);\n\nsub c {\n    my $k = shift;\n    my $k3 = $k*$k*$k;\n    my $pr = sqrt($k3);\n\n    return 0 if int(sqrt($k*$k*$k)) != sqrt($k*$k*$k);\n\n    my $res = 1;\n    my $h = {};\n \n    my $sqr = int(sqrt($pr));\n    my $i = 0;\n \n    return 2 unless scalar @$s;\n\n    while ($i < @$s) {\n        my $d = $s->[$i];\n        if ($pr % $d == 0) {\n            $h->{$d} += 1;\n            $pr \/= $d;\n            last if $pr == 1;\n        }\n        else {\n            $i++;\n        }\n    }\n\n    $res *= $_+1 foreach values %$h;\n    $res;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5dad6e5264e25a001918a1fc":[{"id":219654,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(decode);\n\nsub decode {\n    my $s = shift;\n    my @fields = $s =~ \/(\\d+)(.*)\/;\n    my $num = $fields[0] % 26; my $txt = $fields[1];\n    if (($num % 2 == 0) || ($num == 13)) { return \"Impossible to decode\"; }\n    my %dict = ('3'=>9, '9'=>3, '21'=>5, '5'=>21, '7'=>15, '15'=>7, '11'=>19, '19'=>11, '17'=>23, '23'=>17, '25'=>25, '1'=>1);\n    my $n = $dict{$num};\n    my $alpha = \"abcdefghijklmnopqrstuvwxyz\";\n    my $res = \"\";\n    for (my $i = 0; $i < length($txt); ++$i) {\n        my $j = (index($alpha, substr($txt, $i, 1)) * $n) % 26;\n        $res .= substr($alpha, $j, 1);\n    }\n    return $res;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219655,"user_id":2582,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(decode);\n\nsub decode {\n    # Extract out the $key and the $cipherText:\n    my $input = pop;\n    $input =~ m\/^(\\d+)([a-z]+)$\/  or die \"Invalid input ('$input').\";\n    my ($key, $cipherText) = ($1, $2);\n\n    # Create and populate the %cipherLetterToPlainLetter hash.\n    # If there is a collision, return \"Impossible to decode\":\n    my %cipherLetterToPlainLetter;\n    my $offsetForAsciiA = ord('a');  # (used for converting to\/from letters\/numbers)\n    foreach my $plainLetter ('a' .. 'z')\n    {\n        # For this $plainLetter, calculate the $cipherLetter:\n        my $plainNumber = ord($plainLetter) - $offsetForAsciiA;\n        my $cipherNumber = $plainNumber * $key % 26;\n        my $cipherLetter = chr($offsetForAsciiA + $cipherNumber);\n\n        # Check for a collision:\n        return 'Impossible to decode'  if exists $cipherLetterToPlainLetter{$cipherLetter};\n\n        # Populate the hash:\n        $cipherLetterToPlainLetter{$cipherLetter} = $plainLetter;\n    }\n\n    # Calculate the $output:\n    my $output = '';\n    foreach my $cipherLetter (split m\/\/, $cipherText)\n    {\n        $output .= $cipherLetterToPlainLetter{$cipherLetter}\n    }\n\n    # Return the output:\n    return $output;\n}\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219656,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(decode);\n\nsub decode {\n    my ($str) = @_;\n\n    my $num;\n    my @alphabet = split \"\", \"abcdefghijklmnopqrstuvwxyz\";\n    my %map;\n\n    if ($str =~ \/^(\\d*)([a-z]*)$\/) {\n        $num = $1;\n        $str = $2;\n    }\n\n    for (0..25) {\n        $map{$alphabet[($_ * $num) % 26]} = $alphabet[$_];\n    }\n\n    if (keys %map ne 26) {\n        return \"Impossible to decode\";\n    }\n    \n    return join \"\", map { $map{$_} } split \"\", $str;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5db19d503ec3790012690c11":[{"id":219657,"user_id":null,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(weight);\n\n# parameters: n, w; return a floating number\nsub weight {\n    # your code\n    return $_[1] * 0.17174117862516716128;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219658,"user_id":527,"body":"package Solution;\n\nuse Exporter qw(import);\nour @EXPORT_OK = qw(weight);\n\nsub weight {\n    my ($n, $w) = @_;\n    $w * (exp(2) - 3) * (1 - exp(-2 * $n)) \/ (4 * (exp(2) - 1))\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219659,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(weight);\n\n# parameters: n, w; return a floating number\nsub weight {\n    my ($n, $w) = @_;\n    my $i0 = 0.14849853757254047; my $e = exp(1);\n    my $an = (1 - $e ** -(2 * $n + 2)) \/ (1 - ($e ** -2));\n    return $i0 * $an * $w;\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5e4bb05b698ef0001e3344bc":[{"id":219660,"user_id":53,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse bigint;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(solve);\n\nsub solve {\n    my $arr = shift; \n    my $a = @{$arr}[0]; \n    my $b = @{$arr}[1];\n    my $i = 2;\n    my $w = int((scalar @{$arr}));\n    while ($i < $w) {\n        my $c = $a * @{$arr}[$i] + $b * @{$arr}[$i+1]; \n        my $d = abs($b * @{$arr}[$i] - $a * @{$arr}[$i+1]);\n        $a = $c;\n        $b = $d;\n        $i += 2;\n    }\n    return [$a, $b];\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219661,"user_id":492,"body":"package Solution;\n\nuse 5.30.0;\nuse strict;\nuse warnings;\nuse bigint;\nuse Exporter qw(import);\nour @EXPORT_OK = qw(solve);\n\n# parameter: array reference; return an array reference of 2 elements\nsub solve {\n    my $arr = shift; \n    my $a = @{$arr}[0]; my $b = @{$arr}[1];\n    my $i = 1; my $lg = int((scalar @{$arr}) \/ 2);\n    while ($i < $lg) {\n        my $x = $a; my $y = $b; my $z = @{$arr}[2 * $i]; my $t = @{$arr}[2 * $i + 1];\n        $a = abs($x * $z - $y * $t);\n        $b = abs($x * $t + $y * $z);\n        $i++;\n    }\n    return [$a, $b];\n}","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5fc7caa854783c002196f2cb":[{"id":219662,"user_id":null,"body":"package Solution;\nuse 5.30.0;\nuse strict;\nuse warnings;\n\nsub speedify {\n    my ($input) = @_;\n    my @chars = split('', $input);\n    my @result = (' ') x (@chars + 26);\n    for (my $i = 0; $i < @chars; ++$i) {\n        my $c = $chars[$i];\n        my $offset = ord($c) - 65;\n        $result[$i + $offset] = $c;\n    }\n    my $string = join('', @result);\n    $string =~ s\/\\s+$\/\/;\n    return $string;\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219663,"user_id":null,"body":"package Solution;\nuse strict;\nuse warnings;\nuse List::Util qw(max);\n\nsub speedify {\n    my @s = split \/\/, shift;\n    my %h;\n    $h{$_ - 65 + ord $s[$_]} = $s[$_] for (0..$#s);\n    %h ? join \"\", map {$h{$_} || \" \"} (0..max keys %h) : \"\";\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219664,"user_id":209,"body":"package Solution;\nuse List::Util qw\/max\/;\n\nsub speedify {\n    @r = split '', @_[0];\n    @w = map {ord($r[$_]) - 65 + $_} (0..$#r);\n    @q = map {' '} (1..max(@w));\n    map {@q[$w[$_]]=$r[$_]} (0..$#r);\n    join '', @q\n}1;\n\n\n","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219665,"user_id":null,"body":"package Solution;\nuse strict;\nuse warnings;\n\nsub speedify {\n    my @input = split( '', $_[0] );\n    my @output_map = ();\n    foreach my $i ( 0 .. $#input ) {\n        $output_map[ $i + ( ord( $input[$i] ) - 65 ) ] = $input[$i];\n    }\n    return join( '', ( map { $_ || ' ' } ( @output_map ) ) );\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219666,"user_id":480,"body":"package Solution;\nuse strict;\nuse warnings;\n\nsub speedify {\n    my ($input) = @_;\n    my %h;\n    my $r=\"\";\n    for(my$i=0;$i<length($input);$i++){\n        $h{$i+ord(substr($input,$i,1))-65}=substr($input,$i,1);\n    }\n    foreach my $j (sort { $a<=>$b } keys(%h)){\n        while(length($r)<$j){$r.=\" \";}\n        $r.=$h{$j};\n    }\n    return $r;\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219667,"user_id":null,"body":"package Solution;\nuse strict;\nuse warnings;\n\nsub speedify\n{\n    my ( $s ) = @_;\n    my $out = '';\n    my $alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    my $n = 0;\n    my $max = 0;\n    my $oh;\n    my @c = split \/\/, $s;\n\n    for ( @c )\n    {\n        $n++;\n        $oh->{ ( index( $alphabet, $_ ) + $n ) } = $_;\n        $max = ( index( $alphabet, $_ ) + $n ) if ( index( $alphabet, $_ ) + $n ) > $max;\n    }\n\n    for ( 1..$max )\n    {\n        if ( defined $oh->{ $_ } )\n        {\n            $out .= $oh->{ $_ };\n        }\n        else\n        {\n            $out .= \" \";\n        }\n    }\n\n    return $out;\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219668,"user_id":null,"body":"package Solution;\nuse strict;\nuse warnings;\n\nsub _speedify {\n    my $i = 0;\n    my %m; $m{$_} = $i++ for 'A'..'Z';\n    $i = 0;\n    my @r;\n    $r[$m{$_} + $i++] = $_ for split '', shift;\n    join '', map { $_ \/\/ ' ' } @r;\n}\n\nsub speedify {\n    my (@r, $i);\n    $r[$_ - 65 + $i++] = $_ for unpack \"C*\", shift;\n    pack \"C*\", map { $_ \/\/ 32 } @r;\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219669,"user_id":null,"body":"package Solution;\nuse strict;\nuse warnings;\n\nsub speedify {\n    my ($input) = @_;\n    my $output = \"\";\n    my @inputarr = split(\/\/,$input);\n    my $inputlen = length($input);\n    my %outputarr;\n    my $outputlen = 0;\n    my $c;\n    my $i = 0;\n    \n    foreach $c (@inputarr) {\n        my $new_len = ord($c) - 64 + $i;\n        if ($outputlen < $new_len) {\n            $outputlen = $new_len;\n        }\n        $outputarr{$new_len} = $c;\n        $i++;\n    }\n\n    $i = 1;\n    while ($i < $outputlen+1) {\n        if ( exists($outputarr{$i})) {\n            $output .= $outputarr{$i};\n        } else {\n            $output .= \" \";\n        }\n        $i++;\n    }\n\n\n    return $output; # your code here\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219670,"user_id":null,"body":"package Solution;\nuse strict;\nuse warnings;\nuse Data::Dumper;\n\nsub speedify {\n    my ($input) = @_;\n    my @arr = (' ') x 2600;\n    my $current_index = 0;\n    foreach my $letter (split \/\/, $input)\n    {\n       $arr[ord($letter) - ord('A') + $current_index] = $letter;\n       $current_index++;\n    }\n    my $result = join '', @arr;\n    $result =~ s\/\\s+$\/\/;\n    \n    return $result;\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219671,"user_id":null,"body":"package Solution;\nuse strict;\nuse warnings;\n\nsub speedify {\n    my ($input) = @_;\n    my $res = ' ' x 126;\n    my $pos = 0;\n    for my $ch (split \/\/, $input) {\n        substr( $res, $pos + ord($ch) - ord('A'), 1, $ch );\n        $pos += 1;\n    }\n    $res =~ s\/\\s+$\/\/g;\n    return $res;\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}],"5fde1ea66ba4060008ea5bd9":[{"id":219672,"user_id":527,"body":"package Solution;\n\nuse List::Util qw(min max);\n\nsub burner {\n    use integer;\n    my ($c, $h, $o) = @_;\n    my $h2o = min($h \/ 2, $o);\n    $h -= $h2o * 2;\n    $o -= $h2o;\n    my $co2 = min($c, $o \/ 2);\n    $c -= $co2;\n    $o -= $co2 * 2;\n    my $ch4 = min($c, $h \/ 4);\n    [$h2o, $co2, $ch4]\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219673,"user_id":492,"body":"use strict;\nuse warnings;\nuse integer;\npackage Solution;\n\nsub min ($$) { $_[$_[0] > $_[1]] }\nsub burner {\n    my ($c, $h, $o) = @_;\n    my $water = min($h \/ 2,  $o);\n    my $co2 = min(($o - $water) \/ 2, $c);\n    my $methane = min(($h - $water * 2) \/ 4, $c - $co2);\n    return [$water, $co2, $methane];\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219674,"user_id":null,"body":"package Solution;\n\nsub burner {\n    my ($c, $h, $o) = @_;\n    my ($water, $co2, $methane) = (0, 0, 0);\n    \n    while ($h >= 2 && $o >= 1) { $h -= 2, $o -= 1; $water++}\n    while ($c >= 1 && $o >= 2) { $c -= 1, $o -= 2; $co2++}\n    while ($h >= 4 && $c >= 1) { $h -= 4, $c -= 1; $methane++}\n\n    [$water, $co2, $methane];\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219675,"user_id":null,"body":"package Solution;\nuse List::Util qw( min max );\n\nsub burner {\n my ($c, $h, $o) = @_;\n    my ($water, $co2, $methane) = (0, 0, 0);\n    $water = min(int($h\/2),$o);\n    $h -= $water *2;\n    $o -= $water;\n    #print \"water: $water (quedan $h de idrogeno y $o de oxigeno)\n\";\n    $co2 = min($c,int($o\/2));\n    $c -= $co2;\n    $o -= $co2 * 2;\n    #print \"co2: $co2 (quedan $c de carbono y $o de oxigeno)\n\";\n    $methane = min($c, int($h\/4));\n    $c -= $methane;\n    $h -= $methane * 4;\n    #print \"metane: $methane (quedan $c de carbono y $h de idrogeno)\n\";\n\n    return [$water, $co2, $methane];\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219676,"user_id":null,"body":"package Solution;\n\nsub burner {\n    my ($c, $h, $o) = @_;\n    \n    if ($h\/2 < $o) {\n        $water  = int($h\/2);\n        $o = $o - int($h\/2);\n        $h = 0;\n    }\n    else {\n        $water = $o;\n        $h = $h - 2*$o;\n        $o = 0;\n    }\n    \n    if ($o\/2 < $c) {\n        $co2  = int($o\/2);\n        $c = $c - int($o\/2);\n        $o = 0;\n    }\n    else {\n        $co2 = $c;\n        $o = $o - 2*$c;\n        $c = 0;\n    }\n    \n    if ($h\/4 < $c) {\n        $methane  = int($h\/4);\n    }\n    else {\n        $methane = $c;\n    }\n    \n    return [$water, $co2, $methane];\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219677,"user_id":null,"body":"package Solution;\nuse POSIX;\n\nsub burner {\n    my ($c, $h, $o) = @_;\n    $water = ($o*2>=$h) ? floor($h\/2) : $o;\n    $h -= $water*2;\n    $o -= $water;\n    $co2 = ($c*2>=$o) ? floor($o\/2) : $c;\n    $c -= $co2;\n    $o -= $co2*2;\n    $methane = ($c*4>=$h) ? floor($h\/4) : $c;\n    $c -= $methane;\n    $h -= $methane*4;\n    return [$water, $co2, $methane];\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219678,"user_id":null,"body":"package Solution;\n\nsub burner {\n    my ($c, $h, $o) = @_;\n    $water = $h > $o * 2 ? $o : int($h \/ 2);\n    $h -= 2 * $water;\n    $o -= $water;\n    $co2 = $o > $c * 2 ? $c : int($o \/ 2);\n    $o -= 2 * $co2;\n    $c -= $co2;\n    $methane = $h > $c * 4 ? $c : int($h \/ 4);\n    [$water, $co2, $methane]\n}\n\n1","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219679,"user_id":null,"body":"package Solution;\n\nsub burner {\n    my ($c, $h, $o) = @_;\n    \n    if ( ($o > 0) and ($h > 0) ) {\n        $wp = int($h \/ 2);\n        if ($wp < $o){\n            $water = $wp;\n        } else {\n            $water = $o;\n        }\n        $o -= $water;\n        $h -= $water * 2;\n    } else {\n        $water = 0;\n    }\n    if ( ( $c > 0 ) and ($o > 0)) {\n        $cp = int($o \/ 2);\n        if ( $cp < $c) {\n            $co2 = $cp;\n        } else {\n            $co2 = $c;\n        }\n        $o -= $co2 * 2;\n        $c -= $co2\n    } else {\n        $co2 = 0;\n    }\n    if (( $c > 0 ) and ($h > 0)) {\n        $methap = int($h \/ 4);\n        if ($methap < $c) {\n            $methane = $methap;\n        } else {\n            $methane = $c;\n        }\n        $h -= $methane * 4;\n        $c -= $methane;\n    } else {\n      $methane = 0;\n    }\n       \n    return [$water, $co2, $methane];\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219680,"user_id":null,"body":"package Solution;\n\nsub burner {\n    my ($c, $h, $o) = @_;\n    my $water = 0;\n    while ($h > 1 && $o > 0) {\n        $water += 1;\n        $h -= 2;\n        $o -= 1;\n    }\n    my $co2 = 0;\n    while ($c > 0 && $o > 1) {\n        $co2 += 1;\n        $o -= 2;\n        $c -= 1;\n    }\n    my $methane = 0;\n    while ($c > 0 && $h > 3) {\n        $methane += 1;\n        $h -= 4;\n        $c -= 1;\n    }\n    return [$water, $co2, $methane];\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"},{"id":219681,"user_id":null,"body":"package Solution;\n\nuse strict;\nuse warnings;\nuse v5.30;\n\nsub burner {\n    my ($c, $h, $o) = @_;\n    my ($water, $co2, $methane) = (0, 0, 0);\n    \n    if ($o >= int($h \/ 2)) {\n        $water = int($h \/ 2);\n        $o -= int($h \/ 2);\n        $h -= int($h \/ 2) * 2;\n    } else {\n        $water = $o;\n        $h -= $o * 2;\n        $o = 0;\n    }\n    \n    if ($c >= int($o \/ 2)) {\n        $co2 = int($o \/ 2);\n        $c -= int($o \/ 2);\n        $o -= int($o \/ 2) * 2;\n    } else {\n        $co2 = $c;\n        $o -= $c * 2;\n        $c = 0;\n    }\n    \n    if ($c >= int($h \/ 4)) {\n        $methane = int($h \/ 4);\n        $c -= int($h \/ 4);\n        $h -= int($h \/ 4) * 4;\n    } else {\n        $methane = $c;\n        $h -= $c * 4;\n        $c = 0;\n    }\n    \n    return [$water, $co2, $methane];\n}\n\n1;","lang_id":37,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:31","updated_at":"2022-12-30 18:39:31"}]}