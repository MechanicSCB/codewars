{"50654ddff44f800200000004":[{"id":81055,"user_id":527,"body":"USING: math ;\nIN: multiplier\nALIAS: multiply *","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81056,"user_id":645,"body":"USING: math locals ;\nIN: multiplier\n\n:: multiply ( a b -- a*b ) a b * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81057,"user_id":null,"body":"USE: math\nIN: multiplier\nALIAS: multiply *","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81058,"user_id":null,"body":"USING: math ;\nIN: multiplier\n\n: multiply ( a b -- c ) * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81059,"user_id":676,"body":"USING: math ;\nIN: multiplier\n\n: multiply ( a b -- a*b ) * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81060,"user_id":null,"body":"USING: math ;\nIN: multiplier\n\n: multiply ( x x -- x ) * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81061,"user_id":172,"body":"USING: math ;\nIN: multiplier\n\n: multiply ( a b -- a ) * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81062,"user_id":722,"body":"USING: math ;\nIN: multiplier\n\n: multiply ( a b -- x ) * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81063,"user_id":20,"body":"USING: math ;\nIN: multiplier\n\n: multiply ( a b -- n ) * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81064,"user_id":null,"body":"USING: math ;\nIN: multiplier\n\n: multiply ( a b -- ? ) * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"513e08acc600c94f01000001":[{"id":81065,"user_id":645,"body":"USING: kernel locals sequences math.parser math.order ascii ;\nIN: rgb\n:: rgb ( a b c -- x ) { a b c } [ 0 max 255 min >hex \"0\" prepend 2 tail* ] map concat >upper ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81066,"user_id":168,"body":"USING: kernel arrays sequences math.order formatting ;\nIN: rgb\n: rgb ( a b c -- x ) 3array [ 0 255 clamp ] map \"%02X%02X%02X\" vsprintf ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81067,"user_id":104,"body":"! 2022 nomennescio\nUSING: formatting kernel math.order ;\nIN: rgb\n: rgb ( r g b -- rrggbb ) [ 0 255 clamp ] tri@ \"%02X%02X%02X\" sprintf ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81068,"user_id":713,"body":"USING: kernel math.parser math.order sequences unicode ;\nIN: rgb\n: rgb ( a b c -- x ) [ 0 max 255 min >hex 2 CHAR: 0 pad-head ] tri@ 3append >upper ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81069,"user_id":null,"body":"USING: kernel colors colors.hex sequences math.order formatting ;\nIN: rgb\n: rgb ( a b c -- x ) [ 255 min 0 max ] tri@\n    \"%02X%02X%02X\" sprintf ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81070,"user_id":null,"body":"USING: formatting kernel math.order ;\nIN: rgb\n: rgb ( a b c -- x ) \n  [ 0 max 255 min ] tri@ \"%02X%02X%02X\" sprintf ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81071,"user_id":null,"body":"USING: formatting kernel math.order ;\nIN: rgb\n\n: rgb ( a b c -- x )\n    [ 0 255 clamp ] tri@ \"%02X%02X%02X\" sprintf ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81072,"user_id":29,"body":"USING: kernel math.parser math math.order sequences arrays ascii ;\nIN: rgb\n\n: rgb ( a b c -- x ) 3array [ 0 max 255 min dup >hex swap 16 < [ 48 prefix ] when >upper ] map \"\" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81073,"user_id":53,"body":"USING: kernel locals sequences math.parser math.order ascii ;\nIN: rgb\n:: rgb ( a b c -- x ) { a b c } [ 255 min 0 max >hex \"0\" prepend 2 tail* >upper ] map concat ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"514b92a657cdc65150000006":[{"id":81074,"user_id":null,"body":"USING: kernel math math.ranges sequences ;\nIN: solution\n\n: div3? ( n -- ? ) 3 mod 0 = ;\n: div5? ( n -- ? ) 5 mod 0 = ;\n\n: div-by-3-or-5? ( n -- ? ) dup div3? swap div5? or ;\n\n: solution ( n -- x ) 0 swap [a,b) [ div-by-3-or-5? ] filter sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81075,"user_id":null,"body":"USING: kernel math math.ranges sequences ;\nIN: solution\n: solution ( n -- x ) [1,b) [ [ 3 mod 0 = ] [ 5 mod 0 = ] bi or ] filter sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81076,"user_id":168,"body":"USING: kernel math ;\nIN: solution\n\n: count ( n k -- s ) tuck \/i dup 1 + * 2\/ * ;\n\n: solution ( n -- x ) \n  1 - dup 3 count over 5 count + swap 15 count - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81077,"user_id":713,"body":"USING: kernel sequences math math.order ;\nIN: solution\n: solution ( n -- x )\n    dup 0 < [ drop 0 ]\n    [ <iota> [ [ 3 mod zero? ] [ 5 mod zero? ] bi or ] filter sum ]\n    if\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81078,"user_id":29,"body":"USING: kernel math locals prettyprint ;\nIN: solution\n\n:: part-sum ( y x -- r ) x 1 - y \/i x 1 - y \/i 1 + * 2 \/i y * ;\n: solution ( n -- x )\n  3 over 5 over 15 over [ part-sum ] 2tri@ - + swap drop ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81079,"user_id":null,"body":"USING: kernel math ;\nIN: solution\n: sum-divisible-by ( target n -- m )\n    swap 1 - swap [ \/i dup 1 + * ] keep * 2 \/i ;\n: solution ( n -- answer )\n    dup dup 3 sum-divisible-by swap 5 sum-divisible-by +\n    swap 15 sum-divisible-by - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81080,"user_id":null,"body":"USING: kernel math math.functions sequences ;\nIN: solution\n: solution ( n -- x )\n  dup neg? [ drop 0 ] [ <iota> [ 3 5 [ divisor? ] bi-curry@ bi or ] filter sum ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81081,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel locals math ;\nIN: solution\n\n: n-sum ( n -- s ) dup 1 + * 2\/ ;\n:: multiples ( a b -- n ) a b \/i n-sum b * ;\n: solution ( n -- x ) 1 - [ 3 multiples ] [ 5 multiples ] [ 15 multiples ] tri - + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81082,"user_id":null,"body":"USING: kernel ;\nUSING: math ;\nIN: solution\n\n: sum-below ( n -- x ) dup 1 + * 2 \/i ;\n: sum-multiple-below ( n m -- x ) [ [ 1 - ] dip \/i ] keep swap sum-below * ;\n: solution ( n -- x ) dup [ dup 3 sum-multiple-below swap dup 5 sum-multiple-below swap 15 sum-multiple-below - + ] [ drop 0 ] if ;\n\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81083,"user_id":null,"body":"USING: kernel math ;\nIN: solution\n\n: triangle ( n -- x )\n  dup 1 + * 2 \/ ;\n\n: sum-below ( n mult -- x )\n  swap 1 - over \/i triangle * ;\n\n: solution ( n -- x )\n  [ 15 sum-below ] [ 5 sum-below ] [ 3 sum-below ] tri + swap - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"515f51d438015969f7000013":[{"id":81084,"user_id":527,"body":"USING: arrays kernel sequences ;\nIN: pyramid\n: pyramid ( n -- x ) 1 <repetition> { } [ suffix ] accumulate* ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81085,"user_id":564,"body":"USING: kernel math math.ranges arrays sequences ;\n\nIN: pyramid\n\n: pyramid ( n -- x )\n  <iota>\n  [ 1 + ] map\n  [ 1 <array> ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81086,"user_id":null,"body":"USING: kernel math sequences arrays ;\nIN: pyramid\n: pyramid ( n -- x ) \n[ dup 0 > ] [ [ 1 - ] [ 1 <repetition> >array ] bi ] produce nip <reversed> >array\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81087,"user_id":null,"body":"USING: kernel ;\nUSING: sequences ;\nUSING: math ;\nIN: pyramid\n\n\n! create a list of 1's of length n\n: create-list ( n -- x ) [ 1 ] replicate ;\n\n: range ( n -- x ) 0 swap [ 1 + dup ] replicate swap drop ;\n\n: pyramid ( n -- x ) range [ create-list ] map ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81088,"user_id":null,"body":"USING: kernel math.ranges sequences ;\nIN: pyramid\n: pyramid ( n -- x ) 0 swap (a,b] [ [ 1 ] replicate ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81089,"user_id":null,"body":"USING: arrays kernel math math.ranges sequences sequences.generalizations ;\nIN: pyramid\n: map-add-1 ( seq -- seq ) [ 1 + ] map ;\n\n: map-all-1 ( seq -- seq ) [ drop 1 ] map ;\n\n: makenarray ( n -- seq ) [0,b) map-all-1 >array ;\n\n: pyramid ( n -- x ) [0,b) map-add-1 [ makenarray ] map >array ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81090,"user_id":1339,"body":"USING: kernel math sequences ;\nIN: pyramid\n: pyramid ( n -- x ) <iota> [ 1 + { } swap 1 pad-head ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81091,"user_id":null,"body":"USING: arrays math math.ranges sequences ;\nIN: pyramid\n\n: pyramid ( n -- seq )\n    [ { } ] [ [1,b] [ 1 <array> ] map ] if-zero ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81092,"user_id":104,"body":"! 2020 nomennescio\nUSING: kernel math sequences ;\nIN: pyramid\n: ones ( n -- ones ) [ 1 ] replicate ;\n: pyramid ( n -- xs ) <iota> { } swap [ 1 + ones suffix ] each ; ","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81093,"user_id":564,"body":"USING: kernel math.ranges arrays sequences ;\nIN: pyramid\n: pyramid ( n -- x )\n  1 swap 1 <range>\n  >array [ 1 <array> ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"517abf86da9663f1d2000003":[{"id":81094,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math sequences splitting unicode ;\nIN: to-camel-case\n\n: to-camel-case ( str -- str ) \"-_\" split [ zero? [ capitalize ] unless ] map-index concat ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81095,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math sequences splitting unicode ;\nIN: to-camel-case\n\n: to-camel-case ( str -- str ) \"-_\" split [ [ drop capitalize ] unless-zero ] map-index concat ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81096,"user_id":29,"body":"USING: kernel regexp sequences math ascii strings prettyprint ;\nIN: to-camel-case\n: to-camel-case ( str -- str ) [ \"\" ] [ R\/ -|_\/ re-split \n  [ zero? [ [ first 1string ] [ rest ] bi append ]\n  [ >title ] if ] map-index \"\" join ] if-empty ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81097,"user_id":null,"body":"USING: ascii kernel sequences splitting ;\nIN: to-camel-case\n: to-camel-case ( str -- str )\n  \"-_\" split unclip [ [ >title ] map ] dip prefix concat ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81098,"user_id":713,"body":"USING: kernel splitting sequences ascii ;\nIN: to-camel-case\n: to-camel-case ( str -- str )\n  \"-_\" split [ 1 head ] [ 1 tail ] bi\n  [ >title ] map append \"\" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81099,"user_id":null,"body":"USING: ascii sequences splitting ;\nIN: to-camel-case\n\n: to-camel-case ( str -- str )\n    \"-_\" split 1 cut [ capitalize ] map append concat ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81100,"user_id":168,"body":"USING: kernel splitting unicode sequences ;\nIN: to-camel-case\n: to-camel-case ( str -- str ) \"-_\" split 1 cut [ capitalize ] map append concat ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81101,"user_id":null,"body":"USING: kernel splitting unicode sequences ;\nIN: to-camel-case\n: to-camel-case ( str -- str ) \"-_\" split unclip [ >title append ] reduce ;\n\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"51c89385ee245d7ddf000001":[{"id":81102,"user_id":null,"body":"USING: kernel formatting ;\nIN: solution\n\n: substitute ( n -- s )\n  \"Value is %05d\" sprintf ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81103,"user_id":null,"body":"USE: formatting\nIN: solution\n\n: substitute ( n -- str ) \"Value is %05d\" sprintf ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81104,"user_id":104,"body":"! 2020 nomennescio\nUSING: formatting ;\nIN: solution\n\n: substitute ( n -- s ) \"Value is %05d\" sprintf ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81105,"user_id":564,"body":"USING: formatting ;\nIN: solution\n\n: substitute ( n -- s ) \"Value is %05d\" sprintf ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81106,"user_id":1339,"body":"USING: kernel math math.parser sequences ;\nIN: solution\n: substitute ( n -- s ) \"Value is \" swap 100000 + 10 >base rest append ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81107,"user_id":29,"body":"USING: kernel math.parser sequences ;\nIN: solution\n\n: substitute ( n -- s ) number>string 5 CHAR: 0 pad-head \"Value is \" prepend ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81108,"user_id":713,"body":"USING: kernel math.parser sequences ;\nIN: solution\n\n: substitute ( n -- s ) number>string 5 CHAR: 0 pad-head \"Value is \" swap append ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"52210226578afb73bd0000f1":[{"id":81109,"user_id":29,"body":"USING: sequences math ;\nIN: kata\n\n: electrons-around-the-cores ( dice -- n )\n  [ odd? ] filter 0 [ 1 - + ] reduce ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81110,"user_id":null,"body":"USING: assocs sequences ;\nIN: kata\n\n: electrons-around-the-cores ( dice -- n )\n  [ { { 1 0 } { 2 0 } { 3 2 } { 4 0 } { 5 4 } { 6 0 } } at ] map sum  ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81111,"user_id":527,"body":"USING: kernel math sequences ;\nIN: kata\n\n: electrons-around-the-cores ( dice -- n )\n  [ dup odd? [ 1 - ] [ drop 0 ] if ] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81112,"user_id":527,"body":"USING: combinators kernel sequences ;\nIN: kata\n\n: electrons-around-the-cores ( dice -- n )\n  [ { { 3 [ 2 ] } { 5 [ 4 ] } [ drop 0 ] } case ] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81113,"user_id":53,"body":"USING: kernel locals math sequences combinators ;\nIN: kata\n\n:: mk ( n -- m )\n  {\n    { [ n 5 = ] [ 4 ] }\n    { [ n 3 = ] [ 2 ] }\n    [ 0 ]\n  } cond ;\n\n:: electrons-around-the-cores ( dice -- n )\n  dice [ mk ] map sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81114,"user_id":544,"body":"USING: kernel locals combinators sequences ;\nIN: kata\n\n:: electron-count ( die -- n ) \n  die {\n    { 3 [ 2 ] }\n    { 5 [ 4 ] }\n    [ drop 0 ]\n  } case ;\n\n:: electrons-around-the-cores ( dice -- n )\n  dice [ electron-count ] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81115,"user_id":null,"body":"USING: locals sequences ;\nIN: kata\n\n: electrons ( n -- els ) \n  { 0 0 0 2 0 4 0 } nth ;\n\n: electrons-around-the-cores ( dice -- n )\n  [ electrons ] map sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81116,"user_id":104,"body":"! 2021 nomennescio\nUSING: locals sequences ;\nIN: kata\n: electrons-around-the-cores ( dice -- n ) [ { 0 0 0 2 0 4 0 } nth ] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81117,"user_id":null,"body":"USING: combinators kernel math sequences ;\nIN: kata\n\n: electrons-around-the-cores ( dice -- n )\n  [ [ 5 = ] [ 3 = ] bi or ] filter\n  [ 1 - ] map sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81118,"user_id":168,"body":"USING: kernel math sequences ;\nIN: kata\n\n: electrons-around-the-cores ( dice -- n )\n  [ [ 2 mod ] [ 1 - ] bi * ] map-sum ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"523b4ff7adca849afe000035":[{"id":81119,"user_id":527,"body":"IN: greet\nCONSTANT: greet \"hello world!\"","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81120,"user_id":null,"body":"IN: greet\n! Write a function \"greet\" that returns \"hello world!\"\n\n: greet ( -- str ) \"hello world!\" ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81121,"user_id":564,"body":"IN: greet\n: greet ( -- hw ) \"hello world!\" ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81122,"user_id":null,"body":"USE: sequences\nIN: greet\n\n: greet ( -- str )\n    { \n        0x68 0x65 0x6c 0x6c 0x6f 0x20\n        0x77 0x6f 0x72 0x6c 0x64 0x21\n    } \"\" like ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81123,"user_id":104,"body":"! 2022 nomennescio\nIN: greet\n\nCONSTANT: greet \"hello world!\"","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81124,"user_id":713,"body":"IN: greet\n: greet ( -- m ) \"hello world!\" ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81125,"user_id":null,"body":"IN: greet\n\n: greet ( -- str ) \"hello world!\" ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81126,"user_id":null,"body":"IN: greet\n! Write a function \"greet\" that returns \"hello world!\"\n\n: greet ( -- x ) \"hello world!\" ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81127,"user_id":53,"body":"USING: kernel ;\nIN: greet\n: greet ( -- x ) \"hello world!\" ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81128,"user_id":null,"body":"IN: greet\n! Write a function \"greet\" that returns \"hello world!\"\n\n: greet ( -- string )\n  \"hello world!\"\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"523b66342d0c301ae400003b":[{"id":81129,"user_id":null,"body":"USING: math ;\nIN: multiply\n\n: multiply ( a b -- a*b ) * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81130,"user_id":29,"body":"USING: kernel math locals ;\nIN: multiply\n\n:: multiply ( a b -- r ) 0 a [ b [ 1 + ] times ] times ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81131,"user_id":104,"body":"! 2022 nomennescio\nUSING: math ;\nIN: multiply\n\nALIAS: multiply *","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81132,"user_id":713,"body":"USING: math ;\nIN: multiply\n\n: multiply ( = D -- 3 ) * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81133,"user_id":527,"body":"USE: math\nIN: multiply\nALIAS: multiply *","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81134,"user_id":53,"body":"USING: kernel math ;\nIN: multiply\n\n: multiply ( a b -- c ) * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81135,"user_id":null,"body":"USING: math ;\nIN: multiply\n\nALIAS: multiply *","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"525e5a1cb735154b320002c8":[{"id":81136,"user_id":null,"body":"USING: kernel math math.order ;\nIN: triangular\n\n: triangular ( n -- t ) 0 max dup 1 + * 2\/ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81137,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math math.combinatorics ;\nIN: triangular\n\n: triangular ( n -- t ) 1 + 2 nCk ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81138,"user_id":null,"body":"USING: kernel math.ranges sequences math ;\nIN: triangular\n\n: triangular ( n -- t ) dup 1 < [ drop 0 ] [ [1,b] sum ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81139,"user_id":null,"body":"USING: kernel math math.ranges sequences ;\nIN: triangular\n\n: triangular ( n -- t ) dup 0 > [ [1,b] sum ] [ drop 0 ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81140,"user_id":527,"body":"USING: kernel math math.combinators ;\nIN: triangular\n\n: triangular ( n -- t ) [ drop 0 ] [ dup 1 + * 2\/ ] if-negative ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81141,"user_id":53,"body":"USING: kernel math locals ;\nIN: triangular\n\n:: triangular ( n -- t ) n 0 > [ n n 1 + * 2 \/i ] [ 0 ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81142,"user_id":168,"body":"USING: kernel math math.order ;\nIN: triangular\n\n: triangular ( n -- t ) 0 max [ ] [ 1 + ] bi * 2 \/i ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81143,"user_id":29,"body":"USING: kernel math ;\nIN: triangular\n\n: triangular ( n -- t ) dup 0 > [ dup 1 + * 2 \/i ] [ drop 0 ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"525f3eda17c7cd9f9e000b39":[{"id":81144,"user_id":168,"body":"USING: kernel parser sequences math splitting words.constant ;\nIN: calculating-with-functions\n\n<<\n\"zero one two three four five six seven eight nine\" \" \" split\n[ [ create-word-in ] dip define-constant ] each-index\n>>\n\n: define-op ( accum op -- accum ) [ scan-word suffix! ] dip suffix! ;\n\nSYNTAX: plus          \\ + define-op ;\nSYNTAX: minus         \\ - define-op ;\nSYNTAX: multiplied-by \\ * define-op ;\nSYNTAX: divided-by    \\ \/i define-op ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81145,"user_id":null,"body":"USING: kernel math sequences ;\nIN: calculating-with-functions\n\n: number ( n -- m )\n  get-datastack length 1 > [ swap call ] when ; inline\n\n: zero ( -- n ) 0 number ; inline\n: one ( -- n ) 1 number ; inline\n: two ( -- n ) 2 number ; inline\n: three ( -- n ) 3 number ; inline\n: four ( -- n ) 4 number ; inline\n: five ( -- n ) 5 number ; inline\n: six ( -- n ) 6 number ; inline\n: seven ( -- n ) 7 number ; inline\n: eight ( -- n ) 8 number ; inline\n: nine ( -- n ) 9 number ; inline\n\n: plus ( -- quot ) [ + ] ;\n: minus ( -- quot ) [ - ] ;\n: multiplied-by ( -- quot ) [ * ] ;\n: divided-by ( -- quot ) [ \/i ] ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81146,"user_id":null,"body":"USING: kernel math namespaces ;\nIN: calculating-with-functions\n\n<PRIVATE\nSYMBOLS: operand1 operator present ;\n\n! This is a really bad and hacky answer. It works - just - with the clean examples of the tests, but in general\n! doesn't respect the stack at all.\n!\n! - we modify variables to store the first operand and the operator. This means we can do something like\n!\n!     six 1 1 1 1 plus two\n!\n!   to get an answer of 8 (good) with cruft on the stack (bad)\n\n! - the first (left) operand gets stored in its variable but, because we need to leave something on the stack for the sake of the\n!   effect we put a useless and confusing f.\n!\n\n: num ( n -- v\/f )\n    operator get\n    [ operand1 get swap operator get call( a b -- n ) operand1 off operator off ]\n    [ f swap operand1 set ]\n    if ; inline\n\n: op ( a quot -- ) operator set drop ;\nPRIVATE>\n\n: zero ( -- x ) 0 num ;\n: one ( -- x ) 1 num ;\n: two ( -- x ) 2 num ;\n: three ( -- x ) 3 num ;\n: four ( -- x ) 4 num ;\n: five ( -- x ) 5 num ;\n: six ( -- x ) 6 num ;\n: seven ( -- x ) 7 num ;\n: eight ( -- x ) 8 num ;\n: nine ( -- x ) 9 num ;\n\n: plus ( x -- ) [ + ] op ;\n: minus ( x -- ) [ - ] op ;\n: multiplied-by ( x -- ) [ * ] op ;\n: divided-by ( x -- ) [ \/i ] op ;\n\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81147,"user_id":null,"body":"USING: kernel math parser sequences ;\nIN: calculating-with-functions\n\nCONSTANT: zero 0\nCONSTANT: one 1\nCONSTANT: two 2\nCONSTANT: three 3\nCONSTANT: four 4\nCONSTANT: five 5\nCONSTANT: six 6\nCONSTANT: seven 7\nCONSTANT: eight 8\nCONSTANT: nine 9\n\n: <-> ( x -- x x x ) dup pop scan-object [ execute( -- x ) ] bi@ ;\n\nSYNTAX: plus <-> + suffix! ;\nSYNTAX: minus <-> - suffix! ;\nSYNTAX: multiplied-by <-> * suffix! ;\nSYNTAX: divided-by <-> \/i suffix! ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81148,"user_id":104,"body":"! 2022 nomennescio\nUSING:  kernel lexer math parser sequences words.constant ;\nIN: calculating-with-functions\n\n<<\nSYNTAX: INDEX: 0 \";\" [ create-word-in over define-constant 1 + ] each-token drop ;\n>>\n\nINDEX: zero one two three four five six seven eight nine ;\n\nALIAS: , suffix!\n\n: datum,, ( accum obj -- accum' ) [ scan-datum , ] dip , ;\n\nSYNTAX: plus \\ + datum,, ;\nSYNTAX: minus \\ - datum,, ;\nSYNTAX: multiplied-by \\ * datum,, ;\nSYNTAX: divided-by \\ \/i datum,, ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81149,"user_id":104,"body":"! 2022 nomennescio\nUSING:  kernel lexer math parser sequences words.constant ;\nIN: calculating-with-functions\n\n<<\nSYNTAX: INDEX: 0 \";\" [ create-word-in over define-constant 1 + ] each-token drop ;\n>>\n\nINDEX: zero one two three four five six seven eight nine ;\n\n: datum,, ( accum obj -- accum' ) [ scan-datum suffix! ] dip suffix! ;\n\nSYNTAX: plus \\ + datum,, ;\nSYNTAX: minus \\ - datum,, ;\nSYNTAX: multiplied-by \\ * datum,, ;\nSYNTAX: divided-by \\ \/i datum,, ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81150,"user_id":104,"body":"! 2022 nomennescio\nUSING: alien.syntax alien.enums kernel math parser sequences ;\nIN: calculating-with-functions\n\nENUM: digit zero one two three four five six seven eight nine ;\n\n: (plus) ( a b -- a+b ) [ enum>number ] bi@ + ;\n: (minus) ( a b -- a+b ) [ enum>number ] bi@ - ;\n: (mul) ( a b -- a+b ) [ enum>number ] bi@ * ;\n: (div) ( a b -- a+b ) [ enum>number ] bi@ \/i ;\n\nSYNTAX: plus scan-object suffix! \\ (plus) suffix! ;\nSYNTAX: minus scan-object suffix! \\ (minus) suffix! ;\nSYNTAX: multiplied-by scan-object suffix! \\ (mul) suffix! ;\nSYNTAX: divided-by scan-object suffix! \\ (div) suffix! ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81151,"user_id":29,"body":"USING: kernel math sequences parser ;\nIN: calculating-with-functions\n\n: zero  ( -- n ) 0 ;\n: one   ( -- n ) 1 ;\n: two   ( -- n ) 2 ;\n: three ( -- n ) 3 ;\n: four  ( -- n ) 4 ;\n: five  ( -- n ) 5 ;\n: six   ( -- n ) 6 ;\n: seven ( -- n ) 7 ;\n: eight ( -- n ) 8 ;\n: nine  ( -- n ) 9 ;\n\nSYNTAX: plus          scan-word \\ +  [ suffix! ] bi@ ;\nSYNTAX: minus         scan-word \\ -  [ suffix! ] bi@ ;\nSYNTAX: multiplied-by scan-word \\ *  [ suffix! ] bi@ ;\nSYNTAX: divided-by    scan-word \\ \/i [ suffix! ] bi@ ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"525f50e3b73515a6db000b83":[{"id":81152,"user_id":null,"body":"USE: formatting\nIN: kata\n\n: create-phone-number ( seq -- str )\n    \"(%d%d%d) %d%d%d-%d%d%d%d\" vsprintf ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81153,"user_id":null,"body":"USING: formatting ;\nIN: kata\n: create-phone-number ( seq -- str )\n    \"(%d%d%d) %d%d%d-%d%d%d%d\" vsprintf ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81154,"user_id":168,"body":"USING: sequences math.parser formatting ;\nIN: kata\n: create-phone-number ( seq -- str ) \n  [ number>string ] map concat \n  3 cut 3 cut \"(%s) %s-%s\" sprintf ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81155,"user_id":104,"body":"! 2022 nomennescio\nUSING: formatting sequences.generalizations ;\nIN: kata\n\n: create-phone-number ( seq -- str ) 10 firstn \"(%d%d%d) %d%d%d-%d%d%d%d\" sprintf ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81156,"user_id":713,"body":"USING: kernel sequences math.parser ;\nIN: kata\n: create-phone-number ( seq -- str )\n  [ number>string ] map 3 cut 3 cut [ concat ] tri@ \"-\" glue \") \" glue \"(\" swap append ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81157,"user_id":null,"body":"USING: kernel sequences arrays math.parser formatting ;\nIN: kata\n: create-phone-number ( seq -- str ) 3 cut 3 cut 3array [ [ number>string ] map \"\" join ] map \"(%s) %s-%s\" vsprintf ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81158,"user_id":null,"body":"USING: formatting sequences.generalizations ;\nIN: kata\n\n: create-phone-number ( seq -- str )  \"(%d%d%d) %d%d%d-%d%d%d%d\" vsprintf ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81159,"user_id":null,"body":"USING: formatting sequences.generalizations ;\nIN: kata\n: create-phone-number ( seq -- str ) \n  10 firstn \"(%d%d%d) %d%d%d-%d%d%d%d\" sprintf ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81160,"user_id":527,"body":"USING: combinators.smart fry math.parser sequences.generalizations strings ;\nIN: kata\n: create-phone-number ( seq -- str )\n  [ 10 firstn ] [ >digit ] map-outputs\n  '[ CHAR: ( _ _ _ CHAR: ) CHAR: space _ _ _ CHAR: - _ _ _ _ ] >string ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81161,"user_id":53,"body":"USING: locals formatting sequences.private ;\nIN: kata\n:: create-phone-number ( n -- str )\n  0 n array-nth 1 n array-nth 2 n array-nth 3 n array-nth 4 n array-nth 5 n array-nth 6 n array-nth 7 n array-nth 8 n array-nth 9 n array-nth \"(%d%d%d) %d%d%d-%d%d%d%d\" sprintf ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"526156943dfe7ce06200063e":[{"id":81162,"user_id":527,"body":"USING: combinators growable kernel locals math quotations sequences ;\nIN: bf.interpreter\n\n:: interpret ( code input! -- output )\n  BV{ 0 } clone BV{ } clone 0 :> ( data output data-ptr! )\n  code V{ V{ } } [ clone ] map [\n    {\n      { CHAR: > [ [ data-ptr 1 + data ensure drop data-ptr! ] ] }\n      { CHAR: < [ [ data-ptr 1 - data-ptr! ] ] }\n      { CHAR: + [ [ data-ptr data [ 1 + ] change-nth ] ] }\n      { CHAR: - [ [ data-ptr data [ 1 - ] change-nth ] ] }\n      { CHAR: . [ [ data-ptr data nth output push ] ] }\n      { CHAR: , [ [ input unclip-slice data-ptr data set-nth input! ] ] }\n      { CHAR: [ [ V{ } clone over push f ] }\n      { CHAR: ] [ dup pop [ ] [ compose ] reduce [ [ data-ptr data nth zero? ] swap until ] curry ] }\n    } case [ over last push ] when*\n  ] reduce\n  pop [ ] [ compose ] reduce call( -- ) output ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81163,"user_id":29,"body":"USING: kernel brainfuck.private io.streams.string strings byte-vectors splitting ;\nIN: bf.interpreter\n\n: interpret ( code input -- output )\n  >string swap \"[]\" \"[+-]\" replace ! For some reason [] is invalid\n  [ [ (run-brainfuck) ] curry with-string-reader\n                      ] curry with-string-writer\n  >byte-vector ; inline","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81164,"user_id":168,"body":"USING: kernel accessors byte-arrays sequences math combinators eval ;\nIN: bf.interpreter\n\nTUPLE: state input output mem ptr ;\n\n: <state> ( input -- state ) reverse BV{ } clone 10000 <byte-array> clone 0 state boa ;\n\n: bf> ( state -- state ) [ 1 + ] change-ptr ;\n\n: bf< ( state -- state ) [ 1 - ] change-ptr ;\n\n: bf+ ( state -- state ) dup [ ptr>> ] [ mem>> ] bi [ 1 + ] change-nth ;\n\n: bf- ( state -- state ) dup [ ptr>> ] [ mem>> ] bi [ 1 - ] change-nth ;\n\n: bf-read ( state -- byte ) [ ptr>> ] [ mem>> ] bi nth ;\n\n: bf. ( state -- state ) dup [ bf-read ] [ output>> ] bi push ;\n\n: bf, ( state -- state ) dup [ input>> pop ] [ ptr>> ] [ mem>> ] tri set-nth ;\n\n: translate-command ( char -- str )\n  { { CHAR: + [ \"bf+\" ] }\n    { CHAR: - [ \"bf-\" ] }\n    { CHAR: > [ \"bf>\" ] }\n    { CHAR: < [ \"bf<\" ] }\n    { CHAR: . [ \"bf.\" ] }\n    { CHAR: , [ \"bf,\" ] }\n    { CHAR: ] [ \"] while\" ] }\n    { CHAR: [ [ \"[ dup bf-read zero? not ] [\"] }\n    [ drop \" \" ] } case ;\n\n: translate ( code -- factor-code ) \n    [ translate-command ] V{ } map-as \n    \"USING: kernel math bf.interpreter ;\" prefix \" \" join ;\n    \n: run ( factor-code input -- state ) <state> swap eval( state -- state ) ;\n  \n: interpret ( code input -- output ) [ translate ] dip run output>> ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81165,"user_id":null,"body":"USING: accessors combinators kernel locals math sequences ;\nIN: bf.interpreter\n\nTUPLE: state code input output tape ip ptr ;\n\n: ptr-tape>> ( state -- ptr tape ) [ ptr>> ] [ tape>> ] bi ;\n\n: cell>> ( state -- byte ) ptr-tape>> ?nth 0 or ;\n\n: change-cell ( state quot -- state )\n  [ dup cell>> ] [ call ] bi* 256 rem over ptr-tape>> set-nth ; inline\n\n:: (jump) ( ip code [quot quot] -- ip )\n  ip code 0 [\n    [quot 2dip 2over nth\n    dup CHAR: [ = [ drop ] [quot compose [ CHAR: ] = quot] when ] if\n    dup 0 >=\n  ] loop 2drop ; inline\n\n: jump ( state [quot quot] -- state )\n  [ dup code>> ] 2dip [ (jump) ] 3curry change-ip ; inline\n\n: interpret ( code input -- output )\n  reverse BV{ } clone dup clone 0 0 state boa\n  [ dup [ ip>> ] [ code>> length ] bi = ] [ dup [ ip>> ] [ code>> ] bi nth {\n    { CHAR: > [ [ 1 + ] change-ptr ] }\n    { CHAR: < [ [ 1 - ] change-ptr ] }\n    { CHAR: + [ [ 1 + ] change-cell ] }\n    { CHAR: - [ [ 1 - ] change-cell ] }\n    { CHAR: . [ dup [ cell>> ] [ output>> ] bi push ] }\n    { CHAR: , [ dup [ input>> pop ] [ ptr-tape>> ] bi set-nth ] }\n    { CHAR: [ [ dup cell>> zero? [ [ 1 + ] [ 1 - ] jump ] when ] }\n    { CHAR: ] [ dup cell>> zero? [ [ 1 - ] [ 1 + ] jump ] unless ] }\n  } case [ 1 + ] change-ip ] until output>> ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81166,"user_id":29,"body":"USING: kernel accessors math sequences combinators strings ;\nIN: bf.interpreter\n\nTUPLE: env tape pos out ;\n: <env> ( -- env ) { 0 } clone 0 BV{ } clone env boa ;\n: read ( env -- elt ) [ pos>> ] [ tape>> ] bi nth ;\n: widen ( env -- env ) dup [ pos>> ] [ tape>> length ] bi = [ [ 0 suffix ] change-tape widen ] when ;\n: [>] ( env -- env ) [ 1 + ] change-pos widen ;\n: [<] ( env -- env ) [ 1 - ] change-pos ;\n: [.] ( env -- env ) dup [ [ pos>> ] [ tape>> ] bi nth suffix ] curry change-out ;\n: [,] ( env elt -- env ) [ dup dup pos>> swap tape>> ] dip -rot set-nth ;\n: [+] ( env -- env ) dup read 1 + 256 rem [,] ;\n: [-] ( env -- env ) dup read 1 - 256 rem [,] ;\n: skip-ahead ( inst -- inst ) 0 swap [ over 0 > swap dup first 93 = not rot or ] [\n  dup 1 head >string {\n    { \"[\" [ [ 1 + ] dip ] }\n    { \"]\" [ [ 1 - ] dip ] }\n    [ drop ]\n  } case rest\n  ] while swap drop rest ;\n: parse ( code input env -- input env ) [ rot dup length 0 > ] [\n  [ rest ] [ 1 head >string ] bi [ -rot ] dip {\n    { \">\" [ [>] ] }\n    { \"<\" [ [<] ] }\n    { \"+\" [ [+] ] }\n    { \"-\" [ [-] ] }\n    { \".\" [ [.] ] }\n    { \",\" [ [ [ rest ] [ first ] bi ] dip swap [,] ] }\n    { \"[\" [ dup read 0 > [ [ dup ] 2dip parse [ 91 prefix ] 2dip ] [ [ skip-ahead ] 2dip ] if ] }\n    { \"]\" [ [ drop \"\" ] 2dip ] }\n    } case\n  ] while -rot [ drop ] 2dip ;\n: interpret ( code input -- output ) <env> parse swap drop out>> ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81167,"user_id":527,"body":"USING: assocs combinators growable kernel locals math sequences ;\nIN: bf.interpreter\n\n: while*\n  ( ..a pred: ( ..a -- ..b ? ) body: ( ..b ? -- ..a ) -- ..b )\n  [ [ dup ] compose ] dip while drop ; inline\n\n: gen-jump-table ( code -- assoc )\n  H{ } clone V{ } clone [\n    rot {\n      { CHAR: [ [ push ] }\n      { CHAR: ] [ pop 1 + [ pick set-at ] [ swap 1 + pick set-at ] 2bi ] }\n      [ 3drop ]\n    } case\n  ] curry reduce-index ;\n\n:: interpret ( code input! -- output )\n  code gen-jump-table BV{ 0 } clone BV{ } clone 0 0 :> ( jumps data output code-ptr! data-ptr! )\n  [ code-ptr code ?nth ]\n  [\n    code-ptr 1 + code-ptr!\n    {\n      { CHAR: > [ data-ptr 1 + data ensure drop data-ptr! ] }\n      { CHAR: < [ data-ptr 1 - data-ptr! ] }\n      { CHAR: + [ data-ptr data [ 1 + ] change-nth ] }\n      { CHAR: - [ data-ptr data [ 1 - ] change-nth ] }\n      { CHAR: . [ data-ptr data nth output push ] }\n      { CHAR: , [ input unclip-slice data-ptr data set-nth input! ] }\n      { CHAR: [ [ code-ptr jumps at code-ptr! ] }\n      { CHAR: ] [ data-ptr data nth [ drop code-ptr jumps at code-ptr! ] unless-zero ] }\n    } case\n  ] while*\n  output ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81168,"user_id":104,"body":"! 2020 Factor translation by nomennescio\n\nUSING: accessors byte-arrays byte-vectors combinators kernel locals math sequences strings syntax ;\nIN: bf.interpreter\n\nTUPLE: turing \n  { code string read-only } { input byte-vector } \n  { ip fixnum } { tape byte-array } { tp fixnum } { output byte-vector }\n;\n\n: <turing> ( code input -- turing ) -1 2048 <byte-array> 0 BV{ } clone turing boa ;  \n\n: code@ ( bf -- ip code ) dup ip>> swap code>> ;\n: tape@ ( bf -- tp tape ) dup tp>> swap tape>> ;\n\n:: jump ( bf char dir -- ) 0 :> balance! \n  [ bf [ dir + ] change-ip code@ nth char = balance 0 = and ] [ \n    bf code@ nth {\n      { CHAR: [ [ balance 1 + balance! ] }\n      { CHAR: ] [ balance 1 - balance! ] }\n      [ drop ]\n    } case\n  ] until ;\n\n:: (interpret) ( bf -- bf' )\n  [ bf [ 1 + ] change-ip code@ length < ] [\n    bf code@ nth {\n      { CHAR: < [ bf [ 1 - ] change-tp drop ] }\n      { CHAR: > [ bf [ 1 + ] change-tp drop ] }\n      { CHAR: - [ bf tape@ [ 1 - ] change-nth ] }\n      { CHAR: + [ bf tape@ [ 1 + ] change-nth ] }\n      { CHAR: , [ bf input>> pop bf tape@ set-nth ] }\n      { CHAR: . [ bf output>> bf tape@ nth suffix! drop ] }\n      { CHAR: [ [ bf tape@ nth 0 = [ bf CHAR: ]  1 jump ] when ] }\n      { CHAR: ] [ bf tape@ nth 0 = [ bf CHAR: [ -1 jump ] unless ] }\n    } case\n  ] while bf ;\n\n: interpret ( code input -- output ) reverse <turing> (interpret) output>> ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5264d2b162488dc400000001":[{"id":81169,"user_id":29,"body":"USING: kernel sequences splitting math ;\nIN: kata\n: spin-words ( str -- new-str )\n  \" \" [ split [ dup length 4 > [ reverse ] when ] map ] [ join ] bi ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81170,"user_id":null,"body":"USING: regexp sequences ;\nIN: kata\n: spin-words ( str -- new-str ) R\/ \\w{5,}\/ [ reverse ] re-replace-with ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81171,"user_id":null,"body":"USING: kernel splitting sequences math ;\nIN: kata\n: spin-words ( str -- new-str ) \n  \" \" split [ dup length 4 > [ reverse ] when ] map \" \" join\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81172,"user_id":527,"body":"USING: kernel math sequences splitting ;\nIN: kata\n: spin-words ( str -- new-str )\n  clone dup \" \" split-slice [ dup length 5 >= [ reverse! ] when drop ] each ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81173,"user_id":null,"body":"USING: kernel math sequences splitting ;\nIN: kata\n: spin-words ( str -- new-str ) \n    \" \" split-slice [ dup length 4 > [ <reversed> ] when ] map! \" \" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81174,"user_id":168,"body":"USING: kernel math splitting sequences ;\nIN: kata\n: spin-words ( str -- new-str ) \n  \" \" split [ dup length 5 >= [ reverse ] when ] map \" \" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81175,"user_id":104,"body":"! 2021 nomennescio\nUSING: kernel math sequences splitting ;\nIN: kata\n: spin-words ( sentence -- spun-words ) \" \" split [ dup length 5 >= [ reverse ] when ] map \" \" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81176,"user_id":null,"body":"USING: ascii kernel math sequences sequences.extras ;\nIN: kata\n\n: spin-words ( str -- new-str )\n    >words [ dup length 4 > [ reverse ] when ] map-concat ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81177,"user_id":null,"body":"USING: kernel math sequences splitting ;\nIN: kata\n: spin-words ( str -- new-str )\n    \" \" split [ dup length 5 >= [ reverse ] when ] map \" \" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"52de553ebb55d1fca3000371":[{"id":81178,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math sequences ;\nIN: find-missing\n\n: find-missing ( seq -- n ) [ [ length 1 + ] [ first ] [ last ] tri + * 2\/ ] [ sum ] bi - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81179,"user_id":null,"body":"USING: combinators kernel math math.order math.ranges sequences sets ;\nIN: find-missing\n\n: find-missing ( seq -- n )\n  [ {\n    [ first ]\n    [ last ]\n    [ first2 swap - ]\n    [ first3 swap - nip ]\n  } cleave [ [ abs ] bi@ min ] keep sgn * <range> ] keep diff first ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81180,"user_id":29,"body":"USING: kernel combinators sequences arrays sets math math.ranges ;\nIN: find-missing\n\n: find-missing ( seq -- n )\n  { [ members ] [ first ] [ last ] [ length ] } cleave\n  [ 2dup swap - ] dip \/i <range> >array members\n  swap diff first ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81181,"user_id":53,"body":"USING: kernel locals math sequences ;\nIN: find-missing\n\n:: find-missing ( seq -- n ) \n  seq first :> a\n  seq last  :> b\n  seq length 1 + :> w\n  seq sum :> p\n  a b + w * 2 \/ p - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81182,"user_id":null,"body":"USING: combinators kernel math math.order math.ranges sequences sets ;\nIN: find-missing\n\n: find-missing ( seq -- n )\n  [ {\n    [ first ]\n    [ last ]\n    [ first2 swap - ]\n    [ first3 swap - nip ]\n  } cleave min <range> ] keep diff first ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81183,"user_id":null,"body":"USING: compiler.tree.propagation.call-effect kernel math\nmath.order math.ranges math.statistics sequences sets ;\nIN: find-missing\n\n: determine-increment ( seq -- n )\n    [ first2 ] [ last2 ] bi [ - abs ] 2bi@ min ;\n    \n: <expected-range> ( actual -- expected )\n    dup minmax rot determine-increment <range> ;\n\n: find-missing ( seq -- n )\n    dup <expected-range> swap diff last ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81184,"user_id":168,"body":"USING: kernel sequences math ;\nIN: find-missing\n\n: arith-sum ( seq -- n ) [ length 1 + ] [ last ] [ first ] tri + * 2\/ ;\n\n: find-missing ( seq -- n ) [ arith-sum ] [ sum ] bi - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81185,"user_id":null,"body":"USING: kernel locals math sequences ;\nIN: find-missing\n\n:: find-missing ( s -- n ) s first s last + s length 1 + * 2\/ s sum - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"52fba66badcd10859f00097e":[{"id":81186,"user_id":53,"body":"USING: formatting kernel sets ;\nIN: kata\n: disemvowel ( str -- new-str ) \"aeiouAEIOU\" without ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81187,"user_id":null,"body":"USE: sets\nIN: kata\n: disemvowel ( str -- new-str ) \"AEIOUaeiou\" without ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81188,"user_id":null,"body":"USING: sets ;\nIN: kata\n: disemvowel ( str -- new-str ) \"aeiouAEIOU\" without ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81189,"user_id":null,"body":"USING: sequences unicode ;\nIN: kata\n\n<PRIVATE\n: vowel? ( ch -- ? ) ch>lower \"aeiou\" member? ;\nPRIVATE>\n\n: disemvowel ( str -- str ) [ vowel? ] reject ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81190,"user_id":null,"body":"USING: regexp ;\nIN: kata\n\n: disemvowel ( str -- new-str ) \n  R\/ [euioa]\/i \"\" re-replace\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81191,"user_id":null,"body":"USING: kernel unicode sequences fry ;\nIN: kata\n: disemvowel ( str -- new-str )  [  {  CHAR: a CHAR: e CHAR: o CHAR: i CHAR: u } swap ch>lower '[ _ = ] any? not ] filter ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81192,"user_id":1339,"body":"USING: sets sequences ;\nIN: kata\n: disemvowel ( str -- new-str ) [ \"aeiouAEIOU\" in? ] reject ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81193,"user_id":168,"body":"USING: regexp ;\nIN: kata\n: disemvowel ( str -- new-str ) R\/ [aeiou]\/i \"\" re-replace ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81194,"user_id":null,"body":"USING: sets sequences ascii ;\nIN: kata\n: disemvowel ( str -- new-str )\n    [ ch>lower \"aeiou\" in? ] reject ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81195,"user_id":104,"body":"! 2022 nomennescio\nUSING: sets ;\nIN: kata\n\n: disemvowel ( str -- new-str ) \"aeiouAEIOU\" without ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"530e259c7bc88a4ab9000754":[{"id":81196,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math math.combinatorics ;\nIN: tetrahedron\n\n: tetrahedron ( size -- res ) 2 + 3 nCk ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81197,"user_id":null,"body":"USE: math.polynomials\nIN: tetrahedron\n\n: tetrahedron ( n -- m ) { 0 1\/3 1\/2 1\/6 } polyval ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81198,"user_id":null,"body":"USING: locals math ;\nIN: tetrahedron\n\n:: tetrahedron ( n -- m ) n 6 \/ 1\/2 + n * 1\/3 + n * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81199,"user_id":null,"body":"USING: kernel math ;\nIN: tetrahedron\n\n! For large inputs we can't use a sum. Just use the closed form.\n: tetrahedron ( n -- c(n) ) dup [ 1 + ] [ 2 + ] bi * * 6 \/ ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81200,"user_id":null,"body":"USING: kernel math ;\nIN: tetrahedron\n\n: tetrahedron ( size -- res )\n    dup [ 1 + * ] [ 2 + * 6 \/ ] bi ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81201,"user_id":527,"body":"USING: math math.combinatorics ;\nIN: tetrahedron\n\n: tetrahedron ( size -- res ) 2 + 3 nCk ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81202,"user_id":527,"body":"USING: kernel math ;\nIN: tetrahedron\n\n: tetrahedron ( size -- res ) 1\/6 swap [ * ] [ 1 + * ] [ 2 + * ] tri ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81203,"user_id":53,"body":"USING: kernel math locals ;\nIN: tetrahedron\n\n:: tetrahedron ( n -- res ) n n 1 + * n 2 + * 6 \/i ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81204,"user_id":168,"body":"USING: kernel math ;\nIN: tetrahedron\n\n: tetrahedron ( size -- res ) [ ] [ 1 + ] [ 2 + ] tri * * 6 \/i ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81205,"user_id":29,"body":"USING: kernel math ;\nIN: tetrahedron\n\n: tetrahedron ( size -- res ) dup 1 + over 2 + * * 6 \/i ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"53d40c1e2f13e331fc000c26":[{"id":81206,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel layouts literals math math.constants math.functions memoize sequences typed ;\nIN: millionth-fib\n\nCONSTANT: 1\/sqrt(5) 0.4472135954999579\nCONSTANT: accurate-fixnum 75\n\n: fixnum-fib ( n: fixnum -- r ) [ phi ] dip ^ 1\/sqrt(5) * round >integer ;\n\n: fib ( n -- r )\n  [ abs dup accurate-fixnum <= [ fixnum-fib ] \n    [ [ 2\/ dup 1 + [ fib ] bi@ ] keep odd? [ [ sq ] bi@ + ] [ 2 * over - * ] if ] if \n  ] keep [ neg? ] [ even? ] bi and [ neg ] when ; inline recursive","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81207,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math memoize sequences ;\nIN: millionth-fib\n\nMEMO: fib ( n -- r )\n  [ abs dup 8 < [ { 0 1 1 2 3 5 8 13 } nth ] \n    [ [ 2\/ dup 1 + [ fib ] bi@ ] keep odd? [ [ sq ] bi@ + ] [ 2 * over - * ] if ] if \n  ] keep [ neg? ] [ even? ] bi and [ neg ] when ; inline recursive","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81208,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math memoize sequences ;\nIN: millionth-fib\n\nMEMO: fib ( n -- r )\n  dup neg? [ [ neg fib ] keep even? [ neg ] when ]\n  [ dup 3 < [ { 0 1 1 } nth ] \n    [ [ 2\/ dup 1 + [ fib ] bi@ ] keep odd? [ [ sq ] bi@ + ] [ 2 * over - * ] if ] if \n  ] if ; inline recursive","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81209,"user_id":null,"body":"USING: kernel math math.combinators math.matrices sequences ;\nIN: millionth-fib\n\n: fib ( n -- r )\n    [ dup even? -1 1 ? ] [ 1 ] if-negative swap abs\n    { { 0 1 } { 1 1 } } swap m^n first last * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81210,"user_id":713,"body":"USING: kernel sequences math math.matrices math.matrices.elimination ;\nIN: millionth-fib\n\n: fib ( n -- r )\n  dup { { 0 1 } { 1 1 } } swap abs m^n\n  swap 0 >= [ ] [ inverse ] if\n  0 swap nth 1 swap nth ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81211,"user_id":168,"body":"USING: kernel math ;\nIN: millionth-fib\n\n: fib2 ( n -- x x )\n  dup zero? \n  [ drop 0 1 ]\n  [ [ 2\/ fib2 [ 2 * over - * ] [ [ sq ] bi@ + ] 2bi ] keep \n    odd? [ swap over + ] when ]\n  if ;\n\n: fib ( n -- r ) \n  [ abs fib2 drop ] keep \n  [ neg? ] [ even? ] bi and [ neg ] when ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81212,"user_id":null,"body":"USING: kernel math math.matrices sequences ;\nIN: millionth-fib\n\n: fib ( n -- r )\n  [ [ neg? ] [ even? ] bi and -1 1 ? ] keep abs\n  { { 1 1 } { 1 0 } } swap m^n first last * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81213,"user_id":29,"body":"USING: kernel literals math math.matrices ;\nIN: millionth-fib\n\nCONSTANT: M1110 $[ 2 2 1 <matrix> 0 over { 1 1 } swap set-index ]\n\n: pow ( n -- mat ) dup 2 < [ drop M1110 ]\n  [ dup odd? [ 1 - pow M1110 ] [ 2 \/ pow dup ] if m. ] if ;\n: multiplier ( n -- m ) dup odd? [ abs ] when sgn ;\n: fib ( n -- r ) [ multiplier ] [ abs pow ] bi 1 swap row 0 swap row * ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"53da3dbb4a5168369a0000fe":[{"id":81214,"user_id":527,"body":"USING: kernel math ;\nIN: even-odd\n\n: even-or-odd ( n -- n ) even? \"Even\" \"Odd\" ? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81215,"user_id":15,"body":"USING: kernel math ;\nIN: even-odd\n\n: even-or-odd ( n -- n ) odd? [ \"Odd\" ] [ \"Even\" ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81216,"user_id":168,"body":"USING: kernel math ;\nIN: even-odd\n\n: even-or-odd ( n -- n ) even? [ \"Even\" ] [ \"Odd\" ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81217,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math ;\nIN: even-odd\n\n: even-or-odd ( n -- n ) even? [ \"Even\" ] [ \"Odd\" ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81218,"user_id":713,"body":"USING: kernel math ;\nIN: even-odd\n\n: even-or-odd ( n -- n ) 2 mod zero? [ \"Even\" ] [ \"Odd\" ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81219,"user_id":null,"body":"USING: math kernel ;\nIN: even-odd\n\n: even-or-odd ( n -- n ) even? \"Even\" \"Odd\" ? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81220,"user_id":null,"body":"USING: kernel math.functions ;\nIN: even-odd\n\n: even-or-odd ( n -- str ) 2 divisor? [ \"Even\" ] [ \"Odd\" ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81221,"user_id":null,"body":"USING: kernel math ;\nIN: even-odd\n\n: even-or-odd ( n -- string ) odd? [ \"Odd\" ] [ \"Even\" ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81222,"user_id":null,"body":"USING: kernel ;\nUSING: math ;\nIN: even-odd\n\n: even-or-odd ( n -- n )\n  2 rem 0 = [ \"Even\" ] [ \"Odd\" ] if\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81223,"user_id":null,"body":"USING: kernel math ;\nIN: even-odd\n\n: even-or-odd ( n -- str ) even? \"Even\" \"Odd\" ? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"53daa9e5af55c184db00025f":[{"id":81224,"user_id":104,"body":"! 2022 nomennescio\nUSING: math.primes ;\nIN: is-prime\n\nALIAS: is-prime? prime?","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81225,"user_id":null,"body":"USING: bit-arrays combinators kernel math math.functions\nmath.order math.ranges sequences sequences.private typed ;\nIN: is-prime\n\n<PRIVATE\n\nTYPED: (is-prime?) ( n: integer -- ?: boolean )\n    3 over sqrt >integer 2 <range> [ divisor? ] with none? ; inline\n    \nPRIVATE>\n\nTYPED: is-prime? ( x: integer -- ?: boolean )\n    {\n        { [ dup neg? ] [ drop f ] }\n        { [ dup 10 < ] [ ?{ f f t t f t f t f f } nth-unsafe ] }\n        { [ dup 2 divisor? ] [ drop f ] }\n        [ (is-prime?) ]\n    } cond ; flushable","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81226,"user_id":168,"body":"USE: math.primes\nIN: is-prime\n\n: is-prime? ( x -- ? ) prime? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81227,"user_id":53,"body":"USING: kernel combinators kernel math math.primes.private sequences ;\nIN: is-prime\n\n: is-prime? ( n -- ? )\n  {\n    { [ dup 7 < ] [ { 2 3 5 } member? ] }\n    { [ dup simple? ] [ drop f ] }\n    [ (prime?) ]\n  } cond ; foldable flushable","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81228,"user_id":527,"body":"USE: math.primes\nIN: is-prime\nALIAS: is-prime? prime?","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81229,"user_id":29,"body":"USING: math.primes ;\nIN: is-prime\n\n: is-prime? ( x -- ? ) prime? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81230,"user_id":null,"body":"USING: math.primes ;\nIN: is-prime\nALIAS: is-prime? prime?","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"53dbd5315a3c69eed20002dd":[{"id":81231,"user_id":53,"body":"\nUSING: strings sequences ;\nIN: kata\n: filter-seq ( xs -- ys ) [ string? ] reject ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81232,"user_id":null,"body":"USING: strings sequences ;\nIN: kata\n: filter-seq ( seq -- new-seq ) [ string? ] reject ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81233,"user_id":527,"body":"USING: math sequences ;\nIN: kata\n: filter-seq ( seq -- new-seq ) [ integer? ] filter ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81234,"user_id":null,"body":"USING: sequences strings ;\nIN: kata\n: filter-seq ( seq -- new-seq ) [ string? ] reject ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81235,"user_id":713,"body":"USING: kernel sequences strings ;\nIN: kata\n: filter-seq ( seq -- new-seq ) [ string? not ] filter ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81236,"user_id":null,"body":"USING: strings sequences kernel ;\nIN: kata\n: filter-seq ( seq -- new-seq ) [ string? not ] filter ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81237,"user_id":null,"body":"USING: kernel sequences strings ;\nIN: kata\n\n: filter-seq ( xs -- ys ) [ string? not ] filter ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81238,"user_id":104,"body":"! 2022 nomennescio\nUSING: math sequences ;\nIN: kata\n: filter-seq ( seq -- new-seq ) [ integer? ] filter ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81239,"user_id":29,"body":"USING: math sequences ;\nIN: kata\n: filter-seq ( seq -- new-seq ) [ number? ] filter ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"53dc54212259ed3d4f00071c":[{"id":81240,"user_id":527,"body":"USING: sequences ;\nIN: sum-array\n: sum-array ( nums -- n ) sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81241,"user_id":null,"body":"USING: kernel sequences ;\nIN: sum-array\n\nALIAS: sum-array sum","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81242,"user_id":104,"body":"! 2022 nomennescio\nUSING: sequences ;\nIN: sum-array\n\nALIAS: sum-array sum","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81243,"user_id":53,"body":"USING: sequences kernel ;\nIN: sum-array\n: sum-array ( ls -- n ) sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81244,"user_id":null,"body":"USE: sequences\nIN: sum-array\n\nALIAS: sum-array sum","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81245,"user_id":443,"body":"USING: sequences ;\nIN: sum-array\n: sum-array ( ns -- n ) sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81246,"user_id":null,"body":"USING: sequences ;\nIN: sum-array\nALIAS: sum-array sum","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81247,"user_id":null,"body":"USING: kernel sequences math ;\nIN: sum-array\n: sum-array ( nums -- n ) sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81248,"user_id":null,"body":"USING: math sequences ;\nIN: sum-array\n: sum-array ( nums -- n ) 0 [ + ] reduce ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81249,"user_id":106,"body":"USING: kernel sequences math ;\nIN: sum-array\n: sum-array ( nums -- n ) 0 [ + ] reduce ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"53ee5429ba190077850011d4":[{"id":81250,"user_id":null,"body":"USING: kernel math ;\nIN: kata\n\n: double_integer ( n -- 2n ) dup +\n  ! n will be an integer. Double it and return it.\n;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81251,"user_id":168,"body":"USING: kernel math ;\nIN: kata\n\n: double_integer ( n -- n ) 2 * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81252,"user_id":564,"body":"USING: math ;\nIN: kata\n\n: double_integer ( n -- n ) 2 * ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81253,"user_id":564,"body":"USING: math ;\nIN: kata\n\n: double_integer ( n -- n ) 2 * ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81254,"user_id":null,"body":"USING: kernel math ;\nIN: kata\n\n: double_integer ( n -- n+n ) dup + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81255,"user_id":null,"body":"USE: math\nIN: kata\n\n: double_integer ( n -- n ) 2 * ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81256,"user_id":104,"body":"! 2020 nomennescio\nUSING: kernel math ;\nIN: kata\n\n: 2* ( n -- n ) 1 shift ;\n: double_integer ( n -- n ) 2* ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81257,"user_id":527,"body":"USING: kernel math ;\nIN: kata\n\n: double_integer ( n -- n ) dup + ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"541c8630095125aba6000c00":[{"id":81258,"user_id":527,"body":"USING: math ;\nIN: kata\n: digital-root ( n -- root ) 1 - 9 mod 1 + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81259,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math ;\nIN: kata\n\n: digital-root ( n -- root ) dup 9 > [ [ 10 \/i digital-root ] [ 10 mod ] bi + digital-root ] when ; inline recursive","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81260,"user_id":713,"body":"USING: kernel math sequences ;\nIN: kata\n\n: number>digits ( n -- seq )\n  [ dup 0 = not ] [ 10 \/mod ] produce reverse! nip ;\n: digital-root ( n -- root )\n  [ dup 10 >= ] [ number>digits sum ] while ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81261,"user_id":null,"body":"USING: kernel math math.parser sequences ;\nIN: kata\n: digital-root ( n -- root )\n  [ number>string [ CHAR: 0 - ] map-sum dup 9 > ] loop ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81262,"user_id":29,"body":"USING: math kernel ;\nIN: kata\n: digital-root ( n -- root ) dup 0 = [ ] [ 9 mod dup 0 = swap 9 swap ? ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81263,"user_id":null,"body":"USING: kernel math sequences ;\nIN: kata\n\n: digits ( n -- seq )\n  [ dup 0 > ] [ 10 \/mod ] produce nip ;\n\n: digital-root ( n -- root )\n  digits 0 [ + ] reduce dup 9 > [ digital-root ] when ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81264,"user_id":null,"body":"USING: kernel locals math math.parser sequences ;\nIN: kata\n\n: digital-root ( n -- root ) dup 9 > [\n    number>string [ CHAR: 0 - ] map sum digital-root\n  ] when ; recursive","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81265,"user_id":null,"body":"USING: kernel math sequences ;\nIN: kata\n\n: digital-root ( n -- root )\n    [ dup 0 > ] [ 10 \/mod ] produce nip sum\n    dup 9 > [ digital-root ] when ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81266,"user_id":1339,"body":"USING: math ;\nIN: kata\n: digital-root ( n -- root ) [ 0 ] [ 1 - 9 mod 1 + ] if-zero ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81267,"user_id":564,"body":"USING: kernel math sequences ;\nIN: kata\n\n! Couldn't resist using this.\n! https:\/\/docs.factorcode.org\/content\/word-number__gt__digits,project-euler.common.html\n: number>digits ( n -- seq )\n  [ dup 0 = not ] [ 10 \/mod ] produce reverse! nip ;\n\n: digital-root ( n -- root ) \n  [ dup 10 < ] [ number>digits sum ] until ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"542c0f198e077084c0000c2e":[{"id":81268,"user_id":168,"body":"USING: kernel math.primes.factors sequences ;\nIN: divisors\nALIAS: divs divisors\n: divisors ( n -- x ) divs length ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81269,"user_id":null,"body":"USING: kernel math.primes.factors sequences ;\nRENAME: divisors math.primes.factors => divs\nIN: divisors\n\n: divisors ( m -- n ) divs length ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81270,"user_id":104,"body":"! 2020 nomennescio\nUSING: kernel sequences syntax ;\nQUALIFIED-WITH: math.primes.factors m\nIN: divisors\n: divisors ( n -- ndivisors ) m:divisors length ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81271,"user_id":713,"body":"USING: kernel math math.ranges sequences ;\nIN: divisors\n: divisors ( n -- x )\n  dup [1,b] swap [ swap mod zero? ] curry filter length ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81272,"user_id":29,"body":"USING: math.primes.factors sequences ;\nIN: divisors\n: divisors ( n -- x ) math.primes.factors:divisors length ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81273,"user_id":null,"body":"USING: sequences ;\nQUALIFIED: math.primes.factors\nIN: divisors\n: divisors ( n -- x ) math.primes.factors:divisors length ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81274,"user_id":null,"body":"USING: kernel math sequences ;\nIN: divisors\n: divisors ( n -- x ) dup <iota> swap [ swap 1 + rem zero? ] curry count ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81275,"user_id":null,"body":"USING: kernel math sequences ;\nIN: divisors\n: divisors ( n -- x ) dup <iota> swap [ swap 1 + rem zero? 1 0 ? ] curry map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81276,"user_id":null,"body":"USING: kernel math math.functions math.primes.factors sequences sequences.extras ;\nIN: divisors\n\n: divisors ( n -- count ) group-factors [ last 1 + ] map-product ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81277,"user_id":53,"body":"USING: arrays kernel math.functions math.ranges sequences\nsequences.product sorting math.primes.factors ;\nIN: divisors\n    \n: divisors ( n -- x ) \n    dup 1 =\n    [ 1array ] [\n        group-factors dup empty? [\n            [ first2 [0,b] [ ^ ] with map ] map\n            [ product ] product-map natural-sort\n        ] unless\n    ] if length ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"542f0c36d002f8cd8a0005e5":[{"id":81278,"user_id":104,"body":"! 2022 nomennescio\nUSING: math ;\nIN: last-chair\n\n: last-chair ( n -- x ) 1 - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81279,"user_id":713,"body":"USING: math.order math ;\nIN: last-chair\n\n: last-chair ( n -- x ) 1 - 2 max ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81280,"user_id":null,"body":"USE: math\nIN: last-chair\n\n: last-chair ( n -- x ) 1 - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81281,"user_id":527,"body":"USING: math ;\nIN: last-chair\n\n: last-chair ( n -- x ) 1 - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81282,"user_id":53,"body":"USING: kernel math ;\nIN: last-chair\n\n: last-chair ( n -- x ) 1 - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"544675c6f971f7399a000e79":[{"id":81283,"user_id":29,"body":"USE: eval\nIN: string-to-number\n\n: string-to-number ( str -- x ) eval( -- r ) ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81284,"user_id":104,"body":"! 2022 nomennescio\nUSING: math.parser ;\nIN: string-to-number\n\nALIAS: string-to-number dec>","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81285,"user_id":527,"body":"USE: math.parser\nIN: string-to-number\nALIAS: string-to-number string>number","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81286,"user_id":null,"body":"USING: kernel math sequences ;\nIN: string-to-number\n\n! Challenge: use only kernel, math, and sequences vocabularies.\n: string-to-number ( str -- n )\n    1 0 rot <reversed>\n    [ 48 - dup neg? [ drop neg ] [ pick * + [ 10 * ] dip ] if ] each nip ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81287,"user_id":713,"body":"USING: math.parser ;\nIN: string-to-number\n\n: string-to-number ( str -- x ) string>number ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81288,"user_id":null,"body":"USING: kernel math.parser ;\nIN: string-to-number\n\n: string-to-number ( str -- x ) string>number ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"54edbc7200b811e956000556":[{"id":81289,"user_id":null,"body":"USE: sequences\nIN: sheep-count\n: count-sheep ( sheep -- n ) [ ] count ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81290,"user_id":53,"body":"USING: sequences ;\nIN: sheep-count\n: count-sheep ( sheep -- n ) [ ] count ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81291,"user_id":645,"body":"USING: kernel sequences ;\nIN: sheep-count\n: count-sheep ( sheep -- n ) [ ] count ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81292,"user_id":104,"body":"! 2022 nomennescio\nUSING: sequences ;\nIN: sheep-count\n\n: count-sheep ( sheep -- n ) [ ] count ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81293,"user_id":null,"body":"USING: kernel sequences ;\nIN: sheep-count\n: count-sheep ( sheep -- n ) [ 1 0 ? ] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81294,"user_id":null,"body":"USING: kernel sequences ;\nIN: sheep-count\n: count-sheep ( sheep -- n ) sift length ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81295,"user_id":null,"body":"USING: kernel sequences ;\nIN: sheep-count\n: count-sheep ( sheep -- n ) [ t eq? ] count ; ","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"551b4501ac0447318f0009cd":[{"id":81296,"user_id":104,"body":"! 2022 nomennescio\nUSING: prettyprint ;\nIN: kata\n\nALIAS: boolean>string unparse","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81297,"user_id":29,"body":"USING: prettyprint ;\nIN: kata\n\n: boolean>string ( ? -- str ) unparse ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81298,"user_id":null,"body":"USE: kernel\nIN: kata\n\n: boolean>string ( ? -- str ) \"t\" \"f\" ? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81299,"user_id":168,"body":"USING: kernel ;\nIN: kata\n\n: boolean>string ( ? -- str ) [ \"t\" ] [ \"f\" ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81300,"user_id":53,"body":"USING: combinators kernel locals math prettyprint ;\nIN: kata\n\n:: boolean>string ( b -- str )\n  {\n    { [ b t = ] [ \"t\" ] }\n    [ \"f\" ]\n  } cond ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81301,"user_id":null,"body":"USING: kernel ;\nIN: kata\n\n: boolean>string ( ? -- str ) \"t\" \"f\" ? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5544c7a5cb454edb3c000047":[{"id":81302,"user_id":null,"body":"USING: combinators.short-circuit fry kernel math ;\nIN: bouncing_ball\n\n: bb-valid? ( h bounce window -- ? )\n    {\n        [ 2drop 0 > ]\n        [ drop nip 0 > ]\n        [ drop nip 1 < ]\n        [ nip > ]\n    } 3&& ;\n    \n: bounces ( h bounce window -- n )\n    [ 0 ] 3dip '[ [ 1 + ] dip _ * dup _ > ] loop drop 2 * 1 - ;\n\n: bouncing_ball ( h bounce window -- n )\n    3dup bb-valid? [ bounces ] [ 3drop -1 ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81303,"user_id":168,"body":"USING: kernel math math.functions math.order ;\nIN: bouncing_ball\n\n: bouncing_ball ( h bounce window -- n )\n  rot 3dup [ - ] keep [ 0 1 between? ] [ 0 < ] [ 0 > ] tri* and and\n  [ \/ swap logn ceiling >integer 2 * 1 - ]\n  [ 3drop -1 ]\n  if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81304,"user_id":29,"body":"USING: kernel math math.functions prettyprint ;\nIN: bouncing_ball\n\n: bouncing_ball ( h bounce window -- n )\n  3dup overd > [ 0 > ] [ [ 0 > ] [ 1 < ] bi and ] [ ] tri* and and\n  [ rot \/ [ log ] bi@ swap \/ ceiling >integer 2 * 1 -\n  ] [ 3drop -1 ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81305,"user_id":null,"body":"USING: kernel math math.functions ;\nIN: bouncing_ball\n\n: bouncing_ball ( h bounce window -- n )\n  3dup [ dup 0 > ] [ [ 0 > ] [ 1 < ] bi and ] [ roll < ] tri* and and\n  [ rot \/ swap [ log ] bi@ \/mod zero? [ 1 - ] when 2 * 1 + ] [ 3drop -1 ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81306,"user_id":null,"body":"USING: kernel math math.functions math.intervals math.order sequences ;\nIN: bouncing_ball\n\n<PRIVATE\n! This would be simpler with local variables, but I'm forcing myself to code point-free to get the hang of the stack.\n: check-conditions ( h b w -- ? ) rot dup [ - ] dip [ 0 1 (a,b) interval-contains? ] [ 0 < ] [ 0 > ] tri* and and ;\n\n! A ball bouncing to exactly the mother's level is not seen by her, so if the logarithm we calculate is integral we must subtract\n! one. We should really be worrying about floating-point approximations, but let's see if this approach is good enough.\n: (bouncing_ball) ( h b w -- n ) rot \/ swap logn 1 - ceiling >integer 2 * 1 + ;\nPRIVATE>\n\n: bouncing_ball ( h bounce windex -- n ) 3dup check-conditions [ (bouncing_ball) ] [ 3drop -1 ] if ;\n\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81307,"user_id":null,"body":"USING: combinators locals math sequences ;\nIN: bouncing_ball\n\n:: bouncing_ball ( h b w -- n )\n  {\n    { [ h 0 <= ] [ -1 ] }\n    { [ b 0 <= ] [ -1 ] }\n    { [ b 1 >= ] [ -1 ] }\n    { [ h w <= ] [ -1 ] }\n    [ h b * b w bouncing_ball 2 + ]\n  } cond ;\n!   h bounce [ * ] bounce window bouncing_ball 2 +\n!   ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81308,"user_id":null,"body":"USING: kernel locals math math.functions math.private ;\nIN: bouncing_ball\n\n:: bouncing_ball ( h bounce window -- n )\n  h 0 >   bounce 0 >   bounce 1 <   window h <   and and and\n  [ window h \/ bounce logn ceiling float>bignum 2 * 1 - ] [ -1 ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81309,"user_id":53,"body":"USING: kernel math combinators locals ;\nIN: bouncing_ball\n\n:: bouncing_ball ( h b w -- n )\n  {\n    { [ h 0 <= ] [ -1 ] }\n    { [ b 0 <= ] [ -1 ] }\n    { [ b 1 >= ] [ -1 ] }\n    { [ w h >= ] [ -1 ] }\n    { [ w 0 <= ] [ -1 ] }\n    [ h b * b w bouncing_ball 2 + ]\n  } cond ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81310,"user_id":1339,"body":"USING: kernel locals math math.order ;\nIN: bouncing_ball\n\n:: bouncing_ball ( h bounce window -- n )\n  h 0 <= bounce 0 <= or bounce 1 >= or window h >= or\n  [ -1 ] [ h bounce * bounce window bouncing_ball 2 + ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5545f109004975ea66000086":[{"id":81311,"user_id":null,"body":"USING: math.functions ;\nIN: kata\n\n: is-divisible ( n x y -- ? ) lcm divisor? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81312,"user_id":null,"body":"USING: kernel math.functions ;\nIN: kata\n\n: is-divisible ( n x y -- ? )\n    rot [ swap divisor? ] curry both? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81313,"user_id":564,"body":"USING: kernel locals math ;\nIN: kata\n\n:: is-divisible ( n x y -- res )\n  n x mod 0 =\n  n y mod 0 =\n  and ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81314,"user_id":713,"body":"USING: math kernel ;\nIN: kata\n\n: is-divisible ( n x y -- res ) pick swap mod swap pick swap mod + nip zero? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81315,"user_id":null,"body":"USING: kernel math math.functions ;\nIN: kata\n\n: is-divisible ( n x y -- res ) lcm mod 0 = ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81316,"user_id":null,"body":"USING: kernel math ;\nIN: kata\n\n: is-divisible ( n x y -- res ) rot dup rot rem 0 = 2over swap rem 0 = and >boolean 2nip ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81317,"user_id":null,"body":"USING: kernel math.functions ;\nIN: kata\n\n: is-divisible ( n x y -- res ) [ divisor? ] bi-curry@ bi and ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81318,"user_id":29,"body":"USING: kernel locals math.functions ;\nIN: kata\n\n:: is-divisible ( n x y -- res ) n x divisor? n y divisor? and ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81319,"user_id":53,"body":"USING: kernel math locals ;\nIN: kata\n\n:: is-divisible ( n x y -- res ) n x mod zero? n y mod zero? and ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81320,"user_id":104,"body":"! 2020 nomennescio\nUSING: kernel locals math.functions ;\nIN: kata\n:: is-divisible ( n x y -- res ) n x divisor? n y divisor? and ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55466989aeecab5aac00003e":[{"id":81321,"user_id":null,"body":"USING: kernel math math.order sequences ;\nIN: rect2square\n\n: chop ( m n -- m' n' )\n    [ min ] [ - abs ] 2bi ;\n\n: squareify ( l w -- seq )\n    [ dup zero? not ] [ chop over ] produce 2nip ;\n\n: sq_in_rect ( l w -- seq )\n    2dup = [ 2drop f ] [ squareify ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81322,"user_id":104,"body":"! 2022 nomennescio\nUSING: arrays kernel math sequences ;\nIN: rect2square\n\n: squares ( h w -- seq ) 2dup = [ drop 1array ] [ 2dup > [ swap squares ] [ over - dupd squares swap prefix ] if ] if ; inline recursive\n: sq_in_rect ( h w -- seq ) 2dup = [ 2drop f ] [ squares ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81323,"user_id":29,"body":"USING: kernel sequences vectors math math.order prettyprint ;\nIN: rect2square\n\n: sq_in_rect-help ( l w -- seq )\n  2dup = [ drop 1vector ]\n  [ [ min ] [ max ] 2bi dupd over - sq_in_rect-help [ push ] keep ] if\n  ;\n\n: sq_in_rect ( l w -- seq )\n  2dup = [ 2drop f ]\n  [ [ min ] [ max ] 2bi dupd over - sq_in_rect-help [ push ] keep reverse ] if\n  ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81324,"user_id":null,"body":"USING: kernel math math.order sequences ;\nIN: rect2square\n\n: sq_in_rect ( l w -- seq )\n  2dup = [ 2drop f ] [\n    [ over 0 > ] [ [ max ] [ min ] 2bi [ - ] keep dup ] produce 2nip\n  ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81325,"user_id":null,"body":"USING: arrays kernel math sequences ;\nIN: rect2square\n\n: order ( a b -- bigger smaller )\n  2dup < [ swap ] when ;\n  \n: squares ( bigger smaller -- seq )\n  order 2dup = [ drop 1array ] [ 2dup - over squares swap prefix nip ] if ;\n\n: sq_in_rect ( l w -- seq )\n  squares dup length 1 = [ drop f ] when ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81326,"user_id":null,"body":"USING: kernel math math.order make fry continuations ;\nIN: rect2square\n\n: sq_in_rect ( l w -- seq )\n  2dup = [ 2drop f ] [\n    [\n      [ 2dup min 0 > ] [\n        2dup < [ swap ] when\n        dup , tuck -\n      ] while drop drop\n    ] { } make \n  ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81327,"user_id":null,"body":"USING: arrays kernel locals math math.order math.ranges sequences ;\nIN: rect2square\n\n:: (sq_in_rect) ( l w -- seq )\n  l w * 0 = [\n    { }\n  ] [\n    l w min :> new-length\n    l w max new-length - :> new-width\n    \n    new-length new-width (sq_in_rect) new-length prefix\n  ] if ; recursive\n\n: sq_in_rect ( l w -- seq ) 2dup = [\n    2drop f\n  ] [\n    (sq_in_rect)\n  ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81328,"user_id":168,"body":"USING: kernel sorting math sequences ;\nIN: rect2square\n\n: sq_in_rect ( l w -- seq )\n  2dup = \n  [ 2drop f ]\n  [ [ sort-pair over zero? not ]\n    [ over - over ]\n    produce 2nip ]\n  if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81329,"user_id":1339,"body":"USING: kernel math sorting sequences ;\nIN: rect2square\n\n: sq_in_rect ( l w -- seq )\n  [ sort-pair swap [ - ] keep [ f ] when-zero ] follow nip\n  rest [ length 1 > ] keep and ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5547cc7dcad755e480000004":[{"id":81330,"user_id":1339,"body":"USING: assocs kernel locals sequences math math.order math.primes.factors ;\nIN: is-my-friend-cheating\n\n:: remove_nb ( n -- ans )\n  n n 1 + * 2\/ 1 + divisors [ 1 - ] map dup reverse zip\n  [ [ 1 n between? ] all? ] filter ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81331,"user_id":168,"body":"USING: kernel math math.ranges sequences arrays ;\nIN: is-my-friend-cheating\n\n: helper ( n n -- n n n n ) 2dup [ - ] [ nip 1 + ] 2bi ;\n\n: remove_nb ( n -- ans )\n  [ dup 1 + * 2 \/ ] keep helper \/i swap [a,b]\n  [ helper \/mod zero? [ 2array ] [ 2drop f ] if ]\n  map sift nip\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81332,"user_id":104,"body":"! 2022 nomennescio\nUSING: arrays kernel locals math math.order math.ranges sequences ;\nIN: is-my-friend-cheating\n\n: map-if ( ... seq quot: ( ... elt -- ... newelt ? ) -- ... newseq ) V{ } clone [ [ swap [ push ] [ 2drop ] if ] curry compose each ] keep ; inline\n:: remove_nb ( n -- ans ) \n  n n 1 + * 2\/ :> p n n 1 - * 2\/ n 1 + \/i 1 max n [a,b]  \n  [ :> i i p i - i 1 + \/mod over [ 2array ] 2dip [ 0 = ] [ n <= ] bi* and ] map-if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81333,"user_id":29,"body":"USING: kernel math math.ranges prettyprint sequences arrays ;\nIN: is-my-friend-cheating\n\n: remove_nb ( n -- ans )\n  dup [ dup 1 + * 2 \/i ] [ [1,b] ] bi\n  [ [ 2dup ] dip [ - ] keep 1 + \/ [ >= ] keep 1 rem zero? and ] filter\n  [ [ dupd [ - ] keep 1 + \/i ] keep swap 2array ] map 2nip\n  ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81334,"user_id":53,"body":"USING: assocs kernel locals sequences math math.order math.primes.factors ;\nIN: is-my-friend-cheating\n\n: div-win ( n -- xs )\n  dup 1 + * 2\/ 1 + divisors [ 1 - ] map dup reverse zip ;\n\n:: remove_nb ( n -- ans )\n  n div-win [ [ 1 n between? ] all? ] filter ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81335,"user_id":null,"body":"USING: kernel math sequences locals prettyprint ;\nIN: is-my-friend-cheating\n\n:: test-b ( d m n -- b ? )\n  m 0 =  d n < and d swap\n;\n\n:: calc-abm ( i n2 -- a b m )\n  i 1 + n2 i 1 + - i 2 + \/mod\n;\n\n:: remove_nb* ( seq! n2 n -- seq )\n  n\n  [\n    n2 calc-abm ! ( a b m )\n    n test-b    ! ( a b ? )\n    [ \n      { } swap prefix swap prefix\n      seq swap suffix seq!\n    ] [\n      drop drop\n    ] if\n  ] each-integer\n  seq\n;\n: remove_nb ( n -- ans ) \n  { } swap dup\n  dup 1 + * 2 \/i swap\n  remove_nb*\n;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"554f76dca89983cc400000bb":[{"id":81336,"user_id":null,"body":"USING: arrays kernel math math.functions math.primes.factors sequences ;\nIN: diophantine\n\n<PRIVATE\n: good? ( d1 d2 -- ? ) [ >= ] [ - 4 divisor? ] 2bi and ;\n: make-pair ( n d1 -- pair ) [ \/ ] keep [ + 2 \/ ] [ - 4 \/ ] 2bi 2array ;\nPRIVATE>\n\n: sol-equa ( n -- seq )\n    dup\n    dup divisors\n    [ [ \/ ] keep good? ] with filter\n    [ make-pair ] with map ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81337,"user_id":29,"body":"USING: kernel math math.functions math.ranges sequences.extras arrays ;\nIN: diophantine\n\n: sol-equa ( n -- m )\n  dup sqrt >integer [1,b] over\n  [ swap 2dup dup [ \/i ] dip - 4 [ rem 0 = ] 2bi@ and ] over\n  [ over \/i over - 4 \/i dup 2 * [ + ] curry dip 2array ] [ curry ] 2bi@\n  filter-map swap drop ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81338,"user_id":null,"body":"USING: kernel math math.primes.factors math.functions sequences prettyprint ;\nIN: diophantine\n\n: 2-seq       ( x y -- {xy} )   { } swap prefix swap prefix ;\n: isqrt       ( x -- y )        sqrt floor >integer ;\n: sum         ( seq -- x )      0 [ + ] reduce ;\n: ab-even?    ( {ab} -- ? )     sum even? ;\n: a-ab2-even? ( {ab} -- ? )     [ first ] [ sum 2 \/i ] bi - even?  ;\n: get-match   ( a x -- {ab} )   over \/i 2-seq ;\n: get-x       ( a b -- x )      + 2 \/i ;\n: get-y       ( a b -- y )      over + 4 \/i swap 2 \/i swap - abs ;\n: get-xy      ( {ab} -- {xy} )  [ first2 get-x ] [ first2 get-y ] bi 2-seq ;\n\n: divisor-pairs ( n -- seq )\n  dup divisors\n  [ over isqrt <= ] filter\n  [ over get-match ] map\n  [ [ ab-even? ] [ a-ab2-even? ] bi and ] filter\n  nip\n;\n\n\n: sol-equa    ( n -- m )        divisor-pairs [ get-xy ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81339,"user_id":104,"body":"! 2021 nomennescio\nUSING: assocs arrays kernel locals math math.primes.factors sequences ;\nIN: diophantine\n\n! n=(x-2y)(x+2y)=pq, n>0, x>2y>=0, p<=q\n! x-2y = p, x+2y = q => x=p+q:2, y=q-p:4\n\n: divisor-pairs ( divisors -- pairs ) halves 2dup [ length ] bi@ < [ dup first swap [ suffix ] dip ] when <reversed> zip ;\n:: sol-equa ( n -- solutions ) n divisors divisor-pairs [ [ + 2\/ ] [ swap - 2\/ 2\/ ] 2bi ] assoc-map [ 1 shift [ - ] [ + ] 2bi * n = ] assoc-filter ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81340,"user_id":168,"body":"USING: kernel math math.primes.factors sequences ;\nIN: diophantine\n\n: sol-equa ( n -- m )\n  dup divisors [ sq over <= ] filter\n  [ 2dup \/ [ + 2 \/ ] [ swap - 4 \/ ] 2bi\n    2dup [ integer? ] both? [ { } 2sequence ] [ 2drop { } ] if ] map\n  harvest nip\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81341,"user_id":1339,"body":"USING: arrays kernel math math.primes.factors sequences ;\nIN: diophantine\n\n: sol-equa ( n -- m )\n  divisors dup length 1 + 2\/ [ tail* reverse ] [ head ] 2bi\n  [ [ + 2 \/ ] [ - 4 \/ ] 2bi 2array ] 2map [ [ integer? ] all? ] filter ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"555624b601231dc7a400017a":[{"id":81342,"user_id":29,"body":"USING: kernel math prettyprint ;\nIN: josephus-survivor\n\n: g ( n k -- x ) over 2 < [ 2drop 0 ] [ 2dup [ 1 - ] dip g + swap mod ] if ;\n\n: josephus-survivor ( n k -- x ) g 1 + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81343,"user_id":null,"body":"USING: kernel sequences.extras math.ranges arrays math sequences locals ;\nIN: josephus-survivor\n! : josephus-survivor ( n k -- x ) swap dup [1,b] >array swap 1 - [ dupd swap rotate 1 head* ] times swap drop first ;\n:: josephus-survivor ( n k -- x ) n 2 < [ 1 ] [ n 1 - k josephus-survivor k 1 - + n mod 1 + ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81344,"user_id":53,"body":"USING: locals kernel math combinators  ;\nIN: josephus-survivor\n:: josephus-survivor ( n k -- x ) \n    n 1 =\n    [ 1 ] \n    [ n 1 - k josephus-survivor k + 1 - n mod 1 + ] \n    if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81345,"user_id":null,"body":"USING: fry kernel math math.ranges sequences ;\nIN: josephus-survivor\n: josephus-survivor ( n k -- x )\n    [ [1,b] 0 ] dip '[ [ _ + ] dip mod ] reduce 1 + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81346,"user_id":1339,"body":"USING: kernel locals math math.ranges sequences ;\nIN: josephus-survivor\n:: josephus-survivor ( n k -- x ) n [1,b] rest 0 [ [ k + ] dip mod ] reduce 1 + ;\n! a(1) = 1 and, for n > 1, a(n) = (a(n-1) + k) mod n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81347,"user_id":104,"body":"! 2020 nomennescio\nUSING: kernel locals math ;\nIN: josephus-survivor\n:: josephus-survivor ( n k -- x ) n 1 = [ 1 ] [ n 1 - k josephus-survivor k 1 - + n mod 1 + ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81348,"user_id":106,"body":"USING: kernel math locals ;\nIN: josephus-survivor\n:: josephus-survivor ( n k -- x ) n 1 < [ 1 ] [ n 1 - k josephus-survivor k + 1 - n rem 1 + ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81349,"user_id":527,"body":"USING: kernel math math.ranges sequences ;\nIN: josephus-survivor\n: josephus-survivor ( n k -- x ) swap [1,b] 1 [ swap pick + swap mod ] reduce nip 1 + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81350,"user_id":527,"body":"USING: kernel locals math math.ranges sequences ;\nIN: josephus-survivor\n:: josephus-survivor ( n k -- x ) n [1,b] 1 [ swap k + swap mod ] reduce 1 + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81351,"user_id":168,"body":"USING: kernel math locals ;\nIN: josephus-survivor\n:: josephus-survivor ( n k -- x )\n  n 1 < [ 1 ] [ n 1 - k josephus-survivor k + 1 - n mod 1 + ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"556deca17c58da83c00002db":[{"id":81352,"user_id":null,"body":"USING: kernel locals math sequences ;\nIN: kata\n\n<PRIVATE\n! { a b c } -> { a b c a+b+c }\n: tri-iter ( seq -- seq' ) dup sum suffix ;\nPRIVATE>\n\n: tribonacci ( sig n -- nterms ) [ tri-iter unclip ] replicate nip ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81353,"user_id":null,"body":"USING: combinators.smart continuations kernel math sequences ;\nIN: kata\n\n: next-trib ( seq -- new-seq )\n    [ [ + + ] preserving ] with-datastack ;\n\n: tribonacci ( seq n -- new-seq )\n    [ [ next-trib ] times ] [ head ] bi ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81354,"user_id":564,"body":"USING: arrays grouping kernel locals math sequences vectors ;\nIN: kata\n\n: vpush ( elt vec -- vec ) tuck push ;\n: to-vec ( arr -- vec ) first3 3 <vector> vpush vpush vpush reverse ;\n:: trib-till ( n vec a b c -- n vec b c d )\n    n 3 <=\n    [ n vec a b c ]\n    [\n        n 1 -\n        a b c + +\n        dup vec vpush swap\n        b swap\n        c swap\n        trib-till\n    ]\n    if\n;\n: clean-trib ( n m vec a b c -- vec )\n    3drop swap drop swap\n    \n    dup 0 <=\n    [ 2drop 0 <vector> ]\n    [ group first ]\n    if\n;\n\n: tribonacci ( sig n -- xs )\n    tuck swap to-vec\n    dup first3\n  \n    trib-till\n    clean-trib\n\n    >array\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81355,"user_id":104,"body":"! 2020 nomennescio\nUSING: kernel locals math math.order prettyprint sequences ;\nIN: kata\n\n: trisum ( seq -- sum-of-final-3 ) 3 tail* sum ;\n: next-tribonacci ( seq -- seq' ) dup trisum suffix ;\n: tribonacci* ( sig n -- tribonacci-seq ) 3 - [ next-tribonacci ] times ;\n:: tribonacci ( sig n -- tribonacci-seq ) sig n tribonacci* n head ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81356,"user_id":168,"body":"USING: kernel sequences math ;\nIN: kata\n: tribonacci ( sig n -- xs ) \n  swap\n  [ 2dup length > ]\n  [ dup 3 tail* sum suffix ]\n  while swap head ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81357,"user_id":645,"body":"USING: kernel locals math arrays sequences ;\nIN: kata\n:: tribonacci ( sig n -- xs ) n 1 < [ { } ] [ sig first 1array sig second sig third sig first sig second + sig third + 3array n 1 - tribonacci append ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81358,"user_id":29,"body":"USING: kernel math sequences vectors arrays ;\nIN: kata\n: tribonacci ( sig n -- xs ) dup 4 < [ head ] [ 3 - [ >vector ] dip [\n    dup 3 tail* sum suffix!\n  ] times >array ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81359,"user_id":null,"body":"USING: arrays kernel math sequences ;\nIN: kata\n\n: tribonacci ( sig n -- xs )\n  [ first3 [ drop [ 2 * ] dip - ] [ nipd [ 2 * ] dip - ] [ -rot + - ] 3tri 3array ] dip\n  [ [ rest ] [ sum [ suffix ] keep ] bi ] replicate nip ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81360,"user_id":null,"body":"USING: kernel sequences math ;\nIN: kata\n: tribonacci ( sig n -- xs ) swap over 3 - [ dup 3 tail* sum suffix ] times swap head ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81361,"user_id":null,"body":"USING: arrays kernel locals math sequences ;\nIN: kata\n\n:: next-trib ( triple -- triple' )\n  triple second\n  triple third\n  over over triple first + +\n  3array ;\n\n:: tribonacci ( sig n -- xs )\n  sig empty? [\n    { }\n  ] [\n    n 3 <= [\n      0 n sig { } subseq-as\n    ] [\n      sig :> csig!\n      sig :> result!\n      \n      n 3 - [\n        csig next-trib csig!\n        result csig third suffix result!\n      ] times\n      \n      result\n    ] if\n  ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"559ce00b70041bc7b600013d":[{"id":81362,"user_id":168,"body":"USING: kernel math ;\nIN: finance\n\n: finance ( n -- result ) dup ?1+ dup ?1+ * * 2\/ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81363,"user_id":564,"body":"USING: kernel locals math ;\nIN: finance\n\n:: finance ( n -- result )\n  n\n  n 1 + *\n  n 2 + *\n  2 \/\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81364,"user_id":492,"body":"! Factor 2019 g964\nUSING: kernel math ;\nIN: finance\n\n: finance ( n -- result ) dup 1 + dup 1 + * * 2 \/ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81365,"user_id":null,"body":"USE: math.polynomials\nIN: finance\n\n: finance ( n -- result ) { 0 1 3\/2 1\/2 } polyval ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81366,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math ;\nIN: finance\n\n! https:\/\/www.wolframalpha.com\/input?i2d=true&i=Sum%5BSum%5Bj%2C%7Bj%2Ci%2C2i%7D%5D%2C%7Bi%2C0%2Cn%7D%5D\n\n! derivation:\n! sum (i,0,n) sum (j,i,2i) j = sum (i,0,n) sum (j,0,i) j+i = sum (i,0,n) ( (sum (j,0,i) j) + (i sum (j,0,i) 1) ) =\n! sum (i,0,n) ( i(i+1)\/2 + 2i(i+1)\/2 ) = sum (i,0,n) 3i(i+1)\/2 = 3\/2 sum (i,0,n) i^2 + i = 3\/2 ( sum (i,0,n) i^2 + sum (i,0,n) i ) =\n! 3\/2 ( n(n+1)(2n+1)\/6 + n(n+1)\/2 ) = 3\/2 n(n+1)\/2((2n+1)\/3 + 1) = 3\/2 n(n+1)\/2((2n+4)\/3) = n(n+1)(2n+4)\/4 = n(n+1)(n+2)\/2 \n\n: finance ( n -- result ) dup 1 + dup 1 + * * 2\/ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81367,"user_id":null,"body":"USING: kernel math.ranges sequences math ;\nIN: finance\n\n: finance ( n -- result ) [0,b] [ dup 2 * [a,b] sum ] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81368,"user_id":29,"body":"USING: kernel math ;\nIN: finance\n\n: finance ( n -- result ) [ ] [ 1 + ] [ 2 + ] tri * * 2 \/i ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81369,"user_id":53,"body":"USING: kernel math locals ;\nIN: finance\n\n:: finance ( n -- result ) 1 n + n * 2 n + * 2 \/ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81370,"user_id":null,"body":"USING: kernel math math.ranges sequences ;\nIN: finance\n\n: finance ( n -- result ) [1,b] [ [ 1 + ] keep dup dup + + 2 \/ * ] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81371,"user_id":null,"body":"USING: kernel math ;\nIN: finance\n\n: finance ( m -- n )\n    [ dup sq + ] [ + 2 \/ ] [ 1 + * ] tri ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"559e3224324a2b6e66000046":[{"id":81372,"user_id":null,"body":"USE: math.polynomials\nIN: kata\n\n: sumin ( n -- x ) { 0 1\/6 1\/2 1\/3 } polyval ;\n: sumax ( n -- x ) { 0 -1\/6 1\/2 2\/3 } polyval ;\n: sumsum ( n -- x ) { 0 0 1 1 } polyval ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81373,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math ;\nIN: kata\n: sumin ( n -- x ) [ 1\/6 * ] [ 1 + ] [ 2 * 1 + ] tri * * ;\n: sumax ( n -- x ) [ 1\/6 * ] [ 1 + ] [ 4 * 1 - ] tri * * ;\n: sumsum ( n -- x ) [ sumin ] [ sumax ] bi + ; ","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81374,"user_id":29,"body":"USING: kernel math ;\nIN: kata\n: sumin ( n -- x ) dup 1 + dup 2 * 1 - * * 6 \/i ;\n: sumax ( n -- x ) dup dup dup [ * * ] dip 1 - sumin - ;\n: sumsum ( n -- x ) dup dup 1 + * * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81375,"user_id":713,"body":"USING: kernel locals math math.functions ;\nIN: kata\n:: sumin ( n -- x ) \n  n 3 ^\n  n n 1 - * 2 n * 1 - * 3 \/i -\n  n n 1 - * 2 \/i -\n;\n:: sumax ( n -- x )\n  n n 1 - * 2 \/i 3 * n +\n  n n 1 - * 2 n * 1 - * 3 \/i +\n;\n:: sumsum ( n -- x )\n  n n * n 1 + * \n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81376,"user_id":null,"body":"USING: kernel math math.statistics sequences ;\nIN: kata\n! \u03a3(i(1+2(n-i)))=(2n+1)\u03a3(i)-2\u03a3(i\u00b2)\n: sumin ( n -- x )\n  dup 1 + <iota> [ [ 2 * 1 + ] [ sum ] bi* * ] [ sum-of-squares 2 * ] bi - ;\n! \u03a3(i(1+2(i-1)))=2\u03a3(i\u00b2)-\u03a3(i)\n: sumax ( n -- x )\n  1 + <iota> [ sum-of-squares 2 * ] [ sum ] bi - ;\n! 2n\u03a3(i)\n: sumsum ( n -- x )\n  [ 1 + <iota> sum ] keep 2 * * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81377,"user_id":null,"body":"USING: assocs kernel math math.order math.ranges sequences ;\nIN: kata\n\n! Idea:\n!\n!  { 1 2 ... n  } [ { 1 2 ... n } [ f ] with map-sum ] map-sum\n!\n! iterates over all pairs (i, j) without the need to generate all n^2 pairs at once.\n!\n! But this is still too slow to pass the full codwars test suite in reasonable time.\n! So we will just calculate the results directly using formulae from simple algebra.\n: sum-to-n ( n f: ( a b -- n ) -- sum ) [ [1,b] dup ] dip [ with map-sum ] 2curry map-sum ; inline\n\n! : sumin ( n -- x ) [ min ] sum-to-n ;\n! : sumax ( n -- x ) [ max ] sum-to-n ;\n! : sumsum ( n -- x ) [ + ] sum-to-n ;\n: sumin ( n -- x ) [ ] [ 1 + ] [ 2 * 1 + ] tri * * 6 \/ ;\n: sumax ( n -- x ) [ ] [ 1 + ] [ 4 * 1 - ] tri * * 6 \/ ;\n: sumsum ( n -- x ) [ ] [ ] [ 1 + ] tri * * ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81378,"user_id":53,"body":"USING: kernel math locals ;\nIN: kata\n:: sumin ( n -- x ) n n 1 + * 2 n * 1 + * 6 \/i ;\n:: sumax ( n -- x ) n n 1 + * 4 n * 1 - * 6 \/i ;\n:: sumsum ( n -- x ) n 1 + n * n * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81379,"user_id":null,"body":"USING: kernel locals math math.order math.ranges sequences ;\nIN: kata\n\n:: calc-field ( n quot -- x )\n  0 :> result!\n  n [1,b] [ quot call ] map\n  sum ; inline\n\n: intsum ( n -- x ) dup 1 + * 2 \/i ; ! sum of 1 to n\n\n: sumfrom ( n m -- x )\n  intsum          ! n sm\n  swap 1 - intsum ! sm n -> sm sn\n  - ;             ! sm - sn\n\n:: sumin ( n -- x ) n [| x | 1 x sumfrom n x - x * + ] calc-field ;\n:: sumax ( n -- x ) n [| x | x n sumfrom x 1 - x * + ] calc-field ;\n:: sumsum ( n -- x ) n [| x | x 1 + x n + sumfrom ] calc-field ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81380,"user_id":168,"body":"USING: kernel math ;\nIN: kata\n: sumin ( n -- x ) dup dup 2 * 3 + * 1 + * 6 \/ ;\n: sumax ( n -- x ) dup dup 4 * 3 + * 1 - * 6 \/ ;\n: sumsum ( n -- x ) dup dup 1 + * * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81381,"user_id":null,"body":"USING: kernel math math.ranges math.statistics sequences ;\nIN: kata\n: sumin ( n -- x ) [1,b] 0 [ dup * + ] reduce ;\n: sumax ( n -- x ) [ sumin ] [ <iota> <reversed> cum-sum sum + ] bi ;\n: sumsum ( n -- x ) [ sumin ] [ sumax + ] bi ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55aa075506463dac6600010d":[{"id":81382,"user_id":53,"body":"USING: arrays kernel math math.functions math.primes.factors math.ranges math.statistics sequences ;\nIN: recreation-one\n\n: square? ( n -- ? ) dup sqrt >integer sq = ;\n: list-squared ( m n -- seq )\n  [a,b] [ dup divisors sum-of-squares 2array ] map [ second square? ] filter ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81383,"user_id":null,"body":"USING: assocs kernel math math.functions math.primes.factors\nmath.ranges math.statistics sequences ;\nIN: recreation-one\n\n: integral?  ( x -- ? ) dup >integer number= ;\n: divsum\u00b2    ( m -- n ) divisors sum-of-squares ;\n: divsum-sq? ( n -- ? ) divsum\u00b2 sqrt integral? ;\n\n: list-squared ( m n -- seq )\n    [a,b] [ divsum-sq? ] filter [ dup divsum\u00b2 ] map>alist ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81384,"user_id":29,"body":"USING: kernel math math.ranges sequences math.primes.factors arrays math.functions ;\nIN: recreation-one\n\n: is-sq ( n -- ? ) dup sqrt >integer sq = ;\n: list-squared ( m n -- seq ) [a,b]\n  [ dup divisors [ sq ] map-sum 2array ] map\n  [ 1 swap nth is-sq ] filter ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81385,"user_id":null,"body":"USING: arrays kernel math math.functions math.primes.factors math.ranges sequences prettyprint ;\nIN: recreation-one\n\n: list-squared ( m n -- seq )\n  [a,b] [ dup divisors [ 2 ^ ] map-sum 2array ] map\n  [ last dup sqrt mod zero? ] filter\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81386,"user_id":null,"body":"USING: arrays kernel math math.functions math.primes.factors math.ranges sequences ;\nIN: recreation-one\n\n<PRIVATE\n: sum-of-divisor-squares ( n -- n ) group-factors [ first2 [ 1 + 2 * ^ 1 - ] [ drop 2 ^ 1 - ] 2bi \/ ] map product ;\n: square? ( n -- ? ) dup sqrt >integer sq = ;\nPRIVATE>\n\n: list-squared ( a b -- seq ) [a,b] [ dup sum-of-divisor-squares 2array ] map [ last square? ] filter ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81387,"user_id":104,"body":"! 2021 nomennescio\nUSING: arrays kernel math math.functions math.ranges math.primes.factors math.statistics sequences ;\nIN: recreation-one\n\n: square? ( n -- ? ) dup sqrt >integer sq = ;\n: list-squared ( m n -- seq ) \n  [a,b] [ dup divisors sum-of-squares 2array ] map\n  [ second square? ] filter \n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81388,"user_id":168,"body":"USING: kernel math math.ranges math.functions math.primes.factors sequences ;\nIN: recreation-one\n\n: list-squared ( m n -- seq )\n  [a,b] [ dup divisors [ sq ] map-sum\n          dup sqrt 1 mod zero? [ { } 2sequence ] [ 2drop f ] if ] \n        map sift ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81389,"user_id":527,"body":"USING: arrays kernel math math.functions math.primes.factors math.ranges math.statistics sequences ;\nIN: recreation-one\n\n: perfect-square? ( n -- ? )\n  dup sqrt mod zero? ;\n\n: list-squared ( m n -- seq )\n  [a,b] [ dup divisors sum-of-squares 2array ] map [ second perfect-square? ] filter ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81390,"user_id":1339,"body":"USING: arrays kernel math math.vectors math.ranges math.functions math.primes.factors sequences ;\nIN: recreation-one\n\n: list-squared ( m n -- seq )\n  [a,b] [ dup divisors dup v. 2array ] map\n  [ second dup sqrt round >integer sq = ] filter ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55b4d87a3766d9873a0000d4":[{"id":81391,"user_id":29,"body":"USING: kernel math math.ranges math.parser sequences arrays ;\nIN: how-much\n\n: how-much ( m n -- ans )\n  [a,b] [ [ 9 rem 1 = ] [ 7 rem 2 = ] bi and ] filter\n  [ dup [ 7 \/i ] [ 9 \/i ] bi [ number>string ] tri@\n  [ \"M: \" prepend ] [ \"B: \" prepend ] [ \"C: \" prepend ] tri* 3array ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81392,"user_id":null,"body":"USING: kernel math math.ranges prettyprint sequences arrays formatting ;\nIN: how-much\n\n: how-much ( m n -- ans )\n  [a,b] [ dup 7 mod 2 = swap 9 mod 1 = and ] filter \n  [ \n    dup dup \n    [ \"M: %d\" sprintf ]\n    [ 7 \/i \"B: %d\" sprintf ]\n    [ 9 \/i \"C: %d\" sprintf ] tri* 3array \n  ] map\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81393,"user_id":null,"body":"USING: arrays interpolate kernel math math.functions math.parser math.ranges sequences ;\nIN: how-much\n\n: valid-amount? ( n -- ? )\n  dup [ 2 - 7 divisor? ] dip 1 - 9 divisor? and ;\n  \n: format ( n -- arr )\n  [ number>string \"M: \" prepend ]\n  [ 2 - 7 \/ number>string \"B: \" prepend ]\n  [ 1 - 9 \/ number>string \"C: \" prepend ] tri 3array ;\n\n: how-much ( m n -- ans )\n  [a,b] [ valid-amount? ] filter [ format ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81394,"user_id":168,"body":"USING: kernel math math.order math.ranges math.parser sequences arrays ;\nIN: how-much\n\n: how-much ( m n -- ans )\n  [ min ] [ max ] 2bi [a,b]\n  [ [ 9 mod 1 = ] [ 7 mod 2 = ] bi and ] filter\n  [ [ number>string \"M: \" swap append ] \n    [ 7 \/i number>string \"B: \" swap append ] \n    [ 9 \/i number>string \"C: \" swap append ] \n    tri 3array ] map\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81395,"user_id":1339,"body":"USING: arrays kernel math math.parser math.ranges math.vectors sequences sorting ;\nIN: how-much\n\n: how-much ( m n -- ans )\n  sort-pair [a,b] [ 63 mod 37 = ] filter\n  [ { 1 7 9 } n\/v vfloor { \"M\" \"B\" \"C\" } [ swap 10 >base \": \" glue ] 2map ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55c45be3b2079eccff00010f":[{"id":81396,"user_id":527,"body":"USING: kernel sequences sorting splitting ;\nIN: kata\n\n: order ( str -- new-str ) \" \" split [ infimum ] sort-with \" \" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81397,"user_id":null,"body":"USING: splitting sequences sorting ascii math.parser ;\nIN: kata\n: helper ( x -- y ) [ digit? ] filter string>number ;\n: order ( str -- new-str ) \" \" split [ helper ] sort-with \" \" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81398,"user_id":104,"body":"! 2022 nomennescio\nUSING: ascii kernel math.order sequences sorting splitting ;\nUSE: prettyprint\nIN: kata\n\n: issue#2638 ( obj1 obj2 -- <=> ) [ [ digit? ] find nip ] bi@ <=> ; ! NOT inline, that will fail\n: order ( str -- str' ) \" \" split [ issue#2638 ] sort \" \" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81399,"user_id":168,"body":"USING: sequences splitting sorting unicode ;\nIN: kata\n\n: digits ( str -- str ) [ digit? ] filter ;\n: order ( str -- new-str ) \" \" split [ digits ] sort-with \" \" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81400,"user_id":527,"body":"USING: ascii kernel sequences sorting splitting ;\nIN: kata\n\n<PRIVATE\n: first-digit ( str -- ch ) [ digit? ] find nip ;\nPRIVATE>\n\n: order ( str -- new-str ) \" \" split [ first-digit ] sort-with \" \" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81401,"user_id":29,"body":"USING: splitting sorting sequences ;\nIN: kata\n\n: order ( str -- new-str ) \" \" split [ natural-sort ] sort-with \" \" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81402,"user_id":null,"body":"USING: sequences sorting splitting ;\nIN: kata\n\n: order ( str -- new-str )\n    \" \" split [ natural-sort first ] sort-with \" \" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55cbc3586671f6aa070000fb":[{"id":81403,"user_id":168,"body":"USING: kernel math ;\nIN: check-factor\n: check-for-factor ( base factor -- n ) mod zero? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81404,"user_id":53,"body":"USING: kernel math.functions ;\nIN: check-factor\n: check-for-factor ( base factor -- n ) divisor? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81405,"user_id":29,"body":"USING: math ;\nIN: check-factor\n: check-for-factor ( base factor -- n ) mod zero? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81406,"user_id":null,"body":"USING: math.functions ;\nIN: check-factor\nALIAS: check-for-factor divisor?","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81407,"user_id":50,"body":"USING: kernel locals math ;\nIN: check-factor\n: check-for-factor ( base factor -- n )  mod    0 = ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81408,"user_id":1339,"body":"USING: math.functions ;\nIN: check-factor\n: check-for-factor ( base factor -- n ) divisor? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81409,"user_id":null,"body":"USING: kernel math ;\nIN: check-factor\n: check-for-factor ( base factor -- n ) rem zero? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81410,"user_id":null,"body":"USE: math.functions\nIN: check-factor\nALIAS: check-for-factor divisor?","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81411,"user_id":15,"body":"USING: math.functions ;\nIN: check-factor\n: check-for-factor ( base factor -- ? ) divisor? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81412,"user_id":527,"body":"USING: kernel math ;\nIN: check-factor\n: check-for-factor ( base factor -- n ) rem 0 = ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55cbd4ba903825f7970000f5":[{"id":81413,"user_id":564,"body":"USING: combinators kernel locals math prettyprint ;\nIN: get-grade\n\n:: get-grade ( a b c -- n )\n  a b + c + 3 \/ :> avg\n  {\n    { [ avg 90 >= ] [ \"A\" ] }\n    { [ avg 80 >= ] [ \"B\" ] }\n    { [ avg 70 >= ] [ \"C\" ] }\n    { [ avg 60 >= ] [ \"D\" ] }\n    [ \"F\" ]\n  } cond ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81414,"user_id":null,"body":"USING: kernel math sequences strings ;\nIN: get-grade\n\n: get-grade ( a b c -- n )\n    + + 3 \/ { 90 80 70 60 0 } [ >= ] with find drop\n    \"ABCDF\" nth 1string ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81415,"user_id":676,"body":"USING: kernel math math.order sequences ;\nIN: get-grade\n\n: 3mean ( a b c -- n ) + + 3.0 \/ ;\n: in-0-4 ( a -- n ) 10.0 \/ >integer 9 min 5 max 9 swap - ;\n: get-grade ( a b c -- n ) 3mean in-0-4 { \"A\" \"B\" \"C\" \"D\" \"F\" } nth ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81416,"user_id":527,"body":"USING: combinators kernel math ;\nIN: get-grade\n: get-grade ( a b c -- n )\n    + + 30 \/i\n    { { 10 [ \"A\" ] } { 9 [ \"A\" ] } { 8 [ \"B\" ] } { 7 [ \"C\" ] } { 6 [ \"D\" ] } [ drop \"F\" ] }\n    case ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81417,"user_id":1339,"body":"USING: kernel math math.order sequences ;\nIN: get-grade\n: get-grade ( a b c -- n ) + + 30 \/i 5 - 0 max 4 min { \"F\" \"D\" \"C\" \"B\" \"A\" } nth ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81418,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math math.order sequences strings ;\nIN: get-grade\nUSE: prettyprint\n\n: get-grade ( a b c -- n ) + + 30 \/i 5 - 0 max \"FDCBAA\" nth 1string ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81419,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math math.order sequences strings ;\nIN: get-grade\nUSE: prettyprint\n\n: get-grade ( a b c -- n ) + + 30 \/i 5 max 9 - neg 0 max \"ABCDF\" nth 1string ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81420,"user_id":null,"body":"USING: kernel math combinators ;\nIN: get-grade\n: get-grade ( a b c -- n )\n  + + 3 \/\n  {\n    { [ dup 60 < ] [ drop \"F\" ] }\n    { [ dup 70 < ] [ drop \"D\" ] }\n    { [ dup 80 < ] [ drop \"C\" ] }\n    { [ dup 90 < ] [ drop \"B\" ] }\n    [ drop \"A\" ]\n  } cond ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81421,"user_id":null,"body":"USING: kernel math math.order strings ;\nIN: get-grade\n: get-grade ( a b c -- n )\n  + + 3 \/ 100 swap - 10 \/mod zero? [ 1 - ] when 0 max\n  dup 3 > [ drop 5 ] when CHAR: A + 1string ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81422,"user_id":null,"body":"USING: kernel math combinators ;\nIN: get-grade\n\n: average ( a b c -- avg ) + + 3 \/ ;\n: get-grade ( a b c -- grade ) average {\n        { [ dup 60 < ] [ drop \"F\" ] }\n        { [ dup 70 < ] [ drop \"D\" ] }\n        { [ dup 80 < ] [ drop \"C\" ] }\n        { [ dup 90 < ] [ drop \"B\" ] }\n        [ drop \"A\" ]\n    } cond ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55d24f55d7dd296eb9000030":[{"id":81423,"user_id":564,"body":"USING: kernel locals math ;\nIN: summation\n\n:: summation ( n -- x )\n  n 1 + 2 \/\n  n * ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81424,"user_id":null,"body":"USING: kernel math.ranges sequences ;\nIN: summation\n: summation ( n -- x ) [1,b] sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81425,"user_id":645,"body":"USING: kernel sequences math.ranges ;\nIN: summation\n: summation ( n -- x ) [1,b] sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81426,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math ;\nIN: summation\n\n: summation ( n -- x ) dup 1 + * 2\/ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81427,"user_id":null,"body":"USING: sequences math.ranges ;\nIN: summation\n: summation ( n -- x ) [1,b] sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81428,"user_id":null,"body":"USING: math sequences ;\nIN: summation\n: summation ( n -- x ) 1 + <iota> sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81429,"user_id":null,"body":"USING: kernel math locals ;\nIN: summation\n\n: summation ( n -- x ) dup 1 + * 2 \/ ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81430,"user_id":713,"body":"USING: math kernel ;\nIN: summation\n: summation ( n -- x ) dup 1 + * 2 \/ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81431,"user_id":50,"body":"USING: kernel math sequences ;\nIN: summation\n: k ( n -- x ) 1 + ;\n: h ( n -- x ) 2 \/  ;\n: summation ( n -- x ) dup k h * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81432,"user_id":53,"body":"USING: kernel math locals ;\nIN: summation\n:: summation ( n -- x ) n 1 + n * 2 \/ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55e6f5e58f7817808e00002e":[{"id":81433,"user_id":492,"body":"! Factor 2019 g964\nUSING: kernel math ;\nIN: seven\n\n: seven ( n -- u v ) 0 swap [ dup 99 > ] [ 10 \/mod 2 * - swap 1 + swap ] while ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81434,"user_id":564,"body":"! Factor 2019 g964\nUSING: kernel locals math ;\nIN: seven\n\n:: more-sevenish ( step n -- step+1 more-sevenish-n )\n  step 1 +\n  \n  n 10 \/i\n  n 10 mod 2 *\n  -\n;\n\n: <100 ( n -- n <100? ) dup 100 < ;\n: >100 ( n -- n >100? ) dup 100 > ;\n\n:: seven ( n -- steps sevenishness )\n  0 n\n  [ <100 ] \n  [ more-sevenish ] until\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81435,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math ;\nIN: seven\n\n: seven ( n -- u v ) 0 swap [ dup 99 > ] [ 10 \/mod 1 shift - [ 1 + ] dip ] while ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81436,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math ;\nIN: seven\n\n: (seven) ( n m -- n' m' ) dup 99 > [ 10 \/mod 1 shift - [ 1 + ] dip (seven) ] when ; \n: seven ( n -- u v ) 0 swap (seven) ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81437,"user_id":null,"body":"! Factor 2019 g964\nUSING: kernel math ;\nIN: seven\n\n: seven ( n -- u v ) 0 swap [ dup 100 < not ] [ 10 \/mod 2 * - swap 1 + swap ] while ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81438,"user_id":null,"body":"USING: kernel math math.order sequences ;\nIN: seven\n\n: seven ( n -- u v ) \n  dup zero? [ drop 0 0 ] [\n    [ 10 \/mod 2 * - dup 99 > ] [ dup ] produce length 1 + swap\n  ] if ;\n\n! This translation is bad. Why are the output parameters reversed? Why is 0 a special case?!","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81439,"user_id":29,"body":"USING: kernel math ;\nIN: seven\n\n: seven ( n -- u v ) 0 swap\n  [ dup 99 > ] [ [ 1 + ] dip 10 \/mod 2 * - ] while ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81440,"user_id":null,"body":"! Factor 2019 g964\nUSING: kernel math ;\nIN: seven\n\n: reduce ( v -- v' ) 10 \/mod 2 * - ;\n: (seven) ( u v -- u' v' ) dup 100 < [ ] [ [ 1 + ] dip reduce (seven) ] if ;\n: seven ( n -- u v ) 0 swap (seven) ;\n\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81441,"user_id":53,"body":"USING: kernel math math.functions combinators locals ;\nIN: seven\n\n:: aux ( cnt m -- u v )\n  m 100 < [ cnt m ] [ cnt 1 + m 10 \/i 2 m 10 mod * - aux ] if\n  ;\n\n:: seven ( n -- u v )\n  0 n aux\n  ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81442,"user_id":null,"body":"USING: kernel math ;\nIN: seven\n\n: seven ( n -- steps result )\n    0 swap [ dup 100 < ] [ 10 \/mod dup + - [ 1 + ] dip ] until ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55f73be6e12baaa5900000d4":[{"id":81443,"user_id":104,"body":"USING: kernel math ;\nIN: goals\n: goals ( la-liga-goals copa-del-rey-goals champions-league-goals -- n ) + + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81444,"user_id":645,"body":"USING: kernel math ;\nIN: goals\n: goals ( a b c -- n ) + + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81445,"user_id":564,"body":"USING: math ;\nIN: goals\n: goals ( a b c -- sum ) + + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81446,"user_id":645,"body":"USING: math ;\nIN: goals\n: goals ( a b c -- n ) + + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81447,"user_id":168,"body":"USING: math ;\nIN: goals\n: goals ( la-liga-goals copa-del-rey-goals champions-league-goals -- n ) + + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81448,"user_id":527,"body":"USING: generalizations ;\nIN: goals\n: goals ( la-liga-goals copa-del-rey-goals champions-league-goals -- n ) 3 nsum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81449,"user_id":null,"body":"USE: math\nIN: goals\n: goals ( la-liga-goals copa-del-rey-goals champions-league-goals -- n ) + + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81450,"user_id":53,"body":"USING: kernel math locals ;\nIN: goals\n:: goals ( a b c -- n ) a b + c + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81451,"user_id":null,"body":"USING: math ;\nIN: goals\n\n: goals ( x y z -- sum ) + + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81452,"user_id":1339,"body":"USING: math ;\nIN: goals\n: goals ( x y z -- n ) + + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55f9bca8ecaa9eac7100004a":[{"id":81453,"user_id":29,"body":"USING: kernel math ;\nIN: kata\n\n: past ( h m s -- n ) spin 60 * + 60 * + 1000 * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81454,"user_id":564,"body":"USING: locals math ;\nIN: kata\n\n:: past ( h m s -- n )\n  h 60 *\n  m + 60 *\n  s + 1000 *\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81455,"user_id":null,"body":"USING: calendar kernel ;\nIN: kata\n\n: past ( h m s -- n )\n    [ 0 0 0 ] 3dip <duration> duration>milliseconds ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81456,"user_id":104,"body":"USING: kernel math ; ! 2020 nomennescio\nIN: kata\n\n: past ( h m s -- n ) [ [ 60 * ] dip + 60 * ] dip + 1000 * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81457,"user_id":null,"body":"USING: arrays kernel math math.polynomials sequences ;\nIN: kata\n\n: past ( h m s -- n ) 3array reverse 60 swap polyval 1000 * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81458,"user_id":null,"body":"USING: arrays math sequences kernel ;\nIN: kata\n\n: past ( h m s -- p ) 3array 0 [ swap 60 * + ] reduce 1000 * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81459,"user_id":null,"body":"USING: kernel math ;\nIN: kata\n\n: past ( h m s -- n )\n    [ 3600 * ] [ 60 * ] [ ] tri*\n    + +\n    1000 *\n    ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81460,"user_id":713,"body":"USING: math kernel ;\nIN: kata\n\n: past ( h m s -- n ) swap 60 * + swap 3600 * + 1000 * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81461,"user_id":53,"body":"USING: kernel math locals ;\nIN: kata\n\n:: past ( h m s -- n ) 1000 s 60 m * 3600 h * + + * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81462,"user_id":null,"body":"USING: kernel math ;\nIN: kata\n\n: past ( h m s -- n )\n    [ 3,600,000 * ] [ 60,000 * ] [ 1000 * ] tri* + + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55fab1ffda3e2e44f00000c6":[{"id":81463,"user_id":null,"body":"USING: kernel math ;\nIN: cockroach\n\n: cockroach-speed ( kmph -- cmps ) 27.77777777777777777777777776 * >integer ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81464,"user_id":null,"body":"USING: math math.functions ;\nIN: cockroach\n\n: cockroach-speed ( kmph -- cmps ) 27.777778 * >integer ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81465,"user_id":null,"body":"USE: math\nIN: cockroach\n\n: cockroach-speed ( kmph -- cmps ) 250 * 9 \/i ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81466,"user_id":null,"body":"USING: kernel math ;\nIN: cockroach\n\n: cockroach-speed ( kmph -- cmps ) 100000 * 3600 \/i ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81467,"user_id":null,"body":"USING: kernel math ;\nIN: cockroach\n\n: cockroach-speed ( kmph -- cmps ) 100000 * 60 60 * \/i  ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81468,"user_id":53,"body":"USING: kernel math math.functions ;\nIN: cockroach\n\n: cockroach-speed ( kmph -- cmps ) 100000 * 3600 \/i ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81469,"user_id":null,"body":"USE: math\nIN: cockroach\n\n: cockroach-speed ( kmph -- cmps ) 100000 * 3600 \/i ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81470,"user_id":1339,"body":"USING: kernel math ;\nIN: cockroach\n\n: cockroach-speed ( kmph -- cmps ) 250 * 9 \/i ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81471,"user_id":104,"body":"! 2020 nomennescio\nUSING: math ;\nIN: cockroach\n\n: cockroach-speed ( km\/h -- cm\/s ) 1000\/36 * >fixnum ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81472,"user_id":168,"body":"USING: math ;\nIN: cockroach\n\n: cockroach-speed ( kmph -- cmps ) 100000 * 3600 \/i ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55fd2d567d94ac3bc9000064":[{"id":81473,"user_id":15,"body":"USING: math.functions ;\nIN: row_sum_odd_numbers\n: row_sum_odd_numbers ( n -- x ) 3 ^ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81474,"user_id":645,"body":"USING: kernel math.functions ;\nIN: row_sum_odd_numbers\n: row_sum_odd_numbers ( n -- x ) 3 ^ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81475,"user_id":168,"body":"USING: kernel math ;\nIN: row_sum_odd_numbers\n: row_sum_odd_numbers ( n -- x ) dup dup * * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81476,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math math.ranges sequences ;\nUSE: prettyprint\nIN: row_sum_odd_numbers\n\n: T(n) ( n -- triangular(n) ) dup 1 + * 2\/ ;\n: row_sum_odd_numbers ( n -- x ) dup 1 - [ T(n) 1 - dup 2 + * ] bi@ - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81477,"user_id":null,"body":"USE: math.functions\nIN: row_sum_odd_numbers\n: row_sum_odd_numbers ( n -- x ) 3 ^ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81478,"user_id":null,"body":"USING: kernel math math.ranges sequences ;\nIN: row_sum_odd_numbers\n\n: triangular ( n -- T_n ) dup 1 + * 2 \/ ;\n: row_sum_odd_numbers ( n -- sum ) [ 1 - triangular 1 + ] [ triangular ] bi [a,b] [ 2 * 1 - ] map-sum ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81479,"user_id":null,"body":"! sum odd numbers\n! build a range on the stack of the row then sum\n! first=n**2 - n + 1\n! last=first + 2*(n-1)\n! step=2\nUSING: math math.ranges sequences kernel ;\nIN: row_sum_odd_numbers\n: row_sum_odd_numbers ( n -- x )\n dup dup dup * swap - 1 + swap dupd 1 - 2 * + 2 <range> sum ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81480,"user_id":null,"body":"USING: math math.ranges sequences kernel ;\nIN: row_sum_odd_numbers\n: row_sum_odd_numbers ( n -- x )\n dup dup dup * swap - 1 + swap dupd 1 - 2 * + 2 <range> sum ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81481,"user_id":53,"body":"USING: kernel math locals ;\nIN: row_sum_odd_numbers\n:: row_sum_odd_numbers ( n -- x ) n n * n * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81482,"user_id":null,"body":"USING: combinators kernel math ;\nIN: row_sum_odd_numbers\n\n: row_sum_odd_numbers ( m -- n )\n    { [ sq ] [ 1 - - ] [ dupd 1 - 2 * + + ] [ 2 \/ * ] } cleave ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56269eb78ad2e4ced1000013":[{"id":81483,"user_id":29,"body":"USING: kernel math math.functions ;\nIN: find-next-square\n: find-next-square ( sq -- nsq )\n  dup sqrt >integer dup 1 + [ 2 ^ ] bi@ [ = ] dip -1 ? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81484,"user_id":53,"body":"USING: locals kernel math.functions math ;\nIN: find-next-square\n\n:: find-next-square ( n -- nsq ) n sqrt 1 mod zero? [ n sqrt 1 + 2 ^ >integer ] [ -1 ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81485,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math math.functions ;\nIN: find-next-square\n\n: find-next-square ( sq -- nsq ) [ sqrt >integer dup sq ] keep = [ 1 + sq ] [ drop -1 ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81486,"user_id":713,"body":"USING: kernel math math.functions ;\nIN: find-next-square\n\n: perfect-square? ( n -- p? ) \n    dup sqrt round >integer sq =\n;\n: find-next-square ( sq -- nsq )\n    dup perfect-square? [ sqrt 1 + sq >integer ] [ drop -1 ] if\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81487,"user_id":null,"body":"USING: kernel math math.functions math.primes.factors sequences ;\nIN: find-next-square\n\n: find-next-square ( sq -- nsq )\n    dup dup sqrt mod zero? swap divisors dup midpoint@ swap nth 1 + sq -1 ? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81488,"user_id":null,"body":"USING: kernel math math.functions ;\nIN: find-next-square\n: find-next-square ( sq -- nsq )\n  sqrt 1 \/mod zero? [ 1 + sq ] [ drop -1 ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81489,"user_id":168,"body":"USING: kernel math math.functions ;\nIN: find-next-square\n\n: exact-isqrt ( n -- sqrt\/f )\n  sqrt dup >integer [ number= ] keep swap [ drop f ] unless ;\n\n: find-next-square ( sq -- nsq ) \n  dup exact-isqrt [ 2 * 1 + + ] [ drop -1 ] if* ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81490,"user_id":null,"body":"USING: kernel math.functions math ;\nIN: find-next-square\n: find-next-square ( sq -- nsq ) dup dup sqrt mod zero? [ sqrt 1 + 2 ^ ] [ drop -1 ] if >integer ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"563a631f7cbbc236cf0000c2":[{"id":81491,"user_id":645,"body":"USING: math ;\nIN: terminal-move\n: move ( pos roll -- n ) 2 * + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81492,"user_id":645,"body":"USING: kernel math ;\nIN: terminal-move\n: move ( pos roll -- n ) 2 * + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81493,"user_id":527,"body":"USING: kernel math ;\nIN: terminal-move\n: move ( pos roll -- n ) dup + + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81494,"user_id":50,"body":"USING: kernel math ;\nIN: terminal-move\n: move ( pos roll -- n ) dup swap +  + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81495,"user_id":53,"body":"USING: kernel math locals ;\nIN: terminal-move\n:: move ( pos roll -- n ) roll 2 * pos + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81496,"user_id":527,"body":"USING: generalizations kernel ;\nIN: terminal-move\n: move ( pos roll -- n ) dup 3 nsum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81497,"user_id":null,"body":"USE: math\nIN: terminal-move\n: move ( pos roll -- n ) 2 * + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81498,"user_id":713,"body":"USING: math kernel ;\nIN: terminal-move\n: move ( pos roll -- n ) 2 * + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"563b662a59afc2b5120000c6":[{"id":81499,"user_id":492,"body":"! Factor 2019 g964\nUSING: kernel locals math math.functions ;\nIN: nbyear\n\n:: nbyear ( p0 percent aug p -- n )\n    percent 100.0 \/ 1.0 + :> perc 0 p0\n    [ dup p < ]\n    [ perc * aug + floor swap 1 + swap ] while drop ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81500,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel locals math ;\nIN: nbyear\n\n:: nbyear ( pn! p a n -- n ) 0 [ pn n < ] [ 1 + pn p 100 \/ 1 + * a + >integer pn! ] while ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81501,"user_id":29,"body":"USING: kernel math locals prettyprint ;\nIN: nbyear\n\n:: nbyear ( p0 percent aug p -- n )\n    0 p0 [ dup p < ] [ [ 1 + ] dip percent 100 + * 100 \/i aug + ] while drop ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81502,"user_id":713,"body":"USING: kernel locals math ;\nIN: nbyear\n\n:: nbyear ( p0 percent aug p -- n )\n  0 p0\n  [ dup p >= ]\n  [ dup percent * 0.01 * aug + + >integer [ 1 + ] dip ]\n  until drop ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81503,"user_id":null,"body":"USING: kernel locals math math.functions ;\nIN: nbyear\n\n:: nbyear ( p0 percent aug p -- n )\n    0 p0 [ dup p < ] [ [ 1 + ] [ 1 percent 100 \/ + * floor aug + ] bi* ] while drop ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81504,"user_id":null,"body":"USING: kernel locals math math.functions ;\nIN: nbyear\n\n: next-pop ( del r pop -- del r pop' ) 3dup * + floor nip ;\n: (nbyear) ( aug r pop goal_pop n -- n' ) 2over >= [ 4nip ] [ [ next-pop ] 2dip 1 + (nbyear) ] if ;\n\n:: setup ( p0 percentage aug p -- aug r pop goal_pop n ) aug percentage 100 \/ 1 + p0 p  0 ;\n: nbyear ( p0 percentage aug p -- n ) setup (nbyear) ;\n\n\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81505,"user_id":null,"body":"USING: kernel math math.functions sequences fry formatting ;\nIN: nbyear\n: nbyear ( p0 percent aug p -- n )\n    spin 0.01 * '[ dup _ < [ [ _ + ] [ _ * floor ] bi + ] [ drop f ] if ] follow length 1 - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81506,"user_id":null,"body":"USING: kernel locals math math.functions namespaces sequences ;\nIN: nbyear\n\n:: nbyear ( p0 percent aug p -- n )\n  p0 [ dup p < ] [ dup percent 100.0 \/ * + aug + floor dup ] produce nip length ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81507,"user_id":null,"body":"USING: kernel locals math math.functions ;\nIN: nbyear\n\n:: nbyear ( p0! percent! aug p -- n )\n    0 percent 100 \/ 1 + :> ( years! percent! )\n    [ p0 p < ]\n    [ p0 percent * aug + floor p0! years 1 + years! ] while\n    years ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81508,"user_id":1339,"body":"USING: kernel locals math math.functions prettyprint ;\nIN: nbyear\n\n:: nbyear ( p0 percent aug p -- n )\n    p0 p < [ p0 percent 100 \/ 1 + * aug + floor percent aug p nbyear 1 + ] [ 0 ] if\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"563e320cee5dddcf77000158":[{"id":81509,"user_id":527,"body":"USING: math.functions math.statistics ;\nIN: get-average\n: get-average ( arr -- n ) mean floor ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81510,"user_id":564,"body":"USING: math.functions math.statistics ;\nIN: get-average\n: get-average ( seq -- x ) mean floor ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81511,"user_id":53,"body":"USING: kernel math.statistics math ;\nIN: get-average\n: get-average ( arr -- n ) mean 1 \/i ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81512,"user_id":null,"body":"USING: math math.statistics ;\nIN: get-average\n\n: get-average ( seq -- n ) mean >integer ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81513,"user_id":104,"body":"! 2022 nomennescio\nUSING: math.functions math.statistics ;\nIN: get-average\n\n: get-average ( numbers -- rounded-mean ) mean truncate ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81514,"user_id":null,"body":"USING: math math.statistics ;\nIN: get-average\n: get-average ( arr -- n ) mean >integer ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81515,"user_id":null,"body":"USING: kernel math math.statistics ;\nIN: get-average\n\n: get-average ( seq -- n ) mean >integer ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81516,"user_id":1339,"body":"USING: kernel sequences math ;\nIN: get-average\n: get-average ( arr -- n ) [ sum ] [ length ] bi \/i ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81517,"user_id":564,"body":"USING: kernel math sequences ;\nIN: get-average\n: get-average ( arr -- n ) [ sum ] [ length ] bi \/i ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81518,"user_id":null,"body":"USING: kernel math sequences ;\nIN: get-average\n: get-average ( arr -- n ) dup 0 [ + ] reduce swap length \/ >integer ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"563f0c54a22b9345bf000053":[{"id":81519,"user_id":53,"body":"USING: kernel locals math.functions ;\nIN: fcn\n\n:: fcn ( n -- p ) 2 n ^ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81520,"user_id":null,"body":"USING: kernel math locals infix ;\nIN: fcn\n\n:: fcnr ( n2 n1 -- n ) \n  [infix (6*n2*n1)\/(5*n2-n1) infix] ;\n\n: fcn ( n -- p )\n    [ 1 2 ] dip [ tuck fcnr ] times drop ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81521,"user_id":null,"body":"USE: math\nIN: fcn\nALIAS: fcn 2^","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81522,"user_id":null,"body":"USING: math ;\nIN: fcn\nALIAS: fcn 2^","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81523,"user_id":null,"body":"USING: kernel locals math ;\nIN: fcn\n\n:: (fcn) ( un un+1 -- un+2 )\n    -6 un un+1 * *\n    un+1 un 5 * - \/ ;\n\n: fcn ( n -- p )\n    [ 1 ] [\n        dup 1 = [ drop 2 ] [\n            2 - 1 2 [ 2dup (fcn) nipd pick 0 > ] [\n                rot 1 - -rot\n            ] while 2nip\n        ] if\n    ] if-zero ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81524,"user_id":168,"body":"USING: kernel math ;\nIN: fcn\n\n: fcn ( n -- p ) 2^ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81525,"user_id":527,"body":"USING: math ;\nIN: fcn\n\n: fcn ( n -- p ) 2^ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81526,"user_id":106,"body":"USING: kernel math.functions ;\nIN: fcn\n\n: fcn ( n -- p ) 2 swap ^ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81527,"user_id":492,"body":"! Factor 2019 g964\nUSING: kernel math math.libm ;\nIN: fcn\n\n: fcn ( n -- p )\n    2.0 swap >float fpow >integer ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5667e8f4e3f572a8f2000039":[{"id":81528,"user_id":168,"body":"USING: kernel sequences math strings unicode ;\nIN: kata\n\n: accum ( str -- new-str ) [ 1 + swap <repetition> >string capitalize ] map-index \"-\" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81529,"user_id":null,"body":"USING: kernel strings sequences math unicode ;\nIN: kata\n\n: accum ( str -- new-str ) [ 1 + swap <string> ] { } map-index-as \"-\" join >title ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81530,"user_id":713,"body":"USING: kernel sequences ascii ;\nIN: kata\n\n: accum ( str -- new-str ) [ over <repetition> swap prefix >title ] map-index \"-\" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81531,"user_id":104,"body":"! 2022 nomennescio\nUSING: ascii assocs kernel math sequences strings ;\nIN: kata\n\n: accum ( str -- new-str ) [ 1 + swap <string> >title ] map-index \"-\" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81532,"user_id":104,"body":"! 2022 nomennescio\nUSING: ascii assocs kernel math sequences strings ;\nIN: kata\n\n: accum ( str -- new-str ) >lower [ 1 + swap <string> >title ] { } map-index-as \"-\" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81533,"user_id":null,"body":"USING: ascii kernel math sequences strings ;\nIN: kata\n\n: accum ( str -- new-str )\n  >lower [ 1 + swap <string> >title ] map-index \"-\" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81534,"user_id":null,"body":"USING: ascii grouping math sequences sequences.repeating ;\nIN: kata\n\n: accum ( str -- new-str )\n  >lower 1 group [ 1 + repeat >title ] map-index \"-\" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81535,"user_id":527,"body":"USING: arrays kernel math sequences sequences.repeating unicode ;\nIN: kata\n\n: accum ( str -- new-str )\n  [ [ 1array ] [ 1 + ] bi* <repeats> capitalize ] { } map-index-as \"-\" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81536,"user_id":29,"body":"USING: ascii kernel math sequences ;\nIN: kata\n\n: accum ( str -- new-str ) [\n    1 + swap <repetition> >title\n  ] map-index \"-\" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81537,"user_id":null,"body":"USING: kernel make sequences strings unicode ;\nIN: kata\n\n: mumble ( char n -- str )\n    swap dup ch>upper [ , ch>lower <string> % ] \"\" make ;\n\n: accum ( str -- new-str )\n    [ mumble ] { } map-index-as \"-\" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5672682212c8ecf83e000050":[{"id":81538,"user_id":null,"body":"USING: kernel literals math sequences sets sorting ;\nIN: twice-linear\n\n<< : next ( seq n -- seq' n' )\n    2dup swap nth [ 2 * 1 + ] [ 3 * 1 + ] bi reach swap suffix!\n    push 1 + ; >>\n    \n<< : u ( n -- seq )\n    [ V{ 1 } clone 0 ] dip [ next ] times drop\n    members natural-sort ; >>\n    \nCONSTANT: seq $[ 260,000 u ]\n\n: dbl_linear ( n -- ans ) seq nth ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81539,"user_id":null,"body":"USING: deques dlists kernel locals math memoize sets sequences sorting ;\nIN: twice-linear\n\n: u ( x -- y z )\n  [ 2 * 1 + ] [ 3 * 1 + ] bi ;\n\nMEMO:: make-list ( -- ans )\n  V{ } <dlist> :> ( seq xs ) 1 xs push-front\n  [ seq length 2000000 > ] [ xs pop-back [ seq push ] [ u [ xs push-front ] bi@ ] bi ] until\n  seq members natural-sort ;\n  \n: dbl_linear ( n -- ans )\n  make-list nth ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81540,"user_id":29,"body":"USING: kernel locals namespaces sequences sets math ;\nIN: twice-linear\n\nSYMBOLS: seen vals ;\n\nHS{ 0 } clone seen set-global\nV{ 0 } clone vals set-global\n\n:: dbl_linear ( n -- ans )\n  vals get ?last :> current!\n  [ n 1 + vals get length >= ]\n  [ current 1 + current! \n    current 1 - 2 \/ seen get in? current 1 - 3 \/ seen get in? or \n    [ current seen get adjoin current vals get push ] when \n  ] while\n  n 1 + vals get nth ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81541,"user_id":null,"body":"USING: kernel math math.order combinators lists lists.lazy fry promises locals sets hash-sets ;\nIN: twice-linear\n\n! Haskell-like solution that was too slow:\n\n! : merge ( l1 l2 -- l )\n!   2dup [ car ] bi@ <=> {\n!     { +lt+ [ swap ] }\n!     { +gt+ [ ] }\n!     { +eq+ [ cdr swap ] }\n!   } case uncons -rot '[ _ ] -rot '[ _ _ merge ] lazy-cons ;\n\n! : r ( first -- list ) \n!   dup '[ _ ] swap '[ [ _ [ 2 * ] [ 3 * ] bi [ 1 + r ] bi@ merge ] <promise> ] lazy-cons  ;\n\n! : dbl_linear ( n -- ans ) 1 r lnth ;\n\n:: dbl-next ( set n -- set' n' )\n  n 1 - 2 \/ set in? \n  n 1 - 3 \/ set in? or\n  [ n set adjoin set n 1 + ]\n  [ set n 1 + dbl-next ]\n  if ;\n\n: dbl_linear ( n -- ans )\n  [ HS{ 1 } clone 2 ] dip [ dbl-next ] times nip 1 - ;\n  \n  ","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81542,"user_id":168,"body":"USING: kernel heaps math ;\nIN: twice-linear\n\n: del-min ( heap -- heap )\n  dup heap-pop nip\n  [ over heap-peek nip over = ]\n  [ over heap-pop* ]\n  while drop ;\n\n: dbl_linear ( n -- ans )\n  <min-heap> 1 1 pick heap-push\n  [ over zero? ]\n  [ [ 1 - ] dip dup heap-peek\n    [ 2 * 1 + dup pick heap-push ]\n    [ 3 * 1 + dup pick heap-push ] \n    bi* del-min ]\n  until nip heap-pop drop ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81543,"user_id":1339,"body":"USING: assocs heaps kernel locals math math.vectors namespaces sequences vectors ;\nIN: twice-linear\n\nSYMBOL: twice-linear-LUT\n\n: next-numbers ( n -- assoc )\n  { 2 3 } n*v 1 v+n dup zip ;\n\n:: (dbl_linear) ( -- vec )\n  f >vector :> vec\n  { { 1 1 } } >min-heap :> heap\n  100000 [ heap heap-pop vec ?last = [ drop ] [\n    dup vec push next-numbers heap heap-push-all ] if ] times\n  vec ;\n\n: dbl_linear ( n -- ans )\n  twice-linear-LUT [ (dbl_linear) ] initialize\n  twice-linear-LUT get-global nth ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"568dcc3c7f12767a62000038":[{"id":81544,"user_id":564,"body":"USING: kernel ;\nIN: set-alarm\n: set-alarm ( employed? vacation? -- ? ) not and ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81545,"user_id":645,"body":"USING: kernel ;\nIN: set-alarm\n: set-alarm ( employed vacation -- x ) not and ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81546,"user_id":null,"body":"USING: kernel ;\nIN: set-alarm\n: set-alarm ( employed vacation -- x )\n  dup\n  [ 2drop f ]\n  [\n    drop\n    [ t ]\n    [ f ]\n    if\n  ]\n  if\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81547,"user_id":null,"body":"USING: kernel ;\nIN: set-alarm\n: set-alarm ( employed vacation -- x ) [ drop f ] [ ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81548,"user_id":53,"body":"USING: kernel locals ;\nIN: set-alarm\n:: set-alarm ( a b -- x ) a b not and ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81549,"user_id":null,"body":"USING: kernel ;\nIN: set-alarm\n\n: set-alarm ( employed? vacation? -- ? )\n    f = swap t = and ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81550,"user_id":null,"body":"USING: kernel ;\nIN: set-alarm\n\n: set-alarm ( employed? vacation? -- ? ) [ t = ] dip f = and ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81551,"user_id":null,"body":"USE: kernel\nIN: set-alarm\n: set-alarm ( employed vacation -- x ) not and ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81552,"user_id":null,"body":"USING: kernel ;\nIN: set-alarm\n: set-alarm ( employed vacation -- x )\n  dup\n  [ 2drop f ]\n  [ drop ]\n  if\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81553,"user_id":564,"body":"USING: kernel ;\nIN: set-alarm\n: set-alarm ( employed vacation -- ? ) not and ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56a4872cbb65f3a610000026":[{"id":81554,"user_id":null,"body":"USING: kernel math math.functions math.order sequences ;\nIN: max-rot\n\n\n: num-rot ( n x -- n )\n  10^ dup\n  [ \/mod ] dip\n  swap over 10 \/i\n  [ * ] [ \/mod 10 * + ]\n  2bi* +\n;\n\n\n: max-rot ( n -- max )\n  dup log10 >integer\n  1 + <iota> <reversed> swap\n  [ 1 + num-rot ] accumulate\n  nip supremum\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81555,"user_id":null,"body":"USING: kernel math math.functions math.order sequences ;\nIN: max-rot\n\n\n: num-rot ( n x -- n )\n  10^ dup\n  [ \/mod ] dip\n  swap over 10 \/i\n  [ * ] [ \/mod 10 * + ]\n  2bi* +\n;\n\n\n: max-rot ( n -- max )\n  dup log10 >integer\n  1 + <iota> <reversed> swap\n  [ 1 + num-rot ] accumulate\n  swap [ max ] reduce\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81556,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math.ranges math.parser sequences sequences.extras ;\nIN: max-rot\n\nALIAS: >dec number>string\n\n: max-rot ( n -- max ) >dec dup [ nip [ cut 1 rotate append ] keepd ] V{ } map-index-as nip supremum dec> ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81557,"user_id":29,"body":"USING: kernel math.parser sequences prettyprint ;\nIN: max-rot\n\n: rot-seq ( seq -- newseq ) dup .\n  [ V{ } clone ] [ [ 1 head ] [ rest ] bi prepend [ [ 1 head [ prepend ] curry ] [ rest rot-seq ] bi swap map ] keep suffix! ] if-empty ;\n\n: max-rot ( n -- max ) number>string [ rot-seq ] keep suffix! dup . [ string>number ] map supremum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81558,"user_id":168,"body":"USING: kernel math math.parser sequences ;\nIN: max-rot\n\n: rotate-i ( xs i -- xs ) cut 1 cut swap 3append ;\n: max-rot ( n -- max ) \n  number>string [ length <iota> ] keep\n  [ rotate-i ] accumulate nip [ string>number ] map supremum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81559,"user_id":null,"body":"USING: kernel make math math.parser math.ranges sequences\nsequences.extras ;\nIN: max-rot\n\n: (max-rot) ( m -- n )\n    dup , number>string dup length 1 - <iota>\n    [ cut 1 rotate append dup dec> , ] each ;\n\n: max-rot ( n -- max )\n    [ (max-rot) ] f make nip supremum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81560,"user_id":null,"body":"USING: kernel math.ranges locals math.parser\n       sequences sequences.extras math.order ;\nIN: max-rot\n\n:: max-rot ( n -- max )\n  n number>string dup length [0,b) [\n    dupd cut-slice 1 rotate append swap\n  ] map [ string>number ] map nip supremum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56b7f2f3f18876033f000307":[{"id":81561,"user_id":null,"body":"USING: grouping math ;\nIN: kata\n\n: in-asc-order? ( seq -- ? ) [ <= ] monotonic? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81562,"user_id":53,"body":"USING: math grouping ;\nIN: kata\n\n: in-asc-order? ( xs -- ? ) [ <= ] monotonic? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81563,"user_id":null,"body":"USING: assocs kernel sequences math ;\nIN: kata\n: in-asc-order? ( seq -- ? )\n  dup 1 tail zip [ dup first swap second > ] any? not ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81564,"user_id":1339,"body":"USING: kernel sorting ;\nIN: kata\n: in-asc-order? ( seq -- ? ) dup natural-sort = ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81565,"user_id":168,"body":"USING: kernel sequences math ;\nIN: kata\n: in-asc-order? ( seq -- ? ) dup 1 tail [ <= ] 2all? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81566,"user_id":null,"body":"USING: kernel math sequences ;\nIN: kata\n: in-asc-order? ( seq -- ? )\n  [ rest ] [ but-last ] bi\n  [ > ] 2all?\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81567,"user_id":713,"body":"USING: kernel sequences math ;\nIN: kata\n: in-asc-order? ( seq -- ? )\n  dup 1 tail [ but-last ] dip [ < ] 2all? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81568,"user_id":29,"body":"USING: kernel math sequences sorting ;\nIN: kata\n: in-asc-order? ( seq -- ? ) dup natural-sort sequence= ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81569,"user_id":527,"body":"USING: grouping math.order ;\nIN: kata\n: in-asc-order? ( seq -- ? ) [ before=? ] monotonic? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81570,"user_id":564,"body":"USING: kernel locals math sequences ;\nIN: kata\n:: in-asc-order? ( nums -- ? )\n  nums length 1 <=\n    [ t ]\n    [\n      nums first2 <\n      nums 1 tail in-asc-order?\n      and\n    ]\n  if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56bdd0aec5dc03d7780010a5":[{"id":81571,"user_id":29,"body":"USING: kernel math.bits sequences prettyprint ;\nIN: kata\n\n: next-higher ( n -- r ) make-bits\n  dup [ ] find drop cut dup [ not ] find drop\n  [ cut t over set-first [ f over set-last prepend ] dip append ] [ f over set-last prepend { t } append ] if* bits>number ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81572,"user_id":null,"body":"USING: math.parser sequences splitting ;\nIN: kata\n\n: next-higher ( n -- r )\n  >bin \"0\" prepend \"01\" split1-last reverse \"10\" glue bin> ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81573,"user_id":53,"body":"USING: kernel locals math math.bits ;\nIN: kata\n\n:: next-higher ( n -- r ) \n  n 0 n - bitand :> r\n  n r + :> p\n  n p bitxor 4 r * \/i :> q\n  p q bitor ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81574,"user_id":null,"body":"USING: fry kernel math math.bitwise ;\nIN: kata\n\n: next-higher ( n -- r )\n    dup bit-count '[ dup bit-count _ = ] [ 1 + ] do until ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81575,"user_id":1339,"body":"USING: kernel locals math math.bitwise ;\nIN: kata\n\n:: next-higher ( n -- r ) n 1 + [ dup n [ bit-count ] bi@ = ] [ 1 + ] until ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81576,"user_id":564,"body":"USING: kernel locals math math.bitwise namespaces ;\nIN: kata\n\n:: next-higher ( num -- next ) \n  SYMBOL: next\n  num bit-count :> num-bc\n  num 1 + next set\n  [ next get bit-count num-bc eq? ]\n  [ 1 next +@ ]\n  until\n  next get ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81577,"user_id":104,"body":"USING: locals math ; ! 2020 nomennescio\nIN: kata\n\n:: next-higher ( n -- r ) \n  n n neg bitand :> c n c + :> r r n bitxor -2 shift c \/i r bitor ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81578,"user_id":null,"body":"USING: math.combinatorics math.parser sequences ;\nIN: kata\n\n: next-higher ( n -- r )\n    >bin CHAR: 0 prefix next-permutation bin> ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81579,"user_id":168,"body":"USING: kernel math ;\nIN: kata\n\n: next-higher ( n -- r ) dup dup neg bitand swap 2dup + tuck bitxor rot 4 * \/i + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81580,"user_id":645,"body":"USING: locals math ;\nIN: kata\n\n:: next-higher ( n -- r )\n  n n neg bitand :> o\n  n o + :> v\n  v n v bitxor o \/i -2 shift bitor ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56c5847f27be2c3db20009c3":[{"id":81581,"user_id":null,"body":"USE: kernel\nIN: kata\n\n: subtract-sum ( n -- exp ) drop \"apple\" ; ! very funny","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81582,"user_id":104,"body":"! 2020 nomennescio\nUSING: kernel math math.parser sequences ;\nIN: kata\n\n: >fruit ( n -- fruit ) 1 - { \"kiwi\" \"pear\" \"kiwi\" \"banana\" \"melon\" \"banana\" \"melon\" \"pineapple\" \"apple\" \"pineapple\" \"cucumber\" \"pineapple\" \"cucumber\" \"orange\" \"grape\" \"orange\" \"grape\" \"apple\" \"grape\" \"cherry\" \"pear\" \"cherry\" \"pear\" \"kiwi\" \"banana\" \"kiwi\" \"apple\" \"melon\" \"banana\" \"melon\" \"pineapple\" \"melon\" \"pineapple\" \"cucumber\" \"orange\" \"apple\" \"orange\" \"grape\" \"orange\" \"grape\" \"cherry\" \"pear\" \"cherry\" \"pear\" \"apple\" \"pear\" \"kiwi\" \"banana\" \"kiwi\" \"banana\" \"melon\" \"pineapple\" \"melon\" \"apple\" \"cucumber\" \"pineapple\" \"cucumber\" \"orange\" \"cucumber\" \"orange\" \"grape\" \"cherry\" \"apple\" \"cherry\" \"pear\" \"cherry\" \"pear\" \"kiwi\" \"pear\" \"kiwi\" \"banana\" \"apple\" \"banana\" \"melon\" \"pineapple\" \"melon\" \"pineapple\" \"cucumber\" \"pineapple\" \"cucumber\" \"apple\" \"grape\" \"orange\" \"grape\" \"cherry\" \"grape\" \"cherry\" \"pear\" \"cherry\" \"apple\" \"kiwi\" \"banana\" \"kiwi\" \"banana\" \"melon\" \"banana\" \"melon\" \"pineapple\" \"apple\" \"pineapple\" } nth ;\n: digitsum ( n -- digitsum ) number>string string>digits sum ;\n: silly ( n -- n' ) [ dup 100 <= ] [ dup digitsum - ] do until ;\n: subtract-sum ( n -- exp ) silly >fruit ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81583,"user_id":null,"body":"USING: kernel math math.parser sequences ;\nIN: kata\n\n: digit-sum ( n -- sum )\n  number>string [ CHAR: 0 - ] map-sum ;\n\n: subtract-sum ( n -- exp )\n  [ dup digit-sum - dup 100 > ] loop 1 - {\n    \"kiwi\" \"pear\" \"kiwi\" \"banana\" \"melon\" \"banana\" \"melon\" \"pineapple\" \"apple\" \"pineapple\"\n    \"cucumber\" \"pineapple\" \"cucumber\" \"orange\" \"grape\" \"orange\" \"grape\" \"apple\" \"grape\" \"cherry\"\n    \"pear\" \"cherry\" \"pear\" \"kiwi\" \"banana\" \"kiwi\" \"apple\" \"melon\" \"banana\" \"melon\"\n    \"pineapple\" \"melon\" \"pineapple\" \"cucumber\" \"orange\" \"apple\" \"orange\" \"grape\" \"orange\" \"grape\"\n    \"cherry\" \"pear\" \"cherry\" \"pear\" \"apple\" \"pear\" \"kiwi\" \"banana\" \"kiwi\" \"banana\"\n    \"melon\" \"pineapple\" \"melon\" \"apple\" \"cucumber\" \"pineapple\" \"cucumber\" \"orange\" \"cucumber\" \"orange\"\n    \"grape\" \"cherry\" \"apple\" \"cherry\" \"pear\" \"cherry\" \"pear\" \"kiwi\" \"pear\" \"kiwi\"\n    \"banana\" \"apple\" \"banana\" \"melon\" \"pineapple\" \"melon\" \"pineapple\" \"cucumber\" \"pineapple\" \"cucumber\"\n    \"apple\" \"grape\" \"orange\" \"grape\" \"cherry\" \"grape\" \"cherry\" \"pear\" \"cherry\" \"apple\"\n    \"kiwi\" \"banana\" \"kiwi\" \"banana\" \"melon\" \"banana\" \"melon\" \"pineapple\" \"apple\" \"pineapple\"\n  } nth ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81584,"user_id":53,"body":"USING: kernel locals ;\nIN: kata\n\n:: subtract-sum ( n -- exp ) \"apple\" ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81585,"user_id":564,"body":"USING: locals ;\nIN: kata\n\n:: subtract-sum ( n -- exp ) \"apple\" ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81586,"user_id":645,"body":"USING: kernel ;\nIN: kata\n\n: subtract-sum ( n -- exp ) drop \"apple\" ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56cd44e1aa4ac7879200010b":[{"id":81587,"user_id":168,"body":"USING: unicode ;\nIN: is-uppercase\n: uppercase? ( str -- x ) upper? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81588,"user_id":null,"body":"USING: unicode ;\nIN: is-uppercase\n\n: uppercase? ( str -- ? ) upper? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81589,"user_id":null,"body":"USING: kernel ascii sequences ;\nIN: is-uppercase\n: uppercase? ( str -- x ) [ letter? ] any? not ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81590,"user_id":1339,"body":"USING: sequences ascii ;\nIN: is-uppercase\n: uppercase? ( str -- x ) [ letter? ] none? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81591,"user_id":104,"body":"! 2022 nomennescio\nUSING: unicode ;\nIN: is-uppercase\n\nALIAS: uppercase? upper?","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81592,"user_id":null,"body":"USE: unicode\nIN: is-uppercase\nALIAS: uppercase? upper?","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81593,"user_id":null,"body":"USING: unicode ;\nIN: is-uppercase\n\nALIAS: uppercase? upper?","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81594,"user_id":544,"body":"USING: kernel unicode ;\nIN: is-uppercase\nALIAS: uppercase? upper?","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81595,"user_id":null,"body":"USING: ascii kernel ;\nIN: is-uppercase\n\n: uppercase? ( str -- ? ) dup >upper = ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81596,"user_id":564,"body":"USING: kernel sequences unicode ;\nIN: is-uppercase\n: uppercase? ( str -- x )\n  >graphemes\n  [ upper? ] map\n  t [ and ] reduce\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56d904db9963e9cf5000037d":[{"id":81597,"user_id":104,"body":"! 2022 nomennescio\nUSING: math ;\nIN: kata\n\nALIAS: testit bitor","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81598,"user_id":null,"body":"USE: math\nIN: kata\nALIAS: testit bitor","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81599,"user_id":null,"body":"USING: math ;\nIN: kata\n: testit ( a b -- x ) bitor ; ! Hmm is that right?","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81600,"user_id":527,"body":"USING: math ;\nIN: kata\nALIAS: testit bitor","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81601,"user_id":645,"body":"USING: math ;\nIN: kata\n: testit ( a b -- x ) bitor ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56dec885c54a926dcd001095":[{"id":81602,"user_id":168,"body":"USING: kernel math ;\nIN: opposite\n\n: opposite ( n -- -n ) neg ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81603,"user_id":527,"body":"USING: math ;\nIN: opposite\n\n: opposite ( n -- -n ) neg ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81604,"user_id":713,"body":"USING: math kernel ;\nIN: opposite\n\n: opposite ( n -- -n ) neg ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81605,"user_id":null,"body":"USE: math\nIN: opposite\n\nALIAS: opposite neg","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81606,"user_id":527,"body":"USING: math ;\nIN: opposite\nALIAS: opposite neg","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81607,"user_id":104,"body":"! 2022 nomennescio\nUSING: math ;\nIN: opposite\n\nALIAS: opposite neg","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81608,"user_id":null,"body":"USING: kernel math ;\nIN: opposite\n\n: opposite ( n -- n ) neg ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81609,"user_id":null,"body":"USING: math ;\nIN: opposite\n\n: opposite ( n -- n*-1 ) -1 * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81610,"user_id":53,"body":"USING: kernel locals math sequences ;\nIN: opposite\n\n: opposite ( n -- -n ) neg ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81611,"user_id":null,"body":"USING: kernel math ;\nIN: opposite\n\n: opposite ( n -- -n ) 0 swap - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56efc695740d30f963000557":[{"id":81612,"user_id":564,"body":"USING: kernel strings sequences unicode ;\nIN: kata\n: >alternating ( sTr -- StR )\n  >graphemes\n  [ dup upper? [ >lower ] [ >upper ] if ] map\n  \"\" join\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81613,"user_id":null,"body":"USING: kernel sequences unicode ;\nIN: kata\n\n: neg-ch ( m -- n )\n    dup letter? [ ch>upper ] [ ch>lower ] if ;\n\n: >alternating ( str -- new-str )\n    [ neg-ch ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81614,"user_id":1339,"body":"USING: kernel sequences ascii math ;\nIN: kata\n: >alternating ( str -- new-str ) [ dup Letter? [ 32 bitxor ] when ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81615,"user_id":104,"body":"! 2022 nomennescio\nUSING: ascii kernel math sequences ;\nIN: kata\n\n: >alternating ( str -- new-str ) [ dup Letter? [ 32 bitxor ] when ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81616,"user_id":713,"body":"USING: kernel sequences unicode strings ;\nIN: kata\n: >alternating ( str -- new-str )\n  [ dup 1string lower? [ ch>upper ] [ ch>lower ] if ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81617,"user_id":29,"body":"USING: kernel unicode sequences strings ;\nIN: kata\n: >alternating ( str -- new-str )\n  [ dup 1string upper? [ ch>lower ] [ ch>upper ] if ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81618,"user_id":null,"body":"USING: ascii kernel math sequences ;\nIN: kata\n: >alternating ( str -- new-str ) [ dup Letter? [ 32 bitxor ] when ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81619,"user_id":null,"body":"USING: kernel sequences strings unicode ;\nIN: kata\n\n: toggle-case ( char -- char ) 1string dup lower? [ >upper ] [ >lower ] if first ;\n: >alternating ( str -- str ) [ toggle-case ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81620,"user_id":null,"body":"USING: kernel ascii arrays combinators sequences strings ;\nIN: kata\n: >alternating ( str -- new-str ) >array  [ {\n  { [ dup letter? ] [  ch>upper ] }\n  { [ dup LETTER?  ] [  ch>lower ] }\n  [ ]\n} cond  ] map >string ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81621,"user_id":544,"body":"USING: kernel unicode combinators sequences ;\nIN: kata\n\n: swap-case ( ch -- ch ) \n  {\n    { [ dup LETTER? ] [ ch>lower ] }\n    { [ dup letter? ] [ ch>upper ] }\n    [ ]\n  } cond ;\n\n: >alternating ( str -- new-str ) \n  [ swap-case ] map ;\n  \n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56f699cd9400f5b7d8000b55":[{"id":81622,"user_id":645,"body":"USING: sequences ;\nIN: kata\n: fix-the-meerkat ( arr -- x ) reverse ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81623,"user_id":null,"body":"USING: continuations kernel ;\nIN: kata\n\n: fix-the-meerkat ( seq -- newseq ) [ spin ] with-datastack ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81624,"user_id":104,"body":"! 2022 nomennescio\nUSING: arrays kernel sequences ;\nIN: kata\n\n: fix-the-meerkat ( 3seq -- x ) first3 spin 3array ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81625,"user_id":null,"body":"USE: sequences\nIN: kata\nALIAS: fix-the-meerkat reverse","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81626,"user_id":null,"body":"USING: continuations kernel ;\nIN: kata\n\n: fix-the-meerkat ( seq -- new-seq ) [ spin ] with-datastack ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81627,"user_id":null,"body":"USING: kernel sequences ;\nIN: kata\n: fix-the-meerkat ( arr -- x ) unclip swap unclip-last prefix swap suffix ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81628,"user_id":527,"body":"USING: arrays kernel sequences ;\nIN: kata\n: fix-the-meerkat ( arr -- x ) [ third ] [ second ] [ first ] tri 3array ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81629,"user_id":527,"body":"USING: arrays sequences ;\nIN: kata\n: fix-the-meerkat ( arr -- x ) <reversed> >array ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56f69d9f9400f508fb000ba7":[{"id":81630,"user_id":104,"body":"! 2022 nomennescio\nUSING: arrays kernel math.ranges ;\nIN: monkey-count\n\n: monkey-count ( n -- monkeys ) [ 1 ] dip [a,b] >array ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81631,"user_id":713,"body":"USING: sequences math ;\nIN: monkey-count\n: monkey-count ( n -- monkeys ) <iota> [ 1 + ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81632,"user_id":53,"body":"USING: locals kernel arrays math.ranges ;\nIN: monkey-count\n:: monkey-count ( n -- monkeys ) \n  T{ range f 1 n 1 } >array ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81633,"user_id":null,"body":"USING: math.ranges sequences ;\nIN: monkey-count\n\n: monkey-count ( n -- seq ) [1,b] { } like ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81634,"user_id":106,"body":"USING: kernel math.ranges arrays ;\nIN: monkey-count\n\n: monkey-count ( n -- monkeys ) 1 swap 1 <range> >array ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81635,"user_id":527,"body":"USING: arrays math.ranges ;\nIN: monkey-count\n: monkey-count ( n -- monkeys ) [1,b] >array ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81636,"user_id":645,"body":"USING: math.ranges arrays ;\nIN: monkey-count\n: monkey-count ( n -- monkeys ) [1,b] >array ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56fe17fcc25bf3e19a000292":[{"id":81637,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math ;\nIN: ueff-veff\n\n! \"Codewars\" \"Project Euler\" = not\n\n! https:\/\/www.wolframalpha.com\/input?i=Sum%5B%28-1%29%5Ek*4%5E%28n-k%29p*binomial%282n-k%2Ck%29%2C%7Bk%2C0%2Cn%7D%5D\n! https:\/\/www.wolframalpha.com\/input?i=Sum%5B%28-1%29%5Ek*4%5E%28n-k%29p*binomial%282n-k%2B1%2Ck%29%2C%7Bk%2C0%2Cn%7D%5D\n\n: ueff ( n p -- ? ) [ 1 + ] dip * ;\n: veff ( n p -- ? ) [ dup 1 + + ] dip * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81638,"user_id":null,"body":"USING: kernel math math.combinatorics math.functions math.ranges sequences ;\nIN: ueff-veff\n\n: uterm ( n k -- x ) [ - -1 swap ^ ] [ nip 4 swap ^ ] [ [ + 1 + ] [ - ] 2bi nCk ] 2tri * * ;\n: vterm ( n k -- x ) [ - -1 swap ^ ] [ nip 4 swap ^ ] [ [ + ] [ - ] 2bi nCk ] 2tri * * ;\n: u1 ( n p -- x ) swap dup [0,b] [ uterm ] with map-sum * ;\n: v1 ( n p -- x ) swap dup [0,b] [ vterm ] with map-sum * ;\n\n: veff ( n p -- x ) swap 2 * 1 + * ;\n: ueff ( n p -- x ) swap 1 + * ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81639,"user_id":53,"body":"USING: kernel locals math ;\nIN: ueff-veff\n\n:: ueff ( n p -- ? ) n 1 + p * ;\n:: veff ( n p -- ? ) 2 n * 1 + p * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81640,"user_id":492,"body":"USING: kernel math ;\nIN: ueff-veff\n\n: ueff ( n p -- ? ) swap 1 + * ;\n: veff ( n p -- ? ) swap 2 * 1 + * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56ff6a70e1a63ccdfa0001b1":[{"id":81641,"user_id":564,"body":"USING: kernel locals math math.functions sequences ;\nIN: kata\n\n:: pow-sum ( seq pow -- sum )\n    seq [ pow ^ ] map sum ;\n\n:: array-madness ( a b -- ? )\n    a 2 pow-sum\n    b 3 pow-sum\n    > ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81642,"user_id":null,"body":"USING: kernel math math.functions math.statistics sequences ;\nIN: kata\n\n: array-madness ( seq seq -- ? )\n    [ sum-of-squares ] dip [ 3 ^ ] map-sum > ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81643,"user_id":564,"body":"USING: kernel locals math sequences ;\nIN: kata\n:: array-madness ( a b -- ? )\n    a [ dup * ] map sum\n    b [ dup dup * * ] map sum\n    > ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81644,"user_id":443,"body":"USING: kernel math math.functions sequences ;\nIN: kata\n: array-madness ( a b -- ? )\n    [ 3 ^ ] [ + ] map-reduce\n    swap\n    [ 2 ^ ] [ + ] map-reduce\n    <\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81645,"user_id":1339,"body":"USING: kernel math math.functions sequences ;\nIN: kata\n: array-madness ( a b -- ? )\n  [ [ sq ] map-sum ] [ [ 3 ^ ] map-sum ] bi* >\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81646,"user_id":null,"body":"USING: kernel math sequences ;\nIN: kata\n: array-madness ( a b -- ? )\n  [ dup dup * * ] map-sum swap [ dup * ] map-sum < ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81647,"user_id":null,"body":"USING: kernel math sequences ;\nIN: kata\n: array-madness ( a b -- ? )\n  [ dup dup * * ] map sum swap [ dup * ] map sum < ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81648,"user_id":29,"body":"USING: kernel sequences math math.functions ;\nIN: kata\n: array-madness ( a b -- ? ) [ 2 ] [ 3 ] bi* [ [ ^ ] curry map sum ] 2bi@ > ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81649,"user_id":null,"body":"USING: kernel math sequences ;\nIN: kata\n: array-madness ( a b -- ? )\n  [ sq ] [ dup sq * ] [ map-sum ] bi-curry@ bi* > ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81650,"user_id":713,"body":"USING: kernel sequences math ;\nIN: kata\n: array-madness ( a b -- ? )\n    [ dup dup * * ] map-sum swap [ dup * ] map-sum <\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5715eaedb436cf5606000381":[{"id":81651,"user_id":null,"body":"USING: math.order sequences ;\nIN: kata\n\n: sum-positive ( seq -- n ) [ 0 max ] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81652,"user_id":null,"body":"USING: math.order sequences ;\nIN: kata\n\n: sum-positive ( seq -- n ) [ 0 max ] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81653,"user_id":null,"body":"USING: sequences math.order ;\nIN: kata\n\n: sum-positive ( seq -- n ) [ 0 max ] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81654,"user_id":104,"body":"! 2022 nomennescio\nUSING: math sequences ;\nIN: kata\n\n: sum-positive ( seq -- n ) [ 0 > ] filter sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81655,"user_id":713,"body":"USING: sequences math ;\nIN: kata\n\n: sum-positive ( seq -- n ) [ 0 > ] filter sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81656,"user_id":29,"body":"USING: sequences math math.order ;\nIN: kata\n\n: sum-positive ( seq -- n ) [ 0 max ] map sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81657,"user_id":null,"body":"USING: math sequences ;\nIN: kata\n\n: sum-positive ( seq -- n ) [ neg? ] reject sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81658,"user_id":null,"body":"USING: math sequences ;\nIN: kata\n\n: sum-positive ( seq -- n )\n    [ 0 > ] filter sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81659,"user_id":null,"body":"USING: kernel sequences math ;\nIN: kata\n\n: sum-positive ( seq -- n ) [ neg? not ] filter sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81660,"user_id":168,"body":"USING: kernel math sequences ;\nIN: kata\n\n: sum-positive ( seq -- n ) [ neg? not ] filter sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"57a083a57cb1f31db7000028":[{"id":81661,"user_id":null,"body":"USING: math math.polynomials ;\nIN: powers-of-two\n\n: powers-of-two ( n -- seq ) 1 + 2 powers ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81662,"user_id":null,"body":"USING: math math.ranges sequences ;\nIN: powers-of-two\n\n: powers-of-two ( n -- seq ) [0,b] [ 2^ ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81663,"user_id":713,"body":"USING: kernel math.functions math.ranges sequences ;\nIN: powers-of-two\n\n: powers-of-two ( n -- seq ) [0,b] [ 2 swap ^ ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81664,"user_id":527,"body":"USING: math sequences ;\nIN: powers-of-two\n\n: powers-of-two ( n -- seq ) 1 + <iota> [ 2^ ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81665,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math math.ranges sequences ;\nIN: powers-of-two\n\n: powers-of-two ( n -- seq ) [0,b] [ 2^ ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81666,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math sequences ;\nIN: powers-of-two\n\n: powers-of-two ( n -- seq ) 1 + <iota> [ 2^ ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81667,"user_id":53,"body":"USING: locals kernel math math.functions math.ranges sequences ;\nIN: powers-of-two\n\n:: powers-of-two ( n -- seq ) n [0,b] [ 2 swap ^ ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81668,"user_id":168,"body":"USING: math.ranges math sequences ;\nIN: powers-of-two\n\n: powers-of-two ( n -- seq ) [0,b] [ 2^ ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81669,"user_id":null,"body":"USING: sequences math math.ranges ;\nIN: powers-of-two\n\n: powers-of-two ( n -- seq ) [0,b] [ 2^ ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81670,"user_id":29,"body":"USING: kernel math math.functions math.ranges sequences ;\nIN: powers-of-two\n\n: powers-of-two ( n -- seq ) [0,b] [ 2 swap ^ ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"57a0e5c372292dd76d000d7e":[{"id":81671,"user_id":527,"body":"USING: sequences ;\nIN: repeat-str\n: repeat-str ( n s -- x ) <repetition> \"\" concat-as ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81672,"user_id":1339,"body":"USING: arrays sequences ;\nIN: repeat-str\n: repeat-str ( n s -- x ) <array> \"\" concat-as ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81673,"user_id":564,"body":"USING: kernel locals sequences ;\nIN: repeat-str\n\n:: repeat-str ( n s -- x ) \n  n [ s ] replicate\n  \"\" [ append ] reduce ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81674,"user_id":null,"body":"USING: sequences math sequences.repeating kernel locals ;\nIN: repeat-str\n:: repeat-str ( n s -- x ) s n s length * cycle ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81675,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math sequences sequences.repeating ;\nIN: repeat-str\n\n: repeat-str ( n s -- x ) V{ } clone -rot [ append! ] curry times \"\" like ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81676,"user_id":713,"body":"USING: kernel sequences ;\nIN: repeat-str\n: repeat-str ( n s -- x ) <repetition> \"\" concat-as ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81677,"user_id":null,"body":"USING: kernel sequences.repeating sequences math ;\nIN: repeat-str\n: repeat-str ( n s -- x ) dup length rot * cycle ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81678,"user_id":null,"body":"USING: kernel math sequences ;\nIN: repeat-str\n\n<PRIVATE\n: ntimes ( s r n -- r ) [ nip ] [ [ over append ] dip 1 - ntimes ] if-zero ;\nPRIVATE>\n\n: repeat-str ( n s -- x ) swap \"\" swap ntimes ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81679,"user_id":29,"body":"USING: kernel sequences ;\nIN: repeat-str\n: repeat-str ( n s -- x ) <repetition> \"\" prefix concat ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81680,"user_id":53,"body":"USING: kernel sequences locals ;\nIN: repeat-str\n\n:: repeat-str ( n s -- x ) \n  n [ s ] replicate\n  \"\" [ append ] reduce ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"57a1d5ef7cb1f3db590002af":[{"id":81681,"user_id":null,"body":"USING: kernel math math.constants math.functions ;\nIN: fibonacci\n\n: fibonacci ( n -- r ) phi swap ^ 5 sqrt \/ round >integer ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81682,"user_id":null,"body":"USING: kernel math ;\nIN: fibonacci\n\n: fibonacci ( n -- r ) 0 1 rot [ dup rot + ] times drop ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81683,"user_id":104,"body":"! 2022 nomennescio\n\nUSING: kernel locals math math.constants math.functions typed ;\nIN: fibonacci\n\nTYPED:: fibonacci ( n: fixnum -- nth-fibonacci ) phi n ^ 5 sqrt \/ .5 + >integer ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81684,"user_id":713,"body":"USING: locals math kernel ;\nIN: fibonacci\n\n:: fibonacci ( n -- r ) 0 1 n [ swap over + ] times drop ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81685,"user_id":null,"body":"USING: kernel math ;\nIN: fibonacci\n\n: fibonacci ( m -- n )\n    0 1 rot [ tuck + ] times drop ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81686,"user_id":527,"body":"USING: kernel math ;\nIN: fibonacci\n\n: fibonacci ( n -- r ) 0 1 rot [ swap over + ] times drop ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81687,"user_id":53,"body":"USING: kernel math ;\nIN: fibonacci\n\nDEFER: fib-rec\n: fibonacci ( n -- f(n) ) dup 2 < [ ] [ fib-rec ] if ;\n: fib-rec ( n -- f(n) ) [ 1 - fibonacci ] [ 2 - fibonacci ] bi + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81688,"user_id":168,"body":"USING: kernel math ;\nIN: fibonacci\n\n: fibonacci ( n -- r ) dup 1 > [ [ 1 - ] [ 2 - ] bi [ fibonacci ] bi@ + ] when ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81689,"user_id":29,"body":"USING: kernel math ;\nIN: fibonacci\n\n: fibonacci ( n -- r ) 0 1 rot [ tuck + ] times drop ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"57cc975ed542d3148f00015b":[{"id":81690,"user_id":null,"body":"USING: kernel sequences ;\nIN: kata\n: contains? ( a x -- ? ) swap member? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81691,"user_id":53,"body":"USING: kernel sequences locals ;\nIN: kata\n:: contains? ( a x -- ? ) a [ x = ] any? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81692,"user_id":null,"body":"USING: kernel sequences ;\nIN: kata\n: contains? ( seq elt -- ? ) swap member? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81693,"user_id":1339,"body":"USING: kernel sets ;\nIN: kata\n: contains? ( a x -- ? ) swap in? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81694,"user_id":104,"body":"USING: kernel sequences ; ! 2020 nomennescio\nIN: kata\n: contains? ( a x -- ? ) swap member? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"57cebe1dc6fdc20c57000ac9":[{"id":81695,"user_id":1339,"body":"USING: kernel sequences splitting ;\nIN: shortest-word\n: find-short ( s -- n ) \" \" split [ length ] map infimum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81696,"user_id":null,"body":"USING: math.order sequences splitting ;\nIN: shortest-word\n\n: find-short ( s -- n ) \" \" split [ length ] [ min ] map-reduce ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81697,"user_id":544,"body":"USING: kernel splitting sequences sorting math ;\nIN: shortest-word\n: find-short ( s -- n ) \n  \" \" split\n  [ length ] sort-with first length ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81698,"user_id":null,"body":"USING: kernel splitting sequences math math.order ;\nIN: shortest-word \n: find-short ( s -- n ) \" \" split [ length ] map dup first [ min ] reduce ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81699,"user_id":null,"body":"USING: kernel splitting sequences math.order ;\nIN: shortest-word\n: break ( s -- seq ) \" \" split ;\n: lengths ( seq -- nums ) [ length ] map ;\n: shortest ( nums -- n ) dup first [ min ] reduce ;\n: find-short ( s -- n ) break lengths shortest ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81700,"user_id":null,"body":"USING: kernel sequences splitting sorting math.order ;\nIN: shortest-word\n\n: to-words ( str -- strs ) \" \" split ;\n\n: to-lengths ( strs -- lengths ) [ length ] map ;\n\n! alternate implementation\n! : smallest ( nums -- num ) natural-sort first ;\n: smallest ( nums -- num ) dup first [ min ] reduce ;\n\n: find-short ( s -- n ) to-words to-lengths smallest ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81701,"user_id":null,"body":"USING: kernel sequences splitting sorting ;\nIN: shortest-word\n: find-short ( s -- n ) \n  \" \" split [ length ] map\n  natural-sort first ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81702,"user_id":15,"body":"USING: kernel sequences splitting math.order ;\nIN: shortest-word\n: find-short ( s -- n )\n  \" \" split\n  [ length ] map\n  1e6 [ min ] reduce\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81703,"user_id":106,"body":"USING: kernel math.order sequences splitting ;\nIN: shortest-word\n: find-short ( s -- n ) \" \" split [ length ] [ min ] map-reduce ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81704,"user_id":104,"body":"! 2022 nomennescio\nUSING: sequences splitting ;\nIN: shortest-word\n: find-short ( s -- n ) \" \" split [ length ] map infimum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"57d5e850bfcdc545870000b7":[{"id":81705,"user_id":104,"body":"! 2022 nomennescio\nUSING: assocs kernel math.order math.statistics sequences sets splitting ;\nIN: dead-ants\n\n: dead-ants ( str -- n ) \"ant\" \"\" replace \"ant\" within histogram values [ 0 ] [ supremum ] if-empty ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81706,"user_id":527,"body":"USING: kernel math math.order sequences sequences.extras ;\nIN: dead-ants\n\n: dead-ants ( str -- n )\n  \"ant\" [ [ [ = ] curry count ] with [ max ] map-reduce ] [ swap count-subseq ] 2bi - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81707,"user_id":null,"body":"USING: assocs kernel math.statistics sequences sequences.extras\nsets splitting ;\nIN: dead-ants\n\n: dead-ants ( str -- n )\n    \"ant\" \"\" replace \"ant\" within histogram values ?supremum\n    [ 0 ] unless* ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81708,"user_id":168,"body":"USING: kernel regexp math.statistics assocs sequences math.order ;\nIN: dead-ants\n\n: dead-ants ( str -- n ) \"\" or R\/ ant|[^ant]+\/ \"\" re-replace histogram values 0 [ max ] reduce ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81709,"user_id":null,"body":"USING: assocs kernel math.statistics sequences sequences.extras splitting ;\nIN: dead-ants\n\n: dead-ants ( str -- n )\n  \"ant\" f replace\n  [ \"ant\" member? ] filter\n  histogram values ?supremum 0 or ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81710,"user_id":29,"body":"USING: kernel splitting sequences arrays ;\nIN: dead-ants\n\n: dead-ants ( str -- n )\n  \"ant\" [ \"\" replace ]\n  [ [ dupd [ = ] curry count ] map ] bi\n  supremum nip ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81711,"user_id":null,"body":"USING: kernel regexp math.statistics math.order sequences assocs ;\nIN: dead-ants\n\n: dead-ants ( str -- n )\n  dup [\n    R\/ ant|[^ant]+\/ \"\" re-replace\n    histogram values 0 [ max ] reduce\n  ]\n  [ drop 0 ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"57eadb7ecd143f4c9c0000a3":[{"id":81712,"user_id":null,"body":"USING: sequences splitting ascii ;\nIN: kata\n: abbrev-name ( str -- new-str ) \n\" \" split [ 1 head >upper ] map \".\" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81713,"user_id":564,"body":"USING: ascii kernel sequences splitting strings ;\nIN: kata\n: abbrev-name ( name -- initials )\n  \" \" split\n  [ 1 swap resize-string capitalize ] map\n  \".\" join\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81714,"user_id":168,"body":"USING: splitting ascii sequences ;\nIN: kata\n: abbrev-name ( str -- new-str )\n  \" \" split [ 1 head >upper ] map \".\" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81715,"user_id":null,"body":"USING: sequences splitting strings unicode ;\nIN: kata\n: abbrev-name ( str -- new-str )\n    >upper \" \" split [ first 1string ] map \".\" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81716,"user_id":53,"body":"USING: kernel regexp ascii ;\nIN: kata\n: abbrev-name ( str -- new-str )\n>upper R\/ (?<=\\p{alpha})(\\p{alpha})\/ \"\" re-replace R\/ \\s\/ \".\" re-replace\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81717,"user_id":null,"body":"USING: sequences splitting ascii strings ;\nIN: kata\n: abbrev-name ( str -- new-str ) \" \" split [ first 1string ] map \".\" join >upper ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81718,"user_id":713,"body":"USING: splitting sequences ascii ;\nIN: kata\n: abbrev-name ( str -- new-str )\n  \" \" split [ >upper 1 head ] map \".\" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81719,"user_id":29,"body":"USING: splitting sequences ascii strings ;\nIN: kata\n: abbrev-name ( str -- new-str ) \" \" split [ first 1string >upper ] map \".\" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81720,"user_id":null,"body":"USING: ascii sequences splitting strings ;\nIN: kata\n: abbrev-name ( str -- new-str )\n  \" \" split [ first 1string ] map \".\" join >upper ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81721,"user_id":null,"body":"USING: arrays kernel sequences splitting strings unicode ;\nIN: kata\n\n: abbrev-name ( name -- initial-str ) \" \" split [ first ] map first2 CHAR: . swap 3array >string >upper ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"57eae20f5500ad98e50002c5":[{"id":81722,"user_id":null,"body":"USING: kernel sequences ;\nIN: kata\n: no-space ( s -- x )\n    [ CHAR: space = ] reject ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81723,"user_id":168,"body":"USING: splitting ;\nIN: kata\n: no-space ( s -- x ) \" \" \"\" replace ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81724,"user_id":null,"body":"USING: sets ;\nIN: kata\n\n: no-space ( str -- new-str ) \" \" without ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81725,"user_id":null,"body":"USING: kernel sequences splitting ;\nIN: kata\n: no-space ( s -- x ) \" \" split concat ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81726,"user_id":null,"body":"USING: kernel regexp strings ;\nIN: kata\n: no-space ( s -- x ) R\/ \\s\/ \"\" re-replace ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81727,"user_id":null,"body":"USING: kernel syntax sequences ;\nIN: kata\n: no-space ( s -- x ) CHAR: \\s swap remove ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81728,"user_id":571,"body":"USING: kernel regexp ;\nIN: kata\n: no-space ( s -- x ) \" +\" <regexp> \"\" re-replace ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81729,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel sequences ;\nIN: kata\n\n: no-space ( s -- x ) [ 32 = ] reject ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81730,"user_id":713,"body":"USING: kernel regexp ;\nIN: kata\n: no-space ( s -- x ) R\/ \\s\/ \"\" re-replace ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81731,"user_id":null,"body":"USING: ascii sequences ;\nIN: kata\n: no-space ( s -- x ) [ blank? ] reject ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"57f222ce69e09c3630000212":[{"id":81732,"user_id":null,"body":"USING: combinators kernel math sequences ;\nIN: well\n\n: well ( seq -- str )\n    [ \"good\" = ] count\n    {\n        { [ dup zero? ] [ drop \"Fail!\" ] }\n        { [ 3 < ] [ \"Publish!\" ] }\n        [ \"I smell a series!\" ]\n    } cond ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81733,"user_id":527,"body":"USING: combinators.extras kernel math sequences ;\nIN: well\n: well ( seq -- str )\n  [ \"good\" = ] count {\n    { [ 0 = ] [ \"Fail!\" ] }\n    { [ 2 <= ] [ \"Publish!\" ] }\n    [ drop \"I smell a series!\" ]\n  } cond-case ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81734,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math sequences ;\nIN: well\n\n: well ( x -- n ) [ \"good\" = ] count dup 0 = [ \"Fail!\" ] [ dup 3 < \"Publish!\" \"I smell a series!\" ? ] if nip ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81735,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math sequences ;\nIN: well\n\n: well ( x -- n ) [ \"good\" = ] count dup 0 = [ \"Fail!\" ] [ dup 3 < [ \"Publish!\" ] [ \"I smell a series!\" ] if ] if nip ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81736,"user_id":713,"body":"USING: kernel sequences math combinators ;\nIN: well\n: well ( x -- n )\n  [ \"good\" = ] count {\n    { [ dup 0 = ] [ drop \"Fail!\" ] }\n    { [ dup 3 < ] [ drop \"Publish!\" ] }\n    [ drop \"I smell a series!\" ]\n  } cond ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81737,"user_id":null,"body":"USING: combinators kernel math sequences ;\nIN: well\n: well ( x -- n )\n  [ \"good\" = ] count {\n    { [ dup zero? ] [ drop \"Fail!\" ] }\n    { [ dup 2 <= ] [ drop \"Publish!\" ] }\n    [ drop \"I smell a series!\" ]\n  } cond ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81738,"user_id":null,"body":"USING: kernel sequences math combinators ;\nIN: well\n: well ( x -- n )\n  [ \"good\" = [ 1 ] [ 0 ] if ] map sum\n  {\n    { [ dup 0 = ] [ drop \"Fail!\" ] }\n    { [ dup 2 > ] [ drop \"I smell a series!\" ] }\n    [ drop \"Publish!\" ]\n  } cond ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81739,"user_id":53,"body":"USING: combinators locals kernel math sequences ;\nIN: well\n:: well ( x -- n ) \n   x [ \"good\" = ] count :> n\n   {\n        { [ n 0 = ] [ \"Fail!\" ] }\n        { [ n 2 <= ] [ \"Publish!\" ] }\n        [ \"I smell a series!\" ]\n    } cond ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81740,"user_id":null,"body":"USING: combinators kernel sequences ;\nIN: well\n\n: well ( seq -- str )\n    [ \"good\" = ] count\n    {\n        { 0 [ \"Fail!\" ] }\n        { 1 [ \"Publish!\" ] }\n        { 2 [ \"Publish!\" ] }\n        [ drop \"I smell a series!\" ]\n    } case ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81741,"user_id":1339,"body":"USING: kernel sequences math.order ;\nIN: well\n: well ( x -- n ) [ \"good\" = ] count 3 min { \"Fail!\" \"Publish!\" \"Publish!\" \"I smell a series!\" } nth ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"57f780909f7e8e3183000078":[{"id":81742,"user_id":null,"body":"USE: sequences\nIN: grow\nALIAS: grow product","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81743,"user_id":null,"body":"USING: sequences ;\nIN: grow\nALIAS: grow product","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81744,"user_id":527,"body":"USING: sequences ;\nIN: grow\n: grow ( nums -- n ) product ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81745,"user_id":645,"body":"USING: kernel sequences ;\nIN: grow\n: grow ( nums -- n ) product ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81746,"user_id":104,"body":"! 2022 nomennescio\nUSING: sequences ;\nIN: grow\n\nALIAS: grow product","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81747,"user_id":53,"body":"USING: accessors math kernel present sequences ;\nIN: grow\n: grow ( nums -- n ) 1 [ * ] reduce ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81748,"user_id":null,"body":"USING: kernel sequences math ;\nIN: grow\n: grow ( nums -- n ) 1 [ * ] reduce ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81749,"user_id":106,"body":"USING: kernel math sequences ;\nIN: grow\n: grow ( nums -- n ) 1 [ * ] reduce ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"57f781872e3d8ca2a000007e":[{"id":81750,"user_id":null,"body":"USING: math sequences ;\nIN: maps\n: maps ( a -- x ) [ 2 * ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81751,"user_id":106,"body":"USING: kernel math sequences ;\nIN: maps\n: maps ( a -- x ) [ 2 * ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81752,"user_id":645,"body":"USING: kernel sequences math ;\nIN: maps\n: maps ( a -- x ) [ 2 * ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81753,"user_id":15,"body":"USING: kernel sequences math ;\nIN: maps\n: maps ( a -- x ) [ dup + ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81754,"user_id":527,"body":"USING: kernel math sequences ;\nIN: maps\n: maps ( a -- x ) [ dup + ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81755,"user_id":null,"body":"USING: math sequences ;\nIN: maps\n\n: maps ( seq -- new-seq ) [ 2 * ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81756,"user_id":null,"body":"USING: kernel math sequences ;\nIN: maps\n\n: maps ( seq -- newseq ) [ dup + ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81757,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math sequences ;\nIN: maps\n\n: 2* ( n -- 2n ) 1 shift ; inline\n: maps ( a -- x ) [ 2* ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81758,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math sequences ;\nIN: maps\n: maps ( a -- x ) [ dup + ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81759,"user_id":713,"body":"USING: sequences math ;\nIN: maps\n: maps ( a -- x ) [ 2 * ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"58068479c27998b11900056e":[{"id":81760,"user_id":null,"body":"USING: present assocs sorting pair-rocket math.parser ;\nIN: sort-twisted37\n\n: sort-twisted37 ( seq -- sorted )\n    [ present { CHAR: 3 => CHAR: 7 CHAR: 7 => CHAR: 3 } substitute dec> ] sort-with ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81761,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math math.parser sequences sorting ;\nIN: sort-twisted37\n\nALIAS: >dec number>string\nALIAS: | bitor\nALIAS: ^ bitxor\n\n: twist37 ( str -- str' ) [ dup 4 | 55 = [ 4 ^ ] when ] map ;\n: sort-twisted37 ( seq -- sorted ) [ >dec twist37 dec> ] sort-with ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81762,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math math.functions math.text.utils sequences sorting ;\nIN: sort-twisted37\n\n: >digits ( n -- seq ) 1 digit-groups ;\n: digits> ( seq -- n ) 0 [ 10^ * + ] reduce-index ;\n: twist37 ( seq -- seq' ) [ dup 3 = over 7 = or [ neg 10 + ] when ] map ;\n: sort-twisted37 ( seq -- sorted ) [ dup abs >digits twist37 digits> swap 0 < [ neg ] when ] sort-with ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81763,"user_id":null,"body":"USING: combinators math.parser sequences sorting ;\nUSE: kernel\nIN: sort-twisted37\n\n: twist37 ( n -- n' )\n  number>string [ {\n    { CHAR: 3 [ CHAR: 7 ] }\n    { CHAR: 7 [ CHAR: 3 ] }\n    [ ]\n  } case ] map string>number ;\n\n: sort-twisted37 ( seq -- sorted )\n  [ twist37 ] sort-with ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81764,"user_id":168,"body":"USING: kernel math.parser regexp sorting sequences ;\nIN: sort-twisted37\n\n: key ( n -- n ) number>string R\/ [37]\/ [ \"3\" sequence= \"7\" \"3\" ? ] re-replace-with string>number ;\n: sort-twisted37 ( seq -- sorted ) [ key ] sort-with ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81765,"user_id":29,"body":"USING: kernel splitting math.parser sorting ;\nIN: sort-twisted37\n\n: twist ( n -- n ) number>string\n  \"7\" \"@\" replace \n  \"3\" \"7\" replace \n  \"@\" \"3\" replace\n  string>number ;\n: sort-twisted37 ( seq -- sorted ) [ twist ] sort-with ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81766,"user_id":null,"body":"USING: kernel sorting math.parser combinators sequences ;\nIN: sort-twisted37\n\n: ord ( n -- n ) \n    number>string \n    [ {\n        { CHAR: 3 [ CHAR: 7 ] }\n        { CHAR: 7 [ CHAR: 3 ] }\n        [ ]\n      } case ] map\n    string>number ;\n: sort-twisted37 ( seq -- sorted ) [ ord ] sort-with ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"580878d5d27b84b64c000b51":[{"id":81767,"user_id":168,"body":"USING: kernel math.order infix locals ;\nIN: sum-triangular\n\n:: sum-triangular-numbers ( n -- res ) [infix max(n, 0) * (n + 1) * (n + 2) \/ 6 infix] ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81768,"user_id":null,"body":"USING: kernel math.order math.ranges math.statistics sequences ;\nIN: sum-triangular\n\n: sum-triangular-numbers ( n -- res ) 0 max 0 swap [a,b] cum-sum sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81769,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math math.order ;\nIN: sum-triangular\n\n: sum-triangular-numbers ( n -- res ) 0 max [ 1\/6 * ] [ 1 + ] [ 2 + ] tri * * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81770,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math ;\nIN: sum-triangular\n\n: sum-triangular-numbers ( n -- res ) dup 0 > [ [ 1\/6 * ] [ 1 + ] [ 2 + ] tri * * ] [ drop 0 ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81771,"user_id":null,"body":"USING: kernel math math.order ;\nIN: sum-triangular\n\n: sum-triangular-numbers ( n -- res ) 0 max dup 1 + dup 1 + * * 6 \/ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81772,"user_id":null,"body":"USING: math.order math.polynomials ;\nIN: sum-triangular\n\n: sum-triangular-numbers ( n -- res ) 0 max { 0 1\/3 1\/2 1\/6 } polyval ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81773,"user_id":null,"body":"USING: kernel math math.ranges sequences ;\nIN: sum-triangular\n\n<PRIVATE\n: triangular-number ( n -- n ) dup 1 + * 2\/ ;\n: (tri-sum) ( n -- n ) [1,b] [ triangular-number ] map sum ;\nPRIVATE>\n\n: sum-triangular-numbers ( n -- res ) dup 0 < [ drop 0 ] [ (tri-sum) ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81774,"user_id":527,"body":"USING: kernel math math.combinators ;\nIN: sum-triangular\n\n: sum-triangular-numbers ( n -- res ) [ drop 0 ] [ [ ] [ 1 + ] [ 2 + ] tri * * 6 \/ ] if-negative ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81775,"user_id":713,"body":"USING: kernel math ;\nIN: sum-triangular\n\n: sum-triangular-numbers ( n -- res ) dup 0 < [ drop 0 ] [ dup 1 + dup 1 + * * 6 \/ ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81776,"user_id":53,"body":"USING: kernel math locals ;\nIN: sum-triangular\n\n:: sum-triangular-numbers ( n -- res ) \n  n 0 > [ n n 1 + * n 2 + * 6 \/i ] [ 0 ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"582c297e56373f0426000098":[{"id":81777,"user_id":null,"body":"USING: preload accessors kernel sequences math.parser ;\nIN: kata\n: stringify ( list -- str )\n  [ dup +nil+ = not ] [ [ next>> ] [ data>> number>string ] bi ] produce nip\n  \"+nil+\" suffix \" -> \" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81778,"user_id":null,"body":"USING: accessors kernel make math.parser preload present ;\nIN: kata\n\n: (list>seq) ( list -- )\n    [ dup +nil+ = ]\n    [ dup data>> # \" -> \" % next>> ] until present % ;\n    \n: stringify ( list -- seq ) [ (list>seq) ] \"\" make ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81779,"user_id":564,"body":"USING: accessors kernel locals math.parser preload prettyprint sequences ;\nIN: kata\n:: list>seq ( list -- seq )\n  list +nil+ =\n  [ { } ]\n  [ { }\n    list data>> suffix\n    list next>> list>seq append ]\n  if\n;\n: stringify ( list -- str )\n  list>seq\n  [ number>string ] map\n  \"+nil+\" suffix\n  \" -> \" join\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81780,"user_id":168,"body":"USING: preload kernel sequences math.parser accessors words.symbol ;\nIN: kata\n\n: to-seq ( list -- seq ) \n  dup symbol? \n    [ drop { \"+nil+\" } ] \n    [ [ next>> to-seq ] [ data>> number>string ] bi prefix ] if ;\n\n: stringify ( list -- str ) to-seq \" -> \" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81781,"user_id":29,"body":"USING: kernel preload accessors prettyprint arrays sequences ;\nIN: kata\n: stringify ( list -- str ) dup +nil+ =\n  [ unparse ] [ [ data>> unparse ] [ next>> stringify ] bi 2array \" -> \" join ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81782,"user_id":null,"body":"USING: accessors kernel preload present sequences ;\nIN: kata\n: stringify ( node -- str )\n  dup +nil+ = [ present ] [\n    [ data>> present ] [ next>> stringify ] bi \" -> \" glue\n  ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81783,"user_id":null,"body":"USING: accessors kernel math.parser preload sequences ;\nIN: kata\n: stringify ( list -- str ) dup\n                            +nil+ eq?\n                            [ drop \"+nil+\" ]\n                            [ dup data>> number>string \" -> \" append swap next>> stringify append ]\n                            if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81784,"user_id":null,"body":"USING: classes.tuple kernel math.parser preload sequences ;\nIN: kata\n: data>> ( node -- x ) tuple-slots first ;\n: next>> ( node -- node ) tuple-slots second ;\n: stringify ( list -- str ) dup\n                            +nil+ eq?\n                            [ drop \"+nil+\" ]\n                            [ dup data>> number>string \" -> \" append swap next>> stringify append ]\n                            if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81785,"user_id":1339,"body":"USING: preload kernel formatting sequences accessors ;\nIN: kata\n: stringify ( list -- str )\n  dup node? [ [ data>> \"%d\" sprintf ] [ next>> stringify ] bi { } 2sequence \" -> \" join ] [ drop \"+nil+\" ] if\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81786,"user_id":104,"body":"USING: accessors kernel preload present sequences ; ! 2020 nomennescio\nIN: kata\n: stringify ( list -- str ) \n  dup +nil+ = [ drop \"+nil+\" ]\n  [ [ \" -> \" ] dip [ data>> present ] [ next>> stringify ] bi surround ] if ; recursive","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"582cb0224e56e068d800003c":[{"id":81787,"user_id":168,"body":"USING: kernel math ;\nIN: litres\n: litres ( time -- n ) 2 \/i ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81788,"user_id":527,"body":"USING: math ;\nIN: litres\n: litres ( time -- n ) 2 \/i ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81789,"user_id":645,"body":"USING: kernel math ;\nIN: litres\n: litres ( time -- n ) 2 \/ >integer ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81790,"user_id":null,"body":"USING: math ;\nIN: litres\n\n: litres ( time -- n ) 1\/2 * >integer ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81791,"user_id":564,"body":"USING: math ;\nIN: litres\n: litres ( time -- n ) 0.5 * >integer ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81792,"user_id":104,"body":"! 2022 nomennescio\nUSING: math ;\nIN: litres\n\n: litres ( time -- n ) .5 * >integer ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81793,"user_id":null,"body":"USE: math\nIN: litres\n: litres ( time -- n ) 2 \/i ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81794,"user_id":50,"body":"USING: kernel math.functions math ;\nIN: litres\n: litres ( time -- n ) 2 \/ floor >integer ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81795,"user_id":null,"body":"USING: kernel math math.functions ;\nIN: litres\n: litres ( time -- n ) 0.5 * floor >integer ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81796,"user_id":null,"body":"USING: kernel math math.functions ;\nIN: litres\n: litres ( time -- n ) 0.5 * >integer ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"583a47342fb0ba1418000060":[{"id":81797,"user_id":104,"body":"! 2022 nomemnescio\nUSING: arrays kernel math math.bits math.complex math.parser math.polynomials math.vectors sequences ;\nIN: imaginary-base-conversion\n\nALIAS: >dec number>string ! Factor 0.99\n\n: make-bits-fix ( n -- bits ) dup zero? [ 1 <bits> ] [ make-bits ] if ; ! fix for bug (?) in make-bits\n: convert ( n -- r ) >dec bin> make-bits-fix [ 1 0 ? ] map dup length C{ 0 1 } powers v. >rect 2array ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81798,"user_id":null,"body":"USING: kernel math math.parser math.polynomials sequences ;\nIN: imaginary-base-conversion\n\n: convert ( n -- r )\n  number>string [ digit> ] map reverse C{ 0 1 } swap polyval >rect { } 2sequence ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81799,"user_id":168,"body":"USING: kernel arrays math math.parser sequences ;\nIN: imaginary-base-conversion\n\n: convert ( n -- r ) number>string { 0 0 } \n  [ CHAR: 1 = 1 0 ? [ first2 neg ] dip + swap 2array ] reduce ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81800,"user_id":null,"body":"USING: arrays kernel math math.functions math.text.utils sequences ;\nIN: imaginary-base-conversion\n\n: convert ( n -- r )\n    1 digit-groups 0 [ C{ 0 1 } swap ^ * + ] reduce-index >rect 2array ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81801,"user_id":null,"body":"USING: arrays kernel math math.functions math.text.utils sequences ;\nIN: imaginary-base-conversion\n\n: convert ( n -- r )\n    1 digit-groups [ C{ 0 1 } swap ^ * ] map-index sum >rect 2array ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81802,"user_id":713,"body":"USING: kernel math math.functions sequences ;\nIN: imaginary-base-conversion\n\n: number>digits ( n -- seq ) [ dup 0 = not ] [ 10 \/mod ] produce reverse! nip ;\n: convert ( n -- r ) number>digits reverse [ C{ 0 1 } swap ^ * ] map-index sum >rect {  } 2sequence ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81803,"user_id":29,"body":"USING: math kernel arrays ;\nIN: imaginary-base-conversion\n\n: conv ( n -- r ) dup 0 = [ [ 10 \/i conv C{ 0 1 } * ] [ 10 rem ] bi + ] unless ;\n: convert ( n -- r ) conv >rect 2array ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"588417e576933b0ec9000045":[{"id":81804,"user_id":527,"body":"USING: kernel math ;\nIN: seats-in-theater\n: seats-in-theater ( n-cols n-rows col row -- n ) swapd [ - 1 + ] [ - ] 2bi* * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81805,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math ;\nIN: seats-in-theater\n: seats-in-theater ( n-cols n-rows col row -- n ) rot swap - [ - 1 + ] dip * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81806,"user_id":29,"body":"USING: kernel math ;\nIN: seats-in-theater\n: seats-in-theater ( n-cols n-rows col row -- n ) swapd [ - ] 2bi@ swap 1 + * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81807,"user_id":null,"body":"USING: kernel math ;\nIN: seats-in-theater\n: seats-in-theater ( n-cols n-rows col row -- n )\n  swapd [ - ] 2bi@ [ 1 + ] [ * ] bi* ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81808,"user_id":713,"body":"USING: kernel locals math ;\nIN: seats-in-theater\n:: seats-in-theater ( nc nr c r -- n ) nc c - 1 + nr r - * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81809,"user_id":null,"body":"USING: kernel math ;\nIN: seats-in-theater\n: seats-in-theater ( n-cols n-rows col row -- n ) swapd - -rot - 1 + * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81810,"user_id":53,"body":"USING: kernel math locals ;\nIN: seats-in-theater\n:: seats-in-theater ( n-cols n-rows col row -- n ) n-cols col - 1 + n-rows row - * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81811,"user_id":null,"body":"USING: kernel math ;\nIN: seats-in-theater\n: seats-in-theater ( n-cols n-rows col row -- n )\n    swapd [ - 1 + ] [ - * ] 2bi* ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81812,"user_id":1339,"body":"USING: kernel locals math ;\nIN: seats-in-theater\n:: seats-in-theater ( n-cols n-rows col row -- n ) n-rows row - n-cols col - 1 + * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81813,"user_id":null,"body":"USING: kernel math ;\nIN: seats-in-theater\n\n: seats-in-theater ( n-cols n-rows col row -- n )\n    [ 1 - ] dip swapd [ - ] 2bi@ * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"58841cb52a077503c4000015":[{"id":81814,"user_id":676,"body":"USING: kernel locals math ;\nIN: circle-numbers\n:: circle-of-numbers ( n a -- x ) n 2\/ a + n mod ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81815,"user_id":713,"body":"USING: kernel math ;\nIN: circle-numbers\n: circle-of-numbers ( n f -- x ) dupd [ 2 \/i ] dip + swap mod ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81816,"user_id":29,"body":"USING: kernel math ;\nIN: circle-numbers\n: circle-of-numbers ( n first-number -- x ) over 2 \/i + swap rem ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81817,"user_id":null,"body":"USING: kernel math locals ;\nIN: circle-numbers\n:: circle-of-numbers ( n f -- x ) n 2 \/ f + n mod ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81818,"user_id":null,"body":"USING: locals math ;\nIN: circle-numbers\n:: circle-of-numbers ( n f -- x ) f n 2 \/ + n mod ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81819,"user_id":1339,"body":"USING: kernel math ;\nIN: circle-numbers\n: circle-of-numbers ( n first-number -- x ) [ dup 2\/ ] dip + swap mod ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81820,"user_id":564,"body":"USING: kernel math locals ;\nIN: circle-numbers\n:: circle-of-numbers ( n m -- x )\n  n 2 \/ m +\n  n mod\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81821,"user_id":null,"body":"USING: kernel math ;\nIN: circle-numbers\n: circle-of-numbers ( n x -- o ) over 2 \/ + swap mod ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81822,"user_id":15,"body":"USING: kernel math ;\nIN: circle-numbers\n: circle-of-numbers ( n m -- x ) over 2 \/ + swap mod ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81823,"user_id":15,"body":"USING: kernel math ;\nIN: circle-numbers\n: circle-of-numbers ( n m -- x ) swap dup 2 \/ swap [ + ] dip mod ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5886e082a836a691340000c3":[{"id":81824,"user_id":null,"body":"USING: combinators.extras kernel locals math math.functions\nmath.order math.ranges sequences ;\nIN: kata\n\n:: rectangle-rotation ( a b -- r )\n  a b + 8 sqrt \/i [ neg ] keep [a,b] [\n    [ b 2 sqrt \/i ] [ neg a 2 sqrt \/i ] bi\n    [ + ] [ - ] [ 2bi@ ] bi-curry@ 4bi\n    [ min ] [ max ] 2bi* - 1 +\n  ] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81825,"user_id":29,"body":"USING: kernel math math.functions ;\nIN: kata\n: rectangle-rotation ( a b -- r ) [ 2 sqrt \/i ] bi@ 2dup * -rot 2dup [ 1 + ] bi@ * -rot [ 2 mod ] bi@ bitxor - + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81826,"user_id":53,"body":"USING: kernel math math.functions locals combinators ;\nIN: kata\n\n:: rectangle-rotation ( a b -- r )\n  a 2 sqrt \/i :> x\n  b 2 sqrt \/i :> y\n  x 1 + y 1 + * x y * + :> r\n  r r 2 mod + 1 -\n  ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81827,"user_id":1339,"body":"USING: kernel math math.functions ;\nIN: kata\n\n: rectangle-rotation ( a b -- r ) [ 2 sqrt \/i 0.5 + ] bi@ * 2 * ceiling [ 1 - ] [ 2 mod ] bi + >integer ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81828,"user_id":104,"body":"USING: kernel math math.functions prettyprint ;\nIN: kata\n\n: points ( side -- points ) 2 sqrt \/ >integer 1 + ; \n: rectangle-rotation ( a b -- r ) [ points ] bi@ 2dup [ 1 - ] bi@ * -rot * + 1 - 1 bitor ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81829,"user_id":168,"body":"USING: kernel math math.functions ;\nIN: kata\n\n: rectangle-rotation ( a b -- r )\n  [ 2 sqrt \/i ] bi@ [ * 2 * ] [ + ] [ bitxor 1 bitand 1 - ] 2tri - + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81830,"user_id":645,"body":"USING: kernel locals math math.functions ;\nIN: kata\n\n:: rectangle-rotation ( a b -- r )\n  a 2 sqrt \/i :> h\n  b 2 sqrt \/i :> v\n  h v * h 1 + v 1 + * + h 2 mod v 2 mod bitxor -\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"58941fec8afa3618c9000184":[{"id":81831,"user_id":168,"body":"USING: kernel math math.order ;\nIN: kata\n: growing-plant ( up-speed down-speed desired-height -- x ) \n  1 - over - -rot - \/i 1 + 1 max ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81832,"user_id":527,"body":"USING: kernel math math.functions math.order ;\nIN: kata\n: growing-plant ( up-speed down-speed desired-height -- x )\n  -rot [ - ] curry bi@ \/ ceiling 1 max ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81833,"user_id":53,"body":"USING: kernel locals math math.functions math.order ;\nIN: kata\n:: growing-plant ( u d m -- x ) \n  1 m d - u d - \/ ceiling max >integer ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81834,"user_id":null,"body":"USING: fry kernel math ;\nIN: kata\n\n: growing-plant ( up-speed down-speed desired-height -- x )\n    [ 0 0 0 ] 3dip '[ _ >= ] -rot\n    '[ [ 1 + ] dip _ + [ _ - ] keep ] until drop ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81835,"user_id":null,"body":"USING: accessors combinators fry kernel math ;\nIN: kata\n\nTUPLE: plant up down height age max ;\n\n: <plant> ( up down -- plant ) 0 0 0 plant boa ;\n\n: grow ( plant -- )\n    {\n        [ up>> ]\n        [ height>> + ]\n        [ height<< ]\n        [ height>> ]\n        [ max<< ]\n    } cleave ;\n    \n: shrink ( plant -- ) [ height>> ] [ down>> - ] [ height<< ] tri ;\n\n: do-day ( plant -- )\n    {\n        [ grow ]\n        [ shrink ]\n        [ age>> 1 + ]\n        [ age<< ]\n    } cleave ;\n\n: growing-plant ( up down target -- x )\n    [ <plant> ] dip\n    '[ dup max>> _ >= ] [ dup do-day ] until age>> ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81836,"user_id":645,"body":"USING: kernel math math.functions math.order ;\nIN: kata\n: growing-plant ( up-speed down-speed desired-height -- x ) over - -rot - \/ ceiling 1 max ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81837,"user_id":645,"body":"USING: kernel math math.functions math.order ;\nIN: kata\n: growing-plant ( up-speed down-speed desired-height -- x ) over - -rot - \/ ceiling 1 max ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81838,"user_id":29,"body":"USING: kernel math math.functions ;\nIN: kata\n: growing-plant ( up down res -- x )\n  3dup nip > [ 3drop 1 ] [ pick - [ - ] dip swap \/ ceiling 1 + ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81839,"user_id":null,"body":"USING: locals math math.order ;\nIN: kata\n:: growing-plant ( u d h -- n ) h u + 2 d * - 1 - u d - \/i 1 max ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81840,"user_id":1339,"body":"USING: kernel locals math math.functions math.order ;\nIN: kata\n:: growing-plant ( u d h -- x )\n  h u - 1 - u d - \/ floor 1 + 0 max 1 +\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5899dc03bc95b1bf1b0000ad":[{"id":81841,"user_id":527,"body":"USING: math sequences ;\nIN: invert\n: invert ( xs -- ns ) [ neg ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81842,"user_id":null,"body":"USING: math sequences ;\nIN: invert\n\n: invert ( seq -- new-seq ) [ neg ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81843,"user_id":null,"body":"USING: kernel math sequences ;\nIN: invert\n: invert ( xs -- ns ) [ neg ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81844,"user_id":null,"body":"USING: sequences math ;\nIN: invert\n: invert ( xs -- ns ) [ neg ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81845,"user_id":645,"body":"USING: kernel sequences math ;\nIN: invert\n: invert ( xs -- ns ) [ neg ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81846,"user_id":527,"body":"USING: math sequences ;\nIN: invert\n: invert ( a -- n ) [ neg ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81847,"user_id":null,"body":"USE: math.vectors\nIN: invert\nALIAS: invert vneg","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81848,"user_id":53,"body":"USING: kernel locals math sequences ;\nIN: invert\n\n:: invert ( xs -- ns ) xs [ neg ]  map\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81849,"user_id":53,"body":"USING: formatting io kernel locals math math.functions math.parser arrays sequences ;\nIN: invert\n\n:: invert ( xs -- ns ) xs [ -1 * ]  map\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81850,"user_id":15,"body":"USING: kernel math sequences ;\nIN: invert\n: invert ( xs -- ns ) [ 0 swap - ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"58a6af7e8c08b1e9c40001c1":[{"id":81851,"user_id":527,"body":"USING: math math.bitwise ;\nIN: hamming-distance\n\n: hamming-distance ( a b -- r ) bitxor bit-count ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81852,"user_id":29,"body":"USING: kernel math math.parser sequences ;\nIN: hamming-distance\n\n: hamming-distance ( a b -- r ) bitxor >bin [ 49 = ] count ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81853,"user_id":104,"body":"! 2022 nomennescio\nUSING: math math.bitwise ;\nIN: hamming-distance\n\n: hamming-distance ( a b -- r ) bitxor bit-count ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81854,"user_id":null,"body":"USING: kernel math.parser sequences ;\nQUALIFIED: math.distances\nIN: hamming-distance\n\n: hamming-distance ( a b -- r )\n  [ >bin 20 CHAR: 0 pad-head ] bi@ math.distances:hamming-distance ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81855,"user_id":53,"body":"USING: kernel math math.parser sequences locals ;\nIN: hamming-distance\n\n:: hamming-distance ( a b -- r ) a b bitxor >bin [ 49 = ] count ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"58acfe4ae0201e1708000075":[{"id":81856,"user_id":527,"body":"USING: math sequences ;\nIN: kata\n: invite-more-women ( l -- x ) sum 0 > ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81857,"user_id":null,"body":"USING: kernel sequences math ;\nIN: kata\n: invite-more-women ( l -- x )\n    sum 0 >\n    ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81858,"user_id":645,"body":"USING: kernel math sequences ;\nIN: kata\n: invite-more-women ( l -- x ) sum 0 > ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81859,"user_id":1339,"body":"USING: sequences math ;\nIN: kata\n: invite-more-women ( l -- x ) sum 0 > ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81860,"user_id":564,"body":"USING: kernel math sequences ;\nIN: kata\n: invite-more-women ( people -- ? ) sum 0 > ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81861,"user_id":564,"body":"USING: kernel locals math sequences ;\nIN: kata\n:: invite-more-women ( people -- ? )\n  people [ -1 = ] count\n  people [ 1 = ] count\n  <\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81862,"user_id":104,"body":"! 2020 nomennescio\nUSING: math sequences ;\nIN: kata\n: invite-more-women ( genders -- invite-more-women? ) sum 0 > ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81863,"user_id":168,"body":"USING: kernel sequences math ;\nIN: kata\n: invite-more-women ( l -- x ) sum 0 > t f ? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"58ce8725c835848ad6000007":[{"id":81864,"user_id":564,"body":"USING: kernel locals math ;\nIN: drying-potatoes\n\n:: potatoes ( p0 w0 p1 -- w ) w0 100 p0 - * 100 p1 - \/i ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81865,"user_id":527,"body":"USING: kernel math ;\nIN: drying-potatoes\n\n: potatoes ( p0 w0 p1 -- w ) rot 100 - rot * swap 100 - \/i ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81866,"user_id":null,"body":"USING: math locals ;\nIN: drying-potatoes\n\n:: potatoes ( p0 w0 p1 -- w )\n  w0 100 p0 - * 100 p1 - \/ >integer ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81867,"user_id":null,"body":"USING: kernel locals math math.functions ;\nIN: drying-potatoes\n! w0 = w0 * p0 + w0 * (1 - p0)\n! w1 = w1 * p1 + w1 * (1 - p1)\n! w0 * (1 - p0) = w1 * (1 - p1)\n!\n! w1 = w0 * (1 - p0) \/ (1 - p1)\n:: potatoes ( p0 w0 p1 -- w ) 100 p0 - 100 p1 - \/ w0 * truncate ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81868,"user_id":null,"body":"USING: kernel math ;\nIN: drying-potatoes\n\n: potatoes ( p0 w0 p1 -- w ) rot [ 100 - neg ] bi@ swap \/ * >integer ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81869,"user_id":29,"body":"USING: kernel locals math ;\nIN: drying-potatoes\n\n:: potatoes ( b t a -- w ) t b t * 100 \/ - dup a * 100 a - \/ + 1 \/i ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81870,"user_id":53,"body":"USING: kernel locals math ;\nIN: drying-potatoes\n\n:: potatoes ( p0 w0 p1 -- w ) 100 p0 - w0 * 100 p1 - \/i ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81871,"user_id":null,"body":"USING: kernel math math.functions ;\nIN: drying-potatoes\n\n: potatoes ( p0 w0 p1 -- w )\n  rot swap -rot 100 swap - * swap 100 swap - \/ truncate\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81872,"user_id":null,"body":"USING: kernel locals math math.functions ;\nIN: drying-potatoes\n\n:: potatoes ( p0 w0 p1 -- w )\n  100 w0 * p0 w0 * - 100 p1 - \/ floor ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81873,"user_id":1339,"body":"USING: kernel math math.functions ;\nIN: drying-potatoes\n\n: potatoes ( p0 w0 p1 -- w ) swapd [ 100 swap - ] bi@ \/ * floor ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"58fea5baf3dff03a6e000102":[{"id":81874,"user_id":168,"body":"USING: math math.functions math.ranges math.order sequences ;\nIN: factor-digit\n\n: factor-digit ( n -- r ) [1,b] [ log10 ] map-sum ceiling >integer 1 max ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81875,"user_id":null,"body":"USING: math math.functions math.order math.ranges sequences ;\nIN: factor-digit\n\n: factor-digit ( n -- r ) [1,b] [ log10 ] map-sum ceiling >integer 1 max ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81876,"user_id":null,"body":"USING: kernel math locals math.functions math.constants ;\nIN: factor-digit\n\n:: factor-digit ( n -- r ) n n e \/ log10 * 2 pi n * * log10 2 \/ + >integer 1 + ; ","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81877,"user_id":527,"body":"USING: math math.functions math.ranges sequences ;\nIN: factor-digit\n\n: factor-digit ( n -- r )\n  [1,b] [ log10 ] map-sum >integer 1 + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81878,"user_id":null,"body":"USING: kernel math math.constants math.functions ;\nIN: factor-digit\n\n: (factor-digit) ( n -- r )\n    [ 2pi * log10 2 \/ ]\n    [ e \/ log10 ]\n    [ * + ceiling >integer ] tri ;\n    \n: factor-digit ( n -- r )\n    dup 2 < [ drop 1 ] [ (factor-digit) ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81879,"user_id":53,"body":"USING: kernel math math.functions math.constants combinators locals ;\nIN: factor-digit\n\n:: factor-digit ( n -- r )\n  {\n    { [ n 0 < ] [ 0 ] }\n    { [ n 1 <= ] [ 1 ] }\n    [ n n e \/ log10 * 2 pi * n * log10 2 \/ + ceiling >integer ]\n  } cond ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81880,"user_id":104,"body":"! 2021 nomennescio\nUSING: kernel locals math math.constants math.functions math.functions.integer-logs ;\nIN: factor-digit\n\n:: factor-digit ( n -- r ) n 10 < [ 1 ] [ n e \/ log10 n * 2 pi n * * log10 .5 * + ceiling >integer ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81881,"user_id":29,"body":"USING: kernel math math.functions math.constants ;\nIN: factor-digit\n\n: factor-digit ( n -- r )\n  dup 1 > [ dup dup e \/ swap 2 pi * * [ log10 ] bi@ 2 \/ -rot * + ceiling >integer ] [ drop 1 ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5933a1f8552bc2750a0000ed":[{"id":81882,"user_id":null,"body":"USING: math ;\nIN: nth-even\n: nth-even ( n -- n ) 1 - 2 * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81883,"user_id":645,"body":"USING: kernel math ;\nIN: nth-even\n: nth-even ( n -- n ) 1 - 2 * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81884,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math ;\nIN: nth-even\n\n: nth-even ( n -- n ) 1 [ - ] [ shift ] bi ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81885,"user_id":null,"body":"USE: math\nIN: nth-even\n: nth-even ( n -- n ) 1 - 2 * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81886,"user_id":713,"body":"USING: math kernel ;\nIN: nth-even\n: nth-even ( n -- n ) 1 - 2 * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81887,"user_id":null,"body":"USING: kernel lists.lazy lists math ;\nIN: nth-even\n: nth-even ( n -- n ) 2 * 2 - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81888,"user_id":null,"body":"USING: kernel math ;\nIN: nth-even\n\n: nth-even ( n -- n ) dup + 2 - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81889,"user_id":null,"body":"USING: math ;\nIN: nth-even\n\n: nth-even ( n -- n ) 2 * 2 - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81890,"user_id":15,"body":"USING: locals math ;\nIN: nth-even\n:: nth-even ( n -- n ) n 1 - 2 * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"59342039eb450e39970000a6":[{"id":81891,"user_id":53,"body":"USING: kernel math ;\nIN: odd-count\n: odd-count ( n -- n ) 2 \/i ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81892,"user_id":492,"body":"USING: kernel math ;\nIN: odd-count\n: odd-count ( n -- n ) 2.0 \/ >integer ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81893,"user_id":29,"body":"USE: math\nIN: odd-count\n: odd-count ( n -- n ) 2 \/i ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81894,"user_id":null,"body":"USING: math ;\nIN: odd-count\nALIAS: odd-count 2\/","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81895,"user_id":15,"body":"USING: math ;\nIN: odd-count\n: odd-count ( n -- n ) 2 \/i ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81896,"user_id":527,"body":"USING: math ;\nIN: odd-count\n: odd-count ( n -- n ) 2\/ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81897,"user_id":null,"body":"USING: kernel math math.functions ;\nIN: odd-count\n: odd-count ( n -- n ) 0.5 * >integer ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81898,"user_id":null,"body":"USING: kernel math math.functions ;\nIN: odd-count\n: odd-count ( n -- n ) 0.5 * 0.5 - round >integer ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81899,"user_id":676,"body":"USING: kernel math ;\nIN: odd-count\n: odd-count ( n -- n ) dup 2 mod - 2\/ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81900,"user_id":645,"body":"USING: kernel math math.functions ;\nIN: odd-count\n: odd-count ( n -- n ) 2 \/ floor ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"595467c63074e38ba4000063":[{"id":81901,"user_id":527,"body":"USING: bit-vectors combinators.extras kernel math.bits sequences ;\nIN: virus\n\n: incomplete-virus ( n -- r )\n  [ f ] dip [ {\n    { [ drop over ] [ t ] }\n    { [ CHAR: 0 = ] [ f ] }\n    { [ CHAR: 1 = ] [ t ] }\n    [ 2drop t t ]\n  } cond-case ] ?V{ } map-as nip <reversed> bits>number ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81902,"user_id":null,"body":"USING: kernel math math.parser sequences strings ;\nIN: virus\n\n: incomplete-virus ( str -- r )\n  dup [ CHAR: 1 > ] find drop \n  [ cut length CHAR: 1 <string> append ] when* bin> ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81903,"user_id":104,"body":"! 2022 nomennescio\n\nUSING: kernel math.parser regexp sequences strings ;\nIN: virus\n\n: ones ( n -- string ) CHAR: 1 <string> ;\n: >maxbin ( string -- string' ) R\/ [2-9].*\/ [ length ones ] re-replace-with ;\n: incomplete-virus ( n -- r ) >maxbin bin> ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81904,"user_id":104,"body":"! 2022 nomennescio\n\nUSING: kernel math math.parser prettyprint sequences sets strings ;\nIN: virus\n\n: find* ( seq quot -- index element\/f ) [ drop length ] [ find ] 2bi [ drop swap or ] keep ; inline    \n: first ( string -- index ) [ \"23456789\" in? ] find* drop ;\n: ones ( n -- string ) CHAR: 1 <string> ;\n: dec>bin ( string -- string' ) dup [ length ] [ first ] bi [ nip head ] [ - ones nip ] 3bi append ;\n: incomplete-virus ( n -- r ) dec>bin bin> ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81905,"user_id":null,"body":"USING: kernel math.order math.parser sequences strings ;\nIN: virus\n\n: incomplete-virus ( str -- n )\n    dup length CHAR: 1 <string> min dup bin>\n    [ nip ] [ [ CHAR: 1 min ] map bin> ] if* ;\n    ","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81906,"user_id":168,"body":"USING: regexp sequences strings math.parser ;\nIN: virus\n\n: incomplete-virus ( n -- r ) \n  R\/ [2-9].*\/ [ length CHAR: 1 <string> ] re-replace-with bin> ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81907,"user_id":29,"body":"USING: kernel regexp math.parser sequences ;\nIN: virus\n\n: incomplete-virus ( n -- r )\n  R\/ [2-9].*\/ [ length \"1\" <repetition> concat ] re-replace-with\n  \"0b\" swap append string>number ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"59706036f6e5d1e22d000016":[{"id":81908,"user_id":1339,"body":"USING: kernel sequences math ;\nIN: kata\n: words-to-marks ( s -- x ) [ 96 - ] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81909,"user_id":null,"body":"USING: math sequences ;\nIN: kata\n\n: words-to-marks ( seq -- n ) [ 96 - ] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81910,"user_id":104,"body":"! 2020 nomennescio\nUSING: kernel math sequences ;\nIN: kata\n: words-to-marks ( string -- gematria )  [ CHAR: a - 1 + ] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81911,"user_id":564,"body":"USING: kernel math sequences ;\nIN: kata\n: words-to-marks ( s -- x ) [ 96 - ] map sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81912,"user_id":null,"body":"USING: kernel math sequences ;\nIN: kata\n: words-to-marks ( s -- x ) 0 [ swap 96 - + ] reduce ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81913,"user_id":645,"body":"USING: kernel sequences math arrays ;\nIN: kata\n: words-to-marks ( s -- x ) >array [ 96 - ] [ + ] map-reduce ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81914,"user_id":527,"body":"USING: math sequences ;\nIN: kata\n: words-to-marks ( s -- x ) [ 96 - ] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81915,"user_id":29,"body":"USING: kernel sequences math ;\nIN: kata\n: words-to-marks ( s -- x ) [ sum ] [ length 96 * ] bi - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81916,"user_id":null,"body":"USING: sequences math ;\nIN: kata\n: words-to-marks ( x -- x ) [ 96 - ] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81917,"user_id":null,"body":"USING: math sequences ;\nIN: kata\n: words-to-marks ( s -- x ) [ CHAR: ` - ] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"598106cb34e205e074000031":[{"id":81918,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math sequences sets splitting ;\nIN: hamelin\n\n: count-deaf-rats ( town -- n ) \" \" without 0 [ even? swap CHAR: O = and [ 1 + ] when ] reduce-index ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81919,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math sequences sets splitting ;\nIN: hamelin\n\n: count-deaf-rats ( town -- n ) \"~OP\" within 0 [ [ CHAR: O = ] [ even? ] bi* and [ 1 + ] when ] reduce-index ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81920,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math sequences sets splitting ;\nIN: hamelin\n\n: count-deaf-rats ( town -- n ) \"~OP\" within CHAR: P over index cut reverse append 0 [ [ CHAR: O = ] [ even? ] bi* and [ 1 + ] when ] reduce-index ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81921,"user_id":null,"body":"USING: kernel multiline peg peg.ebnf sequences splitting ;\nIN: hamelin\n\nEBNF: parse [=[\n  rule = (\"O~\"|\"~O\"~)*\n]=]\n\n: count-deaf-rats ( town -- n )\n  \"P\" split1 reverse append\n  [ 32 = ] reject\n  parse [ ignore = ] reject length ;\n  ","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81922,"user_id":168,"body":"USING: kernel math splitting sequences ;\nIN: hamelin\n\n: count-deaf-rats ( town -- n ) \" \" \"\" replace \n    [ swap CHAR: ~ = [ odd? 1 0 ? ] [ drop 0 ] if ] map-index sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81923,"user_id":null,"body":"USING: kernel math multiline peg peg.ebnf sequences splitting ;\nIN: hamelin\n\nEBNF: tokenize [=[\n  ws = \" \"* => [[ drop ignore ]]\n  tokens = (ws (\"~O\" | \"O~\" | \"P\") ws)*\n]=]\n\n: count-deaf-rats ( town -- n )\n    tokenize { \"P\" } split1 [ \"~O\" = ] count swap [ \"O~\" = ] count + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81924,"user_id":29,"body":"USING: kernel math splitting sequences sequences.extras ;\nIN: hamelin\n\n: [::2] ( seq -- seq[::2] ) [ swap drop even? ] filter-index ;\n\n! Based on B4B's Python solution\n: count-deaf-rats ( town -- n )\n  \" \" \"\" replace [::2]\n  [ CHAR: O = ] count ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5982619d2671576e90000017":[{"id":81925,"user_id":null,"body":"USING: ascii grouping sequences.extras ;\nIN: meme\n\n: sponge-meme ( sentence -- result ) 2 group [ capitalize ] map-concat ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81926,"user_id":527,"body":"USING: kernel sequences sequences.repeating unicode ;\nIN: meme\n\n: sponge-meme ( sentence -- result )\n  { [ ch>upper ] [ ch>lower ] } over length <cycles> [ call( c -- c ) ] 2map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81927,"user_id":104,"body":"! 2022 nomennescio\nUSING: ascii kernel math sequences ;\nIN: meme\n\n: sponge-meme ( sentence -- result ) [ even? [ ch>upper ] [ ch>lower ] if ] \"\" map-index-as ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81928,"user_id":null,"body":"USING: ascii kernel math sequences ;\nIN: meme\n\n: sponge-meme ( sentence -- result )\n  [ even? [ ch>upper ] [ ch>lower ] if ] \"\" map-index-as ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81929,"user_id":713,"body":"USING: kernel sequences math ascii strings ;\nIN: meme\n\n: sponge-meme ( sentence -- result )\n  [ odd? [ ch>lower ] [ ch>upper ] if 1string ] map-index \"\" join ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81930,"user_id":527,"body":"USING: kernel math sequences unicode ;\nIN: meme\n\n: sponge-meme ( sentence -- result )\n  [ even? [ ch>upper ] [ ch>lower ] if ] \"\" map-index-as ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81931,"user_id":168,"body":"USING: kernel sequences math ascii ;\nIN: meme\n\n: sponge-meme ( sentence -- result ) \n  [ even? [ ch>upper ] [ ch>lower ] if ] \"\" map-index-as ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81932,"user_id":null,"body":"USING: unicode sequences math kernel ;\nIN: meme\n\n: sponge-meme ( sentence -- result ) [ even? [ ch>upper ] [ ch>lower ] if ] \"\" map-index-as ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81933,"user_id":29,"body":"USING: kernel math sequences ascii ;\nIN: meme\n\n: sponge-meme ( sentence -- result )\n  [ even? [ ch>upper ] [ ch>lower ] if ] \"\" map-index-as ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"59a8570b570190d313000037":[{"id":81934,"user_id":645,"body":"USING: kernel sequences math math.functions math.ranges ;\nIN: sum-cubes\n: sum-cubes ( n -- x ) [1,b] [ 3 ^ ] map sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81935,"user_id":564,"body":"USING: kernel math math.functions math.ranges sequences ;\nIN: sum-cubes\n: sum-cubes ( n -- x ) [1,b] [ 3 ^ ] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81936,"user_id":null,"body":"USING: kernel math.functions math.ranges sequences ;\nIN: sum-cubes\n: sum-cubes ( n -- x ) [1,b] [ 3 ^ ] map sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81937,"user_id":null,"body":"USING: kernel math.ranges math.functions sequences ;\nIN: sum-cubes\n: sum-cubes ( n -- x )\n    [1,b] [ 3 ^ ] map-sum\n    ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81938,"user_id":544,"body":"USING: kernel math math.functions math.ranges sequences ;\nIN: sum-cubes\n\n: sum-cubes ( n -- x ) \n  [1,b] [ 3 ^ ] map sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81939,"user_id":null,"body":"USING: kernel sequences math.ranges math math.functions ;\nIN: sum-cubes\n: sum-cubes ( n -- sum^3 ) [1,b] 0 [ 3 ^ + ] reduce ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81940,"user_id":null,"body":"USING: sequences math.ranges math.functions ;\nIN: sum-cubes\n: sum-cubes ( n -- x ) [1,b] [ 3 ^ ] map sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81941,"user_id":15,"body":"USING: kernel math ;\nIN: sum-cubes\n: sum-cubes ( n -- x ) dup sq + sq 4 \/ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81942,"user_id":null,"body":"USING: kernel math.ranges math.functions sequences ;\nIN: sum-cubes\n: sum-cubes ( n -- x ) [1,b] [ 3 ^ ] map sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81943,"user_id":null,"body":"USING: math math.ranges sequences ;\nIN: sum-cubes\n: sum-cubes ( n -- x ) [1,b] sum sq ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"59f11118a5e129e591000134":[{"id":81944,"user_id":null,"body":"USING: assocs kernel math math.statistics sequences ;\nIN: kata\n\n: repeats ( seq -- n )\n  histogram [ nip 1 = ] assoc-filter keys sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81945,"user_id":564,"body":"USING: assocs kernel math math.statistics prettyprint sequences ;\nIN: kata\n\n: repeats ( seq -- n )\n  histogram [ 1 = ] assoc-map sift-values keys sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81946,"user_id":1339,"body":"USING: kernel sets sequences ;\nIN: kata\n\n: repeats ( seq -- n ) dup duplicates diff sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81947,"user_id":168,"body":"USING: kernel math.statistics assocs sequences ;\nIN: kata\n\n: repeats ( seq -- n ) histogram [ nip 1 = ] assoc-filter keys sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81948,"user_id":29,"body":"USING: kernel math.statistics assocs sequences ;\nIN: kata\n\n: repeats ( seq -- n ) [ histogram ] keep [ over at 1 = ] filter sum nip ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81949,"user_id":null,"body":"USING: kernel math.statistics assocs sequences ;\nIN: kata\n\n: repeats ( seq -- n ) histogram unzip swap zip [ first 1 = ] filter [ last ] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81950,"user_id":544,"body":"USING: kernel sets sets.extras sequences ;\nIN: kata\n\n: repeats ( seq -- n )\n   dup members swap duplicates diff sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81951,"user_id":null,"body":"USING: kernel math sequences assocs ;\nIN: kata\n\n: repeats ( seq -- n ) \n  H{ } clone over [\n    over [\n      dup 0 ? 1 +\n    ] change-at\n  ] each\n  swap [\n    over over swap at 1 = [ drop 0 ] unless\n  ] map nip sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81952,"user_id":null,"body":"USING: assocs kernel math.statistics sequences ;\nIN: kata\n\n: repeats ( seq -- n )\n    histogram [ nip 1 = ] assoc-filter keys sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81953,"user_id":104,"body":"! 2020 nomennescio\nUSING: assocs kernel math.statistics sequences ;\nIN: kata\n\n: repeats ( seq -- n ) histogram >alist [ second 1 = ] filter keys sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5a023c426975981341000014":[{"id":81954,"user_id":645,"body":"USING: kernel math ;\nIN: other-angle\n: other-angle ( a b -- n ) + 180 swap - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81955,"user_id":713,"body":"USING: math kernel ;\nIN: other-angle\n: other-angle ( a b -- n ) + 180 - neg ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81956,"user_id":1339,"body":"USING: math ;\nIN: other-angle\n: other-angle ( a b -- n ) + 180 - neg ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81957,"user_id":15,"body":"USING: kernel math ;\nIN: other-angle\n: other-angle ( a b -- n ) 180 swap - swap - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81958,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math ;\nIN: other-angle\n\n: other-angle ( a b -- n ) + 180 swap - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81959,"user_id":null,"body":"USING: kernel math ;\nIN: other-angle\n: other-angle ( a b -- n ) + 180 - neg ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81960,"user_id":50,"body":"USING: kernel math sequences ;\nIN: other-angle\n: other-angle ( a b -- n ) \n  swap +\n  180  - \n  neg\n  ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81961,"user_id":53,"body":"USING: kernel math locals ;\nIN: other-angle\n:: other-angle ( a b -- n ) 180 a b + - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5a03b3f6a1c9040084001765":[{"id":81962,"user_id":null,"body":"USING: math ;\nIN: kata\n\n: angle ( n -- sum ) 2 * 4 - 90 * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81963,"user_id":53,"body":"USING: math kernel ;\nIN: kata\n\n: angle ( n -- sum ) 2 - 180 * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81964,"user_id":null,"body":"USE: math\nIN: kata\n\n: angle ( n -- sum ) 2 - 180 * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81965,"user_id":104,"body":"USING: math ; ! 2020 nomennescio\nIN: kata\n\n: angle ( n -- sum ) 2 - 180 * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81966,"user_id":76,"body":"USING: math locals ;\nIN: kata\n\n:: angle ( n -- sum ) n 2 - 180 * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81967,"user_id":645,"body":"USING: math ;\nIN: kata\n\n: angle ( n -- sum ) 2 - 180 * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5a1ebc2480171f29cf0000e5":[{"id":81968,"user_id":null,"body":"USING: math math.constants sequences sorting ;\nIN: kata\n\nGENERIC: area ( obj -- x )\nM: sequence area product ;\nM: real area sq pi * ;\n\n: sort-by-area ( seq -- newseq ) [ area ] sort-with ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81969,"user_id":564,"body":"USING: kernel locals math math.constants sequences sorting ;\nIN: kata\n\n: >area ( lw-or-rad -- area )\n  dup sequence?\n  [ product ]\n  [ dup * pi * ]\n  if\n;\n\n: sort-by-area ( seq -- new-seq ) [ >area ] sort-with ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81970,"user_id":null,"body":"USING: kernel locals match math math.constants math.order sequences sorting ;\nIN: kata\n\nMATCH-VARS: ?l ?w ;\n\n: area ( seq -- n ) {\n    { { ?l ?w } [ ?l ?w * ] }\n    { ?l [ ?l ?l pi * * ] }\n    { _ [ -1 ] }\n  } match-cond ;\n\n: sort-by-area ( seq -- new-seq ) [| x y | x area y area <=> ] sort ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81971,"user_id":29,"body":"USING: kernel sequences math sorting math.constants ;\nIN: kata\n: sort-by-area ( seq -- new-seq ) [ dup sequence? [ first2 * ] [ sq pi * ] if ] sort-with ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81972,"user_id":null,"body":"USING: kernel math math.constants sequences sorting ;\nIN: kata\n: sort-by-area ( seq -- new-seq )\n  [ dup number? [ sq pi * ] [ product ] if ] sort-with ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81973,"user_id":1339,"body":"USING: kernel math math.constants sequences sorting ;\nIN: kata\n: key-func ( any -- area ) dup sequence? [ 1 [ * ] reduce ] [ sq pi * ] if ;\n: sort-by-area ( seq -- new-seq ) [ key-func ] sort-with ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81974,"user_id":104,"body":"USING: kernel math math.constants sequences sorting ; ! 2020 nomennescio\nIN: kata\n: area ( width+length-or-radius -- area ) dup sequence? [ product ] [ dup pi * * ] if ;\n: sort-by-area ( seq -- new-seq ) [ area ] sort-with ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81975,"user_id":527,"body":"USING: kernel math math.constants sequences sorting ;\nIN: kata\n: sort-by-area ( seq -- new-seq ) [ dup sequence? [ product ] [ dup * pi * ] if ] sort-with ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81976,"user_id":null,"body":"USING: arrays kernel math math.constants sequences sorting ;\nIN: kata\n\n: area ( elt -- x ) dup array? [ product ] [ sq pi * ] if ;\n: sort-by-area ( seq -- new-seq ) [ area ] sort-with ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81977,"user_id":168,"body":"USING: kernel math math.constants math.order sequences sorting ;\nIN: kata\n\n: area ( object -- x ) dup sequence? [ product ] [ sq pi * ] if ;\n\n: sort-by-area ( seq -- new-seq ) [ area ] sort-with ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5a2be17aee1aaefe2a000151":[{"id":81978,"user_id":564,"body":"USING: sequences ;\nIN: kata\n: 2sum ( seq1 seq2 -- sum ) append sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81979,"user_id":null,"body":"USING: kernel math sequences ;\nIN: kata\n: 2sum ( seq1 seq2 -- sum ) [ sum ] bi@ + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81980,"user_id":527,"body":"USING: kernel math sequences ;\nIN: kata\n: 2sum ( seq1 seq2 -- sum ) sum swap sum + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81981,"user_id":null,"body":"USE: sequences\nIN: kata\n: 2sum ( seq1 seq2 -- sum ) append sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81982,"user_id":29,"body":"USING: sequences math ;\nIN: kata\n: 2sum ( seq1 seq2 -- sum ) append 0 [ + ] reduce ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81983,"user_id":53,"body":"USING: kernel sequences math locals ;\nIN: kata\n:: 2sum ( seq1 seq2 -- sum ) seq1 sum seq2 sum + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81984,"user_id":104,"body":"USING: kernel math sequences ; ! 2020 nomennescio\nIN: kata\n: 2sum ( seq1 seq2 -- sum ) sum swap sum + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5a3e1319b6486ac96f000049":[{"id":81985,"user_id":544,"body":"USING: kernel grouping sequences math ;\nIN: kata\n\n: pairs ( seq -- n )\n  2 group\n  [ length 2 = ] filter \n  [ first2 - abs 1 = ] filter \n  length ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81986,"user_id":527,"body":"USING: grouping kernel math sequences ;\nIN: kata\n\n: pairs ( seq -- n ) 2 group [ [ first ] [ ?second ] bi [ - abs 1 = ] [ drop f ] if* ] count ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81987,"user_id":564,"body":"USING: kernel locals math sequences ;\nIN: kata\n\n: <odds> ( seq -- newseq )\n  [ odd? [ ] [ drop f ] if ] map-index sift ;\n\n: <evens> ( seq -- newseq )\n  [ even? [ ] [ drop f ] if ] map-index sift ;\n\n:: pairs ( ns -- n )\n  ns <odds>\n  ns <evens>\n  [ - abs ] 2map\n  [ 1 = ] count ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81988,"user_id":1339,"body":"USING: kernel math grouping sequences ;\nIN: kata\n\n: test-pair ( seq -- ? ) [ first ] [ last ] bi - abs 1 = ;\n: pairs ( seq -- n ) 2 group [ test-pair ] count ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81989,"user_id":564,"body":"USING: kernel locals math sequences ;\nIN: kata\n\n:: count-consecutives ( count seq -- count )\n  seq length 2 < [\n    count\n  ] [\n    seq first2 - abs 1 = [ 1 ] [ 0 ] if count +\n    seq 2 tail count-consecutives\n  ] if\n;\n\n:: pairs ( seq -- n ) 0 seq count-consecutives ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81990,"user_id":168,"body":"USING: kernel sequences math math.ranges ;\nIN: kata\n\n: evens ( seq -- seq )\n  dup length 1 - 0 swap 2 <range> swap nths ;\n  \n: odds ( seq -- seq )\n  dup length 1 - 1 swap 2 <range> swap nths ;\n\n: pairs ( seq -- n ) [ evens ] [ odds ] bi\n  [ - abs 1 = [ 1 ] [ 0 ] if ] [ + ] 2map-reduce ;\n  ","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81991,"user_id":29,"body":"USING: kernel grouping math sequences ;\nIN: kata\n\n: pairs ( seq -- n ) 2 group [ dup length 2 = [ first2 - abs 1 = ] [ drop f ] if ] filter length ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81992,"user_id":null,"body":"USING: kernel math grouping sequences ;\nIN: kata\n\n: pairs ( seq -- n ) dup 2 group swap length 2 mod head* [ first2 - abs 1 = ] count ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81993,"user_id":null,"body":"USING: grouping kernel math sequences ;\nIN: kata\n\n: pairs ( seq -- n )\n  2 group [ length 2 = ] filter [ first2 - abs 1 = ] count ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81994,"user_id":null,"body":"USING: arrays grouping kernel math sequences ;\nIN: kata\n\n: pairs ( seq -- n ) 2 group  [ [ first ] [ last ] bi - abs 1 = ] count ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5a3fe3dde1ce0e8ed6000097":[{"id":81995,"user_id":104,"body":"! 2022 nomennescio \nUSING: math ;\nIN: centuries\n\n: century_from_year ( x -- x ) 1 - 100 \/i 1 + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81996,"user_id":null,"body":"USE: math\nIN: centuries\n: century_from_year ( x -- x ) 1 - 100 \/i 1 + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81997,"user_id":50,"body":"USING: kernel math  ;\nIN: centuries\n: century_from_year ( x -- x )  1 -  100 \/i  1 + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81998,"user_id":527,"body":"USE: math\nIN: centuries\n: century_from_year ( x -- x ) 99 + 100 \/i ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":81999,"user_id":53,"body":"USING: kernel math locals ;\nIN: centuries\n:: century_from_year ( y -- y ) y 1 - 100 \/i 1 + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":82000,"user_id":null,"body":"USING: kernel math ;\nIN: centuries\n\n: century_from_year ( m -- n ) 100 \/mod zero? 0 1 ? + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":82001,"user_id":null,"body":"USING: kernel math ;\nIN: centuries\n\n: century_from_year ( x -- x ) 100 \/mod zero? [ 1 + ] unless ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82002,"user_id":571,"body":"USING: math ;\nIN: centuries\n: century_from_year ( x -- x ) 1 - 100 \/i 1 + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82003,"user_id":106,"body":"USING: math math.functions ;\nIN: centuries\n: century_from_year ( x -- x ) 100 \/ ceiling ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82004,"user_id":492,"body":"USING: kernel math math.functions ;\nIN: centuries\n: century_from_year ( x -- x ) 100.0 \/ ceiling >integer ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"5a4b16435f08299c7000274f":[{"id":82005,"user_id":168,"body":"USING: kernel sequences math math.functions ;\nIN: kata\n\n: sum-square-even-root-odd ( seq -- x )\n  [ dup even? [ sq ] [ sqrt ] if ] map-sum 100 * round 100 \/\n;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82006,"user_id":null,"body":"USING: kernel math math.functions sequences ;\nIN: kata\n\n: integral? ( x -- ? ) dup >integer number= ;\n\n: (places) ( x n -- x ) 10^ [ * round ] [ \/f ] bi ;\n\n: places ( x n -- x )\n    over integral? [ drop >integer ] [ (places) ] if ;\n\n: sum-square-even-root-odd ( seq -- x )\n    [ dup even? [ sq ] [ sqrt ] if ] map-sum 2 places ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82007,"user_id":null,"body":"USING: kernel math math.functions sequences ;\nIN: kata\n\n: sum-square-even-root-odd ( seq -- x )\n  [ dup even? [ sq ] [ sqrt ] if ] map-sum 100 * round 100 \/ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82008,"user_id":527,"body":"USING: kernel math math.functions sequences ;\nIN: kata\n\n: sum-square-even-root-odd ( seq -- x )\n  [ dup even? [ dup * ] [ sqrt ] if ] map-sum 100 [ * round ] [ \/ ] bi  ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82009,"user_id":null,"body":"USING: kernel math math.functions sequences ;\nIN: kata\n\n: transform ( n -- r ) dup even? [ sq ] [ sqrt ] if ;\n: round2 ( r -- n ) 100 * round 100 \/f ;\n: normalize ( r -- r' ) dup dup >integer >float = [ >integer ] [ ] if ;\n: sum-square-even-root-odd ( seq -- x ) [ transform ] map-sum round2 normalize ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82010,"user_id":104,"body":"! 2021 nomennescio\nUSING: kernel locals math math.functions sequences sequences.extras ;\nIN: kata\n\n:: round-to ( x digits -- x' )  x digits 10^ * round digits 10^ \/ ;\n: sum-square-even-root-odd ( seq -- x ) \n  [ odd? ] partition\n  [ [ sqrt ] map-sum ] [ [ sq ] map-sum ] bi* +\n  2 round-to\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82011,"user_id":564,"body":"USING: combinators kernel math math.functions sequences ;\nIN: kata\n\n: engineer-round ( x -- y ) 100 * round 100 \/ ;\n: square-even-root-odd ( x -- y ) dup even? 2 .5 ? ^ ;\n: sum-square-even-root-odd ( seq -- x ) [ square-even-root-odd ] [ + ] map-reduce engineer-round ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82012,"user_id":null,"body":"USING: kernel math math.functions sequences ;\nIN: kata\n\n: sum-square-even-root-odd ( seq -- x ) \n  [ dup even? [ 2 ^ ] [ sqrt ] if ] map-sum\n  100 * round 100 \/\n;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"5a4d303f880385399b000001":[{"id":82013,"user_id":null,"body":"USING: kernel math math.factorials sequences ;\nIN: strong\n: strong ( n -- x )\n  dup\n  [ dup 0 > ] [ 10 \/mod factorial ] produce\n  0 [ + ] reduce nip =\n  [ \"STRONG!!!!\" ] [ \"Not Strong !!\" ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82014,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math.text.utils sequences ;\nIN: strong\n\nCONSTANT: factorial { 1 1 2 6 24 120 720 5040 40320 362880 }\n\n: strong ( n -- x ) dup 1 digit-groups [ factorial nth ] map-sum = \"STRONG!!!!\" \"Not Strong !!\" ? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82015,"user_id":29,"body":"USING: kernel math math.parser math.factorials sequences ;\nIN: strong\n: strong ( n -- x ) dup number>string [ 48 - factorial ] map-sum =\n  \"STRONG!!!!\" \"Not Strong !!\" ? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82016,"user_id":713,"body":"USING: kernel math math.factorials sequences ;\nIN: strong\n\n: number>digits ( n -- seq )\n  [ dup 0 = not ] [ 10 \/mod ] produce reverse! nip ;\n: strong ( n -- x )\n  dup number>digits [ factorial ] map-sum =\n  [ \"STRONG!!!!\" ] [ \"Not Strong !!\" ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82017,"user_id":null,"body":"USING: kernel math.factorials math.parser sequences ;\nIN: strong\n: strong ( n -- x )\n  dup number>string string>digits [ factorial ] map-sum = \"STRONG!!!!\" \"Not Strong !!\" ? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82018,"user_id":null,"body":"USING: kernel  math math.factorials sequences ;\nIN: strong\n: number>digits ( n -- seq )\n    [ dup 0 = not ] [ 10 \/mod ] produce reverse! nip ;\n: strong ( n -- x ) dup number>digits [ n! ] map-sum = \"STRONG!!!!\" \"Not Strong !!\" ? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82019,"user_id":null,"body":"USING: kernel math math.parser math.ranges sequences ;\nIN: strong\n\n: factorial ( n -- n! ) [ 1 ] [ [1,b] product ] if-zero ;\n: digits ( n -- seq ) number>string [ digit> ] map ;\n: digit-fac-sum ( n -- sum ) digits [ factorial ] map-sum ;\n: strong ( n -- str ) dup digit-fac-sum = \"STRONG!!!!\" \"Not Strong !!\" ? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82020,"user_id":53,"body":"USING: kernel combinators locals math ;\nIN: strong\n:: strong ( n -- x ) \n  {\n    { [ n 1 = ] [ \"STRONG!!!!\" ] }\n    { [ n 2 = ] [ \"STRONG!!!!\" ] }\n    { [ n 145 = ] [ \"STRONG!!!!\" ] }\n    { [ n 40585 = ] [ \"STRONG!!!!\" ] }\n    [ \"Not Strong !!\" ]\n  } cond ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82021,"user_id":544,"body":"USING: kernel prettyprint ;\nUSING: math.parser math.ranges ;\nUSING: arrays strings sequences ;\nIN: strong\n\n: factorial ( n -- x )\n  dup 0 = [ drop 1 ] [ [1,b] product ] if ;\n: strong ( n -- x ) \n  dup . dup\n  number>string >array [ 1string string>number factorial ] map \n  sum = [ \"STRONG!!!!\" ] [ \"Not Strong !!\" ] if ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82022,"user_id":null,"body":"USING: kernel math math.combinatorics ;\nIN: strong\n\n: strong ( n -- str )\n    0 over [ dup zero? ]\n    [ 10 \/mod factorial swap [ + ] dip ] until drop =\n    \"STRONG!!!!\" \"Not Strong !!\" ? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"5a5f9f80f5dc3f942b002309":[{"id":82023,"user_id":29,"body":"USING: kernel ;\nIN: omnibool\n\nSINGLETON: omnibool\nM: omnibool equal? 2drop t ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82024,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel ;\nIN: omnibool\n\nSINGLETON: omnibool\n\nM: omnibool equal? 2drop t ; ","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82025,"user_id":168,"body":"USING: kernel ;\nIN: omnibool\n\nTUPLE: obj ;\n\n: omnibool ( -- o ) T{ obj } ;\n\nM: obj equal? 2drop t ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82026,"user_id":527,"body":"USE: sequences\nIN: omnibool\n: omnibool ( -- ? ) V{ f t t t } pop ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"5a63948acadebff56f000018":[{"id":82027,"user_id":null,"body":"USING: math.statistics sequences ;\nIN: max-product\n\n: max-product ( seq size -- x ) <iota> kth-largests product ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82028,"user_id":null,"body":"USING: kernel math sorting sequences ;\nIN: max-product\n: max-product ( arr size -- b ) \n  [ natural-sort reverse ] dip head product \n  ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82029,"user_id":15,"body":"USING: kernel sequences sorting ;\nIN: max-product\n: max-product ( a n -- max-product ) [ natural-sort ] dip tail-slice* product ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82030,"user_id":null,"body":"USING: math.statistics sequences ;\nIN: max-product\n\n: max-product ( seq k -- n ) <iota> kth-largests product ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82031,"user_id":713,"body":"USING: kernel sequences sorting ;\nIN: max-product\n: max-product ( arr size -- b ) [ natural-sort ] dip tail* product ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82032,"user_id":null,"body":"USING: kernel sorting sequences math ;\nIN: max-product\n: max-product ( arr size -- b ) swap [ ] sort-with swap tail* product ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82033,"user_id":29,"body":"USING: kernel sorting sequences ;\nIN: max-product\n: max-product ( arr size -- b ) [ natural-sort ] dip tail* product ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82034,"user_id":null,"body":"USING: kernel sequences sorting ;\nIN: max-product\n: max-product ( arr size -- b )\n  [ natural-sort ] [ tail* product ] bi* ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82035,"user_id":null,"body":"USING: kernel sequences sorting ;\nIN: max-product\n: max-product ( arr size -- b ) [ natural-sort reverse ] dip head product ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82036,"user_id":1339,"body":"USING: kernel sorting sequences ;\nIN: max-product\n: max-product ( arr size -- b ) [ natural-sort ] [ tail* ] bi* product ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"5a662a02e626c54e87000123":[{"id":82037,"user_id":527,"body":"USING: kernel math.ranges vectors ;\nIN: extra-perfect\n: extra-perfect ( n -- x ) 1 swap 2 <range> >vector ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82038,"user_id":null,"body":"USING: kernel math math.ranges sequences ;\nIN: extra-perfect\n: extra-perfect ( n -- x ) [1,b] [ even? ] reject ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82039,"user_id":null,"body":"USING: kernel math math.ranges math.functions vectors ;\nIN: extra-perfect\n: extra-perfect ( n -- x )\n   1 swap 2 <range> >vector ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82040,"user_id":713,"body":"USING: kernel math sequences math.parser ;\nIN: extra-perfect\n\n: is-extra-perfect ( n -- ? ) >bin [ first CHAR: 1 = ] [ last CHAR: 1 = ] bi and ;\n: extra-perfect ( n -- x ) 1 + <iota> [ is-extra-perfect ] filter ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82041,"user_id":null,"body":"USING: kernel math.bits math.ranges sequences ;\nIN: extra-perfect\n: extra-perfect ( n -- x )\n  [1,b] [ make-bits [ first ] [ last ] bi and ] filter ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82042,"user_id":29,"body":"USING: kernel math math.ranges vectors ;\nIN: extra-perfect\n: extra-perfect ( n -- x ) 1 swap 2 <range> >vector ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82043,"user_id":53,"body":"USING: kernel locals sequences math math.ranges ;\nIN: extra-perfect\n:: extra-perfect ( n -- x ) \n  n [1,b] [ odd? ] filter ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82044,"user_id":527,"body":"USING: math.ranges sequences.extras vectors ;\nIN: extra-perfect\n: extra-perfect ( n -- x ) [1,b] <evens> >vector ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82045,"user_id":null,"body":"USING: math math.ranges sequences ;\nIN: extra-perfect\n: extra-perfect ( n -- x ) [1,b] [ odd? ] filter ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82046,"user_id":1339,"body":"USING: kernel sequences math ;\nIN: extra-perfect\n: extra-perfect ( n -- x ) 1 + <iota> [ odd? ] filter ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"5a99a03e4a6b34bb3c000124":[{"id":82047,"user_id":527,"body":"USE: math.factorials\nIN: num-primorial\nALIAS: num-primorial primorial","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82048,"user_id":null,"body":"USING: math.primes sequences ;\nIN: num-primorial\n: num-primorial ( n -- x ) nprimes product ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82049,"user_id":null,"body":"USING: math.factorials ;\nIN: num-primorial\n: num-primorial ( n -- x ) primorial ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82050,"user_id":527,"body":"USING: kernel math.primes sequences ;\nIN: num-primorial\n: num-primorial ( n -- x ) 100 primes-upto swap head-slice product ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82051,"user_id":168,"body":"USING: sequences math.primes ;\nIN: num-primorial\n: num-primorial ( n -- x ) nprimes product ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82052,"user_id":null,"body":"USING: math lists lists.lazy math.primes.lists ;\nIN: num-primorial\n: num-primorial ( n -- x ) \n  lprimes ltake 1 [ * ] foldr ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82053,"user_id":1339,"body":"USING: kernel math.primes sequences ;\nIN: num-primorial\n: num-primorial ( n -- x ) nprimes product ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82054,"user_id":null,"body":"USING: math.primes sequences ;\nIN: num-primorial\n\n: num-primorial ( m -- n ) nprimes product ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82055,"user_id":104,"body":"! 2019 nomennescio\nUSING: kernel math.primes sequences ;\nIN: num-primorial\n\n: num-primorial ( n -- x ) nprimes product ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82056,"user_id":15,"body":"USING: sequences ;\nIN: num-primorial\n: primorials ( -- primorials ) { 1 2 6 30 210 2310 30030 510510 9699690 223092870 6469693230 200560490130 7420738134810 304250263527210 13082761331670030 614889782588491410 } ;\n: num-primorial ( n -- x ) primorials nth ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"5aba780a6a176b029800041c":[{"id":82057,"user_id":564,"body":"USING: kernel locals math ;\nIN: max-multiple\n\n:: max-multiple ( divisor bound -- n )\n  bound\n  bound divisor mod - ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82058,"user_id":168,"body":"USING: kernel math ;\nIN: max-multiple\n: max-multiple ( divisor bound -- n ) over \/i * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82059,"user_id":713,"body":"USING: math kernel ;\nIN: max-multiple\n: max-multiple ( divisor bound -- n ) swap over swap mod - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82060,"user_id":53,"body":"USING: kernel locals math ;\nIN: max-multiple\n\n:: max-multiple ( d b -- n )\n b b d mod - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82061,"user_id":1339,"body":"USING: kernel math ;\nIN: max-multiple\n: max-multiple ( divisor bound -- n ) swap [ drop ] [ mod ] 2bi - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82062,"user_id":null,"body":"USING: kernel math ;\nIN: max-multiple\n: max-multiple ( divisor bound -- result )\n  swap dupd mod - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82063,"user_id":null,"body":"USING: kernel math ;\nIN: max-multiple\n: max-multiple ( divisor bound -- n ) dupd swap \/i * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82064,"user_id":null,"body":"USING: kernel math ;\nIN: max-multiple\n: max-multiple ( divisor bound -- n )\n    dup swapd  [ mod ] dip  swap - \n    ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82065,"user_id":645,"body":"USING: kernel math ;\nIN: max-multiple\n: max-multiple ( divisor bound -- n ) swap dupd mod - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82066,"user_id":104,"body":"USING: fry kernel math math.ranges sequences ;\nIN: max-multiple\n: max-multiple ( divisor bound -- n ) 1 [a,b] swap '[ _ rem 0 = ] filter ?first dup [ drop 0 ] unless ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"5ae62fcf252e66d44d00008e":[{"id":82067,"user_id":168,"body":"USING: kernel locals math math.order ;\nIN: expression-matter\n:: expression-matter ( a b c -- n ) \n  a b c + +\n  a b c * * max\n  a b c + * max\n  c a b + * max ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82068,"user_id":564,"body":"USING: locals kernel math math.order ;\nIN: expression-matter\n:: expression-matter ( a b c -- n ) \n  a b * c *\n  a b + c + max\n  a b * c + max\n  a b + c * max\n  a b c + * max\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82069,"user_id":null,"body":"USING: kernel combinators sequences math sequences.generalizations ;\nIN: expression-matter\n: expression-matter ( a b c -- n ) \n{\n  [ + * ] [ * * ] [ * + ] [ [ + ] dip * ] [ + + ]\n  } 3cleave { } 4sequence swap prefix\n   supremum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82070,"user_id":676,"body":"USING: kernel generalizations locals math math.order sequences ;\nIN: expression-matter\n\n:  a+b+c   ( a b c -- n ) + + ;\n:  a*b*c   ( a b c -- n ) * * ;\n:  a*(b+c) ( a b c -- n ) + * ;\n:: (a+b)*c ( a b c -- n ) a b + c * ;\n\n: expression-matter ( a b c -- n )\n  { [ a+b+c ] [ a*b*c ] [ a*(b+c) ] [ (a+b)*c ] }\n  [ call( a b c -- n ) ] 3 nwith\n  [ max ]\n  map-reduce ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82071,"user_id":null,"body":"USING: combinators combinators.smart kernel math sequences ;\nIN: expression-matter\n: expression-matter ( a b c -- n )\n  [ { [ + + ] [ + * ] [ * + ] [ * * ] [ [ + ] [ * ] bi* ] [ [ * ] [ + ] bi* ] } 3cleave ] output>array supremum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82072,"user_id":713,"body":"USING: kernel math sequences arrays locals ;\nIN: expression-matter\n:: expression-matter ( a b c -- n ) a b c * * a b c + + a b c + * a b + c * 4array supremum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82073,"user_id":29,"body":"USING: kernel locals math math.order ;\nIN: expression-matter\n\n:: expression-matter ( a b c -- n )\n a b c * * \n a b c * + max\n a b c + * max\n a b c + + max\n a b * c * max\n a b * c + max\n a b + c * max\n a b + c * max ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82074,"user_id":53,"body":"USING: kernel locals math math.order formatting ;\nIN: expression-matter\n:: expression-matter ( a b c -- n )\na b + c + :> w\na b * c * :> x\na b + c * :> y\nc b + a * :> z\nw x max :> r\nr y max :> r\nr z max :> r\nr\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82075,"user_id":null,"body":"USING: arrays combinators kernel locals math math.order sequences sequences.generalizations ;\nIN: expression-matter\n\n:: generate-values ( a b c -- seq ) c b a {\n    [ + + ] [ * + ] [ + * ] [ * * ]\n  } 3cleave\n  a b c {\n    [ * + ] [ + * ]\n  } 3cleave\n  6 narray ; inline\n\n: expression-matter ( a b c -- n ) generate-values 0 [ max ] reduce ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82076,"user_id":null,"body":"USING: combinators kernel math math.order ;\nIN: expression-matter\n\n: expression-matter ( w x y -- z )\n    {\n        [ + + ]\n        [ + * max ]\n        [ * * max ]\n        [ * + max ]\n        [ -rot + * max ]\n    } 3cleave ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"5aee86c5783bb432cd000018":[{"id":82077,"user_id":null,"body":"USING: english formatting kernel math present sequences sorting.human ;\nIN: kata\n\n: hydrate ( str -- str )\n    find-numbers [ integer? ] filter sum dup \"glass\" ?pluralize \"%d %s of water\" sprintf ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82078,"user_id":null,"body":"USING: formatting kernel math.parser sequences splitting ;\nIN: kata\n: hydrate ( str -- str )\n    \" \" split [ string>number ] map sift sum\n    dup 1 = \"\" \"es\" ? \"%d glass%s of water\" sprintf ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82079,"user_id":null,"body":"USING: kernel math math.parser sequences splitting ;\nIN: kata\n: hydrate ( str -- str )\n  \" abcdefghijklmnopqrstuvwxyz,\" split harvest [ string>number ] map-sum\n  [ number>string ] [ 1 = ] bi \" glass of water\" \" glasses of water\" ? append ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82080,"user_id":null,"body":"USING: regexp math.parser sequences kernel formatting ;\nIN: kata\n: hydrate ( str -- str )\n  R\/ \\d+\/ all-matching-slices \n  [ dec> ] map-sum \n  dup 1 = \"\" \"es\" ?\n  \"%d glass%s of water\" sprintf ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82081,"user_id":null,"body":"USING: formatting kernel math.parser regexp sequences splitting ;\nIN: kata\n\n<PRIVATE\n: drink-numbers ( str -- strs ) \" ,\" split [ R\/ [0-9]+\/ matches? ] filter ;\n: drink-counts ( str -- counts ) drink-numbers [ string>number ] map ;\n: total-drinks ( counts -- num ) drink-counts sum ;\n: glasses ( num -- num str ) dup 1 = \"glass\" \"glasses\" ? ;\nPRIVATE>\n\n: hydrate ( str -- str ) total-drinks glasses \"%d %s of water\" sprintf ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82082,"user_id":168,"body":"USING: kernel regexp math.parser sequences ;\nIN: kata\n: hydrate ( str -- str ) \n  R\/ \\d+\/ all-matching-slices [ string>number ] map-sum number>string\n  dup \"1\" = [ \" glass of water\" ] [ \" glasses of water\" ] if append ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82083,"user_id":104,"body":"! 2022 nomennescio\nUSING: formatting kernel math.parser sequences regexp ;\nIN: kata\n: drinks ( str -- n ) R\/ \\d+\/ [ <slice> string>number ] map-matches sum ; \n: hydrate ( str -- str' ) drinks dup 1 = \"\" \"es\" ? \"%d glass%s of water\" sprintf ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82084,"user_id":29,"body":"USING: kernel splitting math.parser sequences sequences.extras ;\nIN: kata\n: hydrate ( str -- str ) \" \" split [ dec> ] [ ] map-filter sum\n  dup number>string swap 1 = [ \" glass of water\" ] [ \" glasses of water\" ] if append ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"5b1cd19fcd206af728000056":[{"id":82085,"user_id":29,"body":"USING: kernel math math.functions ;\nIN: solve\n\n: solve ( m -- x ) [ [ -2 * ] [ 4 * 1 + sqrt ] bi + 1 - ] [ -2 * ] bi \/ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82086,"user_id":53,"body":"USING: kernel math math.functions locals ;\nIN: solve\n\n:: solve ( m -- x ) \n  2 m * 1 + :> a\n  4 m * 1 + sqrt :> b\n  2 m * :> c\n  a b - c \/\n  ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82087,"user_id":1339,"body":"USING: kernel math math.functions ;\nIN: solve\n\n: solve ( m -- x ) [ 4 * 1 + sqrt 1 - neg 2 \/ ] [ \/ 1 + ] bi ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82088,"user_id":104,"body":"! 2020 nomennescio\nUSING: kernel locals math math.functions ;\nIN: solve\n\n! x = ( 2m+1-sqrt (4m+1) ) \/ 2m\n: solve ( m -- x ) 2 * dup 2 * 1 + sqrt over [ - 1 + ] dip \/ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82089,"user_id":106,"body":"USING: kernel locals math math.functions ;\nIN: solve\n\n:: solve ( m -- x ) m 2 * 1 + m 4 * 1 + sqrt - m 2 * \/ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82090,"user_id":527,"body":"USING: kernel math math.functions ;\nIN: solve\n\n: solve ( m -- x ) dup 0.25 + sqrt 0.5 - swap \/ 1 swap - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82091,"user_id":168,"body":"USING: kernel math math.functions ;\nIN: solve\n\n: solve ( m -- x ) dup 0.25 + sqrt 0.5 + over + \/ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82092,"user_id":492,"body":"! Factor 2019 g964\nUSING: kernel math math.functions ;\nIN: solve\n\n: solve ( m -- x ) dup 0.25 + sqrt 0.5 - swap \/ 1.0 swap - ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"5b5ce2176d0db7331f0000c0":[{"id":82093,"user_id":29,"body":"USING: kernel math math.constants math.functions combinators locals ;\nIN: grazing-donkey\n\n:: area ( r ratio -- ? )\n  -1 2 \/ 2 r - r 2 ^ * r 2 + * sqrt * r 2 ^ r 2 \/ acos * 1 2 \/ 2 r 2 ^ - * acos + + pi \/ ratio < ;\n\n:: split ( a b field ratio -- rope )\n  a b + 2 \/i :> m\n  {\n    { [ b a - 1 number= ] [ a ] }\n    { [ m 2 * field \/ ratio area ] [ m b field ratio split ] }\n    [ a m field ratio split ]\n  } cond ;\n\n:: get-rope-length ( field ratio -- rope )\n  {\n    { [ field 0 number= ] [ 0 ] }\n    { [ ratio 0.0 number= ] [ 0 ] }\n    { [ ratio 1.0 number= ] [ field ] }\n    [ 0 field 1 + field ratio split ]\n  } cond ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82094,"user_id":168,"body":"USING: kernel math math.functions math.constants sequences binary-search accessors ;\nIN: grazing-donkey\n\nTUPLE: func-seq a b func ;\n\nINSTANCE: func-seq sequence\nM: func-seq length [ b>> ] [ a>> ] bi - 1 + ;\nM: func-seq nth [ a>> + ] [ func>> ] bi call( x -- x ) ;\nM: func-seq set-nth immutable ;\n\n: <func-seq> ( a b quot: ( x -- x ) -- seq ) func-seq boa ;\n\n: area ( r h -- a )\n  [ [ drop sq ] [ swap \/ 1 swap - acos ] 2bi * ] \n  [ [ - ] [ over - [ sq ] bi@ - sqrt ] 2bi * ] 2bi - ;\n\n: total-area ( r d x -- a )\n  [ nip [ drop ] [ - ] 2bi area ] [ [ 0.5 * ] dip area nip ] 3bi + ;\n\n: get-rope-length ( field ratio -- rope )\n  [ swap 2 \/ sq pi * * ]\n  [ drop 0 swap dup [ 2dup swap sq swap \/f total-area ] curry <func-seq> ]\n  2bi sorted-index ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82095,"user_id":168,"body":"USING: kernel math math.functions math.constants ;\nIN: grazing-donkey\n\n: area ( r h -- a )\n  [ [ drop sq ] [ swap \/ 1 swap - acos ] 2bi * ] \n  [ [ - ] [ over - [ sq ] bi@ - sqrt ] 2bi * ] 2bi - ;\n\n: total-area ( r d x -- a )\n  [ nip [ drop ] [ - ] 2bi area ] [ [ 0.5 * ] dip area nip ] 3bi + ;\n\n: bin-search ( q: ( x -- y ) v a b -- a )\n  [ 2dup < ]\n  [ 4dup 1 + + 2 \/i [ rot call( x -- y ) ] keep -rot\n    < [ nip 1 - ] [ -rot nip ] if ]\n  while swap 3nip ;\n\n: get-rope-length ( field ratio -- rope )\n  [ drop [ 2dup swap sq swap \/ total-area ] curry ] \n  [ swap 2 \/ sq pi * * ]\n  [ drop 0 swap ]\n  2tri bin-search ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82096,"user_id":53,"body":"USING: kernel math math.constants math.functions infix combinators locals ;\nIN: grazing-donkey\n\n:: area ( r ratio -- ? )\n  [infix ( ( -1 \/ 2 ) * sqrt (( 2 - r ) * r * r * ( r + 2 )) + r * r * acos( r \/ 2 ) + acos(( 1 \/ 2 ) * ( 2 - r * r ))) \/ pi infix] ratio < ;\n\n:: seek ( lo hi field ratio -- rope )\n  lo hi + 2 \/i :> m\n  {\n    { [ hi lo - 1 number= ]        [ lo ] }\n    { [ m 2 * field \/ ratio area ] [ m hi field ratio seek ] }\n                                   [ lo m field ratio seek ]\n  } cond ;\n\n:: get-rope-length ( field ratio -- rope )\n  {\n    { [ field 0 number= ratio 0.0 number= or ] [ 0 ] }\n    { [ ratio 1.0 number= ] [ field ] }\n    [ 0 field 1 + field ratio seek ]\n  } cond ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"5bb804397274c772b40000ca":[{"id":82097,"user_id":null,"body":"USING: kernel ;\nUSING: math ;\nUSING: math.functions ;\nIN: kata\n: stack-height-2d ( layers -- x ) [ 0 ] [ 1 - 3 sqrt * 2 \/ 1 + ] if-zero ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82098,"user_id":29,"body":"USING: kernel math math.functions ;\nIN: kata\n: stack-height-2d ( layers -- x ) dup [ drop 1 - 3 sqrt 2 \/ * 1 + ] unless-zero ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82099,"user_id":null,"body":"USING: kernel math math.functions ;\nIN: kata\n: stack-height-2d ( n -- real ) dup 0 > [ 1 - 3 sqrt 2 \/ * 1 + ] when ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82100,"user_id":null,"body":"USING: kernel math ;\nIN: kata\n\n: stack-height-2d ( layers -- x )\n    dup 1 = [ 0.933333333333 * ] unless ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82101,"user_id":1339,"body":"USING: kernel math math.functions ;\nIN: kata\n: stack-height-2d ( layers -- x ) [ 0 ] [ 1 - 0.75 sqrt * 1 + ] if-zero ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82102,"user_id":104,"body":"! 2020 nomennescio\nUSING: kernel math ;\nIN: kata\n: stack-height-2d ( layers -- height ) dup 1 > [ 1 - 0.866 * 1 + ] when ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82103,"user_id":null,"body":"USING: math math.functions math.order ;\nIN: kata\n: stack-height-2d ( layers -- x ) [ 0 ] [ 0.866 * 0.134 + ] if-zero ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82104,"user_id":106,"body":"USING: kernel locals math math.constants math.functions ;\nIN: kata\n:: stack-height-2d ( layers -- x ) layers 0 = 0 pi 6 \/ cos layers 1 - * 1 + ? ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82105,"user_id":527,"body":"USING: kernel math math.functions ;\nIN: kata\n: stack-height-2d ( layers -- x ) dup 0 > [ 1 - 3 sqrt * 2 \/ 1 + ] when ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82106,"user_id":527,"body":"USING: kernel math math.functions ;\nIN: kata\n: stack-height-2d ( layers -- x ) dup 0 = [ ] [ 1 - 3 sqrt * 2 \/ 1 + ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"5bb904724c47249b10000131":[{"id":82107,"user_id":564,"body":"USING: kernel locals match math math.parser sequences splitting ;\nIN: kata\n:: x-y-points ( x y -- points )\n  x y < [ 0 ] [\n    x y = [ 1 ] [ 3 ] if\n  ] if\n;\n: string>points ( x:y -- points )\n  \":\" split\n  [ string>number ] map\n  dup first swap second\n  x-y-points\n;\n: points ( seq -- n )\n   [ string>points ] map\n   0 [ + ] reduce\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82108,"user_id":null,"body":"USING: combinators kernel math math.parser sequences splitting ;\nIN: kata\n\n: score ( x y -- n )\n    {\n        { [ 2dup > ] [ 2drop 3 ] }\n        { [ = ] [ 1 ] }\n        [ 0 ]\n    } cond ;\n\n: points ( seq -- n )\n    [ \":\" split [ string>number ] map first2 score ] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82109,"user_id":713,"body":"USING: sequences splitting math.parser math.order combinators ;\nIN: kata\n: points ( seq -- n )\n  [ \":\" split [ string>number ] map first2 <=> { { +lt+ [ 0 ] } { +eq+ [ 1 ] } { +gt+ [ 3 ] } } case ] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82110,"user_id":29,"body":"USING: kernel combinators sequences ;\nIN: kata\n: points ( seq -- n ) [ {\n    { \"0:0\" [ 1 ] }\n    { \"1:0\" [ 3 ] }\n    { \"1:1\" [ 1 ] }\n    { \"2:0\" [ 3 ] }\n    { \"2:1\" [ 3 ] }\n    { \"2:2\" [ 1 ] }\n    { \"3:0\" [ 3 ] }\n    { \"3:1\" [ 3 ] }\n    { \"3:2\" [ 3 ] }\n    { \"3:3\" [ 1 ] }\n    { \"4:0\" [ 3 ] }\n    { \"4:1\" [ 3 ] }\n    { \"4:2\" [ 3 ] }\n    { \"4:3\" [ 3 ] }\n    { \"4:4\" [ 1 ] }\n    [ drop 0 ]\n  } case ] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82111,"user_id":null,"body":"USING: kernel splitting math.parser math.order sequences combinators ;\nIN: kata\n: points ( seq -- n ) [\n  \":\" split [ string>number ] map \n  first2 <=>\n  { { +lt+ [ 0 ] } { +gt+ [ 3 ] } { +eq+ [ 1 ] } } case \n] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82112,"user_id":null,"body":"USING: kernel splitting math.parser math.order sequences combinators ;\nIN: kata\n: points ( seq -- n ) [\n  \":\" split [ string>number ] map \n  unclip [ <=> ] reduce\n  { { +lt+ [ 0 ] } { +gt+ [ 3 ] } { +eq+ [ 1 ] } } case \n] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82113,"user_id":null,"body":"USING: assocs kernel math sequences ;\nIN: kata\n\n: points ( seq -- n )\n  [ [ first ] [ last ] bi - sgn { { -1 0 } { 0 1 } { 1 3 } } at ] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82114,"user_id":null,"body":"USING: kernel splitting sequences math math.parser ;\nIN: kata\n: score-to-points ( score -- n ) \":\" split [ string>number ] map\n  [ 0 swap nth ] keep 1 swap nth over over\n  > [ drop drop 3 ] [ = [ 1 ] [ 0 ] if ] if ;\n  \n: points ( seq -- n ) [ score-to-points ] map 0 [ + ] reduce ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82115,"user_id":null,"body":"USING: combinators kernel math.order math.parser sequences ;\nIN: kata\n\n: parse ( str -- m n ) [ first digit> ] [ last digit> ] bi ;\n\n: score ( m n -- score )\n    <=> {\n        { +gt+ [ 3 ] }\n        { +lt+ [ 0 ] }\n        [ drop 1 ]\n    } case ;\n\n: points ( seq -- n ) [ parse score ] map-sum ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82116,"user_id":1339,"body":"USING: kernel sequences math ;\nIN: kata\n: pt ( str -- n ) [ first ] [ last ] bi - sgn 1 + 1.5 * >integer ;\n: points ( seq -- n ) [ pt ] [ + ] map-reduce ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"5d376cdc9bcee7001fcb84c0":[{"id":82117,"user_id":564,"body":"USING: assocs kernel locals math math.statistics sequences ;\nIN: odd-ones-out\n:: odd-ones-out ( xs -- filtered-xs )\n  xs histogram :> counts\n  xs [ counts at even? ] filter\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82118,"user_id":null,"body":"USING: assocs kernel math math.statistics sequences ;\nIN: odd-ones-out\n\n: odd-ones-out ( seq -- new-seq )\n    dup histogram [ nip even? ] assoc-filter keys\n    [ member? ] curry filter ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82119,"user_id":527,"body":"USING: assocs hashtables kernel math sequences ;\nIN: odd-ones-out\n: odd-ones-out ( xs -- ys ) dup 0 <hashtable> [ over inc-at ] reduce [ at even? ] curry filter ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82120,"user_id":null,"body":"USING: assocs kernel math math.statistics sequences ;\nIN: odd-ones-out\n\n: odd-ones-out ( xs -- x )\n    dup histogram swap [ of odd? ] with reject ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82121,"user_id":29,"body":"USING: kernel math math.statistics assocs sequences ;\nIN: odd-ones-out\n: odd-ones-out ( xs -- x ) [ histogram ] keep [ over at* drop even? ] filter nip ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82122,"user_id":null,"body":"USING: assocs kernel math math.statistics sets ;\nIN: odd-ones-out\n: odd-ones-out ( xs -- x )\n  dup histogram [ nip odd? ] assoc-filter keys without ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82123,"user_id":null,"body":"USING: kernel math sets assocs math.statistics ;\nIN: odd-ones-out\n: odd-ones-out ( xs -- x ) dup histogram [ nip odd? ] assoc-filter keys without ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82124,"user_id":null,"body":"USING: kernel math sets assocs math.statistics ;\nIN: odd-ones-out\n: odd-ones-out ( xs -- x ) dup histogram [ odd? swap drop ] assoc-filter keys without ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82125,"user_id":null,"body":"USING: assocs kernel math math.statistics sequences sets ;\nIN: odd-ones-out\n\n<PRIVATE\n: odd-ones ( seq -- odd-ones ) histogram dup keys [ swap at odd? ] with filter ;\nPRIVATE>\n\n: odd-ones-out ( xs -- xs ) dup odd-ones without ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82126,"user_id":1339,"body":"USING: kernel fry sequences math ;\nIN: odd-ones-out\n: odd-ones-out ( xs -- x ) dup '[ _ indices length even? ] filter ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"5d444d05ba9956002785c14a":[{"id":82127,"user_id":29,"body":"USING: kernel math ;\nIN: trino\n\n: trino ( c b a x -- c+b*x+a*x*x ) [ * + ] keep * + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82128,"user_id":1339,"body":"USING: kernel math.polynomials arrays ;\nIN: trino\n\n: trino ( c b a x -- a*x*x+b*x+c ) [ 3array ] dip swap polyval ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82129,"user_id":104,"body":"USING: kernel locals math ;\nIN: trino\n\n:: trino ( c b a x -- a*x*x+b*x+c ) a x * b + x * c + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82130,"user_id":492,"body":"! Factor 2019 g964\nUSING: kernel math ;\nIN: trino\n\n: trino ( c b a x -- a*x*x+b*x+c ) tuck * over * rot rot * + + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82131,"user_id":null,"body":"USING: arrays kernel math.polynomials ;\nIN: trino\n\n: trino ( c b a x -- a*x*x+b*x+c ) [ 3array ] dip swap polyval ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82132,"user_id":53,"body":"USING: formatting io kernel locals math math.functions math.parser ;\nIN: trino\n\n:: trino ( c b a x -- a*x*x+b*x+c ) x x * a * b x * + c +\n;\n\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82133,"user_id":null,"body":"USING: kernel locals math ;\nIN: trino\n\n:: trino ( c b a x -- n ) a x x * * b x * c + + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82134,"user_id":15,"body":"USING: locals math ;\nIN: trino\n\n:: trino ( c b a x -- a*x*x+b*x+c ) a x x * * b x * c + + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82135,"user_id":645,"body":"USING: kernel math locals ;\nIN: trino\n\n:: trino ( c b a x -- a*x*x+b*x+c ) a x * x * b x * + c + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82136,"user_id":null,"body":"USING: kernel math ;\nIN: trino\n\n: trino ( c b a x -- a*x*x+b*x+c ) [ * + ] keep * + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"5d50e3914861a500121e1958":[{"id":82137,"user_id":168,"body":"USING: kernel sequences math strings ;\nIN: letter-addition\n: add-letters ( letters -- x )\n  25 [ first 96 - + ] reduce 26 mod 97 + 1string ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82138,"user_id":1339,"body":"USING: kernel sequences strings math ;\nIN: letter-addition\n: add-letters ( letters -- x ) concat [ 96 - ] map sum 25 + 26 mod 97 + 1string ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82139,"user_id":29,"body":"USING: kernel strings math sequences ;\nIN: letter-addition\n: add-letters ( letters -- x ) \"\" join\n  [ \"z\" ] [ [ 96 - ] map-sum 26 rem [ 26 ] when-zero 96 + 1string ] if-empty ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82140,"user_id":713,"body":"USING: kernel strings sequences math ;\nIN: letter-addition\n: add-letters ( letters -- x )\n  [ first 96 - ] map\n  [ 26 ]\n  [ 0 [ + dup 26 > [ 27 mod 1 + ] when ] reduce ]\n  if-empty 96 + 1string ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82141,"user_id":null,"body":"USING: kernel math sequences strings math.order ;\nIN: letter-addition\n: add-letters ( letters -- x ) dup empty? \n  [ drop \"z\" ] \n  [ concat [ 96 - ] map-sum 1 - 26 mod 97 + 1string ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82142,"user_id":null,"body":"USING: math sequences strings ;\nIN: letter-addition\n\n: add-letters ( letters -- x )\n  [ first CHAR: ` - ] map-sum 1 - 26 rem CHAR: a + 1string ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82143,"user_id":null,"body":"USING: math sequences strings ;\nIN: letter-addition\n\n: (add-letters) ( seq -- n )\n    [ first CHAR: a - 1 + ] map-sum\n    1 - 26 mod CHAR: a + 1string ;\n    \n: add-letters ( seq -- n )\n    [ \"z\" ] [ (add-letters) ] if-empty ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82144,"user_id":564,"body":"USING: kernel math sequences ;\nIN: letter-addition\n\n: add-letters ( letters -- x )\n  [ first 96 - ] map sum\n  26 mod\n  dup 0 = [ drop 26 ] [ ] if\n  96 +\n  \"\" 1sequence ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82145,"user_id":null,"body":"USING: math sequences strings ;\nIN: letter-addition\n\n: add-letters ( letters -- x )\n    [ \"z\" ]\n    [ concat [ 96 - ] [ + ] map-reduce 1 - 26 mod 97 + 1string ] if-empty ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82146,"user_id":null,"body":"USING: kernel math sequences strings ;\nIN: letter-addition\n: add-letters ( letters -- x ) [ \"z\" ] [ [ first 96 - ] map sum 1 - 26 rem 97 + 1string ] if-empty ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"5d65fbdfb96e1800282b5ee0":[{"id":82147,"user_id":527,"body":"USING: kernel math math.order ;\nIN: birthday\n\n: wrap ( height width length -- ribbon ) [ + + ] [ min min ] 3bi + 2 * 20 + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82148,"user_id":168,"body":"USING: kernel math arrays sequences ;\nIN: birthday\n\n: wrap ( height width length -- ribbon ) 3array [ sum ] [ infimum ] bi + 2 * 20 + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82149,"user_id":104,"body":"! 2022 nomennescio\nUSING: arrays kernel math math.vectors sequences sorting ;\nIN: birthday\n\n: wrap ( height width length -- ribbon ) 3array natural-sort { 4 2 2 } v* sum 20 + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82150,"user_id":null,"body":"USING: arrays kernel math sequences sorting ;\nIN: birthday\n\n: wrap ( height width length -- ribbon )\n  3array natural-sort unclip [ sum 2 * ] [ 4 * + ] bi* 20 + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82151,"user_id":null,"body":"USING: kernel math math.order ;\nIN: birthday\n\n : wrap ( a b c -- r ) [ + + ] [ min min ] 3bi + 2 * 20 + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82152,"user_id":null,"body":"USING: kernel math sorting ;\nIN: birthday\n\n: wrap ( height width length -- ribbon )\n    sort-pair [ sort-pair ] dip [ 4 * ] [ 2 * ] [ 2 * 20 + + + ] tri* ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82153,"user_id":53,"body":"USING: kernel locals sequences math math.order ;\nIN: birthday\n\n:: wrap ( h w l -- r ) \n  h w min l min :> a\n  h w + l + a - :> b\n  20 a 4 * b 2 * + +\n  ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82154,"user_id":29,"body":"USING: kernel math math.order sequences arrays ;\nIN: birthday\n\n: wrap ( h w l -- r ) dup [ 3array ] dip [ [ min ] reduce ] curry [ sum ] bi 10 + + 2 * ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"5d6ee508aa004c0019723c1c":[{"id":82155,"user_id":564,"body":"USING: accessors combinators kernel locals math prettyprint sequences sorting ;\nIN: oddest\n\n: <fp-infinity> ( -- \u221e ) 0 <fp-nan> ; inline\n\n:: oddness-of ( n -- m )\n  {\n    { [ n -1 = ] [ <fp-infinity> ] }\n    { [ n 2 mod 0 = ] [ 0 ] }\n    [ n 1 - 2 \/i oddness-of 1 + ]\n  } cond\n;\n\nTUPLE: oddity value oddness ;\n: <oddity> ( n -- p ) dup oddness-of oddity boa ; inline\n\n: sorted-oddnesses ( ns -- [n,o...] )\n  [ <oddity> ] map\n  [ oddness>> ] sort-with reverse\n;\n\n: first-is-oddest? ( [n,o...] -- eq? )\n  dup first oddness>>\n  swap second oddness>>\n  = not\n;\n\n: oddest-of-many ( ns -- n? )\n  sorted-oddnesses\n  \n  dup first-is-oddest?\n    [ first value>> ]\n    [ drop f ]\n  if\n;\n\n:: oddest ( ns -- n? )\n  {\n    { [ ns length 0 = ] [ f ] }\n    { [ ns length 1 = ] [ ns first ] }\n    [ ns oddest-of-many ]\n  } cond\n;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82156,"user_id":168,"body":"USING: kernel math sequences ;\nIN: oddest\n\n: oddness ( n -- o )\n  dup even? [ drop 0 ] [ dup -1 = [ drop 1000 ] [ -1 shift oddness 1 + ] if ] if ;\n\n: oddest ( a -- x )\n  [ f ]\n  [ dup [ oddness ] map dup supremum swap\n    [ index ] [ last-index ] 2bi\n    over = [ swap nth ] [ 2drop f ] if ]\n  if-empty\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82157,"user_id":106,"body":"USING: kernel locals math sequences ;\nIN: oddest\n:: oddness ( a -- x ) a -1 = [ 32 2^ ] [ a bitnot a bitnot neg bitand ] if ;\n:: oddest ( a -- x )\n  a empty? [ f ] [\n    a [ oddness ] map supremum :> m\n    a [ oddness m = ] filter :> r\n    r length 1 = [ r first ] [ f ] if\n  ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82158,"user_id":645,"body":"USING: kernel sequences locals math math.functions ;\nIN: oddest\n:: oddest ( a -- x )\n  a length 0 = [ f ] [\n    a length 1 = [ a first ] [\n      a [ -1 = ] all? [ f ] [\n        a [ odd? ] filter :> odds\n        a [ even? ] filter :> evens\n        odds length 0 = [ f ] [\n          evens length 0 = [\n            a [ 2 \/ floor ] map oddest :> r\n            r f = [ f ] [ r 2 * 1 + ] if\n          ] [ odds oddest ] if\n        ] if\n      ] if\n    ] if\n  ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82159,"user_id":29,"body":"USING: kernel math sequences sets prettyprint ;\nIN: oddest\n\n: oddity ( x -- n ) dup -1 = [ drop 1\/0. ]\n  [ dup odd? [ 2 \/i oddity 1 + ] [ drop 0 ] if ] if ;\n\n: oddest ( a -- x ) [ f ] [ dup [ oddity ] map supremum [ swap oddity = ] curry filter\n  dup length 1 = [ first ] [ drop f ] if ] if-empty ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82160,"user_id":null,"body":"USING: assocs kernel math math.statistics sorting sequences sequences.extras ;\nIN: oddest\n\n: (oddity) ( n -- o )\n  0 [ over odd? ] [ [ 1 - 2\/ ] [ 1 + ] bi* ] while nip ;\n  \n: oddity ( n -- o )\n  dup -1 = [ drop 1\/0. ] [ (oddity) ] if ;\n\n: oddest ( seq -- n )\n  [ oddity ] sort-with reverse ?first2 [\n    dupd [ oddity ] bi@ = [ drop f ] when\n  ] when* ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82161,"user_id":null,"body":"USING: assocs kernel math math.statistics sorting sequences ;\nIN: oddest\n\n: (oddity) ( n -- o )\n  0 [ over odd? ] [ [ 1 - 2\/ ] [ 1 + ] bi* ] while nip ;\n  \n: oddity ( n -- o )\n  dup -1 = [ drop 1\/0. ] [ (oddity) ] if ;\n\n: oddest ( seq -- n )\n  [ dup oddity ] map>alist dup\n  values histogram sort-keys ?last { f 0 } or\n  first2 1 = [ swap value-at ] [ 2drop f ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82162,"user_id":null,"body":"USING: kernel math math.order combinators sequences locals arrays ;\nIN: oddest\n:: oddness<=> ( a b -- <=> )\n  a b = [ +eq+ ] [\n    a odd? b odd? 2array {\n      { { t t } [ a b [ -1 shift ] bi@ oddness<=> ] }\n      { { f f } [ +eq+ ] }\n      { { t f } [ +gt+ ] }\n      { { f t } [ +lt+ ] }\n    } case\n  ] if ;\n:: oddest ( a -- x ) \n  a empty? [ f ] [\n    t :> m!\n    a unclip [ \n      over over oddness<=>\n      { \n        { +lt+ [ t m! nip ] }\n        { +gt+ [ drop ] }\n        { +eq+ [ f m! drop ] }\n      } case\n    ] reduce\n    m [ drop f ] unless \n  ] if ;\n  ","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82163,"user_id":1339,"body":"USING: kernel math sorting sequences ;\nIN: oddest\n: oddity ( a -- x ) dup -1 = [ drop 1e999 ] [ dup odd? [ 1 - 2\/ oddity 1 + ] [ drop 0 ] if ] if ;\n: oddest ( a -- x )\n  dup empty? [ drop f ] [ dup length 1 = [ first ] [\n    [ oddity ] sort-with 2 tail* dup [ oddity ] [ = ] map-reduce [ drop f ] [ last ] if\n  ] if ] if\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82164,"user_id":104,"body":"! 2020 nomennescio\nUSING: combinators kernel locals math prettyprint sequences ;\nIN: oddest\n:: oddness ( n -- i ) n -1 = [ 1\/0. ] [ n 0 [ over odd? ] [ [ 1 - 2\/ ] dip 1 + ] while nip ] if ;\n:: oddest ( numbers -- n-or-f ) \n  numbers empty? [ f ] [ \n    numbers [ oddness ] map dup supremum swap indices\n    dup length 1 = [ first numbers nth ] [ drop f ] if \n  ] if ; \n   \n   \n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"5ebae674014091001729a9d7":[{"id":82165,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel locals math math.parser sequences splitting ;\nIN: fractran\n\n: atmost ( n quot: ( ... -- ... ? ) -- ) [ drop ] prepose all-integers? drop ; inline\n: (fractran) ( code n -- code n' ? ) 2dup [ * integer? ] curry find swap [ * t ] [ drop f ] if ;\n: fractran ( code n -- result ) [ \" \" split [ dec> ] map ] dip 1000 [ (fractran) ] atmost nip ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82166,"user_id":168,"body":"USING: kernel splitting sequences math math.parser ;\nIN: fractran\n\n: step ( code n -- n )\n  swap [ over * denominator 1 = ] find\n  swap [ * ] [ drop ] if ;\n\n: fractran ( code n -- result )\n  [ \" \" split [ string>number ] map ] dip\n  0 [ 1 + dup 1000 <= ] [ [ dupd step ] dip ] while\n  drop nip ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82167,"user_id":713,"body":"USING: kernel sequences splitting math math.parser ;\nIN: fractran\n\n: frac-cycle ( n fracs c -- n' fracs c' ? )\n  dup zero? [ f ] \n  [ 1 - 2over swap [ * denominator 1 = ] curry find nip\n    dup [ dup [ * ] curry 3dip ] when ] if ;\n: fractran ( code n -- result )\n  swap \" \" split [ string>number ] map\n  1000 [ frac-cycle ] loop drop drop ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82168,"user_id":29,"body":"USING: kernel math math.parser splitting sequences ;\nIN: fractran\n\n: fractran ( code n -- result )\n  [ \" \" split [ string>number ] map ] dip 1000\n  [ 2over [ * denominator 1 = ] curry find swap drop over 0 > swap and dup ]\n  [ swap [ * ] dip 1 - ]\n  while 2drop swap drop ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"5f8341f6d030dc002a69d7e4":[{"id":82169,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel math sequences ;\nIN: least-larger\n\n: ?least-larger ( seq i -- i\/f ) over nth dupd [ > ] curry filter dup empty? [ 2drop f ] [ infimum swap index ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82170,"user_id":713,"body":"USING: kernel sequences arrays math ;\nIN: least-larger\n\n: ?least-larger ( seq i -- i\/f )\n  over nth [ pick <\n    [ pick [ 2over swap first < [ 2array nip ] [ 2drop ] if ] [ 2array nip ] if ]\n    [ 2drop ] if ] curry f swap reduce-index dup [ second ] [ ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82171,"user_id":null,"body":"USING: fry kernel math sequences sequences.extras ;\nIN: least-larger\n\n: ?least-larger ( seq i -- i\/f )\n    over nth dupd '[ _ > ] filter ?infimum swap index ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82172,"user_id":null,"body":"USING: kernel math sequences sequences.extras ;\nIN: least-larger\n\n: ?least-larger ( seq i -- i\/f )\n  dupd over nth [ > ] curry filter ?infimum swap index ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82173,"user_id":null,"body":"USING: kernel math sequences sorting ;\nIN: least-larger\n\n: ?least-larger ( seq i -- i\/f )\n  dupd over nth [ > ] curry filter natural-sort ?first swap index ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82174,"user_id":null,"body":"USING: locals sequences math kernel math.order ;\nIN: least-larger\n\n:: ?least-larger ( seq i -- i\/f ) \n  i seq ?nth :> e \n  seq [ e > ] filter\n  dup empty? [ drop f ] [ infimum ] if\n  seq index\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82175,"user_id":168,"body":"USING: kernel sequences math ;\nIN: least-larger\n\n: ?least-larger ( seq i -- i\/f )\n  over nth over [ over > ] filter nip\n  [ drop f ] [ infimum swap index ] if-empty ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82176,"user_id":29,"body":"USING: kernel sequences math ;\nIN: least-larger\n\n: ?least-larger ( seq i -- i\/f ) dupd over nth\n  [ > ] curry filter\n  [ drop f ] [ infimum [ = ] curry find drop ] if-empty ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"60512be8bbc51a000a83d767":[{"id":82177,"user_id":29,"body":"USING: kernel prettyprint locals combinators.smart math math.functions sequences ;\nIN: operator\n:: operator ( a n b -- r ) n 4 < \n  [ n [ b 1 + a b + a b * a b ^ ] output>array nth ] \n  [ b 0 = \n    [ 1 ] \n    [ a n 1 - a n b 1 - operator operator ] if \n  ] if ; inline recursive","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82178,"user_id":null,"body":"USING: combinators kernel locals math math.functions math.ranges ;\nIN: operator\n:: operator ( a n b -- r )\n  n {\n    { 0 [ b 1 + ] }\n    { 1 [ a b + ] }\n    { 2 [ a b * ] }\n    { 3 [ a b ^ ] }\n    { 4 [ a 1 b [ dup zero? ] [ [ dupd ^ ] [ 1 - ] bi* ] until drop nip ] }\n  } case ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82179,"user_id":168,"body":"USING: kernel math math.functions combinators sequences ;\nIN: operator\n: operator ( a n b -- r ) swap\n  { { 0 [ nip 1 + ] }\n    { 1 [ + ] }\n    { 2 [ * ] }\n    { 3 [ ^ ] }\n    [ drop swap <repetition> 1 [ swap ^ ] reduce ] } case ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"60576b180aef19001bce494d":[{"id":82180,"user_id":53,"body":"USING: kernel locals math math.order ;\nIN: checkerboard\n:: count-checkerboard ( w h r -- res ) \n   w r 2 * \/i :> band\n   h r 2 * \/i :> stck\n   band r * 0 w band 2 * r * - r - max + :> dx1\n   stck r * 0 h stck 2 * r * - r - max + :> dy2\n   dx1 h dy2 - * w dx1 - dy2 * +\n  ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82181,"user_id":29,"body":"USING: kernel math math.order locals ;\nIN: checkerboard\n:: side ( a b n -- r ) 0 a 2 n * mod n - n b 2 n * mod min * max ;\n:: edges ( dx dy n -- r ) dx dy n side dy dx n side + ;\n:: count-checkerboard ( x y n -- res ) x 2 n * mod y 2 n * mod\n  2dup n edges -rot * x y * swap - 2 \/i + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82182,"user_id":168,"body":"USING: kernel math math.order ;\nIN: checkerboard\n\n! Translation of falsetru's Python solution\n: area1 ( n r -- x ) \n  [ 2 * \/mod ] 2keep nip [ nip * ] [ - 0 max nip ] 3bi + ;\n  \n: area2 ( n r -- x )\n  [ 2 * \/mod ] 2keep nip [ nip * ] [ min nip ] 3bi + ;\n\n: count-checkerboard ( x y n -- res )\n  [ [ nip area1 ] [ area2 nip ] 3bi * ]\n  [ [ nip area2 ] [ area1 nip ] 3bi * ] 3bi + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82183,"user_id":713,"body":"USING: kernel math locals math.order ;\nIN: checkerboard\n: div2 ( a b -- a\/2b ) 2 * \/i ;\n: mod2 ( a b -- a%2b ) 2 * mod ;\n:: dm-mul ( a b -- a%b*a\/b ) a b mod a b \/i * ;\n:: count-checkerboard ( w h r -- res )\n  h r div2 w r div2 * 2 * r *\n  w r div2 h r mod2 *\n  h r div2 w r mod2 *\n    + + r *\n  w r mod2 r dm-mul h r mod2 r min *\n  h r mod2 r dm-mul w r mod2 r min *\n  + +\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"60d5b5cd507957000d08e673":[{"id":82184,"user_id":29,"body":"USING: kernel math math.ranges sequences ;\nIN: s\n: s ( m n -- res ) swap [0,b) dup rot 1 [ [ + ] curry map product ] bi-curry@ bi* \/i ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82185,"user_id":29,"body":"USING: kernel math math.combinatorics ;\nIN: s\n: s ( m n -- res ) over + 1 - swap nCk ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82186,"user_id":104,"body":"! 2021 nomennescio\nUSING: kernel locals math math.combinatorics ;\nIN: s\n\n! S0(n) = 1, S1(n) = n, S2(n) = n(n+1)\/2, S3(n) = sum i(i+1)\/2 = n(n+1)(n+2)\/6 ... Sm(n) = n(n+1)..(n+m-1)\/m!\n! Sm(n) = (n-1+m)!:(n-1)!(n-1-(n-1+m))! = n-1+m choose m\n\n:: s ( m n -- r ) n m + 1 - m nCk ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82187,"user_id":104,"body":"! 2021 nomennescio\nUSING: kernel locals math math.factorials math.ranges sequences ;\nIN: s\n\n! S0(n) = 1, S1(n) = n, S2(n) = n(n+1)\/2, S3(n) = sum i(i+1)\/2 = n(n+1)(n+2)\/6 ... Sm(n) = n(n+1)..(n+m-1)\/m!\n\n:: s ( m n -- r ) n n m + [a,b) product m factorial \/i ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82188,"user_id":null,"body":"USING: kernel math math.combinatorics ;\nIN: s\n\n\n: s ( n k -- res ) over + 1 - swap nCk ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82189,"user_id":168,"body":"USING: kernel math math.combinatorics ;\nIN: s\n: s ( m n -- res ) [ + 1 - ] [ drop ] 2bi nCk ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82190,"user_id":53,"body":"USING: kernel locals math math.combinatorics ;\nIN: s\n:: s ( m n -- res ) n m + 1 - m nCk ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"617bfa617cdd1f001a5cadc9":[{"id":82191,"user_id":527,"body":"USE: math.polynomials\nIN: mountains\n\n: mountains-of-hoiyama ( n -- r ) { 1\/4 3\/8 1\/4 1\/8 } polyval ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82192,"user_id":104,"body":"! 2022 nomennescio\nUSING: kernel locals math ;\nIN: mountains\n\n! sum (i,1,(n+1)\/2) (2 sum (j,2i-1,(n-1)\/2+i-1)j + (n-1)\/2+i) = (n+1)(n^2+n+2)\/8\n\n:: mountains-of-hoiyama ( n -- r ) n 1 + n sq n 2 + + * 1\/8 * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82193,"user_id":null,"body":"USING: kernel math ;\nIN: mountains\n\n: mountains-of-hoiyama ( n -- r )\n  dup 2dup * + 2 + swap 1 + * 8 \/\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82194,"user_id":null,"body":"USING: kernel locals math ;\nIN: mountains\n\n: mountains-of-hoiyama ( n -- r ) 1 + 2 \/ dup dup 1 + swap 3\/2 - * 2 + * ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82195,"user_id":null,"body":"USING: kernel math ;\nIN: mountains\n: mountains-of-hoiyama ( n -- r ) dup dup dup * + 2 + swap 1 + * 8 \/ ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82196,"user_id":null,"body":"USING: kernel math ;\nIN: mountains\n: mountains-of-hoiyama ( n -- r ) \n  dup dup dup dup * * swap dup 2 * * + swap 3 * + 2 + 8 \/ ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82197,"user_id":null,"body":"USING: kernel math ;\nIN: mountains\n\n: mountains-of-hoiyama ( n -- r )\n    2\/ [ 1 + ] [ sq 2 * ] [ 3 * 2 + + * 2 \/ ] tri ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82198,"user_id":168,"body":"USING: kernel math math.functions ;\nIN: mountains\n\n: mountains-of-hoiyama ( n -- r ) [ 1 + 3 ^ ] [ sq ] bi - 8 \/i 1 + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82199,"user_id":53,"body":"USING: kernel math math.functions locals ;\nIN: mountains\n\n:: mountains-of-hoiyama ( w -- r ) w 1 + 3 ^ w 2 ^ - 8 \/i 1 + ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82200,"user_id":53,"body":"USING: kernel math math.functions locals ;\nIN: mountains\n\n:: mountains-of-hoiyama ( w -- r )\n  w 12 = [ 322 ] [ w 1 + 3 ^ w 2 ^ - 8 \/i 1 + ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"61af4f553a27fa0057fcbc2d":[{"id":82201,"user_id":104,"body":"! 2021 nomennescio\nUSING: accessors kernel sequences ;\nIN: sponge\n\nTUPLE: sponge bob squarepants ;\n: <sponge> ( -- sponge ) sponge new V{ } clone >>bob V{ } clone >>squarepants ;\n\nGENERIC#: soak 1 ( x sponge y -- sponge )\nGENERIC: squeeze ( sponge -- x sponge y )\n\nM: sponge squeeze [ bob>> pop ] [ ] [ squarepants>> pop ] tri ;\nM: sponge soak over dup [ squarepants>> push bob>> push ] dip ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82202,"user_id":527,"body":"USING: accessors kernel sequences vectors ;\nIN: sponge\n\nALIAS: sponge vector\n\n: <sponge> ( -- sponge ) V{ } clone ;\n\nGENERIC#: soak 1 ( x sponge y -- sponge )\nGENERIC: squeeze ( sponge -- x sponge y )\n\nM: vector soak swapd pick [ push ] curry bi@ ;\nM: vector squeeze dup [ pop ] [ pop ] bi -rot ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82203,"user_id":null,"body":"USING: accessors kernel sequences ;\nIN: sponge\n\n! Use this to make your class\nTUPLE: sponge left right ;\n\n! This is the constructor that will be tested\n: <sponge> ( -- sponge ) { } { } sponge boa ;\n\n! These are generic words.\n! You will need to define a sponge method for each, or you can\n! redefine them to be 'normal' words, if you would rather.\nGENERIC#: soak 1 ( x sponge y -- sponge )\nM: sponge soak\n    [ prefix ] curry change-right\n    swap [ prefix ] curry change-left ;\n\nGENERIC: squeeze ( sponge -- x sponge y )\nM: sponge squeeze\n    [ unclip swap ] change-left\n    [ unclip swap ] change-right swap ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82204,"user_id":null,"body":"USING: accessors kernel sequences ;\nIN: sponge\n\nTUPLE: sponge left right ;\n\n: <sponge> ( -- sponge ) V{ } clone V{ } clone sponge boa ;\n\nGENERIC#: soak 1 ( x sponge y -- sponge )\n\nM: sponge soak over right>> push tuck left>> push ;\n\nGENERIC: squeeze ( sponge -- x sponge y )\n\nM: sponge squeeze [ left>> pop ] [ ] [ right>> pop ] tri ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82205,"user_id":null,"body":"USING: kernel arrays sequences accessors locals ;\nIN: sponge\n\nTUPLE: sponge stack ;\n\n: <sponge> ( -- sponge ) sponge new V{ } clone >>stack ;\n\nGENERIC#: soak 1 ( x sponge y -- sponge )\nGENERIC: squeeze ( sponge -- x sponge y )\n\nM: sponge soak [let swap :> sp 2array sp stack>> push sp ] ;\nM: sponge squeeze [let :> sp sp stack>> pop dup first swap second sp swap ] ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82206,"user_id":null,"body":"! Copyright (C) 2021 Your name.\n! See http:\/\/factorcode.org\/license.txt for BSD license.\n\nUSING: kernel arrays sequences accessors locals ;\nIN: sponge\n\n! Use this to make your class\nTUPLE: sponge stack ;\n\n! This is the constructor that will be tested\n: <sponge> ( -- sponge ) sponge new V{ } clone >>stack ;\n\n! These are generic words. \n! You will need to define a sponge method for each, or you can\n! redefine them to be 'normal' words, if you would rather.\nGENERIC#: soak 1 ( x sponge y -- sponge )\nGENERIC: squeeze ( sponge -- x sponge y )\n\nM: sponge soak [let swap :> sp 2array sp stack>> push sp ] ;\nM: sponge squeeze [let :> sp sp stack>> pop dup first swap second sp swap ] ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82207,"user_id":53,"body":"USING: kernel syntax vectors sequences accessors locals ;\nIN: sponge\n\nTUPLE: sponge left right ;\n: <sponge> ( -- sponge ) V{ } clone dup clone sponge boa ;\n\nGENERIC#: soak 1 ( x sponge y -- sponge )\nGENERIC: squeeze ( sponge -- x sponge y )\n\nM:: sponge soak ( x sponge y -- sponge )\n  x sponge left>> push\n  y sponge right>> push\n  sponge ;\n  \nM:: sponge squeeze ( sponge -- x sponge y )\n  sponge left>> pop\n  sponge \n  sponge right>> pop ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82208,"user_id":527,"body":"USING: accessors kernel sequences vectors ;\nIN: sponge\n\nTUPLE: sponge { stack vector } ;\n\n: <sponge> ( -- sponge ) V{ } clone sponge boa ;\n\nGENERIC#: soak 1 ( x sponge y -- sponge )\nGENERIC: squeeze ( sponge -- x sponge y )\n\nM: sponge soak swapd pick stack>> [ push ] curry bi@ ;\nM: sponge squeeze dup stack>> [ pop ] [ pop ] bi -rot ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82209,"user_id":106,"body":"USING: kernel vectors sequences locals accessors ;\nIN: sponge\n\n! Use this to make your class\nTUPLE: sponge { pool vector } ;\n\n! This is the constructor that will be tested\n: <sponge> ( -- sponge ) V{ } clone sponge boa ;\n\n! These are generic words. \n! You will need to define a sponge method for each, or you can\n! redefine them to be 'normal' words, if you would rather.\nGENERIC#: soak 1 ( x sponge y -- sponge )\nGENERIC: squeeze ( sponge -- x sponge y )\n\nM:: sponge soak ( x sponge y -- sponge )\n    sponge pool>> x over push y over push <sponge> swap >>pool\n;\n\nM:: sponge squeeze ( sponge -- x sponge y )\n    sponge pool>> dup pop swap dup pop swap <sponge> swap >>pool rot\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82210,"user_id":168,"body":"USING: kernel accessors arrays sequences ;\nIN: sponge\n\nTUPLE: sponge content ;\n\n: <sponge> ( -- sponge ) sponge new V{ } clone >>content ;\n\nGENERIC#: soak 1 ( x sponge y -- sponge )\nGENERIC: squeeze ( sponge -- x sponge y )\n\nM: sponge soak ( x sponge y -- sponge ) \n  swapd 2array over content>> push-all ;\n\nM: sponge squeeze ( sponge -- x sponge y )\n  [ content>> dup [ pop ] bi@ swap ] keep swap ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"61fef3a2d8fa98021d38c4e5":[{"id":82211,"user_id":53,"body":"USING: kernel locals math ;\nIN: card-game\n\n:: decide ( n -- ? ) n 2 mod 1 = n 4 > n 2 \/i 2 mod 0 = and or ;\n:: pick ( n -- r ) n decide [ 1 ] [ n 2 \/i ] if ;\n:: remain ( n -- r ) n decide [ n 1 - ] [ n 2 \/i ] if ;\n:: play ( s n -- r ) n 0 = [ s ] [ n pick s + n remain remain play ] if ;\n:: card-game ( n -- r ) 0 n play ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82212,"user_id":168,"body":"USING: kernel math combinators ;\nIN: card-game\n\n: card-game ( n -- r )\n  { { [ dup 1 <= ] [ ] }\n    { [ dup odd? ] [ dup 1 - card-game - ] }\n    { [ dup [ 4 mod 0 > ] [ 4 <= ] bi or ] [ 2 \/i dup 1 - card-game + ] }\n    [ 2 - card-game 1 + ] } cond ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82213,"user_id":29,"body":"USING: kernel math ;\nIN: card-game\n\n! Optimal play for first player, with even N\n: optimal ( n -- r ) \n  dup 3 < [ drop 1 ] \n  [ dup [ 4 mod 0 = ] [ 4 > ] bi and\n    [ 2 - optimal 1 + ]\n    [ 2 \/i dup 1 - optimal + ] if\n  ] if ;\n\n: card-game ( n -- r )\n  dup 2 mod 1 =\n  [ dup 1 - optimal - ]\n  [ optimal ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"62a611067274990047f431a8":[{"id":82214,"user_id":29,"body":"USING: kernel arrays sequences.repeating ;\nIN: alternate\n\n: alternate ( n first second -- a ) 2array swap cycle ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82215,"user_id":null,"body":"USING: arrays kernel sequences.repeating ;\nIN: alternate\n\n: alternate ( n first second -- arr ) 2array swap cycle ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82216,"user_id":527,"body":"USING: arrays kernel sequences.repeating ;\nIN: alternate\n\n: alternate ( length x y -- seq ) 2array swap cycle ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82217,"user_id":168,"body":"USING: kernel sequences sequences.repeating arrays ;\nIN: alternate\n\n: alternate ( n first second -- arr ) 2array over cycle swap head ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82218,"user_id":53,"body":"USING: kernel sequences sequences.repeating ;\nIN: alternate\n\n: alternate ( n first second -- a ) { } 2sequence swap cycle ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82219,"user_id":null,"body":"USING: kernel locals sequences math math.ranges ;\nIN: alternate\n:: alternate ( n first second -- arr ) \n  n [0,b) [ even? first second ? ] map ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82220,"user_id":713,"body":"USING: kernel math sequences ;\nIN: alternate\n\n: alternate ( n first second -- arr )\n  rot [ dup zero? not ] [ 1 - swapd over ] produce nip 2nip ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82221,"user_id":null,"body":"USING: kernel arrays math sequences.repeating ;\nIN: alternate\n\n: alternate ( n first second -- arr ) 2array swap cycle ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82222,"user_id":104,"body":"! 2022 nomennescio\nUSING: arrays kernel sequences.repeating ;\nIN: alternate\n\n: alternate ( n first second -- arr ) 2array swap cycle ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82223,"user_id":null,"body":"USING: arrays kernel sequences.repeating ;\nIN: alternate\n\n: alternate ( n obj1 obj2 -- seq ) 2array swap cycle ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"62cecd4e5487c10028996e04":[{"id":82224,"user_id":29,"body":"USING: kernel math ;\nIN: kata\n\n: race-podium ( blocks -- 2nd 1st 3rd )\n  dup 7 = [ drop 2 4 1 ]\n  [ [ 3 \/mod sgn + dup 1 + ] keep 2over + - ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82225,"user_id":104,"body":"! 2022 nomennescio\nUSING: arrays combinators kernel math math.vectors sequences ;\nIN: kata\n\n: race-podium ( blocks -- 2nd 1st 3rd ) \n  3 \/mod { \n    { 2 [ 1 + dup 1 + dup 3 - ] }\n    { 1 [ dup 2 = [ 4 1 ] [ 1 + dup 1 + dup 4 - ] if ] }\n    [ drop dup 1 + dup 2 - ]\n  } case ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82226,"user_id":null,"body":"USING: kernel math math.functions ;\nIN: kata\n: race-podium ( blocks -- 2nd 1st 3rd ) \n  dup 7 = [ drop 2 4 1 ] [ dup 3 \/ ceiling dup 1 + dup pick + roll swap - ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82227,"user_id":null,"body":"USING: kernel math math.order ;\nIN: kata\n\n: race-podium ( blocks -- 2nd 1st 3rd )\n  3 \/mod [ 1 min + dup 1 + ] [ 2 mod - 1 - ] 2bi\n  dup zero? [ 1 + [ 1 - ] 2dip ] when ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82228,"user_id":168,"body":"USING: kernel math ;\nIN: kata\n\n: race-podium ( blocks -- 2nd 1st 3rd ) \n  dup 7 = \n  [ drop 2 4 1 ] \n  [ dup 5 + 3 \/i [ nip 1 - ] [ nip ] [ 2 * - 1 + ] 2tri ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82229,"user_id":53,"body":"USING: kernel locals math math.functions ;\nIN: kata\n\n:: go ( n -- 2nd 1st 3rd )\n  n 3 \/ ceiling  :> b\n  b 1 + :> a\n  n b 2 * - 1 - :> c\n  b a c ;\n  \n:: race-podium ( n -- 2nd 1st 3rd )\n  n 7 = [ 2 4 1 ] [ n go ] if ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82230,"user_id":527,"body":"USING: kernel math sequences ;\nIN: kata\n\n: race-podium ( blocks -- 2nd 1st 3rd )\n  dup 7 = [ drop 2 4 1 ] [\n    3 \/mod { { 0 1 -1 } { 1 2 -2 } { 1 2 -1 } } nth first3 roll [ + ] curry tri@\n  ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82231,"user_id":29,"body":"USING: kernel math prettyprint ;\nIN: kata\n\n: race-podium ( blocks -- 2nd 1st 3rd )\n  dup 7 = [ drop 2 4 1 ]\n  [ [ 3 \/mod sgn + dup 1 + ] keep 2over + - ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82232,"user_id":713,"body":"USING: kernel locals math math.functions ;\nIN: kata\n\n:: race-podium ( blocks -- 2nd 1st 3rd )\n  blocks 3 + 3 \/ ceiling                         :> a\n  blocks a 2 * - 1 + 0 = [ a 2 - ] [ a 1 - ] if  :> b\n  blocks a - b -                                 :> c\n  b a c ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"62d1eb93e5994c003156b2ae":[{"id":82233,"user_id":104,"body":"! 2022 nomennescio\nUSING: arrays grouping kernel math math.functions math.vectors sequences splitting strings ;\nIN: cubic-tap-code\n\nCONSTANT: tapcode \"ABCDEFGHIJKLMNOPQRSTUVWXYZ \"\n\n: encode ( s -- encoded ) [ tapcode index 9 \/mod 3 \/mod spin 3array ] { } map-as concat [ 1 + 46 <string> ] map \" \" join ;\n: decode ( s -- decoded ) \" \" split [ length 1 - ] map 3 group [ { 1 3 9 } v. tapcode nth ] \"\" map-as ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82234,"user_id":168,"body":"USING: kernel math sequences sequences.extras strings splitting grouping ;\nIN: cubic-tap-code\n\nCONSTANT: letters \"ABCDEFGHIJKLMNOPQRSTUVWXYZ \"\n\n: encode ( str -- res ) \n  [ { 1 3 9 } swap letters index [ swap \/i 3 rem 1 + CHAR: . <string> ] curry map ]\n  map-concat \" \" join ;\n\n: decode ( str -- res ) \n  \" \" split 3 group \n  [ reverse [ length 1 - ] [ swap 3 * + ] map-reduce letters nth ]\n  \"\" map-as ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82235,"user_id":null,"body":"USING: arrays grouping kernel math math.vectors sequences splitting ;\nIN: cubic-tap-code\n\n: ch>flat ( m -- n ) 65 - dup neg? 26 rot ? ;\n: ch>index ( m -- seq ) ch>flat [ 3 mod ] [ 9 mod 3 \/i ] [ 9 \/i ] tri 3array ;\n: ch>tap ( m -- str ) ch>index 1 v+n [ CHAR: . <array> ] map \" \" join ;\n: encode ( str -- res ) [ ch>tap ] f map-as \" \" join ;\n\n: tap>index ( str -- seq ) \" \" split [ length 1 - ] map ;\n: tap>flat ( str -- m ) tap>index first3 9 * -rot 3 * + + ;\n: tap>ch ( str -- n ) tap>flat 65 + dup 91 = 32 rot ? ;\n: decode ( str -- res ) \" \" split 3 group [ \" \" join tap>ch ] \"\" map-as ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82236,"user_id":29,"body":"USING: kernel sequences splitting math math.functions grouping strings ;\nIN: cubic-tap-code\n\n: encode ( str -- res )\n  \" \" \"[\" replace [\n    { 0 1 2 } [\n      [ dup 65 - 3 ] dip ^ \/i 3 rem 1 +\n      CHAR: . <repetition>\n    ] map \" \" join nip\n  ] { } map-as \" \" join ;\n\n: decode ( str -- res )\n  \" \" split 3 group\n  [ [ length ] map first3 3 * + 3 * + 52 + ] map >string\n  \"[\" \" \" replace ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"56a73d2194505c29f600002d":[{"id":82237,"user_id":100,"body":"USING: regexp ;\nIN: kata\n\nCONSTANT: solution R\/ ^(0|(10((0|11)(1|00))*(10|(0|11)01)|11)(01*0(0|101|1(1|00)((0|11)(1|00))*(10|(0|11)01)))*1)+$\/","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82238,"user_id":29,"body":"USING: regexp ;\nIN: kata\n\nCONSTANT: solution R\/ ^(?:0+|0*1(?:0(?:01|1(?:001*0)*11)*00|0(?:01|1(?:001*0)*11)*1(?:001*0)*010*1|0(?:01|1(?:001*0)*11)*1(?:001*0)*10|1(?:01*0(?:1(?:10)*11)*0)*01*0(?:1(?:10)*11)*1(?:10)*0|1(?:01*0(?:1(?:10)*11)*0)*10*1)*(?:0(?:01|1(?:001*0)*11)*1(?:001*0)*010*|1(?:01*0(?:1(?:10)*11)*0)*10*))$\/","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82239,"user_id":104,"body":"! 2021 Factor solution by nomennescio\nUSING: regexp ;\nIN: kata\n\nCONSTANT: solution R\/ ^(0|111|100((00|1)0)*011|(101|100((00|1)0)*(00|1)1)(1((00|1)0)*(00|1)1)*(01|1((00|1)0)*011)|(110|100((00|1)0)*010|(101|100((00|1)0)*(00|1)1)(1((00|1)0)*(00|1)1)*(00|1((00|1)0)*010))(1|0(1((00|1)0)*(00|1)1)*(00|1((00|1)0)*010))*0(1((00|1)0)*(00|1)1)*(01|1((00|1)0)*011))+$\/","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82240,"user_id":19,"body":"! 2021 Factor translation by nomennescio\nUSING: namespaces regexp ;\nIN: kata\n\nSYMBOL: solution\nR\/ ^(0|1(((0|1(01*00)*01*011)(((0|11)|10(01*00)*01*01)1)*((0|11)|10(01*00)*01*01)|1(01*00)*01*01)0)*((0|1(01*00)*01*011)(((0|11)|10(01*00)*01*01)1)*10|1)(01*00)*1)+$\/ solution set-global","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82241,"user_id":168,"body":"! 2021 Factor translation by nomennescio\nUSING: namespaces regexp ;\nIN: kata\n\nSYMBOL: solution\nR\/ ^(?:0|1(?:(?:(?:1(?:(?:(?:01*0)0))*(?:(?:(?:01*0)1)0))|(?:0|1(?:(?:(?:01*0)0))*(?:(?:(?:01*0)1)1))(?:(?:(?:(?:0|11)1)|(?:10)(?:(?:(?:01*0)0))*(?:(?:(?:01*0)1)1)))*(?:(?:(?:0|11)0)|(?:10)(?:(?:(?:01*0)0))*(?:(?:(?:01*0)1)0))))*(?:(?:1(?:(?:(?:01*0)0))*1)|(?:0|1(?:(?:(?:01*0)0))*(?:(?:(?:01*0)1)1))(?:(?:(?:(?:0|11)1)|(?:10)(?:(?:(?:01*0)0))*(?:(?:(?:01*0)1)1)))*(?:(?:10)(?:(?:(?:01*0)0))*1)))+$\/ solution set-global","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82242,"user_id":53,"body":"! 2021 Factor translation by nomennescio\nUSING: namespaces regexp ;\nIN: kata\n\nSYMBOL: solution\nR\/ ^(0|111|100((1|00)0)*011|(101|100((1|00)0)*(1|00)1)(1((1|00)0)*(1|00)1)*(01|1((1|00)0)*011)|(110|100((1|00)0)*010|(101|100((1|00)0)*(1|00)1)(1((1|00)0)*(1|00)1)*(00|1((1|00)0)*010))(1|0(1((1|00)0)*(1|00)1)*(00|1((1|00)0)*010))*0(1((1|00)0)*(1|00)1)*(01|1((1|00)0)*011))+$\/ solution set-global","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82243,"user_id":713,"body":"! 2021 Factor translation by nomennescio\nUSING: namespaces regexp ;\nIN: kata\n\nSYMBOL: solution\nR\/ ^((0|1((1(01*00)*01*010|(0|1(01*00)*01*011)(((0|11)1|10(01*00)*01*011))*((0|11)0|10(01*00)*01*010)))*(1(01*00)*1|(0|1(01*00)*01*011)(((0|11)1|10(01*00)*01*011))*10(01*00)*1)))+$\/ solution set-global","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82244,"user_id":null,"body":"! 2021 Factor translation by nomennescio\nUSING: namespaces regexp multiline ;\nIN: kata\n\n! I used https:\/\/ivanzuzak.info\/noam\/webapps\/fsm2regex\/\n! to translate a finite state machine into regex.\n! (and substituted every + for |)\n! Here's the finite state machine:\n\/*\n#states\nstart\ns0\ns1\ns2\ns3\ns4\ns5\ns6\n#initial\nstart\n#accepting\ns0\n#alphabet\n0\n1\n#transitions\nstart:0>s0\ns0:0>s0\ns1:0>s2\ns2:0>s4\ns3:0>s6\ns4:0>s1\ns5:0>s3\ns6:0>s5\nstart:1>s1\ns0:1>s1\ns1:1>s3\ns2:1>s5\ns3:1>s0\ns4:1>s2\ns5:1>s4\ns6:1>s6\n*\/\n\n! aaand the regex...\nSYMBOL: solution\nR\/ 0|1((1(01*00)*01*01|(0|1(01*00)*01*011)((0|1(1|0(01*00)*01*01))1)*(0|1(1|0(01*00)*01*01)))0)*(1|(0|1(01*00)*01*011)((0|1(1|0(01*00)*01*01))1)*10)(01*00)*1|(0|1((1(01*00)*01*01|(0|1(01*00)*01*011)((0|1(1|0(01*00)*01*01))1)*(0|1(1|0(01*00)*01*01)))0)*(1|(0|1(01*00)*01*011)((0|1(1|0(01*00)*01*01))1)*10)(01*00)*1)(0|1((1(01*00)*01*01|(0|1(01*00)*01*011)((0|1(1|0(01*00)*01*01))1)*(0|1(1|0(01*00)*01*01)))0)*(1|(0|1(01*00)*01*011)((0|1(1|0(01*00)*01*01))1)*10)(01*00)*1)*(0|$|1((1(01*00)*01*01|(0|1(01*00)*01*011)((0|1(1|0(01*00)*01*01))1)*(0|1(1|0(01*00)*01*01)))0)*(1|(0|1(01*00)*01*011)((0|1(1|0(01*00)*01*01))1)*10)(01*00)*1)\/ solution set-global","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82245,"user_id":76,"body":"USING: namespaces regexp ;\nIN: kata\n\nSYMBOL: solution\nR\/ ^(0|(10((0|11)(1|00))*(10|(0|11)01)|11)(01*0(0|101|1(1|00)((0|11)(1|00))*(10|(0|11)01)))*1)+\/ solution set-global","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82246,"user_id":29,"body":"USING: namespaces regexp ;\nIN: kata\n\nSYMBOL: solution\nR\/ ^(?:0+|0*1(?:0(?:01|1(?:001*0)*11)*00|0(?:01|1(?:001*0)*11)*1(?:001*0)*010*1|0(?:01|1(?:001*0)*11)*1(?:001*0)*10|1(?:01*0(?:1(?:10)*11)*0)*01*0(?:1(?:10)*11)*1(?:10)*0|1(?:01*0(?:1(?:10)*11)*0)*10*1)*(?:0(?:01|1(?:001*0)*11)*1(?:001*0)*010*|1(?:01*0(?:1(?:10)*11)*0)*10*))$\/ solution set-global","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"59568be9cc15b57637000054":[{"id":82247,"user_id":168,"body":"USING: kernel math math.order math.bitwise locals ;\nIN: elder-age\n\n:: elder-age ( m n l t -- age )\n  m n < \n  [ n m l t elder-age ]\n  [ m bit-length 2^\n    dup l <= m 0 <= or n 0 <= or\n    [ drop 0 ]\n    [ n 1 > [ 2\/ ] [ drop m ] if :> k\n      n k min :> r\n      k l >\n      [ l 0 >=\n        [ k l - dup 1 - * 2\/ ]\n        [ k k 1 - * 2\/ l k * - ] if\n        r * ]\n      [ 0 ] if\n      m k - r l k - t elder-age +\n      k n r - l k - t elder-age +\n      m k - n r - l t elder-age + \n      t mod ] if\n  ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82248,"user_id":106,"body":"USING: kernel locals math math.functions math.order ;\nIN: elder-age\n\n:: elder-age ( m n l t -- age )\nm n max :> m0\nm n min :> n0\n2 m0 log2 >integer ^ :> m1\nm1 n0 min :> n1\nl neg 0 max :> fr\nm1 l - 1 - 0 max :> to\nm0 m1 > :> cm\nn0 n1 > :> cn\nto fr - 1 + fr to + n1 * * 2 \/\ncm [ m0 m1 - n1 l m1 - t elder-age + ] [ ] if\ncn [ m1 n0 n1 - l n1 - t elder-age + ] [ ] if\ncm cn and [ m0 m1 - n0 n1 - l t elder-age + ] [ ] if\nt rem\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82249,"user_id":53,"body":"USING: combinators formatting kernel locals math math.functions math.order ;\nIN: elder-age\n\nDEFER: elder-age\n\n:: clog2 ( a b -- r )\n  {\n    { [ b a < ] [ a b 2 * clog2 ] }\n    [ b ]\n  } cond ;\n\n:: rsum ( a b -- r ) a b + b a - 1 + * 2 \/i ;\n\n:: xy-case ( m n k p y x -- r )\n  m n + y - :> a\n  1 y k - 1 - rsum :> b\n  y n - x m - k p elder-age :> c\n  a b * c + p rem ;\n\n:: phi-case ( m n k p y x -- r )\n  1 y k - 1 - rsum m * :> a\n  y n - 0 x k - max y k - 1 - rsum * :> b\n  a b - :> phi\n  k x <= [ x k - x m - * y n - * x m - y n - 0 p elder-age + ] [ x m - y n - k x - p elder-age ] if :> phi2\n  phi phi2 + p rem ;\n\n:: elder-age ( m n k p -- r )\n  m 1 clog2 :> x\n  n 1 clog2 :> y\n  {\n    { [ m 0 = n 0 = or ] [ 0 ] }\n    { [ m n > ] [ n m k p elder-age ] }\n    { [ k y > ] [ 0 ] }\n    { [ x y = ] [ m n k p y x xy-case ] }\n    [ m n k p y y 2 \/i phi-case ]\n  } cond ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82250,"user_id":29,"body":"USING: kernel math math.parser math.order math.functions sequences locals combinators ;\nIN: elder-age\n\n! Ugly direct translation of my Python code\n\nDEFER: new-gain\n\n:: new-not-loss ( x y loss -- r )\n  2 loss 1 - >bin length ^ :> loss-barrier\n  {\n    { [ x y * 0 = ] [ 0 ] }\n    { [ x y + 3 = ] [ loss 0 = [ 0 ] [ 2 loss 1 - * 1 + ] if ] }\n    { [ loss 1 - x 1 - [ >bin length ] bi@ > loss 1 - y 1 - [ >bin length ] bi@ > and ] [ x y loss * * x y new-gain - ] }\n    { [ x y [ loss-barrier >= ] bi@ and ] [ \n      loss 1 + loss loss-barrier * * 2 \/i :> under-barrier\n      x y min loss-barrier \/i :> max-rep\n      max-rep 1 + loss-barrier * x <= [ loss-barrier ] [ x loss-barrier rem ] if :> edge-x\n      max-rep 1 + loss-barrier * y <= [ loss-barrier ] [ y loss-barrier rem ] if :> edge-y\n      edge-x edge-y loss new-not-loss :> outer-barrier\n      outer-barrier [ under-barrier max-rep * outer-barrier + ] [ f ] if\n    ] }\n    { [ x y [ loss-barrier >= ] bi@ or ] [\n      loss 1 + loss loss-barrier x y min min * * 2 \/i :> under-barrier\n      x y min loss-barrier \/i :> max-rep\n      x y max loss-barrier = [ under-barrier ] [ \n        max-rep 1 + loss-barrier * x <= [ loss-barrier ] [ x loss-barrier rem ] if :> edge-x\n        max-rep 1 + loss-barrier * y <= [ loss-barrier ] [ y loss-barrier rem ] if :> edge-y\n        edge-x edge-y loss new-not-loss :> outer-barrier\n        outer-barrier [ under-barrier max-rep * outer-barrier + ] [ f ] if\n    ] if ] }\n    { [ x y [ loss-barrier 2 \/i > ] bi@ and ] [\n      loss-barrier 2 \/i :> lb\n      lb lb loss new-not-loss :> core\n      x lb - y loss lb - new-not-loss :> bottom\n      x y lb - loss lb - new-not-loss :> right\n      x lb - y lb - loss new-not-loss :> corner\n      core bottom right corner + + +\n    ] }\n    [ \n      loss-barrier 2 \/i :> lb\n      x y min loss lb * * :> direct-loss\n      x y min lb lb 1 - * * 2 \/i :> un-loss\n      x y min x y max lb - loss lb - new-not-loss :> side\n      direct-loss un-loss - side +\n    ]\n  } cond ;\n  \n:: side ( a b n -- r ) 0 a 2 n * rem n - n b 2 n * rem min * max ;\n\n:: edge ( x y n -- r ) x y n side y x n side + ;\n\n:: squares ( x y n -- r )\n  x n 2 * rem :> dx\n  y n 2 * rem :> dy\n  x y * dx dy * - 2 \/i dx dy n edge + ;\n\n:: new-gain ( x y -- s )\n  1 :> n!\n  0 :> s!\n  [ n x < n y < or ] [\n    x y n squares n * s + s!\n    n 2 * n!\n  ] while s ;\n\n:: elder-age ( x y l tt -- age )\n  l x [ >bin length ] bi@ > l y [ >bin length ] bi@ > and [ 0 ] [ \n    x y new-gain :> g\n    x y l * * :> t-l\n    x y l new-not-loss :> n-l\n    n-l [ g n-l + t-l - tt rem ] [ f ] if\n  ] if ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82251,"user_id":null,"body":"USING: accessors arrays combinators kernel locals math math.order sequences fry ;\nIN: elder-age\n\n: highest-power ( n -- p )\n  0 swap\n  [ dup 1 > ] [\n    [ 1 + ]\n    [ -1 shift ]\n    bi*\n  ] while\n  swap shift ;\n\n:: partial-sum ( m n offx offy l t -- binoff sum )\n  m n min 0 <= [\n    0 0\n  ] [\n    m n max highest-power\n    dup m n min min\n    over\n    offx offy bitxor\n    [ + ] keep\n    [\n      l -\n      1 max\n      dup 1 -\n      *\n    ] bi@\n    - 2 \/\n    ! 6*7\/2 - 2*3\/2\n    *\n    t mod\n  ] if ;\n\nCONSTANT: to-check V{ }\nTUPLE: problem m n offx offy ;\n: <problem> ( m n offx offy -- problem ) problem boa ;\n: >problem< ( problem -- m n offx offy )\n  { [ m>> ] [ n>> ] [ offx>> ] [ offy>> ] } cleave ;\n  \n:: bottom-problem ( binoff prob -- newprob )\n  prob m>> binoff -\n  binoff prob n>> min\n  prob offx>>\n  prob offy>> binoff +\n  <problem> ;\n:: right-problem ( binoff prob -- newprob )\n  binoff prob m>> min\n  prob n>> binoff -\n  prob offx>> binoff +\n  prob offy>>\n  <problem> ;\n:: sideways-problem ( binoff prob -- newprob )\n  prob m>> binoff -\n  prob n>> binoff -\n  prob offx>> binoff +\n  prob offy>> binoff +\n  <problem> ;\n:: validate-problem ( prob binoff oldprob -- ? )\n  prob m>> 0 >\n  prob n>> 0 > and\n  prob m>> oldprob m>> <= and\n  prob n>> oldprob n>> <= and ;\n: add-new-problems ( binoff problem -- )\n  over over\n  [ bottom-problem ] \n  [ right-problem ] \n  [ sideways-problem ] \n  2tri \n  3array -rot '[\n    _ _ validate-problem\n  ] filter\n  [ to-check push ] each ;\n\n:: elder-age ( m n l t -- age )\n  m n 0 0 <problem> to-check push\n  0 ! sum\n  [ to-check empty? ] [\n    to-check pop \n    [ >problem< l t partial-sum rot + t mod swap ] keep\n    add-new-problems\n  ] until ;\n\n\n\n\n\n\n\n\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82252,"user_id":443,"body":"USING: kernel math math.order sequences ;\nIN: elder-age\n! Reworking of my previous submission to look a bit neater\n! and explain what each segment does.\n\n: kpop ( vec -- elt vec )\n  ! Pop a value from a vector without losing the vector from the stack\n  [ pop ] keep\n;\n\n: kpush ( elt vec -- vec )\n  ! Push a value onto a vector without losing the vector from the stack\n  [ push ] keep\n;\n\n: 2vec ( x y -- vec )\n  ! Create a new vector containing the last two items on the stack\n  ! Keep this consistent to avoid wierd issues with globals.\n  V{ 0 0 } 2sequence\n;\n\n: add-to-acc ( acc x y z val -- acc' x y z )\n  ! The accumulator is soooooo far away, so a helper to manage\n  ! adding the top of the stack to it.\n  -roll [ + ] 3dip\n;\n\n: segment-sum ( coords dimensions loss biggest_power -- coords dimensions biggest_power sum )\n  ! Manipulate stack to end with `length` `first` `loss`\n  ! where `length` is a stored power of 2\n  !       `first` is the row and column coords xor'd together\n  !       `loss` is the stored reduction quantity\n  swap reach 0 [ bitxor ] reduce pick spin ! coords dimensions loss biggest_power length first loss\n  ! Because we fix the segment length to a power of two, this\n  ! is just the sum of the range from `first` to `length - 1`\n  ! with all values reduced by `loss` and dropped if less than 0\n  [ - + 1 - 0 max ] 2keep ! Largest value in the segment `n` => coords dimensions loss biggest_power max first loss\n  - 0 max ! Smallest value in the segment `m` => coords dimensions loss biggest_power max min\n  [ - 1 + ] 2keep + * 2 \/i ! sum m..n: m n => (n - m + 1)(n + m) \/ 2\n;\n\n: biggest-power-of-2-not-greater ( x -- pow_2 )\n  ! Find the largest power of two that is less than or\n  ! equal to x\n  dup next-power-of-2 [ < ] keep swap [ 2 \/i ] [ ] if\n;\n\n: do-square-doesnt-fit ( acc coords dimensions loss biggest_power -- acc' coords' dimensions' )\n  ! Case where the biggest power of 2 that's \u2264 the longest dimension (`h`) is \u2265 the\n  ! shorter dimension (`w`) meaning we can't fit a complete square.\n  ! In this case we just (work out the sum for and) shave off a chunk of size `pow_2 * w`\n  ! then reduce `h` by `pow_2`\n  ! +--+\n  ! |  |\n  ! |C |      +--+\n  ! |  |  =>  |R |\n  ! +--+      +--+\n  ! |R |\n  ! +--+\n  segment-sum pick first * add-to-acc ! Add `segment-sum * width` to acc => acc' coords dimensions pow_2\n  dup rot kpop [ swap - ] dip kpush ! Reduce `h` dimension => acc' coords pow_2 dimensions'\n  spin kpop [ + ] dip kpush swap ! Shift `h` coord\n;\n\n: do-square-fits ( loss acc coords dimensions loss biggest_power -- loss acc'' coords'' dimensions' )\n  ! Case where the biggest power of 2 that's \u2264 the longest dimension (`h`) is also\n  ! < the shorter dimension (`w`) meaning we can fit a complete square and also have some\n  ! extra chunks that are not a square (otherwise `pow_2` would be two times bigger).\n  ! In this case we just (work out the sum for and) shave off the square of size `pow_2 * pow_2`\n  ! As well as working out the sums of the two chunks (of size `pow_2 * w` and `pow_2 * h`\n  ! before reducing both `w` and `h` by `pow_2`\n  ! +---+--+\n  ! |   |  |\n  ! | S |C1|      +--+\n  ! |   |  |  =>  |R |\n  ! +---+--+      +--+\n  ! |C2 |R |\n  ! +---+--+\n  segment-sum over * add-to-acc ! Add `segment-sum * pow_2` (main square) to acc => loss acc' coords dimensions pow_2\n  swap kpop kpop [ pick - ] dip kpush [ over - ] dip kpush swap ! Reduce both dimensions => loss acc' coords pow_2 dimensions'\n  rot kpop kpop [ pick + ] dip kpush kpush -rot ! Shift `w` coord only => loss acc' coords' dimensions' pow_2\n  [ reach ] dip ! Pull `loss` back into place on the stack => loss acc' coords' dimensions' loss pow_2\n  segment-sum pick sum * add-to-acc ! Add `segment-sum * (w + h)` (extra rectangles) to acc => loss acc'' coords' dimensions' pow_2\n  rot kpop [ + ] dip kpush swap ! Finally shift `h` coord => loss acc'' coords'' dimensions'\n;\n\n: elder-age ( w h loss modulo -- age )\n  -roll -rot 2vec 0 0 0 2vec rot ! Move `w` and `h` into dimensions and add initial acc and coords => modulo loss acc coords dimensions\n  [ \n    dup first over second - 0 > [ [ reverse ] bi@ ] [ ] if ! Ensure the first dimension is the smaller (`w`) => modulo loss acc coords' dimensions'\n    reach over last biggest-power-of-2-not-greater ! Grab a copy of `loss` while we can still reach then work find `pow_2` => modulo loss acc coords' dimensions' loss pow_2\n    pick first over <= ! Check if the square won't fit (`pow_2 \u2265 w`) => modulo loss acc coords' dimensions' loss pow_2 square_doesnt_fit\n    [ ! If the square doesn't fit do the appropriate calculation.\n      do-square-doesnt-fit\n    ]\n    [ ! If I fits, I sits (or at least do the calculation for the square fitting).\n      do-square-fits\n    ] if ! modulo loss acc' coords'' dimensions''\n    dup [ 0 > ] all? ! modulo loss acc' coords'' dimensions'' all_dimensions_are_non_zero?\n  ] loop ! Do this loop until one of the dimensions is 0 => modulo loss acc' coords'' dimensions''\n  2drop nip swap mod ! Drop everything that's not the accumulator and modulo and use them to get the final result\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82253,"user_id":443,"body":"USING: kernel math math.order sequences ;\nIN: elder-age\n\n: segment-sum ( length first loss -- sum )\n  ! Because we fix the segment length to a power of two, this\n  ! is just the sum of the range from `first` to `length - 1`\n  ! with all values reduced by `loss` and dropped if less than 0\n  2over + 1 - over - 0 max ! Largest value in the segment\n  -rot - 0 max ! Smallest value in the segment\n  2dup - 1 + spin + * 2 \/i ! sum n..m: n m => (n - m + 1)(n + m) \/ 2\n  nip\n;\n\n: do-segment-sum ( coords dimensions loss biggest_power -- coords dimensions biggest_power sum )\n  ! Manipulate the stack to get our arguments in order for\n  ! calculating the sum with.\n  swap reach 0 [ bitxor ] reduce pick spin segment-sum\n;\n\n: biggest-power-of-2-not-greater ( x -- pow_2 )\n  ! Find the largest power of two that is less than or\n  ! equal to x\n  dup next-power-of-2 [ < ] keep swap [ 2 \/i ] [ ] if\n;\n\n: do-square-doesnt-fit ( acc coords dimensions loss biggest_power -- acc' coords' dimensions' )\n  do-segment-sum ! l acc { w_offset h_offset } { w h } pow_2 sum\n  pick first * ! l acc { w_offset h_offset } { w h } pow_2 (seg_sum * width)\n  [ rot ] 2dip rot + swap [ -rot ] dip dup ! l acc { w_offset h_offset } { w h } pow_2 pow_2\n  rot [ pop ] keep [ swap - ] dip [ push ] keep ! l acc { w_offset h_offset } pow_2 { w h }\n  spin [ pop ] keep [ + ] dip [ push ] keep ! l acc { w h } { w_offset h_offset }\n  swap ! l acc { w_offset h_offset } { w h }\n;\n\n: do-square-fits ( loss acc coords dimensions loss biggest_power -- loss acc' coords' dimensions' )\n  do-segment-sum ! t l acc { w_offset h_offset } { w h } pow_2 sum\n  over * ! t l acc { w_offset h_offset } { w h } pow_2 (seg_sum * pow_2)\n  [ rot ] 2dip rot + swap [ -rot ] dip ! t l acc { w_offset h_offset } { w h } pow_2\n  swap [ pop ] keep [ pop ] keep [ pick - ] dip [ push ] keep [ over - ] dip [ push ] keep swap\n  rot [ pop ] keep [ pop ] keep [ pick + ] dip [ push ] keep [ push ] keep -rot\n  [ reach ] dip\n  do-segment-sum\n  pick sum * ! t l acc { w_offset h_offset } { w h } pow_2 (seg_sum * (w + h))\n  [ rot ] 2dip rot + swap [ -rot ] dip\n  rot [ pop ] keep [ + ] dip [ push ] keep swap\n;\n\n: elder-age ( m n l t -- age )\n  -roll -rot V{ 0 0 } 2sequence 0\n  ! Seems there's something global with V{ } that means the next set of\n  ! commands are needed to avoid picking up the values from the previous\n  ! test run (originally I just had V{ 0 0 }).\n  0 0 V{ 0 0 } 2sequence\n  rot\n  [ ! t l acc { w_offset h_offset } { w h }\n    dup first over second - 0 > [ [ reverse ] bi@ ] [ ] if ! t l acc { w_offset h_offset } { w h }\n    reach over last biggest-power-of-2-not-greater ! next-power-of-2 2 \/i ! t l acc { w_offset h_offset } { w h } l pow_2\n    pick first over <= ! t l acc { w_offset h_offset } { w h } l pow_2 square_doesnt_fit\n    [ ! t l acc { w_offset h_offset } { w h } l pow_2\n      do-square-doesnt-fit\n    ]\n    [ ! t l acc { w_offset h_offset } { w h } l pow_2\n      do-square-fits\n    ] if ! t l acc { w_offset h_offset } { w h }\n    dup [ 0 > ] all? ! t l acc { w_offset h_offset } { w h } continue\n  ] loop ! t l acc { w_offset h_offset } { w h }\n  2drop nip swap mod\n;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}],"5a08b22b32b8b96f4700001c":[{"id":82254,"user_id":713,"body":"USING: kernel combinators math math.functions math.primes.factors ;\nIN: power-tower\n\n! Return base ** base ** ... ** base, where height is h, modulo m.\n: tower ( base height m -- r )\n  2dup [ 2 > ] [ 1 > ] bi* and\n    [ 3dup [ 1 - ] [ totient ] bi* tower nipd\n      [ dup totient ] when-zero over [ mod ] 2dip ^mod ] \n    [ { { [ dup 1 = ] [ 3drop 0 ] } { [ over 0 = ] [ 3drop 1 ] }\n      { [ over 1 = ] [ nip mod ] } [ nip dupd ^mod ]\n    } cond ] if ; ","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82255,"user_id":527,"body":"USING: combinators kernel locals math math.functions math.primes.factors ;\nIN: power-tower\n\nDEFER: do-tower\n\n:: tower ( b h m -- r )\n  {\n    { [ m 1 = ] [ 0 ] }\n    { [ b 1 = ] [ 1 ] }\n    { [ h 0 = ] [ 1 ] }\n    [ b h m m log2 h b do-tower ]\n  } cond ;\n\n:: do-tower ( b h m u i r -- r )\n  {\n    { [ i 1 <= ] [ r m mod ] }\n    { [ r u >= ] [ b b h 1 - m totient [ tower u - ] keep rem u + m ^mod ] }\n    [ b h m u i 1 - b r ^ do-tower ]\n  } cond ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82256,"user_id":168,"body":"USING: kernel combinators math math.functions math.primes.factors ;\nIN: power-tower\n\n: tower-<= ( b h v -- ? )\n  { { [ 3dup nip > ] [ 3drop f ] }\n    { [ over 1 <= ] [ 3drop t ] }\n    [ [ 2drop ] [ drop nip 1 - ] [ nip swap logn ] 3tri tower-<= ]\n  } cond ;\n\n: replace-mod ( b h m h' -- t ) rot drop swap ^mod ;\n\n: tower ( base h m -- r )\n  { { [ dup 1 = ] [ 3drop 0 ] }\n    { [ over 0 = ] [ 3drop 1 ] }\n    { [ over 1 = ] [ nip mod ] }\n    { [ pick 1 = ] [ 3drop 1 ] }\n    { [ 3dup [ 1 - ] [ log2 ] bi* tower-<= ] [ 3dup [ 1 - ] dip tower replace-mod ] }\n    [ 3dup totient [ 1 - ] dip [ tower ] keep + replace-mod ]\n  } cond ;","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82257,"user_id":53,"body":"USING: kernel locals math math.functions math.primes.factors combinators ;\nIN: power-tower\n\n:: tetr ( b n -- r )\n  {\n    { [ n 1 = ] [ b ] }\n    [ b b n 1 - tetr ^ ]\n  } cond ;\n\n:: tower ( a b m -- r ) \n  {\n    { [ m 1 = ] [ 0 ] }\n    { [ b 0 = ] [ 1 ] }\n    { [ a 4 < b 4 < and ] [ a b tetr m mod ] }\n    { [ a 2 = b 4 = and m 65536 > and ] [ 65536 ] }\n    [ m totient :> p\n      a b 1 - p tower :> prev\n      prev p + :> x\n      a x m ^mod :> r\n      r ]\n  } cond ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"},{"id":82258,"user_id":29,"body":"USING: kernel math math.functions math.ranges sequences combinators ;\nIN: power-tower\n\n: totient ( n -- phi )\n  dup 2 over sqrt >integer 1 + [a,b] [\n    overd swap over mod 0 = [\n      [ overd swap over mod 0 = ] [ dup [ \/i ] curry 2dip ] while\n      over over \/i [ - ] curry dip\n    ] when drop\n  ] each over 1 > [ over over swap \/i - ] when swap drop ;\n\n: check ( base h m -- ? )\n  overd [ > ] keep swap \n    [ 3drop t ] \n    [ over 1 > [ [ 1 - ] dip overd swap logn >integer check ] dip and ] \n    if ;\n\n: tower ( base h m -- r ) {\n    { [ dup 1 = ] [ 3drop 0 ] }\n    { [ 3dup drop 0 = swap 1 = or ] [ 3drop 1 ] }\n    { [ over 1 = ] [ swap drop mod ] }\n    { [ 3dup [ 1 - ] [ 2 logn >integer ] bi* check not ] [ 3dup [ 1 - ] dip tower [ swap drop ] curry dip ^mod ] }\n    [ 3dup [ 1 - ] [ totient ] bi* dup [ tower ] dip + [ swap drop ] curry dip ^mod ]\n  } cond ;\n","lang_id":17,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:19","updated_at":"2022-12-23 16:36:19"}]}