{"50654ddff44f800200000004":[{"id":82259,"user_id":null,"body":": solution   ( n1 n2 -- prod ) * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82260,"user_id":168,"body":": solution * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82261,"user_id":null,"body":": solution ( a b -> c ) * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82262,"user_id":null,"body":": solution ( a b ) * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82263,"user_id":null,"body":": solution { a b -- } a b * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82264,"user_id":676,"body":": solution ( a b -- a*b ) * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82265,"user_id":527,"body":"' * Alias solution","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82266,"user_id":null,"body":": solution ( a b -- a * b ) \n  LOCALS| b a |\n  a b * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82267,"user_id":172,"body":": solution ( a b -- a ) * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82268,"user_id":53,"body":": solution ( n1 n2 \u2014 prod ) * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"525c7c5ab6aecef16e0001a5":[{"id":82269,"user_id":104,"body":"\\ forth translation 2019 nomennescio\n\nvocabulary solution \nalso solution definitions\n\n: zero ; : one 1 + ; : two 2 + ; : three 3 + ; : four 4 + ;\n: five 5 + ; : six 6 + ; : seven 7 + ; : eight 8 + ; : nine 9 + ;\n\n: ten 10 + ; : eleven 11 + ; : twelve 12 + ; : thirteen 13 + ; : fourteen 14 + ; \n: fifteen 15 + ; : sixteen 16 + ; : seventeen 17 + ; : eighteen 18 + ; : nineteen 19 + ;\n\n: twenty 20 + ; : thirty 30 + ; : forty 40 + ; : fifty 50 + ; \n: sixty 60 + ; : seventy 70 + ; : eighty 80 + ; : ninety 90 + ;\n\n: collect over 0= if nip else * then ;\n: hundred 100 collect ;\n: thousand 1000 collect 0 ;\n: million 1000000 collect ;\n\n: and ;\n\n: replace- ( c-addr len -- ) 0 +do dup c@ [char] - = if bl over c! then char+ loop drop ;\n: parseint ( c-addr len -- n ) depth >r 0 -rot 2dup replace- evaluate r> depth swap +do + loop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82270,"user_id":null,"body":": also: latestxt alias ; \\ Alias for last word\n\n: digit:  ( n \"name\" -- )\n  \\ name: ( a -- a+n )\n  create ,\n does>\n  @ +\n;\n: digits: ( start stop step -- )\n  dup >r + r> -rot swap \\ rearrange\n  do\n    i digit: dup\n  +loop\n  drop\n;\n0 digit: zero\n1  10 1  digits: one two three four five six seven eight nine ten\n11 19 1  digits: eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen\n20 90 10 digits: twenty thirty forty fifty sixty seventy eighty ninety\n\n: group:  ( n \"name\" -- )\n  \\ name: ( b a -- a*n+b 0 )\n  create ,\n does>\n  @ * + 0\n;\n\n1000 group: thousand\n     also: thousands\n1000000 group: million\n\n: hundred\n 100 *\n;\nalso: hundreds\n\n: and ; \\ To handle random 'and's in string\n\n: -minus! ( c-addr len -- )\n  \\ Remove minuses in-place\n  bounds do\n    i c@ '-' = if\n      bl i c!\n    then\n  loop\n;\n\n: parseint ( c-addr len -- n )\n  \\ Main idea: evaluate string as Forth code\n  \\ The current three-digit group is kept at TOS\n  \\ The whole num at lvl.2\n  2dup -minus!\n  0 0 2swap\n  evaluate\n  +\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82271,"user_id":106,"body":": parse_part { tot part addr len -- new_tot new_part }\n  addr len s\" million\" compare 0= if 1000000 else\n  addr len s\" thousand\" compare 0= if 1000 else \n  addr len s\" hundred\" compare 0= if 100 else \n  addr len s\" ninety\" compare 0= if 90 else \n  addr len s\" eighty\" compare 0= if 80 else \n  addr len s\" seventy\" compare 0= if 70 else \n  addr len s\" sixty\" compare 0= if 60 else \n  addr len s\" fifty\" compare 0= if 50 else \n  addr len s\" forty\" compare 0= if 40 else \n  addr len s\" thirty\" compare 0= if 30 else \n  addr len s\" twenty\" compare 0= if 20 else \n  addr len s\" nineteen\" compare 0= if 19 else \n  addr len s\" eighteen\" compare 0= if 18 else \n  addr len s\" seventeen\" compare 0= if 17 else \n  addr len s\" sixteen\" compare 0= if 16 else \n  addr len s\" fifteen\" compare 0= if 15 else \n  addr len s\" fourteen\" compare 0= if 14 else \n  addr len s\" thirteen\" compare 0= if 13 else \n  addr len s\" twelve\" compare 0= if 12 else \n  addr len s\" eleven\" compare 0= if 11 else \n  addr len s\" ten\" compare 0= if 10 else \n  addr len s\" nine\" compare 0= if 9 else \n  addr len s\" eight\" compare 0= if 8 else \n  addr len s\" seven\" compare 0= if 7 else \n  addr len s\" six\" compare 0= if 6 else \n  addr len s\" five\" compare 0= if 5 else \n  addr len s\" four\" compare 0= if 4 else \n  addr len s\" three\" compare 0= if 3 else \n  addr len s\" two\" compare 0= if 2 else \n  addr len s\" one\" compare 0= if 1 else \n  addr len s\" zero\" compare 0= if 0 else\n  addr len s\" and\" compare 0= if 0 else\n  -1\n  then then then then then then then then then then then then then then then then then then then then then then then then then then then then then then then then\n  { val } val 999 > if val part * tot + 0 else val 100 = if tot part val * else tot part val + then then ;\n\n: split { tot part addr len -- new_tot new_part }\n  len len 0 ?do addr i + @ 255 and dup 32 = swap 45 = or if drop i leave then loop\n  { k } tot part addr k parse_part\n  k len <> if addr k 1+ + len k 1+ - recurse then\n;\n\n: parseint { addr len -- n } 0 0 addr len split + ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82272,"user_id":168,"body":": and ;\n: zero ;\n: one 1+ ;\n: two 2 + ;\n: three 3 + ;\n: four 4 + ;\n: five 5 + ;\n: six 6 + ;\n: seven 7 + ;\n: eight 8 + ;\n: nine 9 + ;\n: ten 10 + ;\n: eleven 11 + ;\n: twelve 12 + ;\n: thirteen 13 + ;\n: fourteen 14 + ;\n: fifteen 15 + ;\n: sixteen 16 + ;\n: seventeen 17 + ;\n: eighteen 18 + ;\n: nineteen 19 + ;\n: twenty 20 + ;\n: thirty 30 + ;\n: forty 40 + ;\n: fifty 50 + ;\n: sixty 60 + ;\n: seventy 70 + ;\n: eighty 80 + ;\n: ninety 90 + ;\n: multiplier ( v m -- v ) 2dup mod tuck * swap - + ;\n: hundred 100 multiplier ;\n: thousand 1000 multiplier ;\n: million 1000000 multiplier ;\n    \n: remove-dash ( c-addr len -- c-addr len )\n  2dup 0 +do dup c@ '-' = if 32 over c! then char+ loop drop ;\n    \n: parseint ( c-addr len -- n ) remove-dash 0 -rot evaluate ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"53ee5429ba190077850011d4":[{"id":82273,"user_id":527,"body":": double_integer 2* ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82274,"user_id":564,"body":": double_integer ( n -- n ) 2 * ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82275,"user_id":null,"body":": double_integer ( n -- n )\n  DUP +\n;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82276,"user_id":527,"body":"' 2* Alias double_integer","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82277,"user_id":null,"body":": double_integer ( n -- n )\n  1 lshift\n;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82278,"user_id":null,"body":": double_integer ( n -- n )\n  dup +\n  \\ n will be an integer. Double it and return it.\n;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82279,"user_id":null,"body":": double_integer 1 lshift ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82280,"user_id":null,"body":": double_integer ( n -- n )\n  dup +\n;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82281,"user_id":null,"body":": double_integer ( n -- n )\n  2* \\ n will be an integer. Double it and return it.\n;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82282,"user_id":null,"body":": double_integer ( n -- n )\n  \\ n will be an integer. Double it and return it.\n  2\n  *\n;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"550527b108b86f700000073f":[{"id":82283,"user_id":1339,"body":"3.14159265358979e fconstant M-PI\n\\ no need to truncate or round your float result\n: iter-pi { F: epsilon -- count F: pi-approx }\n  1 0.e ( next-term F: pi-approx )\n  begin pi fover epsilon f~abs 0= while ( while pi-approx is not close enough )\n    dup 4.e s>f f\/ f+\n    dup 0> if negate 2 - else negate 2 + endif\n  repeat\n  abs 2\/\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82284,"user_id":168,"body":"3.14159265358979e fconstant M-PI\n\\ no need to truncate or round your float result\n: iter-pi { F: epsilon -- count F: pi-approx }\n  0 0 0e \n  begin fdup M-PI epsilon f~abs invert while\n    4e over 2* 1+ s>f f\/\n    dup if f- else f+ then\n    invert 1 under+\n  repeat\n  drop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82285,"user_id":106,"body":"3.14159265358979e fconstant M-PI\n: iter-pi { F: ep } ( F: epsilon -- count F: pi-approx )\n    0 0e begin fdup M-PI f- fabs ep f> while\n      dup 2 mod 0= if 4e else -4e then dup 2* 1+ s>f f\/ f+ 1+\n    repeat ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82286,"user_id":null,"body":"3.14159265358979e fconstant M-PI\n\n: close-enough? fover fover 4e0 f* fswap M-PI fswap f~abs ;\n: next-iter dup 2* 1+ swap 1 and 0<> 1 or * s>f 1\/f f+ ;\n: iter-pi 0 0e0 begin close-enough? 0= while dup next-iter 1+ repeat fnip 4e0 f* ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82287,"user_id":53,"body":"3.14159265358979e fconstant M-PI\n: iter-pi { F: e -- n }\n    0 1 0.0e\n    begin { i p F: m }\n        m m M-PI f- fabs e f>= \n        while\n            0 i 2 mod = if 4.0e p s>f f\/ f+ else 4.0e p s>f f\/ f- then\n            i 1 +\n            p 2 +\n        repeat \n    i ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82288,"user_id":null,"body":"3.14159265358979e fconstant M-PI\n\n: f1+ ( Fn -- Fn++ ) 1e f+ ;\n: odd? ( n -- f ) 2 mod 0<> ;\n\n: checkEpsilon ( Faprox Feps -- Faprox Feps f ) fover 4e f* M-PI f- fabs fover f> ;\n: updatePi ( Faprox Feps n -- Faprox Feps n )\n  dup s>f 2e f* f1+ dup odd? if fnegate then 1\/f frot f+ fswap\n;\n\n: iter-pi ( Fepsilon -- count Fpi-approx )\n  0 0e fswap begin checkEpsilon while updatePi 1+ repeat fdrop 4e f*\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82289,"user_id":null,"body":": even? ( n -- f )\n    2 mod 0=\n;\n\n: term ( n -- r )\n    dup 2 * 1- 0 d>f 1\/f\n    even? IF fnegate ENDIF\n;\n\n: f2dup ( r1 r2 -- r1 r2 r1 r2 )\n    fover fover\n;\n\n: iter-pi ( F: epsilon -- count F: pi-approx )\n    0e 0\n    BEGIN\n        1+\n        dup term f+\n        f2dup 4e f* pi frot f~abs\n    UNTIL\n    fnip 4e f*\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82290,"user_id":492,"body":"3.14159265358979e fconstant M-PI\n: iter-pi { F: epsilon -- result }\n    0 1 0.0e\n    begin { i k F: r }\n        r fdup M-PI f- fabs epsilon f>= \n        while\n            i 2 mod 0=\n                if 4.0e k s>f f\/ f+ else 4.0e k s>f f\/ f- then\n            i 1+\n            k 2 +\n        repeat \n    i ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5506b230a11c0aeab3000c1f":[{"id":82291,"user_id":168,"body":": ceil ( F: f -- F: f ) fnegate floor fnegate ; \n: evaporator ( content t r -- result )\n  s>f 100e f\/ fln s>f -100e f\/ flnp1 f\/ ceil drop f>s ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82292,"user_id":null,"body":": percent ( r1 -- r2 ) 100e0 f\/ ;\n: ceil ( r1 r2 -- r3 ) fnegate floor fnegate ;\n: evaporator ( content evap-per-day threshold -- result )\n  s>f percent fln  1e0 s>f percent f- fln  f\/ ceil  drop f>s ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82293,"user_id":null,"body":": evaporator ( content evap-per-day threshold -- result )\n  s>f s>f drop\n  \\ FP-stack: threshold evap-per-day\n  fswap 100e f\/ flog\n  \\ FP-stack: evap-per-day log(threshold\/100)\n  fswap -100e f\/ 1e f+ flog\n  \\ FP-stack: log(threshold\/100) log(1-evap-per-day\/100)\n  f\/ .9999999e f+\n  \\ FP-stack: log(threshold\/100)\/log(1-evap-per-day\/100) up rounded\n  f>s\n  ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82294,"user_id":null,"body":": evaporator ( c p t -- n )\n   s>f 100e f\/ flog s>f 100e f\/ 1e fswap f- flog f\/ 1e f+ drop f>s ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82295,"user_id":53,"body":": evaporator { c e t -- result }\n  t s>f 100e f\/ flog 1e e s>f 100e f\/ f- flog f\/ 0.99999e f+ f>s ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82296,"user_id":null,"body":": EVAP { F: C F: E F: T -- R } \n 0 C -1 0  DO  1+  1E E F- F*  FDUP T F< IF UNLOOP EXIT THEN  LOOP  ;\n: evaporator { content evap-per-day threshold -- result } \n CONTENT S>F FDUP THRESHOLD S>F 100.E F\/ F* EVAP-PER-DAY S>F 100.E F\/ FSWAP EVAP ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82297,"user_id":null,"body":": evaporator ( content evap-per-day threshold -- result )\n0 d>f 100 0 d>f f\/ flog 100 swap - 0 d>f drop 100 0 d>f f\/ flog f\/ floor f>d drop 1 + ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82298,"user_id":null,"body":": evaporator ( content evap-per-day threshold -- result )\n\ts>f\n\t100 swap - s>f drop\n\t1e-2 f*\tflog\n\tfswap\n\t1e-2 f*\tflog\n\tfswap\n\tf\/ floor f>s 1 +\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82299,"user_id":null,"body":"variable n\n100000 constant precision\n\n: rearrange ( content evap-per-day threshold -- threshold not-evap-per-day )\n    100 rot - rot drop ;\n    \n: 2precision ( n1 n2 -- n1*p n2*p )\n    precision * swap precision * swap ;\n    \n: <= \n    > invert ; \n\n: evaporator ( content evap-per-day threshold -- result )\n    0 n !\n    rearrange 2precision\n    dup >r \\ save initial not-evap\n    begin\n        1 n +!\n    2dup <= while\n        r@ 100 precision * *\/ \\ apply % with right precision\n    repeat\n    2drop r> drop n @\n;\n        ","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82300,"user_id":null,"body":": argFloat  ( a b c -- ra rb rc    ) rot rot swap s>f s>f s>f ;\n: f2rot     ( ra rb rc -- rc ra rb ) frot frot ;\n: f2over    ( ra rb -- ra rb ra rb ) fover fover ;\n: ftoper    ( rn -- rn%            ) 100e f\/ ;\n: ftoinvper ( rn -- 100% - rn%     ) 100e fswap f- ftoper ;\n: wipeFloat ( ra rb rc --          ) fdrop fdrop fdrop ;\n\n: evaporator ( content evap-per-day threshold -- result )\n  argFloat\n  ftoper fswap ftoinvper fswap \\ Convert evap-per-day and threshold to percentages\n  2 fpick f* frot fswap        \\ St: evap-per-day content limit(thresh*cont)\n  0                            \\ Initialize days accumulator\n  begin\n    1+                   \\ Increment days accumulator\n    f2rot fswap ftuck f* \\ St: limit evap-per-day content->content*evap-per-day\n    frot f2over f<       \\ St: evap-per-day content limit content<limit\n  until\n  wipeFloat\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5539fecef69c483c5a000015":[{"id":82301,"user_id":null,"body":": divisible? ( m n -- ? )  mod 0= ;\n: prime? ( n -- ? )\n  dup 2 > if\n    dup\n    s>f fsqrt f>s 1+\n    2 ?do\n      dup i divisible?\n      if\n        unloop drop false exit\n      then\n    loop\n  then\n  drop true\n;\n\n: (u.) ( u -- c-addr u )\n  \\ format u as string\n  s>d <# #s #>\n;\n: reverse ( c-addr u -- )\n  \\ copy string to pad in reverse\n  dup 1- chars pad + -rot\n  bounds do\n    i c@ over c!\n    1 chars -\n  loop\n  drop\n;\n: reversed ( u -- u' )\n  \\ reverse number\n  (u.) tuck reverse pad swap\n  s>unumber? drop d>s\n;\n\n: backwards_prime ( start end -- p1 or 0 )\n  swap ?do\n    \\ Short-circuit conditions.\n    i prime? if\n      i reversed prime? if\n        i reversed i <> if\n          i unloop\n          exit\n        then\n      then\n    then\n  loop\n  0\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2023-01-06 15:03:15"},{"id":82302,"user_id":163,"body":"\\ return only the first backwards-read prime between start and end\n\\ or 0 if you don't find any\n\n: ?prime ( n -- bool )\n  2 over over\n  mod 0<>\n  if\n    1-\n    begin\n      2 +\n      over over over over \\ n i n i n i\n      mod 0=\n      rot rot \\ n i (n%i) n i\n      2 + dup * < \\ n i (n%i) (n<i*i)\n      or\n    until\n  then\n  mod 0<>\n;\n\n: backward ( n -- m )\n  0 swap\n  begin\n    10 \/mod\n    rot 10 *\n    rot +\n    swap dup 0=\n  until\n  drop\n;\n\n: backwards_prime ( start end -- p1 or 0 )\n  1+ swap over over \\ end+1 start end+1 start\n  do\n    ?prime\n    if\n      i backward ?prime\n      if\n        i dup backward <>\n        if\n          i leave\n        then\n      then\n    then\n    i 1+\n  loop\n  dup rot =\n  if\n    drop 0\n  then\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2023-01-06 15:03:15"},{"id":82303,"user_id":null,"body":": isprime? ( n -- f )\n   dup 1 <= if drop false exit then\n   dup 2 = if drop true exit then\n   dup 3 = if drop true exit then\n   dup 2 mod 0= if drop false exit then\n   dup 3 mod 0= if drop false exit then\n   6 begin\n      dup 1- dup * ( n f6 f6*f6[kinda] )\n      2 pick > if drop drop true exit then\n      over over 1- mod 0= if drop drop false exit then\n      over over 1+ mod 0= if drop drop false exit then\n   6 + again ;\n\n: reversed ( n -- r ) \\ 7801 ==> 1087\n   0 swap begin           ( r n )\n      dup 0> while        ( r n )\n      10 \/mod             ( r m q )\n      rot 10 *            ( m q 10r )\n      rot + swap          ( 10r+m q )\n   repeat drop ;\n\n: backwards_prime ( lo hi -- first )\n   1+ swap do\n      i reversed dup i <> if \\ i and reversed are different\n         isprime? if \\ reversed is prime\n            i isprime? if \\ i is prime\n               i unloop exit \\ exit with i\n            then\n         then\n      else drop then\n   loop 0 ; \\ exit with 0\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2023-01-06 15:03:15"},{"id":82304,"user_id":104,"body":"\\ 2020 nomennescio\n: mirror ( addr n -- ) over + 1- begin { l r } l r < while l c@ r c@ l c! r c! l 1+ r 1- repeat ;\n: reverse ( n - reversed-digits ) 0 <# #s #> 2dup mirror evaluate ;\n: isqrt ( n - integer-sqrt ) s>f fsqrt f>s ;\n: prime? { n -- t\/f } n 2 = if -1 else n 2 mod 0= if 0 else\n  -1 n isqrt 1+ 3 +do n i mod 0= if drop 0 leave then 2 +loop then then ;\n: backwards_prime { start end -- p1 or 0 }\n  0 end 1+ start +do i prime? if i reverse dup i = 0= swap prime? and if drop i leave then then loop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2023-01-06 15:03:15"},{"id":82305,"user_id":null,"body":": sqrt ( n -- sqrt[n] ) s>f fsqrt floor f>s ;\n: prime? ( n -- n t\/f | Simple primality test that preserves number )\n  dup 3 <= if true exit then \\ All numbers below 3 are primes\n  dup sqrt 2 do dup i mod 0= if false unloop exit then loop true\n;\n\n: splitN ( n - n[1:] n[0] ) 10 \/mod swap ;\n: appendN ( a b - b..a ) 10 * + ;\n: reverseN ( n - nReversed | Reverses the number mathematically )\n  0 swap begin dup 0> while splitN rot appendN swap repeat drop\n;\n\n: palindrome? ( n - t\/f ) dup reverseN = ;\n\\ : backprime? ( n - n t\/f ) prime? if reverseN prime? if true exit then then false ;\n: backprime? ( n - n t\/f ) prime? swap reverseN prime? rot and ;\n\n: backwards_prime ( start end -- first\/0 )\n  1+ swap 11 max do i palindrome? 0= if\n    i backprime? if reverseN unloop exit then drop\n  then loop 0\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2023-01-06 15:03:15"},{"id":82306,"user_id":1339,"body":": backwards { n -- m }\n  256 allocate drop dup n ( start-addr end-addr n )\n  ( while n > 0, divmod and store to end-addr, increment end-addr )\n  begin dup 0> while\n    10 \/mod ( start-addr end-addr n%10 n\/10 )\n    swap 2 pick ! ( start-addr end-addr n\/10 )\n    swap cell+ swap\n  repeat\n  drop over 0 ( start-addr end-addr start-addr' m )\n  ( while end-addr <> start-addr', m = m * 10 + *start-addr', increment start-addr' )\n  begin 2 pick 2 pick <> while\n    10 * over @ + swap cell+ swap\n  repeat\n  nip nip swap free drop\n;\n\n: prime? { n -- f }\n  2 ( p )\n  ( while 0 < p * p <= n, if n % p > 0 then p += 1 else p = 0 )\n  begin dup dup * 1 n 1+ within while\n    n over mod if 1+ else drop 0 then\n  repeat\n  ( if p then true else false )\n  if true else false then\n;\n\n: backwards_prime? { n -- f }\n  ( n <> n.back && n.prime && n.back.prime )\n  n backwards dup n <> if ( n.backwards )\n    prime? if ( )\n      n prime?\n    else false endif\n  else drop false endif\n;\n\n: backwards_prime { start end -- p1 or 0 }\n  start begin ( n )\n    dup end <= while \\ break:1 if n > end\n    dup backwards_prime? 0= while \\ break:2 if n.backwards_prime?\n    1+\n  repeat \\ 2: return n as-is\n  else drop 0 then \\ 1: return 0\n;\n\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2023-01-06 15:03:15"},{"id":82307,"user_id":106,"body":": is_prime { n -- ? } n 1 <= if 0 else\n  2 begin dup dup * n <= while dup n swap mod 0= if drop n n + else 1+ then repeat n n + <>\n  then ;\n: rev { n -- n } 0 n begin dup 0> while dup 10 mod rot 10 * + swap 10 \/ repeat drop ;\n\n: backwards_prime { start end -- p1 or 0 }\n  0 end 1+ start do i rev i <> if i is_prime if i rev is_prime if i leave then then then loop\n  dup 0> if nip else then\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2023-01-06 15:03:15"},{"id":82308,"user_id":168,"body":": is-prime { n -- t\/f }\n  n 1 <= if false exit then\n  n 2 = if true exit then\n  n 2 mod 0= if false exit then\n  n s>f fsqrt f>s 3\n  begin 2dup >= while\n    n over mod 0= if 2drop false exit then\n    2 +\n  repeat\n  2drop true ; \n\n: reverse ( n -- n )\n  0 begin over while\n    10 * swap 10 \/mod -rot +\n  repeat nip ;\n\n\\ return only the first backwards-read prime between start and end\n\\ or 0 if you don't find any\n: backwards_prime ( start end -- p1 or 0 )\n  swap 1 or begin 2dup >= while\n    dup is-prime if\n      dup reverse 2dup <> if\n        is-prime if nip exit then\n      else \n        drop \n      then\n    then\n    2 +\n  repeat\n  2drop 0 ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2023-01-06 15:03:15"},{"id":82309,"user_id":492,"body":": prime? { n -- t\/f }\n    n 1 <= if false exit then\n    n 2 = n 3 = or if true exit then\n    n 2 mod 0= if false exit then\n    n s>f fsqrt f>s 3\n    begin 2dup >= over n swap mod 0<> tuck and while\n    drop 2 +\n    repeat\n    nip nip ;  \n: renvers ( s -- r )\n    0 swap \n    begin \n        10 \/mod\n        >r swap\n        10 * +\n        r> ?dup 0=\n    until ; \n: backwards_prime { start end -- p1 or 0 }\n    0 start\n    begin { b k }\n        b 0= k end <= and\n        while\n            k renvers dup k = \n            if\n                drop 0 k 1+\n            else \n                prime? k prime? and\n                if\n                    -1 k\n                else\n                    0 k 1+\n                then\n            then\n        repeat \n    b -1 = if k else 0 then ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2023-01-06 15:03:15"}],"5541f58a944b85ce6d00006a":[{"id":82310,"user_id":492,"body":": product_fib { prod -- u v (-1 or 0) }\n    0 1\n    begin { a b }\n        a b * prod <\n        while\n            b\n            a b +\n        repeat\n    a b a b * prod = ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82311,"user_id":null,"body":": product_fib 0 1\n    begin 2dup + rot drop 2dup * 2over drop >= until rot dup 2over * = swap drop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82312,"user_id":53,"body":"\n: aux { a b n -- result }\n  a b * n =\n  if\n    b >r a r> -1\n  else\n    a b * n >\n    if\n      b >r a r> 0\n    else\n      b a b + n recurse\n    then\n  then\n  ;\n\n: product_fib { n -- result }\n  0 1 n aux\n  ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82313,"user_id":null,"body":": product_fib { prod -- u v [-1 or 0] }\n  0 1\n  begin 2dup * prod < while 2dup + rot drop repeat\n  2dup * prod =\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82314,"user_id":null,"body":": product_fib { prod -- u v f }\n    0 1\n    begin\n      2dup * \n      prod <\n    while\n      2dup +\n      rot drop\n    repeat\n    2dup * \n    prod =\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82315,"user_id":null,"body":": product_fib\n    0 1\n    begin\n      over over * 3 pick <\n    while\n      over over +\n      rot drop\n    repeat\n    over over * 3 pick =\n    3 roll drop\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82316,"user_id":null,"body":": fibMult  ( n1 n2 prod -- n1 n2 prod n1*n2 ) >r 2dup * r> swap ;\n: fibCycle ( n1 n2 prod -- n2 n1+n2 prod    ) >r swap over + r> ;\n\n: product_fib ( prod -- u v t\/f )\n  1 1 rot begin fibMult over < while\n    fibCycle fibMult over = if drop true exit then\n  repeat drop false\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82317,"user_id":null,"body":": product_fib { prod -- u v f }\n    0 1\n    BEGIN ( f[n] f[n+1] )\n        2dup *\n        dup prod < IF\n            drop swap over +\n        ELSE\n            prod = EXIT\n        ENDIF\n    AGAIN\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82318,"user_id":1339,"body":": product_fib { prod -- u v f }\n  0 1 begin 2dup * prod < while tuck + repeat\n  2dup * prod =\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82319,"user_id":106,"body":": product_fib { p } 0 1 begin 2dup * p < while tuck + repeat 2dup * p = ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5545f109004975ea66000086":[{"id":82320,"user_id":null,"body":": is-divisible { n x y -- res }\n  n x mod 0 =\n  n y mod 0 =\n  and ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82321,"user_id":null,"body":": is-divisible ( n x y -- res ) \n  >r over >r mod r> r> mod + 0= ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82322,"user_id":null,"body":": is-divisible ( n x y -- res )  2 pick swap mod -rot mod or 0= ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82323,"user_id":null,"body":": is-divisible 2 pick swap mod -rot mod + 0 = ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82324,"user_id":null,"body":": is-divisible 2 \npick swap mod -rot mod + \nif 0<> \n  false \nelse \n  true \nthen ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82325,"user_id":null,"body":": is-divisible 2 pick swap mod -rot mod or 0 = ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82326,"user_id":null,"body":": div? ( x y -- res ) mod 0 = ;\n: is-divisible ( n x y -- res ) 2 pick swap div? rot rot div? and ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82327,"user_id":null,"body":": is-divisible ( n x y -- res )\n  >r over r>\n  mod\n  >r mod r>\n  or 0=\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82328,"user_id":null,"body":": is-divisible >r over r> mod 0= >r mod 0= r> and ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82329,"user_id":163,"body":": is-divisible ( n x y -- res )\n  rot dup rot \\ x n n y\n  mod 0=      \\ x n n|y\n  swap rot    \\ n|y n x\n  mod 0=      \\ n|y n|x\n  and\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"555624b601231dc7a400017a":[{"id":82330,"user_id":53,"body":": josephus-survivor { n k -- x }\n  1 n = IF 1 ELSE n 1 - k recurse k + 1 - n mod 1 + THEN ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82331,"user_id":null,"body":": offset ( a1 i -- a1 ai )\n    1- 2* cells over +\n  ;\n\n: init ( n -- addr )\n    dup 2* cells allocate throw    \\ n a1\n    over 1+ 1 +DO\n        i offset                   \\ n a1 ai\n        dup 2 cells + over !\n        i swap cell+ !          \n    LOOP\n    over offset                    \\ n a1 an\n    2dup ! nip                     \\ n an\n    swap over cell+ !              \\ an\n  ;\n\n: done? ( addr -- f )\n    dup @ =\n  ;\n\n: step ( k addr -- k addr )\n    over 1 +DO\n        @\n    LOOP\n    dup @ @ over !\n  ; \n\n: josephus-survivor ( n k -- x )\n    swap init\n    BEGIN\n        dup done? invert \n    WHILE\n        step\n    REPEAT\n    nip cell+ @\n  ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82332,"user_id":527,"body":": josephus-survivor ( n k -- x ) 1 rot 1+ 1 do over + i mod loop 1+ nip ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82333,"user_id":168,"body":": josephus-survivor { n k -- x }\n  n 1 < if 1 else n 1- k recurse k + 1- n mod 1+ then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82334,"user_id":645,"body":": josephus-survivor { n k -- x } n 1 = if 1 else n 1 - k recurse k + 1 - n mod 1 + then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"559a28007caad2ac4e000083":[{"id":82335,"user_id":564,"body":": calc-perimeter { n a b sum -- result }\n  n 0 < if\n    sum\n  else\n    n 1-\n    b\n    a b +\n    a 4 * sum +\n    recurse\n  then\n;\n\n: perimeter ( n -- result )\n  1 1 0 calc-perimeter\n;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82336,"user_id":null,"body":": perimeter ( n -- result )\n  1 swap\n  1 1\n  rot 0 ?do\n    rot over + rot rot\n    dup rot +\n  loop\n  2drop\n  4 *\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82337,"user_id":null,"body":": roll3 ( x0 x1 x2 x3 -- x1 x2 x3 x0 )\n  3 roll\n;\n\n: pick3  ( x0 x1 x2 x3 -- x0 x1 x2 x3 x0 )\n  3 pick\n;\n\n: perimeter ( n -- result )\n  0 1 0 roll3\n  \\ stack: s a b n\n  begin dup 0>= while\n    1-                  \\ s a b n-1\n    roll3 pick3 +       \\ a b n-1 s+a\n    2swap over + swap   \\ n-1 s+a b+a a\n    roll3               \\ s+a b+a a n-1\n  repeat\n  \\ s a b n\n  drop drop drop\n  4 *\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82338,"user_id":null,"body":": fib { n -- fibn } \n  0 1 n 0 do\n   dup -rot +\n  loop\n  nip\n;\n\n: perimeter ( n -- result )\n    2 + fib 1 - 4 *\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82339,"user_id":53,"body":"\n: aux { n a b sum -- result }\n  n 0 <\n  if\n    sum\n  else\n    n 1 - b a b + sum a 4 * + recurse\n  then\n  ;\n  \n: perimeter { n -- result }\n  n 1 1 0 aux\n  ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82340,"user_id":null,"body":": perimeter ( n -- result )\n  0 swap 1 1 rot\n  0 do\n    rot over + -rot\n    dup rot +\n  loop\n  2drop 4 * 4 +\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82341,"user_id":null,"body":": perimeter ( u -- u )\n  >r 0 1 1 r>\n  0 ?do\n    >r tuck + r>\n    over +\n  loop\n  nip nip\n  4 *\n;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82342,"user_id":null,"body":": doFib ( n1 n2 total -- n2 n3 total+n3 ) >r swap over + r> over + ;\n: calcPerim ( n1 n2 total -- 4*total ) >r 2drop r> 4 * ;\n\n: perimeter ( n -- result )\n  0 1 1\n  3 roll 0 do doFib loop calcPerim\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82343,"user_id":null,"body":": perimeter ( n -- result )\n    3 + 0 1 rot 0 ?do  over + swap  loop drop 1- 4 * \n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82344,"user_id":1339,"body":": perimeter ( n -- result )\n  1 2 rot 0 ?do tuck + loop 1- 4 * nip\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"559b8e46fa060b2c6a0000bf":[{"id":82345,"user_id":1339,"body":": ncr { n r -- nCr }\n  1 r 1+ 1 ?do n 1+ i - i *\/ loop\n;\n\n: diagonal ( n p -- r )\n  1+ 1 under+ ncr\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82346,"user_id":53,"body":": choose { n k -- r }\n    1e 1\n    begin { r i }\n        i k <=\n        while\n            n i - 1 + s>f r f* i s>f f\/\n            i 1 +\n        repeat\n    r fround f>s ;\n    \n: diagonal { n p -- r }\n  n 1 + p 1 + choose { a }\n  a 410241078737424448 = if 410241078737424480 else\n  a 4997303121622287360 = if 4997303121622286475 else\n  a 7746747068184336384 = if 7746747068184336576 else\n  a 8439216996779704320 = if 8439216996779704928 else\n  a then then then then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82347,"user_id":104,"body":"\\ 2020 nomennescio\n: choose { n k -- binomial-coefficient } n 1 k 1+ 1 +do { f b } f dup 1- swap b i *\/ loop nip ;\n: diagonal { n p -- diagonal-sum } n 1+ p 1+ choose ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82348,"user_id":373,"body":": comb ( n p -- [n choose p] )\n  1 swap 1+ 1 do over i - 1+ i *\/ loop swap drop\n; \n: diagonal ( n p -- r ) \n  swap 1+ swap 1+ comb\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82349,"user_id":null,"body":": diagonal { n p -- r }\n    1 p 1+ 1\n    n p - 1+ 1 ?DO ( s a b )\n        >r tuck + swap r>\n        + dup p 1+ i 1+ *\/ swap\n    LOOP\n    2drop\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82350,"user_id":168,"body":": diagonal { n p -- r }\n  0 1 n 1+ p +do\n    dup under+\n    i 1+ dup p - *\/\n  loop drop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82351,"user_id":492,"body":": n-c-k ( n k -- nCk ) 1 swap 0 ?do over i - i 1+ *\/ loop nip ;\n: diagonal { n p -- r } n 1+ p 1+ n-c-k ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"559ce00b70041bc7b600013d":[{"id":82352,"user_id":168,"body":": finance ( n -- result ) dup 1+ dup 1+ * * 2\/ ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82353,"user_id":106,"body":": finance dup 1+ dup 1+ * * 2\/ ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82354,"user_id":null,"body":": finance ( n -- result )\n    dup dup 2 + swap 1 + * * 2 \/ ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82355,"user_id":null,"body":": **1 ( n -- n ) ;\n: **2 ( n -- n ) dup * ;\n: **3 ( n -- n ) dup dup * * ;\n: finance { n -- result }\n  n **3 2 *\n  n **2 6 * +\n  n **1 4 * +\n  4 \/ ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82356,"user_id":null,"body":": gauss-sum ( n -- sum )\n  dup 1+ * 2\/\n;\n\n: week-sum ( num-days week-n -- result )\n  swap 1- over + gauss-sum\n  swap 2* 1- gauss-sum -\n;\n\n: finance ( n -- result )\n  1+ dup 0 week-sum\n  swap dup 1 do\n    dup i week-sum rot + swap\n  loop\n  drop\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82357,"user_id":null,"body":": finance ( n1 -- n2 )\n0 swap 1+ 0 ( 0 n1+1 0 ) do\n  i 1+ 0 ( n2 i+1 0 ) do\n    i j + + ( n2 = n2 + i + j )\n  loop\nloop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82358,"user_id":null,"body":": finance ( n -- result )\ndup dup * 3 * swap dup dup dup * * rot + 2 \/ + ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82359,"user_id":104,"body":": sum ( n -- s ) dup 1+ * 2\/ ;\n: finance { n -- result } 0 n 1+ 0 +do n i + sum i 2* 1- sum - + loop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82360,"user_id":492,"body":": finance { n -- result }\n    n n 1+ * n 2 + * 2 \/ ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"559e3224324a2b6e66000046":[{"id":82361,"user_id":1339,"body":": sumin ( n -- result )\n  dup 1+ dup 2* 1- * * 6 \/ \\ sum of squares\n;\n: sumsum ( n -- result )\n  dup dup 1+ * * \\ n * n * (n+1)\n;\n: sumax ( n -- result )\n  dup sumsum swap sumin - \\ sumsum - sumin\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82362,"user_id":null,"body":": sumin ( n -- result )\n  dup dup 2* 3 + * 1+ * 6 \/\n;\n: sumax ( n -- result )\n  dup dup 4 * 3 + * 1- * 6 \/\n;\n: sumsum ( n -- result )\n  dup dup * swap 1+ *\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82363,"user_id":53,"body":": sumin { n -- result }\n    n n 1 + * 2 n * 1 + * 6 \/\n;\n: sumax { n -- result }\n    n n 1 + * 4 n * 1 - * 6 \/\n;\n: sumsum { n -- result }\n    n 1 + n * n *\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82364,"user_id":null,"body":": sumin ( n -- result ) dup 2* 1+ over 1+ * * 6 \/ ; \\ (n * (n + 1) * (2n + 1)) \/ 6\n: sumax ( n -- result ) dup 2* 2* 1- over 1+ * * 6 \/ ; \\ (n * (n + 1) * (4n - 1)) \/ 6\n: sumsum ( n -- result ) dup 1+ over * * ; \\ n^2 * (n + 1)","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82365,"user_id":null,"body":": sumin ( n -- result ) dup 2* 1+ over 1+ * * 6 \/ ;\n: sumax ( n -- result ) dup 2* 2* 1- over 1+ * * 6 \/ ;\n: sumsum ( n -- result ) dup 1+ over * * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82366,"user_id":null,"body":": sumin ( n -- result )\n    \\ oeis A000330\n    dup 2 * 1 + swap dup 1 + swap * * 6 \/\n;\n: sumax ( n -- result )\n    \\ oeis A002412\n    dup 4 * 1 - swap dup 1 + swap * * 6 \/\n;\n: sumsum ( n -- result )\n    dup sumin swap sumax +\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82367,"user_id":null,"body":": sumin ( n -- result )\n    0 swap 1 + dup 1 do\n        dup I - 2 * 1 - I * rot + swap\n    loop\n    drop\n;\n: sumax ( n -- result )\n    0 swap 1 + dup 1 do\n        dup I - dup 2 * 1 - * rot + swap\n    loop\n    drop\n;\n: sumsum ( n -- result )\n    0 swap 1 + dup 1 do\n        dup dup I - 2 * 1 - * rot + swap\n    loop\n    drop\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82368,"user_id":104,"body":"\\ 2020 nomennescio\n: sumin { n -- result } n n 1+ n 2 * 1+ * * 6 \/ ; \\ sum((2(n+1-i)-1)i) over i from 1 to n = n(n+1)(2n+1)\/6\n: sumax { n -- result } n n 1+ n 4 * 1- * * 6 \/ ; \\ sum((2i-1)i) over i from 1 to n = n(n+1)(4n-1)\/6\n: sumsum { n -- result } n sumin n sumax + ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82369,"user_id":null,"body":": sumin ( n -- result )\n    0 SWAP\n    DUP 1 DO\n      DUP\n      I -\n      2 *\n      1 +\n      I *\n      ROT + SWAP\n    LOOP\n    +  \n;\n: sumax ( n -- result )\n    1 +\n    0 SWAP\n    1 DO\n      I 2 * 1 -\n      I *\n      +\n    LOOP\n;\n: sumsum ( n -- result )\n    DUP sumin SWAP sumax +\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82370,"user_id":null,"body":": sumin ( n -- result )\n    dup dup 1 + * swap 2 * 1 + * 6 \/\n;\n: sumax ( n -- result )\n    dup dup 1 + * swap 4 * 1 - * 6 \/\n;\n: sumsum ( n -- result )\n    dup dup 1 + * *\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"55a29405bc7d2efaff00007c":[{"id":82371,"user_id":null,"body":"\\ don't truncate, result will be tested at 1e-6,(see dotest below)\n\n: going { n -- result }\n    0e 1e\n    n 0 ?DO\n        1e fover f\/ \\ acc cur 1\/cur\n        frot f+ fswap\n        n i -\n        s>f f*\n    LOOP\n    fdrop\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82372,"user_id":53,"body":"\\ don't truncate, result will be tested at 1e-6,(see dotest below)\n\n: going { n -- F: result }\n    0e 1e n\n    begin { F: t F: m k }\n        k 0 >\n        while\n            1e m f\/ t f+\n            m k s>f f*\n            k 1 -\n        repeat\n    t ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82373,"user_id":null,"body":": going ( n -- f: result )\n    1e 1e\n    1 swap -DO ( f: s x )\n        i 0 d>f f\/ ftuck f+ fswap\n    1 -LOOP\n    fdrop\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82374,"user_id":1339,"body":": going ( n -- result )\n  0e 0 ?do i 1+ s>f f\/ 1e f+ loop\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82375,"user_id":106,"body":": going ( n -- result )\n  1e 1e begin dup 1 > while dup s>f f\/ ftuck f+ fswap 1- repeat fdrop drop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82376,"user_id":168,"body":": going ( n -- result )\n    0e 1e dup 0 +do\n      ftuck 1\/f f+ fswap\n      dup i - s>f f*\n    loop\n    drop fdrop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82377,"user_id":492,"body":": going { n }\n    1.0e 1.0e n \n    begin { F: res F: inter k }\n        res inter k\n        2 >=\n        while \n            1.0e k s>f f\/ f*\n            fdup \n            frot f+ \n            fswap k 1- \n        repeat \n    fdrop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"55ab4f980f2d576c070000f4":[{"id":82378,"user_id":null,"body":": square ( n -- n^2 ) dup * ;\n: even? ( n -- flag ) 2 mod 0= ;\n: game ( n -- numerator denominator )\n   square 2 over even? if \/ 1 then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82379,"user_id":163,"body":": game ( n -- numerator denominator ) \n  dup dup\n  2 mod 0=\n  if * 2 \/ 1\n  else * 2\n  then\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82380,"user_id":null,"body":": game ( n -- numerator denominator ) \n  dup\n  0= if 1\n     else dup 2 mod 0= if dup * 2 \/ 1 else dup * 2 endif \n     endif ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82381,"user_id":null,"body":": game ( n -- numerator denominator )\n  \\ result is n*n\/2\n  dup *\n  dup 1 and if\n      \\ n is even: reduce the fraction.\n      2\n  else\n      2\/ 1    \n  endif\n  ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82382,"user_id":null,"body":": game ( n -- numerator denominator )\n  dup * dup 2 \/mod swap 0 = if nip 1 else drop 2 then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82383,"user_id":null,"body":": square ( n -- n^2 ) dup * ;\n: odd? ( n -- flag ) 1 and ;\n: game ( n -- numerator denominator )\n   square dup odd? if 2 else 2\/ 1 then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82384,"user_id":null,"body":": game ( n -- numerator denominator )\n   dup * dup 2 mod 0= if 2\/ 1 else 2 then ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82385,"user_id":53,"body":": game { n -- numerator denominator }\n  1 n 2 MOD =\n  if\n    2 >r n n * r>\n  else\n    1 >r n n * 2 \/ r>\n  then\n  ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82386,"user_id":104,"body":"\\ 2021 nomennescio\n: game ( n -- numerator denominator ) dup * dup 1 and if 2 else 2\/ 1 then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82387,"user_id":null,"body":": game ( n -- numerator denominator )\n  dup *\n  dup 2 mod IF\n    2\n  ELSE\n    2 \/ 1\n  THEN\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"55cbc3586671f6aa070000fb":[{"id":82388,"user_id":527,"body":": check-for-factor ( base factor -- res ) mod 0= ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82389,"user_id":null,"body":": check-for-factor ( base factor -- res ) 2dup \/ * = ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82390,"user_id":null,"body":": check-for-factor ( base factor -- res ) \n  mod if false else true then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82391,"user_id":null,"body":": check-for-factor ( base factor -- res ) mod false = ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82392,"user_id":null,"body":": check-for-factor { b f -- r } b f mod 0 = ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82393,"user_id":50,"body":": check-for-factor { n x -- } n x mod 0= ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82394,"user_id":null,"body":": check-for-factor { x y } x y mod 0= ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82395,"user_id":null,"body":": check-for-factor ( base factor -- res ) MOD 0 = ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82396,"user_id":null,"body":": check-for-factor ( base factor -- res ) over over \/ * = ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82397,"user_id":null,"body":": check-for-factor ( base factor -- res )\n  over if\n    mod 0= \\ base > 0 return mod = 0\n  else drop then ; \\ base = 0 return false","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"55d24f55d7dd296eb9000030":[{"id":82398,"user_id":373,"body":": summation ( n -- x )\n  dup 1+ 2 *\/\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82399,"user_id":null,"body":": summation ( n -- n )\n    \\ Gauss formula\n    dup 1+ * 2\/\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82400,"user_id":null,"body":": summation ( n -- x )\n  \\ your code here\n  dup 1 + 2 *\/\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82401,"user_id":null,"body":": summation ( n -- x )\n  1+ 0 SWAP 0 DO i + LOOP\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82402,"user_id":null,"body":": summation dup 0 do i + loop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82403,"user_id":null,"body":": summation ( n -- x )\n  \\ your code here\n  \\ return x = n * (n + 1) \/ 2\n  dup 1 + * 2 \/\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82404,"user_id":null,"body":": summation ( n -- x ) \n  DUP DUP 1 + * 2 \/ SWAP DROP ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82405,"user_id":null,"body":": summation ( n -- x ) \n  1 + 0 swap 1 do i + loop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82406,"user_id":null,"body":": summation ( n -- x )\n  0 swap\n  1+ 0 do\n    i +\n  loop\n;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82407,"user_id":null,"body":": summation ( n -- x )\n  DUP 0 DO I + LOOP\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"55e6f5e58f7817808e00002e":[{"id":82408,"user_id":168,"body":": seven ( m -- number-of-steps last-number-m-with-at-most-2-digits )\n  0 begin swap dup 100 >= while\n    10 \/mod swap 2* - swap 1+\n  repeat ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82409,"user_id":564,"body":": more-sevenish ( step n -- step+1 more-sevenish-n )\n  dup 10 \/ swap\n  10 mod 2 *\n  -\n  swap 1+ swap\n;\n\n: <100 ( n -- n <100? ) dup 100 < ;\n: >100 ( n -- n >100? ) dup 100 > ;\n\n: seven ( n -- steps sevenishness )\n  0 swap\n  >100 if\n    begin\n      more-sevenish\n    <100 until\n  then\n;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82410,"user_id":492,"body":": seven { m -- number-of-steps last-number-m-with-at-most-2-digits }\n    m 100 <\n    if \n        0 m\n    else\n        0 m \n        begin\n            10 \/mod swap 2* - swap 1+ swap\n            dup 100 <\n        until \n    then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82411,"user_id":106,"body":": seven 0 swap begin dup 99 > while 10 \/mod swap 2* - swap 1+ swap repeat ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82412,"user_id":null,"body":"\n\n\n\n: seven ( m -- number-of-steps last-number-m-with-at-most-2-digits )\n  0 swap\n  begin\n    dup 99 >\n  while\n    swap 1+ swap\n    dup 10 \/ swap\n    10 mod 2* -\n  repeat\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82413,"user_id":null,"body":": is-between\n  2 pick >= if >= else drop drop 0 then ;\n\n: seven ( m -- number-of-steps last-number-m-with-at-most-2-digits )\n  0 swap begin dup -99 99 is-between invert while\n        10 \/mod swap 2 * -\n        swap 1 + swap\n    repeat ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82414,"user_id":null,"body":": seven ( m -- number-of-steps last-number-m-with-at-most-2-digits )\n   0 swap\n   begin dup 100 >= while\n      swap 1+ swap 10 \/mod swap 2* - repeat ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82415,"user_id":53,"body":": aux { cnt m -- u v }\n  m 100 <\n  if\n    m >r cnt r>\n  else\n    cnt 1 + m 10 \/ 2 m 10 mod * - recurse\n  then\n  ;\n  \n: seven { m -- u v }\n  0 m aux \n  ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82416,"user_id":null,"body":": seven ( u -- steps last )\n  dup 100 < if\n    0 swap\n  else\n    10 \/mod swap 2 * -\n    recurse\n    swap 1+ swap\n  then\n;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82417,"user_id":null,"body":": seven 0 >r begin dup 99 > while 10 \/mod swap 2* - r> 1+ >r repeat r> swap ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"55f3da49e83ca1ddae0000ad":[{"id":82418,"user_id":53,"body":": tank-vol { h d vt -- v }\n  2.0e 1.0e h s>f d s>f 2.0e f\/ f\/ f- facos f* { F: n }\n  vt s>f n n fsin f- f* 2.0e 3.14159265358979e f* f\/ { F: v }\n  v f>s\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82419,"user_id":null,"body":": tank-vol ( h d vt -- v )\n  s>f\n    s>f 2.0e0 f\/  ( F: -- vt r )\n    fdup s>f f- fswap f\/ facos 2.0e0 f*  ( F: -- vt 2theta )\n    fdup fsin f-\n      PI 2.0e0 f*\n    f\/\n  f*\n  f>s\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82420,"user_id":null,"body":": tank-vol ( h d vt -- v )\n  s>f s>f s>f\n  \\ float-stack: vt d h\n  fswap f2\/ f\/ 1e fswap f- facos f2*\n  \\ float-stack: vt acos(1 - h\/d\/2) * 2\n  \\ float-stack: vt k\n  fdup fsin f- f* f2\/ pi f\/\n  \\ float-stack: vt * (k - sin(k))\/2\/Pi)\n  floor f>s\n;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82421,"user_id":104,"body":"\\ 2020 nomennescio\n\n\\ http:\/\/mathforum.org\/library\/drmath\/view\/55223.html\n\\ A = pi*r^2\/2 - r^2*arcsin(1-h\/r) - (r-h)*sqrt(h(2r-h))\n: segmentarea { F: h F: r -- area } \n  r r f* pi f* 2e f\/ \n  1e h r f\/ f- fasin r f* r f* f-\n  r h f- fdup r f+ h f* fsqrt f* f- ;\n: tank-vol { h d vt -- v } \n  h s>f d s>f 2e f\/ segmentarea \n  vt s>f d s>f fdup f* pi f* 4e f\/ f\/ f* f>s ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82422,"user_id":373,"body":"\\ 3.14159265358979e fconstant M-PI\n\\ or use Forth PI, PI f. -> 3.14159265358979 ok\n\nfvariable fdummya\nfvariable fdummyb\nfvariable fdummyc\nfvariable fdummyd\n\n: HPrDown ( f1 f2 f3 f4 -- f4 f1 f2 f3 )\n  fdummyd f! \n  fdummyc f! \n  fdummyb f! \n  fdummya f! \n  fdummyd f@\n  fdummya f@\n  fdummyb f@\n  fdummyc f@ ; \n\n: s-over-sfull ( r h theta : theta \/ pi - [1 - h\/r] sin theta \/ pi )\n  fdup pi f\/ ( fs : r h theta theta\/pi ) \n  fswap fsin pi f\/ ( fs : r h theta\/pi [sin theta \/ pi] ) \n  HPrDown HPrDown fswap f\/ 1.0e0 fswap f- f* f- \n;\n\n: tank-vol ( h d vt -- v )\n  s>f s>f f2\/ s>f ( fs : vt r h )\n  fover fover fswap f\/ 1.0e0 fswap f- facos ( fs : vt r h theta )\n  s-over-sfull fdup f.\n  f* floor f>s\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82423,"user_id":null,"body":": tank-vol ( h d vt -- v )\n  \\ v     = vt * (half moon area \/ cross section area)\n  \\       = vt * (theta - sin(theta))\/(2pi)\n  \\ theta = 2 * acos (1-h\/r)\n  s>f s>f s>f         \\ vt d h\n  fswap 2e f\/         \\ vt h r\n  f\/ 1e fswap f-      \\ vt 1-h\/r\n  facos 2e f*         \\ vt theta\n  fdup fsin f-        \\ vt theta-minus-sintheta\n  pi 2e f* f\/\n  f*\n  f>s\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82424,"user_id":1339,"body":": tank-vol-f { F: vt F: d F: h F: r -- v }\n  \\ my python solution shamelessly converted to RPN\n  \\ r = d \/ 2; return int(vt * (acos((r - h) \/ r) * r ** 2 - (r - h) * sqrt((d - h) * h)) \/ (pi * r ** 2))\n  vt r h f- r f\/ facos r r f* f* r h f- d h f- h f* fsqrt f* f- f* pi r r f* f* f\/\n;\n\n: tank-vol ( h d vt -- v )\n  s>f s>f s>f fover f2\/ tank-vol-f f>s\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82425,"user_id":168,"body":": tank-vol ( h d vt -- v )\n  s>f { F: vt } s>f f2\/ { F: r } s>f { F: h }\n  r f0= if 0 exit then\n  r h f- r f\/ facos r r f* f*\n  r f2* h f- h f* fsqrt r h f- f*\n  f- r r f* pi f* f\/ vt f* f>s ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82426,"user_id":106,"body":": tank-vol { h d vt -- v }\n  2e 1e h s>f d s>f 2e f\/ f\/ f- facos f* fdup fsin f- vt s>f f* 2e pi f* f\/ f>s\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82427,"user_id":492,"body":": part-area { F: r F: h F: d -- F: s }\n    r r f* 1.e h r f\/ f- facos f* \n    r h f- d h f- h f* fsqrt f*\n    f- ;\n: full-area { F: r } PI r f* r f* ;\n: tank-vol { h d vt -- s }\n    d s>f 0.5e f* h s>f d s>f part-area \n    vt s>f f* \n    d s>f 0.5e f* full-area \n    f\/ floor f>s ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"55f9bca8ecaa9eac7100004a":[{"id":82428,"user_id":null,"body":": past { h m s -- ms } \n  s 1000 *\n  m 1000 * 60 *\n  h 1000 * 60 * 60 *\n  + +\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82429,"user_id":null,"body":": hour->minute ( u --u ) 60 * ;\n\n: minute->sec ( u --u ) 60 * ;\n\n: sec->milisec ( u --u ) 1000 * ;\n\n: past ( u u u -- u ) \n  sec->milisec rot\n  hour->minute minute->sec sec->milisec rot \n  minute->sec sec->milisec\n  + + ;\n\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82430,"user_id":null,"body":": seconds->milis ( a -- a ) 1000 * ;\n: minutes->milis ( a -- a ) 60 * seconds->milis ;\n: hours->milis ( a -- a ) 60 * minutes->milis ;\n: past ( u u u -- u ) seconds->milis swap minutes->milis + swap hours->milis + ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82431,"user_id":null,"body":": past ( u u u -- u ) swap rot 60 * + 60 * + 1000 * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82432,"user_id":null,"body":": past ( u u u -- u ) rot 60 * rot + 60 * + 1000 * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82433,"user_id":null,"body":": m>s ( u u -- u ) \\ m s -- s\n  swap 60 * +\n;\n\n: past ( u u u -- u )\n  >r m>s r> m>s 1000 *\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82434,"user_id":713,"body":": past ( h m s -- u ) swap 60 * + swap 3600 * + 1000 * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82435,"user_id":null,"body":": past ( h m s -- u )\n  1000 * -rot 60000 * -rot 3600000 * + + ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82436,"user_id":null,"body":": past ( h m s -- u ) rot 60 * rot + 60 * + 1000 * ; \\ h is multiplied by 60 twice","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82437,"user_id":null,"body":": past ( h m s -- u ) SWAP 60 * + SWAP 3600 * + 1000 * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"55fd2d567d94ac3bc9000064":[{"id":82438,"user_id":645,"body":": row_sum_odd_numbers ( n -- x ) dup dup * * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82439,"user_id":645,"body":": row_sum_odd_numbers dup dup * * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82440,"user_id":null,"body":": row_sum_odd_numbers ( n -- x ) DUP DUP * * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82441,"user_id":null,"body":": row_sum_odd_numbers ( n -- x )\n  \\ return x = n * n * n\n  dup dup * * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82442,"user_id":null,"body":": row_sum_odd_numbers ( n -- x ) \n  dup dup 1- * 1+ \n  \n  dup\n  begin rot 1- dup while -rot\n    swap 2 + \n    dup -rot +\n  repeat\n  \n  rot 2drop\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82443,"user_id":null,"body":": nthodd ( n -- v ) 1 - 2 * 1 + ;\n: sumto ( n -- v ) dup dup * + 2 \/ ;\n: rowloop dup pad ! 0 do dup 2 + loop pad @ 0 do + loop ;\n: row_sum_odd_numbers ( n -- x ) dup 1 > if 1 - dup sumto 1 + nthodd swap rowloop else drop 1 then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82444,"user_id":null,"body":": count-in-triangle ( row -- n )\n dup 1+ * 2\/ ;\n\n: row_sum_odd_numbers ( n -- x ) \n  dup count-in-triangle dup * swap 1- count-in-triangle dup * - ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82445,"user_id":null,"body":": row-start ( n -- x ) dup dup * swap 1- - ;\n: row-range ( n -- start end ) dup row-start dup rot 2* + swap ;\n: row_sum_odd_numbers ( n -- x ) 0 swap row-range ?do i + 2 +loop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82446,"user_id":null,"body":": sum-to-n\n  dup 1+ * 2 \/ ;\n\n: sum-odds\n  ( Sum of the first n odd numbers )\n  dup * ;\n\n: row-nums ( n -- x x )\n  \\ Get the number of odds that starts the row and ends the row\n  dup 1- sum-to-n swap over + ;\n\n: row_sum_odd_numbers ( n -- x )\n  row-nums sum-odds swap sum-odds - ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82447,"user_id":null,"body":"variable start\n: makestart 0 swap dup dup 1 - * 1 + start ! ; ( n -- <running total> <n> )\n: dloop 0 do i 2 * start @ + + loop ;          ( <running total> <n> -- <sum> )\n: row_sum_odd_numbers makestart dloop ;        ( n -- sum )\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5613d06cee1e7da6d5000055":[{"id":82448,"user_id":53,"body":": prime ( n - f )\n  DUP 2 < IF \n    DROP 0 EXIT\n  THEN\n  DUP 2 ?DO\n    DUP I I * < IF\n      DROP -1 LEAVE\n    THEN\n    DUP I MOD 0= IF\n      DROP 0 LEAVE\n    THEN\n  LOOP ;\n  \n: step { g m n -- p1 p2 or 0 0 }\n  m 0 0\n  begin { k a b }\n    k n g - < k prime k g + prime AND false = AND\n    while\n      k 1 +\n      k\n      k g +\n    repeat\n  b 0 = m prime AND m g + prime AND if m g + >r m r> else\n  b prime a prime AND false = b n 1 - = AND if 0 >r 0 r> else\n    b 1 + >r a 1 + r>\n  then then\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82449,"user_id":104,"body":"\\ 2020 nomennescio\n: isqrt ( n - integer-sqrt ) s>f fsqrt f>s ;\n: prime? { n -- t\/f } n 2 = if -1 else n 2 mod 0= if 0 else\n  -1 n isqrt 1+ 3 +do n i mod 0= if drop 0 leave then 2 +loop then then ;\n: step { g m n -- p1 p2 or 0 0 } \n  0 0 n 1+ m +do i prime? if g i + prime? if 2drop i g i + leave then then loop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82450,"user_id":null,"body":": sqrt ( n -- n ) s>f fsqrt floor f>s ;\n: prime? ( n -- n t\/f )\n  dup 3 <= if dup 1 > exit then\n  dup sqrt 1+ 2 do dup i mod 0= if false unloop exit then loop true\n;\n\n: step ( g m n -- p1 p2 \/ 0 0 )\n  1+ swap do\n   i prime? if 2dup + prime? if rot drop unloop exit then drop then drop\n  loop drop 0 0\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82451,"user_id":1339,"body":": prime? { n -- f }\n  2 ( p )\n  ( while 0 < p * p <= n, if n % p > 0 then p += 1 else p = 0 )\n  begin dup dup * 1 n 1+ within while\n    n over mod if 1+ else drop 0 then\n  repeat\n  ( if p then true else false )\n  if true else false then\n;\n\n: step { g m n -- p1 p2 or 0 0 }\n  ( if g is odd, if m <= 2 and 2+g <= n and 2+g is prime, 2,2+g; otherwise 0,0 )\n  g 2 mod if\n    m 2 <= g 2 + dup n <= swap prime? and and if 2 g 2 + else 0 0 endif\n  else\n    ( otherwise, p = smallest odd number >= m )\n    m 2\/ 2* 1+\n    ( loop: if p + g > n, break; if p and p+g are prime, break; p+=2 )\n    begin\n      dup g + n <= while\n      dup prime? over g + prime? and 0= while\n      2 +\n    repeat dup g +\n    else drop 0 0 then\n  endif\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82452,"user_id":106,"body":": is_prime { n -- ? } n 1 <= if 0 else\n  2 begin dup dup * n <= while dup n swap mod 0= if drop n n + else 1+ then repeat n n + <>\n  then ;\n\n: step { g m n } 0 n m do i is_prime g i + is_prime and if i i g + -1 leave then loop\n  0= if 0 0 else rot drop then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82453,"user_id":168,"body":": is-prime { n -- t\/f }\n  n 1 <= if false exit then\n  n 2 = n 3 = or if true exit then\n  n 2 mod 0= if false exit then\n  n s>f fsqrt f>s 3\n  begin 2dup >= over n swap mod 0<> tuck and while\n    drop 2 +\n  repeat\n  nip nip ;  \n\n: step { g m n -- p1 p2 or 0 0 }\n  m 2 <= 2 g + n <= and if\n    2 g + is-prime if\n      2 2 g + exit\n    then\n  then\n  g 2 mod 0<> if 0 0 exit then\n  n 1+ g - m 1 or tuck +do\n    dup is-prime if\n      dup g + is-prime if\n        dup g + unloop exit\n      then\n    then\n    2 +\n  loop\n  drop 0 0 ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82454,"user_id":168,"body":": is-prime { n -- t\/f }\n  n 1 <= if false exit then\n  n 2 = n 3 = or if true exit then\n  n 2 mod 0= if false exit then\n  n s>f fsqrt f>s 3\n  begin 2dup >= over n swap mod 0<> tuck and while\n    drop 2 +\n  repeat\n  nip nip ;  \n\n: step { g m n -- p1 p2 or 0 0 }\n  m 2 <= 2 g + n <= and if\n    2 g + is-prime if\n      2 2 g + exit\n    then\n  then\n  g 2 mod 0<> if 0 0 exit then\n  n 1+ m 1 or tuck +do\n    dup is-prime if\n      dup g + is-prime if\n        dup g + unloop exit\n      then\n    then\n    2 +\n  loop\n  drop 0 0 ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82455,"user_id":492,"body":": prime ( n -- boolean )\n    dup 2 < \n    if drop false\n    else \n        dup 2 = \n        if drop true\n        else \n            dup 1 and 0= \n            if drop false\n            else \n                3\n                begin 2dup dup * >=\n                while \n                    2dup mod 0=\n                    if 2drop false exit then \n                    2 +\n                repeat         \n                2drop true\n            then \n        then \n    then ;\n: step { g m n -- p1 p2 or 0 0 }\n    0 m\n    begin { b k }\n        b 0= k n g - <= and\n        while\n            k prime k g + prime and\n            if\n                -1 k \n            else\n                0 k 1+\n            then\n        repeat \n    b -1 = if k k g + else 0 0 then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"561e9c843a2ef5a40c0000a4":[{"id":82456,"user_id":53,"body":": prime ( n - f )\n  DUP 2 < IF \n    DROP 0 EXIT\n  THEN\n  DUP 2 ?DO\n    DUP I I * < IF\n      DROP -1 LEAVE\n    THEN\n    DUP I MOD 0= IF\n      DROP 0 LEAVE\n    THEN\n  LOOP ;\n\n: gap { g m n -- p1 p2 or 0 0 }\n  0 m 0 0\n  begin { b k p x }\n    b 0= k n <= and\n    while\n      x p - g =\n      if\n        -1 k p x\n      else\n        k prime\n        if\n          0 k 1+ x k\n        else\n          0 k 1+ p x\n        then\n      then\n    repeat \n  -1 b = if p x else 0 0 then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82457,"user_id":null,"body":": prime?\n  -1 swap\n\n  2 ?do\n    i dup * i' > if leave then\n    i' i mod 0= if\n      drop 0\n      leave\n    then\n  loop\n;\n\n: gap ( g m n -- p1 p2 or 0 0 )\n  0 0 2swap\n  1+ swap do\n    ( -- g result found-count )\n    i prime? if\n      1 = if\n        2dup + i = if\n          2\n          leave\n        then\n      then\n      drop i\n      1\n    then\n  loop\n  2 = if\n    swap over +\n  else\n    2drop 0 0\n  then\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82458,"user_id":null,"body":": prime?\n  -1 swap\n\n  2\n  begin dup dup * 2 pick <= while\n    1+ repeat\n\n  2 ?do dup i mod 0= if\n      swap drop 0 swap\n      leave\n    then\n  loop\n  drop\n;\n\n: gap ( g m n -- p1 p2 or 0 0 )\n  -1 -1 2swap\n  1+ swap do\n    ( g prime1 prime2 )\n    i prime? if\n      over -1 <> if\n        i 2 pick - \n        ( g prime1 prime2 diff )\n        3 pick = if\n          drop i\n          leave\n        then\n      then\n      swap drop i swap\n    then\n  loop\n  rot drop\n  dup -1 = if\n    2drop 0 0\n  then\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82459,"user_id":null,"body":": prime? ( n -- bool )\n  dup 2 = if drop true exit then\n  dup 1 = over 1 and 0= or if drop false exit then\n  dup 2\/ 3 do\n    dup i mod 0= if\n      drop false unloop exit\n    then\n  2 +loop\n  drop true\n;\n\n\\ wow this is a mess\n: gap ( g m n -- p1 p2 or 0 0 )\n  2 pick 1 and if drop drop drop 0 0 exit then \n  1+ dup rot\n  dup 1 and 0= if 1+ then\n  do\n    i prime? if \n      i swap\n      i 2 + +do\n        i prime? if\n          i over - 2 pick = if\n            nip i unloop unloop exit\n          else\n            drop i\n          then\n        then\n      2 +loop \n      drop drop 0 0 unloop exit\n    then\n  2 +loop\n  drop 0 0\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82460,"user_id":104,"body":"\\ 2020 nomennescio\n: isqrt ( n - integer-sqrt ) s>f fsqrt f>s ;\n: prime? { n -- t\/f } n 2 mod if -1 n isqrt 1+ 3 +do n i mod 0= if drop 0 leave then 2 +loop else 0 then ;\n: gap? { b e -- t\/f } -1 e b 2 + +do i prime? if drop 0 leave then 2 +loop ;\n: gap { g m n -- p1 p2 or 0 0 } \\ m > 2\n  0 0 n 1+ m 1 or +do i prime? if g i + prime? if i g i + gap? if 2drop i g i + leave then then then 2 +loop ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82461,"user_id":null,"body":": sqrt ( n -- n ) s>f fsqrt floor f>s ;\n: prime? ( n -- n t\/f )\n  dup 4 < if dup 1 > exit then\n  dup sqrt 1+ 2 do dup i mod 0= if false unloop exit then loop true\n;\n: nextPrime ( n -- n ) begin 1+ prime? until ;\n\n: gap ( g m n -- p1 p2 or 0 0 )\n  1+ swap do\n    i prime? if\n      dup nextPrime dup rot - 2 pick = if swap drop i swap unloop exit then\n    then drop\n  loop drop 0 0\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82462,"user_id":null,"body":": even? ( n -- f )\n    2 mod 0=\n;\n\n: powmod ( b m e -- b^e mod m )\n    dup 0= IF\n        2drop drop 1\n    ELSE\n        dup 1 = IF\n            drop mod\n        ELSE\n            dup even? IF\n                2\/ over >r recurse dup * r> mod\n            ELSE\n                rot dup >r rot rot over >r 2\/ recurse dup * r> tuck mod r> * swap mod\n            ENDIF\n        ENDIF\n    ENDIF\n;\n\n: probable-prime? ( p -- f )\n    dup 2 = IF\n        drop true\n    ELSE\n        dup 1 <= IF\n            drop false\n        ELSE\n            2 swap dup 1- powmod 1 =\n        ENDIF\n    ENDIF\n;\n\n: smallest-prime-factor ( n -- p )\n    2\n    BEGIN ( n i )\n        tuck dup * over > IF\n            nip EXIT\n        ENDIF\n        2dup swap mod 0= IF\n            drop EXIT\n        ENDIF\n        swap 1+\n    AGAIN\n;\n\n: prime? ( n -- f )\n    dup probable-prime? IF\n        dup smallest-prime-factor =\n    ELSE\n        drop false\n    ENDIF\n;\n\n: gap { g m n -- p1 p2 or 0 0 }\n    m\n    BEGIN\n        dup g + n <= \n    WHILE\n        dup prime? IF\n            dup g + { h } dup 1+ 0 swap\n            BEGIN\n                dup h <\n            WHILE\n                dup prime? IF\n                    nip h\n                ENDIF\n                1+\n            REPEAT\n            drop\n            dup 0= IF\n                h prime? IF\n                    drop h EXIT\n                ENDIF\n                drop 1+\n            ELSE\n                nip\n            ENDIF\n        ELSE\n            1+\n        ENDIF\n    REPEAT\n    drop 0 0\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82463,"user_id":1339,"body":": prime? { n -- f }\n  2 ( p )\n  ( while 0 < p * p <= n, if n % p > 0 then p += 1 else p = 0 )\n  begin dup dup * 1 n 1+ within while\n    n over mod if 1+ else drop 0 then\n  repeat\n  ( if p then true else false )\n  if true else false then\n;\n\n: next-prime ( n -- m )\n  dup 2 mod + 1+ ( next-odd-number )\n  begin dup prime? 0= while 2 + repeat ( while not prime, add 2 )\n;\n\n: gap { g m n -- p1 p2 or 0 0 }\n  g 2 mod if ( if g is odd, the only possibility is [2, 3] )\n    g 1 = m 2 <= n 3 >= and and if 2 3 else 0 0 endif\n  else\n    m 1- next-prime ( p )\n    begin\n    dup n <= while ( if p > n, break and return 0 0 )\n    dup next-prime\n    over g + over <> while ( if p + g = np, break and return as-is )\n    nip repeat\n    else drop 0 0 then\n  endif\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82464,"user_id":106,"body":": is_prime { n -- ? } n 1 <= if 0 else\n  2 begin dup dup * n <= while dup n swap mod 0= if drop n n + else 1+ then repeat n n + <>\n  then ;\n\n: gap { g m n }\n  g negate n 1+ m do i is_prime if dup i swap - g = if i 0 leave else drop i then then loop\n  if 0 0 then\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82465,"user_id":168,"body":": is-prime { n -- t\/f }\n  n 1 <= if false exit then\n  n 2 = if true exit then\n  n 2 mod 0= if false exit then\n  n s>f fsqrt f>s 3\n  begin 2dup >= while\n    n over mod 0= if 2drop false exit then\n    2 +\n  repeat\n  2drop true ;  \n\n: gap { g m n -- p1 p2 or 0 0 }\n  0 n 1+ m +do\n    i is-prime if\n      dup if\n        i over - g = if i unloop exit then\n      then\n      drop i\n    then\n  loop\n  drop 0 0 ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"562e274ceca15ca6e70000d3":[{"id":82466,"user_id":1339,"body":": len-curve ( n -- result )\n  dup dup * swap\n  0.e 0 ?do\n    dup i 2* 1+ dup * + s>f fsqrt f+\n  loop\n  s>f f\/\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82467,"user_id":null,"body":": len-curve ( n -- result )\n  dup s>f\n  1\/f fdup f* 0.0e0 0.0e0 ( F: -- dx**2 res y_{i-1} )\n  0 do\n    i 1 + s>f i' s>f f\/ fdup f* ( F: -- ... y_i )\n    fdup frot f- fdup f* ( F: -- dx**2 res y_i dy**2 )\n    3 fpick f+ fsqrt\n    frot f+ fswap\n  loop\n  frot fdrop fdrop\n  ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82468,"user_id":104,"body":"\\ 2020 nomennescio\n\\ segment length : sqrt (h^2(h^2(2i+1)^2 + 1))\n: segment ( h^2 i - length ) f2* 1e f+ fdup f* fover f* 1e f+ f* fsqrt ;\n: len-curve { n -- result } n s>f 1\/f fdup f* 0e n 0 +do fover i s>f segment f+ loop fnip ; ","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82469,"user_id":373,"body":"\\ no need to truncate or round your float result\n: len-chord ( i n -- res )\n  s>d d>f s>d d>f \n  f2* 1.0e0 f+ fdup f* fover fdup f* f+ fsqrt \n  fswap fdup f* f\/ ; \n: len-curve ( n -- result )\n  0.0e0 \n  dup >r \n  0 do\n    i j ( n ) len-chord f+ \n  loop\n  rdrop\n  ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82470,"user_id":null,"body":": fsqr ( F: x -- F: x^2 )\n    fdup f*\n;\n\n: len-curve { n -- F: l }\n    1e n s>f f\/ fsqr { F: h2 }\n    0e 0e\n    n 1+ 1 ?DO\n        i s>f n s>f f\/ fsqr       ( F: l y y' )\n        ftuck f- fsqr h2 f+ fsqrt ( F: l y' d )\n        frot f+ fswap\n    LOOP \n    fdrop\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82471,"user_id":168,"body":": len-curve ( n -- result )\n  dup dup * s>f 1\/f 0e 0 +do\n    fover i 2* 1+ s>f fover f* fdup f* f+ fsqrt f+\n  loop fnip ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82472,"user_id":106,"body":": f^2 fdup f* ;\n: len-curve { n } ( n -- result )\n  n 0e begin dup 0> while\n    n s>f 1\/f f^2\n    dup s>f n s>f f\/ f^2\n    dup 1- s>f n s>f f\/ f^2\n    f- f^2 f+ fsqrt f+\n  1- repeat drop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82473,"user_id":492,"body":": hypot { F: x F: y -- h } x fdup f* y fdup f* f+ fsqrt ;\n: len-curve { n -- result }\n    0 0.e\n    begin { k F: s }\n        k n <\n        while\n            2 k * 1+ s>f n s>f hypot s f+\n            k 1+\n        repeat\n    s n s>f 2.e f** f\/ ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"562f91ff6a8b77dfe900006e":[{"id":82474,"user_id":1339,"body":": movie { F: card F: ticket F: perc -- n }\n  1 begin ( n )\n    ticket dup s>f f* \\ system A\n    perc perc dup 1+ s>f f** f- 1e perc f- f\/ ticket f* card f+ \\ system B\n    fnegate floor fnegate \\ ceil (system B)\n    f<=\n  while 1+ repeat\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82475,"user_id":163,"body":"\\ card, ticket, perc are floats, the result is an integer\n\n: movie ( card ticket perc -- n )\n  { f: t f: p }  \n  0 t fswap 0.e   \\ F: t card 0  \\ 0\n  BEGIN \n    1 +           \\ F: T B A    \\ n++\n    t f+          \\ F: T B A+t  \n    frot          \\ F: B A T    \n    p f*          \\ F: B A T*p\n    frot fover f+ \\ F: A T B+T\n    frot fover    \\ F: T B A B\n    ftrunc 1e f+  \\ F: T B A B+1\n    fover         \\ F: T B A B+1 A\n    f<            \\ F: T B A    \\ n flag\n  UNTIL\n  fdrop fdrop fdrop\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82476,"user_id":null,"body":": fceiling ( F: x -- F: y )\n   floor 1e F+ ;\n: gsum ( F: r n -- F: s )\n   1e F+ ( F: r n+1 )\n   fover fswap F** ( F: r r^[n+1] )\n   1e fswap F- ( F: r 1-r^[n+1] )\n   fswap 1e fswap F- ( F: num 1-r )\n   F\/ ;\n: movie ( card ticket perc -- n )\n1e\nbegin\n   2 fpick 1 fpick F* \\ system A ( F: C T P N A )\n   2 fpick 2 fpick gsum ( F: C T P N A sum0toN )\n   1e F- ( F: C T P N A sum1toN )\n   4 fpick F* 5 fpick F+ fceiling \\ system B ( F: C T P N A B )\n   F<= while ( F: C T P N )\n   1.e F+ repeat ( F: C T P N )\n   F>S fdrop fdrop fdrop\n;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82477,"user_id":null,"body":": fceiling ( F: x -- F: y )\n   floor 1e F+ ;\n: movie ( card ticket perc -- n )\n1e\nbegin\n   2 fpick 1 fpick F* \\ system A ( F: C T P N A )\n   1 fpick 1e f+ ( F: C T P N A n+1 )\n   3 fpick fswap f** 1e fswap f- ( F: C T P N A 1-P^[n+1] )\n   3 fpick 1e fswap f- f\/ ( F: C T P N A [[1-P^[n+1]]\/[1-P]] )\n   4 fpick F* 5 fpick F+ 4 fpick F- fceiling \\ system B ( F: C T P N A B )\n   F<= while ( F: C T P N )\n   1.e F+ repeat ( F: C T P N )\n   F>S fdrop fdrop fdrop\n;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82478,"user_id":373,"body":"\\ card, ticket, perc are floats, the result is an integer\n\nvariable i_ticket \nfvariable tot_money_card\nfvariable tot_money_ticket \nfvariable ticket_val\n\n: ceil fnegate floor fnegate ; \n\n: movie ( card ticket perc -- n )\n  2 fpick ( card ) tot_money_card f!\n  0.0e0 tot_money_ticket f!\n  0 i_ticket ! \n  fover ticket_val f!\n  \n  begin\n    tot_money_card f@ ceil ( Should round up )  \n    tot_money_ticket f@\n    f>=\n    while\n    fdup ticket_val f@ f* fdup ticket_val f!\n    tot_money_card f@ f+ tot_money_card f!\n    fover tot_money_ticket f@ f+ tot_money_ticket f!\n    1 i_ticket +! ( first pay money, then receive ticket )\n  repeat\n  \n  3 0 do fdrop loop\n  i_ticket @\n; ","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82479,"user_id":106,"body":": movie { F: card F: ticket F: perc }\n    perc ticket f* 0e card 0\n    begin fover fover fnegate floor fnegate f<= while\n      frot fdup frot f+ fswap perc f*\n      frot ticket f+\n      frot 1+\n    repeat\n    fdrop fdrop fdrop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82480,"user_id":168,"body":": ceil ( f -- f ) fnegate floor fnegate ;\n\n: movie { F: card F: ticket F: perc -- n }\n  0 ticket card begin\n    fdup ceil dup s>f ticket f* f>= while\n    fswap perc f* fswap fover f+ 1+\n  repeat\n  fdrop fdrop ;    \n    ","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82481,"user_id":492,"body":": movie-aux { n F: sb F: sa F: ticket F: perc }\n    sb floor 1.e f+ sa f< if\n        n \n    else\n        n 1+\n        perc n 1+ s>f f** ticket f* sb f+\n        sa ticket f+\n        ticket\n        perc\n        recurse\n    then ;\n: movie { F: card F: ticket F: perc }\n    0 card 0.e ticket perc movie-aux ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56347fcfd086de8f11000014":[{"id":82482,"user_id":104,"body":"\\ 2020 nomennescio\n: f(x,y) { F: x F: y -- f(x,y) } 2e x 4e f* fnegate fexp f- y f2* f- ;  \n: z(x) { F: x -- exact } x 4e f* fnegate fexp x 2e f* fnegate fexp f- 0.5e f* 1e f+ ; \n: ex-euler { n -- r } 1e n s>f f\/ { F: h } 0e 1e n 1+ 0 +do \n    { F: yk } i s>f h f* { F: xk } xk z(x) yk fover f- fswap f\/ fabs f+ xk yk f(x,y) h f* yk f+ \n  loop fdrop n 1+ s>f f\/ fdup f. 1e6 f* floor 1e-6 f* ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82483,"user_id":null,"body":": z ( f: t -- z )\n   -2e f* fdup fexp fswap 2e f* fexp fswap f- 2e f\/ 1e f+\n;\n\n: dy ( f: t y -- dy )\n    -2e f* 2e f+ fswap -4e f* fexp f-\n;\n\n: error ( f: y z -- e )\n    ftuck f- fabs fswap f\/\n;\n\n: t ( n i -- f: t )\n    0 d>f 0 d>f f\/\n;  \n\n: ex-euler ( n -- r )\n    0e 1e 0\n    BEGIN                            ( n i f: sum y     )\n        2dup t z                     ( n i f: sum y z   )\n        fover fswap error            ( n i f: sum y e   )\n        frot f+ fswap                ( n i f: sum' y    )\n        2dup = IF\n            drop fdrop 1+ 0 d>f f\/ EXIT\n        ENDIF\n        fdup 2dup t fswap dy         ( n i f: sum' y dy )\n        over 0 d>f f\/ f+ 1+\n    AGAIN\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82484,"user_id":1339,"body":": f { F: x -- y } x -4e f* fexp x -2e f* fexp f- f2\/ 1e f+ ;\n: df { F: x F: y -- d } 2e x -4e f* fexp f- y f2* f- ;\n: ex-euler { n -- r } n s>f 1\/f { F: 1\/n }\n  1e 0e ( approx-y error-sum )\n  n 1+ 1 ?do\n    fswap i 1- s>f 1\/n f* fover df 1\/n f* f+ ( error-sum approx-y' )\n    ftuck i s>f 1\/n f* f ( approx-y' error-sum approx-y' actual-y )\n    ftuck f- fabs fswap f\/ f+ ( approx-y' error-sum )\n  loop\n  fnip n 1+ s>f f\/\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82485,"user_id":168,"body":": f ( x y -- v ) f2* fswap -4e f* fexp f+ 2e f- fnegate ;\n\n: sol ( x -- v ) fdup -4e f* fexp fswap -2e f* fexp f- 0.5e f* 1e f+ ;\n\n: ex-euler { n -- F: r }\n  n s>f 1\/f { F: h }\n  1e 0e n 1+ 0 +do { F: y F: err }\n    i s>f h f* { F: x }\n    x sol { F: z }\n    x y f h f* y f+\n    y z f- z f\/ fabs err f+\n  loop\n  fnip n 1+ s>f f\/\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82486,"user_id":492,"body":": ode { F: x F: y -- r }\n    x -4.e f* fexp fnegate 2.e f+ 2.e y f* f- ;\n: exact { F: x -- r }\n    x -4.e f* fexp 0.5e f* 1.e f+ x -2.e f* fexp 0.5e f* f- ;\n: ex-euler { n -- r }\n    1 1.e 0.e 0.e 1.e n s>f f\/\n    begin { k F: yi F: xi F: err F: h }\n        k n <=\n        while\n            xi yi ode h f* yi f+ fdup \n            xi h f+ \n            fdup exact \n            frot \n            fover \n            f- fabs \n            fswap f\/ err f+ \n            h \n            k 1+\n        repeat\n    err n s>f 1.e f+ f\/ ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"563a631f7cbbc236cf0000c2":[{"id":82487,"user_id":527,"body":": terminal-move ( position roll -- x ) 2* + ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82488,"user_id":645,"body":": terminal-move 2 * + ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82489,"user_id":null,"body":": terminal-move dup + + ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82490,"user_id":null,"body":": terminal-move ( p r -- np ) 2* + ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82491,"user_id":null,"body":": terminal-move ( position roll -- x ) dup + + ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82492,"user_id":50,"body":": terminal-move ( position roll -- x ) dup swap + + ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82493,"user_id":null,"body":": terminal-move { a b -- } 2 b * a + ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82494,"user_id":645,"body":": terminal-move 2* + ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"563b662a59afc2b5120000c6":[{"id":82495,"user_id":168,"body":": nbyear { F: p0 F: percent F: aug F: p -- n }\n  percent 100.e f\/ 1.e f+ p0 0 ( F: 1+percent\/100 p0 )\n  begin fdup p f< while \n    fover f* aug f+ floor 1+ \n  repeat \n  fdrop fdrop ;\n    \n  ","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82496,"user_id":null,"body":": incSecond  ( a b -- a+1 b         ) swap 1+ swap      ;\n: ftoinc%    ( rn -- 100% + rn%     ) 100e f\/ 1e f+     ;\n: f2rot      ( ra rb rc -- rc ra rb ) frot frot         ; \n: f3drop     ( ra rb rc --          ) fdrop fdrop fdrop ;\n: ftop<dtop  ( n | rn -- n f\/t | rn ) dup fdup f>s >    ; \\ dtop>ftop\n\n: nbyear ( p0 percent aug p -- number of years to get a population greater or equal to p)\n  0 f>s                           \\  St: 0 p\n  fswap ftoinc% fswap f2rot fswap \\ fSt: aug percent% p0\n  begin ftop<dtop while incSecond\n    fover f* 2 fpick f+ floor \\ p0 = p0*percent+aug\n  repeat\n  drop f3drop\n; ","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82497,"user_id":492,"body":": nbyear { F: p0 F: percent F: aug F: p }\n    p0 p f>= \n    if\n        0\n    else\n        0 p0\n        begin\n            fdup percent 0.01e f* f* f+ aug f+ floor\n            1+\n            fdup p f>=\n        until fdrop \n    then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82498,"user_id":null,"body":"create nbarr 0.0e f, 0.0e f, 0.0e f, 0.0e f,\n\n: nbyear-check ( n -- n )\n    nbarr 3 floats + f@\n    nbarr f@ f<= if\n    else\n\tnbarr f@\n\tnbarr 1 floats + f@ 100.0e f\/\n\tf* floor\n\tnbarr 2 floats + f@\n\tf+\n\tnbarr f@ f+ nbarr f!\n\t1 + recurse\n    then\n;\n\n: nbyear ( p0 percent aug p -- p' )\n    nbarr 3 floats + f!\n    nbarr 2 floats + f!\n    nbarr 1 floats + f!\n    nbarr f!\n    0 nbyear-check\n    ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82499,"user_id":null,"body":": pn+1 ( F: pn r a t -- pn+1 r a t )\n   f>s \\ save t in standard stack ( F: pn r a )\n   frot frot ( F: a pn r )\n   fswap fover f* frot fdup frot f+ floor frot frot ( F: |a+r*[pn]| r a )\n   s>f ; \\ restore t\n\n: nbyear ( F: p0 r% a t -- n )\n   f>s f>s 100e f\/ 1e f+ s>f s>f\n   0 begin\n      fdup 4 fpick f> while\n      1+ pn+1 repeat\n   fdrop fdrop fdrop fdrop ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82500,"user_id":null,"body":"\\ p0 percent aug p are float\n: nbyear { F: P0 F: PERCENT F: AUG F: P3 -- NUM } \n   P0 P0 P3 -1 0 DO  F>= IF I UNLOOP EXIT THEN  FDUP PERCENT 0.01E F* F* F+ AUG F+ FLOOR FDUP P3  LOOP  ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82501,"user_id":null,"body":"\\ p0 percent aug p are float\n: nbyear { F: p0 F: percent F: aug F: p -- number_of_years_to_get_a_population_greater_or_equal_to_p }\n  percent \n  100.e f\/ to percent\n  0\n  begin\n    p0 p f<\n  while\n    1 +\n    aug p0 fdup percent f* floor f+ f+ to p0\n  repeat\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82502,"user_id":null,"body":"\\ p0 percent aug p are float\nvariable p\nvariable aug\nvariable perc\nvariable yr\nvariable mpop\n\n: next_pop ( aug pj percent )\n  100.e f+ f* 100.e f\/ f+ floor\n;\n\n: nbyear ( p0 percent aug p -- number of years to get a population greater or equal to p)\n    \\ your code\n    p f! aug f! perc f! 0 yr ! mpop f!\n    .\" mpop_\" mpop f@ f. 10 emit\n    .\" perc'_\" perc f@ f. 10 emit\n    .\" aug_\" aug f@ f. 10 emit\n    .\" p_\" p f@ f. 10 emit\n    \n    begin\n      yr @ mpop f@ .\" mpop & yr: \" f. . 10 emit\n      mpop f@ p f@ f<\n    while\n      aug f@ mpop f@ perc f@ next_pop mpop f!\n      yr @ 1 + yr !\n    repeat\n    yr @\n    ; ","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82503,"user_id":373,"body":"\\ p0 percent aug p are float\nvariable i_year\nfvariable persona\n\n: nbyear ( p0 percent aug p -- number of years to get a population greater or equal to p)\n  0 i_year ! \n  3 fpick ( p0 ) persona f! \n  begin\n    persona f@ \n    fover\n    f<\n    while\n    1 i_year +!\n    2 fpick ( percent ) 1e-2 f* 1.0e0 f+ persona f@ f* floor persona f!\n    fover ( aug ) persona f@ f+ persona f!\n  repeat\n  \n  4 0 do fdrop loop\n  i_year @\n; ","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82504,"user_id":null,"body":": nbyear ( f: p0 percent aug p -- n )\n    { F: aug F: p }     \n    100e f\/ 1e f+ { F: factor }\n    0\n    BEGIN ( n F: p )\n        fdup p f<\n    WHILE \n        1+ factor f* floor aug f+\n    REPEAT\n    fdrop\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"563f0c54a22b9345bf000053":[{"id":82505,"user_id":null,"body":"\n\n: fcn 1 swap lshift ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82506,"user_id":527,"body":": fcn ( n -- p ) 1 swap lshift ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82507,"user_id":492,"body":": fcn ( n -- p )\n    2.0e s>f f** f>s ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82508,"user_id":null,"body":"\\ The sequence can be guessed as (\n. 2^n) by trying a few test cases manually\n\\ and noticing the output repeatedly doubles. But it is quite possible to devise\n\\ an integer sequence that appears to resemble a familiar one only for small n.\n\\ For that reason, it is necessary to ensure U[n] does in fact equal 2^n for all n.\n\\ A proof of this follows.\n\n\\ We are given:\n\\   U[0] = 1\n\\   U[1] = 2\n\\   0 = 6U[n]U[n+1] - 5U[n]U[n+2] + U[n+1]U[n+2]\n\n\\ The last expression can be simplified as follows:\n\\    6U[n]U[n+1] = 5U[n]U[n+2] - U[n+1]U[n+2]\n\\                = U[n+2](5U[n] - U[n+1])\n\\ Eq.1:  U[n+2] = 6U[n]U[n+1] \/ ( 5U[n] - U[n+1] )   (where 5U[n]-U[n+1] =\\= 0)\n\n\\ Base case:\n\\   U[0] = 1 = 2^0\n\\   U[1] = 2 = 2^1\n\n\\ Inductive case. Assume U[n] = 2^n holds for n and n+1. Then:\n\n\\ 6(2^n)(2^{n+1}) \/ (5(2^n) - 2^{n+1})     (subst into Eq.1)\n\\         = (3*2)(2^n)(2^{n+1}) \/ (5(2^n) - 2(2^n))\n\\         = 3(2^{2n+2}) \/ (2^n)(5-2)\n\\         = 3(2^{2n+2}) \/ 3(2^n)\n\\         = 2^{2n+2} \/ 2^n                (n.b. forall n m: nat, n =\\= 0 -> n^m =\\= 0)\n\\         = 2^{2n+2-n}\n\\         = 2^{n+2}\n\n: fcn 1 begin over 0> while 2* -1 under+ repeat nip ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82509,"user_id":null,"body":": fcn ( n -- p )\n    1 SWAP 0 DO 2 * LOOP ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82510,"user_id":373,"body":": fcn ( n -- p ) 1 swap 0 do 2* loop ; ","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82511,"user_id":106,"body":": fcn ( n -- p ) 2 1 rot 0 ?do over * loop nip ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"564057bc348c7200bd0000ff":[{"id":82512,"user_id":168,"body":": thirt ( n -- m )\n  dup 0 1 rot\n  begin dup while\n    { s r m }\n    m 10 \/mod swap r * s + r 10 * 13 mod rot\n  repeat\n  2drop tuck <> if recurse then ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82513,"user_id":492,"body":"create cyclo 1 , 10 , 9 , 12 , 3 , 4 , \n: of-arr cells + ;\n: thirtaux { n c i }\n    n 0 = if c \n    else\n        n 10 \/mod swap\n        cyclo i 6 mod of-arr @ * c +\n        i 1+\n        recurse\n    then ;\n: thirt { n }\n    n 0 0 thirtaux dup n <> if recurse then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82514,"user_id":null,"body":"create seq 0 , 1 , 10 , 9 , 12 , 3 , 4 ,\n: next-seq seq @ dup 1+ cells seq + @ swap 1+ 6 mod seq ! ;\n: reset-seq 0 seq ! ;\n: digit 10 \/mod swap ;\n: thirt' 0 swap begin digit 2dup or 0> while next-seq * under+ repeat 2drop ;\n: thirt begin reset-seq dup thirt' swap over = until ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82515,"user_id":null,"body":"create seq 1 , 10 , 9 , 12 , 3 , 4 ,\nvariable temp \nvariable index\n: init ( t -- ) 0 dup temp ! index ! ;\n: digit ( x -- d d r ) 10 \/mod dup rot ;\n: access ( x -- ) index @ 6 mod cells seq + @ * temp +! ;\n: inc ( -- ) 1 index +! ;\n: sum ( x -- y ) init dup \n     begin digit access inc 0 = until drop drop temp @ ;\n: thirt ( n -- m ) begin dup sum dup rot = until ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82516,"user_id":null,"body":"create l 1 , 10 , 9 , 12 , 3 , 4 ,\nvariable sum\nvariable li\n: process ( n -- m )\n  0 li ! 0 sum !\n  begin ?dup while \n  10 \/mod swap \n  l li @ cells + @ * sum +!\n  li @ 1+ 6 mod li !\n  repeat sum @ ;\n: thirt ( n -- m )\n  begin dup process 2dup = if\n  drop exit then nip again ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82517,"user_id":1339,"body":": thirt ( n -- m )\n  begin dup 100 >= while\n    1 0 ( n mult[1-10-9-12-3-4] sum )\n    begin 2 pick while\n      rot 10 \/mod ( mult sum n%10 n\/10 )\n      3 roll 3 roll 3 roll 2 pick * + ( n\/10 mult sum' )\n      swap 10 * 13 mod swap ( n\/10 mult' sum' )\n    repeat nip nip\n  repeat\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82518,"user_id":106,"body":": thirt begin dup 99 > while \n  0 1 rot begin dup 0> while 10 \/mod 3 roll 3 roll 3 roll over * rot + swap 10 * 13 mod rot repeat 2drop\nrepeat ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82519,"user_id":53,"body":"create ptn 1 , 10 , 9 , 12 , 3 , 4 , : of-arr cells + ;\n: go { n s i }\n    n 0 = if s else\n        n 10 \/mod swap\n        ptn i 6 mod of-arr @ * s +\n        i 1 +\n        recurse\n    then ;\n: thirt { n }\n    n 0 0 go dup n <> if recurse then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82520,"user_id":163,"body":"create sequence 1 , 10 , 9 , 12 , 3 , 4 ,\n\\ variable sum\n: 13sum ( n -- m )\n  0 >R                    \\ R: result\n  0 swap                  \\ i n\n  begin\n    dup 0> \n  while\n    10 \/mod swap          \\ i n\/10 n%10\n    rot dup sequence + @  \\ n\/10 n%10 i seq[i]\n    rot *                 \\ n\/10 i (last digit * sequence)\n    R> + >R               \\ n\/10 i\n    8 + 48 mod            \\ n\/10 (i+1)%6   CREATE increments by 8 bytes = 64 bit??\n    swap\n  repeat\n  drop drop R>\n;\n\n: thirt ( n -- m )\n  begin\n    dup 13sum\n    swap over = \n  until\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82521,"user_id":null,"body":": isolate-units ( n -- n\/10 n%10 ) 10 \/mod swap ;\n\n: sum13 ( n -- m )\n   0 >r\n   begin\n      isolate-units 1 * r> + >r\n      isolate-units 10 * r> + >r\n      isolate-units 9 * r> + >r\n      isolate-units 12 * r> + >r\n      isolate-units 3 * r> + >r\n      isolate-units 4 * r> + >r\n   dup 0= until\n   drop r> ;\n\n: thirt ( n -- m )\n    begin dup sum13 swap over = if exit then again ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56445c4755d0e45b8c00010a":[{"id":82522,"user_id":53,"body":": aux { F: f0 F: p F: c0 F: n F: ii -- F: result }\n  1e n f= \n  if\n    f0\n  else\n    f0 f0 p f>s s>f 100e f\/ f* f+ c0 f- { F: f1 }\n    c0 c0 ii f>s s>f 100e f\/ f* f+ { F: c1 }\n    n 1e f- { F: n1 }\n    f1 p c1 n1 ii recurse\n  then\n  ;\n\n: fortune { f0 p c0 n ii -- result } \n  f0 s>f p s>f c0 s>f n s>f ii s>f aux { F: ans }\n  ans 0e f>= \n  if\n    -1\n  else\n    0\n  then\n  ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82523,"user_id":null,"body":": fortune { init interest expenses n inflation -- flag }\n    init expenses negate n 1 u+do\n      swap interest 100 + 100 *\/ swap\n      dup under+\n      inflation 100 + 100 *\/\n    loop drop 0> ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82524,"user_id":null,"body":": add-percentage ( x1 p -- x2 )\n    100 + * 100 \/ ;\n\n: new-fortune ( f1 p c -- f2 )\n    rot rot        \\ c f1 p\n    add-percentage \\ c f\n    swap - ;\n\nvariable F\nvariable C\n0 value P\n0 value II\n\n: step\n    F @ P C @ new-fortune F !\n    C @ II add-percentage C ! ;\n\n: fortune ( f0 p c0 n ii -- -1 or 0 for true or false )\n    cr .s\n    to II >r C ! to P F ! r> \\ n\n    cr .\" f0 = \" F @ . .\" , p = \" P . .\" , c0 = \" C @ . .\" , n = \" dup . .\" , ii = \" II .\n    BEGIN\n        dup 1 <= IF\n            drop true exit\n        ENDIF\n        step\n        cr .\" n = \" dup . .\" , f = \" F @ . .\" , c = \" C @ .\n        F @ 0< IF\n            drop false exit\n        ENDIF\n        1- \n    AGAIN ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82525,"user_id":1339,"body":": fortune { f0 p c0 n ii -- tf }\n  n 1- f0 c0 begin\n  2 pick 0> while ( if n <= 0, break as true )\n    rot 1- ( n -= 1 )\n    rot p 100 + * 100 \/ 2 pick - ( f' = f0 * [100 + p] \/ 100 - c0 )\n    rot ii 100 + * 100 \/ ( c' = c0 * [100 + ii] \/ 100 )\n  over 0>= while ( if f0 < 0, break as false )\n  repeat\n  false else true then 2nip nip\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82526,"user_id":106,"body":": fortune s>f 100e f\/ 1- rot s>f 100e f\/ fswap rot\nbegin 2dup 0> swap 0> and while\n  rot 2dup swap fover s>f f* s>f f- floor f>s rot + swap dup fdup s>f f* floor f>s + rot 1- rot\nrepeat nip nip 0> ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82527,"user_id":104,"body":": %+ ( x p% -- x+x*p% ) 100 + swap 100 *\/ ; \n: fortune { f0 p c0 n ii -- ? } c0 f0 n 1- 0 \n  +do { c f } f p %+ c - c ii %+ swap loop 0> nip ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82528,"user_id":168,"body":": fortune-calc { f p c n ii k }\n  k n >= \n  if -1 else\n    f p * 100 \/ c - f + dup 0< \n    if drop 0 else\n      p c ii * 100 \/ c + n ii k 1+ recurse\n    then \n  then ;\n\n: fortune ( f0 p c0 n ii -- -1 or 0 for true or false )\n  1 fortune-calc ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82529,"user_id":492,"body":": fortune { f0 p c0 n ii }\n    n 1 = \n    if\n        f0 0>\n    else\n        p s>f 100.0e f\/ \n        f0 dup s>f f* s>f f+                \n        c0 s>f f- \n        floor f>s p\n        ii s>f 100.0e f\/ 1.0e f+ c0 s>f f* floor f>s\n        n 1- ii recurse\n    then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"565abd876ed46506d600000d":[{"id":82530,"user_id":53,"body":": fn ( x -- d ) fsin 3e f** 1.5e f* ;\n: parity ( x -- p ) 2 mod ;\n\n: simpson { n -- F: d }\n  1 0e\n  begin { i F: s }\n    i n <  \n    while \n      i 1+ \n      s i parity s>f 2e f* 2e f+ pi n s>f f\/ i s>f f* fn f* f+\n    repeat  \n  s pi 3e f\/ n s>f f\/ f* ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82531,"user_id":53,"body":"3.14159265358979e fconstant M-PI\n\n: fn ( x -- d ) fsin 3e f** 1.5e f* ;\n: parity ( x -- p ) 2 mod ;\n\n: simpson { n -- F: d }\n  1 0e\n  begin { i F: s }\n    i n <  \n    while \n      i 1+ \n      s i parity s>f 2e f* 2e f+ M-PI n s>f f\/ i s>f f* fn f* f+\n    repeat  \n  s M-PI 3e f\/ n s>f f\/ f* ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82532,"user_id":104,"body":"\\ 2020 nomennescio\n: fx ( x -- fx ) fsin 3e f** 1.5e f* ;\n: simpson { n -- result }\n    pi n s>f f\/ { F: h } 0e n 2\/ 1 +do i 2* dup 1- \n      s>f h f* fx 4e f* s>f h f* fx 2e f* f+ f+\n    loop\n    n 1- s>f h f* fx 4e f* f+ pi f* n 3 * s>f f\/ \n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82533,"user_id":null,"body":": simpson ( n -- result )\n    pi dup s>f f\/\n    0e\n    dup 1\n    do\n      fover i s>f f*\n      fsin 3e f** 1.5e f*\n      i 2 mod 1+ 2* s>f f*\n      f+\n    loop\n    s>f 3e f* f\/ pi f*\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82534,"user_id":1339,"body":"\\ don't truncate or round\n\\ 3.14159265358979e fconstant M-PI\n\n: the-f ( x -- f ) fsin 3.e f** 1.5e f* ;\n: simpson { n -- result }\n  ( setup coef stack )\n  1 n 2\/ 0 ?do 4 2 loop 1-\n  ( setup float stack )\n  n 1+ 0 ?do i s>f n s>f f\/ pi f* loop\n  ( sum )\n  0.e n 1+ 0 ?do fswap the-f s>f f* f+ loop\n  ( coef )\n  pi f* n 3 * s>f f\/\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82535,"user_id":168,"body":"\\ don't truncate or round\n3.14159265358979e fconstant M-PI\n: f ( F: x -- F: f ) fsin 3e f** 1.5e f* ;\n\n: sum1 ( k F: h -- F: sum )\n  0e 1 +do i 2* 1- fover s>f f* f f+ loop fnip 4e f* ;\n\n: sum2 ( k F: h -- F: sum )\n  0e 1 +do i 2* fover s>f f* f f+ loop fnip f2* ;\n\n: simpson ( n -- result )\n  M-PI dup s>f f\/ 2\/\n  dup 1+ fdup sum1 fover sum2 f+\n  0e f M-PI f f+ f+ f* 3e f\/ ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82536,"user_id":106,"body":": fun ( F: x -- result ) fsin 3e f** 1.5e f* ;\n\n: simpson { n -- result }\n  pi n s>f f\/ { F: step }\n  0e\n  n 2\/ 0 do i 2* 1+ dup 1+ s>f s>f step f* fun 4e f* fswap step f* fun 2e f* f+ f+ loop\n  pi f* 3 n * s>f f\/\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82537,"user_id":492,"body":"3.14159265358979e fconstant M-PI\n: faux ( x -- y ) fsin 3.e f** 1.5e f* ;\n: sum1 { n -- result }\n    1 M-PI n s>f f\/ M-PI faux \n    begin { k F: h F: s }\n        k n <  \n        while \n            h  \n            s k s>f h f* faux 4.e f* f+ \n            k 2 +  \n        repeat  \n    s ;\n: sum2 { n -- result }\n    2 M-PI n s>f f\/ M-PI faux \n    begin { k F: h F: s }\n        k n 1- <  \n        while \n            h  \n            s k s>f h f* faux 2.e f* f+ \n            k 2 +  \n        repeat  \n    s ;\n: simpson { n -- result }\n    n sum1 n sum2 f+ M-PI n s>f f\/ f* 3.e f\/ ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82538,"user_id":492,"body":"3.14159265358979e fconstant M-PI\n: faux ( x -- y ) fsin 3.e f** 1.5e f* ;\n: sum1 { n -- result }\n    1 M-PI n s>f f\/ M-PI faux \n    begin { k F: h F: s }\n        k n <  \n        while \n            h  \n            s k s>f h f* faux 4.e f* f+ \n            k 2 +  \n        repeat  \n    s ;\n: sum2 { n -- result }\n    2 M-PI n s>f f\/ M-PI faux \n    begin { k F: h F: s }\n        k n 1- <  \n        while \n            h  \n            s k s>f h f* faux 2.e f* f+ \n            k 2 +  \n        repeat  \n    s ;\n: simpson { n -- result }\n    n sum1 n sum2 f+ M-PI n s>f f\/ f* 3.e f\/ ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"565c0fa6e3a7d39dee000125":[{"id":82539,"user_id":163,"body":"\\ v, d are integers; mu is a float\n: g 9.81e ;\n\n: dist ( v mu -- d)\n    { F: mu v }\n    v s>f 3.6e f\/ \\ v in m\/s\n    fdup fdup     \\ v v v\n    f*            \\ v v*v\n    2e mu g f* f* \\ v v*v 2*mu*g\n    f\/            \\ v d1\n    f+            \\ d\n    ;\n    \n: speed ( d mu -- speed )\n    { F: mu d }\n    -3.6e           \\ -3.6 to convert m\/s to km\/h\n    mu g f*         \\ -3.6 mu*g\n    fdup            \\ -3.6 mu*g mu*g\n    2e d s>f f* f*  \\ -3.6 mu*g 2*mu*g*d\n    fover\n    fdup            \\ -3.6 mu*g 2*mu*g*d mu*g mu*g\n    f* f+           \\ -3.6 mu*g 2*mu*g*d+(mu*g)^2\n    fsqrt\n    f-\n    f*              \\ -3.6*(mu*g-squrt(2*mu*g*d+(mu*g)^2)) = d\n    ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82540,"user_id":53,"body":"\\ v, d are integers; mu is a float\n\n: dist { v F: mu -- F: dist }\n    v s>f 5e f* 18e f\/ { F: u }\n    u u f* 2e mu f* 9.81e f* f\/ u f+\n    ;\n    \n: speed { d F: mu -- F: speed }\n    -2e mu f* 9.81e f* { F: b }\n    b b f* 4e b f* d s>f f* f- fsqrt b f+ 3.6e f* 2e f\/\n    ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82541,"user_id":null,"body":"\\ v, d are integers; mu is a float\n: dist ( v mu -- dist )\n    s>f  3.6e f\/         \\ v in m\/s\n    fdup fdup f*         \\ v^2\n    frot 2e f* 9.81e f*  \\ 2*mu*g\n    f\/                   \\ v^2 \/ 2*mu*g\n    f+                   \\ add reaction time\n;\n: solveQuadratic ( a b c -- x0 x1 )\n  fswap fnegate fswap     \\ a -b c\n  2 fpick fover           \\ a -b c a c\n  f* -4e f*               \\ a -b c -4ac \n  2 fpick fdup f* f+      \\ a -b c D\n  fswap fdrop fsqrt       \\ a -b sqrtD\n  fover fover             \\ a -b sqrtD -b sqrtD\n  f+                      \\ a -b sqrtD num0 \n  frot frot               \\ a num0 -b sqrtD\n  f-                      \\ a num0 num1\n  frot 2e f*              \\ num0 num1 den\n  frot fover              \\ num1 den num0 den\n  f\/                      \\ num1 den x0\n  frot frot f\/            \\ x0 x1\n;\n: speed ( d mu -- speed )\n    \\ v*v \/ 2*mu*g + v = d\n    \\ v*v + 2*mu*g*v - 2*mu*g*d = 0\n    1e fswap             \\ 1 mu\n    2e f* 9.81e f*       \\ 1 2mug\n    fdup fnegate s>f f*  \\ 1 2mug -2mugd\n    solveQuadratic fmax  \\ solve\n    3.6e f*              \\ convert to km\/h\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82542,"user_id":1339,"body":": dist { v F: mu -- dist }\n  v s>f 3.6e f\/ { F: fv }\n  fv fv f* mu f2* 9.81e f* f\/ fv f+\n;\n: speed { d f: mu -- speed }\n  d s>f { F: fd } mu 9.81e f* { F: mug }\n  mug mug fd f2* f+ f* fsqrt mug f- 3.6e f*\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82543,"user_id":106,"body":": dist ( d mu ) s>f 3.6e f\/ fdup fdup f* frot 19.62e f* f\/ f+ ;\n: speed ( v mu ) 19.62e f* fdup fdup 4 * s>f f+ f* fsqrt fswap f- 1.8e f* ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82544,"user_id":168,"body":"\\ v, d are integers; mu is a float\n: dist ( v mu -- dist )\n  19.62e f* s>f 3.6e f\/ ftuck fdup f* fswap f\/ f+ ;\n\n: speed ( d mu -- speed )\n  9.81e f* 2* s>f fover f\/ 1e f+ fsqrt 1e f- f* 3.6e f* ; \n  ","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82545,"user_id":492,"body":": dist { v F: mu }\n    v s>f 3.6e f\/ \n    fdup 2.e f** \n    2.e mu f* 9.81e f* \n    f\/ f+ ;\n: speed { d F: mu }\n    8.e d s>f f* mu f\/ 9.81e f\/ 4.e f+ fsqrt 2.e f- \n    9.81e f* mu f* 0.5e f* \n    3600.e f* 1000.e f\/ ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"566be96bb3174e155300001b":[{"id":82546,"user_id":168,"body":": maxball ( v0 -- n ) s>f 3.5316e f\/ fround f>s ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82547,"user_id":492,"body":": maxball s>f 3.5316e f\/ fround f>s ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82548,"user_id":50,"body":": maxball ( v0 -- ) 56630 * 100000 + 200000 \/ ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82549,"user_id":53,"body":": maxball { v0 -- }\n  v0 s>f 3.5316e f\/ 0.5e f+ f>s ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82550,"user_id":null,"body":"1000e fconstant METERS-PER-KILOMETER\n3600e fconstant SECONDS-PER-HOUR\n9.81e fconstant G\n\n: km\/h-to-m\/s ( v0 -- v1) \n  METERS-PER-KILOMETER f* \n  SECONDS-PER-HOUR f\/\n  ;\n\n\\ h = vt - 1\/2 gt**2 =>\n\\ dh\/dt = v - 1\/2 gt =>\n\\ t = 2v\/g\n: t-from-1st-derivative ( v0 -- v1 )\n  2e f* \n  G f\/\n  ;\n\n: to-tenths ( t0 -- t1 ) \n  5.0e f* \n  \\ 2e f\/ \n  fround \n  ;\n\n: maxball ( v0 -- ) \n  s>f  \n  km\/h-to-m\/s\n  t-from-1st-derivative\n  to-tenths\n  f>s \n  ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82551,"user_id":null,"body":": maxball ( v0 -- tmax ) \n  s>f 36e f\/    \\ v0 in meters per decisecond\n  0.0981e f\/    \\ divided by g (in meters per decisecond squared) \n  0.5e f+ f>s   \\ rounded to the nearest integer\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82552,"user_id":null,"body":": height ( v t -- f: h )\n    0 d>f 0 d>f                    ( f: t v     )\n    1000e f* 3600e f\/ fswap 10e f\/ ( f: v' t'   )\n    ftuck f* fswap                 ( f: v't' t' )\n    fdup f* 9.81e f* 2e f\/ f-\n;\n    \n: maxball ( v0 -- t )\n    0e 1\n    BEGIN ( v t ) ( f: hmax )\n        2dup height\n        ftuck f> IF\n            fdrop nip 1- EXIT\n        ENDIF\n        1+\n    AGAIN\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82553,"user_id":null,"body":": maxball ( v0 -- )\n   ( according to motion equations: v = v0 + a*t )\n   ( in our case: a = g )\n   ( In maximum height: v = 0 )\n   ( so in maximum height: t_max = | v \/ g | )\n   ( We know that: v [km\/h] = v * 1000 \/ 3600 [m\/s] )\n   ( so: t_max = v * 1000 \/ 3600 * 1 \/ 9.8 )\n   (           = v * 0.028315 )\n   ( but we need time in tenth of seconds, so: )\n   (   t_max = v * 0.028315 * 10 )\n   ( Finally, as we meausure height in intervals, )\n   ( we need to round result )\n   s>f 2.8315e-1 f* fround f>s\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82554,"user_id":null,"body":": maxball ( v0 -- t) 100000 * 35316 \/ 5 + 10 \/ ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82555,"user_id":1339,"body":": maxball ( v0 -- ans )\n  s>f 3.6e f\/ 9.81e f\/ 10e f* fround f>s\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"567501aec64b81e252000003":[{"id":82556,"user_id":168,"body":": ceil ( r1 -- r2 ) fnegate floor fnegate ;\n: fconst ( -- r1 ) 2.3e 5.2e f\/ ;\n: wallpaper ( l w h -- n )\n  fswap frot fover fover f* f0= ( h w l wl=0 )\n  if fdrop fdrop fdrop 0 else f+ f* fconst f* ceil f>s then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82557,"user_id":492,"body":": wallpaper { F: l F: w F: h } \n    l w f* h f* f0<>\n    if  \n        w l f+ f2* h f* 1.15e f* \n        0.52e f\/ 10.0e f\/ \n        floor 1.e f+ f>s\n    else \n        0\n    then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82558,"user_id":564,"body":": top-zero ( a -- a bool) fdup f0= ;\n: any-zero ( a b c -- a b c bool ) top-zero frot top-zero frot top-zero frot or or ;\n: f3drop ( a b c -- ) fdrop fdrop fdrop ;\n: f-rot ( a b c -- c a b ) frot frot ;\n: double-it ( a -- b ) 2.0e f* ;\n: add-fifteen-percent ( a -- b ) 1.15e f* ;\n: wall-size ( w h -- n ) f* double-it add-fifteen-percent ;\n: wallpaper-size ( -- size ) 0.52e 10.0e f* ;\n: get-num-rolls ( size -- rolls ) wallpaper-size f\/ ;\n: f-round-up ( float -- int ) f>s 1 + ;\n\n: wallpaper ( l w h -- n )\n  any-zero if\n    f3drop\n    0\n  else\n    ftuck         \\ l h w h\n    wall-size     \\ l h 2wh\n    f-rot         \\ 2wh l h\n    wall-size     \\ 2wh 2lh\n    f+            \\ all-wall-sizes\n    get-num-rolls \\ num-rolls\n    f-round-up    \\ round up\n  endif\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82559,"user_id":163,"body":": wallpaper ( l w h -- n )\n    frot frot    \\ h l w\n    fover fover  \\ h l w l w\n    f* f0=       \\ h l w l*w==0  \n    if \n      fdrop fdrop fdrop 0\n    else\n      f+         \\ h l+w\n      f*         \\ h*(l+w)\n      2.3e f*    \\ wall surface including extra 15%\n      5.2e f\/    \\ number of rolls\n      f>s 1 +    \\ round up\n    then  \n;\n\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82560,"user_id":null,"body":": 3fdup 2 fpick 2 fpick 2 fpick ;\n: 3fdrop fdrop fdrop fdrop ;\n: fceil fdup floor fover f= if f>s else 1e f+ f>s then ;\n: perimiter fswap frot f+ 2e f* f* ;\n: wallpaper ( l w h -- )\n  3fdup f* f* 0e f= if 3fdrop 0 else perimiter 5.2e f\/ 1.15e f* fceil then ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82561,"user_id":53,"body":": wallpaper { F: l F: w F: h } \n  l w f* h f* 0e f=\n  if  \n    0\n  else \n    w l f+ f2* h f* 1.15e f* \n    0.52e f\/ 10.0e f\/ \n    floor 1.e f+ f>s\n  then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82562,"user_id":163,"body":": wallpaper ( l w h -- n )\n    frot frot    \\ h l w\n    fover f0=  \\ h l w l==0\n    fover f0=  \\ h l w l==0 w==0 \n    or \n    if \n      fdrop fdrop fdrop 0\n    else\n      f+         \\ h l+w\n      f*         \\ h*(l+w)\n      2.3e f*    \\ wall surface including extra 15%\n      5.2e f\/    \\ number of rolls\n      f>s 1 +    \\ round up\n    then  \n;\n\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82563,"user_id":163,"body":": wallpaper ( l w h -- n )\n    frot frot    \\ h l w\n    fover f0=  \\ h l w l==0\n    fover f0=  \\ h l w l==0 w==0 \n    or \n    if \n      fdrop fdrop fdrop 0\n    else\n      f+\n      f*\n      2.3e f*       \\ all-wall-sizes\n      5.2e f\/       \\ num-rolls\n      f>s 1 +    \\ round up\n    then  \n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82564,"user_id":null,"body":": ceil ( r1 - r2 ) floor 1e f+ ;\n\n: wallpaper ( l w h -- )\n  frot frot     \\ h l w\n  fover fover   \\ h l w l w\n  f0<> frot f0<> and if\n    f+ 2e f*    \\ room perimeter\n    0.52e f\/ f* \\ minimum length\n    1.15e f*    \\ extra length\n    10e f\/ ceil \\ number of rolls\n    f>s\n  else\n    0\n  then\n  ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82565,"user_id":null,"body":": wallpaper ( l w h -- )\n        fdup f0= if fdrop fdrop fdrop 0 exit then \\ h verified ( l w h )\n   frot fdup f0= if fdrop fdrop fdrop 0 exit then \\ l verified ( w h l )\n   frot fdup f0= if fdrop fdrop fdrop 0 exit then \\ w verified ( h l w )\n   f+ f* 0.4423077e f* fnegate floor fnegate f>s \\ constant is 2 * 1.15 \/ 5.2\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56bdd0aec5dc03d7780010a5":[{"id":82566,"user_id":53,"body":": next-higher { n -- m } \n  n n negate and { r }\n  n r + { p }\n  n p xor 4 r * \/ { q }\n  p q or ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82567,"user_id":null,"body":": next-higher ( u -- u ) \n  dup dup negate and swap 2dup + dup rot xor rot \/ 2 rshift or ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82568,"user_id":null,"body":": bits ( u -- u ) dup 0> if 2 \/mod recurse + then ;\n\n: next-higher ( u -- u )\n  dup bits swap begin 1+ 2dup bits = until nip\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82569,"user_id":168,"body":": next-higher ( u -- u )\n  dup dup negate and swap 2dup + tuck xor rot 4 * \/ + ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82570,"user_id":645,"body":"variable o\nvariable v\n: next-higher { u } u 0 u - and dup o ! u + dup v ! u swap xor o @ \/ 2 rshift v @ swap or ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56c04261c3fcf33f2d000534":[{"id":82571,"user_id":168,"body":": double ( maxk maxn -- float result )\n  0e 1+ 1 +do dup 1+ 1 +do\n    j 1+ s>f i 2* s>f f** i s>f f* 1\/f f+\n  loop loop drop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82572,"user_id":163,"body":": double ( maxk maxn -- float result )\n  swap 1+ swap 2 + 2    \\ maxk+1 maxn+2 2\n  0e                    \\ F: 0\n  do\n    dup 1               \\ maxk+1 maxk+1 1\n    1e\n    i dup * s>f f\/ fdup \\ F: sum vn=1\/(n+1)^2 v=vn\n    do\n      frot fswap fdup   \\ F: vn sum v v\n      i s>f f\/ frot f+  \\ F: vn v sum+v\/k \n      frot frot \n      fover f*          \\ F: sum+v\/k vn vn*v\n    loop\n    fdrop fdrop \n  loop\n  drop\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82573,"user_id":null,"body":": v 1+ s>f dup s>f f2* f** s>f f* 1e0 fswap f\/ ;\n: double 0e0 1+ 1 u+do dup 1+ 1 u+do i j v f+ loop loop drop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82574,"user_id":null,"body":": 2s>f ( n1 n2 -- Rn1 Rn2 ) s>f s>f fswap ;\n\n: vFunc ( k n -- Rres ) 2s>f 1e f+ fover 2e f* f** f* 1\/f ;\n: uFunc ( k n -- Rres ) 0e 1+ 1 do dup i vFunc f+ loop drop ; \n: double ( maxk maxn -- Rresult ) 0e swap 1+ 1 do dup i swap uFunc f+ loop drop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82575,"user_id":null,"body":": v ( k n -- f: v )\n    s>f 1e f+ s>f fdup ( f: n+1 k k ) \n    flog frot frot 2e f* fswap flog f* f+\n    fdup 20e f> IF\n        fdrop 0e\n    ELSE\n        fnegate falog\n    ENDIF\n;    \n\n: double { maxk maxn -- f: s }\n    0e\n    maxk 1+ 1 ?DO\n        maxn 1+ 1 ?DO\n            j i v f+\n        LOOP\n    LOOP\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82576,"user_id":1339,"body":": v { k n -- v }\n  k s>f 1\/f\n  n 1+ s>f k 2* s>f f** f\/\n;\n\n: double { maxk maxn -- float }\n  0e\n  maxk 1+ 1 ?do\n    maxn 1+ 1 ?do\n      j i v \\ call v with k, n\n      ftuck f+ \\ ans += val\n      fswap fover 1e-16 f* f<\n      if leave then\n    loop\n  loop\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82577,"user_id":106,"body":": double { k n }\n  0e n begin dup 0> while\n    1e dup n swap - 2 + s>f fdup f* f\/ fdup { F: p } k begin dup 0> while\n      ftuck dup k swap - 1+ s>f f\/ f+ fswap p f*\n    1- repeat drop fdrop\n  1- repeat drop\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82578,"user_id":492,"body":": v { F: k F: n }\n    1.e n 1.e f+ k 2.e f* f** k f* f\/ ;\n: d2 { k n maxn F: total }\n    total k n\n    begin \n        dup maxn \n        <= while \n            2dup swap s>f s>f v \n            f+ \n            1+ \n        repeat \n    drop ;\n: d { k n maxn F: total maxk }\n    total n k\n    begin\n        dup maxk <= \n        while\n            swap maxn d2 \n            1+ \n            1 swap\n        repeat \n    2drop ;\n\n: double { maxk maxn }\n    1 1 maxn 0.0e maxk d ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56cd44e1aa4ac7879200010b":[{"id":82579,"user_id":373,"body":": char-up? dup toupper = ; \n: real-uppercase? -1 >r 0 do dup i + c@ char-up? j and 2r> rdrop rot >r 2>r loop drop r> ; \n: uppercase? dup 0= if 2drop -1 else real-uppercase? then ;  ","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82580,"user_id":null,"body":": uppercase? ( c-addr u -- f\/t )\n  true -rot\n  over + swap do\n  i c@ dup toupper = and\n  loop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82581,"user_id":null,"body":": uppercase? ( c-addr u -- f\/t )\n  over + swap\n  do\n    i c@ 97 123 within if false unloop exit then\n  loop\n  true\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82582,"user_id":1339,"body":": uppercase? ( c-addr u -- f\/t ) recursive\n  dup 0= if 2drop true else \\ if length is 0, return true\n  over c@ 97 123 within if 2drop false else \\ if the current char is lower, return false\n  swap char+ swap 1- uppercase? \\ otherwise, check the rest of the string\n  then then\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82583,"user_id":null,"body":": uppercase? ( c-addr u -- f\/t ) \n  0 do dup c@ dup toupper > if drop unloop 0 exit then 1 + loop drop -1 ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82584,"user_id":null,"body":": in-interval ( a b n -- f\/t ) dup rot <= rot rot <= and ;\n\n: is-allowed ( c -- f\/t ) 97 122 rot in-interval invert ;\n\n: uppercase? ( c-addr n -- f\/t )\n  ?dup 0 = if drop true else 1 - 2dup + C@ is-allowed rot rot recurse and then ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82585,"user_id":null,"body":": lower? ( c -- f ) [char] a [char] z 1+ within ;\n\n: uppercase? ( c-addr u -- f )\n  over + swap\n  ?do\n    i c@ lower? if\n      unloop false exit\n    then\n  loop\n  true ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82586,"user_id":null,"body":": uppercase? ( c-addr u -- f\/t ) \n -1 -rot\n 0 do dup i chars + c@ \n     dup 97 >= swap 122 <=  and   if swap 0 * swap leave  \n        then\n    loop\ndrop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82587,"user_id":null,"body":"                   :                          uppercase?\n  1 negate rot          rot dup           \n                                     0 > if\n         begin 1 - 2dup + c@ dup '`' > swap '{' < and if\n                  rot dup - rot          rot\n                                                    then\n                    dup 0 = until        then\n        drop                         \n                                             drop      ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82588,"user_id":null,"body":"               :                    uppercase?\n  1 negate rot                                       rot\n         begin 1 - 2dup + c@ dup '`' > swap '{' < and if\n                  rot dup - rot          rot\n                                                    then\n                            dup 0 = until\n        drop                         \n                                             drop       ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56d904db9963e9cf5000037d":[{"id":82589,"user_id":527,"body":"' or Alias testit","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82590,"user_id":null,"body":": testit or ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82591,"user_id":373,"body":": testit ( a b -- x ) or ; \\ that is right. ","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82592,"user_id":null,"body":": testit ( a b -- x ) OR ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82593,"user_id":null,"body":": testit ( a b -- x ) or ; \\ Hmm is that right?","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82594,"user_id":168,"body":": testit ( a b -- x ) or ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82595,"user_id":645,"body":": testit OR ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56dec885c54a926dcd001095":[{"id":82596,"user_id":168,"body":": opposite ( n -- -n ) negate ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82597,"user_id":881,"body":": opposite ( n -- n' ) -1 * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82598,"user_id":null,"body":": opposite ( n -- -n ) -1 * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82599,"user_id":527,"body":"' negate Alias opposite","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82600,"user_id":null,"body":": opposite ( n -- -n ) 0 SWAP - ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82601,"user_id":null,"body":": opposite ( n -- -n ) dup dup - swap - ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82602,"user_id":527,"body":": opposite negate ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82603,"user_id":null,"body":": opposite ( n -- -n ) 0 swap - ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82604,"user_id":null,"body":": opposite ( n -- -n )  NEGATE ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82605,"user_id":464,"body":": opposite 0 swap - ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56fe17fcc25bf3e19a000292":[{"id":82606,"user_id":168,"body":": ueff ( n p -- ? ) swap 1+ * ;\n: veff ( n p -- ? ) swap 2 * 1+ * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82607,"user_id":492,"body":": ueff { n p } n 1 + p * ;\n: veff { n p } 2 n * 1 + p * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82608,"user_id":53,"body":": ueff { n p -- ? } n 1 + p * ;\n: veff { n p -- ? } 2 n * 1 + p * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82609,"user_id":527,"body":": ueff swap 1+ * ;\n: veff swap 2* 1+ * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"58184387d14fc32f2b0012b2":[{"id":82610,"user_id":53,"body":": f { F: x -- F: result }\n   1.0e x f+ fsqrt 1.0e f+ { F: a }\n   x a f\/ ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82611,"user_id":null,"body":": f ( x -- float result )\n  \\ Approximation of sqrt(1+x)-1 for x near 0:\n  \\ taylor serie up to x^4\n  fdup\n  -0.0390625e f*\n  +0.0625e f+ fover f*\n  -0.125e f+ fover f*\n  +0.5e f+ f* ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82612,"user_id":373,"body":": f1+ 1.0e0 f+ ; \n\n: f ( x -- float result )\n  ( f[x] = x \/ [sqrt[1+x]+1] )\n  fdup f1+ fsqrt f1+ f\/ ; ","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82613,"user_id":null,"body":": f ( x -- float result )\n  f2\/ fdup fdup f* f2\/ fover fover f* fswap f- f+  \\ third degree taylor approx: x\/2 - x^2\/8 + x^3\/16\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82614,"user_id":527,"body":": f ( r -- r ) fdup 1e f+ fsqrt 1e f+ f\/ ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82615,"user_id":168,"body":": f ( x -- float result ) fdup fdup 0.0625e f* -0.125e f+ f* 0.5e f+ f* ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82616,"user_id":168,"body":": f ( x -- float result ) fdup 1e f+ fsqrt 1e f+ f\/ ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82617,"user_id":492,"body":": f ( x -- float result )\n    fdup 1.e f+ fsqrt 1.e f+ f\/ ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82618,"user_id":null,"body":": f ( x -- float result )\n  f2\/ fdup fdup f* f2\/ f-  \\ second degree taylor approx: x\/2 - x^2\/8\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82619,"user_id":null,"body":": f ( x -- float result )\n  1e f+ fsqrt 1e f-\n;\n    ","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5886e082a836a691340000c3":[{"id":82620,"user_id":53,"body":": rectangle-rotation { a b -- u }\n  a s>f 2e fsqrt f\/ f>s { x }\n  b s>f 2e fsqrt f\/ f>s { y }\n  x 1 + y 1 + * x y * + { r }\n  r r 2 mod + 1 -\n  ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82621,"user_id":168,"body":": div-sqrt2 ( u - u ) s>f 2.0e fsqrt f\/ f>s ;\n\n: rectangle-rotation ( u u -- u ) \n  div-sqrt2 swap div-sqrt2 2dup * 2* -rot 2dup + -rot xor 1 and - + 1+ ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82622,"user_id":645,"body":"variable h\nvariable v\n\n: rectangle-rotation { a b } a s>d d>f 2e fsqrt f\/ f>d d>s dup h ! b s>d d>f 2e fsqrt f\/ f>d d>s dup v ! * h @ 1 + v @ 1 + * + h @ 2 mod v @ 2 mod xor - ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"58941fec8afa3618c9000184":[{"id":82623,"user_id":527,"body":": growing-plant ( up-speed down-speed desired-height -- x )\n  over - -rot - dup 1- under+ \/ 1 max ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82624,"user_id":null,"body":": growing-plant { us ds dh -- x } \n  0 0 begin ( h i )\n    1 +\n    swap us + swap\n    over dh < while\n    swap ds - swap\n  repeat\n  nip\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82625,"user_id":null,"body":": growing-plant ( up-speed down-speed desired-height -- x )\n   rot rot over swap - swap 1 swap\n   begin\n      dup 4 pick < while\n      2 pick +\n      swap 1+ swap repeat\n   drop swap drop swap drop ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82626,"user_id":53,"body":": growing-plant { u d m -- x }\n  m s>f d s>f f- u s>f d s>f f- f\/ 0.99999e f+ f>s 1 max ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82627,"user_id":null,"body":": addup 4 pick + ;\n\n: subdown 3 pick - ;\n\n: grow addup 2dup <= if\n  2drop rot rot 2drop\n  else\n    subdown rot 1 + rot rot recurse\n  endif  ;\n\n: growing-plant ( up-speed down-speed desired-height -- x ) 0 1 rot rot grow ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82628,"user_id":null,"body":": growing-plant ( up-speed down-speed desired-height -- x )\n1- 0 swap\nBEGIN\n  \\ day\n  swap 1+ swap 2over drop - dup 0<\n  \\ night\n  swap 2over drop +\n  swap\nUNTIL\n2swap 2drop drop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82629,"user_id":null,"body":": growing-plant { up-speed down-speed desired-height -- x }\n  up-speed DUP down-speed - SWAP 1 >R BEGIN DUP desired-height < WHILE OVER + R> 1+ >R REPEAT 2DROP R> ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82630,"user_id":373,"body":": growing-plant ( up-speed down-speed desired-height -- x )\n  2 pick over > if\n    drop 2drop 1 else\n    -rot over - negate -rot - 1- swap \/ 2 + then ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82631,"user_id":null,"body":": growing-plant { u d h -- x }\n  h u - 0 max       ( target hight, assume at least one day of growth )\n  dup 0 > if        ( more growth needed? )\n          u d -     ( night + day growth )\n          2dup mod 0 \n          > if \/ 1 +  ( add on part of day )\n            else \/    ( number of days ) \n          endif \n  endif\n  1 +               ( count the first day )\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82632,"user_id":null,"body":"variable sum\nvariable cnt\n\n: inc ( -- ) 1 cnt +! ;\n: init ( -- ) 0 cnt ! 0 sum ! ;\n: day ( up-speed down-speed -- up-speed down-speed x ) swap dup sum +! swap ;\n: night ( up-speed down-speed -- up-speed down-speed x ) dup 0 swap - sum +! ;\n: growing-plant ( up-speed down-speed desired-height -- x ) \n  init >r \n  begin day inc sum @ r@ < while night repeat \n  r> drop 2drop cnt @ ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"58ce8725c835848ad6000007":[{"id":82633,"user_id":645,"body":": potatoes { p0 w0 p1 -- w } w0 100 p0 - * 100 p1 - \/ ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82634,"user_id":104,"body":": potatoes { p0 w0 p1 -- w1 } 100 p0 - w0 * 100 p1 - \/ ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82635,"user_id":null,"body":": potatoes ( p0 w0 p1 -- w )\n  100 - rot 100 - rot * swap \/\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82636,"user_id":null,"body":": potatoes ( p0 w0 p1 -- w )\n    \\ dry mass T is constant\n    \\ before T = w0 (1 - p0\/100)\n    \\ after  T = w1 (1 - p1\/100)\n    \\ =>     w1 (1 - p1\/100) = w0 (1 - p0\/100)\n    \\ =>     w1 = w0 * (100 - p0)\/(100 - p1)\n    \\ =>     w1 = w0 * (p0 - 100)\/(p1 - 100)\n  rot 100 - rot * swap 100 - \/  \n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82637,"user_id":1339,"body":": potatoes { p0 w0 p1 -- w }\n  100 p0 - w0 * 100 p1 - \/\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82638,"user_id":null,"body":": potatoes { p0 w0 p1 -- w }\n  w0 p1 100 - * \\ w0 * (p1-100)\n  p1 p0 - w0 * \\ ((p1-p0) * w0)\n  -\n  p1 100 -\n  \/\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82639,"user_id":null,"body":": potatoes ( p0 w0 p1 -- w1 )\n   100 swap - rot 100 swap - rot * swap \/ ;\n   \n   \\ algebra for solution:\n   \\\n   \\ w0 * (1 - p0 \/ 100) = initial weight without water\n   \\                     = final weight without water\n   \\                     = w1 * (1 - p1 \/ 100)\n   \\\n   \\ so               w1 = w0 * (100 - p0) \/ (100 - p1)","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82640,"user_id":null,"body":": potatoes ( p0 w0 p1 -- w )\n  100 - rot 100 - swap *\/ ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82641,"user_id":null,"body":": fpotatoes ( p0 w0 p1 -- w )\n  1e s>f 100e f\/ f- ( p0 w0 F: 1-p1 )\n  s>f 1e s>f 100e f\/ f-  ( F: 1-p1 w0 1-p0 )\n  frot f\/ f* ( F: w0*[[1-p0]\/[1-p1] )\n  0.001e f+ \\ adjust result: round up a tiny little bit\n  f>s ;\n\n: potatoes ( p0 w0 p1 -- w )\n   100 swap - ( p0 w0 100-p1 )\n   rot 100 swap - ( w0 100-p1 100-p0 )\n   swap *\/ ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82642,"user_id":null,"body":": potatoes rot rot swap 100 swap - * swap 100 swap - \/ ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5933a1f8552bc2750a0000ed":[{"id":82643,"user_id":168,"body":": nth-even ( n -- x ) 1- 2* ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82644,"user_id":null,"body":": nth-even ( n -- x ) 1- dup + ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82645,"user_id":null,"body":": nth-even ( n -- x ) 2 * 2 - ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82646,"user_id":null,"body":": nth-even ( n -- x )\n  dup 1 - 2 * swap drop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82647,"user_id":null,"body":": nth-even 2 * 2 - ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82648,"user_id":null,"body":": nth-even ( n -- n ) 2 * 2 - ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82649,"user_id":null,"body":": nth-even { e -- e2 } e 2 * 2 - ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82650,"user_id":645,"body":": nth-even 1 - 2 * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"596d34df24a04ee1e3000a25":[{"id":82651,"user_id":168,"body":": count1 { n -- #ones }\n  0 64 0 do\n    1 i lshift dup n and\n    if\n      dup 1 rshift i * under+ 1- n and + 1+\n    else\n      drop\n    then\n  loop ;\n\n: count_ones ( left right -- #ones ) count1 swap 1- count1 - ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82652,"user_id":53,"body":": div2 ( n -- m ) 2 \/ ;\n: mod2 ( n -- m ) 2 mod ;\n: even? ( n -- b ) mod2 0= ;\n: odd? ( n -- b ) mod2 0<> ;\n: par ( n -- m ) odd? if 1 else 0 then ;\n: rpar ( n -- m ) even? if 1 else 0 then ;\n\n: f { n -- m } n 0= if 0 else n div2 recurse n par + then ;\n\n: g { n -- m }\n  n 0= if 0\n  else\n    n div2 n rpar - recurse 2 * n div2 + n par + { a }\n    n odd? if a\n    else\n      a n div2 f +\n    then\n  then\n  ;\n\n: count_ones { left right -- #ones }\n  right g left 1 - g -\n  ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82653,"user_id":null,"body":": ones ( n -- #ones )\n    0 swap\n    BEGIN              ( c n )\n        dup 0>\n    WHILE              ( c n )\n        2 \/mod         ( c r n' )\n        rot rot + swap ( c' n' )\n    REPEAT\n        drop\n;\n\n: even? ( n -- f )\n    2 mod 0=\n;\n\n: count_ones ( left right -- #ones ) \n    2dup + 0=\n    IF\n        drop                                ( 0 )\n    ELSE\n        2dup 2\/ swap 2\/ swap                ( l r l' r')\n        recurse 2* rot rot                  ( c' l r )\n        dup even?\n        IF                                  \\ r even\n            over even?\n            IF                              \\ l even, r even\n                dup ones negate rot rot     ( c' -er l r )\n                swap - 2\/ + +\n            ELSE                            \\ l odd, r even\n                dup ones negate rot rot     ( c' -er l r )\n                over ones negate 1+ rot rot ( c' -er -el l r )\n                swap - 2\/ 1+ + + +\n            ENDIF\n        ELSE\n            over even?\n            IF                              \\ l even, r odd\n                swap - 1+ 2\/ +\n            ELSE                            \\ l odd, r odd\n                over ones negate 1+ rot rot ( c' -el l r )\n                swap - 2\/ 1+ + + \n            ENDIF\n        ENDIF\n    ENDIF        \n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82654,"user_id":492,"body":": aux { n -- result } \n    0 1 \n    begin { result current } \n        current n <= while \n            n current \/ 2\/ current *\n            n current 2* mod current - \n            0 max                      \n            + result +                \n            current 2* \n    repeat result ;\n: count_ones ( left right -- #ones ) 1+ aux swap aux - ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82655,"user_id":1339,"body":": bitCount0 { n b -- cnt }\n  n b 2* \/mod b * swap ( n\/2b*b n%2b )\n  dup b >= if + b - 1+ else drop endif\n;\n: count_ones { l r -- cnt }\n  0 ( cnt ) 60 0 ?do\n    r 1 i lshift bitCount0 +\n    l 1- 1 i lshift bitCount0 -\n  loop\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82656,"user_id":106,"body":": log2 0 swap begin dup 1 > while 2\/ swap 1+ swap repeat drop ;\n: exp2 1 swap begin dup 0> while 1- swap 2* swap repeat drop ;\n: cz 0 swap begin dup 0> while dup log2 swap over exp2 - -rot dup 1- exp2 * 1+ + over + swap repeat drop ;\n: count_ones cz swap 1- cz - ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82657,"user_id":527,"body":": count_onesFromZeroTo ( right -- #ones )\n  0 2>r 1\n  begin\n    2r@\n    1 swap lshift tuck\n    2dup and if\n      1- and\n      r@ dup 1- lshift +\n      1+\n      under+\n    else\n      2drop\n    then\n    2*\n  while\n    r> 1+ >r\n  repeat\n  2rdrop\n  ;\n  \n: count_ones ( left right -- #ones )\n  count_onesFromZeroTo swap 1- count_onesFromZeroTo - ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82658,"user_id":104,"body":"\\ Forth translation 2019 nomennescio\n: ones ( n -- #ones ) 1+ { n } 0 1 begin { r p } p n <= while n p \/ 2\/ p * n p 2* mod p - dup 0< if drop 0 then + r + p 2* repeat r ;\n: count_ones ( left right -- #ones ) ones swap 1- ones - ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"59ccf051dcc4050f7800008f":[{"id":82659,"user_id":168,"body":": sum { n -- sum of proper divisors if n > 1 }\n  1 n s>f fsqrt f>s 1+ 2 +do\n    n i mod 0= if i + n i \/ dup i = if drop else + then then\n  loop ;\n  \n: buddy ( start limit -- pair of buddy, smaller first or 0 if there is no pair )\n  1+ swap +do\n    i sum 1- { t } t i > if \n      t sum i 1+ = if i t unloop exit then\n    then\n  loop 0 ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82660,"user_id":492,"body":": f { n -- sum of proper divisors - 1}\n    n 1 <= \n    if \n        0\n    else\n        0 n s>f fsqrt floor f>s 1+ 2\n        do \n            n i mod 0= if \n                i + n i \/\n                dup i = if drop else + then\n            then \n        loop \n    then ;\n: buddy { start limit }\n    0 limit 1+ start \n    do\n        i f dup f dup i = \n        >R 2dup > R> and\n        if rot drop -1 leave else 2drop then\n    loop\n    -1 = if swap else 0 then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82661,"user_id":104,"body":"\\ 2020 nomennescio\n: isqrt ( n -- integer-sqrt ) 0 d>f fsqrt f>d drop ; : sq dup * ;\n: divisorsum { n -- sum-of-divisors } n isqrt dup sq n = if dup 1+ else 1+ 1 then swap 2 do n i \/mod swap 0= if i + + else drop then loop ;\n: buddy>? ( n -- 0\/greaterbuddy ) dup divisorsum 1- 2dup < if swap over divisorsum 1- = and else 2drop 0 then ;\n: buddy ( start limit -- 0\/two-buddies ) 1 -rot 1+ swap +do\n    i buddy>? dup if nip i swap 0 leave else drop then \n  loop if 0 then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82662,"user_id":null,"body":": sum-of-divisors { n -- s }\n    n 1 <= IF\n        0\n    ELSE\n        1 2\n        BEGIN                          ( s d )\n            dup dup * dup n <=\n        WHILE                          ( s d d2 )\n            n = IF\n                + EXIT\n            ENDIF\n            dup n swap \/mod swap 0= IF ( s d d' )\n                over + rot + swap\n            ELSE\n                drop\n            ENDIF\n            1+\n        REPEAT\n        2drop\n    ENDIF\n;\n\n: buddy { start limit -- b1 b2 of 0 }\n    start\n    BEGIN                           ( b1 )\n        dup limit <=\n    WHILE\n        dup sum-of-divisors 1-      ( b1 b2 )\n        2dup < IF\n            tuck sum-of-divisors 1- ( b2 b1 b1' )\n            over = IF\n                swap EXIT\n            ENDIF\n            nip\n        ELSE\n            drop\n        ENDIF\n        1+\n    REPEAT\n    drop 0\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82663,"user_id":168,"body":": sum { n -- sum of proper divisors }\n  1 n 2 +do\n    i i * n >= if i i * n = if i + then leave then\n    n i \/mod swap 0= if + i + else drop then\n  loop ;\n  \n: buddy ( start limit -- pair of buddy, smaller first or 0 if there is no pair )\n  swap +do\n    i sum 1- { t } t i > if \n      t sum i 1+ = if i t unloop exit then\n    then\n  loop 0 ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82664,"user_id":1339,"body":"create pairs\n  48 , 75 , 140 , 195 , 1050 , 1925 , 1575 , 1648 , 2024 , 2295 ,\n  5775 , 6128 , 8892 , 16587 , 9504 , 20735 , 62744 , 75495 , 186615 , 206504 ,\n  196664 , 219975 , 199760 , 309135 , 266000 , 507759 , 312620 , 549219 , 526575 , 544784 ,\n  573560 , 817479 , 587460 , 1057595 , 1000824 , 1902215 , 1081184 , 1331967 , 1139144 , 1159095 ,\n  1173704 , 1341495 , 1208504 , 1348935 , 1233056 , 1524831 , 1236536 , 1459143 , 1279950 , 2576945 ,\n  1921185 , 2226014 , 2036420 , 2681019 , 2102750 , 2142945 , 2140215 , 2421704 , 2171240 , 3220119 ,\n  2198504 , 3123735 , 2312024 , 3010215 ,\n\n: buddy { start limit -- result }\n  0 ( idx ) begin\n    dup 32 < while ( idx < 32 )\n    dup 16 * pairs + @ start < while ( pairs[i] < start )\n    1+ repeat\n  16 * pairs + 2@ dup limit > if 2drop 0 else swap endif\n  else drop 0 then\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82665,"user_id":106,"body":": fill_data\n3010215 2312024\n2142945 2102750\n2681019 2036420\n2226014 1921185\n2576945 1279950\n1524831 1233056\n1348935 1208504\n1159095 1139144\n1331967 1081184\n1057595 587460\n817479 573560\n549219 312620\n507759 266000\n219975 196664\n206504 186615\n75495 62744\n20735 9504\n16587 8892\n6128 5775\n2295 2024\n1648 1575\n1925 1050\n75 48 ;\n: buddy { l r } \n 0 0 fill_data begin dup 0> while dup dup l >= swap r <= and if\n  { a b } begin 0> while drop repeat drop .s b a 0 0 0\n else then 2drop repeat drop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5a03b3f6a1c9040084001765":[{"id":82666,"user_id":null,"body":": angle ( u -- u' )\n  \\ return u' = (u - 2) * 180\n  2 - 180 * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82667,"user_id":527,"body":": angle ( u -- u ) 2 - 180 * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82668,"user_id":645,"body":": angle 2 - 180 * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5a057ec846d843c81a0000ad":[{"id":82669,"user_id":104,"body":"\\ 2020 nomennescio\n: 10coprime ( n -- t\/f ) dup 2 mod 0<> swap 5 mod 0<> and ;\n: length { n -- cycle-length }\n  10 n mod 0 1 begin { i p } i 1+ over p * n mod dup 1 = until drop nip ;\n: cycle ( n -- m ) dup 10coprime if length else drop -1 then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82670,"user_id":527,"body":": cycle ( n -- m )\n  >r\n  r@ 2 mod 0= r@ 5 mod 0= or if rdrop -1 exit then\n  0 1 begin 1 under+ 10 * r@ mod dup 1 = until\n  drop rdrop\n  ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82671,"user_id":106,"body":": cycle dup 2 mod over 5 mod * 0= if drop -1 else 0 1 begin 10 * rot tuck mod swap rot 1+ rot dup 1 <> while repeat drop nip then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82672,"user_id":53,"body":": aux { n -- p }\n  10 n mod 1\n  begin { m c }\n    m 1 = false =\n    while\n      m 10 * n mod\n      c 1 +\n    repeat\n  c ;\n\n: cycle { n -- m }\n  n 2 mod 0= n 5 mod 0= OR if -1 else\n    n aux\n  then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82673,"user_id":373,"body":": coprime10? ( n -- bool )\n  dup 2 mod 0<> swap 5 mod 0<> and ; \n: *mod ( a p m -- r ) *\/mod drop ; \n: cycle ( n -- m )\n  dup coprime10? if \n    >r  \n    1 10 i mod begin\n      dup 1 <>\n    while\n      swap 1+ swap 10 i *mod\n    repeat\n    rdrop drop\n  else\n    drop \n    -1\n  then ; ","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82674,"user_id":null,"body":": cycle ( n -- m )\n    dup 2 mod 0=\n    over 5 mod 0= or\n    if \n      drop -1\n    else\n      1           \\ power of 10\n      0           \\ exponent\n      begin\n       1+         \\ increment exponent\n       swap 10 *  \\ multiply power of 10\n       2 pick mod \\ mod n\n       dup 1 =    \\ test if 10^m = 1 mod n\n       rot swap   \\ put things back in place for the next step\n      until\n      swap drop swap drop\n    then\n    ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82675,"user_id":null,"body":": multiple-of ( n m -- f )\nmod 0= ;\n\n: coprime-10 ( n -- f )\ndup 2 multiple-of IF drop false ELSE 5 multiple-of IF false ELSE true THEN THEN ;\n\n: cycle ( n -- m )\ndup coprime-10 IF\n    1 0\n    BEGIN                 \\ n x m\n        1+ rot rot        \\ m n x\n        10 * over mod rot \\ n x m\n        over 1 =\n    UNTIL\n    nip nip \nELSE\n    drop -1\nTHEN ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82676,"user_id":1339,"body":": cycle { n -- m }\n  n 2 mod 0= n 5 mod 0= or if -1 else\n    10 n mod 1 begin ( rem cnt )\n      over 1 <> while\n      1+ swap 10 * n mod swap\n    repeat nip\n  endif\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82677,"user_id":168,"body":": cycle ( n -- m )\n    dup 2 mod 0= over 5 mod 0= or \n    if drop -1 \n    else \n      1 0 ( n p i )\n      begin\n        1+ -rot 10 * over mod rot over 1 =\n      until\n      nip nip\n    then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82678,"user_id":492,"body":": cycliaux { n v i }\n    i v\n    begin\n        10 * n mod swap 1+ swap \n        dup 1 =\n    until drop ;\n: cycle { n }\n    n 2 mod 0= n 5 mod 0= or -1 =\n    if -1 else n 1 0 cycliaux then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5a3fe3dde1ce0e8ed6000097":[{"id":82679,"user_id":645,"body":": century_from_year ( year -- century_from_year ) 99 + 100 \/ ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82680,"user_id":106,"body":": century_from_year -100 \/ negate ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82681,"user_id":null,"body":": century_from_year ( year -- century_from_year )\n  100 \/mod swap 0<> if 1+ then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82682,"user_id":null,"body":": century_from_year ( year -- century_from_year )\n  100 \/mod swap 0> if 1+ then\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82683,"user_id":null,"body":": century_from_year ( year -- century_from_year )\n  dup 100 mod 0 = if 100 \/ else 100 \/ 1 + then\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82684,"user_id":null,"body":": century_from_year ( year -- century_from_year )\n  \\ your code here\n  \\ return century_from_year = (year + 99) \/ 100\n  99 + 100 \/\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82685,"user_id":null,"body":": century_from_year ( year -- century_from_year )\n dup 100 \/ swap 100 mod 0 = 0 - + 1 + .s\n\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82686,"user_id":null,"body":": century_from_year { year -- century_from_year } year 100 \/ 1 + year 100 MOD 0 = IF 1 - THEN ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82687,"user_id":null,"body":": century_from_year ( year -- century_from_year )\n  dup 100 mod if\n    100 \/mod swap drop 1+\n  else\n    100 \/\n  then\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82688,"user_id":null,"body":": century_from_year ( year -- century_from_year )\n  100 \/mod swap 0 <> if 1+ endif \n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5a9c35e9ba1bb5c54a0001ac":[{"id":82689,"user_id":527,"body":": add begin 2dup xor -rot and 2* dup 0= until drop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82690,"user_id":168,"body":": add recursive { x y } y if x y xor x y and 2* add else x then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82691,"user_id":1339,"body":": add ( x y -- sum ) tuck -1 um\/mod rot <> if 1- then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82692,"user_id":168,"body":": add ( x y -- sum ) dup m+ drop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82693,"user_id":168,"body":": add ( x y -- sum ) dup under+ drop ;\n  ","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82694,"user_id":104,"body":"\\ Forth translation 2019 nomennescio\n: add ( x y -- sum ) dup if 2dup xor -rot and 2* recurse else drop then ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82695,"user_id":null,"body":": add ( x y -- sum ) begin 2dup xor\n-rot and 1 lshift\ndup 0=  \nuntil drop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82696,"user_id":null,"body":": add recursive { x y -- sum } y if x y xor x y and 2* add else x then ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82697,"user_id":null,"body":": add { x y -- sum }\n  y 0= if x else x y xor x y and 1 lshift recurse then ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82698,"user_id":null,"body":": add ( x y -- sum )\n    \\ Addition of bit a and bit b results in two bits CD\n    \\    a + b = CD\n    \\ with D = a XOR b, C = a AND b\n    begin\n        2dup xor\n        -rot and 2*\n        dup 0=\n    until\n    drop\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5aba780a6a176b029800041c":[{"id":82699,"user_id":null,"body":": max-multiple ( divisor bound -- result ) tuck swap mod - ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82700,"user_id":53,"body":": max-multiple { d b -- x } b b d mod - ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82701,"user_id":527,"body":": max-multiple ( d b -- x ) dup rot mod - ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82702,"user_id":null,"body":": max-multiple ( d b -- x )\n  \\ return x = b - (b % d)\n  dup rot mod - ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82703,"user_id":null,"body":": max-multiple { d b -- x } B D \/ D * ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82704,"user_id":null,"body":": max-multiple ( d b -- x )\n  swap tuck \/ *\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82705,"user_id":null,"body":": max-multiple { d b } b b d mod - ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82706,"user_id":null,"body":": max-multiple ( d b -- x ) 2dup swap mod 0 = if swap drop else 1 - RECURSE then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82707,"user_id":null,"body":": max-multiple { d b -- x } d begin dup b <= while d + repeat d - ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82708,"user_id":null,"body":": divisible? ( x y -- x y t\/f ) 2dup swap mod 0 = ;\n: max-multiple ( d b -- x ) 0 swap \n  do i divisible? if nip leave then drop -1 +loop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5ae62fcf252e66d44d00008e":[{"id":82709,"user_id":null,"body":": 3dup >r 2dup r@ -rot r> ;\n: expression-matter ( a b c -- x ) \n  3dup \n  + + >r\n  3dup\n  + * >r\n  3dup rot rot\n  + * >r\n  3dup\n  * + >r\n  3dup rot rot\n  * + >r\n  * * \n  r> r> r> r> r>\n  max max max max max\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82710,"user_id":null,"body":": expression-matter { a b c -- x } \n  a b + c +\n  a b * c +\n  a b + c *\n  a b * c *\n  \n  b c + a *\n  \nMAX MAX MAX MAX ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82711,"user_id":null,"body":": 3dup ( a b c -- a b c a b c ) dup 2over rot ;\n\n: expression-matter ( a b c -- x )\n  3dup * * >r\n  3dup + + >r\n  3dup + * >r\n  -rot + *\n  r> max r> max r> max ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82712,"user_id":null,"body":": dup3x ( a b c x -- a b c x a b c ) 3 pick 3 pick 3 pick ;\n: expression-matter ( a b c -- x )\n   dup 3 pick 3 pick + * \\ (a + b) * c ==> maximum\n   dup3x + +         max \\ (a + b) + c = a + (b + c)\n   dup3x * +         max \\ a + (b * c)\n   dup3x -rot * +    max \\ (a * b) + c\n   dup3x + *         max \\ a * (b + c)\n   -rot * rot *      max \\ (a * b) * c = a * (b * c)\n;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82713,"user_id":null,"body":": dup3x ( a b c x -- a b c x a b c ) 3 pick 3 pick 3 pick ;\n: expression-matter ( a b c -- x )\n    0                    \\ maximum\n    dup3x + +      max   \\ (a + b) + c = a + (b + c)\n    dup3x -rot + * max   \\ (a + b) * c\n    dup3x * +      max   \\ a + (b * c)\n    dup3x -rot + * max   \\ (a * b) + c\n    dup3x + *      max   \\ a * (b + c)\n    dup3x * *      max   \\ (a * b) * c = a * (b * c)\n    >r drop drop drop r> ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82714,"user_id":null,"body":": expression-matter { a b c -- x }\n    a b c + +\n    a b c * +\n    a b c + *\n    a b + c *\n    a b * c +\n    a b c * *\n    max max max max max\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82715,"user_id":null,"body":": expression-matter ( a b c -- x ) { x y z -- rez }\n  x y z + +\n  x y z * * max\n  x y z * + max\n  x y z + * max\n  x y * z + max\n  x y + z * max ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82716,"user_id":null,"body":": expression-matter { a b c -- x }\n  a b + c + \n  a b * c + MAX\n  a b + c * MAX\n  a b * c * MAX\n  a b c + * MAX\n  a b c * + MAX\n  ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82717,"user_id":null,"body":": expression-matter { A B C -- x } A B * C + DUP \n                                   A B + C * DUP \n                                   A B * C * DUP \n                                   A B + C + DUP\n                                   B C + A * DUP\n                                   B C * A + DUP                            \n                                   5 0 DO \n                                   ROT > IF SWAP DROP DUP ELSE DROP DUP THEN \n                                   LOOP DROP ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82718,"user_id":53,"body":": expression-matter { a b c -- x }\n  a b c * *\n  a b c + + max\n  a b c + * max\n  c a b + * max ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5b06c990908b7eea73000069":[{"id":82719,"user_id":168,"body":": hypot ( x y -- sqrt[x^2 + y^2] ) fdup f* fswap fdup f* f+ fsqrt ;\n\n: f ( x y eps -- result ) \n  fln frot frot hypot fdup 1e f>=\n  if -1 else fln f\/ f>s then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82720,"user_id":53,"body":"\n: hypot { F: a F: b -- F: result } \n  a a f* b b f* f+ fsqrt\n  ;\n  \n: g { F: x F: y F: eps -- F: result } \n  eps flog x y hypot flog f\/\n  ;\n\n: f { F: x F: y F: eps -- result }\n  x y eps g { F: a }\n  0e a f>= \n  if\n    -1\n  else\n    a f>s\n  then\n  ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82721,"user_id":104,"body":"\\ 2020 nomennescio\n: f { F: x F: y F: eps -- result } x x f* y y f* f+ fsqrt fdup 1e f< if fln eps fln fswap f\/ f>s else fdrop -1 then ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82722,"user_id":373,"body":": coAbs ( x y -- |x + yi| ) fdup f* fswap fdup f* f+ fsqrt ;\n: f2over 2 fpick 2 fpick ; \n: ceil ( f -- i ) fnegate floor f>d d>s negate ; \n\n: f ( x y eps -- result )\n    f2over coAbs\n    1.0e0 f> if\n      fdrop fdrop fdrop \n      -1\n    else\n      f2over coAbs fdup\n      1.0e0 f= if \n        fdrop ( fstack : x y eps )\n        fover f0= ( fstack : x eps ) if \n            ( z = 1 ) \n            0\n          else\n            -1\n          then\n          fdrop fdrop\n      else\n        ( n = ceil (ln eps \/ ln |z| - 1 )\n        ( fstack : x y eps |z| )\n        fln fswap fln fswap f\/ 1.0e0 f- ceil \n        fdrop fdrop\n      then\n    then\n    ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82723,"user_id":1339,"body":": f { F: x F: y F: eps -- result }\n  x x f* y y f* f+ fsqrt { F: r }\n  r 1e f>= if -1 else\n    eps fln r fln f\/ fround f>s\n  endif\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82724,"user_id":492,"body":": modul- { F: x F: y }\n    x fdup f* y fdup f* f+ fsqrt ;\n: f { F: x F: y F: eps }\n    x y modul- fdup 1.e f>=\n    if\n        -1\n        fdrop\n    else\n        eps fln fswap fln f\/ floor f>s \n    then ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5b1cd19fcd206af728000056":[{"id":82725,"user_id":53,"body":": solve { F: m -- F: x }\n  m 2e f* 1e f+ m 4e f* 1e f+ fsqrt f- m 2e f* f\/\n  ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82726,"user_id":null,"body":": solve ( m -- x )\n  2e f*\n  fdup 2e f* 1e f+ fsqrt\n  fover 1e f+ f+\n  f\/\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82727,"user_id":106,"body":": solve { F: m } m 2e f* 1e f+ m 4e f* 1e f+ fsqrt f- m 2e f* f\/ ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82728,"user_id":527,"body":": solve ( m -- x )\n  fdup 0.25e f+ fsqrt 0.5e f- fswap f\/ 1e fswap f- ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82729,"user_id":168,"body":": solve ( m -- x ) fdup 0.25e f+ fsqrt 0.5e f+ fover f+ f\/ ; ","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82730,"user_id":492,"body":": solve { F: m -- x }\n    m 2.e f* 1.e f+\n    m 4.e f* 1.e f+ fsqrt\n    f-\n    m 2.e f* f\/ ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82731,"user_id":null,"body":": step ( n, f: m x -- n', f: m' )\n    dup s>d 2dup d>f f** d>f f* f+ 1+ ;\n\n: f2dup ( r1 r2 -- r1 r2 r1 r2 )\n    fover fover\n  ;\n\n: average ( r1 r2 -- r3 )\n    f+ 2e f\/\n  ;\n    \n: unsolve ( x -- m )\n    1 0e fswap\n    BEGIN                       \\ m x\n        f2dup step              \\ m x m'\n        frot                    \\ x m' m\n        fover 1e-10 f~abs fswap \\ m' x\n    UNTIL\n    fdrop drop\n  ;\n\n: upper-bound ( m -- x )\n    0e\n    BEGIN         \\ m x\n        ftuck     \\ x m x\n        unsolve   \\ x m m'\n        fover     \\ x m m' m\n        f<= fswap \\ m x\n    WHILE\n        1e average\n    REPEAT\n        fnip\n  ;\n\nFVARIABLE m\n\n: solve ( m -- x )\n    fdup m f!\n    upper-bound 0e fswap         \\ 0 u\n    BEGIN                        \\ x1 x2\n        f2dup 1e-10 f~abs invert\n    WHILE\n        f2dup average unsolve    \\ x1 x2 m'\n        m f@ f<\n        IF\n            fdup frot            \\ x2 x2 x1\n            average fswap        \\ a x2\n        ELSE\n            fover                \\ x1 x2 x1\n            average              \\ x1 a\n        ENDIF\n    REPEAT\n        average\n  ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82732,"user_id":null,"body":": solve ( m -- x )\n  2.e f* fdup fdup\n  2.e f* 1.e f+ fsqrt\n  f- 1.e f+\n  fswap f\/\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82733,"user_id":1339,"body":": solve { F: m -- x }\n  1e m 4e f* 1e f+ fsqrt f- f2\/ m f\/ 1e f+ ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5d444d05ba9956002785c14a":[{"id":82734,"user_id":168,"body":": trino ( c b a x -- a*x*x+b*x+c ) tuck * rot + * + ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82735,"user_id":null,"body":": trino ( c b a x -- a*x*x+b*x+c ) \n \n   dup rot   \\ c b x x a\n   swap dup  \\ c b x a x x\n   * *       \\ c b x axx\n   rot rot   \\ c axx b x\n   * + +\n \n      \n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82736,"user_id":null,"body":": trino ( c b a x -- a*x*x+b*x+c )  dup 2swap rot * + * + ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82737,"user_id":527,"body":": trino dup rot * rot + * + ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82738,"user_id":17,"body":": trino swap over * over * rot rot * + + ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82739,"user_id":564,"body":": trino { c b a x -- a*x*x+b*x+c }\n  a x x * *\n  b x *\n  c\n  + +\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82740,"user_id":null,"body":": trino { c b a x -- a*x*x+b*x+c }\n  x x a * * b x * c + + ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82741,"user_id":676,"body":": trino ( c b a x -- a*x*x+b*x+c ) dup rot * rot + * + ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82742,"user_id":492,"body":"\\ Forth 2019 g964\n: trino ( c b a x -- a*x*x+b*x+c ) tuck * over * rot rot * + + ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82743,"user_id":149,"body":": trino { c b a x } a x x * * b x * c + + ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5d838fa2f204c10021a88f1c":[{"id":82744,"user_id":1339,"body":"\\ create array of size size associated with the word \"name\" from the input stream\n: {} ( size \"name\" -- ) \n  dup 1+ 8 * allocate drop ( size array-addr )\n  tuck !\n  1 0 const-does> ( -- array )\n;\n\\ store value at index of array\n: {!} ( value index array -- ) \n  swap 1+ 8 * + !\n;\n\\ fetch value from index of array\n: {@} ( index array -- value ) \n  swap 1+ 8 * + @\n;\n\n\\ create a global array, *keep* the name \"arr\"\n5000 {} arr\n5000 {} sumarr\n\n: gcd ( a b -- g )\n  ( while b, change a,b to b,a%b; drop b )\n  begin dup while tuck mod repeat drop\n;\n\n: precal ( -- )\n  7 7 5000 1 ?do ( sumarr-el arr-el )\n    dup i arr {!} over i sumarr {!}\n    dup i 1+ gcd + dup under+\n  loop 2drop\n;\n\n: an ( n -- s )\n  precal\n  sumarr {@}\n;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82745,"user_id":492,"body":"\\ create array of size size associated with the word \"name\" from the input stream\n: {} ( size \"name\" -- ) create dup , cells allot ;\n\\ verify that index is not out of bounds\n: {?} ( index array -- index array ) over over @ U>=\n    abort\" Array index out of bounds\" ;\n\\ store value at index of array\n: {!} ( value index array -- ) {?} swap cells + cell+ ! ;\n\\ fetch value from index of array\n: {@} ( index array -- value ) {?} cell+ swap cells + @ ;\n\n\\ create a global array\n5000 {} arr\n\n: gcd ( a b -- n )\n    begin dup while tuck mod repeat drop ;\n: an { n -- s }\n    7 1 arr {!}\n    7 2\n    begin { s k }\n        k n <=\n        while\n            k 1- arr {@} dup    \n            k gcd +   \n            dup k arr {!} \n            s + k 1+ \n        repeat\n   s ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82746,"user_id":527,"body":": {} ( size \"name\" -- ) here swap cells allot constant ;\n: {!} ( value index array -- ) swap cells + ! ;\n: {@} ( index array -- value ) swap cells + @ ;\n\n5000 {} arr\n\n: gcd ( u u -- u ) begin ?dup while tuck mod repeat ;\n: an ( n -- s ) 0 7 rot 1+ 1 do dup arr i cells + ! dup under+ dup i 1+ gcd + loop drop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82747,"user_id":104,"body":"\\ 2020 nomennescio\n\n\\ create array of size size associated with the word \"name\" from the input stream\n: {} ( size \"name\" -- ) create cells allot ;\n\\ store value at index of array\n: {!} ( value index array -- ) swap cells + ! ;\n\\ fetch value from index of array\n: {@} ( index array -- value ) swap cells + @ ;\n\n: gcd ( a b -- gcd ) dup if swap over mod recurse else drop then ;\n: seq ( v n -- v' ) over gcd + ;\n: fill { array n -- } 7 dup 1 array {!} 0 0 array {!}\n  n 1+ 2 ?do i seq dup i array {!} loop drop ;\n: sum { array n -- sum } 0 n 0 ?do i array {@} + loop ;\n  \n\\ create a global array, *keep* the name \"arr\"\n5000 {} arr\n\n: an { n -- s } arr n 1+ 2dup fill sum ;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82748,"user_id":null,"body":"\\ create array of size size associated with the word \"name\" from the input stream\n: {} ( size \"name\" -- )\n    create dup , cells allot\n;\n\\ store value at index of array\n: {!} ( value index array -- )\n    swap cells + cell+ !\n;\n\\ fetch value from index of array\n: {@} ( index array -- value )\n    cell+ swap cells + @\n;\n\n\\ create a global array, *keep* the name \"arr\"\n5000 {} arr\n\n: gcd ( x y -- gcd )\n    begin ?dup while tuck mod repeat\n;\n\n: an ( n -- s )\n    7 1 arr {!}\n    1 + 7 swap 7 swap\n    2 ?DO\n        i swap 2dup gcd + tuck swap\n        arr {!} tuck + swap\n    LOOP\n    drop\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82749,"user_id":null,"body":"\\ create array of size size associated with the word \"name\" from the input stream\n: {} ( size \"name\" -- ) \n    create dup , cells allot\n;\n\\ store value at index of array\n: {!} ( value index array -- ) \n    swap 1+ cells + !\n;\n\\ fetch value from index of array\n: {@} ( index array -- value ) \n    swap 1+ cells + @\n;\n\n\\ This implements Euclidean algorithm in Forth\n: gcd ( X Y )\n    2dup <= if swap ( Y X ) then\n    ( X Y )\n    begin\n        tuck ( Y X Y )\n        mod ( Y Z )\n        dup ( Y Z Z )\n    0= until ( Y Z )\n    ( Y 0 )\n    drop ( Y )\n;\n\n\\ create a global array, *keep* the name \"arr\"\n5000 {} arr\n\n: an { n -- s }\n    7 1 arr {!}\n    7 n 1+ 2\n    DO\n        i 1- arr {@} dup i gcd + dup i arr {!} +\n    LOOP\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82750,"user_id":null,"body":"\\ create array of size size associated with the word \"name\" from the input stream\n: {} { size }\n    create size cells allot\n;\n\\ store value at index of array\n: {!} { value index array -- }\n    .\" arr \" index . .\" = \" value . cr\n    value array index cells + !\n;\n\\ fetch value from index of array\n: {@} { index array -- value }\n    array index cells + @\n;\n\n\\ create a global array, *keep* the name \"arr\"\n5000 {} arr\n\n: is_even 2 mod 0 = ;\n\n: GCD { a b -- gcd }  \\ binary GCD algorithm\n  0 a b\n  begin \n    over is_even  over is_even  and while\n       2 \/ swap 2 \/ swap \n       rot 1+ -rot\n  repeat\n  swap    \\  d a b -> d b a\n  begin\n    dup is_even if \n      2 \/    \\ b a -> b (a\/2)\n    else \n      over is_even if \n        swap 2 \/ swap  \\ b a -> (b\/2) a\n      else \n        2dup < if \n          over - 2 \/    \\ b a -> b ((a-b)\/2)\n        else \n          dup -rot - 2 \/ swap  \\ b a -> ((b-a)\/2)\n        then\n      then\n    then\n  2dup = until\n  rot 1 swap lshift *  \\ d b a -> b (a*2^d)\n  nip\n;\n\n: an { n -- s }\n    7 1 arr {!}\n    7\n    n 1+ 2 do\n      i 1- arr {@}  dup i GCD  + dup i arr {!}\n      +\n    loop\n;\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82751,"user_id":null,"body":"\n\n\\ create array of size size associated with the word \"name\" from the input stream\n: {} ( size \"name\" -- )  CREATE cells allot ;\n\n\\ store value at index of array\n: {!} ( value index array -- ) swap 8 * + ! ;\n\n\\ fetch value from index of array\n: {@} ( index array -- value ) swap 8 * + @ ;\n\n\\ create a global array, *keep* the name \"arr\"\n5000 {} arr\n\n: gcd ( a b -- n ) begin dup while tuck mod repeat drop ;\n\n: an { n -- s }\n  0 7 n 1+ 1 do\n  dup i arr {!}\n  dup rot + swap\n  dup i 1+ gcd +\nloop drop\n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\ create array of size size associated with the word \"name\" from the input stream\n: {} ( size \"name\" -- )  CREATE cells allot ;\n\n\\ store value at index of array\n: {!} ( value index array -- ) swap 8 * + ! ;\n\n\\ fetch value from index of array\n: {@} ( index array -- value ) swap 8 * + @ ;\n\n\\ create a global array, *keep* the name \"arr\"\n5000 {} arr\n\n: gcd ( a b -- n ) begin dup while tuck mod repeat drop ;\n\n: an { n -- s }\n  0 7 n 1+ 1 do\n  dup i arr {!}\n  dup rot + swap\n  dup i 1+ gcd +\nloop drop\n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82752,"user_id":503,"body":": {} Create Cells Allot ; : {!} Swap Cells + ! ; : {@} Swap Cells + @ ; 5000 {} Arr\n: An 1 7 7 Begin Rot 2Dup Arr {!} -Rot 2Over > While 2Swap 1+ 2Swap 2Over Nip Over Begin Dup While Tuck Mod Repeat Drop + Dup Rot + Swap Repeat Drop -Rot 2Drop ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82753,"user_id":106,"body":"\\ create array of size size associated with the word \"name\" from the input stream\n: {} ( size \"name\" -- )  CREATE cells allot ;\n\n\\ store value at index of array\n: {!} ( value index array -- ) swap 8 * + ! ;\n\n\\ fetch value from index of array\n: {@} ( index array -- value ) swap 8 * + @ ;\n\n\\ create a global array, *keep* the name \"arr\"\n5000 {} arr\n\n: gcd ( a b -- n ) begin dup while tuck mod repeat drop ;\n\n: an { n -- s }\n  0 7 n 1+ 1 do\n  dup i arr {!}\n  dup rot + swap\n  dup i 1+ gcd +\nloop drop\n;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"59568be9cc15b57637000054":[{"id":82754,"user_id":106,"body":": flp2 dup begin nip dup dup 1- and dup 0= until drop ;\n: elder_age ( m n l t -- age ) { l t } 2dup < if swap else then\nover flp2 2dup min\nover l 1+ - 0 max l negate 0 max swap { m0 n0 m1 n1 f g }\ng f xor 1 and 0=\nif ( even ) g 2\/ f 2\/ + g 1 and + t mod g f - 1+ t mod\nelse ( odd ) g f - 1+ 2\/ t mod f t mod g t mod + t mod\nthen * t mod n1 t mod * t mod\nm0 m1 > n0 n1 > 2dup and { p0 p1 p2 }\np0 if m0 m1 - n1 l m1 - t recurse + else then\np1 if m1 n0 n1 - l n1 - t recurse + else then\np2 if m0 m1 - n0 n1 - l t recurse + else then\nt mod ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82755,"user_id":168,"body":": pow2 ( m -- k ) 1 begin 2dup u>= while 2* repeat nip ;\n\n: mmul { x y m -- r } x m mod y m mod * m mod ;\n\n: mmul2 ( m x y -- r ) dup 1 and if swap then 2\/ rot mmul ;\n\n: elder_age { m n l t -- age }\n  m n < \n  if n m l t recurse exit then\n  m pow2\n  l 0> over l u<= and m 0<= n 0<= or or\n  if drop 0 exit then\n  n 1 > if 1 rshift else drop m then { k }\n  n k min { r }\n  k l > if\n    l 0>= if\n      t k l - dup 1- mmul2\n    else\n      t k dup 1- mmul2 l k t mmul -\n    then\n    r t mmul\n  else 0 then\n  m k - r l k - t recurse +\n  k n r - l k - t recurse +\n  m k - n r - l t recurse +\n  t mod ;","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":82756,"user_id":53,"body":"\nDefer elder_age\n\n: clog2 { a b -- r } b a < if a b 2 * recurse else b then ;\n\n: rsum { a b -- r } a b + b a - 1 + * 2 \/ ;\n\n: rem { a b -- r } a b mod b + b mod ;\n\n: xy_case { m n k p y x -- r }\n  m n + y - { a }\n  1 y k - 1 - rsum { b }\n  y n - x m - k p elder_age { c }\n  a b * c + p rem ;\n  \n: phi_case { m n k p y x -- r }\n  1 y k - 1 - rsum m * { a }\n  y n - 0 x k - max y k - 1 - rsum * { b }\n  a b - { phi }\n  k x <= if x k - x m - * y n - * x m - y n - 0 p elder_age + else x m - y n - k x - p elder_age then { phi2 }\n  phi phi2 + p rem ;\n  \n: clog2u dup begin nip dup dup 1 - and dup 0 = until drop ;\n\n: eldest_age ( m n l t -- age ) \n  { l t } 2dup < if swap else then\n  over clog2u 2dup min\n  over l 1 + - 0 max l -1 * 0 max swap { a b x y f g }\n  g f xor 1 and 0=\n  if g 2 \/ f 2 \/ + g 1 and + t rem g f - 1 + t rem\n  else g f - 1 + 2 \/ t rem f t rem g t rem + t rem\n  then * t rem y t rem * t rem\n  a x > b y > 2dup and { r s u }\n  r if a x - y l x - t recurse + else then\n  s if x b y - l y - t recurse + else then\n  u if a x - b y - l t recurse + else then\n  t rem ;\n\n: elder_age_inner { m n k p -- r }\n  m 1 clog2 { x }\n  n 1 clog2 { y }\n  m 0 = n 0 = or if 0 else \n  m n > if n m k p recurse else\n  m 200000 > n 200000 > or if m n k p eldest_age else \n  k y > if 0 else \n  x y = if m n k p y x xy_case else \n  m n k p y y 2 \/ phi_case\n  then then then then then ;\n' elder_age_inner IS elder_age\n","lang_id":18,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}]}