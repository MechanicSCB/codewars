{"50654ddff44f800200000004":[{"id":13713,"user_id":645,"body":"component {\n  function multiply(required numeric a, required numeric b) {\n    return a * b;\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13714,"user_id":527,"body":"component {\n  function multiply(a, b) {\n    return a * b;\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13715,"user_id":null,"body":"component {\n  function multiply(a, b) {\n    return b == 0 ? 0: b > 0? a + multiply(a, b -1): multiply(a, b + 1) - a;\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13716,"user_id":null,"body":"component {\n  public numeric function multiply(required numeric a, required numeric b) {\n    return a * b;\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13717,"user_id":76,"body":"component {\n  multiply = (a, b) => a * b;\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13718,"user_id":76,"body":"component {\n  numeric function multiply(required number a, required number b) {\n    return a * b;\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13719,"user_id":527,"body":"component {\n  function multiply(numeric a, numeric b) {\n    return a * b;\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13720,"user_id":null,"body":"component {\n  function multiply(a, b) {\n    systemoutput( directoryList( '\/' ),1 )\n    return a * b;\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"511f11d355fe575d2c000001":[{"id":13721,"user_id":null,"body":"component {\n    array function two_oldest_ages( required array ages ) {\n        return ages.sort( 'numeric' ).slice( -1 );\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13722,"user_id":null,"body":"component {\n    array function two_oldest_ages( required array ages ) {\n        return ages.sort('numeric').slice(ages.len() - 1);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13723,"user_id":null,"body":"component {\n    array function two_oldest_ages( required array ages ) {\n        return ages.sort(\"numeric\").slice(-1, 2);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13724,"user_id":53,"body":"component {\n    array function two_oldest_ages( required array ages ) {\n        r=ArrayNew(1);\n        r[1] = 0;\n        r[2] = 0;\n        for (i = 1; i <= ArrayLen(ages); i++) { \n              if (ages[i] >= r[2]) {\n                    r[1] = r[2];\n                    r[2] = ages[i];\n              } else if (ages[i] > r[1]) {\n                    r[1] = ages[i];  \n              }\n        }\n        return r;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13725,"user_id":null,"body":"component {\n    array function two_oldest_ages( required array ages ) {\n        \n        ages.each(function(e,i){\n        ages.each(function(el,index){\n            if(index != len(ages))\n                {\n                    if(el < ages[index + 1])\n                    {\n                        var temp1 = el;\n                        var temp2 = ages[index + 1];\n                        \n                        ages[index] = temp2;\n                        ages[index + 1] = temp1;\n                    }\n                }\n        });});\n        \n        return [ages[2],ages[1]];\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13726,"user_id":null,"body":"component {\n    array function two_oldest_ages( required array ages ) {\n    \n    var topTwo = [];\n        \n        sortArray = arguments.ages.sort('numeric', 'desc');\n        \n        topTwo[1] = sortArray[2];\n        topTwo[2] = sortArray[1];        \n    \n        return topTwo;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13727,"user_id":null,"body":"component {\n    array function two_oldest_ages( required array ages ) {\n        var oldestAges = [0, 1];\n        var oldestAge = 0;\n        \n        for (j=arrayLen(oldestAges); j>=1; j--) {\n            for (i=1; i<=arrayLen(ages); i++) {\n                if (ages[i] > oldestAges[j])\n                    oldestAges[j]= ages[i];\n            }\n            if (j>1) {\n                var index = ArrayFind(ages,oldestAges[j]);\n                ArrayDeleteAt(ages, index);\n            }\n}\n        \n        return oldestAges;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13728,"user_id":null,"body":"component {\n    array function two_oldest_ages( required array ages ) {\n        return ages.sort(\"numeric\", \"desc\").slice(1,2).sort(\"numeric\", \"asc\");\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13729,"user_id":null,"body":"component {\n    array function two_oldest_ages( required array ages ) {\n       ages.sort(\"numeric\", \"desc\");\n       return [ages[2], ages[1]];\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13730,"user_id":null,"body":"component {\n    array function two_oldest_ages( required array ages ) {\n        var ret = [];\n        ArrayAppend(ret, ArrayMax(ages));\n        ArrayDelete(ages, ArrayMax(ages));\n        ArrayPrepend(ret, ArrayMax(ages));\n        return ret;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"515e271a311df0350d00000f":[{"id":13731,"user_id":null,"body":"component {\n    numeric function square_sum(required Array numbers) {\n        return numbers.map((n) => n * n).sum();\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13732,"user_id":null,"body":"component {\n    numeric function square_sum(required Array numbers) {\n        return numbers.map((el) => el ^ 2).sum();\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13733,"user_id":null,"body":"component {\n    numeric function square_sum(required Array numbers) {\n        sum = 0;\n        numbers.each(function(n){ sum += n^2 });\n        return sum;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13734,"user_id":null,"body":"component {\n    numeric function square_sum(required Array numbers) {\n        return numbers.map((n) => n^2).sum();\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13735,"user_id":168,"body":"component {\n    numeric function square_sum(required Array numbers) {\n        var r = 0\n        for (var x in numbers) {\n            r += x * x\n        }\n        return r\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13736,"user_id":null,"body":"component {\n    numeric function square_sum(required Array numbers) {\n        var totSum = 0;\n        for(i=1; i<=ArrayLen(numbers); i++){\n            totSum = totSum + (numbers[i]*numbers[i]);\n        }\n        return totSum;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13737,"user_id":null,"body":"component {\n    numeric function square_sum(required Array numbers) {\n        exponent = 2;\n        total = 0;\n        for(num in numbers){\n            total+= num*num;\n        }\n        \n        return total;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13738,"user_id":null,"body":"component {\n    numeric function square_sum(required Array numbers) {\n      final = 0;\n      for ( number in numbers ) {\n        final += abs( number ) ^ 2;\n      }\n      return final;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13739,"user_id":null,"body":"component {\n    numeric function square_sum(required Array numbers) {\n        var res = 0;\n        for(var i in numbers){\n            res += i * i;\n        }\n        return res;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13740,"user_id":50,"body":"component {\n    numeric function square_sum(required Array numbers) {\n        o=0;\n        for (n in numbers){\n            o+=n*n;\n        }\n        return o;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5168bb5dfe9a00b126000018":[{"id":13741,"user_id":null,"body":"component {\n\n    function solution( string str = \"\" ){\n        return reverse( str );\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13742,"user_id":null,"body":"component {\n\n    solution = ( string str ) => str.reverse()\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13743,"user_id":null,"body":"component {\n\n    function solution( string str ){\n        return Reverse(str);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13744,"user_id":1566,"body":"component {\n    solution=(s)=>reverse(s);\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13745,"user_id":76,"body":"component {\n    string function solution( required string str ){\n        return str.reverse();\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13746,"user_id":527,"body":"component {\n\n    function solution(string str) {\n        return str.reverse();\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13747,"user_id":null,"body":"component {\n\n    function solution( str ){\n  \n        var output = [];\n          \n        listToArray( arguments.str, \"\" ).each( function( char ) {\n            output.prepend( char );\n        } );\n        \n        return output.toList( \"\" );\n          \n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13748,"user_id":null,"body":"component {\n\n    function solution( string str ){\n        return reverse( str );\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"51edd51599a189fe7f000015":[{"id":13749,"user_id":null,"body":"component {\n\n    function meanSquare( array firstArray, array secondArray ) {\n      return firstArray.map( ( n, i ) => abs( n - secondArray[ i ] ) ^ 2 ).avg();\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13750,"user_id":null,"body":"component {\n\n    function meanSquare( array firstArray, array secondArray ) {\n      var count = 0\n      \n      firstArray.each((a,i) => {count += abs(a-secondArray[i])^2 });\n\n      return count\/ArrayLen(firstArray);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13751,"user_id":null,"body":"component {\n\n    function meanSquare( array firstArray, array secondArray ) {\n\n    \tvar total = firstArray.reduce(function(result, value, index){\n    \t\treturn result + abs(secondArray[index] - firstArray[index]) ^ 2 ;\n    \t}, 0)\t\n\n    \treturn total \/ firstArray.len();\n\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13752,"user_id":null,"body":"component {\n\n    function meanSquare( array firstArray, array secondArray ) {\n        retval=[];\n        if ( firstArray.len() == secondArray.len() ) {\n            firstArray.each( function(el,idx) {\n                retval.append( abs(el-secondArray[idx])^2);\n             } );\n        return retval.avg() ;\n        } else {\n            return false ;\n        }\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13753,"user_id":null,"body":"component {\n\n    function meanSquare( array firstArray, array secondArray ) {\n      var x = firstArray.map((el, i) => (abs(el-secondArray[i]))^2);\n      return x.sum() \/ x.len();\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13754,"user_id":null,"body":"component {\n\n    function meanSquare( array firstArray, array secondArray ) {\n        return arrayZip( firstArray, secondArray, ( first, second ) => {\n            return abs( first - second ) ^ 2;\n        } ).avg();\n    }\n\n    private function arrayZip( array first, array second, any predicate ) {\n        return first.map( ( item, i ) => {\n            return predicate( item, second[ i ] );\n        } );\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13755,"user_id":null,"body":"component {\n\n    function meanSquare( array firstArray, array secondArray ) {\n      \/\/ Your code here...\n        e = 0;\n        n = ArrayLen(firstArray);\n        for(i=1; i<=n; ++i){\n            e += (firstArray[i] - secondArray[i]) ^ 2;\n        }\n        return e \/ n;        \n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13756,"user_id":null,"body":"component {\n\n    function meanSquare( array firstArray, array secondArray ) {\n      \/\/ Your code here...\n        e = 0;\n        n = ArrayLen(firstArray);\n        for(i=1; i<=n; ++i){\n            err = firstArray[i] - secondArray[i];\n            e += err * err;\n        }\n        return e \/ n;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13757,"user_id":53,"body":"component {\n    function meanSquare( array a, array b ) {\n        result = 0;\n        n = arrayLen(a);\n        for (i=1; i <= n;i=i+1) {\n            c = a[i] - b[i];\n            result += c*c;\n        }\n        return result \/ n;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13758,"user_id":null,"body":"component {\n\n    function meanSquare( required array firstArray, required array secondArray ) {\n        var sumOfSquares = firstArray.reduce( ( prev, element, index ) => {\n            return prev + abs( element - secondArray[index] ) ^ 2;\n        }, 0 );\n        return sumOfSquares \/ firstArray.len()\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"51fd6bc82bc150b28e0000ce":[{"id":13759,"user_id":53,"body":"component {\n    function no_odds( array values ) {\n        return ArrayFilter( values, function( n ) {\n           return n % 2 == 0;\n     } );\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-27 16:42:58"},{"id":13760,"user_id":null,"body":"component {\n\n    function no_odds( array values ){\n        return arrayFilter( values, function( item ){\n            return ( item % 2 == 0 );\n        });\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-27 16:42:58"},{"id":13761,"user_id":null,"body":"component {\n\n    function no_odds( array values ){\n        return values.filter((v) => v % 2 == 0);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-27 16:42:58"},{"id":13762,"user_id":null,"body":"component {\n\n    function no_odds( array values ){\n        return values.filter(function(val){return val%2==0;});\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-27 16:42:58"},{"id":13763,"user_id":null,"body":"component {\n\n    function no_odds( array values ){\n        var evens = Array();\n        values.each(function(val){\n            if(val%2==0){\n                evens.append(val);\n            }\n        });\n        return evens;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-27 16:42:58"},{"id":13764,"user_id":null,"body":"component {\n    function no_odds( array values ) {\n        return ArrayFilter(values, function(el) { return el % 2 == 0 });\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-27 16:42:58"},{"id":13765,"user_id":null,"body":"component {\n\n    function no_odds( array values ){\n        \/\/ Your code here...\n        return ArrayFilter(values, function(x){\n            return x % 2 == 0;\n        });\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-27 16:42:58"},{"id":13766,"user_id":null,"body":"component {\n\n    function no_odds( array values = [] ) {\n        return arguments.values.filter( ( element ) => {\n            return element % 2 == 0;\n        } );\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-27 16:42:58"},{"id":13767,"user_id":null,"body":"component {\n\n    function no_odds( array values ){\n        var ciftler=[];\n        for (i=1; i <= arrayLen(values);i=i+1) {\n            if(values[i]%2==0)\n                ciftler[arrayLen(ciftler)+1]=values[i];\n        }\n        return ciftler;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-27 16:42:58"},{"id":13768,"user_id":null,"body":"component {\n\n function no_odds( array values ){\n   return values.filter( (item) => IsNumeric( item ) && item % 2 == 0 );\n  }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-27 16:42:58"}],"521c2db8ddc89b9b7a0000c1":[{"id":13769,"user_id":null,"body":"component {\n\n    function snail( array matrix ) {\n        var deltas = [\n            [ 1, 0 ],\n            [ 0, 1 ],\n            [ -1, 0 ],\n            [ 0, -1 ]\n        ];\n        var deltaIdx = 1;\n\n        var unrolled = [ ];\n        var visited = [ ];\n        var pos = [ 0, 1 ];\n\n        var rotate = () => deltaIdx = ( deltaIdx % 4 ) + 1;\n        var move = () => pos.map( ( p, i ) => p + deltas[ deltaIdx ][ i ] );\n\n        while ( unrolled.len() < matrix[ 1 ].len() ^ 2 ) {\n            if (\n                move().some( ( p ) => p < 1 || p > matrix.len() ) ||\n                visited.find( move().toList() )\n            ) {\n                rotate();\n            }\n\n            pos = move();\n            visited.append( pos.toList() );\n            unrolled.append( matrix[ pos[ 2 ] ][ pos[ 1 ] ] );\n        }\n\n\n\n        return unrolled;\n    }\n\n}\n","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13770,"user_id":53,"body":"component {\n\n    function rotate(a) {\n        if(a.len() == 0 || a[1].len() == 0) return a;\n        var w = a.len();\n        var h = a[1].len();\n        var b = [].set(1,h,0);\n        for (var y=1; y<=h; y++) {\n            b[y] = [].set(1,w,0);\n            for (var x=1; x<=w; x++) {\n                b[y][x] = a[x][h-y+1];\n            }\n        }\n        return b;\n    }\n\n    function snail( array m ){ \n        var arr = [];\n        while (m.len() > 0) {\n            arr = arr.merge(m[1]);\n            m.deleteAt(1);\n            m = rotate(m);\n        }\n        return arr.len() >= 1 ? arr : (m.len() > 0) ? m[1] : [];\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13771,"user_id":76,"body":"component {\n\n    array function snail( required array matrix ) {\n        if ( matrix.len() == 1 && matrix[ 1 ].len() == 0 ) return [];\n        \n        var res = [];\n        var seen = [];\n        var size = matrix.len();\n        var dirs = [ [ 0, 1 ], [ 1, 0 ], [ 0, -1 ], [ -1, 0 ] ];    \/\/ R, D, L, U\n        var dir = 1;\n        var x = 1;\n        var y = 1;\n        \n        while ( res.len() < size ^ 2 ) {\n            res.append( matrix[ x ][ y ] );\n            seen.append( \"#x#-#y#\" );\n            var nx = x + dirs[ dir ][ 1 ];\n            var ny = y + dirs[ dir ][ 2 ];\n            if ( nx < 1 || nx > size || ny < 1 || ny > size || seen.contains( \"#nx#-#ny#\" ) ) {\n                dir = dir == 4 ? 1 : dir + 1;\n                nx = x + dirs[ dir ][ 1 ];\n                ny = y + dirs[ dir ][ 2 ];\n            }\n            x = nx;\n            y = ny;\n        }\n        \n        return res;\n    }\n    \n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13772,"user_id":null,"body":"component {\n\n    function snail( array matrix ){\n        \n        var thisArr = arguments.matrix.duplicate();\n        \n        var rs = 1 ;                \/\/row start\n        var re = thisArr.len();     \/\/row end\n        var cs = 1 ;                \/\/col start\n        var ce = thisArr[1].len();  \/\/col end\n        \n        var retval=[];\/\/.resize(re^2) ;\n        var iter = 1 ;\n        \n        while(rs<=re && cs<=ce){\n            \/\/ first row\n            for (var i=cs; i<=ce; i++){\n                retval[iter] = thisArr[rs][i] ;\n                iter++;\n            }\n            rs++;\n            \n            \/\/ last col, remaing rows.\n            for(var i=rs; i<re; i++){\n                retval[iter] = thisArr[i][ce] ;\n                iter++ ;\n            }\n            ce--;\n            \n            \/\/ Last row\n            if (rs<=re) { \n                for (var i=(ce+1); i>=cs; i--) { \n                    retval[iter] = thisArr[re][i] ;\n                    iter++;\n                } \n                re--; \n            } \n  \n            \/\/ Print the first column from the remaining columns\n            if (cs<ce) { \n                for (var i=re; i>=rs; i--) { \n                    retval[iter] = thisArr[i][cs] ;\n                    iter++;\n                } \n                cs++; \n            }\n        }\n        \n        return retval;        \n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13773,"user_id":null,"body":"component {\n\n    function rotate(a) {\n        if(a.len() == 0 || a[1].len() == 0) return a;\n        var w = a.len();\n        var h = a[1].len();\n        var b = [].set(1,h,0);\n        for (var y=1; y<=h; y++) {\n            b[y] = [].set(1,w,0);\n            for (var x=1; x<=w; x++) {\n                b[y][x] = a[x][h-y+1];\n            }\n        }\n        return b;\n    }\n\n    function snail( array matrix ){ \n        var arr = [];\n        while(matrix.len() > 0) {\n            arr = arr.merge(matrix[1]);\n            matrix.deleteAt(1);\n            matrix = rotate(matrix);\n        }\n        return arr.len() >= 1 ? arr : (matrix.len() > 0) ? matrix[1] : [];\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13774,"user_id":null,"body":"component {\n\n    function snail( array matrix ){\n        var result = []\n        while( matrix.len() ) {\n            if( !matrix[1].len() ) break;\n             \n            \/\/ Add entire top row\n            result.append( matrix[1], true )\n            matrix = matrix.deleteAt(1)\n            \n            \/\/ Strip far right of each remaining row\n            for( var row in matrix ){\n                result.append( row.last() )\n                row.deleteAt( row.len() )\n            }\n            \n            if( !matrix.len() ) break;\n            \n            \/\/ Add entire bottom row backwarsd\n            result.append( matrix.last().reverse(), true )\n            matrix.deleteAt( matrix.len() )\n            \n            if( !matrix.len() ) break;\n                \n            \/\/ Strip far left of each remaining row\n            for( var i=matrix.len(); i>0; i-- ){\n                var row = matrix[i]\n                result.append( row[ 1 ] )\n                if( row.len() ) {\n                    row.deleteAt( 1 )\n                } else {\n                    matrix.deleteAt( matrix.len() )\n                }\n            }\n        \n        }\n        return result\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"523b4ff7adca849afe000035":[{"id":13775,"user_id":null,"body":"<cfcomponent>\n    <cffunction name=\"greet\" output=\"true\" access=\"public\" returnType=\"string\">\n           <cfreturn \"Hello world!\" \/>\n    <\/cffunction>\n\n<\/cfcomponent>","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13776,"user_id":null,"body":"component {\n    function greet (String) {\n        String = 'hello world!';\n        return(String);\n    }\n    \n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13777,"user_id":50,"body":"component {\n    public string function greet() { \n        return \"hello world!\"; \n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13778,"user_id":null,"body":"component accessors=\"true\" {\n    property name=\"greeting\" type=\"string\" default=\"Hello World!\";\n\n    function greet() {\n        return getGreeting();\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13779,"user_id":null,"body":"component {\n    function Greet()\n\t{\n\t\treturn 'hello world!';\n\t}\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13780,"user_id":1566,"body":"component {\n    greet = () => 'hello world!';\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13781,"user_id":null,"body":"component {\n\n    function greet() {\n        return \"Hello World!\"\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13782,"user_id":null,"body":"component {\n\n   greet = (who) => \"hello \" & ( (who?.len()>0)? who : \"world\" ) & \"!\" ;\n   \n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13783,"user_id":null,"body":"component {\n\n    function greet ( who ) {\n        return \"hello \" & ( (who?.len()>0)? who : \"world\" ) & \"!\" ;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13784,"user_id":76,"body":"component { greet = () => 'Hello World!' }","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"525f50e3b73515a6db000b83":[{"id":13785,"user_id":null,"body":"component {\n\n    function create_phone_number( array n ) {\n        return '(#n[1]##n[2]##n[3]#) #n[4]##n[5]##n[6]#-#n[7]##n[8]##n[9]##n[10]#'\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13786,"user_id":null,"body":"component {\n\n    function create_phone_number( array numbers ) {\n        return \"(#numbers.slice(1,3).toList('')#) #numbers.slice(4,3).toList('')#-#numbers.slice(7).toList('')#\";\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13787,"user_id":null,"body":"component {\n\n    function create_phone_number( array numbers ) {\n        return numbers.toList(\"\")\n            .reReplace(\"(\\d{3})(\\d{3})(\\d{4})\", \"(\\1) \\2-\\3\");\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13788,"user_id":null,"body":"component {\n\n    function create_phone_number( array numbers ) {\n        local.str = arrayToList(numbers, '');\n        return \"(#left(local.str, 3)#) #mid(local.str, 4, 3)#-#right(local.str, 4)#\"\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13789,"user_id":null,"body":"component {\n\n    function create_phone_number( array numbers = [] ) {\n        return arguments.numbers.reduce( ( phoneNumber, number, index ) => {\n            if ( index == 1 ) {\n                phoneNumber &= \"(\";\n            } else if ( index == 4 ) {\n                phoneNumber &= \") \";\n            } else if ( index == 7 ) {\n                phoneNumber &= \"-\";\n            }\n            phoneNumber &= number;\n            return phoneNumber;\n        }, \"\" );\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13790,"user_id":null,"body":"component {\n\n    function create_phone_number( array numbers ) {\n        return \"(#numbers[1]##numbers[2]##numbers[3]#) #numbers[4]##numbers[5]##numbers[6]#-#numbers[7]##numbers[8]##numbers[9]##numbers[10]#\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13791,"user_id":null,"body":"component {\n\n    function create_phone_number( array numbers ) {\n    \n        var numbers = \"\";\n        \n        arguments.numbers.each( (ele)=> numbers &= ele );\n        \n        _1st3 = \"(\" & numbers.left(3) & \") \";\n        _2nd3 = numbers.removeChars(1,3);\n        _2nd3 = _2nd3.removeChars(4, _2nd3.len() ) & \"-\";\n        last4 = numbers.removeChars(1,6);\n        \n        return _1st3 & _2nd3 & last4;\n        \n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13792,"user_id":null,"body":"component {\n\n    function create_phone_number( array numbers ) {\n        return \"(\" & \n            numbers.slice(1,3).toList(\"\") & \n            \") \" & \n            numbers.slice(4,3).toList(\"\") & \n            \"-\" & \n            numbers.slice(7,4).toList(\"\") \n        ;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13793,"user_id":null,"body":"component {\n\n    string function create_phone_number(required array arr) {\n        return rereplace(arr.tolist(\"\"),\"(\\d{3})(\\d{3})(\\d{4})\",'(\\1) \\2-\\3');\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13794,"user_id":null,"body":"component {\n\n    function create_phone_number( array numbers ) {\n        \/\/ Create an initial variable to hold the phone number\n        var phoneNumber = '(';\n\n        \/\/ loop through every number, checking for specific positions to insert additional characters\n        \/\/ position 4: insert ') '\n        \/\/ position 7: insert '-'\n        for (i = 1; i LTE arrayLen(numbers); i++) {\n            phoneNumber &= ( i EQ 4 ? ') ' & numbers[i] : ( i EQ  7 ? '-' & numbers[i] : numbers[i] ) );\n        }\n        \n        return phoneNumber;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"52829c5fe08baf7edc00122b":[{"id":13795,"user_id":null,"body":"component {\n    numeric function numberOfOccurences(required element, required Array sample) {\n        return sample.findAll(element).len();\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13796,"user_id":null,"body":"\n<cfcomponent name=\"Solution\">\n    <cffunction name=\"numberOfOccurences\">\n        <cfargument name=\"element\">\n        <cfargument name=\"sample\">\n        \n        <cfset var count = 0>\n        <cfset var i = 0>\n        \n        <cfloop array=#sample# index=\"i\">\n            <cfif element eq i>\n                <cfset count = count + 1>\n            <\/cfif>        \n        <\/cfloop>\n\n        <cfreturn count>\n    <\/cffunction>    \n<\/cfcomponent>","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13797,"user_id":null,"body":"component {\n    numeric function numberOfOccurences(required element, required Array sample) {\n       return arguments.sample.tolist().listValueCount(arguments.element)\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13798,"user_id":645,"body":"component {\n    numeric function numberOfOccurences(required element, required Array sample) {\n        return sample.filter((x) => x == element).len()\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13799,"user_id":null,"body":"component {\n    numeric function numberOfOccurences(required element, required Array sample) {\n        result = ArrayFilter(sample, function(x){\n            return x == element;\n        });\n        return ArrayLen(result);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13800,"user_id":null,"body":"component {\n    numeric function numberOfOccurences(required element, required Array sample) {\n        var occurences = 0;\n        for (item in sample) {\n            if (item == element)\n                occurences++;\n        }\n        return occurences;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13801,"user_id":null,"body":"component {\n    numeric function numberOfOccurences(required element, required Array sample) {\n        final = 0;\n        if ( len(sample) > 0 ) {\n            for (item in sample) {\n                if (item == element) {\n                    final++;\n                }\n            }\n        }\n        return final;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13802,"user_id":null,"body":"component {\n    numeric function numberOfOccurences(required element, required Array sample) {\n        var searchElement = arguments.element;\n        \n        var matches = arrayFindAll( arguments.sample, ( arrayElement ) => {\n            return arrayElement == searchElement;\n        });\n        \n        return matches.len();\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13803,"user_id":null,"body":"component {\n    numeric function numberOfOccurences(required element, required Array sample) {\n        return sample.filter((item) => {return item == element}).len();\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13804,"user_id":null,"body":"component {\n    numeric function numberOfOccurences(required element, required Array sample) {\n        return arrayFindAll(sample, element).len();\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"52998bf8caa22d98b800003a":[{"id":13805,"user_id":53,"body":"component {\n    numeric function manhattanDistance(array pointA, array pointB) {\n        return Abs(pointB[2] - pointA[2]) + Abs(pointB[1] - pointA[1]);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13806,"user_id":null,"body":"component {\n    numeric function manhattanDistance(array pointA, array pointB) {\n        return Abs(pointA[1] - pointB[1]) + Abs(pointA[2] - pointB[2]);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13807,"user_id":null,"body":"component {\n    numeric function manhattanDistance(required array pointA, required array pointB) {\n        return abs( pointA[1] - pointB[1] ) + abs( pointA[2] - pointB[2] );\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13808,"user_id":50,"body":"component {\n    numeric function manhattanDistance(array pointA, array pointB) {\n        return Abs(pointA[2]-pointB[2])+Abs(pointA[1]-pointB[1]);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13809,"user_id":null,"body":"component {\n    numeric function manhattanDistance(array pointA, array pointB) {\n        return [ abs( pointA[1]-pointB[1] ),abs(pointA[2]-pointB[2] ) ].sum() ;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13810,"user_id":null,"body":"component {\n    numeric function manhattanDistance(array pointA, array pointB) {\n        \n        var vertical  = arguments['pointA'][1] - arguments['pointB'][1];\n\n        var horizontal   = arguments['pointA'][2] - arguments['pointB'][2];\n        \n        \/\/Always add as positive numbers\n        return abs(vertical) + abs(horizontal);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13811,"user_id":1566,"body":"component {\n    numeric function manhattanDistance(array pointA, array pointB) {\n        return abs(pointA[1]-pointB[1]) + abs(pointA[2]-pointB[2]);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13812,"user_id":76,"body":"component {\n    manhattanDistance = (a, b) => abs(b[1] - a[1]) + abs(b[2] - a[2]);\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13813,"user_id":76,"body":"component {\n    numeric function manhattanDistance(array pointA, array pointB) {\n        return Abs(pointB[1] - pointA[1]) + Abs(pointB[2] - pointA[2]);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"542f0c36d002f8cd8a0005e5":[{"id":13814,"user_id":53,"body":"component {\n    numeric function lastChair(required numeric n) {\n        return n - 1;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13815,"user_id":null,"body":"component {\n    numeric function lastChair(required numeric n) {\n        \/\/ your code here\n        return n - 1;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13816,"user_id":null,"body":"component {\n    numeric function lastChair(required numeric n) {\n        return n <= 2 ? n : n - 1;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13817,"user_id":76,"body":"component {\n    lastChair = (n) => --n;\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"550498447451fbbd7600041c":[{"id":13818,"user_id":76,"body":"component {\n    function comp_same(a, b) {\n        return isNull(a) || isNull(b) ? false : a.map((n) => n ^ 2).sort('numeric', 'asc').equals(b.sort('numeric', 'asc'));\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13819,"user_id":null,"body":"component {\n\n    function comp_same(a,b){\n        \/\/has to be an array\n        if(isNull(a) || isNull(b) || !isArray(a) || !isArray(b) || a.len() != b.len()) return false;\n        if(a.isEmpty() && b.isEmpty()) return true; \/\/return true if empty arrays\n        \n        \/\/remove matches and leave unmatched items\n        var af = a.filter((x) => {\n            var idx = b.find(x^2); \/\/find first match index\n            if(idx > 0) b.deleteAt(idx); \/\/remove the item from the \"b\" array \n            return idx == 0; \/\/if we cant find a match return true so it stays in the array\n        });\n        \n        return af.len() == 0 && b.len() == 0; \/\/if a or b has stuff left over return false\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13820,"user_id":null,"body":"component {\n\n    function comp_same(a,b){\n         return isnull(a) or isnull(b)\n                ? false\n                : a.len() neq b.len()\n                    ? false\n                    : a.len() eq a.sort(\"numeric\").reduce(function(sum,item,idx){\n                        return  sum + (item^2 eq b.sort(\"numeric\")[idx] ? 1 : 0);\n                      },0);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13821,"user_id":null,"body":"component {\n\n    function comp_same( array1, array2 ){\n        if( isNull( array1 ) || isNull( array2 ) ) return false\n        var array1b = array1.map( (n)=>n^2 ).sort( 'numeric' )\n        var array2 = array2.sort( 'numeric' )\n        var n=0\n        while( ++n <= array1b.len() ) {\n            if( array1b[n] != array2[n] ) {\n                return false\n            }\n        }\n        return true\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13822,"user_id":null,"body":"component {\n\n    function comp_same(a,b){\n        if(isdefined('a') && isdefined('b'))\n            {\n                var found_square_counter = true;\n                a = listToArray(listSort(isArray(a) ? a.toList() : '', 'numeric', \"asc\", \",\"));\n                b = listToArray(listSort(isArray(b) ? b.toList() : '', 'numeric', \"asc\", \",\"));\n                if(a.len() == b.len())\n                    {\n                        a.each(function(num_a, index_a) {\n                            if(num_a*num_a != b[index_a])\n                                {\n                                    found_square_counter = false\n                                }\n                            \n                        });\n\n                        return found_square_counter;\n                    }\n\n                    return false;\n                }\n\n        return false;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13823,"user_id":53,"body":"component {\n    \n    function comp_same() {\n        try {\n            if (arrayLen(arguments) < 2) {\n                return false;\n            }\n            xs = arguments[1];\n            ys = arguments[2];\n            if (arrayLen(xs) != arrayLen(ys)) {\n                return false;\n            }\n            ArraySort(xs, \"numeric\");\n            ArraySort(ys, \"numeric\");\n            xs = arrayMap(xs, function(n) {\n               return n * n;\n            });\n            return arrayToList(xs) IS arrayToList(ys);\n        } catch (any) {\n            return false;\n        }\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13824,"user_id":null,"body":"component {\n\n    function comp_same( array array1, array array2 ) {\n        var result = false\n        if ( arguments.keyExists( \"array1\" ) && arguments.keyExists( \"array2\" ) ) {\n            if ( array1.len() == array2.len() ) {\n                array1.sort( \"numeric\", \"asc\" )\n                array2.sort( \"numeric\", \"asc\" )\n                result = true\n                for ( var i = 1; i <= array1.len(); i++ ) {\n                    if ( result && array1[ i ] != sqr( array2[ i ] ) ) {\n                        result = false\n                        break\n                    }\n                }\n            }\n        }\n        \n        return result\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13825,"user_id":20,"body":"component {\n    numeric function increasing(numeric a, numeric b)\n    {\n        return a-b;\n    }\n    function comp_same(a, b){\n        if(!(isDefined(\"a\")&&isDefined(\"b\")))\n            return false;\n        a.sort(increasing);\n        b.sort(increasing);\n        for(i=1; i<=len(a); i++)\n            if(a[i]*a[i]!=b[i])\n                return false;\n        return true;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13826,"user_id":null,"body":"component {\n\n    function comp_same(any a, any b){\n        \/\/ check for our input values being arrays\n        if(!isArray(arguments.a) || !isArray(arguments.b)) return false;\n        \n        \/\/ create a squared array from array 'a'\n        local.a2 = arrayMap(arguments.a, function(item){\n            return arguments.item * arguments.item;\n        });\n        \n        \/\/ find matches in our array 'b'\n        for(local.item in arguments.b){\n            \/\/ find a match\n            local.p = arrayFind(local.a2, local.item);\n            \/\/ if not found, we return false\n            if(!local.p) return false;\n            \/\/ delete the found index so that it does not get reused\n            arrayDeleteAt(local.a2, local.p);\n        }\n        \n        \/\/ if we get this far, the two arrays have the \"same\" elements, with the same multiplicities\n        return true;\n        \n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13827,"user_id":null,"body":"component {\n\n    function comp_same(array a1, array a2){\n        var a1Squared = [];\n        \n        if(!isDefined(\"a1\") || !isDefined(\"a2\")){\n            return false;\n        }\n        \n        for(var element in a1){\n            arrayAppend(a1Squared, element^2);\n        }\n        \n        arraySort(a1Squared, \"numeric\", \"asc\");\n        arraySort(a2, \"numeric\", \"asc\");\n        \n        if(a1Squared.equals(a2)){\n            return true;\n        } \n        else{\n            return false;\n        }\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"55192f4ecd82ff826900089e":[{"id":13828,"user_id":48,"body":"component {\n    numeric function divide(required numeric w) {\n        return !(w%2)&&w>2\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13829,"user_id":null,"body":"component {\n    numeric function divide(required numeric w) {\n        \n        if (w != 2 && w % 2 == 0) {\n            return true;\n        }\n        return false;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13830,"user_id":53,"body":"component {\n    numeric function divide(required numeric w) {\n        return w % 2 == 0 && w > 2;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13831,"user_id":1566,"body":"component {\n    numeric function divide(required numeric w) {\n      return w > 2 && !(w % 2);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13832,"user_id":null,"body":"component {\n    numeric function divide(required numeric w) {\n        if (w == 2) {\n            return false;\n        } else if ((w % 2) == 0) {\n            return true;\n        } else {\n            return false;\n        }\n        return false;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13833,"user_id":null,"body":"component {\n    numeric function divide(required numeric w) {\n        return ( \n            arguments.w > 2 && \n            arguments.w MOD 2 == 0\n        );\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13834,"user_id":null,"body":"component {\n    numeric function divide(required numeric w) {\n        return w>3 && w%2 != 1 ;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13835,"user_id":null,"body":"component {\n    numeric function divide(required numeric w) {\n        return w > 2 && w % 2 == 0\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13836,"user_id":527,"body":"component {\n    numeric function divide(required numeric w) {\n        return w % 2 == 0 && w != 2;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13837,"user_id":645,"body":"component {\n    divide = (w) => w > 2 && w % 2 == 0\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5545f109004975ea66000086":[{"id":13838,"user_id":645,"body":"component {\n    function is_divisible(required numeric n, required numeric x, required numeric y) {\n        return n % x == 0 && n % y == 0;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13839,"user_id":null,"body":"component {\n    function is_divisible(required numeric n, required numeric x, required numeric y) {\n        if ( x EQ 0 OR y EQ 0 ) { return 0; }  \/\/ avoid division by zero\n        return iif( (n Mod x GT 0 ) OR (n Mod y GT 0), false, true);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13840,"user_id":null,"body":"component {\n    function is_divisible(required numeric n, required numeric x, required numeric y) {\n        return ( n mod x == 0 && n mod y == 0 ) ? true : false;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13841,"user_id":null,"body":"component {\n    function is_divisible(required numeric n, required numeric x, required numeric y) {\n        \/\/ test that the input parameters meet the requirement of integer greater than 0\n        if( !isValid( 'integer', n ) || !isValid( 'integer', x ) || !isValid( 'integer', y ) )\n            return false;\n        if( n < 1 || x < 1 || y < 1)\n            return false;\n        \/\/ test for remainder\n        if( n mod x !=0 )\n            return false;\n        if( n mod y !=0 )\n            return false;\n        \/\/ passed all tests\n        return true;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13842,"user_id":null,"body":"component {\n    function is_divisible(required numeric n, required numeric x, required numeric y) {\n        return max( n % x, n % y ) == 0;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13843,"user_id":null,"body":"component {\n    is_divisible = ( n, x, y ) => ! ( n % x + n % y );\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13844,"user_id":null,"body":"component {\n    function is_divisible(required numeric n, required numeric x, required numeric y) {\n        return !( n%x || n%y ) \n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13845,"user_id":null,"body":"component {\n    function is_divisible(required numeric n, required numeric x, required numeric y) {\n        return (n%x == 0 && n%y == 0) ? true : false;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13846,"user_id":1566,"body":"component {\n    function is_divisible(required numeric n, required numeric x, required numeric y) {\n        return n MOD x + n MOD y == 0;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13847,"user_id":null,"body":"component {   \n    is_divisible = ( n, x, y ) => (n % x + n % y) == 0;\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"555624b601231dc7a400017a":[{"id":13848,"user_id":53,"body":"component {\n    numeric function josephusSurvivor(required numeric n, required numeric k) {\n        return n == 1 ? 1 : (josephusSurvivor(n - 1, k) + k - 1) % n + 1;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13849,"user_id":50,"body":"component {\n    numeric function josephusSurvivor(required numeric n, required numeric k) {\n        var a=0;\n        for (var i=2;i<=n;i++) {\n            a=(a + k) % i;\n        }\n        return 1+a;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13850,"user_id":20,"body":"component {\n    numeric function josephusSurvivor(required numeric n, required numeric k) {\n  var a=[];\n  for(var i=1; i<=n; i++)\n    a.append(i);\n  for(var i=(k-1)%n; len(a)>1; i=(i+k-1)%len(a))\n    ArrayDeleteAt(a, i+1);\n  return a[1];\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13851,"user_id":null,"body":"component {\n    Numeric function josephusSurvivor(required numeric n, required numeric k) {\n        return ( n==1 || k==1 ) ? n : ( ( josephusSurvivor(n-1, k) + (k-1) )%n + 1 ) ; \n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13852,"user_id":null,"body":"component {\n    \/\/ https:\/\/www.geeksforgeeks.org\/josephus-problem-set-1-a-on-solution\/\n    numeric function josephusSurvivor(required numeric n, required numeric k) {\n        if(n == 1){\n            return 1;\n        }else{\n            return (josephusSurvivor(n-1, k) + k-1) % n + 1;\n        }\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13853,"user_id":null,"body":"component {\n    numeric function josephusSurvivor(required numeric n, required numeric k) {\n        var peeps=[]\n        var victim = k\n        loop from=1 to=n index='local.i' {\n            peeps[i]=i\n        }\n        while( victim > peeps.len() ) {\n            victim = victim-peeps.len()\n        }\n        while( peeps.len() > 1 ) {\n            peeps.deleteAt(victim)\n            victim+=k-1\n            while( victim > peeps.len() ) {\n                victim = victim-peeps.len()\n            }\n        }\n        return peeps[1]\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13854,"user_id":76,"body":"component {\n    numeric function josephusSurvivor( required numeric n, required numeric k ) {\n        return n ? ( josephusSurvivor( n - 1, k ) + k - 1 ) % n + 1 : 1;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13855,"user_id":645,"body":"component {\n    josephusSurvivor = (n, k) => n == 1 ? 1 : (josephusSurvivor(n - 1, k) + k - 1) % n + 1;\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"55685cd7ad70877c23000102":[{"id":13856,"user_id":null,"body":"component {\n    function make_negative(required numeric number) {\n        return -abs(number);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13857,"user_id":null,"body":"component {\n    function make_negative(required numeric number) {\n        return abs(number)*-1;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13858,"user_id":null,"body":"component {\n    function make_negative(required numeric number) {\n        return min(number, -number);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13859,"user_id":1566,"body":"component {\n    make_negative=(number)=>-abs(number)\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13860,"user_id":null,"body":"component {\n    function make_negative(required numeric number) {\n        if (number GTE 0) {\n            return number * -1;\n        } else {\n            return number;\n        }\n    \n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13861,"user_id":168,"body":"component {\n    function make_negative(required numeric number) {\n        return number > 0 ? -number : number\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13862,"user_id":null,"body":"component {\n    function make_negative(required numeric number) {\n    return -1*abs(number);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13863,"user_id":null,"body":"component {\n    function make_negative(required numeric number) {\n        if (number <= 0) {\n            return number\n        } else {\n            return number * -1\n        }\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13864,"user_id":492,"body":"component {\n    function make_negative(required numeric num) {\n        return -abs(num);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13865,"user_id":53,"body":"component {\n    function make_negative(required numeric n) {\n    return n > 0 ? -n : n;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5572f7c346eb58ae9c000047":[{"id":13866,"user_id":527,"body":"component {\n    string function pattern(required numeric n) {\n        var lines = [];\n        for (var i = 1; i <= n; i++)\n            lines.append(repeatString(i, i));\n        return arrayToList(lines, chr(10));\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13867,"user_id":null,"body":"component {\n  function pattern(required numeric n) {\n      \/\/ Happy Coding ^_^\n      result = \"\";\n      i = 1;\n      while(i <= n){\n          result = result & RepeatString(i, i) & (i == n ? '' : Chr(10));\n          i++;\n      }\n      return result;\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13868,"user_id":null,"body":"component {\n  function pattern(required numeric n) {\n      \/\/ Happy Coding ^_^\n      cadena=\"\";\n      \n      if(n<1){\n          return cadena;\n          \n      }else{\n            for (i =(n - (n-1));i<=n;i++){\n                \n                j = n - (n-i);\n                \n                \n                if(i>1){\n                    for(k=1;k<=i;k++){\n                        if(k==1){\n                            cadena =\"#cadena#\" & chr(10);\n                        }\n                        cadena = \"#cadena##j#\";   \n                    }    \n                }else{\n                     cadena = \"#cadena##j#\";\n                }                \n            }\n      }\n        \n        return cadena;    \n      }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13869,"user_id":null,"body":"component {\n  function pattern(required numeric n) {\n      var result = \"\";\n      if ( n < 1 ) {\n          return \"\";\n      }\n      for (var i = 1; i <= n; i++) {\n          result &= repeatString(i, i)\n          if ( i != n ) {\n              result &= chr( 10 )\n          }\n      }\n      return result\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13870,"user_id":null,"body":"component {\n  function pattern(required numeric n) {\n      var output = \"\";\n      var row = \"\";\n      for (var rowCount = 0; rowCount < n; rowCount ++){\n          for (var patCount = 0; patCount <= rowCount; patCount ++){\n              row = row & (rowCount + 1);\n          }\n          var newLine = (rowCount < n - 1) ? Chr(10) : \"\";\n          output = output & row & newLine;\n          row = \"\";\n      }\n      return output;\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13871,"user_id":null,"body":"component {\n  public string function pattern(required numeric n) {\n      \/\/ Happy Coding ^_^\n      var pattern = '';\n      \n      \/\/iterate over the lines\n      for(var i=1;i<=n;i++) {\n\n          if(i != 1) {\n            pattern = pattern & Chr(10);  \n          }            \n\n          \/\/create single line\n          for(var c=1;c<=i;c++) {\n              pattern = pattern & i;              \n          }\n             \n      }\n      \n      return pattern;\n      \n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13872,"user_id":759,"body":"component {\n  function pattern(required numeric n) {\n      var res = \"\";\n      for (i = 1; i <= n; i++) {\n        var a = i.toString();\n        res = res & repeatString(mid(a, 1, a.length() - 2), i) & ((i == n) ? \"\" : chr(10));\n      }\n      return res;\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13873,"user_id":1566,"body":"component {\n  function pattern(required numeric n) {\n      var output=[];\n      for(i=1; i<=n; i++) {\n          output[i]=repeatString(i,i);\n      }\n      return output.toList(chr(10));\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13874,"user_id":null,"body":"component {\n  function pattern(required numeric n) {\n      var s = \"\";\n      if ( n < 1 ) return s;\n      \n      for ( var i=1; i<=n; i++ ) {\n          if ( i > 1 ) s &= \"\n\";\n          s &= RepeatString(i, i);\n      }\n      \n      return s;\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13875,"user_id":null,"body":"component {\n  function pattern(required numeric n) {\n      var stringPattern = \"\";\n      for( var i=1; i lte n; i++ ){\n          for( var j=1; j lte i; j++ ){\n              stringPattern = stringPattern&i;\n          }\n          stringPattern = i neq n ? stringPattern&\"\n\" : stringPattern;\n      }\n      return stringPattern;\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13876,"user_id":null,"body":"component {\n  function pattern(required numeric n) {\n      if(n < 1) return '';\n      var c = listToArray(repeatString('a',n),'').reduce((acc,x,i) => acc & repeatString(i,i) & '\n','');\n      return left(c,c.len()-2);\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13877,"user_id":null,"body":"component {\n  function pattern(required numeric n) {\n    var str = \"\";\n    for(var i = 1; i lte n; i++) {\n        str = str & repeatString(i,i);\n        if(i lt n) str = str & \"\n\";\n    }\n    return str;\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13878,"user_id":null,"body":"component {\n    function pattern(required numeric n) {\n        if(n<1){ \n            return \"\" ;\n        } else {\n            retval=[];\n            for (var i=1;i<=n;i++){\n                retval.append(repeatstring(i,i));\n            }\n            return retval.toList().changeDelims(\"\n\",\",\",false,true) ;\n        }\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13879,"user_id":null,"body":"component {\n    function pattern(required numeric n) {\n        if ( n < 1 ) {  return \"\"; }\n        cReturn = \"1\";\n        for (i=2; i <=n; i=i+1) {\n            cReturn = cReturn & \"\n\" & RepeatString(i, i);\n        }\n        return cReturn;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13880,"user_id":null,"body":"component {\n  function pattern(required numeric n) {\n      var myPattern = \"\";\n      for(i = 1; i <= n; i++){\n          for(j = 1; j <= i; j++){\n              myPattern &= i;\n          }\n          if(i == n){\n              break;\n          }\n          myPattern &= '\n';\n      }\n      return myPattern;\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13881,"user_id":null,"body":"component {\n  function pattern(required numeric n) {\n      var ret = '';\n      for (var i = 1; i <= n; i++) {\n          for (var j = 1; j <= i; j++)\n              ret = ret & ToString(i);\n          ret = (i < n) ? ret & '\n' : ret;\n      }\n      return ret;\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13882,"user_id":null,"body":"component {\n  function pattern(required numeric n) {\n      \/\/ Happy Coding ^_^\n      var i = 0; \n      var result = [];\n      while(i++<n) {\n          result.append(repeatString(i, i));\n      }\n      return result.toList(\"\n\");\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13883,"user_id":null,"body":"component {\n  function pattern(required numeric n) {\n      if( n<1 ) return ''\n      var pat = ''\n      loop from=1 to=n index='i' {\n          pat&=repeatString(i,i)&'\n'\n      }\n    return pat.left(-2)\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13884,"user_id":null,"body":"component {\n\n    function pattern( required numeric n ) {\n        return repeatString( '_', n > 0 ? n : 0 )\n            .listToArray( '' )\n            .map( ( _, i ) => repeatString( i, i ) )\n            .toList( '\n' );\n    }\n\n}\n","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13885,"user_id":null,"body":"component {\n  function pattern(required numeric n) {\n      var arr = [];\n      for(var i=1;i<=n;i++) {\n          arr.append(repeatString(i,i)); \n      }\n      return arr.toList(\"\n\");\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"55733d3ef7c43f8b0700007c":[{"id":13886,"user_id":null,"body":"component {\n    function pattern(n) {\n        if ( n < 1 ) return '';\n        var rows = [ n ];\n        while ( --n > 0 ) {\n            rows.append( rows.last() & n );\n        }\n        return rows.reverse().toList( chr( 10 ) );\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13887,"user_id":null,"body":"component {\n    function pattern(n) {\n        if(n <= 0) return \"\"\n        if(n == 1) return 1\n        var i = 0\n        var retStr = \"\";\n        var currLine =\"\"\n        var c = \"\"\n        for(i = n; i > 0; i--){\n            currLine = i\n            c = c & currLine\n            retStr = c & chr(10) & retStr \n        }\n            \n        return retStr.subString(0,len(retStr)-1)\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13888,"user_id":null,"body":"component {\n    function pattern(n) {\n        if(n <= 0) return \"\"\n        if(n == 1) return 1\n        var i = 0\n        var retStr = \"\";\n        var currLine =\"\"\n        var c = \"\"\n        for(i = n; i > 0; i--){\n            currLine = i\n            c = c & currLine\n            retStr = c & chr(10) & retStr \n            echo(currLine)\n        }\n            \n        return retStr.subString(0,len(retStr)-1)\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13889,"user_id":20,"body":"component {\n    function pattern(n) {\n  var r='';\n  for(var c=''; n>0; n--)\n  {\n    c&=n;\n    r=c&Chr(10)&r;\n  }\n  return r==\"\"?\"\":r.substring(0, len(r)-1);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13890,"user_id":null,"body":"component {\n    function pattern(n) {\n        var result = \"\";\n        for( var i = 0; i < n; i++ ) {\n            result &= printPatternLine(n, i);\n            if( i != n - 1 ) {\n                result &= chr(10);\n            }\n        }\n        return result;\n    }\n    \n    private string function printPatternLine( required numeric number, required numeric lineNumber ) {\n        var line = \"\";\n        for( var i = number; i >= 1 + lineNumber; i-- ) {\n            line &= i;\n        }\n        \n        return line;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13891,"user_id":null,"body":"component {\n    function pattern(n) {\n        if (n<1) { return \"\" ; }\n        if (n==1) { return \"1\" ; }\n        var base = [] ;\n        for ( var turn=n; turn>0; turn-- ) { \n            base.append(turn) ;\n        }\n        \n        return  base.reduce( function(prev,el, idx, base) {\n            return prev.append(base.slice(1,el).toList(\"\")) ;\n        },[]).toList(chr(10)) ;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13892,"user_id":null,"body":"component {\n    function pattern(n){\n     var output=\"\";\n     for (var i = 1; i <= n; i++) {\n         for(var j = n; j >= i; j--) {\n             output = output & ToString(j);\n         }\n         if (i < n)\n             output = output & \"#chr(10)#\";\n     }\n     return output;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13893,"user_id":null,"body":"component {\n    function pattern(n){\n\t\tif(n <= 0) return \"\";\n\t\tvar arr = [];\n\t\tvar pat = \"\";\n    \tfor(var i=0;i<n;i++) {\n    \t\tarr.append(pat &= (n-i));\n    \t}\n    \treturn arr.reverse().toList(chr(10));\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13894,"user_id":1566,"body":"component {\n\n    function pattern(n) {\n      var output='';\n      for(i=1; i<=n; i++) {\n          for(j=n; j>=i; j--) {\n              output &= j\n          }\n          if (i == n) break;\n          output &= chr(10);\n      }\n      return output;\n    }\n    \n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5583090cbe83f4fd8c000051":[{"id":13895,"user_id":null,"body":"component {\n    array function digitize(required numeric n) {\n        return listToArray(n,\"\").reverse();\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13896,"user_id":1566,"body":"component {\n    array function digitize(required numeric n) {\n        return ListToArray(reverse(n),'');\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13897,"user_id":null,"body":"component {\n    array function digitize(required numeric n) {\n        return listToArray(reverse(toString(n)), \"\");\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13898,"user_id":53,"body":"component {\n    array function digitize(required numeric n) {\n        var arr = [];\n        while (ArrayLen(arr) == 0 || n > 0) {\n            var a = n % 10;\n            n = floor (n \/ 10);\n            ArrayAppend(arr, a, \"true\");\n        }\n        return arr;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13899,"user_id":null,"body":"component {\n    array function digitize(required numeric n) {\n        s = toString(n);\n        rs = reverse(s);\n        l = listToArray(rs, \"\");\n        return l;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13900,"user_id":null,"body":"component {\n    array function digitize(required numeric n) {\n        return numberFormat(n,'0').listtoArray(\"\").reverse();\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13901,"user_id":645,"body":"component {\n    array function digitize(required numeric n) {\n        return reverse(n).listToArray(\"\")\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13902,"user_id":null,"body":"component {\n    array function digitize(required numeric n) {\n        return javaCast(\"string\",n).listToArray(\"\").reverse();\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13903,"user_id":527,"body":"component {\n    array function digitize(required numeric n) {\n        var ds = [];\n        do {\n            ds.append(n % 10);\n            n = int(n \/ 10);\n        } while (n != 0)\n        return ds;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13904,"user_id":76,"body":"component {\n    array function digitize(required numeric n) {\n        return ('' & n).listToArray('').reverse().map((c) => val(c));\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"558fa34727c2d274c10000ae":[{"id":13905,"user_id":null,"body":"component {\n\n    variables.$dict = {  \n      \"E\":1, \"A\":1, \"I\":1, \"O\":1, \"N\":1, \"R\":1, \"T\":1, \n      \"L\":1, \"S\":1, \"U\":1, \"D\":2, \"G\":2, \"B\":3, \"C\":3, \n      \"M\":3, \"P\":3, \"F\":4, \"H\":4 ,\"V\":4, \"W\":4, \"Y\":4,\n      \"K\":5, \"J\":8, \"X\":8, \"Q\":10 , \"Z\":10\n    };\n\t\n    function scrabbleScore(str){\n        return str.listToArray( '' ).map( ( l ) => $dict[ l ] ?: 0 ).sum();\n    }\n\t\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13906,"user_id":null,"body":"component {\n\n    variables.$dict = {  \n      \"E\":1, \"A\":1, \"I\":1, \"O\":1, \"N\":1, \"R\":1, \"T\":1, \n      \"L\":1, \"S\":1, \"U\":1, \"D\":2, \"G\":2, \"B\":3, \"C\":3, \n      \"M\":3, \"P\":3, \"F\":4, \"H\":4 ,\"V\":4, \"W\":4, \"Y\":4,\n      \"K\":5, \"J\":8, \"X\":8, \"Q\":10 , \"Z\":10\n    };\n\t\n    function scrabbleScore(str){\n        return str.listToArray(\"\").map((c) => $dict[c] ?: 0).sum();\n    }\n\t\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13907,"user_id":53,"body":"component {\n    variables.$dict = {  \n      \"E\":1, \"A\":1, \"I\":1, \"O\":1, \"N\":1, \"R\":1, \"T\":1, \n      \"L\":1, \"S\":1, \"U\":1, \"D\":2, \"G\":2, \"B\":3, \"C\":3, \n      \"M\":3, \"P\":3, \"F\":4, \"H\":4 ,\"V\":4, \"W\":4, \"Y\":4,\n      \"K\":5, \"J\":8, \"X\":8, \"Q\":10 , \"Z\":10\n    };\n    function scrabbleScore(s) {\n        return listToArray(s, \"\").reduce((acc,e) => acc + ($dict[e] ?: 0), 0);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13908,"user_id":null,"body":"component {\n\n    variables.$dict = {  \n      \"E\":1, \"A\":1, \"I\":1, \"O\":1, \"N\":1, \"R\":1, \"T\":1, \n      \"L\":1, \"S\":1, \"U\":1, \"D\":2, \"G\":2, \"B\":3, \"C\":3, \n      \"M\":3, \"P\":3, \"F\":4, \"H\":4 ,\"V\":4, \"W\":4, \"Y\":4,\n      \"K\":5, \"J\":8, \"X\":8, \"Q\":10 , \"Z\":10\n    };\n\t\n    function scrabbleScore(str){\n        var score = 0;\n        for(i=1;i<=str.length();i++){\n            var c = UCase(str[i]);\n            if($dict.containsKey(c)){\n                score += $dict[c];\n            }\n        }                  \n        return score;\n    }\n\t\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13909,"user_id":null,"body":"component {\n\n    variables.$dict = {  \n      \"E\":1, \"A\":1, \"I\":1, \"O\":1, \"N\":1, \"R\":1, \"T\":1, \n      \"L\":1, \"S\":1, \"U\":1, \"D\":2, \"G\":2, \"B\":3, \"C\":3, \n      \"M\":3, \"P\":3, \"F\":4, \"H\":4 ,\"V\":4, \"W\":4, \"Y\":4,\n      \"K\":5, \"J\":8, \"X\":8, \"Q\":10 , \"Z\":10\n    };\n\t\n    function scrabbleScore(str){\n        \n        var sum = 0;\n        s = Replace(str, \" \", \"\", \"ALL\")\n        \n        for (i=0; i < s.length();i++) {\n            var actualC = s.charAt(i);\n            sum = sum + $dict.get(actualC);\n        }\n        return sum;\n \n    }\n\t\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13910,"user_id":null,"body":"component {\n\n    variables.$dict = {  \n      \"E\":1, \"A\":1, \"I\":1, \"O\":1, \"N\":1, \"R\":1, \"T\":1, \n      \"L\":1, \"S\":1, \"U\":1, \"D\":2, \"G\":2, \"B\":3, \"C\":3, \n      \"M\":3, \"P\":3, \"F\":4, \"H\":4 ,\"V\":4, \"W\":4, \"Y\":4,\n      \"K\":5, \"J\":8, \"X\":8, \"Q\":10 , \"Z\":10, ' ': 0\n    };\n\t\n      function scrabbleScore(str){\n\n        score = 0\n        for ( i = 1; i <= str.len() ; i++){\n            var currLetter = mid(str, i, 1);\n            score += $dict[currLetter]\n        } \n        return score\n    }\n\t\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13911,"user_id":null,"body":"component {\n\n    variables.$dict = {  \n      \"E\":1, \"A\":1, \"I\":1, \"O\":1, \"N\":1, \"R\":1, \"T\":1, \n      \"L\":1, \"S\":1, \"U\":1, \"D\":2, \"G\":2, \"B\":3, \"C\":3, \n      \"M\":3, \"P\":3, \"F\":4, \"H\":4 ,\"V\":4, \"W\":4, \"Y\":4,\n      \"K\":5, \"J\":8, \"X\":8, \"Q\":10 , \"Z\":10\n    };\n\t\n    function scrabbleScore(str){       \n     sum = 0;\n     noWhitespaceStr = replace(str, \" \", \"\", \"all\");\n     for(i = 1; i < noWhitespaceStr.length()+1; i++){\n        currChar = mid(noWhitespaceStr, i, 1);\n        sum += $dict[currChar];\n     }\n     return sum;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13912,"user_id":null,"body":"component {\n\n    variables.$dict = {  \n      \"E\":1, \"A\":1, \"I\":1, \"O\":1, \"N\":1, \"R\":1, \"T\":1, \n      \"L\":1, \"S\":1, \"U\":1, \"D\":2, \"G\":2, \"B\":3, \"C\":3, \n      \"M\":3, \"P\":3, \"F\":4, \"H\":4 ,\"V\":4, \"W\":4, \"Y\":4,\n      \"K\":5, \"J\":8, \"X\":8, \"Q\":10 , \"Z\":10\n    };\n\t\n    function scrabbleScore(str){\n        var score = 0;\n        var character;\n        \n        for (var i = 1; i <= len(arguments.str); i++) {\n            local.character = mid(str, i, 1);\n            if (structKeyExists(variables.$dict, local.character)) {\n                local.score += variables.$dict[local.character];\n            }\n        }\n        \n        return local.score;\n    }\n\t\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13913,"user_id":20,"body":"component {\n\n    variables.$dict = {  \n      \"E\":1, \"A\":1, \"I\":1, \"O\":1, \"N\":1, \"R\":1, \"T\":1, \n      \"L\":1, \"S\":1, \"U\":1, \"D\":2, \"G\":2, \"B\":3, \"C\":3, \n      \"M\":3, \"P\":3, \"F\":4, \"H\":4 ,\"V\":4, \"W\":4, \"Y\":4,\n      \"K\":5, \"J\":8, \"X\":8, \"Q\":10 , \"Z\":10\n    };\n\t\n    function scrabbleScore(str){\n        var r=0;\n        var s=UCase(str);\n        for(i=1; i<=Len(s); i++){\n            var key=Mid(s, i, 1);\n            if(StructKeyExists(variables.$dict, key))\n                r+=variables.$dict[key];}\n        return r;\n    }\n\t\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13914,"user_id":null,"body":"component {\n\n    variables.$dict = {  \n      \"E\":1, \"A\":1, \"I\":1, \"O\":1, \"N\":1, \"R\":1, \"T\":1, \n      \"L\":1, \"S\":1, \"U\":1, \"D\":2, \"G\":2, \"B\":3, \"C\":3, \n      \"M\":3, \"P\":3, \"F\":4, \"H\":4 ,\"V\":4, \"W\":4, \"Y\":4,\n      \"K\":5, \"J\":8, \"X\":8, \"Q\":10 , \"Z\":10\n    };\n\t\n    function scrabbleScore(str){\n        score = 0;\n        arrayEach(trim(str).split(''), function(c){\n            score += $dict[c] ?:0;\n        });\n        return score;\n    }\t\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"55cbc3586671f6aa070000fb":[{"id":13915,"user_id":null,"body":"component {\n    boolean function checkForFactor( required numeric base, required numeric factor ) {\n        return !base%factor;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13916,"user_id":null,"body":"component {\n    boolean function checkForFactor( required numeric base, required numeric factor ) {\n        return (base % factor == 0) ? true : false;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13917,"user_id":76,"body":"component {\n    boolean function checkForFactor( required numeric base, required numeric factor ) {\n        return base % factor == 0;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13918,"user_id":null,"body":"component {\n    boolean function checkForFactor( required numeric base, required numeric factor ) {\n        check = false;\n        remainder = base % factor;\n        if( remainder == 0 ){\n            check = true;\n        }\n        return check;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13919,"user_id":null,"body":"component {\n    boolean function checkForFactor( required numeric base, required numeric factor ) {\n            if (base % factor == 0) {\n        return true\n    } else {\n        return false\n    }\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13920,"user_id":null,"body":"component {\n    boolean function checkForFactor( required numeric base, required numeric factor ) {\n         if ( factor EQ 0 ) { return false; } \/\/ Prevent Divide by Zero\n         return ( base % factor > 0 ) ?  false : true;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"55d24f55d7dd296eb9000030":[{"id":13921,"user_id":null,"body":"component {\n    numeric function summation(required numeric n) {\n        return n * (n + 1) \/ 2;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13922,"user_id":564,"body":"component {\n    numeric function summation(required numeric n) {\n        sum = 0\n        for (i = 1; i <= n; i++) {\n            sum += i\n        }\n        return sum\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13923,"user_id":null,"body":"component {\n    numeric function summation(required numeric n) {\n        return n == 0? 0 : n + summation(n - 1);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13924,"user_id":null,"body":"component {\n    numeric function summation(required numeric n) {\n        return n == 0? n: n + summation(n - 1);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13925,"user_id":null,"body":"component {\n    numeric function summation(required numeric n) {\n        \/\/ your code here\n        sum = 0;\n        index = 0;\n        while (index <= n){\n            sum = sum + index;\n            index ++;\n        }\n        return sum;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13926,"user_id":null,"body":"component {\n    numeric function summation(required numeric num) {\n        return (1+num) * num \/ 2;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13927,"user_id":null,"body":"component {\n    numeric function summation(required numeric n) {\n        var sum = 0;\n        for(var i=0; i<=n;i++){\n          \n            sum += i;\n        }\n        \n        return sum;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13928,"user_id":null,"body":"component {\n    numeric function summation(required numeric n) {\n        var sum = 0;\n        while(n > 0) {\n            sum += n; n--;\n        }\n        return sum;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13929,"user_id":null,"body":"component {\n    numeric function summation(required numeric n) {\n        var total=0;\n        var x=1;\n        while(x lte n){\n            total=total+x;\n            x=incrementValue(x);\n        }\n        return total;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13930,"user_id":null,"body":"component {\n    numeric function summation(required numeric n) {\n        var r=i=0\n        while( ++i <= n ) {\n            r+=i\n        }\n        return r\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"55f73be6e12baaa5900000d4":[{"id":13931,"user_id":null,"body":"component {\n\n    function goals( laLigaGoals, copaDelReyGoals, championsLeagueGoals ) {\n        return arraySum( arguments );\n    }\n\n}\n","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13932,"user_id":null,"body":"component {\n\n  function goals( laLigaGoals, copaDelReyGoals, championsLeagueGoals ) {\n    return arguments.reduce( ( sum, key, value ) => sum + value, 0);\n  }\n  \n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13933,"user_id":479,"body":"component {\n\n  function goals( l, c, v ) {\n    return l + c + v;\n  }\n  \n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13934,"user_id":2503,"body":"component {\n\n  function goals( a, b, c ) {\n    return a + b + c;\n  }\n  \n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13935,"user_id":76,"body":"component {\n  function goals( laLigaGoals, copaDelReyGoals, championsLeagueGoals ) {\n    return [laLigaGoals, copaDelReyGoals, championsLeagueGoals].sum();\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13936,"user_id":null,"body":"component {\n  function goals(ll, cdr, cl) {\n    return ll + cdr + cl\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13937,"user_id":null,"body":"component {\n\n  function goals( laLigaGoals, copaDelReyGoals, championsLeagueGoals ) {\n    total = laLigaGoals + copaDelReyGoals + championsLeagueGoals;\n    return total;\n  }\n  \n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13938,"user_id":null,"body":"component {\n\n  function goals( laLigaGoals, copaDelReyGoals, championsLeagueGoals ) {\n    \/\/ your code here...\n      Totalgoals=laLigaGoals+copaDelReyGoals+championsLeagueGoals;\n      return Totalgoals;\n  }\n  \n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13939,"user_id":null,"body":"component {\n\n  function goals( laLigaGoals, copaDelReyGoals, championsLeagueGoals ) {\n      \n      goals = [arguments.laLigaGoals, arguments.copaDelReyGoals, arguments.championsLeagueGoals]\n      \n      return goals.sum();\n  }\n  \n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13940,"user_id":null,"body":"component {\n\n  function goals( laLigaGoals, copaDelReyGoals, championsLeagueGoals ) {\n    return arguments.reduce((acc,k,x)=> acc + x,0);\n  }\n  \n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"55f9b48403f6b87a7c0000bd":[{"id":13941,"user_id":null,"body":"component {\n    paperwork = (n, m) => n > 0 && m > 0 ? n * m : 0;\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13942,"user_id":null,"body":"component {\n    function paperwork(n, m) {\n        return max(n,0)*max(m,0);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13943,"user_id":null,"body":"component {\n    function paperwork(n, m) {\n        if (n < 0) n = 0;\n        if (m < 0) m = 0;\n        return n * m;      \n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13944,"user_id":1566,"body":"component {\n    function paperwork(n, m) {\n        return n<0 || m<0 ? 0 : n*m;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13945,"user_id":null,"body":"component\n{\nfunction paperwork(n, m)\n{\nvar n1 = n * -1;\nvar m1 = m * -1;\nvar n1check = 0;\nvar m1check = 0;\nvar total = 0;\nvar neg = 0;\nif (n1 >= 0)\n{\nn1check = 1;\n}\nif (m1 >= 0)\n{\nm1check = 1;\n}\nif (n1check == 1)\n{\nneg = 1;\n}\nif (m1check == 1)\n{\nneg = 1;\n}\nif (neg == 1)\n{\nreturn 0;\n}\nif (neg == 0)\n{\ntotal = n * m;\n}\nreturn total;\n}\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13946,"user_id":null,"body":"component {\n    function paperwork(n, m) {\n        if ( min( n, m ) < 0 ) return 0;\n        return n * m;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13947,"user_id":76,"body":"component {\n    paperwork = (n, m) => max(n, 0) * max(m, 0);\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13948,"user_id":null,"body":"component {\n    function paperwork(n, m) {\n        return (n <= 0 || m <= 0) ? 0 : n * m; \n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13949,"user_id":48,"body":"component {\n    function paperwork(n, m) {\n        return (n < 1 || m < 1) ? 0 : n * m;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13950,"user_id":50,"body":"component {\n    function paperwork(n, m) {\n          return m<0||n<0?0:m*n;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"55f9bca8ecaa9eac7100004a":[{"id":13951,"user_id":713,"body":"component {\n    numeric function past(required numeric h, required numeric m, required numeric s) {\n        return 1000 * (s + 60 * (m + 60 * h));\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13952,"user_id":null,"body":"component {\n    numeric function past(required numeric h, required numeric m, required numeric s) {\n        h *= 60 * 60;\n        m *= 60;\n        return (h + m + s) * 1000;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13953,"user_id":492,"body":"component {\n    numeric function past(required numeric h, required numeric m, required numeric s) {\n        return 3600000 * h + 60000 * m + 1000 * s\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13954,"user_id":null,"body":"component {\n    numeric function past(required numeric h, required numeric m, required numeric s) {\n        return 1000 * (h * 3600 + m * 60 + s);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13955,"user_id":50,"body":"component {\n    numeric function past(required numeric h, required numeric m, required numeric s) {\n        return (s+60*(m+60*h))*1000;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13956,"user_id":null,"body":"component {\n    numeric function past(required numeric h, required numeric m, required numeric s) {\n        \n        s1 = s*1000\n        m1 = m*60*1000\n        h1 = h*60*60*1000\n        \n        return result = s1+m1+h1\n    \n        \/\/ your code here\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13957,"user_id":53,"body":"component {\n    numeric function past(required numeric h, required numeric m, required numeric s) {\n       return (h*60*60+m*60+s)*1000;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13958,"user_id":null,"body":"component {\n    numeric function past(required numeric h, required numeric m, required numeric s) {\n       return (3600 * h + 60 * m + s) * 1000;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13959,"user_id":null,"body":"component {\n    numeric function past(required numeric h, required numeric m, required numeric s) {\n        return round(createtimespan(0,h,m,s) * 24 * 60 * 60 * 1000);\n        \/\/ your code here\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13960,"user_id":null,"body":"component {\n    numeric function past(required numeric h, required numeric m, required numeric s) {\n        return round( createTimeSpan( 0, h, m, s ) * 86400000 )\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"55fab1ffda3e2e44f00000c6":[{"id":13961,"user_id":527,"body":"component {\n\n    function cockroachSpeed(numeric s) {\n        return floor(s \/ 0.036);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13962,"user_id":null,"body":"component {\n    function cockroachSpeed( numeric s ){\n        return Floor(s \/ 0.036)\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13963,"user_id":713,"body":"component {\n\n    function cockroachSpeed( numeric s ){\n        return int(s \/ 0.036);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13964,"user_id":null,"body":"component {\n\n    function cockroachSpeed( numeric s ){\n        km = s;\n        mph = s * 27.77777778;\n        return floor(mph);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13965,"user_id":null,"body":"component {\n\n    function cockroachSpeed( numeric s ){\n        \/\/ Your code here...\n        return floor(s * 1000\/36);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13966,"user_id":53,"body":"component {\n    function cockroachSpeed( numeric s ){\n        return (100000*s) \\ 3600;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13967,"user_id":null,"body":"component {\n\n    function cockroachSpeed( numeric s ){\n        return Floor(s * 250 \/ 9);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13968,"user_id":null,"body":"component {\n\n    function cockroachSpeed( numeric s ){\n        return floor(s*27.778);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13969,"user_id":null,"body":"component {\n\n    function cockroachSpeed( numeric s ){\n        \/\/ Your code here...\n        return int(s * (100000\/3600))\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13970,"user_id":null,"body":"component {\n\n    function cockroachSpeed( numeric s ){\n        echo(s * 100000 \/ 3600);\n        return floor(s * 100000 \/ 3600 )\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"55fd2d567d94ac3bc9000064":[{"id":13971,"user_id":null,"body":"component {\n    numeric function row_sum_odd_numbers(required numeric n) {\n        \/\/ your code here\n        return n*n*n;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13972,"user_id":645,"body":"component {\n    numeric function row_sum_odd_numbers(required numeric n) {\n        return n ^ 3;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13973,"user_id":null,"body":"component {\n    numeric function row_sum_odd_numbers(required numeric n) {\n        var sum = 0;\n        var start = 1;\n        for(i=0;i<n;i++){\n            start = start+(2*i);\n        }\n        for(i=0;i<n;i++){\n            sum = sum + (start + (2*i));\n        }\n        return sum;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13974,"user_id":null,"body":"component {\n    numeric function row_sum_odd_numbers(required numeric n) {\n        var oddNum = 1;\n        var oddArr = [1];\n        for(i=1;i <= n; i++){\n            if(i != 1)\/\/already prepopulated\n            for(ii=1;ii <= i; ii++){\n                oddNum += 2;\n                oddArr.append(oddNum);\n            }\n        }\n        oddArr = oddArr.slice(ArrayLen(oddArr)-n+1,n)\n        return oddArr.sum();\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13975,"user_id":null,"body":"component {\n    numeric function row_sum_odd_numbers(required numeric n) {\n        value = 1;\n        for(row = 1; row <= n; row++){\n            rowsum = 0; \n            for(numberinrow = 1; numberinrow <= row; numberinrow++){\n                rowsum += value;\n                value += 2;\n            }\n            if(row EQ n){\n                return rowsum;\n            }\n        }\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13976,"user_id":1703,"body":"component {\n    numeric function row_sum_odd_numbers(required numeric n) {\n        return n * n * n;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13977,"user_id":null,"body":"component {\n    numeric function row_sum_odd_numbers(required numeric n) {\n        \/\/ your code here\n        var startNumber = n * (n-1)+1;\n        var numberArray = ArrayNew(1);\n        var loopNumber = n;\n        while(n>0){\n            var numberToAdd = startNumber;\n            ArrayAppend(numberArray, startNumber);\n            startNumber = startNumber + 2;\n            n--;\n        }\n        var total = ArraySum(numberArray);\n        return total;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13978,"user_id":null,"body":"component {\n    numeric function row_sum_odd_numbers(required numeric n) {\n        var maxIdx = n * (n+1)\/2;\n        var minIdx = maxIdx - n;\n        var num = 1;\n        var sum = 0;\n        for(var i = 1; i <= maxIdx; i++){\n         if(i > minIdx) sum += num;\n         num += 2;\n        }\n        return sum;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13979,"user_id":null,"body":"component {\n    numeric function row_sum_odd_numbers(required numeric n) {\n        var tot = 0;\n        var start = (n * n) - n + 1;\n        for (var i = 1; i <= n; i++) {\n            tot += start;\n            start += 2;\n        }\n        return tot;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13980,"user_id":null,"body":"component {\n    numeric function row_sum_odd_numbers(required numeric n) {\n        var left = (n*(n-1)) + 1;\n        return [].set(1, n, 0)\n            .map((el, i) => left + ((i-1)*2))\n            .reduce((acc, el) => acc +el, 0);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"563a631f7cbbc236cf0000c2":[{"id":13981,"user_id":null,"body":"component {\n    numeric function move(required numeric p, required numeric r) {\n        return r * 2 + p;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13982,"user_id":null,"body":"component {\n    numeric function move(required numeric a, required numeric b) {\n        return b == 0? a: move(a + 2, b - 1);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13983,"user_id":null,"body":"component {\n    numeric function move(required numeric a, required numeric b) {\n        return b == 0? a: 2 + move(a, b - 1);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13984,"user_id":76,"body":"component {\n    move = (p, r) => p + 2 * r\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13985,"user_id":527,"body":"component {\n    numeric function move(required numeric p, required numeric r) {\n        return p + r * 2;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13986,"user_id":null,"body":"component {\n    numeric function move(required numeric p, required numeric r) {\n        return (p+2*r);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13987,"user_id":645,"body":"component {\n    move = (p, r) => p + r * 2\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"567bed99ee3451292c000025":[{"id":13988,"user_id":null,"body":"component {\n\n    function isVowel( string str ) {\n        return str.reFindNoCase( \"^[aeiou]$\" );\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13989,"user_id":76,"body":"component {\n    function isVowel(string str) {\n         return REFindNoCase(\"^[aeiou]$\", str);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13990,"user_id":null,"body":"component {\n\n    function isVowel( string str ) {\n     \/\/ Your code here...\n        return StringLen(str) == 1 && ArrayContains(['a', 'e', 'i', 'o', 'u'], LCase(str));\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13991,"user_id":null,"body":"component {\n\n    function isVowel( string str ) {\n        var found = REFindNoCase(\"^[aeiou]$\", str);\n        if (found != 0)\n            return true;\n        return false;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13992,"user_id":null,"body":"component {\n\n    function isVowel( string str ) {\n        if ( len(str) == 0 ) {\n            return false;\n        }\n        else if ( len(str) > 1 ){\n            return false;\n        }\n        else {\n            var list = \"a,e,i,o,u,A,E,I,O,U\".split(\",\");\n            for(item in list) {\n                if ( str == item ) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13993,"user_id":null,"body":"component {\n\n    function isVowel( string str = \"\" ) {\n        return str.REFind( \"^[aeiouAEIOU]$\" ) > 0;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13994,"user_id":null,"body":"component {\n\n    function isVowel( string str ) {\n     \/\/ Your code here...\n        return str.REFind( \"^[aeiouAEIOU]$\" ) > 0;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13995,"user_id":null,"body":"component {\n\n    function isVowel( string str ) {\n        if (len(str) > 1) return false;\n        if (len(str) < 1) return false;\n        return REFind(\"[aeiouAEIOU]\", str);\n     \/\/ Your code here...\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13996,"user_id":null,"body":"component {\n\n    function isVowel( string str ) {\n        if (len(str) > 1)\n            return false;\n        return reFindNoCase(\"[aeiou]\", str);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13997,"user_id":null,"body":"component {\n\n    function isVowel( string str ) {\n    \n        return str.refindnocase('^[aeiou]{1}$');\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"56bc28ad5bdaeb48760009b0":[{"id":13998,"user_id":null,"body":"component {\n\n    function remove_char( string str ) {\n        \/\/ I write code professionally to be easy to comprehend not be fancy or clever - Experience Talking\n         return Mid(str, 2, len(str)-2);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":13999,"user_id":76,"body":"component {\n    string function remove_char( required string str ) {\n        return str.substring(1, str.length() - 1);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14000,"user_id":null,"body":"component {\n\n    function remove_char( string str ) {\n        return mid(str, 2, Len(str) - 2)\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14001,"user_id":null,"body":"component {\n\n    function remove_char( string str ) {\n        return Mid(str, 2, len(str)-2);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14002,"user_id":53,"body":"component {\n    function remove_char( string str ) {\n        return RemoveChars(RemoveChars(str, str.len(), 1), 1, 1)\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14003,"user_id":null,"body":"component {\n\n    function remove_char( string str ) {\n               var mutatedStr = remove_char(str, 1, 1);\n        return mutatedStr = remove_char(mutatedStr, mutatedStr.len(), 1);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14004,"user_id":null,"body":"component {\n\n    function remove_char( string str ) {\n        return str.remove_char(str.len(),1).remove_char(1,1);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14005,"user_id":null,"body":"component {\n\n  remove_char = ( string str ) => listToArray(str,'').slice(2,str.len()-2).toList('')\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14006,"user_id":null,"body":"component {\n    function remove_char( string str ) {\n        return mid(str, 2, abs(len(str)-2) );\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14007,"user_id":1566,"body":"component {\n\n    function remove_char( string str ) {\n        return mid(str,2,len(str)-2);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"56bdd0aec5dc03d7780010a5":[{"id":14008,"user_id":53,"body":"component {\n    numeric function nextHigher(required numeric n) {\n        var r = BitAnd(n, -n);\n        var p = n + r;\n        var q = BitXor(n, p) \/ (4 * r);\n        return BitOr(p, q);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14009,"user_id":null,"body":"component {\n\n    numeric function nextHigher(required numeric n) {        \n        var num = oneCount(n);\n        var x = n + 1;\n        \n        while(oneCount(x) != num){\n            x++;\n        }\n        \n        return x;\n    }\n    \n    private numeric function oneCount(required numeric n){\n        return ListValueCount(FormatBaseN(n, 2), \"1\", \"\");\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14010,"user_id":53,"body":"component {\n    numeric function nextHigher(required numeric n) {\n      if (n == 0) {\n          return 0;\n      }\n      var r = 0;\n      var p = 0;\n      var q = 0;\n      var m = 0;\n      r = BitAnd(n, -n);\n      p = n + r;\n      q = BitXor(n, p);\n      q = q \/ r;\n      q = q \/ 4;\n      m = BitOr(p, q);\n      return m;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14011,"user_id":20,"body":"component {\n    function good(s)\n    {\n        return 10&ArrayToList(listToArray(s, \"\", false, true).sort(function (a, b){return Compare(a, b);}), \"\");\n    }\n    numeric function nextHigher(required numeric n) {\n        var s=FormatBaseN(n, 2);\n        for(var i=len(s)-1; i>0; i--)\n            if(s.charAt(i)=='1'&&s.charAt(i-1)=='0')\n                return InputBaseN(s.substring(0, i-1)&good(s.substring(i+1)), 2);\n        return InputBaseN(good(s.substring(1)), 2);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14012,"user_id":645,"body":"component {\n    numeric function nextHigher(required numeric n) {\n        var o = bitAnd(n, -n);\n        var v = n + o;\n        var p = bitShrn(bitXor(n, v) \\ o, 2);\n        return n == 0 ? 0 : bitOr(v, p);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"56c5847f27be2c3db20009c3":[{"id":14013,"user_id":null,"body":"component {\n    fruit = [\n        \"kiwi\"\n        , \"pear\"\n        , \"kiwi\"\n        , \"banana\"\n        , \"melon\"\n        , \"banana\"\n        , \"melon\"\n        , \"pineapple\"\n        , \"apple\"\n        , \"pineapple\"\n        , \"cucumber\"\n        , \"pineapple\"\n        , \"cucumber\"\n        , \"orange\"\n        , \"grape\"\n        , \"orange\"\n        , \"grape\"\n        , \"apple\"\n        , \"grape\"\n        , \"cherry\"\n        , \"pear\"\n        , \"cherry\"\n        , \"pear\"\n        , \"kiwi\"\n        , \"banana\"\n        , \"kiwi\"\n        , \"apple\"\n        , \"melon\"\n        , \"banana\"\n        , \"melon\"\n        , \"pineapple\"\n        , \"melon\"\n        , \"pineapple\"\n        , \"cucumber\"\n        , \"orange\"\n        , \"apple\"\n        , \"orange\"\n        , \"grape\"\n        , \"orange\"\n        , \"grape\"\n        , \"cherry\"\n        , \"pear\"\n        , \"cherry\"\n        , \"pear\"\n        , \"apple\"\n        , \"pear\"\n        , \"kiwi\"\n        , \"banana\"\n        , \"kiwi\"\n        , \"banana\"\n        , \"melon\"\n        , \"pineapple\"\n        , \"melon\"\n        , \"apple\"\n        , \"cucumber\"\n        , \"pineapple\"\n        , \"cucumber\"\n        , \"orange\"\n        , \"cucumber\"\n        , \"orange\"\n        , \"grape\"\n        , \"cherry\"\n        , \"apple\"\n        , \"cherry\"\n        , \"pear\"\n        , \"cherry\"\n        , \"pear\"\n        , \"kiwi\"\n        , \"pear\"\n        , \"kiwi\"\n        , \"banana\"\n        , \"apple\"\n        , \"banana\"\n        , \"melon\"\n        , \"pineapple\"\n        , \"melon\"\n        , \"pineapple\"\n        , \"cucumber\"\n        , \"pineapple\"\n        , \"cucumber\"\n        , \"apple\"\n        , \"grape\"\n        , \"orange\"\n        , \"grape\"\n        , \"cherry\"\n        , \"grape\"\n        , \"cherry\"\n        , \"pear\"\n        , \"cherry\"\n        , \"apple\"\n        , \"kiwi\"\n        , \"banana\"\n        , \"kiwi\"\n        , \"banana\"\n        , \"melon\"\n        , \"banana\"\n        , \"melon\"\n        , \"pineapple\"\n        , \"apple\"\n        , \"pineapple\"\n    ];\n    \n    string function subtractSum(required numeric n) {\n        var done = false;\n        var newValue = n;\n        while ( done == false ) {\n            var digits = fix( newValue ).toString().listToArray( '' );\n            var numberSum = digits.reduce( ( sum, element ) => {\n                return sum + element;\n            }, 0 );\n            var newValue = newValue - numberSum;\n            if ( newValue <= 100 ) {\n                return fruit[ newValue ];\n            }\n        }\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14014,"user_id":null,"body":"component {\n    string function subtractSum(required numeric n) {\n        do {\n            n = n-listToarray( n, '' ).sum()\n        } while ( n > 100 )\n            \n        return fruit[n]\n        \n    }\n    \n    fruit = ['kiwi','pear','kiwi','banana','melon','banana','melon','pineapple','apple','pineapple','cucumber','pineapple','cucumber','orange','grape','orange','grape','apple','grape','cherry','pear','cherry','pear','kiwi','banana','kiwi','apple','melon','banana','melon','pineapple','melon','pineapple','cucumber','orange','apple','orange','grape','orange','grape','cherry','pear','cherry','pear','apple','pear','kiwi','banana','kiwi','banana','melon','pineapple','melon','apple','cucumber','pineapple','cucumber','orange','cucumber','orange','grape','cherry','apple','cherry','pear','cherry','pear','kiwi','pear','kiwi','banana','apple','banana','melon','pineapple','melon','pineapple','cucumber','pineapple','cucumber','apple','grape','orange','grape','cherry','grape','cherry','pear','cherry','apple','kiwi','banana','kiwi','banana','melon','banana','melon','pineapple','apple','pineapple'];\n    \n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14015,"user_id":null,"body":"component {\n    string function subtractSum(required numeric n) {\n        \n        fruits = [\n            \"kiwi\", \"pear\", \"kiwi\", \"banana\", \"melon\", \"banana\", \"melon\", \"pineapple\", \"apple\", \"pineapple\", \n            \"cucumber\", \"pineapple\",\"cucumber\", \"orange\", \"grape\", \"orange\", \"grape\", \"apple\", \"grape\", \"cherry\", \n            \"pear\", \"cherry\", \"pear\", \"kiwi\", \"banana\", \"kiwi\", \"apple\", \"melon\", \"banana\", \"melon\",\n            \"pineapple\", \"melon\", \"pineapple\", \"cucumber\", \"orange\", \"apple\", \"orange\", \"grape\", \"orange\", \"grape\", \n            \"cherry\", \"pear\", \"cherry\", \"pear\", \"apple\", \"pear\", \"kiwi\", \"banana\", \"kiwi\", \"banana\",\n            \"melon\", \"pineapple\", \"melon\", \"apple\", \"cucumber\", \"pineapple\", \"cucumber\", \"orange\", \"cucumber\", \"orange\", \n            \"grape\", \"cherry\", \"apple\", \"cherry\", \"pear\", \"cherry\", \"pear\", \"kiwi\", \"pear\",\n            \"kiwi\", \"banana\", \"apple\", \"banana\", \"melon\", \"pineapple\", \"melon\",\n            \"pineapple\", \"cucumber\", \"pineapple\", \"cucumber\", \"apple\", \"grape\", \"orange\",\n            \"grape\", \"cherry\", \"grape\", \"cherry\", \"pear\", \"cherry\", \"apple\",\n            \"kiwi\", \"banana\", \"kiwi\", \"banana\", \"melon\", \"banana\", \"melon\", \"pineapple\", \"apple\", \"pineapple\" \n        ] ;\n\n        var i = n - listToArray(n,\"\").sum() ;\n        \n        while ( i > 100 ) {\n            i = i - listToArray(i,\"\").sum()\n        }\n        \n        return fruits[i] ;\n        \n    }\n    \n}\n\n\n\n\n","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14016,"user_id":76,"body":"component {\n    string function subtractSum( required numeric n ) {\n        return \"apple\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14017,"user_id":645,"body":"component {\n    subtractSum = (_) => 'apple'\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14018,"user_id":645,"body":"component {\n    subtractSum = (_) => 'apple'\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"56dec885c54a926dcd001095":[{"id":14019,"user_id":527,"body":"component {\n    function opposite(required numeric number) {\n        return -number;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14020,"user_id":76,"body":"component {\n    numeric function opposite(required numeric number) {\n        return -number;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14021,"user_id":null,"body":"component {\n    function opposite(required numeric number) {\n        return -1 * number;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14022,"user_id":1566,"body":"component {\n    opposite=(number)=>-number;\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14023,"user_id":390,"body":"component {\n    function opposite(required numeric number) {\n    return 0-number\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14024,"user_id":null,"body":"component {\n    function opposite(number) {\n    return number * (-1);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14025,"user_id":null,"body":"component {\n    function opposite(required numeric number) {\n        number = number * -1; \n    return number; \n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14026,"user_id":null,"body":"component {\n    function opposite(required numeric number) {\n    \n    return (sgn(number) == 1 ? number * -1 : sgn(number) == -1 ? abs(number) : 0)\n    \n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14027,"user_id":null,"body":"component {\n    function opposite(required numeric number) {\n        return number * -1;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"56f173a35b91399a05000cb7":[{"id":14028,"user_id":null,"body":"component {\n\n    function findLongest(required String str) {\n      return str\n        .listToArray(\" \")\n        .reduce( function(prev,el) {\n            return max( prev, el.len() ) ;\n        },0);\n    }    \n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14029,"user_id":null,"body":"component {\n\n    findLongest = (str) => listToArray(str,\" \").reduce((lg,x) => x.len() > lg ? x.len() : lg, 0)\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14030,"user_id":53,"body":"component {\n\n    function findLongest(str) {\n      \n      var spl = str.listToArray(\" \");\n      var longest = 0;\n      \n      for (x in spl) {\n        if (x.len() > longest) {\n          longest = x.len();\n        }\n      }\n    \n      return longest;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14031,"user_id":null,"body":"component {\n\n  function findLongest(str) {\n\n    var spl = listToArray(str, \" \");\n    var longest = 0;\n\n    for (var i = 1; i <= spl.len(); i++) {\n      if (spl[i].len() > longest) {\n        longest = spl[i].len();\n      }\n    }\n    return longest;\n  }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14032,"user_id":1566,"body":"component {\n    number function findLongest(string str) {\n        return str.listtoarray(' ').map((x)=>len(x)).max();\n    }    \n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14033,"user_id":null,"body":"component {\n    findLongest = (str) => {\n        var meh = str.Split(' ');\n        var long = Len(meh[1]);\n        for (var i = 2; i <= ArrayLen(meh); i++)\n            if (Len(meh[i]) > long)\n                long = Len(meh[i]);\n        return long;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14034,"user_id":76,"body":"component {\n    numeric function findLongest( required string str ) {\n        return str.listToArray(\" \").map((word) => word.len()).max();\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14035,"user_id":76,"body":"component {\n    numeric function findLongest( string str ) {\n      var spl = str.listToArray(\" \");\n      var longest = 0;\n      for ( var i = 1; i <= spl.len(); i++ ) {\n        if ( spl[ i ].len() > longest ) {\n          longest = spl[ i ].len();\n        }\n      }\n      return longest;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14036,"user_id":null,"body":"component {\n\n    function findLongest(str) {\n      var spl = str.listToArray(\" \");\n      var longest = 0\n      \n      for (var i = 1; i <= spl.len(); i++) {\n        if (spl[i].len() > longest) {\n          longest = spl[i].len()\n        }\n      }\n        return longest\n    }\n    \n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"56fa3c5ce4d45d2a52001b3c":[{"id":14037,"user_id":53,"body":"component {\n\n    function xor( boolean a, boolean b ){\n        return BitXor(a, b);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14038,"user_id":null,"body":"component {\n\n    function xor( boolean a, boolean b ){\n        return a xor b;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14039,"user_id":null,"body":"component {\n    xor = (a, b) => a != b\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14040,"user_id":null,"body":"component {\n\n    function xor( boolean a, boolean b ){\n        return a && (not b) || b && (not a)\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14041,"user_id":null,"body":"component {\n\n    function xor( boolean a, boolean b ){\n        if (a eq b)\n            return false;\n        else\n            return true;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14042,"user_id":null,"body":"component {\n\n    function xor( boolean a, boolean b ){\n        return (a OR b) AND (!a OR !b)\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14043,"user_id":null,"body":"component {\n\n    function xor( boolean a, boolean b ){\n        return (a+b)==1?:false ;    \n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14044,"user_id":null,"body":"component {\n    xor = (a, b) => ((!a && !b) || (a && b)) ? false : true;\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14045,"user_id":null,"body":"component {\n\n    function xor( boolean a, boolean b ){\n        return bitXor(a,b);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14046,"user_id":527,"body":"component {\n    boolean function xor(required boolean a, required boolean b) {\n        return a != b;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5709bdd2f088096786000008":[{"id":14047,"user_id":null,"body":"component {\n    numeric function superSize(required numeric x) {\n        return listSort( x, 'numeric', 'desc', '' );\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14048,"user_id":1566,"body":"component {\n    superSize = (x) => ListSort(x,\"Numeric\",\"desc\",\"\");\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14049,"user_id":null,"body":"component {\n    numeric function superSize(required numeric x) {\n        x = listToArray(x, '');\n        x.sort('numeric','desc');\n        return arrayToList(x,'')\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14050,"user_id":null,"body":"component {\n    numeric function superSize(required numeric x) {\n        return listToArray(x,'').sort('numeric','desc').toList('')+0;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14051,"user_id":null,"body":"component {\n    numeric function superSize(required numeric x) {\n        return reMatch(\"\\d\", x).sort((a, b) => b-a).toList(\"\");\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14052,"user_id":null,"body":"component {\n    numeric function superSize(required numeric x) {\n        return reMatch(\"[0-9]{1}\", x).sort((a, b) => b-a).toList(\"\");\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14053,"user_id":null,"body":"component {\n    numeric function superSize(required numeric x) {\n        var str = ToString(x);\n        numArr = []\n        for (var i = 1; i <= Len(str); i++)\n            ArrayAppend(numArr, str[i]);\n        ArraySort(numArr, 'text', 'desc');\n        return ArrayToList(numArr, \"\");\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14054,"user_id":null,"body":"component {\n    numeric function superSize(required numeric x) {\n        return reReplace( x, \"(.{1})\\B\", \"\\1,\", \"ALL\").listSort( 'numeric','desc').listToArray().reduce( (a , b) => ( a & b), '');\n          \n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14055,"user_id":null,"body":"component {\n    numeric function superSize(required numeric x) {\n        return numberFormat(x,\"_\").listToArray(\"\").sort(\"numeric\",\"desc\").toList(\"\");\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14056,"user_id":null,"body":"component {\n    numeric function superSize(required numeric x) {\n        if( len( trim( x ) ) == 1 ) \n            return x;\n            \n        var inputArray = listToArray( x, '' );\n        \n        inputArray.sort( \"numeric\", \"desc\" );\n        \n        return arrayToList( inputArray, '' );\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5720a1cb65a504fdff0003e2":[{"id":14057,"user_id":1566,"body":"component {\n    array function differenceInAges( required array ages ) {\n        min = ages.min();\n        max = ages.max();\n        return [min, max, max - min];\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14058,"user_id":53,"body":"component {\n    array function differenceInAges( required array ages ) {\n        var a = ArrayMin(ages);\n        var b = ArrayMax(ages);\n        var c = b - a;\n        var x = ArrayNew(1)\n        x[1] = a;\n        x[2] = b;\n        x[3] = c;\n        return x;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14059,"user_id":null,"body":"component {\n    array function differenceInAges( required array ages ) {\n       var youngest = ages.min()\n       var oldest = ages.max()\n        return [ youngest, oldest, oldest-youngest ];\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14060,"user_id":527,"body":"component {\n    array function differenceInAges(required array ages) {\n        minAge = arrayMin(ages);\n        maxAge = arrayMax(ages);\n        return [minAge, maxAge, maxAge - minAge];\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14061,"user_id":793,"body":"component {\n    array function differenceInAges( required array ages ) {\n        x = ArrayMin(ages);\n        y = ArrayMax(ages);\n        return [x, y, y - x];\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14062,"user_id":76,"body":"component {\n    array function differenceInAges( required array ages ) {\n        return [ ages.min(), ages.max(), ages.max() - ages.min() ];\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5738f5ea9545204cec000155":[{"id":14063,"user_id":645,"body":"component {\n    numeric function countLettersAndDigits(required string input) {\n        return input.reMatchNoCase(\"[a-z\\d]\").len()\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14064,"user_id":null,"body":"component {\n    numeric function countLettersAndDigits(required string input) {\n        return input.reMatch('[A-Za-z\\d]').len();\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14065,"user_id":1566,"body":"component {\n    countLettersAndDigits=(i)=>len(rematch('(?i)[a-z0-9]',i));\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14066,"user_id":null,"body":"component {\n    numeric function countLettersAndDigits(required string input) {\n        return input.REReplace(\"[^a-zA-Z0-9]\",\"\",\"ALL\").len();\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14067,"user_id":null,"body":"component {\n    numeric function countLettersAndDigits(required string input) {\n        return input.reReplaceNoCase(\"[^0-9A-Z]+\", \"\", \"all\").len();\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14068,"user_id":null,"body":"component {\n\tnumeric function countLettersAndDigits(inString) {\n        \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\t\t\/\/\n\t\t\/\/    Init vars\n\t\t\/\/\n\t\tvar listAllowed = 'abcdefghijklmnopqrstuvwxyz1234567890';\n\t\tvar theCount = 0;\n        \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n        \/\/\n        \/\/    *Always* exception handling...\n        \/\/\n        try{\n            \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\t\t\t\/\/\n\t\t\t\/\/    Loop over string, 1 char at a time...\n\t\t\t\/\/\n\t\t\tfor (x = 1; x LTE len(inString); x = x + 1){\n                \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n                \/\/\n                \/\/    Check to see if the current char at x is in the\n                \/\/    list of allowed chars...\n                \/\/\n\t\t\t\tif(FindNoCase(mid(inString, x, 1), listAllowed)){\n                    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n                    \/\/\n                    \/\/    ...if it is, increment theCount.\n                    \/\/\n\t\t\t\t\ttheCount++;\n\t\t\t\t}\n\t\t\t}\n            \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n            \/\/\n            \/\/    Return theCount\n            \/\/\n\t\t\treturn theCount;\n\t\t}\n        catch(any e){\n            \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n            \/\/\n            \/\/    Error occurred. Write it to a log someplace...\n            \/\/\n            return -1;    \/\/    indicates a failed call\n        }\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14069,"user_id":null,"body":"component {\n    numeric function countLettersAndDigits(required string input) {\n        return len(reReplaceNoCase(lcase(arguments.input), \"[^a-z0-9]\", \"\", \"ALL\"));\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14070,"user_id":null,"body":"component {\n    numeric function countLettersAndDigits( required string string ){\n        var filteredStr = REReplace(string,\"[^0-9A-Za-z]\",\"\",\"ALL\") & ''\n        return filteredStr.len()\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14071,"user_id":null,"body":"component {\n    numeric function countLettersAndDigits(required string input) {\n        return len(reReplaceNoCase(input, \"[^A-Za-z0-9]\", \"\", \"All\"));\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14072,"user_id":null,"body":"component {\n    numeric function countLettersAndDigits(required string input) {\n        cleanString = rereplace(arguments.input, '[^a-zA-Z0-9]', '', 'all');\n        return len(cleanString);        \n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"574b3b1599d8f897470018f6":[{"id":14073,"user_id":null,"body":"component {\n    function get_real_floor( n ) {\n        if (n > 13) {\n            return n - 2\n        } else if (n > 0) {\n            return n - 1\n        } else {\n            return n\n        }\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14074,"user_id":null,"body":"component {\n  function get_real_floor(n) {\n    if (n < 1) {\n      return n;\n    } else if (n < 13) {\n      return n - 1;\n    } else {\n      return n - 2;\n    }\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14075,"user_id":50,"body":"component {\n\n    function get_real_floor( n ) {\n            return n>0?n-1-(n>12):n;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14076,"user_id":50,"body":"component {\n\n    function get_real_floor( n ) {\n         return n>0 ? n-1-(n>12 ? 1 : 0) : n\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14077,"user_id":null,"body":"component {\n\n    function get_real_floor( n ) {\n        return ((n < 0) || (n == 0)) ? n : (n >= 14) ? n - 2 : n - 1;  \n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14078,"user_id":53,"body":"component {\n\n    function get_real_floor( n ) {\n        return n <= 0 ? n : n > 13 ? n - 2 : n - 1;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14079,"user_id":48,"body":"component {\n\n    function get_real_floor( n ) {\n        return n >= 13 ? n - 2 : n > 0 ? n - 1 : n;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14080,"user_id":null,"body":"component {\n\n    function get_real_floor( n ) {\n        \n        \n        \n        if (n == 0){\n            return 0;\n        }else if(n < 0){\n            return n\n        }else if(n < 14){\n            return n-1;\n        }else if(n > 13){\n            return n - 2   \n        }\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14081,"user_id":null,"body":"component {\n\n    function get_real_floor( n ) {\n        if (n LT 0)\n            return n;\n        else if (n eq 0)\n            return 0;\n        else if (n GT 0 and n LTE 13)\n            return (n - 1);\n        else if (n GT 13)      \n            return (n - 2);\n    }\n    \n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14082,"user_id":null,"body":"component {\n\n    function get_real_floor( n ) {\n        return n <= 0 ? n : n <= 13 ? n-1 : n-2;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"57cc40b2f8392dbf2a0003ce":[{"id":14083,"user_id":null,"body":"component {\n    check = (a,x) => !!a.contains(x)\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14084,"user_id":76,"body":"component {\n    boolean function check(required array a, required x) {\n        return !!a.contains(x);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14085,"user_id":null,"body":"component {\n    boolean function check(a, x) {\n        if (a.contains(x))\n            return true;\n        else\n            return false;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14086,"user_id":1566,"body":"component {\n    boolean function check(required array a, required x) {\n        return a.find(x) > 0;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14087,"user_id":null,"body":"component {\n    boolean function check(a, x) {\n        \/\/Your Code Here\n        return !!a.findNoCase(x);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14088,"user_id":null,"body":"component {\n    boolean function check(a, x) {\n        \/\/Your Code Here\n       if ( a.contains(x)) return true;\n       return false;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14089,"user_id":null,"body":"component {\n    boolean function check(a, x) {\n        return a.findNoCase(x) > 0 ;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14090,"user_id":null,"body":"component {\n    boolean function check(a, x) {\n        return a.find(x) > 0;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14091,"user_id":null,"body":"component {\n    boolean function check(a, x) {\n        return !!a.findNocase( x )\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14092,"user_id":null,"body":"component {\n    boolean function check(a, x) {\n        return !!a.contains(x);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"57e921d8b36340f1fd000059":[{"id":14093,"user_id":null,"body":"component {\n    string function shark(\n        required numeric pontoonDistance,\n        required numeric sharkDistance,\n        required numeric yourSpeed,\n        required numeric sharkSpeed,\n        required boolean dolphin\n    ) {\n        return pontoonDistance \/ yourSpeed < sharkDistance \/ (dolphin ? sharkSpeed \/ 2 : sharkSpeed) ? \"Alive!\" : \"Shark Bait!\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14094,"user_id":76,"body":"component {\n    string function shark(\n        required numeric pontoonDistance,\n        required numeric sharkDistance,\n        required numeric yourSpeed,\n        required numeric sharkSpeed,\n        required boolean dolphin\n    ) {\n        if ( dolphin ) sharkSpeed \/= 2;\n        return pontoonDistance \/ yourSpeed < sharkDistance \/ sharkSpeed ? \"Alive!\" : \"Shark Bait!\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14095,"user_id":53,"body":"component {\n    string function shark(\n        required numeric pt,\n        required numeric sd,\n        required numeric v,\n        required numeric sv,\n        required boolean d\n    ) {\n        if (d) sv \/= 2;\n        return pt \/ v < sd \/ sv ? \"Alive!\" : \"Shark Bait!\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14096,"user_id":492,"body":"component {\n    string function shark(\n        required numeric pontoonDistance,\n        required numeric sharkDistance,\n        required numeric yourSpeed,\n        required numeric sharkSpeed,\n        required boolean dolphin\n    ) {\n          if(dolphin) sharkSpeed\/=2;\n          if(pontoonDistance\/yourSpeed < sharkDistance \/ sharkSpeed) return \"Alive!\";\n          return \"Shark Bait!\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14097,"user_id":null,"body":"component {\n    string function shark(\n        required numeric pontoonDistance,\n        required numeric sharkDistance,\n        required numeric yourSpeed,\n        required numeric sharkSpeed,\n        required boolean dolphin\n    ) {\n        var timeToPontoon = arguments.pontoonDistance \/ arguments.yourSpeed;\n        var adjustedSharkSpeed = arguments.dolphin ? arguments.sharkSpeed \/ 2 : arguments.sharkSpeed;\n        var timeToDinner = arguments.sharkDistance \/ adjustedSharkSpeed;\n        \n        return timeToPontoon < timeToDinner ? \"Alive!\" : \"Shark Bait!\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14098,"user_id":1566,"body":"component {\n    string function shark(\n        required numeric pontoonDistance,\n        required numeric sharkDistance,\n        required numeric yourSpeed,\n        required numeric sharkSpeed,\n        required boolean dolphin\n    ) {\n        if ((pontoonDistance \/ yourSpeed) < sharkDistance \/ (sharkSpeed - (sharkSpeed * 0.5 * dolphin))) \n            return 'Alive!'\n        return 'Shark Bait!'\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14099,"user_id":null,"body":"component {\n    string function shark(\n        required numeric pontoonDistance,\n        required numeric sharkDistance,\n        required numeric yourSpeed,\n        required numeric sharkSpeed,\n        required boolean dolphin\n    ) {\n    if(dolphin) sharkSpeed = sharkSpeed * .5\n    if(sharkDistance > 0 && yourSpeed\/pontoonDistance > sharkSpeed\/sharkDistance) return \"Alive!\"\n    return \"Shark Bait!\"\n\/\/         return \"Alive!\" or \"Shark Bait!\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14100,"user_id":null,"body":"component {\n    string function shark(\n        required numeric pontoonDistance,\n        required numeric sharkDistance,\n        required numeric yourSpeed,\n        required numeric sharkSpeed,\n        required boolean dolphin\n    ) {\n        var sharkTime = dolphin ? sharkDistance\/(sharkSpeed\/2) :  sharkDistance\/sharkSpeed ;     \n        var personTime = pontoonDistance\/yourSpeed;\n        return sharkTime > personTime ? \"Alive!\" : \"Shark Bait!\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14101,"user_id":null,"body":"component {\n    string function shark(\n        required numeric pontoonDistance,\n        required numeric sharkDistance,\n        required numeric yourSpeed,\n        required numeric sharkSpeed,\n        required boolean dolphin\n    ) {\n        return ( (pontoonDistance\/yourSpeed) < (sharkDistance \/ ( sharkSpeed * ( dolphin ? 0.5 : 1 ) )) )?\"Alive!\":\"Shark Bait!\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14102,"user_id":null,"body":"component {\n    string function shark(\n        required numeric pontoonDistance,\n        required numeric sharkDistance,\n        required numeric yourSpeed,\n        required numeric sharkSpeed,\n        required boolean dolphin\n    ) {\n        if(dolphin) { sharkSpeed = sharkSpeed\/2; }\n        return pontoonDistance\/yourSpeed lt sharkDistance\/sharkSpeed ? \"Alive!\" : \"Shark Bait!\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"57eaeb9578748ff92a000009":[{"id":14103,"user_id":null,"body":"component {\n\n    function sum_mix(x){\n        return x.sum()\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14104,"user_id":null,"body":"component {\n\n    function sum_mix(x){\n        var sum = 0;\n        cfloop(array = x, index = \"num\"){\n            sum += num;\n        }\n        return sum;\n        \/\/ Your code here...\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14105,"user_id":53,"body":"component {\n\n    function sum_mix(ls) {\n        return ls.reduce( function(acc, el) {\n            return acc + Int(el);\n        },0)\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14106,"user_id":null,"body":"component {\n\n    function sum_mix(x){\n        sum = 0;\n        for (num in x) {\n            sum += int(num);\n        }\n        return sum;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14107,"user_id":null,"body":"component {\n\n    sum_mix = (x) => x.sum()\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14108,"user_id":null,"body":"component {\n\n    function sum_mix(x){\n        return arraysum(x);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14109,"user_id":null,"body":"component {\n\n    function sum_mix(x){\n        var sum = 0;\n        for (i in x) {\n            sum += toNumeric(i);\n        }\n        return sum;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14110,"user_id":null,"body":"component {\n\n    function sum_mix(x){\n        var total=0;\n        for(var num in x){\n            total = total + Int(num);\n        }\n        return (total);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14111,"user_id":null,"body":"component {\n    function sum_mix(x){\n        var total = 0;\n        for(var i = 1; i <= len(x); i++){\n            total += isNumeric(x[i]) ? x[i] : val(x[i]);\n        }\n        return total;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14112,"user_id":null,"body":"component {\n\n    function sum_mix(x){\n        return ArraySum(x.map(function(item) {\n            return ParseNumber(item);\n        }));\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"57ec8bd8f670e9a47a000f89":[{"id":14113,"user_id":null,"body":"component {\n    function mouth_size(required string animal) {\n        return lcase(animal) == 'alligator' ? 'small' : 'wide';\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14114,"user_id":null,"body":"component {\n    \n    \/**\n    * mouth_size\n    * Returns 'small' if the passed animal is an alligator. Otherwise, it returns 'wide'\n    * I'm not sure on what planet this makes sense, but hey, this is Codewars.\n    *\n    * @animal (string): The animal the frog wants to eat.\n    *\/\n    function mouth_size(required string animal) {\n        return ( arguments.animal == 'alligator' ? 'small' : 'wide' );\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14115,"user_id":null,"body":"component {\n    function mouth_size(required string animal) {\n        return animal == 'alligator' ? 'small' : 'wide';\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14116,"user_id":645,"body":"component {\n    function mouth_size(required string animal) {\n        return lCase(animal) == \"alligator\" ? \"small\" : \"wide\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14117,"user_id":1566,"body":"component {\n    mouth_size=(animal)=>refind('(?i)alligator',animal)?'small':'wide';\n}\n","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14118,"user_id":null,"body":"component {\n    function mouth_size(required string animal) {\n         return animal.toLowerCase() == 'alligator' ? 'small' : 'wide';\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14119,"user_id":53,"body":"component {\n    function mouth_size(required string animal) {\n        return LCase(animal) == \"alligator\" ? \"small\" : \"wide\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14120,"user_id":null,"body":"component {\n    function mouth_size(required string animal) {\n    \n        switch(ARGUMENTS['animal']) {\n            case \"alligator\":\n                 return 'small';\n                 break;\n            default: \n                 return 'wide';\n        }\n        \n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14121,"user_id":null,"body":"component {\n   function mouth_size(required string animal) {\n      return ( compareNoCase(animal,\"alligator\") ) ?  \"wide\" : \"small\";\n   }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14122,"user_id":null,"body":"component {\n    function mouth_size(required string animal) {\n        if (animal == 'alligator') {return 'small'}  else { return 'wide'}\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"58261acb22be6e2ed800003a":[{"id":14123,"user_id":53,"body":"component {\n\n    function get_volume_of_cuboid( numeric l, numeric w, numeric h ){\n        return l * w * h;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-26 18:31:12"},{"id":14124,"user_id":null,"body":"component {\n\n    function get_volume_of_cuboid( numeric length, numeric width, numeric height ){\n        return precisionEvaluate(length * width * height)\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-26 18:31:12"},{"id":14125,"user_id":null,"body":"component {\n\n    function get_volume_of_cuboid( numeric length, numeric width, numeric height ){\n        return max(length,0)*max(width,0)*max(height,0);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-26 18:31:12"},{"id":14126,"user_id":null,"body":"component {\n\n    function get_volume_of_cuboid( numeric length, numeric width, numeric height ){\n        length = length;\n        width = width;\n        height = height;\n        \n        return length * width * height;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-26 18:31:12"},{"id":14127,"user_id":null,"body":"component {\n\n    function get_volume_of_cuboid( numeric length, numeric width, numeric height ){\n        \/\/ Your code here...\n        return length * width * height;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-26 18:31:12"},{"id":14128,"user_id":null,"body":"component {\n\n    function get_volume_of_cuboid( numeric length, numeric width, numeric height ){\n        return height == 0 ? 0 : length * width + get_volume_of_cuboid(length, width, height - 1);\n\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-26 18:31:12"},{"id":14129,"user_id":76,"body":"component {\n    numeric function get_volume_of_cuboid( required numeric length, required numeric width, required numeric height ) {\n        return length * width * height;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-26 18:31:13"},{"id":14130,"user_id":527,"body":"component {\n\n    numeric function get_volume_of_cuboid(numeric length, numeric width, numeric height) {\n        return length * width * height;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-26 18:31:13"},{"id":14131,"user_id":null,"body":"component {\n\n    function get_volume_of_cuboid( numeric length, numeric width, numeric height ){\n        return length*width*height;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-26 18:31:13"}],"582cb0224e56e068d800003c":[{"id":14132,"user_id":1566,"body":"component {    \n\n    litres=(time)=>time\\2;\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14133,"user_id":50,"body":"component { \n    \n    numeric function litres(required numeric time) {\n        return floor(time\/2.0);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14134,"user_id":null,"body":"component { \n    \n    numeric function litres(required numeric time) {\n        return fix(time\/2);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14135,"user_id":null,"body":"component { \n    numeric function litres(required numeric time) {\n         return floor(time*.5);\n    }\n}\n","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14136,"user_id":null,"body":"component { \n    \n    numeric function litres(required numeric time) {\n        return int( time * 0.5 );\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14137,"user_id":76,"body":"component { \n    numeric function litres(required numeric time) {\n        return time \\ 2;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14138,"user_id":527,"body":"component { \n    \n    numeric function litres(required numeric time) {\n        return floor(time \/ 2);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14139,"user_id":null,"body":"component { \n    \n    numeric function litres(required numeric time) {\n        return floor(time * 0.5);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5861d28f124b35723e00005e":[{"id":14140,"user_id":null,"body":"component {\n\n    function zero_fuel(numeric d, numeric m, numeric f ){\n        return m*f>=d;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14141,"user_id":null,"body":"component {\n    zero_fuel = (numeric distanceToPump, numeric mpg, numeric fuelLeft) => {\n        return (fuelLeft * mpg >= distanceToPump);\n    }\n}\n","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14142,"user_id":null,"body":"component {\n\n    function zero_fuel( numeric distanceToPump, numeric mpg, numeric fuelLeft ){\n        return mpg*fuelLeft gte distanceToPump;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14143,"user_id":null,"body":"component {\n\n    function zero_fuel( numeric d, numeric m, numeric f ){\n        \/\/ My code here...\u2566\n        return d <= m * f;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14144,"user_id":76,"body":"component {\n    boolean function zero_fuel(numeric distanceToPump, numeric mpg, numeric fuelLeft) {\n        return distanceToPump \/ mpg <= fuelLeft;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14145,"user_id":50,"body":"component {\n\n    function zero_fuel( numeric d, numeric m, numeric f ){\n        return d <= m*f ;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14146,"user_id":null,"body":"component {\n\n    function zero_fuel( numeric a, numeric b, numeric c ){\n        return a <= b * c;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14147,"user_id":null,"body":"component {\n    zero_fuel = (numeric distanceToPump, numeric mpg, numeric fuelLeft) => {\n        return (fuelLeft * mpg >= distanceToPump) ? true : false;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14148,"user_id":null,"body":"component {\n\n    function zero_fuel( numeric distanceToPump, numeric mpg, numeric fuelLeft ){\n        return distanceToPump<=mpg*fuelLeft ;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14149,"user_id":null,"body":"component {\n\n    function zero_fuel( numeric distanceToPump, numeric mpg, numeric fuelLeft ){\n        return (fuelLeft * mpg - distanceToPump) gte 0\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5886e082a836a691340000c3":[{"id":14150,"user_id":53,"body":"component {\n    numeric function rectangle_rotation(required numeric a, required numeric b) {\n        var x = floor(a \/ sqr(2));\n        var y = floor(b \/ sqr(2));\n        var r = (x + 1) * (y + 1) + x * y;\n        return r + r % 2 - 1;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14151,"user_id":645,"body":"component {\n    numeric function rectangle_rotation(required numeric a, required numeric b) {\n        var h = int(a \/ sqr(2));\n        var v = int(b \/ sqr(2));\n        return h * v + (h + 1) * (v + 1) - bitxor(h % 2, v % 2);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14152,"user_id":168,"body":"component {\n    numeric function rectangle_rotation(required numeric a, required numeric b) {\n        x = floor(a \/ sqr(2))\n        y = floor(b \/ sqr(2))\n        return 2 * x * y + x + y + (x % 2 == y % 2 ? 1 : 0)\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14153,"user_id":20,"body":"component {\n    numeric function rectangle_rotation(required numeric a, required numeric b) {\n        t=sqr(2);\n          return (floor(a\/2\/t)*2+1)*(floor(b\/2\/t)*2+1)\n          +4*floor((a\/2-t\/2)\/t+1)*floor((b\/2-t\/2)\/t+1);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14154,"user_id":null,"body":"component {\n    Any function rectangle_rotation(required numeric a, required numeric b) {\n        \n        a1 = (a\/sqr(2))\/2  ;\n        b1 = (b\/sqr(2))\/2  ;\n        \n        r1 = [ floor(a1)*2+1 , floor(b1)*2+1 ] ;\n        \n        r2[1] = r1[1] + ( (a1-floor(a1) < .5) ? -1 : 1 ) ;\n        r2[2] = r1[2] + ( (b1-floor(b1) < .5) ? -1 : 1 ) ;\n        \n        return (r1[1]*r1[2]) + (r2[1]*r2[2]) ;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"58941fec8afa3618c9000184":[{"id":14155,"user_id":645,"body":"component {\n    growingPlant = (u, d, h) => max(1, ceiling((h - d) \/ (u - d)))\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14156,"user_id":50,"body":"component {\n    numeric function growingPlant(required numeric upSpeed, required numeric downSpeed, required numeric desiredHeight) {\n        return desiredHeight<=upSpeed?1:1+growingPlant(upSpeed, downSpeed, desiredHeight- upSpeed + downSpeed);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14157,"user_id":null,"body":"component {\n    numeric function growingPlant(required numeric upSpeed, required numeric downSpeed, required numeric desiredHeight) {\n        return desiredHeight < upSpeed ? 1 : ceiling((desiredHeight - downSpeed) \/ (upSpeed - downSpeed));\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14158,"user_id":null,"body":"component {\n    numeric function growingPlant(required numeric upSpeed, required numeric downSpeed, required numeric desiredHeight) {\n        var days = 0;\n        var height = 0;\n        while(height < desiredHeight){\n            days++;\n            height += upSpeed;\n            if(height >= desiredHeight){\n                break;\n            }\n            height -= downSpeed;\n        }\n        return days;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14159,"user_id":null,"body":"component {\n    numeric function growingPlant(required numeric upSpeed, required numeric downSpeed, required numeric desiredHeight) {\n        \/\/ your code here\n        height = 0;\n        isDay = true;\n        day = 1;\n        while(height < desiredHeight){\n            height += isDay ? upSpeed : -downSpeed;\n            isDay = !isDay;\n            day++;\n        }\n        return day\/2;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14160,"user_id":492,"body":"component {\n    numeric function growingPlant(required numeric u, required numeric d, required numeric h) {\n        return 1 + (h > u ? ceiling((h - u)\/(u - d)) : 0);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14161,"user_id":53,"body":"component {\n    numeric function growingPlant(required numeric upSpeed, required numeric downSpeed, required numeric desiredHeight) {\n        var result = Ceiling((desiredHeight - downSpeed) \/ (upSpeed - downSpeed));\n        return [result, 1].max();\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14162,"user_id":null,"body":"component {\n    numeric function growingPlant(required numeric upSpeed, required numeric downSpeed, required numeric desiredHeight) {\n        var day = 1;\n        var grow = 0;\n        while ( true ) {\n            grow += upSpeed;\n            \/\/WriteOutput(\"after day 1 --> #grow#<br>\");\n            if(grow >= desiredHeight){\n                break;\n            }\n            else {\n                grow -= downSpeed;\n                \/\/WriteOutput(\"after night 1 --> #grow#<br>\");\n                day++;\n            }\n        }\n        return day;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14163,"user_id":null,"body":"component {\n    numeric function growingPlant(required numeric upSpeed, required numeric downSpeed, required numeric desiredHeight) {\n        var days = 1;\n        var currentHeight = 0;\n        while (currentHeight + upSpeed < desiredHeight){\n            currentHeight += upSpeed;\n            if (currentHeight >= desiredHeight){\n                break;\n            }\n            currentHeight -= downSpeed;\n            days ++;\n        }\n        return days;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14164,"user_id":null,"body":"component {\nnumeric function growingPlant(required numeric upSpeed, required numeric downSpeed, required numeric desiredHeight) {\nplant = 0;\ndays = 0;\nnight = 0;\ncurHeight = 0;\n    for (plant = 0; curHeight < desiredHeight; plant++){\n        curHeight+=upSpeed;\n        if (curHeight<desiredHeight) {curHeight-=downSpeed}\n\n    }\nreturn plant;\n  }\n     \n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"58c9322bedb4235468000019":[{"id":14165,"user_id":null,"body":"component {\n\n    function isVeryEvenNumber( number ){\n        do {\n            number = listToArray( number, '' ).sum();\n        } while ( len( number ) > 1 );\n        return number % 2 == 0;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14166,"user_id":null,"body":"component {\n\n    function isVeryEvenNumber( numeric n ){\n      while( len( n ) > 1 ) {\n        n = listToarray(n,'').reduce( (acc=0,n)=>acc+=n )\n      }\n      return n%2==0;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14167,"user_id":null,"body":"component {\n\n    function isVeryEvenNumber(num){\n        local.v = 0;\n        for(local.i = 1; i <= len(num); local.i++){\n            local.v = local.v + int(mid(num, local.i, 1));\n        }\n        if(int(local.v) > 9){\n            return isVeryEvenNumber(local.v);\n        }\n        if(int(local.v) % 2 == 0 ){\n            return true;\n        }\n        return false;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14168,"user_id":null,"body":"component {\n\n    function isVeryEvenNumber(required numeric input){\n        if(len(ToString(input)) EQ 1){\n            return input MOD 2 EQ 0;\n        } else{\n            return isVeryEvenNumber(arraySum(listToArray(ToString(input), \"\")));\n        }\n    \n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14169,"user_id":53,"body":"component {\n    function isVeryEvenNumber(n) {\n        return (--n % 9 % 2) != 0;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14170,"user_id":76,"body":"component {\n    boolean function isVeryEvenNumber(numeric n) {\n        return (--n % 9 + 1) % 2 == 0;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14171,"user_id":null,"body":"component {\n    \/\/ not proud, but it worked\n    function isVeryEvenNumber( digits ){\n        var digits = numberformat(digits);\n        var sum = 0;\n        while( digits.len() ) {\n            var digit = digits.left(1);\n            if( !isnumeric( digit ) ) {\n                digits = digits.removeChars(1,1);\n                continue;\n            }\n            sum += digit;\n            digits = digits.removeChars(1,1);\n            if( !digits.len() && numberformat(sum).len() > 1 ) {\n                digits = numberformat(sum);\n                sum = 0;\n            }\n        }\n        \n        return !sum%2;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14172,"user_id":null,"body":"component {\n\n    function isVeryEvenNumber(n){\n        var x = listToArray(n,\"\")?.sum() ;\n        if (len(x)<=0) { return false ; }\n        if (len(x)==1) { return (x%2)==0 ; } \n        return isVeryEvenNumber(x) ;\n    }    \n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14173,"user_id":null,"body":"component {\n\n    function isVeryEvenNumber(n){\n       var numSum = listToArray(n,'').sum();\n       return len(numSum) > 1 ? isVeryEvenNumber(numSum) : numSum % 2 == 0;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14174,"user_id":null,"body":"component {\n\n    boolean function isVeryEvenNumber(required numeric n){\n        return len(n) eq 1 ? n%2 eq 0 : isVeryEvenNumber(listtoarray(n,\"\").sum()); \n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"58ce8725c835848ad6000007":[{"id":14175,"user_id":null,"body":"component {\n\n    function potatoes( numeric p0, numeric w0, numeric p1 ){\n        return w0 * (100 - p0) \\ (100 - p1)\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14176,"user_id":null,"body":"component {\n\n    function potatoes( numeric p0, numeric w0, numeric p1 ){\n        return floor(w0 * (100 - p0) \/ (100 - p1));\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14177,"user_id":null,"body":"component {\n\n    function potatoes( numeric p0, numeric w0, numeric p1 ){\n        \/\/ Your code here...\n        return floor(w0*(100-p0)\/(100-p1)); \n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14178,"user_id":50,"body":"component {\n\n    function potatoes( numeric p0, numeric w0, numeric p1 ){\n        return Floor((100-p0)*w0\/(100-p1))\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14179,"user_id":null,"body":"component {\n\n    function potatoes( numeric p0, numeric w0, numeric p1 ){\n        return ( w0*(100.0-p0) )\\(100.0-p1) ;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14180,"user_id":564,"body":"component {\n\n    function potatoes( numeric pctIn, numeric weight, numeric pctOut ){\n        return floor(weight * (100 - pctIn) \/ (100 - pctOut));\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14181,"user_id":null,"body":"component {\n\n    function potatoes( numeric p0, numeric w0, numeric p1 ){\n        var dm = ( 100 - p0 ) * w0 \/ 100;\n        return int( dm \/ ( ( 100 - p1 ) \/ 100 ) );\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14182,"user_id":null,"body":"component { potatoes = (p0, w0, p1) => Floor(w0 * (100 - p0) \/ (100 - p1)) }","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14183,"user_id":527,"body":"component {\n\n    numeric function potatoes(numeric p0, numeric w0, numeric p1) {\n        return floor(w0 * (100 - p0) \/ (100 - p1));\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5949481f86420f59480000e7":[{"id":14184,"user_id":null,"body":"component {\n    string function odd_or_even(a) {\n        return a.sum() % 2 ? \"odd\" : \"even\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14185,"user_id":645,"body":"component {\n    odd_or_even = (a) => a.sum() % 2 == 0 ? \"even\" : \"odd\"\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14186,"user_id":null,"body":"component {\n    string function odd_or_even(a) {\n        return arraySum(a) % 2 == 0 ? \"even\" : \"odd\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14187,"user_id":null,"body":"component {\n    string function odd_or_even(a) {\n        var s = arraysum(a)\n        return s % 2 ? \"odd\" : \"even\"\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14188,"user_id":null,"body":"component {\n    string function odd_or_even(a) {\n        \/\/ your code here\n        r=0;\n        for (i in a){\n            r+=i;\n        }\n        if(r mod 2 eq 0){\n            return \"even\";\n        }else{\n            return \"odd\";\n        }\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14189,"user_id":null,"body":"component {\n    string function odd_or_even(a) {\n        \/\/ your code here\n        return ArraySum(a) % 2 == 0 ? \"even\" : \"odd\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14190,"user_id":null,"body":"component {\n    string function odd_or_even(a) {\n     \n            if (arraylen(a) is 0) a = [0];\n    accum = 0;\n    ArrayEach(a,function(vlue){\n        accum = accum + vlue;\n        });\n\n    if (accum mod 2 is 0) return 'even';\n    if (accum mod 2 is not 0) return 'odd';\n        \n        \n        \n        \/\/ your code here\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14191,"user_id":null,"body":"component {\n    string function odd_or_even(a) {\n        \n        if(isEmpty(a)){\n           return \"even\" \n        }else{\n        if(arraySum(a) MOD 2 eq 0){\n            return \"even\";\n        }else{\n            return \"odd\";\n        }\n            \n        }\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14192,"user_id":53,"body":"component {\n    string function odd_or_even(xs) {\n        var sum = 0;\n        for (var i=1; i<=xs.len(); i++) {\n            sum += xs[i];\n        }\n        if ((sum % 2) == 0) {\n            return \"even\";\n        }\n        return \"odd\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14193,"user_id":null,"body":"component {\n    string function odd_or_even(a) {\n        \/\/calculate the sum of our array\n        local.sum = 0;\n        if(arrayLen(arguments.a)){\n            local.sum = arrayReduce(arguments.a, function(prev, item){\n                return arguments.prev + arguments.item; \n            });\n        }\n        \/\/ determine if our sum is odd or even\n        return (local.sum % 2) ? \"odd\" : \"even\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5a00e05cc374cb34d100000d":[{"id":14194,"user_id":null,"body":"component {\n    function reverse_seq(required numeric n) {\n        return repeatString(\"_\", n)\n            .listToArray(\"\")\n            .map((_, i) => i)\n            .reverse();\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14195,"user_id":null,"body":"component {\n    function reverse_seq(required numeric n) {\n        return [].set(1, n, 0).map((el, i) => i).reverse();\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14196,"user_id":null,"body":"component {\n    function reverse_seq(required numeric n) {\n        return [].set(1,n,1).toStruct().keyList().listToArray().sort('numeric','desc');\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14197,"user_id":53,"body":"component {\n    function reverse_seq(required numeric n) {\n        ans = ArrayNew(1);\n        m = n;\n        for (i=1; i<=n; i=i+1) {\n            ans[i] = m;\n            m = m-1;\n        }\n        return ans;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14198,"user_id":null,"body":"component {\n    function reverse_seq(required numeric n) {\n\n        var x = ARGUMENTS['n'];\n        var r = [];\n        \n        while ( x GT 0) {\n            arrayAppend(r, x);\n            x = x -1;\n        };\n\n        return r;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14199,"user_id":null,"body":"component {\n    function reverse_seq(required numeric n) {\n        var a = [];\n        for(i = n; i >= 1; i--){\n            a.append(i);\n        }\n        return a;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14200,"user_id":null,"body":"component {\n   function reverse_seq(required numeric n) {\n      a = []; for (i=n; i>=1; i--) { a.Append(i); }\n      return a;\n   }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14201,"user_id":null,"body":"component {\n    function reverse_seq(required numeric n) {\n        var arr = [].set(1,n,0)\n            arr.map( \n                function(el,idx) { \n                    arr[idx]=idx ;\n                } \n            );\n        return arr.reverse();\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14202,"user_id":null,"body":"component {\n    function reverse_seq(required numeric n) {\n    \n        var final = [arguments.n];\n        var countDown = arguments.n;\n        \n        while ( --countdown > 0 )\n            final.Append( countdown );\n            \n        return final;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14203,"user_id":null,"body":"component {\n    function reverse_seq(required numeric n) {\n        var arr = [];\n        for (; n > 0; n--)\n            ArrayAppend(arr, n);\n        return arr;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5a03b3f6a1c9040084001765":[{"id":14204,"user_id":527,"body":"component {\n    numeric function angle(required numeric n) {\n        return 180 * (n - 2);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14205,"user_id":1566,"body":"component {\n    angle=(n)=>(n-2)*180;\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14206,"user_id":null,"body":"component {\n    numeric function angle(required numeric n) {\n        return n == 2? 0 : 180 + angle(n - 1);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14207,"user_id":null,"body":"component {\n    numeric function angle(required numeric n) {\n        var interiorAngles = ( ( n - 2 ) * 180 );\n        return interiorAngles;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14208,"user_id":null,"body":"component {\n    angle = (n) => 180 * (n-2)\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14209,"user_id":null,"body":"component {\n    numeric function angle(required numeric n) {\n        return n>2 ? (n-2)*180 : 0;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14210,"user_id":null,"body":"component {\n    numeric function angle(required numeric n) {\n        return 180 + ((n - 3) * 180);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14211,"user_id":645,"body":"component {\n    numeric function angle(required numeric n) {\n        return (n - 2) * 180\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5a2be17aee1aaefe2a000151":[{"id":14212,"user_id":null,"body":"component {\n\n    function array_plus_array( array arr1, array arr2 ){\n        return arr1.append( arr2, true ).sum()\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14213,"user_id":564,"body":"component {\n\n    function sumArray(array arr){\n        var sum = 0;\n        for (i in arr) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    function array_plus_array(array arr1, array arr2){\n        return sumArray(arr1) + sumArray(arr2);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14214,"user_id":null,"body":"component {\n\n    function array_plus_array( array arr1, array arr2 ){\n        var res = 0;\n        for(var i in arr1){\n            res += i;\n        }\n        for(var j in arr2){\n            res += j;\n        }\n        return res;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14215,"user_id":492,"body":"component {\n\n    function aux(array arr){\n        var sm = 0;\n        for (a in arr) {\n            sm += a;\n        }\n        return sm;\n    }\n    function array_plus_array(array arr1, array arr2){\n        return aux(arr1) + aux(arr2);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14216,"user_id":50,"body":"component {\n\n    function array_plus_array( array arr1, array arr2 ){\n        var res = 0\n        for (n in arr1) {\n            res += n;\n        }\n        for (n in arr2) {\n            res += n;\n        }\n        return res;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14217,"user_id":53,"body":"component {\n    function array_plus_array( array arr1, array arr2 ) {\n        var sum = 0;\n        for (var i=1; i<=arr1.len(); i++) { sum += arr1[i]; }\n        for (var i=1; i<=arr2.len(); i++) { sum += arr2[i]; }\n        return sum;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14218,"user_id":759,"body":"component {\n\n    function array_plus_array( array arr1, array arr2 ){\n        var res = 0\n        for (a in arr1) res += a\n        for (a in arr2) res += a\n        return res\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14219,"user_id":null,"body":"component {\n\n    function array_plus_array( array arr1, array arr2 ){\n        return arraySum(arr1) + arraySum(arr2);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14220,"user_id":null,"body":"component {\n\n    function array_plus_array( array arr1, array arr2 ){\n       var arr3 = arr1.merge(arr2)\n       return arr3.reduce((acc,x)=> acc+x,0)\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14221,"user_id":null,"body":"component {\n\n    function array_plus_array( array arr1, array arr2 ){\n        return [arr1.sum(),arr2.sum()].sum();\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5a3fe3dde1ce0e8ed6000097":[{"id":14222,"user_id":null,"body":"component {\n    function century_from_year(required numeric year) {\n        return ceiling( year\/100 );\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14223,"user_id":76,"body":"component {\n    century_from_year = (year) => (year + 99) \\ 100;\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14224,"user_id":null,"body":"component {\n    function century_from_year(required numeric year) {\n        return year%100==0 ? floor(year\/100) : floor(year\/100) + 1\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14225,"user_id":null,"body":"component {\n    function century_from_year(required numeric year) {\n        return (year - 1) \\ 100 + 1;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14226,"user_id":50,"body":"component {\n    function century_from_year(required numeric year) {\n        return floor((year-1)\/100)+1;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14227,"user_id":53,"body":"component {\n    function century_from_year(required numeric y) {\n        return (y - 1) \\ 100 + 1\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14228,"user_id":null,"body":"component {\n    function century_from_year(required numeric year) {\n        return int(year\/100) + (right(precisionEvaluate(arguments.year.toString()),2) gt 0 ? 1 : 0 );\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14229,"user_id":null,"body":"component {\n    function century_from_year(required numeric year) {\n        \/\/ if there is a decimal when dividing by 100, \n        \/\/ add one to the number left of the decimal \n        \/\/ and you got the century_from_year.\n        return ( year % 100 ) ? year \\ 100 + 1 : (year \\ 100 );\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14230,"user_id":76,"body":"component {\n    numeric function century_from_year(required number year) {\n        return (year + 99) \\ 100;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14231,"user_id":null,"body":"component {\n\n    century_from_year = (year) => ceiling( year \/ 100 );\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5a54e796b3bfa8932c0000ed":[{"id":14232,"user_id":null,"body":"component {\n    string function jumpingNumber(numeric n){\n      return listToArray(n, \"\").some((el, i, src) => {\n          if (i == 1) return false;\n          return abs(el - src[i-1]) != 1;\n      }) ? \"Not!!\" : \"Jumping!!\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14233,"user_id":null,"body":"component {\n    string function jumpingNumber(numeric n){\n        var a = listtoarray(n,\"\");\n        var bad = a.some(function(c,i,o){\n            if (i == 1) return false;\n            if (abs(c - o[i-1]) != 1) return true;\n            return false;\n        });\n        return bad ? \"Not!!\" : \"Jumping!!\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14234,"user_id":null,"body":"component {\n    string function jumpingNumber(numeric n){\n      var a = listtoarray(n,\"\");\n      var flag = a.reduce(function(p,c){\n          if (p == 999) return c;\n          if (c == p+1 or c == p-1) return c;\n          return 666;\n      }, 999);\n      return flag == 666 ? \"Not!!\" : \"Jumping!!\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14235,"user_id":53,"body":"component {\n    string function jumpingNumber(numeric m) {\n      var n = m;\n      var p = n % 10;\n      n = n \\ 10;\n      while (n > 0) {\n        var d = n % 10;\n        if (abs(d - p) != 1) {\n            return \"Not!!\";\n        }\n        p = d;\n        n = n \\ 10;\n      }\n      return \"Jumping!!\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14236,"user_id":53,"body":"component {\n    string function jumpingNumber(numeric m) {\n      var n = m;\n      var p = n % 10;\n      while (n > 0) {\n        var d = n % 10;\n        if (abs(d - p) > 1) {\n            return \"Not!!\";\n        }\n        p = d;\n        n = n \\ 10;\n      }\n      return \"Jumping!!\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14237,"user_id":null,"body":"component {\n    string function jumpingNumber(numeric n){\n      if(isdefined(\"n\")) {\n            if(len(n) eq 1) return \"Jumping!!\";\n\n            var ary = listtoarray(n,\"\");\n            for(var i = 1; i <= arraylen(ary) - 1; i++) {\n                if(abs(ary[i]-ary[i+1]) neq 1) return \"Not!!\";\n            }\n            return \"Jumping!!\";\n        }\n        return \"Not!!\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14238,"user_id":null,"body":"component {\n\n    string function jumpingNumber( numeric n ) {\n        var digits = listToArray( n, '' );\n        var jumping = ( d, i ) => i == digits.len() || abs( d - digits[ i + 1 ] ) == 1;\n        return digits.every( jumping ) ? 'Jumping!!' : 'Not!!';\n    }\n\n}\n","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14239,"user_id":1566,"body":"component {\n    string function jumpingNumber(numeric n){\n      a = listToArray(n,'');\n      for(i=1;i<len(n);i++){if(Abs(a[i]-a[i+1])>1)return 'Not!!'}\n      return 'Jumping!!';\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14240,"user_id":null,"body":"component {\n    string function jumpingNumber(numeric n){\n        retval = \"Jumping!!\" ;\n        \n        var a = listToArray(n,\"\")\n            .map( \n                function (el,idx,arr) {\n                    if ( idx < len(arr) && (el-arr[idx+1])!=1 && (arr[idx+1]-el)!=1 ) {\n                        retval = \"Not!!\" ; \n                        break; \n                    }\n                }\n            ) \n        return retval ;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14241,"user_id":null,"body":"component {\n    string function jumpingNumber(numeric n){\n      return listToArray(n, \"\").every((el, i, src) => {\n          if (i == 1) return true;\n          return abs(el - src[i-1]) == 1;\n      }) ? \"Jumping!!\" : \"Not!!\";\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5a63948acadebff56f000018":[{"id":14242,"user_id":null,"body":"component {\n    numeric function maxProduct(required Array arr, required numeric size) {\n        return arr.sort( 'numeric', 'desc' ).slice( 1, size ).reduce( (acc=1, i) => acc*i )\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14243,"user_id":null,"body":"component {\n    numeric function maxProduct(required Array arr, required numeric size) {\n        return arr\n            .sort( 'numeric', 'desc' )\n            .slice( 1, size )\n            .reduce( \n                function( result, item ){ \n                return result * item \n                }, \n                1 \n            )\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14244,"user_id":645,"body":"component {\n    numeric function maxProduct(required Array arr, required numeric size) {\n        return arr.sort((a, b) => b - a).slice(1, size).reduce((a, b) => a * b, 1)\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14245,"user_id":1566,"body":"component {\n    numeric function maxProduct(required Array arr, required numeric size) {\n        return arr.sort('numeric').slice(-size+1).reduce((c,v)=>c*v,1);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14246,"user_id":null,"body":"component {\n    numeric function maxProduct(required Array arr, required numeric size) {\n        return evaluate(arrayToList(arraySlice(arr.sort(\"numeric\",\"desc\"),1,size),\"*\"));\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14247,"user_id":null,"body":"component {\n    numeric function maxProduct(required Array arr, required numeric size) {\n        arr.sort(\"numeric\", \"desc\")\n        return arr.slice(1, size).reduce((result, item) => result * item, 1)\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14248,"user_id":null,"body":"component {\n    numeric function maxProduct(required Array arr, required numeric size) {\n        \n        if(arrayLen(arguments.arr)){\n            \/\/ sort our array\n            arguments.arr.sort(\"numeric\", \"desc\");\n            \/\/ calculate our product\n            local.n = arguments.arr[1];\n            for(local.i=2; local.i<=arguments.size; local.i++){\n                local.n *= arguments.arr[local.i];\n            }\n            \n            return n;\n        }\n        \n        return 0;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14249,"user_id":null,"body":"component {\n    numeric function maxProduct(required Array arr, required numeric size) {\n        return arr\n                .sort('numeric', 'desc')\n                .slice(1, size)\n                .reduce(function(res, num){\n                    return res * num\n                }, 1);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14250,"user_id":null,"body":"component {\n    numeric function maxProduct(required Array arr, required numeric size) {\n        ArraySort(arr, 'numeric', 'desc');\n        var tot = arr[1];\n        for (var i = 2; i <= size; i++)\n            tot *= arr[i];\n        return tot;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14251,"user_id":null,"body":"component {\n    numeric function maxProduct(required Array arr, required numeric size) {\n        return arr\n            .sort( \"numeric\" )\n            .reverse()\n            .slice( 1, size )\n            .reduce( ( acc, num ) => acc * num, 1 );\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5a662a02e626c54e87000123":[{"id":14252,"user_id":53,"body":"component {\n    array function extraPerfect(required numeric n) {\n        var ns = []\n        for (var i = 1; i <= n; i += 2) ns.append(i)\n        return ns\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14253,"user_id":null,"body":"component {\n    array function extraPerfect(numeric n){\n        var arr = [];\n        var num = 0;\n        while(num <= n){\n            var bin_array = listToArray(formatBaseN(num, 2).toString(), \"\");\n            if (bin_array[1] && bin_array[bin_array.len()]){\n                arr.append(num);\n            }\n            num++;\n        }\n        return arr;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14254,"user_id":null,"body":"component {\n    array function extraPerfect(required numeric n) {\n    \/\/ I write code professionally to be easy to comprehend not be fancy or clever - Experience Talking\n    accum = ArrayNew(1);\n    for (i = 1; i <= n; i++) { \n        str = ToString(FormatBaseN(i,2));\n        if ((Left(str, 1) is 1) and (Right(str, 1) is 1)) {\n            ArrayAppend(accum, int(i));\n            };\n    }\n    return accum;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14255,"user_id":null,"body":"component {\n    array function extraPerfect(required numeric n) {\n        local.out = [];\n        \n        for(local.i=1; local.i<= arguments.n; local.i++){\n            local.b = formatBaseN(local.i, 2);\n            if(left(local.b, 1) == 1 && right(local.b, 1) == 1){\n                arrayAppend(local.out, local.i);\n            }\n        }\n        \n        return local.out;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14256,"user_id":null,"body":"component {\n    array function extraPerfect(required numeric n) {\n        var retval = [] ;\n        for (var x=1;x<=n;x++) {\n            if (x%2) {retval.append( x )} \n        }\n        return retval ;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14257,"user_id":null,"body":"component {\n    array function extraPerfect(required numeric n) {\n        var finalAr = [];\n        \n       for(var i = 1; i <= n;i=i+2) {\n            var binary = FormatBaseN(i,2);\n            if(left(binary,1) == 1) {\n                arrayAppend(finalAr,i);\n            }\n        }\n        \n       return finalAr;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14258,"user_id":null,"body":"component {\n    array function extraPerfect(required numeric n) {\n        var i = 0\n        var practicallyPerfectInEveryWay=[]\n        while( ++i <= n ){\n            var bin = formatBaseN( i, 2 )\n            if( left( bin, 1 ) && right( bin, 1 ) ) {\n                practicallyPerfectInEveryWay.append(i)\n            }\n        }\n        return practicallyPerfectInEveryWay;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14259,"user_id":null,"body":"component {\n    array function extraPerfect(required numeric n) {\n        var arr=[];\n        for (var i=1;i<=n;i+=2) arr.append(i);\n        return arr ;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14260,"user_id":645,"body":"component {\n    array function extraPerfect(required numeric n) {\n        var res = []\n        for (var i = 1; i <= n; i += 2)\n            res.append(i)\n        return res\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5aa1bcda373c2eb596000112":[{"id":14261,"user_id":null,"body":"component {\n\n    function maxTriSum( array numbers ){\n        return numbers.toList()\n            .listRemoveDuplicates()\n            .listToArray()\n            .sort('numeric')\n            .slice(-2)\n            .sum();\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14262,"user_id":null,"body":"component {\n\n    function maxTriSum( array arr ){\n        var l = listRemoveDuplicates(arr.toList());\n        return listToArray(l).sort(\"numeric\",\"desc\").slice(1,3).sum();\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14263,"user_id":null,"body":"component {\n\n    function maxTriSum( array numbers ){\n        return ( numbers.sort(\"numeric\",\"DESC\").toList().listRemoveDuplicates().listToArray().slice(1,3).sum() ) ;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14264,"user_id":null,"body":"component {\n\n    function maxTriSum( array numbers ){\n        var list = numbers\n            .sort(\"numeric\")\n            .toList();\n\n       return listToArray(listRemoveDuplicates(list)).slice(-2).sum();\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14265,"user_id":null,"body":"component {\n\n    numeric function maxTriSum(required array numbers) {\n        numbers.sort(\"numeric\",\"desc\");\n        for(var i = numbers.len(); i > 1; i--) {\n            if(numbers[i] eq numbers[i-1]) numbers.deleteat(i);\n        }\n        return numbers.reduce(function(result,value,index) {\n            return index <= 3 ? result + value : result + 0;\n        },0);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14266,"user_id":null,"body":"component {\n\n    function maxTriSum(arr){\n        return arr.toList().listRemoveDuplicates().listToArray().sort('numeric','desc').slice(1,3).sum();\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14267,"user_id":null,"body":"component {\n\n    function maxTriSum( array numbers ){\n        return numbers.toList().listRemoveDuplicates().listToArray().sort('numeric','desc').slice( 1, 3 ).sum()\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5ab6538b379d20ad880000ab":[{"id":14268,"user_id":172,"body":"component {\n    function area_or_perimeter (l, w) {\n        return l == w ? l * l : (l + w) * 2;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14269,"user_id":null,"body":"component {\n    area_or_perimeter = (l,w) => {return (l IS w) ? l * w : 2*(l + w)}\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14270,"user_id":null,"body":"component {\n    \n    area_or_perimeter = (l,w) => { return (l IS NOT w) ? (l * 2) + (w * 2) : (l == 1) ? 2 : l * w; }\n    \n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14271,"user_id":null,"body":"component {\n    function area_or_perimeter (l, w) {\n        if(l == w) {\n            return l * w;\n        } else {\n            return (l + w) * 2;\n        }\n       \n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14272,"user_id":null,"body":"component {\n    function area_or_perimeter (l, w) {\n        return l == w ? l * w : 2 * (l + w)\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14273,"user_id":null,"body":"component {\n    function area_or_perimeter (l, w) {\n        return ( l == w ? l*w : l+w+l+w )\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14274,"user_id":null,"body":"component {\n    function area_or_perimeter (l, w) {\n        if (l==w){\n            return w*l;\n        }\n        return 2*(w+l);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14275,"user_id":1566,"body":"component {\n    area_or_perimeter = (l, w) => l==w ? l*w : 2*(l+w);\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14276,"user_id":null,"body":"component {\n    function area_or_perimeter (l, w) {\n        return l==w ? l*w : (l+w)*2 ;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14277,"user_id":null,"body":"component {\n    function area_or_perimeter (l, w) {\n        return (l == w) ? l * w : (l * 2) + (w * 2);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5aba780a6a176b029800041c":[{"id":14278,"user_id":645,"body":"component {\n    maxMultiple = (d, b) => b - b % d\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14279,"user_id":50,"body":"component {\n    numeric function maxMultiple(required numeric d, required numeric b) {\n        return d * floor(b\/d);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14280,"user_id":null,"body":"component {\n    numeric function maxMultiple(required numeric d, required numeric b) {\n        \/\/ Determine remainder of bound divided by divisor\n        var remainder = b % d;\n\n        \/\/ If bound is evenly divisble by divisor, return bound\n        if (remainder == 0)\n            return b;\n\n        \/\/ Otherwise, determine and return the max factor\n        return (b - remainder);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14281,"user_id":53,"body":"component {\n    numeric function maxMultiple(required numeric d, required numeric b) {\n        return (b\\d)*d\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14282,"user_id":null,"body":"component {\n    numeric function maxMultiple(required numeric divsor, required numeric bound) {\n        \/\/ your code here\n        for(i = bound; i > 0; i--){\n            if(i % divsor == 0){\n            n = i;\n            break;\n            }\n        }\n      return n;\n        \n        \n        \n        \n        \n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14283,"user_id":null,"body":"component {\n    numeric function maxMultiple(required numeric divisor, required numeric bound) {\n        return bound - bound % divisor\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14284,"user_id":null,"body":"component {\n    numeric function maxMultiple(required numeric d, required numeric b) {\n        for (var n = b; n > 0; n--) {\n            if (n % d == 0) {\n                return n;\n            }\n        }\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14285,"user_id":null,"body":"component {\n    numeric function maxMultiple(required numeric d, required numeric b) {\n        result = 0;\n        for (i = 1; i <= b; i++) {\n            if (i % d == 0) {\n                result = i;\n            }\n        }\n        return result;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14286,"user_id":null,"body":"component {\n    numeric function maxMultiple(required numeric d, required numeric b) {\n        return b-(b mod d);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14287,"user_id":null,"body":"component {\n    numeric function maxMultiple(required numeric d, required numeric b) {\n        var m = d; \n        while( true ) {\n            if (m + d > b) return m;\n            m += d;\n        }\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5abd66a5ccfd1130b30000a9":[{"id":14288,"user_id":null,"body":"component {\n\n    function rowWeights( array arr ){\n        return arr.reduce( ( r = [ 0, 0 ], p, i ) => {\n            r[ 2 - ( i % 2 ) ] += p;\n            return r;\n        } );\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14289,"user_id":null,"body":"component {\n\n    function rowWeights( array arr ){\n        \/\/ Your code here...\n        teams = [[], []]\n        arr.each((el, index) => {\n            if (index % 2 == 1) {\n                teams[1].append(el)\n            } else {\n                teams[2].append(el)\n            }\n        })\n\n        deriveSum = (index) => {\n            return teams[index].reduce((prev, el) => {\n                prev += el\n                return prev\n            }, 0)\n        }\n        means = []\n        means[1] = deriveSum(1)\n        means[2] = arr.len() > 1 ? deriveSum(2) : 0\n        \n        return means\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14290,"user_id":null,"body":"component {\n\n    function rowWeights( array arr ){\n        \/\/ Your code here...\n        result = [0, 0];\n        for(i = 1; i <= ArrayLen(arr); ++i){\n            result[i%2 == 0 ? 2 : 1] += arr[i];\n        }\n        return result;        \n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14291,"user_id":null,"body":"\/* tag syntax FTW! *\/\n<cfcomponent>\n\n    <cffunction name=\"rowWeights\" returntype=\"array\">\n        <cfargument name=\"arr\" type=\"array\" required=true>\n            <cfset var r = [0, 0]>\n            <cfset var i = 0>\n                \n            <cfloop from=\"1\" to=\"#arrayLen(arr)#\" index=\"i\">\n                <cfset r[(i % 2)+1] += arr[i]>\n            <\/cfloop>\n        <cfreturn arrayReverse(r)>\n    <\/cffunction>\n\n<\/cfcomponent>","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14292,"user_id":53,"body":"component {\n    function rowWeights( array arr ) {\n        res = [0, 0]\n        for (i=1; i <= arrayLen(arr); i=i+1) {\n            if (i % 2 != 0) {\n                res[1] = res[1] + arr[i];\n            } else {\n                res[2] = res[2] + arr[i];\n            }\n        }\n        return res;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14293,"user_id":76,"body":"component {\n    function rowWeights(array arr) {\n        return arr.reduce((res, n, i) => { res[2 - (i % 2)] += n; return res }, [0, 0])\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14294,"user_id":null,"body":"component {\n\n    function rowWeights( array arr ){\n        \n        var teams = [0, 0];\n        \n        for( i = 1; i <= arr.len(); i++)\n            i % 2 == 0 ? teams[2] += arr[i] : teams[1] += arr[i];\n              \n        return teams;\n\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14295,"user_id":null,"body":"component {\n\n   function rowWeights( array arr ){\n  \tFT = 0;\n  \tST =0;\n\tfor (i=1; i<= arraylen(arr); i++){\n        if (i % 2 neq 0) {\n        \tFT+=arr[i];\n        }\n        else {\n        \tST+=arr[i];\n        }\n  }\n  \treturn [FT,ST];\n   \n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14296,"user_id":null,"body":"component {\n\n    function rowWeights( array arr ){\n        var t1 = 0;\n        var t2 = 0;\n        var length = arraylen(arr);\n        for (var i=1; i <= length; i++) {\n            if( i % 2 == 0) {\n                t2 += arr[i];\n            } else {\n                t1 += arr[i];\n            }\n            if ( i == length ) {\n                return [t1, t2];\n            }\n        }\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14297,"user_id":null,"body":"component {\n\n    function rowWeights( array arr ){\n        return arr.reduce((acc,x,i) => {acc[(i % 2)+1] += x; return acc;},[0,0]).reverse()\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5ac6932b2f317b96980000ca":[{"id":14298,"user_id":null,"body":"component {\n\n    function minValue( array values ){\n        return values.toList('').listRemoveDuplicates('').listSort('numeric','asc','')\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14299,"user_id":null,"body":"component {\n\n    function minValue(arr){\n        return arr.toList().listRemoveDuplicates().listToArray().sort('numeric').toList(\"\");\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14300,"user_id":null,"body":"component {\n\n    function minValue( array values ){\n        \/\/ Your code here...\n        var uniques = [];\n        for(v in values){\n            if(!uniques.contains(v)){\n                uniques.append(v);\n            }\n        }\n        uniques.sort('numeric');\n        var result = 0;\n        for(i=1;i<=uniques.len();i++){\n            result = 10*result + uniques[i];\n        }\n        return result;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14301,"user_id":76,"body":"component {\n    numeric function minValue(array values) {\n        return Val(ListToArray(ListRemoveDuplicates(ArrayToList(values.sort(\"numeric\")))).toList(\"\"))\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14302,"user_id":null,"body":"component {\n\n    function minValue( array values ){\n        return values.sort('numeric').toList('').listRemoveDuplicates('')\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14303,"user_id":null,"body":"component {\n\n    numeric function minValue( required array values ){\n        values.sort('numeric');\n        return arraytolist(values).listremoveduplicates().listchangedelims(\"\");\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14304,"user_id":null,"body":"component {\n\n    function minValue( array values ){\n        return values.reduce(\n            function(prev,el){ \n                return ( !prev.find(el) ) ? prev.append(el) : prev ; \n            },[] )\n            .sort(\"numeric\")\n            .tolist(\"\");       \n    }\n    \n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14305,"user_id":null,"body":"component {\n\n    function minValue( array values ){\n \t\tvar resArr = []\n    \tvar arr = values.sort('numeric', 'asc').map( (num)=>{\n    \t\tif(resArr.find(num) eq 0){\n    \t\t\tresArr.append(num);\n    \t\t}\n    \t});\n\n    \treturn resArr.toList('');\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5ae62fcf252e66d44d00008e":[{"id":14306,"user_id":564,"body":"component {\n    function expression_matter(a, b, c) {\n        return ArrayMax([\n            a + b + c,\n            a + b * c,\n            a * b + c,\n            a * b * c,\n            a * (b + c),\n            (a + b) * c\n        ]);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14307,"user_id":null,"body":"component {\n\n    function expression_matter( a, b, c ){\n        return [ \n            a+b+c ,\n            a*b*c ,\n            (a+b)*c ,\n            a*(b+c) ,\n            a+(b*c) ,\n            (a*b)+c\n        ].max() ;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14308,"user_id":null,"body":"component {\n\n    function expression_matter( a, b, c ){\n      if(a == 1 && b == 1 && c == 1 || a == 1 && c == 1){\n        return a + b + c;\n      }\n      if(a == 1 && b == 1 || a == 1 || a == 1 && b < c || b == 1 && a < c){\n        return (a + b) * c;\n      }\n      if(b== 1 && c== 1 || c == 1 || a >= c && b == 1){\n        return a * (b + c);\n      }\n      return a * b * c;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14309,"user_id":null,"body":"component {\n\n    function expression_matter( a, b, c ){\n        \n        var highestResult = 0;\n        if (a+b+c > highestResult){highestResult=a+b+c;}\n        if (a*b*c>highestResult){highestResult=a*b*c;}\n        if ((a+b)*c>highestResult){highestResult=(a+b)*c;}\n        if (a*(b+c)>highestResult){highestResult=a*(b+c);}\n        return highestResult;\n                \n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14310,"user_id":53,"body":"component {\n\n    function expression_matter( a, b, c ){\n          var ans = 0;\n          if (a+b+c>ans)ans=a+b+c;\n          if (a*b*c>ans)ans=a*b*c;\n          if ((a+b)*c>ans)ans=(a+b)*c;\n          if (a*(b+c)>ans)ans=a*(b+c);\n          return ans;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14311,"user_id":null,"body":"component {\n\n    function expression_matter( a, b, c ){\n        var ops = [];\n        ops.append((a + b) * c);\n        ops.append((a * b) * c);\n        ops.append((a + b) + c);\n        ops.append(a * (b + c));\n        return ops.max()\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14312,"user_id":null,"body":"component {\n\n    function expression_matter( a, b, c ){\n        return [ \n            a + b + c, \n            ( a + b ) * c, \n            a * ( b + c ), \n            a * b * c\n        ].max();\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14313,"user_id":null,"body":"component {\n\n    function expression_matter( a, b, c ){\n      return [a + b + c, a * b * c, (a + b) * c, a * (b + c)].max();\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14314,"user_id":527,"body":"component {\n\n    function expression_matter(a, b, c) {\n        return max(max(a + b + c, a * (b + c)), max((a + b) * c, a * b * c));\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14315,"user_id":76,"body":"component {\n    function expression_matter( a, b, c ){\n        return [ a * ( b + c ), a * b * c, a + b * c, ( a + b ) * c, a + b + c ].max();\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5ae7e3f068e6445bc8000046":[{"id":14316,"user_id":null,"body":"component {\n\n    function nextHappyYear( year ){\n      while( listRemoveDuplicates(++year,'').len() != 4 ) {}\n      return year\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14317,"user_id":null,"body":"component {\n\n    public numeric function nextHappyYear(year) {\n        var candidate = year\n        while (!isHappyYear(++candidate)) {}\n        return candidate\n    }\n    \n    private boolean function isHappyYear(year) {\n        var digits = listToArray(year, \"\")\n        var encountered = {}\n        var isDuplicate = digits.some((d) => {\n            if (encountered.keyExists(d)) return true\n            encountered[d] = true\n            return false\n        });\n        return !isDuplicate\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14318,"user_id":null,"body":"component {\n    function nextHappyYear( year ){\n        return ( ( len(toString(year+1).listRemoveDuplicates(\"\"))==len(year) ) ? (year+1) : nextHappyYear( year+1 ) );\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14319,"user_id":null,"body":"component {\n\n    function nextHappyYear( year ){\n        var happy = (y) => len(y) == listRemoveDuplicates(y, '').len();\n        do {year++} while (!happy(year));\n        return year;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14320,"user_id":null,"body":"component {\n\n   function nextHappyYear( year ){\n         while(true) {\n            year++;\n            if(ListRemoveDuplicates(javaCast(\"string\",year),\"\").length() == javaCast(\"string\",year).length()) {\n            \treturn year;\n            }\n        }\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5af15a37de4c7f223e00012d":[{"id":14321,"user_id":null,"body":"component {\n\n    function menFromBoys( array arr ){\n        \/\/ Your code here...\n        men = [];\n        boyz= [];\n        ArrayEach(arr, function(n){\n            dest = n % 2 == 0 ? boyz : men;\n            if(!ArrayContains(dest, n)){\n                ArrayAppend(dest, n);\n            }            \n        });\n        ArraySort(men,\"numeric\", \"desc\");\n        ArraySort(boyz, \"numeric\", \"asc\");\n        ArrayAppend(boyz,men,true);\n        return boyz;        \n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14322,"user_id":null,"body":"component {\n    function menFromBoys( array arr ){\n        var e = [] ;\n        var o = [] ;\n        arr.each( (el)=>(el%2)?o.append(el):e.append(el) ) ;\n        \n        return e.toList().listSort(\"numeric\")\n          .listappend( o.toList().listSort(\"numeric\",\"desc\") )\n          .listRemoveDuplicates().listToArray() ;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14323,"user_id":null,"body":"component {\n\n    function menFromBoys( array arr ){\n        var evensAndOdds = arr.reduce((r=[[], []], n) => {\n            r[abs(n % 2) + 1].append(n);\n            return r;\n        });\n        return evensAndOdds[1].toList()\n            .listRemoveDuplicates()\n            .listToArray()\n            .sort('numeric')\n            .append(\n                evensAndOdds[2].toList()\n                    .listRemoveDuplicates()\n                    .listToArray()\n                    .sort('numeric', 'desc'),\n                true\n            );\n                \n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14324,"user_id":null,"body":"component {\n    function menFromBoys(array arr){\n        var even = [];\n        var odd = [];\n        for (var i = 1; i <= ArrayLen(arr); i++) {\n            if (arr[i] % 2 == 0 && !ArrayFind(even, arr[i]))\n                ArrayPrepend(even, arr[i]);\n            else if (arr[i] % 2 != 0 && !ArrayFind(odd, arr[i]))\n                ArrayPrepend(odd, arr[i]);\n        }\n        ArraySort(even, 'numeric', 'asc');\n        ArraySort(odd, 'numeric', 'desc');\n        ArrayAppend(even, odd, true)\n        return even;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14325,"user_id":null,"body":"component {\n\n    function menFromBoys( array arr ){\n        var men = duplicate(arr).filter(function(v,i) { return v % 2 == 0 }).sort('numeric').toList().listRemoveDuplicates().listToArray();\n\t    var boys = duplicate(arr).filter(function(v,i) { return v % 2 != 0 }).sort('numeric','desc').toList().listRemoveDuplicates().listToArray();\n\t\treturn men.merge(boys);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14326,"user_id":null,"body":"component {\n\n    function menFromBoys( array arr ){\n      var men={}\n      var boys={}\n      arr.each((i)=>{\n        var target=i%2==0?men:boys\n        target[i]=''\n      })\n      return men.keyArray().sort('numeric').append( boys.keyArray().sort('numeric','desc'), true )\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5b39e3772ae7545f650000fc":[{"id":14327,"user_id":null,"body":"component {\n\n    function removeDuplicateWords( string s ){\n        return s.listRemoveDuplicates(' ');\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14328,"user_id":null,"body":"component {\n\n    function removeDuplicateWords( string s ){\n        return listToArray(s,\" \").filter((x,i,a)=> a.find(x) == i).toList(\" \");\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14329,"user_id":null,"body":"component {\n\n    function removeDuplicateWords( string s ){\n        \/\/ Your code here...\n        words = s.split(\" \");        \n        words = ArrayMap(words, function(w){\n            return Trim(w);\n        });\n        words = ArrayFilter(words, function(w){\n            return w != \" \" && w != \"\";\n        });\n        map = {};\n        out = [];\n        for(w in words) {\n            \n            if(!map.containsKey(w)){\n                map.insert(w, 1);\n                out.append(w);\n            }\n        }\n        return ArrayToList(out, \" \");\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14330,"user_id":null,"body":"component {\n\n    function removeDuplicateWords( string s ){\n         return s.listRemoveDuplicates(\" \",true);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14331,"user_id":null,"body":"component {\n\n    function removeDuplicateWords( string s ){\n        return listRemoveDuplicates(s,\" \");\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14332,"user_id":null,"body":"component {\n\n    function removeDuplicateWords( string s ){\n        strArray = listToArray( s, ' ' );\n\n        filtered = strArray.filter( function( item, index, array ) {\n            var itemPositions = strArray.findAll( item );\n            return\n                ( itemPositions.len() == 1 || itemPositions[ 1 ] == index );\n            } );\n\n        return arrayToList( filtered, ' ' );\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14333,"user_id":null,"body":"component {\n\n    function removeDuplicateWords( string s ){\n        return ListRemoveDuplicates(s, \" \", true )\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14334,"user_id":null,"body":"component {\n\n    function removeDuplicateWords( string s ){\n        \/\/ Your code here...\n        \n        var wordList = listToArray(s,' ');\n        var uniqueAr = [];\n        var uniqueKeys = {};\n        \n        for(var word in wordList) {\n            if(!structKeyExists(uniqueKeys,word)) {\n                uniqueKeys[word] = true;\n                arrayAppend(uniqueAr,word);\n            }\n        }\n        \n        return arrayToList(uniqueAr, ' ');\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14335,"user_id":null,"body":"component {\n\n    function removeDuplicateWords( string s ){\n        var usedWords = []\n        s.listEach( (word)=>{\n            if( !usedWords.findNoCase( word ) ) {\n              usedWords.append( word )\n            }\n        }, ' ' );\n        return usedWords.toList( ' ' );\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5bd776533a7e2720c40000e5":[{"id":14336,"user_id":null,"body":"component {\n\n    function pendulum( array values ){\n        var retme=[];\n        values.sort(\"numeric\").map(function(item,index){\n                (index mod 2) ? retme.prepend(item) :  retme.append(item);\n\n        });\n        return retme;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14337,"user_id":null,"body":"component {\n\n    function pendulum( array values ){\n        return values.sort('numeric')\n            .reduce((r=[], v, i) => i % 2 == 0 ? r.append(v) : r.prepend(v));\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14338,"user_id":null,"body":"component {\n\n    function pendulum( array values ){\n        local.out = [];\n        \n        arguments.values.sort(\"numeric\", \"asc\");\n        \n        for(local.i=1; local.i<=arraylen(arguments.values); i++){\n            if(local.i % 2){\n                arrayPrepend(local.out, arguments.values[local.i]);\n            }else{\n                arrayAppend(local.out, arguments.values[local.i]);\n            }\n        }\n        \n        return local.out;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14339,"user_id":null,"body":"component {\n\n    function pendulum( array values ){\n        var c1 = (values.len()%2==0)? ((values.len()-1)\\2) +1 : ((values.len())\\2) +1 ;\n        var c2 = c1 ;\n        var retval = [] ;\n        \n        values.sort(\"numeric\").map( function (el,idx) \n                { \n                    if (idx%2==0) {\n                        retval[++c1]=el;\n                    } else { \n                        retval[c2--]=el; \n                    } \n                }\n            ) ;\n        \n        return retval ;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14340,"user_id":null,"body":"component {\n  function pendulum(array values) {\n    sorted = []\n    values.sort('numeric')\n    for (i=1; i<=values.len(); i++)\n      i%2==1? sorted.prepend(values[i]): sorted.append(values[i])\n    return sorted\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14341,"user_id":null,"body":"component {\n\n    function pendulum(arr){\n\t \tvar n = [];\n\t \tarr.sort('numeric');\n\t \tfor(var i=1;i<=arr.len();i++) {\n\t \t\tif(i % 2 == 0) {\n\t \t\t\tn.append(arr[i]);\n\t \t\t} else {\n\t \t\t\tn.prepend(arr[i]);\n\t \t\t}\n\t \t}\n\t \treturn n;\n\t}\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14342,"user_id":null,"body":"component {\n\n    function pendulum( array values ){\n       return values.sort('numeric').reduce((acc=[],i)=>acc.len()%2==0?acc.prepend(i):acc.append(i))\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5bdcd20478d24e664d00002c":[{"id":14343,"user_id":null,"body":"<!--- tag syntax FTW! --->\n<cfcomponent>\n    \n<cffunction name=\"wheatFromChaff\" returntype=\"array\">\n    <cfargument name=\"values\" type=\"array\" required=true>\n    <cfset var headIndex = 0>\n    <cfset var tailIndex = arrayLen(values)>\n\n    <cfloop index=\"headIndex\" from=\"1\" to=\"#tailIndex#\">\n\n        <cfif values[headIndex] gt 0>\n            <cfloop index=\"tailIndex\" from=\"#tailIndex#\" to=\"#headIndex#\" step=\"-1\">\n                <cfif values[tailIndex] lt 0>\n                    <cfbreak>\n                <\/cfif>\n            <\/cfloop>\n\n            <cfif headIndex gte tailIndex>\n                <cfbreak>\n            <\/cfif>\n\n            <cfset arraySwap(values, headIndex, tailIndex)>\n        <\/cfif>\n    <\/cfloop>\n    <cfreturn values>\n<\/cffunction>\n\n<\/cfcomponent>","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14344,"user_id":null,"body":"component {\n  function wheatFromChaff(array values) {\n    i = 1; j = 1\n    ps = values.findAll((e) => e>0); lp = ps.len()\n    ns = values.findAll((e) => e<0).reverse(); ln = ns.len()\n    while (i<=lp && j<=ln && ps[i]<ns[j]) values.swap(ps[i++], ns[j++])\n    return values\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14345,"user_id":null,"body":"component {\n\n    function wheatFromChaff( array values ) {\n        \/\/ Your Code is Here .. Enjoy !!\n         y=arrayLen(values);\n        for (i=1; i lte arrayLen(values); i++)\n        {\n           \n            if(values[i] gt 0 ){\n               \n                for(y=y;y gt i; y--){\n                    if(values[y] lt 0){\n                         t=values[i];\n                        values[i]=values[y];\n                        values[y]=t;\n                        break;\n                    }\n                }\n            }\n        }    \n        return values\n    }\n    \n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14346,"user_id":20,"body":"component {\n\n    function wheatFromChaff( array values ) {\n        left=1;\n        right=len(values);\n        while(left<right)\n        {\n            while(left<len(values)&&values[left]<0)\n                left++;\n            if(left<right&&values[right]<0)\n            {\n                t=values[left];\n                values[left]=values[right];\n                values[right]=t;\n                left++;\n            }\n            right--;\n        }\n        return values;\n    }\n    \n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14347,"user_id":null,"body":"component {\n\n    function wheatFromChaff( array values ) {\n        var retval = values.duplicate() ;\n        var negs = values.findAll(function(s) { return s<0; }) ;\n        var negLen = negs.len() ;\n        var iter = 0 ;\n        retval.each( \n            function(el,idx) {\n                if( el>0 && idx<=negLen){ \n                    retval.swap(idx,negs[negLen-iter]) ;\n                    iter++\n                }\n            } \n        ) ;\n        return retval ;\n    }\n    \n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14348,"user_id":null,"body":"component {\n\n    function wheatFromChaff(values) {\n        var head = 1\n        var tail = values.len()\n        while( head < tail ) {\n          if( values[head] > 0 ) {\n            while(  tail > head ) {\n                if( values[tail] < 0 ) break;\n                tail--\n            }\n            if( tail <= head ) return values\n            var tmp = values[head]\n            values[head] = values[tail]\n            values[tail] = tmp\n          }\n          head++\n        }\n        return values\n    }\n    \n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5ca24526b534ce0018a137b5":[{"id":14349,"user_id":20,"body":"component {\n    string function sendMessage( required string message ) {\n  m={1: '.,?!', 2: 'abc', 3: 'def', 4: 'ghi', 5: 'jkl', 6: 'mno', 7: 'pqrs',\n  8: 'tuv', 9: 'wxyz', \"*\": \"'-+=\", 0: \" \"};\n  r='';\n    var u=false;\n        l=m.keyArray();\n        for(var i=0; i<len(message); i++)\n  {\n      var c=message.charAt(i);\n      var cum=Compare(c, UCase(c));\n    if(REFind(\"[a-zA-Z]\", c)&&(cum==0)!=u)\n    {\n        u=!u;\n      r&=\"##\";\n    }\n    c=LCase(c);\n    if(REFind(\"[\\d*##]\", c))\n    {\n      if(r.endsWith(c))\n        r&=\" \";\n      r&=c&'-';\n    }\n    else\n      for(var j=1; j<=StructCount(m); j++)\n      {\n          var k=l[j];\n        var myDex=m[k].indexOf(c)+1;\n        if(myDex!=0)\n        {\n          if(r.endsWith(k))\n            r&=' ';\n            for(var number=0; number<myDex; number++)\n          r&=k;\n        }\n      }\n  }\n  return r;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14350,"user_id":null,"body":"component {\n\n    isUpper = false\n    lastKey = ''\n    \n    keyMap = {\n      a:'2',\n      b:'22',\n      c:'222',\n      d:'3',\n      e:'33',\n      f:'333',\n      g:'4',\n      h:'44',\n      i:'444',\n      j:'5',\n      k:'55',\n      l:'555',\n      m:'6',\n      n:'66',\n      o:'666',\n      p:'7',\n      q:'77',\n      r:'777',\n      s:'7777',\n      t:'8',\n      u:'88',\n      v:'888',\n      w:'9',\n      x:'99',\n      y:'999',\n      z:'9999',\n      '.':'1',\n      ',':'11',\n      '?':'111',\n      '!':'1111',\n      \"'\":'*',\n      '-':'**',\n      '+':'***',\n      '=':'****',\n      ' ':'0'\n    }\n    longPressChars = [1,2,3,4,5,6,7,8,9,0,'*','##']\n  \n    string function sendMessage( required string message ) {\n    \n        isUpper = false\n        lastKey = ''\n        \n        return message.listMap( (c)=>{\n            return pause( type( c ) )\n        }, '' )\n    }\n    \n    function pause(c){\n        var currKey = c.replace('##','').left(1)\n        if( lastKey == currKey ) {\n            c = ' ' & c\n        }\n        if( c.right(1) != '-' ) {\n            lastKey=currKey\n        } else {\n            lastKey=''\n        }\n        return c\n    }\n    \n    function type(c){\n        if( longPressChars.find( c ) ){\n            return c&'-'\n        }\n        \n        if( ( c.reFind('[A-Z]') && !isUpper ) || ( c.reFind('[a-z]') && isUpper ) ) {\n            isUpper = !isUpper\n            lastKey = ''\n            return '##' & keyMap[c]\n        }\n        return keyMap[c]\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14351,"user_id":76,"body":"component {\n    string function sendMessage( required string message ) {\n        \/\/ Ascii keys representation 32-122, a bit cheeky :P\n        var keys = [\"0\", \"1111\",\"\",\"##-\",\"\",\"\",\"\",\"*\",\"\",\"\",\"*-\",\"***\",\"11\",\"**\",\"1\",\"\",\"0-\", \"1-\", \"2-\", \"3-\", \"4-\", \"5-\", \"6-\", \"7-\", \"8-\", \"9-\",\"\",\"\",\"\",\"****\",\"\",\"111\",\"\", \"2\", \"22\", \"222\", \"3\", \"33\", \"333\", \"4\", \"44\", \"444\", \"5\", \"55\", \"555\", \"6\", \"66\", \"666\", \"7\", \"77\", \"777\", \"7777\", \"8\", \"88\", \"888\", \"9\", \"99\", \"999\", \"9999\",\"\",\"\",\"\",\"\",\"\",\"\",\"2\", \"22\", \"222\", \"3\", \"33\", \"333\", \"4\", \"44\", \"444\", \"5\", \"55\", \"555\", \"6\", \"66\", \"666\", \"7\", \"77\", \"777\", \"7777\", \"8\", \"88\", \"888\", \"9\", \"99\", \"999\", \"9999\"];\n        var output = \"\";\n        var upperInput = false;\n        for (var i = 1; i <= message.len(); i++) {\n            var char = message[i];\n            var isUpper = char.matches(\"[A-Z]\");\n            if (char.matches(\"[A-Za-z]\") && upperInput != isUpper) {\n                output &= '##';\n                upperInput = !upperInput;\n            }\n            var key = keys[char.asc() - 31];\n            if (output.len() > 0 && output[output.len()] == key[1])\n              output &= ' ';\n            output &= key;\n        }\n        return output;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5d50e3914861a500121e1958":[{"id":14352,"user_id":645,"body":"component {\n    string function add_letters(required Array letters) {\n        return chr(letters.reduce((a, b) => a + asc(b) - 96, 25) % 26 + 97);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14353,"user_id":null,"body":"component {\n    string function add_letters(required Array letters) {\n        var s = letters.map( ( l ) => asc( l ) - 96 ).sum() % 26;\n        return s ? chr( 96 + s ) : 'z';\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14354,"user_id":null,"body":"component {\n    variables.letras = 'abcdefghijklmnopqrstuvwxyz'.listToArray( '' );\n    \n    string function add_letters(required Array letters) {\n        return toletter( letters.reduce( ( num=0, letter ) => num+toNumber( letter ) ) ?: 0 );\n    }\n    \n    numeric function toNumber( string letter ) {\n        return letras.find( letter )\n    }\n    \n    string function toLetter( string num ) {\n        return letras[ num % 26 ? num % 26 : 26 ];\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14355,"user_id":null,"body":"component {\n    charIdx = listToArray('abcdefghijklmnopqrstuvwxyz','');\n    string function add_letters(required Array letters) {\n       var c = letters.reduce((acc,i) => acc + charIdx.find(i),0);\n       return (c % 26) > 0 ? charIdx[(c % 26)] : 'z';\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14356,"user_id":null,"body":"component {\n    string function add_letters(required Array letters) {\n        var sum = arrayReduce(letters, function(t, item, index) {\n          return (t + (item == \"z\" ? 0 : asc(item) - 96)) mod 26;\n        }, 0);\n        return sum != 0 ? chr((sum) + 96) : \"z\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14357,"user_id":null,"body":"component {\n    string function add_letters(required Array letters) {\n    \tval = letters.map( (item) => asc(item)-96 ).sum() % 26;\n    \n    \tif(val eq 0) {\n    \t\treturn 'z';\n    \t}else{\n    \t\treturn chr( val % 26 + 96 );\n    \t}\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14358,"user_id":null,"body":"component {\n    variables.$dict = {  \n      \"E\":5, \"A\":1, \"I\":9, \"O\":15, \"N\":14, \"R\":18, \"T\":20, \n      \"L\":12, \"S\":19, \"U\":21, \"D\":4, \"G\":7, \"B\":2, \"C\":3, \n      \"M\":13, \"P\":16, \"F\":6, \"H\":8 ,\"V\":22, \"W\":23, \"Y\":25,\n      \"K\":11, \"J\":10, \"X\":24, \"Q\":17 , \"Z\":26\n    };\n    \n    string function add_letters(required Array letters) {\n        var tot = 0;\n        nums = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n        for (var i = 1; i <= Len(letters); i++)\n            tot += $dict[letters[i]];\n        return nums[(tot % 26 == 0) ? 26 : tot % 26];\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14359,"user_id":null,"body":"component {\n    string function add_letters(required Array letters) {\n        var res=(letters.reduce(function(sum,next){\n            return sum+asc(next)-96;\n        },0) mod 26)+96;\n        return chr(res eq 96 ? 122: res);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14360,"user_id":null,"body":"component {\n    string function add_letters(required Array letters) {\n        var alphaArray = listToArray( 'abcdefghijklmnopqrstuvwxyz', '' );\n        var sum = 0;\n        \n        for( var letter in arguments.letters ) {\n            sum += alphaArray.find( letter );\n        }\n        \n        if( sum % 26 == 0 )\n            sum = 26;\n        else\n            sum = sum % 26;\n            \n        return alphaArray[ sum ];\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14361,"user_id":null,"body":"component {\n    string function add_letters(required Array letters) {\n            \n            if(ArrayLen(letters) == 0)\n            return 'z';\n            \n            var numbers = letters.map((letter) => { return Asc(letter)-96});\n            var count = numbers.reduce((a,b) => {\n                            return (a+b) > 26 ? a+b-26 : a+b;\n                        },0);\n\n            return chr(count+96);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5d5ee4c35162d9001af7d699":[{"id":14362,"user_id":null,"body":"component {\n\n    function sumOfMinimums(arr){\n        return arr.each(function(a,i){ arr[i] = a.min(); }).sum();\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14363,"user_id":null,"body":"component {\n\n    function sumOfMinimums(lst){\n        \/\/ Your code here...\n        return ArraySum(ArrayMap(lst, function(x){\n            return ArrayMin(x);\n        }));\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14364,"user_id":344,"body":"component {\n    sumOfMinimums = (arr) => arr.map((v) => v.min()).sum()\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14365,"user_id":344,"body":"component {\n    sumOfMinimums = (arr) => arr.map((v) => v.min()).reduce((acc, cur) => acc + cur, 0)\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14366,"user_id":null,"body":"component {\n    function sumOfMinimums(a){    \n       return a.reduce((acc, v) => acc + v.min(), 0);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14367,"user_id":null,"body":"component {\n\n    function sumOfMinimums(array arr){\n        return arraySum(arr.map(function(item){return item.min();}));\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14368,"user_id":53,"body":"component {\n    function sumOfMinimums(array matrix) {\n        return matrix.reduce((m=0,i)=>m+=i.sort('numeric')[1])\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14369,"user_id":null,"body":"component {\n    function sumOfMinimums(a) {\n        return arrayReduce(a, function(value = 0, element) {\n            return value + ArrayMin(element);\n        });\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14370,"user_id":null,"body":"component {\n  function sumOfMinimums(rows) {\n    return rows.map((row) => row.min()).sum()\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14371,"user_id":null,"body":"component {\n  function sumOfMinimums(rows) {\n    return ArraySum(ArrayMap(rows, (row) => ArrayMin(row)))\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5dae2599a8f7d90025d2f15f":[{"id":14372,"user_id":null,"body":"component {\n\n    function consecutiveDucks( numeric num ){\n        return bitAnd(num, num - 1) != 0;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14373,"user_id":null,"body":"component {\n\n    function consecutiveDucks( numeric num ){\n        return !!bitAnd( num, num-1 )\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14374,"user_id":53,"body":"component {\n\n    function consecutiveDucks( numeric num ){\n        return num % 2 != 0 ? num != 1 : consecutiveDucks(num \/ 2);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14375,"user_id":50,"body":"component {\n\n    function consecutiveDucks( numeric num ){\n        while (true){\n            if (num==1) return false;\n            if (num&1==1 || num == 0) return true;\n            num\/=2;\n        }\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14376,"user_id":76,"body":"component {\n    consecutiveDucks = (n) => !!BitAnd(n, n - 1);\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14377,"user_id":null,"body":"component {\n  function consecutiveDucks(numeric num) {\n    n = 1\n    do if (!(num-=n)%++n) return true\n    while (num>n)\n    return false\n  }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14378,"user_id":null,"body":"component {\n\n    function consecutiveDucks( numeric num ){\n        if (num%2==1) { return true; }\n        for ( var L=1; (L*(L+1))<(num*2); L++ ) {\n            var a = (1.0*num-(L*(L+1))\/2) \/ (L+1) ;\n            \/\/writeOutput(a & \"<br>\");\n            if ( a - int(a) == 0.0) { \n                return true ;\n            }\n        }\n        return false;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14379,"user_id":null,"body":"component {\n\n    function consecutiveDucks( numeric num ){\n\t\treturn !isValid(\"integer\",log(num)\/log(2));\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5dcde0b9fcb0d100349cb5c0":[{"id":14380,"user_id":20,"body":"component {\n\n    function longestPalindrome( string text ) {\n        N = len(text); \n        if (N == 0) \n            return text; \n        N = 2 * N + 1; \/\/ Position count \n        L = []; \/\/ LPS Length Array \n        L[1] = 0; \n        L[2] = 1; \n        C = 2; \/\/ centerPosition \n        R = 3; \/\/ centerRightPosition \n        i = 1; \/\/ currentRightPosition \n        iMirror=-1; \/\/ currentLeftPosition \n        maxLPSLength = 0; \n        maxLPSCenterPosition = 1; \n        start = -1; \n        end = -1; \n        diff = -1; \n  \n        \/\/ Uncomment it to prLPS Length array \n        \/\/ printf(\"%d %d \", L[0], L[1]); \n        for (i = 2; i <= N; i++)  \n        { \n  \n            \/\/ get currentLeftPosition iMirror  \n            \/\/ for currentRightPosition i \n            iMirror = 2 * C - i; \n            L[i] = 0; \n            diff = R - i; \n  \n            \/\/ If currentRightPosition i is within  \n            \/\/ centerRightPosition R \n            if (diff > 0) \n                L[i] = min(L[iMirror], diff); \n  \n            \/\/ Attempt to expand palindrome centered at  \n            \/\/ currentRightPosition i. Here for odd positions,  \n            \/\/ we compare characters and if match then  \n            \/\/ increment LPS Length by ONE. If even position,  \n            \/\/ we just increment LPS by ONE without  \n            \/\/ any character comparison \n            while (((i + L[i]) + 1 < N && (i - L[i]) > 0) &&  \n                               (((i + L[i] + 1) % 2 == 0) ||  \n                         (text.charAt((i + L[i] + 1) \/ 2) ==  \n                          text.charAt((i - L[i] - 1) \/ 2)))) \n            { \n                L[i]++; \n            } \n  \n            if (L[i] > maxLPSLength) \/\/ Track maxLPSLength \n            { \n                maxLPSLength = L[i]; \n                maxLPSCenterPosition = i; \n            } \n  \n            \/\/ If palindrome centered at currentRightPosition i \n            \/\/ expand beyond centerRightPosition R, \n            \/\/ adjust centerPosition C based on expanded palindrome. \n            if (i + L[i] > R)  \n            { \n                C = i; \n                R = i + L[i]; \n            } \n  \n            \/\/ Uncomment it to prLPS Length array \n            \/\/ printf(\"%d \", L[i]); \n        } \n  \n        start = (maxLPSCenterPosition - maxLPSLength) \/ 2; \n        end = start + maxLPSLength-1;\n        r=text.substring(start, end+1);\n        if(len(r)<2)\n          return text.substring(0, 1);\n        return r;\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14381,"user_id":76,"body":"component {\n    string function longestPalindrome( required string str ) {\n        var s = \"$\" & listToArray( str, '' ).toList( '$' ) & \"$\";\n        var p = []\n        var len = s.length();\n        var center = 0;\n        var right = 0;\n        var maxLen = 0;\n        var result = '';\n        for ( var i = 0; i <= len; i++ ) p.append( 0 );\n        \n        for ( var i = 1; i <= len; i++ ) {\n            if ( i < right )\n              p[ i ] = [ right - i, p[ 2 * center - i ] ].min();\n            while ( i + 1 + p[ i ] <= len && i - 1 - p[ i ] > 0 && s[ i + 1 + p[ i ] ] == s[ i - 1 - p[ i ] ] ) {\n              p[ i ]++;\n            }\n            if ( i + p[ i ] > right ) {\n              center = i;\n              right = i + p[ i ];\n            }\n            if ( p[ i ] > maxLen ) {\n              maxLen = p[ i ];\n              result = s.substring( center - p[ i ], center + p[ i ] - 1 ).replace( \"$\", \"\", \"all\" );\n            }\n        }\n        \n        return result;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14382,"user_id":null,"body":"component {\n\n    function longestPalindrome(string s) {\n            \n        var expandRange = function(index) {\n            var offset = 0; \n            while(compareMirror(index, ++offset)) {};\n        };\n        \n        var compareMirror = function(index, offset) {\n            var boundaryLeft = index-offset;\n            var boundaryRight = index+offset;\n            if (boundaryLeft == 0) {\n                return false;\n            }\n            if (boundaryRight > size) {\n                return false;\n            }\n            var leftChar = chars[boundaryLeft];\n            var rightChar = chars[boundaryRight];\n            if (compare(leftChar, rightChar) == 0) {\n                trackMatch(boundaryLeft, boundaryRight, leftChar);\n                return true;\n            }\n            return false;\n        };\n        \n        var trackMatch = function(boundaryLeft, boundaryRight, leftChar) {\n            var diff = boundaryRight-boundaryLeft;\n            if (!compare(leftChar, '_')==0 && diff > biggestRange) {\n                biggestRange = diff;\n                matchLeft = boundaryLeft;\n                matchRight = boundaryRight;\n            }\n        };\n        \n        var reconstruct = function() {\n            var bestMatch = arraySlice(chars, matchLeft, biggestRange+1);\n            var result = arrayToList(bestMatch, '');\n            return replace(result, \"_\", \"\", \"all\");\n        };\n        \n        var deconstruct = function() {\n            var exploded = listToArray(s, \"\");\n            return arrayReduce(exploded, function(acc, el) {\n                arrayAppend(acc, [el, \"_\"], true);\n                return acc;\n            }, []);\n        };\n        \n        var solveit = function() {\n            if (isPalindrome(s)) {\n                return s;\n            }\n            var i = 1;\n            while(++i < size) {\n                expandRange(i);\n            }\n            if (biggestRange == 0) {\n                return left(s, 1);\n            }\n            return reconstruct();\n        }\n        \n        var chars = deconstruct(s);\n        var size = arrayLen(chars);\n        var biggestRange = 0;\n        var matchLeft = 0;\n        var matchRight = 0;\n        \n        return solveit();\n    }\n    \n    function isPalindrome(s) {\n        return s == reverse(s);\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14383,"user_id":null,"body":"component {\n\n    longestPalindrome = function(s) {\n        \n        if (s.len() <= 1) return s\n        \n        if(listValueCount(s, left(s,1),\"\") == s.len()) {\n            return s;\n        }\n\n        var tmp = [1];\n        var maxCenterIndex = -99999;\n        var str = '###s.listToArray(\"\").toList(\"##\")###';\n        var palindromeCenterIndexWithMaxRight = 0\n\n        for (var i = 1; i < str.len(); i++) {\n            var maxRight = palindromeCenterIndexWithMaxRight + tmp[palindromeCenterIndexWithMaxRight+1] - 1;\n            if (maxRight <= i) {\n                var tmpIndex = i - 1;\n                while (tmpIndex >=0 && i - tmpIndex + i < str.len() && str[tmpIndex + 1] == str[i - tmpIndex + i + 1]) { \n                    tmpIndex -= 1;\n                }\n                tmp[i+1] = i - tmpIndex ;\n            } else {\n                var mirrorIndex = palindromeCenterIndexWithMaxRight - (i - palindromeCenterIndexWithMaxRight)\n                var mirrorRightIndex = min(i + tmp[mirrorIndex + 1] - 1,maxRight)\n                while (mirrorRightIndex < str.len() && i - (mirrorRightIndex - i) >= 0 && str[mirrorRightIndex+1] == str[i - (mirrorRightIndex - i - 1)]) {\n                    mirrorRightIndex += 1;\n                }\n                tmp[i+1] = mirrorRightIndex - i;\n            }\n            if (i + tmp[i+1] - 1 > maxRight) {\n                palindromeCenterIndexWithMaxRight = i;\n            } \n            if (maxCenterIndex == -99999 || tmp[i+1] > tmp[maxCenterIndex+1]) {\n                maxCenterIndex = i;\n            }\n        }\n\n        var pos1 = maxCenterIndex - (tmp[maxCenterIndex+1] - 1);\n        var pos2 = maxCenterIndex + tmp[maxCenterIndex+1];\n\n        return str.mid(pos1 + 1, pos2 - pos1).replace(\"##\",\"\",\"all\")\n    \n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14384,"user_id":null,"body":"component {\n\n    function longestPalindrome( string s ) {\n        if ( s.len() < 2 ) return s;\n        var char_array = listToArray( s.reReplace( '(.)', '~\\1', 'all' ) & '~', '' );\n        var max_lengths = [ ];\n        var center_index = 1;\n        var right_bound_index = 1;\n        var longest_index = 1;\n\n        for ( var i = 1; i <= char_array.len(); i++ ) {\n            max_lengths[ i ] = 0;\n\n            if ( i < right_bound_index ) {\n                var iMirrored = ( 2 * center_index ) - i;\n                max_lengths[ i ] = min( right_bound_index - i, max_lengths[ iMirrored ] );\n            }\n\n            var j = max_lengths[ i ] + 1;\n\n            while (\n                i - j > 0 &&\n                i + j <= char_array.len() &&\n                char_array[ i - j ] == char_array[ i + j ]\n            ) {\n                j++;\n                max_lengths[ i ]++;\n            }\n\n            if ( i + max_lengths[ i ] > right_bound_index ) {\n                center_index = i;\n                right_bound_index = i + max_lengths[ i ];\n                if ( max_lengths[ i ] > max_lengths[ longest_index ] ) {\n                    longest_index = i;\n                }\n            }\n        }\n\n        return char_array\n            .slice( longest_index - max_lengths[ longest_index ], 2 * max_lengths[ longest_index ] + 1 )\n            .toList( '' )\n            .replace( '~', '', 'all' );\n    }\n\n}\n","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14385,"user_id":null,"body":"component {\n\n    function longestPalindrome( string s ) {\n        var l1 = left(s,1);\n        var slen = s.len();\n        if(listRemoveDuplicates(s,\"\").len() == 1) return s;\n        \n        loop index=\"strIdx\" from=\"2\" to=\"#Len( s )#\" step=\"1\" {\n            \n            var char = Mid( s, strIdx, 1 );\n            \n            \n            \/\/Pass with current letter in the middle\n            var offset = 1;\n            var track = \"\";\n            \/\/writeoutput(char & \"[\" & strIdx & \"]-\");\n            while(\n                (strIdx - offset) > 0 \n                && (offset + offset) <= slen \n                && (track == reverse(track) )){\n                 var midstart = strIdx-offset;\n                 var midcnt = offset + offset;\n                track = mid(s,midstart,midcnt);\n                if(track.len() > l1.len() && track == reverse(track)) l1 = track;\n               \/\/ writeoutput(track & \"(\" & (track == reverse(track)) & \"-\" & track.len() & \"), \");\n                offset++;\n            }\n            \n            \/\/writeoutput(\"==\" &  l1 & \"<br>\");\n            \n            track = char & mid(s,strIdx+1,1);\n            if(track.len() > l1.len() && track == reverse(track)) l1 = track;\n            \n            offset = 1;\n            track = \"\";\n            \/\/writeoutput(char & \"[\" & strIdx & \"]-\");\n            \/\/Pass with current letter  plus next letter\n            while(\n                (strIdx - offset) > 0 \n                && (offset + offset + 1) <= slen \n                && (track == reverse(track) )){\n                 var midstart = strIdx-offset;\n                 var midcnt = offset + offset + 1;\n                track = mid(s,midstart,midcnt);\n                if(track.len() > l1.len() && track == reverse(track)) l1 = track;\n                \/\/writeoutput(track & \"(\" & (track == reverse(track)) & \"-\" & track.len() & \"), \");\n                offset++;\n            }\n            \/\/writeoutput(\"==\" &  l1 & \"<br>\");\n            \n        }\n        return l1;\n        \n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14386,"user_id":null,"body":"component {\n\n    function longestPalindrome( string s ) {\n    \t\n    \t  \/\/ Check if entire string is same char\n    \t  var allSame = true\n    \t  var char = 0\n    \t  while( ++char < s.len() ) {\n    \t  \tif( s[char] != s[char+1] ) {\n    \t  \t\tallSame = false\n    \t  \t\tbreak;\n    \t  \t}\n    \t  }\n    \t  if( allSame ) {\n    \t  \treturn s\n    \t  }\n    \t\n          var longest = ''\n          var thisLongest = ''\n          var n=0\n          for (var i = 1; local.i <= arguments.s.len(); i++) {\n            \n            \/\/ if current char matches next char, this may be the middle of an even palindrome\n            n=0\n            while( local.i-local.n >0 && local.i+1+local.n<=len(arguments.s) && mid(arguments.s, local.i-local.n, 1 ) == mid( arguments.s, local.i+1+local.n, 1 ) ){\n                local.n++\n            }\n            \/\/ Even matches were found\n            if( local.n>0 ) {\n                local.n--\n                local.thisLongest = arguments.s.mid(local.i-local.n, 2*(local.n+1) )\n                if( len(local.thisLongest) > len(local.longest) ) {\n                  local.longest = local.thisLongest\n                }\n            }\n            \/\/ if current char has matches on both sides, this may be the middle of an odd palindrome\n            local.n=0\n            while( local.i-1-local.n >0 && local.i+1+local.n<=len(arguments.s) && mid( arguments.s, local.i-1-local.n, 1 ) == mid( arguments.s, local.i+1+local.n, 1 ) ){\n                local.n++\n            }\n            \/\/ Odd matches were found\n            if( local.n>0 ) {\n                local.n--\n                local.thisLongest = arguments.s.mid(local.i-1-local.n, (2*(local.n+1))+1 )\n                if( len(local.thisLongest) > len(local.longest) ) {\n                  local.longest = local.thisLongest\n                }\n            }\n            \n          }\n          if( longest == '' && s.len() > 0 ) {\n            longest = s[1]\n          }\n          return longest\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5efae11e2d12df00331f91a6":[{"id":14387,"user_id":null,"body":"component {\n    string function crack( string md5hash ) {\n        for( var pin = 0; pin <= 99999; pin++ ) {\n            if ( arguments.md5hash == hash( numberFormat( pin, \"00000\" ), \"MD5\" ) ) {\n                return numberFormat( pin, \"00000\" );\n            }\n        }\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14388,"user_id":20,"body":"component {\n    string function crack( string md5hash ) {\n        for(a=0; a<10; a++)\n        for(b=0; b<10; b++)\n        for(c=0; c<10; c++)\n        for(d=0; d<10; d++)\n        for(e=0; e<10; e++)\n            {\n                s=a&b&c&d&e;\n                if(hash(s)==md5hash)\n                    return s;\n            }\n        return \"\";\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14389,"user_id":76,"body":"component {\n    string function crack( string md5hash ) {\n        for ( var i = 0; i < 100000; i++ ) {\n            var pin = NumberFormat( i, '00000' );\n            var pinHash = hash(pin, \"MD5\").toLowerCase();\n            if ( pinHash.equals(md5hash) ) return pin;\n        }\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5effa412233ac3002a9e471d":[{"id":14390,"user_id":53,"body":"component {\n    numeric function add( numeric x, numeric y ) {\n      var d = x % 10 + y % 10;\n      if (x + y == 0) return d;\n      var n = add(x \\ 10, y \\ 10);\n      return n * (d >= 10 ? 100 : 10) + d;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14391,"user_id":76,"body":"component {\n    numeric function add( numeric num1, numeric num2 ) {\n        if ( num1 < num2 ) return add( num2, num1 );\n        var a = \"\" & num1;\n        var b = numberFormat( num2, repeatString( \"0\", a.len() ) );\n        return val(a.listToArray('').reduce( (s, c, i) => s & ( val(c) + val( b[i] ) ), \"\") );\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14392,"user_id":20,"body":"component {\n    numeric function add( numeric num1, numeric num2 ) {\n        s=\"\";\n        while(num1>0&&num2>0)\n        {\n            a=num1%10;\n            b=num2%10;\n            n=a+b;\n            s=n&s;\n            num1=floor(num1\/10);\n            num2=floor(num2\/10);\n        }\n        if(num1>0)\n            s=num1&s;\n        else if(num2>0)\n            s=num2&s;\n        if(len(s)==0)\n            return 0;\n        return int(s);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14393,"user_id":null,"body":"component {\n    Numeric function add( numeric num1, numeric num2 ) {\n        var biggest = max(len(num1),len(num2)) ;    \n        var lotsaZero = repeatString(\"0\",biggest) ;\n        var n1a = right( (lotsaZero & num1) ,biggest ).listToArray(\"\") ;\n        var n2a = right( (lotsaZero & num2) ,biggest ).listToArray(\"\") ;\n        \n        var retval = \"\" ;\n        \n        for ( var itr = 1; itr <= biggest; itr++ ) {\n            retval &= ( n1a[itr] + n2a[itr] )  ;\n        }\n\n        return retval ;\n    }  \n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14394,"user_id":527,"body":"component {\n    numeric function add(numeric x, numeric y) {\n        var res = 0;\n        var m = 1;\n        while (x != 0 || y != 0) {\n            var s = x % 10 + y % 10;\n            res += s * m;\n            m *= s < 10 ? 10 : 100;\n            x = x \\ 10;\n            y = y \\ 10;\n        }\n        return res;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5f0ed36164f2bc00283aed07":[{"id":14395,"user_id":null,"body":"component {\n    numeric function overTheRoad( required numeric address, required numeric n ) {\n        return (n*2+1)-address;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14396,"user_id":null,"body":"component {\n    numeric function overTheRoad( required numeric address, required numeric n ) {\n        var evenMaxValue = n * 2;\n        var oddMaxValue = evenMaxValue - 1;\n        return (address % 2 == 0) ? oddMaxValue - (address - 1) + 1 : evenMaxValue - (address + 1) + 2;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14397,"user_id":null,"body":"component {\n    numeric function overTheRoad( required numeric address, required numeric n ) {\n        return (n * 2) + (address % 2 == 0 ? -(address - 1) : 1 - address)\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14398,"user_id":50,"body":"component {\n    numeric function overTheRoad( required numeric add, required numeric n ) {\n        return 1-add+2*n;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14399,"user_id":null,"body":"component {\n    numeric function overTheRoad( required numeric address, required numeric n ) {\n        return 2 * n - address + 1;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14400,"user_id":null,"body":"component {\n    numeric function overTheRoad( required numeric address, required numeric n ) {\n        return 2 * n - (address - 1);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14401,"user_id":20,"body":"component {\n    numeric function overTheRoad( required numeric address, required numeric n ) {\n        column=floor((address+1)\/2);\/\/1\n        otherSide=n-column+1;\/\/3\n        if(address%2==1)\n        {\n            return otherSide*2;\n        }\n        return otherSide*2-1;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14402,"user_id":null,"body":"component {\n    Numeric function overTheRoad( required numeric address, required numeric n ) {\n       return n*2 - address +1 ;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14403,"user_id":527,"body":"component {\n    numeric function overTheRoad(required numeric address, required numeric n ) {\n        return 2 * n + 1 - address;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14404,"user_id":76,"body":"component {\n    numeric function overTheRoad( required numeric address, required numeric n ) {\n        return n * 2 - address + 1;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5f70c883e10f9e0001c89673":[{"id":14405,"user_id":null,"body":"component {\n    array function flip(string dir, array arr) {\n        \n        var matrix = [];\n        for(var row = 1; row <= arr.len(); row++)\n        {\n            for(var col = 1; col <= arr[row]; col++)\n            {\n                if(matrix.len() < col) matrix[col] = [];\n                matrix[col].append(1);\n            }  \n        }\n        \n        returnArr = [];\n        for(var i = 1; i <= arr.len(); i++)\n        {\n            returnArr[i]=0;\n            for(var d = 1; d <= matrix.len(); d++)\n            {\n                if(matrix[d].len() >= i) returnArr[i]++;\n            }\n        }\n        return dir == \"L\"? returnArr : returnArr.reverse();\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14406,"user_id":53,"body":"component {\n    array function flip(string dir, array arr) {\n        if (dir == \"R\") {\n            arraySort(arr, \"numeric\", \"asc\");\n        } else {\n            arraySort(arr, \"numeric\", \"desc\");\n        }\n        return arr;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14407,"user_id":20,"body":"component {\n    numeric function increasing(numeric a, numeric b)\n    {\n        return a-b;\n    }\n    numeric function decreasing(numeric a, numeric b)\n    {\n        return b-a;\n    }\n    array function flip(string dir, array arr) {\n        if(dir==\"L\")\n            return arr.sort(decreasing);\n        return arr.sort(increasing);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14408,"user_id":null,"body":"component {\n    array function flip(string dir, array arr) {\n        return arr.sort( 'numeric', ( dir == 'R' ? 'asc' : 'desc' ) )\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14409,"user_id":null,"body":"component {\n    array function flip(string dir, array arr) {\n        return arr.sort(\"numeric\", (dir==\"R\")?\"ASC\":\"DESC\" ) ;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14410,"user_id":null,"body":"component {\n    flip = (dir,arr) => arr.sort(\"numeric\", (dir==\"R\")?\"ASC\":\"DESC\" ) ;\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14411,"user_id":527,"body":"component {\n    array function flip(string dir, array arr) {\n        var res = arr.clone();\n        res.sort(\"numeric\", dir == 'R' ? \"asc\" : \"desc\");\n        return res;\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14412,"user_id":76,"body":"component {\n    array function flip(string dir, array arr) {\n        return duplicate(arr).sort((a, b) => dir == 'R' ? a - b : b - a);\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"5fde1ea66ba4060008ea5bd9":[{"id":14413,"user_id":20,"body":"component {\n    function burner(c, h, o) {\n        water=0;\n        co2=0;\n        methane=0;\n        while(h>1&&o>0)\n        {\n            h-=2;\n            o--;\n            water++;\n        }\n        while(c>0&&o>1)\n        {\n            c--;\n            o-=2;\n            co2++;\n        }\n        while(c>0&&h>3)\n        {\n            c--;\n            h-=4;\n            methane++;\n        }\n        return [water, co2, methane];\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14414,"user_id":null,"body":"component {\n    function burner(c, h, o) {\n        var cl = c ;\n        var hl = h ;\n        var ol = o ;\n        \n        \/\/\/ Water == H2O\n        if ( hl\\2 gte ol ) {\n            water = ol ;\n        } else {\n            water = hl\\2;\n        }\n        hl -= water*2 ;\n        ol -= water ;\n        \n        \/\/\/ CO2\n        if ( ol\\2 gte cl ) {\n            co2 = cl ;\n        } else {\n            co2 = ol\\2;\n        }\n        cl -= co2 ;\n        ol -= co2*2 ;\n        \n        \/\/\/ Methane = CH4\n        if (hl\\4 gte cl) {\n            methane = cl ;    \n        } else {\n            methane = hl\\4\n        }\n        cl -= methane ;\n        hl -= methane*4\n        \n        \n        return [water, co2, methane];\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14415,"user_id":645,"body":"component {\n    function burner(c, h, o) {\n        var h2o = min(o, h \\ 2);\n        var co2 = min(c, (o - h2o) \\ 2);\n        var ch4 = min(c - co2, (h - h2o * 2) \\ 4);\n        return [h2o, co2, ch4];\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"},{"id":14416,"user_id":645,"body":"component {\n    function burner(c, h, o) {\n        var h2o = min(o, h \\ 2);\n        var co2 = min(c, (o - h2o) \\ 2);\n        var ch4 = min(c - co2, (h - h2o * 2) \\ 4);\n        return [h2o, co2, ch4];\n    }\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}],"53005a7b26d12be55c000243":[{"id":14417,"user_id":null,"body":"component {\n\n    variables.vars = {};\n    variables.functions = {};\n\n    function tokenize( string program ) {\n        var tokens = []\n        if (program == \"\") return tokens;\n        \n        var regex = '\\s*([-+*\\\/\\%=\\(\\)]|[A-Za-z_][A-Za-z0-9_]*|[0-9]*\\.?[0-9]+)\\s*';\n        var start = 1\n        var result = program.reFind( regex, start, true )\n        while( result.len[1] ) {\n            tokens.append( trim( result.match[1] ) )\n            start += result.len[1]\n            result = program.reFind( regex, start, true )\n        }\n        return tokens\n    };\n\n    function input( string exprStr ){\n        var tokens = tokenize( exprStr );\n        tokens = buildTree( tokens )\n        \n        var result = expr( tokens )\n        return result\n    }\n    \n    \/\/ Take parenthesis into account by turning flat tokens into tree\n    function buildTree( array tokens ) {\n        var newTokens = []\n        \n        while( tokens.len() > 0 ) {\n          var next = tokens.first()\n          tokens.deleteAt( 1 )\n          if( next == '(' ) {\n            next = buildTree( tokens )\n          } else if( next == ')' ) {\n            return newTokens\n          }\n          newTokens.append( next )\n        }\n        \n        return newTokens    \n    }\n    \n    \n    function expr( array tokens ) {\n                \n        \/\/ return empty string for no tokens\n        if( !tokens.len() ) {\n            return ''\n         \/\/ A single token is either a nested expression, a variable, or a constant\n         } else if( tokens.len() == 1 ) {\n          \n             \/\/ Nested expression\n            if( isArray( tokens[1] ) ) {\n                return expr( tokens[1] )\n            }\n              \n            \/\/ varible\n            if( tokens[1].reFind( '^[a-zA-Z].*' ) ) {\n              return getVar( tokens[1] )\n            \/\/ constant\n            } else {\n              return tokens[1]\n            }\n            \n         \/\/ 2 or more tokens is an assignment or an operator\n         } else if( tokens.len() > 2 ) {\n             \n             \/\/ If second token is = then we're doing an assignment.  Eval everything to the right of the =\n             if( tokens[ 2 ] == '=' ) {\n                var lefthandToken = tokens.first()\n                tokens.deleteAt(1)\n                return assign( lefthandToken, tokens.slice( 2 ) )\n            } else {\n              \/\/ Process operators in this order.  Since we recursivley call ourselves, the last shall be first and the first shall be last.\n              var oprs = ['+','-','*','\/','%']\n              for( var thisop in oprs ) {\n                while( var opr = tokens.find( thisop ) ) {\n                  \/\/ Process each binary operator\n                  return op( thisop, expr( tokens.slice( 1, opr-1 ) ), expr( tokens.slice( opr+1 ) ) )\n                }\n              }\n            }\n         \/\/ This is an error scenario with a mismatched number of tokens\n         } else {\n            \/\/ Throw?\n            echo( 'two left over tokens' & chr(10) )\n            echo( serialize( tokens ) & chr(10) )\n         }\n    \n    }\n    \n    \/\/ Get variable.  Throw if not exists\n    function getVar( string name ) {\n        if( !variables.vars.keyExists( name ) ) {\n          throw 'Variable ' & name & ' does not exist.'\n        }\n        return variables.vars[ name ]\n    }    \n\n    \/\/ Set a variable\n    function assign( string name, array exp) {\n      var value = expr( exp )\n      variables.vars[ name ] = value\n      return variables.vars[ name ]\n    }\n    \n    \/\/ Process binary operators\n    function op( string operator, numeric operand1, numeric operand2) {\n      \n      switch( operator ) {\n        case '+':\n          return operand1 + operand2\n        case '-':\n          return operand1 - operand2\n        case '*':\n          return operand1 * operand2\n        case '\/':\n          return operand1 \/ operand2\n        case '%':\n          return operand1 % operand2\n      }\n    }\n\n}","lang_id":4,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:32","updated_at":"2022-12-25 20:02:32"}]}