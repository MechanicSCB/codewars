{"50654ddff44f800200000004":[{"id":80596,"user_id":676,"body":"-module(bug_fix).\n-export([multiply\/2]).\n\n-spec multiply(integer(), integer()) -> integer().\nmultiply(A, B) -> A*B.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80597,"user_id":null,"body":"-module(bug_fix).\n-export([multiply\/2]).\n\n-spec multiply(integer(), integer()) -> integer().\nmultiply(A, B) when is_integer(A), is_integer(B)\n  -> A * B.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80598,"user_id":null,"body":"-module(bug_fix).\n-export([multiply\/2]).\n\n-spec multiply(integer(), integer()) -> integer().\nmultiply(A, B) -> multiply(A, B, 0).\n\nmultiply(_A, 0, Acc) -> Acc;\nmultiply(A, B, Acc) -> multiply(A, B-1, A + Acc).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80599,"user_id":null,"body":"-module(bug_fix).\n-export([multiply\/2]).\n\n-spec multiply(integer(), integer()) -> integer().\nmultiply(_, 0) -> 0;\nmultiply(A, B) -> A + multiply(A, B - 1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80600,"user_id":null,"body":"-module(bug_fix).\n-export([multiply\/2]).\n\n-spec multiply(integer(), integer()) -> integer().\nmultiply(A, 0) -> 0;\nmultiply(A, B) -> A + multiply(A, B-1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80601,"user_id":null,"body":"-module(bug_fix).\n-export([multiply\/2]).\n\nmultiply (A,B) -> \n A*B.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80602,"user_id":null,"body":"-module(bug_fix).\n-export([multiply\/2]).\n\n-spec multiply(integer(), integer()) -> integer().\nmultiply(A, B) -> multiply(A, B, 0).\n\nmultiply(A, 0, Acc) -> Acc;\nmultiply(A, B, Acc) -> multiply(A, B-1, A + Acc).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80603,"user_id":null,"body":"-module(bug_fix).\n-export([multiply\/2]).\n\n-spec multiply(integer(), integer()) -> integer().\nmultiply(A, B) when is_integer(A) andalso \n                    is_integer(B) -> \n    A * B.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"523b4ff7adca849afe000035":[{"id":80604,"user_id":null,"body":"% greeting the world\n-module(greeter).\n-export([greet\/0]).\n\n-spec greet() -> string().\ngreet() -> \"hello world!\".","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80605,"user_id":null,"body":"% greeting the world\n-module(greeter).\n-export([greet\/0]).\n\ngreet() -> \"hello world!\".","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80606,"user_id":null,"body":"-module(greeter).\n-export([greet\/0]).\n\ngreet() ->\n  [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33].","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80607,"user_id":null,"body":"% greeting the world\n-module(greeter).\n-export([greet\/0]).\n\n% write a function greet\/0 that returns \"hello world!\"\ngreet() ->\n    Hello1 = <<\"h\", $e, \"ll\">>,\n    Hello2 = <<\"o\">>,\n    Hello = <<Hello1\/binary, Hello2\/binary>>,\n    World = [$w, \"orld\"],\n    HelloWorld = [Hello, \" \", World, \"!\"],\n    BinaryHelloWorld = iolist_to_binary(HelloWorld),\n    binary_to_list(BinaryHelloWorld).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80608,"user_id":null,"body":"% greeting the world\n-module(greeter).\n-export([greet\/0]).\n\n% write a function greet\/0 that returns \"hello world!\"\n\n%% A little stupid solution. But it was fun.... >=|;o)~\nhello() ->\n  atom_to_list(?FUNCTION_NAME) ++ [$ ].\n\nworld() ->\n  [A+B || {A,B} <- lists:zip(hello(),[15,10,6,0,-11,1])].\n\ngreet() -> hello() ++ world().","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80609,"user_id":null,"body":"% greeting the world\n-module(greeter).\n-export([greet\/0]).\n\ngreet() -> lists:map(fun(N) -> N + 96 end, [8,5,12,12,15,-64,23,15,18,12,4,-63]).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80610,"user_id":null,"body":"% greeting the world\n-module(greeter).\n-export([greet\/0]).\ngreet() -> \n  \"hello world!\".\n% write a function greet\/0 that returns \"hello world!\"","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80611,"user_id":null,"body":"-module(greeter).\n-export([greet\/0]).\ngreet()->\"hello world!\".","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80612,"user_id":null,"body":"% greeting the world\n-module(greeter).\n-export([greet\/0]).\n\n% write a function greet\/0 that returns \"hello world!\"\ngreet() -> \"hello world!\".","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80613,"user_id":null,"body":"% greeting the world\n-module(greeter).\n-import(io,[fwrite\/1]).\n-export([greet\/0]).\n\n% write a function greet\/0 that returns \"hello world!\"\ngreet() -> \n  \"hello world!\".","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"53ee5429ba190077850011d4":[{"id":80614,"user_id":null,"body":"-module(kata).\n-export([double_integer\/1]).\n\n% N will be an integer. Double it and return it.\ndouble_integer(N) -> N bsl 1.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80615,"user_id":527,"body":"-module(kata).\n-export([double_integer\/1]).\n\ndouble_integer(N) -> N * 2.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80616,"user_id":null,"body":"-module(kata).\n-export([double_integer\/1]).\n\n% N will be an integer. Double it and return it.\ndouble_integer(N) ->\n  DoubleN = N *2.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80617,"user_id":null,"body":"-module(kata).\n-export([double_integer\/1]).\n\n% N will be an integer. Double it and return it.\ndouble_integer(N) ->\n  2*N.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80618,"user_id":564,"body":"-module(kata).\n-export([double_integer\/1]).\n\ndouble_integer(N) -> N + N.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80619,"user_id":null,"body":"-module(kata).\n-export([double_integer\/1]).\n\n% N will be an integer. Double it and return it.\ndouble_integer(N) ->\n  N+N.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80620,"user_id":null,"body":"-module(kata).\n-export([double_integer\/1]).\n\n% N will be an integer. Double it and return it.\ndouble_integer(N) ->\n  N * 2.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80621,"user_id":null,"body":"-module(kata).\n-export([double_integer\/1]).\n\n% N will be an integer. Double it and return it.\ndouble_integer(0) -> 0;\ndouble_integer(N) when is_integer(N) ->\n  N * 2;\ndouble_integer(_) ->\n  {error, \"value isn't INTEGER\"}.\n\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80622,"user_id":null,"body":"-module(kata).\n-import(lists,[flatten\/2]).\n-import(string,[concat\/2]).\n-export([double_integer\/1]).\n\n% N will be an integer. Double it and return it.\ndouble_integer(N) ->\n  N + N.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80623,"user_id":null,"body":"-module(kata).\n-export([double_integer\/1]).\n\n% N will be an integer. Double it and return it.\ndouble_integer(N) -> Z = 2 * N.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"54d512e62a5e54c96200019e":[{"id":80624,"user_id":null,"body":"-module(kata).\n-export([primFactors\/1]).\n\n-spec(primFactors(integer()) -> string()).\n\nprimFactors(N) ->\n    {_, Map} = factors(N),\n    print_result(maps:to_list(Map), \"\").\n\nfactors(N,M,L, Map) when N == M ->\n    Map2 = update_map(Map, M),\n    {[M|L], Map2};\nfactors(N,M,L, Map) when N < M -> {L, Map};\nfactors(N,M,L, Map) when N rem M == 0 ->\n    factors(N div M,M,[M|L], update_map(Map, M));\nfactors(N,M,L, Map) -> factors(N,M+1,L, Map).\n\nfactors(N) -> factors(N,2,[], maps:new()).\n\n\nupdate_map(Map, Key) ->\n    case maps:is_key(Key,Map) of\n        true -> maps:update(Key, maps:get(Key, Map)+1, Map);\n        false -> maps:put(Key, 1, Map)\n    end.\n\nprint_result([],String) -> String;\nprint_result([{K,V}|O], String) ->\n    String2 = case V of\n        1 -> String++\"(\"++integer_to_list(K)++\")\";\n        _ -> String++\"(\"++integer_to_list(K)++\"**\"++integer_to_list(V)++\")\"\n    end,\n    print_result(O, String2).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80625,"user_id":492,"body":"-module(kata).\n-export([primFactors\/1]).\n\n-spec(primFactors(integer()) -> string()).\n\nfactors(N) ->\n     factors(N, 2, []).\nfactors(1, _, Acc) -> Acc;\nfactors(N, K, Acc) when N < K * K -> [N | Acc];\nfactors(N, K, Acc) when N rem K == 0 ->\n    factors(N div K, K, [K | Acc]);\nfactors(N, K, Acc) ->\n    factors(N, K + 1, Acc).\nfrequency(A) ->\n    Keys  = lists:usort(A), \n    Count = fun(V, L) -> length(lists:filter(fun(E) -> E == V end, L)) end,\n    lists:map(fun(K) -> { K, Count(K, A) } end, Keys).\ntuple2String({E, K}) ->\n    case K == 1 of \n        true ->\n            \"(\" ++ integer_to_list(E) ++ \")\";\n        _ ->\n            \"(\" ++ integer_to_list(E) ++ \"**\" ++ integer_to_list(K) ++ \")\"\n    end.\nprimFactors(N) -> \n    F = frequency(factors(N)),\n    X = lists:map(fun(H) -> tuple2String(H) end, F),\n    string:join(X, \"\").","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"54d7660d2daf68c619000d95":[{"id":80626,"user_id":53,"body":"-module(kata).\n-export([convert_frac\/1]).\n\n-spec convert_frac([{integer, integer}]) -> [{integer, integer}].\n\ngcd(A, 0) -> A;\ngcd(A, B) -> gcd(B, A rem B).\n\nlcm(A,B) -> A div gcd(A, B) * B.\n\nreduce_frac({A, B}) -> I = gcd(A, B), {A div I, B div I}.\n\nnorm({A, B}, I) -> {A * I div B, I}.\n\nconvert_frac(Ls) ->\n  Xss = lists:map(fun({A, B}) -> reduce_frac({A, B}) end, Ls),\n  I = lists:foldl(fun({_, Xs}, Acc) -> lcm(Xs, Acc) end, 1, Xss),\n  lists:map(fun({A, B}) -> norm({A, B}, I) end, Xss).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80627,"user_id":null,"body":"-module(kata).\n-export([convert_frac\/1]).\n\n-spec convert_frac([{integer, integer}]) -> [{integer, integer}].\n\ngcd(A,0) -> A;\ngcd(A,B) -> gcd(B, A rem B).\n\nlcm(A,B) -> (A * B) div gcd(A,B).\n\nlowest_common_denom([], Acc) -> Acc;\nlowest_common_denom([X|Xs], Acc) -> \n  {N,Denom} = X,\n  lowest_common_denom(Xs, lcm(Denom, Acc)).\n\nlowest_common_denom(Xs) -> lowest_common_denom(Xs, 1).\n\nadjust(Lcd, {Num,Denom}) ->\n  NewNum = Num * (Lcd div Denom),\n  {NewNum, Lcd}.\n\nnormalize({N,D}) ->\n  Gcd = gcd(N,D),\n  {N div Gcd, D div Gcd}.\n\nconvert_frac(Ls) ->\n  Normalized = lists:map(fun normalize\/1, Ls),\n\tLcd = lowest_common_denom(Normalized),\n  [adjust(Lcd, X) || X <- Normalized].","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80628,"user_id":492,"body":"-module(kata).\n-export([convert_frac\/1]).\n\n-spec convert_frac([{integer, integer}]) -> [{integer, integer}].\n\ngcd(A, 0) -> A;\ngcd(A, B) -> gcd(B, A rem B).\nlcm(A,B) -> abs(A * B div gcd(A,B)).\nsimplify({N, D}) ->\n\tG = gcd(N, D),\n\t{N div G, D div G}.\nconvert_frac(Ls) ->\n\tXs = lists:map(fun({N, D}) -> simplify({N, D}) end, Ls),\n\tCd = lists:foldl(fun({_, D}, Acc) -> lcm(D, Acc) end, 1, Xs),\n\tlists:map(fun({N, D}) -> {(N * Cd) div D, Cd} end, Xs).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"54db15b003e88a6a480000b9":[{"id":80629,"user_id":53,"body":"-module(kata).\n-export([fromNb2Str\/2]).\n\n-spec fromNb2Str(integer(), [integer]) -> string.\n\ngcd(A, 0) -> A;\ngcd(A, B) -> gcd(B, A rem B).\n\nlcm(A,B) -> B div gcd(A,B) * A.\nlcmi(Ls) -> lists:foldl(fun(A, Acc) -> lcm(A, Acc) end, 1, Ls).\n\nprod(Ls) -> lists:foldl(fun(A, Acc) -> Acc * A end, 1, Ls).\n\nrender(N, M, G, P) when (P =< N) or (G \/= P) -> \"Not applicable\";\nrender(N, M, G, P) -> lists:foldl(fun(A, S) -> S ++ \"-\" ++ integer_to_list(N rem A) ++ \"-\" end, \"\", M).\n\nfromNb2Str(N, M) -> \n  P = prod(M),\n  G = lcmi(M),\n  render(N, M, G, P).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80630,"user_id":492,"body":"-module(kata).\n-export([fromNb2Str\/2]).\n\n-spec fromNb2Str(integer(), [integer]) -> string.\n\ngcd(A, 0) -> A;\ngcd(A, B) -> gcd(B, A rem B).\nlcm(A,B) -> abs(A * B div gcd(A,B)).\nlcmAll(L) -> lists:foldl(fun(X, Acc) -> lcm(X, Acc) end, 1, L).\nprod(Ls) -> lists:foldl(fun(X, Acc) -> X * Acc end, 1, Ls).\n\nfromNb2Str(N, Modsys) -> \n\tPro = prod(Modsys),\n\tLc = lcmAll(Modsys),\n\tif (Pro =< N) or (Lc \/= Pro) ->\n\t\t\"Not applicable\";\n\ttrue ->\n\t\tlists:foldl(fun(X, S) -> S ++ \"-\" ++ integer_to_list(N rem X) ++ \"-\" end, \"\", Modsys)\n\tend.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"54dc6f5a224c26032800005c":[{"id":80631,"user_id":492,"body":"-module(kata).\n-export([stock_list\/2]).\n\n-spec stock_list([string], [string]) -> [{string, integer}].\n\noneCat(Cat, Ls) ->\n\tMs = lists:filter(fun(X) -> string:find(X, Cat) =:= X end, Ls),\n\tNs = lists:map(fun(X) -> (lists:nth(2, (string:split(X, \" \")))) end, Ms),\n\tlists:foldl(fun(X, Acc) -> list_to_integer(X) + Acc end, 0, Ns).\n\nstock_list(ListOfBooks, ListOfCategories) ->\n\tif (ListOfBooks == []) or (ListOfCategories == []) ->\n\t\t[];\n\ttrue ->\n\t\tlists:map(fun(X) -> {X, oneCat(X, ListOfBooks)} end, ListOfCategories)\n\tend.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"550498447451fbbd7600041c":[{"id":80632,"user_id":492,"body":"-module(kata).\n-export([comp\/2]).\n\n-spec comp_same([integer], [integer]) -> boolean.\n\ncomp_same(A, B) ->\n\tAa = lists:sort(lists:map(fun(X) -> X * X end, A)),\n\tBb = lists:sort(B),\n\tAa == Bb.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80633,"user_id":null,"body":"-module(kata).\n-import(lists,[sort\/1, map\/2]).\n-export([comp\/2]).\n\n-spec comp_same([integer], [integer]) -> boolean.\n\ncomp_same(A, B) ->\n    A1 = map(fun (X) -> X*X end, A),\n    sort(A1) =:= sort(B).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80634,"user_id":null,"body":"-module(kata).\n-import(lists,[sort\/1, map\/2]).\n-export([comp\/2]).\n\n-spec comp_same([integer], [integer]) -> boolean.\n\ncomp_same(A, B) ->\n    A1 = map(fun (X) -> X*X end, A),\n    B1 = map(fun (X) -> X*X end, B),\n    sort(A1) =:= sort(B) orelse sort(B1) =:= sort(A).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80635,"user_id":53,"body":"-module(kata).\n-export([comp\/2]).\n\n-spec comp_same([integer], [integer]) -> boolean.\n\ncomp_same(A, B) when length(A) \/= length(B) -> false;\n  \ncomp_same(A, B) ->\n  X = lists:sort(lists:map(fun(N) -> N * N end, A)),\n  Y = lists:sort(B),\n  X == Y.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"550554fd08b86f84fe000a58":[{"id":80636,"user_id":null,"body":"-module(kata).\n-export([inArray\/2]).\n\n-spec inArray([string], [string]) -> [string].\n\ninArray(Array1, Array2) ->\n\tlists:usort(lists:filter(fun (S) -> is_substr(S, Array2) end, Array1)).\n\n-spec is_substr(string, [string]) -> boolean.\n\nis_substr(S, A) ->\n  lists:any(fun(S2) -> nomatch =\/= string:find(S2, S) end, A).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80637,"user_id":492,"body":"-module(kata).\n-export([inArray\/2]).\n\n-spec inArray([string], [string]) -> [string].\n\ninArray(Array1, Array2) ->\n\tL =\n\tlists:filter(\n\t\tfun(X) -> \n\t\t\tlists:any(\n\t\t\t\tfun(Y) -> \n\t\t\t\t\tstring:str(Y, X) > 0 \n\t\t\t\tend, \n\t\t\tArray2) \n\t\tend, \n\t\tArray1),\n\tlists:usort(L).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5506b230a11c0aeab3000c1f":[{"id":80638,"user_id":null,"body":"-module(kata).\n-export([evaporator\/3]).\n\n-spec evaporator(integer(), integer(), integer()) -> integer.\n\nevaporator(Content, EvapPerDay, Threshold) ->\n    eval(100, EvapPerDay, Threshold, 0).\n\neval(Content_percent, EvapPerDay, Threshold, Days) ->\n    case Content_percent =< Threshold of\n        true -> Days;\n        false -> eval(Content_percent * (1 - EvapPerDay \/ 100), EvapPerDay, Threshold, Days + 1)\n    end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80639,"user_id":53,"body":"-module(kata).\n-export([evaporator\/3]).\n\n-spec evaporator(integer(), integer(), integer()) -> integer.\n\nevaporator(_, E, T) -> ceil(math:log(T \/ 100) \/ math:log(1 - E \/ 100)).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80640,"user_id":492,"body":"-module(kata).\n-export([evaporator\/3]).\n\n-spec evaporator(integer(), integer(), integer()) -> integer.\n\nevaporator(_Content, EvapPerDay, Threshold) ->\n    ceil(math:log(Threshold \/ 100.0) \/ math:log(1 - EvapPerDay \/ 100.0)).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"550f22f4d758534c1100025a":[{"id":80641,"user_id":null,"body":"-module(kata).\n-export([reduce\/1]).\n\n-spec reduce([string]) -> [string].\n\nreduce(L) ->\n  R = reduce(L, []),\n  if\n    length(L) == length(R) -> L;\n    true -> reduce(R)\n  end.\nreduce([], R) -> lists:reverse(R);\nreduce([A], R) -> reduce([], [A | R]);\nreduce([A, B | T], R) ->\n  if\n    length(A) == length(B), A =\/= B -> reduce(T, R);\n    true -> reduce([B | T], [A | R])\n  end.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80642,"user_id":null,"body":"-module(kata).\n-export([reduce\/1]).\n\n-spec reduce([string]) -> [string].\n\nreduce(Ls) -> \n  I1 = reduce(Ls, []),\n  I2 = reduce(I1, []),\n  case I1 == I2 of\n    false -> reduce(I2);\n    true -> I2\n  end.\n\nreduce([], Acc) -> lists:reverse(Acc);\nreduce([\"NORTH\" | [\"SOUTH\" | Rst]], Acc) ->\n  reduce(Rst, Acc);\nreduce([\"SOUTH\" | [\"NORTH\" | Rst]], Acc) ->\n  reduce(Rst, Acc);\nreduce([\"EAST\" | [\"WEST\" | Rst]], Acc) ->\n  reduce(Rst, Acc);\nreduce([\"WEST\" | [\"EAST\" | Rst]], Acc) ->\n  reduce(Rst, Acc);\nreduce([Hd | Rst], Acc) ->\n  reduce(Rst, [Hd | Acc]).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80643,"user_id":492,"body":"-module(kata).\n-export([reduce\/1]).\n\n-spec reduce([string]) -> [string].\n\naux(Head, []) ->  [Head];\naux(\"NORTH\", [\"SOUTH\" | Tail]) ->  Tail;\naux(\"SOUTH\", [\"NORTH\" | Tail]) ->  Tail;\naux(\"WEST\", [\"EAST\" | Tail]) ->  Tail;\naux(\"EAST\", [\"WEST\" | Tail]) ->  Tail;\naux(Head, [Next | Tail]) ->  [Head, Next | Tail].\n\nreduce(Ls) -> lists:foldr(fun(X, Y) -> aux(X, Y) end, [], Ls).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5517fcb0236c8826940003c9":[{"id":80644,"user_id":492,"body":"-module(kata).\n-export([sumFracts\/1]).\n\n-spec sumFracts([{integer, integer}]) -> {integer, integer} | integer().\n\ngcd(A, 0) -> A;\ngcd(A, B) -> gcd(B, A rem B).\nlcm(A,B) -> abs(A * B div gcd(A,B)).\nsimplify({N, D}) ->\n\tG = gcd(N, D),\n\t{N div G, D div G}.\n\nsumFracts(Ls) ->\n\tXs = lists:map(fun({N, D}) -> simplify({N, D}) end, Ls),\n\tCd = lists:foldl(fun({_, D}, Acc) -> lcm(D, Acc) end, 1, Xs),\n\tR = lists:map(fun({N, D}) -> {(N * Cd) div D, Cd} end, Xs),\n\tS = lists:foldl(fun({N, _}, Acc) -> N + Acc end, 0, R),\n\tG = gcd(S, Cd),\n\tif (Cd div G == 1) -> \n\t\tS div G;\n\ttrue ->\n\t\t{S div G, Cd div G}\n\tend.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5541f58a944b85ce6d00006a":[{"id":80645,"user_id":null,"body":"-module(kata).\n-export([product_fib\/1]).\n\n-spec product_fib(integer()) -> {integer, integer, boolean}.\n\nproduct_fib(N) ->\n  Fibs = lists:reverse(fib(0, N, [])),\n  find_pair(N, Fibs).\n\nfind_pair(Prod, [F1, F2]) -> {F1, F2, F1*F2 =:= Prod};\nfind_pair(Prod, [F1, F2, F3]) ->\n  case F1 * F2 =:= Prod of\n    true  -> {F1, F2, true};\n    false -> {F2, F3, F2*F3 =:= Prod}\n  end;\nfind_pair(Prod, [F1, F2 | Rest])  when F1*F2 =:= Prod ->\n  {F1, F2, true};\nfind_pair(Prod, [_|Rest])->\n  find_pair(Prod, Rest).\n  \n\nfib(0, N, []) -> fib(1, N, [0]);\nfib(1, N, Fibs) -> fib(2, N, [1, 0]);\nfib(F, N, Fibs = [Fn1, Fn2|Rest]) when Fn1 * Fn2 >= N -> Fibs;\nfib(F, N, [Fn1, Fn2|Rest]) -> fib(F+1, N, [Fn1 + Fn2, Fn1, Fn2 | Rest]).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80646,"user_id":null,"body":"-module(kata).\n-export([product_fib\/1]).\n\n-spec product_fib(integer()) -> {integer, integer, boolean}.\n\nstartfib()->\n            case ets:info(fib) of\n                        undefined-> ets:new(fib, [public, named_table]),\n                                    ets:insert(fib, {1, 0}),\n                                    ets:insert(fib, {2, 1}),\n                                    ets:insert(fib, {3, 1});\n                        _ -> ok\n            end.\n \n \nfib(0) -> 0;\nfib(M) ->\n            startfib(),\n            case ets:lookup(fib, M) of\n                        [] -> Res = fib(M - 1) + fib(M - 2),\n                              ets:insert(fib, {M, Res}),\n                              Res;\n                        [{M, Val}] -> Val\n            end.\n \nproduct_fib(Prod) ->\n            startfib(),\n            F = fun Fib(M) ->\n                        M1 = fib(M),\n                        M2 = fib(M + 1),\n                        Res = M1 * M2,\n                        if Res > Prod  -> {M1, M2, false};\n                           Res == Prod -> {M1, M2, true};\n                           true        -> Fib(M + 1)\n                        end\n                end,\n            F(1).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80647,"user_id":53,"body":"-module(kata).\n-export([product_fib\/1]).\n\n-spec product_fib(integer()) -> {integer, integer, boolean}.\n\nrender(N, A, B) when A * B == N -> {A, B, true};\nrender(N, A, B) -> {A, B, false}.\n\ngo(N, A, B) when A * B >= N -> render(N, A, B);\ngo(N, A, B) ->\n  C = A + B,\n  D = C - A,\n  go(N, D, C).\n\nproduct_fib(N) -> go(N, 0, 1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80648,"user_id":492,"body":"-module(kata).\n-export([product_fib\/1]).\n\n-spec product_fib(integer()) -> {integer, integer, boolean}.\n\naux(A, B, C) ->\n    if (A * B >= C) ->\n        {A, B, A * B == C};\n    true ->\n        aux(B, A + B, C)\n    end.\nproduct_fib(N) ->\n    aux(0, 1, N).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5544c7a5cb454edb3c000047":[{"id":80649,"user_id":null,"body":"-module(kata).\n-export([bouncing_ball\/3]).\n\n-spec bouncing_ball(float(), float(), float()) -> integer.\n\nbouncing_ball(H, B, W) when H =< 0; B =< 0; B >= 1; W >= H -> -1;\nbouncing_ball(H, B, W) -> \n  ScaryMath = math:log(W\/H) \/ math:log(B),\n  Bounces = floor(ScaryMath),\n  case ScaryMath == Bounces of\n    true  -> 2 * (Bounces - 1) + 1;\n    false -> 2 * Bounces + 1\n  end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80650,"user_id":null,"body":"-module(kata).\n-export([bouncing_ball\/3]).\n\n-spec bouncing_ball(float(), float(), float()) -> integer.\n\nbouncing_ball(H, Bounce, Window) when Bounce >= 1.0 orelse H =< Window orelse Bounce < 0 ->\n    -1;\nbouncing_ball(H, Bounce, Window) ->\n    eval(H, Bounce, Window, 0).\n\neval(H, _Bounce, Window, Acc) when H =< Window ->\n    Acc - 1;\neval(H, Bounce, Window, Acc) ->\n    eval(H * Bounce, Bounce, Window, Acc + 2).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80651,"user_id":53,"body":"-module(kata).\n-export([bouncing_ball\/3]).\n\n-spec bouncing_ball(float(), float(), float()) -> integer.\n\ngo(H, W, _, T) when H =< W -> T;\ngo(H, W, B, T) -> go(H * B, W, B, T + 2).\n\nbouncing_ball(H, B, W) when H < 0 -> -1;\nbouncing_ball(H, B, W) when W >= H -> -1;\nbouncing_ball(H, B, W) when B < 0 -> -1;\nbouncing_ball(H, B, W) when B >= 1 -> -1;\nbouncing_ball(H, B, W) -> go(H * B, W, B, 1).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80652,"user_id":492,"body":"-module(kata).\n-export([bouncing_ball\/3]).\n\n-spec bouncing_ball(float(), float(), float()) -> integer.\n\nbouncing_ball(H, Bounce, Window) when (H > 0) and (0 < Bounce) and (Bounce < 1) and (Window < h)\n    -> trunc(ceil(math:log(Window \/ H) \/ math:log(Bounce))) * 2 - 1;\nbouncing_ball(_, _, _) -> -1.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5545f109004975ea66000086":[{"id":80653,"user_id":645,"body":"-module(kata).\n-export([is_divisible\/3]).\n\nis_divisible(N, X, Y) -> (N rem X =:= 0) and (N rem Y =:= 0).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80654,"user_id":527,"body":"-module(kata).\n-export([is_divisible\/3]).\n\nis_divisible(N, X, Y) ->\n  (N rem X == 0) and (N rem Y == 0).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80655,"user_id":null,"body":"-module(kata).\n-export([is_divisible\/3]).\n\nis_divisible(0, 0) ->\n  true;\nis_divisible(_, _) ->\n  false.\n\nis_divisible(N, X, Y) ->\n  is_divisible(N rem X, N rem Y).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80656,"user_id":564,"body":"-module(kata).\n-export([is_divisible\/3]).\n\nis_divisible(A, B, C) -> is_divisible(A, B) and is_divisible(A, C).\nis_divisible(A, B) -> A rem B == 0.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80657,"user_id":null,"body":"-module(kata).\n-export([is_divisible\/3]).\n\nis_divisible(N, X, Y) when (N rem X == 0) and (N rem Y == 0) -> true;\nis_divisible(_, _, _) -> false.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80658,"user_id":null,"body":"-module(kata).\n-export([is_divisible\/3]).\n\nis_divisible(N, X, Y) -> is_divisible(N, X) andalso is_divisible(N, Y).\n\nis_divisible(A, B) -> A rem B == 0.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80659,"user_id":null,"body":"-module(kata).\n-export([is_divisible\/3]).\n\n\nis_divisible(N, X, true) when (N rem X) == 0 ->\n  true;\nis_divisible(N, X, false) ->\n  false;\nis_divisible(N, X, Y) when (N rem Y) == 0->\n  is_divisible(N, X, true);\nis_divisible(N, X, Y) ->\n  false.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80660,"user_id":null,"body":"-module(kata).\n-export([is_divisible\/3]).\n\nis_divisible(N, X, Y) when (N rem X =:= 0) and (N rem Y =:= 0) -> true;\nis_divisible(N, X, Y) when (N rem X \/= 0) or (N rem Y \/= 0) -> false.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80661,"user_id":null,"body":"-module(kata).\n-export([is_divisible\/3]).\n\n-define(DIV(V, X), V rem X == 0).\n\nis_divisible(N, X, Y) ->\n  ?DIV(N, X) andalso ?DIV(N, Y).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80662,"user_id":null,"body":"-module(kata).\n-export([is_divisible\/3]).\n\nis_divisible(N, X, Y) -> \ncase checker(N, X) of \n    true -> \n        case checker(N, Y) of \n         true -> true;\n         false -> false\n    end;\n    false -> false\nend.\n\nchecker(A, B) -> \n    if \n        A rem B =:= 0 -> true;\n    true -> false\nend.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"55466989aeecab5aac00003e":[{"id":80663,"user_id":53,"body":"-module(kata).\n-export([sq_in_rect\/2]).\n\n-spec sq_in_rect(integer(), integer()) -> [integer].\n\nwalk(L, L) -> [L];\nwalk(L, W) ->\n  A = max(L, W),\n  B = min(L, W),\n  [B | walk(B, A - B)].\n\nsq_in_rect(L, L) -> [];\nsq_in_rect(L, W) -> walk(L, W).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80664,"user_id":492,"body":"-module(kata).\n-export([sq_in_rect\/2]).\n\n-spec sq_in_rect(integer(), integer()) -> [integer].\n\nsq(L, W) ->\n\tif (L == W) ->\n\t\t[W];\n\ttrue ->\n\t\tA = max(L, W),\n\t\tB = min(L, W),\n\t\t[B] ++ sq(B, A - B)\n\tend.\n\nsq_in_rect(L, W) when L == W -> [];\nsq_in_rect(L, W) -> sq(L, W).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5547cc7dcad755e480000004":[{"id":80665,"user_id":492,"body":"-module(kata).\n-export([remove_nb\/1]).\n\n-spec remove_nb(integer()) -> [{integer, integer}].\n\naux(N, _, I, Res) when (I > N) -> Res;\naux(N, S, I, Res) ->\n\tB = S - I,\n\tM = B div (I + 1),\n\tif (B rem (I + 1) == 0) ->\n\t\taux(N, S, I + 1, Res ++ [{I, M}]);\n\ttrue ->\n\t\taux(N, S, I + 1, Res)\n\tend.\n\nremove_nb(N) ->\n\taux(N, (N * (N + 1)) div 2, N div 2, []).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80666,"user_id":null,"body":"-module(kata).\n-export([remove_nb\/1]).\n\narith_sum(N) -> N * (N+1) div 2.\n\n-spec remove_nb(integer()) -> [{integer, integer}].\nremove_nb(N) ->\n    Sum = arith_sum(N),\n    Sols = lists:filtermap(\n        fun(I) ->\n            J = (Sum - 1) div (I + 1),\n            if  (Sum - I - J == I * J) and (I =< J) and (J =< N) ->\n                    {true, [{I, J}, {J, I}]};\n                true ->\n                    false\n            end\n        end\n      , lists:seq(1, N-1)),\n    lists:sort(lists:flatten(Sols)).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80667,"user_id":53,"body":"-module(kata).\n-export([remove_nb\/1]).\n\n-spec remove_nb(integer()) -> [{integer, integer}].\n\ngo(N, _, I, R) when (I > N) -> lists:reverse(R);\n\ngo(N, P, I, R) ->\n  Q = P - I,\n  J = I + 1,\n  M = Q div J,\n  if (Q rem J == 0) -> go(N, P, J, [{I, M} | R]);\n  true -> go(N, P, J, R) end.\n\nremove_nb(N) ->\n  go(N, (N * (N + 1)) div 2, N div 2, []).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"554a44516729e4d80b000012":[{"id":80668,"user_id":null,"body":"-module(kata).\n-export([nb_months\/4]).\n\n-define (PRICEDIFF (PriceOld, PriceNew, SavingperMonth, Month),\n          PriceOld + Month*SavingperMonth - PriceNew).\n\n-spec nb_months(integer(), integer(), integer(), float()) -> {integer, integer}.\n\nnb_months(StartPriceOld, StartPriceNew, SavingperMonth, PercentLossByMonth) ->\n\tnb_months (StartPriceOld, StartPriceNew, SavingperMonth, PercentLossByMonth, 1).\n\nnb_months(PriceOld, PriceNew, SavingperMonth, PercentLossByMonth, Month)\nwhen PriceOld >= PriceNew ->\n  {0, PriceOld - PriceNew};\nnb_months(PriceOld, PriceNew, SavingperMonth, PercentLossByMonth, Month) ->\n  P = PercentLossByMonth + 0.5 * (1 - Month rem 2 ),\n  NewPriceOld = PriceOld * (100.0-P) \/ 100,\n  NewPriceNew = PriceNew * (100.0-P) \/ 100,\n  case ?PRICEDIFF (NewPriceOld, NewPriceNew, SavingperMonth, Month) of\n    Diff when Diff >= 0 -> {Month, erlang:round (Diff)};\n    _Else ->\n      nb_months (NewPriceOld, NewPriceNew, SavingperMonth, P, Month + 1) end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80669,"user_id":null,"body":"-module(kata).\n-export([nb_months\/4]).\n\n-spec nb_months(integer(), integer(), integer(), float()) -> {integer, integer}.\n\nnb_months(StartPriceOld, StartPriceNew, SavingperMonth, PercentLossByMonth) ->\n\t  eval(StartPriceOld, StartPriceNew, SavingperMonth, PercentLossByMonth, 0, 0).\n\neval(PriceOld, PriceNew, SavingperMonth, PercentLossByMonth, Months, Savings) ->\n    case PriceOld + Savings >= PriceNew of\n        true ->\n            {Months, round(PriceOld + Savings - PriceNew)};\n        false ->\n            PercentLossByMonth1 =\n                case Months rem 2 == 1 of\n                    true -> PercentLossByMonth + 0.5;\n                    false -> PercentLossByMonth\n                end,\n            eval(PriceOld * (1 - PercentLossByMonth1 \/ 100),\n                 PriceNew * (1 - PercentLossByMonth1 \/ 100),\n                 SavingperMonth,\n                 PercentLossByMonth1,\n                 Months + 1,\n                 Savings + SavingperMonth)\n    end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80670,"user_id":53,"body":"-module(kata).\n-export([nb_months\/4]).\n\n-spec nb_months(integer(), integer(), integer(), float()) -> {integer, integer}.\n\nup(M, R) when M rem 2 == 1 -> R + 0.5;\nup(_, R) -> R.\n\naux(P0, P1, _, _, M, T) when P1 =< P0 + T -> {M, round(P0 - P1 + T)};\naux(P0, P1, S, R, M, T) ->\n  P0_ = P0 - P0 * 0.01 * R,\n  P1_ = P1 - P1 * 0.01 * R,\n  T_ = T + S,\n  M_ = M + 1,\n  R_ = up(M_, R),\n  aux(P0_, P1_, S, R_, M_, T_).\n\nnb_months(P0, P1, S, R) -> aux(P0, P1, S, R, 0, 0).\n  ","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80671,"user_id":492,"body":"-module(kata).\n-export([nb_months\/4]).\n\n-spec nb_months(integer(), integer(), integer(), float()) -> {integer, integer}.\n\naux(Old, New, Saving, L, Months) ->\n\tW = Old + Saving * Months,\n\tif (W >= New) ->\n\t\t{Months, round(W - New)};\n\ttrue ->\n\t\tif (Months rem 2 == 0) ->\n\t\t\taux(Old * L, New * L, Saving, L, Months + 1);\n\t\ttrue ->\n\t\t\tLoss = L - 0.005,\n\t    \taux(Old * Loss, New * Loss, Saving, Loss, Months + 1)\n\t    end\n\tend.\nnb_months(StartPriceOld, StartPriceNew, SavingperMonth, PercentLossByMonth) ->\n\taux(StartPriceOld, StartPriceNew, SavingperMonth, (1.0 - PercentLossByMonth \/ 100.0), 0).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"554f76dca89983cc400000bb":[{"id":80672,"user_id":492,"body":"-module(kata).\n-export([solEqua\/1]).\n\n-spec solEqua(integer()) -> [{integer, integer}].\n\naux(N, I, ACC) when I >= 1 ->\n    if \n    (N rem I == 0) ->  \n        J = N div I,\n        if \n        (((I + J) rem 2) == 0) and (((J - I) rem 4) == 0) ->\n            aux(N, I - 1, [{(I + J) div 2, (J - I) div 4} | ACC]);\n        true ->\n            aux(N, I - 1, ACC)\n        end;\n    true ->\n        aux(N, I - 1, ACC)\n    end;\naux(_N, _I, ACC) -> ACC.\n\nsolEqua(N) ->\n    aux(N, ceil(math:sqrt(N)), []).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"555086d53eac039a2a000083":[{"id":80673,"user_id":527,"body":"-module(kata).\n-export([lovefunc\/2]).\n\nlovefunc(Flower1, Flower2) -> Flower1 rem 2 \/= Flower2 rem 2.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80674,"user_id":53,"body":"-module(kata).\n-export([lovefunc\/2]).\n\nlovefunc(Flower1, Flower2) -> (Flower1+Flower2) rem 2 == 1.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80675,"user_id":null,"body":"-module(kata).\n-export([lovefunc\/2]).\n\nlovefunc(Flower1, Flower2) -> \n  case (Flower1 + Flower2) band 1 of\n    0 -> false;\n    1 -> true\n  end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80676,"user_id":null,"body":"-module(kata).\n-export([lovefunc\/2]).\n\nlovefunc(Flower1, Flower2) -> 0 < (Flower1+Flower2) rem 2 .","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80677,"user_id":null,"body":"-module(kata).\n-export([lovefunc\/2]).\n\nlovefunc(Flower1, Flower2) when (Flower1 rem 2 =:= 0) and (Flower2 rem 2 =\/= 0) -> \n  true;\nlovefunc(Flower1, Flower2) when (Flower1 rem 2 =\/= 0) and (Flower2 rem 2 =:= 0) -> \n  true;\nlovefunc(_, _) -> \n  false.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80678,"user_id":null,"body":"-module(kata).\n-export([lovefunc\/2]).\n\nlovefunc(X, Y) -> (X + Y) rem 2 == 1.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80679,"user_id":null,"body":"-module(kata).\n-export([lovefunc\/2]).\n\nlovefunc(Flower1, Flower2) -> \n  case {Flower1 rem 2, Flower2 rem 2} of\n    {0, 1} -> true;\n    {1, 0} -> true;\n    _ -> false\n   end.\n             ","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80680,"user_id":null,"body":"-module(kata).\n-export([lovefunc\/2]).\n\nlovefunc(Flower1, Flower2) -> \n  ((Flower1 rem 2 == 0) andalso (Flower2 rem 2 == 1)) \n  orelse \n  ((Flower1 rem 2 == 1) andalso (Flower2 rem 2 == 0)).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80681,"user_id":null,"body":"-module(kata).\n-export([lovefunc\/2]).\n\nlovefunc(Fl1, Fl2) when (Fl1 + Fl2) rem 2 == 1-> true;\nlovefunc(_, _) -> false.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80682,"user_id":null,"body":"-module(kata).\n-export([lovefunc\/2]).\n\nlovefunc(Flower1, Flower2) when ((Flower1 rem 2 == 0) and (Flower2 rem 2 \/= 0)) or ((Flower1 rem 2 \/= 0) and (Flower2 rem 2 == 0)) -> true;\nlovefunc(_, _) -> false.\n  ","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"555624b601231dc7a400017a":[{"id":80683,"user_id":null,"body":"-module(kata).\n-export([josephus_survivor\/2]).\n\njosephus_survivor(1, _K) -> 1;\njosephus_survivor(N, K) -> (josephus_survivor(N - 1, K) + K - 1) rem N + 1.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80684,"user_id":null,"body":"-module(kata).\n-export([josephus_survivor\/2]).\n\njosephus_survivor(N, K) -> josephus_survivor(N, K, 0, 1).\njosephus_survivor(N, _K, V, I) when I > N -> V + 1;\njosephus_survivor(N, K, V, I) -> josephus_survivor(N, K, (V + K) rem I, I + 1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80685,"user_id":null,"body":"-module(kata).\n-export([josephus_survivor\/2]).\n\njs([S], _, _) -> S;\njs(L, I, K) ->\n    NI = (I + K) rem length(L) + 1,\n    js(lists:delete(lists:nth(NI, L), L), NI - 1, K).\n\njosephus_survivor(N, K) -> js(lists:seq(1, N), 0, K - 1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80686,"user_id":645,"body":"-module(kata).\n-export([josephus_survivor\/2]).\n\njosephus_survivor(1, _) -> 1;\njosephus_survivor(N, K) -> (josephus_survivor(N - 1, K) + K - 1) rem N + 1.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80687,"user_id":null,"body":"-module(kata).\n-export([josephus_survivor\/2]).\n\njosephus_survivor(N, K) ->\n  List = lists:seq(1, N),\n  cycle(List, K - 1).\n\ncycle([Last], _K) -> Last;\ncycle(List, K) ->\n  Pos = K rem length(List) + 1,\n  {L, R} = lists:split(Pos, List),\n  cycle(R ++ lists:droplast(L), K).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80688,"user_id":null,"body":"-module(kata).\n-export([josephus_survivor\/2]).\n\n\nsurvivor(1, _) -> 0;\nsurvivor(N, K) ->\n    Excl = K rem N,\n    (Excl + survivor(N-1, K)) rem N.\n\njosephus_survivor(N, K) ->\n    survivor(N, K) + 1.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80689,"user_id":null,"body":"-module(kata).\n-export([josephus_survivor\/2]).\n\njosephus_survivor(N, K) ->\n  josephus_survivor(N, K, K, lists:seq(1, N)).\n\njosephus_survivor(_, _, _, [H]) -> H;\njosephus_survivor(N, K, C, L) when C > N ->\n  josephus_survivor(N, K, C-N, L);\njosephus_survivor(N, K, C, L) ->\n  josephus_survivor(N-1, K, C+K-1, lists:delete(lists:nth(C, L), L)).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80690,"user_id":null,"body":"-module(kata).\n-export([josephus_survivor\/2]).\n\njosephus_survivor(N, K) ->\n  L = lists:seq(1, N),\n  step(L, K - 1, 0, N).\n\nstep([A], _, _, _) -> A;\nstep(L, S, N, N) -> step(L, S, 0, N);\nstep(L, S, I, N) ->\n  In = (I + S) rem N,\n  step(remove(lists:split(In, L)), S, In, N - 1).\n\nremove({H, []}) -> H;\nremove({H, [_|T]}) -> H ++ T.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80691,"user_id":null,"body":"-module(kata).\n-export([josephus_survivor\/2]).\n\njosephus_survivor(N, K) ->\n    josephus_survivor(lists:seq(1, N), K, K).\n\njosephus_survivor([Survivor], _K, _Index) ->\n    Survivor;\n    \njosephus_survivor(L, K, Index) when Index > length(L) ->\n    josephus_survivor(L, K, Index - length(L));\n    \njosephus_survivor(L, K, Index) ->\n    Nth = lists:nth(Index, L),\n    Killed = lists:delete(Nth, L),\n    josephus_survivor(Killed, K, Index + K - 1).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80692,"user_id":null,"body":"-module(kata).\n-export([josephus_survivor\/2]).\n\n%josephus_survivor(1, _) -> 1;\n%josephus_survivor(2, K) -> K rem 2;\n%josephus_survivor(2, K) -> K rem 2;\njosephus_survivor(N, K) ->\n  js_step(lists:seq(1, N), -1, K).\n\njs_step([N], _, _) -> N;\njs_step(Ns, Index, K) ->\n  NewIndex = (Index + K) rem length(Ns),\n  js_step(remove_index(NewIndex, Ns), NewIndex-1, K).\n\n  \nremove_index(0, [E|Es]) -> Es;\nremove_index(I, [E|Es]) -> [E|(remove_index(I-1, Es))].","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5592e3bd57b64d00f3000047":[{"id":80693,"user_id":53,"body":"-module(kata).\n-export([find_nb\/1]).\n\n-spec(find_nb(integer()) -> integer()).\n\ngo(M, S, N) when (S >= M) and (S == M) -> N;\ngo(M, S, _) when (S >= M) -> -1;\ngo(M, S, N) -> go(M, S + (N + 1) * (N + 1) * (N + 1), N + 1).\n\nfind_nb(M) -> go(M, 0, 0).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80694,"user_id":null,"body":"-module(kata).\n-export([find_nb\/1]).\n\n-spec(find_nb(integer()) -> integer()).\n\nfind_nb(M) -> eval(M, 0, 0).\n\neval(M, Acc_vol, _Acc_floors) when Acc_vol > M -> -1;\neval(M, Acc_vol, Acc_floors) when Acc_vol == M -> Acc_floors;\neval(M, Acc_vol, Acc_floors) -> eval(M, Acc_vol + (Acc_floors+1) * (Acc_floors+1) * (Acc_floors+1), Acc_floors + 1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80695,"user_id":null,"body":"-module(kata).\n-export([find_nb\/1]).\n\n-spec(find_nb(integer()) -> integer()).\n\n\nfind_nb(M) ->\n    N = maybe_n(M),\n    Mnew = maybe_m_float_list(N),\n    case float_to_list(float(M*4)) == Mnew of\n        true -> round(N);\n        false -> -1\n    end.\n\nmaybe_n(M) ->\n    round((-1+math:sqrt(1+8*math:sqrt(M)))\/2).\n\nmaybe_m_float_list(N) ->\n    float_to_list(math:pow(N,2)*(math:pow((N+1),2))).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80696,"user_id":492,"body":"-module(kata).\n-export([find_nb\/1]).\n\n-spec(find_nb(integer()) -> integer()).\n\naux(0, N) -> N;\naux(M, _) when M < 0 -> -1;\naux(M, N) ->\n\tX = N + 1,\n\taux(M - X * X * X, X).\n\nfind_nb(M) -> aux(M, 0).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"559a28007caad2ac4e000083":[{"id":80697,"user_id":null,"body":"-module(kata).\n-export([perimeter\/1]).\n\n-spec perimeter(integer()) -> integer().\n\nperimeter(N) -> perimeter(N + 1, 0, [1, 0]).\n\nperimeter(0, Acc_sum, _) -> Acc_sum;\nperimeter(N, Acc_sum, [Lst, Snd_lst]) ->\n  perimeter(N-1, Acc_sum + Lst * 4, [Lst + Snd_lst, Lst]).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80698,"user_id":null,"body":"-module(kata).\n-export([perimeter\/1]).\n\nfib(1) -> 1;\nfib(2) -> 1;\nfib(N) when N < 5 -> fib(N-1) + fib(N-2);\nfib(N) when N rem 2 == 0 ->\n    M = N div 2,\n    fib(M) * (2 * fib(M+1) - fib(M));\nfib(N) ->\n    M = (N-1) div 2,\n    fib(M+1) * fib(M+1) + fib(M) * fib(M).\n\nfib_sum(N) ->\n    fib(N+2) - 1.\n\n-spec perimeter(integer()) -> integer().\n\nperimeter(N) ->\n    fib_sum(N+1) * 4.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80699,"user_id":53,"body":"-module(kata).\n-export([perimeter\/1]).\n\n-spec perimeter(integer()) -> integer().\n\nperimeter(N) -> aux(1, 1, 1, N, 0).\n\naux(A, B, M, N, I) when I >= N + 2 -> 4 * (A - 1);\naux(A, B, M, N, I) ->\n  MM = A + B,\n  AA = B,\n  BB = MM,\n  II = I + 1,\n  aux(AA, BB, MM, N, II).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80700,"user_id":492,"body":"-module(kata).\n-export([perimeter\/1]).\n\n-spec perimeter(integer()) -> integer().\n\nloop(N, Acc1, _) when N == 0 -> Acc1;\nloop(N, Acc1, Acc2) -> loop(N - 1, Acc2, Acc1 + Acc2).\nperimeter(N) -> 4 * loop(N + 2, 1, 1) - 4.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"559b8e46fa060b2c6a0000bf":[{"id":80701,"user_id":53,"body":"-module(kata).\n-export([diagonal\/2]).\n\n-spec(diagonal(integer(), integer()) -> integer()).\n\nchoose_walker(N, K, I, R) when I > K -> R;\nchoose_walker(N, K, I, R) -> choose_walker(N, K, I + 1, R * (N - I + 1) div I).\n\nchoose(N, K) -> choose_walker(N, K, 1, 1).\n\ndiagonal(N, P) -> choose(N + 1, P + 1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80702,"user_id":492,"body":"-module(kata).\n-export([diagonal\/2]).\n\n-spec(diagonal(integer(), integer()) -> integer()).\n\nchoose(_N, 0) -> 1;\nchoose(N, K) when (N >= 0), (K >= 0), (N >= K) ->\n  choose(N, K, 1, 1).\nchoose(N, K, K, Acc) ->\n  (Acc * (N-K+1)) div K;\nchoose(N, K, I, Acc) ->\n  choose(N, K, I+1, (Acc * (N-I+1)) div I).\n\ndiagonal(N, P) ->\n    choose(N + 1, P + 1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"559ce00b70041bc7b600013d":[{"id":80703,"user_id":527,"body":"-module(kata).\n-export([finance\/1]).\n\n-spec finance(non_neg_integer()) -> non_neg_integer().\n\nfinance(N) -> N * (N + 1) * (N + 2) div 2.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80704,"user_id":53,"body":"-module(kata).\n-export([finance\/1]).\n\n-spec finance(integer()) -> integer().\n\nfinance(N) -> N * (N + 1) * (N + 2) div 2.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80705,"user_id":492,"body":"-module(kata).\n-export([finance\/1]).\n\n-spec finance(integer()) -> integer().\n\nfinance(N) -> (N * (N * N + 3 * N + 2)) div 2.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"55a29405bc7d2efaff00007c":[{"id":80706,"user_id":null,"body":"-module(kata).\n-export([going\/1]).\n\n-spec going(integer()) -> float.\n\ngoing(N) -> going_internal(N, 1, 1).\n\ngoing_internal(N, R, _I) when N == 1 -> floor(R * 100000) \/ 100000;\ngoing_internal(N, R, I) -> going_internal(N - 1, R + I \/ N, I \/ N).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80707,"user_id":53,"body":"-module(kata).\n-export([going\/1]).\n\n-spec going(integer()) -> float.\n\ngoing(N) when N =< 0 -> 0;\ngoing(N) -> 1 + going(N - 1) \/ N.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80708,"user_id":492,"body":"-module(kata).\n-export([going\/1]).\n\n-spec going(integer()) -> float.\n\ntrunc6(D) -> trunc(D * 1.0e6) \/ 1.0e6.\naux(I, _, Res) when I == 1 -> trunc6(Res);\naux(I, Iter, Res) ->\n    It = Iter \/ I,\n    aux(I - 1, It, Res + It).\ngoing(N) -> aux(N, 1.0, 1.0).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"55aa075506463dac6600010d":[{"id":80709,"user_id":null,"body":"-module(kata).\n-export([list_squared\/2]).\n\n-spec is_square(integer()) -> boolean().\nis_square(N) ->\n\tR = math:floor(math:sqrt(N)),\n\tR*R==N.\n\n-spec smallest_div(integer(), [integer()]) -> integer() | atom().\n% Given a list of primes, returns the smallest divisor of N.\n% If no divisor is found among the primes, returns atom 'nodiv'\nsmallest_div(N, [P|_]) when N rem P == 0 -> P;\nsmallest_div(N, [_|Primes]) -> smallest_div(N, Primes);\nsmallest_div(_, []) -> nodiv.\n-spec is_prime(integer(), [integer()]) -> boolean().\n% Given a list of primes up to the square root of N,\n% returns if N is prime or not\nis_prime(N, Primes) ->\n\tcase smallest_div(N, Primes) of\n\t\tnodiv -> true;\n\t\tDiv -> Div == N\n\tend.\n-spec div_list_mult([integer()], [integer()]) -> [integer()].\n% Given two lists of ordered divisors of two numbers,\n% calculates the ordered list of divisors of the product of the two numbers\n% \n% Example: [1,2,3,6] (divs of 6) ** [1,2] (divs of 2) \n% \t\t = [1,2,3,6] ++ [2,4,6,12] = [1,2,3,4,6,12] \ndiv_list_mult(Divs1, Divs2) ->\n\tDivs = lists:map(fun(X) -> lists:map(fun(Y) -> X*Y end, Divs2) end, Divs1),\n\tordsets:from_list(lists:flatten(Divs)).\n-spec divisors([integer()], integer()) -> [integer()].\n% Given a list of primes up to the square root of N,\n% returns the ordered list of divisors of N \ndivisors(_, 1) -> [1];\ndivisors(Primes, N) ->\n\tcase is_prime(N, Primes) of\n\t\ttrue -> [1, N];\n\t\t_ \t ->\n\t\t\tP = smallest_div(N, Primes),\n\t\t\tQ = N div P,\n\t\t\tdiv_list_mult(\n\t\t\t\t\t\tdivisors(Primes, P)\n\t\t\t\t\t  , divisors(Primes, Q))\n\tend.\n-spec sundaram(integer()) -> [integer()].\n% Uses sieve of Sundaram to generate a list of primes up to Max\nsundaram(Max) when (Max > 2) ->\n\tN = case Max rem 2 of\n\t\t0 -> Max div 2 - 1;\n\t    1 -> (Max - 1) div 2\n\tend,\n\tIs = lists:seq(1, N),\n\tFun = fun(I, NotPrime) ->\n\t\tJs = lists:seq(I, N),\n\t\tlists:foldl(\n\t\t\tfun(J, NotPrime_) ->\n\t\t\t\tsets:add_element(I+J+2*I*J, NotPrime_) end\n\t\t\t  , NotPrime\n\t\t\t  , Js)\n\t\tend,\n\tNotPrime = lists:foldl(Fun, sets:new(), Is),\n\tProtoPrimes = lists:filter(\n\t\tfun(X) -> not sets:is_element(X, NotPrime) end\n\t  , lists:seq(1, N)),\n\t[2 | lists:map(fun(X) -> 2*X + 1 end, ProtoPrimes)].\n\n-spec list_squared(integer(), integer()) -> [{integer, integer}].\nlist_squared(M, N) when M =< N->\n\tPrimes = sundaram(round(math:floor(math:sqrt(N)))),\n\tlists:foldr(\n\t\tfun(X, Perfects) ->\n\t\t\tSum = lists:foldl(fun(D, Sum) -> D*D+Sum end, 0, divisors(Primes, X)),\n\t\t\tcase is_square(Sum) of\n\t\t\t\ttrue -> [{X, Sum}|Perfects];\n\t\t\t\t_ \t -> Perfects\n\t\t\tend\n\t\tend\n\t  , [], lists:seq(M, N));\nlist_squared(_M, _N) -> [].","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80710,"user_id":492,"body":"-module(kata).\n-export([list_squared\/2]).\n\n-spec list_squared(integer(), integer()) -> [{integer, integer}].\n\ndivisors(N) -> lists:filter(fun(X) -> N rem X == 0 end, lists:seq(1, trunc(math:sqrt(N)))).\nsumOfSquaredDiv(N) -> \n\tlists:foldl(fun(X, Acc) -> \n\t\t\tif (X * X == N) ->\n\t\t\t\tN + Acc;\n\t\t\ttrue ->\n\t\t\t\tAcc + ((X * X * X * X + N * N) div (X * X))\n\t\t\tend\n\t\tend,\n\t\t0,\n\t\tdivisors(N)\n\t).\nisSquare(N) ->\n\tA = trunc(math:sqrt(N)),\n\tA * A == N.\nlist_squared(M, N) ->\n\tF = lists:map(fun(X) -> {X, sumOfSquaredDiv(X)} end, lists:seq(M, N)),\n\tlists:filter(fun({_A, B}) -> isSquare(B) end, F).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"55ab4f980f2d576c070000f4":[{"id":80711,"user_id":53,"body":"-module(kata).\n-export([game\/1]).\n\n-spec game(integer()) -> integer | {integer, integer}.\n\ngame(N) when (N rem 2) == 0 -> (N * N) div 2;\ngame(N) -> { N * N, 2 }.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80712,"user_id":492,"body":"-module(kata).\n-export([game\/1]).\n\n-spec game(integer()) -> integer | {integer, integer}.\n\ngame(N) ->\n\tM = N * N,\n\tif ((M rem 2) == 0) -> \n\t\tM div 2;\n\ttrue ->\n\t\t{M, 2}\n\tend.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"55b4d87a3766d9873a0000d4":[{"id":80713,"user_id":492,"body":"-module(kata).\n-export([howMuch\/2]).\n-include_lib(\"eunit\/include\/eunit.hrl\").\n\n-spec howMuch(integer(), integer()) -> [[string]].\n \nhowMuch(M, N) ->\n\tA = min(M, N),\n\tB = max(M, N),\n\tL = lists:filter(fun(X) -> ((X rem 9 == 1) and (X rem 7 == 2)) end, lists:seq(A, B)),\n\tlists:map(fun(X) -> [\"M: \" ++ integer_to_list(X), \"B: \" ++ integer_to_list(X div 7), \"C: \" ++ integer_to_list(X div 9)] end, L).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"55be10de92aad5ef28000023":[{"id":80714,"user_id":527,"body":"-module(kata).\n-export([checkchoose\/2]).\n\n-spec checkchoose(non_neg_integer(), non_neg_integer()) -> non_neg_integer().\n  \ncheckchoose(M, N) -> do_checkchoose(M, N, 0, 1).\n  \ndo_checkchoose(_, N, X, _) when X > N div 2 -> -1;\ndo_checkchoose(M, N, X, C) when C < M -> do_checkchoose(M, N, X + 1, C * (N - X) div (X + 1));\ndo_checkchoose(M, _, X, C) when C == M -> X;\ndo_checkchoose(M, _, _, C) when C > M -> -1.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80715,"user_id":492,"body":"-module(kata).\n-export([checkchoose\/2]).\n\n-spec(checkchoose(integer(), integer()) -> integer()).\n\ncheckaux(_M, N, X, _C) when X > N div 2 -> -1;\ncheckaux(M, N, X, C) when C < M ->\n    checkaux(M, N, X + 1, C * (N - X) div (X + 1));\ncheckaux(M, _N, X, C) when C == M -> X;\ncheckaux(M, _N, _X, C) when C > M -> -1.\n  \ncheckchoose(M, N) ->\n    checkaux(M, N, 0, 1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"55cbc3586671f6aa070000fb":[{"id":80716,"user_id":527,"body":"-module(kata).\n-export([check_for_factor\/2]).\n\ncheck_for_factor(B, F) -> \n  B rem F == 0.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80717,"user_id":null,"body":"-module(kata).\n-export([check_for_factor\/2]).\n\ncheck_for_factor(0, _) -> \n  true;\ncheck_for_factor(Base, Factor) when Base rem Factor =:= 0 -> \n  true;\ncheck_for_factor(_, _) -> \n  false.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80718,"user_id":null,"body":"-module(kata).\n-export([check_for_factor\/2]).\n\ncheck_for_factor(_, 0) -> \n  false;\ncheck_for_factor(Base, Factor) ->\n  Base rem Factor == 0.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80719,"user_id":null,"body":"-module(kata).\n-export([check_for_factor\/2]).\n\n\ncheck_for_factor(Base, Factor) when (Base rem Factor =:= 0) -> true;\ncheck_for_factor(Base, Factor) when (Base rem Factor \/= 0) -> false.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80720,"user_id":null,"body":"-module(kata).\n-export([check_for_factor\/2]).\n\ncheck_for_factor(Base, Factor) when Base rem Factor =:= 0 -> \n  true;\n\ncheck_for_factor(Base, Factor) ->\n  false.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80721,"user_id":null,"body":"-module(kata).\n-export([check_for_factor\/2]).\n\ncheck_for_factor(Base, Factor) -> \n  Factor2 = Base \/ Factor,\n  Factor2 == floor(Factor2).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80722,"user_id":null,"body":"-module(kata).\n-export([check_for_factor\/2]).\n\ncheck_for_factor(Base, Factor) -> \n  (Base \/ Factor) == (Base div Factor).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80723,"user_id":null,"body":"-module(kata).\n-export([check_for_factor\/2]).\n\ncheck_for_factor(Base, Factor) when (Base rem Factor =\/= 0)-> \n  false;\n  check_for_factor(Base, Factor) -> true.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80724,"user_id":null,"body":"-module(kata).\n-export([check_for_factor\/2]).\n\ncheck_for_factor(Factor, Factor) -> true;\ncheck_for_factor(Base, Factor) when Base < Factor -> false;\ncheck_for_factor(Base, Factor) when Base > Factor -> check_for_factor(Base - Factor, Factor).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80725,"user_id":null,"body":"-module(kata).\n-export([check_for_factor\/2]).\n\ncheck_for_factor(Base, Factor) -> \n  case floor(Base\/Factor)*Factor of\n    Base ->\n      true;\n    _ -> \n      false\n  end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"55d24f55d7dd296eb9000030":[{"id":80726,"user_id":null,"body":"-module(kata).\n-export([summation\/1]).\n\nsummation(1) -> 1;\nsummation(N) ->\n  N + summation(N-1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80727,"user_id":564,"body":"-module(kata).\n-export([summation\/1]).\n\nsummation(N) ->\n  (N * N + N) div 2.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80728,"user_id":null,"body":"-module(kata).\n-export([summation\/1]).\n\nsummation(N) -> lists:sum(lists:seq(0, N)).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80729,"user_id":null,"body":"-module(kata).\n-export([summation\/1]).\n\nsummation(N) -> do_sum(N, 0).\n\ndo_sum(0, Sum) -> Sum;\ndo_sum(N, Sum) -> do_sum(N - 1, Sum + N).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80730,"user_id":null,"body":"-module(kata).\n-export([summation\/1]).\n\nsummation(N) when is_integer(N), N > 0 ->\n  summation(N, 0);\nsummation(_) ->\n  {error, \"Value isn't INTEGER, or less than or equal 0 (zero)\"}.\n\nsummation(0, Acc) -> Acc;\nsummation(N, Acc) ->\n  summation(N - 1, Acc + N).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80731,"user_id":null,"body":"-module(kata).\n-export([summation\/1]).\n\nsummation(0) -> 0;\nsummation(N) -> summation(N - 1, N).\n  \nsummation(0, Acc) -> Acc;\nsummation(N, Acc) -> summation(N - 1, N + Acc).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80732,"user_id":null,"body":"-module(kata).\n-export([summation\/1]).\n\nsummation(X) when X =< 1 -> X;\nsummation(X) -> summation(X - 1) + X.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80733,"user_id":null,"body":"-module(kata).\n-export([summation\/1]).\n\nsummation(N) -> round(N * (N + 1) \/ 2).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80734,"user_id":null,"body":"-module(kata).\n-export([summation\/1]).\n\nsum(Acc, 0) -> Acc;\nsum(Acc, Digit) -> sum(Acc + Digit, Digit - 1).\n\nsummation(N) -> sum(0, N).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80735,"user_id":null,"body":"-module(kata).\n-export([summation\/1]).\n\nsummation(0) -> 0;\nsummation(X) -> X + summation(X-1).\n\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"55e2adece53b4cdcb900006c":[{"id":80736,"user_id":53,"body":"-module(kata).\n-export([race\/3]).\n\n-spec race(integer(), integer(), integer()) -> {integer, integer, integer}.\n\nrace(V1, V2, _) when V1 >= V2 -> {-1, -1, -1};\nrace(V1, V2, G) ->\n  T = (3600 * G) div (V2 - V1),\n  H = T div 3600,\n  M = (T rem 3600) div 60,\n  S = T rem 60,\n  {H, M, S}.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80737,"user_id":492,"body":"-module(kata).\n-export([race\/3]).\n\n-spec race(integer(), integer(), integer()) -> {integer, integer, integer}.\n\nrace(V1, V2, _G) when V1 >= V2 -> {-1, -1, -1};\nrace(V1, V2, G) -> aux(V1, V2, G).\naux(V1, V2, G) ->\n    T = (3600 * G) div (V2 - V1),\n    {M, S} = {T div 60, T rem 60},\n    {H, Mn} = {M div 60, M rem 60},\n    {H, Mn, S}.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"55e6f5e58f7817808e00002e":[{"id":80738,"user_id":null,"body":"-module(kata).\n-export([seven\/1]).\n\n-spec(seven(integer()) -> {integer, integer}).\n\nseven(M) -> \n  seven(M, 0).\n\nseven(M, Acc) -> \n  if\n    M < 100 -> {M, Acc};\n    M >= 100 -> seven(((M div 10) - (2 * (M rem 10))), Acc + 1)\n    \n  end.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80739,"user_id":null,"body":"-module(kata).\n-export([seven\/1]).\n\n-spec(seven(integer()) -> {integer, integer}).\nseven(0) -> {0,0};\nseven(M) -> seven(M, 0).\n\nseven(M, N) ->\n  M2 = M div 10 - M rem 10 * 2,\n  if\n    M2 < 100 ->\n      {M2, N + 1};\n    true ->\n      seven(M2, N + 1)\n  end.\n\n\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80740,"user_id":null,"body":"-module(kata).\n-export([seven\/1]).\n\n-spec(seven(integer()) -> {integer, integer}).\n\nseven(M) -> seven2(M, 0).\nseven2(Number, Counter) when Number < 100 -> {Number, Counter};\nseven2(Number, Counter) when Number >= 100 -> seven2((Number div 10) - 2*(Number rem 10), Counter + 1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80741,"user_id":527,"body":"-module(kata).\n-export([seven\/1]).\n\n-spec seven(integer()) -> {integer(), integer()}.\nseven(M) -> do_seven(M, 0).\n\ndo_seven(M, I) when M < 100 -> {M, I};\ndo_seven(M, I) -> do_seven(M div 10 - 2 * (M rem 10), I + 1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80742,"user_id":492,"body":"-module(kata).\n-export([seven\/1]).\n\n-spec(seven(integer()) -> {integer, integer}).\n\nseven(S, M) when M < 100 -> {M, S};\nseven(S, M) ->\n\tseven(S + 1, (M div 10) - (2 * (M rem 10))).\nseven(M) -> seven(0, M).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"55e7280b40e1c4a06d0000aa":[{"id":80743,"user_id":null,"body":"-module(kata).\n-export([bestSum\/3]).\n\nbestSum(_, 0, _, Sum)              -> Sum;\nbestSum(_, _, [], _)               -> -1;\nbestSum(T, _, [E|_], _) when E > T -> -1;\nbestSum(T, K, [E|List], Sum)       ->\n    max(\n        bestSum(T-E, K-1, List, Sum+E)\n      , bestSum(T, K, List, Sum)).\n\n-spec bestSum(integer(), integer(), [integer]) -> integer().\n\nbestSum(T, K, Ls) ->\n    bestSum(T, K, lists:sort(Ls), 0).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80744,"user_id":null,"body":"-module(kata).\n-export([bestSum\/3]).\n\nbestSum(_, 0, _, _)                -> 0;\nbestSum(_, _, [], _)               -> -1;\nbestSum(T, _, [E|_], _) when E > T -> -1;\nbestSum(_, 1, [E], Sum)            -> Sum + E;\nbestSum(T, 1, [E|List], Sum)       -> max(Sum + E, bestSum(T, 1, List, Sum));\nbestSum(T, K, [E|List], Sum)       ->\n    max(\n        bestSum(T-E, K-1, List, Sum+E)\n      , bestSum(T, K, List, Sum)).\n\n-spec bestSum(integer(), integer(), [integer]) -> integer().\n\nbestSum(T, K, Ls) ->\n    bestSum(T, K, lists:sort(Ls), 0).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80745,"user_id":492,"body":"-module(kata).\n-export([bestSum\/3]).\n\n-spec bestSum(integer(), integer(), [integer]) -> integer().\n\ncomb(K, List) ->\n    lists:last(all_combinations(K, List)).\nall_combinations(K, List) ->\n    lists:foldr(\n      fun(X, Next) ->\n              Sub = lists:sublist(Next, length(Next) - 1),\n              Step = [[]] ++ [[[X|S] || S <- L] || L <- Sub],\n              lists:zipwith(fun lists:append\/2, Step, Next)\n      end, \n      [[[]]] ++ lists:duplicate(K, []), List\n      ).\n\nbestSum(T, K, Ls) ->\n    A = comb(K, Ls),\n    L = lists:map(fun(X) -> lists:sum(X) end, A),\n    M = lists:filter(fun(X) -> X =< T end, L),\n    if \n    (M == []) ->\n        -1;\n    true ->\n        lists:max(M)\n    end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"55f3da49e83ca1ddae0000ad":[{"id":80746,"user_id":53,"body":"-module(kata).\n-export([tankVol\/3]).\n\n-spec tankVol(integer(), integer(), integer()) -> integer().\n\ntankVol(H, D, Vt) ->\n    N = math:acos(1 - H \/ (D \/ 2)) * 2,\n    trunc(Vt * (N - math:sin(N)) \/ (2 * math:pi())).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80747,"user_id":492,"body":"-module(kata).\n-export([tankVol\/3]).\n\n-spec tankVol(integer(), integer(), integer()) -> integer().\n\ntankVol(H, D, Vt) ->\n    if (H == D) ->\n    \tVt;\n    true ->\n        R = D \/ 2.0,\n        R2 = R * R,\n        Oa = R - H,\n        Theta = math:acos(Oa\/ R),\n        Ab = R * math:sin(Theta),\n        K = Vt \/ math:pi() \/ R2,\n        STheta = Theta * R2 \/ 2.0,\n        SOab = Ab * Oa \/ 2.0,\n        S = 2.0 * (STheta - SOab),\n        trunc(S * K)\n    end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"55f9bca8ecaa9eac7100004a":[{"id":80748,"user_id":null,"body":"-module(kata).\n-export([past\/3]).\n\npast(H, M, S) -> timer:hours(H) + timer:minutes(M) + timer:seconds(S).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80749,"user_id":null,"body":"-module(kata).\n-export([past\/3]).\n\nto_millis({seconds, Count}) -> 1000 * Count;\nto_millis({minutes, Count}) -> to_millis({seconds, Count * 60});\nto_millis({hours,   Count}) -> to_millis({minutes, Count * 60}).\n\npast(H, M, S) -> \n  to_millis({hours,   H}) +\n  to_millis({minutes, M}) +\n  to_millis({seconds, S}).\n  ","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80750,"user_id":null,"body":"-module(kata).\n-export([past\/3]).\n\npast(H, M, S) -> S * 1000 + M * 60000 + H * 3600000 .","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80751,"user_id":null,"body":"-module(kata).\n-export([past\/3]).\n\npast(H, M, S) when H >= 0, H =< 23, M >= 0, M =< 59, S >= 0, S =< 59 ->\n  ((H * 60 * 60) + (M * 60) + S) * 1000.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80752,"user_id":null,"body":"-module(kata).\n-export([past\/3]).\n-define(MILL_IN_SEC, 1000).\n-define(MILL_IN_MIN, 60 * ?MILL_IN_SEC).\n-define(MILL_IN_HOUR, 60 * ?MILL_IN_MIN).\n\npast(H, M, S) ->\n  H * ?MILL_IN_HOUR\n  + M * ?MILL_IN_MIN\n  + S * ?MILL_IN_SEC.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80753,"user_id":null,"body":"-module(kata).\n-export([past\/3]).\n\npast(H, M, S) -> hours_to_ms(H) + minutes_to_ms(M) + seconds_to_ms(S).\n\nhours_to_ms(H) -> H * minutes_to_ms(60).\nminutes_to_ms(M) -> M * seconds_to_ms(60).\nseconds_to_ms(S) -> S * 1000.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80754,"user_id":527,"body":"-module(kata).\n-export([past\/3]).\n\npast(H, M, S) -> ((H * 60 + M) * 60 + S) * 1000.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80755,"user_id":null,"body":"-module(kata).\n-export([past\/3]).\n\npast(H, M, S) -> H * 3600000 + M * 60000 + 1000 * S.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80756,"user_id":null,"body":"-module(kata).\n-export([past\/3]).\n\npast(H, M, S) -> past(H * 60 + M , S).\n\npast(M, S) -> past(60 * M + S).\n\npast(S) -> S * 1000.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80757,"user_id":null,"body":"-module(kata).\n-export([past\/3]).\n\npast(H, M, S) -> 3600000*H + 60000*M + 1000*S.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"55fd2d567d94ac3bc9000064":[{"id":80758,"user_id":645,"body":"-module(kata).\n-export([row_sum_odd_numbers\/1]).\n\nrow_sum_odd_numbers(N) -> N * N * N.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80759,"user_id":null,"body":"-module(kata).\n-export([row_sum_odd_numbers\/1]).\n\n% first_odd_number_index(N)  -> N * (N - 1) div 2.\n% first_odd_number(N)        -> first_odd_number_index(N) * 2 - 1.\n% row_sum_odd_numbers(N)     -> first_odd_number(N) * N + N * (N + 1).\n% after reduction it yields N^3\n\nrow_sum_odd_numbers(N) -> N * N * N.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80760,"user_id":null,"body":"-module(kata).\n-export([row_sum_odd_numbers\/1]).\n\nrowSum2(0, Numbers, Answer) -> trunc(Answer);\nrowSum2(N, Numbers, Answer) -> \n    Tmp = 2*(Numbers-1)+1,\n    rowSum2(N-1, Numbers-1, Answer+Tmp).\n\nrow_sum_odd_numbers(N) ->\n    Numbers = (N+1)*N\/2,\n    rowSum2(N, Numbers, 0).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80761,"user_id":null,"body":"-module(kata).\n-export([row_sum_odd_numbers\/1]).\n\nrow_sum_odd_numbers(1) -> 1;\nrow_sum_odd_numbers(N) -> \n  next_odds((N * (N - 1)) + 1, N, 0).\n\nnext_odds(_, 0, Acc) -> Acc;\nnext_odds(Start, Length, Acc) ->\n  next_odds(Start + 2, Length - 1, Start + Acc).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80762,"user_id":null,"body":"-module(kata).\n-export([row_sum_odd_numbers\/1]).\n\nrow_sum_odd_numbers(N) ->\n  Start_Count = N*N -N+1,\n  lists:sum(lists:seq(Start_Count, Start_Count + N * 2 - 1, 2)).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80763,"user_id":null,"body":"-module(kata).\n-export([row_sum_odd_numbers\/1]).\n\nrow_sum_odd_numbers(Row) ->\n  I = row_initial_number(Row),\n  row_sum_odd_numbers(Row, I).\n\nrow_sum_odd_numbers(Row, I) -> \n  sum_rep(Row, I, fun(V) -> I + V * 2 end).\n\nrow_initial_number(Row) ->\n  sum_rep(Row, 1, fun(V) -> V * 2 end).\n\nsum_rep(Rep, IniVal, FunInc) ->\n  lists:sum([IniVal|[FunInc(X) || X <- lists:seq(1, Rep-1, 1)]]).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80764,"user_id":null,"body":"-module(kata).\n-export([row_sum_odd_numbers\/1]).\n\nrow_sum_odd_numbers(N) ->\n  Result = N*N*N.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80765,"user_id":null,"body":"-module(kata).\n-export([row_sum_odd_numbers\/1]).\n\nrow_sum_odd_numbers(N) ->\n  lists:sum(lists:seq(lists:sum(lists:seq(1, N - 1)) * 2 + 1, lists:sum(lists:seq(1, N)) * 2 - 1, 2)).\n\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80766,"user_id":null,"body":"-module(kata).\n-export([row_sum_odd_numbers\/1]).\n\nrow_sum_odd_numbers(N) ->\n  FirstNumberOfRow = N * (N - 1) + 1,\n  floor(FirstNumberOfRow * N + (2 * (N * (N - 1) \/ 2 ))).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80767,"user_id":null,"body":"-module(kata).\n-export([row_sum_odd_numbers\/1]).\n\nrow_sum_odd_numbers(N) ->\n  first_n_odd_sum(triangle_number(N))-first_n_odd_sum(triangle_number(N-1)).\n\nfirst_n_odd_sum(N) -> N * N.\n\ntriangle_number(N) -> N * (N + 1) div 2.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"562e274ceca15ca6e70000d3":[{"id":80768,"user_id":null,"body":"-module(kata).\n-export([lenCurve\/1]).\n\n-spec(lenCurve(integer()) -> float()).\n\nlenCurve(_, 0, _, _, Answer) -> Answer;\nlenCurve(Interval, Counter, X1, Y1, Answer) ->\n    X2 = X1 + Interval,\n    Y2 = X2*X2,\n    Distance = math:sqrt(math:pow(X2-X1, 2) + math:pow(Y2-Y1, 2)),\n    lenCurve(Interval, Counter-1, X2, Y2, Answer+Distance).\n\nlenCurve(N) -> \n    Interval = 1\/N,\n    lenCurve(Interval, N, 0, 0, 0).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80769,"user_id":492,"body":"-module(kata).\n-export([lenCurve\/1]).\n\n-spec(lenCurve(integer()) -> float()).\n\ntrunc9(D) ->\n    trunc(D * 1.0e9) \/ 1.0e9.\nseglg(N, K) ->\n    A = ((K + 1.0) \/ N - K \/ N) * ((K + 1.0) \/ N - K \/ N),\n    B = (((K + 1.0) \/ N) * ((K + 1.0) \/ N) - (K \/ N) * (K \/ N)),\n    math:sqrt (A + B * B).\nlenCurveAux(N, K, SM) when K == N -> SM;\nlenCurveAux(N, K, SM) ->\n    lenCurveAux(N, K + 1.0, SM + seglg(N, K)).\n\nlenCurve(N) -> trunc9(lenCurveAux(N, 0.0, 0.0)).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"562f91ff6a8b77dfe900006e":[{"id":80770,"user_id":null,"body":"-module(kata).\n-export([movie\/3]).\n\n-spec(movie(integer(), integer(), float()) -> integer()).\n\nmovie(Card, Ticket, Perc) ->\n    eval(Ticket, Perc, {0, Card, 0}).\n\neval(_Ticket, _Perc, {Acc_system_a, Acc_system_b, Tickets}) when Acc_system_a > trunc(1 + Acc_system_b) ->\n    Tickets;\neval(Ticket, Perc, {Acc_system_a, Acc_system_b, Tickets}) ->\n    eval(Ticket, Perc, {Acc_system_a + Ticket, Acc_system_b + Ticket * math:pow(Perc, Tickets+1), Tickets + 1}).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80771,"user_id":null,"body":"-module(kata).\n-export([movie\/3]).\n\n-spec(movie(integer(), integer(), float()) -> integer()).\n\nmovie2(Card, Ticket, TicketB, Perc, Times, Accumulator) ->\n    SystemA = Times * Ticket,\n    SystemB = Accumulator + TicketB,\n    if ceil(SystemB) < SystemA -> Times;\n       true -> movie2(Card, Ticket, TicketB*Perc, Perc, Times+1, SystemB)\n    end.\n\nmovie(Card, Ticket, Perc) ->\n    movie2(Card, Ticket, Ticket*Perc, Perc, 1, Card).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80772,"user_id":492,"body":"-module(kata).\n-export([movie\/3]).\n\n-spec(movie(integer(), integer(), float()) -> integer()).\n\nmovieAux(Card, Ticket, Perc, I) ->\n    Withoutcard = Ticket * I,\n    Withcard = Card + Ticket * (1 - math:pow(Perc, I)) \/ (1 - Perc),\n    if (ceil(Withcard) < Withoutcard) ->\n      I - 1;\n    true ->\n      movieAux(Card, Ticket, Perc, I + 1)\n    end.\nmovie(Card, Ticket, Perc) ->\n    movieAux(Card, Ticket, Perc, 1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56347fcfd086de8f11000014":[{"id":80773,"user_id":492,"body":"-module(kata).\n-export([exEuler\/1]).\n\n-spec exEuler(integer()) -> float().\n\nf(X, Y) -> 2.0 - math:exp(-4.0 * X) - 2.0 * Y.\nexact(X) -> 1 + 0.5 * math:exp(-4.0 * X) - 0.5 * math:exp(-2.0 * X).\nintegrate(Nb, Err, I, H, X, Y) ->\n    if (I >= Nb) ->\n        Err;\n    true ->\n        Yy = Y + H * f(X, Y),\n        Xx = X + H,\n        Z = exact(Xx),\n        Serr = Err + abs(Yy - Z) \/ Z,\n        integrate(Nb, Serr, I + 1, H, Xx, Yy)\n    end. \n\nexEuler(Nb) -> \n        X = 0,\n        Y = 1,\n        H = 1.0 \/ Nb,\n        Err = 0,\n        U = integrate(Nb, Err, 0, H, X, Y),\n        (trunc((U \/ (Nb + 1)) * 1.0e6)) \/ 1.0e6.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"563a631f7cbbc236cf0000c2":[{"id":80774,"user_id":null,"body":"-module(kata).\n-export([move\/2]).\n\nmove(Pos, Roll) -> Roll + Roll + Pos.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80775,"user_id":null,"body":"-module(kata).\n-export([move\/2]).\n\nmove(Pos, Roll) -> Roll * 2 + Pos.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80776,"user_id":645,"body":"-module(kata).\n-export([move\/2]).\n\nmove(P, R) -> P + R * 2.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80777,"user_id":null,"body":"-module(kata).\n-export([move\/2]).\n\nmove(Pos, Roll) -> Pos + (Roll+Roll).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80778,"user_id":null,"body":"-module(kata).\n-export([move\/2]).\n\nmove(Pos, Roll) -> 2 * Roll + Pos.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80779,"user_id":null,"body":"-module(kata).\n-export([move\/2]).\n\nmove(Pos, Roll) -> do_move(Pos, Roll, 0).\n\ndo_move(Pos, 0, Acc) -> Pos + Acc;\ndo_move(Pos, Roll, Acc)-> do_move(Pos, Roll - 1, Acc + 2).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80780,"user_id":null,"body":"-module(kata).\n-export([move\/2]).\n\nmove(Pos, Roll) when is_integer(Pos), is_integer(Roll),\n                      Pos >= 0, (Roll >= 1) and (Roll =< 6) ->\n  Roll * 2 + Pos.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80781,"user_id":null,"body":"-module(kata).\n-export([move\/2]).\n\nmove(Pos, Roll) -> Pos + (Roll bsl 1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80782,"user_id":53,"body":"-module(kata).\n-export([move\/2]).\n\nmove(Pos, Roll) -> Pos + 2 * Roll.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80783,"user_id":527,"body":"-module(kata).\n-export([move\/2]).\n\nmove(Pos, Roll) -> Pos + Roll * 2.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"563f0c54a22b9345bf000053":[{"id":80784,"user_id":527,"body":"-module(kata).\n-export([fcn\/1]).\n\n-spec fcn(non_neg_integer()) -> pos_integer().\n\nfcn(N) -> 1 bsl N.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80785,"user_id":492,"body":"-module(kata).\n-export([fcn\/1]).\n\n-spec fcn(integer()) -> integer.\n\nfcn(N) -> 1 bsl N.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"564057bc348c7200bd0000ff":[{"id":80786,"user_id":53,"body":"-module(kata).\n-export([thirt\/1]).\n\n-spec thirt(integer()) -> integer.\n\ngo(N, S, _, 0) when S == N -> S;\ngo(_, S, _, 0) -> go(S, 0, 1, S);\ngo(N, S, R, M) -> go(N, S + R * (M rem 10), (R * 10) rem 13, M div 10).\n\nthirt(N) -> go(N, 0, 1, N).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80787,"user_id":492,"body":"-module(kata).\n-export([thirt\/1]).\n\n-spec thirt(integer()) -> integer.\n\naux(N, S, _, 0) when S == N -> S;\naux(_, S, _, 0) -> aux(S, 0, 1, S);\naux(N, S, R, M) -> aux(N, S + (M rem 10) * R, R * 10 rem 13,M div 10).\nthirt(N) -> aux(N, 0, 1, N).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56445c4755d0e45b8c00010a":[{"id":80788,"user_id":492,"body":"-module(kata).\n-export([fortune\/5]).\n\n-spec fortune(integer(), float(), integer(), integer(), float()) -> boolean.\n\nfAux(Prev_f, P, Prev_c, N, Infl, K) ->\n    if (K == N) ->\n      \tPrev_f >= 0;\n    true ->\n      A = floor(Prev_f + P \/ 100.0 * Prev_f - Prev_c),\n      B = floor(Prev_c + Infl \/ 100.0 * Prev_c),\n      fAux(A, P, B, N, Infl, K + 1)\n    end.\n  \nfortune(F0, P, C0, N, I) ->\n    fAux(F0, P, C0, N, I, 1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56484848ba95170a8000004d":[{"id":80789,"user_id":492,"body":"-module(kata).\n-export([gps\/2]).\n\n-spec gps(integer(), [float]) -> float.\n\ngps(_S, Ls) when length(Ls) =< 1 -> 0;\ngps(S, Ls) ->\n\tL = lists:zipwith(fun(X, Y) -> 3600 * (X - Y) \/ S end,lists:nthtail(1, Ls), lists:droplast(Ls)),\n\tfloor(lists:max(L)).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80790,"user_id":null,"body":"-module(kata).\n-export([gps\/2]).\n\n-spec gps(integer(), [float]) -> float.\n\ngps2(_, [_]) -> [];\ngps2(S, [X|[Y|Z]]) -> [floor(3600*(Y-X)\/S)] ++ gps2(S, [Y|Z]).\n\ngps(_, []) -> 0;\ngps(_, [_]) -> 0;\ngps(S, Ls) -> lists:max(gps2(S, Ls)).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80791,"user_id":null,"body":"-module(kata).\n-export([gps\/2]).\n\n-spec gps(integer(), [float]) -> integer().\n\ngps(S, Ls) ->\n  Speeds = calc_delta_speeds (S, Ls),\n  erlang:trunc (lists:max (Speeds)).\n\ncalc_delta_speeds (S, Ls) when length (Ls) > 1 ->\n  calc_delta_speeds (S, Ls, []);\ncalc_delta_speeds (_, _) ->\n  [0].\n\ncalc_delta_speeds (S, [D1 , D2 | []], Acc) ->\n  [calc_hourly_sp (D2-D1, S) | Acc];\ncalc_delta_speeds (S, [D1 , D2 | Tail], Acc) ->\n  NewAcc = [calc_hourly_sp (D2-D1, S) | Acc],\n  calc_delta_speeds (S, [D2 | Tail], NewAcc).\n\ncalc_hourly_sp (Delta, S) ->\n  (3600 * Delta) \/ S.\n  ","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56541980fa08ab47a0000040":[{"id":80792,"user_id":null,"body":"-module(kata).\n-export([printer_error\/1]).\n\n-spec printer_error(string) -> string.\n\ncompare2(_, _, 0, Counter) -> Counter;\ncompare2(ItemS, Alphabet, LenAlph, Counter) ->\n    ItemA = string:substr(Alphabet, LenAlph, 1),\n    if ItemS == ItemA ->\n\tcompare2(ItemS, Alphabet, LenAlph-1, Counter+1);\n       true -> compare2(ItemS, Alphabet, LenAlph-1, Counter)\n    end.\n\ncompare(_, 0, _, Count) -> Count;\ncompare(S, Len, Alphabet, Count) ->\n    ItemS = string:substr(S, Len, 1),\n    Result = compare2(ItemS, Alphabet, 13, 0),\n    compare(S, Len-1, Alphabet, Count+Result).\n\nprinter_error(S) ->\n    Alphabet = \"abcdefghijklm\",\n    Len = length(S),\n    string:concat(integer_to_list(Len - compare(S, Len, Alphabet, 0)), string:concat(\"\/\", integer_to_list(Len))).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80793,"user_id":492,"body":"-module(kata).\n-export([printer_error\/1]).\n\n-spec printer_error(string) -> string.\n\nprinter_error(S) ->\n\tR = re:replace(S, \"[n-z]\", \"\", [global, {return, list}]),\n\tinteger_to_list(length(S) - length(R)) ++ \"\/\" ++ integer_to_list(length(S)).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5656b6906de340bd1b0000ac":[{"id":80794,"user_id":492,"body":"-module(kata).\n-export([longest\/2]).\n\n-spec longest(string, string) -> string.\n\nlongest(L, M) ->\n\tlists:usort(L ++ M).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80795,"user_id":1883,"body":"-module(kata).\n-export([longest\/2]).\n\n\n-spec longest(string, string) -> string.\n\nlongest(L, M) -> \n  lists:sort(sets:to_list(sets:from_list(L ++ M))).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"565abd876ed46506d600000d":[{"id":80796,"user_id":53,"body":"-module(kata).\n-export([simpson\/1]).\n\n-spec simpson(integer()) -> float().\n\nsimpson(N) ->\n    (math:pi()\/N)*(1+2*math:pow(math:cos((math:pi()\/N)),3)+3*math:cos(2*(math:pi()\/N)))\/(math:sin(3*(math:pi()\/N))).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80797,"user_id":492,"body":"-module(kata).\n-export([simpson\/1]).\n\n-spec simpson(integer()) -> float().\n\nf(X) -> 1.5 * math:pow(math:sin(X), 3).\nsimpson(N) ->\n    H = math:pi() \/ N,\n    S1 = lists:foldl(\n            fun(I, S) -> S + f((2 * I - 1) * H) end,\n            0,\n            lists:seq(1, N div 2)\n        ),\n    S2 = lists:foldl(\n            fun(I, S) -> S + f(2 * I * H) end,\n            0,\n            lists:seq(1, (N div 2) - 1)\n        ),\n    math:pi() \/ (3 * N) * (f(0) + f(math:pi()) + 4 * S1 + 2 * S2).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"565c0fa6e3a7d39dee000125":[{"id":80798,"user_id":492,"body":"-module(kata).\n-export([dist\/2, speed\/2]).\n\n-spec dist(float(), float()) -> float.\n-spec speed(float(), float()) -> float.\n\ndist(V, Mu) ->\n    % acceleration due to gravity in m\/s\n    G = 9.81,             \n    % km\/h -> m\/s\n    Coef = 1000 \/ 3600.0,      \n    % distance of reaction with t = 1\n    Dreact = V * Coef,         \n    % speed in m\/s\n    Vms = Coef * V,           \n    % braking distance\n    Dbrak = 0.5 * math:pow(Vms, 2) \/ Mu \/ G,\n    Dreact + Dbrak.          \n\n% suppose reaction time is 1\nspeed(D, Mu) ->\n    % acceleration due to gravity in m\/s\n    G = 9.81,            \n    % m\/s -> km\/h\n    Coef = 3600 \/ 1000.0,      \n    0.5 * Mu * G * (- 2 + math:sqrt(4 + 8*D\/Mu\/G)) * Coef.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5663f5305102699bad000056":[{"id":80799,"user_id":null,"body":"-module(kata).\n-export([mxdiflg\/2]).\n\n-spec mxdiflg([string], [string]) -> integer.\n\nlongitudes([]) -> [];\nlongitudes([H|T]) -> longitudes(T) ++ [length(H)].\n\ndifference2(A1, A2) -> \n    L1 = longitudes(A1),\n    L2 = longitudes(A2),\n    Max1 = lists:max(L1),\n    Min1 = lists:min(L1),\n    Max2 = lists:max(L2),\n    Min2 = lists:min(L2),\n    D1 = abs(Max1-Min2),\n    D2 = abs(Max2-Min1),\n    max(D1, D2).\n\nmxdiflg(A1, A2) ->\n    Len1 = length(A1),\n    Len2 = length(A2),\n    if\n      Len1 == 0 -> -1;\n      Len2 == 0 -> -1;\n      true -> difference2(A1, A2)\n    end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80800,"user_id":492,"body":"-module(kata).\n-export([mxdiflg\/2]).\n\n-spec mxdiflg([string], [string]) -> integer.\n\nmxdiflg([], _) -> -1;\nmxdiflg(_, []) -> -1;\nmxdiflg(A1, A2) ->\n    L1 = lists:map(fun(X) -> length(X) end, A1),\n    L2 = lists:map(fun(X) -> length(X) end, A2),\n    max(abs((lists:max(L1)) - (lists:min(L2))), abs((lists:max(L2)) - (lists:min(L1)))).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"566543703c72200f0b0000c9":[{"id":80801,"user_id":null,"body":"-module(kata).\n-export([epidemic\/6]).\n\n-spec epidemic(integer(), integer(), integer(), integer(), float(), float()) -> integer().\n\nepidemic2(Dt, N, S0, I0, R0, B, A, Answer, Counter) ->\n    if Counter == N -> Answer;\n       true -> \n           S = S0 - Dt*B*S0*I0,\n\t   I = I0 + Dt*(B*S0*I0 - A*I0),\n\t   R = R0 + Dt*I0*A,\n\t   epidemic2(Dt, N, S, I, R, B, A, max(Answer, I), Counter+1)\n    end.\n\nepidemic(Tm, N, S0, I0, B, A) ->\n    Dt = Tm\/N,\n    floor(epidemic2(Dt, N, S0, I0, 0, B, A, I0, 0)).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80802,"user_id":53,"body":"-module(kata).\n-export([epidemic\/6]).\n\n-spec epidemic(integer(), integer(), integer(), integer(), float(), float()) -> integer().\n\nds(A, B, I, S, DT) -> DT * (-B * S * I).\ndi(A, B, I, S, DT) -> DT * (B * S * I - A * I).\ndr(A, B, I, S, DT) -> DT * (A * I).\n\ngo(Tm, N, S, I, B, A, DT, R, T, IM) when T >= Tm -> IM;\ngo(Tm, N, S, I, B, A, DT, R, T, IM) ->\n  SD = ds(A, B, I, S, DT),\n  ID = di(A, B, I, S, DT),\n  RD = dr(A, B, I, S, DT),\n  go(Tm, N, S + SD, I + ID, B, A, DT, R + RD, T + DT, max(IM, trunc(I))).\n\nepidemic(Tm, N, S0, I0, B, A) ->\n\tgo(Tm, N, S0, I0, B, A, Tm \/ N, 0, 0, 0).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80803,"user_id":492,"body":"-module(kata).\n-export([epidemic\/6]).\n\n-spec epidemic(integer(), integer(), integer(), integer(), float(), float()) -> integer().\n\naux(Tm, _S, _I, _R, T, _B, _A, _Dt, Imax) when (T >= Tm) -> trunc(Imax);\naux(Tm, S, I, R, T, B, A, Dt, Imax) ->\n\tSd = Dt*(-B*S*I),\n    Id = Dt*(B*S*I-A*I),\n    Rd = Dt*(A*I),\n    S1 = S+Sd,\n    I1 = I+Id,\n    R1 = R+Rd,\n    T1 = T+Dt,\n    Imax1 = max(Imax, I),\n    aux(Tm, S1, I1, R1, T1, B, A, Dt, Imax1).\nepidemic(Tm, N, S0, I0, B, A) ->\n\taux(Tm, S0, I0, 0.0, 0.0, B, A, Tm\/N, 0.0).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5667e8f4e3f572a8f2000039":[{"id":80804,"user_id":null,"body":"-module(kata).\n-export([accum\/1]).\n\n-spec accum(string) -> string.\n\n-define(CHAR_DIFF, ($a - $A)).\n\naccum(S) ->\n  RepeatChars = lists:zip(S, lists:seq(0, length(S)-1)),\n\tlists:flatten(\n    lists:join(\"-\", \n      lists:map(fun ({C, N}) ->\n                  case C < $a of\n                    true  -> [C | lists:duplicate(N, C + ?CHAR_DIFF)];\n                    false -> [C - ?CHAR_DIFF | lists:duplicate(N, C)]\n                  end\n                end, RepeatChars))).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80805,"user_id":null,"body":"-module(kata).\n-export([accum\/1]).\n\n-spec accum(string) -> string.\n\nletters(_, Number, Counter, Answer) when Counter == Number+1 -> Answer ++ \"-\";\nletters(Letter, Number, Counter, Answer) ->\n    if Counter == 1 -> letters(Letter, Number, Counter+1, Answer ++ string:uppercase(Letter));\n       true -> letters(Letter, Number, Counter+1, Answer ++ string:lowercase(Letter))\n    end.\n\naccum(_, 0, Answer) -> \n    LenAns = length(Answer),\n    string:substr(Answer, 1, LenAns-1);\naccum(S, Number, Answer) ->\n    Letter = string:substr(S, Number, 1),\n    accum(S, Number-1, letters(Letter, Number, 1, \"\") ++ Answer).\n\naccum(S) ->\n    Len = length(S),\n    accum(S, Len, \"\").\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80806,"user_id":492,"body":"-module(kata).\n-export([accum\/1]).\n\n-spec accum(string) -> string.\n\nreplicat({Ch, 0}) -> string:uppercase(Ch);\nreplicat({Ch, Ndx}) -> \n\tH = lists:duplicate(Ndx, string:lowercase(Ch)),\n\tstring:uppercase(Ch) ++ lists:flatten(io_lib:format(\"~s\", [H])).\naccum(S) ->\n\tM=lists:zip([[X] || X <- S], lists:seq(0, length(S) -1)),\n\tR=lists:map(fun({Ch, Ndx}) -> replicat({Ch, Ndx}) end, M),\n\tstring:join(R, \"-\").","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"566be96bb3174e155300001b":[{"id":80807,"user_id":null,"body":"-module(kata).\n-export([maxBall\/1]).\n\n-spec maxBall(integer()) -> integer().\n\nmaxBall(V0) -> eval(V0, 0, 0).\n\neval(V, Time, Last_height) ->\n    V1 = V * 1000 \/ 3600,\n    Curr_time = Time + 0.1,\n    Curr_height = V1 * Curr_time - 0.5 * 9.81 * Curr_time * Curr_time,\n    case Curr_height < Last_height of\n        true -> round(Time * 10);\n        false -> eval(V, Curr_time, Curr_height)\n    end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80808,"user_id":53,"body":"-module(kata).\n-export([maxBall\/1]).\n\n-spec maxBall(integer()) -> integer().\n\nmaxBall(V0) -> round( V0 \/ 3.5316 ).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80809,"user_id":527,"body":"-module(kata).\n-export([maxBall\/1]).\n\n-spec maxBall(non_neg_integer()) -> non_neg_integer().\n\nmaxBall(V0) -> round(V0 \/ 3.5316).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80810,"user_id":492,"body":"-module(kata).\n-export([maxBall\/1]).\n\n-spec maxBall(integer()) -> integer().\n\nmaxBall(V0) -> round(V0 \/ 3.5316). % 0.981 * 3.6","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"566fc12495810954b1000030":[{"id":80811,"user_id":null,"body":"-module(kata).\n-export([nbdig\/2]).\n\n-spec nbdig(integer(), integer()) -> integer.\n\ncounter(0, _, C) -> C;\ncounter(K, D, C) -> \n    Number = K rem 10,\n    if Number == D -> counter(K div 10, D, C+1);\n       true -> counter(K div 10, D, C)\n    end.\n\nnbdig(-1, _, Count) -> Count;\nnbdig(N, D, Count) -> nbdig(N-1, D, Count + counter(N*N, D, 0)).\n\nnbdig(N, 0) -> 1 + nbdig(N, 0, 0);\nnbdig(N, D) -> nbdig(N, D, 0).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80812,"user_id":492,"body":"-module(kata).\n-export([nbdig\/2]).\n\n-spec nbdig(integer(), integer()) -> integer.\n\ndigitize(N) when N < 10 -> [N];\ndigitize(N) -> digitize(N div 10)++[N rem 10].\nnbdig(N, D) ->\n\tL = lists:flatmap(fun(X) -> lists:filter(fun(Y) -> Y == D end, digitize(X * X)) end, lists:seq(0, N)),\n\tlength(L).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5672682212c8ecf83e000050":[{"id":80813,"user_id":null,"body":"-module(kata).\n-export([dbl_linear\/1]).\n\n-spec(dbl_linear(integer()) -> integer()).\n\ndbl_linear(N) ->\n  dbl(array:set(0, 1, array:new(N + 1)), N, 0, 0).\n\ndbl(A, N, _I, _J) when N == 0 -> array:get(array:size(A) - 1, A);\ndbl(A, N, I, J) ->\n  Y = 2 * array:get(I, A) + 1,\n  Z = 3 * array:get(J, A) + 1,\n  if\n    Y < Z -> dbl(array:set(array:size(A) - N, Y, A), N - 1, I + 1, J);\n    Y > Z -> dbl(array:set(array:size(A) - N, Z, A), N - 1, I, J + 1);\n    true -> dbl(array:set(array:size(A) - N, Z, A), N - 1, I + 1, J + 1)\n  end.\n\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80814,"user_id":492,"body":"-module(kata).\n-export([dbl_linear\/1]).\n\n-spec(dbl_linear(integer()) -> integer()).\n\ndbl_linear1(N, CNT, H, _, _) when CNT >= N -> H;\ndbl_linear1(N, CNT, H, Q0, Q1) ->\n    Q2 = queue:in(2 * H + 1, Q0),\n    Q3 = queue:in(3 * H + 1, Q1),\n    A = queue:get(Q2),\n    B = queue:get(Q3),\n    HH = min(A, B),\n    {_U, Q4} = \n    if \n    (HH == A) ->\n    \tqueue:out(Q2);\n    true ->\n    \t{A, Q2}\n    end,\n    {_V, Q5} = \n    if \n    (HH == B) -> \n    \tqueue:out(Q3);\n    true ->\n    \t{B, Q3}\n    end,\n    dbl_linear1(N, CNT + 1, HH, Q4, Q5).\ndbl_linear(N) -> dbl_linear1(N, 0, 1, queue:new(), queue:new()).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56747fd5cb988479af000028":[{"id":80815,"user_id":null,"body":"-module(solution).\n-export([middle\/1]).\n\nmiddle([_] = S) ->\n  S;\nmiddle([_,_] = S) -> \n  S;\nmiddle([_|S]) ->\n  middle(lists:droplast(S)).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80816,"user_id":null,"body":"-module(solution).\n-export([middle\/1]).\n\nmiddle(Str) -> string:centre(Str, 2 - string:length(Str) rem 2).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80817,"user_id":null,"body":"-module(solution).\n-export([middle\/1]).\n\nmiddle(String) ->\n    IsEvenLength = string:length(String) rem 2 =:= 0,\n    if \n        IsEvenLength =:= true -> string:centre(String,2);\n        IsEvenLength =:= false -> string:centre(String,1)\n    end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80818,"user_id":null,"body":"-module(solution).\n-export([middle\/1]).\n\nmiddle(String) ->\n    Length = string:length(String),\n    case (Length rem 2) of\n      1 -> index(round((Length - 1) \/ 2) , String);\n      0 -> index(round(Length \/ 2) - 1, String) ++ index(round(Length \/ 2), String)\n    end.\n\n\nindex(_, []) -> [];\nindex(0,  [X|_]) -> [X];\nindex(N, [_|Xs]) when N > 0 -> index(N-1, Xs).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80819,"user_id":null,"body":"-module(solution).\n-import(string, [sub_string\/3]).\n-export([middle\/1]).\n\nmiddle(String) ->\n    Length = length(String),\n    Halft = Length \/ 2,\n    if \n      Length rem 2 == 0 ->\n        sub_string(String, round(Halft), round(Halft + 1));\n      Length rem 2 == 1 ->\n        sub_string(String, round(Halft + 0.5), round(Halft + 0.5))\n    end.\n      \n        \n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80820,"user_id":null,"body":"-module(solution).\n-export([middle\/1]).\n\nmiddle(String) ->\n    Len = string:length(String),\n    Division = Len div 2,\n    \n    if\n      (Len rem 2) == 0 ->\n        string:slice(String, Division - 1, 2);\n    true ->\n         string:slice(String, Division, 1)\n    end.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80821,"user_id":null,"body":"-module(solution).\n-export([middle\/1]).\n\nmiddle(String) ->\n    middle(String, String).\n\nmiddle([_Fast1], [SlowHead|_SlowTail]) ->\n    [SlowHead];\nmiddle([_Fast1,_Fast2], [SlowHead1,SlowHead2|_SlowTail]) ->\n    [SlowHead1,SlowHead2];\nmiddle([_,_|FastTail], [_|SlowTail]) ->\n    middle(FastTail,SlowTail).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80822,"user_id":null,"body":"-module(solution).\n-export([middle\/1]).\n\nmiddle(String) ->\n    Length = string:length(String),\n    Middle = Length div 2,\n    Even = Length rem 2 == 0,\n    if Even -> string:slice(String, Middle-1, 2);\n       true -> string:slice(String, Middle, 1)\n    end.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80823,"user_id":null,"body":"-module(solution).\n-export([middle\/1]).\n\nmiddle([_]=A) -> A;\nmiddle([_,_]=A) -> A;\nmiddle([_|T]) ->\n    middle(lists:droplast(T)).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80824,"user_id":null,"body":"-module(solution).\n-export([middle\/1]).\n\nmiddle(S) ->\n    N = string:length(S),\n    string:slice(S, (N-1) div 2, 2-N rem 2).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"567501aec64b81e252000003":[{"id":80825,"user_id":53,"body":"-module(kata).\n-export([wallPaper\/3]).\n\n-spec wallPaper(float(), float(), float()) -> string.\n\nwallPaper(L, W, H) when L * W * H == 0 -> \"zero\";\n\nwallPaper(L, W, H) ->\n  NS = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"],\n  lists:nth(1 + ceil(H * (W + L) * 2.3 \/ 5.2), NS).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80826,"user_id":492,"body":"-module(kata).\n-export([wallPaper\/3]).\n\n-spec wallPaper(float(), float(), float()) -> string.\n\nwallPaper(L, W, H) when H * L * W == 0.0 -> \"zero\";\nwallPaper(L, W, H) ->\n\tT = [\"zero\", \"one\", \"two\", \"three\", \"four\",\n         \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\",\n         \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\",\n         \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"],\n\tlists:nth(ceil(2 * 1.15 * H * (L + W) \/ 5.2) + 1, T).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"569218bc919ccba77000000b":[{"id":80827,"user_id":null,"body":"-module(kata).\n-export([dateNbDays\/3]).\n\n-spec dateNbDays(float(), float(), float()) -> string.\n\nformat(Number) ->\n    if Number < 10 -> \"0\" ++ integer_to_list(Number);\n       true -> integer_to_list(Number)\n    end.\n\ndateNbDays(A0, A, P, Days) ->\n    if A0 >= A -> \n\t{Year, Month, Day} = calendar:gregorian_days_to_date(736329+Days),\n\tinteger_to_list(Year) ++ \"-\" ++ format(Month) ++ \"-\" ++ format(Day);\n       true -> NewA0 = A0*(1+P\/36000),\n               dateNbDays(NewA0, A, P, Days+1)\n    end.\n\ndateNbDays(A0, A, P) ->\n    dateNbDays(A0, A, P, 0).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80828,"user_id":492,"body":"-module(kata).\n-export([dateNbDays\/3]).\n\n-spec dateNbDays(float(), float(), float()) -> string.\n\ndateNbDays(A0, A, P) ->\n\tDays = ceil(math:log(A \/ A0) \/ math:log(1 + P \/ 36000.0)), \n\t{Ye,Mo,Da} = calendar:gregorian_days_to_date(calendar:date_to_gregorian_days({2016, 1, 1}) + Days),\n\tlists:flatten(io_lib:format(\"~B-~2.10.0B-~2.10.0B\", [Ye,Mo,Da])).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"569b5cec755dd3534d00000f":[{"id":80829,"user_id":492,"body":"-module(kata).\n-export([newAvg\/2]).\n\n-spec newAvg([float], float()) -> integer.\n\n% return -1 is expectation is too low\nnewAvg(Ls, Newavg) ->\n\tS = lists:foldl(fun(X, Acc) -> X + Acc end, 0.0, Ls),\n    Result = ceil(Newavg * (1.0 + length(Ls)) - S),\n    if (Result > 0) -> \n    \tResult;\n     true  -> -1\n    end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56a32dd6e4f4748cc3000006":[{"id":80830,"user_id":492,"body":"-module(kata).\n-export([mean\/2, variance\/2]).\n\n-spec mean([string], string) -> float.\n-spec variance([string], string) -> float.\n\naux(L, _Town, R) when (L == []) or (R \/= []) -> R;\naux([H | T], Town, _R) ->\n\tB = re:split(H, \":\",[{return,list}]),\n\tif (hd(B) == Town) ->\n\t\taux([], Town, tl(B));\n\ttrue ->\n\t\taux(T, Town, [])\n\tend.\nmeanVar(Dta, Town) ->\n\tBlocks = re:split(Dta, \"\n\", [{return,list}]),\n\tR = aux(Blocks, Town, []),\n\tif (R == []) ->\n\t\t{-1.0, -1.0};\n\ttrue ->\n\t\tQ = re:split(R, \",\", [{return,list}]),\n\t\tL = lists:map(fun(X) -> list_to_float(lists:nth(2, re:split(X, \" \", [{return,list}]))) end, Q),\n\t\tS = lists:foldl(fun(X, Acc) -> X + Acc end, 0, L),\n\t\tSsq = lists:foldl(fun(X, Acc) -> X * X + Acc end, 0, L),\n\t\tM = S \/ 12,\n\t\tV = Ssq \/ 12.0 - M * M,\n\t\t{M, V}\n\tend.\n\nmean(Dta, Town) -> element(1, meanVar(Dta, Town)).\nvariance(Dta, Town) -> element(2, meanVar(Dta, Town)).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56a5d994ac971f1ac500003e":[{"id":80831,"user_id":null,"body":"-module(kata).\n-export([longest_consec\/2]).\n\n-spec concat([string], integer, [string]) -> [string].\n     \nconcat([], _, Res) -> Res;\nconcat(Ls, K, Res) ->\n  % NOTE: Can take fewer than K elements but these \n  %       will naturally be shorter than result.\n  Concat = lists:flatten(lists:sublist(Ls, K)),\n  concat(tl(Ls), K, [Concat | Res]).\n\n-spec longest_consec([string], integer) -> string.\n\nlongest_consec(Ls, K) when K =< 0; K > length(Ls); length(Ls) =:= 0 -> \"nothing\";\nlongest_consec(Ls, K) ->\n  Candidates = concat(Ls, K, []),\n  CandLen = lists:map(fun (S) -> {length(S), S} end, Candidates),\n  {_, Res} = lists:foldl(\n    fun (C1 = {L1, _}, C2 = {L2, _}) ->\n      case L1 >= L2 of\n        true  -> C1;\n        false -> C2\n      end\n    end, {0, []}, CandLen),\n  Res.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80832,"user_id":492,"body":"-module(kata).\n-export([longest_consec\/2]).\n\n-spec longest_consec([string], integer) -> string.\n\nchunks(K, Ls) when (length(Ls) > K) ->\n\t[lists:sublist(Ls, 1, K)] ++ chunks(K, lists:sublist(Ls, 2, length(Ls)));\nchunks(_K, Ls) -> [Ls].\n\nmaxL([], {Mx, Sm}) -> {Mx, Sm};\nmaxL([H | T], {Mx, Sm}) ->\n\t{C, S} = H,\n\tif (C > Mx) ->\n\t\tmaxL(T, {C, S});\n\ttrue ->\n\t\tmaxL(T, {Mx, Sm})\n\tend.\n\nlongest_consec(Ls, K) ->\n\tLg = length(Ls),\n\tif (Lg == 0) or (K > Lg) or (K =< 0) ->\n        \"nothing\";\n    true ->\n\t\tL = chunks(K, Ls),\n\t\tM = lists:map(fun(X) -> string:join(X, \"\") end, L),\n\t\tN = lists:map(fun(X) -> {length(X), X} end, M),\n\t\telement(2, maxL(N, {-1, \"\"}))\n\tend.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56bdd0aec5dc03d7780010a5":[{"id":80833,"user_id":645,"body":"-module(kata).\n-export([next_higher\/1]).\n\nnext_higher(N) ->\n  O = N band -N,\n  V = N + O,\n  P = ((N bxor V) div O) bsr 2,\n  V bor P.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80834,"user_id":null,"body":"-module(kata).\n-export([next_higher\/1]).\n\n-define(ZeroBit, 48).\n-define(OneBit, 49).\n\nnext_higher(0) ->  1;\nnext_higher(Number) ->\n  List = integer_to_list(Number, 2),\n  {BeginZeros, Rest} = lists:splitwith(fun(Num) -> [Num] == \"0\" end, lists:reverse(\"0\" ++ List)),\n  {BeginOnes, End} = lists:splitwith(fun(Num) -> [Num] == \"1\" end, Rest),\n \n  NewList = lists:reverse(tl(BeginOnes) ++ BeginZeros ++ \"01\" ++ tl(End)),\n \n  list_to_integer(NewList, 2).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80835,"user_id":564,"body":"-module(kata).\n-export([next_higher\/1]).\n\npopcount(N) ->\n  popcount(N, 0).\n\npopcount(0, Acc) -> Acc;\npopcount(N, Acc) ->\n  popcount(N div 2, Acc + (N rem 2)).\n\nnext_higher(N) ->\n  next_with_popcount(N + 1, popcount(N)).\n\nnext_with_popcount(N, Popcount) ->\n  case popcount(N) == Popcount of\n    true -> N;\n    false -> next_with_popcount(N + 1, Popcount)\n  end.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80836,"user_id":53,"body":"-module(kata).\n-export([next_higher\/1]).\n\nnext_higher(N) ->\n  if\n  N == 0 ->\n    0;\n  true ->\n    R = N band -N,\n    P = N + R,\n    Q = (N bxor P) div (4 * R),\n    P bor Q\n  end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80837,"user_id":null,"body":"-module(kata).\n-export([next_higher\/1]).\n\nnext_higher(N) -> \n  A=convert(N),\n  B=index_of(1,convert(N)),\n  C=round(math:pow(2,B)),\n  D=N+C,\n  E=N bxor D,\n  F=round(E\/C),\n  G=F bsr 2,\n  H=D bor G,\n  io:fwrite(\"~w~n\",[A]),\n  io:fwrite(\"~w~n\",[B]),\n  io:fwrite(\"~w~n\",[C]),\n  io:fwrite(\"~w~n\",[D]),\n  io:fwrite(\"~w~n\",[E]),\n  io:fwrite(\"~w~n\",[F]),\n  io:fwrite(\"~w~n\",[G]),\n  io:fwrite(\"~w~n\",[H]),\n  H.\n\nconvert(0) -> [0];\nconvert(N) ->\n    lists:reverse(lists:dropwhile(fun(D) -> D =:= 0 end, [X || <<X:1>> <= <<N:64>>])).\n\nindex_of(Item, List) -> index_of(Item, List, 0).\n\nindex_of(_, [], _)  -> not_found;\nindex_of(Item, [Item|_], Index) -> Index;\nindex_of(Item, [_|Tl], Index) -> index_of(Item, Tl, Index+1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80838,"user_id":null,"body":"-module(kata).\n-export([next_higher\/1]).\n\nnext_higher(0) -> 1;\nnext_higher(N) -> \n\tnext_higher(N, N+1).\n\nnext_higher(N, M) ->\n\tCountN = count_ones(num_to_binary(N)),\n\tCountM = count_ones(num_to_binary(M)),\n\tif\n\t\tCountN =:= CountM -> M;\n\t\ttrue -> next_higher(N, M+1)\n\tend.\n\t\t\n\ncount_ones([]) -> 0;\ncount_ones(List) -> \n\t[Head | Tail] = List,\n\tHead + count_ones(Tail).\n\nnum_to_binary(N) ->\n\tlists:flatten(num_to_binary(N, [])).\n\t\nnum_to_binary(0, List) -> [List];\nnum_to_binary(N, List) -> \n\tDigit = N rem 2,\n\tNext = N div 2,\n\tUpdatedList = [Digit | List],\n\tnum_to_binary(Next, UpdatedList).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80839,"user_id":null,"body":"-module(kata).\n-export([next_higher\/1]).\n\nnext_higher(N) ->\n  Length = length(lists:filter(fun(Elem) -> Elem == 49 end, integer_to_list(N, 2))),\n  next_higher(Length, N).\n\nnext_higher(Length, N) ->\n  Num = N + 1,\n  Count = length(lists:filter(fun(Elem) -> Elem == 49 end, integer_to_list(Num, 2))),\n  if\n    Length == Count -> Num;\n    true -> next_higher(Length, Num)\n  end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80840,"user_id":null,"body":"-module(kata).\n-export([next_higher\/1]).\n\nnext_higher(N) ->\n  LBN = N band -N,\n  H = N + LBN,\n  LBH = H band -H,\n  L = N bxor H bxor LBH bxor (LBH bsr 1),\n  LBL = L band -L,\n  L1 = if LBL == 0 -> 0; true -> L div LBL end,\n  H bxor L1.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80841,"user_id":null,"body":"-module(kata).\n-export([next_higher\/1]).\n\nnext_higher(N) -> \n  next_higher(N + 1, one_bits(N)).\n\nnext_higher(N, Bits) ->\n  case Bits == one_bits(N) of\n    true -> N;\n    false -> next_higher(N + 1, Bits)\n  end.\n\none_bits(N) ->\n  one_bits(N, 0).\n\none_bits(0, Acc) -> Acc;\none_bits(N, Acc) ->\n  case N rem 2 of\n    1 -> one_bits(N div 2, Acc + 1);\n    0 -> one_bits(N div 2, Acc)\n  end.\n\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80842,"user_id":null,"body":"-module(kata).\n-export([next_higher\/1]).\n\ncount_ones(0,Res) -> Res;\ncount_ones(M,Res) when (M rem 2) == 1 -> count_ones((M div 2), (Res+1));\ncount_ones(M,Res) when (M rem 2) == 0 -> count_ones((M div 2), Res).\ncount_ones(N) -> count_ones(N,0).\n\nnext_higher(X,Ones) ->\n\tcase count_ones(X) of\n\t\tOnes -> X;\n\t\t_ -> next_higher(X+1,Ones)\n\tend.\n\nnext_higher(N) -> next_higher(N+1,count_ones(N)).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56c04261c3fcf33f2d000534":[{"id":80843,"user_id":53,"body":"-module(kata).\n-export([doubles\/2]).\n\n-spec doubles(integer(), integer()) -> float().\n\nloop(Maxk, _, K, M, _, Q, 1) when (K > Maxk) or (Q > 1.0e128) -> M;\nloop(Maxk, Maxn, K, M, _, Q, 1) -> loop(Maxk, Maxn, K, M, 1, Q, 2);\nloop(Maxk, Maxn, K, M, N, Q, 2) when N > Maxn -> loop(Maxk, Maxn, K + 1, M, 0, Q, 1);\nloop(Maxk, Maxn, K, M, N, Q, S) -> \n  O = K * (math:pow(N + 1, 2 * K)),\n  if\n  (O > 1.0e16) ->\n    loop(Maxk, Maxn, K + 1, M, 0, O, 1);\n  true ->\n    P = 1.0 \/ O,\n    loop(Maxk, Maxn, K, M + P, N + 1, O, S)\n  end.\n\ndoubles(Maxk, Maxn) -> loop(Maxk, Maxn, 1, 0.0, 0, 1.0, 1).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80844,"user_id":492,"body":"-module(kata).\n-export([doubles\/2]).\n\n-spec doubles(integer(), integer()) -> float().\n\naux(K, _, Maxk, Tmp, Res) when (K > Maxk) or (Tmp > 1.0e16) -> Res;\naux(K, N, Maxk, Tmp, Res) ->\n    Base = N + 1.0, \n    Tmp1 = Tmp * Base * Base,\n    aux(K + 1, N, Maxk, Tmp1, Res + (1 \/ (Tmp1 * K))).\nv(K, N, Maxk) -> aux(K, N, Maxk, 1.0, 0.0).\n\ndoubles(Maxk, Maxn) ->\n    lists:foldl(\n        fun(X, S) -> S + v(1, X, Maxk) end,\n        0.0,\n        lists:seq(1, Maxn)\n    ).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56c5847f27be2c3db20009c3":[{"id":80845,"user_id":645,"body":"-module(kata).\n-export([subtract_sum\/1]).\n\nsubtract_sum(_) -> \"apple\".","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80846,"user_id":null,"body":"-module(kata).\n-export([subtract_sum\/1]).\n-define('U_R_A$$', [kiwi, pear, kiwi, banana, melon, banana, melon, pineapple, apple, pineapple, cucumber, pineapple, cucumber, orange, grape, orange, grape, apple, grape, cherry, pear, cherry, pear, kiwi, banana, kiwi, apple, melon, banana, melon, pineapple, melon, pineapple, cucumber, orange, apple, orange, grape, orange, grape, cherry, pear, cherry, pear, apple, pear, kiwi, banana, kiwi, banana, melon, pineapple, melon, apple, cucumber, pineapple, cucumber, orange, cucumber, orange, grape, cherry, apple, cherry, pear, cherry, pear, kiwi, pear, kiwi, banana, apple, banana, melon, pineapple, melon, pineapple, cucumber, pineapple, cucumber, apple, grape, orange, grape, cherry, grape, cherry, pear, cherry, apple, kiwi, banana, kiwi, banana, melon, banana, melon, pineapple, apple, pineapple]).\n-define(MAGIC_NUMBER, length(?'U_R_A$$') + 1).\n\nsubtract_sum(N) ->\n  Sum = 'sum_digits(easy_part)'(N),\n  New = N - Sum,\n  if\n    New < ?MAGIC_NUMBER ->\n      get_freaking_fruit(New);\n    true ->\n      subtract_sum(New)\n  end.\n\n'sum_digits(easy_part)'(N) ->\n  L = integer_to_list(N),\n  lists:foldl(fun(Num, Acc) -> Acc + list_to_integer([Num]) end, 0, L).\n\nget_freaking_fruit(N) ->\n  This_kata_is_not_8_kyu = ?'U_R_A$$',\n  atom_to_list(lists:nth(N, This_kata_is_not_8_kyu)).\n  \n  ","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80847,"user_id":null,"body":"-module(kata).\n-export([subtract_sum\/1]).\n\nsum_digits(N) -> lists:foldl(fun(M, S) -> S+M-$0 end, 0, integer_to_list(N)).\n\nsubtract_sum_aux(1) -> \"kiwi\";\nsubtract_sum_aux(2) -> \"pear\";\nsubtract_sum_aux(3) -> \"kiwi\";\nsubtract_sum_aux(4) -> \"banana\";\nsubtract_sum_aux(5) -> \"melon\";\nsubtract_sum_aux(6) -> \"banana\";\nsubtract_sum_aux(7) -> \"melon\";\nsubtract_sum_aux(8) -> \"pineapple\";\nsubtract_sum_aux(9) -> \"apple\";\nsubtract_sum_aux(10) -> \"pineapple\";\nsubtract_sum_aux(11) -> \"cucumber\";\nsubtract_sum_aux(12) -> \"pineapple\";\nsubtract_sum_aux(13) -> \"cucumber\";\nsubtract_sum_aux(14) -> \"orange\";\nsubtract_sum_aux(15) -> \"grape\";\nsubtract_sum_aux(16) -> \"orange\";\nsubtract_sum_aux(17) -> \"grape\";\nsubtract_sum_aux(18) -> \"apple\";\nsubtract_sum_aux(19) -> \"grape\";\nsubtract_sum_aux(20) -> \"cherry\";\nsubtract_sum_aux(21) -> \"pear\";\nsubtract_sum_aux(22) -> \"cherry\";\nsubtract_sum_aux(23) -> \"pear\";\nsubtract_sum_aux(24) -> \"kiwi\";\nsubtract_sum_aux(25) -> \"banana\";\nsubtract_sum_aux(26) -> \"kiwi\";\nsubtract_sum_aux(27) -> \"apple\";\nsubtract_sum_aux(28) -> \"melon\";\nsubtract_sum_aux(29) -> \"banana\";\nsubtract_sum_aux(30) -> \"melon\";\nsubtract_sum_aux(31) -> \"pineapple\";\nsubtract_sum_aux(32) -> \"melon\";\nsubtract_sum_aux(33) -> \"pineapple\";\nsubtract_sum_aux(34) -> \"cucumber\";\nsubtract_sum_aux(35) -> \"orange\";\nsubtract_sum_aux(36) -> \"apple\";\nsubtract_sum_aux(37) -> \"orange\";\nsubtract_sum_aux(38) -> \"grape\";\nsubtract_sum_aux(39) -> \"orange\";\nsubtract_sum_aux(40) -> \"grape\";\nsubtract_sum_aux(41) -> \"cherry\";\nsubtract_sum_aux(42) -> \"pear\";\nsubtract_sum_aux(43) -> \"cherry\";\nsubtract_sum_aux(44) -> \"pear\";\nsubtract_sum_aux(45) -> \"apple\";\nsubtract_sum_aux(46) -> \"pear\";\nsubtract_sum_aux(47) -> \"kiwi\";\nsubtract_sum_aux(48) -> \"banana\";\nsubtract_sum_aux(49) -> \"kiwi\";\nsubtract_sum_aux(50) -> \"banana\";\nsubtract_sum_aux(51) -> \"melon\";\nsubtract_sum_aux(52) -> \"pineapple\";\nsubtract_sum_aux(53) -> \"melon\";\nsubtract_sum_aux(54) -> \"apple\";\nsubtract_sum_aux(55) -> \"cucumber\";\nsubtract_sum_aux(56) -> \"pineapple\";\nsubtract_sum_aux(57) -> \"cucumber\";\nsubtract_sum_aux(58) -> \"orange\";\nsubtract_sum_aux(59) -> \"cucumber\";\nsubtract_sum_aux(60) -> \"orange\";\nsubtract_sum_aux(61) -> \"grape\";\nsubtract_sum_aux(62) -> \"cherry\";\nsubtract_sum_aux(63) -> \"apple\";\nsubtract_sum_aux(64) -> \"cherry\";\nsubtract_sum_aux(65) -> \"pear\";\nsubtract_sum_aux(66) -> \"cherry\";\nsubtract_sum_aux(67) -> \"pear\";\nsubtract_sum_aux(68) -> \"kiwi\";\nsubtract_sum_aux(69) -> \"pear\";\nsubtract_sum_aux(70) -> \"kiwi\";\nsubtract_sum_aux(71) -> \"banana\";\nsubtract_sum_aux(72) -> \"apple\";\nsubtract_sum_aux(73) -> \"banana\";\nsubtract_sum_aux(74) -> \"melon\";\nsubtract_sum_aux(75) -> \"pineapple\";\nsubtract_sum_aux(76) -> \"melon\";\nsubtract_sum_aux(77) -> \"pineapple\";\nsubtract_sum_aux(78) -> \"cucumber\";\nsubtract_sum_aux(79) -> \"pineapple\";\nsubtract_sum_aux(80) -> \"cucumber\";\nsubtract_sum_aux(81) -> \"apple\";\nsubtract_sum_aux(82) -> \"grape\";\nsubtract_sum_aux(83) -> \"orange\";\nsubtract_sum_aux(84) -> \"grape\";\nsubtract_sum_aux(85) -> \"cherry\";\nsubtract_sum_aux(86) -> \"grape\";\nsubtract_sum_aux(87) -> \"cherry\";\nsubtract_sum_aux(88) -> \"pear\";\nsubtract_sum_aux(89) -> \"cherry\";\nsubtract_sum_aux(90) -> \"apple\";\nsubtract_sum_aux(91) -> \"kiwi\";\nsubtract_sum_aux(92) -> \"banana\";\nsubtract_sum_aux(93) -> \"kiwi\";\nsubtract_sum_aux(94) -> \"banana\";\nsubtract_sum_aux(95) -> \"melon\";\nsubtract_sum_aux(96) -> \"banana\";\nsubtract_sum_aux(97) -> \"melon\";\nsubtract_sum_aux(98) -> \"pineapple\";\nsubtract_sum_aux(99) -> \"apple\";\nsubtract_sum_aux(100) -> \"pineapple\";\nsubtract_sum_aux(N) -> subtract_sum(N).\n\nsubtract_sum(N) -> subtract_sum_aux(N - sum_digits(N)). % fruit name like \"apple\"","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80848,"user_id":null,"body":"-module(kata).\n-export([subtract_sum\/1]).\n-define(NAMES, [\"kiwi\",\"pear\",\"kiwi\",\"banana\",\"melon\",\"banana\",\"melon\",\"pineapple\",\"apple\",\"pineapple\",\"cucumber\",\"pineapple\",\"cucumber\",\"orange\",\"grape\",\"orange\",\"grape\",\"apple\",\"grape\",\"cherry\",\"pear\",\"cherry\",\"pear\",\"kiwi\",\"banana\",\"kiwi\",\"apple\",\"melon\",\"banana\",\"melon\",\"pineapple\",\"melon\",\"pineapple\",\"cucumber\",\"orange\",\"apple\",\"orange\",\"grape\",\"orange\",\"grape\",\"cherry\",\"pear\",\"cherry\",\"pear\",\"apple\",\"pear\",\"kiwi\",\"banana\",\"kiwi\",\"banana\",\"melon\",\"pineapple\",\"melon\",\"apple\",\"cucumber\",\"pineapple\",\"cucumber\",\"orange\",\"cucumber\",\"orange\",\"grape\",\"cherry\",\"apple\",\"cherry\",\"pear\",\"cherry\",\"pear\",\"kiwi\",\"pear\",\"kiwi\",\"banana\",\"apple\",\"banana\",\"melon\",\"pineapple\",\"melon\",\"pineapple\",\"cucumber\",\"pineapple\",\"cucumber\",\"apple\",\"grape\",\"orange\",\"grape\",\"cherry\",\"grape\",\"cherry\",\"pear\",\"cherry\",\"apple\",\"kiwi\",\"banana\",\"kiwi\",\"banana\",\"melon\",\"banana\",\"melon\",\"pineapple\",\"apple\",\"pineapple\"]).\nsubtract_sum(Number) -> \n    Res = lists:foldl(fun(X, Acc) ->  \n                Acc + list_to_integer([X])\n    end,\n    0, integer_to_list(Number)),\n  \n    if Number - Res =< 100 -> \n        lists:nth(Number - Res, ?NAMES);\n    true -> subtract_sum(Number - Res)\n     end.\n    ","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80849,"user_id":null,"body":"-module(kata).\n-export([subtract_sum\/1]).\n\nlist_fruits() ->\n  [\n   {\"kiwi\", [1, 3, 24, 26, 47, 49, 68, 70, 91, 93]},\n   {\"pear\", [2, 21, 23, 42, 44, 46, 65, 67, 69, 88]},\n   {\"banana\", [4, 6, 25, 29, 48, 50, 71, 73, 92, 94, 96]},\n   {\"melon\", [6, 7, 28, 30, 32, 51, 53, 74, 76, 95, 97]},\n   {\"pineapple\", [8, 10, 12, 31, 33, 52, 56, 75, 77, 79, 98, 100]},\n   {\"apple\", [9, 15, 27, 36, 45, 54, 63, 72, 81, 90, 99]},\n   {\"cucumber\", [11, 13, 34, 55, 57, 59, 78, 80]},\n   {\"orange\", [14, 16, 35, 37, 39, 58, 60, 83]},\n   {\"grape\", [15, 17, 19, 38, 40, 61, 82, 84, 86]},\n   {\"cherry\", [20, 22, 41, 43, 62, 64, 66, 85, 87, 89]}\n  ].\n\nsubtract_sum(N) ->\n  R = N - sum(N, 0),\n  L = lists:filter(fun(E) -> lists:member(R, element(2, E)) end, list_fruits()),\n  case L of\n    [] -> subtract_sum(R);\n    [H | _T] -> element(1, H)\n  end.\n\nsum(0, S) -> S;\nsum(N, S) -> sum((N div 10), S + (N rem 10)).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80850,"user_id":null,"body":"-module(kata).\n-export([subtract_sum\/1]).\n\n%subtract_sum(_) -> \"\". % fruit name like \"apple\"\n\n\nsubtract_sum(N) -> \nToDoList = [\"kiwi\",     \"pear\",     \"kiwi\",     \"banana\",   \"melon\",    \"banana\",  \"melon\",    \"pineapple\",\n             \"apple\",    \"pineapple\",\"cucumber\", \"pineapple\",\"cucumber\", \"orange\",  \"grape\",    \"orange\",\n             \"grape\",    \"apple\",    \"grape\",    \"cherry\",   \"pear\",     \"cherry\",  \"pear\",     \"kiwi\",\n             \"banana\",   \"kiwi\",     \"apple\",    \"melon\",    \"banana\",   \"melon\",   \"pineapple\",\"melon\",\n             \"pineapple\",\"cucumber\", \"orange\",   \"apple\",    \"orange\",   \"grape\",   \"orange\",   \"grape\",\n             \"cherry\",   \"pear\",     \"cherry\",   \"pear\",     \"apple\",    \"pear\",    \"kiwi\",     \"banana\",\n             \"kiwi\",     \"banana\",   \"melon\",    \"pineapple\",\"melon\",    \"apple\",   \"cucumber\", \"pineapple\",\n             \"cucumber\", \"orange\",   \"cucumber\", \"orange\",   \"grape\",    \"cherry\",  \"apple\",    \"cherry\",\n             \"pear\",     \"cherry\",   \"pear\",     \"kiwi\",     \"pear\",     \"kiwi\",    \"banana\",   \"apple\",\n             \"banana\",   \"melon\",    \"pineapple\",\"melon\",    \"pineapple\",\"cucumber\",\"pineapple\",\"cucumber\",\n             \"apple\",    \"grape\",    \"orange\",   \"grape\",    \"cherry\",   \"grape\",   \"cherry\",   \"pear\",     \n             \"cherry\",   \"apple\",    \"kiwi\",     \"banana\",   \"kiwi\",     \"banana\",  \"melon\",    \"banana\",\n             \"melon\",    \"pineapple\",\"apple\",    \"pineapple\"],\n\t\t\t subtract_sum(N, N, 0, ToDoList).\n\nsubtract_sum(0, S, Acc, ToDoList) -> \n\tif Acc > 100 -> subtract_sum(Acc);\ntrue -> to_print(ToDoList, S - Acc-1)\nend;\nsubtract_sum(N, S, Acc, ToDoList) -> subtract_sum((N div 10), S, (N rem 10) + Acc, ToDoList).\n\n to_print([H|_], 0) -> H;\n to_print(_, Acc) when (Acc > 100) -> subtract_sum(Acc);\n to_print([_|T], Acc) -> to_print(T, Acc-1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80851,"user_id":null,"body":"-module(kata).\n-export([subtract_sum\/1]).\n\nsubtract_sum(N) -> \n    substract_sum_2(N - sum_digits(N)).\n\nsubstract_sum_2(1)   -> \"kiwi\";\nsubstract_sum_2(2)   -> \"pear\";\nsubstract_sum_2(3)   -> \"kiwi\";\nsubstract_sum_2(4)   -> \"banana\";\nsubstract_sum_2(5)   -> \"melon\";\nsubstract_sum_2(6)   -> \"banana\";\nsubstract_sum_2(7)   -> \"melon\";\nsubstract_sum_2(8)   -> \"pineapple\";\nsubstract_sum_2(9)   -> \"apple\";\nsubstract_sum_2(10)  -> \"pineapple\";\nsubstract_sum_2(11)  -> \"cucumber\";\nsubstract_sum_2(12)  -> \"pineapple\";\nsubstract_sum_2(13)  -> \"cucumber\";\nsubstract_sum_2(14)  -> \"orange\";\nsubstract_sum_2(15)  -> \"grape\";\nsubstract_sum_2(16)  -> \"orange\";\nsubstract_sum_2(17)  -> \"grape\";\nsubstract_sum_2(18)  -> \"apple\";\nsubstract_sum_2(19)  -> \"grape\";\nsubstract_sum_2(20)  -> \"cherry\";\nsubstract_sum_2(21)  -> \"pear\";\nsubstract_sum_2(22)  -> \"cherry\";\nsubstract_sum_2(23)  -> \"pear\";\nsubstract_sum_2(24)  -> \"kiwi\";\nsubstract_sum_2(25)  -> \"banana\";\nsubstract_sum_2(26)  -> \"kiwi\";\nsubstract_sum_2(27)  -> \"apple\";\nsubstract_sum_2(28)  -> \"melon\";\nsubstract_sum_2(29)  -> \"banana\";\nsubstract_sum_2(30)  -> \"melon\";\nsubstract_sum_2(31)  -> \"pineapple\";\nsubstract_sum_2(32)  -> \"melon\";\nsubstract_sum_2(33)  -> \"pineapple\";\nsubstract_sum_2(34)  -> \"cucumber\";\nsubstract_sum_2(35)  -> \"orange\";\nsubstract_sum_2(36)  -> \"apple\";\nsubstract_sum_2(37)  -> \"orange\";\nsubstract_sum_2(38)  -> \"grape\";\nsubstract_sum_2(39)  -> \"orange\";\nsubstract_sum_2(40)  -> \"grape\";\nsubstract_sum_2(41)  -> \"cherry\";\nsubstract_sum_2(42)  -> \"pear\";\nsubstract_sum_2(43)  -> \"cherry\";\nsubstract_sum_2(44)  -> \"pear\";\nsubstract_sum_2(45)  -> \"apple\";\nsubstract_sum_2(46)  -> \"pear\";\nsubstract_sum_2(47)  -> \"kiwi\";\nsubstract_sum_2(48)  -> \"banana\";\nsubstract_sum_2(49)  -> \"kiwi\";\nsubstract_sum_2(50)  -> \"banana\";\nsubstract_sum_2(51)  -> \"melon\";\nsubstract_sum_2(52)  -> \"pineapple\";\nsubstract_sum_2(53)  -> \"melon\";\nsubstract_sum_2(54)  -> \"apple\";\nsubstract_sum_2(55)  -> \"cucumber\";\nsubstract_sum_2(56)  -> \"pineapple\";\nsubstract_sum_2(57)  -> \"cucumber\";\nsubstract_sum_2(58)  -> \"orange\";\nsubstract_sum_2(59)  -> \"cucumber\";\nsubstract_sum_2(60)  -> \"orange\";\nsubstract_sum_2(61)  -> \"grape\";\nsubstract_sum_2(62)  -> \"cherry\";\nsubstract_sum_2(63)  -> \"apple\";\nsubstract_sum_2(64)  -> \"cherry\";\nsubstract_sum_2(65)  -> \"pear\";\nsubstract_sum_2(66)  -> \"cherry\";\nsubstract_sum_2(67)  -> \"pear\";\nsubstract_sum_2(68)  -> \"kiwi\";\nsubstract_sum_2(69)  -> \"pear\";\nsubstract_sum_2(70)  -> \"kiwi\";\nsubstract_sum_2(71)  -> \"banana\";\nsubstract_sum_2(72)  -> \"apple\";\nsubstract_sum_2(73)  -> \"banana\";\nsubstract_sum_2(74)  -> \"melon\";\nsubstract_sum_2(75)  -> \"pineapple\";\nsubstract_sum_2(76)  -> \"melon\";\nsubstract_sum_2(77)  -> \"pineapple\";\nsubstract_sum_2(78)  -> \"cucumber\";\nsubstract_sum_2(79)  -> \"pineapple\";\nsubstract_sum_2(80)  -> \"cucumber\";\nsubstract_sum_2(81)  -> \"apple\";\nsubstract_sum_2(82)  -> \"grape\";\nsubstract_sum_2(83)  -> \"orange\";\nsubstract_sum_2(84)  -> \"grape\";\nsubstract_sum_2(85)  -> \"cherry\";\nsubstract_sum_2(86)  -> \"grape\";\nsubstract_sum_2(87)  -> \"cherry\";\nsubstract_sum_2(88)  -> \"pear\";\nsubstract_sum_2(89)  -> \"cherry\";\nsubstract_sum_2(90)  -> \"apple\";\nsubstract_sum_2(91)  -> \"kiwi\";\nsubstract_sum_2(92)  -> \"banana\";\nsubstract_sum_2(93)  -> \"kiwi\";\nsubstract_sum_2(94)  -> \"banana\";\nsubstract_sum_2(95)  -> \"melon\";\nsubstract_sum_2(96)  -> \"banana\";\nsubstract_sum_2(97)  -> \"melon\";\nsubstract_sum_2(98)  -> \"pineapple\";\nsubstract_sum_2(99)  -> \"apple\";\nsubstract_sum_2(100) -> \"pineapple\";\nsubstract_sum_2(N) ->\n    substract_sum_2(N - sum_digits(N)).\n\nsum_digits(N) -> \n    sum_digit_str(integer_to_list(N)).\n\nsum_digit_str([H|T]) -> \n    list_to_integer([H]) + sum_digit_str(T);\nsum_digit_str([]) ->\n    0.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80852,"user_id":null,"body":"-module(kata).\n-export([subtract_sum\/1]).\n\nsubtract_sum(N) -> \n    substract_sum_2(N - sum_digits(N)).\n\nsubstract_sum_2(N) when N==1 -> \"kiwi\";\nsubstract_sum_2(N) when N==2 -> \"pear\";\nsubstract_sum_2(N) when N==3 -> \"kiwi\";\nsubstract_sum_2(N) when N==4 -> \"banana\";\nsubstract_sum_2(N) when N==5 -> \"melon\";\nsubstract_sum_2(N) when N==6 -> \"banana\";\nsubstract_sum_2(N) when N==7 -> \"melon\";\nsubstract_sum_2(N) when N==8 -> \"pineapple\";\nsubstract_sum_2(N) when N==9 -> \"apple\";\nsubstract_sum_2(N) when N==10 -> \"pineapple\";\nsubstract_sum_2(N) when N==11 -> \"cucumber\";\nsubstract_sum_2(N) when N==12 -> \"pineapple\";\nsubstract_sum_2(N) when N==13 -> \"cucumber\";\nsubstract_sum_2(N) when N==14 -> \"orange\";\nsubstract_sum_2(N) when N==15 -> \"grape\";\nsubstract_sum_2(N) when N==16 -> \"orange\";\nsubstract_sum_2(N) when N==17 -> \"grape\";\nsubstract_sum_2(N) when N==18 -> \"apple\";\nsubstract_sum_2(N) when N==19 -> \"grape\";\nsubstract_sum_2(N) when N==20 -> \"cherry\";\nsubstract_sum_2(N) when N==21 -> \"pear\";\nsubstract_sum_2(N) when N==22 -> \"cherry\";\nsubstract_sum_2(N) when N==23 -> \"pear\";\nsubstract_sum_2(N) when N==24 -> \"kiwi\";\nsubstract_sum_2(N) when N==25 -> \"banana\";\nsubstract_sum_2(N) when N==26 -> \"kiwi\";\nsubstract_sum_2(N) when N==27 -> \"apple\";\nsubstract_sum_2(N) when N==28 -> \"melon\";\nsubstract_sum_2(N) when N==29 -> \"banana\";\nsubstract_sum_2(N) when N==30 -> \"melon\";\nsubstract_sum_2(N) when N==31 -> \"pineapple\";\nsubstract_sum_2(N) when N==32 -> \"melon\";\nsubstract_sum_2(N) when N==33 -> \"pineapple\";\nsubstract_sum_2(N) when N==34 -> \"cucumber\";\nsubstract_sum_2(N) when N==35 -> \"orange\";\nsubstract_sum_2(N) when N==36 -> \"apple\";\nsubstract_sum_2(N) when N==37 -> \"orange\";\nsubstract_sum_2(N) when N==38 -> \"grape\";\nsubstract_sum_2(N) when N==39 -> \"orange\";\nsubstract_sum_2(N) when N==40 -> \"grape\";\nsubstract_sum_2(N) when N==41 -> \"cherry\";\nsubstract_sum_2(N) when N==42 -> \"pear\";\nsubstract_sum_2(N) when N==43 -> \"cherry\";\nsubstract_sum_2(N) when N==44 -> \"pear\";\nsubstract_sum_2(N) when N==45 -> \"apple\";\nsubstract_sum_2(N) when N==46 -> \"pear\";\nsubstract_sum_2(N) when N==47 -> \"kiwi\";\nsubstract_sum_2(N) when N==48 -> \"banana\";\nsubstract_sum_2(N) when N==49 -> \"kiwi\";\nsubstract_sum_2(N) when N==50 -> \"banana\";\nsubstract_sum_2(N) when N==51 -> \"melon\";\nsubstract_sum_2(N) when N==52 -> \"pineapple\";\nsubstract_sum_2(N) when N==53 -> \"melon\";\nsubstract_sum_2(N) when N==54 -> \"apple\";\nsubstract_sum_2(N) when N==55 -> \"cucumber\";\nsubstract_sum_2(N) when N==56 -> \"pineapple\";\nsubstract_sum_2(N) when N==57 -> \"cucumber\";\nsubstract_sum_2(N) when N==58 -> \"orange\";\nsubstract_sum_2(N) when N==59 -> \"cucumber\";\nsubstract_sum_2(N) when N==60 -> \"orange\";\nsubstract_sum_2(N) when N==61 -> \"grape\";\nsubstract_sum_2(N) when N==62 -> \"cherry\";\nsubstract_sum_2(N) when N==63 -> \"apple\";\nsubstract_sum_2(N) when N==64 -> \"cherry\";\nsubstract_sum_2(N) when N==65 -> \"pear\";\nsubstract_sum_2(N) when N==66 -> \"cherry\";\nsubstract_sum_2(N) when N==67 -> \"pear\";\nsubstract_sum_2(N) when N==68 -> \"kiwi\";\nsubstract_sum_2(N) when N==69 -> \"pear\";\nsubstract_sum_2(N) when N==70 -> \"kiwi\";\nsubstract_sum_2(N) when N==71 -> \"banana\";\nsubstract_sum_2(N) when N==72 -> \"apple\";\nsubstract_sum_2(N) when N==73 -> \"banana\";\nsubstract_sum_2(N) when N==74 -> \"melon\";\nsubstract_sum_2(N) when N==75 -> \"pineapple\";\nsubstract_sum_2(N) when N==76 -> \"melon\";\nsubstract_sum_2(N) when N==77 -> \"pineapple\";\nsubstract_sum_2(N) when N==78 -> \"cucumber\";\nsubstract_sum_2(N) when N==79 -> \"pineapple\";\nsubstract_sum_2(N) when N==80 -> \"cucumber\";\nsubstract_sum_2(N) when N==81 -> \"apple\";\nsubstract_sum_2(N) when N==82 -> \"grape\";\nsubstract_sum_2(N) when N==83 -> \"orange\";\nsubstract_sum_2(N) when N==84 -> \"grape\";\nsubstract_sum_2(N) when N==85 -> \"cherry\";\nsubstract_sum_2(N) when N==86 -> \"grape\";\nsubstract_sum_2(N) when N==87 -> \"cherry\";\nsubstract_sum_2(N) when N==88 -> \"pear\";\nsubstract_sum_2(N) when N==89 -> \"cherry\";\nsubstract_sum_2(N) when N==90 -> \"apple\";\nsubstract_sum_2(N) when N==91 -> \"kiwi\";\nsubstract_sum_2(N) when N==92 -> \"banana\";\nsubstract_sum_2(N) when N==93 -> \"kiwi\";\nsubstract_sum_2(N) when N==94 -> \"banana\";\nsubstract_sum_2(N) when N==95 -> \"melon\";\nsubstract_sum_2(N) when N==96 -> \"banana\";\nsubstract_sum_2(N) when N==97 -> \"melon\";\nsubstract_sum_2(N) when N==98 -> \"pineapple\";\nsubstract_sum_2(N) when N==99 -> \"apple\";\nsubstract_sum_2(N) when N==100 -> \"pineapple\";\nsubstract_sum_2(N) ->\n    substract_sum_2(N - sum_digits(N)).\n\nsum_digits(N) -> \n    sum_digit_str(integer_to_list(N)).\n\nsum_digit_str([H|T]) -> \n    list_to_integer([H]) + sum_digit_str(T);\nsum_digit_str([]) ->\n    0.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80853,"user_id":null,"body":"-module(kata).\n-export([subtract_sum\/1, sum_digits\/1, sum_digits\/2, sum_digits\/3]).\n\nsum_digits(N) -> sum_digits(N,10).\n \nsum_digits(N,B) -> sum_digits(N,B,0).\n \nsum_digits(0,_,Acc) -> Acc;\nsum_digits(N,B,Acc) when N < B -> Acc+N;\nsum_digits(N,B,Acc) -> sum_digits(N div B, B, Acc + (N rem B)).\n \n\nsubtract_sum(N) ->\n  M = N - sum_digits(N),\n  case M of\n    1 -> \"kiwi\";\n    2 -> \"pear\";\n    3 -> \"kiwi\";\n    4 -> \"banana\";\n    5 -> \"melon\";\n    6 -> \"banana\";\n    7 -> \"melon\";\n    8 -> \"pineapple\";\n    9 -> \"apple\";\n    10 -> \"pineapple\";\n    11 -> \"cucumber\";\n    12 -> \"pineapple\";\n    13 -> \"cucumber\";\n    14 -> \"orange\";\n    15 -> \"grape\";\n    16 -> \"orange\";\n    17 -> \"grape\";\n    18 -> \"apple\";\n    19 -> \"grape\";\n    20 -> \"cherry\";\n    21 -> \"pear\";\n    22 -> \"cherry\";\n    23 -> \"pear\";\n    24 -> \"kiwi\";\n    25 -> \"banana\";\n    26 -> \"kiwi\";\n    27 -> \"apple\";\n    28 -> \"melon\";\n    29 -> \"banana\";\n    30 -> \"melon\";\n    31 -> \"pineapple\";\n    32 -> \"melon\";\n    33 -> \"pineapple\";\n    34 -> \"cucumber\";\n    35 -> \"orange\";\n    36 -> \"apple\";\n    37 -> \"orange\";\n    38 -> \"grape\";\n    39 -> \"orange\";\n    40 -> \"grape\";\n    41 -> \"cherry\";\n    42 -> \"pear\";\n    43 -> \"cherry\";\n    44 -> \"pear\";\n    45 -> \"apple\";\n    46 -> \"pear\";\n    47 -> \"kiwi\";\n    48 -> \"banana\";\n    49 -> \"kiwi\";\n    50 -> \"banana\";\n    51 -> \"melon\";\n    52 -> \"pineapple\";\n    53 -> \"melon\";\n    54 -> \"apple\";\n    55 -> \"cucumber\";\n    56 -> \"pineapple\";\n    57 -> \"cucumber\";\n    58 -> \"orange\";\n    59 -> \"cucumber\";\n    60 -> \"orange\";\n    61 -> \"grape\";\n    62 -> \"cherry\";\n    63 -> \"apple\";\n    64 -> \"cherry\";\n    65 -> \"pear\";\n    66 -> \"cherry\";\n    67 -> \"pear\";\n    68 -> \"kiwi\";\n    69 -> \"pear\";\n    70 -> \"kiwi\";\n    71 -> \"banana\";\n    72 -> \"apple\";\n    73 -> \"banana\";\n    74 -> \"melon\";\n    75 -> \"pineapple\";\n    76 -> \"melon\";\n    77 -> \"pineapple\";\n    78 -> \"cucumber\";\n    79 -> \"pineapple\";\n    80 -> \"cucumber\";\n    81 -> \"apple\";\n    82 -> \"grape\";\n    83 -> \"orange\";\n    84 -> \"grape\";\n    85 -> \"cherry\";\n    86 -> \"grape\";\n    87 -> \"cherry\";\n    88 -> \"pear\";\n    89 -> \"cherry\";\n    90 -> \"apple\";\n    91 -> \"kiwi\";\n    92 -> \"banana\";\n    93 -> \"kiwi\";\n    94 -> \"banana\";\n    95 -> \"melon\";\n    96 -> \"banana\";\n    97 -> \"melon\";\n    98 -> \"pineapple\";\n    99 -> \"apple\";\n    100 -> \"pineapple\";\n    _ -> subtract_sum(M)\n  end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80854,"user_id":null,"body":"-module(kata).\n-export([subtract_sum\/1]).\n\nsum_of_digits(Number) when is_integer(Number), Number >= 0 ->\n  List = [N - $0 || N <- integer_to_list(Number)],\n  lists:sum(List).\n\nget_fruit(Number) when Number >= 1, Number =< 100 ->\n    Fruits = [\n              kiwi, pear, kiwi, banana, melon, banana, melon, pineapple, apple, pineapple, cucumber, pineapple,\n              cucumber, orange, grape, orange, grape, apple, grape, cherry, pear, cherry, pear, kiwi, banana,\n              kiwi, apple, melon, banana, melon, pineapple, melon, pineapple, cucumber, orange, apple, orange,\n              grape, orange, grape, cherry, pear, cherry, pear, apple, pear, kiwi, banana, kiwi, banana, melon,\n              pineapple, melon, apple, cucumber, pineapple, cucumber, orange, cucumber, orange, grape, cherry,\n              apple, cherry, pear, cherry, pear, kiwi, pear, kiwi, banana, apple, banana, melon, pineapple,\n              melon, pineapple, cucumber, pineapple, cucumber, apple, grape, orange, grape, cherry, grape,\n              cherry, pear, cherry, apple, kiwi, banana, kiwi, banana, melon, banana, melon, pineapple, apple, pineapple\n             ],\n  Fruit = lists:nth(Number, Fruits),\n  atom_to_list(Fruit);\nget_fruit(_) -> \"apple\".\n\nsubtract_sum(Number) when Number >= 10, Number =< 10000 ->\n  Sum = sum_of_digits(Number),\n  New_number = Number - Sum,\n  get_fruit(New_number).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56cac350145912e68b0006f0":[{"id":80855,"user_id":492,"body":"-module(kata).\n-export([arrange\/1]).\n\n-spec arrange(string) -> string.\n\nup([]) -> [];\nup([X]) -> [string:to_lower(X)];\nup([X, Y | Xs]) ->\n\tA = string:length(X) - string:length(Y),\n\tif (A =< 0) ->\n\t  [string:to_lower(X) | down([Y | Xs])];\n\ttrue ->\n\t  [string:to_lower(Y) | down([X | Xs])]\n\tend.\n\ndown([]) -> [];\ndown([X]) -> [string:to_upper(X)];\ndown([X, Y | Xs]) ->\n\tA = string:length(X) - string:length(Y),\n\tif (A >= 0) ->\n\t  [string:to_upper(X) | up([Y | Xs])];\n\ttrue ->\n\t  [string:to_upper(Y) | up([X | Xs])]\n\tend.\n\narrange(Strng) ->\n    S = string:split(Strng, \" \", all),\n    lists:concat(lists:join(\" \", up(S))).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56dbe0e313c2f63be4000b25":[{"id":80856,"user_id":null,"body":"-module(kata).\n-export([oper\/2, vertMirror\/1, horMirror\/1]).\n\n-define (NL, \"\n\").\n\n-spec vertMirror(string) -> string.\n-spec horMirror(string) -> string.\n-spec oper(fun((string) -> string), string) -> string.\n\nvertMirror(Str) ->\n  io:format (\"~s~n\", [Str]),\n  string:join (\n    lists:map (fun string:reverse\/1, string:split (Str, ?NL, all)),\n    ?NL).\n\nhorMirror(Str) ->\n  string:join (\n    lists:reverse (string:split (Str, ?NL, all)),\n    ?NL).\n\noper(Fct, S) when is_function (Fct) ->\n  Fct (S).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80857,"user_id":492,"body":"-module(kata).\n-export([oper\/2, vertMirror\/1, horMirror\/1]).\n\n-spec vertMirror(string) -> string.\n-spec horMirror(string) -> string.\n-spec oper(fun((string) -> string), string) -> string.\n\nvertMirror(Str) ->\n    L = string:split(Str, \"\n\", all),\n    M = lists:map(fun(X) -> lists:reverse(X) end, L),\n    lists:concat(lists:join(\"\n\", M)).\n\nhorMirror(Str) ->\n    L = string:split(Str, \"\n\", all),\n    M = lists:reverse(L),\n    lists:concat(lists:join(\"\n\", M)).\n\noper(Func, S) ->\n    Func(S).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56dbe7f113c2f63570000b86":[{"id":80858,"user_id":492,"body":"-module(kata).\n-export([oper\/2, rot\/1, selfieAndRot\/1]).\n\n-spec rot(string) -> string.\n-spec selfieAndRot(string) -> string.\n-spec oper(fun((string) -> string), string) -> string.\n\nrot(S) -> lists:reverse(S).\nrepeat(X, N) ->\n    lists:flatten(lists:duplicate(N, X)).\nselfieAndRot(S) ->\n\tL = string:split(S, \"\n\", all),\n\tM = lists:map(fun(X) -> X ++ repeat(\".\", length(L)) end, L),\n\tN = lists:concat(lists:join(\"\n\", M)),\n\tN ++ \"\n\" ++ rot(N).\n\noper(Func, S) ->\n    Func(S). ","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56dbeec613c2f63be4000be6":[{"id":80859,"user_id":492,"body":"-module(kata).\n-export([rot90Clock\/1, diag1Sym\/1, selfieAndDiag1\/1, oper\/2]).\n\n-spec rot90Clock(string) -> string.\n-spec diag1Sym(string) -> string.\n-spec selfieAndDiag1(string) -> string.\n-spec oper(fun((string) -> string), string) -> string.\n\ntranspose([[]|_]) -> [];\ntranspose(M) ->\n  [lists:map(fun hd\/1, M) | transpose(lists:map(fun tl\/1, M))].\n\nrot90Clock(S) ->\n\tL = string:split(S, \"\n\", all),\n\tM = transpose(lists:map(fun(X) -> re:split(X, \"\",[{return,list},trim]) end, L)),\n\tN = lists:map(fun(X) -> lists:reverse(X) end, M),\n\tO = lists:map(fun(X) -> lists:concat(lists:join(\"\", X)) end, N),\n\tlists:concat(lists:join(\"\n\", O)).\n \ndiag1Sym(S) ->\n\tL = string:split(S, \"\n\", all),\n\tM = transpose(lists:map(fun(X) -> re:split(X, \"\",[{return,list},trim]) end, L)),\n\tO = lists:map(fun(X) -> lists:concat(lists:join(\"\", X)) end, M),\n\tlists:concat(lists:join(\"\n\", O)).\n\nselfieAndDiag1(S) ->\n\tA = diag1Sym(S),\n\tL = string:split(A, \"\n\", all),\n\tM = lists:map(fun(X) -> \"|\" ++ X end, L),\n\tB = string:split(S, \"\n\", all),\n\tN = lists:zip(B, M),\n\tO = lists:map(fun({X, Y}) -> X ++ Y end, N),\n\tlists:concat(lists:join(\"\n\", O)).\n\noper(Func, S) ->\n    Func(S). ","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56dbf59b0a10feb08c000227":[{"id":80860,"user_id":492,"body":"-module(kata).\n-export([rot90Counter\/1, diag2Sym\/1, selfieDiag2Counterclock\/1, oper\/2]).\n\n-spec rot90Counter(string) -> string.\n-spec diag2Sym(string) -> string.\n-spec selfieDiag2Counterclock(string) -> string.\n-spec oper(fun((string) -> string), string) -> string.\n\ntranspose([[]|_]) -> [];\ntranspose(M) ->\n  [lists:map(fun hd\/1, M) | transpose(lists:map(fun tl\/1, M))].\n\nrot90Counter(S) ->\n    L = string:split(S, \"\n\", all),\n    M = transpose(lists:map(fun(X) -> re:split(X, \"\",[{return,list},trim]) end, L)),\n    N = lists:map(fun(X) -> lists:concat(lists:join(\"\", X)) end, M),\n    O = lists:reverse(N),\n    lists:concat(lists:join(\"\n\", O)).\n\ndiag2Sym(S) ->\n    L = rot90Counter(S),\n    M = string:split(L, \"\n\", all),\n    N = lists:map(fun(X) -> lists:reverse(X) end, M),\n    lists:concat(lists:join(\"\n\", N)).\n\nselfieDiag2Counterclock(S) ->\n    A = diag2Sym(S),\n    L = string:split(A, \"\n\", all),\n    M = lists:map(fun(X) -> \"|\" ++ X end, L),\n    C = rot90Counter(S),\n    N = string:split(C, \"\n\", all),\n    P = lists:map(fun(X) -> \"|\" ++ X end, N),\n    Q = string:split(S, \"\n\", all),\n    R = lists:zip3(Q, M, P),\n    T = lists:map(fun({X, Y, Z}) -> X ++ Y ++ Z end, R),\n    lists:concat(lists:join(\"\n\", T)).\n\noper(Func, S) ->\n    Func(S). ","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56e3cd1d93c3d940e50006a4":[{"id":80861,"user_id":492,"body":"-module(kata).\n-export([makeValley\/1]).\n\n-spec makeValley([integer]) -> [integer].\n\nmakeValleyAux([]) -> [];\nmakeValleyAux([X]) -> [X];\nmakeValleyAux([X, Y | Xs]) ->\n\t[X] ++ makeValleyAux(Xs) ++ [Y].\nmakeValley(A) ->\n\tmakeValleyAux(lists:reverse(lists:sort(A))).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80862,"user_id":53,"body":"-module(kata).\n-export([makeValley\/1]).\n\n-spec makeValley([integer]) -> [integer].\n\ngo([])  -> [];\ngo([E]) -> [E];\ngo([A, B | LS]) -> [A|go(LS)] ++ [B].\nmakeValley(LS)  -> go(lists:reverse(lists:sort(LS))).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56e7d40129035aed6c000632":[{"id":80863,"user_id":492,"body":"-module(kata).\n-export([easyline\/1]).\n\n-spec(easyline(integer()) -> integer()).\n\nchoose(_N, 0) -> 1;\nchoose(N, K) when (N >= 0), (K >= 0), (N >= K) ->\n  choose(N, K, 1, 1).\nchoose(N, K, K, Acc) ->\n  (Acc * (N-K+1)) div K;\nchoose(N, K, I, Acc) ->\n  choose(N, K, I+1, (Acc * (N-I+1)) div I).\n\neasyline(N) ->\n    choose(2 * N, N).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56ed20a2c4e5d69155000301":[{"id":80864,"user_id":null,"body":"-module(kata).\n-export([scale\/3]).\n\n-spec scale(string, integer(), integer()) -> string.\n\nscaleH(_, 0, Answer) -> Answer;\nscaleH(Ch, H, Answer) -> \n  scaleH(Ch, H-1, Answer ++ Ch).\n\nscaleV(_, 0, Answer) -> Answer;\nscaleV(Lines, V, Answer) -> \n  scaleV(Lines, V-1, Answer ++ Lines).\n\nscale2(_, _, V, Length, Counter, Lines, Answer) when Counter == Length -> \n  Result = Answer ++ scaleV(Lines++\"\n\", V, \"\"),\n  LenRes = string:length(Result),\n  string:slice(Result, 0, LenRes-1);\nscale2(Input, H, V, Length, Counter, Lines, Answer) ->\n  Ch = string:slice(Input, Counter, 1),\n  if Ch == \"\n\" -> scale2(Input, H, V, Length, Counter+1, \"\", Answer ++ scaleV(Lines++Ch, V, \"\"));\n     true -> scale2(Input, H, V, Length, Counter+1, Lines ++ scaleH(Ch, H, \"\"), Answer)\n  end.\n\nscale(S, K, N) ->\n  if S == \"\" -> \"\";\n     true ->\n       Length = string:length(S),\n       scale2(S, K, N, Length, 0, \"\", \"\")\n  end.  \n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80865,"user_id":492,"body":"-module(kata).\n-export([scale\/3]).\n\n-spec scale(string, integer(), integer()) -> string.\n\nrepeat(X, N) ->\n    lists:flatten(lists:duplicate(N, X)).\nscale(\"\", _K, _N) -> \"\";\nscale(S, K, N) ->\n\tL = string:split(S, \"\n\", all),\n\tM = lists:map(fun(X) -> re:split(X, \"\",[{return,list},trim]) end, L),\n\tO = lists:map(fun(Y) -> lists:concat(lists:map(fun(X) -> repeat(X, K) end, Y)) end, M),\n\tP = lists:map(fun(X) -> repeat(X ++ \"\n\", N) end, O),\n\tQ = lists:concat(lists:join(\"\", P)),\n\tstring:slice(Q, 0, length(Q) - 1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56efab15740d301ab40002ee":[{"id":80866,"user_id":53,"body":"-module(kata).\n-export([som\/2, mini\/2, maxi\/2, gcdi\/2, lcmu\/2, operArray\/3]).\n\n-spec operArray(fun((integer(), integer()) -> integer), [integer], integer()) -> [integer].\n\n som(A, B) -> A + B.\nmini(A, B) -> min(A, B).\nmaxi(A, B) -> max(A, B).\ngcdi(A, 0) -> abs(A);\ngcdi(A, B) -> gcdi(abs(B), abs(A) rem abs(B)).\nlcmu(A, B) -> abs(A) div gcdi(A, B) * abs(B).\n\ngo(_, [], _, R) -> lists:reverse(R);\ngo(Fct, [X|Ls], Prev, R) ->\n  Acc = Fct(X, Prev),\n  R1 = [Acc|R],\n  go(Fct, Ls, Acc, R1).\n\noperArray(Fct, Ls, Init) -> go(Fct, Ls, Init, []).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80867,"user_id":492,"body":"-module(kata).\n-export([som\/2, mini\/2, maxi\/2, gcdi\/2, lcmu\/2, operArray\/3]).\n\n-spec operArray(fun((integer(), integer()) -> integer), [integer], integer()) -> [integer].\n\nsom(A, B) -> A + B.\nmini(A, B) -> min(A, B).\nmaxi(A, B) -> max(A, B).\ngcdi(A, 0) -> abs(A);\ngcdi(A, B) -> gcdi(abs(B), abs(A) rem abs(B)).\nlcmu(A, B) -> abs(A * B) div gcdi(A, B).\n\naux(_Fct, [], Init) -> [Init];\naux(Fct, [Y | Ys], Init) -> [Init] ++ aux(Fct, Ys, Fct(Init, Y)).\noperArray(Fct, Ls, Init) -> lists:nthtail(1, aux(Fct, Ls, Init)).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56f3a1e899b386da78000732":[{"id":80868,"user_id":53,"body":"-module(kata).\n-export([partList\/1]).\n\n-spec partList([string]) -> [[string]].\n\njoin(Ls, A, B) -> lists:concat(lists:join(\" \", lists:sublist(Ls, A, B))).\n\ngo(Ls, W, I) -> [join(Ls, 1, I), join(Ls, I + 1, W - 1)].\n\npartList(Ls) ->\n  W = length(Ls),\n  lists:map(fun(I) -> go(Ls, W, I) end, lists:seq(1, W - 1)).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80869,"user_id":492,"body":"-module(kata).\n-export([partList\/1]).\n\n-spec partList([string]) -> [[string]].\n\npartaux(A, L, J) ->\n\t[lists:concat(lists:join(\" \", lists:sublist(A, 1, J))), \n \t lists:concat(lists:join(\" \",lists:sublist(A, J + 1, L - 1)))].\npartList(As) ->\n\tlists:map(fun(J) -> partaux(As, length(As), J) end, lists:seq(1, length(As) - 1)).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"56fcc393c5957c666900024d":[{"id":80870,"user_id":null,"body":"-module(kata).\n-export([code\/1, decode\/1]).\n\n-spec code(string) -> string.\n-spec decode(string) -> string.\n\npad(S) ->\n\tSqLen = trunc(math:ceil(math:sqrt(length(S)))),\n\tS ++ lists:map(fun(_) -> $& end, lists:seq(length(S) + 1, SqLen*SqLen)).\nunpad(S) ->\n\tlists:filter(fun(X) -> X \/= $& end, S).\nrow(S) ->\n\tLen = trunc(math:sqrt(length(S))),\n\trow(Len, S).\nrow(_, []) -> [];\nrow(Len, S) ->\n\t{R, S_} = lists:split(Len, S),\n\t[R|row(Len, S_)].\ntranspose([[]|_]) -> [];\ntranspose(M) ->\n  [lists:map(fun hd\/1, M) | transpose(lists:map(fun tl\/1, M))].\nrotate_right(M) -> transpose(lists:reverse(M)).\nrotate_left(M) -> lists:reverse(transpose(M)).\n\nunrow(M) ->\n\tunrow(M, []).\nunrow([LastLine], Res)   -> Res ++ LastLine;\nunrow([Line|Lines], Res) -> unrow(Lines, Res ++ Line ++ \"\\n\"). \ncode(S) ->\n\tunrow(rotate_right(row(pad(S)))).\n\ndecode(S) ->\n\tunpad(lists:flatten(rotate_left(string:split(S, \"\\n\", all)))).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2023-01-10 12:44:18"},{"id":80871,"user_id":492,"body":"-module(kata).\n-export([code\/1, decode\/1]).\n\n-spec code(string) -> string.\n-spec decode(string) -> string.\n\nstrDivide(Q, N) ->\n\t[string:slice(Q, I, N) || I <- lists:seq(0, length(Q) - N, N)].\nrepeat(X, N) ->\n    lists:flatten(lists:duplicate(N, X)).\ntranspose([[]|_]) -> [];\ntranspose(M) ->\n  [lists:map(fun hd\/1, M) | transpose(lists:map(fun tl\/1, M))].\nrot90Clock(L) ->\n\tM = transpose(lists:map(fun(X) -> re:split(X, \"\",[{return,list},trim]) end, L)),\n\tN = lists:map(fun(X) -> lists:reverse(X) end, M),\n\tO = lists:map(fun(X) -> lists:concat(lists:join(\"\", X)) end, N),\n\tlists:concat(lists:join(\"\\n\", O)).\nrot90Counter(S) ->\n    L = string:split(S, \"\\n\", all),\n    M = transpose(lists:map(fun(X) -> re:split(X, \"\",[{return,list},trim]) end, L)),\n    N = lists:map(fun(X) -> lists:concat(lists:join(\"\", X)) end, M),\n    O = lists:reverse(N),\n    lists:concat(lists:join(\"\\n\", O)).\n\ncode(S) ->\n\tLg = length(S),\n\tSz = ceil(math:sqrt(Lg)),\n\tSs = S ++ repeat(\"&\", Sz * Sz - Lg),\n\trot90Clock(strDivide(Ss, Sz)).\n\ndecode(S) ->\n\tL = string:split(hd(string:split(rot90Counter(S), \"&\", all)), \"\\n\", all),\n\tlists:concat(lists:join(\"\", L)).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2023-01-10 12:44:18"}],"56fe17fcc25bf3e19a000292":[{"id":80872,"user_id":527,"body":"-module(kata).\n-export([vEff\/2, uEff\/2]).\n  \n-spec vEff(integer(), integer()) -> integer().\n-spec uEff(integer(), integer()) -> integer().\n\nvEff(N, P) ->\n  (2 * N + 1) * P.\n\nuEff(N, P) ->\n  (N + 1) * P.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80873,"user_id":492,"body":"-module(kata).\n-export([vEff\/2, uEff\/2]).\n \n-spec vEff(integer(), integer()) -> integer.\n-spec uEff(integer(), integer()) -> integer.\n\nvEff(N, P) ->\n    P * (2 * N + 1).\n\nuEff(N, P) ->\n    P * (N + 1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"57591ef494aba64d14000526":[{"id":80874,"user_id":null,"body":"-module(kata).\n-export([john\/1, ann\/1, sumJohn\/1, sumAnn\/1]).\n\n-spec(john(integer()) -> [integer]).\n-spec(ann(integer()) -> [integer]).\n-spec(sumJohn(integer()) -> integer()).\n-spec(sumAnn(integer()) -> integer()).\n\nn({I, _, 0}) -> I;\nn(I) ->\n    {Map, Val} = n(cache_get(), I),\n    cache_put(Map),\n    {Map, Val}.\nn(Map, {I1, _, 0}) ->\n    {Map, I1};\nn(Map, I = {I1, I2, N}) ->\n    case maps:get(I, Map, false) of\n        false ->\n            {Map2, Last} = n(Map, {I1, I2, N-1}),\n            {Map3, Inv}  = n(Map2, {I2, I1, Last}),\n            Val = N - Inv,\n            {maps:put(I, Val, Map3), Val};\n        Val   -> {Map, Val}\n    end.\n\ncache_init() ->\n    Pid = spawn(fun() -> cache_loop(maps:new()) end),\n    register(cache_server, Pid).\n\ncache_get() -> \n    try\n        cache_server ! {get, self()},\n        receive\n            Map -> Map\n        end\n    catch\n        error:badarg ->\n            cache_init(),\n            maps:new()\n    end.\n\ncache_put(Map) -> cache_server ! Map.\n\ncache_loop(Map) ->\n    receive\n        {get, Pid} -> \n            Pid ! Map,\n            cache_loop(Map);\n        {put, NewMap} ->\n            cache_loop(NewMap)\n    end.\n\njohn(N) ->\n    {Map, _} = n({0,1,N}),\n    [0|lists:map(fun(I) -> maps:get({0,1,I}, Map) end, lists:seq(1, N-1))].\nann(N) ->\n    {Map, _} = n({1,0,N}),\n    [1|lists:map(fun(I) -> maps:get({1,0,I}, Map) end, lists:seq(1, N-1))].\n\nsumJohn(N) -> lists:sum(john(N)).\nsumAnn(N) -> lists:sum(ann(N)).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80875,"user_id":492,"body":"-module(kata).\n-export([john\/1, ann\/1, sumJohn\/1, sumAnn\/1]).\n\n-spec(john(integer()) -> [integer]).\n-spec(ann(integer()) -> [integer]).\n-spec(sumJohn(integer()) -> integer()).\n-spec(sumAnn(integer()) -> integer()).\n\naux(N) -> aux(N, 1, #{0 => 0}, #{0 => 1}).\naux(N, I, Xs, Ys) when I >= N -> {maps:values(Ys), maps:values(Xs)};\naux(N, I, Xs, Ys) -> \n    X1 = maps:get(I - 1, Xs),\n    X2 = maps:get(X1, Ys),\n    Xs2 = maps:put(I, I - X2, Xs), \n    Y1 = maps:get(I - 1, Ys),\n    Y2 = maps:get(Y1, Xs2),\n    Ys2 = maps:put(I, I - Y2, Ys),\n    aux(N, I + 1, Xs2, Ys2).\n\n%john(N) -> element(2, aux(N)).\n%ann(N) -> element(1, aux(N)).\njohn(N) -> lists:sort(element(2, aux(N))).\nann(N) -> lists:sort(element(1, aux(N))).\n\n%sumJohn(N) -> lists:sum(john(N)).\n%sumAnn(N) -> lists:sum(ann(N)).\nsumJohn(N) -> lists:sum(element(2, aux(N))).\nsumAnn(N) -> lists:sum(element(1, aux(N))).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5772382d509c65de7e000982":[{"id":80876,"user_id":492,"body":"-module(kata).\n-export([lengthSupUk\/2, comp\/1]).\n\n-spec(lengthSupUk(integer(), integer()) -> integer()).\n-spec(comp(integer()) -> integer()).\n\naux(N) when N =< 2 -> 1;\naux(N) -> aux(#{0 => 0, 1 => 1, 2 => 1}, 3, N).\naux(Seq, I, N) ->\n\tif\n\t(I > N) ->\n\t\tSeq;\n\ttrue ->\n\t\tA = maps:get(I - maps:get(I - 1, Seq), Seq),\n\t\tB = maps:get(I - maps:get(I - 2, Seq), Seq),\n\t\tX = A + B,\n\t\taux(maps:put(I, X, Seq), I + 1, N)\n\tend.\nlengthSupUk(N, K) ->\n\tlength([X || X <- maps:values(aux(N)), X >= K]).\ncomp(N) ->\n\tHs = aux(N),\n\tMs = maps:filter(fun(K, _) -> (K > 0) andalso (maps:get(K, Hs) < maps:get(K - 1, Hs)) end, Hs),\n\tlength(maps:values(Ms)).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80877,"user_id":null,"body":"-module(kata).\n-export([lengthSupUk\/2, comp\/1]).\n\n-spec(lengthSupUk(integer(), integer()) -> integer()).\n-spec(comp(integer()) -> integer()).\n\nu(N) ->\n    {Val, Map} = u(N, cache_get()),\n    cache_put(Map),\n    {Val, Map}.\nu(N, Map) ->\n    case maps:get(N, Map, false) of\n        false ->\n            {Pred1, Map1} = u(N-1, Map),\n            {Pred2, Map2} = u(N-2, Map1),\n            {Term1, Map3} = u(N-Pred1, Map2),\n            {Term2, Map4} = u(N-Pred2, Map3),\n            {Term1+Term2, maps:put(N, Term1+Term2, Map4)};\n        Val -> {Val, Map}\n    end.\n\ncache_init() ->\n    Pid = spawn(fun() -> cache_loop(maps:new()) end),\n    register(cache_server, Pid).\n\ncache_get() -> \n    try\n        cache_server ! {get, self()},\n        receive\n            Map -> Map\n        end\n    catch\n        error:badarg ->\n            cache_init(),\n            InitMap = #{ 1 => 1, 2 => 1},\n            cache_server ! {put, InitMap},\n            InitMap\n    end.\n\ncache_put(Map) -> cache_server ! Map.\n\ncache_loop(Map) ->\n    receive\n        {get, Pid} -> \n            Pid ! Map,\n            cache_loop(Map);\n        {put, NewMap} ->\n            cache_loop(NewMap)\n    end.\n\nlengthSupUk(N, K) ->\n    {_, Map} = u(N),\n\tlength(lists:filter(fun(I) -> I >= K end, lists:map(fun(I) -> maps:get(I, Map) end, lists:seq(1, N)))).\ncomp(N) ->\n\tThresFun = fun(X, {Pred, Times}) ->\n        if X < Pred -> {X, Times+1};\n           true     -> {X, Times}\n        end end,\n    {_, Map} = u(N),\n    {_, Times} = lists:foldl(ThresFun, {0, 0}, lists:map(fun(I) -> maps:get(I, Map) end, lists:seq(1, N))),\n    Times.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80878,"user_id":53,"body":"-module(kata).\n-export([lengthSupUk\/2, comp\/1]).\n\n-spec(lengthSupUk(integer(), integer()) -> integer()).\n-spec(comp(integer()) -> integer()).\n\nfetch(I, P, Seq) -> maps:get(I - maps:get(I - P, Seq), Seq).\n\nwalk(N) when N =< 2 -> 1;\nwalk(N) -> walk(#{0 => 0, 1 => 1, 2 => 1}, 3, N).\nwalk(Seq, I, N) when I > N -> Seq;\nwalk(Seq, I, N) -> walk(maps:put(I, fetch(I, 1, Seq) + fetch(I, 2, Seq), Seq), I + 1, N).\n\nlengthSupUk(N, K) -> length([I || I <- maps:values(walk(N)), I >= K]).\n\ncomp(N) -> M = walk(N), length(maps:values(maps:filter(fun(I, _) -> (I > 0) andalso (maps:get(I, M) < maps:get(I - 1, M)) end, M))).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"58678d29dbca9a68d80000d7":[{"id":80879,"user_id":null,"body":"-module(custom_small_fuck).\n\n-export([interpreter\/2]).\n\ninterpreter(Code, Tape) ->\n  interpreter(\"\", Code, \"\", Tape).\n\n\ninterpreter(_CodeL, [], TapeL, TapeR) ->\n  lists:reverse(TapeL) ++ TapeR;\ninterpreter(_CodeL, [$> | _], TapeL, [Last]) ->\n  lists:reverse([Last | TapeL]);\ninterpreter(_CodeL, [$< | _], [], TapeR) ->\n  TapeR;\n\ninterpreter(CodeL, [C = $> | Code], TapeL, [T | TapeR]) ->\n  interpreter([C | CodeL], Code, [T | TapeL], TapeR);\ninterpreter(CodeL, [C = $< | Code], [T | TapeL], TapeR) ->\n  interpreter([C | CodeL], Code, TapeL, [T | TapeR]);\ninterpreter(CodeL, [C = $* | Code], TapeL, [T | TapeR]) ->\n  interpreter([C | CodeL], Code, TapeL, [flip(T) | TapeR]);\n\ninterpreter(CodeL, [C = $[ | Code], TapeL, TapeR = [$0 | _]) ->\n  {NewCodeL, NewCode} = jump_to([C | CodeL], Code, 1),\n  interpreter(NewCodeL, NewCode, TapeL, TapeR);\ninterpreter(CodeL, Code = [$] | _], TapeL, TapeR = [$1 | _]) ->\n  {NewCodeL, NewCode} = jump_back(CodeL, Code, 1),\n  interpreter(NewCodeL, NewCode, TapeL, TapeR);\n\ninterpreter(CodeL, [C | Code], TapeL, TapeR) ->\n  interpreter([C | CodeL], Code, TapeL, TapeR).\n\nflip($0) -> $1;\nflip($1) -> $0.\n\n\njump_to(CodeL, Code, 0) ->\n  {CodeL, Code};\njump_to(_CodeL, [], _N) ->\n  {[], []};\njump_to(CodeL, [C = $[ | Code], N) ->\n  jump_to([C | CodeL], Code, N + 1);\njump_to(CodeL, [C = $] | Code], N) ->\n  jump_to([C | CodeL], Code, N - 1);\njump_to(CodeL, [C | Code], N) ->\n  jump_to([C | CodeL], Code, N).\n\n\njump_back(CodeL, Code, 0) ->\n  {CodeL, Code};\njump_back([], _Code, _N) ->\n  {[], []};\njump_back([C = $] | CodeL], Code, N) ->\n  jump_back(CodeL, [C | Code], N + 1);\njump_back([C = $[ | CodeL], Code, N) ->\n  jump_back(CodeL, [C | Code], N - 1);\njump_back([C | CodeL], Code, N) ->\n  jump_back(CodeL, [C | Code], N).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80880,"user_id":null,"body":"-module(custom_small_fuck).\n-export([interpreter\/2]).\n\ninterpreter(Code, Tape) ->\n  io:format(user, \"RUN: ~p ~p\n\", [Code, Tape]),\n  FinalTape = run({[], Code}, {[], hd(Tape), tl(Tape)}),\n  stream(FinalTape).\n\nrun(Code, Tape) ->\n  try\n    {Cmd, Code1} = next(Code),\n    {Code2, Tape2} = run_cmd(Cmd, Code1, Tape),\n    run(Code2, Tape2)\n  catch \n    throw:oob -> Tape;\n    throw:eos -> Tape\n  end.\n\nrun_cmd($>, Code, Tape)              -> {Code, right(Tape)};\nrun_cmd($<, Code, Tape)              -> {Code, left(Tape)};\nrun_cmd($*, Code, Tape)              -> {Code, flip(Tape)};\nrun_cmd($[, Code, Tape = {_, $0, _}) -> {scanr($], $[, Code), Tape};\nrun_cmd($], Code, Tape = {_, $1, _}) -> {scanl($[, $], Code), Tape};\nrun_cmd(_, Code, Tape)               -> {Code, Tape}.\n\nstream({Xs, Z, Ys}) -> lists:reverse(Xs) ++ [Z | Ys].\n\n%% Instruction actions\nnext({Xs, [Y | Ys]}) -> {Y, {[Y | Xs], Ys}};\nnext(_)              -> throw(eos).\n\nprev({[X | Xs], Ys}) -> {X, {Xs, [X | Ys]}};\nprev(_)              -> throw(eos).\n\nscanr(C0, C1, Code) -> scan(fun next\/1, C0, C1, Code, 0).\nscanl(C0, C1, Code) -> scan(fun prev\/1, C0, C1, Code, -1).\n\nscan(Step, C0, C1, Code, Depth) ->\n  case Step(Code) of\n    {_, eos}   -> eos;\n    {C0, Code1} when Depth == 0 -> Code1;\n    {C0, Code1} -> scan(Step, C0, C1, Code1, Depth - 1);\n    {C1, Code1} -> scan(Step, C0, C1, Code1, Depth + 1);\n    {_, Code1} -> scan(Step, C0, C1, Code1, Depth)\n  end.\n   \n%% Tape actions\n\nleft({[X | Xs], Z, Ys}) -> {Xs, X, [Z | Ys]};\nleft(_)                 -> throw(oob).\n\nright({Xs, Z, [Y | Ys]}) -> {[Z | Xs], Y, Ys};\nright(_)                 -> throw(oob).\n\nflip({Xs, $0, Ys}) -> {Xs, $1, Ys};\nflip({Xs, $1, Ys}) -> {Xs, $0, Ys}.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80881,"user_id":null,"body":"-module(custom_small_fuck).\n-export([interpreter\/2]).\n\ninterpreter(Code, Tape) ->\n    Tape1 = [V - $0 || V <- Tape],\n    Tape2 = run([], Code, [], Tape1),\n    [V + $0 || V <- Tape2].\n\nrun(_, [], TapeL, TapeR) ->\n    lists:reverse(TapeL) ++ TapeR;\nrun(Old_code, [Cmd|Rest], TapeL, [TapeHead|TapeRest]=TapeR) ->\n    case Cmd of\n        $> -> case TapeRest of\n                  [] -> lists:reverse([TapeHead|TapeL]);\n                  _  -> run([Cmd|Old_code], Rest, [TapeHead|TapeL], TapeRest)\n              end;\n        $< -> case TapeL of\n                  []        -> TapeR;\n                  [TLH|TLR] -> run([Cmd|Old_code], Rest, TLR, [TLH|TapeR])\n              end;\n        $* ->\n            TapeHead1 = (TapeHead + 1) rem 2,\n            run([Cmd|Old_code], Rest, TapeL, [TapeHead1|TapeRest]);\n        $[ -> case TapeHead of\n                  0 -> {Old, New} = jump_right([Cmd|Old_code], Rest, 0),\n                       run(Old, New, TapeL, TapeR);\n                  1 -> run([Cmd|Old_code], Rest, TapeL, TapeR)\n              end;\n        $] -> case TapeHead of\n                  0 -> run([Cmd|Old_code], Rest, TapeL, TapeR);\n                  1 -> {Old, New} = jump_left(Old_code, [Cmd|Rest], 0),\n                       run(Old, New, TapeL, TapeR)\n              end;\n        _  -> run(Old_code, Rest, TapeL, TapeR)\n    end.\n\n\njump_right(Old, [], _)           -> {Old, []};\njump_right(Old, [$]|New], 0)     -> {[$]|Old], New};\njump_right(Old, [$]|New], Nest)  -> jump_right([$]|Old], New, Nest-1);\njump_right(Old, [$[|New], Nest)  -> jump_right([$[|Old], New, Nest+1);\njump_right(Old, [Cmd|New], Nest) -> jump_right([Cmd|Old], New, Nest).\n\njump_left([$[|Old], New, 0)     -> {Old, [$[|New]};\njump_left([$[|Old], New, Nest)  -> jump_left(Old, [$[|New], Nest-1);\njump_left([$]|Old], New, Nest)  -> jump_left(Old, [$]|New], Nest+1);\njump_left([Cmd|Old], New, Nest) -> jump_left(Old, [Cmd|New], Nest).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80882,"user_id":null,"body":"-module(custom_small_fuck).\n-export([interpreter\/2]).\n\nflip($0) -> $1;\nflip($1) -> $0;\nflip(_) -> throw(\"Wrong input\").\n\nflipn(_,_,Res,[]) -> lists:reverse(Res);\nflipn(N,I,Res,[TH|TT]) when I == N -> flipn(N,I+1,[flip(TH)|Res],TT);\nflipn(N,I,Res,[TH|TT]) -> flipn(N,I+1,[TH|Res],TT).\n\nflipn(N,Tape) -> flipn(N,0,[],Tape).\n\nsmallfuck([], StackC, Tape, Pointer, TapeLength) -> Tape;\nsmallfuck(_, _, Tape, Pointer, _) when Pointer < 0 -> Tape;\nsmallfuck(_, _, Tape, Pointer, TapeLength) when Pointer >= TapeLength -> Tape;\nsmallfuck([$[|TC], StackC, Tape, Pointer, TapeLength) ->\n  case lists:nth(Pointer+1,Tape) of\n    $0 -> jump_past(TC, [$[|StackC], Tape, Pointer, TapeLength, 0);\n    $1 -> smallfuck(TC, [$[|StackC], Tape, Pointer, TapeLength)\n  end;\nsmallfuck([$]|TC], StackC, Tape, Pointer, TapeLength) ->\n  case lists:nth(Pointer+1,Tape) of\n    $1 -> jump_back(TC, [$]|StackC], Tape, Pointer, TapeLength, 0);\n    $0 -> smallfuck(TC, [$]|StackC], Tape, Pointer, TapeLength)\n  end;\nsmallfuck([$[|TC], StackC, Tape, Pointer, TapeLength) -> smallfuck(TC, [$[|StackC], Tape, Pointer, TapeLength);\nsmallfuck([$>|TC], StackC, Tape, Pointer, TapeLength) -> smallfuck(TC, [$>|StackC], Tape, Pointer+1, TapeLength);\nsmallfuck([$<|TC], StackC, Tape, Pointer, TapeLength) -> smallfuck(TC, [$>|StackC], Tape, Pointer-1, TapeLength);\nsmallfuck([$*|TC], StackC, Tape, Pointer, TapeLength) -> smallfuck(TC, [$*|StackC], flipn(Pointer,Tape), Pointer, TapeLength);\nsmallfuck([_|TC], StackC, Tape, Pointer, TapeLength) -> smallfuck(TC, [StackC], Tape, Pointer, TapeLength).\n\njump_past([$]|TC], StackC, Tape, Pointer, TapeLength, 0) -> smallfuck(TC, [$]|StackC], Tape, Pointer, TapeLength);\njump_past([$[|TC], StackC, Tape, Pointer, TapeLength, H) -> jump_past(TC, [$[|StackC], Tape, Pointer, TapeLength, H+1);\njump_past([$]|TC], StackC, Tape, Pointer, TapeLength, H) -> jump_past(TC, [$]|StackC], Tape, Pointer, TapeLength, H-1);\njump_past([HC|TC], StackC, Tape, Pointer, TapeLength, H) -> jump_past(TC, [HC|StackC], Tape, Pointer, TapeLength, H).\n\njump_back(Code, [$[|StackC], Tape, Pointer, TapeLength, 1) -> smallfuck([$[|Code], StackC, Tape, Pointer, TapeLength);\n\njump_back(Code, [$]|StackC], Tape, Pointer, TapeLength, H) -> jump_back([$]|Code], StackC, Tape, Pointer, TapeLength, H+1);\njump_back(Code, [$[|StackC], Tape, Pointer, TapeLength, H) -> jump_back([$[|Code], StackC, Tape, Pointer, TapeLength, H-1);\n\njump_back(Code, [HS|TS], Tape, Pointer, TapeLength, H) -> jump_back([HS|Code], TS, Tape, Pointer, TapeLength, H).\n\ninterpreter(Code, Tape) ->\n  io:format(Code),\n  smallfuck(Code, [], Tape, 0, string:length(Tape)).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80883,"user_id":null,"body":"-module(custom_small_fuck).\n-export([interpreter\/2]).\n\n-define(LEFT, $<).\n-define(RIGHT, $>).\n-define(FLIP, $*).\n-define(IF, $[).\n-define(ENDIF, $]).\n\ninterpreter(Code, Tape) ->\n  interp(code_reader(Code), tape(Tape)).\n\ninterp({_, _, false}, Tape) ->\n  tape_bits(Tape);\ninterp(_, {L, R, false}) ->\n  tape_bits({L, R, false});\ninterp(CR, T) ->\n  Cmd = read(CR),\n  case Cmd of\n    ?LEFT -> interp(right(CR), left(T));\n    ?RIGHT -> interp(right(CR), right(T));\n    ?FLIP -> interp(right(CR), flip(T));\n    ?IF ->\n      Bit = read(T),\n      if\n        Bit == $0 -> interp(if_jump(CR), T);\n        true -> interp(right(CR), T)\n      end;\n    ?ENDIF ->\n      interp(endif_jump(CR), T);\n    _ -> interp(right(CR), T)\n  end.\n\ncode_reader(Code) ->\n  {[], Code, true}.\n\ntape(Bits) ->\n  {[], Bits, true}.\n\nright({_, _, false}) ->\n  throw(outofbounds);\nright({L, [R], true}) ->\n  {L, [R], false};\nright({L, [HR|TR], true}) ->\n  {[HR|L], TR, true}.\n\nleft({_, _, false}) ->\n  throw(outofbounds);\nleft({[], R, true}) ->\n  {[], R, false};\nleft({[HL|TL], R, true}) ->\n  {TL, [HL|R], true}.\n  \nflip({_, _, false}) ->\n  throw(outofbounds);\nflip({L, [HR|TR], true}) ->\n  case HR of\n    $0 -> {L, [$1|TR], true};\n    $1 -> {L, [$0|TR], true}\n  end.\n  \ntape_bits({[], R, _}) ->\n  R;\ntape_bits({[LH|LT], R, _}) ->\n  tape_bits({LT, [LH|R], null}).\n\nread({_, _, false}) ->\n  outofbounds;\nread({_, [HR|_], true}) ->\n  HR.\n\nif_jump(CodeReader) ->\n  Cmd = read(CodeReader),\n  case Cmd of\n    ?IF ->\n      if_jump(CodeReader, 1);\n    _ ->\n      currcmdnotif\n  end.\n\nif_jump(CodeReader, Balance) ->\n  NewCodeReader = right(CodeReader),\n  case read(NewCodeReader) of\n    outofbounds ->\n      NewCodeReader;\n    ?IF ->\n      if_jump(NewCodeReader, Balance + 1);\n    ?ENDIF ->\n      if\n        Balance == 1 ->\n          right(NewCodeReader); \n        true ->\n          if_jump(NewCodeReader, Balance - 1)\n      end;\n    _ -> if_jump(NewCodeReader, Balance)\n  end.\n\nendif_jump(CodeReader) ->\n  Cmd = read(CodeReader),\n  case Cmd of\n    ?ENDIF ->\n      endif_jump(CodeReader, 1);\n    _ ->\n      throw(currcmdnotendif)\n  end.\n\nendif_jump(CodeReader, Balance) ->\n  NewCodeReader = left(CodeReader),\n  case read(NewCodeReader) of\n    outofbounds ->\n      NewCodeReader;\n    ?IF ->\n      if\n        Balance == 1 ->\n          NewCodeReader;\n        true ->\n          endif_jump(NewCodeReader, Balance - 1)\n      end;\n    ?ENDIF ->\n      endif_jump(NewCodeReader, Balance + 1);\n    _ -> endif_jump(NewCodeReader, Balance)\n  end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80884,"user_id":null,"body":"-module(custom_small_fuck).\n-export([interpreter\/2]).\n\nflip($0) -> $1;\nflip($1) -> $0.\n\nforward([$]|Code],Done,0) -> {Code,[$]|Done]};\nforward([$]|Code],Done,C)-> forward(Code,[$]|Done],C-1);\nforward([$[|Code],Done,C) -> forward(Code,[$[|Done],C+1);  \nforward([Op|Code],Done,C) -> forward(Code,[Op|Done],C). \n\nrewind([$[|Code],Done,0) -> {[$[|Code],Done};\nrewind([$[|Code],[N|Done],C)-> rewind([N,$[|Code],Done,C-1);\nrewind([$]|Code],[N|Done],C) -> rewind([N,$]|Code],Done,C+1);  \nrewind(Code,[N|Done],C) -> rewind([N|Code],Done,C). \n\ninterpreter(Code, Tape) ->\n  interpreter(Code, Tape, 0, []).\n\ninterpreter([],Tape,_,_) -> Tape;\ninterpreter(_,Tape,Pos,_) when Pos<0 -> Tape;\ninterpreter(_,Tape,Pos,_) when Pos>=length(Tape) -> Tape;\ninterpreter([$<|Code],Tape,Pos,Done) -> interpreter(Code,Tape,Pos-1,[$<|Done]);\ninterpreter([$>|Code],Tape,Pos,Done) -> interpreter(Code,Tape,Pos+1,[$>|Done]);\ninterpreter([$*|Code],Tape,Pos,Done) -> interpreter(Code,change(Tape,Pos),Pos,[$*|Done]);\ninterpreter([$[|Code],Tape,Pos,Done) -> \n  case lists:nth(Pos+1,Tape) of\n    $1 ->\n      interpreter(Code,Tape,Pos,[$[|Done]);\n    $0 ->\n      {NewCode,NewDone} = forward(Code,[$[|Done],0),\n      interpreter(NewCode,Tape,Pos,NewDone)\n  end;\ninterpreter([$]|Code],Tape,Pos,Done) -> \n  case lists:nth(Pos+1,Tape) of\n    $0 ->\n      interpreter(Code,Tape,Pos,[$]|Done]);\n    $1 ->\n      {NewCode,NewDone} = rewind([$]|Code],Done,-1),\n      interpreter(NewCode,Tape,Pos,NewDone)\n  end;\ninterpreter([_|Code],Tape,Pos,Done) -> interpreter(Code,Tape,Pos,Done).\n\n\nchange(List,Pos) ->\n  lists:sublist(List,Pos) ++ [flip(lists:nth(Pos+1,List))] ++ lists:nthtail(Pos+1,List).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80885,"user_id":null,"body":"-module(custom_small_fuck).\n-include_lib(\"eunit\/include\/eunit.hrl\").\n-export([interpreter\/2, find_nested_close_bracket\/2, find_nested_open_bracket\/2]).\n\ninterpreter(Code, Tape) ->\n  io:format(\"\\\"~s\\\", \\\"~s\\\"~n\", [Code, Tape]),\n  fetch_instruction(Code, Tape, 1, 1).\n\nfetch_instruction(Code, Tape, CP, TP) ->\n  if \n    CP > length(Code) -> \n      Tape;\n    TP > length(Tape) ->\n      Tape;\n    TP < 1 ->\n      Tape;\n    CP < 1 ->\n      Tape;\n    true ->\n      parse_instruction(Code, Tape, CP, TP)\n  end.\n\n\nparse_instruction(Code, Tape, CP, TP) ->\n  Inst = lists:nth(CP, Code),\n  case Inst of\n% * - Flip the bit at the current cell (TP)\n    $* -> fetch_instruction(Code, flip_the_bit(Tape, TP), CP + 1, TP);\n% > - Move pointer to the right (by 1 cell)\n    $> -> fetch_instruction(Code, Tape, CP + 1, TP + 1);\n% < - Move pointer to the left (by 1 cell)\n    $< -> fetch_instruction(Code, Tape, CP + 1, TP - 1);\n% [ - Jump past matching ] if value at current cell is 0\n    $[ -> jump_forward(Code, Tape, CP, TP);\n% ] - Jump back to matching [ (if value at current cell is nonzero)\n    $] -> jump_backward(Code, Tape, CP, TP);\n% ignore unknown commands\n    _ -> fetch_instruction(Code, Tape, CP + 1, TP)\n  end.\n\n% [ - Jump past matching ] if value at current cell is 0\njump_forward(Code, Tape, NewCP, TP) -> \n  jump_forward(Code, Tape, NewCP, TP, lists:nth(TP,Tape)).\n\njump_forward(Code, Tape, CP, TP, CurCell) when CurCell == $1 ->\n  fetch_instruction(Code, Tape, CP + 1, TP);\njump_forward(Code, Tape, CP, TP, CurCell) when CurCell == $0 ->\n  % only search Code from current position\n  Index = find_nested_close_bracket(Code, CP),\n  case Index of\n    not_found ->\n      Tape;\n    _ ->\n      fetch_instruction(Code, Tape, CP + Index + 1, TP)\n  end.\n\nfind_nested_close_bracket(Code, CP) ->\n  RestOfCode = lists:nthtail(CP, Code),\n  find_nested_close_bracket_loop(RestOfCode, 1).\n\nfind_nested_close_bracket_loop([H|T], Acc) -> \n  case H of\n    $[ -> \n      NestedClose = find_nested_close_bracket_loop(T, 1),\n      case NestedClose of\n        not_found -> not_found;\n        _ -> \n          NewList = lists:nthtail(NestedClose, T),\n          find_nested_close_bracket_loop(NewList, Acc + NestedClose + 1)\n      end;\n    $] ->\n      Acc;\n    _ ->\n      find_nested_close_bracket_loop(T, Acc + 1)\n  end;\nfind_nested_close_bracket_loop([], _) -> \n  not_found.\n\n% ] - Jump back to matching [ (if value at current cell is nonzero)\njump_backward(Code, Tape, NewCP, TP) -> \n  jump_backward(Code, Tape, NewCP, TP, lists:nth(TP,Tape)).\n\njump_backward(Code, Tape, CP, TP, CurCell) when CurCell == $0 ->\n  fetch_instruction(Code, Tape, CP + 1, TP);\njump_backward(Code, Tape, CP, TP, CurCell) when CurCell == $1 ->\n  RevIndex = find_nested_open_bracket(Code, CP),\n  case RevIndex of\n    not_found ->\n      Tape;\n    _ ->\n      Index = length(Code) - RevIndex,\n      fetch_instruction(Code, Tape, Index + 1, TP)\n  end.\n\nfind_nested_open_bracket(Code, CP) ->\n  ReverseCode = lists:reverse(Code),\n  RevCP = (length(Code) - CP) + 1,\n  RestOfRevCode = lists:nthtail(RevCP, ReverseCode),\n  find_nested_open_bracket_loop(RestOfRevCode, 1).\n\nfind_nested_open_bracket_loop([H|T], Acc) -> \n  case H of\n    $] -> \n      NestedClose = find_nested_open_bracket_loop(T, 1),\n      case NestedClose of\n        not_found -> not_found;\n        _ -> \n          NewList = lists:nthtail(NestedClose, T),\n          find_nested_open_bracket_loop(NewList, Acc + NestedClose + 1)\n      end;\n    $[ ->\n      Acc;\n    _ ->\n      find_nested_open_bracket_loop(T, Acc + 1)\n  end;\n\nfind_nested_open_bracket_loop([], _) -> \n  not_found.\n\n\n% \nflip_the_bit(Tape, TP) when TP == 0 ->\n  [swapBool(lists:nth(TP,Tape))] ++ lists:nthtail(TP,Tape);\nflip_the_bit(Tape, TP) ->\n  lists:sublist(Tape,TP-1) ++ [swapBool(lists:nth(TP,Tape))] ++ lists:nthtail(TP,Tape).\n\nswapBool($0) -> $1;\nswapBool($1) -> $0.\n\nfind_nested_close_bracket_test() -> \n  5 = custom_small_fuck:find_nested_close_bracket(\"[[]*>]\", 1).\n\nfind_nested_open_bracket_test() -> \n  5 = custom_small_fuck:find_nested_open_bracket(\"[[]*>]\", 6).\n\ntest(Desc, Code, Tape, ExceptedTape) ->\n  {Desc, ?_assertEqual(ExceptedTape, custom_small_fuck:interpreter(Code, Tape))}.\n\n% codewars sample tests\nexample_test_() ->\n  {\"Should work for some example test cases\", [\n    test(\"Flips the leftmost cell of the tape\", \"*\", \"00101100\", \"10101100\"),\n    test(\"Flips the second and third cell of the tape\", \">*>*\", \"00101100\", \"01001100\"),\n    test(\"Flips all the bits in the tape\", \"*>*>*>*>*>*>*>*\", \"00101100\", \"11010011\"),\n    test(\"Flips all the bits that are initialized to 0\", \"*>*>>*>>>*>*\", \"00101100\", \"11111111\"),\n    test(\"Goes somewhere to the right of the tape and then flips all bits that are initialized to 1, progressing leftwards through the tape\", \">>>>>*<*<<*\", \"00101100\", \"00000000\"),\n    test(\"Your interpreter should also work properly with nested loops-5\", \"[*>[>*>]>]\", \"11001\", \"01100\")\n  ]}.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80886,"user_id":null,"body":"-module(custom_small_fuck).\n-include_lib(\"eunit\/include\/eunit.hrl\").\n-export([interpreter\/2, find_nested_close_bracket\/2, find_nested_open_bracket\/2]).\n\ninterpreter(Code, Tape) ->\n  io:format(\"\\\"~s\\\", \\\"~s\\\"~n\", [Code, Tape]),\n  fetch_instruction(Code, Tape, 1, 1).\n\nfetch_instruction(Code, Tape, CP, TP) ->\n  if \n    CP > length(Code) -> \n      Tape;\n    TP > length(Tape) ->\n      Tape;\n    TP < 1 ->\n      Tape;\n    CP < 1 ->\n      Tape;\n    true ->\n      parse_instruction(Code, Tape, CP, TP)\n  end.\n\n\nparse_instruction(Code, Tape, CP, TP) ->\n  Inst = lists:nth(CP, Code),\n  case Inst of\n% * - Flip the bit at the current cell (TP)\n    $* -> fetch_instruction(Code, flip_the_bit(Tape, TP), CP + 1, TP);\n% > - Move pointer to the right (by 1 cell)\n    $> -> fetch_instruction(Code, Tape, CP + 1, TP + 1);\n% < - Move pointer to the left (by 1 cell)\n    $< -> fetch_instruction(Code, Tape, CP + 1, TP - 1);\n% [ - Jump past matching ] if value at current cell is 0\n    $[ -> jump_forward(Code, Tape, CP, TP);\n% ] - Jump back to matching [ (if value at current cell is nonzero)\n    $] -> jump_backward(Code, Tape, CP, TP);\n% ignore unknown commands\n    _ -> fetch_instruction(Code, Tape, CP + 1, TP)\n  end.\n\n% [ - Jump past matching ] if value at current cell is 0\njump_forward(Code, Tape, NewCP, TP) -> \n  jump_forward(Code, Tape, NewCP, TP, lists:nth(TP,Tape)).\n\njump_forward(Code, Tape, CP, TP, CurCell) when CurCell == $1 ->\n  fetch_instruction(Code, Tape, CP + 1, TP);\njump_forward(Code, Tape, CP, TP, CurCell) when CurCell == $0 ->\n  % only search Code from current position\n  Index = find_nested_close_bracket(Code, CP),\n  case Index of\n    not_found ->\n      Tape;\n    _ ->\n      fetch_instruction(Code, Tape, CP + Index + 1, TP)\n  end.\n\nfind_nested_close_bracket(Code, CP) ->\n  RestOfCode = lists:nthtail(CP, Code),\n  find_nested_close_bracket_loop(RestOfCode, 1).\n\nfind_nested_close_bracket_loop([H|T], Acc) -> \n  case H of\n    $[ -> \n      NestedClose = find_nested_close_bracket_loop(T, 1),\n      case NestedClose of\n        not_found -> not_found;\n        _ -> \n          NewList = lists:nthtail(NestedClose, T),\n          find_nested_close_bracket_loop(NewList, Acc + NestedClose + 1)\n      end;\n    $] ->\n      Acc;\n    _ ->\n      find_nested_close_bracket_loop(T, Acc + 1)\n  end;\nfind_nested_close_bracket_loop([], _) -> \n  not_found.\n\n% ] - Jump back to matching [ (if value at current cell is nonzero)\njump_backward(Code, Tape, NewCP, TP) -> \n  jump_backward(Code, Tape, NewCP, TP, lists:nth(TP,Tape)).\n\njump_backward(Code, Tape, CP, TP, CurCell) when CurCell == $0 ->\n  fetch_instruction(Code, Tape, CP + 1, TP);\njump_backward(Code, Tape, CP, TP, CurCell) when CurCell == $1 ->\n  RevIndex = find_nested_open_bracket(Code, CP),\n  case RevIndex of\n    not_found ->\n      Tape;\n    _ ->\n      Index = length(Code) - RevIndex,\n      fetch_instruction(Code, Tape, Index + 1, TP)\n  end.\n\nfind_nested_open_bracket(Code, CP) ->\n  ReverseCode = lists:reverse(Code),\n  RevCP = (length(Code) - CP) + 1,\n  RestOfRevCode = lists:nthtail(RevCP, ReverseCode),\n  find_nested_open_bracket_loop(RestOfRevCode, 1).\n\nfind_nested_open_bracket_loop([H|T], Acc) -> \n  case H of\n    $] -> \n      NestedClose = find_nested_open_bracket_loop(T, 1),\n      case NestedClose of\n        not_found -> not_found;\n        _ -> \n          NewList = lists:nthtail(NestedClose, T),\n          find_nested_open_bracket_loop(NewList, Acc + NestedClose + 1)\n      end;\n    $[ ->\n      Acc;\n    _ ->\n      find_nested_open_bracket_loop(T, Acc + 1)\n  end;\n\nfind_nested_open_bracket_loop([], _) -> \n  not_found.\n\n\n% \nflip_the_bit(Tape, TP) when TP == 0 ->\n  [swapBool(lists:nth(TP,Tape))] ++ lists:nthtail(TP,Tape);\nflip_the_bit(Tape, TP) ->\n  lists:sublist(Tape,TP-1) ++ [swapBool(lists:nth(TP,Tape))] ++ lists:nthtail(TP,Tape).\n\nswapBool($0) -> $1;\nswapBool($1) -> $0.\n\nfind_nested_close_bracket_test() -> \n  5 = custom_small_fuck:find_nested_close_bracket(\"[[]*>]\", 1).\n\nfind_nested_open_bracket_test() -> \n  5 = custom_small_fuck:find_nested_open_bracket(\"[[]*>]\", 6).\n\ntest(Desc, Code, Tape, ExceptedTape) ->\n  {Desc, ?_assertEqual(ExceptedTape, custom_small_fuck:interpreter(Code, Tape))}.\n\n% codewars sample tests\nexample_test_() ->\n  {\"Should work for some example test cases\", [\n    test(\"Flips the leftmost cell of the tape\", \"*\", \"00101100\", \"10101100\"),\n    test(\"Flips the second and third cell of the tape\", \">*>*\", \"00101100\", \"01001100\"),\n    test(\"Flips all the bits in the tape\", \"*>*>*>*>*>*>*>*\", \"00101100\", \"11010011\"),\n    test(\"Flips all the bits that are initialized to 0\", \"*>*>>*>>>*>*\", \"00101100\", \"11111111\"),\n    test(\"Goes somewhere to the right of the tape and then flips all bits that are initialized to 1, progressing leftwards through the tape\", \">>>>>*<*<<*\", \"00101100\", \"00000000\"),\n    test(\"Your interpreter should also work properly with nested loops-5\", \"[*>[>*>]>]\", \"11001\", \"01100\"),\n    test(\"Random-test-2\", \"<*>*<<<<>*>>*<****>*<*><**>**><<<*<><>><<**<><<<>*>>>>*<*<**<<><*><<>*<*<><*<><<*<<*>><****>***><><<>*<<<<<>*>*>>><**>><*>><><<*<<<><**>**<<>*>>*<*><*>>>><*>**<*<*<*>*<*>>*<**<*<><*><><>>*<*>****>><<<*><<<**>*<<*>>*><><><<>*>>*<**>*<*<*>>*<><<<>*<<*<><***<<<>>*<<<**><<<*<*<*<<*>>*<>*><><**<>>*<<*>*><>><<<<**<*>*><*<**<*><>**>*>**>>**>*<<<<*>>><<*<<\", \"0101000111101010101010011110110001100100111101010010110111001000110010111100100011001100000000101000001100010110011111011100100110000111101111011010010100101100010010010101000011111001100001101110101010100011100010010100001101011100101001111111010100101000001001010111011110001101101010010110011101010001110010000011000011011000001110001111000100110001000101000110010001000111101001001111101010110011100100001111000000011110000001100111101111111100010011110001010011111000010101000111010010011010001100010100101011000011011110001111111110101110100010101111101111000110110001101101010011101000101001010000110110110010010000011010101110111000101011110010011100111110011001000110100001111001011011111100110010100010100101001101001011010111100001110110010011100100010010000010111110111011101001101111110101001000011001111101010001011011000010110011101101101000010110110100101010000101110010010110010110010011011001111110010100010110111101000010101110100011100011000100100101100101101111001001110101100100\", \"0101000111101010101010011110110001100100111101010010110111001000110010111100100011001100000000101000001100010110011111011100100110000111101111011010010100101100010010010101000011111001100001101110101010100011100010010100001101011100101001111111010100101000001001010111011110001101101010010110011101010001110010000011000011011000001110001111000100110001000101000110010001000111101001001111101010110011100100001111000000011110000001100111101111111100010011110001010011111000010101000111010010011010001100010100101011000011011110001111111110101110100010101111101111000110110001101101010011101000101001010000110110110010010000011010101110111000101011110010011100111110011001000110100001111001011011111100110010100010100101001101001011010111100001110110010011100100010010000010111110111011101001101111110101001000011001111101010001011011000010110011101101101000010110110100101010000101110010010110010110010011011001111110010100010110111101000010101110100011100011000100100101100101101111001001110101100100\")\n  ]}.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80887,"user_id":null,"body":"-module(custom_small_fuck).\n-export([interpreter\/2]).\n\ninterpreter(Code, Tape) ->\n  interpreter(Code, Tape, 1, 1).\n\ninterpreter(Code, Tape, CodePos, TapePos) when\n  CodePos =< 0 orelse\n    TapePos =< 0 orelse\n    CodePos > length(Code) orelse\n    TapePos > length(Tape)\n  ->\n  Tape;\ninterpreter(Code, Tape, CodePos, TapePos) ->\n  case lists:nth(CodePos, Code) of\n    $> ->\n      interpreter(Code, Tape, CodePos + 1, TapePos + 1);\n    $< ->\n      interpreter(Code, Tape, CodePos + 1, TapePos - 1);\n    $* ->\n      interpreter(Code, flip(Tape, TapePos), CodePos + 1, TapePos);\n    $[ ->\n      interpreter(Code, Tape, maybe_jump_right(Code, CodePos, lists:nth(TapePos, Tape)), TapePos);\n    $] ->\n      interpreter(Code, Tape, maybe_jump_left(Code, CodePos, lists:nth(TapePos, Tape)), TapePos);\n    _ ->\n      interpreter(Code, Tape, CodePos + 1, TapePos)\n  end.\n\nflip(Tape, TapePos) ->\n  case lists:split(TapePos - 1, Tape) of\n    {H, [$0 | T]} -> H ++ [$1 | T];\n    {H, [$1 | T]} -> H ++ [$0 | T]\n  end.\n\nmaybe_jump_right(Code, CodePos, $0) ->\n  do_jump_right(Code, CodePos + 1, 1);\nmaybe_jump_right(_Code, CodePos, _) ->\n  CodePos + 1.\n\ndo_jump_right(Code, CodePos, _N) when CodePos > length(Code) ->\n  CodePos;\ndo_jump_right(_Code, CodePos, 0) ->\n  CodePos;\ndo_jump_right(Code, CodePos, N) ->\n  case lists:nth(CodePos, Code) of\n    $[ ->\n      do_jump_right(Code, CodePos + 1, N + 1);\n    $] ->\n      do_jump_right(Code, CodePos + 1, N - 1);\n    _ ->\n      do_jump_right(Code, CodePos + 1, N)\n  end.\n\nmaybe_jump_left(_Code, CodePos, $0) ->\n  CodePos + 1;\nmaybe_jump_left(Code, CodePos, _) ->\n  do_jump_left(Code, CodePos - 1, 1).\n\ndo_jump_left(_Code, CodePos, _N) when CodePos < 0 ->\n  CodePos + 1;\ndo_jump_left(_Code, CodePos, 0) ->\n  CodePos + 1;\ndo_jump_left(Code, CodePos, N) ->\n  case lists:nth(CodePos, Code) of\n    $[ ->\n      do_jump_left(Code, CodePos - 1, N - 1);\n    $] ->\n      do_jump_left(Code, CodePos - 1, N + 1);\n    _ ->\n      do_jump_left(Code, CodePos - 1, N)\n  end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80888,"user_id":null,"body":"-module(custom_small_fuck).\n-export([interpreter\/2]).\n\njumps([], _I, _Q, D) -> D;\njumps([$[ | S], I, Q, D) -> jumps(S, I + 1, [I | Q], D);\njumps([$] | S], I, [J | Q], D) -> jumps(S, I + 1, Q, dict:store(J, I, dict:store(I, J, D)));\njumps([_ | S], I, Q, D) -> jumps(S, I + 1, Q, D).\n\nrun(S, T, Ip, Tp, J) ->\n  Cont = (Ip < array:size(S)) and (Tp >= 0) and (Tp < array:size(T)),\n  if\n    Cont ->\n      case array:get(Ip, S) of\n        $> -> run(S, T, Ip + 1, Tp + 1, J);\n        $< -> run(S, T, Ip + 1, Tp - 1, J);\n        $* -> run(S, array:set(Tp, array:get(Tp, T) bxor 1, T), Ip + 1, Tp, J);\n        $[ ->\n          Z = array:get(Tp, T) == $0,\n          run(S, T, (if Z -> dict:fetch(Ip, J); true -> Ip end) + 1, Tp, J);\n        $] ->\n          Z = array:get(Tp, T) == $0,\n          run(S, T, (if Z -> Ip; true -> dict:fetch(Ip, J) end) + 1, Tp, J);\n        _ -> run(S, T, Ip + 1, Tp, J)\n      end;\n    true ->\n      array:to_list(T)\n  end.\n\ninterpreter(Code, Tape) ->\n  % io:format(\"Code: ~p~nTape: ~p~n\", [Code, Tape]),\n  run(array:from_list(Code), array:from_list(Tape), 0, 0, jumps(Code, 0, [], dict:new())).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"586dd26a69b6fd46dd0000c0":[{"id":80889,"user_id":null,"body":"-module(mini_string_fuck).\n-export([my_first_interpreter\/1]).\n\nmy_first_interpreter(Code) ->\n    run(Code, 0).\n\nrun([$+|T], N) -> run(T, (N+1) rem 256);\nrun([$.|T], N) -> [N|run(T, N)];\nrun([_|T], N)  -> run(T, N);\nrun(_, _)      -> [].","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80890,"user_id":564,"body":"-module(mini_string_fuck).\n-export([my_first_interpreter\/1]).\n\nmy_first_interpreter(Code) -> interp(Code, 0).\n\ninterp([], _) ->\n  \"\";\ninterp([Op|Code], Mem) ->\n  if\n    Op == 43 -> interp(Code, (Mem + 1) rem 256);\n    Op == 46 -> [Mem] ++ interp(Code, Mem);\n    true -> interp(Code, Mem)\n  end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80891,"user_id":null,"body":"-module(mini_string_fuck).\n-export([my_first_interpreter\/1]).\n\nmy_first_interpreter(Code) ->\n  interpret(Code).\n\ninterpret(Code) -> interpret(Code, 0, []).\n\ninterpret([], _, Output) ->\n  lists:reverse(Output);\ninterpret([$+ | Code], Curr, Output) ->\n  interpret(Code, (Curr + 1) rem 256, Output);\ninterpret([$. | Code], Curr, Output) ->\n  interpret(Code, Curr, [Curr | Output]);\ninterpret([_ | Code], Curr, Output) ->\n  interpret(Code, Curr, Output).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80892,"user_id":null,"body":"-module(mini_string_fuck).\n-export([my_first_interpreter\/1]).\n\nmy_first_interpreter(Code) ->\n  Coms = [Com || Com <- Code, (Com==$+) or (Com==$.)],\n  Groups = [string:length(Group) || Group <- string:split(Coms, \".\", all)],\n  ac(Groups, length(Groups)-1).\n  \nac(A, 1) -> [hd(A)];\nac(A, I) when I>1 -> Tmp = ac(A, I-1), Tmp ++ [(lists:last(Tmp) + lists:nth(I, A)) rem 256].\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80893,"user_id":null,"body":"-module(mini_string_fuck).\n-export([my_first_interpreter\/1]).\n\nmy_first_interpreter(Code) ->\n  my_first_interpreter(Code, 0, []).\n\nmy_first_interpreter([], _M, O) -> lists:reverse(O);\nmy_first_interpreter(L, 256, O) ->\n  my_first_interpreter(L, 0, O);\nmy_first_interpreter([$+ | T], M, O) ->\n  my_first_interpreter(T, M+1, O);\nmy_first_interpreter([$. | T], M, O) ->\n  my_first_interpreter(T, M, [M] ++ O);\nmy_first_interpreter([_H | T], M, O) ->\n  my_first_interpreter(T, M, O).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80894,"user_id":53,"body":"-module(mini_string_fuck).\n-export([my_first_interpreter\/1]).\n\nmy_first_interpreter(Code) ->\n  Tape = unicode:characters_to_binary(Code),\n  process(string:next_codepoint(Tape), \"\", 0).\n  \nprocess([$+ | T], Word, Register) -> process(string:next_codepoint(T), Word, (Register + 1) rem 256);\nprocess([$. | T], Word, Register) -> process(string:next_codepoint(T), string:concat(Word, string:chars(Register, 1)), Register);\nprocess([_ | T], Word, Register) -> process(string:next_codepoint(T), Word, Register);\nprocess([], Word, _) -> Word.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80895,"user_id":null,"body":"-module(mini_string_fuck).\n-export([my_first_interpreter\/1]).\n\nmy_first_interpreter(Code) -> my_first_interpreter(Code, 0, []).\n\nmy_first_interpreter([], _, S) -> S;\nmy_first_interpreter([H|Code], Cell, S) when H =:= 43, Cell =:= 255 -> my_first_interpreter(Code, 0, S);\nmy_first_interpreter([H|Code], Cell, S) when H =:= 43 -> my_first_interpreter(Code, Cell + 1, S);\nmy_first_interpreter([H|Code], Cell, S) when H =:= 46 -> my_first_interpreter(Code, Cell, S ++ [Cell]);\nmy_first_interpreter([H|Code], Cell, S) -> my_first_interpreter(Code, Cell, S).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80896,"user_id":null,"body":"-module(mini_string_fuck).\n-export([my_first_interpreter\/1]).\n\nmy_first_interpreter(Code) ->\n  interpret(Code, 0, []).\n\ninterpret([], _Cell, Acc) -> Acc;\ninterpret([$+|Code], Cell, Acc) ->\n  interpret(Code, Cell + 1, Acc);\ninterpret([$.|Code], Cell, Acc) ->\n  interpret(Code, Cell, Acc ++ [Cell rem 256]);\ninterpret([_|Code], Cell, Acc) ->\n  interpret(Code, Cell, Acc).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80897,"user_id":null,"body":"-module(mini_string_fuck).\n-export([my_first_interpreter\/1]).\n\nmy_first_interpreter(Code) ->\n  interpret(Code, 0, []).\n\ninterpret([], _Cell, Acc) -> Acc;\ninterpret([C|Code], Cell, Acc) when [C] =:= \"+\" ->\n  interpret(Code, Cell + 1, Acc);\ninterpret([C|Code], Cell, Acc) when [C] =:= \".\" ->\n  interpret(Code, Cell, Acc ++ [Cell rem 256]);\ninterpret([_|Code], Cell, Acc) ->\n  interpret(Code, Cell, Acc).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80898,"user_id":null,"body":"-module(mini_string_fuck).\n-export([my_first_interpreter\/1]).\n\ninterpreter([],_,R) -> lists:flatten([io_lib:format(\"~c\", [V]) || V <- lists:reverse(R)]);\ninterpreter([H|T],C,R) when H == $+ -> interpreter(T,(C+1),R);\ninterpreter([H|T],C,R) when H == $. -> interpreter(T,C,[C|R]);\ninterpreter([H|T],C,R) -> interpreter(T,C,R).\n\nmy_first_interpreter(Code) -> interpreter(Code,0,[]).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5886e082a836a691340000c3":[{"id":80899,"user_id":53,"body":"-module(kata).\n-import(math, [sqrt\/1]).\n-export([rectangle_rotation\/2]).\n\nrectangle_rotation(A, B) -> \n  X = trunc(floor(float(A) \/ sqrt(2))),\n  Y = trunc(floor(float(B) \/ sqrt(2))),\n  R = (X + 1) * (Y + 1) + X * Y,\n  R + (R rem 2) - 1.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80900,"user_id":645,"body":"-module(kata).\n-export([rectangle_rotation\/2]).\n\nrectangle_rotation(A, B) ->\n  H = trunc(A \/ math:sqrt(2)),\n  V = trunc(B \/ math:sqrt(2)),\n  H * V + (H + 1) * (V + 1) - (H rem 2 bxor V rem 2).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80901,"user_id":168,"body":"-module(kata).\n-export([rectangle_rotation\/2]).\n\nrectangle_rotation(A, B) -> \n  X = trunc(A \/ math:sqrt(2)),\n  Y = trunc(B \/ math:sqrt(2)),\n  2 * X * Y + X + Y + (X + Y + 1) rem 2.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80902,"user_id":null,"body":"-module(kata).\n-export([rectangle_rotation\/2]).\n\nrectangle_rotation(A, B) ->\n  LengthOfOnePoint = math:sqrt(2),\n  CountOfFirstSide = round(math:ceil(A \/ LengthOfOnePoint)),\n  CountOfSecondSide = round(math:ceil(B \/ LengthOfOnePoint)),\n  if\n    CountOfFirstSide rem 2 == CountOfSecondSide rem 2 -> CountOfSecondSide * CountOfFirstSide + (CountOfSecondSide - 1) * (CountOfFirstSide - 1);\n    CountOfFirstSide rem 2 == 1 -> CountOfSecondSide * (CountOfFirstSide - 1) + (CountOfSecondSide - 1) * (CountOfFirstSide);\n    CountOfSecondSide rem 2 == 1 -> (CountOfSecondSide - 1) * CountOfFirstSide + CountOfSecondSide * (CountOfFirstSide - 1)\n  end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80903,"user_id":null,"body":"-module(kata).\n-export([rectangle_rotation\/2]).\n\nzero_or_two(X) when X-floor(X) < 0.5 -> 0;\nzero_or_two(X) -> 2.\n\nrectangle_rotation(A, B) -> \n  LD = (A \/ math:sqrt(2)) \/ 2,\n  SD = (B \/ math:sqrt(2)) \/ 2,\n  RectExt1 = 2 * math:floor(LD) + 1,\n  RectExt2 = 2 * math:floor(SD) + 1,\n  RectInt1 = 2 * math:floor(LD) + zero_or_two(LD), %%(floor(LD)*2), %%rem 1 < 0.5 ? 0 : 2),\n  RectInt2 = 2 * math:floor(SD) + zero_or_two(SD), %%(floor(SD)*2), %% rem 1 < 0.5 ? 0 : 2),\n  Res = (RectExt1 * RectExt2 + RectInt1 * RectInt2),\n  erlang:list_to_integer(erlang:float_to_list(Res,[{decimals,0}])).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80904,"user_id":null,"body":"-module(kata).\n-export([rectangle_rotation\/2]).\n\nrectangle_rotation(A, B) -> \n  S2 = math:sqrt(2)*2,\n  A1 = A\/S2,\n  B1 = B\/S2,\n  (floor(A1)*2+1)*(floor(B1)*2+1)+4*round(A1)*round(B1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80905,"user_id":null,"body":"-module(kata).\n-export([rectangle_rotation\/2]).\n\n% mathwars...\nrectangle_rotation(A, B) ->\n  W = trunc(A\/math:sqrt(2)),\n  H = trunc(B\/math:sqrt(2)),\n  R = (W+1)*(H+1) + (W*H),\n  R + (R band 1) - 1.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80906,"user_id":535,"body":"-module(kata).\n-export([rectangle_rotation\/2]).\n\nrad(X) -> X * math:pi() \/ 180.\ndeg(X) -> X * 180 \/ math:pi().\npyth(X, Y) -> math:sqrt(X*X + Y*Y).\npoint(Alpha, Radius) -> {Radius*math:cos(Alpha), Radius*math:sin(Alpha)}.\ncount(A, B) -> math:floor(B) - math:floor(A).\n\nrectangle_rotation(A, B) when B < A -> rectangle_rotation(B, A);\nrectangle_rotation(A, B) ->\n  Radius = pyth(A\/2, B\/2),\n  Alpha = abs(rad(deg(math:atan(A\/B))-45)),\n  Beta = abs(rad(180-deg(math:atan(A\/B))-45)),\n  {Xa, Ya} = point(Alpha, Radius),\n  {_Xb, Yb} = point(Beta, Radius),\n  X0 = Xa - Ya,\n  X1 = Xa + Ya,\n  Seq = lists:seq(trunc(math:ceil(Ya)), trunc(Yb)),\n  Sum = lists:sum([count(Y-X0, -Y+X1) || Y <- Seq]),\n  trunc(count(-X0, X0) * count(-Ya, Ya) + 2*Sum).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80907,"user_id":null,"body":"-module(kata).\n-export([rectangle_rotation\/2]).\n\n% We rotate the rectangle and its integer grid back 45 degrees.\n% This yields a grid of diamond shaped cells.\n% The vertices form two types of horizontal layers:\n%   Type 0: k * sqrt(2)\n%   Type 1: sqrt(2)\/2 + (k-1) * sqrt(2)\n\nk0(X) ->\n  trunc((X div 2) \/ math:sqrt(2.0)).\n\nvertices_0(X) ->\n  1 + 2 * k0(X).\n\n\nk1(X) ->\n  trunc((X div 2) \/ math:sqrt(2.0) + 0.5).\n\nvertices_1(X) ->\n  2 * k1(X).\n\n\nrectangle_rotation(A, B) ->\n  vertices_0(A) * vertices_0(B) + vertices_1(A) * vertices_1(B).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80908,"user_id":null,"body":"-module(kata).\n-export([rectangle_rotation\/2]).\n\nrectangle_rotation(A, B) -> \n    A_h = ceil(A\/math:sqrt(2)),\n    B_h = ceil(B\/math:sqrt(2)),\n    A_l = floor(A\/math:sqrt(2)),\n    B_l = floor(B\/math:sqrt(2)),\n    if\n        ((A_h+B_h) rem 2) == 0 ->  A_h*B_h + B_l*A_l;\n        true                   ->  A_h*B_l + B_h*A_l\n    end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"58941fec8afa3618c9000184":[{"id":80909,"user_id":null,"body":"-module(kata).\n-export([growing_plant\/3]).\n\ngrowing_plant(U, D, H) ->\n  max(ceil((H - U) \/ (U - D)) + 1, 1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80910,"user_id":null,"body":"-module(kata).\n-export([growing_plant\/3]).\n\ngrowing_plant(Up_speed, Down_speed, Desired_height) when Desired_height - Up_speed < 1 ->\n  1;\n\ngrowing_plant(Up_speed, Down_speed, Desired_height) ->\n  1 + growing_plant(Up_speed, Down_speed, Desired_height - Up_speed + Down_speed).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80911,"user_id":53,"body":"-module(kata).\n-export([growing_plant\/3]).\n\ngrowing_plant(U, D, M) ->\n  max(1, ceil((M - D) \/ (U - D))).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80912,"user_id":null,"body":"-module(kata).\n-export([growing_plant\/3]).\n\ngrowing_plant(Up_speed, Down_speed, Desired_height) ->\n  Min = (Desired_height - Down_speed) \/ (Up_speed - Down_speed),\n  case Min < 1 of\n    true -> 1;\n    false -> ceil(Min)\n  end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80913,"user_id":564,"body":"-module(kata).\n-export([growing_plant\/3]).\n\ngrowing_plant(Up, Down, Target) ->\n  if Target - Up < 0 -> 1;\n     true -> 1 + ceil((Target - Up) \/ (Up - Down))\n  end.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80914,"user_id":null,"body":"-module(kata).\n-export([growing_plant\/3, grow\/5]).\n\ngrowing_plant(Up_speed, Down_speed, Desired_height) ->\n  grow(Up_speed, Down_speed, Desired_height, 1, Up_speed).\n\ngrow(Up, Down, Stop, Day, H) when H >= Stop ->\n  io:fwrite(\"After day ~p --> ~p\", [Day, H]),\n  Day;\ngrow(Up, Down, Stop, Day, H) ->\n  io:fwrite(\"After day ~p --> ~p\", [Day, H]),\n  io:fwrite(\"After night ~p --> ~p\", [Day, H - Down]),\n  grow(Up, Down, Stop, Day+1, H - Down + Up).\n  ","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80915,"user_id":null,"body":"-module(kata).\n-export([growing_plant\/3]).\n\nnight(Current, Up_speed, Down_speed, Desired_height, N_day) ->\n  day(Current - Down_speed, Up_speed, Down_speed, Desired_height, N_day).\n\nday(Current, Up_speed, Down_speed, Desired_height, N_day) ->\n  check(Current + Up_speed, Up_speed, Down_speed, Desired_height, N_day + 1).\n\ncheck(Current, Up_speed, Down_speed, Desired_height, N_day)\n  when Current >= Desired_height -> N_day;\ncheck(Current, Up_speed, Down_speed, Desired_height, N_day)\n  when Current < Desired_height -> night(Current, Up_speed, Down_speed, Desired_height, N_day).\n  \n\ngrowing_plant(Up_speed, Down_speed, Desired_height) ->\n  day(0, Up_speed, Down_speed, Desired_height, 0).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80916,"user_id":null,"body":"-module(kata).\n-export([growing_plant\/3]).\n\ngrowing2(Up, Down, Dh, Days, Height) ->\n    Reached = Height + Up,\n    if Reached >= Dh -> Days+1;\n       true -> growing2(Up, Down, Dh, Days+1, Reached-Down)\n    end.\n\ngrowing_plant(Up_speed, Down_speed, Desired_height) ->\n  growing2(Up_speed, Down_speed, Desired_height, 0, 0).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80917,"user_id":null,"body":"-module(kata).\n-export([growing_plant\/3]).\n\ngrowing_plant(Up_speed, Down_speed, Desired_height) ->\n  growing_plant(Up_speed, Down_speed, Desired_height, 0, 0, day).\n\n-spec growing_plant(Up_speed :: integer(), Down_speed :: integer(), Desired_height :: integer(), Days :: integer(), Heigh :: integer(), Mode :: day | night) -> integer().\ngrowing_plant(_Up_speed, _Down_speed, Desired_height, Days, Height, _Mode) when Height >= Desired_height \n                                                                  -> \n  Days;\n\ngrowing_plant(Up_speed, Down_speed, Desired_height, Days, Height, day) ->   \n  growing_plant(Up_speed, Down_speed, Desired_height, Days + 1, Height + Up_speed, night);\n\ngrowing_plant(Up_speed, Down_speed, Desired_height, Days, Height, night) ->   \n  growing_plant(Up_speed, Down_speed, Desired_height, Days, Height - Down_speed, day).\n\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80918,"user_id":null,"body":"-module(kata).\n-export([growing_plant\/3]).\n\ngrowing_plant(Up_speed, _Down_speed, Desired_height) when Up_speed >= Desired_height -> 1;\ngrowing_plant(Up_speed, Down_speed, Desired_height) ->\n  1 + growing_plant(Up_speed, Down_speed, Desired_height - Up_speed + Down_speed).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"58ce8725c835848ad6000007":[{"id":80919,"user_id":527,"body":"-module(kata).\n-export([potatoes\/3]).\n\n-spec potatoes(non_neg_integer(), non_neg_integer(), non_neg_integer()) -> non_neg_integer().\npotatoes(P0, W0, P1) -> W0 * (100 - P0) div (100 - P1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80920,"user_id":492,"body":"-module(kata).\n-export([potatoes\/3]).\n\n-spec(potatoes(integer(), integer(), integer()) -> integer()).\n\npotatoes(P0, W0, P1) ->\n    (W0 * (100 - P0)) div (100 - P1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5a03b3f6a1c9040084001765":[{"id":80921,"user_id":527,"body":"-module(kata).\n-export([angle\/1]).\n\nangle(N) -> 180 * (N - 2).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80922,"user_id":null,"body":"-module(kata).\n-export([angle\/1]).\n\nangle(N) -> 180 * N - 360.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80923,"user_id":null,"body":"-module(kata).\n-export([angle\/1]).\n\nangle(N) when (N > 2) and (N - abs(N) == 0) -> 180*(N - 2).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80924,"user_id":null,"body":"-module(kata).\n-export([angle\/1]).\n\nangle(N) when N == 3 -> 180;\nangle(N) when N > 3 -> 180 + angle(N-1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80925,"user_id":null,"body":"-module(kata).\n-export([angle\/1]).\n\nangle(N) when N =:= 3 -> 180;\nangle(N) ->\n  180 + angle(N - 1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80926,"user_id":null,"body":"-module(kata).\n-export([angle\/1]).\n\nangle(I) -> (I - 2) * 180.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80927,"user_id":null,"body":"-module(kata).\n-export([angle\/1]).\n\nangle(N) ->\n  round((180 - (360 \/ N)) * N).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80928,"user_id":null,"body":"-module(kata).\n-export([angle\/1]).\n\n-spec angle(integer()) -> integer().\nangle(N) when is_integer(N), N > 2 ->\n  (N - 2) * 180.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80929,"user_id":null,"body":"-module(kata).\n-export([angle\/1]).\n\n-spec angle(Integer) -> Integer.\nangle(N) -> (N-2)*180.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80930,"user_id":null,"body":"-module(kata).\n-export([angle\/1]).\n\nangle(N) -> N*180 - 360.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5a045fee46d843effa000070":[{"id":80931,"user_id":null,"body":"-module(kata).\n-export([decomp\/1]).\n\n-spec(decomp(integer()) -> string()).\n\nisPrime(N) -> isPrime(N, 2).\nisPrime(N, M) when 2 * M > N -> true;\nisPrime(N, M) when N rem M == 0 -> false;\nisPrime(N, M) -> isPrime(N, M + 1).\n\nfactors(N) -> lists:reverse(factors(N, [], 2)).\nfactors(1, R, _K) -> R;\nfactors(N, R, K) ->\n  PK = isPrime(K),\n  PN = isPrime(N),\n  if\n    PN -> [N | R];\n    PK andalso N rem K == 0 -> factors(N div K, [K | R], K);\n    true -> factors(N, R, K + 1)\n  end.\n\ndecomp(N) ->\n  F = lists:flatten(decomp_internal(N, [])),\n  M = lists:keysort(1, maps:to_list(counter(F))),\n  string:join(lists:map(\n    fun\n      ({K, 1}) -> integer_to_list(K);\n      ({K, V}) -> lists:flatten(io_lib:format(\"~w^~w\", [K, V]))\n    end, M), \" * \").\ndecomp_internal(2, R) -> [2 | R];\ndecomp_internal(N, R) -> decomp_internal(N - 1, [factors(N) | R]).\n\ncounter(X) -> counter(X, #{}).\ncounter([], X) -> X;\ncounter([H | T], X) ->\n  IsKey = maps:is_key(H, X),\n  if\n    IsKey -> counter(T, maps:put(H, maps:get(H, X) + 1, X));\n    true -> counter(T, maps:put(H, 1, X))\n  end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80932,"user_id":492,"body":"-module(kata).\n-export([decomp\/1]).\n\n-spec(decomp(integer()) -> string()).\n\nfactors(N) ->\n     factors(N, 2, []). \nfactors(1, _, Acc) -> Acc;\nfactors(N, K, Acc) when N < K * K -> [N | Acc];\nfactors(N, K, Acc) when N rem K == 0 ->\n    factors(N div K, K, [K | Acc]);\nfactors(N, K, Acc) ->\n    factors(N, K + 1, Acc).\nfrequency(A) ->\n    Keys  = lists:usort(A), \n    Count = fun(V, L) -> length(lists:filter(fun(E) -> E == V end, L)) end,\n    lists:map(fun(K) -> { K, Count(K, A) } end, Keys).\ntuple2String({E, K}) ->\n    case K == 1 of \n        true ->\n            integer_to_list(E);\n        _ ->\n            integer_to_list(E) ++ \"^\" ++ integer_to_list(K)\n    end.\n\ndecomp(N) ->\n\tA=lists:flatmap(fun(K) -> factors(K) end, lists:seq(2, N)),\n\tB=frequency(A),\n\tstring:join(lists:map(fun(H) -> tuple2String(H) end, B), \" * \").","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80933,"user_id":null,"body":"-module(kata).\n-export([decomp\/1, to_exponents_helper\/2]).\n\nsundaram(1) -> [];\nsundaram(2) -> [2];\nsundaram(Max) ->\n\tN = case Max rem 2 of\n\t\t0 -> Max div 2 - 1;\n\t    1 -> (Max - 1) div 2\n\tend,\n\tIs = lists:seq(1, N),\n\tFun = fun(I, NotPrime) ->\n\t\tJs = lists:seq(I, N),\n\t\tlists:foldl(\n\t\t\tfun(J, NotPrime_) ->\n\t\t\t\tsets:add_element(I+J+2*I*J, NotPrime_) end\n\t\t\t  , NotPrime\n\t\t\t  , Js)\n\t\tend,\n\tNotPrime = lists:foldl(Fun, sets:new(), Is),\n\tProtoPrimes = lists:filter(\n\t\tfun(X) -> not sets:is_element(X, NotPrime) end\n\t  , lists:seq(1, N)),\n\t[2 | lists:map(fun(X) -> 2*X + 1 end, ProtoPrimes)].\n\nmerge([], List) -> List;\nmerge(List, []) -> List;\nmerge([E1|List1], List2 = [E2|_]) when E1 < E2 -> \n    [E1|merge(List1, List2)];\nmerge(List1, [E|List2]) ->\n    [E|merge(List1, List2)].\nsmallest_div(N, []) ->\n    N;\nsmallest_div(N, [P|_]) when N rem P == 0 ->\n    P;\nsmallest_div(N, [P|Primes]) -> \n    case P > trunc(math:sqrt(N)) of\n        true -> N;\n        _    -> smallest_div(N, Primes)\n    end.\ndecomp(1, _) -> [];\ndecomp(N, Primes) ->\n    Div = smallest_div(N, Primes),\n    [Div | decomp(N div Div, Primes)].\ndecomp_fac(N) ->\n    Primes = sundaram(trunc(math:sqrt(N))),\n    lists:foldl(\n        fun(I, Divs) -> merge(decomp(I, Primes), Divs) end\n      , []\n      , lists:seq(2, N)).\nto_exponents(Divs) ->\n    lists:reverse(lists:foldl(fun ?MODULE:to_exponents_helper\/2, [], Divs)).\nto_exponents_helper(N, []) ->\n    [{N, 1}];\nto_exponents_helper(N, [{N, X}|Rest]) ->\n    [{N, X+1}|Rest];\nto_exponents_helper(N, Rest) ->\n    [{N, 1}|Rest].\nexp_to_string([])            -> \"\";\nexp_to_string([{N, 1}])      -> io_lib:format(\"~B\", [N]);\nexp_to_string([{N, 1}|Rest]) -> io_lib:format(\"~B * \", [N]) ++ exp_to_string(Rest);\nexp_to_string([{N, X}])      -> io_lib:format(\"~B^~B\", [N, X]);\nexp_to_string([{N, X}|Rest]) -> io_lib:format(\"~B^~B * \", [N, X]) ++ exp_to_string(Rest).\n-spec(decomp(integer()) -> string()).\ndecomp(N) ->\n\tlists:flatten(exp_to_string(to_exponents(decomp_fac(N)))).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5a057ec846d843c81a0000ad":[{"id":80934,"user_id":492,"body":"-module(kata).\n-export([cycle\/1]).\n\n-spec(cycle(integer()) -> integer()).\n\naux(I, X, Acc) ->\n    A = (10 * Acc) rem X,\n    case A of\n    1 -> I;\n    _ -> aux(I + 1, X, A)\n    end.\ncycle(N) ->\n    if (N rem 2 == 0) or (N rem 5 == 0) -> -1;\n    true ->\n        aux(1, N, 1)\n    end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5a3e1319b6486ac96f000049":[{"id":80935,"user_id":564,"body":"-module(kata).\n-export([pairs\/1]).\n\none_or(1, _) -> 1;\none_or(_, X) -> X.\n\npairs([]) -> 0;\npairs([_]) -> 0;\npairs([A,B|CS]) -> one_or(abs(A-B), 0) + pairs(CS).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80936,"user_id":null,"body":"-module(kata).\n-export([pairs\/1]).\n\npairs([A, B | Tail], Sum) when abs(A - B) == 1 -> pairs(Tail, Sum + 1);\npairs([_, _ | Tail], Sum) -> pairs(Tail, Sum);\npairs(_, Sum) -> Sum.\n\npairs(Xs) -> pairs(Xs, 0).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80937,"user_id":564,"body":"-module(kata).\n-export([pairs\/1]).\n\none_or_nothing(A, B) -> case abs(A - B) of 1 -> 1; _ -> 0 end.\n\npairs([]) -> 0;\npairs([_]) -> 0;\npairs([A,B|CS]) -> one_or_nothing(A, B) + pairs(CS).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80938,"user_id":564,"body":"-module(kata).\n-export([pairs\/1]).\n\none_or(1, _) -> 1;\none_or(_, X) -> X.\n\npairs(Ns) -> pairs(Ns, 0).\n\npairs([], Acc) -> Acc;\npairs([_], Acc) -> Acc;\npairs([A,B|Cs], Acc) ->\n  Sum = Acc + one_or(abs(A-B), 0),\n  pairs(Cs, Sum).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80939,"user_id":null,"body":"-module(kata).\n-export([pairs\/1]).\n\npairs(List) -> pairs(List, 0).\n\npairs([], Count) -> Count;\npairs([_], Count) -> Count;\npairs([I1, I2 | List], Count) when abs(I2 - I1) == 1 -> pairs(List, Count + 1);\npairs([_, _ | List], Count) -> pairs(List, Count).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80940,"user_id":null,"body":"-module(kata).\n-export([pairs\/1]).\n\npairs([]) -> 0;\npairs([_]) -> 0;\npairs([X|[Y|Z]]) -> \n  if abs(X-Y) == 1 -> 1 + pairs(Z);\n     true -> pairs(Z)\n  end.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80941,"user_id":null,"body":"-module(kata).\n-export([pairs\/1]).\n\ncount_pairs([], C) -> C;\ncount_pairs([_], C) -> C;\ncount_pairs([N1, N2 | Tail], C) when abs(N1 - N2) =:= 1 -> \n  count_pairs(Tail, C+1);\ncount_pairs([_, _ | Tail], C) -> count_pairs(Tail, C).\n \npairs(NumList) -> count_pairs(NumList, 0).\n\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80942,"user_id":null,"body":"-module(kata).\n-export([pairs\/1]).\n\npairs(List) -> pairs(List, 0).\n\npairs(List, Count) when length(List) < 2 -> Count;\npairs([A, B | Acc], Count) ->\n  case abs(A-B) of\n    1 -> pairs(Acc, Count + 1);\n    _ -> pairs(Acc, Count)\n  end.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80943,"user_id":null,"body":"-module(kata).\n-export([pairs\/1]).\n\npairs(List) -> pairs(List,0).\n\npairs(List, Count) when length(List) < 2-> Count;\npairs(List, Count) ->\n  A = lists:nth(1 , List),\n  B = lists:nth(2 , List),\n  case A - B  of\n    X when abs(X) == 1 -> pairs(lists:nthtail(2, List) , Count +1);\n    _-> pairs(lists:nthtail(2, List) , Count)\n  end.\n\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80944,"user_id":null,"body":"-module(kata).\n-export([pairs\/1]).\n\npairs([]) -> 0;\npairs([_ | []]) -> 0;\npairs([H | [H2 | T2]]) ->\n  case H - H2 of \n    1 -> 1 + pairs(T2);\n    -1 -> 1 + pairs(T2);\n    _ -> pairs(T2)\n  end.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5a3fe3dde1ce0e8ed6000097":[{"id":80945,"user_id":null,"body":"-module(kata).\n-export([century_from_year\/1]).\n\ncentury_from_year(Year) ->\n  ((Year-1) div 100)+1.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80946,"user_id":null,"body":"-module(kata).\n-export([century_from_year\/1]).\n\ncentury_from_year(Year) -> ceil(Year \/ 100).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80947,"user_id":null,"body":"-module(kata).\n-export([century_from_year\/1]).\n\ncentury_from_year(Jahr) ->\n    trunc(math:floor((Jahr - 1)\/100 + 1)).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80948,"user_id":null,"body":"-module(kata).\n-export([century_from_year\/1]).\n\ncentury_from_year(Year) when Year<101 ->\n  1;\ncentury_from_year(Year) ->\n  1+century_from_year(Year-100).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80949,"user_id":null,"body":"-module(kata).\n-export([century_from_year\/1]).\n\ncentury_from_year(Year) ->\n  century_from_year2(Year div 100, Year rem 100).\n\ncentury_from_year2(X, 0) ->\n  X;\ncentury_from_year2(X, _) ->\n  X + 1.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80950,"user_id":null,"body":"-module(kata).\n-export([century_from_year\/1]).\n\ncentury_from_year(Year) -> 1 + ((Year - 1) div 100).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80951,"user_id":null,"body":"-module(kata).\n-export([century_from_year\/1]).\n\ncentury_from_year(Year) ->\n  case Year\/100 == Year div 100 of\n    false -> (Year div 100) + 1;\n    true -> Year div 100\n  end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80952,"user_id":1883,"body":"-module(kata).\n-export([century_from_year\/1]).\n\nget_century_from_year(Year) -> get_century_from_year(Year div 100, Year rem 100).\nget_century_from_year(C, 0) -> C;\nget_century_from_year(C, _) -> C + 1.\n\ncentury_from_year(Year) -> get_century_from_year(Year).\n  ","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80953,"user_id":null,"body":"-module(kata).\n-export([century_from_year\/1]).\n\ncentury_from_year(Year) ->\n%%  your_code_here.\n  io:format(\"~w, ~w, ~w, ~w, ~s~n\", [Year, Year-1, (Year-1)\/100, floor((Year-1)\/100), \"erlang\"]),\n  floor((Year-1)\/100) + 1.\n\nfloor(X) when X >= 0 -> trunc(X);\nfloor(X) -> trunc(X) - 1.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80954,"user_id":null,"body":"-module(kata).\n-export([century_from_year\/1]).\n\ncentury_from_year(Year) ->\n  Temp = Year rem 100,\n  if Temp > 0 -> (Year div 100) + 1;\n     Temp =:= 0 -> Year div 100\n  end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5a4d303f880385399b000001":[{"id":80955,"user_id":null,"body":"-module(kata).\n-export([strong\/1]).\n\n\nstrong(N) -> X = strongh(N,0),\n           if X ==  N  -> \"STRONG!!!!\";\n             true ->  \"Not Strong !!\"\n             end.\n\n\nstrongh(0,S) -> S;\nstrongh(N,S) -> strongh(N div 10, S + fac(N rem 10)).\nfac(0) -> 1;\nfac(N) -> N*fac(N-1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80956,"user_id":645,"body":"-module(kata).\n-export([strong\/1]).\n\nstrong(N) -> case lists:member(N, [1, 2, 145, 40585]) of true -> \"STRONG!!!!\"; false -> \"Not Strong !!\" end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80957,"user_id":53,"body":"-module(kata).\n-export([strong\/1]).\n\ndigits(0)-> 0;\ndigits(N) when N < 10 -> [N];\ndigits(N) when N >= 10 -> digits(N div 10)++[N rem 10].\n\nfactorial(0) -> 1;\nfactorial(N) -> N * factorial(N-1).\n\nfacsum(N) -> lists:foldl(fun(D, Sum) -> factorial(D) + Sum end, 0, digits(N)).\n\nstrong(N) ->\n  M = facsum(N),\n  if\n  M == N ->\n     \"STRONG!!!!\";\n  true ->\n     \"Not Strong !!\"\n  end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80958,"user_id":564,"body":"-module(kata).\n-export([strong\/1, fact\/1]).\n\nfact(0) -> 1;\nfact(N) -> N * fact(N-1).\n\ndigits(0) -> [];\ndigits(N) -> digits(trunc(N \/ 10)) ++ [N rem 10].\n\nstrong(N) ->\n  Digits = digits(N),\n  Facts = lists:map(fun kata:fact\/1, Digits),\n  FactSum = lists:sum(Facts),\n  case N =:= FactSum of\n    true -> \"STRONG!!!!\";\n    false -> \"Not Strong !!\"\n  end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80959,"user_id":null,"body":"-module(kata).\n-export([strong\/1]).\n\nstrong(Number) ->\n  case lists:sum([factorial(E - $0) || E <- integer_to_list(Number)]) of\n    N when N =:= Number -> \"STRONG!!!!\";\n    _ -> \"Not Strong !!\"\n  end.\n\nfactorial(0) -> 1;\nfactorial(N) -> N * factorial(N - 1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80960,"user_id":null,"body":"-module(kata).\n-export([strong\/1]).\n\nstrong(N) ->\n  case f(N) of\n    N -> \"STRONG!!!!\";\n    _ -> \"Not Strong !!\"\n  end.\n\nf(N) when N == 0 -> N;\nf(N) -> fact(N rem 10) + f(N div 10).\n\nfact(N) when N =< 1 -> 1;\nfact(N) -> N * fact(N - 1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80961,"user_id":null,"body":"-module(kata).\n-export([strong\/1]).\n\nstrong(N) ->\n  case lists:sum(lists:map(fun(X) -> lists:foldl(fun(X,Y) -> X*Y end, 1, lists:seq(1,X-48)) end, integer_to_list(N))) of\n    N -> \"STRONG!!!!\";\n    _ -> \"Not Strong !!\"\n  end.\n  ","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80962,"user_id":null,"body":"-module(kata).\n-export([strong\/1]).\n\nfact(0) -> 1;\nfact(1) -> 1;\nfact(2) -> 2;\nfact(3) -> 6;\nfact(4) -> 24;\nfact(5) -> 120;\nfact(6) -> 720;\nfact(7) -> 5040;\nfact(8) -> 40320;\nfact(9) -> 362880.\n\nstrong2(0, Sum) -> Sum;\nstrong2(Number, Sum) -> \n    strong2(Number div 10, Sum + fact(Number rem 10)).\n\nstrong(N) -> \n    Result = strong2(N, 0),\n    if Result == N -> \"STRONG!!!!\";\n       true -> \"Not Strong !!\"\n    end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80963,"user_id":null,"body":"-module(kata).\n-export([strong\/1]).\n\n\nstrong(N) -> \n  Temp = factofdigits(N, 0),\n  if \n    Temp == N -> \"STRONG!!!!\";\n    true -> \"Not Strong !!\"\n  end.\n\n\nfactorial(N) when N == 0 -> 1;\nfactorial(N) when N > 0 -> N * factorial(N-1).\n\n\nfactofdigits(N, Acc) when N == 0 -> Acc;\nfactofdigits(N, Acc) when N > 0 ->\n  TempN = N div 10,\n  TempAcc = Acc + factorial(N rem 10),\n  factofdigits(TempN, TempAcc).\n  ","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80964,"user_id":null,"body":"-module(kata).\n-export([strong\/1]).\nfact(N) when N < 1-> 1;\nfact(N) -> \n  N * fact(N-1).\n\nstrong(N) ->\n  Res = lists:foldl(\n          fun(X, Acc) -> fact(list_to_integer([X])) + Acc end,\n          0, integer_to_list(N)),\n\n  if  Res == N -> \"STRONG!!!!\";\n      true -> \"Not Strong !!\"\n  end.\n    ","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5a63948acadebff56f000018":[{"id":80965,"user_id":null,"body":"-module(kata).\n-export([max_product\/2]).\n\nmax_product(A, S) ->\n  lists:foldl(fun(Num, Prod) -> Num * Prod end, 1, lists:nthtail(length(A) - S, lists:sort(A))).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80966,"user_id":null,"body":"-module(kata).\n-export([max_product\/2]).\n\nmax_product(_, 0) -> 1;\nmax_product(A, S) -> \n  M = lists:max(A),\n  M * max_product(A--[M], S-1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80967,"user_id":null,"body":"-module(kata).\n-export([max_product\/2]).\n\nmax_product(A, S) -> lists:foldl(fun(X, Prod) -> X * Prod end, 1,lists:nthtail(length(A) - S ,lists:sort(A))).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80968,"user_id":null,"body":"-module(kata).\n-export([max_product\/2]).\n\nproduct2(A, 0, Product) -> Product;\nproduct2([H|T], S, Product) ->\n    product2(T, S-1, Product*H).\n\nmax_product(A, S) -> \n    SortedA = lists:reverse(lists:sort(A)),\n    product2(SortedA, S, 1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80969,"user_id":null,"body":"-module(kata).\n-export([max_product\/2]).\n\nget_max_n(Array, N) ->\n  Sorted = lists:reverse(lists:sort(Array)),\n  lists:sublist(Sorted, N).\n\nmax_product(Array, N) -> \n  MaxN = get_max_n(Array, N),\n  lists:foldl(fun (X, Acc) -> Acc * X end, 1, MaxN).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80970,"user_id":null,"body":"-module(kata).\n-export([max_product\/2]).\n\nmax_product(List, Count) -> get_max_product(lists:reverse(lists:sort(List)), Count, 1).\n\nget_max_product([], 0, Value) -> Value;\nget_max_product([], _, Value) -> Value;\nget_max_product([_], 0, Value) -> Value;\nget_max_product([_|_], 0, Value) -> Value;\nget_max_product([NValue], Count, Value) -> get_max_product([], Count, NValue*Value);\nget_max_product([NextMax|Other], Count, Value) -> get_max_product(Other, Count-1, NextMax*Value).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80971,"user_id":null,"body":"-module(kata).\n-export([max_product\/2]).\n\nmax_product(A,0) ->1;\nmax_product(A, S) -> \n  Max = lists:max(A),\n  Max * max_product(A--[Max],S-1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80972,"user_id":null,"body":"-module(kata).\n-export([max_product\/2]).\n-import(lists, [sort\/1,foldl\/3,nthtail\/2]).\n\nmax_product(A, S) ->\n    List = sort(A), \n    Nth = length(A) - S,\n    foldl(fun(Val,Acc) -> Acc*Val end, 1, nthtail(Nth,List)).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80973,"user_id":null,"body":"-module(kata).\n-export([max_product\/2]).\n\nmax_product(A, S) ->\n  Sorted = lists:sort(fun(X, Y) -> X > Y end, A),\n  {Maxs, _} = lists:split(S, Sorted),\n  lists:foldl(fun(X, A) -> A * X end, 1, Maxs).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80974,"user_id":null,"body":"-module(kata).\n-export([max_product\/2]).\n\nmax_product(A, S) ->\n  L = lists:sort(fun(X, Y) -> X > Y end, A),\n  product(lists:sublist(L, S)).\n\nproduct([X]) -> X;\nproduct([X|T]) -> X * product(T).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5a662a02e626c54e87000123":[{"id":80975,"user_id":645,"body":"-module(kata).\n-export([extra_perfect\/1]).\n\nextra_perfect(N) -> lists:seq(1, N, 2).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80976,"user_id":null,"body":"-module(kata).\n-export([extra_perfect\/1]).\n\nextra2(Number, Number2) when Number2 == Number + 1 -> [];\nextra2(Number, Number2) ->\n  if (Number2 rem 2) == 1 -> [Number2] ++ extra2(Number, Number2+1);\n  true -> extra2(Number, Number2+1)\n  end.\n\nextra_perfect(N) -> \n  extra2(N, 0).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80977,"user_id":53,"body":"-module(kata).\n-export([extra_perfect\/1]).\n\nextra_perfect(Num) -> \n  lists:seq(1, Num, 2).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80978,"user_id":null,"body":"-module(kata).\n-import(lists, [seq\/3]).\n-export([extra_perfect\/1]).\n\nextra_perfect(N) -> seq(1, N, 2).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80979,"user_id":null,"body":"-module(kata).\n-export([extra_perfect\/1]).\n\nextra_perfect(N) ->\n  lists:filter(fun(X) -> X rem 2 =:= 1 end, lists:seq(1, N)).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80980,"user_id":null,"body":"-module(kata).\n-export([extra_perfect\/1]).\n\nextra_perfect(N,X) when X > N -> [];\nextra_perfect(N,X) -> [X|extra_perfect(N,X+2)].\n\nextra_perfect(N) -> extra_perfect(N,1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80981,"user_id":null,"body":"-module(kata).\n-export([extra_perfect\/1]).\n\nextra_perfect(N) -> [X || X <- lists:seq(1,N), X rem 2 == 1].","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80982,"user_id":null,"body":"-module(kata).\n-export([extra_perfect\/1]).\n\n% If one discounts preceding zeroes all odd numbers are extra perfect.\n\nextra_perfect(N, R) when N < 1 -> R; % terminating condition\nextra_perfect(N, R) when N rem 2 == 0 -> extra_perfect(N-1, R); % adjust to odd series\nextra_perfect(N, R) -> extra_perfect(N - 2, [N | R]). % step through all odd numbers\n\nextra_perfect(N) -> extra_perfect(N, []).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80983,"user_id":535,"body":"-module(kata).\n-export([extra_perfect\/1]).\n\nextra_perfect(N) -> [N || N <- lists:seq(1, N), N band 1 == 1].","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80984,"user_id":null,"body":"-module(kata).\n-export([extra_perfect\/1]).\n\nextra_perfect(N) -> extra_perfect(N, []).\n\nextra_perfect(0, Acc) -> Acc;\nextra_perfect(N, Acc) when N rem 2 =:= 0 -> extra_perfect(N - 1, Acc);\nextra_perfect(N, Acc) -> extra_perfect(N - 1, [N | Acc]).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5aba780a6a176b029800041c":[{"id":80985,"user_id":645,"body":"-module(kata).\n-export([max_multiple\/2]).\n\nmax_multiple(D, B) -> B - B rem D.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80986,"user_id":null,"body":"-module(kata).\n-export([max_multiple\/2]).\n\nmax_multiple(D, B) ->\n  if\n    B rem D =:= 0 -> B;\n    B rem D =\/= 0 -> max_multiple(D, B-1)\n  end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80987,"user_id":null,"body":"-module(kata).\n-export([max_multiple\/2]).\n\nmax_multiple(D, B) when B rem D =:= 0 -> B;\nmax_multiple(D, B) -> max_multiple(D, B - 1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80988,"user_id":null,"body":"-module(kata).\n-export([max_multiple\/2]).\n\nmax_multiple(D, B) -> (B div D) * D.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80989,"user_id":null,"body":"-module(kata).\n-export([max_multiple\/2]).\n\nmax_multiple(D, B) ->\n  lists:max(lists:filter(fun(X) -> X rem D =:= 0 end, lists:seq(1, B))).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80990,"user_id":null,"body":"-module(kata).\n-export([max_multiple\/2]).\n\nmax_multiple(D, B) -> D*trunc(B\/D).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80991,"user_id":535,"body":"-module(kata).\n-export([max_multiple\/2]).\n\nmax_multiple(D, B) when B rem D == 0 -> B;\nmax_multiple(D, B) when B rem D \/= 0 -> max_multiple(D, B-1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80992,"user_id":null,"body":"-module(kata).\n-export([max_multiple\/2]).\n\nmax_multiple(D, B) -> max_multiple(D, B, 0).\n\nmax_multiple(D, B, Mul) when (Mul + D) > B ->\n  Mul;\nmax_multiple(D, B, Mul) ->\n  max_multiple(D, B, Mul + D).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80993,"user_id":null,"body":"-module(kata).\n-export([max_multiple\/2]).\n\nmax_multiple(D, B) -> max_multiple(D, B, B).\n\nmax_multiple(D, B, N) when N rem D =:= 0 -> N;\nmax_multiple(D, B, N) -> max_multiple(D, B, N - 1).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80994,"user_id":null,"body":"-module(kata).\n-export([max_multiple\/2]).\n\n\nmax_multiple(D, B) -> [Head|Tail] = getMultipleList(D,B), getMaxMultiple(Tail, Head).\n\n%Check for max Divisor.\ngetMaxMultiple([],Max) -> Max;\ngetMaxMultiple([Head|Tail], Max) when Head > Max -> getMaxMultiple(Tail, Head);\ngetMaxMultiple([Head|Tail], Max) -> getMaxMultiple(Tail, Max).\n\n\n%Get List with all Multiple\ngetMultipleList(D,B) -> [X || X <- lists:seq(D,B), X rem D == 0].","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5ac14ac220746b3073000078":[{"id":80995,"user_id":null,"body":"-module(solution).\n-export([whiner\/1]). %% perhaps some changes here\n\n%   io:format(user, \"~s~n\", [\"Should you need to print something,\"\n%                            ++ \"write to user stream, like this.\"]),\n\nwhiner(Parent) ->\n  receive\n    {awake} ->\n      Parent ! {whine, \"Is anybody out there?\"},\n      timer:send_interval(1000, {whine});\n    {whine} ->\n      Parent ! {whine, \"Is anybody out there?\"};\n    {give_up} ->\n      exit(normal);\n    _ ->\n      true\n  end,\n  whiner(Parent).\n\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80996,"user_id":null,"body":"-module(solution).\n-export([whiner\/1]). %% perhaps some changes here\n\n-define(MSG, {whine, \"Is anybody out there?\"}).\n\nwhiner(Parent) -> do_whiner(Parent, no_timer).\n\ndo_whiner(Parent, Timer) ->\n  receive\n    {give_up} -> timer:cancel(Timer);\n    {awake} ->\n      Parent ! ?MSG,\n      {ok, NewTimer} = timer:send_interval(1000, Parent, ?MSG),\n      do_whiner(Parent, NewTimer);\n    _ -> do_whiner(Parent, Timer)\n  end.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80997,"user_id":null,"body":"-module(solution).\n-export([whiner\/1, awoken\/1]).\n\nwhiner(Parent) ->\n   receive\n       {awake} ->\n           spawn_link(?MODULE, awoken, [Parent]),\n           whiner(Parent);\n       {give_up} -> \n           exit(given_up);\n       _ -> \n           whiner(Parent)\n   end.\n   \nawoken(Parent) ->\n    Parent ! {whine, \"Is anybody out there?\"},\n    timer:sleep(1000), \n    awoken(Parent).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80998,"user_id":564,"body":"-module(solution).\n-export([whiner\/1]).\n\nwhiner(Parent) ->\n  receive\n    {give_up} -> exit(ok);\n    {awake} ->\n      Parent ! {whine, \"Is anybody out there?\"},\n      timer:send_after(1000, {awake});\n    Unknown -> skip\n  end,\n  whiner(Parent).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":80999,"user_id":564,"body":"-module(solution).\n-export([whiner\/1]). %% perhaps some changes here\n\nwhiner(Parent) ->\n    receive\n      {awake} ->\n        Parent ! {whine, \"Is anybody out there?\"},\n        timer:send_after(1000, self(), {awake}),\n        whiner(Parent);\n      {give_up} ->\n        ok;\n      Unknown ->\n        whiner(Parent)\n    end.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81000,"user_id":null,"body":"-module(solution).\n-export([whiner\/0, whiner\/1]). %% perhaps some changes here\n\nwhiner() ->\n    Parent = self(),\n    spawn(fun() -> whiner(Parent) end).\n\nwhiner(Parent) ->\n    Ref = make_ref(),\n    MessageToParrent = {whine, \"Is anybody out there?\"},\n    _ = whiner_loop(Parent, Ref, MessageToParrent),\n    ok.\n\nwhiner_loop(Parent, Ref, MessageToParrent) ->\n    receive\n        {give_up} ->\n            ok;\n        {awake} ->\n            repeat_message(Parent, Ref, MessageToParrent),\n            whiner_loop(Parent, Ref, MessageToParrent);\n        {repeat, Parent, Ref} ->\n            repeat_message(Parent, Ref, MessageToParrent),\n            whiner_loop(Parent, Ref, MessageToParrent);\n        _Msg ->\n            whiner_loop(Parent, Ref, MessageToParrent)\n    end.\n\nrepeat_message(Parent, Ref, MessageToParrent) ->\n    Parent ! MessageToParrent,\n    erlang:send_after(1000, self(), {repeat, Parent, Ref}).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81001,"user_id":null,"body":"-module(solution).\n-export([whiner\/1]). %% perhaps some changes here\n\nwhiner(Parent) ->\n  receive\n    {awake} ->   Parent ! {whine, \"Is anybody out there?\"},\n                 loop(Parent);\n    {give_up} -> exit(normal);\n    _ -> whiner(Parent)\n  end.\n    \nloop(Parent) ->\n  receive\n    {give_up} -> exit(normal);\n    _ -> loop(Parent)\n  after 1000 ->\n    Parent ! {whine, \"Is anybody out there?\"},\n    loop(Parent)\n  end.\n  \n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81002,"user_id":null,"body":"-module(solution).\n-import(timer, [sleep\/1]).\n-export([whiner\/1]). %% perhaps some changes here\n\nwhiner(Parent) ->\n    io:format(user, \"~s~n\", [\"Should you need to print something,\"\n                             ++ \"write to user stream, like this.\"]),\n    receive\n      {awake} ->\n        spawn_link(fun() -> whiner_task(Parent) end);\n      {give_up} -> \n        exit(\"Bye Bye\");\n      _Else -> _Else\n    end,\n    whiner(Parent).\n\nwhiner_task(Parent) ->\n  Parent ! {whine, \"Is anybody out there?\"},\n  timer:sleep(1000),\n  whiner_task(Parent).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81003,"user_id":null,"body":"-module(solution).\n-export([whiner\/1]). %% perhaps some changes here\n\nwhiner(Parent) ->\n  receive\n    {awake} ->\n      Parent ! {whine, \"Is anybody out there?\"},\n      timer:send_interval(1000, {whine});\n    {whine} ->\n      Parent ! {whine, \"Is anybody out there?\"};\n    {give_up} ->\n      exit(normal);\n    _ ->\n      true\n  end,\n  whiner(Parent).\n  ","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81004,"user_id":null,"body":"-module(solution).\n-export([whiner\/1]). %% perhaps some changes here\n\nwhiner(Parent) ->\n    io:format(user, \"~s~n\", [\"Should you need to print something,\"\n                             ++ \"write to user stream, like this.\"]),\n    do_whiner(Parent, undefined).\n\n\ndo_whiner(Parent, Tr) ->\n  receive\n    {awake} -> \n      Parent ! {whine, \"Is anybody out there?\"},\n      {ok, Tref} = timer:send_interval(1000, Parent, {whine, \"Is anybody out there?\"}),\n      do_whiner(Parent, Tref);\n    {give_up} ->\n      timer:cancel(Tr),\n      exit(normal);\n    _ -> do_whiner(Parent, Tr)\n  end. ","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5ae62fcf252e66d44d00008e":[{"id":81005,"user_id":564,"body":"-module(kata).\n-export([expression_matter\/3]).\n\nexpression_matter(A, B, C) ->\n  lists:max([\n    A + B + C,\n    A + B * C,\n    A * B + C,\n    A * B * C,\n    A * (B + C),\n    (A + B) * C\n  ]).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81006,"user_id":null,"body":"-module(kata).\n-export([expression_matter\/3]).\n\nexpression_matter(A, B, C) ->\n  lists:max([(A + B +C), (A * B * C), ((A + B) * C), (A * (B + C))]).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81007,"user_id":null,"body":"-module(kata).\n-export([expression_matter\/3]).\n\nexpression_matter(1, 1, 1) -> 3;\n\nexpression_matter(A, B, C) ->\n  case {A, B, C} of\n    {1, _, 1} -> A + B + C;\n    {1, _, _} -> (A + B) * C;\n    {_, 1, _} -> max((A + B) * C, A * (B + C));\n    {_, _, 1} -> A * (B + C);\n    {_, _, _} -> A * B * C\n  end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81008,"user_id":null,"body":"-module(kata).\n-export([expression_matter\/3]).\n\ncalc([A, '*', B, '*', C]) -> A * B * C;\ncalc([A, '*', B, '+', C]) -> A * B + C;\ncalc([A, '+', B, '*', C]) -> A + B * C;\ncalc([A, '+', B, '+', C]) -> A + B + C;\ncalc([A, 'p+', B, '*', C]) -> (A + B) * C;\ncalc([A, '*', B, 'p+', C]) -> A * (B + C);\ncalc(_) -> 0.\n\nexpression_matter(A, B, C) ->\n  SignOptions = ['*', '+', 'p+'],\n  Permutations =[ [A, LeftSign, B, RightSign, C] ||\n      LeftSign <- SignOptions, RightSign <- SignOptions ],\n  lists:max(lists:map(fun(X) -> calc(X) end, Permutations)).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81009,"user_id":168,"body":"-module(kata).\n-export([expression_matter\/3]).\n\nexpression_matter(A, B, C) ->\n  max(max(max(A * B * C, A + B + C), A * (B + C)), (A + B) * C).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81010,"user_id":1883,"body":"-module(kata).\n-export([expression_matter\/3]).\n\nmax_element([X]) -> X;\nmax_element([X|Rest]) -> max(X, max_element(Rest)).\n\nexpression_matter(A, B, C) ->\n  max_element([\n          A * B * C,\n          A + B + C,\n          A * B + C,\n          A * (B + C),\n          A + B * C,\n          (A + B) * C\n         ]).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81011,"user_id":null,"body":"-module(kata).\n-import(lists, [max\/1]).\n-export([expression_matter\/3]).\n\nexpression_matter(A, B, C) ->\n  max([\n      A * B * C,\n      A * (B + C),\n      (A + B) * C,\n      A + B + C\n  ]).\n  ","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81012,"user_id":null,"body":"-module(kata).\n-import(lists, [max\/1]).\n-export([expression_matter\/3]).\n\nexpression_matter(A, B, C) ->\n  lists:max([A+B+C, A*B*C, (A+B)*C, A+(B*C), (A*B)+C, A*(B+C)]).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81013,"user_id":50,"body":"-module(kata).\n-export([expression_matter\/3]).\n-import(lists,[max\/1]). \n\nexpression_matter(A, B, C) ->\n  max ([(A + B) * C, A * (B + C), A + B + C , A * B *C ]) .","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81014,"user_id":null,"body":"-module(kata).\n-export([expression_matter\/3]).\n\nexpression_matter(A, B, C) ->\n  Expr1 = A * B * C,\n  Expr2 = A * (B + C),\n  Expr3 = A + (B * C),\n  Expr4 = (A + B) * C,\n  Expr5 = (A * B) * C,\n  Expr6 = A + B + C,\n  \n  lists:max([Expr1, Expr2, Expr3, Expr4, Expr5,Expr6]).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5b06c990908b7eea73000069":[{"id":81015,"user_id":168,"body":"-module(kata).\n-export([f\/2]).\n\n-record(complex, {\n        real,\n        img\n    }).\n\n-spec f(complex, float()) -> integer().\n\nf(Z, Eps) -> \n  X = math:sqrt(math:pow(Z#complex.real, 2) + math:pow(Z#complex.img, 2)),\n  if X >= 1 -> -1; true -> floor(math:log(Eps) \/ math:log(X)) end.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81016,"user_id":53,"body":"-module(kata).\n-export([f\/2]).\n\n-record(complex, {\n        real,\n        img\n    }).\n\n-spec f(complex, float()) -> integer().\n\nf(Z, Eps) -> \n    A = math:log(Eps) \/ math:log(math:sqrt(Z#complex.real * Z#complex.real + Z#complex.img * Z#complex.img)),\n    if (A < 0) -> -1; true -> trunc(A) end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81017,"user_id":492,"body":"-module(kata).\n-export([f\/2]).\n\n-record(complex, {\n        real,\n        img\n    }).\n\n-spec f(complex, float()) -> integer().\n\ncabs(Z) -> \n    math:sqrt(Z#complex.real * Z#complex.real + Z#complex.img * Z#complex.img).\nf(Z, Eps) -> \n    A = cabs(Z),\n    if \n    (A >= 1.0) -> \n        -1;\n    true ->\n       trunc(math:log(Eps) \/ math:log(A))\n    end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5b1cd19fcd206af728000056":[{"id":81018,"user_id":527,"body":"-module(kata).\n-export([solve\/1]).\n\n-spec solve(float()) -> float().\n\nsolve(M) -> 1 - (math:sqrt(M + 0.25) - 0.5) \/ M.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81019,"user_id":53,"body":"-module(kata).\n-export([solve\/1]).\n\n-spec solve(float()) -> float().\n\nsolve(M) -> (2 * M + 1 - math:sqrt(4 * M + 1)) \/ (2 * M).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81020,"user_id":492,"body":"-module(kata).\n-export([solve\/1]).\n\n-spec solve(float()) -> float().\n\nsolve(M) ->\n    S = math:sqrt(4 * M + 1),\n    (2 * M + 1 - S) \/ (2 * M).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5b40b666dfb4291ad9000049":[{"id":81021,"user_id":53,"body":"-module(kata).\n-export([solve\/6]).\n\n-spec solve(float(), float(), float(), float(), float(), float()) -> [integer].\n\ndcos(N) ->\n  math:cos(N * math:pi() \/ 180).\n\ndsin(N) ->\n  math:sin(N * math:pi() \/ 180).\n\nhypot(A, B) ->\n  math:sqrt(A * A + B * B).\n\nsolve(A, B, C, Alpha, Beta, Gamma) ->\n    X = A * dcos(Alpha) - B * dsin(Beta) - C * dcos(Gamma),\n    Y = A * dsin(Alpha) + B * dcos(Beta) - C * dsin(Gamma),\n    R = hypot(X, Y),\n    T = math:atan2(Y, X) * 180 \/ math:pi(),\n    O = (floor(T * 60)) rem 60,\n    P = (floor(T * 60 * 60)) rem 60,\n    [round(R), floor(T), O, P].","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81022,"user_id":492,"body":"-module(kata).\n-export([solve\/6]).\n\n-spec solve(float(), float(), float(), float(), float(), float()) -> [integer].\n\nsolve(A, B, C, Alpha, Beta, Gamma) ->\n    Alph = Alpha * math:pi() \/ 180,\n    Bet = Beta * math:pi() \/ 180,\n    Gamm = Gamma * math:pi() \/ 180,\n    X = A * math:cos(Alph) - B * math:sin(Bet) - C * math:cos(Gamm),\n    Y = A * math:sin(Alph) + B * math:cos(Bet) - C * math:sin(Gamm),\n    R = math:sqrt(X * X + Y * Y),\n    Theta = floor(math:atan2(Y, X) * 180 * 3600 \/ math:pi()),\n    {D, M} = {Theta div 3600, Theta rem 3600},\n    {Mm, S} = {M div 60, M rem 60},\n\t  [round(R), D, Mm, S].","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5ce399e0047a45001c853c2b":[{"id":81023,"user_id":492,"body":"-module(kata).\n-export([parts_sums\/1]).\n\n-spec parts_sums([integer]) -> [integer].\n\nparts_sums([]) -> [0];\nparts_sums([H | T]) ->\n    Rest = [Th | _] = parts_sums(T),\n    [H + Th | Rest].","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81024,"user_id":null,"body":"-module(kata).\n-export([parts_sums\/1]).\n\n-spec parts_sums([integer]) -> [integer].\n\nparts_sums([]) -> [0];\nparts_sums(L)  -> [lists:sum(L) | parts_sums(tl(L))].","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81025,"user_id":null,"body":"-module(kata).\n-export([parts_sums\/1]).\n\n-spec parts_sums([integer]) -> [integer].\n\nparts_sums([]) -> [0];\nparts_sums([X|Xs]) -> [lists:sum([X|Xs])|parts_sums(Xs)].\n\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81026,"user_id":53,"body":"-module(kata).\n-export([parts_sums\/1]).\n\n-spec parts_sums([integer]) -> [integer].\n\nwalk([]) -> [0];\nwalk([E]) -> [E, 0];\nwalk([H | T]) ->\n    PT = [PH | _] = walk(T),\n    [H + PH | PT].\n\nparts_sums(LS) -> walk(LS).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5d50e3914861a500121e1958":[{"id":81027,"user_id":null,"body":"-module(kata).\n-export([add_letters\/1]).\n\nadd_letters([]) -> $z;\nadd_letters(Letters) ->\n  S = lists:foldl(fun(X, Sum) -> X - 96 + Sum end, 0, Letters),\n  if S rem 26 =:= 0 -> 122;\n     true -> S rem 26 + 96\n  end.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81028,"user_id":564,"body":"-module(kata).\n-export([add_letters\/1]).\n\nadd_letters(Letters) ->\n  Values = lists:map(fun (C) -> C - 96 end, Letters),\n  Sum = lists:sum(Values) rem 26,\n  case Sum of\n    0 -> lists:nth(1, \"z\");\n    N -> N + 96\n  end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81029,"user_id":645,"body":"-module(kata).\n-export([add_letters\/1]).\n\nadd_letters(L) -> lists:nth(lists:sum([X - 96 || X <- L]) rem 26 + 1, \"zabcdefghijklmnopqrstuvwxy\").","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81030,"user_id":null,"body":"-module(kata).\n-export([add_letters\/1]).\n\ncompare(Letter, Alphabet, 0) -> 0;\ncompare(Letter, Alphabet, Counter2) -> \n    if Letter == hd(Alphabet) -> Letter - 96;\n       true -> compare(Letter, tl(Alphabet), Counter2-1)\n    end.\n\nletters2(Letters, Alphabet, 0, Sum) -> Sum;\nletters2(Letters, Alphabet, Counter, Sum) ->\n    Alplen = length(Alphabet),\n    letters2(tl(Letters), Alphabet, Counter-1, Sum+\n\tcompare(hd(Letters), Alphabet, Alplen)).\n\nfixit(Number) ->\n    Number2 = Number rem 26,\n    if Number2 == 0 -> $z;\n       true -> Number2+96\n    end.\n\nadd_letters(Letters) ->\n    Alphabet = \"abcdefghijklmnopqrstuvwxyz\",\n    Len = length(Letters),\n    fixit(letters2(Letters, Alphabet, Len, 0)).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81031,"user_id":null,"body":"-module(kata).\n-import(lists, [sum\/1,map\/2]).\n-export([add_letters\/1]).\n\nto_char(N) ->\n  if\n    N rem ($z - $a + 1) == 0 -> $z;\n    true                     -> N rem ($z - $a + 1) + $a - 1\n  end.\n\nadd_letters(Letters) ->\n  to_char(sum(map(fun(C)->C - $a + 1 end, Letters))).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81032,"user_id":null,"body":"-module(kata).\n-export([add_letters\/1]).\n\nadd_letters([]) -> 122;\nadd_letters(Letters) -> add(Letters, 0).\n\nadd(Lst, Count) when Count > 26 -> add(Lst, Count-26);\nadd([], Count) -> Count+96;\nadd([H|T], Count) ->\n  New_count = Count + H - 96,\n  add(T, New_count).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81033,"user_id":null,"body":"-module(kata).\n-export([add_letters\/1]).\n\nadd_letters(Letters) ->\n  (26 + lists:sum([X - 96 || X <- Letters]) - 1) rem 26 + 97.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81034,"user_id":null,"body":"-module(kata).\n-export([add_letters\/1]).\n\nadd_letters([],Sum) when (Sum rem 26) == 0 -> 122;\nadd_letters([],Sum) -> (Sum rem 26)+96;\nadd_letters([H|T],Sum) -> add_letters(T,Sum + (H-96)).\n\nadd_letters([ ]) -> 96+26;\nadd_letters(Letters) -> add_letters(Letters,0).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81035,"user_id":null,"body":"-module(kata).\n-export([add_letters\/1]).\n\nadd_letters(Letters) ->\n  case lists:foldl(fun (C, S) -> S + C - 96 end, 0, Letters) rem 26 of\n    0 -> 122;\n    C -> 96 + C\n  end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81036,"user_id":null,"body":"-module(kata).\n-export([add_letters\/1]).\n\nadd_letters(Letters) -> \n  M = lists:map(fun(X) -> X - 96 end, Letters),\n  letter((lists:sum(M) rem 26)).\n\nletter(0) -> $z;\nletter(L) -> L + 96.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5d68d05e7a60ba002b0053f6":[{"id":81037,"user_id":492,"body":"-module(kata).\n-export([bonus\/2]).\n\n-spec bonus([integer], integer()) -> [integer].\n\ngcd(A, 0) -> A;\ngcd(A, B) -> gcd(B, A rem B).\n \nlcm(A,B) -> abs(A*B div gcd(A,B)).\nlcmAll(L) -> lists:foldl(fun(X, Acc) -> lcm(X, Acc) end, 1, L).\n\nbonus(L, S) ->\n    Cm = lcmAll(L),\n    T = lists:foldl(fun(X, Acc) -> (Cm div X) + Acc end, 0, L),\n    lists:map(fun(X) -> ((S * Cm) div X) div T end, L).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81038,"user_id":53,"body":"-module(kata).\n-export([bonus\/2]).\n\n-spec bonus([integer], integer()) -> [integer].\n\ngcd(A, 0) -> A;\ngcd(A, B) -> gcd(B, A rem B).\nlcm(A,B) -> A*B div gcd(A,B).\n\nbonus(L, S) ->\n    T = lists:foldl(fun(X, Acc) -> lcm(X, Acc) end, 1, L),\n    Y = lists:foldl(fun(X, Acc) -> Acc + (T div X) end, 0, L),\n    lists:map(fun(X) -> ((T * S) div X) div Y end, L).","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5da1df6d8b0f6c0026e6d58d":[{"id":81039,"user_id":53,"body":"-module(kata).\n-export([c\/1]).\n\n-spec c(integer()) -> integer().\n\nloop1(I, NUM, ANS) when NUM =< 1 -> ANS;\nloop1(I, NUM, ANS) -> CNT = 0, loop2(I, NUM, ANS, CNT).\nloop2(I, NUM, ANS, CNT) when 0 \/= NUM rem I -> loop1(I + 1, NUM, ANS * (CNT + 1));\nloop2(I, NUM, ANS, CNT) -> loop2(I, NUM div I, ANS, CNT + 1).\n\nc(K) ->\n  SQ = floor(math:sqrt(K)),\n  if (K \/= SQ * SQ) -> 0;\n  true -> loop1(2, K * SQ, 1) end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81040,"user_id":492,"body":"-module(kata).\n-export([c\/1]).\n\n-spec c(integer()) -> integer().\n\naux(N, Cnt, K) ->\n    M = math:sqrt(N),\n    if\n    (M < K) ->\n        if\n        (N == (K - 1) * (K - 1)) ->\n            Cnt - 1;\n        true ->\n            Cnt\n        end;\n    true ->\n        if\n        (N rem K == 0) ->\n            aux(N, Cnt + 2, K + 1);\n        true ->\n            aux(N, Cnt, K + 1)\n        end\n    end.\nc(K) ->\n    R = trunc(math:sqrt(K)),\n    if\n    (R * R == K) ->\n        aux(K * R, 0, 1);\n    true ->\n        0\n    end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5db19d503ec3790012690c11":[{"id":81041,"user_id":492,"body":"-module(kata).\n-export([weight\/2]).\n\n-spec(weight(integer(), integer()) -> float()).\n\nweight(N, W) -> \n\tE = math:exp(1),\n  I0 = 0.14849853757254047,\n  An = (1 - math:pow(E, -(2 * N + 2))) \/ (1 - math:pow(E, -2)),\n  I0 * An * W.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5e4bb05b698ef0001e3344bc":[{"id":81042,"user_id":53,"body":"-module(kata).\n-export([solve\/1]).\n\n-spec solve([integer]) -> {integer, integer}.\n\nfold(A, B, C, D) -> { abs(A*C - B*D), abs(A*D + B*C) }.\n\nsolve([]) -> {0, 0};\nsolve([ A, B, C, D ]) -> fold(A, B, C, D);\nsolve([ A, B, C, D | T ]) ->\n   { X, Y } = fold(A, B, C, D),\n   solve([X, Y | T]).\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81043,"user_id":492,"body":"-module(kata).\n-export([solve\/1]).\n\n-spec solve([integer]) -> {integer, integer}.\n\naux(A, B, C, D) ->\n    { abs(A*C - B*D), abs(A*D + B*C) }.\nsolve(Lst) ->\n    case Lst of\n        [ A, B, C, D ] -> aux(A, B, C, D);\n        [ A, B, C , D | Rest ] ->\n            { NewA, NewB } = aux(A, B, C, D),\n            solve([NewA, NewB | Rest]);\n        _ -> {0, 0}\n    end.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5fde1ea66ba4060008ea5bd9":[{"id":81044,"user_id":77,"body":"-module(kata).\n-export([burner\/3]).\n\nburner(C, H, O) ->\n  H2O = min(H div 2, O),\n  CO2 = min(C, (O-H2O) div 2),\n  CH4 = min(C-CO2, (H-2*H2O) div 4),\n  {H2O, CO2, CH4}.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81045,"user_id":null,"body":"-module(kata).\n-export([burner\/3]).\n\nburner(C, H, O) -> \n  Water = min(H div 2, O),\n  CO2 = min((O - Water) div 2, C),\n  Methane = min(C-CO2, (H - 2*Water) div 4),\n  {Water, CO2, Methane}.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81046,"user_id":null,"body":"-module(kata).\n-export([burner\/3]).\n\nminimum(A, B) ->\n    if A > B -> B;\n       true -> A\n    end.\n\nburner(C, H, O) -> \n    Water = trunc(minimum(H\/2, O)),\n    CO2 = trunc(minimum(C, (O-Water)\/2)),\n    Methane = trunc(minimum(C, (H-(Water*2))\/4)),\n    { Water, CO2, Methane }.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81047,"user_id":null,"body":"-module(kata).\n-export([burner\/3]).\n\nwater({W, H, O}) when H < 2; O < 1 -> {W, H, O};\nwater({W, H, O}) -> water({W+1, H-2, O-1}).\n\nwater(H, O) -> water({0, H, O}).\n\nco2({CO, C, O}) when C < 1; O < 2 -> {CO, C, O};\nco2({CO, C, O}) -> co2({CO+1, C-1, O-2}).\n\nco2(C, O) -> co2({0, C, O}).\n\nmethane({M, C, H}) when C < 1; H < 4 -> {M, C, H};\nmethane({M, C, H}) -> methane({M+1, C-1, H-4}).\n\nmethane(C, H) -> methane({0, C, H}).\n\nburner(C, H, O) ->\n  {Water, H2, O2} = water(H, O),\n  {CO2, C2, _} = co2(C, O2),\n  {Methane, _, _} = methane(C2, H2),\n  {Water, CO2, Methane}.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81048,"user_id":564,"body":"-module(kata).\n-export([burner\/3]).\n\nfuse(A, B) -> floor(min(A, B)).\n\nburner(C, H, O) ->\n  Water = fuse(H\/2, O),\n  H_ = H - Water * 2,\n  O_ = O - Water,\n  \n  CarbonDioxide = fuse(C, O_\/2),\n  C_ = C - CarbonDioxide,\n  \n  Methane = fuse(C_, H_\/4),\n  \n  {Water, CarbonDioxide, Methane}.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81049,"user_id":564,"body":"-module(kata).\n-export([burner\/3]).\n\nfuse(A, B) -> floor(lists:min([A, B])).\n\nburner(C, H, O) ->\n  Water = fuse(H\/2, O),\n  H_ = H - Water * 2,\n  O_ = O - Water,\n  \n  CarbonDioxide = fuse(C, O_\/2),\n  C_ = C - CarbonDioxide,\n  \n  Methane = fuse(C_, H_\/4),\n  \n  {Water, CarbonDioxide, Methane}.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81050,"user_id":null,"body":"-module(kata).\n-export([burner\/3]).\n\nburner(C, H, O) -> \n    Water = min(H div 2, O),\n    CO2 = min((O - Water) div 2, C),\n    Methane = min((H - 2*Water) div 4, C - CO2),\n    {Water, CO2, Methane}.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81051,"user_id":null,"body":"-module(kata).\n-export([burner\/3]).\n\nburner(C, H, O) ->\n    {Water, Rest1} = water({C, H, O}),\n    {Co2, Rest2} = co2(Rest1),\n    {Methane, _Rest} = methane(Rest2),\n    {Water, Co2, Methane}.\n\nwater({C, H, O}) ->\n    Water = min(H, O * 2) div 2,\n    {Water, {C, H - Water * 2, O - Water}}.\n    \nco2({C, H, O}) ->\n    Co2 = min(C * 2, O ) div 2,\n    {Co2, {C - Co2, H, O - Co2 * 2} }.\n\nmethane({C, H, O}) ->\n    Methane = min(C * 4, H) div 4,\n    {Methane, {C - Methane, H - Methane * 4, O} }.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81052,"user_id":null,"body":"-module(kata).\n-export([burner\/3]).\n\nburner(C, H, O) ->\n    {Water, C2, H2, O2} = water(C, H, O),\n    {Co2, C3, H3, O3} = co2(C2, H2, O2),\n    {Methane, _C4, _H4, _O4} = methane(C3, H3, O3),\n    {Water, Co2, Methane}.\n\nwater(C, H, O) ->\n    io:fwrite(\"-~p ~p ~p-~n\", [C, H, O]),\n    Water = min(H, O * 2) div 2,\n    {Water, C, H - Water * 2, O - Water}.\n    \nco2(C, H, O) ->\n    io:fwrite(\"-~p ~p ~p-~n\", [C, H, O]),\n    Co2 = min(C * 2, O ) div 2,\n    {Co2, C - Co2, H, O - Co2 * 2 }.\n\nmethane(C, H, O) ->\n    io:fwrite(\"-~p ~p ~p-~n\", [C, H, O]),\n    Methane = min(C * 4, H) div 4,\n    {Methane, C - Methane, H - Methane * 4, O }.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"},{"id":81053,"user_id":null,"body":"-module(kata).\n-import(lists,[min\/1]).\n-export([burner\/3]).\n\n\n\nburner(C, H, O) ->  \n  Water = min([H div 2, O]),\n  H2 = H - 2*Water,\n  O2 = O - Water,\n  CO2 = min([C, O2 div 2]),\n  O3 = O2 - 2*CO2,\n  C2 = C - CO2,\n  Methane = min([C, H2 div 4]),\n  {Water, CO2, Methane}.","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}],"5917a2205ffc30ec3a0000a8":[{"id":81054,"user_id":null,"body":"-module(skyscrapers).\n-export([solve_puzzle\/1]).\n\n-record(perm, { idx, values, packed }).\n\n\nfactorial(Number) ->\n    Fac = fun\n        Fac(N, Acc) when N =< 1 -> Acc;\n        Fac(N, Acc) -> Fac(N - 1, Acc * N)\n    end,\n    Fac(Number, 1).\n\nallPermutations(PUZZLESIZE) ->\n    Permute = fun\n        Permute([]) -> [[]];\n        Permute(L) -> [[H|T] || H <- L, T <- Permute(L--[H])]\n    end,\n\n    PackValues = fun(P) -> lists:map(fun(V) -> 1 bsl V end, P) end,\n\n    array:fix(\n        array:map(\n            fun(Idx, P) ->\n                #perm { idx = Idx, values = array:fix(array:from_list(P)), packed = array:fix(array:from_list(PackValues(P))) }\n            end,\n            array:from_list(Permute(lists:seq(1, PUZZLESIZE)))\n        )\n    ).\n\nsolve_puzzle(Clues) ->\n    PUZZLESIZE = 7,\n    ROWINDEXES = lists:seq(0, PUZZLESIZE - 1),\n    ALLPERMUTATIONS = allPermutations(PUZZLESIZE),\n    NUMROWPERMUTATIONS = factorial(PUZZLESIZE),\n    ALLPERMUTATIONINDEXES = lists:seq(0, NUMROWPERMUTATIONS-1),\n\n    RowFromClues = fun\n        (0, 0) -> ALLPERMUTATIONINDEXES;\n        (L, R) ->\n            Visible = fun\n                (_, 0, 0) -> true;\n                (Row, ClueLeft, ClueRight) ->\n                   V = fun\n                        V(Idx, _, _, CountLeft, CountRight) when Idx < 0 -> { CountLeft, CountRight };\n                        V(Idx, MaxLeft, MaxRight, CountLeft, CountRight) ->\n                            ValueLeft = array:get(PUZZLESIZE - Idx - 1, Row),\n                            ValueRight = array:get(Idx, Row),\n                            V(\n                                Idx-1,\n                                max(MaxLeft, ValueLeft),\n                                max(MaxRight, ValueRight),\n                                if ValueLeft > MaxLeft -> CountLeft + 1; true -> CountLeft end,\n                                if ValueRight > MaxRight -> CountRight + 1; true -> CountRight end\n                            )\n                    end,\n\n                    { ResultL, ResultR } = V(PUZZLESIZE - 1, 0, 0, 0, 0),\n                    ((ClueLeft == 0) or (ClueLeft == ResultL)) and ((ClueRight == 0) or (ClueRight == ResultR))\n            end,\n\n            lists:filter(\n                fun(Idx) -> Visible((array:get(Idx, ALLPERMUTATIONS))#perm.values, L, R) end,\n                ALLPERMUTATIONINDEXES\n            )\n    end,\n\n    IntersectAllRows = fun\n        (PossibleSolution) ->\n            IntersectRows = fun\n                ({X, Y}, Sol) ->\n                    RY = maps:get(Y, Sol),\n                    RX = maps:get(PUZZLESIZE + X, Sol),\n                    VMASK = lists:foldl(\n                        fun(Idx, Acc) -> Acc bor (array:get(X, (array:get(Idx, ALLPERMUTATIONS))#perm.packed)) end,\n                        0,\n                        RY\n                    ) band lists:foldl(\n                        fun(Idx, Acc) -> Acc bor (array:get(Y, (array:get(Idx, ALLPERMUTATIONS))#perm.packed)) end,\n                        0,\n                        RX\n                    ),\n                    S1 = maps:update(\n                        Y,\n                        lists:filter(\n                            fun(Idx) -> (array:get(X, (array:get(Idx, ALLPERMUTATIONS))#perm.packed) band VMASK) \/= 0 end,\n                            RY\n                        ),\n                        Sol\n                    ),\n                    maps:update(\n                        PUZZLESIZE + X,\n                        lists:filter(\n                            fun(Idx) -> (array:get(Y, (array:get(Idx, ALLPERMUTATIONS))#perm.packed) band VMASK) \/= 0 end,\n                            RX\n                        ),\n                        S1\n                    )\n            end,\n\n            lists:foldl(\n                IntersectRows,\n                PossibleSolution,\n                lists:flatten(\n                    lists:map(\n                        fun(X) ->\n                            lists:map(\n                                fun(Y) -> { X, Y } end,\n                                ROWINDEXES\n                            )\n                        end,\n                        ROWINDEXES\n                    )\n                )\n            )\n    end,\n\n    FindSolution = fun\n        FindSolution(Sol) ->\n            NewSol = IntersectAllRows(Sol),\n            AnyUnsolvableRows = maps:fold(\n                fun(_, V, Acc) -> Acc or (length(V) == 0) end,\n                false,\n                NewSol\n            ),\n            if\n                AnyUnsolvableRows -> undefined;\n                true ->\n                    UndeterminedRowIndexes = lists:filter(\n                        fun(K) ->\n                            V = maps:get(K, NewSol),\n                            case V of\n                                [_] -> false;\n                                _ -> true\n                            end\n                        end,\n                        maps:keys(NewSol)\n                    ),\n                    case UndeterminedRowIndexes of\n                        [] -> NewSol;\n                        [FirstUndeterminedRowIdx|_] ->\n                            Row = maps:get(FirstUndeterminedRowIdx, NewSol),\n                            TryEachPossibility = fun\n                                TryEachPossibility([]) -> undefined;\n                                TryEachPossibility([Ridx|T]) ->\n                                    TryThisSolution = maps:update(\n                                        FirstUndeterminedRowIdx,\n                                        [Ridx],\n                                        NewSol\n                                    ),\n                                    DidItWork = FindSolution(TryThisSolution),\n                                    case DidItWork of\n                                        undefined -> TryEachPossibility(T);\n                                        _ -> DidItWork\n                                    end\n                            end,\n                            TryEachPossibility(Row)\n                    end\n            end\n    end,\n\n    CluesArr = array:from_list(Clues),\n    InitialState =\n        maps:from_list(\n            lists:append(\n                lists:map(\n                    fun(Idx) -> { Idx, RowFromClues(array:get(PUZZLESIZE * 4 - Idx - 1, CluesArr), array:get(Idx + PUZZLESIZE, CluesArr)) } end,\n                    ROWINDEXES\n                ),\n                lists:map(\n                    fun(Idx) -> { Idx + PUZZLESIZE, RowFromClues(array:get(Idx, CluesArr), array:get(PUZZLESIZE * 3 - Idx - 1, CluesArr)) } end,\n                    ROWINDEXES\n                )\n            )\n        ),\n\n    case FindSolution(InitialState) of\n        undefined -> undefined;\n        Solved ->\n            lists:map(\n                fun(RIdx) ->\n                    [PIdx|_] = maps:get(RIdx, Solved),\n                    array:to_list((array:get(PIdx, ALLPERMUTATIONS))#perm.values)\n                end,\n                ROWINDEXES\n            )\n    end.\n","lang_id":16,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:16","updated_at":"2022-12-30 18:39:16"}]}