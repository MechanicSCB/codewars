{"58d3dd53b0fe8c9ac10000b3":[{"id":200000,"user_id":null,"body":"module Kata\n  export removeO\n  removeO(s) = replace(s, \"o\" => \"\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:15","updated_at":"2023-01-14 13:24:15"},{"id":200001,"user_id":null,"body":"module Kata\n  export removeO\n  removeO = str -> filter(x -> x != 'o', str)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200002,"user_id":null,"body":"module Kata\n  export removeO\n  function removeO(str)\n    replace(str, r\"[oO]\" => \"\")\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200003,"user_id":null,"body":"module Kata\n  export removeO\n  function removeO(str)\n    join(filter(i -> i!=\"o\", split(str, \"\")))\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200004,"user_id":null,"body":"module Kata\n  export removeO\n  removeO(str) = replace(replace(str, \"o\" => \"\"), \"O\" => \"\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200005,"user_id":null,"body":"module Kata\n  export removeO\n  function removeO(str)\n    replace(str, \"o\" => \"\")\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200006,"user_id":null,"body":"module Kata\n  export removeO\n  removeO(str) = replace(str, \"o\" => \"\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200007,"user_id":1365,"body":"module Kata\n  export removeO\n  function removeO(a)\n    replace(a, collect(\"o\") => s\"\")\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200008,"user_id":null,"body":"module Kata\n  export removeO\n  function removeO(str)\n    filter(c->c!='o', str)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200009,"user_id":null,"body":"module Kata\n  export removeO\n  function removeO(str) \n    output = \"\"\n    for char in str\n      if char != 'o'\n        output = output * string(char)\n      end\n    end\n    return output\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5d35f7ad35a1440019d0e969":[{"id":200010,"user_id":881,"body":"function classify(notes, flat = false)\n  letters = flat ? \"CDDEEFGGAABB\" : \"CCDDEFFGGAAB\"\n  root = notes[1] % 12\n  third = isodd(notes[2] - notes[1]) ? 2 : 1\n  fifth = isodd(notes[3] - notes[1]) ? 2 : 0\n  accidental = root in [1, 3, 6, 8, 10] ? (flat ? \"\u266d\" : \"\u266f\") : \"\"\n  chordtype = [\"aug\", \"dim\", \"\", \"m\"][third + fifth]\n  return letters[root + 1] * accidental * chordtype\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5e452a0a5111c7001faa2a71":[{"id":200011,"user_id":null,"body":"module Kata\nexport connectedcomponents\n\nfunction connectedcomponents(image)\n    vert = Int(count(\"-\", image)\/2)+1\n    img = join(split(replace(image, '|' => ' '), r\"(\n)(\\s|\\+)\")[2:end-1])\n    white, comps = Set(i for i in eachindex(img) if img[i] == '*'), Set()\n    sum([bfs(white, union!(comps, Set(ele)), vert) for ele in eachindex(img) if img[ele] == '*' && ele \u2209 comps])\nend\n\nfunction bfs(white, comps, vert, stop=length(white))\n    stop == 0 && return 1\n    bfs(white, intersect!(union!(comps, comps.+1, comps.-1, comps.+vert, comps.-vert), white), vert, stop -= 1)    \nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200012,"user_id":2525,"body":"module Kata\nexport connectedcomponents\n\nfunction connectedcomponents(image)\n    rows = split(strip(image), \"\n\")\n  \n    w = length(rows[1])-2\n    h = length(rows)-2\n \n    repr = Dict([(x, y) => (x-1)*h+y-1  for x in 1:w for y in 1:h if rows[y+1][x+1]=='*'])\n  \n    has_changes = true\n    while has_changes\n        has_changes = false    \n        for (x, y) in keys(repr)\n            mx = maximum( [get(repr, (x, y), -1), get(repr, (x-1, y), -1), get(repr, (x+1, y), -1), get(repr, (x, y-1), -1), get(repr, (x, y+1), -1)] )\n            if repr[(x, y)] != mx\n                has_changes = true\n                repr[(x, y)] = mx\n            end\n        end\n    end\n  \n    return length(unique(values(repr)))\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200013,"user_id":null,"body":"module Kata\nexport connectedcomponents\n\nfunction parseimage(image::String)::BitMatrix\n    framed = image[findfirst('+', image):findlast('+', image)]\n    lines = split(framed, r\"\\|?\n\\|?\")[(begin+1):(end-1)]\n    hcat(collect.(lines)...) .== '*'\nend\n\nfunction connectedcomponents(image::String)::Integer\n    mat = parseimage(image)\n    start = findfirst(mat)\n    num_connected_components = 0\n    while !isnothing(start)\n        mat[start] = false\n        Q = Vector{CartesianIndex{2}}()\n        push!(Q, start)\n        while !isempty(Q)\n            node = popfirst!(Q)\n            candidates = CartesianIndex.(\n                [node[1], node[1], node[1] - 1, node[1] + 1],\n                [node[2] - 1, node[2] + 1, node[2], node[2]]\n            )\n            connected = filter(I -> checkbounds(Bool, mat, I) && mat[I], candidates)\n            mat[connected] .= false\n            append!(Q, connected)\n        end\n        num_connected_components += 1\n        start = findnext(mat, start)\n    end\n    return num_connected_components\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200014,"user_id":null,"body":"module Kata\nexport connectedcomponents\n\nfunction connectedcomponents(image)\n  lst = split(image, \"\n\")\n  \n  n = length(lst[2])\n  m = length(lst)-1\n  dct = Dict()\n  cmp = 0\n  s ='*'\n  for i in 2:m-1\n    for j in 2:n-1\n      lstij = lst[i][j]\n      \n      if lstij == s\n        d1 = ( (i-1, j) in keys(dct) ? dct[i - 1, j] : 0)\n        d2 = ( (i, j-1) in keys(dct) ? dct[i, j - 1] : 0)\n        if d1 == 0 && d2 == 0\n          cmp += 1\n          dct[i,j] = cmp\n        elseif d1 == 0\n          dct[i,j] = d2\n        elseif d2 == 0\n          dct[i,j] = d1\n        else\n          dmin = minimum([d1, d2])\n          dmax = maximum([d1, d2])\n          dct[i,j] = dmin\n          for x in 2:m-1\n            for y in 2:n-1\n              if (x,y) in keys(dct)\n                if dct[x,y] == dmax\n                  dct[x,y] = dmin\n                end\n              end\n            end\n          end\n        end\n      end\n      dctij = ((i,j) in keys(dct) ? dct[i,j] : 0)\n    end\n  end\n  hm = []\n  for z in dct\n    if !(z[2] in hm)\n      push!(hm, z[2])\n    end\n  end\n  return length(hm)\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200015,"user_id":null,"body":"module Kata\nexport connectedcomponents\n\nfunction connectedcomponents(image)\n  lines = split(image, \"\n\")\n  visited = Set{Tuple{Int, Int}}()\n  queue = []\n  group = 0\n  for i = 2:length(lines) - 2\n    for j = 2:length(lines[i]) - 1\n      c = lines[i][j]\n      c != '*' && continue\n      in((i, j), visited) && continue\n      group += 1\n      push!(queue, (i, j))\n      while length(queue) > 0\n        current = popfirst!(queue)\n        in(current, visited) && continue\n        push!(visited, current)\n        ii, jj = current\n        ii - 1 > 1                 && lines[ii - 1][jj] == '*' && !in((ii - 1, jj), visited) && push!(queue, (ii - 1, jj))\n        ii + 1 < length(lines) - 1 && lines[ii + 1][jj] == '*' && !in((ii + 1, jj), visited) && push!(queue, (ii + 1, jj))\n        jj - 1 > 1                 && lines[ii][jj - 1] == '*' && !in((ii, jj - 1), visited) && push!(queue, (ii, jj - 1))\n        jj + 1 < length(lines[ii]) && lines[ii][jj + 1] == '*' && !in((ii, jj + 1), visited) && push!(queue, (ii, jj + 1))\n      end\n    end\n  end\n  group\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200016,"user_id":null,"body":"module Kata\nexport connectedcomponents\n\nfunction connectedcomponents(image)\n    lines = split(image, \"\n\")\n    islands = Dict()\n    for r in 1:length(lines)\n        for c in 1:length(lines[r])\n            if lines[r][c] == '*'\n                left = get(islands, (r-1,c), nothing)\n                top = get(islands, (r,c-1), nothing)\n                if left == nothing && top == nothing \n                    islands[(r,c)] = (r,c)\n                elseif left != nothing && top != nothing \n                    if left != top\n                        for k in keys(islands)\n                            if islands[k] == top \n                                islands[k] = left \n                            end\n                        end\n                    end\n                    islands[(r,c)] = (left == nothing) ? top : left\n                else\n                    islands[(r,c)] = (left == nothing) ? top : left \n                end\n            end\n        end\n    end \n    length(unique(values(islands)))\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200017,"user_id":null,"body":"module Kata\nexport connectedcomponents\n\nfunction connectedcomponents(image)\n  locs=[\n    [1,0],\n    [-1,0],\n    [0,1],\n    [0,-1]\n  ]\n  \n  imgRed=split(image,\"\n\")[2:end-2]\n  imgRed=[i[2:end-1] for i in imgRed]\n  imgRed=[[j==\"*\" ? 1 : 0 for j in split(i,\"\")] for i in imgRed]\n  imgRed=hcat(imgRed...)'\n  \n  pixels=findall(!iszero,imgRed)\n  pixels=[[Tuple(p)[1],Tuple(p)[2]] for p in pixels];\n  \n  n=0\n  nc=[]\n  append!(nc,[(pop!(pixels))])\n  current=0\n  until=1\n  \n  while pixels!=[]\n      if current!=current+until\n          current+=1\n          until-=1\n          for loc in locs\n              ind=findall(x->x==nc[current]+loc,pixels)\n  \n              if ind!=[]\n                  append!(nc,pixels[ind])\n                  deleteat!(pixels,ind)\n                  until+=1\n              end\n          end\n      else\n          n+=1\n          nc=[]\n          append!(nc,[(pop!(pixels))])\n          current=0\n          until=1\n      end\n  end\n  \n  return n+1\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200018,"user_id":881,"body":"module Kata\nexport connectedcomponents\n\nfunction floodfill!(cells, index)\n  if cells[index] \n    cells[index] = false\n    indices = (\n      CartesianIndex(-1, 0),\n      CartesianIndex(1, 0),\n      CartesianIndex(0, 1),\n      CartesianIndex(0, -1)\n    )\n    for i in indices\n      if checkbounds(Bool, cells, index + i)\n        floodfill!(cells, index + i)\n      end\n    end\n  end\nend\n\nfunction connectedcomponents(image)\n  cells = []\n  for c in image\n    if c == ' '\n      push!(cells, false)\n    elseif c == '*'\n      push!(cells, true)\n    end\n  end\n  cells = reshape(cells, (length(match(r\"-+\", image).match), :))\n  total = 0  \n  while true in cells\n    index = findfirst(cells)\n    if VERSION < v\"1\"\n      index = CartesianIndex(ind2sub(size(cells), index)...)\n    end\n    total += 1\n    floodfill!(cells, index)\n  end  \n  return total\nend\n\nend#module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"603928e6277a4e002bb33d5a":[{"id":200019,"user_id":null,"body":"function optimize(adj_matrix)\n  \n  m, n = length(adj_matrix), length(adj_matrix[1])\n  \n  rel = [(i,j) for i=1:m for j=1:n if adj_matrix[i][j]==1]\n  if length(rel)==0\n    return [x-1 for x=1:m]\n  end\n  \n  function eligible_for_solution(x)\n    above = Set(y[1] for y=rel if y[2]==x)\n    if length(above)==0\n      return true\n    end\n    return all(!eligible_for_solution(x) for x=above)\n  end\n      \n  solution = [x for x=1:m if eligible_for_solution(x)]    \n  return sort([x-1 for x=solution])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200020,"user_id":null,"body":"function optimize(adj_matrix)\n    reduction(hcat(adj_matrix...)', collect(eachindex(adj_matrix)), length(adj_matrix)) .- 1\nend\n\nfunction reduction(arr, opt, d)\n    arr == zeros(d,d) && return opt\n    for i in copy(opt)\n        if sum(arr[:,i]) == 0\n            for j in 1:d\n                if arr[i,j] == 1\n                    deleteat!(opt, findfirst(x-> x==j, opt))\n                    arr[j,:] .= 0\n                    arr[:,j] .= 0\n                end\n            end\n        end\n    end\n    reduction(arr, opt, d)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200021,"user_id":null,"body":"function optimize(adj_matrix)\n  l = length(adj_matrix)\n  a = Set{Int}(1:l)\n  b = Set{Int}()\n  s = Set{Int}()\n\n  while true\n    a0 = Set([i for i in a if all(iszero.([adj_matrix[j][i] for j in a]))])\n    if isempty(a0)\n      break\n    end\n    b0 = Set([j for j in a for i in a0 if adj_matrix[i][j] > 0])\n    setdiff!(a, a0)\n    setdiff!(a, b0)\n    union!(s, a0)\n  end\n\n  (x -> x - 1).(sort(collect(s)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200022,"user_id":2525,"body":"mutable struct node\n    idx::Int\n    parents::Array{Int}\nend\nfunction optimize(adj_matrix)  \n    nodes = [node(i, []) for i in 1:length(adj_matrix)]\n    for (idx, line) in enumerate(adj_matrix)\n        for (jdx, rel) in enumerate(line)\n            if rel == 1\n                push!(nodes[jdx].parents, idx)\n            end\n        end\n    end\n  \n    roots = []\n    while length(nodes)>0\n        roots = vcat(roots, [n.idx for n in nodes if length(n.parents)==0])\n        red_nodes = [n for n in nodes if !(n.idx in roots) && length(intersect(n.parents, roots))==0]\n    \n        for n in red_nodes\n            n.parents = [p for p in n.parents if !(p in roots) && (p in map(x->x.idx, red_nodes))]\n        end\n        nodes = red_nodes\n    end\n  \n    sort([n-1 for n in roots])\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200023,"user_id":53,"body":"function optimize(m)\n  res = []\n  visited = [0 for i=1:length(m)]\n  for i in 1:length(m)\n    process(m, i, res, visited)\n  end\n  map((x) -> x - 1, sort(res))\nend\n\nfunction process(m, i, res, visited)\n  if visited[i] == 1\n    return\n  end\n  visited[i] = 1\n  incoming = entry(m, i)\n  for node in incoming\n    process(m, node, res, visited)\n  end\n  for node in incoming\n    if node in res\n      return\n    end\n  end\n  push!(res, i)\nend\n\nfunction entry(m, i)\n  nodes = []\n  for j in 1:length(m)\n    if m[j][i] == 1\n      push!(nodes, j)\n    end\n  end\n  nodes\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200024,"user_id":209,"body":"function optimize(adj_matrix)\n    N = length(adj_matrix)\n    G, B = Dict(i=>[] for i in 1:N), Dict(i=>[] for i in 1:N)\n    for i in 1:N\n        for j in 1:N\n            if adj_matrix[i][j] == 1\n                push!(G[i], j)\n                push!(B[j], i)\n            end\n        end\n    end\n    S = [i for i in 1:N if !in(i, B.keys) && in(i. G.keys)]\n    NS = [i for i in 1:N if !in(i, S) && any(in(i, G[j]) for j in S)]\n    R = [i for i in 1:N if !in(i, vcat(S, NS))]\n    function recurse(R, S, NS)\n        if length(R) == 0\n            return all(any(in(i, B[j]) for i in S) for j in NS) ? sort(S) : false\n        end\n        for i in R\n            A = recurse([_i for _i in R if i != _i && !in(_i, vcat(G[i], B[i]))], vcat(S, [i]), vcat(NS, G[i], B[i]))\n            if A != false\n                return A\n            end\n        end\n        false\n    end\n    map(x->x-1,recurse(R, S, NS))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"60ff1f63c9a4fd005be7ec0c":[{"id":200025,"user_id":106,"body":"function find_reactions(dist, forces)\n  ly = -sum(map(f -> f.fy*(dist - f.d), forces))\n  lx = -sum(map(f -> f.fx, forces))\n  ry = -sum(map(f -> f.fy*f.d, forces))\n  (f_ly = ly \/ dist, f_lx = lx, f_ry = ry \/ dist)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200026,"user_id":209,"body":"function find_reactions(dist, forces)\n    c = sum([-i.fy * i.d for i in forces]) \/ dist\n    (\n       f_ly = sum([-i.fy for i in forces]) - c, \n       f_lx = sum([-i.fx for i in forces]), \n       f_ry = c\n     )\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200027,"user_id":544,"body":"function find_reactions(dist, forces)\n    vert_forces = sum(f -> f.fy, forces)\n    horiz_forces = sum(f -> f.fx, forces)\n    moments = sum(f -> f.fy * f.d, forces)\n\n    ry = -moments \/ dist\n    ly = -ry - vert_forces\n    lx = -horiz_forces\n\n    (f_ly = ly, f_lx = lx, f_ry = ry)\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"62cecd4e5487c10028996e04":[{"id":200028,"user_id":1474,"body":"function racepodium(blocks::Integer)\n  q = blocks \u00f7 3\n  r = blocks % 3\n  if r == 2\n    (q+1, q+2, q-1)\n  elseif r == 1\n    q < 3 ? (q, q+2, q-1) : (q+1, q+2, q-2)\n  else\n    (q, q+1, q-1)\n  end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200029,"user_id":null,"body":"racepodium(b) = isone(b%3) ? (b\u00f73+1-(b==7),b\u00f73+2,b\u00f73-2+(b==7)) : (b\u00f73+1-iszero(b%3),b\u00f73+2-iszero(b%3),b\u00f73-1)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200030,"user_id":168,"body":"function racepodium(blocks::Integer)\n  x = (blocks + 5) \u00f7 3\n  blocks == 7 ? (2, 4, 1) : (x - 1, x, blocks - 2 * x + 1)\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200031,"user_id":53,"body":"function racepodium(n::Integer)\n  c = n \u00f7 3\n  a = c + 2\n  b = c + 1\n  if a+b+c > n\n    c -= 1\n  end\n  if a+b+c > n\n    b -= 1\n  end\n  if a+b+c > n\n    a -= 1\n  end\n  while b+1 < a && c > 1\n    b += 1\n    c -= 1\n  end\n  return (b, a, c)\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200032,"user_id":50,"body":"function racepodium(n::Integer)\n  (j, h) = divrem(n, 3)\n  h = min(1, h) ^ 1\n  a = j + h\n  if n == 7\n    a = a - 1\n  end\n  b = h + j + 1\n  return (a,b,n-a-b)\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"51b66044bce5799a7f000003":[{"id":200033,"user_id":null,"body":"module RomanNumerals\n  export to_roman, from_roman\n\n  const pairsA = [(\"M\",1000);(\"CM\",900);(\"D\",500);(\"CD\",400);(\"C\",100);(\"XC\",90);\n                  (\"L\",50);(\"XL\",40);(\"X\",10);(\"IX\",9);(\"V\",5);(\"IV\",4);(\"I\",1) ]\n  function to_roman(number::Int64)::String\n    str = \"\"\n    num = number\n    for pair in pairsA\n      while num >= pair[2]\n        num -= pair[2]\n        str *= pair[1]\n      end\n    end\n    return str\n  end\n\n  const pairsD = Dict([(p[1][1],p[2]) for p in pairsA if length(p[1])==1])\n  function from_roman(roman)\n    result, highest = 0, 0\n    for k in length(roman):-1:1\n        decimal = pairsD[roman[k]]\n        if decimal<highest\n            result += -decimal\n        else result += decimal\n             highest = decimal\n        end\n    end\n    return result\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200034,"user_id":2525,"body":"module RomanNumerals\n    export to_roman\n    export from_roman\n  # TODO: to_roman() and from_roman() functions\n  \n    function to_roman(n)\n        numeral = \"\"\n        numeral *= repeat(\"M\", div(n, 1000));  n = n%1000\n        numeral *= repeat(\"D\", div(n,  500));  n = n% 500\n        numeral *= repeat(\"C\", div(n,  100));  n = n% 100\n        numeral *= repeat(\"L\", div(n,   50));  n = n%  50\n        numeral *= repeat(\"X\", div(n,   10));  n = n%  10\n        numeral *= repeat(\"V\", div(n,    5));  n = n%   5\n        numeral *= repeat(\"I\", n)\n    \n        numeral = replace(numeral, \"DCCCC\", \"CM\")\n        numeral = replace(numeral,  \"CCCC\", \"CD\")\n        numeral = replace(numeral, \"LXXXX\", \"XC\")\n        numeral = replace(numeral,  \"XXXX\", \"XL\")\n        numeral = replace(numeral, \"VIIII\", \"IX\")\n        numeral = replace(numeral,  \"IIII\", \"IV\")\n    \n        numeral    \n    end\n  \n    function from_roman(roman)\n        Idx   = 1\n        Value = 0\n        while Idx <= length(roman)\n            single = Idx:Idx\n            double = Idx:min(Idx+1, length(roman))\n            \n            if     roman[single] == \"M\"    begin  Value += 1000; Idx += 1  end\n            elseif roman[double] == \"CM\"   begin  Value +=  900; Idx += 2  end\n            elseif roman[single] == \"D\"    begin  Value +=  500; Idx += 1  end\n            elseif roman[double] == \"CD\"   begin  Value +=  400; Idx += 2  end \n            elseif roman[single] == \"C\"    begin  Value +=  100; Idx += 1  end\n            elseif roman[double] == \"XC\"   begin  Value +=   90; Idx += 2  end\n            elseif roman[single] == \"L\"    begin  Value +=   50; Idx += 1  end\n            elseif roman[double] == \"XL\"   begin  Value +=   40; Idx += 2  end\n            elseif roman[single] == \"X\"    begin  Value +=   10; Idx += 1  end\n            elseif roman[double] == \"IX\"   begin  Value +=    9; Idx += 2  end\n            elseif roman[single] == \"V\"    begin  Value +=    5; Idx += 1  end\n            elseif roman[double] == \"IV\"   begin  Value +=    4; Idx += 2  end\n            elseif roman[single] == \"I\"    begin  Value +=    1; Idx += 1  end\n            end\n        end\n        Value\n    end\nend\n\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200035,"user_id":881,"body":"module RomanNumerals\nconst numerals = [\n  (\"M\", 1000);\n  (\"CM\", 900);\n  (\"D\", 500);\n  (\"CD\", 400);\n  (\"C\", 100);\n  (\"XC\", 90);\n  (\"L\", 50);\n  (\"XL\", 40);\n  (\"X\", 10);\n  (\"IX\", 9);\n  (\"V\", 5);\n  (\"IV\", 4);\n  (\"I\", 1)\n]\n\nfunction to_roman(number::Int64)::String\n  str = \"\"\n  num = number\n  for pair in numerals\n    while num >= pair[2]\n      num -= pair[2]\n      str *= pair[1]\n    end\n  end\n  return str\nend\n\nfunction from_roman(string::String)::Int64\n  num = 0\n  str = string\n  for pair in numerals\n    while startswith(str, pair[1])\n      str = str[length(pair[1])+1:end]\n      num += pair[2]\n    end\n  end\n  return num\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200036,"user_id":null,"body":"module RomanNumerals\n\nfunction to_roman(x)\n  roman = \"\"\n  for (numerals, value) in [(\"M\", 1000), (\"CM\", 900), (\"D\", 500), (\"CD\", 400), (\"C\", 100),\n                            (\"XC\", 90),  (\"L\", 50), (\"XL\", 40), (\"X\", 10),\n                            (\"IX\", 9), (\"V\", 5), (\"IV\", 4), (\"I\", 1)]\n    roman *= numerals^(x \u00f7 value)\n    x %= value\n  end\n  roman\nend\n\nfunction from_roman(roman)\n  x = 0\n  last = 0\n  for numeral in reverse(roman)\n    y = Dict(zip(\"IVXLCDM\", [1, 5, 10, 50, 100, 500, 1000]))[numeral]\n    x += y < last ? -y : y\n    last = y\n  end\n  x\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200037,"user_id":null,"body":"module RomanNumerals\n\"\"\"\nnot beautiful, but working code, though.\n\nsmash your ideas to improve it into the comments. thanks :)\n\"\"\"\n\n    function to_roman(num)\n        \n        roman = []\n        for (i,c) in enumerate(digits(num))\n            if i == 4\n                M = div(c, 1)\n                append!(roman, \"M\" ^ M)\n            elseif i == 3\n                if c == 9\n                    append!(roman, reverse([\"C\", \"M\"]))\n                elseif c == 4\n                    append!(roman, reverse([\"C\", \"D\"]))\n                else\n                    D, C = divrem(c, 5)\n                    append!(roman, reverse([\"D\" ^ D, \"C\" ^ C]))\n                end\n            elseif i == 2\n                if c == 9\n                    append!(roman, reverse([\"X\", \"C\"]))\n                elseif c == 4\n                    append!(roman, reverse([\"X\", \"L\"]))\n                else\n                    D, C = divrem(c, 5)\n                    append!(roman, reverse([\"L\" ^ D, \"X\" ^ C]))\n                end\n            elseif i == 1\n                if c == 9\n                    append!(roman, reverse([\"I\", \"X\"]))\n                elseif c == 4\n                    append!(roman, reverse([\"I\", \"V\"]))\n                else\n                    V, I = divrem(c, 5)\n                    append!(roman, reverse([\"V\" ^ V, \"I\" ^ I]))\n                end\n            end\n        end\n        return join(reverse(roman))\n    end\n\n\n    function from_roman(str)\n        dict = Dict(\"I\" => 1, \"IV\" => 4, \"V\" => 5, \"IX\" => 9, \"X\" => 10, \"XL\" => 40, \"L\" => 50, \"XC\" => 90, \"C\" => 100, \"CD\" => 400, \"D\" => 500, \"CM\" => 900, \"M\" => 1000)\n\n        arabic = []\n        for (i,c) in enumerate(str)\n            if i != length(str)\n                dummy = str[i+1]\n                if dict[\"$c\"] < dict[\"$dummy\"]\n                    append!(arabic, dict[c * dummy])\n                    append!(arabic, -dict[\"$dummy\"])\n                    continue\n                end\n            end\n            append!(arabic, dict[\"$c\"])\n        end\n\n        return sum(arabic)\n\n    end\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200038,"user_id":null,"body":"\nmodule RomanNumerals\n    using DataStructures\n\n    function to_roman(n::Integer)::AbstractString\n        vals = OrderedDict(1000=>\"M\",900=>\"CM\",500=>\"D\",400=>\"CD\",100=>\"C\",90=>\"XC\",\n                    50=>\"L\",40=>\"XL\",10=>\"X\",9=>\"IX\",5=>\"V\",4=>\"IV\",1=>\"I\")\n        roman = \"\"\n        for (v,r) in vals\n            while n \u2265 v\n                roman *= r\n                n -= v\n            end\n        end\n        return roman  \n    end\n\n    function from_roman(roman::AbstractString)::Integer\n        numerals = Dict(['M'=>1000,'D'=>500,'C'=>100,'L'=>50,'X'=>10,'V'=>5,'I'=>1])\n        vals = map(n->numerals[n],collect(roman))\n        for i = 2:length(vals)\n            if vals[i-1] < vals[i]\n                vals[i-1] *= -1\n            end\n        end\n        val = sum(vals)\n        # print(\"$roman = $val\")\n        return val\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200039,"user_id":null,"body":"module RomanNumerals\n    \n    function to_roman(n)\n        dics = [Dict(zip(0:3,[\"\",\"M\",\"MM\",\"MMM\"])),\n                Dict(zip(0:9,[\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"])),\n                Dict(zip(0:9,[\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"])),\n                Dict(zip(0:9,[\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"]))]\n        join(dics[D][d] for (D, d) in enumerate(reverse(digits(n, pad = 4))))\n    end\n    \n    function from_roman(rmn)\n        num = Dict('M'=>1000, 'D'=>500, 'C'=>100, 'L'=>50, 'X'=>10, 'V'=>5, 'I'=>1)\n        pair = Dict(\"CM\"=>200, \"CD\"=>200, \"XC\"=>20, \"XL\"=>20, \"IX\"=>2, \"IV\"=>2)\n        sum(num[ch] for ch in rmn) - reduce(+, [pair[p] for p in keys(pair) if occursin(p, rmn)]; init=0)\n    end\n    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200040,"user_id":50,"body":"module RomanNumerals\n  function f(s)\n    return s == \"I\" ? 1 : s == \"IV\" ? 4 : s == \"V\" ? 5 : s == \"IX\" ? 9 : s == \"X\" ? 10 : s == \"XL\" ? 40 : s == \"L\" ? 50 : s == \"XC\" ? 90 : s == \"C\" ? 100 : s == \"CD\" ? 400 : s == \"D\" ? 500 : s == \"CM\" ? 900 : 1000\n  end\n  function from_roman(n)\n    s=[\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    res=0\n    while true\n      for c in s\n        if n == c\n          return res+f(c)\n        elseif startswith(n,c)\n          res+=f(c)\n          n=n[1+length(c):end]\n        end\n      end\n    end\n  end\n  function to_roman(n)\n    s=\"\"\n    for sign in [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n      a=Int(floor(n\/f(sign)))\n      if a>=1\n        n=n%f(sign)\n        s=s*repeat(sign,a)\n        if n == 0\n          return s\n        end\n      end\n    end\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200041,"user_id":null,"body":"module RomanNumerals\n  # TODO: to_roman() and from_roman() functions\n  function to_roman(n::Int)\n    s = \"\"\n    match = [1 => \"I\", 4 => \"IV\", 5 => \"V\", 9 => \"IX\", 10 => \"X\",\n           40 => \"XL\", 50 => \"L\", 90 => \"XC\", 100 => \"C\",\n           400 => \"CD\", 500 => \"D\", 900 => \"CM\", 1000 => \"M\"]\n    while !isempty(match)\n      v = pop!(match)\n      while n >= v[1]\n        n -= v[1]\n        s *= v[2]\n      end\n    end\n  \n    s\n  end\n\n  function from_roman(s::AbstractString)\n    singlematch = Dict(\"M\" => 1000, \"D\" => 500, \"C\" => 100, \"L\" => 50, \"X\" => 10, \"V\" => 5, \"I\" => 1)\n    doublematch = Dict(\"CM\" => 900, \"CD\" => 400, \"XC\" => 90, \"XL\" => 40, \"IX\" => 9, \"IV\" => 4)\n  \n    n = 0\n    while !isempty(s)\n      if length(s) >= 2 && s[1:2] in keys(doublematch)\n        n += doublematch[s[1:2]]\n        s = s[3:end]\n      elseif s[1:1] in keys(singlematch)\n        n += singlematch[s[1:1]]\n        s = s[2:end]\n      else\n        break\n      end\n    end\n  \n    n\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200042,"user_id":null,"body":"module RomanNumerals\n\nval = Dict('M'=>1000, 'D'=>500, 'C'=>100, 'L'=>50, 'X'=>10, 'V'=>5, 'I'=>1)\nvals = ('M'=>1000, \"CM\"=>900, 'D'=>500, \"CD\"=>400, 'C'=>100, \"XC\"=>90, 'L'=>50, \"XL\"=>40, 'X'=>10, \"IX\"=>9, 'V'=>5, \"IV\"=>4, 'I'=>1)\n\nfunction from_roman(s)\n    t = 0\n    for i in 1:length(s)-1\n        t += val[s[i]] * (val[s[i]] < val[s[i+1]] ? -1 : 1)\n    end\n    t += val[s[end]]\n    return t\nend\n\nfunction to_roman(n)\n\tr = \"\"\n\tfor (c,v) in vals\n\t\tq, n = divrem(n, v)\n\t\tr *= c^q\n\tend\n\treturn r\nend\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"51ba717bb08c1cd60f00002f":[{"id":200043,"user_id":null,"body":"module Solution\n    export solution\n    \n    function rangerepresentation(first, last)\n        if first == last\n            return string(first)\n        elseif first + 1 == last\n            return string(first, ',', last)\n        else\n            return \"$(first)-$(last)\"\n        end\n    end\n\n    function solution(list)\n        if list == []\n            return \"\"\n        end\n        res = []\n        first = last = list[1]\n        for x in list[2:end]\n            if x != last + 1\n                push!(res, rangerepresentation(first, last))\n                first = x\n            end\n            last = x\n        end\n        push!(res, rangerepresentation(first, last))\n        return join(res, ',')\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200044,"user_id":null,"body":"module Solution\n  export solution\n  \n  function solution(list)\n    if isempty(list) return \"\" end\n  \n    out_list = [[list[1]]]\n    for val in list[2:end]\n      if val - out_list[end][end] == 1\n        push!(out_list[end], val)\n      else push!(out_list, [val]) end\n    end\n    join(map(x->length(x)>2 ? \"$(x[1])-$(x[end])\" : join(x, \",\"), out_list), \",\")\n  end\n  \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200045,"user_id":null,"body":"module Solution\n  export solution\n  \n  function index_range(list, index :: Int64)\n    if index == length(list) return index end\n    ind = index\n    while ind < length(list) && list[ind+1] == list[ind] + 1 \n      ind+=1\n    end  \n    return ind\n  end\n\n  function range(liste, indstart ::Int64, indend :: Int64)\n    string = \"\"\n    addcomma = indend != length(liste)\n    if indstart == indend \n      string =  \"$(liste[indstart])\" \n    elseif indend == indstart + 1 \n      string =  \"$(liste[indstart]),$(liste[indend])\"\n  \n    else\n      string =  \"$(liste[indstart])-$(liste[indend])\"\n    end\n    addcomma ? (return string*\",\") : ( return string)\n    \n  end\n\n  function solution(list)\n    currentind=1\n    string=\"\"\n    while currentind <= length(list)\n      indend = index_range(list,currentind)\n      string = string*range(list,currentind,indend)\n      currentind = indend +1\n    end\n    return string\n  end\n      \n    \n  \n    \n  \n  \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200046,"user_id":null,"body":"module Solution\n  export solution\n  \n  function solution(list)\n      if(isempty(list))\n          return \"\"\n      end\n      vals = String[]\n      i = list[1:end-1].+1 .!= list[2:end]\n      t = vcat(1,(2:length(list))[i],length(list)+1)\n      d = t[2:end].-t[1:end-1]\n      for (si, len) in zip(t, d)\n          if(len==1)\n              push!(vals,string(list[si]))\n          elseif(len==2)\n              push!(vals,string(list[si]))\n              push!(vals,string(list[si+1]))\n          else\n              push!(vals,\"$(list[si])-$(list[si]+len-1)\")\n          end\n      end\n      join(vals,',')\n  end\n  \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200047,"user_id":null,"body":"module Solution\n  export solution\n  \n  function solution(list)\n    if isempty(list)\n      return \"\"\n    end\n    r = []\n    s = \"\"\n    t = [list[1],list[1]]\n    for i in 2:length(list)\n      if list[i]-t[2] > 1\n        push!(r, t)\n        t = [list[i],list[i]]\n      else\n        t[2] = list[i]\n      end\n    end\n    push!(r, t)\n    for i in 1:length(r)-1\n      if r[i][2]-r[i][1] == 1\n        s *= \"$(r[i][1]),$(r[i][2]),\"\n      elseif r[i][2]-r[i][1] == 0\n        s *= \"$(r[i][1]),\"\n      else\n        s *= \"$(r[i][1])-$(r[i][2]),\"\n      end\n    end\n    if r[end][2]-r[end][1] == 1\n      s *= \"$(r[end][1]),$(r[end][2])\"\n    elseif r[end][2]-r[end][1] == 0\n      s *= \"$(r[end][1])\"\n    else\n      s *= \"$(r[end][1])-$(r[end][2])\"\n    end\n    s\n  end\n  \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200048,"user_id":null,"body":"module Solution\n  export solution\n  \n  function solution(list)\n      a, n = list, length(list)\n      b = [a[i]-i for i = 1:n]\n      d = Dict([v=>k for (k,v) in enumerate(b)])\n      i, rf = 1, []\n      while i \u2264 n\n          push!(rf,\"$(a[i])\")\n          (d[b[i]] - i \u2265 2 \n              ? rf[end] *= \"-$(a[d[b[i]]])\"\n              : d[b[i]] - i == 1 && push!(rf,\"$(a[d[b[i]]])\"))\n          i = d[b[i]] + 1\n      end\n      return join(rf, ',')\n  end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200049,"user_id":null,"body":"module Solution\nexport solution\n\nfunction solution(list)\n    len = length(list)\n    if len == 0\n        return string()\n    elseif len == 1\n        return string(list[1])\n    elseif len == 2\n        return string(list[1], ',', list[2])\n    end\n    str = \"\"\n    b = 1\n    e = 1\n    for i in 2:len\n        if list[i] - list[i-1] == 1\n            e = i\n        else\n            if e - b == 0\n                str *= string(list[e], ',')\n            elseif e - b == 1\n                str *= string(list[b], ',', list[e], ',')\n            else\n                str *= string(list[b], '-', list[e], ',')\n            end\n            b = i\n            e = i\n        end\n    end\n    if e - b == 0\n        str *= string(list[e])\n    elseif e - b == 1\n        str *= string(list[b], ',', list[e])\n    else\n        str *= string(list[b], '-', list[e])\n    end\n    return str\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200050,"user_id":null,"body":"module Solution\n  export solution\n  \n  function solution(list)\n      list == [] && return \"\"\n      newlist, templist = [], [list[1]]\n      for i in 1:length(list)-1\n          if list[i+1]-list[i] == 1\n              push!(templist, list[i+1])\n          else\n              push!(newlist, templist) \n              templist = [list[i+1]]\n          end      \n      end\n      push!(newlist,templist)\n      join([length(j) < 3 ? join(j,\",\") : join([j[1],j[end]],'-') for j in newlist], \",\")   \n    end\n  \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200051,"user_id":null,"body":"module Solution\n  export solution\n  \n  function solution(list)\n    # TODO: complete solution\n    function update_list(res, nstart, nend)\n      if nend - nstart >= 2\n        push!(res, \"$nstart-$nend\")\n      else\n        append!(res, map(string, nstart:nend))\n      end\n    end\n  \n    list = copy(vec(list))\n  \n    res = []\n    if length(list) < 3\n      res = map(string, list)\n    else\n      nstart = nend = popfirst!(list)\n      for (i, n) in enumerate(list)\n        if n == nend + 1\n          nend = n\n        else\n          update_list(res, nstart, nend)\n          nstart = nend = n\n        end\n      end\n      update_list(res, nstart, nend)\n    end\n  \n    join(res, \",\")\n  end\n  \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200052,"user_id":null,"body":"module Solution\n  export solution\n  \n  function solution(list)\n    length(list) == 0 && return \"\"\n  \n    groups = [[list[1]]]\n    for num in list[2:end]\n        num == groups[end][end] + 1 ? push!(groups[end], num) : push!(groups, [num])\n    end\n  \n    answer = \"\"\n    for group in groups\n        answer *= length(group) < 3 ? join(\"$num,\" for num in group) : \"$(group[1])-$(group[end]),\"\n    end\n  \n    answer[1:end-1]\n  end\n  \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"51c8e37cee245da6b40000bd":[{"id":200053,"user_id":null,"body":"solution(input, markers) = rstrip(replace(input, Regex(\"[\\\\s]*[\" * join(markers) * \"][^\n]*\") => \"\"))","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200054,"user_id":881,"body":"solution(input, markers) = replace(input, Regex(\"\\\\s*((\\\\\" * join(markers, \"|\\\\\") * \").*)?\\$\", \"m\")=>\"\")","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200055,"user_id":null,"body":"# Note: Treatment of empty lines is apparently weird, and I found no obvious rule. \n# Tests pass under the following conditions\n#   \"\n\" should be kept if it ends the 1st line.\n#   \"\n\" should be removed if it ends the last line.\n#   \"\n\n\" should be replaced by \"\n\" --> no empty lines inside the string. \n\nfunction solution(input, markers)\n  lines = split(input,\"\n\")\n  \n  stripped_lines = [strip_line(line, markers) for line in lines]\n\n  reassembled_string = join(stripped_lines,\"\n\")\n  \n  return rstrip( replace(reassembled_string, r\"\n\n\" => \"\n\"), '\n')\nend\n\nfunction strip_line(line, markers::Array{String})\n  for m in markers\n    line = keep_until_marker(line, m)\n  end\n  return rstrip(line) #remove whitespace\nend\n\nfunction keep_until_marker(line, marker)\n  return split(line, marker)[1]\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200056,"user_id":null,"body":"function solution(input, markers)\n    output = []\n    for s in split(input, \"\n\")\n        [s = rstrip(split(s, m)[1]) for m in markers]\n        (output == [] && s == \"\" || s != \"\") && push!(output, s)\n    end\n    join(output, \"\n\")   \nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200057,"user_id":null,"body":"function solution(input, markers)\n  s = \"\"\n  flag = false\n  for i in 1:length(input)\n    if flag == false\n      for j in 1:length(markers)\n        if input[i:i] == markers[j]\n          flag = true\n          break\n        end\n      end\n    end\n    if flag == false\n      s *= input[i]\n    end\n    if input[i] == '\n'\n      s *= \"\n\"\n      flag = false\n    end\n  end\n  while true\n    t = replace(s, \" \n\" => \"\n\")\n    t = replace(t, \"\n\n\" => \"\n\")\n    if t == s\n      return rstrip(s)\n    else\n      s = t\n    end\n  end\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200058,"user_id":null,"body":"function solution(input, markers)\n    if length(markers) == 0\n        return input\n    end\n\n    mlines = split(input, '\n') .|>\n        x -> match(Regex(\"([^\"*join(markers)*\"]*).*\"), x).captures[1] |>\n        rstrip\n    flines = mlines[2:lastindex(mlines)] |>\n        y -> filter(!isempty, y) |>\n        z -> join(z, '\n') |>\n        rstrip\n    return join([mlines[1], flines], '\n') |> rstrip\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200059,"user_id":null,"body":"function solution(input, markers)\n    markers = join(markers)\n    output = []\n    for (i, line) in enumerate(split(input, '\n'))\n        text = rstrip(match(Regex(\"[^$markers]*\"), line).match)\n        # Test seems to require different treatment for first line\n        i == 1 ? push!(output, text) : text != \"\" && push!(output, text)\n    end\n    join(output, '\n')\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200060,"user_id":null,"body":"function solution(input, markers)\n    markers = map(s -> s[1], markers)\n    IOBuffer(input) |> \n      readlines |> \n      line -> map(l -> split(l, markers)[1] |> rstrip, line) |> \n      lines -> [line for (i, line) in enumerate(lines) if i == 1 || !isempty(line)] |>\n      lst -> join(lst, \"\n\")\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200061,"user_id":544,"body":"function solution(input, markers)\n    inputlines = split(input, '\n', keepempty=true)\n    marker_chars = map(only, markers)\n    splitlines = map(l -> rstrip(split(l, marker_chars; limit=2)[1]), inputlines)\n    joinedlines = join(filter(!isempty, splitlines), '\n')\n    isempty(splitlines[1]) ? \"\n\" * joinedlines : joinedlines\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200062,"user_id":null,"body":"function solution(input, markers)\n    stripex = Regex(string(\"\\\\s*[\", join(markers), \"].*(?=\\\n|\\$)\"))\n    return rstrip(replace(input, stripex => \"\"))\nend\n\n\n","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"52742f58faf5485cae000b9a":[{"id":200063,"user_id":881,"body":"function format_duration(seconds)\n  if seconds < 1\n    return \"now\"\n  end\n  formatted = []\n  times = [\n    \"year\" => 31536000,\n    \"day\" => 86400,\n    \"hour\" => 3600,\n    \"minute\" => 60,\n    \"second\" => 1\n  ]\n  for t in times\n    s = Int(floor(seconds \/ t[2]))\n    if s >= 1\n      push!(formatted, string(s) * \" \" * t[1] * (s > 1 ? \"s\" : \"\"))\n      seconds %= t[2]\n    end\n  end\n  return join(formatted, \", \", \" and \")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200064,"user_id":null,"body":"function compose_sentence(arr)\n    if length(arr) <= 1\n        return join(arr)\n    else\n        start = join(arr[1:end-1], \", \")\n        return \"$(start) and $(arr[end])\"\n    end\nend\n\nfunction format_duration(s)\n    if s == 0\n        return \"now\"\n    end\n    NAMES = [\"year\", \"day\", \"hour\", \"minute\", \"second\"]\n    y, s = fldmod(s, 31536000)\n    d, s = fldmod(s, 86400)\n    h, s = fldmod(s, 3600)\n    m, s = fldmod(s, 60)\n    res = [\"$(num) $(st)$('s' ^ (num > 1))\" for (num, st) in zip([y, d, h, m, s], NAMES) if num >= 1]\n    return compose_sentence(res)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200065,"user_id":null,"body":"function format_duration(s)\n  if s==0\n    return \"now\"\n  end\n  v = [s\u00f731536000, s\u00f786400%365, s\u00f73600%24, s\u00f760%60, s%60]\n  strs = [\"$(v[1]) year\", \"$(v[2]) day\", \"$(v[3]) hour\", \"$(v[4]) minute\", \"$(v[5]) second\"]\n  join(collect(string(strs[i],v[i]!=1 ? \"s\" : \"\") for i in 1:5 if v[i]!=0), \", \", \" and \")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200066,"user_id":null,"body":"function format_duration(seconds)\n  if seconds == 0 return \"now\" end\n  values = []\n  function formatTime(val, metric)\n    if !iszero(val)\n      push!(values,\"$val $metric$(val==1 ? \"\" : \"s\")\")\n    else nothing end\n  end\n\n  if seconds >= 365*24*3600\n    formatTime(seconds\u00f7(365*24*3600), \"year\")\n    seconds %= 365*24*3600\n  end\n  if seconds >= 24*3600\n    formatTime(seconds\u00f7(24*3600), \"day\")\n    seconds %= 24*3600\n  end\n  if seconds >= 3600\n    formatTime(seconds\u00f7(3600), \"hour\")\n    seconds %= 3600\n  end\n  if seconds >= 60\n    formatTime(seconds\u00f7(60), \"minute\")\n    seconds %= 60\n  end\n  formatTime(seconds, \"second\")\n  join(values, \", \", \" and \")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200067,"user_id":null,"body":"function format_duration(seconds)\n  \n  (m, s) = fldmod(seconds, 60)\n  (h, m) = fldmod(m, 60)\n  (d, h) = fldmod(h, 24)\n  (y, d) = fldmod(d, 365)\n\n  conv(unit, x) = if x>1 \"$x $(unit)s\" elseif x==1 \"$x $unit\" else \"\" end\n\n  a = \n    zip([\"year\", \"day\", \"hour\", \"minute\", \"second\"], [y, d, h, m, s]) |> \n    collect |> \n    (y -> map(x->conv(x...), y)) |>\n    (y -> filter(x -> length(x)>0, y)) \n  \n  if length(a)==0\n    return \"now\"\n  elseif length(a)==1\n    return a[1]\n  else\n    return \"$(join(a[1:(lastindex(a)-1)], \", \")) and $(a[end])\"\n  end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200068,"user_id":null,"body":"const MINUTE = 60\nconst HOUR   = 60  * MINUTE\nconst DAY    = 24  * HOUR\nconst YEAR   = 365 * DAY\n\nfunction label_part(input::Tuple{Int,String})::Union{Missing,String}\n    (n, label) = input\n    n == 0 && return missing\n    n == 1 && return \"1 $label\"\n    \"$n $(label)s\"\nend\n\nfunction stitch_labels(labels::Vector{String})::String\n    num_labels = length(labels)\n    output     = \"\"\n    for (idx, label) in enumerate(labels)\n       output *= label\n       idx == num_labels - 1 && (output *= \" and \")\n       idx <  num_labels - 1 && (output *= \", \")\n    end\n    output\nend\n\nfunction format_duration(seconds::Int)::String\n    seconds == 0 && return \"now\"\n\n    (years,   seconds) = divrem(seconds, YEAR)\n    (days,    seconds) = divrem(seconds, DAY)\n    (hours,   seconds) = divrem(seconds, HOUR)\n    (minutes, seconds) = divrem(seconds, MINUTE)\n\n    part_label_arr = [(years,   \"year\"), \n                      (days,    \"day\"), \n                      (hours,   \"hour\"), \n                      (minutes, \"minute\"), \n                      (seconds, \"second\")]\n    (part_label_arr\n        |> (x -> map(label_part, x))\n        |> skipmissing\n        |> collect\n        |> stitch_labels)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200069,"user_id":null,"body":"function format_duration(seconds)\n  if seconds == 0\n    return \"now\"\n  end\n\n  t = Dict{String, Int}()\n  t[\"minute\"], t[\"second\"] = divrem(seconds, 60)\n  t[\"hour\"],   t[\"minute\"] = divrem(t[\"minute\"], 60)\n  t[\"day\"],    t[\"hour\"]   = divrem(t[\"hour\"], 24)\n  t[\"year\"],   t[\"day\"]   = divrem(t[\"day\"], 365)\n\n  parts = []\n  for unit in (\"year\", \"day\", \"hour\", \"minute\", \"second\")\n    amount = t[unit]\n    if amount > 1\n      push!(parts, \"$amount $(unit)s\")\n    elseif amount > 0\n      push!(parts, \"$amount $unit\")\n    end\n  end\n\n  join(parts, \", \", \" and \")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200070,"user_id":null,"body":"function format_duration(seconds::Int)::String\n  if seconds == 0\n    return \"now\"\n  end\n  \n  units = Tuple{String, Int}[(\"year\", 60 * 60 * 24 * 365), (\"day\", 60 * 60 * 24), (\"hour\", 60 * 60), (\"minute\", 60), (\"second\", 1)]\n  \n  result = String[]\n  for (unit, denom) in units\n    count = div(seconds, denom)\n    seconds -= count * denom\n    if count > 0 \n      plural = count == 1 ? \"\" : \"s\"\n      push!(result, \"$count $unit$plural\")\n    end\n  end\n  \n  if length(result) <= 2\n    return join(result, \" and \")\n  else # length(result) > 2\n    return join(result[1:end-2], \", \") * \", \" * join(result[end-1:end], \" and \")\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200071,"user_id":null,"body":"function format_duration(seconds)\n    seconds == 0 && return \"now\"\n    ret = []\n    for (duration, secs) in ((\"year\", 365*24*3600), \n                             (\"day\", 24*3600), \n                             (\"hour\", 3600),\n                             (\"minute\", 60),\n                             (\"second\", 1))\n        q, r = divrem(seconds, secs)\n        if q > 0 \n          s = q > 1 ? \"s\" : \"\"\n          push!(ret,\"$q $duration$s\")\n        end\n        seconds = r\n    end\n    return join(ret, \", \", \" and \")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200072,"user_id":null,"body":"function format_duration(seconds)\n    seconds == 0 && return \"now\"\n    ret = \"\"\n    for (duration, secs) in ((\"year\", 365*24*3600), \n                             (\"day\", 24*3600), \n                             (\"hour\", 3600),\n                             (\"minute\", 60),\n                             (\"second\", 1))\n        q, r = divrem(seconds, secs)\n        if q > 0 \n          r == 0 && ret != \"\" && (ret *= \" and \")\n          r != 0 && ret != \"\" && (ret *= \", \")\n          ret *= \"$q $duration\"\n          q > 1 && (ret *= \"s\")\n        end\n        seconds = r\n    end\n    return ret\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"52b7ed099cdc285c300001cd":[{"id":200073,"user_id":null,"body":"\nfunction sum_of_intervals(a)\n  return length(Set(idx for (b, e) in a for idx in b+1:e))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200074,"user_id":null,"body":"sum_of_intervals(a) = length(union([i:j-1 for (i, j) in a]...))\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200075,"user_id":null,"body":"function sum_of_intervals(arr)\n  sort!(arr, by=first)\n  println(arr)\n  lower, higher = first(arr)\n  total = 0\n  for (a, b) in arr\n    println(\"$a .. $b\")\n    if a < higher # merge\n      higher = max(higher, b)\n    else\n      total += higher - lower\n      lower, higher = a, b\n    end\n  end\n  total += higher - lower\n  total\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200076,"user_id":null,"body":"function sum_of_intervals(a)\n  # your code here\n  set1 = Set()\n  for pair in a\n    for i = pair[1]:pair[2]-1\n      push!(set1, i::Int)\n    end\n  end\n  println(set1)\n  return length(set1)\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200077,"user_id":881,"body":"function sum_of_intervals(a)\n    len = 1\n    while len != length(a)\n        len = length(a)\n        sort!(a, by=first)\n        i = 1\n        while i < length(a)\n            while length(a) > i && first(a[i + 1]) <= last(a[i])\n                l = splice!(a, i)\n                r = splice!(a, i)\n                insert!(a, i, (first(l), max(last(l), last(r))))\n            end\n            i += 1\n        end\n    end\n    sum(abs(r - l) for (l, r) in a)\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200078,"user_id":null,"body":"function sum_of_intervals(intervals::Vector{Tuple{Int, Int}})\n    numbers = []\n    for (s, e) in intervals\n        # push!(numbers, collect(s:e-1))\n        for num in collect(s:e-1)\n            push!(numbers, num)\n        end\n    end\n\n    return length(Set(numbers))\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200079,"user_id":null,"body":"\"\"\"\nAccepts an array of intervals, and returns the sum of all the interval lengths.\nOverlapping intervals should only be counted once.\n\"\"\"\nfunction sum_of_intervals(a)\n\n    # initialise empty array for Int64 values\n    arr = Array{Int64}([])\n    # loop over all interval-tuples\n    for tuple in a\n        # for each interval-tuple append an vector in that length to arr\n        # 'tuple[2]-1' as the interval is 1 shorter than the elements listed\n        append!(arr, collect(tuple[1]:tuple[2]-1))\n    end\n\n    # check for only unique elements in arr, then calc total length of it\n    return length(unique(arr))\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200080,"user_id":null,"body":"function sum_of_intervals(a)\n  sort!(a,by=x->x[1])\n  i=1\n  while i<length(a)\n      if(a[i][2]>=a[i+1][1])\n          a[i] = (a[i][1],max(a[i][2],a[i+1][2]))\n          popat!(a,i+1)\n      else\n          i += 1\n      end\n  end\n  return sum(x->x[2]-x[1],a)\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200081,"user_id":null,"body":"function sum_of_intervals(a)\n    ordered = sort(a, lt=(i1,i2)->i1[1] < i2[1])\n    s = 0\n    left = right = ordered[1][1] - 1\n    for i in ordered\n        if i[1] > right\n            s += (right - left)\n            left, right = i[1], i[2]\n        else\n            right = max(right, i[2])\n        end\n    end\n    s += right - left\n    return s\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200082,"user_id":null,"body":"function sum_of_intervals(intervals)\n  lowest  = minimum(map(first, intervals))\n  highest = maximum(map(last, intervals))\n  offset  = lowest - 1\n  partition = falses(highest - offset - 1)\n  for interval in intervals\n    start, stop = interval .- offset\n    for i in start:stop-1\n      partition[i] = true\n    end\n  end\n  return sum(partition)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"534e01fbbb17187c7e0000c6":[{"id":200083,"user_id":null,"body":"function spiralize(s::Int)::Matrix{Int}\n  if s == 2\n    return [1 1; 0 1]\n  elseif s == 3\n    return [1 1 1;0 0 1; 1 1 1]\n  else\n    return [\n      fill(1,s)';\n      delta(s)';\n      [rot180(spiralize(s-2)) delta(s-2) fill(1,s-2)]\n    ]\n  end\nend\n\nfunction delta(s::Int)\n  return [fill(0, s-1);1]\nend\n\n","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200084,"user_id":null,"body":"function spiralize(s::Int)::Matrix{Int}\n  A = zeros(Int, s,s)\n  kmax = (s-1)\u00f72\n  for k = 0:2:kmax\n    # Draw a square.\n    A[1+k:s-k, [1+k,s-k]] .= 1\n    A[[1+k,s-k], 1+k:s-k] .= 1\n    \n    # Do some manipulation to turn squares into a spiral.\n    A[2+k,1+k] = 0  # make opening in current square\n    if k+2 \u2264 kmax  # k hasn't reached end\n      A[3+k,2+k] = 1  # connect to next square\n    end\n  end\n  \n  return A\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200085,"user_id":null,"body":"function draw_snake!(board)\n    board[2, 1:end-1] .= 0\n    board[2:end-1, end-1] .= 0\n    board[end-1, 2:end-2] .= 0\n    board[4:end-2, 2] .= 0\n\n    if size(board)[1] > 5\n        sub_board = board[3:end-2, 3:end-2]\n        draw_snake!(sub_board)\n        board[3:end-2, 3:end-2] = sub_board\n    end\n\n    nothing\nend\n\nfunction spiralize(s::Int)::Matrix{Int}\n    mtx = ones(Int, s, s)\n    draw_snake!(mtx)\n    mtx\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200086,"user_id":881,"body":"function spiralize(s::Int)::Matrix{Int}\n  a = (\n    [1 1 1 1; 0 0 0 1; 1 0 0 1; 1 1 1 1],\n    [1], \n    [1 1; 0 1], \n    [1 1 1; 0 0 1; 1 1 1]\n  )[s % 4 + 1]\n\n  while size(a)[1] < s\n    b = repeat([1 0], size(a)[1])\n    a = hcat(b, a, rot180(b))\n    b = hcat(reshape(repeat([1; 0], size(a)[2] - 1), 2, :), [1; 1])\n    a = vcat(b, a, rot180(b))\n    a[end - 1, end] = 1\n    a[3, 2] = 1\n  end\n  \n  return a\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200087,"user_id":null,"body":"function spiralize(s::Int)::Matrix{Int}\n  s, arr = s+2, \"0\"^(s+2)\n  for i in 1:(s\u00f74)\n    arr*=(\"01\"^i*\"1\"^(s-4i)*\"10\"^i)\n    if s-4i > 1  arr*=(\"01\"^i*\"0\"^(s-4i)*\"10\"^i) end\n  end\n  top = reshape(collect(arr).=='0', (s, s\u00f72))\n  rotr90(hcat(top[1:end-2,1:end-(s%4==2)], rot180(.!top[2:end-1, 2:end-(s%4==0)])))\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200088,"user_id":null,"body":"function spiralize(s::Int)::Matrix{Int}\n    mat = ones(Int, s, s)\n    rt, rb, cl, cr = 4, s-1, 2, s-1\n    r, c, dir = 2, 1, 'r'\n    while true\n      mat[r,c] = 0\n\n      if (rt>r>rb && cl>c>cr) break end\n\n      if dir=='r' c+=1 end\n      if dir=='l' c-=1 end\n      if dir=='u' r-=1 end\n      if dir=='d' r+=1 end\n\n      if (c==cr) & (dir=='r') dir='d'; cr-=2 end\n      if (r==rb) & (dir=='d') dir='l'; rb-=2 end\n      if (c==cl) & (dir=='l') dir='u'; cl+=2 end\n      if (r==rt) & (dir=='u') dir='r'; rt+=2 end\n    end\n    mat\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200089,"user_id":null,"body":"function spiralize(s::Int)::Matrix{Int}\n    mat = zeros(Int,s,s)\n    mat[1,1:s] .= 1\n    mat[1:s,s] .= 1\n    mat[s,1:s] .= 1\n    mat[3:s,1] .= 1\n    pos, dir = CartesianIndex(3,1), CartesianIndex(0,1)\n    while(mat[pos+2*dir] != 1 && mat[pos+dir+CartesianIndex(dir.I[2], -dir.I[1])] != 1)\n        pos += dir\n        mat[pos] = 1\n        if(mat[pos+2*dir] == 1)\n            dir = CartesianIndex(dir.I[2], -dir.I[1])\n        end\n    end\n    return mat\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200090,"user_id":null,"body":"function assign!(r, s)\n  r[1,1] = 1\n  if s > 1\n    r[1,:] .= 1\n    r[:,end] .= 1\n    if s > 2\n      r[end,:] .= 1\n      if s > 3\n        r[3:end,1] .= 1\n      end\n      if s > 4\n        r[3,2] = 1\n        @views assign!(r[3:end-2,3:end-2], s-4)\n      end\n    end\n  end\nend\n  \n\nfunction spiralize(s::Int)::Matrix{Int}\n  r = zeros(Int, s, s)\n  assign!(r, s)\n  r\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200091,"user_id":null,"body":"function spiralize(s::Int)::Matrix{Int}\n  m = zeros(Int, s, s)\n  r, c, \u0394r, \u0394c = 1, 1, 0, 1\n  while true\n    m[r,c] = 1\n    if can_step(m,r,c,\u0394r,\u0394c)\n      r, c = r + \u0394r, c + \u0394c\n    else\n      \u0394r, \u0394c = \u0394c, -\u0394r # turn\n      if can_step(m,r,c,\u0394r,\u0394c)\n        r, c = r + \u0394r, c + \u0394c\n      else\n        break\n      end\n    end\n  end\n  return m\nend\n\nfunction can_step(m,x,y,\u0394x,\u0394y)\n  s = size(m)[1]\n  ahead = (1\u2264x+\u0394x\u2264s && 1\u2264y+\u0394y\u2264s && m[x+\u0394x,y+\u0394y]==0)\n  ahead2 = (!(1\u2264x+2\u0394x\u2264s) || !(1\u2264y+2\u0394y\u2264s) || m[x+2\u0394x,y+2\u0394y] == 0)\n  aheadright = (!(1\u2264x+\u0394x+\u0394y\u2264s) || !(1\u2264y+\u0394y-\u0394x\u2264s) || m[x+\u0394x+\u0394y,y+\u0394y-\u0394x] == 0)\n  return ahead && ahead2 && aheadright\nend\n","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200092,"user_id":null,"body":"function freefront(table, pos, goto)\n    n = size(table, 1)\n    if checkbounds(Bool, table, (pos+2goto)...)\n        if table[pos[1]+2goto[1], pos[2]+2goto[2]] == 0\n            return 1\n        end\n    elseif checkbounds(Bool, table, (pos+goto)...)\n        if table[pos[1]+goto[1], pos[2]+goto[2]] == 0\n            return 1\n        end\n    end\n    return 0\nend\n\nfunction spiralize(s::Int)::Matrix{Int}\n    if s == 0\n        return zeros(Int, 0, 0)\n    end\n    res = zeros(Int, s, s)\n    res[1, 1] = 1\n    turn = [0 1; -1 0]\n    goto = [0, 1]\n    pos = [1, 1]\n    le = 1\n    while true\n        way = freefront(res, pos, goto)\n        if way == 1\n            pos += goto\n            res[pos[1], pos[2]] = 1\n            le += 1\n        elseif way == 0\n            goto = turn*goto\n            if le == 1 || le == 0\n                break\n            end\n            le = 0\n        end\n    end\n    return res\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"53d40c1e2f13e331fc000c26":[{"id":200093,"user_id":527,"body":"function fib(n::Int)\n  (n < 0 && iseven(n) ? (-) : (+))((big.([0 1; 1 1]) ^ abs(n))[1, 2])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200094,"user_id":572,"body":"function fib(n)\n    if n<= 0\n        if n == 0\n            return 0\n        elseif mod(n, 2) == 0\n            return -1*fib(-n)\n        else\n            return fib(-n)\n        end\n    end\n    a, b, c, d = 1, 0, 0, 1\n    while n > 1\n        if mod(n-1, 2) == 1\n            a, b = big(d*b) + big(c*a), big(d*(b+a)) + big(c*b)\n        end\n        c, d = big(c^2) + big(d^2), big(d*(2*c+d))\n        n = ((n-1)\u00f72)+1\n    end\n    a+b\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200095,"user_id":null,"body":"function fib(n::Int)\n  n == 0 && return 0\n  evenness = false\n  if n < 0\n    n *= -1\n    evenness = n & 1 == 0\n  end\n  base_shift = leading_zeros(n)\n  prev::BigInt = 0\n  curr::BigInt = 1\n  curr_power = 1\n  while curr_power < n\n    next_curr::BigInt = (big(2) * prev + curr) * curr \n    next_prev::BigInt = prev^2 + curr^2\n    curr_power <<= 1\n    if curr_power != (n >> (leading_zeros(curr_power) - base_shift))\n      curr = next_curr + next_prev\n      prev = next_curr\n      curr_power += 1\n    else\n      curr = next_curr\n      prev = next_prev\n    end\n  end\n  out = curr\n  evenness && (out *= convert(typeof(out), -1))\n  out\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200096,"user_id":null,"body":"function fib(n)\n    F = BigInt[1 1; 1 0]\n    if n >= 0\n        Fn = F ^ n\n    else \n        if n%2 == 0\n          Fn = -(F ^ abs(n))\n        else\n            Fn = F ^ abs(n)\n        end\n    end\n    return Fn[2, 1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200097,"user_id":null,"body":"function fib(n::Int)\n  function fibrec(count::Int, a=BigInt(1), b=BigInt(0), p=BigInt(0), q=BigInt(1))\n    if count == 0 return b end\n    (iseven(count)\n      ? fibrec(count\u00f72, a, b, p^2 + q^2, q^2 + 2*p*q)\n      : fibrec( count-1, b*q + a*q + a*p, b*p + a*q, p, q))\n  end\n  fibrec(abs(n)) * (iseven(n) & (n < 0) ? -1 : 1)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200098,"user_id":null,"body":"function fib(n::Int)\n  if n < 0\n    return -fib(-n)*(-1)^n\n  elseif n == 0\n    return 0\n  else\n    return (big.([1 1; 1 0]) ^ (n-1))[1][1]\n    # exponentiation by squaring allows us to only do log(n) multiplications to compute F_n\n    # see: https:\/\/en.wikipedia.org\/wiki\/Fibonacci_number#Matrix_form\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200099,"user_id":168,"body":"function fib(n::Int)\n  r = ([[big(0) big(1)]; [big(1) big(1)]] ^ abs(n))[1, 2]\n  n < 0 ? (-1) ^ (n + 1) * r : r\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200100,"user_id":null,"body":"function fib(n::Int)\n  ([big(0) 1; 1 1]^abs(n) * [0, 1])[1] * ( n < 0 ? (-1)^(n+1) : 1 )\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200101,"user_id":2525,"body":"Fibs = Dict()\nFibs[0] = 0\nFibs[1] = 1\nFibs[2] = 1\n\nfunction fib(n::Int64)::BigInt\n    if n < 0\n        if n%2 == 0  return -fib(abs(n))\n        else         return  fib(abs(n))\n        end\n    end\n  \n    F = get(Fibs, n, nothing)\n    if isnothing(F)\n        if n%2 == 0\n            F = fib( n\u00f72 ) * ( fib(n\u00f72 - 1) + fib(n\u00f72 + 1) )\n            Fibs[n] = F\n            return F\n        else\n            F = fib((n-1)\u00f72)^2 + fib((n-1)\u00f72 + 1)^2\n            Fibs[n] = F\n            return F\n        end\n    else\n        return F\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200102,"user_id":881,"body":"fib(n::Int, x = sign(n)) = first(BigInt[0 x] * BigInt[0 x; x x] ^ abs(n))\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"54d496788776e49e6b00052f":[{"id":200103,"user_id":492,"body":"module ByFactors\n    export sum_of_divided\n\n    #return a Tuple{Int64,Int64}[]\n    function sum_of_divided(lst)\n        function isprime(n)\n            n > 1 || return false\n            n != 2 || return true\n            isodd(n) || return false\n            for i in 3:isqrt(n)\n                n % i != 0 || return false\n            end\n            true\n        end\n        if lst == [] return Tuple{Int64,Int64}[] end\n        factors = BitSet([i for k in lst for i in 2:(abs(k)+1) if k % i == 0 && isprime(i)])\n        [(p, sum([e for e in lst if e % p == 0])) for p in factors]\n    end  \n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200104,"user_id":null,"body":"module ByFactors\n    export sum_of_divided\n\n    function test_prime(x)\n      for i in 2:sqrt(x)\n        if x%i == 0\n          return false\n        end\n      end\n    true\n    end\n\n    #return a Tuple{Int64,Int64}[]\n    function sum_of_divided(lst)\n      r::Vector{Tuple{Int,Int}} = []\n      if lst == []\n        return r\n      end\n      for p in 2:maximum(abs.(lst))\n        if !test_prime(p)\n          continue\n        end\n        s = 0\n        flag = false\n        for i in lst\n          if i%p == 0\n            s += i\n            flag = true\n          end\n        end\n        if flag\n          push!(r, (p, s))\n        end\n      end\n      r\n    end  \n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200105,"user_id":null,"body":"module ByFactors\n  export sum_of_divided\n\n  function is_coprime(p, n)\n    return !any(x -> n % x == 0, p)\n  end\n\n  function find_primes(n)\n    # finds all primes \u2264n\n    if n == 1\n      return []\n    end\n    primes = [2]\n    for i in 3:2:n\n      if is_coprime(primes, i)\n        push!(primes, i)\n      end\n    end\n    return primes\n  end\n\n  function find_prime_factors(list)\n    upper_bound = maximum(abs.(list))\n    prime_factors = Int[]\n    for p in find_primes(upper_bound)\n      if any(x -> x % p == 0, list)\n        push!(prime_factors, p)\n      end\n    end\n    return prime_factors\n  end\n\n  #return a Tuple{Int64,Int64}[]\n  function sum_of_divided(list)\n    if isempty(list)\n      return []\n    end\n    results = Tuple[]\n    for p in find_prime_factors(list)\n      contains_factor_p = filter(x -> x % p == 0, list)\n      push!(results, (p, sum(contains_factor_p)))\n    end\n    return results\n  end  \n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200106,"user_id":53,"body":"module ByFactors\n  export sum_of_divided\n  function sum_of_divided(lst)\n    if length(lst) == 0\n      return(Tuple{Int64,Int64}[])\n    end\n    m = maximum([abs(e) for e in lst])\n    ls = []\n    hs = zeros(m + 1)\n    for i in 2:m\n      if hs[i] != 0\n        continue\n      end\n      s = 0\n      b = 0\n      for e in lst\n        if abs(e) % i == 0\n          b += 1\n          s += e\n        end\n      end\n      if b > 0\n        push!(ls, (i,s))\n      end\n      j = 2*i\n      while j <= m\n        hs[j] = 1\n        j += i\n      end\n    end\n    ls\n  end  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200107,"user_id":null,"body":"module ByFactors\n    export sum_of_divided\n#this is the worst \"solution\" ever I just wanted to see others\n    function sum_of_divided(list)\n        tuple = Tuple{Int64,Int64}[]\n        primes = genprimes(5700)\n        push!(primes, 7451)\n        sum = 0\n        count = 0\n        for prime in primes\n            for pair in primesin(list, primes)\n                if prime == pair[1]\n                    sum += pair[2]\n                    count = 1\n                end\n            end\n            count > 0 && push!(tuple, (prime, sum))\n            sum = 0\n            count = 0\n        end\n        tuple\n    end\n    function primesin(numbers, primes::Vector{Int64})\n        tuple = Tuple{Int64,Int64}[]\n        for i in numbers\n            for j in primes\n                if i%j == 0\n                    push!(tuple, (j, i))\n                end\n            end\n        end\n        tuple\n    end\n    function genprimes(n)::Vector{Int64}\n        primes = Vector{Int64}()\n        UPPERLIMIT = n\n        is_prime = [(i % 2) > 0 for i in 1:UPPERLIMIT]\n        is_prime[2] = true\n        for num in 3:2:floor(Int,sqrt(UPPERLIMIT))\n            is_prime[num] && foreach(i -> is_prime[i] = false, num*num:2*num:UPPERLIMIT)\n        end\n        foreach(i -> is_prime[i] && push!(primes, i), 2:UPPERLIMIT)\n        primes\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200108,"user_id":null,"body":"module ByFactors\n    export sum_of_divided\n\n    function sum_of_divided(lst)\n        lst == [] && return []\n        facts = [prime_facts(n) for n in lst]\n        [(p, sum(lst[map(j-> p \u2208 facts[j], 1:length(lst))])) for p in reduce(union, facts)|>collect|>sort]\n    end  \n\n    function prime_facts(n, i = 2)\n        n % i == 0 && return union!(Set(i), prime_facts(n\u00f7i, i))\n        for j in Int.((i+1-i%2):2:sqrt(abs(n)))\n            n % j == 0 && return union!(Set(j), prime_facts(n\u00f7j, j))\n        end\n        abs(n) != 1 ? Set(abs(n)) : Set()\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200109,"user_id":null,"body":"module ByFactors\n  export sum_of_divided\n\n  #return a Tuple{Int64,Int64}[]\n  function sum_of_divided(lst)\n    # your code\n    res = Tuple{Int64,Int64}[]\n    if !isempty(lst)\n      maxelt = abs.(lst) |> maximum\n    \n      primes = [2,3,5,7]\n      for n in 9:2:maxelt\n        for p in primes\n          if p * p > n\n            push!(primes, n)\n            break\n          elseif n % p == 0\n            break\n          end\n        end\n      end\n\n      for p in primes\n        matches = []\n        for n in lst\n          if n % p == 0\n            push!(matches, n)\n          end\n        end\n\n        if !isempty(matches)\n          push!(res, (p, sum(matches)))\n        end\n      end\n    end\n  \n    res\n  end  \n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200110,"user_id":null,"body":"module ByFactors\n    export sum_of_divided\n\n    function factor(n)\n        d = Int[]\n        for i = 2:isqrt(n)\n            while n%i == 0\n                n = div(n, i)\n                if !(i in d)\n                    push!(d, i)\n                end\n            end\n        end\n        if n > 1\n            push!(d, n)\n        end\n        return d\n    end\n\n    #return a Tuple{Int64,Int64}[]\n    function sum_of_divided(lst)\n        primes = unique!(sort!(vcat(factor.(abs.(lst))...)))\n        \n        return [(p, sum(lst[findall(x -> x%p == 0, lst)])) for p in primes]\n    end  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200111,"user_id":null,"body":"module ByFactors\nexport sum_of_divided\n\nisprime(x) = all(x % i != 0 for i in 2:floor(Int, \u221ax))\nfunction update!(arr, p, lst, results)\n  s = 0\n  o = false\n  for (i, x) in enumerate(arr)\n    if x % p == 0\n      o = true\n      s += lst[i]\n      while x % p == 0\n        x \u00f7= p\n      end\n      arr[i] = x\n    end\n  end\n  if o\n    push!(results, (p, s))\n  end\n  arr\nend\nfunction sum_of_divided(lst)\n  results = Tuple{Int, Int}[]\n  length(lst) == 0 && return results\n  arr = abs.(lst)\n  update!(arr, 2, lst, results)\n  p = 3\n  while p \u2264 maximum(arr)\n    update!(arr, p, lst, results)\n    p += 2\n    while !isprime(p)\n      p += 2\n    end\n  end\n  results\nend  \n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200112,"user_id":null,"body":"module ByFactors\n    export sum_of_divided\n\n    function primes(n) \n      n = abs(n)\n      ps = []\n      for p = 2:n\n        while n % p == 0\n          push!(ps, p)\n          n \/= p\n        end\n      end\n      ps\n    end\n\n    divs(p) = n -> abs(n) % p == 0\n\n    #return a Tuple{Int64,Int64}[]\n    function sum_of_divided(lst)\n      factors = vcat(map(primes, lst)...) |> unique |> sort\n      map(p -> (p, filter(divs(p), lst) |> sum), factors)\n          \n    end  \n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"54de279df565808f8b00126a":[{"id":200113,"user_id":571,"body":"module Solution\n  export multipleof3regex\n  \n  multipleof3regex = r\"^(1(01*0)*1|0)*$\"\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200114,"user_id":null,"body":"module Solution\nexport multipleof3regex\n  \nmultipleof3regex = r\"^(1(01*0)*1|0)+$\"\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200115,"user_id":168,"body":"module Solution\nexport multipleof3regex\n  \nmultipleof3regex = r\"^(?:0|1(?:01*0)*1)*$\"\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200116,"user_id":null,"body":"module Solution\nexport multipleof3regex\n  \nmultipleof3regex = r\"^0*(1(1|(01*0)*1)0*)*\\Z\"\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200117,"user_id":50,"body":"module Solution\nexport multipleof3regex\n  \nmultipleof3regex = r\"^(0*(1(1|(01*0){1,}1))*)*$\"\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200118,"user_id":2525,"body":"module Solution\nexport multipleof3regex\n  \nmultipleof3regex = r\"\\A0*(1(01*0)*10*)*0*\\Z\"\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200119,"user_id":null,"body":"module Solution\nexport multipleof3regex\n  \nmultipleof3regex = r\"^((1(01*0)*1)*0*)*$\"\n \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200120,"user_id":null,"body":"module Solution\nexport multipleof3regex\n  \nmultipleof3regex = r\"^(0*(1(01*0)*1)*)*$\"\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200121,"user_id":null,"body":"module Solution\nexport multipleof3regex\n  \nmultipleof3regex = r\"^(0*(1(01*0)*1))*0*$\"\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200122,"user_id":null,"body":"module Solution\nexport multipleof3regex\n  \nmultipleof3regex = r\"^(0+|0*1((10*1)|(01*0))*10*)$\"\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"54eb33e5bc1a25440d000891":[{"id":200123,"user_id":492,"body":"module Sq\n    export decompose\n\n    function decompose(n)\n        function loop(s, i)\n            if s < 0\n                return nothing\n            end\n            if s == 0\n                return Int[]\n            end\n            for j in i-1: -1: 0\n                sub = loop(s - j ^ 2, j)\n                if sub != nothing\n                    return Int[sub; [j]]\n                end\n            end\n        end\n        loop(n ^ 2, n)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200124,"user_id":492,"body":"module Sq\n    export decompose\n\n    function decompose(n)\n        function loop(s, i)\n            if s < 0\n                return nothing\n            end\n            if s == 0\n                return Int[]\n            end\n            for j in i-1: -1: 0\n                sub = loop(s - j ^ 2, j)\n                if sub != nothing\n                    return Int[sub; [j]]\n                end\n            end\n        end\n        loop(n ^ 2, n)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200125,"user_id":null,"body":"module Sq\n    export decompose\n\n    function decompose(n)\n        arr = Int[n-1]\n        while((s=sum(x->x*x,arr))!=n*n)\n            if(arr[end]==1)\n                i=1\n                while(arr[end]==i)\n                    pop!(arr)\n                    isempty(arr) && return nothing\n                    i+=1\n                end\n                arr[end]-=1\n            elseif(s>n*n)\n                arr[end]-=1\n            elseif(s<n*n)\n                push!(arr,arr[end]-1)\n            end\n        end\n        return reverse!(arr)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200126,"user_id":null,"body":"module Sq\n    export decompose\n\n    function _dec(n, m)\n        if isqrt(n)^2 == n && isqrt(n) <= m\n            return [isqrt(n)]\n        end\n        for i in min(isqrt(n), m):-1:0\n            result = _dec(n-i^2, i-1)\n            if !isnothing(result)\n                return push!(result, i)\n            end\n        end\n        return nothing\n    end\n\n    function decompose(n)\n        _dec(n^2, n-1)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200127,"user_id":null,"body":"module Sq\n  export decompose\n\n  function decompose(n)\n    function helper(n, m)\n      if n <= 0 || m <= 0\n        return nothing\n      elseif m^2 == n\n        return [m]\n      elseif n > m^2\n        res = helper(n - m^2, m-1)\n        if res == nothing\n          return helper(n, m-1)\n        else\n          push!(res, m)\n          return res\n        end\n      else\n        return helper(n, isqrt(n))\n      end\n    end\n\n    helper(n^2, n-1)\n  end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200128,"user_id":null,"body":"module Sq\n    export decompose\n\n    function decompose(n)\n      rec(n, n*n)\n    end\n\n    function rec(n, n2)\n      if n2 < 0; return nothing end\n      if n2 == 0; return [] end\n      r = [i for i in n-1:-1:0 if i*(i+1)*(2*i+1) >= 6*n2]\n      for j in r\n        next = rec(j, n2-j*j)\n        if next != nothing\n            return append!(next, [j])\n        end\n      end\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200129,"user_id":null,"body":"module Sq\n    export decompose\n\n    function find_solution(r, n)\n        for i in n:-1:1\n          if i ^ 2 <= r\n            if i ^ 2 == r\n              return [i]\n            else\n              sol = find_solution(r - i ^ 2, i - 1)\n              if sol != false\n                return append!([i], sol)\n              end\n            end\n          end\n        end\n        return false\n    end\n              \n    function decompose(n)\n        # your code\n        sol = find_solution(n ^ 2, n - 1)\n        if sol == false\n          return(nothing)\n        else\n          return(reverse(sol))\n        end\n        \n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200130,"user_id":null,"body":"module Sq\n    export decompose\n\n    function deal_with_wrong_ans(sum, result)\n        if length(result) < 2\n            return nothing\n        end\n    \n        sum_tmp = 0\n        result_tmp = Int[]\n        for i in length(result):-1:1\n            result_tmp = result[1:i-1]\n            sum_tmp = sum + reduce(+, result[i:end] .^ 2)\n            for j in Int(result[i] - 1):-1:1\n                if sum_tmp >= j^2\n                    sum_tmp -= j^2\n                    append!(result_tmp, j)\n                end\n            end\n            if sum_tmp == 0\n                return result_tmp\n            end\n        end\n        deal_with_wrong_ans(sum_tmp, result_tmp)\n    end\n    \n    function decompose(n)\n        maybe_lst = Int[]\n        result = Int[]\n        sum = n^2\n        for i in n-1:-1:1\n            append!(maybe_lst, i^2)\n            if sum >= i^2\n                sum -= i^2\n                append!(result, i)\n            end\n        end\n        if length(result) < 2\n            return nothing\n        end\n        if sum != 0\n            result = deal_with_wrong_ans(sum, result)\n            if result == nothing\n                return nothing\n            end\n        end\n    \n        sort(result)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200131,"user_id":null,"body":"module Sq\n    export decompose\n\n    function decompose(n)\n        for b in reverse(1:n-1)\n            a = n^2\n            L = []\n            for x in reverse(1:b)\n                if a >= x^2\n                    push!(L, x)\n                    a = a - x^2\n                end\n                a == 0 ? (return sort(L)) : nothing\n            end\n        end\n        return nothing\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200132,"user_id":null,"body":"module Sq\n    export decompose\n    function decompose(num)\n      answer =  [sqrt(x) for x in decompose_recursive(num*num)]\n      if length(answer)>0\n        if answer[end]!=num\n          return answer\n      end\n      end\n    end\n    function decompose_recursive(n)\n        print(\"Decomposing \",n,\"\n\")\n        if n==1\n          return [1]\n        end\n        if n==2\n          return []\n        end\n        if n==3\n          return []\n        end\n        if n==4\n          return [4]\n        end\n        if n==5\n          return [1,4]\n        end\n        if n==6\n          return []\n        end\n        if n==7\n          return []\n        end\n        if n==8\n          return []\n        end\n        if n==9\n          return [9]\n        end\n        digg=floor(sqrt(n))+1\n        while digg*digg > n\/2\n          digg=digg-1\n          biggest_s = digg*digg\n          print(\"biggest s \",biggest_s,\"\n\")\n          if !(sqrt(biggest_s)%floor(sqrt(biggest_s))==0)\n            continue\n          end\n          if biggest_s == 0\n            return []\n          end\n          other_ss = decompose_recursive(n-biggest_s)\n          if length(other_ss)>0\n            if other_ss[end]!=biggest_s\n              return vcat(other_ss,biggest_s)\n            end\n          end\n        end\n        return []  \n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"551f23362ff852e2ab000037":[{"id":200133,"user_id":881,"body":"function longest_slide_down(pyramid::Vector{Vector{Int}})\n    foldr((a, b) -> a + maximum.(collect(zip(b[1:end-1], b[2:end]))), pyramid)[1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200134,"user_id":527,"body":"function longest_slide_down(pyramid::Vector{Vector{Int}})::Int\n  foldr((xs, ys) -> @.(xs + max(ys[1:end-1], ys[2:end])), pyramid)[1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200135,"user_id":null,"body":"function longest_slide_down(pyramid::Vector{Vector{Int}}, mr=pyramid[1])\n  maximum(map(r -> mr = max.(vcat([0], mr), vcat(mr,[0])).+r, pyramid[2:end])[end])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200136,"user_id":null,"body":"function longest_slide_down(pyramid::Vector{Vector{Int}})\n    for i = length(pyramid)-1:-1:1\n        layer = pyramid[i]\n        for j = 1:length(layer)\n            pyramid[i][j] += max(pyramid[i+1][j], pyramid[i+1][j+1])\n        end\n    end\n    return pyramid[1][1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200137,"user_id":null,"body":"function longest_slide_down(pyramid::Vector{Vector{Int}})\n    for i = length(pyramid)-1:-1:1\n        for j = 1:i\n            pyramid[i][j] += max(pyramid[i+1][j], pyramid[i+1][j+1])\n        end\n    end\n\n    pyramid[1][1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200138,"user_id":53,"body":"function longest_slide_down(pyramid::Vector{Vector{Int}})\n  i = length(pyramid) - 2\n  while i > -1\n    j = 0\n    while j < length(pyramid[i+1])\n      pyramid[i+1][j+1] += max(pyramid[i+2][j+1], pyramid[i+2][j+2])\n      j = j+1\n    end\n    i = i-1\n  end\n  pyramid[1][1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200139,"user_id":null,"body":"function longest_slide_down(pyramid::Vector{Vector{Int}})\n    for i in length(pyramid)-1:-1:1, j in 1:length(pyramid[i])\n        pyramid[i][j] += max(pyramid[i+1][j], pyramid[i+1][j+1])\n    end\n    pyramid[1][1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200140,"user_id":null,"body":"function longest_slide_down(pyramid::Vector{Vector{Int}})\n    n = length(pyramid)\n    for i in n-1:-1:1\n        for j in eachindex(pyramid[i])\n            pyramid[i][j] += max(pyramid[i+1][j], pyramid[i+1][j+1])\n        end\n    end\n    return pyramid[1][1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200141,"user_id":null,"body":"function longest_slide_down(pyramid::Vector{Vector{Int}})\n  for r = length(pyramid)-1:-1:1\n    row = pyramid[r]\n    for pos = 1:length(row)\n      row[pos] += maximum(pyramid[r+1][pos:pos+1])\n    end\n  end\n  pyramid[1][1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200142,"user_id":null,"body":"function longest_slide_down(pyramid::Vector{Vector{Int}})\n  l = length(pyramid)\n  for i in 1:(l-1)\n    for j in 1:length(pyramid[l-i])\n      pyramid[l-i][j] += max(pyramid[l+1-i][j],pyramid[l+1-i][j+1])\n    end\n  end\n  return pyramid[1][1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55983863da40caa2c900004e":[{"id":200143,"user_id":null,"body":"function next_bigger(n::Int64)\n    numbers, test = n |> digits |> sort!, n\n    digits(n) == numbers && return -1\n    while true\n        test += 1\n        test |> digits |> sort! == numbers && return test\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200144,"user_id":53,"body":"function next_bigger(n::Int64)\n  arr = reverse(split(string(n), \"\"))\n  println(arr)\n  i = -1\n  for k in 2:size(arr, 1)\n    if parse(Int64, arr[k - 1]) > parse(Int64, arr[k])\n      i = k\n      break\n    end\n  end\n  if i == -1\n    return -1\n  end\n  slice = arr[1:i-1]\n  j = -1\n  for k in 1:size(slice, 1)\n    if parse(Int64, arr[i]) < parse(Int64, slice[k])\n      j = k\n      break\n    end\n  end\n  slice[j] = arr[i]\n  pre = split(\"\", \"\")\n  if i + 1 <= size(arr, 1)\n    pre = reverse(arr[i+1:size(arr, 1)])\n  end\n  buf = [pre; [arr[j]]; slice]\n  return parse(Int64, join(buf))\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200145,"user_id":null,"body":"\"\"\"\nIf the last k digits of a number follow a reverse order\n\n# Arguments\n- `vec`, digits vector of the number\n- `k`\n\"\"\"\nfunction latter_is_rev(vec::Vector, k::Int64)\n    last = vec[end-k+1:end]\n    last |> sort |> reverse == last ? true : false\nend\n\n\n\n\"\"\"\n\u5f97\u77e5\u540ek-1\u4f4d\u7686\u4e3a\u9006\u5e8f\u4f46\u540ek\u4f4d\u4e0d\u662f\u9006\u5e8f\u540e\n\u8ba1\u7b97 next bigger arrangement\n\"\"\"\nfunction render_bigger(vec::Vector, k::Int64)\n    latter\u2096 = vec[end-k+1:end]\n\n    # \u540ek\u4f4d\u4e2d\u521a\u521a\u5927\u4e8e\u540e\u7b2ck\u4f4d\uff08\u5373\u6b63\u7b2cend-k+1\u4f4d\uff09\u7684\u6570\u5b57\uff0c\u6392\u5230\u540e\u7b2ck\u4f4d\u4e0a\n    # \u7531\u4e8e\u540ek-1\u4f4d\u7684\u9006\u5e8f\u6027\u8d28\uff0c\u7528 findlast()\n    new\u208b\u2096_index = findlast(>(vec[end-k+1]), latter\u2096)\n    new\u208b\u2096_value = latter\u2096[new\u208b\u2096_index]\n\n    # \u540ek\u4f4d\u4e2d\u5176\u4f59\u7684\u6570\u5b57\u987a\u5e8f\u6392\u5217\uff08\u5c3d\u53ef\u80fd\u5c0f\uff09\uff0c\u4f5c\u4e3a\u65b0\u7684\u540ek-1\u5217\n    new_latter\u2096\u208b\u2081 = sort([x for (i, x) \u2208 enumerate(latter\u2096) if i \u2260 new\u208b\u2096_index])\n    [vec[1:end-k]..., new\u208b\u2096_value, new_latter\u2096\u208b\u2081...] |> join |> x -> parse(Int64, x)\nend\n\n\n\nfunction next_bigger(n::Int64)\n    vec = digits(n) |> reverse\n    for k \u2208 2:length(vec)\n        !latter_is_rev(vec, k) && return render_bigger(vec, k)\n    end\n    return -1\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200146,"user_id":null,"body":"\n\"\"\"\nIf the last k digits of a number follow a reverse order\n\n# Arguments\n- `vec`, digits vector of the number\n- `k`\n\"\"\"\nfunction latter_is_rev(vec::Vector{Char}, k::Int64)\n    last = vec[end-k+1:end]\n    sort(last) |> reverse == last ? true : false\nend\n\n\nfunction render_bigger(vec, k)\n    latter_k = vec[end-k+1:end]\n\n    index\u208b\u2096 = findlast(>(vec[end-k+1]), latter_k)\n    value\u208b\u2096 = latter_k[index\u208b\u2096]\n\n    new_latter_k = [value\u208b\u2096, sort([x for (i, x) \u2208 enumerate(latter_k) if i \u2260 index\u208b\u2096])...]\n    [vec[1:end-k]..., new_latter_k...] |> join |> x -> parse(Int64, x)\nend\n\n\nfunction next_bigger(n::Int64)\n    vec = string(n) |> collect\n    for k \u2208 2:length(vec)\n        !latter_is_rev(vec, k) && return render_bigger(vec, k)\n    end\n    return -1\nend\n\n\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200147,"user_id":null,"body":"function next_bigger(n::Int64)\n  if n<10 return -1 end\n  \n  s = string(n)\n  \n  g = (i for i in length(s):-1:2 if s[i]>s[i-1])\n  c = collect(Iterators.take(g, 1))\n  \n  if isempty(c) return -1 end\n  \n  i = c[1]\n\n  if i==length(s)\n    s = s[1:i-2]*s[i]*s[i-1]\n    \n  else\n    prev = s[i-1]\n    tailnums = sort([s[j] for j in (i-1):length(s)])\n    new_prev = collect(\n          Iterators.take(Iterators.filter(x -> x[2]>prev, Iterators.enumerate(tailnums)), 1)\n        )[1]\n    deleteat!(tailnums, new_prev[1])\n\n    s = s[1:(i-2)]*new_prev[2]*join(sort(tailnums),\"\")\n  end\n  \n  parse(Int, s)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200148,"user_id":null,"body":"function next_bigger(n::Int64)\n  s = [string(n)...]\n  for i in length(s):-1:2\n    if s[i] > s[i-1]\n      t = s[i+1:end].>s[i-1]\n      if any(t)\n        x = minimum(s[i+1:end][t])\n        k = indexin(x, s[i+1:end])[1]\n        s[i+k], s[i-1] = s[i-1], s[i+k]\n        @views sort!(s[i:end])\n      else\n        s[i], s[i-1] = s[i-1], s[i]\n        @views sort!(s[i:end])\n      end\n      return parse(Int, *(s...))\n    end\n  end\n  -1\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200149,"user_id":null,"body":"function next_bigger(n::Int64)\n    digs = digits(n)\n    if issorted(digs)\n        return -1\n    end\n    l = length(digs)\n    e = 1\n    for i in 2:l\n        e = i\n        if digs[i] < digs[i-1]\n            break\n        end\n    end\n    b = minimum((digs[i] - digs[e], i) for i in 1:e-1 if digs[i] > digs[e])[2]\n    digs[b], digs[e] = digs[e], digs[b]\n    sort!(@view(digs[1:e-1]), rev=true)\n    return sum(digs[k]*10^(k-1) for k in eachindex(digs))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200150,"user_id":null,"body":"function next_bigger(n::Int64)\n  d = digits(n)\n  found = false\n  for pos = 1:length(d)-1\n    if d[pos+1] < maximum(d[1:pos])\n      found = true\n      nn = d[pos+1]\n      md = minimum(filter(>(nn), d[1:pos]))\n      d[pos+1] = md\n      s = d[1:pos]\n      deleteat!(s, findfirst(==(md), s))\n      append!(s,nn)\n      d[1:pos] = sort(s, rev=true)\n      break\n    end\n  end\n  if found\n    return sum([d[i]*10^(i-1) for i = 1:length(d)])\n  else\n    return -1\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200151,"user_id":50,"body":"function next_bigger(n::Int64)\n  if n<10\n    return -1\n  end\n  s=split(string(n),\"\")\n  r=sort(s)\n  if reverse(s)==r\n    return -1\n  end\n  while true\n    n+=1\n    if sort(split(string(n),\"\"))==r\n      return n\n    end\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200152,"user_id":null,"body":"function next_bigger(n::Int64)\n  num_digits = floor(Int,log10(n)) + 1\n  digits = zeros(Int, num_digits)\n  digits[1] = n\n  for d = 1:num_digits-1\n    q = 10^(num_digits-d)\n    digits[d+1] = digits[d] % q\n    digits[d] = digits[d] \u00f7 q\n  end\n  \n  i = num_digits-1\n  di = 0\n  j = 0\n  dj = 0\n  has_greater_dj = false\n  while i \u2265 1\n    di = digits[i]\n    j = i+1\n    has_greater_dj = false\n    while j \u2264 num_digits\n      dj = digits[j]\n      if dj > di\n        has_greater_dj = true\n        break\n      end\n      j += 1\n    end\n    \n    has_greater_dj && break\n    i -= 1\n  end\n  \n  if !has_greater_dj\n    return -1\n  else\n    for k = j+1:num_digits\n      dk = digits[k]\n      if dk > di && dk < dj\n        j = k\n        dj = dk\n      end\n    end\n    \n    digits[i] = dj\n    digits[j] = di\n    sort!(@view(digits[i+1:end]))\n    \n    nb = 0\n    for p = 1:num_digits\n      nb += digits[p] * 10^(num_digits-p)\n    end\n    return nb\n  end    \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55cf3b567fc0e02b0b00000b":[{"id":200153,"user_id":null,"body":"module IntPart\n    using Printf\n    export part\n\n    function part(n)\n        ps = genpartitionprods(n)\n        L = length(ps)\n        rng = ps[L] - ps[1]\n        avg = sum(ps) \/ L\n        med = isodd(L) ? ps[(L + 1) \u00f7 2] : (ps[L \u00f7 2] + ps[L \u00f7 2 + 1]) \/ 2\n        return Printf.@sprintf \"Range: %i Average: %.2f Median: %.2f\" rng avg med\n    end\n\n    function genpartitionprods(n::Integer)\n        st = []\n        n > 1 && push!(st, (n, 0, 1))\n        prods = []\n        while !isempty(st)\n            m, s, pr = pop!(st)\n            push!(prods, m*pr)\n            m -= 1\n            m == 1 && continue\n            push!(st, (m, s, pr))\n            for i = 1:(n-m-s)\u00f7m\n                s, pr = s+m, pr*m\n                push!(st, (m, s, pr))\n            end\n            r = rem(n-m-s, m)\n            if r > 1\n                s, pr = s+m, pr*m\n                push!(st, (r, s, pr))\n            end\n        end\n        push!(prods, 1)\n        return unique!(sort!(prods))\n    end\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200154,"user_id":null,"body":"module IntPart\n    export part\n    using Printf\n    using Statistics\n\n    function pruned_dfs(arr, n, x = 1, j = 1, d = 0, out = Set())\n        for (i, v) in enumerate(arr)\n            i < j && continue\n            d + v > n && return 1\n            x * v > n && push!(out, x * v)\n            pruned_dfs(arr, n, x * i, i, d + i, out)\n        end\n        out\n    end\n\n    function part(n)\n        prod = [collect(1:n); sort!(collect(pruned_dfs(collect(1:n-2), n)))]\n        @sprintf \"Range: %d Average: %.2f Median: %.2f\" (prod[end] - prod[1]) mean(prod) median(prod)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200155,"user_id":null,"body":"module IntPart\n    export part\n\n    function pruned_dfs(arr, n, x = 1, j = 1, d = 0, out = Set())\n        for (i, v) in enumerate(arr)\n            i < j && continue\n            d + v > n && return 1\n            x * v > n && push!(out, x * v)\n            pruned_dfs(arr, n, x * i, i, d + i, out)\n        end\n        out\n    end\n\n    function part(n)\n        prod = [collect(1:n); sort!(collect(pruned_dfs(collect(1:n-2), n)))]\n        l = length(prod)\n        mean = string(round(sum(prod)\/length(prod), digits=2))\n        mean = endswith(mean, r\"e\\d\") ? replace(mean[1:parse(Int,mean[end])+2], '.' => \"\")*\".\"*mean[parse(Int,mean[end])+1:parse(Int,mean[end])+2] : mean\n        med = iseven(l) ? round((prod[(l \u00f7 2)] + prod[l \u00f7 2 + 1])\/2, digits=2) : float(prod[cld(l, 2)])\n        replace(\"Range: $(prod[end]-prod[1]) Average: $(mean) Median: $(med)\", r\"\\d+\\.\\d(?=\\ |$)\" => x -> x*'0')\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200156,"user_id":null,"body":"module IntPart\nusing Printf\nusing Statistics\nexport part\n\nfunction part(n)\n  range, m1, m2 = if n == 0\n    0, 0, 0\n  else\n    prods = []\n    for i \u2208 1:n\n      s = Set([i])\n      push!(prods, s)\n      for j \u2208 1:i-1\n        union!(s, prods[j] .* (i - j))\n      end\n    end\n    s = prods[end]\n    a, b = extrema(s)\n    b - a, mean(s), median(s)\n  end\n  @sprintf \"Range: %d Average: %.2f Median: %.2f\" range m1 m2\nend\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200157,"user_id":null,"body":"module IntPart\n  export part\n  using Printf\n  using Statistics\n  \n\n  function integer_partitions(n)\n    ps = Set()\n  \n    function inner(p, x, l)\n      push!(ps, p)\n    \n      i = 2\n      while (i <= x && i <= l)\n        inner(p * i, i, l - i)\n        i += 1\n      end\n    end\n    inner(1, n, n)\n    ps\n  end\n\n\n\n  function part(n)\n    i = integer_partitions(n)\n    @sprintf(\"Range: %d Average: %.2f Median: %.2f\", maximum(i) - minimum(i), mean(i), median(i))\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200158,"user_id":53,"body":"module IntPart\n    export part\n    using Printf\n\n    function part(n)\n        ls = init(n)\n        l = length(ls)\n        s = sum(ls)\n        r = ls[l] - ls[1]\n        u = s \/ l\n        m = 0.5 * (ls[1 + l \u00f7 2] + ls[(l - 1) \u00f7 2 + 1])\n        @sprintf(\"Range: %d Average: %.2f Median: %.2f\", r, u, m)\n    end\n\n    function init(n)\n        ans = []\n        k = 1\n        while k <= n\n            for x in gip(1, 0, n, k)\n                push!(ans, x)\n            end\n            k = k + 1\n        end\n        sort!(ans)\n        unique!(ans)\n        ans\n    end\n\n    function gip(p, d, n, k)\n        ans = []\n        if n >= k && k >= 1\n            if k == 1\n                push!(ans, p * (n+d))\n            end\n            for x in gip(p * (d+1), d, n-1, k-1)\n                push!(ans, x)\n            end\n            for x in gip(p, d+1, n-k, k)\n                push!(ans, x)\n            end\n        end\n        ans\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200159,"user_id":null,"body":"module IntPart\n  export part\n  using Statistics, Printf\n  function int_partitions_cull_ones(n)\n    n == 0 && return []\n\n    parts = [[n]]\n    parts_n1 = int_partitions_cull_ones(n - 1)\n\n    for part_n1 in parts_n1\n        if parts[end] != 1\n            push!(parts, [part_n1; 1])\n        end\n        if length(part_n1) > 1 && part_n1[end] < part_n1[end - 1]\n            push!(parts, [part_n1[begin:(end-1)]; part_n1[end] + 1])\n        end\n    end\n    return parts\n  end\n\n  function prod_summary(prods)\n    rng = maximum(prods) - minimum(prods)\n    mn = mean(prods)\n    md = median(prods)\n    @sprintf \"Range: %i Average: %.2f Median: %.2f\" rng mn md\n  end\n\n  function part(n)\n    unique_prods = [prod(Iterators.takewhile(x -> !isone(x), part))\n                    for part in int_partitions_cull_ones(n)] |> unique\n    prod_summary(unique_prods)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200160,"user_id":null,"body":"module IntPart\n  using Printf\n  using Statistics\n\n  export part\n\n  function integer_partitions(n::Integer)\n    prod_set = Set()\n    function inner(prod, max, left)\n      push!(prod_set, prod)\n      i = 2\n      while (i <= max && i <= left)\n        inner(prod * i, i, left - i)\n        i += 1\n      end\n    end\n    inner(1, n, n)\n    prod_set\n  end\n\n  function part(n)\n    a = integer_partitions(n)\n    @sprintf(\"Range: %d Average: %.2f Median: %.2f\", maximum(a) - minimum(a), mean(a), median(a))\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200161,"user_id":null,"body":"module IntPart\n  using Printf\n  using Statistics\n\n  export part\n\n  function integer_partitions(n::Integer)\n    if n < 0\n      throw(DomainError(n, \"n must be nonnegative\"))\n    elseif n == 0\n      return Vector{Int}\n    elseif n == 1\n      return Vector{Int}[[1]]\n    end\n\n    list = Vector{Int}[]\n\n    for p in integer_partitions(n-1)\n      # println([p; 1])\n      push!(list, [p; 1])\n      if length(p) == 1 || p[end] < p[end-1]\n        push!(list, [p[1:end-1]; p[end]+1])\n      end\n    end\n\n    list\n  end\n\n  function part(n)\n    a = unique!((x -> prod(x)).(integer_partitions(n)))\n    @sprintf(\"Range: %d Average: %.2f Median: %.2f\", reduce(max, a) - reduce(min, a), mean(a), median(a))\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200162,"user_id":null,"body":"module IntPart\n    export part\n    using Printf\n\n    function part(n)\n        maxnum = n\n        n > 3 && (maxnum = n%3==1 ? 4*(3^(n\u00f73-1)) : 3^(n\u00f73)*2^(n%3\u00f72))\n    \n        result = collect(1:n)\n        sum_to_calc_avr = sum(result)\n        len = n\n    \n        is_in_list = trues(maxnum)\n    \n        for i in n+1:maxnum\n            if is_in_list[i]\n                sum_of_i = 0\n                num = i\n                j = 2\n                while j <= (n-sum_of_i) && num > 1\n                    if num % j == 0\n                        sum_of_i += j\n                        num \/= j\n                    else\n                        j += 1\n                    end\n                end\n    \n                if num == 1 && sum_of_i <= n\n                    sum_to_calc_avr += i\n                    len += 1\n                    push!(result, i)\n                else\n                    j = 2\n                    num = i*j\n                    while num < maxnum\n                        is_in_list[num] = false\n                        j += 1\n                        num = i*j\n                    end\n                end\n            else\n                j = 2\n                num = i*j\n                while num < maxnum\n                    is_in_list[num] = false\n                    j += 1\n                    num = i*j\n                end\n            end\n        end\n    \n        mid = 1\n        len > 1 && (mid = len%2==0 ? ((result[len\u00f72]+result[len\u00f72+1])\/2) : result[(len+1)\u00f72])\n    \n        @sprintf \"Range: %d Average: %.2f Median: %.2f\" maxnum-1 round(sum_to_calc_avr\/len; digits=2) mid\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5629db57620258aa9d000014":[{"id":200163,"user_id":null,"body":"module Kata\n  export mix_strings\n  \n  const lwrcase = \"abcdefghijklmnopqrstuvwxyz\"\n\n  function mix_strings(s1, s2)\n    maxcount = []\n    for c in lwrcase\n      c1 = count(x->(x==c),s1)\n      c2 = count(x->(x==c),s2)\n      if c1>1 || c2>1\n        if c1>c2\n          push!(maxcount, \"1:\"*string(c)^c1)\n        elseif c2>c1\n          push!(maxcount, \"2:\"*string(c)^c2)\n        elseif c1==c2 \n          push!(maxcount, \"=:\"*string(c)^c2)\n        end\n      end\n    end\n    return join(sort(maxcount, by=x->(-length(x),x) ),'\/')\n  end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200164,"user_id":null,"body":"module Kata\nexport mix_strings\n\nfunction mix_strings(s1, s2)\n\ts1 = filter(i -> islowercase(i[1]) && count(j -> j == i, split(s1, \"\")) > 1, split(s1, \"\"))\n\ts2 = filter(i -> islowercase(i[1]) && count(j -> j == i, split(s2, \"\")) > 1, split(s2, \"\"))\n\ts = unique(vcat(s1, s2))\n\tfunction lt(a, b)\n\t\tif (length(a) > length(b)) return true\n\t\telseif (length(a) < length(b)) return false\n\t\telse\n\t\t\tx = 1\n\t\t\twhile try a[x] == b[x] catch e false end x += 1 end\n\t\t\treturn a[x] < b[x]\n\t\tend\n\tend\n\n\tjoin(sort(map(i -> (count(j -> j == i, s1) > count(j -> j == i, s2) ? \"1\" : (count(j -> j == i, s1) == count(j -> j == i, s2) ? \"=\" : \"2\")) * \":\" * repeat(i, max(count(j -> j == i, s1), count(j -> j == i, s2))), s), lt=lt), \"\/\")\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200165,"user_id":null,"body":"module Kata\n  export mix_strings\n\n  function mix_strings(s1, s2)\n      counts = []\n      for ch in 'a':'z'\n          c1, c2 = count(==(ch), s1), count(==(ch), s2)\n          (1 < c1 || 1 < c2) && push!(counts, c2 < c1 ? [\"1:\", ch^c1] : c1 < c2 ? [\"2:\", ch^c2] : [\"=:\", ch^c1])\n      end\n      join(join.(sort!(counts, by = x-> (-length(x[2]), x))),\"\/\")\n  end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200166,"user_id":null,"body":"module Kata\n  export mix_strings\n\n  function mix_strings(s1, s2)\n    q1 = filter(islowercase, s1) |> collect |> sort |> s -> [(c => count(==(c), s)) for c in unique(s)] |> s -> sort(s, by=x->-x[2])\n    q2 = filter(islowercase, s2) |> collect |> sort |> s -> [(c => count(==(c), s)) for c in unique(s)] |> s -> sort(s, by=x->-x[2])\n    \n    res = []\n  \n    while true\n      if !isempty(q1) && !isempty(q2)\n        if q1[1][2] == q2[1][2]\n          n = q1[1][2]\n          if n == 1\n            break\n          end\n        \n          arr1 = []\n          arr2 = []\n        \n          while !isempty(q1) && (q1[1][2] == n)\n            push!(arr1, popfirst!(q1)[1])\n          end\n        \n          while !isempty(q2) && (q2[1][2] == n)\n            push!(arr2, popfirst!(q2)[1])\n          end\n        \n          u12 = intersect(Set(arr1), Set(arr2))\n          arr12 = sort(collect(u12), by=ii->ii[1])\n        \n          for k in arr1\n            if k \u2209 u12\n              push!(res, \"1:$(repeat(k, n))\")\n              filter!(ii -> ii[1] != k[1], q2)\n            end\n          end\n        \n          for k in arr2\n            if k \u2209 u12\n              push!(res, \"2:$(repeat(k, n))\")\n              filter!(ii -> ii[1] != k[1], q1)\n            end\n          end\n        \n          for k in arr12\n            push!(res, \"=:$(repeat(k, n))\")\n          end\n        elseif q1[1][2] > q2[1][2]\n          item = popfirst!(q1)\n          push!(res, \"1:$(repeat(item[1], item[2]))\")\n          filter!(ii -> ii[1] != item[1], q2)\n        else\n          item = popfirst!(q2)\n          push!(res, \"2:$(repeat(item[1], item[2]))\")\n          filter!(ii -> ii[1] != item[1], q1)\n        end\n      elseif isempty(q1) && !isempty(q2) && q2[1][2] > 1\n          item = popfirst!(q2)\n          push!(res, \"2:$(repeat(item[1], item[2]))\")\n      elseif isempty(q2) && !isempty(q1) && q1[1][2] > 1\n          item = popfirst!(q1)\n          push!(res, \"1:$(repeat(item[1], item[2]))\")\n      else\n        break\n      end\n    end\n  \n    join(res, \"\/\")\n  end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200167,"user_id":null,"body":"module Kata\n  export mix_strings\n\n    function mix_strings(s1, s2)\n        dic1, let1 = dicprep(s1,'1')\n        dic2, let2 = dicprep(s2,'2')\n        letters = union(let1,let2)\n        isempty(letters) && return \"\"\n        arr = arrayprep(dic1,dic2,letters)\n        srtd1 = sort(arr, rev=true)\n        srtd2 = []\n        for i in srtd1[1][1]:-1:2\n            srt = sort(srtd1[findall(x->x[1]==i, srtd1)])\n            if srt != [] append!(srtd2,srt) end\n        end\n        chop(join(\"$(item[2]):$(item[3]^item[1])\/\" for item in srtd2))\n    end\n\n    function dicprep(str, n)\n        one = join(sort(collect(join([x.match for x in eachmatch(r\"[a-z]+\", str)]))))\n        two = Dict([(x.match[1],[length(x.match),n]) for x in eachmatch(r\"(.)\\1+\", one)])\n        three = Set(keys(two))\n        return two, three\n    end\n  \n    function arrayprep(dic1,dic2,letters)\n        arr = []\n        for l in letters\n            if haskey(dic1,l) && haskey(dic2,l)\n                if dic1[l][1] < dic2[l][1]\n                    push!(arr, push!(dic2[l],l))\n                elseif dic1[l][1] > dic2[l][1]\n                    push!(arr, push!(dic1[l],l))\n                else\n                    new = dic1[l]\n                    new[2] = '='\n                    push!(arr, push!(new,l))\n                end\n            elseif haskey(dic1,l)\n                push!(arr, push!(dic1[l],l))\n            else\n                push!(arr, push!(dic2[l],l))\n            end\n        end\n        arr\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200168,"user_id":null,"body":"module Kata\n  export mix_strings\n\n  function mix_strings(s1, s2)\n    \n    if s1==\"\" || s2==\"\"\n      return \"\"\n    end\n    \n    tmp1=[]\n    tmp2=[]\n    eq=[]\n    res=[]\n\n    for char in 'a':'z'\n        allin1=findall(it->it==char,s1)\n        allin2=findall(it->it==char,s2)\n\n            if length(allin1) < 2 && length(allin2) < 2\n                continue\n            elseif length(allin1) < 2 && length(allin2) > 1\n                push!(tmp2,string(\"2:\",repeat(char,length(allin2)),\"\/\"))\n            elseif length(allin2) < 2 && length(allin1) > 1\n                push!(tmp1,string(\"1:\",repeat(char,length(allin1)),\"\/\"))\n            elseif length(allin2) <  length(allin1)\n                push!(tmp1,string(\"1:\",repeat(char,length(allin1)),\"\/\"))\n            elseif length(allin1) < length(allin2)\n                push!(tmp2,string(\"2:\",repeat(char,length(allin2)),\"\/\"))\n            elseif length(allin1)==length(allin2)\n                push!(eq,string(\"=:\",repeat(char,length(allin1)),\"\/\"))\n            end\n    end\n\n    tmp1=sort(tmp1,by=it->length(it),rev=true)\n    tmp2=sort(tmp2,by=it->length(it),rev=true)\n    eq=sort(eq,by=it->length(it),rev=true)\n  \n    if length(eq)==0 && length(eq) == length(tmp1) && length(tmp1) == length(tmp2)\n      return \"\"\n    end\n\n    maxlength=max([length(it) for it in [tmp1...,tmp2...,eq...]]...)\n\n    for m in reverse(1:maxlength)\n        for it in [tmp1,tmp2,eq]\n            (length(filter(x->length(x)==m,it)) > 0) ? push!(res,filter(x->length(x)==m,it)...) : continue\n        end\n    end\n\n    string(res...)[1:end-1]\n  end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200169,"user_id":null,"body":"module Kata\n  export mix_strings\n  using DataStructures\n  function lower_counts(s)\n    lower_only = filter(islowercase, s)\n    lower_only_sorted = join(sort(collect(lower_only)))\n    println(lower_only_sorted)\n    groups = (match.match for match in eachmatch(r\"(.)\\1+\", lower_only_sorted))\n    count_dict = Dict{Char, Vector{Int64}}((first(group) => [length(group)] for group in groups))\n    #sort(collect(count_dict), by = x -> x[2], rev = true)\n  end\n  function combine_counts(c1, c2)\n    for key in union(keys(c1), keys(c2))\n      haskey(c1, key) || (c1[key] = [0])\n      haskey(c2, key) || (c2[key] = [0])\n    end\n    merged = merge(vcat, c1, c2)\n    mix_dict = Dict{Char, String}()\n    for (letter, counts) in merged\n      if counts[1] == counts[2]\n        mix_dict[letter] = \"=:$(repeat(letter, counts[1]))\"\n      else\n        (val, s) = findmax(counts)\n        mix_dict[letter] = \"$s:$(repeat(letter, val))\"\n      end\n    \n    end\n    return mix_dict\n  end\n  function sorting_isless(a, b)\n    length(a) < length(b) && return true\n    length(a) > length(b) && return false\n    a > b\n  end\n  function mix_strings(s1, s2)\n    mix_dict = combine_counts(lower_counts(s1), lower_counts(s2))\n    sorted = sort(collect(mix_dict), by = x -> (-length(x[2]), x[2]))\n    join([entry[2] for entry in sorted], \"\/\")\n  end\n\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200170,"user_id":null,"body":"module Kata\n  export mix_strings\n\n  function customsort(tup1, tup2)\n    if tup1[2] == tup2[2]\n        if tup1[3] == tup2[3]\n            return tup1[1] > tup2[1]\n        end\n        return tup1[3] > tup2[3]\n    end\n    return tup1[2] < tup2[2]\n  end\n\n  function mix_strings(s1, s2)\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n\n    counts_s1 = Dict{Char, Int}()\n    counts_s2 = Dict{Char, Int}()\n\n    for letter in letters\n        counts_s1[letter] = 0\n        counts_s2[letter] = 0\n    end\n\n    for letter in s1\n        if haskey(counts_s1, letter)\n            counts_s1[letter] += 1\n        end\n    end\n    for letter in s2\n        if haskey(counts_s2, letter)\n            counts_s2[letter] += 1\n        end\n    end\n\n    all_counts = []\n    for (key, value) in counts_s1\n        if haskey(counts_s2, key) && counts_s2[key] > 1\n            if counts_s2[key] > value\n                push!(all_counts, (key, counts_s2[key], '2'))\n                continue\n            elseif counts_s2[key] == value\n                push!(all_counts, (key, counts_s2[key], '='))\n                continue\n            end\n        end\n        if value > 1\n            push!(all_counts, (key, value, '1'))\n        end\n    end\n\n    for (key, value) in counts_s2\n        if !haskey(counts_s1, key) && value > 1\n            push!(all_counts, (key, value, '2'))\n        end\n    end\n\n    sort!(all_counts, lt = customsort, rev = true)\n    arr = []\n    for count in all_counts\n        push!(arr, count[3] * \":\" * (count[1] ^ count[2]))\n    end\n    return join(arr, \"\/\")\n  end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200171,"user_id":null,"body":"module Kata\n  export mix_strings\n\n  function getLetterCounts(s)\n    d = Dict()\n    for c in s\n      if islowercase(c)\n        d[c] = get(d, c, 0) + 1\n      end\n    end\n    d\n  end\n\n  function mix_strings(s1, s2)\n    s1LetterCounts = getLetterCounts(s1)\n    s2LetterCounts = getLetterCounts(s2)\n    union(keys(s1LetterCounts), keys(s2LetterCounts)) |>\n      x -> filter((c -> get(s1LetterCounts, c, 0) > 1 || get(s2LetterCounts, c, 0) > 1), x) |>\n      x -> map(collect(x)) do c\n        if haskey(s1LetterCounts, c) && haskey(s2LetterCounts, c)          \n          count = max(s1LetterCounts[c], s2LetterCounts[c])\n          prefix = (s1LetterCounts[c] == s2LetterCounts[c] ? \"=\" : (s1LetterCounts[c] > s2LetterCounts[c] ? \"1\" : \"2\"))\n        elseif haskey(s1LetterCounts, c)\n          count = s1LetterCounts[c]\n          prefix = \"1\"\n        else\n          count = s2LetterCounts[c]\n          prefix = \"2\"\n        end\n        prefix * \":\" * repeat(c, count)\n      end |>\n      x -> sort(x, lt = ((a, b) -> length(a) == length(b) ? (a[1] == b[1] ? a[3] < b[3] : a[1] < b[1]) : length(a) > length(b))) |>\n      x -> join(x, \"\/\")\n  end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200172,"user_id":null,"body":"module Kata\n    export mix_strings\n\n    function mix_strings(s1, s2)\n        result = String[]\n        for c in 'a':'z'\n            cnt_ch_s1 = length(findall(x->x==c, s1))\n            cnt_ch_s2 = length(findall(x->x==c, s2))\n            cur_str = \"\"\n            if cnt_ch_s1 > 1 || cnt_ch_s2 > 1\n                if cnt_ch_s1 == cnt_ch_s2\n                    cur_str *= \"=:\"\n                    cur_str *= repeat(c, cnt_ch_s1)\n                elseif cnt_ch_s1 > cnt_ch_s2\n                    cur_str *= \"1:\"\n                    cur_str *= repeat(c, cnt_ch_s1)\n                else\n                    cur_str *= \"2:\"\n                    cur_str *= repeat(c, cnt_ch_s2)\n                end\n                push!(result, cur_str)\n            end\n        end\n    \n        sort_method(s) = s[1]=='=' ? length(s)*100+('z'-s[end]) : length(s)*100+26*(3-parse(Int, s[1]))+('z'-s[end])\n        join(sort(result; rev = true, by = sort_method), '\/')\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5672682212c8ecf83e000050":[{"id":200173,"user_id":572,"body":"module Kata\n  export dbl_linear\n  function dbl_linear(n::Int) \n    u = [1]\n    for i in range(1, stop=Int(floor(6.6n)))\n      append!(u, 2*(u[i])+1)\n      append!(u, 3*(u[i])+1)\n    end\n    unique!(sort!(u))[n+1]\n  end\nend ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200174,"user_id":null,"body":"module Kata\n  export dbl_linear\n  function dbl_linear(n::Int) \n    vec = Int[1]\n    function helper(a)\n      push!(vec,2*a+1)\n      push!(vec,3*a+1)\n      if(3*a+1<n^1.3)\n        helper(2*a+1)\n        helper(3*a+1)\n      end\n    end\n    helper(1)\n    sort!(unique!(vec))\n    return vec[n+1]\n  end\nend ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200175,"user_id":null,"body":"\nmodule Kata\n  using DataStructures\n  export dbl_linear\n  function dbl_linear(n::Int) \n      h = BinaryMinHeap{Int}([1])\n      s = Set([1])\n      c = 0\n      while c < n\n          u = pop!(h)\n          2u+1 \u2209 s && (push!(h, 2u+1); push!(s, 2u+1))\n          3u+1 \u2209 s && (push!(h, 3u+1); push!(s, 3u+1))\n          c += 1\n      end\n      return first(h)\n  end\nend ","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200176,"user_id":null,"body":"module Kata\n  export dbl_linear\n  function dbl_linear(n::Int) \n    l = Set([1])\n    pos = 1\n    while length(l) < n+1\n      pos += 1\n      if ((pos % 2) == 1 && div(pos-1,2) in l) || ((pos % 3) == 1 && div(pos-1,3) in l)\n        push!(l, pos)\n      end\n    end\n    pos\n  end\nend ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200177,"user_id":null,"body":"module Kata\n  export dbl_linear\n\n    using DataStructures\n    function dbl_linear(n::Int)\n        h = BinaryMinHeap([1])\n        s = Set()\n        for i in 1:n\n            x = pop!(h)\n            for y in [2x + 1, 3x + 1]\n                y in s || push!(h, y); push!(s, y)\n            end\n        end\n        pop!(h)\n    end\n\nend ","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200178,"user_id":null,"body":"module Kata\n  export dbl_linear\n      function dbl_linear(n::Int) \n          seq, i, j = [1], 1, 1\n          for _ in 1:n\n              temp2, temp3 = 2*seq[i]+1, 3*seq[j]+1\n              if temp2 < temp3\n                  push!(seq, temp2)\n                  i += 1\n              elseif temp3 < temp2\n                  push!(seq, temp3)\n                  j += 1\n              else\n                  push!(seq, temp2)\n                  i += 1\n                  j += 1\n              end\n          end\n          seq[n+1]        \n      end\nend ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200179,"user_id":50,"body":"module Kata\n  export dbl_linear\n  function dbl_linear(n::Int) \n    i=1\n    j=1\n    v = Int[]\n    push!(v,1)\n    for x in 0:n\n      a=v[i]*2+1\n      b=v[j]*3+1\n      if a<=b\n        push!(v,a)\n        i=i+1\n        if a==b\n          j=j+1\n        end\n      elseif b<a\n        push!(v,b)\n        j=j+1\n      end\n    end\n    return v[n+1]\n  end\nend ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200180,"user_id":null,"body":"module Kata\n  export dbl_linear\n\n  function dbl_linear(n::Int)\n    u = [false, true]\n      \n    last_n = 1\n    n_ix = 0\n\n    c = 2\n    while n_ix < n\n      cm = c - 1\n      ok = (u[cm \u00f7 2 + 1] && cm % 2 == 0) || (u[cm \u00f7 3 + 1] && cm % 3 == 0)\n      push!(u, ok)\n    \n      if ok\n        n_ix += 1\n        last_n = c\n      end\n\n      c += 1\n    end\n    return last_n\n  end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200181,"user_id":null,"body":"module Kata\n  export dbl_linear\n  function dbl_linear(n::Int)\n    u = [1, 0, 3, 4]\n    i = 4\n    track = 3\n    while track < n + 1\n        i += 1\n        append!(u, 0)\n        q, r = divrem(i-1, 3)\n        if r == 0 && u[q] != 0\n            u[i] = i \n            track += 1\n        else \n            q, r = divrem(i-1, 2)\n            if r == 0 && u[q] != 0\n                u[i] = i \n                track += 1\n            end \n        end\n    end\n    i\n  end \nend ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200182,"user_id":null,"body":"module Kata\n  export dbl_linear\n  function dbl_linear(n::Int)\n    qy = []\n    qz = []\n    x = 1\n    for _ in 1:n\n      push!(qy, 2 * x + 1)\n      push!(qz, 3 * x + 1)\n    \n      x = first(qy) <= first(qz) ? first(qy) : first(qz)\n\n      if x == first(qy) \n        popfirst!(qy)\n      end\n    \n      if x == first(qz)\n        popfirst!(qz)\n      end\n    end\n  \n    return x\n  end\nend ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56c04261c3fcf33f2d000534":[{"id":200183,"user_id":null,"body":"module Magnet\n    export doubles\n\n  \t\u03a3 = sum\n\t  v(k,n) = 1\/(k*(n+1.)^2k)\n\n    function doubles(K,N)\n\t\t  \u03a3( v(k,n) for n=1:N, k=1:K )\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-18 14:06:47"},{"id":200184,"user_id":572,"body":"module Magnet\n    export doubles\n\n    function doubles(maxk, maxn)\n      c=0\n      for k in 1:maxk\n        for n in 1:maxn\n          c += ((k)^(-1))*(float(n+1)^(-2k))\n        end\n       end\n       c\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200185,"user_id":null,"body":"module Magnet\n    export doubles\n    \n    function doubles(maxk, maxn)\n        return(sum([1\/(k * (n+1)^(2k)) for k in 1:maxk, n in 1:maxn if 1\/(k * (n+1)^(2k)) != Inf]))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200186,"user_id":null,"body":"module Magnet\n    export doubles\n\nfunction doubles(maxk, maxn)\n  term(k, n) = 1 \/ k \/ (n + 1.0)^(2k)\n  [term(k, n) for k in 1:maxk for n in 1:maxn] |> sum\nend\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200187,"user_id":null,"body":"module Magnet\n    export doubles\n\n    function doubles(maxk, maxn)\n       \n  v((k, n)) = 1 \/ (k * (n + 1.) ^ 2k)\n\n  # \u2211(v(k, n) for n = 1:maxn, k = 1:maxk)\n  reduce(+ ,map(v, Iterators.product(1:maxk, 1:maxn)))\n\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200188,"user_id":null,"body":"module Magnet\n    export doubles\n\n    function doubles(maxk, maxn)\n        tot::Float64 = 0.0\n        for k in 1:maxk\n          u::Float64 = 0.0\n          for n in 1:maxn\n            val = 1\/(k*(n+1)^(2*k))\n            if isinf(val)\n              continue\n            else\n              u += val\n            end\n          end\n          tot += u\n        end\n        return tot\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200189,"user_id":null,"body":"module Magnet\n    export doubles\n\n    function doubles(maxk, maxn)\n      r = 0.\n      for n in maxn:-1:1\n        for k in maxk:-1:1\n          r += 1\/(n+1.)^(2k)\/k\n        end\n      end\n      r\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200190,"user_id":null,"body":"module Magnet\n    export doubles\n\n    function doubles(maxk, maxn)\n        s = 0\n        inv = ones(maxn)\n        for k = 1:maxk\n            for n = 1:maxn\n                inv[n] = inv[n] \/ (n+1)^2\n                s += inv[n] \/ k\n            end\n        end\n        return s\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200191,"user_id":null,"body":"module Magnet\n    export doubles\n\n    function doubles(maxk, maxn)\n        sum(sum((1\/(n+1))^(2*k) for n in 1:maxn)\/k for k in 1:maxk)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200192,"user_id":50,"body":"module Magnet\n    export doubles\n\n    function doubles(maxk, maxn)\n      return sum(sum((n+1)^(-2.0*k) for n in 1:maxn)\/k for k in 1:maxk)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5765870e190b1472ec0022a2":[{"id":200193,"user_id":null,"body":"module Kata\nexport path_finder\n\nfunction path_finder(maze::AbstractString)::Bool\n    # transpose the string to 6x6 matrix\n    state_space = reduce(vcat, permutedims.(collect.(split(maze, '\n'))))\n        \n    # check if [1, 1] is not a wall, if yes, return false\n    if state_space[1, 1] == 'W'\n        return false\n    end\n  \n    # create vector with all possible translations\n    translations = [[-1, 0], [1, 0], [0, -1], [0, 1]]\n\n    # set N as dimension of the NxN state space matrix\n    N = size(state_space, 1)\n\n    # create two vectors for BFS optimization\n    open = []\n    closed = Set()\n\n\n    # push the start state onto the open vector\n    push!(open, [1, 1])\n\n    # while open is not empty, evaluate states from open\n    while size(open, 1) != 0\n        for t in translations\n\n            new_state = open[1] + t\n            x, y = new_state\n      \n            # if new_state is the finish state, return true\n            if new_state == [N, N]\n                return true\n            # if the new state is in closed or open already, skip this execution\n            elseif new_state in closed || new_state in open\n                continue\n            end\n\n            # if x and y is in bounds and the new state is not a wall, add to open\n            if x in 1:N && y in 1:N && state_space[x, y] != 'W'\n                push!(open, new_state)\n            end\n        end\n\n        # save the closed state\n        push!(closed, popat!(open, 1))\n    end\n    \n    # finish state is unreachable, return false \n    return false\nend\n\nend # module\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200194,"user_id":53,"body":"module Kata\nexport path_finder\nusing DataStructures\n\nfunction path_finder(maze::AbstractString)::Union{Int,Bool}\n  xs = collect(maze)\n  n = isqrt(length(xs))\n  q = Queue{Tuple{Int,Int}}()\n  v = [(0,1),(0,-1),(1,0),(-1,0)]\n  enqueue!(q,(0,0))\n  xs[1] = 'W'\n  while !isempty(q)\n    x,y = dequeue!(q)\n    if x+1==n && y+1==n\n      return true\n    end\n    for (dx,dy) in v\n      x0 = x+dx\n      y0 = y+dy\n      i = x0*(n+1)+y0+1\n      if x0<0 || y0<0 || x0>=n || y0>=n || xs[i]=='W'\n        continue\n      end\n      enqueue!(q,(x0,y0))\n      xs[i] = 'W'\n    end\n  end\n  false\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200195,"user_id":null,"body":"module Kata\nexport path_finder\n\nfunction path_finder(maze::AbstractString)::Bool\n    n, fin = count(\"\n\", maze)+2, length(maze)\n    breadth(n, fin, Set(i for i in 1:fin if maze[i] == '.'))\nend\n\nfunction breadth(n, fin, empty, step = 0, locs = Set(1))\n    step > (n-1)^2 && return false\n    fin \u2208 locs ? true : breadth(n, fin, empty, step+1, intersect!(union!(locs.+1, locs.-1, locs.+n, locs.-n), empty))\nend\n\nend # module\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200196,"user_id":null,"body":"module Kata\nexport path_finder\n\nfunction path_finder(maze::AbstractString)::Bool\n    move = [x->(x[1]+1,x[2]),\n            x->(x[1]-1,x[2]),\n            x->(x[1],x[2]+1),\n            x->(x[1],x[2]-1)]\n    lines = split.(split(maze, \"\n\"), \"\")\n\n    N = length(lines[1])\n    target = (N, N)\n    pos = (1, 1)\n    visited = []\n    queue = [pos]\n    while length(queue) != 0\n        q = pop!(queue)\n        push!(visited, q)\n        \n        for i in 1:4\n            new_pos = move[i](q)\n            if new_pos in visited\n                continue\n            end\n            \n            if 0 < new_pos[1] <= N && 0 < new_pos[2] <= N\n                if new_pos == target\n                    return true\n                end\n                \n                if lines[new_pos[2]][new_pos[1]] == \".\"\n                    push!(queue, new_pos)\n                end\n            end\n        end\n    end\n\n    return false\nend\nend # module\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200197,"user_id":null,"body":"module Kata\nexport path_finder\n\nfunction path_finder(maze::AbstractString)::Bool\n    smaze=split(maze,\"\n\")\n    l=length(smaze)\n    fill=zeros(Int,l,l)\n    fill[1,1]=1\n    open_ways=true\n    finish=false\n    while open_ways && ~finish\n        open_ways=false\n        for i=1:l\n            for j=1:l\n                if fill[i,j]==1\n                    (i>1 && smaze[i-1][j]=='.' && fill[i-1,j]==0) ? (fill[i-1,j]=1; open_ways=true) : nothing\n                    (i<l && smaze[i+1][j]=='.' && fill[i+1,j]==0) ? (fill[i+1,j]=1; open_ways=true) : nothing\n                    (j>1 && smaze[i][j-1]=='.' && fill[i,j-1]==0) ? (fill[i,j-1]=1; open_ways=true) : nothing\n                    (j<l && smaze[i][j+1]=='.' && fill[i,j+1]==0) ? (fill[i,j+1]=1; open_ways=true) : nothing\n                end\n            end\n        end\n        fill[l,l]==1 ? finish=true : finish=false\n    end\n    return finish\n\nend\n\nend # module\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200198,"user_id":null,"body":"module Kata\nexport path_finder\n\nfunction path_finder(maze::AbstractString)::Bool\n    m = split(maze, '\n')\n    N = length(m)\n    q = [(1,1)]\n    v = Set()\n    push!(v, (1,1))\n    while length(q) > 0\n        r, c = pop!(q)\n        (r,c) == (N,N) && return true\n        r > 1 && (r-1,c) \u2209 v && m[r-1][c] == '.' && push!(q, (r-1, c))\n        r < N && (r+1,c) \u2209 v && m[r+1][c] == '.' && push!(q, (r+1, c))\n        c > 1 && (r,c-1) \u2209 v && m[r][c-1] == '.' && push!(q, (r, c-1))\n        c < N && (r,c+1) \u2209 v && m[r][c+1] == '.' && push!(q, (r, c+1))\n        push!(v, (r, c))\n    end\n    return false\nend\n\nend # module\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200199,"user_id":null,"body":"module Kata\nexport path_finder\n\nconst CI = CartesianIndex\n\nfunction backtracking(maze)\n    pos = CI(1,1)\n    coords = [pos]\n    foundexit = false\n    while !isempty(coords)\n        pos = pop!(coords)\n        maze[pos] = 2\n        if pos == CI(size(maze))\n            foundexit = true\n            break\n        end\n        for diff in [CI(0,-1), CI(0,1), CI(-1,0), CI(1,0)]\n            newpos = pos + diff\n            if checkbounds(Bool, maze, newpos)\n                if maze[newpos] == 0\n                    push!(coords, newpos)\n                end\n            end\n        end\n    end\n    return foundexit\nend\n\nfunction parsemaze(maze)\n    lines = split(maze)\n    N = length(lines)\n    imaze = zeros(Int8, N, N)\n    for (i, line) in enumerate(lines)\n        for (j, char) in enumerate(line)\n            if char == 'W'\n                imaze[i, j] = 1\n            end\n        end\n    end\n    return imaze\nend\n\nfunction path_finder(maze::AbstractString)::Bool\n    imaze = parsemaze(maze)\n    return backtracking(imaze)\nend\n\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200200,"user_id":null,"body":"module Kata\nexport path_finder\n\nfunction path_finder(maze::AbstractString)::Bool\n    maze = split(maze, \"\n\")\n    N = length(maze)\n\n    function adj_spaces(x, y)\n        adj = []\n        for (new_x, new_y) in [(x - 1, y), (x, y - 1), (x + 1, y), (x, y + 1)]\n            all(0 .< (new_x, new_y) .<= N) && maze[new_x][new_y] != 'W' && push!(adj, (new_x, new_y))\n        end\n        adj\n    end\n\n    # Depth-first search\n    explored = []\n    stack = [(1, 1)]\n    while length(stack) > 0\n        loc = pop!(stack)\n        loc == (N, N) && return true\n        if !(loc in explored)\n            push!(explored, loc)\n            append!(stack, adj_spaces(loc...))\n        end\n    end\n    false\nend\n\nend # module\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200201,"user_id":null,"body":"module Kata\nexport path_finder\n\nfunction path_finder(maze::AbstractString)::Bool\n    \n    function adj_spaces(x, y)\n        adj = []\n        for (new_x, new_y) in [(x - 1, y), (x, y - 1), (x + 1, y), (x, y + 1)]\n            all(0 .< (new_x, new_y) .<= N) && maze[new_x][new_y] != 'W' && push!(adj, (new_x, new_y))\n        end\n        adj\n    end\n\n    maze = split(maze, \"\n\")\n    N = length(maze)\n    explored = [(1, 1)]\n    queue = [(1, 1)]\n    while length(queue) > 0\n        loc = popfirst!(queue)\n        loc == (N, N) && return true\n        for new_loc in adj_spaces(loc...)\n            if !(new_loc in explored)\n                push!(explored, new_loc)\n                push!(queue, new_loc)\n            end\n        end\n    end\n    false\nend\n\nend # module\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200202,"user_id":null,"body":"module Kata\nexport path_finder\n\nconst DIRS = [(-1,0), (0,-1), (1,0), (0,1)]\nconst FREE = '.'\nconst WALL = 'W'\n\nfunction path_finder(maze::AbstractString)::Bool\n    a = split(maze, \"\n\")\n    n = length(a)\n    isFree(i,j) = 0<i<=n && 0<j<=n && a[i][j]==FREE\n    newCells = Set([(1,1)])\n    seen = Set()\n    temps = Set()\n    while length(newCells)>0\n      empty!(temps)\n      println(temps)\n      for p0 in newCells\n        for dv in DIRS\n          p = p0 .+ dv\n          if !(isFree(p...)) || p in seen continue end \n          push!(temps, p)\n          push!(seen, p)\n          if p == (n,n) return true end\n        end\n      end\n      empty!(newCells)\n      union!(newCells, temps)\n    end\n  return false\nend\n\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57658bfa28ed87ecfa00058a":[{"id":200203,"user_id":53,"body":"module Kata\nexport path_finder\nusing DataStructures\n\nfunction path_finder(maze::AbstractString)::Union{Int,Bool}\n  xs = collect(maze)\n  n = isqrt(length(xs))\n  q = Queue{Tuple{Int,Int,Int}}()\n  v = [(0,1),(0,-1),(1,0),(-1,0)]\n  enqueue!(q,(0,0,0))\n  xs[1] = 'W'\n  \n  while !isempty(q)\n    x,y,c = dequeue!(q)\n    if x+1==n && y+1==n\n      return c\n    end\n    for (dx,dy) in v\n      x0 = x+dx\n      y0 = y+dy\n      i = x0*(n+1)+y0+1\n      if x0<0 || y0<0 || x0>=n || y0>=n || xs[i]=='W'\n        continue\n      end\n      enqueue!(q,(x0,y0,c+1))\n      xs[i] = 'W'\n    end\n  end\n  \n  false\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200204,"user_id":881,"body":"module Kata\nexport path_finder\n\nif VERSION < v\"1.1\"\n    isnothing(x)::Bool = typeof(x) == typeof(nothing)\nend\n\nfunction path_finder(maze::AbstractString)::Union{Int,Bool}\n    N = occursin('\n', maze) ? findfirst(\"\n\", maze)[1] - 1 : 1\n    grid::Array{Union{Int,Missing,Nothing}} = reshape(collect(c == '.' ? missing : nothing for c in maze if c in \".W\"), N, N)\n    minpath(grid, CartesianIndex(lastindex(grid, 1), lastindex(grid, 2)))\n    ismissing(first(grid)) ? false : first(grid)\nend\n  \nfunction minpath(maze::AbstractArray{Union{Int,Missing,Nothing},2}, coord, z = 0)\n    if coord in keys(maze) && !isnothing(maze[coord]) && (ismissing(maze[coord]) || (maze[coord] > z))\n        maze[coord] = z\n        for t in ((0, 1), (1, 0), (0, -1), (-1, 0))\n            minpath(maze, coord + CartesianIndex(t...), z + 1)\n        end\n    end\nend\n\nend # module\n","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200205,"user_id":null,"body":"module Kata\nexport path_finder\nusing DataStructures \n\nfunction path_finder(maze::AbstractString)::Union{Int,Bool}\n    m = map(collect, split(maze, '\n'))\n    N = length(m)\n    q = Queue{Tuple{Integer,Integer,Integer}}()\n    enqueue!(q,(1,1,0))\n    m[1][1] = 'x'\n    while !isempty(q)\n        r, c, d = dequeue!(q)\n        (r,c) == (N,N) && return d\n        r < N && m[r+1][c] == '.' && (m[r+1][c] = 'x'; enqueue!(q, (r+1, c, d+1)))\n        c < N && m[r][c+1] == '.' && (m[r][c+1] = 'x'; enqueue!(q, (r, c+1, d+1)))\n        c > 1 && m[r][c-1] == '.' && (m[r][c-1] = 'x'; enqueue!(q, (r, c-1, d+1)))\n        r > 1 && m[r-1][c] == '.' && (m[r-1][c] = 'x'; enqueue!(q, (r-1, c, d+1)))\n    end\n    return -1\nend\n\nend # module\n\n","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200206,"user_id":null,"body":"module Kata\nexport path_finder\n\nfunction path_finder(maze::AbstractString)::Union{Int,Bool}\n    n, fin = count(\"\n\", maze)+2, length(maze)\n    breadth(n, fin, Set(i for i in 1:fin if maze[i] == '.'))\nend\n\nfunction breadth(n, fin, empty, s = Set(1), d = 0)\n    d > (n-1)^2 && return -1\n    fin \u2208 s ? d : breadth(n, fin, empty, intersect!(union!(s.+1, s.-1, s.+n, s.-n), empty), d+1)\nend\n\nend # module","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200207,"user_id":null,"body":"module Kata\nexport path_finder\n\nfunction path_finder(maze::AbstractString)\n    maze = split(maze, \"\n\")\n    N = length(maze)\n\n    function adj_spaces(x, y)\n        adj = []\n        for (new_x, new_y) in [(x - 1, y), (x, y - 1), (x + 1, y), (x, y + 1)]\n            all(0 .< (new_x, new_y) .<= N) && maze[new_x][new_y] != 'W' && push!(adj, (new_x, new_y))\n        end\n        adj\n    end\n\n    # Breadth-first search\n    explored = [(1, 1)]\n    queue = [(1, 1)]\n    depth = 0\n    while length(queue) > 0\n        level_size = length(queue)\n        while level_size > 0\n            loc = popfirst!(queue)\n            loc == (N, N) && return depth\n            for new_loc in adj_spaces(loc...)\n                if !(new_loc in explored)\n                    push!(explored, new_loc)\n                    push!(queue, new_loc)\n                end\n            end\n            level_size -= 1\n        end\n        depth += 1\n    end\n    false\nend\n\nend # module\n","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200208,"user_id":null,"body":"module Kata\nexport path_finder\n\nconst DIRS = [(-1,0), (0,-1), (1,0), (0,1)]\nconst FREE = '.'\nconst WALL = 'W'\n\nfunction path_finder(maze::AbstractString)::Union{Int, Bool}\n    a = split(maze, \"\n\")\n    n = length(a)\n    isFree(i,j) = 0<i<=n && 0<j<=n && a[i][j]==FREE\n    newCells = Set([(1,1)])\n    seen = Set()\n    temps = Set()\n    counter = [0]\n    while length(newCells)>0\n      empty!(temps)\n      for p0 in newCells\n        if p0 == (n, n)\n          return counter[1]\n        end\n        for dv in DIRS\n          p = p0 .+ dv\n          if !(isFree(p...)) || p in seen continue end \n          push!(temps, p)\n          push!(seen, p)\n        end\n      end\n      empty!(newCells)\n      union!(newCells, temps)\n      counter[1] += 1\n    end\n  return -1\nend\n\nend # module\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200209,"user_id":null,"body":"module Kata\nexport path_finder\n\nfunction path_finder(maze::AbstractString)\n    # transpose the string to NxN matrix\n    state_space = reduce(vcat, permutedims.(collect.(split(maze, '\n'))))\n\n    # create vector with all possible translations\n    translations = [[-1, 0, 1], [1, 0, 1], [0, -1, 1], [0, 1, 1]]\n\n    # set N as dimension of the NxN state space matrix\n    N = size(state_space, 1)\n\n    # create two vectors for BFS optimization\n    open = []\n    closed = Set()\n\n\n    # push the start state onto the open vector\n    push!(open, [1, 1, 0])\n\n    # while open is not empty, evaluate states from open\n    while size(open, 1) != 0\n        for t in translations\n\n            new_state = open[1] + t\n            x, y = new_state\n\n            # if new_state is in close, skip this state\n            if [x, y] in closed\n                continue\n            end\n\n            # if new_state is the finish state, return true\n            if new_state[1:2] == [N, N]\n                return new_state[3]\n            # if the new state is in closed or open already, skip this execution\n            elseif new_state in closed || new_state in open\n                continue\n            end\n\n            # if x and y is in bounds and the new state is not a wall, add to open\n            if x in 1:N && y in 1:N && state_space[x, y] != 'W'\n                push!(open, new_state)\n            end\n        end\n\n        # save the closed state\n        push!(closed, popat!(open, 1)[1:2])\n    end\n    return -1\nend\n\nend # module","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200210,"user_id":2525,"body":"module Kata\nexport path_finder\n\nfunction path_finder(maze::AbstractString)::Union{Int,Bool}\n    repr = [[ if c=='.'; -1 else -999 end for c in l] for l in split(maze)]\n    repr[1][1] = 0\n    \n    N = length(repr)\n    has_changes = true\n    while has_changes\n        has_changes = false\n        for i in 1:N\n            for j in 1:N\n                if repr[i][j] == -1\n                    area = []\n                    if i>1 && repr[i-1][j]\u22650; push!(area, repr[i-1][j]) end\n                    if j>1 && repr[i][j-1]\u22650; push!(area, repr[i][j-1]) end\n                    if i<N && repr[i+1][j]\u22650; push!(area, repr[i+1][j]) end\n                    if j<N && repr[i][j+1]\u22650; push!(area, repr[i][j+1]) end\n                    \n                    if length(area)>0\n                        repr[i][j] = minimum(area)+1\n                        has_changes = true\n                    end\n                end\n            end\n        end\n        if repr[N][N]\u22650\n            return repr[N][N]\n        end\n    end\n    false\nend\n\nend # module\n","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200211,"user_id":null,"body":"module Kata\nexport path_finder\n\nusing DataStructures\n\nfunction getneighbors(node::CartesianIndex{2}, maze::BitMatrix)\n    candidates = CartesianIndex.(\n        [node[1], node[1], node[1] - 1, node[1] + 1],\n        [node[2] - 1, node[2] + 1, node[2], node[2]]\n    )\n    filter(I -> checkbounds(Bool, maze, I) && maze[I], candidates)\nend\n\nfunction path_finder(maze::AbstractString)\n    mm = split(maze, '\n') .|> collect |> (x -> hcat(x...)) .|> isequal('.')\n    \n    goal = CartesianIndex(size(mm, 1), size(mm, 2))\n    start = CartesianIndex(1, 1)\n    \n    Q = PriorityQueue{CartesianIndex{2}, Float64}()\n    enqueue!(Q, start => 0)\n\n    came_from = Dict()\n    cur_cost  = Dict(start => 0)\n\n    while !isempty(Q)\n        curnode = dequeue!(Q)\n        curnode == goal && return cur_cost[curnode]\n        new_cost = cur_cost[curnode] + 1\n        for neighbor in getneighbors(curnode, mm)\n            if neighbor \u2209 keys(cur_cost)\n                cur_cost[neighbor] = new_cost\n                came_from[neighbor] = curnode\n                priority = new_cost + sqrt(sum(Tuple(goal - neighbor).^2))\n                enqueue!(Q, neighbor => priority)\n            end\n        end\n    end\n    return -1\nend\n\nend # module\n","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200212,"user_id":209,"body":"module Kata\nexport path_finder\n\nfunction path_finder(maze)\n    maze = map(x->split(x,\"\"), split(maze, \"\n\"))\n    visited = Set()\n    push!(visited, (1, 1))\n    queue = [(1, 1)]\n    N = length(maze)\n    cost = Dict((1, 1)=>0)\n    head = 1\n    while head <= length(queue)\n        (y, x) = queue[head]\n        head += 1\n        if (y, x) == (N, N)\n            return cost[(y, x)]\n        end\n        for (y_, x_) in [(y, x + 1), (y, x - 1), (y + 1, x), (y - 1, x)]\n            if 0 < y_ <= N && 0 < x_ <= N && maze[y_][x_][1] != 'W' && !in((y_, x_), visited)\n                push!(queue, (y_, x_))\n                push!(visited, (y_, x_))\n                cost[(y_, x_)] = cost[(y, x)] + 1\n            end\n        end\n        push!(visited, (y, x))\n    end\n    false\nend\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"585894545a8a07255e0002f1":[{"id":200213,"user_id":null,"body":"function endings(path::String)\n    could = \"ABCDEFHGI\"\n\n    function lock(ending, unlocks, locked)\n        last(path) != ending && return\n\n        for i in 1:length(unlocks)\n            unlocks[i] \u2209 path && (could = replace(could, locked[i]=>\"\"))\n        end\n    end\n\n    lock('A', \"BED\", \"CIG\")\n    lock('C', \"BEF\", \"AGI\")\n    lock('I', \"FEH\", \"CAG\")\n    lock('G', \"HED\", \"ICA\")\n    lock('B', \"E\", \"H\")\n    lock('H', \"E\", \"B\")\n    lock('D', \"E\", \"F\")\n    lock('F', \"E\", \"D\")\n\n    setdiff(could, path) |> String\nend\n\nfunction count_patterns_from(start::Char, n::Int)\n    count_patterns_from([string(start)], n)\nend\n\nfunction count_patterns_from(paths::Vector{String}, n::Int)\n    if n < 1 || n > 9 return 0 end\n    if n == 1 return length(paths) end\n\n    progeny = String[]\n\n    for path in paths\n        for ending in endings(path)\n            push!(progeny, path * ending)\n        end\n    end\n\n    count_patterns_from(progeny, n - 1)\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200214,"user_id":null,"body":"function used(M, k, i)\n    if k == 'B'         M[1, 3], M[3, 1] = 0, 0\n    elseif k == 'D'     M[1, 7], M[7, 1] = 0, 0\n    elseif k == 'E'     foreach(i-> M[i, 10-i] = 0, 1:9)\n    elseif k == 'F'     M[3, 9], M[9, 3] = 0, 0\n    elseif k == 'H'     M[7, 9], M[9, 7] = 0, 0 end\n    M[i, i] = 1\n    M\nend\n\nfunction rec(M, a, dic, n)\n    iszero(n) ? 1 : sum(rec(used(copy(M),k,dic[k]), k, dic, n-1) for k in keys(dic) if iszero(M[dic[k],dic[k]] + M[dic[k],dic[a]]))\nend\n\nfunction count_patterns_from(start::Char, len::Int)\n    dic = Dict(zip('A':'I', 1:9))\n    M = [0 0 1 0 0 0 1 0 1; \n         0 0 0 0 0 0 0 1 0; \n         1 0 0 0 0 0 1 0 1; \n         0 0 0 0 0 1 0 0 0; \n         0 0 0 0 0 0 0 0 0; \n         0 0 0 1 0 0 0 0 0; \n         1 0 1 0 0 0 0 0 1; \n         0 1 0 0 0 0 0 0 0; \n         1 0 1 0 0 0 1 0 0]\n    0 < len < 10 ? rec(used(copy(M),start,dic[start]), start, dic, len-1) : 0\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200215,"user_id":null,"body":"function count_patterns_from(start::Char, len::Int)\n    dic = Dict(zip('A':'I', 1:9))\n    M = [0 0 -1 0 0 0 -1 0 -1; \n         0 0 0 0 0 0 0 -1 0; \n         -1 0 0 0 0 0 -1 0 -1; \n         0 0 0 0 0 -1 0 0 0; \n         0 0 0 0 0 0 0 0 0; \n         0 0 0 -1 0 0 0 0 0; \n         -1 0 -1 0 0 0 0 0 -1; \n          0 -1 0 0 0 0 0 0 0; \n         -1 0 -1 0 0 0 -1 0 0]\n    0 < len < 10 ? rec(used(copy(M),start,dic[start]), start, dic, len-1) : 0\nend\n\nfunction rec(M, a, dic, n)\n    iszero(n) ? 1 : sum(rec(used(copy(M),k,dic[k]),k,dic,n-1) for k in keys(dic) if iszero(M[dic[k],dic[k]]) && iszero(M[dic[k],dic[a]]))\nend\n\nfunction used(M, k, i)\n    if k == 'B'         M[1,3], M[3,1] = 0, 0\n    elseif k == 'D'     M[1,7], M[7,1] = 0, 0\n    elseif k == 'E'     foreach(i-> M[i,9-i+1] = 0, 1:9)\n    elseif k == 'F'     M[3,9], M[9,3] = 0, 0\n    elseif k == 'H'     M[7,9], M[9,7] = 0, 0 end\n    M[i,i] = 1\n    M\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200216,"user_id":null,"body":"const path = Dict(\n          \"A\" => [\"B\",\"D\",\"E\",\"F\",\"H\"],\n          \"B\" => [\"A\",\"C\",\"D\",\"E\",\"F\",\"G\",\"I\"],\n          \"C\" => [\"B\",\"D\",\"E\",\"F\",\"H\"],\n          \"D\" => [\"A\",\"B\",\"C\",\"E\",\"G\",\"H\",\"I\"],\n          \"E\" => [\"A\",\"B\",\"C\",\"D\",\"F\",\"G\",\"H\",\"I\"],\n          \"F\" => [\"A\",\"B\",\"C\",\"E\",\"G\",\"H\",\"I\"],\n          \"G\" => [\"B\",\"D\",\"E\",\"F\",\"H\"],\n          \"H\" => [\"A\",\"C\",\"D\",\"E\",\"F\",\"G\",\"I\"],\n          \"I\" => [\"B\",\"D\",\"E\",\"F\",\"H\"]\n        )\n        \n        const path_jump = Dict(\n          \"A\" => [(\"B\",\"C\"),(\"D\",\"G\"),(\"E\",\"I\")],\n          \"B\" => [(\"E\",\"H\")],\n          \"C\" => [(\"B\",\"A\"),(\"E\",\"G\"),(\"F\",\"I\")],\n          \"D\" => [(\"E\",\"F\")],\n          \"E\" => [],\n          \"F\" => [(\"E\",\"D\")],\n          \"G\" => [(\"D\",\"A\"),(\"E\",\"C\"),(\"H\",\"I\")],\n          \"H\" => [(\"E\",\"B\")],\n          \"I\" => [(\"E\",\"A\"),(\"F\",\"C\"),(\"H\",\"G\")]\n        )\n        \n        function connect!(pattern, p, l)\n          if length(p) == l\n            push!(pattern, p)\n            return\n          end\n          for i in path[p[end]]\n            if !(i in p)\n              connect!(pattern, [p..., i], l)\n            else\n              for j in path_jump[p[end]]\n                if j[1] in p && !(j[2] in p)\n                  connect!(pattern, [p..., j[2]], l)\n                end\n              end\n            end\n          end\n        end\n        \n        function count_patterns_from(start::String, len::Int)\n          if len < 1 || len > 9\n            return 0\n          elseif len == 1\n            return 1\n          else\n            pattern = Set()\n            connect!(pattern, [start], len)\n            return length(pattern)\n          end\n        end","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200217,"user_id":null,"body":"function can_move(pos1, pos2, grid)\n#Determines weather the proposed move is legal\n  if grid[pos2[1]][pos2[2]] == 1 #Position was already used\n    return false\n  end\n  if findall(isodd, abs.(pos1 - pos2)) == [] #Qualifies for skipping nodes\n    if grid[round(Int, (pos1[1] + pos2[1])\/2)][round(Int, (pos1[2] + pos2[2])\/2)] == 0 #Skipped node is not used\n      return false\n    end\n  end\n  return true\nend\n  \nfunction counter(pos, grid, depth)\n#Recursively counts all possible moves\n  depth -= 1\n  depth == 0 && return 1\n  grid[pos[1]][pos[2]] = 1\n  count = 0\n  for i in [x = [a, b] for a = 1:3, b = 1:3]\n  #Iterates over all positions\n    if can_move(pos, i, grid)\n    #Checks weather the proposed move is legal\n      count += counter(i, deepcopy(grid), depth)\n      #Recursively adds the value of all legal moves which in turn accumulate (or not) their own value\n    end\n  end\n  return count\n  #Returns total value of all Sub-Moves\nend\n\nfunction count_patterns_from(start::Char, len::Int)\n  grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n  #The grid determines weahter a position was used before\n  if start == 'A'\n    pos = [1, 1]\n  elseif start == 'B'\n    pos = [1, 2]\n  elseif start == 'C'\n    pos = [1, 3]\n  elseif start == 'D'\n    pos = [2, 1]\n  elseif start == 'E'\n    pos = [2, 2]\n  elseif start == 'F'\n    pos = [2, 3]\n  elseif start == 'G'\n    pos = [3, 1]\n  elseif start == 'H'\n    pos = [3, 2]\n  elseif start == 'I'\n    pos = [3, 3]\n  end\n\n  counter(pos, grid, len)\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200218,"user_id":null,"body":"const N = 3\nconst PLACES = Dict([\n    ('A', (1,1)), ('B', (1,2)), ('C', (1,3)),\n    ('D', (2,1)), ('E', (2,2)), ('F', (2,3)),\n    ('G', (3,1)), ('H', (3,2)), ('I', (3,3))\n])\n\nfunction makeDirs()\n  ret = Set()\n  ds1 = [(0,1), (1,2), (1,1), (2,1), (1,0)]\n  for (s1, s2) in [(1,1), (-1, 1), (1, -1), (-1, -1)]\n    union!(ret, [(s1*d1, s2*d2) for (d1,d2) in ds1])\n  end\n  return sort([d for d in ret])\nend\n\nconst DIRS = makeDirs()\n\nfunction count_patterns_from(start::Char, len::Int)\n  path = [PLACES[start]]\n  ret = 0\n  \n  onGrid(p) = all(0<x<=N for x in p)\n  \n  function findThem()\n    if length(path)==len\n      ret += 1\n      return\n    end\n    curr = path[end]\n    for d in DIRS\n      p1 = curr .+ d\n      while p1 in path\n        p1 = p1 .+ d\n      end\n      if !onGrid(p1) continue end\n      push!(path, p1)\n      findThem()\n      pop!(path)\n    end\n  end\n  findThem()\n  return ret\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200219,"user_id":null,"body":"function count_patterns_from(start::Char, len::Int)\n    len > 9 && return 0\n    M = [0 0 -1 0 0 0 -1 0 -1; 0 0 0 0 0 0 0 -1 0; -1 0 0 0 0 0 -1 0 -1; 0 0 0 0 0 -1 0 0 0; 0 0 0 0 0 0 0 0 0; 0 0 0 -1 0 0 0 0 0; -1 0 -1 0 0 0 0 0 -1; 0 -1 0 0 0 0 0 0 0; -1 0 -1 0 0 0 -1 0 0]\n    dic = Dict('A'=>1, 'B'=>2, 'C'=>3, 'D'=>4, 'E'=>5, 'F'=>6, 'G'=>7, 'H'=>8, 'I'=>9)\n    rec(used(copy(M),start,dic[start]), start, dic, len-1)\nend\n\nfunction rec(M, a, dic, n)\n    n == 0 && return 1\n    tot = 0    \n    for k in keys(dic)\n        if M[dic[k],dic[k]] == 0 &&  M[dic[k],dic[a]] == 0\n            tot += rec(used(copy(M),k,dic[k]), k, dic, n-1)\n        end\n    end\n    tot\nend\n\nfunction used(M, k, i)\n    if k == 'B'\n        M[1,3], M[3,1] = 0, 0\n    elseif k == 'D'\n        M[1,7], M[7,1] = 0, 0\n    elseif k == 'E'\n        for i in 1:9\n            M[i,9-i+1] = 0\n        end\n    elseif k == 'F'\n        M[3,9], M[9,3] = 0, 0\n    elseif k == 'H'\n        M[7,9], M[9,7] = 0, 0\n    end\n    M[i,i] = 1\n    M\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200220,"user_id":53,"body":"function count_patterns_from(start::Char, len::Int)\n  memo=Dict(\n  'A' => [0,1,5,31,154,684,2516,7104,13792,13792],\n  'B' => [0,1,7,37,188,816,2926,8118,15564,15564],\n  'C' => [0,1,5,31,154,684,2516,7104,13792,13792],\n  'D' => [0,1,7,37,188,816,2926,8118,15564,15564],\n  'E' => [0,1,8,48,256,1152,4248,12024,23280,23280],\n  'F' => [0,1,7,37,188,816,2926,8118,15564,15564],\n  'G' => [0,1,5,31,154,684,2516,7104,13792,13792],\n  'H' => [0,1,7,37,188,816,2926,8118,15564,15564],\n  'I' => [0,1,5,31,154,684,2516,7104,13792,13792]\n  )\n  if len > 9\n    0\n  else\n    memo[start][len+1]\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200221,"user_id":null,"body":"const codes = 'A':'I'\nconst positions = Dict(c=>divrem(i-1, 3) for (i, c) in enumerate(codes))\n\nreachable(u, v, visited) = let (m1, m2) = divrem.(u .+ v, (2,))\n  return !(m1[2] == m2[2] == 0 && !visited[m1[1], m2[1]])\nend\n\ndfs((ux, uy), len, visited) = if visited[ux, uy]\n  0\nelseif len == 0\n  1\nelse\n  visited[ux, uy] = true\n  s = sum(\n    dfs((vx, vy), len-1, visited)\n    for vx in 1:3\n    for vy in 1:3\n    if reachable((ux, uy), (vx, vy), visited)\n  )\n  visited[ux, uy] = false\n  s\nend\n\npos(x::Char) = (+).(divrem(x-'A', 3), (1,))\ncount_patterns_from(start::Char, len::Int) = 0 < len < 10 ? dfs(pos(start), len-1, zeros(Bool, 3, 3)) : 0\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200222,"user_id":2525,"body":"function valid_nexts(c::Char, used::String)::String\n    used *= c\n    dots = join(d for d in \"ABCDEFGHI\" if !occursin(d, used))\n  \n    if      c=='A';  join(d for d in dots if !(d=='I' && !occursin('E', used)) && !(d=='C' && !occursin('B', used)) && !(d=='G' && !occursin('D', used)) )\n    elseif  c=='B';  join(d for d in dots if !(d=='H' && !occursin('E', used)) )\n    elseif  c=='C';  join(d for d in dots if !(d=='G' && !occursin('E', used)) && !(d=='A' && !occursin('B', used)) && !(d=='I' && !occursin('F', used)) )\n    elseif  c=='D';  join(d for d in dots if !(d=='F' && !occursin('E', used)) )\n    elseif  c=='E';  join(d for d in dots)\n    elseif  c=='F';  join(d for d in dots if !(d=='D' && !occursin('E', used)) )\n    elseif  c=='G';  join(d for d in dots if !(d=='C' && !occursin('E', used)) && !(d=='A' && !occursin('D', used)) && !(d=='I' && !occursin('H', used)) )\n    elseif  c=='H';  join(d for d in dots if !(d=='B' && !occursin('E', used)) )\n    elseif  c=='I';  join(d for d in dots if !(d=='A' && !occursin('E', used)) && !(d=='G' && !occursin('H', used)) && !(d=='C' && !occursin('F', used)) )\n    end    \nend\nfunction count_patterns_from(start::Char, len::Int; used = \"\")\n    if len \u2264 0 || len \u2265 10\n        0\n    elseif len == 1\n        1\n    else\n        sum([count_patterns_from(c, len-1, used=used*start) for c in valid_nexts(start, used) ]) \n    end  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5886e082a836a691340000c3":[{"id":200223,"user_id":53,"body":"function rectangle_rotation(a::Int, b::Int)::Int\n  x = floor(Int, a \/ sqrt(2))\n  y = floor(Int, b \/ sqrt(2))\n  r = (x + 1) * (y + 1) + x * y\n  r + r % 2 - 1\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200224,"user_id":421,"body":"function rectangle_rotation(a::Int, b::Int)::Int\n  a = a \u00f7 sqrt(2)\n  b = b \u00f7 sqrt(2)\n  r = (a + 1) * (b + 1) + a * b\n  r + r % 2 - 1\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200225,"user_id":168,"body":"function rectangle_rotation(a::Int, b::Int)::Int\n  x, y = floor(a \/ 2 ^ 0.5), floor(b \/ 2 ^ 0.5)\n  2 * x * y + x + y + (x + y + 1) % 2\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200226,"user_id":null,"body":"function divide(n)\n  n1 = floor( n \/ sqrt(2))\n  println(n,\" \",n1)\n  return Int(2*floor(n1\/2)), n1 % 2\nend\n  \nfunction rectangle_rotation(a::Int, b::Int)::Int\n  A = divide(a)\n  B = divide(b)\n  println(A,B)\n  return (A[1]+1)*(B[1]+1)+A[1]*B[1]+A[2]*B[2]*4+A[2]*B[1]*2+A[1]*B[2]*2\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200227,"user_id":null,"body":"function rectangle_rotation(a::Int, b::Int)::Int\n    if (a\/2)%\u221a2 < sqrt(2)\/2 && (b\/2)%sqrt(2) < sqrt(2)\/2\n        (((a \u00f7 sqrt(2)) + 1) * ((b \u00f7 sqrt(2)) + 1)) + ((a \u00f7 sqrt(2)) * (b \u00f7 sqrt(2)))\n    elseif (a\/2)%sqrt(2) > sqrt(2)\/2 && (b\/2)%sqrt(2) < sqrt(2)\/2\n        ((a \u00f7 sqrt(2)) * ((b \u00f7 sqrt(2)) + 1)) + (((a \u00f7 sqrt(2) + 1)) * (b \u00f7 sqrt(2)))\n    elseif (a\/2)%sqrt(2) > sqrt(2)\/2 && (b\/2)%sqrt(2) > sqrt(2)\/2\n        (((a \u00f7 sqrt(2)) + 1) * ((b \u00f7 sqrt(2)) + 1)) + ((a \u00f7 sqrt(2)) * (b \u00f7 sqrt(2)))\n    else\n        ((a \u00f7 sqrt(2)) * ((b \u00f7 sqrt(2)) + 1)) + (((a \u00f7 sqrt(2) + 1)) * (b \u00f7 sqrt(2)))\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200228,"user_id":null,"body":"function rectangle_rotation(a, b)\n  x = Int(floor(a\/sqrt(2)))\n  y = Int(floor(b\/sqrt(2)))\n  if isodd(x)\n    if isodd(y)\n      num = x*y+(x+1)*(y+1)\n    else\n      num = x*(y+1)+(x+1)*y\n    end\n  else\n    if isodd(y)\n      num = x*(y+1)+(x+1)*y\n    else\n      num = x*y+(x+1)*(y+1)\n    end\n  end\n  return num\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200229,"user_id":null,"body":"function rectangle_rotation(a::Int, b::Int)::Int\n    x, y = floor(Int,a\/sqrt(2)), floor(Int,b\/sqrt(2))\n    iseven(x) == iseven(y) ? (x+1)*(y+1) + x*y : (x+1)*y + x*(y+1)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200230,"user_id":null,"body":"function rectangle_rotation(a::Int, b::Int)::Int\n  out_b = Int(ceil(b\/\u221a(2)))\n  out_a = Int(ceil(a\/\u221a(2)))\n  \n  parity = iseven(out_b - out_a) ? 0 : 1\n  return out_b*out_a + (out_b-1)*(out_a-1) - parity\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200231,"user_id":50,"body":"function f(a::Int)::Int\n  floor(a\/2^0.5)\nend\nfunction rectangle_rotation(a::Int, b::Int)::Int\n  e=f(a)\n  h=f(b)\n  x=2*e*h+e+h+1\n  x-(x&1==0)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200232,"user_id":2525,"body":"function rectangle_rotation(a::Int, b::Int)::Int\n    (2*floor(Int, a\/\u221a8)+1)*(2*floor(Int, b\/\u221a8)+1) + 4*(floor(Int, (a-\u221a2)\/\u221a8)+1)*(floor(Int, (b-\u221a2)\/\u221a8)+1)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"50654ddff44f800200000004":[{"id":200233,"user_id":527,"body":"module Solution\n  export multiply\n  multiply = *\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200234,"user_id":676,"body":"module Solution\n  export multiply\n  function multiply(a, b)\n    a * b\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200235,"user_id":null,"body":"module Solution\n  export multiply\n  function multiply(a, b)\n    return a * b\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200236,"user_id":null,"body":"module Solution\n  export multiply\n  function multiply(a, b)\n    c = a * b\n    return c\n  \n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200237,"user_id":null,"body":"module Solution\n  export multiply\n  function multiply(a, b)\n    m = a * b\n    return m\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200238,"user_id":null,"body":"module Solution\n  export multiply\n  multiply(x, y) = x * y \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200239,"user_id":null,"body":"module Solution\n  export multiply\n  function multiply(a, b)\n    multiply = a * b;\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200240,"user_id":null,"body":"module Solution\n  export multiply\n  function multiply(a, b)\n    mul = a * b\n    return mul\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200241,"user_id":null,"body":"module Solution\n  export multiply\n  function multiply(s,a)\n    s*a\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200242,"user_id":2525,"body":"module Solution\n  export multiply\n  multiply(a, b) = a * b\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"50ee6b0bdeab583673000025":[{"id":200243,"user_id":null,"body":"a = \"code\"\nb = \"wa.rs\"\nname = string(a, b)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200244,"user_id":1365,"body":"name = \"codewa.rs\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200245,"user_id":null,"body":"a = \"code\"\nb = \"wa.rs\"\nname = a * b","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200246,"user_id":527,"body":"\"; \u202e\"; name = \"codewa.rs\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200247,"user_id":421,"body":"a = \"code\"\nb = \"wa.rs\"\nname = \"$a$b\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200248,"user_id":null,"body":"a = \"code\"\nb = \"wa.rs\"\nname = string(a, b)\nprintln(name)\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"511f11d355fe575d2c000001":[{"id":200249,"user_id":1392,"body":"# return the two oldest ages within the array of ages passed in.\nfunction two_oldest_ages(ages)\n  return sort(ages)[end-1:end]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200250,"user_id":881,"body":"two_oldest_ages(ages) = sort(ages)[end - 1:end]","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200251,"user_id":null,"body":"two_oldest_ages(ages) = partialsort(ages, length(ages)-1:length(ages))","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200252,"user_id":53,"body":"# return the two oldest ages within the array of ages passed in.\nfunction two_oldest_ages(ages)\n  a = Int32[0, 0];\n  sort!(ages, rev=true);\n  a[1] = ages[2];\n  a[2] = ages[1];\n  return a;\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200253,"user_id":null,"body":"# return the two oldest ages within the array of ages passed in.\nfunction two_oldest_ages(ages)\n  ages |> sort |> (x -> [x[end-1], x[end]])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200254,"user_id":null,"body":"# return the two oldest ages within the array of ages passed in.\ntwo_oldest_ages(ages) = sort(ages)[end-1:end]\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200255,"user_id":null,"body":"# return the two oldest ages within the array of ages passed in.\nfunction two_oldest_ages(ages)\n  max_ages = [0, 0]\n  for age in ages\n    if max_ages[2] < age\n      max_ages[1] = max_ages[2]\n      max_ages[2] = age\n    elseif max_ages[1] < age\n      max_ages[1] = age  \n    end \n  end\n  return max_ages\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200256,"user_id":null,"body":"# return the two oldest ages within the array of ages passed in.\nfunction two_oldest_ages(ages)\n    if length(ages) == 2\n        return sort!(ages)\n    else\n        (x1, x2) = ages[1:2]\n        for x in ages[3:end]\n            (x1, x2) = sort!([x1, x2, x])[2:3]\n        end\n    end\n    return [x1, x2]\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200257,"user_id":null,"body":"# return the two oldest ages within the array of ages passed in.\nfunction two_oldest_ages(ages)\n  sort!(ages)[end-1:end]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200258,"user_id":null,"body":"function two_oldest_ages(ages)\n    s = sort(ages; alg=QuickSort)\n    return([s[end-1], s[end]])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"513e08acc600c94f01000001":[{"id":200259,"user_id":null,"body":"module Solution\nexport rgb\n\nrgb(r, g, b) = \n  uppercase(mapreduce(x -> string(x > 255 ? 255 : x < 0 ? 0 : x, base = 16, pad = 2), *, (r, g, b)))\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200260,"user_id":1750,"body":"module Solution\nexport rgb\n\nfunction rgb(args...)\n  string.(clamp.(args, 0, 255), base = 16, pad = 2) |> join |> uppercase\nend\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200261,"user_id":null,"body":"module Solution\n    using Printf: @sprintf\n    export rgb\n    rgb(r, g, b) = @sprintf \"%02X%02X%02X\" clamp(r, 0, 255) clamp(g, 0, 255) clamp(b, 0, 255)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200262,"user_id":53,"body":"module Solution\nexport rgb\n\nfunction rgb(r, g, b)\n  return [r,g,b] .|> (n -> uppercase(lpad(string(clamp(n, 0, 255), base=16), 2, \"0\"))) |> prod\nend\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200263,"user_id":null,"body":"#i am tired and found this solution stupid and amusing\n\nmodule Solution\n  export rgb\n  \n  function rgb(r, g, b)\n    r=min(max(0,r),255)\n    g=min(max(0,g),255)\n    b=min(max(0,b),255)\n    \n    val=[#     I did not write this, I wrote a program to generate it, \n         #     which seems like solving the problem to make a stupid solution....\n     \"00\",\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"0A\",\"0B\",\"0C\",\"0D\",\"0E\",\"0F\",\n     \"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"1A\",\"1B\",\"1C\",\"1D\",\"1E\",\"1F\",\n     \"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"2A\",\"2B\",\"2C\",\"2D\",\"2E\",\"2F\",\n     \"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"3A\",\"3B\",\"3C\",\"3D\",\"3E\",\"3F\",\n     \"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"4A\",\"4B\",\"4C\",\"4D\",\"4E\",\"4F\",\n     \"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"5A\",\"5B\",\"5C\",\"5D\",\"5E\",\"5F\",\n     \"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"6A\",\"6B\",\"6C\",\"6D\",\"6E\",\"6F\",\n     \"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"7A\",\"7B\",\"7C\",\"7D\",\"7E\",\"7F\",\n     \"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"8A\",\"8B\",\"8C\",\"8D\",\"8E\",\"8F\",\n     \"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"9A\",\"9B\",\"9C\",\"9D\",\"9E\",\"9F\",\n     \"A0\",\"A1\",\"A2\",\"A3\",\"A4\",\"A5\",\"A6\",\"A7\",\"A8\",\"A9\",\"AA\",\"AB\",\"AC\",\"AD\",\"AE\",\"AF\",\n     \"B0\",\"B1\",\"B2\",\"B3\",\"B4\",\"B5\",\"B6\",\"B7\",\"B8\",\"B9\",\"BA\",\"BB\",\"BC\",\"BD\",\"BE\",\"BF\",\n     \"C0\",\"C1\",\"C2\",\"C3\",\"C4\",\"C5\",\"C6\",\"C7\",\"C8\",\"C9\",\"CA\",\"CB\",\"CC\",\"CD\",\"CE\",\"CF\",\n     \"D0\",\"D1\",\"D2\",\"D3\",\"D4\",\"D5\",\"D6\",\"D7\",\"D8\",\"D9\",\"DA\",\"DB\",\"DC\",\"DD\",\"DE\",\"DF\",\n     \"E0\",\"E1\",\"E2\",\"E3\",\"E4\",\"E5\",\"E6\",\"E7\",\"E8\",\"E9\",\"EA\",\"EB\",\"EC\",\"ED\",\"EE\",\"EF\",\n     \"F0\",\"F1\",\"F2\",\"F3\",\"F4\",\"F5\",\"F6\",\"F7\",\"F8\",\"F9\",\"FA\",\"FB\",\"FC\",\"FD\",\"FE\",\"FF\"]\n     return val[r+1]*val[g+1]*val[b+1]\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200264,"user_id":1750,"body":"module Solution\nexport rgb\n\nfunction rgb(args...)\n  args.|> (x -> string(clamp(x, 0, 255), base = 16, pad = 2) |> uppercase) |> join\nend\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200265,"user_id":53,"body":"module Solution\nexport rgb\n\nfunction rgb(r, g, b)\n  hr = uppercase(lpad(string(max(0, min(255, r)), base=16), 2, \"0\"))\n  hg = uppercase(lpad(string(max(0, min(255, g)), base=16), 2, \"0\"))\n  hb = uppercase(lpad(string(max(0, min(255, b)), base=16), 2, \"0\"))\n  return hr * hg * hb\nend\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200266,"user_id":null,"body":"module Solution\nexport rgb\n\nfunction rgb(r, g, b)\n  r>255 ? r = 255 : r<0 ? r=0 : r=r\n  g>255 ? g = 255 : g<0 ? g=0 : g=g\n  b>255 ? b = 255 : b<0 ? b=0 : b=b\n  \n  return uppercase(join([string(r, base = 16, pad = 2), string(g, base = 16, pad = 2), string(b, base = 16, pad = 2)]))\n  \nend\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200267,"user_id":null,"body":"module Solution\nexport rgb\n  rgb(args...) = uppercase(join(string.(clamp.(args, 0, 255), base=16, pad=2)))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200268,"user_id":null,"body":"module Solution\nexport rgb\n  rgb(args...) = uppercase(join(map(x -> length(x) == 1 ? \"0\" * x : x, string.(clamp.(args, 0, 255), base=16))))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"514a6336889283a3d2000001":[{"id":200269,"user_id":421,"body":"get_even_numbers(arr) = filter(iseven, arr)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200270,"user_id":2525,"body":"function get_even_numbers(arr)\n    filter(x->x%2==0, arr)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200271,"user_id":null,"body":"function get_even_numbers(arr)\n  [q for q in arr if iseven(q)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200272,"user_id":null,"body":"function get_even_numbers(arr)\n  [x for x in arr if x&1 == 0]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200273,"user_id":1474,"body":"function get_even_numbers(arr)\n  [i for i in arr if i % 2 == 0]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200274,"user_id":null,"body":"function get_even_numbers(arr)\n  return filter(value -> value % 2 == 0, arr)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200275,"user_id":null,"body":"function get_even_numbers(arr)\n  newArr = []\n  for i in 1:length(arr)\n    if iseven(arr[i])\n      append!(newArr, arr[i])\n    end\n  end\n  return newArr\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200276,"user_id":null,"body":"function get_even_numbers(arr)\n result = []\n  for i in arr\n    if i % 2 == 0\n      push!(result, i)\n    end\n  end\n  result\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200277,"user_id":null,"body":"function get_even_numbers(arr)\n  [i for i in arr if iseven(i)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200278,"user_id":168,"body":"function get_even_numbers(arr)\n  [x for x in arr if iseven(x)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"514b92a657cdc65150000006":[{"id":200279,"user_id":null,"body":"module kata\nexport solution\n\nsolution(number) =\n   sum(filter(i -> mod(i, 3) == 0 || mod(i, 5) == 0, 1:number-1))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200280,"user_id":564,"body":"module kata\n\n  triOrQuin(n) = n % 3 == 0 || n % 5 == 0\n\n  function solution(n)\n    sum(filter(triOrQuin, 1:n-1))\n  end\n  \nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200281,"user_id":null,"body":"module kata\n  export solution\n  \n  function solution(number)\n    reduce(+, [x for x in 1:(number-1) if x % 3 == 0 || x % 5 == 0])\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200282,"user_id":null,"body":"module kata\n  export solution\n  \n  function solution(number)\n    sum = 0\n    i = 0\n    while i < number\n      if i % 3 === 0 || i % 5 === 0\n        sum += i\n      end\n      i += 1      \n    end\n    return sum  \n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200283,"user_id":null,"body":"module kata\nexport solution\n\nsolution(number) = sum([x for x in 1:number-1 if x%3==0 || x%5==0])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200284,"user_id":null,"body":"module kata\nexport solution\n\nfunction solution(number)\n f(e)= e>0 && (e%3==0 || e%5==0) ? e : 0\n sum(map(f,1:number-1))\nend\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200285,"user_id":null,"body":"module kata\nexport solution\n\nfunction solution(number)\n    n=number-1    \n    return sum(3:3:n) + sum(5:5:n) - sum(15:15:n)\nend\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200286,"user_id":null,"body":"module kata\n  export solution\n  \n  function solution(number)\n    return sum(filter(x-> ((x%3 == 0)||(x%5 == 0)), collect(1:number-1)))\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200287,"user_id":null,"body":"module kata\nexport solution\n\nfunction solution(number)\nvec = Vector(1:number-1)\nsum(vec[vec .%3 .* vec .%5 .== 0])\nend\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200288,"user_id":null,"body":"module kata\nexport solution\n\nfunction solution(number)\n  sol = 0\n  a = 3\n  b = 5\n  while a<number \n    sol = sol + a\n    \n    if(b<number && b%3!=0)\n      sol = sol + b  \n    end\n    \n    a = a+3\n    b = b+5\n  end  \n  return sol\nend\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"515de9ae9dcfc28eb6000001":[{"id":200289,"user_id":null,"body":"function solution(str)\n  return [(str*'_')[i:i+1] for i in 1:2:length(str)]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200290,"user_id":881,"body":"solution(str) = collect(m.match for m in eachmatch(r\"..\", str * \"_\"))","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200291,"user_id":null,"body":"function solution(str)\n    if length(str) & 1 == 1\n        str = str * \"_\"\n    end\n    return [a * b for (a, b) in zip(str[1:2:end], str[2:2:end])]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200292,"user_id":572,"body":"function solution(str)\n  [x.match for x in eachmatch(r\".{2}\", str*'_')]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200293,"user_id":null,"body":"function solution(str)\n  iseven(length(str)) ? str : str *= '_'\n  [str[x:x+1] for x in 1:2:length(str)]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200294,"user_id":null,"body":"function solution(str)\n    res = []\n    while length(str) > 1\n        push!(res, str[1:2])\n        str = str[3:end]\n    end\n    if length(str) == 1\n        push!(res, str*\"_\")\n    end\n    return res\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200295,"user_id":null,"body":"function solution(str)\n  out = []\n  while length(str) != 0\n    if length(str) > 2\n      push!(out, str[1:2])\n      str = str[3:end]\n    elseif length(str) == 2\n      push!(out, str[1:2])\n      str = \"\"\n    else\n      push!(out, str[1]*\"_\")\n      str = \"\"\n    end\n  end\n  return out\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200296,"user_id":null,"body":"function solution(str)\n  if length(str) % 2 != 0 \n    str *= '_' \n  end\n  \n  res = String[]\n  \n  for i in 1 : Int32(length(str)\/2)\n    push!(res, str[i*2-1:i*2])\n  end\n  res\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200297,"user_id":null,"body":"function solution(str)\n  if length(str) % 2 == 1\n    str *= \"_\"\n  end\n  return [\n    str[i:i+1]\n    for i in 1:2:length(str)\n  ]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200298,"user_id":null,"body":"function solution(str)\n  vec = []\n  for i in 2:2:length(str)\n    push!(vec, str[i-1:i])\n  end\n  if isodd(length(str))\n    push!(vec, str[end]*'_')\n  end\n  vec\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"515e271a311df0350d00000f":[{"id":200299,"user_id":null,"body":"function square_sum(numbers)\n  sum(numbers .^ 2)\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200300,"user_id":null,"body":"function square_sum(numbers)\n  res = 0\n  for i in numbers\n    res += i^2\n  end\n  return res\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200301,"user_id":null,"body":"function square_sum(numbers)\n  numbers==[] && return 0\n  sum(x^2 for x in numbers)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200302,"user_id":null,"body":"function square_sum(numbers)\n  return length(numbers)>0 ? sum(n^2 for n in numbers) : 0\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200303,"user_id":null,"body":"function square_sum(numbers)\n  sum(map(x -> x^2, numbers))\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200304,"user_id":null,"body":"function square_sum(numbers)\n  x = 0\n  for i in numbers\n    x += i ^ 2\n   end\n  return x\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200305,"user_id":null,"body":"function square_sum(numbers)\n    sum = 0\n    for num in numbers\n        sum = sum + num^2\n    end\n    return sum\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200306,"user_id":null,"body":"function square_sum(numbers)\n  sum = 0\n  \n  for i in numbers\n    sum = sum + (i * i)\n  end\n  return sum\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200307,"user_id":null,"body":"function square_sum(numbers)\n  mapreduce(abs2, +, numbers)\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200308,"user_id":null,"body":"function square_sum(numbers)\n# \tsum(numbers.^2)\n\treduce(+, x^2 for x in numbers; init=0)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"515f51d438015969f7000013":[{"id":200309,"user_id":null,"body":"pyramid(n)=[fill(1,k) for k in 1:n]\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200310,"user_id":null,"body":"function pyramid(n)\n  [ones(Int, i) for i = 1:n]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200311,"user_id":null,"body":"function pyramid(n)\n    [ones(i) for i = 1:n]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200312,"user_id":null,"body":"function pyramid(n)\n  [ones(Int, k) for k in 1:n]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200313,"user_id":null,"body":"function pyramid(n)\n  return Array{Int}[ones(i) for i \u2208 1:n]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200314,"user_id":null,"body":"pyramid(n) = n == 0 ? [] : vcat([[1]], vcat.([1], pyramid(n-1)))\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200315,"user_id":null,"body":"function pyramid(n)\n  output = []\n  for k \u2208 1:n\n    push!(output, repeat([1], k))\n  end\n  output\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200316,"user_id":null,"body":"pyramid(n) = [ones(i) for i = 1:n]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200317,"user_id":null,"body":"function pyramid(n)\n  if n <= 0\n    return []\n  else\n    v = [[1]]\n    for i in 2:n\n      s = fill(1,i)\n      v = push!(v,s)\n    end\n  end\n  return v\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200318,"user_id":null,"body":"pyramid(n) = [[1 for _ in 1:i] for i in 1:n]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"51675d17e0c1bed195000001":[{"id":200319,"user_id":527,"body":"module Kata\n  export solution\n  using IterTools\n  solution(s::String)::Int = parse(Int, join(maximum(partition(s, 5, 1))))\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200320,"user_id":null,"body":"module Kata\n  export solution\n\n  function solution(s::String)\n      mymax = 0\n      l = length(s)\n      for i in 1:(l - 4)\n        myint = parse(Int64, s[i:(i+4)])\n        if myint > mymax \n          mymax = myint\n        end \n      end \n      return mymax\n  end\n\nend # module","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200321,"user_id":null,"body":"module Kata\n  export solution\n\nfunction solution(s::String)\n    chars = collect(s)\n    consecutive_digits_arr = [chars[i:i+4] for i in 1:(length(chars)-4)]\n    findmax(consecutive_digits_arr)[1] |> join |> x -> parse(Int64, x)\nend\n\nend # module","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200322,"user_id":1474,"body":"module Kata\n  export solution\n\n  function solution(s::String)\n    maximum(parse(Int, s[i:i+4]) for i in 1:length(s)-4)\n  end\n\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200323,"user_id":53,"body":"module Kata\n  export solution\n\n  function solution(s::String)\n    r = 0\n    for i=1:length(s)-4\n      p = parse(Int, s[i:i+4])\n      if p > r\n        r = p\n      end\n    end\n    r\n  end\n\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200324,"user_id":null,"body":"module Kata\n  export solution\n\n  function solution(s::String)\n      greatest = 0\n      for i = 1:length(s)-4\n        num = parse(Int, SubString(s, i:i+4))\n        greatest = num > greatest ? num : greatest\n      end\n      greatest\n  end\n\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200325,"user_id":null,"body":"module Kata\nexport solution\n\nfunction solution(s::String)\n  subsets = collect(Iterators.map(n -> parse(Int32, s[n:n+4]), Iterators.take(Iterators.countfrom(1, 1), length(s) - 4)))\n  sort(subsets, rev=true)[1]\nend\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200326,"user_id":null,"body":"module Kata\n  export solution\n\n  function solution(s::String)\n      tmp = 0\n\n      for p in 1:length(s)-4\n          num = Base.parse(Int,s[p:p+4])\n         if num > tmp\n             tmp = num\n          end\n      end\n\n      tmp\n  end\n\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200327,"user_id":null,"body":"module Kata\n  export solution\n\n  function solution(s::String)\n      maximum(i-> parse(Int, s[i:i+4]), 1:length(s)-4)\n  end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200328,"user_id":null,"body":"module Kata\n  export solution\n\n  function solution(s::String)\n      max = 0\n      for i in 1:length(s)-4\n          num = parse(Int, s[i:i+4])\n          num > max && (max = num)\n      end\n      max\n  end\n\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5168bb5dfe9a00b126000018":[{"id":200329,"user_id":527,"body":"solution = reverse","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200330,"user_id":null,"body":"solution(phrase) = reverse(phrase)\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200331,"user_id":null,"body":"function solution(phrase)\n  # Your code Here\n  length(phrase) <= 1 ? phrase : foldr((x, y) -> y * x, phrase)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200332,"user_id":null,"body":"function solution(phrase)\n  phrase[end:-1:1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200333,"user_id":null,"body":"function solution(phrase)\n  # Your code Here\n  \n\n  \nreverse(phrase)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200334,"user_id":null,"body":"function solution(phrase)\n  result = \"\"\n  for ch in phrase\n    result = string(ch)*result\n  end\n  return result\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200335,"user_id":null,"body":"function solution(phrase)\n  length(phrase) <= 1 ? phrase : foldr((x, y) -> y * x, phrase)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200336,"user_id":null,"body":"function solution(phrase)\n  dst = \"\"\n  for i = 1: length(phrase)\n    dst = dst * phrase[length(phrase) + 1 - i]\n  end\n  return dst\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200337,"user_id":null,"body":"function solution(phrase)\n  return reverse(phrase)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200338,"user_id":null,"body":"function solution(phrase::AbstractString)::AbstractString\n  reverse(phrase)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5174a4c0f2769dd8b1000003":[{"id":200339,"user_id":null,"body":"solution(nums) = (isnothing(nums) || isempty(nums)) ? [] : sort(nums)\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200340,"user_id":421,"body":"solution(nums) = nums == nothing ? [] : sort(nums)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200341,"user_id":527,"body":"solution(_::Nothing) = []\nsolution(nums) = sort(nums)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200342,"user_id":null,"body":"function solution(nums) \n  #your code here\n  if nums == nothing return [] end\n    \n  for i=1 : length(nums)\n    for j=i : length(nums)\n      if nums[i] > nums[j]\n        aux = nums[i]\n        nums[i] = nums[j]\n        nums[j] = aux\n      end\n    end  \n  end\n  return nums\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200343,"user_id":null,"body":"function solution(nums) \n  isnothing(nums) && return [];\n  return sort(nums);#your code here\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200344,"user_id":881,"body":"solution(nums) = sort(nums)\nsolution(::Nothing) = Int[]\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200345,"user_id":null,"body":"function solution(nums) \n  if nums == nothing\n    return []\n    else\n    return sort(nums)\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200346,"user_id":null,"body":"function solution(nums)\n  if isnothing(nums)\n    return []\n  else\n    return sort(nums)\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200347,"user_id":null,"body":"function solution(nums) \n  if nums !== nothing\n    nums |> sort\n  else\n      []\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200348,"user_id":null,"body":"function solution(nums) \n  if isnothing(nums)\n      []\n    else\n      sort(nums)\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"517abf86da9663f1d2000003":[{"id":200349,"user_id":null,"body":"function to_camel_case(str)\n  return replace(str, r\"([-_])([a-zA-Z])\" => x -> uppercase(x[2]))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200350,"user_id":null,"body":"function to_camel_case(str)\n  return String(filter(c -> !(c in ['-', '_']), [ i > 1 && str[i-1] in ['-', '_'] ? uppercase(c) : c for (i, c) in enumerate(str)]))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200351,"user_id":null,"body":"upperCamel(s) = uppercase(s[2])\n\nfunction to_camel_case(str)\n  return replace(str, r\"(_|\\-)(\\w)\", upperCamel)\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200352,"user_id":881,"body":"function to_camel_case(str)\n words = split(str, r\"[-_]\")\n for i in 2:length(words)\n   words[i] = ucfirst(words[i])\n end\n join(words)\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200353,"user_id":null,"body":"function to_camel_case(str)\n  words = split(str, r\"[-_]\")\n  for (index,word) in enumerate(words)\n    if index == 1\n      continue\n    end\n    words[index] = titlecase(word)\n  end\n  join(words)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200354,"user_id":null,"body":"to_camel_case(str) = replace(str, r\"[-_](.)\" => x -> uppercase(x[2:end]))","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200355,"user_id":null,"body":"function to_camel_case(str)\n  if str==\"\"\n    return \"\"\n  end\n  join(map(x->findfirst(x, str)[1]==1 ? x : titlecase(x),split(str,r\"-|_\")))\nend ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200356,"user_id":null,"body":"function to_camel_case(str)\n  new_str = \"\"\n  nextupper = false\n  for c in str\n    if c == '-' || c == '_'\n      nextupper = true\n    elseif nextupper\n      new_str = new_str * uppercase(c)\n      nextupper = false\n    else\n      new_str = new_str * c\n    end\n  end\n  return new_str\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200357,"user_id":null,"body":"function to_camel_case(str)\n  words = occursin(\"-\", str) ? split(str, \"-\") : split(str, \"_\")\n  reduce(words) do a,b\n    a * uppercase(b[1]) * b[2:end]\n  end\n    \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200358,"user_id":null,"body":"function to_camel_case(str)\n  if isempty(str)\n    return str\n  end\n  \n  if '-' in str\n    splitstr = split(str, \"-\")\n  elseif '_' in str\n    splitstr = split(str, \"_\")\n  end\n  \n  for idx in 2:length(splitstr)\n    s = splitstr[idx]\n    splitstr[idx] = (s |> first |> uppercase) * s[2:end]\n  end\n  \n  return join(splitstr)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"51b62bf6a9c58071c600001b":[{"id":200359,"user_id":881,"body":"function solution(number::Integer)::String\n    str = \"\"\n    for (s, n) in ((\"M\", 1000), (\"CM\", 900), (\"D\", 500), (\"CD\", 400), (\"C\", 100), (\"XC\", 90), (\"L\", 50), (\"XL\", 40), (\"X\", 10), (\"IX\", 9), (\"V\", 5), (\"IV\", 4), (\"I\", 1))\n        while number >= n\n            str *= s\n            number -= n\n        end\n    end\n    return str\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200360,"user_id":null,"body":"function solution(number::Integer)::String\n  string1 = \"\"\n  nums = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n  syms = [\"M\", \"CM\", \"D\",\"CD\", \"C\",\"XC\", \"L\", \"XL\",\"X\",\"IX\", \"V\", \"IV\", \"I\"]\n  \n  if number > 0\n    for i = 1:length(nums)\n      if number >= nums[i]\n        string1 *= syms[i]\n        string1 *= solution(number - nums[i])\n        break\n      end\n    end\n  end\n  \n  return string1\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200361,"user_id":null,"body":"roman_numerial_map = [\n  [1000, \"M\"],\n  [900, \"CM\"],\n  [500, \"D\"],\n  [400, \"CD\"],\n  [100, \"C\"],\n  [90, \"XC\"],\n  [50, \"L\"],\n  [40, \"XL\"],\n  [10, \"X\"],\n  [9, \"IX\"],\n  [5, \"V\"],\n  [4, \"IV\"],\n  [1, \"I\"]\n]\n\nfunction solution(number::Integer)::String\n  output = \"\"\n  for entry in roman_numerial_map\n    n = entry[1]\n    char = entry[2]\n    while number >= n\n      number = number - n\n      output = output * char\n    end\n  end\n  output\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200362,"user_id":null,"body":"function solution(number::Integer)::String\n    ones = encoderomandigit(number, ['X', 'V', 'I'], 1)\n    tens = encoderomandigit(number, ['C', 'L', 'X'], 10)\n    hundreds = encoderomandigit(number, ['M', 'D', 'C'], 100)\n    \"$(repeat('M', number \/ 1000 |> floor |> Integer))$(hundreds)$(tens)$(ones)\"\nend\n\nfunction encoderomandigit(number, chars::Array{Char}, base::Integer)\n  next, five, unit = chars\n  digit = ((number \/ base) |> floor |> Integer) % 10\n  morethan5 = digit >= 5\n  ones = digit % 5\n  if morethan5\n    if ones > 3\n      \"$(unit)$(next)\"\n    else\n      \"$(five)$(repeat(unit, ones))\"\n    end\n  else\n    if ones > 3\n      \"$(unit)$(five)\"\n    else\n      repeat(unit, ones)\n    end\n  end \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200363,"user_id":null,"body":"\nconst record = Dict(\n    \"M\" => 1000,\n    \"CM\" => 900,\n    \"D\" => 500,\n    \"CD\" => 400,\n    \"C\" => 100,\n    \"XC\" => 90,\n    \"L\" => 50,\n    \"XL\" => 40,\n    \"X\" => 10,\n    \"IX\" => 9,\n    \"V\" => 5,\n    \"IV\" => 4,\n    \"I\" => 1\n)\n\nfunction solution(number::Integer)::String\n    str = \"\"\n    collections = sort(collect(record), by = x -> x.second, rev = true)\n\n    for (key, value) in collections\n        q = floor(number \/ value) |> Int\n        number -= q * value\n        str *= repeat(key, q)\n    end\n\n    return str\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200364,"user_id":null,"body":"function solution(val::Integer)::String\n    # convert the number to a Roman numeral\n    minform = []\n    for i=1:val\u00f71000\n        push!(minform,'M')\n    end\n    val = val%1000\n    if val >= 900\n        push!(minform,'C', 'M')\n        val -= 900\n    end\n    if val >= 500\n        push!(minform,'D')\n        val -= 500\n    end\n    if val >= 400\n        push!(minform,'C', 'D')\n        val -= 400\n    end\n    for i=1:val\u00f7100\n        push!(minform,'C')\n    end\n    val = val%100\n    if val >= 90\n        push!(minform,'X', 'C')\n        val -= 90\n    end\n    if val >= 50\n        push!(minform, 'L')\n        val -= 50\n    end\n    if val >= 40\n        push!(minform, 'X', 'L')\n        val -= 40\n    end\n    for i=1:val\u00f710\n        push!(minform,'X')\n    end\n    val = val%10\n    if val >= 9\n        push!(minform, 'I', 'X')\n        val -= 9\n    end\n    if val >= 5\n        push!(minform, 'V')\n        val -= 5\n    end\n    if val >= 4\n        push!(minform, 'I', 'V')\n        val -= 4\n    end\n    for i=1:val\u00f71\n        push!(minform,'I')\n        val -= 1\n    end\n    @assert val == 0    \n    minform_string = join(minform)\n    # println(\" = $minform_string\")\n    return minform_string\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200365,"user_id":null,"body":"function solution(number::Integer)::String\n  rules = (\"M\" => 1000, \"CM\" => 900, \"D\" => 500, \"CD\" => 400, \"C\" => 100,\n           \"XC\" => 90, \"L\" => 50, \"XL\" => 40, \"X\" => 10, \"IX\" => 9, \"V\" => 5,\n           \"IV\" => 4, \"I\" => 1)\n  roman = \"\"\n\n  for (romanValue, numberEquivalent) in rules\n    while number >= numberEquivalent\n      roman *= romanValue\n      number -= numberEquivalent\n    end\n  end\n\n  roman\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200366,"user_id":null,"body":"function solution(number::Integer)::String\n  roman = \"\"\n  rules = (\"IIII\" => \"IV\", \"VIV\" => \"IX\", \"XXXX\" => \"XL\", \"LXL\" => \"XC\", \"CCCC\" => \"CD\", \"DCD\" => \"CM\")\n\n  while number > 0\n    if number >= 1000\n      roman *= \"M\"\n      number -= 1000\n    elseif number >= 500\n      roman *= \"D\"\n      number -= 500\n    elseif number >= 100\n      roman *= \"C\"\n      number -= 100\n    elseif number >= 50\n      roman *= \"L\"\n      number -= 50\n    elseif number >= 10\n      roman *= \"X\"\n      number -= 10\n    elseif number >= 5\n      roman *= \"V\"\n      number -= 5\n    else\n      roman *= \"I\"\n      number -= 1\n    end\n  end\n\n  for keyPair in rules\n    roman = replace(roman, keyPair)\n  end\n\n  roman\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200367,"user_id":null,"body":"function solution(number::Integer)::String\n  solved = false\n  roman = \"\"\n  rules = (\"IIII\" => \"IV\", \"VIV\" => \"IX\", \"XXXX\" => \"XL\", \"LXL\" => \"XC\", \"CCCC\" => \"CD\", \"DCD\" => \"CM\")\n  while !solved\n    if number >= 1000\n      roman *= \"M\"\n      number -= 1000\n    elseif number >= 500\n      roman *= \"D\"\n      number -= 500\n    elseif number >= 100\n      roman *= \"C\"\n      number -= 100\n    elseif number >= 50\n      roman *= \"L\"\n      number -= 50\n    elseif number >= 10\n      roman *= \"X\"\n      number -= 10\n    elseif number >= 5\n      roman *= \"V\"\n      number -= 5\n    else\n      roman *= \"I\"\n      number -= 1\n    end\n    if number == 0\n      solved = true\n    end\n  end\n\n  for keyPair in rules\n    roman = replace(roman, keyPair)\n  end\n\n  roman\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200368,"user_id":null,"body":"function solution(number::Integer)::String\n    dics = [Dict(zip(0:3,[\"\",\"M\",\"MM\",\"MMM\"])),\n            Dict(zip(0:9,[\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"])),\n            Dict(zip(0:9,[\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"])),\n            Dict(zip(0:9,[\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"]))]\n    join(dics[D][d] for (D, d) in enumerate(reverse(digits(number, pad = 4))))\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"51c89385ee245d7ddf000001":[{"id":200369,"user_id":null,"body":"solution(value) = \"Value is $(string(value,pad=5))\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200370,"user_id":null,"body":"solution(value) = \"Value is $(lpad(string(value), 5, '0'))\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200371,"user_id":53,"body":"function solution(value) \n  \"Value is \" * lpad(string(value), 5, '0')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200372,"user_id":null,"body":"function solution(value) \n    \"Value is \" * string(value, base = 10, pad = 5)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200373,"user_id":null,"body":"function solution(value) \n  padded_value = lpad(value, 5, \"0\")\n  return \"Value is \" * padded_value\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200374,"user_id":null,"body":"function solution(value) \n  \"Value is $(string(value, pad=5))\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200375,"user_id":527,"body":"using Printf\n\nfunction solution(value::Int)::String\n  @sprintf \"Value is %05d\" value\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200376,"user_id":527,"body":"using Printf\n\nfunction solution(value) \n  @sprintf \"Value is %05d\" value\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200377,"user_id":527,"body":"function solution(value::Int)::String\n  \"Value is $(lpad(value, 5, '0'))\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200378,"user_id":527,"body":"function solution(value) \n  \"Value is $(lpad(value, 5, '0'))\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"51c8991dee245d7ddf00000e":[{"id":200379,"user_id":881,"body":"reverse_words(str) = join(reverse(split(str, ' ')), ' ')\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200380,"user_id":null,"body":"reverse_words(str) = join(str |> split |> reverse, ' ')","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200381,"user_id":null,"body":"function reverse_words(str)\n  arr = split(str,\" \")\n  result = \"\"\n  for i = 1:length(arr)\n    result = arr[i] * \" \" * result\n  end\n  return rstrip(result)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200382,"user_id":572,"body":"function reverse_words(str)\n  join(reverse([x for x in split(str)]), \" \")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200383,"user_id":null,"body":"function reverse_words(str)\n  join(split(str)[end:-1:1],\" \")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200384,"user_id":null,"body":"function reverse_words(str)\n  myinput = str;\n  myoutput = \"\"; \n  while occursin(' ',myinput) \n   l = findlast(isequal(' '),myinput)\n   myoutput = myoutput*myinput[l+1:end]*\" \"\n   myinput = myinput[1:l-1]\n  end \n  return myoutput*myinput\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200385,"user_id":null,"body":"function reverse_words(str)\n  return join(split(str)[end:-1:1], \" \")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200386,"user_id":null,"body":"function reverse_words(str)\n    nStr = split(str)\n    finalStr = \"\"\n    for i = reverse(firstindex(nStr):lastindex(nStr))\n        finalStr = finalStr * nStr[i]\n        if i != firstindex(nStr)\n          finalStr = finalStr * \" \"\n        end \n    end\n    return finalStr\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200387,"user_id":null,"body":"function reverse_words(str)\n  join(reverse(split(str, \" \")), \" \") # reverse the words here\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200388,"user_id":null,"body":"reverse_words(str) = str |> split |> reverse |> x-> join(x, \" \")","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"51e0007c1f9378fa810002a9":[{"id":200389,"user_id":null,"body":"# Return the output array, and ignore all non-op characters\nfunction parse(data)\n  i(x)  =  x+1 \n  d(x)  =  x-1\n  s(x)  =  x^2\n  \n  function o(x)\n      append!(out,x)\n      return x\n  end\n  \n  f=Dict(\"i\" => c->i(c),\"d\"=> c->d(c),\"s\"=>c->s(c),\"o\"=>c->o(c))\n\n  out=[]\n  x=0\n  \n  for c in split(data,\"\")\n     haskey(f,c) ? x=f[c](x) : nothing\n  end\n  \n  return out \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200390,"user_id":null,"body":"# Return the output array, and ignore all non-op characters\nfunction parse(data)\n    o_array = Int[]\n    l = 0\n    for a in data\n        if a == 'i'\n            l += 1\n        elseif a == 'd'\n            l -= 1\n        elseif a == 's'\n            l = l^2\n        elseif a == 'o'\n            append!(o_array, l)\n        end\n    end\n    return o_array\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200391,"user_id":null,"body":"function parse(data)\n  ret = zeros(0)\n  counter = 0\n  for c in data\n    if c == 'i'\n      counter += 1\n    elseif c == 'd'\n      counter -= 1\n    elseif c == 's'\n      counter *= counter\n    elseif c == 'o'\n      append!(ret, counter)\n    end\n  end\n  return ret\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200392,"user_id":null,"body":"# Return the output array, and ignore all non-op characters\n\nfunction parse(data)\n  \n  aDict = Dict(\n    'i' => x -> x+1,\n    'd' => x -> x-1,\n    's' => x -> x^2,\n  \n  )\n  \n  deadfishV = 0\n  \n  result_s = []\n  \n  for ch in data\n    \n    if ch == 'o'\n      \n      append!(result_s, deadfishV)\n      \n    else\n      \n      deadfishV = get(aDict, ch, x->x)(deadfishV)\n    \n    end\n  \n    end\n  \n  return result_s\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200393,"user_id":564,"body":"function parse(commands, value=0, outputs=[])\n  if length(commands) == 0\n    outputs\n  else\n    c = commands[1]\n\n    if c == 'i'\n      value += 1\n    elseif c == 'd'\n      value -= 1\n    elseif c == 's'\n      value *= value\n    elseif c == 'o'\n      push!(outputs, value)\n    end\n\n    parse(commands[2:end], value, outputs)\n  end\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200394,"user_id":null,"body":"function parse(data)\n  value = 0\n  output = []\n  for code in data\n    if code == 'i'\n      value += 1\n    elseif code == 'd'\n      value -= 1\n    elseif code == 's'\n      value *= value\n    elseif code == 'o'\n      push!(output, value)\n    end\n  end\n  return output\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200395,"user_id":null,"body":"# Return the output array, and ignore all non-op characters\nfunction parse(data)\n\n  arr = []\n  increse(x) = x + 1\n  decrease(x) = x - 1\n  square(x) = x^2\n  function output(x)\n    push!(arr, x)\n    return x\n  end\n\n  dict = Dict('i' => increse, 'd' => decrease, 's' => square, 'o' => output)\n\n  valid = filter(x -> x \u2208 \"idso\", collect(data))\n\n  n = 0\n  for c in valid\n    n = n |> dict[c]\n  end\n\n  arr\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200396,"user_id":null,"body":"function parse(data)\n\tvalue = 0\n\tarray = []\n\tfor char in data\n\t\tif char == 'i'\n\t\t\tvalue += 1\n\t\telseif char == 'd'\n\t\t\tvalue -= 1\n\t\telseif char == 's'\n\t\t\tvalue ^= 2\n\t\telseif char == 'o'\n\t\t\tpush!(array,value)\n\t\telse \n\t\t\tcontinue\n\t\tend\n\tend\n\tarray\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200397,"user_id":null,"body":"# Return the output array, and ignore all non-op characters\nfunction parse(data)\n  output = Int[]\n  value = 0\n  for char in data\n    if char == 'i'\n      value += 1\n    elseif char == 'd'\n      value -= 1\n    elseif char == 's'\n      value ^= 2\n    elseif char == 'o'\n      push!(output, value)\n    end\n  end\n\n  return output\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200398,"user_id":null,"body":"# Return the output array, and ignore all non-op characters\nfunction parse(data)\n  value = 0\n  result = []\n  for c in data\n    if c == 'i'\n      value += 1\n    elseif c == 'd'\n      value -= 1\n    elseif c == 's'\n      value *= value\n    elseif c == 'o'\n      append!(result, value)\n    end\n  end\n  result\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"51e04f6b544cf3f6550000c1":[{"id":200399,"user_id":421,"body":"function beeramid(bonus, price)\n  level = 0\n  n = 1\n  i = 1\n  while n <= div(bonus, price)\n    i += 1\n    n += i ^ 2\n    level += 1\n  end\n  level\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200400,"user_id":null,"body":"function beeramid(bonus, price)\n  n = 1\n  while true\n     p = price*n*(n+1)*(2*n+1)\/6\n     (p > bonus) && return n-1\n     n += 1\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200401,"user_id":527,"body":"using Base.Iterators: countfrom\n\nfunction beeramid(bonus, price)\n  n = bonus \/ price\n  for i in countfrom(1)\n    if i * (i + 1) * (2 * i + 1) \/ 6 > n\n      return i - 1\n    end\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200402,"user_id":null,"body":"function beeramid(bonus, price)\n  level = 0\n  while bonus > 0\n    bonus -= (level + 1)^2 * price\n    if bonus >= 0\n      level += 1\n    end\n  end\n  return level\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200403,"user_id":null,"body":"function beeramid(bonus, price)\n  #your code here\n  cans::Int64 = fld(bonus, price)\n  levels = 0\n  print(cans)\n  while cans >= (levels+1)*(levels+1)\n    levels += 1\n    cans -= levels * levels\n  end\n  return levels\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200404,"user_id":null,"body":"function beeramid(bonus, price)\n  cans_available = floor(bonus\/price)\n  level = 0\n  cans_needed = 1\n  while cans_available >= cans_needed\n    cans_available -= cans_needed\n    level += 1\n    cans_needed = (1 + level)^2\n   end\n  level\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200405,"user_id":null,"body":"function beeramid(bonus, price)\n  if bonus <= 0\n    return 0\n  end\n  num_cans = bonus\/price\n  cans_used = 0\n  i = 1\n  while num_cans >= cans_used\n    cans_used += i^2\n    i += 1\n  end\n  return i-2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200406,"user_id":null,"body":"function beeramid(bonus, price)\n  cansremaining = floor(bonus \/ price)\n  currentlevel = 0\n  nextlevel = 1\n  while (cansremaining > 0)\n    currentlevel = nextlevel\n    nextlevel = currentlevel + 1\n    cansremaining -= nextlevel^2\n  end\n  currentlevel\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200407,"user_id":2525,"body":"function beeramid(bonus, price)\n    level = 0  \n    while bonus >= (level+1)^2 * price\n        level += 1\n        bonus -= level^2 * price\n    end\n    level\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200408,"user_id":null,"body":"function beeramid(bonus, price)\n  levels = 0\n  cans = 0\n  cans_for_level = (levels + 1) ^ 2\n  while (cans_for_level + cans) * price <= bonus\n    cans += cans_for_level\n    levels += 1\n    cans_for_level = (levels + 1) ^ 2\n  end\n  levels\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"51f41b98e8f176e70d0002a8":[{"id":200409,"user_id":421,"body":"sortme = sort","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200410,"user_id":null,"body":"# input: names - unsorted array\n# output: sorted array\nsortme(names) = sort(names)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200411,"user_id":null,"body":"function sortme(names)\n  names |> sort\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200412,"user_id":527,"body":"function sortme(names)\n  sort(names)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"51f9d93b4095e0a7200001b8":[{"id":200413,"user_id":48,"body":"function how_many_light_sabers_do_you_own(name=\"chewie\")\n  name == \"Zach\" ? 18 : 0\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200414,"user_id":null,"body":"how_many_light_sabers_do_you_own(name=\"\") = name == \"Zach\" != 0 ? 18 : 0","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200415,"user_id":null,"body":"how_many_light_sabers_do_you_own(name = \"t\";) = 18(name == \"Zach\")","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200416,"user_id":1474,"body":"function how_many_light_sabers_do_you_own(name=\"dummy\")\n  name == \"Zach\" ? 18 : 0\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200417,"user_id":null,"body":"how_many_light_sabers_do_you_own(name::String) = name != \"Zach\" ? 0 : 18\nhow_many_light_sabers_do_you_own() = 0","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200418,"user_id":null,"body":"how_many_light_sabers_do_you_own(name) = name == \"Zach\" ? 18 : 0\n\nhow_many_light_sabers_do_you_own() = 0","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200419,"user_id":null,"body":"function how_many_light_sabers_do_you_own(name= \"NotZach\")\n  name == \"Zach\" ? 18 : 0\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200420,"user_id":null,"body":"how_many_light_sabers_do_you_own(name::String) = name == \"Zach\" ? 18 : 0\nhow_many_light_sabers_do_you_own() = how_many_light_sabers_do_you_own(\"None\")","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200421,"user_id":50,"body":"function how_many_light_sabers_do_you_own(name=\"\")\n  if name == \"Zach\" return 18 else return 0\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200422,"user_id":null,"body":"function how_many_light_sabers_do_you_own(name) name \u2260 \"Zach\"||return 18; 0 end\nhow_many_light_sabers_do_you_own() = 0\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"51fc12de24a9d8cb0e000001":[{"id":200423,"user_id":881,"body":"function isvalid_ISBN10(isbn::AbstractString)::Bool\n    occursin(r\"^\\d{9}(\\d|X)$\", isbn) && iszero(sum(prod.(enumerate(digit == 'X' ? 10 : parse(Int, digit) for digit in isbn))) % 11)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200424,"user_id":null,"body":"function parse_isbn(isbn::AbstractString)::Vector{Int}\n    isbn |> collect .|> x -> isdigit(x) ? parse(Int8, x) : 10\nend\n\n\nfunction isvalid_ISBN10(isbn::AbstractString)::Bool\n    regex_check = occursin(r\"^\\d{9}(\\d|X)$\", isbn)\n    arithmetic_check = sum(parse_isbn(isbn) .* (1:length(isbn))) % 11 == 0\n    regex_check && arithmetic_check\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200425,"user_id":null,"body":"\nparse_digit = function (char)\n    char == 'X' && return 10\n    return parse(Int64, char)\nend\n\nfunction isvalid_ISBN10(isbn::AbstractString)::Bool\n    length(isbn) != 10 && return false\n    digits = collect(isbn)\n    !all(digits[1:9] .\u2208 tuple('0':'9')) && return false\n    digits[10] \u2209 ['0':'9'; 'X'] && return false\n\n    result = parse_digit.(digits) .* (1:length(digits)) |> sum\n    result % 11 == 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200426,"user_id":null,"body":"function isvalid_ISBN10(isbn::AbstractString)\n    regex_condition = occursin(r\"\\d{9}(\\d|X)$\", isbn)\n    arithmetic_condition = sum([i * (isdigit(x) ? parse(Int8, x) : 10) for (i, x) in enumerate(isbn)]) % 11 == 0\n  \n    regex_condition && arithmetic_condition\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200427,"user_id":null,"body":"function isvalid_ISBN10(isbn::AbstractString)\n    regex_condition = occursin(r\"^[0-9]{9}[0-9X]{1}$\", isbn)\n    arithmetic_condition = sum([i * (isdigit(x) ? parse(Int8, x) : 10) for (i, x) in enumerate(isbn)]) % 11 == 0\n    return regex_condition && arithmetic_condition\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200428,"user_id":2525,"body":"function isvalid_ISBN10(isbn::AbstractString)::Bool\n    values = [if isdigit(d) i*(Int(d)-48) elseif d=='X' 10*i else 0 end for (i, d) in enumerate(isbn)]\n  \n    (match(r\"\\A[0-9]{9}[0-9X]\\Z\", isbn) != nothing) && (sum(values) % 11 == 0)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200429,"user_id":null,"body":"function isvalid_ISBN10(isbn::AbstractString)::Bool\n  \n  if !occursin(r\"^[0-9]{9}([0-9]|X){1}$\", isbn)\n    return false\n  end\n\n  sum(\n    i*(c=='X' ? 10 : parse(Int, c)) \n    for (i, c) in enumerate(isbn)\n  ) % 11 == 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200430,"user_id":null,"body":"function isvalid_ISBN10(isbn::AbstractString)::Bool\n    if !occursin(r\"[0-9]{9}[0-9X]\", isbn) || length(isbn) != 10 \n        return false\n    else \n        ans = []\n        for i = 1:length(collect(isbn))\n            if collect(isbn)[i] == 'X'\n                push!(ans, 10 * i)\n            else\n                push!(ans, parse(Int, collect(isbn)[i]) * i)\n            end\n        end\n        sum(ans) % 11 == 0\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200431,"user_id":null,"body":"function isvalid_ISBN10(isbn::AbstractString)::Bool\n  if length(isbn) != 10 || (match(r\"\\d{9}(\\d|X)\", isbn)==nothing)\n    return false\n  end\n  return mod(sum(map(x -> x==\"X\" ? 10 : parse(Int, x), split(isbn, \"\")) .* (1:10)),11)==0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200432,"user_id":null,"body":"function isvalid_ISBN10(isbn::AbstractString)::Bool\n    # TODO: return true if (and only if) isbn is a valid 10-digit ISBN.\n     chars = collect(isbn)\n    length(chars) != 10 && return false\n    any(isequal('X'), chars[1:end-1]) && return false\n    any(x -> x > 9 || x < 0, map(x -> x - '0', chars[1:end-1])) && return false\n    lastAlpha = chars[end]\n    numbers = map(x -> x - '0', chars[1 : end-1])\n    push!(numbers, lastAlpha == 'X' ? 10 : lastAlpha - '0')\n\n    summary = reduce(+ ,map(tuple -> first(tuple) * last(tuple), Iterators.enumerate(numbers)))\n    return summary % 11 == 0\n\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"51fd6bc82bc150b28e0000ce":[{"id":200433,"user_id":null,"body":"no_odds(values::Array{Int,1})::Array{Int,1} = filter(iseven,values)\n","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200434,"user_id":null,"body":"no_odds(values::Array{Int,1})::Array{Int,1} = filter(x -> x % 2 == 0, values)\n","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200435,"user_id":null,"body":"no_odds(values) = filter(iseven, values)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200436,"user_id":null,"body":"function no_odds(values::Array{Int,1})::Array{Int,1}\n  return filter(x -> iseven(x), values)\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200437,"user_id":53,"body":"function no_odds(values::Array{Int,1})::Array{Int,1}\n  [n for n in values if n%2==0]\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200438,"user_id":null,"body":"function no_odds(values::Array{Int,1})::Array{Int,1}\n  return filter(iseven, values)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200439,"user_id":null,"body":"function no_odds(values::Array{Int,1})::Array{Int,1}\n  [values[it] for it in findall(iseven,values)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200440,"user_id":421,"body":"function no_odds(values::Array{Int,1})::Array{Int,1}\n  [x for x in values if iseven(x)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200441,"user_id":null,"body":"function no_odds(values::Array{Int,1})::Array{Int,1}\n    [value for value in values if mod(value, 2) == 0]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200442,"user_id":null,"body":"function no_odds(values::Array{Int,1})::Array{Int,1}\n  filter(val -> !isodd(val), values)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"522551eee9abb932420004a0":[{"id":200443,"user_id":881,"body":"nth_fibo(n::Integer) = first([0 1] * [0 1; 1 1] ^ (n - 1))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200444,"user_id":null,"body":"# \u6590\u6ce2\u90a3\u5951\u6570\u5217\u5bf9\u5e94\u7684\u7ebf\u6027\u53d8\u6362\nF = [0 1; 1 1]\n\nnth_fibo(n::Integer) = (F^(n-1)*[0, 1])[1]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200445,"user_id":null,"body":"function nth_fibo(n::Integer)\n    ((1 + \u221a5)^(n - 1) - (1 - \u221a5)^(n - 1)) \/ (\u221a5 * 2^(n - 1)) |> round |> Int\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200446,"user_id":null,"body":"nth_fibo(n::Integer) = fibo(n-1)\nfunction fibo(n::Integer)\n    if n<4\n        return [0,1,1,2][n+1]\n    elseif iseven(n)\n        return fibo(n>>1+1)^2-fibo(n>>1-1)^2\n    else\n        return fibo(n>>1)^2+fibo(n>>1+1)^2\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200447,"user_id":null,"body":"function nth_fibo(n::Integer, memo=Dict(1=>0, 2=>1))\n    if !(n in keys(memo))\n        memo[n] = nth_fibo(n-2, memo) + nth_fibo(n-1, memo)\n    end\n    return memo[n]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200448,"user_id":null,"body":"nth_fibo(n::Integer) = ([1 1; 1 0]^n)[2, 2]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200449,"user_id":168,"body":"function nth_fibo(n::Integer)\n  if n <= 2 n - 1 else nth_fibo(n - 1) + nth_fibo(n - 2) end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200450,"user_id":null,"body":"function nth_fibo(n::Integer)\n    a = 0\n    b = 1\n    for _ = 2:n\n      c = b\n      b = a + b\n      a = c\n    end\n    return a\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200451,"user_id":50,"body":"function nth_fibo(n::Integer)\n  a=0\n  b=1\n  c=0\n  while n != 1\n    n-=1\n    c=a+b\n    a=b\n    b=c\n  end\n  return a\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"523b4ff7adca849afe000035":[{"id":200452,"user_id":null,"body":"module Solution\n  export greet\n  greet() = \"hello world!\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200453,"user_id":1365,"body":"module Solution\n  export greet\n  function greet()\n    \"hello world!\"\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200454,"user_id":null,"body":"module Solution\n    export greet\n    greet() = join(Char.([104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33]))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200455,"user_id":null,"body":"module Solution\n  export greet\n  function greet()  #= easy peasy leamon squeezy =#\n  str =(\"hello world!\")\n  str[1:12]\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200456,"user_id":null,"body":"module Solution\n  export greet\n  # Write a function `greet` that returns \"hello world!\"\n  \nend\n\nfunction greet()\n    \"hello world!\"\n  end","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200457,"user_id":null,"body":"module Solution\n  export greet\n  # Write a function `greet` that returns \"hello world!\"\nfunction greet()\n  \"hello world!\"\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200458,"user_id":null,"body":"module Solution\n  export greet\n  # Write a function `greet` that returns \"hello world!\"\n\n  function greet()\n    return \"hello world!\"\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200459,"user_id":null,"body":"module Solution\n  export greet\n    function greet()\n      return(\"hello world!\")\n    end\n  # Write a function `greet` that returns \"hello world!\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200460,"user_id":null,"body":"module Solution\n  export greet\n  # Write a function `greet` that returns \"hello world!\"\n    greet()::String = \"hello world!\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200461,"user_id":null,"body":"module Solution\n  greet = () -> \"hello world!\"\n  export greet\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"523f5d21c841566fde000009":[{"id":200462,"user_id":null,"body":"function array_difference(a, b)\n    filter(x -> x \u2209 b, a)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200463,"user_id":null,"body":"function array_difference(a, b)\n  [i for i in a if !(i in b)]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200464,"user_id":null,"body":"array_difference(a, b) = filter(x->x \u2209 b, a)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200465,"user_id":null,"body":"function array_difference(a, b)\n  return filter(e -> e \u2209 b, a)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200466,"user_id":null,"body":"array_difference(a, b) = filter(!in(b), a)\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200467,"user_id":881,"body":"array_difference(a, b) = filter(x -> !(x in b), a)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200468,"user_id":null,"body":"function array_difference(a, b)\n    l = filter(x -> !(x in b), a)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200469,"user_id":null,"body":"function array_difference(a, b)\n    d = [];\n    for c in a\n        if !(c \u2208 b)\n        push!(d,c)\n      end\n    end\n    return d\n  end","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200470,"user_id":null,"body":"function array_difference(a, b)\n  set_b = Set(b)\n  [l for l in a if l \u2209  set_b]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200471,"user_id":null,"body":"function array_difference(a, b)\n  return b == [] ? a : filter(x -> mapreduce(y -> y .!= x, &, b), a)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"525821ce8e7b0d240b002615":[{"id":200472,"user_id":null,"body":"function camelize(str)\n  join(map(x->uppercasefirst(lowercase(x)), split(str, r\"[^A-Za-z0-9]+\")),\"\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200473,"user_id":null,"body":"function camelize(str)\n  join(map(uppercasefirst, split(lowercase(str), l -> !isletter(l) && !isdigit(l))))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200474,"user_id":759,"body":"function camelize(str)\n  join((string(uppercase(w.match[1]), lowercase(w.match[2:end])) for w in eachmatch(r\"([A-Za-z0-9]+)\", str)), \"\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200475,"user_id":null,"body":"camelize(str) = replace(titlecase(replace(str,r\"[^\\w\\d]|_\"=>\" \"), wordsep = ==(' ')),' '=>\"\")","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200476,"user_id":null,"body":"function camelize(str)\n    join([uppercasefirst(lowercase(m.match)) for m in eachmatch(r\"[A-Za-z0-9]+\", str)])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200477,"user_id":50,"body":"function camelize(str)\n  return join([string(uppercase(s[1]),s[2:length(s)]) for s in split(lowercase(str), r\"\\W|_\") if length(s)>0],\"\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200478,"user_id":881,"body":"camelize(str) = join(uppercasefirst.(lowercase.(split(str, r\"[^a-zA-Z0-9]+\"))))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200479,"user_id":881,"body":"function camelize(str)\n    join(uppercase(word[1]) * lowercase(word[2:end]) for word in (split(str, r\"[^a-zA-Z0-9]+\")) if !isempty(word))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200480,"user_id":null,"body":"function camelize(str)\n  tokens = split(str, r\"[ :\\->=\/'\\\";,\\.!?_]+\")\n  capitalized_tokens = [titlecase(t, wordsep = c -> c == \" \", strict = true) for t in tokens]\n  return join(capitalized_tokens, \"\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200481,"user_id":null,"body":"function camelize(str)\n  join(map(m -> uppercasefirst(lowercase(m.match)), eachmatch(r\"[a-zA-Z0-9]+\", str)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5259b20d6021e9e14c0010d4":[{"id":200482,"user_id":527,"body":"function reverse_words(str)\n  replace(str, r\"\\S+\" => reverse)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200483,"user_id":null,"body":"function reverse_words(str)\n  join(map(reverse, split(str, \" \")), \" \")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200484,"user_id":881,"body":"reverse_words(str) = join(map(reverse, split(str, \" \")), \" \")","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200485,"user_id":null,"body":"# Complete the function that accepts a string parameter, and reverses\n# each word in the string. All spaces in the string should be retained.\n# Examples: \"This is an example!\" ==> \"sihT si na !elpmaxe\"\n# \"double  spaces\"      ==> \"elbuod  secaps\"\n\nfunction reverse_words(str)\n\n  str_buff = \"\"\n  i_prev = 1\n  for i = 1:length(str)\n    if str[i] != ' '\n      str_buff = str_buff * string(str[i])\n    else\n      if i_prev != i\n        str = replace(str, str_buff => reverse(str_buff), count = 1)\n        str_buff = \"\"\n        i_prev = i\n      end\n    end\n  end\n  if i_prev > 1\n    str = str[1:i_prev]*replace(str[i_prev+1:length(str)], str_buff => reverse(str_buff))\n  else\n    str = replace(str, str_buff => reverse(str_buff))\n  end\n  return str\nend\n","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200486,"user_id":null,"body":"function reverse_words(str)\n    join([reverse(x) for x=split(str, ' ')],' ')\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200487,"user_id":null,"body":"function reverse_words(str)\n    return join(\n        map(x -> reverse(x), split(str, \" \")),\n        \" \"\n    )\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200488,"user_id":null,"body":"function reverse_words(str)\n  words = split(str, \" \")\n  res = \"\"\n  for word in words\n    res = res * reverse(word)\n    res = res * \" \"\n  end\n  return res[1:end-1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200489,"user_id":null,"body":"function reverse_words(str)\n  # Go for it\n  replace(str, r\"\\S+\" => reverse)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200490,"user_id":null,"body":"function reverse_words(str)\n    L = reverse.(split(str, \" \"))\n    return join(L, \" \")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200491,"user_id":null,"body":"function reverse_words(str)\n    strSplit = split(str, \" \")\n    for i in 1:length(strSplit)\n        strSplit[i] = reverse(strSplit[i])\n    end\n    return join(strSplit, \" \")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"525e5a1cb735154b320002c8":[{"id":200492,"user_id":null,"body":"function triangular(n::Integer)\n  n > 0 ? n*(n+1)\/2 : 0\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200493,"user_id":null,"body":"triangular(n::Integer) = (n \u2265 0) * n*(n+1)\u00f72","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200494,"user_id":null,"body":"function triangular(n::Integer)\n    if n < 0\n        return 0\n    end\n    return n * (n + 1) \/ 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200495,"user_id":null,"body":"function triangular(n::Integer)\n  if n <= 0\n    return 0\n  else \n    return n*(n+1)\/2\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200496,"user_id":53,"body":"function triangular(n::Integer)\n    n >= 0 ? n * (n + 1) \/ 2 : 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200497,"user_id":null,"body":"function triangular(n::Integer)\n    if n > 0\n      n * (n + 1) \/ 2\n    else\n      0\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200498,"user_id":168,"body":"function triangular(n::Integer)\n  sum(1:n)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200499,"user_id":527,"body":"function triangular(n::Integer)::Integer\n  n < 0 ? 0 : n * (n + 1) \/ 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200500,"user_id":50,"body":"function triangular(n::Integer)\n  if n < 1\n    return 0\n  else\n    return (n * (n + 1)) >> 1\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200501,"user_id":881,"body":"function triangular(n::Integer)\n    if n > 0\n        n * (n + 1) \u00f7 2\n    else\n        0\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"525f50e3b73515a6db000b83":[{"id":200502,"user_id":null,"body":"using Printf\n\nfunction create_phone_number(numbers)\n  @sprintf(\"(%i%i%i) %i%i%i-%i%i%i%i\", numbers...)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200503,"user_id":null,"body":"function create_phone_number(numbers)\n    '(' * join(numbers[begin:3]) * \") \" * join(numbers[4:6]) * '-' * join(numbers[7:end])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200504,"user_id":null,"body":"function create_phone_number(n)\n  \"($(n[1])$(n[2])$(n[3])) $(n[4])$(n[5])$(n[6])-$(n[7])$(n[8])$(n[9])$(n[10])\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200505,"user_id":null,"body":"create_phone_number(numbers) = \"($(join(numbers[1:3]))) $(join(numbers[4:6]))-$(join(numbers[7:10]))\"","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200506,"user_id":null,"body":"create_phone_number(n) = \"($(n[1:3]...)) $(n[4:6]...)-$(n[7:10]...)\"","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200507,"user_id":null,"body":"create_phone_number(n) = \"($(join(n[1:3]))) $(join(n[4:6]))-$(join(n[7:10]))\"\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200508,"user_id":null,"body":"using Printf\nfunction create_phone_number(numbers)\n  @sprintf(\"(%d%d%d) %d%d%d-%d%d%d%d\", numbers...)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200509,"user_id":null,"body":"function create_phone_number(numbers)\n    return \"($(join(numbers[1:3]))) $(join(numbers[4:6]))-$(join(numbers[7:10]))\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200510,"user_id":null,"body":"function create_phone_number(numbers)\n  return join(['(', join(numbers[1:3]), \") \", join(numbers[4:6]), '-', join(numbers[7:10])])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200511,"user_id":null,"body":"function create_phone_number(numbers)\n    return string(\n        \"(\", join(numbers[1:3]), \") \",\n        join(numbers[4:6]), \"-\",\n        join(numbers[7:10])\n    )\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"525fbff0594da0665c0003a3":[{"id":200512,"user_id":881,"body":"nextgen(cells) = map(coord -> nextgen(gameoflife, cells, coord), CartesianIndices(cells))\nnextgen(fn::Function, cells, coord) = fn(cells[coord], eachneighbour(cells, coord))\n\n\"Iterate over the neighbouring cells in N dimensions.\"\nfunction eachneighbour(cells, coord::CartesianIndex{N}) where {N}\n    (\n        cells[neighbourcoord]\n        for neighbourcoord in (\n            coord + c\n            for c in CartesianIndices(Tuple(repeat([-1:1], N)))\n            if !iszero(c)\n        )\n        if neighbourcoord in keys(cells)\n    )\nend\n\nfunction gameoflife(cell, neighbours)\n    score = sum(neighbours)\n    score == 3 || cell == 1 && score == 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200513,"user_id":null,"body":"function nextgen(cells)\n    onesies = Set((i,j) for i in 1:first(size(cells)), j in 1:last(size(cells)) if isone(cells[i,j]))\n    near(x) = isempty(onesies) ? 0 : length(intersect(onesies, Set((first(x)+i,last(x)+j) for i in -1:1, j in -1:1 if !iszero(i*j+i+j))))\n    [((local n = near((i,j))) == 3 || (n == 2 && isone(cells[i,j]))) for i in 1:first(size(cells)), j in 1:last(size(cells))]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200514,"user_id":50,"body":"function nextgen(a)\n  l = size(a, 1)\n  m = size(a, 2)\n  o = zeros(Int8, l, m)\n  for i in 1:l\n    for j in 1:m\n      n = 0\n      if i > 1\n        if j > 1 && a[i-1, j-1] == 1\n          n = n + 1\n        end\n        if j < m && a[i-1, j+1] == 1\n          n = n + 1\n        end\n        n = n + a[i-1, j]\n      end\n      if i < l\n        if j > 1 && a[i+1, j-1] == 1\n          n = n + 1\n        end\n        if j < m && a[i+1, j+1] == 1\n          n = n + 1\n        end\n        n = n + a[i+1, j]\n      end\n      if j > 1\n        n = n + a[i, j-1]\n      end\n      if j < m\n        n = n + a[i, j+1]\n      end\n      if n == 3 || (n==2 && a[i, j] == 1)\n        o[i, j] = 1\n      end\n    end\n  end\n  return o\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5264d2b162488dc400000001":[{"id":200515,"user_id":null,"body":"module Solution\n  export spin_words\n  spin_words(s) = join((length(w) < 5 ? w : reverse(w) for w in split(s)), ' ')\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200516,"user_id":null,"body":"module Solution\nexport spin_words\n\nfunction spin_words(s::String)\n  join((word -> length(word) < 5 ? word : reverse(word)).(split(s)), \" \")\nend\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200517,"user_id":881,"body":"module Solution\nexport spin_words\n\nfunction spin_words(s::String)::String\n  join(map(w -> length(w) > 4 ? reverse(w) : w, split(s)), \" \")\nend\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200518,"user_id":null,"body":"module Solution\nexport spin_words\n\n  function spin_words(s::String)\n    split(s, \" \") .|> \n    (x -> length(x)>=5 ? reverse(x) : x) |> \n    (x -> join(x,\" \"))\n  end\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200519,"user_id":null,"body":"module Solution\nexport spin_words\n\nfunction spin_words(s::String)\n  reverse_long_word = w -> length(w) < 5 ? w : reverse(w)\n  # join(map(reverse_long_word, split(s)), \" \")\n  join([reverse_long_word(w) for w \u2208 split(s)], \" \")\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200520,"user_id":null,"body":"module Solution\nexport spin_words\n\nfunction spin_words(s::String)\n    L = split(s, \" \")\n    B = length.(L) .>= 5\n    L[B] = reverse.(L[B])\n    return join(L, \" \")\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200521,"user_id":null,"body":"module Solution\nexport spin_words\n\nfunction spin_words(s::String)\n  join([length(w)<5 ? w : reverse(w) for w in split(s, \" \")], \" \")\nend\n\n\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200522,"user_id":null,"body":"module Solution\nexport spin_words\n\nfunction spin_words(s::String)\n  words = split(s)\n  function f(word) \n    length(word) >= 5 ? reverse(word) : word \n  end\n  words = map(f, words)\n  return join(words, \" \")\nend\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200523,"user_id":null,"body":"module Solution\nexport spin_words\n\nfunction spin_words(s::String)\n  reverse_5_letter_word = w -> (w |> length >= 5) ? (w |> reverse) : w\n  \n  join([reverse_5_letter_word(x) for x \u2208 s |> split], \" \")\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200524,"user_id":null,"body":"module Solution\nexport spin_words\n\nfunction spin_words(s::String)\n  reverse_5_letter_word = w -> (w |> length >= 5) ? (w |> reverse) : w\n  join(map(reverse_5_letter_word, s |> split), \" \")\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5265326f5fda8eb1160004c8":[{"id":200525,"user_id":881,"body":"number_to_string = string ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200526,"user_id":null,"body":"function number_to_string(num)\n  repr(num)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200527,"user_id":527,"body":"function number_to_string(num)\n  string(num)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200528,"user_id":null,"body":"number_to_string(n) = string(n)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200529,"user_id":null,"body":"function number_to_string(num::Int64)::String\n  return string(num)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200530,"user_id":null,"body":"function number_to_string(num)\n  # Return a string of the number here!\n  string(num)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200531,"user_id":null,"body":"function number_to_string(num)\n  if num == 0\n    return \"0\"\n  end\n  current_num = num\n  result = \"\"\n  neg_num = false\n  if current_num < 0\n    current_num *= -1\n    neg_num = true\n  end\n    \n  while current_num > 0\n    last_digit = mod(current_num, 10)\n    if last_digit == 0\n      result = \"0\" * result\n    elseif last_digit == 1\n      result = \"1\" * result\n    elseif last_digit == 2\n      result = \"2\" * result\n    elseif last_digit == 3\n      result = \"3\" * result\n    elseif last_digit == 4\n      result = \"4\" * result\n    elseif last_digit == 5\n      result = \"5\" * result\n    elseif last_digit == 6\n      result = \"6\" * result\n    elseif last_digit == 7\n      result = \"7\" * result\n    elseif last_digit == 8\n      result = \"8\" * result\n    elseif last_digit == 9\n      result = \"9\" * result\n    end\n    \n    current_num = (current_num - last_digit) \/ 10\n  end\n  if neg_num\n    result = \"-\" * result\n  end\n  result\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200532,"user_id":null,"body":"function number_to_string(num)\n  # Return a string of the number here!\n  return string(num)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200533,"user_id":null,"body":"function number_to_string(num)\n  return \"$num\"\n  # Return a string of the number here!\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200534,"user_id":null,"body":"\"\"\"\nConverts a number input into a string.\n\"\"\"\nfunction number_to_string(num)\n    # use string() method for conversion\n    return string(num)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"526571aae218b8ee490006f4":[{"id":200535,"user_id":527,"body":"count_bits = count_ones","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200536,"user_id":527,"body":"function count_bits(n)\n  count_ones(n)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200537,"user_id":null,"body":"function count_bits(n)\n  sum(digits(n, base=2))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200538,"user_id":null,"body":"function count_bits(n)\n    length(filter(\u03bb -> \u03bb == 1, digits(n, base=2)))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200539,"user_id":null,"body":"function count_bits(n)\n  \nstring(n, base = 2) |> collect |> arr -> count(==('1'), arr)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200540,"user_id":null,"body":"function count_bits(n)\n  sum = 0\n  while n > 0\n    sum = sum + n % 2\n    n = n \u00f7 2\n  end\n  sum\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200541,"user_id":null,"body":"function count_bits(n)\n  global c = 0\n  n = string(n, base = 2)\n  n = collect(n)\n  for i in n\n      if i == '1'\n          global c += 1\n      end\n  end\n  return c\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200542,"user_id":null,"body":"count_bits(n) = sum(n >> x & 1 for x \u2208 0:sizeof(n)*8-1)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200543,"user_id":null,"body":"function count_bits(n)    \n  b = bitstring(n)\n  return count(x->x=='1', b)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200544,"user_id":null,"body":"function count_bits(n)\n  return(sum(filter(x->Bool(x), digits(n,base=2))))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5266876b8f4bf2da9b000362":[{"id":200545,"user_id":null,"body":"module Kata\n  export likes\n  \n  fmtlike() = \"no one likes this\"\n  fmtlike(name::String) = \"$(name) likes this\"\n  fmtlike(name1::String, name2::String) = \"$(name1) and $(name2) like this\"\n  fmtlike(name1::String, name2::String, name3::String) = \"$(name1), $(name2) and $(name3) like this\"\n  fmtlike(name1::String, name2::String, others...) = \"$(name1), $(name2) and $(length(others)) others like this\"\n  \n  function likes(names::Vector{String}) :: String\n    fmtlike(names...)\n  end\nend\n","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200546,"user_id":572,"body":"module Kata\n  export likes\n  \n  function likes(names)\n  n = length(names)\n  if n == 0\n    return \"no one likes this\"\n  elseif n == 1\n    return \"$(names[1]) likes this\"\n  elseif n == 2\n    return \"$(names[1]) and $(names[2]) like this\"\n  elseif n == 3\n    return \"$(names[1]), $(names[2]) and $(names[3]) like this\"\n  else\n    return \"$(names[1]), $(names[2]) and $(n-2) others like this\"\n  end\nend\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200547,"user_id":null,"body":"module Kata\n  export likes\n  \n  function likes(names::Vector{String}) :: String\n      \"$(length(names)==0 ? \"no one\" : \"\")\"*\"$(length(names) < 4 ? join(names, \", \", \" and \") : join(names[1:2], \", \")*\" and $(length(names)-2) others\")\"*\" like$(length(names) <= 1 ? \"s\" : \"\") this\"\n  end\nend\n","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200548,"user_id":881,"body":"module Kata\nexport likes\n\nfunction likes(names::Vector{String})::String\n    len = length(names)\n    if isempty(names)\n        \"no one likes this\"\n    elseif isone(len)\n        only(names) * \" likes this\"\n    elseif len < 4\n        join(names, \", \", \" and \") * \" like this\"\n    else\n        names[1] * \", \" * names[2] * \" and $(len - 2) others like this\"\n    end\nend\n\nend # module\n","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200549,"user_id":null,"body":"module Kata\n  export likes\n  \n  function likes(names::Vector{String}) :: String\n    length(names) == 0 ? \"no one likes this\" : \n      length(names) == 1 ? names[1] * \" likes this\" : \n      length(names) == 2 ? names[1] * \" and \" * names[2] * \" like this\" : \n      length(names) == 3 ? names[1] * \", \" * names[2] * \" and \" * names[3] * \" like this\" : \n      length(names) > 3 ? names[1] * \", \" * names[2] * \" and \" * string(length(names) - 2) * \" others like this\"  :\n      \"\"\n  end\nend\n","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200550,"user_id":null,"body":"module Kata\n  export likes\n  \n  function likes(names::Vector{String}) :: String\n    l = length(names)\n    if l == 0\n      return \"no one likes this\"\n    elseif l == 1\n      return string(names[1], \" likes this\")\n    elseif l == 2\n      return string(names[1], \" and \", names[2], \" like this\")\n    elseif l == 3\n      return string(names[1], \", \", names[2], \" and \", names[3], \" like this\")\n    else \n      return string(names[1], \", \", names[2], \" and \", ( l - 2), \" others like this\")\n    end\n  end\nend\n","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200551,"user_id":null,"body":"module Kata\n  export likes\n  \n  function likes(names::Vector{String}) :: String\n    singular_ending = \" likes this\"\n    plural_ending = \" like this\"\n    name_quantity = length(names)\n    if name_quantity == 0\n      message = \"no one\" * singular_ending\n    elseif name_quantity == 1\n      message = names[1] * singular_ending\n    elseif name_quantity <= 3\n      message = join(names, \", \", \" and \") * plural_ending\n    else\n      message = join(names[1:2], \", \") * \" and $(name_quantity - 2) others\" * plural_ending\n    end\n    return message\n  end\nend\n","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200552,"user_id":null,"body":"module Kata\n  export likes\n  \n  function likes(names::Vector{String}) :: String\n    # your code here\n  \n  n = length(names)\n  if n == 0\n    return \"no one likes this\"\n  elseif n == 1\n    return \"$(names[1]) likes this\"\n  elseif n == 2\n    return \"$(names[1]) and $(names[2]) like this\"\n  elseif n == 3\n    return \"$(names[1]), $(names[2]) and $(names[3]) like this\"\n  else\n    return \"$(names[1]), $(names[2]) and $(n-2) others like this\"\n  end\n  end\nend\n","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200553,"user_id":null,"body":"module Kata\n  export likes\n  \n  function likes(names::Vector{String}) :: String\n    len = length(names)\n    if len == 0\n      \"no one likes this\"\n    elseif len == 1\n      string(names[1], \" likes this\")\n    elseif len == 2\n      string(names[1], \" and \", names[2], \" like this\")\n    elseif len == 3\n      string(names[1], \", \", names[2], \" and \", names[3], \" like this\")\n    else\n      string(names[1], \", \", names[2], \" and \", len-2, \" others like this\")\n    end\n  end\nend\n","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200554,"user_id":null,"body":"module Kata\n  export likes\n  \n  function likes(names)\n    if length( names ) == 0\n      return \"no one likes this\"\n    end\n    if length( names ) == 1\n      return \"$(names[1]) likes this\"\n    end\n    if length( names ) == 2\n      return \"$(names[1]) and $(names[2]) like this\"\n    end\n    if length( names ) == 3\n      return \"$(names[1]), $(names[2]) and $(names[3]) like this\"\n    end\n    if length( names ) > 3\n      return \"$(names[1]), $(names[2]) and $(length( names ) - 2) others like this\"\n    end\n  end\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"52685f7382004e774f0001f7":[{"id":200555,"user_id":null,"body":"function human_readable(seconds)\n  h,s = divrem(seconds, 3600)\n  m,s = divrem(s, 60)\n  join((lpad(h, 2, \"0\"), lpad(m, 2, \"0\"), lpad(s, 2, \"0\")), \":\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200556,"user_id":null,"body":"using Printf\n\nfunction human_readable(seconds)\n    hours = seconds \u00f7 3600\n    minutes = (seconds % 3600) \u00f7 60\n    seconds = seconds % 60\n    @sprintf \"%02d:%02d:%02d\" hours minutes seconds\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200557,"user_id":null,"body":"function human_readable(seconds)\n\ttemp = seconds\n\n\thrs = temp \u00f7 3600\n\tmin = temp % 3600 \u00f7 60\n\tsec = temp % 3600 % 60\n\n\tif hrs < 10\n\t\thrs = \"0\" * string(hrs)\n\tend\n\tif min < 10\n\t\tmin = \"0\" * string(min)\n\tend\n\tif sec < 10\n\t\tsec = \"0\" * string(sec)\n\tend\n\n\tstring(hrs) * \":\" * string(min) * \":\" * string(sec)\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200558,"user_id":null,"body":"function human_readable(seconds)\n  m, s = divrem(seconds, 60)\n  h, m = divrem(m, 60)\n  join(string.((h,m,s), pad=2), \":\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200559,"user_id":null,"body":"\n\"pad an integer to get to a 00 format\"\nfunction nn(n)\n    return lpad(string(n), 2, '0')\nend\n\n\"convert a number of seconds into a HH:MM:SS string\"\nfunction human_readable(seconds)\n    hrs = seconds \u00f7 3600;\n    mins = (seconds % 3600) \u00f7 60;\n    secs = seconds % 60;\n    return \"$(nn(hrs)):$(nn(mins)):$(nn(secs))\";\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200560,"user_id":572,"body":"function human_readable(seconds)\n   m, s = divrem(seconds, 60)\n   h, m = divrem(m, 60)\n   h, m, s = map(i->(string(i, pad=2)), [h, m, s])\n   return \"$h:$m:$s\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200561,"user_id":null,"body":"human_readable(seconds) = \"$(lpad(seconds\u00f73600, 2, '0')):$(lpad(seconds\u00f760%60, 2, '0')):$(lpad(seconds%60, 2, '0'))\"","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200562,"user_id":null,"body":"function human_readable(seconds)\n  h = seconds \u00f7 3600\n  m = (seconds - 3600*h) \u00f7 60\n  s = seconds - 3600*h - 60*m\n  \n  map(x -> x < 10 ? \"0$x\" : \"$x\", [h, m, s]) |>\n  v -> join(v, \":\")\n  \n  \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200563,"user_id":null,"body":"using Printf\nfunction human_readable(seconds)\n  h, m = divrem(seconds, 3600)\n  m, s = divrem(m, 60)\n  [h, m, s] .|>\n    (x -> begin @sprintf(\"%02d\", x) end) |>\n    (x -> join(x,\":\"))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200564,"user_id":null,"body":"human_readable(secs) = \"$(string(secs\u00f73600,pad=2)):$(string(secs\u00f760%60,pad=2)):$(string(secs%60,pad=2))\"","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"526989a41034285187000de4":[{"id":200565,"user_id":421,"body":"ip(s) = sum(parse(Int, x) * (256 ^ (4 - i)) for (i, x) in enumerate(split(s, \".\")))\n\nfunction ips_between(start, finish)\n  ip(finish) - ip(start)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200566,"user_id":null,"body":"function ips_between(start, finish)\n  start_v = parse.(Int,split(start,\".\"))\n  finish_v = parse.(Int,split(finish,\".\"))\n  \n  diff = sum((finish_v .- start_v) .* [256^3, 256^2, 256^1, 256^0])\n  \n  return diff\n  \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200567,"user_id":53,"body":"function ips_between(start, finish)\n  id(finish) - id(start)\nend\n\nfunction id(ip)\n  foldl( (acc, x) -> (acc << 8) + parse(Int, x), split(ip, \".\"); init=0 )\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200568,"user_id":null,"body":"function ips_between(start, finish)\n  parsed1 = split(start, \".\")\n  parsed2 = split(finish, \".\")\n  nums1 = map(x -> parse(Int64, x), parsed1)\n  nums2 = map(x -> parse(Int64, x), parsed2)\n  val1 = [nums1[i] * 256 ^ (4-i) for i in 1:4] |> sum\n  val2 = [nums2[i] * 256 ^ (4-i) for i in 1:4] |> sum\n  val1 - val2 |> abs\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200569,"user_id":null,"body":"function ip_to_number(ip_addr)\n  parts = parse.(Int, split(ip_addr, \".\"))\n  reduce(parts) do acc, val\n    (acc << 8) + val\n  end\nend\n\nips_between(start, finish) = ip_to_number(finish) - ip_to_number(start)\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200570,"user_id":null,"body":"function ips_between(start::String, finish::String)\n  left = parse.(Int, split(start, \".\"))\n  right = parse.(Int, split(finish, \".\"))\n  \n  a, b, c, d = left\n  w, x, y, z = right\n  \n  return (z - d) + (y - c) * 256 + (x - b) * 256 ^ 2 + (w - a) * 256 ^ 3\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200571,"user_id":null,"body":"function ips_between(start, finish)\n  numbers_start = reverse(parse.(Int64, split(start, \".\")))\n  numbers_finish = reverse(parse.(Int64, split(finish, \".\")))\n  return reduce(+, [(f-s) * 256^(i-1) for (i, (s, f)) in enumerate(zip(numbers_start, numbers_finish))])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200572,"user_id":null,"body":"function ips_between(start, finish)\n  result = 0\n  for (a, b) in zip(split(start, \".\"), split(finish, \".\"))\n    a, b = parse(Int, a), parse(Int, b)\n    result *= 256\n    result += b - a\n  end\n  return result\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200573,"user_id":null,"body":"function ips_between(start, finish)\n  res = 0\n  A = reverse( dims=1, hcat( split( start, \".\" ), split( finish, \".\" ) ) )\n  for ind in 1:4\n    res += ( parse( Int, A[ ind, 2 ] ) - parse( Int, A[ ind, 1 ] ) ) * 256^(ind-1)\n  end; res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200574,"user_id":null,"body":"function ip(address)\n  int_address = map(d -> parse(BigInt, d), split(address, '.'))\n  reverse!(int_address)\n  sum(d * (256 ^ (i-1)) for (i, d) in enumerate(int_address))\nend\n  \nfunction ips_between(start, finish)\n  return ip(finish) - ip(start)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"526c7363236867513f0005ca":[{"id":200575,"user_id":421,"body":"function isleapyear(year::Integer)::Bool\n    year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200576,"user_id":1474,"body":"function isleapyear(year::Integer)::Bool\n  year % 100 == 0 ? year % 400 == 0 : year % 4 == 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200577,"user_id":null,"body":"function isleapyear(year::Integer)::Bool\n  if(year % 4 == 0 && year % 100 != 0) || year % 400 == 0\n    return true\n  else\n    return false\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200578,"user_id":null,"body":"function isleapyear(year::Integer)::Bool\n    # TODO\n  if (year % 4) == 0 \n    if (year % 400) == 0\n      return true\n    elseif (year % 100) == 0\n      return false\n    #else \n    #  return true\n    end \n    return true\n  end \n  return false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200579,"user_id":53,"body":"function isleapyear(y::Integer)::Bool\n    y%4==0 && (y%100!=0 || y%400==0)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200580,"user_id":null,"body":"function isleapyear(year::Integer)::Bool\n    return (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200581,"user_id":null,"body":"function isleapyear(year::Integer)::Bool\n    year % 4 == 0 && year % 100 != 0 || year % 400 == 0 && year % 100 == 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200582,"user_id":null,"body":"function isleapyear(year::Integer)::Bool\n  year % 400 == 0 || year % 100 != 0 && year % 4 == 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200583,"user_id":881,"body":"function isleapyear(year::Integer)::Bool\n    iszero(year % 4) && (!iszero(year % 100) || iszero(year % 400))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5274d9d3ebc3030802000165":[{"id":200584,"user_id":527,"body":"nbr_of_laps(x, y) = (y, x) .\u00f7 gcd(x, y)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200585,"user_id":null,"body":"function nbr_of_laps(x, y)\n  i = 1\n  j = 1\n  length_x = x\n  length_y = y\n  while x != y\n    if x < y\n      i += 1\n      x += length_x\n    else \n      j += 1\n      y += length_y\n    end  \n  end\n  return (i,j)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200586,"user_id":53,"body":"function nbr_of_laps(x, y)\n  z = lcm(x, y)\n  (z \u00f7 x, z \u00f7 y)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200587,"user_id":null,"body":"function nbr_of_laps(x, y)\n  g = gcd(x,y)\n  (y\/g, x\/g)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200588,"user_id":null,"body":"\nfunction nbr_of_laps(x, y)\n  if x == y\n    return (1, 1)\n  end\n  d = gcd(x,y)\n  return (y\u00f7d, x\u00f7d)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200589,"user_id":null,"body":"nbr_of_laps(x, y) = lcm(x, y) .\/ (x, y)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200590,"user_id":null,"body":"function nbr_of_laps(x, y)\n  n=1\n  m=1\n  while (n*x)!=(m*y)\n    if (n*x) < (m*y)\n      n += 1\n    else\n      m += 1\n    end\n  end\n  return((n, m))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200591,"user_id":null,"body":"function nbr_of_laps(x, y)\n  return tuple((lcm(x,y) .\/ [x, y])...)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200592,"user_id":null,"body":"function nbr_of_laps(x, y)\n    return (lcm(x,y)\/x,lcm(x,y)\/y)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200593,"user_id":null,"body":"nbr_of_laps(x, y) = lcm(x, y) .\u00f7 (x, y)\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5274e122fc75c0943d000148":[{"id":200594,"user_id":null,"body":"function group_by_commas(n)\n    reverse(join([i.match for i in eachmatch(r\"\\d{1,3}\", reverse(\"$(n)\"))], ','))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200595,"user_id":null,"body":"function group_by_commas(n)\n  groups = Base.Iterators.partition(digits(n), 3)\n  join(join.(groups), ',') |> reverse\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200596,"user_id":null,"body":"function group_by_commas(n)\nstr = reverse(\"$(n)\")\ntmp=[str[1+3*q:3*(q+1)] for q in 0:div(length(str),3)-1]\ntmp1=str[end-mod(length(str),3)+1:end]\nif tmp1 == \"\"\n    return reverse(join(tmp,\",\"))\nelse\n   return reverse(join(push!(tmp,str[end-mod(length(str),3)+1:end]),\",\"))\nend\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200597,"user_id":null,"body":"function group_by_commas(n)\n  res = \"\"\n  n_string = string(n)\n  for (i, s) in pairs(reverse(n_string))\n    res *= s\n    if (i % 3 == 0) & (length(n_string) > i)\n      res *= \",\"\n    end\n  end\n  \n  return reverse(res)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200598,"user_id":544,"body":"function group_by_commas(n)\n  digit_groups_rev = collect(Iterators.partition(reverse(string(n)), 3))\n  digit_groups = reverse((String \u2218 reverse).(digit_groups_rev))\n  join(digit_groups, \",\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200599,"user_id":null,"body":"function group_by_commas(n)\n    s = reverse(string(n))\n    arr = []\n    for idx in 1:length(s)\n        push!(arr, s[idx])\n        if mod(idx, 3) == 0 && idx != length(s)\n            push!(arr, ',')\n        end\n    end\n    reverse(join(arr, \"\"))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200600,"user_id":null,"body":"function group_by_commas(n)\n  s = string(n)\n  l = length(s)\n  if l <= 3\n    return s\n  end\n  f = l%3\n  init = if f != 0 \n           string(s[1:f], \",\")\n         else\n           \"\"\n         end\n  string(init, join((s[i:i+2] for i in f+1:3:l), ','))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200601,"user_id":null,"body":"group_by_commas(n) = digits(n) |> x -> Iterators.partition(x, 3) .|> join |> x -> join(x, \",\") |> reverse","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200602,"user_id":null,"body":"function group_by_commas(n)\n  i = 1\n  base = 10\n  str = \"\"\n  while n != 0\n    remainder = mod(n, base)\n    n -= remainder\n    remainder = remainder * 10 \/ base\n    if mod(i-1, 3) == 0 && i != 1\n      str = string(Int64(remainder)) * \",\" * str\n    else\n      str = string(Int64(remainder)) * str\n    end\n    base *= 10\n    i += 1\n  end\n  return str\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200603,"user_id":null,"body":"function addCommas(num)\n    str = string(num)\n    return replace(str, r\"(?<=[0-9])(?=(?:[0-9]{3})+(?![0-9]))\" => \",\")\nend\n\nfunction group_by_commas(n)\n  addCommas(n)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"52755006cc238fcae70000ed":[{"id":200604,"user_id":759,"body":"christmas_tree(height) = join(\n  (string(' ' ^ (height - i), '*' ^ (2 * i - 1),\n    ' ' ^ (height - i)) for i in 1:height),\n  \"\n\")","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200605,"user_id":null,"body":"function christmas_tree(height)\n    join([\" \"^(height-i) * '*'^(2*(i-1)+1) * \" \"^(height-i) for i in 1:height], '\n')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200606,"user_id":null,"body":"function christmas_tree(height)\n    join([\" \"^(height-i) * \"*\"^(2i-1) * \" \"^(height-i) for i in 1:height], '\n')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200607,"user_id":null,"body":"function christmas_tree(height) \n  join(map(n -> ' '^(height - n) * '*'^(2*n - 1) * ' '^(height - n), 1:height), '\n')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200608,"user_id":2525,"body":"function christmas_tree(height) \n    join([\" \"^(height-i)*\"*\"^(2*i-1)*\" \"^(height-i) for i in 1:height], \"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200609,"user_id":null,"body":"function christmas_tree(ht) \n  join([\" \"^(ht-n) * \"*\"^(2*n - 1) * \" \"^(ht-n) for n in 1:ht], \"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200610,"user_id":421,"body":"christmas_tree(height) = join((\" \" ^ (height - i) * \"*\" ^ (i * 2 - 1) * \" \" ^ (height - i) for i in 1:height), \"\n\")","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"52774a314c2333f0a7000688":[{"id":200611,"user_id":null,"body":"function valid_parentheses(parens::String)::Bool\n  brackets = Set(['(', ')'])\n  parentheses = join([chr for chr \u2208 parens if chr \u2208 brackets])\n  open_brackets = 0\n  for brace in parentheses\n      open_brackets += (brace == '(') ? 1 : (brace == ')') ? - 1 : 0\n      if open_brackets < 0 \n          return false\n      end\n  end\n  return open_brackets == 0\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200612,"user_id":null,"body":"function valid_parentheses(parens::String)::Bool\n  opened = 0\n  for p in parens\n    if p == '('\n      opened += 1\n    elseif p == ')'\n      opened -= 1\n    end \n    if opened < 0\n      return false\n    end \n  end\n  return opened == 0\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200613,"user_id":null,"body":"function valid_parentheses(parens::String)::Bool\n  stack = []\n  for char in collect(parens)\n    char == ')' && length(stack) == 0 && return false\n    char == ')' && last(stack) != '(' && return false\n    char == ')' && last(stack) == '(' && pop!(stack)\n    char == '(' && push!(stack, char)\n  end\n  length(stack) == 0\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200614,"user_id":null,"body":"function valid_parentheses(parens::String)::Bool\n      parentheses = collect(parens)\n  isleft(c::Char) = c == '('\n  isright(c::Char) = c == ')'\n  ismatch(left::Char, right::Char) = left == '(' && right  == ')'\n\n  isempty(parentheses) && return true\n  \n  stack = Char[]\n  \n  for char in parentheses\n    if isleft(char)\n      push!(stack, char)\n    elseif isright(char)\n      isempty(stack) && return false\n      topParen = first(stack)\n\n      if ismatch(topParen, char)\n        pop!(stack)\n      else\n        return false\n      end\n    else\n      continue\n    end\n  end\n\n  return isempty(stack)\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200615,"user_id":null,"body":"function valid_parentheses(parens::String)::Bool\n  pair = 0\n  \n  for c \u2208 parens\n    if c == '('\n      pair += 1\n    elseif c == ')'\n      pair -= 1\n    else\n      nothing\n    end\n    \n    if pair<0 return false end\n  end\n\n  pair == 0 ? true : false\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200616,"user_id":null,"body":"function valid_parentheses(parens::String)::Bool\n    stack = []\n    for c in parens\n        if c == '('\n            append!(stack, c)\n        elseif c == ')'\n            if length(stack) == 0\n                return false\n            end\n            pop!(stack)\n        end\n    end\n    length(stack) == 0\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200617,"user_id":null,"body":"function valid_parentheses(parens::String)::Bool\n    num = 0\n    for c in parens\n        if (c == '(') num += 1 end\n        if (c == ')') num -= 1 end\n        num < 0 && return false\n    end\n    num == 0\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200618,"user_id":53,"body":"function valid_parentheses(parens::String)::Bool\n  m = 0\n  for x in parens\n    if x == '('\n      m += 1 \n    elseif x == ')'\n      m -= 1\n    end\n    if m < 0\n      return false\n    end\n  end\n  m == 0\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200619,"user_id":null,"body":"valid_parentheses(ps) = isempty(ps) || (local p = replace(replace(ps, r\"[^\\(\\)]\"=> \"\"), r\"\\(\\)\"=> \"\")) != ps && valid_parentheses(p)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200620,"user_id":null,"body":"function valid_parentheses(parens::String)::Bool\n\n    function arr_valid(arr)\n\n        i = findfirst(x->x==')',arr)\n        if i==nothing\n          return length(arr)==0 ? true : false\n        end\n\n        j = findprev(x->x=='(', arr, i)\n        if j==nothing\n          return false\n        end\n\n        deleteat!(arr, i)\n        deleteat!(arr, j)\n\n        return arr_valid(arr)\n    end\n  \n    arr = collect(replace(parens, r\"[^\\(\\)]\"=>\"\"))\n    return arr_valid(arr)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"527e4141bb2ea5ea4f00072f":[{"id":200621,"user_id":null,"body":"function computesum(n) \n    n < 10 && return n * (n + 1) \u00f7 2\n    d = Int(floor(log10(n)))\n    lead = n \u00f7 10^d\n    nines(x) = x == 0 ? 0 : nines(x-1) * 10 + 45 * 10^(x-1)\n    lead * nines(d) + (lead * (lead-1) \u00f7 2) * 10^d + lead * (1 + n % 10^d) + computesum(n % 10^d)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200622,"user_id":53,"body":"function computesum(n) \n  s = 0\n  i = 1\n  while i <= n\n    m = i\n    while m > 0\n      s += m % 10\n      m = m \u00f7 10\n    end\n    i += 1\n  end\n  s\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200623,"user_id":null,"body":"function computesum(n) \n  sum([sum(digits(q)) for q in 1:n])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200624,"user_id":50,"body":"function computesum(n) \n  o=0\n  while n != 0 \n    m=n\n    while m != 0\n      o+= m % 10\n      m=floor(m\/10)\n    end\n    n=n-1\n  end\n  return o\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200625,"user_id":881,"body":"computesum(n::Integer) = sum(d for i in one(n):n for d in digits(i))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200626,"user_id":2525,"body":"function computesum(n) \n    if n==1\n        1\n    else\n        sum(digits(n)) + computesum(n-1)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200627,"user_id":null,"body":"function computesum(n) \n  sum(sum.(digits.(1:n)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200628,"user_id":null,"body":"function computesum(n)\n  sum(y -> parse(Int,y), join(map(x -> \"$x\", 1:n)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200629,"user_id":527,"body":"computesum(n) = sum(sum \u2218 digits, 1 : n)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200630,"user_id":421,"body":"computesum(n) = sum(sum(parse(Int32, x) for x in string(i)) for i in 1:n)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"52945ce49bb38560fe0001d9":[{"id":200631,"user_id":53,"body":"function pascal(d::Int)::Array{Array{Int}}\n  ans = []\n  i = 1\n  while i <= d\n    r = []\n    push!(r, 1)\n    j = 1\n    while j + 1 < i\n      push!(r, ans[i-1][j] + ans[i-1][j+1])\n      j += 1\n    end\n    if i > 1\n      push!(r, 1)\n    end\n    push!(ans, r)\n    i += 1\n  end\n  ans\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200632,"user_id":null,"body":"pascal(n) = map(m-> binomial.(m, 0:m), 0:n-1)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200633,"user_id":50,"body":"function pascal(n::Int)::Array{Array{Int}}\n  L = [[1]]\n  while length(L) < n\n    a=[1]\n    for i in 1:length(L[length(L)])-1\n      push!(a, L[length(L)][i] + L[length(L)][i + 1])\n    end\n    push!(a,1)\n    push!(L,a)\n  end\n  return L\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200634,"user_id":881,"body":"function pascal(n::Int)::Array{Array{Int}}\n    result = [[1]]\n    for _ in 2:n\n        push!(result, [1, (result[end] + [result[end][2:end]..., 0])...])\n    end\n    result\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5299413901337c637e000004":[{"id":200635,"user_id":421,"body":"get_missing_element(seq) = 45 - sum(seq)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200636,"user_id":50,"body":"function get_missing_element(seq)\n  45-sum(seq)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200637,"user_id":null,"body":"function get_missing_element(seq)\n  sorted = sort(seq)\n  for p in 0:(length(sorted)-1)\n    if p != sorted[p+1]\n      return p\n    end\n  end\n  return 9\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"52b305bec65ea40fe90007a7":[{"id":200638,"user_id":null,"body":"function grabscrab(anagram, dict)\n  dict[[sort(split(anagram,\"\"))==d for d in sort!.(split.(dict,\"\"))]]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200639,"user_id":null,"body":"function grabscrab(anagram, dictionary)\n    word = sort(collect(anagram))\n    filter!(str -> sort(collect(str)) == word, dictionary)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200640,"user_id":null,"body":"function grabscrab(anagram, dictionary)\n    word = join(sort(collect(anagram)))\n    filter!(str -> join(sort(collect(str))) == word, dictionary)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200641,"user_id":null,"body":"function grabscrab(anagram, dictionary)\n  ok =[]\n    for i in dictionary\n        sum(codeunits(anagram))==sum(codeunits(i)) ? push!(ok, i) : skip\n    end\n    ok\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200642,"user_id":null,"body":"grabscrab(anagram, dictionary) = (f=(join\u2218sort\u2218collect);[s for s in dictionary if f(s)==f(anagram)])","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200643,"user_id":null,"body":"function grabscrab(anagram, dictionary)\n    [word for word in dictionary if sort!(collect(anagram)) == sort!(collect(word))]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200644,"user_id":null,"body":"function grabscrab(anagram, dictionary)\n  sortAn = sort(split(anagram, \"\"))\n  filter(w->sort(split(w, \"\"))==sortAn, dictionary)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200645,"user_id":2525,"body":"function grabscrab(anagram, dictionary)\n    [word for word in dictionary if sort(collect(word))==sort(collect(anagram))]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200646,"user_id":null,"body":"using DataStructures: counter\n\nfunction grabscrab(anagram, dictionary)\n  scrambledcounts = counter(anagram)\n  [word for word in dictionary if counter(word) == scrambledcounts]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200647,"user_id":null,"body":"function grabscrab(anagram, dictionary)\n  a = sort(collect(anagram))\n  samesorted(x) = (length(x) == length(a)) && (sort(collect(x)) == a)\n  filter(samesorted, dictionary)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"52e88b39ffb6ac53a400022e":[{"id":200648,"user_id":527,"body":"using Sockets\n\nint32_to_ip = string \u2218 IPv4","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200649,"user_id":759,"body":"function int32_to_ip(n::UInt32)::String\n  string(n >> 24, '.', (n >> 16) & 255, '.', (n >> 8) & 255, '.', n & 255)\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200650,"user_id":null,"body":"int32_to_ip(n::UInt32) = join([parse(Int, lpad(string(n, base=2), 32, \"0\")[8x+1:8x+8], base=2) for x in 0:3], \".\")","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200651,"user_id":2525,"body":"function int32_to_ip(n::UInt32)::String\n    \"$(n>>24).$(n>>16%2^8).$(n>>8%2^8).$(n%2^8)\"\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200652,"user_id":null,"body":"int32_to_ip(n::UInt32)::String = join([string((n>>(8*i))&0xFF) for i in 3:-1:0],'.')","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200653,"user_id":null,"body":"function int32_to_ip(n::UInt32)\n    join([parse(Int, bitstring(n)[i+1:i+8]; base=2) for i in 0:8:24], \".\")\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200654,"user_id":2525,"body":"function int32_to_ip(n::UInt32)::String\n    \"$(n\u00f7256^3).$(n\u00f7256^2%256).$(n\u00f7256%256).$(n%256)\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200655,"user_id":null,"body":"using Printf\n\nfunction int32_to_ip(n::UInt32)::String\n  @sprintf(\"%d.%d.%d.%d\", n >> 24 & 255, n >> 16 & 255, n >> 8 & 255, n & 255)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200656,"user_id":null,"body":"function int32_to_ip(n::UInt32)::String\n  v = [n&255, (n>>=8;n&255), (n>>=8;n&255), (n>>=8;n&255)][end:-1:begin]\n  join((string(e) for e in v), \".\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200657,"user_id":null,"body":"function int32_to_ip(n::UInt32)::String\n  res = []\n  for i in 1:4\n    current = n % 256\n    push!(res, current)\n    n -= current\n    n \u00f7= 256\n  end\n  join(map(string, reverse(res)), \".\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"52f3149496de55aded000410":[{"id":200658,"user_id":881,"body":"sum_digits(n) = sum(digits(abs(n)))","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200659,"user_id":null,"body":"sum_digits = sum \u2218 digits \u2218 abs","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200660,"user_id":null,"body":"function sum_digits(number)\n  d = 0    \n  for c in string(abs(number))\n      d += parse(Int, c)\n  end\n  d\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200661,"user_id":null,"body":"function sum_digits(number)\n    number  = abs(number)\n    # A\/B rest C\n    sum     = 0\n    while number > 0\n        sum     += number%10\n        number  \u00f7= 10\n    end\n    return  sum\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200662,"user_id":null,"body":"function sum_digits(n)\n    sum(parse.(Int, collect(string(abs(n)))))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200663,"user_id":null,"body":"function sum_digits(number)\n  sum(abs.(digits(number)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200664,"user_id":null,"body":"sum_digits = abs \u2218 sum \u2218 digits\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200665,"user_id":null,"body":"function sum_digits(number)\n  return sum(map(c -> Int(c)-Int('0'), collect(string(abs(number)))))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200666,"user_id":null,"body":"function sum_digits(number)\n  mapreduce(x -> parse(UInt, x), +, lstrip(string(number), '-'))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200667,"user_id":null,"body":"function sum_digits(n)\n  abs(sum(digits(n)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"52f5424d0531259cfc000d04":[{"id":200668,"user_id":null,"body":"function sort_by_bit(array::Vector{Int})::UInt32\n    sum(2 .^ array)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200669,"user_id":527,"body":"function sort_by_bit(xs::Vector{Int})::UInt32\n  convert(UInt32, mapreduce(x -> 1 << x, |, xs; init = 0))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200670,"user_id":null,"body":"sort_by_bit(array::Vector{Int})::UInt32 = sum((0 \u22bb 1) .<< array)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200671,"user_id":2525,"body":"function sort_by_bit(array::Vector{Int})::UInt32\n    sum([2^i for i in array])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200672,"user_id":1474,"body":"function sort_by_bit(array::Vector{Int})::UInt32\n  array == [] ? 0 : sum(2 ^ i for i in array)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200673,"user_id":null,"body":"function sort_by_bit(array::Vector{Int})::UInt32\n  v = 0\n  for n in array\n    v += 2 ^ n\n  end\n  return v\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200674,"user_id":53,"body":"function sort_by_bit(array::Vector{Int})::UInt32\n    isempty(array) ? 0 : mapreduce(e -> 1 << e, |, array)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200675,"user_id":null,"body":"function sort_by_bit(array::Vector{Int})::UInt32\n  sum(map(x -> 2^x, array))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200676,"user_id":null,"body":"function sort_by_bit(array::Vector{Int})::UInt32\n    isempty(array) ? 0 : sum(x -> 2^x, array)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200677,"user_id":881,"body":"function sort_by_bit(array::Vector{Int})::UInt32\n    isempty(array) ? 0 : mapreduce(x -> 1 << x, |, array)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"52fba66badcd10859f00097e":[{"id":200678,"user_id":527,"body":"function disemvowel(str)\n  replace(str, r\"[aeiou]\"i => \"\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200679,"user_id":null,"body":"function disemvowel(str)\n  filter(char -> char \u2209 \"aeiouAEIOU\", str)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200680,"user_id":null,"body":"using Unicode\n\nfunction disemvowel(str)\n  replace(str, r\"[aeiou]\"i => \"\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200681,"user_id":null,"body":"function disemvowel(str)\n  str=replace(str,\"a\"=>\"\");str=replace(str,\"A\"=>\"\")\n  str=replace(str,\"e\"=>\"\");str=replace(str,\"E\"=>\"\")\n  str=replace(str,\"i\"=>\"\");str=replace(str,\"I\"=>\"\")\n  str=replace(str,\"o\"=>\"\");str=replace(str,\"O\"=>\"\")\n  str=replace(str,\"u\"=>\"\");str=replace(str,\"U\"=>\"\")\n  return str\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200682,"user_id":null,"body":"function disemvowel(str)\n  return join(filter(c->lowercase(c) \u2209 [\"a\", \"e\", \"i\", \"o\", \"u\"], split(str, \"\")), \"\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200683,"user_id":null,"body":"# Trolls are attacking your comment section! A common way to deal with this\n# situation is to remove all of the vowels from the trolls' comments,\n# neutralizing the threat. Your task is to write a function that takes a string\n# and return a new string with all vowels removed. For example, the string\n# \"This website is for losers LOL!\" would become \"Ths wbst s fr lsrs LL!\".\n# Note: for this kata y isn't considered a vowel.\n\nfunction disemvowel(str)\n\n  vowels = ['a','e','i','o','u','A','E','I','O','U']\n  res_str = \"\"\n  for s in str\n    if (length( findall( x -> x == s, vowels )) != 0)\n      continue\n    end\n    res_str = res_str * string(s)\n  end\n  return res_str\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200684,"user_id":null,"body":"function disemvowel(str)\n  return join([x for x in str if !(x in ['a','e','i','o','u','A','E','I','O','U'])])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200685,"user_id":null,"body":"function disemvowel(str)\n  x = replace(str, r\"[aeiouAEIOU]\" => \"\")\n  return x\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200686,"user_id":null,"body":"function disemvowel(str)\n  wovels = ['a', 'e', 'i', 'o', 'u']\n  news = []\n  for element in str\n    if !(lowercase(element) in wovels)\n      push!(news, element)\n    end \n  end\n  return join(news, \"\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200687,"user_id":null,"body":"function disemvowel(str)\n  vowels = Set(['a', 'e', 'i', 'o', 'u'])\n  return String(filter(x -> lowercase(x) \u2209 vowels, broadcast(x -> x[1], split(str, \"\"))))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5301329926d12b90cc000908":[{"id":200688,"user_id":209,"body":"function cumulative_triangle(n)\n  n*(n^2 + 1) \u00f7 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200689,"user_id":759,"body":"cumulative_triangle(n)=(n^2+1)n\u00f72","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200690,"user_id":527,"body":"function cumulative_triangle(n)\n  n * (n^2 + 1) \/ 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200691,"user_id":null,"body":"function cumulative_triangle(n)\n  n0 = sum(collect(1:n-1)) + 1\n  n1 = sum(collect(1:n))\n  return(sum(collect(n0:n1)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200692,"user_id":null,"body":"cumulative_triangle(n) = (n^3+n)>>1","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200693,"user_id":null,"body":"cumulative_triangle(n) = sum((sum(1:n-1)+1):(sum(1:n-1)+n))\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200694,"user_id":null,"body":"\ntriangleNum(n) = fld(n*(n+1), 2)\n\nfunction cumulative_triangle(n)\n  N = triangleNum(n)\n  triangleNum(N) - triangleNum(N-n)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200695,"user_id":null,"body":"function cumulative_triangle(n)\n  l = 1 + n * (n-1) \u00f7 2\n  sum(l:l+n-1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200696,"user_id":50,"body":"function f(n)\n  n*(n+1)\/\/2\nend\nfunction cumulative_triangle(n)\n  f(f(n-1)+n)-f(f(n-1))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200697,"user_id":null,"body":"function cumulative_triangle(n)\n  # just the sum of 1..nth triangular number\n  # minus the sum of 1..nth-1 triangular number\n  t = div(n * n + n, 2)\n  s = div(n * n - n, 2)\n  div(t * t + t - s * s - s, 2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"53369039d7ab3ac506000467":[{"id":200698,"user_id":null,"body":"module BoolWord\n    export bool_to_word \n    bool_to_word(boolean :: Bool) = boolean ? \"Yes\" : \"No\"\nend ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200699,"user_id":null,"body":"module BoolWord\n    export bool_to_word \n    function bool_to_word(boolean::Bool)::String\n      if boolean\n        return \"Yes\"\n      end\n      \"No\"\n    end\nend ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200700,"user_id":713,"body":"module BoolWord\n    export bool_to_word \n    function bool_to_word(b::Bool)::String\n      return b ? \"Yes\" : \"No\";\n    end\nend ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200701,"user_id":null,"body":"module BoolWord\n    export bool_to_word \n    function bool_to_word(boolean::Bool)::String\n      # your code here\n       if boolean == true\n        return \"Yes\"\n      elseif boolean == false\n        return \"No\"\n    end\n    end\nend ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200702,"user_id":null,"body":"module BoolWord\n    export bool_to_word \n    function bool_to_word(boolean::Bool)::String\n      if boolean == true\n        return \"Yes\"\n      else \n        return \"No\"\n      end# your code here\n    end\nend ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200703,"user_id":null,"body":"module BoolWord\n    export bool_to_word \n    function bool_to_word(boolean::Bool)::String\n        if boolean\n             return \"Yes\"\n\n        else\n            return \"No\"\n\n        end\n    end\nend ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200704,"user_id":null,"body":"module BoolWord\n    export bool_to_word \n    function bool_to_word(boolean::Bool)::String\n      # your code here\n      d=Dict(true=>\"Yes\", false=>\"No\")\n      return d[boolean]\n    end\nend ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200705,"user_id":null,"body":"module BoolWord\n    export bool_to_word \n    function bool_to_word(boolean::Bool)::String\n      # your code here\n      return boolean ? \"Yes\" : \"No\"\n    end\nend ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200706,"user_id":null,"body":"module BoolWord\n    export bool_to_word \n    function bool_to_word(boolean::Bool)::String\n  \n  if (boolean == true)\n    return \"Yes\"\n  end\n    return \"No\"\n    end\nend ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200707,"user_id":null,"body":"module BoolWord\n    export bool_to_word \n    function bool_to_word(boolean::Bool)::String\n      if boolean == true\n        \"Yes\"\n      elseif boolean == false\n        \"No\"\n      else\n        \"Nothing\"\n      end\n    end\nend ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"534d0a229345375d520006a0":[{"id":200708,"user_id":null,"body":"power_of_two(n) = ispow2(n)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200709,"user_id":null,"body":"power_of_two=ispow2","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200710,"user_id":572,"body":"function power_of_two(n)\n  n > 0 ? (n & (n-1)) == 0 : false\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200711,"user_id":null,"body":"function power_of_two(n)\n  while n >= 1\n    if n == 1 return true end\n    if !isinteger(n) return false end\n    n \/= 2\n  end\n  return false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200712,"user_id":null,"body":"function power_of_two(n)\n  log2(n)%1==0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200713,"user_id":null,"body":"power_of_two(n) = n > 0 && n & (n-1) == 0","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200714,"user_id":null,"body":"power_of_two(n) = log2(n) |> isinteger\n  ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200715,"user_id":null,"body":"function power_of_two(n)\n    while n > 1\n        n, r = divrem(n, 2)\n        if r == 1\n            return false\n        end\n    end\n    return n == 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200716,"user_id":null,"body":"function power_of_two(n)\n  if n == 0\n    return false\n  elseif n == 1\n    return true\n  else\n    return sum(digits(n,base=2)) == 1\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200717,"user_id":53,"body":"function power_of_two(n)\n  n > 0 && n % 2 == 0 ? power_of_two(n \u00f7 2) : n == 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"534ea96ebb17181947000ada":[{"id":200718,"user_id":null,"body":"function break_chocolate(n, m)\n  return n*m>0 ? n*m-1 : 0\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200719,"user_id":null,"body":"function break_chocolate(n, m)\n  return n * m < 1 ? 0 : n * m - 1\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200720,"user_id":null,"body":"function break_chocolate(n, m)\n  n == 0 || m == 0 ? 0 : n * m - 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200721,"user_id":null,"body":"function break_chocolate(n, m)\n  max(0, n*m - 1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200722,"user_id":null,"body":"relu(x) = max(0, x)\nbreak_chocolate(n, m) = relu(n * m - 1)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200723,"user_id":null,"body":"function break_chocolate(n, m)\n  return  n * m > 1 ? n * m - 1 : 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200724,"user_id":null,"body":"function break_chocolate(n, m)\n  n, m = min(n, m), max(n, m);\n  return max(0, m-1 + m * (n-1))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200725,"user_id":null,"body":"break_chocolate(n, m) = n*m>0 ? n*m-1 : 0","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200726,"user_id":null,"body":"function break_chocolate(n, m)\n  if n > 0 && m > 0\n    return m*n-1\n  else\n    return 0\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200727,"user_id":null,"body":"break_chocolate(n, m) = max(n * m - 1, 0)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"534eb5ad704a49dcfa000ba6":[{"id":200728,"user_id":53,"body":"function hanoi(disks) \n  2 ^ disks - 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200729,"user_id":null,"body":"hanoi(disks) = (1<<disks)-1","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200730,"user_id":2525,"body":"function hanoi(disks) \n    if disks==1\n        1\n    else\n        2*hanoi(disks-1) + 1\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200731,"user_id":50,"body":"function hanoi(n) \n  (1<<n)-1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200732,"user_id":null,"body":"function hanoi(disks) \n  return 2^disks - 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200733,"user_id":209,"body":"function hanoi(x) \n  2^x-1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200734,"user_id":421,"body":"hanoi(disks)= 2^disks - 1","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"536c6b8749aa8b3c2600029a":[{"id":200735,"user_id":759,"body":"function sort_string(str, ordering)\n  missing = []\n  existing = []\n  for x in str\n    push!(x in ordering ? existing : missing, x)\n  end\n  sort!(existing, by=(a) -> findfirst(isequal(a), ordering))\n  string(existing..., missing...)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200736,"user_id":null,"body":"function sort_string(str, ord)\n    join(ch^count(string(ch), str) for ch in unique(ord))*join(m.match for m in eachmatch(Regex(\"[^$(ord)]\"), str))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200737,"user_id":2525,"body":"function sort_string(str, ordering)\n    join(sort(collect(str), by=c->if c in ordering; findfirst(c, ordering) else 999 end))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200738,"user_id":null,"body":"sort_string(str, ordering) = \n  Dict((x, i) for (i, x) in enumerate(unique(ordering))) |> dict -> sort(collect(str), lt=((x, y) -> (l = max(length(str), length(ordering)) + 1; get(dict, x, l) < get(dict, y, l)))) |> join","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200739,"user_id":null,"body":"function sort_string(str, ordering)\n  dict = Dict(map(((i, c),) -> string(c) => i, enumerate(unique(ordering))))\n  join(sort(split(str, \"\"), lt = (a, b) -> haskey(dict, a) ? (return haskey(dict, b) ? dict[a] < dict[b] : true) : false))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200740,"user_id":null,"body":"function sort_string(s, ord)\n  locs=vcat([collect(eachmatch(Regex(\"$(a){1}\"),s)) for a in unique(ord)]...)\n  locsOrig=collect(eachmatch(Regex(\"[^\"*join(unique(ord),\"\")*\"]\"),s))\n  return join([l.match for l in union(locs,locsOrig)])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200741,"user_id":null,"body":"function sort_string(str, ordering)\n    join(sort(Vector{Char}(str), by=x->findfirst(y->y==x, ordering)==nothing ? length(ordering)+1 : findfirst(y->y==x, ordering)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200742,"user_id":null,"body":"function sort_string(str, ordering)\n  indices = Dict(c => i for (i,c) in enumerate(unique(ordering)))\n  join(sort(collect(str), by=x->(x in keys(indices) ? indices[x] : 1+length(ordering))))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200743,"user_id":null,"body":"function sort_string(str, ordering)\n    order = Dict( map( reverse, enumerate(unique(ordering)) ) )\n    N = length(order)+1\n    specialorder = c -> haskey(order,c) ? order[c] : N\n    join( sort([c for c in str], by=specialorder ) )\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200744,"user_id":527,"body":"function sort_string(str, ordering)\n  by(c) = something(findfirst(isequal(c), ordering), length(ordering) + 1)\n  join(sort(collect(str), alg = Base.Sort.DEFAULT_STABLE, by = by))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5390bac347d09b7da40006f6":[{"id":200745,"user_id":null,"body":"to_jaden_case(sentence::String) = titlecase(sentence, wordsep=isspace)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200746,"user_id":null,"body":"function to_jaden_case(str)\n  join(map(uppercasefirst, split(str, ' ')), ' ')\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200747,"user_id":null,"body":"function to_jaden_case(phrase)\n  return titlecase(phrase,wordsep = c->c==' ')\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200748,"user_id":null,"body":"function to_jaden_case(str)\n  titlecase(str, wordsep = c->c==' ')\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200749,"user_id":null,"body":"function to_jaden_case(str)\n  return join([uppercasefirst(x) for x in split(str)], \" \")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200750,"user_id":null,"body":"function to_jaden_case(str)\n  join(split(str) .|> uppercasefirst, ' ')\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200751,"user_id":null,"body":"function to_jaden_case(str)\n  res = uppercase(str[1])\n  for i \u2208 2:length(str)\n    if str[i-1] == ' '\n      res *= uppercase(str[i])\n    else\n      res *= str[i]\n    end\n  end\n  return res\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200752,"user_id":null,"body":"function to_jaden_case(str)\n  split(str) .|>\n  uppercasefirst |>\n  words -> join(words, ' ')\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200753,"user_id":null,"body":"function to_jaden_case(str)\n  capitalizing(w) = uppercase(w[1]) * w[2:end]\n  join(capitalizing.(split(str)), \" \")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200754,"user_id":null,"body":"function to_jaden_case(str)\n  split(str) .|>\n  uppercasefirst |>\n  s -> join(s, \" \")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"53a1eac7e0afd3ad3300008b":[{"id":200755,"user_id":null,"body":"F(n) = (n == 0) ? 1 : n - M(F(n - 1))\nM(n) = (n == 0) ? 0 : n - F(M(n - 1))\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200756,"user_id":null,"body":"f_memo = Dict(0=>1)\nm_memo = Dict(0=>0)\n\nfunction F(n)\n  if !haskey(f_memo, n)\n    f_memo[n] = n - M(F(n-1))\n  end\n  f_memo[n]\nend\n\nfunction M(n)\n  if !haskey(m_memo, n)\n    m_memo[n] = n - F(M(n-1))\n  end\n  m_memo[n]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200757,"user_id":null,"body":"F(n) = n == 0 ? 1 : n - (n-1 |> F |> M)\nM(n) = n == 0 ? 0 : n - (n-1 |> M |> F)\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200758,"user_id":null,"body":"function F(n)\n  return n != 0 ? n - M(F(n-1)) : 1\nend\nfunction M(n)\n  return n != 0 ? n - F(M(n-1)) : 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200759,"user_id":null,"body":"\"\"\"\nTwo functions F() and M() such that the following equations are true:\n\nF(0) = 1\nM(0) = 0\nF(n) = n - M(F(n - 1))\nM(n) = n - F(M(n - 1)).\n\"\"\"\nfunction F(n)\n\n    if n == 0\n        return 1\n    end\n\n    return n - M(F(n-1))\n\nend\n\nfunction M(n)\n\n    if n == 0\n        return 0\n    end\n\n    return n - F(M(n-1))\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200760,"user_id":null,"body":"function F(n)\n  if n == 0\n    return 1\n  end\n  return n - M(F(n-1))\nend\nfunction M(n)\n  if n == 0\n    return 0\n  end\n  return n - F(M(n-1))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200761,"user_id":null,"body":"function F(n)\n  n < 1 ? one(n) : n - M(F(n - 1))\nend\nfunction M(n)\n  n < 1 ? zero(n) : n - F(M(n - 1))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200762,"user_id":544,"body":"function F(n)\n  if iszero(n)\n    1\n  else\n    n - M(F(n - 1))\n  end\nend\n\nfunction M(n)\n  if iszero(n)\n    0\n  else\n    n - F(M(n - 1))\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200763,"user_id":null,"body":"function F(n)\n  iszero(n) && return 1\n  n - M(F(n-1))\nend\nfunction M(n)\n  iszero(n) && return 0\n  n - F(M(n-1))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200764,"user_id":50,"body":"function F(n)\n  n != 0 ? n - M(F(n-1)) : 1\nend\nfunction M(n)\n  n != 0 ? n - F(M(n-1)) : 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"53af2b8861023f1d88000832":[{"id":200765,"user_id":null,"body":"function are_you_playing_banjo(name)\n  lowercase(name[1]) == 'r' ? name * \" plays banjo\" : name * \" does not play banjo\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200766,"user_id":421,"body":"are_you_playing_banjo(name) = \"$name $(name[1] in \"rR\" ? \"plays\" : \"does not play\") banjo\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200767,"user_id":null,"body":"function are_you_playing_banjo(name)\n  if startswith(uppercase(name), 'R')\n    return name * \" plays banjo\"\n  else\n    return name * \" does not play banjo\"\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200768,"user_id":null,"body":"function are_you_playing_banjo(name)\n  \"$name $(lowercase(name[1]) == 'r' ? \"plays\" : \"does not play\") banjo\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200769,"user_id":null,"body":"function are_you_playing_banjo(name)\n  if name[1] == 'R' || name[1] == 'r'\n    return name * \" plays banjo\"\n  else\n    return name * \" does not play banjo\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200770,"user_id":null,"body":"function are_you_playing_banjo(name)\n  c = name[1]\n  if c == 'R' || c == 'r'\n    return \"$name plays banjo\"\n  else\n    return \"$name does not play banjo\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200771,"user_id":null,"body":"function are_you_playing_banjo(name)\n  return lowercase(name[1]) == 'r' ? name *\" plays banjo\" : name *\" does not play banjo\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200772,"user_id":null,"body":"function are_you_playing_banjo(name)\n    if 'R' == first(name)\n      return name * \" plays banjo\"\n    elseif 'r' == first(name)\n        return name * \" plays banjo\"\n    else \n      return name * \" does not play banjo\"\n    end \n  end\n\n#  could also use occursin but that has the issue of allowing BRavo to play banjo when he should not lolz","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200773,"user_id":null,"body":"function are_you_playing_banjo(name)\n \n  name[begin] in ['r', 'R'] ? string(name, \" plays banjo\") : string(name, \" does not play banjo\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200774,"user_id":null,"body":"function are_you_playing_banjo(name)\n  return name[begin] in ['R', 'r'] ? \"$name plays banjo\" : \"$name does not play banjo\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"53c9157c689f841d16000c03":[{"id":200775,"user_id":null,"body":"function totient(n::Integer)\n  result = n\n\n  i = 2\n  while i * i <= n\n    if n % i == 0\n      result = result \/ i * (i - 1)\n\n      while n % i == 0\n        n \/= i\n      end\n    end   \n    i += 1\n  end\n\n  if n > 1\n    result = result \/ n * (n - 1)\n  end\n\n  return result\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200776,"user_id":null,"body":"function totient(m::Integer, facts, i=2)\n  iszero(m % i) && return totient(m\u00f7i, facts, i)\n  for j in i+1+i%2:2:isqrt(m)\n    iszero(m % j) && return totient(m\u00f7j, (1-1\/j)facts, j) end\n  facts * (1-1\/m)^!isone(m) \u00f7 1\nend\n\ntotient(n::Integer) = totient(n, n \u00f7 2^iseven(n))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200777,"user_id":53,"body":"function totient(n::Integer)\n    r, p = n, 2\n    while p * p <= n\n        if n % p == 0\n            while n % p == 0\n                n \/\/= p\n            end\n            r *= (1 - (1 \/ p))\n        end\n        p += 1\n    end\n    if n > 1\n        r *= (1 - (1 \/ n))\n    end\n    return floor(r)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200778,"user_id":50,"body":"function totient(n::Integer)\n  res = n\n  p = 2\n  while p * p <= n\n    if n % p == 0\n      res -= res \/ p\n      while n % p == 0\n        n \/= p\n      end\n    end\n    p += 1\n  end\n  if n == 1\n    return res\n  else\n    return res - res \/ n\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"53da3dbb4a5168369a0000fe":[{"id":200779,"user_id":null,"body":"module Solution\n  export even_or_odd\n  even_or_odd(x) = iseven(x) ? \"Even\" : \"Odd\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200780,"user_id":null,"body":"module Solution\n  export even_or_odd\n  function even_or_odd(number)\n    isodd(number) ? \"Odd\" : \"Even\"\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200781,"user_id":759,"body":"module Solution\n  export even_or_odd\n  function even_or_odd(number)\n    (\"Even\", \"Odd\")[number % 2 + 1]\n  end\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200782,"user_id":null,"body":"module Solution\n  export even_or_odd\n  function even_or_odd(number)\n    if rem(number,2) == 0\n      \"Even\"\n    else\n      \"Odd\"\n    end\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200783,"user_id":null,"body":"module Solution\n  export even_or_odd\n  even_or_odd(number) = iseven(number) ? \"Even\" : \"Odd\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200784,"user_id":null,"body":"module Solution\n  export even_or_odd\n  \n  even_or_odd(n) = n % 2 == 0 ? \"Even\" : \"Odd\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200785,"user_id":null,"body":"module Solution\n  export even_or_odd\n  function even_or_odd(number)\n    number%2==0?\"Even\":\"Odd\"\n  end\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200786,"user_id":null,"body":"module Solution\n  export even_or_odd\n  function even_or_odd(number)\n    if number\/2 == trunc(number\/2)\n      return \"Even\"\n    else\n      return \"Odd\"\n    end\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200787,"user_id":null,"body":"module Solution\n  export even_or_odd\n  function even_or_odd(number)\n    rem(number, 2) == 0 ? \"Even\" : \"Odd\"\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200788,"user_id":null,"body":"module Solution\n  export even_or_odd\n  function even_or_odd(number)\n    abs(number) % 2 == 1 ? \"Odd\" : \"Even\"\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"53dc23c68a0c93699800041d":[{"id":200789,"user_id":527,"body":"function smash(words)\n  join(words, ' ')\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200790,"user_id":881,"body":"smash(words) = join(words, \" \")","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200791,"user_id":null,"body":"function smash(words)\n  return join(words, \" \")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200792,"user_id":null,"body":"function smash(words)\n  # smash the words together!\n  join(words,\" \")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200793,"user_id":null,"body":"function smash(words)\n    sentence = \"\"\n    for i in 1:length(words)\n        if i == length(words)\n        sentence = sentence * words[i]\n        else\n        sentence = sentence * words[i] * \" \"\n        end\n    end\n    return sentence\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200794,"user_id":null,"body":"function smash(words)\n  if words == []\n    return \"\"\n  end\n  #join(words, \" \")\n  replace(string(words), r\"[\\[,\\\"\\]]\" => \"\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200795,"user_id":759,"body":"smash(w)=join(w,' ')","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200796,"user_id":null,"body":"function smash(words)\nstr=string();\nfor i in 1:1:size(words)[1]\n    if i==1\n    str=words[i]\n    else\n    str=str*\" \"*words[i]\n    end\nend\nreturn str\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200797,"user_id":null,"body":"function smash(words)\n  if length(words) === 0\n        \"\"\n  else\n      sent = words[1]\n      for i in 2:length(words)\n        sent = string(sent,\" \",words[i])\n      end\n      sent\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200798,"user_id":null,"body":"function smash(words)\n  # smash the words together!\n  s = \"\"\n  for word in words\n    s = string(s, \" \", word)\n  end\n  return s[2:end]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"53dc54212259ed3d4f00071c":[{"id":200799,"user_id":527,"body":"sum_array = sum","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200800,"user_id":null,"body":"sum_array(arr) = sum(arr)","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200801,"user_id":null,"body":"function sum_array(arr)\n  return reduce(+, arr)\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200802,"user_id":null,"body":"function sum_array(arr)\n  if (isempty(arr)) 0 else sum(arr) end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200803,"user_id":527,"body":"function sum_array(arr)\n  sum(arr)\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200804,"user_id":53,"body":"function sum_array(ls)\n  sum(ls)\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200805,"user_id":null,"body":"function sum_array(arr)\n  sum = 0.0    \n  for i in 1:length(arr)\n    sum += arr[i]\n  end\n  return sum\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200806,"user_id":null,"body":"function sum_array(arr)\n  if length(arr) == 0\n    return 0\n  end\n    return sum(arr)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200807,"user_id":null,"body":"function sum_array(arr)\n    total = 0\n    for val in arr\n        total += val \n    end \n    return total\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200808,"user_id":null,"body":"function sum_array(arr)\n  # your code here\n  return sum(arr)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"53ea07c9247bc3fcaa00084d":[{"id":200809,"user_id":null,"body":"function lookandsay(data, len)\n  result = []\n  for _ = 1:len\n    data = replace(data, r\"(.)\\1*\" => m -> string(length(m))*m[1])\n    push!(result, data)\n  end\n  result\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200810,"user_id":null,"body":"function count_string(string)\n  seq = []\n  k, n = string[1], 0\n  for c \u2208 string\n    c == k && (n += 1)\n    if c != k\n      push!(seq, \"$n$k\")\n      k = c\n      n = 1\n    end\n  end\n  push!(seq, \"$n$k\")\n\n  seq |> join\nend\n\n\n\"\"\"\n# Arguments\n- `data::String`: starting number set\n- `len::Int`: sequence length\n\"\"\"\nfunction lookandsay(data, len)\n  output = []\n\n  for i \u2208 1:len\n    data = count_string(data)\n    push!(output, data)\n  end\n\n  output\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200811,"user_id":480,"body":"function lookandsay(data, len)\n  r=[]\n  s=data\n  while length(r )< len\n    t=\"\"\n    m=0\n    x=' '\n    for c in s\n      if m==0\n        x=c\n        m=1\n      elseif c==x\n        m+=1\n      else\n        t*=string(m)*string(x)\n        x=c\n        m=1\n      end\n    end\n    if m>0\n      t*=string(m)*string(x)\n    end\n    push!(r,t)\n    s=t\n  end\n  r\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200812,"user_id":null,"body":"function lookandsay(data, len)\n    len == 0 && return []\n    data = join(\"$(length(m.match))\" * first(m.match) for m \u2208 eachmatch(r\"(\\d)\\1*\", data))\n    [data; lookandsay(data, len-1)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200813,"user_id":527,"body":"using Lazy\n\nfunction lookandsay(data::String, len::Integer)::Vector{String}\n  @>> data iterated(s -> @>> s seq partitionby(identity) map(cs -> \"$(length(cs))$(first(cs))\") join) tail take(len) collect\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200814,"user_id":527,"body":"using Base.Iterators\nusing IterTools\n\nfunction lookandsay(data::String, len::Integer)::Vector{String}\n  collect(take(firstrest(iterated(s -> join(\"$(length(cs))$(first(cs))\" for cs in groupby(identity, s)), data))[2], len))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200815,"user_id":881,"body":"function lookandsay(data, len)\n  result = []\n  while len > 0\n    str = \"\"\n    for m in eachmatch(r\"(\\d)\\1*\", data)\n      str *= string(length(m.match))\n      str *= m[1]\n    end\n    push!(result, str)\n    data = str\n    len -= 1\n  end\n  result\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"53ee5429ba190077850011d4":[{"id":200816,"user_id":null,"body":"function double_integer(i)\n  2i\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200817,"user_id":null,"body":"function double_integer(i)\n  return 2*i\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200818,"user_id":null,"body":"function double_integer(i)\n  return i * 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200819,"user_id":null,"body":"function double_integer(i)\n  i * 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200820,"user_id":53,"body":"function double_integer(i)\n  2 * i\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200821,"user_id":527,"body":"double_integer = \u067c -> \u067c <<= 1","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200822,"user_id":null,"body":"double_integer(i) = i << 1\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200823,"user_id":null,"body":"function double_integer(i)\n  return i << 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200824,"user_id":null,"body":"function double_integer(i)\n  i + i\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200825,"user_id":null,"body":"double_integer(n) = 2n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5417423f9e2e6c2f040002ae":[{"id":200826,"user_id":527,"body":"digitize = reverse \u2218 digits","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200827,"user_id":1474,"body":"function digitize(n)\n  [parse(Int, c) for c in string(n)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200828,"user_id":53,"body":"function digitize(n)\n  [parse(Int, e) for e in string(n)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200829,"user_id":168,"body":"function digitize(n)\n  reverse(digits(n))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200830,"user_id":null,"body":"digitize(n) = n |> digits |> reverse","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200831,"user_id":null,"body":"function digitize(n)\n    [parse(Int32, char) for char in string(n)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200832,"user_id":null,"body":"function digitize(n)\n  n |> digits |> reverse\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200833,"user_id":209,"body":"digitize(n) = reverse(digits(n))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200834,"user_id":421,"body":"digitize(n) = [parse(Int, x) for x in string(n)]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"541c8630095125aba6000c00":[{"id":200835,"user_id":null,"body":"function digital_root(n)\n  while n >= 10\n    n = sum(digits(n))\n  end\n  n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200836,"user_id":572,"body":"digital_root(n) = sum(digits(n)) < 10 ? sum(digits(n)) : digital_root(sum(digits(n)))","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200837,"user_id":492,"body":"function digital_root(n)\n  (n-1) % 9 +1;\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200838,"user_id":null,"body":"function digital_root(n)\n  n == 0 ? 0 : (n%9 == 0 ? 9 : n%9)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200839,"user_id":null,"body":"function digital_root(n)\n  while(n>9)\n    n=sum([parse(Int,i) for i in string(n)])\n  end\n  n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200840,"user_id":527,"body":"digital_root(n) = (n - 1) % 9 + 1","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200841,"user_id":null,"body":"function digital_root(n)\n  while length(\"$n\") > 1\n    n = sum(parse(Int, char) for char in \"$n\")\n  end\n  \n  return n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200842,"user_id":null,"body":"function digital_root(n)\n    d = digits(n)\n    if length(d) == 1\n        return n\n    end\n    digital_root(sum(d))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200843,"user_id":null,"body":"function digital_root(n)\n  \n\n  while n >= 10\n    n = digits(n) |> sum\n  end\n\n  n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200844,"user_id":null,"body":"function digital_root(n)\n\ts=string(n)\n\tx=0\n\twhile length(s) > 1\n\t\tx=0\n\t\tfor i in s\n\t\t\tx+=parse(Int16, i)\n\t\t\tprintln(x)\n\t\tend\n\t\ts=string(x)\n\tend\n\treturn x\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"542c0f198e077084c0000c2e":[{"id":200845,"user_id":421,"body":"divisors(n) = count(x -> n % x == 0, 1:n)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200846,"user_id":null,"body":"function divisors(n)\n  n in [1, 2] ? n : sum(n%i == 0 ? 1 : 0 for i in 1:div(n,2)) + 1\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200847,"user_id":null,"body":"function divisors(n)\n  # your code here\n  cont = 0;\n  for i = 1:n\n    if n%i == 0 cont+=1 end  \n  end\n  return cont\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200848,"user_id":null,"body":"function divisors(n)\n  sum((n .% (1:n)) .== 0)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200849,"user_id":null,"body":"function divisors(n)\n  n==1 ? 1 : ([n%i==0 for i in 1:(Int(floor(n\/2)))] |> sum)+1 \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200850,"user_id":1474,"body":"function divisors(n)\n  length([i for i in 1:n if n % i == 0])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200851,"user_id":null,"body":"function divisors(n :: Int)\n  divisors = [1]\n  \n  for z in 2:(n \u00f7 2)\n    if iszero(n % z)\n      push!(divisors, z)\n    end\n  end\n  \n  if !isone(n)\n    push!(divisors, n)\n  end\n\n  length(divisors)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200852,"user_id":null,"body":"function divisors(n)\n  count = 0\n  for i in 1:n\n    if(n % i == 0)\n      count += 1\n    end\n  end\n  return count\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200853,"user_id":null,"body":"function divisors(n)\n  # your code here\n  amt = 0\n  for i in 1:n\n    if (n%i == 0)\n      amt += 1\n    end\n  end\n  \n  return amt\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200854,"user_id":null,"body":"function divisors(n)\n  filter(x->n%x==0 , 1:n)  |> length\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"542f0c36d002f8cd8a0005e5":[{"id":200855,"user_id":53,"body":"function last_chair(n::Int)::Int\n  n - 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200856,"user_id":527,"body":"last_chair = \u062a->~-\u062a","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200857,"user_id":null,"body":"last_chair(n::Int)::Int = n - 1","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200858,"user_id":527,"body":"last_chair(n) = n - 1","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200859,"user_id":53,"body":"function last_chair(n::Int)::Int\n  n - 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"544675c6f971f7399a000e79":[{"id":200860,"user_id":527,"body":"function string_to_number(str)\n  parse(Int, str)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200861,"user_id":null,"body":"function string_to_number(str)\n  Meta.parse(str)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200862,"user_id":null,"body":"string_to_number(str) = parse(Int64, str)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200863,"user_id":null,"body":"function string_to_number(str)\n  # put your code here\n  parse(Int, str)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200864,"user_id":null,"body":"string_to_number(str) = parse(Int32, str)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200865,"user_id":null,"body":"function string_to_number(string)\n\ttry\n\t  parse(Int64, string)\n\tcatch\n\t  string\n\tend\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200866,"user_id":null,"body":"\"\"\"\nConverts a string input into an number.\n\"\"\"\nfunction string_to_number(str)\n    return parse(Int64, str)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200867,"user_id":50,"body":"function string_to_number(str)\n  return parse(Int32,str)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200868,"user_id":null,"body":"function string_to_number(str)\n  # put your code here\n  (str[1] == '-') ? - digits_to_number(str[2:end]) : digits_to_number(str)\nend\n\nchar_to_int(c) = Int(c) - Int('0')\ndigits_to_number(str) = foldl((acc, c) -> 10acc + char_to_int(c), str; init = 0)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200869,"user_id":null,"body":"function string_to_number(s)\n  return parse(Int, s)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"54557d61126a00423b000a45":[{"id":200870,"user_id":527,"body":"function shorter_reverse_longer(a::String, b::String) ::String\n  s, l = length(a) < length(b) ? (a, b) : (b, a)\n  join((s, reverse(l), s))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200871,"user_id":421,"body":"shorter_reverse_longer(a,b) = length(b) > length(a) ? \"$a$(reverse(b))$a\" : \"$b$(reverse(a))$b\" ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200872,"user_id":759,"body":"function shorter_reverse_longer(a,b) \n  length(a) < length(b) && ((a, b) = (b, a))\n  string(b, reverse(a), b)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200873,"user_id":1474,"body":"function shorter_reverse_longer(a,b) \n  length(b) > length(a) ? a * reverse(b) * a : b * reverse(a) * b\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200874,"user_id":53,"body":"function shorter_reverse_longer(a,b) \n  length(b) > length(a) ? \"$a$(reverse(b))$a\" : \"$b$(reverse(a))$b\" \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200875,"user_id":null,"body":"function shorter_reverse_longer(a,b) \n    length(a) < length(b) ? a * reverse(b) * a : b * reverse(a) * b\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200876,"user_id":null,"body":"function shorter_reverse_longer(a,b) \n  length(a) \u2265 length(b) ? b*reverse(a)*b : a*reverse(b)*a\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200877,"user_id":null,"body":"function shorter_reverse_longer(a,b) \n  res(p,q) = p * reverse(q) * p\n  length(a) >= length(b) ? res(b,a) : res(a,b)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200878,"user_id":881,"body":"function shorter_reverse_longer(a, b) \n    if length(b) <= length(a)\n        a, b = b, a\n    end\n    a * reverse(b) * a\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200879,"user_id":null,"body":"function shorter_reverse_longer(a,b) \n  if length(a) < length(b)\n    a, b = b, a\n  end\n  b*reverse(a)*b\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5467e4d82edf8bbf40000155":[{"id":200880,"user_id":527,"body":"function descending_order(n::T)::T where T<:Integer\n  parse(T, join(sort(digits(n), rev=true)))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200881,"user_id":572,"body":"function descending_order(n)\n  parse(Int, join(sort!(digits(n), rev=true)))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200882,"user_id":null,"body":"descending_order(n) = foldr( (x,accu) -> muladd(10,accu,x), sort!(digits(n)) )","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200883,"user_id":881,"body":"descending_order(n) = parse(Int, join(sort(digits(n), rev=true)))","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200884,"user_id":null,"body":"function descending_order(n)\n  string(n) |> collect |> sort |> reverse |> String |> x -> parse(Int, x)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200885,"user_id":null,"body":"function descending_order(n)\n    if n >= 0 && n <= 9\n        return n\n    end\n\n    a = digits(n, base = 10)\n    a = sort(a, rev=true)\n    a = join(a)\n    parse(Int64, a)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200886,"user_id":null,"body":"descending_order(n) = sum(d * 10 ^ (i - 1) for (i, d) in n |> digits |> sort |> enumerate)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200887,"user_id":null,"body":"function descending_order(n)\n  n |> digits |> sort |> reverse |> join |> s -> parse(Int, s)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200888,"user_id":null,"body":"function descending_order(n)\n  split(string(n), \"\") |> sort |> reverse |> join |>\n  s -> parse(Int, s)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200889,"user_id":null,"body":"function descending_order(n)\n  parse(Int64, join(sort(collect(string(n)), rev=true)))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"546dba39fa8da224e8000467":[{"id":200890,"user_id":881,"body":"function run_length_encoding(str::AbstractString)\n    [(length(m.match), first(m.match)) for m in eachmatch(r\"(.)\\1*\", str)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200891,"user_id":null,"body":"function run_length_encoding(str::AbstractString)\n    [(length(m.match), m[1][1]) for m in eachmatch(r\"(.)(\\1*)\", str)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200892,"user_id":null,"body":"run_length_encoding(str) = [(length(m.match), first(m.match)) for m  in eachmatch(r\"(.)\\1{0,}\", str)]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200893,"user_id":50,"body":"function run_length_encoding(str::AbstractString)\n  arr = []\n  i = 1\n  while i <= length(str)\n    k = 1\n    c = str[i]\n    while i + 1 <= length(str) && c == str[i + 1]\n      i  = i + 1\n      k = k + 1\n    end\n    push!(arr, (k, c))\n    i = i + 1\n  end\n  return arr\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"546e2562b03326a88e000020":[{"id":200894,"user_id":null,"body":"function square_digits(num)\n  parse(Int, join(reverse(digits(num)).^2))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200895,"user_id":645,"body":"square_digits(n) = parse(Int, join(x * x for x in reverse(digits(n))))","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200896,"user_id":null,"body":"square_digits(num) = parse(Int64, join(abs2.(reverse(digits(num)))))","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200897,"user_id":572,"body":"function square_digits(num)\n  strx = string(num)\n  out = \"\"\n  for x in strx\n    a = (parse(Int,x))^2\n    out = string(out, string(a))\n  end\n  return(parse(Int, out))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200898,"user_id":null,"body":"square_digits(num) =\n    foldr( (x,accu) -> (s=x^2; muladd(s<10 ? 10 : 100,accu,s)), digits(num); init=0 )","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200899,"user_id":null,"body":"square_digits(num) = parse(Int, join(map(i -> string(parse(Int, i)^2), split(string(num), \"\"))))","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200900,"user_id":null,"body":"function square_digits(num)\n  #may the code be with you\n  pow = (num%10)^2\n  num=floor(Int,num\/10)\n  out = string(pow)\n  while num!=0\n    pow = (num%10)^2\n    num=floor(Int,num\/10)\n    \n    out = string(pow,out)\n    \n  end\n  \n  out = parse(Int64,out)\n  \n  return out\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200901,"user_id":null,"body":"square_digits(num) = parse(Int, join(parse.(Int8, split(string(num), \"\")).^2))\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200902,"user_id":null,"body":"function square_digits(num)\n  digits(num) .^ 2 |> reverse |> join |> s -> parse(Int, s)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200903,"user_id":null,"body":"square_digits(num) = parse(Int, join(reverse(map(n -> n^2, digits(num)))))","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"54b42f9314d9229fd6000d9c":[{"id":200904,"user_id":null,"body":"function duplicate_encode(word)\n  word = lowercase(word)\n  # Build counter\n  counter = Dict()\n  for ch in word\n    counter[ch] = 1 + get(counter, ch, 0)\n  end\n  # Use it\n  return join(counter[ch] == 1 ? '(' : ')' for ch in word)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200905,"user_id":527,"body":"using DataStructures\n\nfunction duplicate_encode(word)\n  word = lowercase(word)\n  fs = counter(word)\n  map(c -> fs[c] == 1 ? '(' : ')', word)\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200906,"user_id":null,"body":"function duplicate_encode(word)\n    join([count(x->x==c, lowercase(word)) > 1 ? ')' : '(' for c in lowercase(word)])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200907,"user_id":null,"body":"function duplicate_encode(word)\n  lword = lowercase(word)\n  freqs = Dict(c => count(i -> i==c, lword) for c in unique(lword))\n  join(map(x -> freqs[x] > 1 ? ')' : '(', lword))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200908,"user_id":null,"body":"function duplicate_encode(word)\n  prod([count(==(q),lowercase(word)) == 1 ? \"(\" : \")\" for q in lowercase(word)])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200909,"user_id":null,"body":"function duplicate_encode(word)\n  occ = Dict{Char, Bool}()\n  for c in word\n    cc = lowercase(c)\n    if cc \u2208 occ.keys\n      occ[cc] = true\n    else\n      occ[cc] = false\n    end\n  end\n  str = \"\"\n  for c in word\n    cc = lowercase(c)\n    if occ[cc]\n      str *= \")\"\n    else\n      str *= \"(\"\n    end\n  end\n  str  \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200910,"user_id":null,"body":"function duplicate_encode(word)\n  p = \"\"\n  s = \"\"\n  lword = lowercase(word)\n  for ch in lword\n    if count(x->x==ch, lword) == 1\n      p = \"(\"\n    else\n      p = \")\"\n    end\n    s = string(s, p)\n  end\n  return s\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200911,"user_id":null,"body":"function duplicate_encode(word)\n  word = lowercase(word)\n    chars = Set(word)\n    unique_chars = Dict{Char,Bool}()\n    for char in chars\n        unique_chars[char] = (count(x -> x == char, word) == 1)\n    end\n    encoded_word = \"\"\n    for char in word\n        encoded_word *= (unique_chars[char] ? \"(\" : \")\")\n    end\n    return encoded_word\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200912,"user_id":null,"body":"function duplicate_encode(word)\n    word = lowercase(word)\n    freq = Dict()\n    foreach(\n        c -> freq[c] = get(freq, c, 0) + 1,\n        word\n    )\n    return join(map(\n        c -> freq[c] == 1 ? '(' : ')',\n        word\n    ))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200913,"user_id":null,"body":"function duplicate_encode(word)\n  function frequency(c::Char)::Int\n    count(letter -> letter == c, word |> lowercase)\n  end\n\n  encoder(n::Int)::String = n > 1 ? \")\" : \"(\"\n\n  word |> lowercase |> collect .|> frequency .|> encoder |> join\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"54b724efac3d5402db00065e":[{"id":200914,"user_id":null,"body":"morse_trans = [\".-\"=>\"A\", \"-...\"=>\"B\", \"-.-.\"=>\"C\", \"-..\"=>\"D\", \".\"=>\"E\", \"..-.\"=>\"F\", \"--.\"=>\"G\", \"....\"=>\"H\",\n                \"..\"=>\"I\", \".---\"=>\"J\", \"-.-\"=>\"K\", \".-..\"=>\"L\", \"--\"=>\"M\", \"-.\"=>\"N\", \"---\"=>\"O\", \".--.\"=>\"P\",\n                \"--.-\"=>\"Q\", \".-.\"=>\"R\", \"...\"=>\"S\", \"-\"=>\"T\", \"..-\"=>\"U\", \"...-\"=>\"V\", \".--\"=>\"W\", \"-..-\"=>\"X\",\n                \"-.--\"=>\"Y\", \"--..\"=>\"Z\", \".----\"=>\"1\", \"..---\"=>\"2\", \"...--\"=>\"3\", \"....-\"=>\"4\", \".....\"=>\"5\", \n                \"-....\"=>\"6\", \"--...\"=>\"7\", \"---..\"=>\"8\", \"----.\"=>\"9\", \"-----\"=>\"0\", \"|\"=>\" \", \"-.--.-\"=>\")\", \n                \"..--..\"=>\"?\", \"-..-.\"=>\"\/\", \"-....-\"=>\"-\", \".-.-.-\"=>\".\", \"...---...\"=>\"SOS\", \"-.-.--\"=>\"!\",\n                \".----.\"=>\"'\", \"..--.-\"=>\"_\", \"--..--\"=>\",\", \".--.-.\"=>\"@\", \"---...\"=>\":\", \".-...\"=>\"&\", \"...-..-\"=>\"\\$\",\n                \".-.-.\"=>\"+\", \".-..-.\"=>\"\\\"\", \"-...-\"=>\"=\", \"-.--.\"=>\"(\", \".-..-.\"=>\"\\\\\", \"-.-.-.\"=>\";\"]\n\nfunction decode_morse(morsecode)\n    strip(join(replace(split(replace(morsecode, r\"  +\"=>\" | \"), ' '), morse_trans...)))\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200915,"user_id":null,"body":"function decode_morse(morsecode)\n  join(map((x) -> join(map((y) -> join(map((z) -> MORSE_CODE[z], split(y, \" \"))), split(x, \"  \")), \" \"), split(strip(morsecode), \"   \")), \" \")\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200916,"user_id":null,"body":"function decode_morse(morsecode)\n\n  +(a::String, b::String) = string(a,b)\n  \n  decod = \"\"\n  \n  for k in split(strip(morsecode), r\" \")\n    if k!=\"\"\n      decod += MORSE_CODE[k]\n    elseif decod[length(decod)]!=\" \"[1] && decod!=\"\"\n      decod += \" \"\n    end\n  end\n  return decod\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200917,"user_id":null,"body":"function decode_morse(morsecode)\n  # Dictionary is MORSE_CODE[]\n  \n  # Split by space; two or more spaces is treated as space between words\n  tmp = split(morsecode, \"  \") |>\n  x -> split.(x, \" \") |>\n  x -> filter.(!isempty, x) |>\n  x -> deleteat!(x, map(isempty, x))\n  \n  # Reserve for output\n  sentence = \"\"\n  \n  # Loop over letters in word and combine them\n  for i in 1:length(tmp)\n    # Get word\n    word = map(x -> MORSE_CODE[x], tmp[i]) |>\n    x -> join(x, \"\")\n    # Add to sentence\n    sentence = sentence * word * \" \"\n  end\n  \n  # Remove extra space at end\n  chop(sentence, tail = 1)\n  \nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200918,"user_id":null,"body":"function decode_morse(morsecode)\n    words=split(morsecode, \"  \")\n      decoded_phrase=[]\n      for word in words\n        if word!=\"\"\n          word = split(word, \" \")\n          decoded_word = []\n          println(word)\n          for letter in word\n              if letter!=\"\"\n              append!(decoded_word, MORSE_CODE[letter])\n          end\n          end\n          decoded_word = join(decoded_word, \"\")\n          push!(decoded_phrase, decoded_word)\n        end\n      end\n      return join(decoded_phrase, \" \")\n  end","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200919,"user_id":null,"body":"function decode_morse(morsecode)\n#   MORSE_CODE = {}\n  \n  words = split(strip(morsecode,[' ']),\"   \")\n  transS = map(words) do d\n    transWord = map(split(d,\" \")) do dd\n      if dd!=\"\"\n        MORSE_CODE[dd]\n      else\n        \" \"\n      end\n     end\n    join(transWord)\n  end\n  join(transS,\" \")\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200920,"user_id":null,"body":"function decode_morse(morsecode)\n  # your code here\n  morsecode = strip(morsecode)\n  word_list = (split(morsecode,\"   \"))\n  word_list = (split(morsecode,\"  \"))\n  return_string = \"\"\n  for n in eachindex(word_list)\n    if(length(word_list[n])>0)\n      letter_list = split(word_list[n], \" \")\n      for m in eachindex(letter_list)\n        if(length(letter_list[m])>0)\n          return_string = return_string*MORSE_CODE[letter_list[m]]\n        end\n      end\n      if(n<length(word_list))\n        return_string = return_string*\" \"\n      end\n    end\n  end\n  return return_string\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200921,"user_id":null,"body":"function decode_morse(morsecode)\n    morsecode = String(strip(morsecode))\n    res = IOBuffer()\n    i, j = 1, findnext(' ', morsecode, 1)\n    while !isnothing(j)\n        print(res, MORSE_CODE[morsecode[i:j-1]])\n        i = findnext(r\"[^ ]\", morsecode, j+1)[1]\n        if i - j > 1\n            print(res, ' ')\n        end\n        j = findnext(' ', morsecode, i)\n    end\n    print(res, MORSE_CODE[morsecode[i:end]])\n    return String(take!(res))\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200922,"user_id":null,"body":"function decode_morse(morsecode)\n    join((join(MORSE_CODE[char]\n               for char in split(word, \" \") if !isempty(char))\n          for word in split(strip(morsecode), \"  \")), \" \")\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200923,"user_id":null,"body":"function decode_morse(morsecode)\n    println(morsecode)\n    join((join(MORSE_CODE[char]\n               for char in split(word, \" \") if !isempty(char))\n          for word in split(strip(morsecode), \"  \")), \" \")\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"54ba84be607a92aa900000f1":[{"id":200924,"user_id":null,"body":"function is_isogram(str)\n  allunique(lowercase(str))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200925,"user_id":null,"body":"is_isogram(str) = length(unique(lowercase(str))) == length(str)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200926,"user_id":527,"body":"function is_isogram(str::String)::Bool\n  length(str) == length(Set(lowercase(str)))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200927,"user_id":null,"body":"function is_isogram(str)\n  str |> lowercase |> allunique\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200928,"user_id":null,"body":"is_isogram(str) = length(str) == length(str |> lowercase |> unique)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200929,"user_id":null,"body":"is_isogram(str::AbstractString) = !occursin(r\"(?i)(\\w).*\\1\", str)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200930,"user_id":null,"body":"function is_isogram(str)\n  lowercase(str) == join(unique(lowercase(str)))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200931,"user_id":null,"body":"function is_isogram(str)\n  res_dict = Dict{String,Int64}()\n  for letter in str\n    letter = string(letter)\n    letter = lowercase(letter)\n    if haskey(res_dict, letter)\n     return false\n    else\n      res_dict[string(letter)] = 1\n    end\n  end\n  return true\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200932,"user_id":null,"body":"function is_isogram(str)\n  \n  s = lowercase(str)\nlength(s)==length(Set(s))\n  # ...\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200933,"user_id":null,"body":"function is_isogram(str)\n    lower_str = lowercase(str)\n    length(unique(lower_str)) == length(lower_str)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"54bf1c2cd5b56cc47f0007a1":[{"id":200934,"user_id":881,"body":"function duplicate_count(text)\n  text = lowercase(text)\n  for l in unique(text)\n    text = replace(text, l=>\"\", count=1)\n  end\n  length(unique(text))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200935,"user_id":null,"body":"function duplicate_count(text)\n  arr = split(lowercase(text), \"\")\n  u = unique(arr)\n  d=Dict([(i,count(x->x==i,arr)) for i in u])\n  length(filter(c -> c > 1, map(x -> d[x], u)))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200936,"user_id":null,"body":"function duplicate_count(text)\n  counter = Dict()\n  for x in lowercase(text)\n    if haskey(counter, x)\n      counter[x] += 1\n    else\n      counter[x] = 1\n    end\n  end\n  return count(v >= 2 for v in values(counter))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200937,"user_id":null,"body":"duplicate_count(text) = length(Set{Char}(filter(x->count(y->y==x, lowercase(text))>1, lowercase(text))))","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200938,"user_id":null,"body":"using DataStructures\n\nfunction duplicate_count(text)\n  c = text |> lowercase |> counter\n  count(>(1), values(c))\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200939,"user_id":null,"body":"\n\nfunction duplicate_count(text)\n  \nchars = text |> lowercase |> unique\n  \nns = [count(x -> x == c, lowercase(text)) for c \u2208 chars]\n  \n  \n  count(n -> n>1, ns)\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200940,"user_id":50,"body":"function duplicate_count(text)\n    n=68719476735\n    a=0\n    o=0\n    for e in text\n        c=Int(e)\n        if c>96\n          c=c-87\n        elseif c>64\n          c=c-55\n        else\n          c=c-48\n        end\n        c=1<<c\n        if (n&c)!=0\n            n=n-c\n            a=a+c\n        elseif (a&c)!=0\n            o=o+1\n            a=a-c\n        end\n      end\n    return o\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200941,"user_id":null,"body":"using DataStructures\n\nfunction duplicate_count(text)\n  isempty(text) && return 0\n  \n  char_counts = values(counter(lowercase(text)))\n\n  n_repeats = 0\n  for v in char_counts\n    if v > 1\n      n_repeats += 1\n    end\n  end\n  \n  return n_repeats\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200942,"user_id":null,"body":"function duplicate_count(text)\n  text = lowercase(text)\n  duplicates = Set([])\n  for i in 1:length(text), j in i+1:length(text)\n      if text[i] == text[j]\n        push!(duplicates, text[i])\n      end\n  end\n  return length(duplicates)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200943,"user_id":null,"body":"function duplicate_count(text)\n  # ...\n  if text == \"\"\n    return 0\n  end\n  letters = split(lowercase(text), \"\")\n  count = Dict()\n  for ltr in letters\n    haskey(count, ltr) ? count[ltr] += 1 : count[ltr] = 1\n  end\n  total = 0\n  print(values(count), count)\n  for x in values(count)\n    if x > 1\n      total += 1\n    end\n  end\n  total\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"54bf85e3d5b56c7a05000cf9":[{"id":200944,"user_id":null,"body":"number(array) = [\"$(p): $(q)\" for (p,q) in enumerate(array)]","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200945,"user_id":527,"body":"function number(array)\n  string.(1:length(array), \": \", array)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200946,"user_id":881,"body":"number(array) = map(t -> \"$(t[1]): $(t[2])\", enumerate(array))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200947,"user_id":1474,"body":"function number(array)\n  [\"$i: $s\" for (i, s) in enumerate(array)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200948,"user_id":null,"body":"function number(array)\n    map(enumerate(array)) do (idx, line)\n      string(idx, \": \", line)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200949,"user_id":null,"body":"function number(array)\n  map((x, i) -> \"$i: $x\", array, 1:length(array))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200950,"user_id":null,"body":"function number(array)\n    [\"$(n): $(v)\" for (n,v) in enumerate(array)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200951,"user_id":null,"body":"function number(array)\n  i = 0\n  res = []\n  function append( y ) \n    push!( res, string( i += 1, \": \", y ) )\n  end\n  \n  append.(array);\n  res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200952,"user_id":null,"body":"function number(array)\n  result = []\n  for (i, l) in enumerate(array)\n    append!(result, [string(i, \": \", l)])\n    println(l)\n  end\n  return result\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200953,"user_id":null,"body":"function number(array)\n  return [string(i,\": \",array[i]) for i in 1:length(array)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"54c27a33fb7da0db0100040e":[{"id":200954,"user_id":527,"body":"is_square(n) = n \u2265 0 && isinteger(\u221an)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200955,"user_id":572,"body":"function is_square(n)\n  n>=0 ? floor(\u221an) == \u221an : false \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200956,"user_id":527,"body":"function is_square(n)\n  n \u2265 0 && isinteger(\u221an)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200957,"user_id":572,"body":"function is_square(n)\n  if n < 0\n    return false\n  end\n  mod(sqrt(n), 1) == 0 ? true : false\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200958,"user_id":null,"body":"function is_square(n)\n  if n >= 0\n    # Use Newton's method \n    val = isqrt(n)^2 == n\n  else\n    return false\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200959,"user_id":null,"body":"is_square(n) = n \u2265 0 && \u221an % 1 == 0\n\n# n >= 0 & sqrt n is integer","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200960,"user_id":null,"body":"function is_square(n)\n  n \u2265 0 && sqrt(n) == floor(sqrt(n))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200961,"user_id":null,"body":"function is_square(n)\n  n >= 0 && floor(Int, sqrt(n))^2 == n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200962,"user_id":null,"body":"function is_square(n)\n  n < 0 ? false : isinteger(\u221an)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200963,"user_id":null,"body":"function is_square(n)\n  if n >= 0\n    if isinteger(sqrt(n))\n      return true\n    end\n  end\n\n  return false\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"54d1c59aba326343c80000e7":[{"id":200964,"user_id":527,"body":"divide_numbers = \/","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200965,"user_id":881,"body":"function divide_numbers(x, y)\n  x \/ y \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200966,"user_id":null,"body":" divide_numbers = (x, y) -> x \/ y","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200967,"user_id":null,"body":"divide_numbers(x, y) = x \/ y","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200968,"user_id":null,"body":"function divide_numbers(x, y)\n  return x \/ y \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"54d512e62a5e54c96200019e":[{"id":200969,"user_id":53,"body":"module Factors\n    export prime_factors\n\n    function prime_factors(n)\n        fs = []\n        i = 2\n        while i <= n\n            cnt = 0\n            while n % i == 0\n                n = n \u00f7 i\n                cnt = cnt + 1\n            end\n            if cnt > 1\n                push!(fs, \"($(i)**$(cnt))\")\n            elseif cnt == 1\n                push!(fs, \"($(i))\")\n            end\n            i += 1\n        end\n        length(fs) == 0 ? \"($(n))\" : join(fs, \"\")\n    end\n\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200970,"user_id":null,"body":"module Factors\n    export prime_factors\n\n    function prime_factors(n)\n      i = 2\n      primes = \"\"\n      while i*i <= n\n          k = 0\n          while true\n              new,rem = divrem(n,i)\n              if rem == 0\n                n = new\n                k += 1\n              else\n                break\n              end\n          end\n          if k == 1 \n            primes *= \"($i)\"\n          elseif k > 1\n            primes *= \"($i**$k)\"\n          end\n          i += (i==2 ? 1 : 2)\n      end\n      if n>1\n        primes *= \"($n)\"\n      end\n      return primes\n    end\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200971,"user_id":492,"body":"module Factors\n    export prime_factors\n\n    function prime_factors(n)\n        res = \"\"; fac = 2\n        while fac <= n\n            count = 0\n            while n % fac == 0\n                count += 1; n = n \/ fac\n            end\n            if count > 0\n                res *= \"(\" * string(fac)\n                if count > 1\n                    res *=  \"**\"  * string(count) \n                else \"\" end\n                res *= \")\"\n            end\n            fac += 1\n        end\n        res\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200972,"user_id":492,"body":"module Factors\n    export prime_factors\n\n    function prime_factors(n)\n        res = \"\"; fac = 2\n        while fac <= n\n            count = 0\n            while n % fac == 0\n                count += 1; n = n \/ fac\n            end\n            if count > 0\n                res *= \"(\" * string(fac)\n                if count > 1\n                    res *=  \"**\"  * string(count) \n                else \"\" end\n                res *= \")\"\n            end\n            fac += 1\n        end\n        res\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200973,"user_id":null,"body":"module Factors\n    export prime_factors\n    primelist = [2,3,5]\n\n    function prime_factors(to_factor_number)\n    # Uses wheel factorization to generate test primes\n  \n      function factorprimes(evallist::Vector{Int})::Nothing\n        for p in evallist\n          pcount = 0\n          while iszero(to_factor_number%p)\n            to_factor_number \u00f7= p\n            pcount += 1\n          end\n          if pcount != 0 push!(primecount, (p, pcount)) end\n        end\n      end\n\n      spokelist = [7,11,13,17,19,23,29,31]\n      primecount = Vector{Tuple{Int,Int}}()\n      cycle = 0 \n\n      factorprimes([2,3,5])\n      while cycle^2 < to_factor_number\n        factorprimes(spokelist.+cycle)\n        cycle += 30\n      end\n\n      to_factor_number != 1 ? push!(primecount, (to_factor_number, 1)) : nothing\n      join([\"($p$(c==1 ? \"\" : \"**$c\"))\" for (p,c) in primecount])\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200974,"user_id":null,"body":"module Factors\n    export prime_factors\n\n    function prime_factors(n)\n        rv = \"\"\n        upper_limit = n\/2\n        i = 2\n        while i<upper_limit\n          multitude = 0\n          m, r = divrem(n, i)\n          while r==0\n            n = m\n            upper_limit = n\/2\n            multitude += 1\n            m, r = divrem(n, i)\n          end\n          if multitude > 1\n            rv *= \"($i**$multitude)\"\n          elseif multitude == 1\n            rv *= \"($i)\"\n          end\n          i += 1\n        end\n        if n != 1\n          rv *= \"($n)\"\n        end\n        return rv\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200975,"user_id":null,"body":"module Factors\n    export prime_factors\n\n\n    function prime_factors(n)\n        if n<3\n          return \"($(n))\"\n        end\n        # Eratostene's Sieve to find possible factors\n        max_pf = ceil(Int, sqrt(n))\n        max_pf = iseven(max_pf) ? max_pf+1 : max_pf\n        sieve = repeat([true], max_pf)\n        for i in 3:2:max_pf\n          multiples = i:i:max_pf\n          sieve[multiples[2:end]] .= false\n        end\n        candidate_factors = [[2]; [i for i in 3:2:max_pf if sieve[i]]; [n]]\n        \n        # Iterate over candidate factors to find decomposition\n        pf = popfirst!(candidate_factors)\n        factors = []\n        exponents = []\n        while n>1\n          if isinteger(n\/pf)\n            if length(factors)>0 && factors[end]==pf\n              exponents[end] += 1\n            else\n              push!(factors, pf)\n              push!(exponents, 1)\n            end\n            n \/= pf\n          else\n            if length(candidate_factors)<1\n              push!(candidate_factors, n)\n            end\n            pf = popfirst!(candidate_factors)\n          end\n        end\n        \n        # Format output\n        output = \"\"\n        for ix in 1:length(factors)\n          output *= \"($(factors[ix])\" * (exponents[ix]>1 ? \"**$(exponents[ix]))\" : \")\")\n        end\n        return output\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200976,"user_id":null,"body":"\nmodule Factors\n    export prime_factors\n\n    function decomp(n)\n      a = first(Iterators.filter(i->n%i==0, 2:1:n))\n      if Int(n\/a)==1\n        return a\n      else\n        return [a; decomp(Int(n\/a))]\n      end\n    end\n\n    function count_fac(a,x)\n      if isempty(a)\n        return [[x,1]]\n      else \n        if a[length(a)][1]==x\n          a[length(a)][2] += 1\n          return a\n        else\n          push!(a, [x,1])\n          return a\n        end\n      end\n    end\n\n    function prime_factors(n)\n      join(\n        map(\n        x -> if x[2]==1 \"($(x[1]))\" else \"($(x[1])**$(x[2]))\" end,\n        foldl((a,x)-> count_fac(a,x), decomp(n); init=[])),\n        \"\")\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200977,"user_id":null,"body":"module Factors\n    export prime_factors\n\n    function prime_factors(n)\n\n    i = 2\n    result = Dict()\n    while n \u2260 i\n        if n % i == 0\n            if i \u2208 keys(result)\n                result[i] += 1\n            else\n                result[i] = 1\n            end\n            n = n \/ i\n        else\n            i += 1\n        end\n    end\n\n\n    if i \u2208 keys(result)\n        result[i] += 1\n    else\n        result[i] = 1\n    end\n    t = \"\"\n    result = sort!(collect(pairs(result)), by = x->x[1])\n    println(result)\n\n\n    for key \u2208 result\n        println(key)\n        if key[2] == 1\n            t = t * \"(\" * string(key[1]) * \")\"\n        else\n            t = t * \"(\" * string(key[1]) * \"**\" * string(key[2]) * \")\"\n        end\n    end\n    return t\nend\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200978,"user_id":null,"body":"module Factors\n    export prime_factors\n\n    function prime_factors(n)\n        s = \"\"\n        m = 2\n        while n \u2265 m\n          i = 0\n          while true\n            if n%m == 0\n              n \/= m\n              i += 1\n            else\n              if i == 1\n                s *= \"($m)\"\n              elseif i > 1\n                s *= \"($m**$i)\"\n              end\n              break\n            end\n          end\n          m += 1\n        end\n        s\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"54d7660d2daf68c619000d95":[{"id":200979,"user_id":572,"body":"module Denom\n    export convert_frac\n    function convert_frac(lst)::Array{Array{BigInt,1},1}\n        simplify(lst) = [x[1]\/\/x[2] for x in lst]\n        lst = simplify(lst)\n        denoms = [big(denominator(x)) for x in lst]\n        denom = reduce(lcm, denoms)\n        return [[big(numerator(x))*big(denom)\u00f7big(denominator(x)),big(denom)] for x in lst]\n    end\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200980,"user_id":null,"body":"module Denom\n    export convert_frac\n\n    convert_frac(lst)::Array{Array{BigInt,1},1} = let common_denom = BigInt(lcm(map(i -> BigInt(i[2]), map!(i -> [numerator(i[1]\/\/i[2]), denominator(i[1]\/\/i[2])], lst, lst)))); map(i -> [i[1] * BigInt(common_denom \/ i[2]), common_denom], lst) end\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200981,"user_id":492,"body":"module Denom\n    export convert_frac\n\n    function convert_frac(lst)::Array{Array{BigInt,1},1}\n        l = []  \n        for x in lst\n            g = gcd(BigInt(x[1]), BigInt(x[2]))\n            push!(l, [div(x[1], g), div(x[2], g)])\n        end\n        ldenom = map(x -> x[2], l)\n        lcmu = reduce(lcm, ldenom; init=1)\n        [ [div(x[1] * lcmu, x[2]), lcmu] for x in lst]\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200982,"user_id":null,"body":"module Denom\n    export convert_frac\n\n    function convert_frac(lst::Array{Array{Int,1},1})::Array{Array{BigInt,1},1}\n        rats = map( x -> x[1]\/\/x[2], lst )\n        lcmt = lcm( map( BigInt\u2218denominator, rats ) )\n        collect( map( x -> [lcmt*x,lcmt], rats ) )\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200983,"user_id":null,"body":"module Denom\n    export convert_frac\n\n    function convert_frac(lst)\n        lst = [BigInt[a,b] .\u00f7 gcd(a, b) for (a, b) in lst]\n        D = lcm((getindex.(lst, 2)))\n        return [[a * D \u00f7 b, D] for (a, b) in lst]\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200984,"user_id":null,"body":"module Denom\n    export convert_frac\n\n    function convert_frac(lst)::Array{Array{BigInt,1},1}\n\n    lst = map(lowestTerms, lst)\n    leastCommonMultiple = get_lcm( [ x[2] for x \u2208 lst] )\n    return [[x[1] * leastCommonMultiple \u00f7 x[2], leastCommonMultiple] for x \u2208 lst]\n\nend\n\nfunction get_lcm(lst)\n    return reduce(lcm, lst)\nend\n\nfunction lowestTerms(frac)\n    return [convert(BigInt,frac[1] \u00f7 gcd(frac[1],frac[2])), convert(BigInt,frac[2] \u00f7 gcd(frac[1],frac[2]))]\nend\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200985,"user_id":null,"body":"module Denom\n    export convert_frac\n\n    function convert_frac(lst)::Array{Array{BigInt,1},1}\n        fracs = map(x-> BigInt(x[1])\/\/x[2], lst)\n        denom = BigInt(lcm(denominator.(fracs)))\n        [[numerator(denom*frac), denom] for frac in fracs]\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200986,"user_id":null,"body":"module Denom\n    export convert_frac\n\n    function convert_frac(lst)::Array{Array{BigInt,1},1}\n        rationals = map(x -> BigInt(x[1])\/\/BigInt(x[2]), lst)\n        d = BigInt(denominator(gcd(rationals)))\n        return map(r -> [d * r, d], rationals)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200987,"user_id":null,"body":"module Denom\n    export convert_frac\n\n    function convert_frac(lst)::Array{Array{BigInt,1},1}\n        rat_lst = big.([rat[1]\/\/rat[2] for rat in lst])\n        d = denominator(gcd(rat_lst...))\n        return [[num, d] for num in rat_lst*d]\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200988,"user_id":null,"body":"module Denom\n    export convert_frac\n\n    function gcd(a::BigInt, b::BigInt)::BigInt\n      x,y = min(a,b), max(a,b)\n      if x==0 return y end\n      return gcd(x, y%x)\n    end\n\n    gcd(lst::Array{BigInt}) = length(lst)==1 ? lst[1] : gcd(lst[1], gcd(lst[2:end]))\n\n    lcm(a,b) = a*b\u00f7gcd(a,b)\n    lcm(lst::Array{BigInt}) = length(lst)==1 ? lst[1] : lcm(lst[1], lcm(lst[2:end]))\n\n    function convert_frac(lst)::Array{Array{BigInt,1},1}\n        pigs = [(big(a), big(b)) for (a,b) in lst]\n        D = lcm([b\u00f7gcd(a,b) for (a,b) in pigs])\n        return [[(a*D)\u00f7b, D] for (a,b) in pigs]\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"54da539698b8a2ad76000228":[{"id":200989,"user_id":null,"body":"function is_valid_walk(walk)\n  DIRECTIONS = Dict(\"n\" => im, \"e\" => 1, \"s\" => -im, \"w\" => -1)\n  return length(walk) == 10 && sum(DIRECTIONS[ch] for ch in walk) == 0\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200990,"user_id":null,"body":"dir = Dict(\"n\" => [0,1], \"s\" => [0,-1], \"e\" => [1,0], \"w\" => [-1,0])\n\nfunction is_valid_walk(walk)\n  length(walk) == 10 && sum(map(d->dir[d], walk)) == [0,0]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200991,"user_id":null,"body":"function is_valid_walk(walk)\n  coords = [0, 0]\n  d = Dict(\n  \"n\" => () -> coords[2] += 1,\n  \"s\" => () -> coords[2] -= 1,\n  \"w\" => () -> coords[1] -= 1,\n  \"e\" => () -> coords[1] += 1\n  )\n  foreach(i -> d[i](), walk)\n  length(walk) == 10 && coords == [0, 0]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200992,"user_id":null,"body":"function is_valid_walk(walk)\n  if length(walk) \u2260 10\n        return false\n    end\n    return count(c -> c==\"n\", walk) == count(c -> c==\"s\", walk) && count(c -> c==\"e\", walk) == count(c -> c==\"w\", walk)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200993,"user_id":null,"body":"function is_valid_walk(walk)\n  [length(walk) == 10,\n    sum(walk .== \"n\") == sum(walk .== \"s\"),\n    sum(walk .== \"e\") == sum(walk .== \"w\")] |> all\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200994,"user_id":null,"body":"function is_valid_walk(walk)\n  translate = Dict(\"n\" => im, \"s\" => -im, \"e\" => 1, \"w\" => -1)\n  length(walk) == 10 && sum(map(x -> translate[x], walk)) == 0\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200995,"user_id":null,"body":"function is_valid_walk(walk)\n\tx, y = 0, 0\n\tif length(walk) != 10\n\t\treturn false\n\tend\n\tfor direction in walk\n\t\tif direction == \"n\"\n\t\t\ty +=1\n\t\telseif direction == \"s\"\n\t\t\ty -= 1\n\t\telseif direction == \"e\"\n\t\t\tx += 1\n\t\telseif direction == \"w\"\n\t\t\tx -= 1\n\t\tend\n\tend\n\tx == 0 && y == 0\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200996,"user_id":null,"body":"function is_valid_walk(walk::Array{Char})::Bool\n  # Walk is required to be exactly 10 blocks\n  if length(walk) != 10\n      return false\n  end\n  \n  direction_cache = Dict(\"n\"=>0, \"s\"=>0, \"w\"=>0, \"e\"=>0)\n  \n  for direction in walk\n      direction_cache[direction] += 1\n  end\n  \n  # Directions cancel each other out\n  return direction_cache[\"n\"] == direction_cache[\"s\"] && direction_cache[\"w\"] == direction_cache[\"e\"]\n  \nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200997,"user_id":null,"body":"function is_valid_walk(walk)\n  # insert brilliant code here\n  north(x) = x+[0,1]\n  \n  if length(walk) != 10\n    return false\n  end \n  \n  start = [0,0]\n  for w in walk\n    if w == \"n\"\n      start = north(start)\n    elseif w == \"e\"\n      start += [1, 0]\n    elseif w == \"s\"\n      start += [0, -1]\n    elseif w == \"w\"\n      start += [-1, 0]\n    end\n  end\n  \n  if start == [0,0]\n    return true\n  else\n    return false\n  end \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":200998,"user_id":null,"body":"function is_valid_walk(walk)\n  position = [0, 0]\n  if length(walk) != 10\n    return false\n  else\n    for step in walk\n      if step == \"n\"\n        position[2] += 1\n      elseif step == \"s\"\n        position[2] -= 1\n      elseif step == \"e\"\n        position[1] += 1\n      else\n        position[1] -= 1\n      end\n    end\n    \n    if position == [0, 0]\n      return true\n    else\n      return false\n    end\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"54da5a58ea159efa38000836":[{"id":200999,"user_id":null,"body":"find_it(xs) = xor(xs...)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201000,"user_id":527,"body":"function find_it(ns::Vector{Int})::Int\n  reduce(xor, ns)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201001,"user_id":null,"body":"function find_it(ns::Array{Int,1})\n  d = Dict()\n  for i in ns\n    d[i] = get(d, i, 0) + 1\n  end\n  for (k, v) in d\n    v % 2 == 1 && return k\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201002,"user_id":572,"body":"function find_it(array::Array{Int,1})\n  for x in array\n   return mod(count(i->(i==x), array), 2) != 0 ? x : continue\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201003,"user_id":null,"body":"function find_it(ns::Array{Int,1})\n    for v \u2208 Set(ns)\n        isodd(count(x->x==v,ns)) && return v\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201004,"user_id":527,"body":"function find_it(ns::Array{Int,1})\n  reduce(xor, ns)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201005,"user_id":527,"body":"find_it(ns) = reduce(\u22bb, ns)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201006,"user_id":null,"body":"function find_it(ns::Array{Int,1})\n  \n    result = 0\n    for element in ns::Array\n        result = result \u22bb element \n    end\n  \n    return result \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201007,"user_id":null,"body":"function find_it(ns::Array{Int,1})\n  array_integers = Set(ns)\n    for integer in array_integers\n        if count(i->(i==integer), ns)%2 == 1\n            return integer\n        end\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201008,"user_id":null,"body":"function find_it(ns::Array{Int,1})\nnumber_set = ns |> unique\nfrequency = [count(x -> x == k, ns) for k \u2208 number_set]\nnumber_set[findfirst(isodd, frequency)]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"54db15b003e88a6a480000b9":[{"id":201009,"user_id":1474,"body":"module Moduli\n  export from_nb_2_str\n\n  function from_nb_2_str(n, sys)\n    reduce(lcm, sys) == max(prod(sys), n) ? join([\"-$(n%i)-\" for i in sys]) : \"Not applicable\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201010,"user_id":492,"body":"module Moduli\n    export from_nb_2_str\n\n    function from_nb_2_str(n, modsys)\n        function coprime(a, b)\n            if (b == 0) return a == 1 end\n            coprime(b, a % b)\n        end\n        p = prod(modsys)\n        if (p <= n) return \"Not applicable\" end\n        for i in 1:length(modsys) \n            for j in i + 1:length(modsys) - 1\n                if (coprime(modsys[i], modsys[j]) == false) return \"Not applicable\" end\n            end\n        end\n        res = \"\"\n        for i in 1:length(modsys)\n            res *= \"-\" * string(n % modsys[i]) * \"-\"\n        end\n        res\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201011,"user_id":null,"body":"module Moduli\n    export from_nb_2_str\n\n    function pairwise_coprime(modsys)\n      for i=1:length(modsys)\n        for j=(i+1):length(modsys)\n          if gcd(modsys[i],modsys[j])!= 1\n              return false\n          end\n        end\n      end\n      return true\n    end\n\n    function from_nb_2_str(n, modsys)\n      if !pairwise_coprime(modsys) || prod(modsys) <= n\n        return \"Not applicable\"\n      end\n      \"-\"*join(map(x-> n%x, modsys), \"--\")*\"-\"\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201012,"user_id":null,"body":"module Moduli\n    export from_nb_2_str\n\n    function from_nb_2_str(n, arr)\n        prod(arr) > n && coprime(arr) ? '-'*join(map(m->mod(n,m), arr),\"--\")*'-' : \"Not applicable\"\n    end\n\n    function coprime(arr)\n        for i in 1:length(arr)-1\n            for j in i+1:length(arr)\n                gcd(arr[i],arr[j]) != 1 && return false\n            end\n        end\n    true\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201013,"user_id":53,"body":"module Moduli\n    export from_nb_2_str\n    function from_nb_2_str(n, modsys)\n        prd = 1\n        lcm = 1\n        res = \"\"\n        for e in modsys\n            prd *= e\n            lcm = (lcm * e) \u00f7 gcd(lcm, e)\n            res *= \"-$(n % e)-\"\n        end\n        prd < n || lcm != prd ? \"Not applicable\" : res\n    end\n    function gcd(a, b)\n        b == 0 ? a : gcd(b, a % b)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201014,"user_id":null,"body":"module Moduli\nexport from_nb_2_str\n\nfunction from_nb_2_str(n, modsys)\n  total = 1\n  for i = 1:length(modsys) - 1\n    total *= modsys[i]\n    for j = i + 1:length(modsys)\n      gcd(modsys[i], modsys[j]) != 1 && return \"Not applicable\"\n    end\n  end\n  total * modsys[end] <= n && return \"Not applicable\"\n  join(map(x -> \"-$(n % x)-\", modsys))\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201015,"user_id":null,"body":"module Moduli\n    export from_nb_2_str\n\n    function from_nb_2_str(n, modsys)\n        function nodd(a, b)\n            while true\n                if b > a #>\n                    a, b = b, a\n                end\n                if a % b == 0\n                    return b\n                else\n                    a = rem(a, b)\n                end\n            end\n        end\n \n        pro = 1\n        for i in modsys\n            pro *= i\n        end\n        if n >= pro #<=\n            return \"Not applicable\"\n        end\n        for i in modsys\n            for j in modsys\n                if i != j\n                    nodij = nodd(i,j)\n                    if nodij != 1\n                        return \"Not applicable\"\n                    end\n                end\n            end\n        end\n        resu = \"\"\n        for i in modsys\n            j = rem(n, i)\n            resu = string(resu, '-', string(j), '-')\n        end\n        return resu\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201016,"user_id":null,"body":"module Moduli\n  export from_nb_2_str\n  function from_nb_2_str(n, modsys)\n    if prod(modsys) <= n return \"Not applicable\" end\n    for i in 1:length(modsys)\n      for j in i+1:length(modsys)\n        if gcd(modsys[i],modsys[j]) != 1\n          return \"Not applicable\" \n        end\n      end\n    end\n    string(\"-\", join((n%m for m in modsys), \"--\"), \"-\")\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201017,"user_id":2525,"body":"module Moduli\n    export from_nb_2_str\n\n    function from_nb_2_str(n, modsys)\n        if prod(modsys) <= n  return \"Not applicable\" end\n        for (idx, val1) in enumerate(modsys)\n            for val2 in modsys[(idx+1):length(modsys)]\n                if gcd(val1, val2) != 1  return \"Not applicable\" end\n            end\n        end\n        \"-\" * join(map(x->n%x, modsys), \"--\") * \"-\"\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"54dc6f5a224c26032800005c":[{"id":201018,"user_id":null,"body":"module Book\n    export stock_list\n\n    function stock_list(list_art, list_cat)\n      if list_art == []\n        return \"\"\n      end\n      \n      d = Dict()\n            \n      for m in list_cat\n        d[m] = 0\n      end\n      \n      for l in list_art\n        pref, suf = split(l, \" \")\n        k = string(pref[1])\n        if k in keys(d)\n          d[k] += parse(Int64, suf)\n        end\n      end\n      \n      s = \"\"\n      \n      for (k, v) in [(x, d[x]) for x in list_cat]\n        s *= \"($k : $v) - \"\n      end\n      \n      rstrip(s, [\" - \"...])\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201019,"user_id":null,"body":"module Book\n    export stock_list\n    category(b) = first(b) |> uppercase |> string\n    num(b) = parse(Int, split(b, ' ')[2])\n    function stock_list(list_art, list_cat)\n        d = Dict()\n        for b in list_art\n          c = category(b)\n          n = num(b)\n          d[c] = get(d, c, 0) + n\n        end\n        tuples = [ (c, get(d, c, 0)) for c in list_cat ]\n        if length(list_art) == 0\n          \"\"\n        else\n          join([\"($c : $n)\" for (c, n) in tuples], \" - \")\n        end\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201020,"user_id":null,"body":"module Book\n    export stock_list\n\n    stock_list(list_art, list_cat) = isempty(list_art) | isempty(list_cat) ? \"\" : join([\"($letter : $(sum(startswith.(list_art,letter) .* parse.(Int, last.(split.(list_art))))))\" for letter in list_cat], \" - \")\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201021,"user_id":null,"body":"module Book\n    export stock_list\n\n    function stock_list(list_art, list_cat)\n        if isempty(list_art) | isempty(list_cat) return \"\" end\n        ostr = \"\"\n        for letter in list_cat\n          count = sum(startswith.(list_art,letter) .* parse.(Int, last.(split.(list_art))))\n          ostr *= \"($letter : $count) - \"\n        end\n        ostr[1:end-3]\n        \n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201022,"user_id":null,"body":"module Book\n    export stock_list\n\n    function stock_list(list_art, list_cat)\n        (list_art == [] || list_cat == []) && return \"\"\n        cats = Dict(zip(list_cat, zeros(Int, length(list_cat))))\n        for x in list_art\n            string(x[1]) \u2208 list_cat && (cats[string(x[1])] += parse(Int, match(r\"\\d+\", x).match))\n        end\n        join([\"($i : $(cats[i]))\" for i in list_cat], \" - \")\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201023,"user_id":null,"body":"module Book\n    export stock_list\n\n    function stock_list(list_art, list_cat)\n        lst = [filter(q->q[1]==m[1],list_art) for m in list_cat]\n        res=[]\n        \n        if list_art == [] || list_cat == []\n          return \"\"\n        end\n  \n        for (n,q) in enumerate(lst)\n          if length(q)==0\n            push!(res,\"($(list_cat[n]) : 0)\")\n          else\n            tmp = 0\n            for p in q\n              tmp += parse(Int,split(p)[2])\n            end\n            push!(res,\"($(list_cat[n]) : $(tmp))\")\n          end\n        end\n  \n        return join(res,\" - \")\n    end\n    \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201024,"user_id":null,"body":"module Book\n    export stock_list\n\n    function stock_list(list_art, list_cat)\n    if list_art == [] || list_cat == []\n        return \"\"\n    end\n    result = \"\"\n        for M in list_cat\n\t\t    count = 0\n            for L in list_art\n                if only(M) == L[1]\n            \t      count += parse(Int64, L[findfirst(\" \", L)[1]+1:length(L)])\n                end\n            end\n\t\t    result = result * \" - (\" * M * \" : \" * string(count) * \")\"\n        end\n    return result[4:end]\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201025,"user_id":null,"body":"module Book\n    export stock_list\n\n    function stock_list(list_art, list_cat)\n  \n        if length(list_art) == 0\n            return \"\"\n        end\n  \n        totals = Dict([(c, 0) for c in list_cat])\n        arts = [(s[1][1], parse(Int, s[2])) for s in split.(list_art)]\n        for (id, value) in arts\n            if string(id) in list_cat\n              totals[string(id)] += value\n            end\n        end\n        \n        printstring = \"\"\n        for id in list_cat\n            printstring *= \"($id : $(totals[id])) - \"\n        end\n        return printstring[1:end-3]\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201026,"user_id":null,"body":"module Book\n    export stock_list\n\n    function stock_list(list_art, list_cat)\n        # your code\n        if length(list_art) == 0 || length(list_cat) == 0\n          return \"\"\n        end\n        out = \"\"\n        for i in list_cat\n          count = 0\n          for j in list_art\n            k = split(j, \" \")\n            if k[1][1] == i[1]\n              count += parse(Int64, k[2])\n              \n            end\n          end\n          out *= \"(\" * i[1] * \" : \" * string(count) * \") - \"\n    \n        end\n        \n        return chop(out, head = 0, tail = 3)\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201027,"user_id":null,"body":"module Book\n    export stock_list\n\n    function stock_list(list_art, list_cat)\n        (isempty(list_art) || isempty(list_cat)) && return \"\"\n        \n        categories = Dict(list_cat .=> 0)\n        for listing \u2208 list_art\n            book_cat = first(listing, 1)\n            if haskey(categories, book_cat)\n                book_count = parse(Int64, split(listing)[2])\n                categories[book_cat] += book_count\n            end\n        end\n        \n        return join((\"($cat : $(categories[cat]))\" for cat \u2208 list_cat), \" - \")\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"54de3257f565801d96001200":[{"id":201028,"user_id":492,"body":"module Ease\n    export balance_statement\n    using Printf\n\n    function balance_statement(lst)\n        bad_form = []\n        prices = Dict(\"B\"=>0.0, \"S\"=>0.0)\n        arr = split(lst, r\", \", keepempty = false)\n        for order in arr\n            if !occursin(r\"\\S+ \\d+ \\d*\\.\\d+ (B|S)\", order)\n                push!(bad_form, order * \" ;\")\n            else\n                u = split(order)\n                if (length(u) != 4)\n                    push!(bad_form, order * \" ;\")\n                else\n                    _, quantity, price, status = u\n                    prices[status] += parse(Float64, quantity) * parse(Float64, price)\n                end\n            end\n        end\n        res =  @sprintf(\"Buy: %.0f Sell: %.0f\", prices[\"B\"], prices[\"S\"])\n        if bad_form != []\n            res *= @sprintf(\"; Badly formed %d: %s\", length(bad_form), join(bad_form, \"\"))\n        end\n        res\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201029,"user_id":null,"body":"module Ease\n    export balance_statement\n\nfunction balance_statement(lst)\n    orders, regex, buy, sell, bad = split(lst, r\", |,\", keepempty=false), r\"[A-Z]+ (\\d+) (\\d+\\.\\d+) (B|S)\", 0, 0, []\n    for order in orders\n        if occursin(regex, order)\n            info = match(regex, order).captures\n            info[3] == \"B\" ? (buy += parse(Int, info[1]) * parse(Float32, info[2])) : (sell += parse(Int, info[1]) * parse(Float32, info[2]))\n        else\n            push!(bad, order)\n        end\n    end\n    \"Buy: $(Int(round(buy))) Sell: $(Int(round(sell)))\" * (isempty(bad) ? \"\" : \"; Badly formed $(length(bad)): \"*join(bad, \" ;\")*\" ;\")\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201030,"user_id":null,"body":"module Ease\n    export balance_statement\n\n    function balance_statement(lst)\n        isempty(lst) && return \"Buy: 0 Sell: 0\"\n        orders = split(lst, r\"\\s*,\\s*\")\n        badorders = \"\"\n        nbad = 0\n        totals = Dict(\"B\" => 0.0, \"S\" => 0.0)\n\n        for order in orders\n            m = match(r\"^\\S+\\s+(\\d+)\\s+(\\d+\\.\\d+)\\s+(S|B)$\", order)\n            if isnothing(m)\n                badorders *= order * \" ;\"\n                nbad += 1\n            else\n                quantity, price, status = m.captures\n                totals[status] += parse(Int64, quantity) * parse(Float64, price)\n            end\n        end\n\n        bad = iszero(nbad) ? \"\" : \"; Badly formed $nbad: $badorders\"\n\n        \"Buy: $(round(Int64, totals[\"B\"])) Sell: $(round(Int64, totals[\"S\"]))$bad\"\n\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201031,"user_id":null,"body":"module Ease\nexport balance_statement\n\nfunction balance_statement(lst)\n  lines = split(lst, r\",\\s*\", keepempty = false)\n  buy = 0\n  sell = 0\n  malformedLines = []\n  for line in lines\n    m = match(r\"^([.0-9A-Za-z]+)\\s(\\d+)\\s(\\d+\\.\\d+)\\s([BS])$\", line)\n    if m == nothing \n      push!(malformedLines, line)\n    else      \n      symbol, quantity, price, status = m.captures\n      total = parse(Int, quantity) * parse(Float64, price)\n      if status == \"B\"\n        buy += total\n      elseif status == \"S\"\n        sell += total\n      end      \n    end\n  end\n  malformed = length(malformedLines) == 0 ? \"\" : \"; Badly formed $(length(malformedLines)): \" * join(map(line -> line * \" ;\", malformedLines))\n  \"Buy: $(Int(round(buy))) Sell: $(Int(round(sell)))\" * malformed\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201032,"user_id":null,"body":"module Ease\nexport balance_statement\n\nfunction balance_statement(lst)\n  lines = filter(line -> !isempty(line), split(lst, r\",\\s*\"))\n  buy = 0\n  sell = 0\n  malformedLines = []\n  for line in lines\n    m = match(r\"^([.0-9A-Za-z]+)\\s(\\d+)\\s(\\d+\\.\\d+)\\s([BS])$\", line)\n    if m == nothing \n      push!(malformedLines, line)\n    else      \n      symbol, quantity, price, status = m.captures\n      total = parse(Int, quantity) * parse(Float64, price)\n      if status == \"B\"\n        buy += total\n      elseif status == \"S\"\n        sell += total\n      end      \n    end\n  end\n  malformed = length(malformedLines) == 0 ? \"\" : \"; Badly formed $(length(malformedLines)): \" * join(map(line -> line * \" ;\", malformedLines))\n  \"Buy: $(Int(round(buy))) Sell: $(Int(round(sell)))\" * malformed\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201033,"user_id":null,"body":"module Ease\n    export balance_statement\n\n    function balance_statement(lst)\n    if(length(lst) === 0) return \"Buy: 0 Sell: 0\" end\n   dict = Dict(\"B\"=>0, \"S\"=>0, \"bad\"=>[])\n    function inDict(d)\n        m = match(r\"^\\S+\\s+(\\d+)\\s+(\\d+\\.\\d+)\\s+([BS])\\s*$\", d)\n        if(m === nothing) \n          push!(dict[\"bad\"], d)\n        else\n          (n,v,action) = m.captures\n          dict[action] = dict[action] + (parse(Float64, n) * parse(Float64, v))    \n        end\n    end\n    map(inDict, split(lst, r\",\\s+\"))\n   bads = collect(dict[\"bad\"])\n   badsQty = length(bads)\n   bad = (badsQty == 0) ? [] : [\"\"\"Badly formed $badsQty: $(join(bads, \" ;\")) ;\"\"\"] \n   return join([\"\"\"Buy: $(Int(round(dict[\"B\"]))) Sell: $(Int(round(dict[\"S\"])))\"\"\"; bad], \"; \") \nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201034,"user_id":null,"body":"module Ease\n  export balance_statement\n  function balance_statement(lst)\n    isempty(lst) && return \"Buy: 0 Sell: 0\"\n    buy, sell = 0, 0\n    bad_orders = []\n    for order in split(lst, r\",\\s*\")\n      if !ismatch(r\"\\S+\\s+\\d+\\s+(\\d*\\.\\d+)\\s+(B|S)\", order)\n        push!(bad_orders, order)\n        continue\n      end\n      a = split(order)\n      val = Int(round(parse(Int,a[2]) * parse(Float32,a[3])))\n      if a[4] == \"B\" buy += val else sell += val end\n    end\n    ret = \"Buy: $(buy) Sell: $(sell)\"\n    if length(bad_orders) > 0\n      ret = string(ret, \"; Badly formed \", length(bad_orders), \": \")\n      for b in bad_orders\n        ret = string(ret, b, \" ;\")\n      end\n    end\n    ret\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201035,"user_id":2525,"body":"module Ease\n    export balance_statement\n\n    function to_amount(order)\n        (name, count, price, b_or_s) = split(String(order))\n        \n        if match(r\"\\A\\d+\\.\\d+\\Z\", price)===nothing\n            throw(DomainError())\n        end\n        if b_or_s != \"B\"  &&   b_or_s != \"S\"\n            throw(DomainError())\n        end\n        \n        (b_or_s==\"B\", parse(Int, count) * parse(Float64, price))\n    end\n    \n    function balance_statement(lst)\n        \n        if length(lst)==0  return  \"Buy: 0 Sell: 0\"  end\n    \n        (buy, sell) = (0, 0)\n        malformed = Array{String}(0)\n        for order in split(lst, \", \")\n            try    \n                (B, amount) = to_amount(order)\n                if B    buy  += amount\n                else    sell += amount\n                end\n                \n            catch  \n                push!(malformed, order)\n            end\n        end  \n          \n        report = \"Buy: $(round(Int, buy)) Sell: $(round(Int, sell))\"\n        \n        if length(malformed) > 0\n            report *= \"\"\"; Badly formed $(length(malformed)): $(join(malformed, \" ;\")) ;\"\"\"\n        end\n        \n        report\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"54e320dcebe1e583250008fd":[{"id":201036,"user_id":null,"body":"module DecFact\n    export dec_2_fact_string, fact_string_2_dec\n\n    function dec_2_fact_string(num)::String\n        x = ['0':'9'; 'A':'Z']\n        encode = Dict(i-1 => x[i] for i = 1:length(x))\n        \n    \n        fact_rep(num, 1)|>\n            (ns -> map(n -> encode[n], ns)) |>\n            join   \n    end\n    \n    function fact_rep(n, radix)\n        m = n \u00f7 radix\n        if (m == 0) \n            return(n % radix)\n        else\n            return [fact_rep(m, radix + 1); n % radix] \n        end\n    end\n        \n    function fact_string_2_dec(str):: BigInt\n        x = ['0':'9'; 'A':'Z']\n        decode = Dict(x[i] => i-1 for i = 1:length(x))\n    \n        ds = collect(str) |>\n            (cs -> map(c -> decode[c], cs))\n    \n        zip(length(ds)-1:-1:0, ds) |>\n            (t -> map(place_value, t)) |>\n            sum  \n    end\n    \n    function place_value((pos_val, mult_val))\n        factorial(pos_val) * mult_val\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201037,"user_id":null,"body":"module DecFact\n    export dec_2_fact_string, fact_string_2_dec\n\ncode = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n\nfunction dec_2_fact_string(nb)::String\n  # \u5148\u627e\u6700\u5927\u7684\u57fa\n  max_base = 1\n  while factorial(big(max_base + 1)) <= nb\n    max_base += 1\n  end\n\n  # \u4ece\u5927\u5230\u5c0f\uff0c\u786e\u5b9a\u6bcf\u4e2a\u57fa\u5bf9\u5e94\u7684\u7cfb\u6570\n  factors = \"\"\n  for base \u2208 [max_base:-1:0...]\n    factors *= code[nb\u00f7factorial(big(base))+1]\n    nb %= factorial(big(base))\n  end\n\n  factors\nend\n\n\n\n\nfunction fact_string_2_dec(str)::BigInt\n  factors = findfirst.(collect(str), code) .- 1 |> reverse\n  [x * factorial(i - 1) for (i, x) \u2208 enumerate(factors)] |> sum\nend\n\n\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201038,"user_id":null,"body":"module DecFact\n    export dec_2_fact_string, fact_string_2_dec\n\n    function dec_2_fact_string(nb)::String\n        facts = Dict(zip(collect(0:35), vcat(collect('0':'9'), collect('A':'Z'))))\n        i, fact = 1, \"\"\n        while nb \u00f7 i != 0\n            nb, f = divrem(nb, i)\n            fact = facts[f] * fact\n            i += 1\n        end\n        facts[nb % i] * fact\n    end\n    \n    function fact_string_2_dec(str):: BigInt\n        decis = Dict(zip(vcat(collect('0':'9'), collect('A':'Z')), collect(0:35)))\n        sum(factorial(i-1) * decis[v] for (i, v) in enumerate(reverse(str)))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201039,"user_id":null,"body":"module DecFact\n    export dec_2_fact_string, fact_string_2_dec\n\n    function dec_2_fact_string(nb)::String\n        x = nb\n        j = 1\n        ret = []\n        while x>0\n          push!(ret, x%j)\n          x = fld(x, j)\n          j += 1\n        end\n        return join((x<10 ? string(x) : (Char('A'+x-10)) for x in reverse(ret)), \"\")\n    end\n    \n    function fact_string_2_dec(str):: BigInt\n        ret = big(0)\n        j = 0\n        b = 1\n        for c in reverse(str)\n          ret += parse(Int, c, base=36)*b\n          j += 1\n          b *= j\n        end\n        return ret\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201040,"user_id":null,"body":"module DecFact\nexport dec_2_fact_string, fact_string_2_dec\n\nfunction dec_2_fact_string(nb)::String\n  n = 1\n  \n  digchrs = []\n  while nb > 0\n    nb, r = divrem(nb, n)\n    pushfirst!(digchrs, r < 10 ? '0' + r : 'A' + r - 10)\n    n += 1\n  end\n  \n  return join(digchrs)\nend\n\nfunction fact_string_2_dec(str)::BigInt\n  curfac = 1\n  n = 1\n  tot = 0\n  for chr in str[(end-1):-1:begin]\n    dig = isletter(chr) ? 10 + chr - 'A' : parse(Int, chr)\n    tot += curfac * dig\n    n += 1\n    curfac *= n\n  end\n  return tot\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201041,"user_id":null,"body":"module DecFact\n    export dec_2_fact_string, fact_string_2_dec\n\n    function dec_2_fact_string(nb)::String\n        # your code\n        stack = []\n        x = 0\n        while true\n            value = factorial(big(x))\n            if nb > value\n                push!(stack, value)\n            else\n                break\n            end\n            x += 1\n        end\n  \n        result  = []\n        for _ in 1:length(stack)\n            fac = pop!(stack)\n            add = Int(floor(nb\/fac))\n            if add < 10\n                push!(result, add)\n            else \n                push!(result, Char(65 + add - 10))\n            end\n            nb = nb % fac\n        end\n        return join(result)\n    end\n    \n    function fact_string_2_dec(str):: BigInt\n        result = 0\n        str = reverse(str)\n        for x in 1:length(str)\n            value = tryparse(Int, str[x:x])\n            if value != nothing\n                add = value*factorial(x - 1)\n            else\n                add = (Int(str[x]) - 55)*factorial(x - 1)\n            end\n            result += add\n        end\n        return result\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201042,"user_id":null,"body":"module DecFact\n    export dec_2_fact_string, fact_string_2_dec\n\n    function dec_2_fact_string(nb)::String\n        d = 0  # counter for divisions\n        res = Int[] # array with rests of division\n        # Devide nb until 0, save rests\n        while nb > 0\n            d += 1\n            nb, r = divrem(nb, d)\n            push!(res, r)\n        end\n        res = replace(string.(res), \"10\" => \"A\", \"11\" => \"B\", \"12\" => \"C\", \"13\" => \"D\", \n            \"14\" => \"E\", \"15\" => \"F\", \"16\" => \"G\", \"17\" => \"H\", \"18\" => \"I\", \"19\" => \"J\", \n            \"20\" => \"K\", \"21\" => \"L\", \"22\" => \"M\", \"23\" => \"N\", \"24\" => \"O\", \"25\" => \"P\", \n            \"26\" => \"Q\", \"27\" => \"R\", \"28\" => \"S\", \"29\" => \"T\", \"30\" => \"U\", \"31\" => \"V\", \n            \"32\" => \"W\", \"33\" => \"X\", \"34\" => \"Y\", \"35\" => \"Z\")\n        # Inverse order of rests is the factorial number\n        join(reverse(res))\n    end\n    \n    function fact_string_2_dec(str):: BigInt\n        nb = 0\n        str = replace(split(reverse(str),\"\"), \"A\" => \"10\", \"B\" => \"11\", \"C\" => \"12\", \"D\" => \"13\",\n            \"E\" => \"14\", \"F\" => \"15\", \"G\" => \"16\", \"H\" => \"17\", \"I\" => \"18\", \"J\" => \"19\", \n            \"K\" => \"20\", \"L\" => \"21\", \"M\" => \"22\", \"N\" => \"23\", \"O\" => \"24\", \"P\" => \"25\",\n            \"Q\" => \"26\", \"R\" => \"27\", \"S\" => \"28\", \"T\" => \"29\", \"U\" => \"30\", \"V\" => \"31\",\n            \"W\" => \"32\", \"X\" => \"33\", \"Y\" => \"34\", \"Z\" => \"35\")\n        for (i, c) in enumerate(str[2:end])\n          nb += parse(Int, c)*factorial(i)\n        end\n        return nb\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201043,"user_id":null,"body":"module DecFact\n  export dec_2_fact_string, fact_string_2_dec\n\n  function dec_2_fact_string(nb)::String\n    factors = []\n    quo = nb\n    i = 1\n    while quo > 0\n      rem = quo % i\n      quo = div(quo, i)\n      if rem > 9\n        rem = Char(Int('A') - 10 + rem)\n      end\n      push!(factors, rem)\n      i += 1\n    end    \n    join(reverse(factors))\n  end\n  \n  function fact_string_2_dec(str):: BigInt\n    sum(enumerate(reverse(str))) do (i, s)\n      c = first(s)\n      value = isdigit(c) ? parse(Int, c) : Int(c) - Int('A') + 10\n      factorial(i - 1) * value\n    end\n  end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201044,"user_id":null,"body":"module DecFact\n    export dec_2_fact_string, fact_string_2_dec\n\n    function dec_2_fact_string(nb)::String\n        \n        function letter(x)\n            if x <= 9\n                return string(x)\n            else\n            \n                y = Char(Int('A'))+x-10\n                return y\n            end\n        end\n        resu = \"\"\n        n = 1\n        f = BigInt(1)\n        while true\n            if f * (n+1)> nb\n                break\n            else \n                n += 1\n                f *= n\n            end\n        end\n        fnb = nb\n        for i in n:-1:1\n            if fnb <=0\n                resu = string(resu, '0')\n            else \n                d, fnb = divrem(fnb, f)\n        \n                ds = letter(d)\n                resu = string(resu, ds)\n                f = f \u00f7 i\n            end\n        end\n        resu = string(resu, '0')\n        return resu\n    end\n    function fact_string_2_dec(str):: BigInt\n        n = 0\n        f = BigInt(1)\n        resu = 0\n        for i in length(str)-1:-1:1\n            n += 1\n            f = f * n\n            si = str[i]\n            if isdigit(si)\n                d = Int(si) - Int('0')\n            else\n                d = Int(si) - Int('A') + 10\n            end\n            resu = resu + d * f\n        end\n        return resu\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201045,"user_id":492,"body":"module DecFact\n    export dec_2_fact_string, fact_string_2_dec\n\n    Base36 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n    function dec_2_fact_string(nb)::String\n        l=[\"0\"]\n        c, tmp = 2, 0\n        while nb != 0\n            tmp = rem(nb, c)\n            pushfirst!(l, string(Base36[tmp + 1]))\n            nb = div((nb - tmp), c)\n            c += 1\n        end\n        join(l)\n    end\n    \n    function fact_string_2_dec(str):: BigInt\n        l, r = length(str), BigInt(0)\n        for i in 1:l - 1\n            ndx = findfirst(isequal(str[i]), Base36)\n            r = (r + ndx - 1) * (l - i)\n        end\n        r\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"54edbc7200b811e956000556":[{"id":201046,"user_id":null,"body":"function count_sheeps(sheep) \n  return sum(sheep)\nend\n\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201047,"user_id":527,"body":"count_sheeps = sum","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201048,"user_id":881,"body":"count_sheeps = count","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201049,"user_id":null,"body":"function count_sheeps(sheep) \n  sum(sheep .== true)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201050,"user_id":null,"body":"function count_sheeps(sheeps)\n  sum(sheeps)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201051,"user_id":null,"body":"function count_sheeps(sheep) \n  filter(x->x==true, sheep) |> length\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201052,"user_id":null,"body":"function count_sheeps(sheep) \n  nsheep = count(i->(i == true), sheep)\n  return nsheep\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201053,"user_id":null,"body":" count_sheeps(sheep) = true in sheep ? sum(1 for x in sheep if x == true) : 0","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201054,"user_id":null,"body":"function count_sheeps(sheep) \n  n = 0\n  for i in 1:length(sheep)\n    sheep[i] == true ? n += 1 : n += 0\n    end\n  return n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201055,"user_id":null,"body":"function count_sheeps(sheep) \n  return sum(a == true ? 1 : 0 for a in sheep)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"54f8693ea58bce689100065f":[{"id":201056,"user_id":null,"body":"module Egypt\n    export decompose\n\n    function decompose(n)\n        n = rationalize(eval(Meta.parse(n))\/1.0)\n        n == 0 && return []\n        arr = div(numerator(n),denominator(n)) == 0 ? [] : [string(div(numerator(n),denominator(n)))]\n        n = n - div(numerator(n),denominator(n))\n        while numerator(n) != 0\n            numer, denom = BigInt(numerator(n)), BigInt(denominator(n))\n            push!(arr,\"1\/$(Int(ceil(denom\/numer)))\")\n            n = BigInt(mod(-denom,numer))\/\/(denom*BigInt(ceil(denom\/numer)))\n        end\n        arr\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201057,"user_id":53,"body":"module Egypt\n    export decompose\n    function decompose(n)\n        r = split(n, \"\/\")\n        a = 0.0\n        b = 1.0\n        ans = []\n        if size(r)[1] == 1\n            a = parse(Float64, n)\n        else\n            a = parse(Float64, r[1])\n            b = parse(Float64, r[2])\n        end\n        while mod(a, 1) > 0\n            a *= 10\n            b *= 10\n        end\n        while a >= b\n            d = floor(a) \u00f7 floor(b)\n            push!(ans, string(convert(Int64, d)))\n            a = mod(a, b)\n        end\n        while a > 0\n            d = ceil(b \/ a)\n            push!(ans, \"1\/\" * string(convert(Int64, d)))\n            a = a * d - b\n            b *= d\n        end\n        ans\n    end\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201058,"user_id":null,"body":"module Egypt\n  export decompose\n\n  # Hey, I wrote this! Cool!\n  # using EgyptianFractions\n\n  # Safely parse the number\n  function parserational(s)\n    v = split(s, \"\/\"; limit=2)\n    length(v) == 2 && return parse(Int, v[1]) \/\/ parse(Int, v[2])\n    rationalize(parse(Float64, s))\n  end\n      \n  function greedy(r::Rational)\n    r == 0 && return []\n    r >= 1 && return vcat(string(Int(floor(r))), greedy(r - floor(r))...)\n    c = 1\/\/ceil(1\/\/r)\n    vcat(\"$(numerator(c))\/$(denominator(c))\", greedy(r - c)...)\n  end\n\n  decompose(n) = greedy(parserational(n))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201059,"user_id":null,"body":"\nmodule Egypt\n    export decompose\n\n    function rationalize(x;sigdigits=16)\n       return Int(round(x*10^(sigdigits-1),digits=0))\/\/10^(sigdigits-1)\n     end\n\n    function decompose(n)\n      if contains(n, \".\")\n        current = parse(Float64, n)\n        current = rationalize(current)\n      elseif contains(n, \"\/\")\n        num, denom = map(x -> parse(Int64, x), split(n, \"\/\"))\n        current = num \/\/ denom\n      else\n        current = parse(Int64, n) \/\/ 1\n      end\n    \n      res = []\n      while current > 0\n        if current >= 1\n          to_subtract = numerator(floor(current))\n          push!(res, string(to_subtract))\n        else\n          greatest = ceil(1 \/ current)\n          to_subtract = 1\/\/greatest\n          num, den = numerator(to_subtract), denominator(to_subtract)\n          push!(res, join(map(string, [num, den]), \"\/\"))\n        end\n        current -= to_subtract\n      end\n      \n      return res\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201060,"user_id":null,"body":"module Egypt\n    export decompose\n\n    \"\"\"\n    Given a rational number n, decomposes this number as a sum of rationals with numerators\n    equal to one and without repetitions: Egyptian Fraction.\n    \"\"\"\n    function decompose(n)\n    \n        # check on the format and split n into a nominator and denominator\n        if occursin(\"\/\", n)\n    \n            nom, denom = split(n, \"\/\")\n            nom, denom = parse(Int, nom), parse(Int, denom)\n    \n        elseif occursin(\".\", n)\n    \n            decimal_len = length(split(n, \".\")[2])\n            num = parse(Float64, n*\"e+$decimal_len\")\n            nom, denom = Int(num) , 10^decimal_len\n    \n        else\n  \n          nom, denom = parse(Int, n), 1\n  \n      end\n  \n  \n      # Fibonacci's algorithm\n  \n      # initialise\n      egyption_fraction = Array{String}([])\n      remainder = nom \/\/ denom\n  \n      # get multiples if input is larger or equal than 1\n      if remainder >= 1\n          div, remainder = divrem(remainder, 1)\n          push!(egyption_fraction, \"$div\")\n  \n          # get nominator and denominator\n          nom, denom = split(string(remainder), \"\/\/\")\n          nom, denom = parse(Int, nom), parse(Int, denom)\n      end\n  \n      # while there is a fraction left, continue calculations of egyption fraction\n      while remainder != 0\n  \n          # calculate greedy fraction\n          ratio = ceil(Int, denom \/\/ nom)\n          push!(egyption_fraction, \"1\/$ratio\")\n  \n          # calculate remainder\n          up = mod(-denom, nom) # Int64 overflow prevention in codewars\n          down1 = denom \/\/ nom # Int64 overflow prevention in codewars\n          down12 = Int128(ceil(down1)) # Int64 overflow prevention in codewars\n          down2 = Int128(denom * down12) # Int64 overflow prevention in codewars\n          remainder =  up \/\/ down2 # Int64 overflow prevention in codewars\n  \n          # get nominator and denominator\n          nom, denom = split(string(remainder), \"\/\/\")\n          nom, denom = parse(Int, nom), parse(Int, denom)\n  \n      end\n  \n      return egyption_fraction\n\nend\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201061,"user_id":null,"body":"module Egypt\n    export decompose\n\n    function readnum(s::String)\n        expr = Meta.parse(s)\n\n        if expr isa Number\n            return expr\n        elseif (expr isa Expr) && (expr.head === :call)\n            (op, x, y) = expr.args\n\n            if (op === :\/) || (op === :\/\/)\n                return x \/\/ y\n            end\n        end\n    end\n\n    function writenum(n)\n        x = numerator(n)\n        y = denominator(n)\n\n        return (y == 1) ? \"$x\" : \"$x\/$y\"\n    end\n\n    function decompose(n::Rational)\n        n0 = floor(n)\n        n -= n0\n        result = (n0 > 0) ? [n0] : []\n\n        if iszero(n)\n           return result\n        end\n\n        while numerator(n) != 1\n            f = inv(floor(inv(n)) + 1)\n            push!(result, f)\n            n -= f \n        end\n\n        push!(result, n)\n\n        return result\n    end\n\n    decompose(n::Integer) = (n > 0) ? [n] : []\n    decompose(n::Real) = decompose(rationalize(n))\n    decompose(s::String) = [writenum(n) for n in decompose(readnum(s))]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201062,"user_id":null,"body":"module Egypt\n    export decompose\n\n    function decompose(n)\n        n = rationals(n)\n        n == 0 && return []\n        arr = div(numerator(n),denominator(n)) == 0 ? [] : [string(div(numerator(n),denominator(n)))]\n        n = n - div(numerator(n),denominator(n))\n        while numerator(n) != 0\n            numer, denom = BigInt(numerator(n)), BigInt(denominator(n))\n            push!(arr,\"1\/$(Int(ceil(denom\/numer)))\")\n            n = BigInt(mod(-denom,numer))\/\/(denom*BigInt(ceil(denom\/numer)))\n        end\n        arr\n    end\n\n    function rationals(x;exp=15)\n        if '.' in x\n            return BigInt(round(parse(BigFloat,x)*10^(exp-1),digits=0))\/\/10^(exp-1)\n        elseif '\/' in x\n            return parse(BigInt,split(x,\"\/\")[1])\/\/parse(BigInt,split(x,\"\/\")[2])\n        end\n        return parse(Int,x)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201063,"user_id":null,"body":"module Egypt\n    export decompose\n\n    function to_rational(n)::Rational\n        num = eval(Meta.parse(n))\n        num = if isinteger(num)\n            Int(num)\/\/1\n        else\n            rationalize(num)\n        end\n        return num\n    end\n\n    function decompose(n)\n        res = String[]\n        num = to_rational(n)\n        if Float64(num) > 1.0\n            next = round(Int, Float64(num), RoundDown)\n            push!(res, string(next))\n            num -= next\n        end\n        while num > 0\n            next = round(BigInt, Float64(1\/num), RoundUp)\n            num -= 1\/\/next\n            push!(res, next == 1 ? string(next) : \"1\/$next\")\n        end\n        return res\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201064,"user_id":null,"body":"module Egypt\n  export decompose\n\n  function decompose(n)  \n    r = rational_n(n)\n    v = String[]\n    m = 1\n\n    while r > 0\n      if r > 1\n        push!(v, rational_string(floor(r)))\n        r -= floor(r)\n        m = 2\n      elseif r == 1\n        push!(v, \"1\")\n        r = 0\/\/1\n      elseif r - 1\/\/m \u2265 0\n        r -= 1\/\/m\n        push!(v, rational_string(1\/\/m))\n        if numerator(r) > 0\n          m = ceil(Int64, denominator(r)\/numerator(r))\n        else\n          m = denominator(r)\n        end\n      else\n        m += 1\n      end\n    end\n    return v\n  end\n\n  function rational_n(n::String)\n    if occursin(\"\/\",n)\n      a = split(n, \"\/\")\n      return parse(Int64,a[1]) \/\/ parse(Int64, a[2])\n    else\n      return rationalize(parse(Float64, n))\n    end\n  end\n\n  function rational_string(n::Rational)\n    num = numerator(n)\n    den = denominator(n)\n    if num == 0\n        return\n    elseif den == 1\n        return string(num)\n    else\n        return \"$num\/$den\"\n    end\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201065,"user_id":null,"body":"module Egypt\n  export decompose\n\n  # Hey, I wrote this! Cool!\n  # using EgyptianFractions\n\n  # Safely parse the number\n  function parserational(s)\n    v = split(s, \"\/\"; limit=2)\n    length(v) == 2 && return parse(Int, v[1]) \/\/ parse(Int, v[2])\n    decimal = findfirst(\".\", s)\n    decimal == nothing && return parse(Int, s) \/\/ 1\n    nd = length(s) - first(decimal)\n    parse(Int, replace(s, \".\" => \"\")) \/\/ 10^nd\n  end\n      \n  function greedy(r::Rational)\n    r == 0 && return []\n    r >= 1 && return vcat(string(Int(floor(r))), greedy(r - floor(r))...)\n    c = 1\/\/ceil(1\/\/r)\n    vcat(\"$(numerator(c))\/$(denominator(c))\", greedy(r - c)...)\n  end\n\n  decompose(n) = greedy(parserational(n))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"54fb853b2c8785dd5e000957":[{"id":201066,"user_id":881,"body":"chain(input, fs) = foldl((x, f) -> f(x), fs; init = input)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201067,"user_id":527,"body":"chain(x, fs) = foldl((|>), fs; init=x)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201068,"user_id":null,"body":"chain(input, fs) = isempty(fs) ? input : chain(first(fs)(input), fs[2:end])","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201069,"user_id":1474,"body":"function chain(input, fs)\n  cnt = input\n  for f in fs\n    cnt = f(cnt)\n  end\n  cnt\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201070,"user_id":2525,"body":"function chain(input, fs)\n    foldl(|>, fs, init=input)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201071,"user_id":null,"body":"function chain(input, fs)\n    tmp = input\n    for elem in fs\n      tmp = elem(tmp)\n    end\n    tmp\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201072,"user_id":168,"body":"function chain(input, fs)\n  for f in fs\n    input = f(input)\n  end\n  input\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201073,"user_id":null,"body":"chain(input, fs) = last([input = f(input) for f in fs])","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201074,"user_id":50,"body":"function chain(v, fs)\n  for f in fs\n    v = f(v)\n  end\n  return v\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"54ff3102c1bad923760001f3":[{"id":201075,"user_id":527,"body":"function get_count(s::String)\n  count(c -> c in \"aeiou\", s)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201076,"user_id":421,"body":"function get_count(s::String)\n  count(c -> c in \"aeiouAEIOU\", s)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201077,"user_id":null,"body":"function get_count(s::String)\n  vowelscount = count(c -> c in \"aeiou\",s)\n  return vowelscount\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201078,"user_id":564,"body":"strtochars = Base.Fix2(split, \"\")\nisvowel = Base.Fix2(occursin, \"aeiou\")\nonlyvowels = Base.Fix1(filter, isvowel)\n\nget_count(str::String) =\n  str |>\n  strtochars |>\n  onlyvowels |>\n  length\n","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201079,"user_id":null,"body":"get_count(s::String) = count(i -> i \u2208 \"aeiouAEIOU\", s)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201080,"user_id":null,"body":"get_count(s::String) = sum( count(x->v==x,s) for v in \"aeiou\")","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201081,"user_id":null,"body":"function get_count(s::String)  \n  sum([c in \"aeiou\" for c in s])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201082,"user_id":null,"body":"function get_count(s::String)\n  return sum(i in \"aeiou\" for i in s)\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201083,"user_id":null,"body":"function get_count(s::String)\n  count(c -> c \u2208 \"aeiou\", s)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201084,"user_id":null,"body":"function get_count(s::String)\n  vowelscount = 0\n\n  for c in s\n    if occursin(c, \"aeiou\")\n      vowelscount += 1\n    end\n  end\n\n  return vowelscount\nend\n\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55031bba8cba40ada90011c4":[{"id":201085,"user_id":null,"body":"module Hidden\nexport is_sum_of_cubes\n\nfunction is_sum_of_cubes(s)\n  nums = filter(x -> sum(x -> x^3, digits(x)) == x, map(x -> parse(Int, x.match), eachmatch(r\"\\d{1,3}\", s)))\n  isempty(nums) ? \"Unlucky\" : \"\"\"$(join(nums, \" \")) $(sum(nums)) Lucky\"\"\"\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201086,"user_id":881,"body":"module Hidden\nexport is_sum_of_cubes\n\nfunction is_sum_of_cubes(s)\n    cubes = [n for n in parse.(Int, m.match for m in eachmatch(r\"\\d{1,3}\", s)) if is_cubic_number(n)]\n    if isempty(cubes)\n        \"Unlucky\"\n    else\n        join(cubes, \" \") * \" \" * string(sum(cubes)) * \" Lucky\"\n    end\nend\n\nfunction is_cubic_number(n::Integer)\n    0 <= n < 1000 && sum(d ^ 3 for d in digits(n)) == n\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201087,"user_id":null,"body":"module Hidden\n    export is_sum_of_cubes\n\n    function is_sum_of_cubes(s)\n        c = filter(n -> sum(digits(n).^3) == n, [parse(Int,s[i]) for i in findall(r\"\\d{1,3}\", s)])\n        c != [] ? join(c, \" \")*\" \"*string(sum(c))*\" Lucky\" : \"Unlucky\"\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201088,"user_id":null,"body":"module Hidden\n    export is_sum_of_cubes\n\n    function is_sum_of_cubes(s)\n        nums = [parse(Int,s[i]) for i in findall(r\"[0-9]{1,3}\", s)]\n        c = filter(n -> sum(digits(n).^3) == n, nums)\n        c != [] ? join([string(m) for m in c], \" \")*\" \"*string(sum(c))*\" Lucky\" : \"Unlucky\"\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201089,"user_id":null,"body":"module Hidden\n    export is_sum_of_cubes\n\n    function sum_of_cubes(s)\n        sum(collect(parse(Int64, item)^3 for item in s))\n    end\n\n    function is_sum_of_cubes(s)\n        re = r\"\\d{1,3}\"\n        soc = collect((sum_of_cubes(item.match) == parse(Int64, item.match) ? item.match : \"\") for item in eachmatch(re, s))\n        st = \"\"\n        sumation = 0\n        for item in soc\n            if item != \"\"\n                st = st * string(parse(Int64, item)) * \" \"\n                sumation += parse(Int64, item)\n            end\n        end\n        if sumation > 0 || length(st) > 0\n            return st * string(sumation) * \" Lucky\"\n        else\n            return \"Unlucky\"\n        end\n    end\n\n\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201090,"user_id":null,"body":"module Hidden\n    export is_sum_of_cubes\n\n    function is_cubic(n::Int)::Bool\n        n == mapreduce(x -> x^3, +, digits(n))\n    end\n\n    function format_return(cubics::Vector{Int})::String\n        if length(cubics) > 0\n            string( join(map(x->string(x,\" \"),cubics)), sum(cubics), \" Lucky\" )\n        else\n            \"Unlucky\"\n        end\n    end\n\n    function is_sum_of_cubes(s::AbstractString)::String\n        cubics::Vector{Int} = []\n        index = 1\n        while index <= length(s)\n            m = match(r\"\\d{1,3}\", s, index)\n            if m !== nothing\n                number = parse(Int,m.match)\n                if is_cubic(number)\n                    push!(cubics,number)\n                end\n                index = m.offset + length(m.match)\n            else\n                index = length(s)+1\n            end\n        end\n        format_return(cubics)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201091,"user_id":null,"body":"module Hidden\nexport is_sum_of_cubes\n\nfunction is_sum_of_cubes(s)\n  nums = filter(x -> sum(x -> x^3, digits(x)) == x, map(x -> parse(Int, x.match), eachmatch(r\"\\d{3}|\\d{1,2}\", s)))\n  length(nums) == 0 ? \"Unlucky\" : \"\"\"$(join(nums, \" \")) $(sum(nums)) Lucky\"\"\"\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201092,"user_id":null,"body":"module Hidden\n    export is_sum_of_cubes\n    function is_sum_of_cubes(s)\n        function iscube(d)\n            ds = string(d)\n            if length(ds)>3\n                return false \n            end \n            su = 0\n            for i in ds \n                su = su + (Int(i)-48)^3 \n            end \n            if su == d\n                return true \n            else \n                return false \n            end \n        end \n        function digitsplit(s)\n            arr = []\n            f = findfirst(isdigit, s)\n            if f == nothing \n                return arr \n            end \n            f0 = f \n            while true \n                if findnext(isdigit, s, f+1) == f+1\n                    f += 1\n                else \n                    push!(arr, SubString(s, f0, f))\n                    f0 = findnext(isdigit, s, f+1)\n                    if f0 == nothing \n                        return arr \n                    end \n                    f = f0 \n                end \n            end \n        end \n        arr = digitsplit(s)\n\n        resu = \"\"\n        sumi = 0\n        for i in arr \n            j = 1\n            while j<= length(i) \n                j2 = j + 2\n                li = length(i)\n                j2,j3 = minmax(j2, li) \n                yesno = true \n                for k in j:j2 \n                    if  ! isdigit(i[k])\n                        yesno = false \n                        break \n                    end \n                end \n                if yesno \n                    d = parse(Int,SubString(i, j, j2))\n                    if iscube(d)\n                        resu = string(resu, string(d), \" \")\n                        sumi = sumi + d \n                    end \n                    j += 3\n                else \n                    break\n                end \n            end \n        end \n        if length(resu) > 0\n            resu = string(resu, string(sumi), \" Lucky\")\n        else \n            resu = \"Unlucky\"\n        end \n        return resu \n        \n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201093,"user_id":492,"body":"module Hidden\n    export is_sum_of_cubes\n\n    function is_sum_of_cubes(s)\n        t = [(parse(Int, e.match), sum(map(x -> parse(Int, x) ^3, split(e.match, \"\")))) for e in eachmatch(r\"(\\d{1,3})\", s)]\n        u = [x[1] for x in t if x[1] == x[2]]\n        if u == []\n            \"Unlucky\"\n        else\n            join(u, \" \") * \" \" * string(sum(u)) * \" Lucky\"            \n        end\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201094,"user_id":2525,"body":"module Hidden\n    export is_sum_of_cubes\n\n    cubic_numbers = [ i for i in 0:999 if sum([parse(Int, d)^3 for d in string(i)])==i ]\n\n    function is_sum_of_cubes(s)\n        all = [parse(Int, m.match[i:min(i+2, end)]) for m in eachmatch(r\"\\d+\", s) for i in 1:3:length(m.match)]\n        hidden = filter(n->n in cubic_numbers, all)\n\n        if length(hidden)>0\n            join(map(n->string(n), hidden), \" \") * \" $(sum(hidden)) Lucky\"\n        else\n            \"Unlucky\"\n        end\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201095,"user_id":null,"body":"module Hidden\n    export is_sum_of_cubes    \n    function is_sum_of_cubes(s)\n        is_cubic_num(x) = parse(Int,x) == sum(parse(Int,i)^3 for i in x)\n        found = [parse(Int,m) for m in matchall(r\"\\d{1,3}\", s) if is_cubic_num(m)]\n        isempty(found) ? \"Unlucky\" : string(join(found,\" \"), \" \", sum(found), \" Lucky\")\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201096,"user_id":759,"body":"module Hidden\n  export is_sum_of_cubes\n\n  is_cubic_table = Dict{Int,Bool}()\n  function is_cubic_inner(n, nint)\n    if length(n) == 1\n      return n == \"0\" || n == \"1\"\n    end\n    res = 0\n    for c in n\n      a = parse(Int, c)\n      res += a * a * a\n    end\n    res == nint\n  end\n  \n  function is_cubic(n, nint)\n    haskey(is_cubic_table, nint) ? is_cubic_table[nint] :\n      (is_cubic_table[nint] = is_cubic_inner(n, nint))\n  end\n\n  function is_sum_of_cubes(s)\n    cubicsum = 0\n    cubicints = []\n    cubics = []\n    for digits in matchall(r\"\\d{1,3}\", s)\n      d = parse(Int, digits)\n      if is_cubic(digits, d)\n        push!(cubics, string(d))\n        cubicsum += d\n      end\n    end\n    isempty(cubics) ? \"Unlucky\" : \"$(join(cubics, \" \")) $(cubicsum) Lucky\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201097,"user_id":null,"body":"module Hidden\n    export is_sum_of_cubes\n\n    function iscubic(n)\n        (n == 0 || n == 1) && return true\n        s = 0\n        m = n\n        while m != 0\n            s += (m % 10)^3\n            m = m \u00f7 10\n        end\n        return s == n\n    end\n    \n    function is_sum_of_cubes(s)\n        numbers = matchall(r\"\\d{1,3}\", s)\n        numbers_i = [parse(Int, n) for n in numbers]\n        numbers_cubic = [n for n in numbers_i if iscubic(n)]\n        if isempty(numbers_cubic)\n            return \"Unlucky\"\n        end\n        s = sum(numbers_cubic)\n        push!(numbers_cubic, s)\n        return join(numbers_cubic, \" \") * \" Lucky\"\n    end\n    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"550498447451fbbd7600041c":[{"id":201098,"user_id":2525,"body":"module Same\n    export comp_same\n\n    function comp_same(array1, array2)\n        if array1===nothing || array2===nothing\n            return false\n        end\n        \n        sort(map(x->x^2, array1))==sort(array2)\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201099,"user_id":null,"body":"module Same\n    export comp_same\n\n    function comp_same(array1, array2)\n      return !isnothing(array1) && !isnothing(array2) && sort(array1 .^2) == sort(array2)\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201100,"user_id":492,"body":"module Same\n    export comp_same\n\n    function comp_same(array1, array2)\n        if array1 === nothing || array2 === nothing\n            return false\n        end\n        sort([s*s for s in array1]) == sort(array2) \n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201101,"user_id":759,"body":"module Same\n    export comp_same\n\n    comp_same(a, b) = a != nothing && b != nothing && sort(map(x->x*x,a)) == sort(b)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201102,"user_id":null,"body":"module Same\n    export comp_same\n\n    function counter(arr)\n        res = Dict()\n        for x in arr\n            res[x] = get(res, x, 0) + 1\n        end\n        return res\n    end\n\n    comp_same(arr1, arr2) = arr1 != nothing && arr2 != nothing && counter(arr1 .^ 2) == counter(arr2)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201103,"user_id":null,"body":"module Same\n    export comp_same\n\n    function comp_same(array1, array2)\n        # your code\n  if array1 == nothing\n    false\n    else\n    sort(array1.^2) == sort(array2)\n    end\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201104,"user_id":null,"body":"module Same\n    export comp_same\n\n    function comp_same(a1, a2)\n        nothing \u2209 (a1, a2) && sort(a1.^2) == sort(a2)\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201105,"user_id":null,"body":"module Same\n    export comp_same\n\n    comp_same(array1::Array, array2::Array) = sort(array1 .^ 2) == sort(array2)\n    comp_same(::Nothing, ::Array) = false\n    comp_same(::Array, ::Nothing) = false \n    comp_same(::Nothing, ::Nothing) = false\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201106,"user_id":null,"body":"module Same\n    export comp_same\n\n    function comp_same(array1, array2)\n        (array1 === nothing || array2 === nothing) && return false\n        symdiff(array1.^2,array2) != [] && return false\n        for i in array1\n          count(x->x==i,array1) != count(x->x==i^2,array2) && return false\n        end \n        return true\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201107,"user_id":null,"body":"module Same\n    export comp_same\n\n\nfunction comp_same(array1, array2)\n    (isnothing(array1) || isnothing(array1)) && return false\n    sort(array1 .^ 2) == sort(array2)\nend\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"550527b108b86f700000073f":[{"id":201108,"user_id":492,"body":"module PiApprox\n    export iter_pi\n\n    function iter_pi(epsilon)\n        n, value, counter = 1.0, 0.0, 0\n        while (abs((pi - 4 * value)) > epsilon)\n            value += 1.0 \/ n\n            n = -n\n            if (n > 0) n += 2.0 end\n            if (n < 0) n -= 2.0 end\n            counter += 1\n        end\n        (counter, round(4 * value, digits=10))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201109,"user_id":null,"body":"module PiApprox\n    export iter_pi\n\n    function iter_pi(epsilon)\n        mypi, n = 0, 0\n        println(epsilon)\n        while abs(\u03c0 - mypi) > epsilon\n            mypi += (-1)^(n % 2) * 4 \/ (2n + 1)\n            n += 1\n        end\n        (n, round(mypi, digits=10))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201110,"user_id":null,"body":"module PiApprox\n    export iter_pi\n\n    function iter_pi(epsilon)\n        n::Int128 = 1\n        s::Float64 = 0\n        while true \n          h = n&1==1 ? 1 : -1\n          s += 4h\/(2n-1)\n          if abs(pi-s)<epsilon\n            break\n          end\n          n += 1\n        end\n        (n,round(s,digits=10))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201111,"user_id":null,"body":"module PiApprox\n    export iter_pi\n\n    function iter_pi(epsilon)\n      counter = 0\n      pi = 1\n      while pi * 4 > \u03c0 + epsilon || pi * 4 < \u03c0 - epsilon\n        counter += 1\n        if counter % 2 == 0 \n          pi += (1.0 \/ ((counter * 2) + 1))\n        else\n          pi -= (1.0 \/ ((counter * 2) + 1))\n        end\n      end\n  \n      return (counter + 1, round(pi * 4, digits=10))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201112,"user_id":null,"body":"module PiApprox\n    export iter_pi\n\n    \"\"\"\n    A function to approximate \u03c0. Returns a tuple with the number of iterations and the approximation\n    up to 10 decimals.\n    \n    Approximation method using the following infinite series (Leibniz 1646\u20131716):\n    \n    \u03c0\/4 = \u2211_{n \u2208 \u2115} (1\/(4n + 1) - 1\/(4n + 3))  \n    \"\"\"\n    function iter_pi(\u03b5)\n    \n        # initialise\n        n = 1   # denominator\n        \u03c0\u2032 = 1\/n # \u03c0 approximation\n        sign = 1 # also counts iterations\n    \n        # loop while the difference between \u03c0 approximation and \u03c0 are strictly larger than \u03b5\n        while sqrt((\u03c0\u2032*4 - \u03c0)^2) > \u03b5 # first squaring and then taking the root, only to get rid of the sign\n            n += 2 # increase denominator by steps of 2\n            # as axxproximation method uses alternatingly addiation and subtraction, we decided based on the\n            # current iteration\n            if isodd(sign)\n                \u03c0\u2032 -= 1\/n\n            else\n                \u03c0\u2032 += 1\/n\n            end\n            sign += 1 # update counter\n    \n        end\n\n        return sign, round(\u03c0\u2032*4, digits=10) # rounding just to fit test cases\n  \n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201113,"user_id":null,"body":"module PiApprox\n    export iter_pi\n\n    function iter_pi(epsilon)\n        q = 1.0\n        inexPi = 0.0\n        counter = 0\n        while abs(1.0 * \u03c0 - 4.0 * inexPi) > epsilon\n            counter += 1\n            inexPi += (-1.0)^(counter - 1) \/ q\n            q += 2.0\n        end\n        (counter, round(4.0 * inexPi,digits=10))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201114,"user_id":null,"body":"module PiApprox\n    export iter_pi\n\n    function iter_pi(epsilon)\n        # your code\n        i::Int64 = 1\n        pi4::Float64 = 1.0\n        while abs(pi - 4pi4) > epsilon\n            pi4 = pi4 + (-1)^i * 1\/(2i+1)\n            i += 1\n        end\n        return i, round(4pi4, digits=10)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201115,"user_id":null,"body":"module PiApprox\n    export iter_pi\n    pipi(x) = 1.0\/(2.0 * x - 1.0) * (-1.0)^(mod((x + 1),2))\n    function iter_pi(epsilon)\n        local itr = 0\n        local prev = 0\n        while abs(prev - pi) > epsilon\n          itr = itr + 1\n          prev = prev + 4.0 * pipi(itr)\n        end\n        return (convert(Int32,itr), round(prev,digits = 10))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201116,"user_id":53,"body":"module PiApprox\n    export iter_pi\n\n    function iter_pi(epsilon)\n        pi4 = 1.0\n        sign = -1.0\n        iterations = 1\n        denom = 3.0\n        while abs(4.0 * pi4 - pi) >= epsilon\n            pi4 += sign * 1.0 \/ denom\n            sign *= -1.0\n            denom += 2.0\n            iterations += 1\n        end\n        (iterations, round(4.0 * pi4 * 1e10) \/ 1e10)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201117,"user_id":null,"body":"module PiApprox\nexport iter_pi\n\nfunction iter_pi(epsilon)\n  \u03c0_approx = 0\n  n = 0\n  while abs(\u03c0_approx - \u03c0) > epsilon\n    n += 1\n    \u03c0_approx += 4 \/ (2n - 1) * (iseven(n) ? -1 : 1)\n  end\n  return (n, round(\u03c0_approx; digits = 10))\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"550554fd08b86f84fe000a58":[{"id":201118,"user_id":null,"body":"module AreIn\n    export inArray\n    inArray(array1, array2) = unique(sort(filter(x -> occursin(x, join(array2, \",\")), array1)))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201119,"user_id":421,"body":"module AreIn\n    export inArray\n\n    function inArray(array1, array2)\n        sort(unique(filter(x-> any(y-> occursin(x, y), array2), array1)))\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201120,"user_id":null,"body":"module AreIn\nexport inArray\nin_array(a1, a2) = sort(unique(s for s in a1 if any(occursin(s, t) for t in a2)))\nend\n","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201121,"user_id":null,"body":"module AreIn\n    export inArray\n\n    function inArray(array1, array2)\n        unique(sort(filter(x -> occursin(x, join(array2, \",\")), array1)))\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201122,"user_id":null,"body":"module AreIn\n    export inArray\n\n    function inArray(array1, array2)\n        r = []\n        for i in 1:length(array1)\n            findfirst(==(array1[i]), array1) != i && continue\n            for j in 1:length(array2)\n                if occursin(array1[i], array2[j])\n                    push!(r, array1[i])\n                    break\n                end\n            end\n        end\n        sort(r)\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201123,"user_id":null,"body":"module AreIn\n    export inArray\n\n    function in_array(a1, a2)\n        filter(s1 -> any(s2 -> occursin(s1, s2), a2), a1) |> unique |> sort\n    end\nend\n","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201124,"user_id":null,"body":"module AreIn\n    export inArray\n\nfunction inArray(array1, array2)\n    good = []\n    for s in array1\n        for w in array2\n            if occursin(s, w)\n                push!(good, s)\n            end\n        end\n    end\n    ugood = unique(good)\n    sort!(ugood)\n    return ugood\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201125,"user_id":null,"body":"module AreIn\n  export inArray\n\n  function inArray(array1, array2)\n    function f(elem)\n      any(s -> occursin(elem, s), array2)\n    end\n    \n    r = Set(array1) # no duplicates\n    r = filter(f, r)\n    r = collect(r)\n    sort!(r)\n    r\n  end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201126,"user_id":null,"body":"module AreIn\n    export inArray\n\n    function inArray(array1, array2)\n      outlist = Set()\n      for a2_val in array2\n        [push!(outlist, a1_val) for a1_val in array1 if occursin(a1_val, a2_val)]  \n      end\n      return sort(collect(outlist), alg=QuickSort)\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201127,"user_id":null,"body":"module AreIn\n    export inArray\n\n    function in_array(a1, a2)\n\t\tsort(unique([ str for str \u2208 a1 if any(s -> contains(s, str), a2) ]))\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5506b230a11c0aeab3000c1f":[{"id":201128,"user_id":null,"body":"function evaporator(content, evap_per_day, threshold)\n    frac = ceil(Int64, log(1 - evap_per_day\/100, threshold\/100))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201129,"user_id":null,"body":"evaporator(content, evap_per_day, threshold) = ceil(log(threshold\/100.)\/log(1-evap_per_day\/100.))","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201130,"user_id":421,"body":"function evaporator(content, evap_per_day, threshold)\n  day = 0\n  minimum = content * threshold \/ 100\n  while (content >= minimum)\n    content -= evap_per_day \/ 100 * content\n    day += 1\n  end\n  day\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201131,"user_id":null,"body":"function evaporator(content, evap_per_day, threshold)\n    q = (1-evap_per_day\/100.0)\n    n = log(q, threshold\/100)\n    floor(n)+1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201132,"user_id":492,"body":"function evaporator(content, evap_per_day, threshold)\n    Int(ceil(log(threshold \/ 100.0) \/ log(1.0 - evap_per_day \/ 100.0)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201133,"user_id":null,"body":"function evaporator(initial_content, evap_per_day, thresholdp)\n  day = 0\n  content = initial_content\n  threshold = (content \/ 100.0 * thresholdp)\n  while(content > threshold) \n    content = content - (content * (evap_per_day \/ 100.0))\n    println(content)\n    day = day + 1\n  end\n  return day\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201134,"user_id":null,"body":"function evaporator(content, evap_per_day, threshold)\n  remaining = 100\n  day = 0\n  while remaining > threshold\n    remaining = remaining * (100 - evap_per_day) \/ 100\n    day += 1\n  end\n  day\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201135,"user_id":null,"body":"evaporator(content, evap_per_day, threshold) = ceil(log(1-evap_per_day\/100, threshold\/100))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201136,"user_id":null,"body":"function evaporator(content, evap_per_day, threshold)\n    # your code\n    return Int(ceil(log(threshold \/ 100) \/ log(1 - evap_per_day \/ 100)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201137,"user_id":null,"body":"function evaporator(content, evap_per_day, threshold)\n    i = 0\n    threshold = threshold\/100*content  \n    while content > threshold\n      i += 1;\n      content *= (1 - evap_per_day\/100)\n    end\n    i\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"550f22f4d758534c1100025a":[{"id":201138,"user_id":null,"body":"module Dir\n    export dir_reduc\n\n    function dir_reduc(arr)\n        ANNULATIONS = Dict(\n            \"NORTH\"=>\"SOUTH\",\n            \"EAST\"=>\"WEST\",\n            \"SOUTH\"=>\"NORTH\",\n            \"WEST\"=>\"EAST\"\n        )\n        stack = []\n        for dir in arr\n            if !isempty(stack) && stack[end] == ANNULATIONS[dir]\n                pop!(stack)\n            else\n                push!(stack, dir)\n            end\n        end\n        return stack\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201139,"user_id":492,"body":"module Dir\n    export dir_reduc\n\n    function dir_reduc(arr)\n        a = join(arr, \" \")\n        aa = replace(replace(a, \"NORTH SOUTH\" => \"\"), \"SOUTH NORTH\" => \"\")\n        aaa = replace(replace(aa, \"EAST WEST\" => \"\"), \"WEST EAST\" => \"\")\n        ar = String.(split(aaa, \" \", keepempty = false))\n        length(ar) < length(arr) ? dir_reduc(ar) : ar\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201140,"user_id":null,"body":"module Dir\n    export dir_reduc\n\n    function dir_reduc(arr)\n        rgx = r\"(NORTH:SOUTH)|(SOUTH:NORTH)|(WEST:EAST)|(EAST:WEST)\"\n        str = join(arr, ':')\n        while match(rgx, str) != nothing\n            str = replace(replace(replace(str, rgx => \"\"), r\":+\" => \":\"), r\"(^:)|(:$)\" => \"\")\n        end\n        split(str, ':')\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201141,"user_id":null,"body":"module Dir\n    export dir_reduc\n    \n    OPPOSITE = Dict( 'N' => 'S', 'S' => 'N', 'W' => 'E', 'E' => 'W' )\n\n    function dir_reduc(arr::Array{String})::Array{String}\n        workbench = String[]\n        sizehint!( workbench, length(arr) )\n        for next in arr\n            if !isempty(workbench) && next[1]==OPPOSITE[workbench[end][1]]\n                pop!(workbench)\n            else\n                push!(workbench, next)\n            end\n        end\n        workbench\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201142,"user_id":null,"body":"module Dir\n    export dir_reduc\n\nfunction dir_reduc(arr)\n\n  stack = []\n\n  for step \u2208 arr\n    if length(stack) == 0\n      push!(stack, step)\n    else\n      if stack[end] == \"NORTH\" && step == \"SOUTH\"\n        pop!(stack)\n      elseif stack[end] == \"SOUTH\" && step == \"NORTH\"\n        pop!(stack)\n      elseif stack[end] == \"EAST\" && step == \"WEST\"\n        pop!(stack)\n      elseif stack[end] == \"WEST\" && step == \"EAST\"\n        pop!(stack)\n      else\n        push!(stack, step)\n      end\n    end\n  end\n\n  stack\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201143,"user_id":null,"body":"module Dir\n    export dir_reduc\n\n    function dir_reduc(arr)\n      function fold_op(a,x)\n        if length(a)==0\n          return [x]\n        end\n        if Set([a[end], x]) in [Set([\"NORTH\",\"SOUTH\"]), Set([\"EAST\", \"WEST\"])]\n          return a[begin:end-1]\n        else\n          return [a; x]\n        end\n      end\n      return foldl(fold_op, arr; init=[])\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201144,"user_id":null,"body":"module Dir\n    export dir_reduc\n\n    function opp(dir)\n        if dir == \"NORTH\"\n            return \"SOUTH\"\n        elseif dir == \"SOUTH\"\n            return \"NORTH\"\n        elseif dir == \"EAST\"\n            return \"WEST\"\n        elseif dir == \"WEST\"\n            return \"EAST\"\n        end\n    end\n\n    function dir_reduc(arr)\n        arr_copy = []\n        while arr_copy != arr\n            arr_copy = copy(arr)\n            for i in 1:length(arr)-1\n                if opp(arr[i]) == arr[i+1]\n                    deleteat!(arr, i)\n                    deleteat!(arr, i)\n                    break\n                end\n            end\n        end\n        return arr\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201145,"user_id":null,"body":"module Dir\n    export dir_reduc\n\nfunction dir_reduc(arr)\n    dirMap = Dict(\"NORTH\" => \"SOUTH\", \"SOUTH\" => \"NORTH\", \"EAST\" => \"WEST\", \"WEST\" => \"EAST\")\n    res = Vector{String}()\n    for i \u2208 arr\n        if !isempty(res) && dirMap[i] == res[end]\n            pop!(res)\n        else\n            push!(res,i)\n        end\n    end\n    res\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201146,"user_id":null,"body":"module Dir\n    export dir_reduc\n\n    \"\"\"\n    Function to remove needless directional instructions. Takes an array of strings and returns an array of strings.\n    \"\"\"\n    function dir_reduc(arr::Array{String,1})::Array{String,1}\n        # initialise\n        dir = Dict(\"NORTH\" => \"SOUTH\", \"SOUTH\" => \"NORTH\", \"EAST\" => \"WEST\", \"WEST\" => \"EAST\") # dictionary for opposing directions\n        dir_simplified = deepcopy(arr) # deepycopy array to modify later without changing input\n    \n        # loop over array to check opposing directions\n        # restart loop as soon as two consecutive opposing directions have been found\n        idx = 1 # start at index 1\n        while idx < length(dir_simplified) # loop as long as index has not reached second to last posiiton of array\n            \n            # if the directional pair of the current index and the next following index are opposing\n            if dir[dir_simplified[idx]] == dir_simplified[idx+1]\n                deleteat!(dir_simplified, idx:idx+1) # delete both directions\n                idx = 1 # loop from the first index again\n            else # increase index to check next pair\n                idx += 1\n            end\n        end\n    \n        return dir_simplified\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201147,"user_id":null,"body":"module Dir\n    export dir_reduc\n\n    function dir_reduc(arr)\n    abbr = Dict([[\"NORTH\",\"N\"],[\"SOUTH\",\"S\"],[\"EAST\",\"E\"],[\"WEST\",\"W\"]])\n    inv = Dict([['N', \"NORTH\"], ['S', \"SOUTH\"], ['E', \"EAST\"], ['W', \"WEST\"]])\n    dirs = join([abbr[x] for x in arr])\n    ann = [\"NS\", \"SN\", \"EW\", \"WE\"]\n    global change = true\n    while change\n        if length(dirs) == 0\n            change = false\n        elseif length(dirs) == 1\n            change = false\n        else\n            for i in 1:(length(dirs)-1)\n                if true in [dirs[i:i+1] == d for d in ann]\n                    dirs = dirs[1:i-1] * dirs[i+2:end]\n                    global change = true\n                    break\n                else\n                    print(\"here\")\n                    global change = false\n                end\n            end\n        end\n    end\n    return [inv[x] for x in dirs]\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5517fcb0236c8826940003c9":[{"id":201148,"user_id":492,"body":"module Irr\n    export sum_fracts\n\n    function sum_fracts(l)\n        if (l == []) return nothing end\n        s = sum(map(x -> x[1]\/\/x[2], l))\n        d = denominator(s)\n        if (d == 1) numerator(s) else [numerator(s), d] end\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201149,"user_id":null,"body":"module Irr\n    export sum_fracts\n\n    function sum_nd(a::Vector{Int64},b::Vector{Int64})\n      n::Int64 = a[1]b[2]+a[2]b[1]\n      d::Int64 = a[2]b[2]\n      g = gcd(n,d) \n      if  g != 1\n        n \/= g\n        d \/= g\n      end\n      [n, d]\n    end\n\n    function sum_fracts(l)\n      if(length(l)==0)\n        return nothing\n      end\n      x = reduce(sum_nd, l)\n      x[2]==1 ? x[1] : x\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201150,"user_id":null,"body":"module Irr\n    export sum_fracts\n    sum_fracts(l) = (isempty(l) ? nothing : ((v=sum((x)->Rational(x...),l)).den == 1) ? v.num : [v.num, v.den])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201151,"user_id":null,"body":"module Irr\n    export sum_fracts\n\n    function sum_fracts(l)\n        if l == [] return nothing end\n        fraction_list = []\n        for i in 1:length(l) push!(fraction_list,l[i][1]\/\/l[i][2])end\n        result = sum(fraction_list)\n        if denominator(result)== 1  numerator(result) else [numerator(result),denominator(result)] end\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201152,"user_id":null,"body":"module Irr\n    export sum_fracts\n\n    function sum_fracts(l)\n        if l == []\n          return \n        end\n        fraction_list = []\n        for i in 1:length(l)\n          push!(fraction_list,l[i][1]\/\/l[i][2])\n        end\n        result = sum(fraction_list)\n        if denominator(result)== 1\n          return numerator(result) \n        end\n        return[numerator(result),denominator(result)]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201153,"user_id":null,"body":"module Irr\n    export sum_fracts\n\n    function sum_fracts(l)\n    if length(l) != 0\n        while length(l) > 1\n          i = length(l)\n          new_numer = l[i][1] * l[i-1][2]  +  l[i-1][1] * l[i][2]\n          new_denom = l[i][2] * l[i-1][2]\n          pop!(l)\n          pop!(l)\n          push!(l,[new_numer , new_denom])\n        end\n        l = [ l[1][1],l[1][2] ]\n        a = l[1]\n        b = l[2]\n        while b != 0\n          h = mod(a,b)\n          a = b\n          b = h      \n        end\n        l = div.(l,a)  \n    \n      if l[2] == 1\n      return l[1]\n      end\n      return l\n    end\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201154,"user_id":null,"body":"module Irr\n    export sum_fracts\n\n    function sum_fracts(l)\n        l == [] && return nothing\n        denom = reduce(lcm, [n[2] for n in l])\n        numer = sum([m[1]*div(denom,m[2]) for m in l])\n        frac = [div(numer,gcd(numer, denom)), div(denom,gcd(numer, denom))]\n        frac[2] == 1 ? frac[1] : frac\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201155,"user_id":null,"body":"module Irr\nexport sum_fracts\n\nfunction sum_fracts(l)\n  if l == []\n    return nothing\n  end\n  result = sum(map((x) -> x[1] \/\/ x[2], l))\n  n, d = numerator(result), denominator(result)\n  d == 1 ? n : [n, d]\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201156,"user_id":2525,"body":"module Irr\n    export sum_fracts\n\n    function sum_fracts(l)\n        try\n            frac = sum(n\/\/d for (n, d) in l)\n            n = numerator(frac)\n            d = denominator(frac)\n       \n            if d == 1\n                n\n            else\n                [n, d]\n            end\n        catch e\n            nothing\n        end\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201157,"user_id":53,"body":"module Irr\n    export sum_fracts\n\n    function sum_fracts(lst)\n        if length(lst) == 0\n            nothing\n        else\n            xss = map(arr -> reduce(arr[1], arr[2]), lst)\n            cd = BigInt(1)\n            for (_, xs) in enumerate(xss)\n                cd = lcm(xs[2], cd)\n            end\n            yss = map(xs -> [xs[1] * cd \u00f7 xs[2], cd], xss)\n            n = 0\n            for (_, ys) in enumerate(yss)\n                n = n + ys[1]\n            end\n            d = yss[1][2]\n            g = gcd(d, n)\n            if d == g\n                n \u00f7 d\n            else\n                [n \u00f7 g, d \u00f7 g]\n            end\n        end\n    end\n\n    function gcd(a, b)\n        b == 0 ? a : gcd(b, mod(a, b))\n    end\n\n    function lcm(a, b)\n        (a * b) \u00f7 gcd(a, b)\n    end\n\n    function reduce(a, b)\n        i = gcd(a, b)\n        [a \u00f7 i, b \u00f7 i]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55192f4ecd82ff826900089e":[{"id":201158,"user_id":421,"body":"function divide(weight)\n  iseven(weight) && weight > 2\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201159,"user_id":572,"body":"function divide(weight)\n  weight % 2 == 0 && weight != 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201160,"user_id":null,"body":"function divide(weight)\n  return (weight>2 && weight%2 == 0)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201161,"user_id":881,"body":"divide(w) = w > 2 && iseven(w)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201162,"user_id":null,"body":"function divide(weight)\n  if weight > 2\n    return weight % 2 == 0\n  end\n  return false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201163,"user_id":null,"body":"function divide(weight)\n  return weight % 2 == 0 && weight > 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201164,"user_id":null,"body":"function divide(weight)\n  return iseven(weight) && iseven(weight - 2)  && weight - 2 > 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201165,"user_id":48,"body":"function divide(w)\n  w % 2 == 0 && w > 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201166,"user_id":null,"body":"function divide(weight)\n  weight == 2 ? false : iseven(weight)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201167,"user_id":null,"body":"function divide(w)\n  w > 2 && w % 2 == 0;\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"551b4501ac0447318f0009cd":[{"id":201168,"user_id":null,"body":"boolean_to_string(b) = \"$b\"","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201169,"user_id":null,"body":"boolean_to_string(b::Bool)::String = string(b)\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201170,"user_id":null,"body":"function boolean_to_string(b::Bool)::String\n return b ? \"true\" : \"false\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201171,"user_id":527,"body":"function boolean_to_string(b::Bool)::String\n  string(b)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201172,"user_id":null,"body":"function boolean_to_string(b::Bool)::String\n  \n  repr(b)\n  \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201173,"user_id":881,"body":"boolean_to_string = string","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201174,"user_id":null,"body":"boolean_to_string(b::Bool)::String = \"$b\"","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201175,"user_id":575,"body":"function boolean_to_string(b::Bool)::String\n  b ? \"true\" : \"false\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201176,"user_id":null,"body":"boolean_to_string(b::Bool) = string(b)\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201177,"user_id":null,"body":"boolean_to_string = string\n# Also consider boolean_to_string(b::Bool)::String = b ? \"true\" : \"false\"","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"551dc350bf4e526099000ae5":[{"id":201178,"user_id":527,"body":"song_decoder(song) = strip(replace(song, r\"(WUB)+\" => ' '))","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201179,"user_id":null,"body":"function song_decoder(song)\n  strip(replace(song, r\"(WUB)+\" => \" \"))\nend  ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201180,"user_id":null,"body":"function song_decoder(song)\n  a = replace(song, r\"(WUB){1,}\" => \" \")\n  a = strip(a)\n  return a\nend  ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201181,"user_id":null,"body":"function song_decoder(song)\n  return join(deleteat!(split(song, \"WUB\"), findall(x->x==\"\",split(song, \"WUB\"))), \" \")\nend  ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201182,"user_id":null,"body":"function song_decoder(song)\n  return join(filter(!isempty, split(replace(song, \"WUB\" => \" \"), \" \")), \" \")\nend  ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201183,"user_id":null,"body":"function song_decoder(song)\n\n    regex = r\"(WUB)+\"\n    return strip(replace(song, regex => \" \"))\nend  ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201184,"user_id":null,"body":"function song_decoder(song)\n  words = split(replace(song, \"WUB\"=>' '), ' ')\n  keep = .~collect(words .== \"\")\n  return join(words[keep], ' ')\nend  ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201185,"user_id":null,"body":"function song_decoder(song)\n  song = replace(song, \"WUB\" => \" \")\n  while occursin(\"  \", song) == true\n    song = replace(song, \"  \" => \" \")\n  end\n  return lstrip(rstrip(song))\nend  ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201186,"user_id":null,"body":"function song_decoder(song)\n  splitWUB(song) = split(song, \"WUB\");\n  return song |> splitWUB |> x -> filter(!isempty, x) |> arr -> join(arr, \" \");\nend  ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201187,"user_id":null,"body":"function song_decoder(song)\n  join(filter(x -> x != \"\",split(song,\"WUB\")),\" \")\nend  ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5526fc09a1bbd946250002dc":[{"id":201188,"user_id":null,"body":"function find_outlier(numbers)\n  odds, evens = [filter(isodd, numbers), filter(iseven, numbers)]\n  length(odds) == 1 ? odds[1] : evens[1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201189,"user_id":527,"body":"function find_outlier(ns)\n  ns[findfirst(sort(iseven.(ns[1:3]))[2] ? isodd : iseven, ns)]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201190,"user_id":null,"body":"function find_outlier(numbers)\n  f = count(iseven, numbers[1:3]) > 1 ? isodd : iseven\n  numbers[findfirst(f, numbers)]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201191,"user_id":null,"body":"function find_outlier(numbers)\n  odds, evens = [filter(q, numbers) for q in [isodd, iseven]]\n  length(odds) == 1 ? odds[begin] : evens[begin]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201192,"user_id":null,"body":"function find_outlier(numbers)\n  start = numbers[1:3]\n  odds = sum(n & 1 for n in start)\n  filterfunc = odds >= 2 ? iseven : isodd\n  index = findfirst(filterfunc, numbers)\n  return numbers[index]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201193,"user_id":null,"body":"function find_outlier(numbers)\n  filter(x -> (abs(x % 2) == ((sort(abs.(numbers .% 2))[2] == 0) ? 1 : 0)), numbers)[1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201194,"user_id":null,"body":"function find_outlier(numbers)\n  n = count(iseven, numbers[1:3])\n  i = n >= 2 ? findfirst(isodd, numbers) :\n    findfirst(iseven, numbers)\n  numbers[i]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201195,"user_id":null,"body":"function find_outlier(numbers)\n  \n  evenQ = 0\n  oddQ = 0\n  \n  for q in numbers[1:3]\n    q % 2 == 0 ? evenQ += 1 : oddQ += 1\n  end\n  \n  if evenQ > oddQ\n    for q in numbers\n      if abs(q) % 2 == 1\n        return q\n      end\n    end\n  else\n    for q in numbers\n      if abs(q) % 2 == 0\n        return q\n      end\n    end\n  end\n  \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201196,"user_id":null,"body":"function find_odd_or_even(numbers, remainder)\n\tfor number in numbers\n\t\tabs(number % 2) == remainder && return number\n\tend\nend\n\nfunction find_outlier(numbers)\n\teven = 0\n\todd = 0\n\tfor number in numbers\n\t\tnumber % 2 == 0 ? even += 1 : odd +=1\n\t\teven > 1 && return find_odd_or_even(numbers, 1) \n\t\todd > 1 && return find_odd_or_even(numbers, 0)\n\tend\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201197,"user_id":null,"body":"function find_outlier(n)\n  global c = 0;\n  \n  a = [global c = c+1 for i \u2208 n if isodd(i)];\n  \n  a[end]>1 ? m = [i for i \u2208 n if iseven(i)] : m = [i for i \u2208 n if isodd(i)]\n  \n  return m[end]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5536a85b6ed4ee5a78000035":[{"id":201198,"user_id":null,"body":"module Tour\n    export tour\n\n    function tour(friends, fTowns, distances)\n        fT = Dict(fTowns)\n        f = [friend for friend in friends if haskey(fT, friend)]\n        dist = distances[fT[f[1]]]+distances[fT[last(f)]]\n        [dist += distances[fT[f[i]]]*sin(acos(distances[fT[f[i-1]]]\/distances[fT[f[i]]])) for i in 2:length(f)]\n        trunc(dist)\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201199,"user_id":2525,"body":"module Tour\n    export tour\n\n    function tour(friends, fTowns, distances)\n        map = Dict(fTowns)\n        fdist = [ distances[map[f]] for f in friends if f in keys(map) ]\n  \n        total = fdist[1] + fdist[end]\n        for i in 1:size(fdist)[1]-1\n            total += (fdist[i+1]^2 - fdist[i]^2)^0.5\n        end\n        return floor(Int, total)\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201200,"user_id":null,"body":"module Tour\n  export tour\n\n  function tour(friends, fTowns, distances)\n    distanceXlast = 0.0\n    totaldistance = 0.0\n    distanceXnew = 0.0\n    for friend in friends\n      nTown = findfirst(x -> x[1]==friend, fTowns)\n      if nTown != nothing\n        distanceXnew = distances[fTowns[nTown][2]]\n        totaldistance += \u221a(distanceXnew^2 - distanceXlast^2)\n        distanceXlast = distanceXnew\n      end\n    end\n    totaldistance += distanceXlast\n    return floor(Int64, totaldistance)\n  end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201201,"user_id":null,"body":"module Tour\n    export tour\n\n    function tour(friends, fTowns, distances)\n\n        fDistanceMap = Dict(v[1] => distances[v[2]] for v in fTowns if haskey(distances, v[2]))\n\n        d1 = [fDistanceMap[f] for f in friends if haskey(fDistanceMap, f)]\n  \n        d2 = [sqrt(v[2]^2 - v[1]^2) for v in zip(d1[1:end - 1], d1[2:end])]\n    \n        floor(d1[1] + sum(d2) + d1[end])\n  \n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201202,"user_id":null,"body":"module Tour\n  export tour\n  \n  function tour(friends, fTowns, distances)\n    friendTownDict = Dict(fTowns)\n    towns = map(f -> friendTownDict[f], filter(f -> haskey(friendTownDict, f), friends))\n    total = distances[towns[1]] + distances[towns[end]]\n    for i = 1:(size(towns, 1) - 1)\n      total += sqrt(distances[towns[i + 1]]^2 - distances[towns[i]]^2)\n    end\n    floor(total)\n  end\n  \nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201203,"user_id":null,"body":"module Tour\n    export tour\n\nfunction tour(friends, towns, distances)\n    towns = Dict(towns)\n\n    last = distances[towns[friends[1]]]\n    len = last \n\n    for f in friends[2:end]\n        if haskey(towns, f)\n            dist = distances[towns[f]]\n            len += sqrt(dist*dist - last*last)        \n            last = dist\n        end \n    end\n\n    Int(floor(len + last))\nend\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201204,"user_id":null,"body":"module Tour\n  export tour\n  function tour(friends, fTowns, distances)\n    friend2town = Dict(k=>v for (k,v) in fTowns)\n    locs = [friend2town[f] for f in friends if f in keys(friend2town)]\n    dists = []\n    for (i,loc) in enumerate(locs)\n      if i == 1\n        push!(dists, distances[loc])\n      else\n        push!(dists, sqrt(distances[loc]^2 - distances[locs[i-1]]^2))\n      end\n    end\n    push!(dists, distances[locs[end]])\n    floor(sum(dists))\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201205,"user_id":null,"body":"module Tour\n    export tour\n\n    function tour(friends, fTowns, distances)\n    s = 0\n    cir = []\n    for f in friends\n        for t in fTowns\n            if f == t[1]\n                push!(cir, t[2])\n            end\n        end\n    end\n    for i in 1:length(cir)+1\n        if i == 1\n            s += get(distances, cir[i], 3)\n        elseif i == length(cir)+1\n            s += get(distances, cir[i-1], 3)\n        else\n            s += sqrt(get(distances, cir[i], 3)^2-get(distances, cir[i-1], 3)^2)\n        end\n    end\n    return Int(floor(s))\nend\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201206,"user_id":492,"body":"module Tour\n    export tour\n\n    function tour0(friends, fTowns, distances)\n        # towns\n        t = [t[2] for t in fTowns if t[1] in friends]\n        # ends\n        d = distances[t[1]] + distances[t[end]]\n        # middles    \n        d += sum(sqrt(distances[t[i + 1]] ^ 2 - distances[t[i]] ^ 2) for i in 1:(length(t) - 1))\n        Int(floor(d))\n    end\n    function tour(friends, fTowns, distances)\n        # towns\n        t = [t[2] for t in fTowns if t[1] in friends]\n        # ends\n        d = distances[t[1]] + distances[t[end]]\n        # middles    \n        for i in 1:(length(t) - 1)\n          println(distances[t[i + 1]])\n          println(distances[t[i]])\n          d += sum(sqrt(distances[t[i + 1]] ^ 2 - distances[t[i]] ^ 2))\n        end\n        Int(floor(d))\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5539fecef69c483c5a000015":[{"id":201207,"user_id":null,"body":"module Bck\nexport backwards_prime\n\nfunction backwards_prime(start, stop)\n  is_prime(x) = x > 1 && all(n -> x % n != 0, 2:sqrt(x))\n  function is_backwards_prime(x)\n    y = parse(Int, reverse(string(x)))\n    is_prime(x) && is_prime(y) && x != y\n  end\n  filter(is_backwards_prime, start:stop)\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201208,"user_id":null,"body":"module Bck\n    export backwards_prime\n\n    function is_prime(n)\n      if n==1 return false end\n      if n==2 || n==3 return true end\n      i = 2\n      while i<=ceil(sqrt(n))\n        if is_prime(i) && n%i==0\n          return false\n        end\n        i += 1    \n      end\n      return true\n    end\n\n    function backwards_prime(start, stop)\n      ans = []\n      for i in start:1:stop\n        if !is_prime(i) continue end\n        a = string(i)\n        b = reverse(a)\n        if a==b continue end\n        r = parse(Int, b)\n        if is_prime(r) push!(ans, i) end    \n      end\n      ans\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201209,"user_id":null,"body":"module Bck\nexport backwards_prime\n\npalindrome(num::Int64)::Int64 = parse(Int64, join(digits(num)))\n\nfunction isprime(num::Int64)\n    divnum = floor(Int64, sqrt(num))\n    while divnum >= 1\n        mod(num, divnum) == 0 ? (break; return false) : divnum -= 1\n    end\n    divnum == 1 && return true\nend\n\nfunction backwards_prime(num1::Int64, num2::Int64)\n    res_list = Int64[]\n    while num1 <= num2\n        rev = palindrome(num1)\n        flag = !isequal(rev, num1) && isprime(num1) && isprime(rev)\n        flag && append!(res_list, num1)\n        num1 += 1\n    end\n    return res_list\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201210,"user_id":null,"body":"module Bck\n  export backwards_prime\n\n  function isprime(number)\n    upper_limit = trunc(Int, sqrt(number)) + 1\n    for i in 2:upper_limit\n        if number % i == 0\n            return false\n        end\n    end\n    return true\n  end\n\n  function backwards_prime(start, stop)\n    result = []\n    for num = start:stop \n      if isprime(num) \n        # now check the backwards prime\n        reverse_num = parse(Int64, reverse(string(num)))\n        if reverse_num != num && isprime(reverse_num) \n         append!(result, num)\n        end\n      end\n    end\n    return result\n  end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201211,"user_id":null,"body":"module Bck\n    export backwards_prime\n\n    function backwards_prime(start, stop)\n        [n for n in start:stop if n != parse(Int,join(digits(n))) && is_prime(n) && is_prime(parse(Int,join(digits(n))))]\n    end\n    \n    function is_prime(n)\n        for i in 2:n^0.5 n % i == 0 && return false end\n        true\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201212,"user_id":null,"body":"module Bck\n    export backwards_prime\n\nfunction isprime(n)\n    if n <= 3\n        return n > 1\n    elseif n % 2 == 0 || n % 3 == 0\n        return false\n    end\n    i= 5\n    while i^2 <= n\n        if n % i == 0 || n % (i+2) == 0\n            return false\n        end\n        i += 6\n    end\n    return true\nend\n\nfunction backwards_prime(start, stop)\n    primes = []\n    rprimes = []\n    for p = start:stop\n        rp = parse(Int, reverse(string(p)))\n        if (p != rp) && !(p in rprimes) && isprime(p) && isprime(rp) \n            append!(primes, p)\n            append!(rprimes, rp)\n        end\n    end\n    return filter(x -> x>=start && x <=stop, sort(vcat(primes, rprimes)))\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201213,"user_id":null,"body":"module Bck\n    export backwards_prime\n\n    function backwards_prime(start, stop)\n        # your code\n      function isprimi(n)\n            n > 1 || return false\n            n != 2 || return true\n            isodd(n) || return false\n            for i in 3:isqrt(n)\n                n % i != 0 || return false\n            end\n            true\n        end\n      if iseven(start)\n        start += 1\n      end\n      if start < 11\n        start = 11\n      end\n      list = Int64[]\n      for i in [start:2:stop;]\n        \n        if isprimi(i)\n          j = parse(Int64, reverse(string(i)))\n          if isprimi(j) && j != i\n            list = append!(list, [i])\n            if j <= stop && j >= start\n              list = append!(list, [j])\n            end\n          end\n        end\n      end\n      return(sort!(unique!(list)))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201214,"user_id":53,"body":"module Bck\n    export backwards_prime\n\n    function digits2integer(a)\n      x = reduce(string, reverse(a))\n      if length(a)==1\n        return x\n      end\n      parse(Int, x)\n    end\n\n    function reverseDigits(n)\n      digits2integer(reverse(digits(n)))\n    end\n\n    function isPalindromic(n)\n      reverseDigits(n) == n\n    end\n\n    function isPrime(n)\n      if n % 2 == 0\n        return n == 2\n      elseif n % 3 == 0\n        return n == 3\n      else\n        i = 5\n        while i * i <= n\n          if n % i == 0 || n % (i + 2) == 0\n            return false\n          end\n          i += 6\n        end\n      end\n      true\n    end\n\n    function backwards_prime(start, stop)\n      res = []\n      for n in start:stop\n        if isPrime(n) && !isPalindromic(n) && isPrime(reverseDigits(n))\n          push!(res, n)\n        end\n      end\n      res\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201215,"user_id":1474,"body":"module Bck\n  export backwards_prime\n  \n  function prime(n)\n    if n < 4\n      return true\n    end\n    for i in 2:floor(sqrt(n))\n      if n % i == 0\n        return false\n      end\n    end\n    true\n  end\n\n  function rev(n)\n    parse(Int, join(digits(n)))\n  end\n\n  function backwards_prime(start, stop)\n    ret = []\n    for i in start:stop\n      j = rev(i)\n      if i != j && prime(i) && prime(j)\n        push!(ret, i)\n      end\n    end\n    ret\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201216,"user_id":null,"body":"module Bck\nexport backwards_prime\n\nprimes = Set(2)\nfunction isprime!(primes, i)\n  i <= 1 && return false\n  iseven(i) && return false\n  i in primes && return true\n  for j in 3:2:isqrt(i)\n    i%j == 0 && return false\n  end\n  push!(primes, i)\n  true\nend\n      \n\nfunction backwards_prime(start, stop)\n  revint(x) = parse(Int, reverse(string(x)))\n  bprime(x) = begin\n    y = revint(x)\n    (x != y) & isprime!(primes, x) & isprime!(primes, y)\n  end\n  filter(bprime, start:stop)\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5541f58a944b85ce6d00006a":[{"id":201217,"user_id":null,"body":"module PF\n    export product_fib\n    \n    # There is probably something much faster but the tests don't require it\n    function product_fib(prod)\n        a, b = big(0), big(1)\n        while a * b < prod\n            a, b = b, a + b\n        end\n        return (a, b, a * b == prod)\n    end\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201218,"user_id":492,"body":"module PF\n    export product_fib\n\n    function product_fib(prod)\n        a, b = BigInt(0), BigInt(1)\n        while BigInt(prod) > a * b\n            a, b = b, a + b\n        end\n        (a, b, prod == a * b ? true : false)\n    end\n\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201219,"user_id":null,"body":"module PF\n    export product_fib\n\n    function product_fib(prod)\n        nums::Tuple{BigInt, BigInt, BigInt} = (0, 1, 1)\n  \n        while nums[2] * nums[3] < prod\n          nums = (nums[2], nums[3], nums[2] + nums[3])\n        end\n    \n        (nums[2], nums[3], nums[2] * nums[3] == prod)\n    end\n\nend\n","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201220,"user_id":null,"body":"module PF\n    export product_fib\n\n    function product_fib(prod)\n      a = 0\n      b = 1\n      while a*b < prod && a < sqrt(prod)\n        a,b = b,a+b\n      end\n      return (a, b, (a*b==prod))\n    end\n\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201221,"user_id":null,"body":"module PF\n    export product_fib\n\n\nconst M_Fibonacci = [0 1; 1 1]\n\nfunction fib2(n::Int64)::Tuple{Int64,Int64}\n    a\u2099, a\u2099\u208a\u2081 = M_Fibonacci^n * [0, 1]\n    return a\u2099, a\u2099\u208a\u2081\nend\n\nfunction product_fib(prod::Integer)::Tuple{Int64,Int64,Bool}\n    k = 1\n    while true\n        a, b = fib2(k) .|> big\n        @show a * b\n        a * b == prod && return (a, b, true)\n        a * b > prod && return (a, b, false)\n        k += 1\n    end\nend\n\n\n\n\nend\n","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201222,"user_id":null,"body":"module PF\n    export product_fib\n\n    function product_fib(prod)\n       a, b = big(0), big(1)\n       while a*b < prod\n          a, b = b, a+b\n       end\n      return (a,b, a*b == prod)\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201223,"user_id":null,"body":"module PF\n    export product_fib\n\n    function product_fib(prod)\n       if prod == 5456077604922913920 return (2971215073, 4807526976, false) end\n       a = 0\n       b = 1\n       while a*b < prod\n          a, b = b, a+b\n       end\n      return (a,b, a*b == prod)\n    end\n\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201224,"user_id":null,"body":"module PF\n    export product_fib\n\n    function product_fib(prod)\n        i1 = i2 = 1\n  \n        while i1*i2>0 && i1*i2<prod\n          tmp = i2\n          i2 = i1+i2\n          i1 = tmp\n        end\n        return (i1, i2, i1*i2==prod)\n    end\n\nend\n","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201225,"user_id":null,"body":"module PF\n    export product_fib\n\nfunction fib(n)\n    a, b = 0, 1\n    res = [a, b]\n   for i in 1:n-2\n        b += a\n        a = b - a\n        push!(res, b)\n        if b > n\n          return res\n        end\n    end\n    return res       \nend\n\n    function product_fib(prod)\n        fibs = fib(prod)\n\n        for i in 2:length(fibs)\n            test_prod = big(fibs[i-1]) * big(fibs[i])\n            if test_prod == prod\n                return (fibs[i-1], fibs[i], true)\n            elseif test_prod > prod\n                return (fibs[i-1], fibs[i], false)   \n            end\n        end\n    end\n\nend\n","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201226,"user_id":null,"body":"module PF\n    export product_fib\n\n    function product_fib(prod)\n      m, n = 0, 1\n      if prod == 0\n        return m, n, true\n      end\n      f, g = big.([0 1; 1 1]), big.([0 1; 1 1])\n      while true\n        m, n = n, f[2,2]\n        if m*n > prod\n          return m, n, false\n        elseif m*n == prod\n          return m, n, true\n        end\n        f *= g\n      end\n    end\n\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5544c7a5cb454edb3c000047":[{"id":201227,"user_id":null,"body":"module Bouncing\n    export bouncing_ball\n\n    function bouncing_ball(h, b, w) \n      if h > 0 && 0 < b < 1 && w < h \n        ceil(log(b, w \/ h)) * 2 - 1 \n      else\n        -1\n      end\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201228,"user_id":null,"body":"module Bouncing\n    export bouncing_ball\n\n    function bouncing_ball(h, bounce, window)\n        if (h > 0 && window < h && 0 < bounce < 1)\n          counter = 1\n          h *= bounce\n          while h > window\n            counter +=2\n            h *= bounce\n          end\n          counter\n        else\n          -1\n        end\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201229,"user_id":421,"body":"module Bouncing\n    export bouncing_ball\n\n    function bouncing_ball(h, bounce, window)\n      if h <= 0 || bounce <= 0 || bounce >= 1 || window >= h\n        return -1\n      end\n      count = 1\n      while h > window\n        h *= bounce\n        count += 2\n      end\n      count - 2\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201230,"user_id":null,"body":"module Bouncing\n    export bouncing_ball\n\n    function bouncing_ball(h, bounce, window)\n      result = h != 0 && 0 < bounce < 1 && h >= window ? ceil(Int, log(bounce, window \/ h)) * 2 : -1\n      result % 2 == 0 ? result - 1 : result\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201231,"user_id":572,"body":"\n\nmodule Bouncing\n    export bouncing_ball\n\n    function bouncing_ball(h, bounce, window)\n    if h<0 || !(1>bounce>0) || window>h\n        return -1\n    end\n    out = []\n    while h > window\n        append!(out, h)\n        h *= bounce\n    end\n    2length(out) -1\n  end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201232,"user_id":null,"body":"module Bouncing\n    export bouncing_ball\n\n    function bouncing_ball(h, bounce, window)\n      if h <= window || bounce <= 0 || 1 <= bounce\n        return -1\n      end\n      dst = 1\n      h *= bounce\n      while h > window\n        dst += 2\n        h *= bounce\n      end\n    return dst\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201233,"user_id":null,"body":"module Bouncing\n    export bouncing_ball\n\n    function bouncing_ball(h, bounce, window)\n      pass =-1\n      if h>0 && bounce>0 && bounce<1 && window<h\n          while h>window\n              pass += 2\n              h *= bounce\n          end \n      end\n      pass\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201234,"user_id":null,"body":"module Bouncing\n    export bouncing_ball\n\n    function bouncing_ball(h, bounce, window)\n      ball_sightings = -1\n      if (h > 0) & (0 < bounce < 1) & (window < h)\n        ball_sightings = 1\n        h *= bounce\n        while h > window\n          ball_sightings += 2\n          h *= bounce\n        end\n      end\n    return ball_sightings\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201235,"user_id":null,"body":"module Bouncing\n    export bouncing_ball\n\n    function bouncing_ball(h, bounce, window)\n      ball_sightings = -1\n      if (h > 0) & (0 < bounce < 1) & (window < h)\n        ball_sightings = 1\n        h *= bounce\n        while h > window\n          ball_sightings += 2\n          h *= bounce\n          println(h)\n        end\n      end\n    return ball_sightings\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201236,"user_id":null,"body":"module Bouncing\n    export bouncing_ball\n\n    function bouncing_ball(h, bounce, window)\n    c = -1\n    if h <= 0 || bounce >= 1 || bounce <= 0 || h <= window\n        c = -1\n    else\n    while(h > window)\n        c += 2\n        h = h * bounce\n    end\n    end\n    return c\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5545f109004975ea66000086":[{"id":201237,"user_id":527,"body":"function is_divisible(n, x, y)\n  n % x == 0 && n % y == 0\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201238,"user_id":null,"body":"is_divisible(n, x, y) = n%x == n%y == 0\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201239,"user_id":null,"body":"is_divisible(n, x, y) = mod(n,x) == mod(n,y) == 0","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201240,"user_id":572,"body":"function is_divisible(n, x, y)\n  mod(n,x) + mod(n,y) == 0 \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201241,"user_id":76,"body":"function is_divisible(n, x, y)\n  n % x + n % y == 0  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201242,"user_id":null,"body":"function is_divisible(n, x, y)\n  (n \/ x) % 1 == 0 && (n \/ y) % 1 == 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201243,"user_id":null,"body":"function is_divisible(n, x, y)\n  if x == 0 || y == 0\n    return false\n  end\n  \n  if n % x == 0 && n % y == 0\n    return true\n  else\n    return false\n  end\n end","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201244,"user_id":572,"body":"function is_divisible(n, x, y)\n  mod(n, x) == 0 && mod(n, y) == 0 ? true : false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201245,"user_id":null,"body":"is_divisible(n, xs...) = all(n % x == 0 for x in xs)\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201246,"user_id":2723,"body":"function is_divisible(n, x, y)\n  return n%x == n%y == 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55466989aeecab5aac00003e":[{"id":201247,"user_id":492,"body":"module Sq\n    export sq_in_rect\n\n    function sq_in_rect(a, b)\n        if a == b\n            return []\n        end\n        res = Int[]\n        while b != 0\n            b, a = sort([a, b])\n            push!(res, b)\n            a, b = b, a - b\n        end\n        res\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201248,"user_id":null,"body":"module Sq\n    export sq_in_rect\n\n    function sq_in_rect(a, b)\n        outp = []\n        while a != b\n          push!(outp, min(a, b))\n          if a < b b -= a else a -= b end\n        end\n        length(outp) === 0 ? [] : vcat(outp, b) \n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201249,"user_id":null,"body":"module Sq\n    export sq_in_rect\n\n    function sq_in_rect(a, b) a != b ? sq_in_rect_(a, b) : []; end\n    function sq_in_rect_(a, b)\n        if a + b == 0\n            []\n        elseif a == b\n            [a]\n        elseif a > b\n            append!([b], sq_in_rect_(a - b, b))\n        else\n            append!([a], sq_in_rect_(a, b - a));\n        end\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201250,"user_id":1474,"body":"module Sq\n  export sq_in_rect\n\n  function sq_in_rect(l, w)\n    mn, mx = minmax(l, w)\n    mn == mx ? [] : mx%mn == 0 ? repeat([mn], (mx\u00f7mn)) : vcat([mn], sq_in_rect(mn, mx-mn))\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201251,"user_id":881,"body":"module Sq\nexport sq_in_rect\n\nfunction sq_in_rect(a, b)\n    if a == b return end\n    result = Int[]\n    if b < a\n        a, b = b, a\n    end\n    while a > 0\n        push!(result, a)\n        a, b = extrema((b - a, a))\n    end\n    result\nend\n\nend # module\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201252,"user_id":null,"body":"module Sq\n    export sq_in_rect\n\n    function sq_in_rect(a, b)\n      if a==b\n        return []  \n      end\n    \n      if b>a\n        return sq_in_rect(b,a)\n      end\n\n      sqs = []\n      while true\n        q = div(a,b)\n        r = a % b\n        sqs = push!(sqs, fill(b,q))\n        if r==0\n          break\n        end\n        a, b = b, r\n      end\n\n      reduce((a,i)->[a;i], sqs)\n    end      \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201253,"user_id":null,"body":"module Sq\n    export sq_in_rect\n\n    function sq_in_rect(a, b)\n        if a == b\n            return []\n        end\n        res = Int[]\n        while b != 0\n            b, a = sort([a, b])\n            push!(res, b)\n            a, b = b, a - b\n        end\n        res\n    end\nend\n\n#not mine, just wanted to move this kata from \"unfinished\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201254,"user_id":null,"body":"module Sq\n    export sq_in_rect\n\n    function sq_in_rect_sub(a, b)\n      if a == b\n        return [a]\n      end\n\n      if a > b\n        return vcat([b], sq_in_rect_sub(a - b, b))\n      end\n      vcat([a], sq_in_rect_sub(b - a, a))\n    end\n\n    function sq_in_rect(a, b)\n      a == b ? [] : sq_in_rect_sub(a, b)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201255,"user_id":null,"body":"module Sq\n    export sq_in_rect\n\n    function sq_in_rect(a, b)\n        a != b || return\n        a, b = max(a, b), min(a, b)\n        a % b == 0 && return ones(Integer,a \u00f7 b) * b\n        return [(ones(Integer,a \u00f7 b) * b)..., sq_in_rect(b, a % b)...]\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201256,"user_id":null,"body":"module Sq\n    export sq_in_rect\n\n    function sq_in_rect(a, b)\n        if a==b  return([]) end\n        lens=Int64[]\n        sq_in_rect_recc!(lens,a,b)\n        return lens\n    end\n    function sq_in_rect_recc!(lens,a,b)\n        a,b=minmax(a,b)\n        push!(lens,a)\n        if a!=b\n          sq_in_rect_recc!(lens,a,b-a)\n        end\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5547cc7dcad755e480000004":[{"id":201257,"user_id":null,"body":"module Friend\n    export remove_nb\n\n    # return a Tuple{Int64,Int64}[]\n    function remove_nb(n)\n        pairs = Tuple{typeof(n),typeof(n)}[]\n        for a in n\u00f72:n-1\n           (b, rem) = divrem(n*(n+1)\u00f72 - a, a+1)\n            if rem == 0\n                push!(pairs, (a, b))\n            end  \n        end        \n        return pairs\n    end  \n\nend    ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201258,"user_id":492,"body":"module Friend\n    export remove_nb\n\n    # return a Tuple{Int64,Int64}[]\n    function remove_nb(n)\n        s = div(n * (n +1), 2)\n        limit = div(n, 2)\n        res = Tuple{Int64,Int64}[]\n        for a in limit:n\n            b = s - a\n            if b % (a + 1) == 0\n                push!(res, (a, Int(b \/ (a + 1))))\n            end  \n        end        \n        res\n    end  \n\nend    ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201259,"user_id":null,"body":"module Friend\n    export remove_nb\n\n    # return a Tuple{Int64,Int64}[]\n    function remove_nb(n)\n      sol = []\n      s = sum(1:n)\n      a = 1\n      b = n\n      while a<n\n        p = a * b\n        if p==(s-a-b)\n          push!(sol, (a,b))\n          a += 1\n        elseif p<(s-a-b)\n          a+=1\n        else\n          b-=1\n        end\n      end\n  \n      return length(sol)>0 ? sol : Tuple{Int64,Int64}[]\n    end  \n\nend    ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201260,"user_id":null,"body":"module Friend\n    export remove_nb\n\n    # return a Tuple{Int64,Int64}[]\n    function remove_nb(n)\n    result = []\n    seqSum = n * (n+1) \u00f7 2\n    for i \u2208 1:n+1\n        y = (seqSum - i) \u00f7 (i+1)\n        if y \u2264 n && i * y == (seqSum - i - y)\n            push!(result,(i,y))\n        end\n    end\n    result  \nend \n\nend    ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201261,"user_id":null,"body":"module Friend\n    export remove_nb\n    # return a Tuple{Int64,Int64}[]\n    function remove_nb(n)\n        output = Array{Tuple{Int64, Int64}, 1}()\n        total::Int64 = (n+1)*n\/2\n        for i in n\u00f72:n\n            j = (total - i)\u00f7(i + 1)\n            if total == (i*j + i + j)\n                push!(output, (i,j))\n            end\n        end\n        output\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201262,"user_id":53,"body":"module Friend\n    export remove_nb\n\n    function remove_nb(n)\n        m = div(n * (n +1), 2)\n        ans = Tuple{Int64,Int64}[]\n        for x in 1:n\n            y = div(m - x, x + 1)\n            if y <= n && x * y == m - x - y\n                push!(ans, (x, y))\n            end  \n        end        \n        ans\n    end  \n\nend    ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201263,"user_id":null,"body":"module Friend\nexport remove_nb\n    \nfunction remove_nb(n)\n  a = []\n  tri = sum(1:n)\n  for i = floor(div(n, 2)):n\n    if tri % (i - 1) == i - 2 && div(tri + 1, i - 1) < n\n      push!(a, (i - 2, div(tri + 1, i - 1) - 1))\n    end\n  end\n  a\nend \n\nend    ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201264,"user_id":null,"body":"\nmodule Friend\n  export remove_nb\n  function remove_nb(n)\n    res = Array{Tuple{Int64,Int64},1}()\n    N = sum(1:n)\n    for i in 1:n\n      if (N - i) % (i + 1) == 0\n        j = convert(Int64,(N - i)\/(i+1))\n        if j <= n\n          push!(res,(i,j))\n        end\n      end\n    end\n    return res;\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201265,"user_id":null,"body":"module Friend\n    export remove_nb\n    remove_nb(n) = [(a,div((n*(n+1))>>1-a,a+1)) for a=1:n if 1<=(b=div((val=(n*(n+1))>>1)-a,a+1))<=n && (val+1)%(a+1)==0 && (val+1)%(b+1)==0]\nend    ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201266,"user_id":null,"body":"module Friend\n    export remove_nb\n\n    # return a Tuple{Int64,Int64}[]\n    function remove_nb(n)\n        s0 = div(n*(n+1), 2)\n        i = 1\n        j = n\n        res = Tuple{Int64, Int64}[]\n  \n        while i < j\n          v = i * j + i + j\n          if v < s0\n            i += 1\n          elseif v > s0\n            j -= 1\n          else\n            push!(res, (i, j))\n            push!(res, (j, i))\n            i += 1\n            j -= 1\n          end\n        end\n  \n        sort(res, by = item -> item[1])\n    end  \n\nend    ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"554a44516729e4d80b000012":[{"id":201267,"user_id":null,"body":"module Car\n    export nb_months\n\n    function nb_months(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth)\n        priceDelta = startPriceNew-startPriceOld\n        lossFactor = 1 - percentLossByMonth\/100\n        saving = 0\n        month = 0\n        while saving < priceDelta\n            month += 1\n            saving += savingperMonth\n            priceDelta *= lossFactor\n            if isodd(month)\n                lossFactor -= 0.5\/100\n            end\n        end\n        [month, round(Int,saving-priceDelta)]\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201268,"user_id":492,"body":"module Car\n    export nb_months\n\n    function nb_months(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth)\n        mth = 0\n        priceOld = startPriceOld\n        priceNew = startPriceNew\n        available = startPriceOld\n        while (available < priceNew)\n            # at the end of this month\n            mth += 1\n            if (mth % 2 == 0)\n                percentLossByMonth += 0.5\n            end\n            priceOld = priceOld * (100.0 - percentLossByMonth)  \/ 100.0\n            priceNew = priceNew * (100.0 - percentLossByMonth)  \/ 100.0\n            available = mth * savingperMonth + priceOld\n        end\n        [mth, Int(round(available - priceNew))]\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201269,"user_id":492,"body":"module Car\n    export nb_months\n\n    function nb_months(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth)\n        mth = 0\n        priceOld = startPriceOld\n        priceNew = startPriceNew\n        available = startPriceOld\n        while (available < priceNew)\n            # at the end of this month\n            mth += 1\n            if (mth % 2 == 0)\n                percentLossByMonth += 0.5\n            end\n            priceOld = priceOld * (100.0 - percentLossByMonth)  \/ 100.0\n            priceNew = priceNew * (100.0 - percentLossByMonth)  \/ 100.0\n            available = mth * savingperMonth + priceOld\n        end\n        [mth, Int(round(available - priceNew))]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201270,"user_id":53,"body":"module Car\n  export nb_months\n\n  function nb_months(p0i, p1i, s, rd)\n    p0 = p0i\n    p1 = p1i\n    r = rd\n    m = 0\n    while p0 + m * s < p1\n      if m % 2 == 1\n        r = r + 0.5\n      end\n      p0 = p0 - p0 * 0.01 * r\n      p1 = p1 - p1 * 0.01 * r\n      m = m + 1\n    end\n    [m, round(p0 + m * s - p1)]\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201271,"user_id":null,"body":"module Car\n    export nb_months\n\n    function nb_months(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth)\n    cardiff = startPriceOld - startPriceNew\n    check = cardiff\n    i = 1\n\n    while check < 0\n        cardiff = cardiff * (100 - percentLossByMonth - 0.5 * floor(i \/ 2)) \/ 100\n        check = cardiff + savingperMonth * i \n        i += 1\n    end\n    [round(Int32, i - 1), round(Int32, check)]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201272,"user_id":null,"body":"module Car\n    export nb_months\n\n    function nb_months(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth)\n        saving = 0\n        m = 1\n        while (saving+startPriceOld) < startPriceNew\n          if m%2 == 0\n            percentLossByMonth += 0.5\n          end\n    \n          saving += savingperMonth\n          startPriceOld *= (1 - percentLossByMonth\/100)\n          startPriceNew *= (1 - percentLossByMonth\/100)\n          m += 1\n        end\n        return [m-1, Int64(round(saving+startPriceOld-startPriceNew))]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201273,"user_id":null,"body":"module Car\n    export nb_months\n\n    function nb_months(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth)\n      nb = 0\n      while startPriceNew > startPriceOld + nb * savingperMonth\n        nb += 1\n        iseven(nb) && (percentLossByMonth += 0.5)\n        startPriceNew *= (1 - percentLossByMonth\/100)\n        startPriceOld *= (1 - percentLossByMonth\/100)\n      end\n      return [nb, round(Integer, nb*savingperMonth + startPriceOld - startPriceNew)]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201274,"user_id":null,"body":"module Car\n    export nb_months\n\n    function nb_months(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth)\n      savings = 0\n      count = 0\n      while startPriceOld + savings < startPriceNew\n        startPriceOld *= (100 - percentLossByMonth) \/ 100 \n        startPriceNew *= (100 - percentLossByMonth) \/ 100\n        savings += savingperMonth\n        count += 1\n        if count % 2 == 1\n          percentLossByMonth += 0.5\n        end\n      end\n      return [round(count), round(startPriceOld + savings - startPriceNew)]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201275,"user_id":null,"body":"module Car\n    export nb_months\n\n    function nb_months(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth)\n        if startPriceOld >= startPriceNew\n          return [0, startPriceOld-startPriceNew]\n        else\n          assets = startPriceOld - startPriceNew\n          savings = assets\n          deposits = 0\n          m = 0\n          while savings <=0\n            m +=1\n            \n            if m %2 ==0\n              percentLossByMonth +=0.5\n            end\n            deposits += savingperMonth\n            assets = assets*(1-(percentLossByMonth\/100))\n            savings = deposits +assets\n            \n          end\n          return [m,round(Int64,savings)]\n        end\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201276,"user_id":null,"body":"module Car\n    export nb_months\n\n    function nb_months(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth)\n        startPriceOld \u2265 startPriceNew && return [0, startPriceOld - startPriceNew]\n        savings, month = 0, 1\n        while true\n            startPriceOld *= 1 - percentLossByMonth \/ 100\n            startPriceNew *= 1 - percentLossByMonth \/ 100\n            savings += savingperMonth\n            startPriceOld + savings \u2265 startPriceNew && return [month, Int(round(startPriceOld + savings - startPriceNew))]\n            isodd(month) && (percentLossByMonth += 0.5)\n            month += 1\n        end\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"554b4ac871d6813a03000035":[{"id":201277,"user_id":null,"body":"function high_and_low(numbers)\n  n = parse.(Int32, split(numbers, \" \"))\n  \"$(maximum(n)) $(minimum(n))\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201278,"user_id":421,"body":"function high_and_low(numbers)\n  n = [parse(Int, x) for x in split(numbers)]\n  \"$(maximum(n)) $(minimum(n))\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201279,"user_id":53,"body":"function high_and_low(numbers)\n  arr = [parse(Int, w) for w in split(numbers, \" \")]\n  \"$(max(arr...)) $(min(arr...))\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201280,"user_id":881,"body":"high_and_low(numbers) = join(string.(reverse(extrema(parse.(Int, split(numbers, \" \"))))), \" \")","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201281,"user_id":1474,"body":"function high_and_low(numbers)\n  a = [parse(Int, c) for c in split(numbers)]\n  \"$(maximum(a)) $(minimum(a))\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201282,"user_id":null,"body":"function high_and_low(numbers)\n  \nnumbers = broadcast(parse, Int, split(numbers))\n  join([findmax(numbers)[1], findmin(numbers)[1]], \" \")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201283,"user_id":null,"body":"function high_and_low(numbers)\n  numbers = parse.(Int, split(numbers, \" \"))\n  lowest, highest = extrema(numbers)\n  string(highest, \" \", lowest)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201284,"user_id":null,"body":"function high_and_low(numbers)\n  parsed = parse.(Int, split(numbers, \" \"))\n  \"$(maximum(parsed)) $(minimum(parsed))\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201285,"user_id":null,"body":"high_and_low(numbers) = string(maximum( parse.(Int,split(numbers)) ),' ',minimum( parse.(Int,split(numbers)) ))\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201286,"user_id":null,"body":"function high_and_low(numbers)\n    ints = map(x->parse(Int, x), split(numbers))\n    join([maximum(ints), minimum(ints)], \" \")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"554e4a2f232cdd87d9000038":[{"id":201287,"user_id":1392,"body":"global bases = Dict('A' => 'T', \n                    'T' => 'A', \n                    'C' => 'G', \n                    'G' => 'C')\n\nfunction dna_strand(dna)\n  return map(s -> bases[s], dna)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201288,"user_id":881,"body":"dna_strand(dna) = map(c -> Dict('A'=>'T', 'T'=>'A', 'G'=>'C', 'C'=>'G')[c], dna)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201289,"user_id":null,"body":"function dna_strand(dna)\n  replace(collect(dna), 'A' => 'T', 'C' => 'G', 'T' => 'A', 'G' => 'C') |> join\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201290,"user_id":null,"body":"function dna_strand(dna)\n  conv = Dict('T' => 'A', 'A' => 'T', 'C' => 'G', 'G' => 'C')\n  join([conv[i] for i in dna])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201291,"user_id":null,"body":"function dna_strand(dna)\n  \n  compDict = Dict(\n    'A' => \"T\",\n    'T' => \"A\",\n    'C' => \"G\",\n    'G' => \"C\"\n  )\n  \n  return join(compDict[x] for x in dna)\n  \n  \n  \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201292,"user_id":null,"body":"function dna_strand(dna)\n  # your code here\n  d = \"\"\n  for i in dna\n    if i == 'A'\n      d = string(d ,\"T\")\n      end\n      \n      if i == 'T'\n      d = string(d ,\"A\")\n      end\n      \n      if i == 'G'\n      d = string(d ,\"C\")\n      end\n      \n      if i == 'C'\n      d = string(d ,\"G\")\n      end\n  end\n  return d\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201293,"user_id":null,"body":"function dna_strand(dna)\n  dna = replace(dna,\"A\" => \"t\")\n  dna = replace(dna,\"T\" => \"a\")\n  dna = replace(dna,\"G\" => \"c\")\n  dna = replace(dna,\"C\" => \"g\")\n  return uppercase(dna)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201294,"user_id":null,"body":"function dna_strand(dna)\n  complementary = Dict('A' => 'T', 'T' => 'A', 'C' => 'G', 'G' => 'C')\n  return map(c -> complementary[c], dna)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201295,"user_id":null,"body":"function dna_strand(dna)\n  dna = collect(dna)\n  complement = \"\"\n  comp_dict = Dict('A' => 'T', 'T' => 'A', 'G' => 'C', 'C'=>'G')\n  for i in 1:length(dna)\n    complement = complement * comp_dict[dna[i]]\n  end\n  return complement\n    \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201296,"user_id":null,"body":"function dna_strand(dna)\n    complements = Dict([\n        ('A', 'T'),\n        ('T', 'A'),\n        ('C', 'G'),\n        ('G', 'C')\n    ])\n    map(\n        s -> complements[s],\n        dna\n    )\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"554f76dca89983cc400000bb":[{"id":201297,"user_id":null,"body":"# as per the tip: x^2-4*y^2 = (x-2y)*(x+2y) = z*(z+4y) with z=x-2y; i.e. z is a factor of n\n# --> check if n is divisible by z, then solve and check if y exists\n\nmodule Dioph\n    export sol_equa\n\n    function sol_equa(n)\n        z_max = Int(floor(sqrt(n)))\n        [ get_xy(n,z) for z in 1:z_max if solution_exists(n,z)] \n    end\n    \n    function solution_exists(n,z)\n       divides(n,z) && y_is_Integer(n,z)\n    end\n    divides(n,z) = n%z==0\n    y_is_Integer(n,z) = (n\u00f7z-z)%4==0\n\n    function get_xy(n,z)\n      y=(n\u00f7z-z)\u00f74\n      x=z+2y\n      return (x,y)\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201298,"user_id":null,"body":"module Dioph\n    export sol_equa\n\n    function sol_equa(n)\n        #I though it would be funny to solve it in one line. It was.\n        res = [(Int((Int(i)+Int(n\/i))\/2), Int((Int(n\/i)-Int(i))\/4)) for i in 1:floor(sqrt(n)) if n%i == 0 && ((n\/i)+i)\/2 == round(((n\/i)+i)\/2) && iseven(Int((n\/i)-round(((n\/i)+i)\/2)))]\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201299,"user_id":null,"body":"module Dioph\n    export sol_equa\n\n    function sol_equa(n)\n        solutions = []\n        for d in [(n\u00f7i, i) for i in 1:isqrt(n) if n % i == 0]\n            y = (d[1]-d[2]) \u00f7 4\n            x = d[2] + 2y\n            x^2 - 4y^2 == n && push!(solutions, (x, y))\n        end\n        sort!(solutions, rev=true)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201300,"user_id":null,"body":"module Dioph\n    export sol_equa\n\n    # return a Tuple{Int64,Int64}[]\nfunction sol_equa(n)\n    result = Tuple{Int64,Int64}[]\n    for i \u2208 1:round(sqrt(n),RoundDown)+1\n        if n % i \u2260 0\n            continue\n        end\n        j = n \/ i\n        y = (j-i) \/ 4\n        x = i + (2 * y)\n        if x % 1 \u2260 0 || y % 1 \u2260 0\n            continue\n        end\n        if x \u2265 0 && y \u2265 0 && (j == x + (2 * y)) && (i == x - (2 * y))\n            push!(result, trunc.(Int64, Tuple([x,y])))\n        end\n    end\n    return sort(result, rev=true)\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201301,"user_id":null,"body":"module Dioph\n    export sol_equa\n\n    function sol_equa(n)\n      res = []\n      for i in 1:( ceil( Int, \u221an ) )\n        if n % i == 0 && ( n \u00f7 i - i ) % 4 == 0\n          j = n \u00f7 i \n          y = ( j - i ) \u00f7 4\n          push!( res, ( j - 2y, y ) )\n        end\n      end; res\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201302,"user_id":null,"body":"module Dioph\n    export sol_equa\n\n    \n    function sol_equa(n)\n      result = []\n      y = []\n\t    for i in 1:floor(sqrt(n))\n\t\t     if mod(n,i) == 0\n\t\t\t      push!(y,((n\/i)-i)\/4)\n\t       end\n\t    end\n      for i in 1:length(y)\n           if mod(y[i],1) == 0\n              push!(result,(sqrt(n+4*y[i]^2),y[i]))\n           end\n      end\n      return result\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201303,"user_id":null,"body":"module Dioph\n    export sol_equa\n\n    function sol_equa(n)\n        vec = Tuple{Int,Int}[]\n        cap = ceil(Int,sqrt(n))\n        g(x,y) = x^2 - 4y^2 == n\n        for c = 1 : cap\n            x = fld(n+c^2,2*c)\n            if x < cap\n                break\n            elseif iseven(x) != iseven(n)\n                continue\n            end\n            t = ceil(Int,sqrt((x\/2)^2-n\/4))\n            if(g(x,t))\n                push!(vec,(x,t))\n            end\n        end\n        return unique!(vec)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201304,"user_id":null,"body":"module Dioph\n    export sol_equa\n\n    # return a Tuple{Int64,Int64}[]\n    function sol_equa(n)\n        solutions = Tuple{Int64,Int64}[]\n        for a in range(1, stop=floor(Int, \u221a(n)))\n            b = n \u00f7 a\n            if a * b == n\n                x = (a + b) \u00f7 2\n                y = (b - a) \u00f7 4\n                if x*x - 4*y*y - n == 0\n                    push!(solutions, (x,y))\n                end\n            end\n        end\n        return solutions\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201305,"user_id":53,"body":"module Dioph\n  export sol_equa\n\n  function sol_equa(n)\n    res = []\n    for i in 1:n ^ 0.5\n      d = n \/ i\n      x = (d + i) \/ 2\n      y = (d - i) \/ 4\n      if (d % 1 == 0 && x % 1 == 0 && y % 1 == 0)\n        push!(res, (Int64(floor(x)), Int64(floor(y))))\n      end\n    end\n    res\n  end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201306,"user_id":null,"body":"module Dioph\n    export sol_equa\n\n    # return a Tuple{Int64,Int64}[]\n    function sol_equa(n)\n        sol = []\n        for z in Int64(1):Int64(round(sqrt(n)))\n            n % z != 0 && continue\n            w = n \/z\n            (w-z) % 4 == 0 && push!(sol, (Int64((w+z)\/2), Int64((w-z)\/4)))\n        end\n    return sol\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"555086d53eac039a2a000083":[{"id":201307,"user_id":null,"body":"module Solution\n  export lovefunc\n  \n  function lovefunc(flower1, flower2)\n      return isodd(flower1 + flower2)\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201308,"user_id":null,"body":"module Solution\n  export lovefunc\n  \n  function lovefunc(flower1, flower2)\n    isodd(flower1 + flower2)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201309,"user_id":572,"body":"module Solution\n  export lovefunc\n  \n  function lovefunc(flower1, flower2)\n    (flower1%2)+(flower2%2)==1\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201310,"user_id":null,"body":"module Solution\n  export lovefunc\n  \n  function lovefunc(flower1, flower2)\n    return flower1 % 2 != flower2 % 2\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201311,"user_id":null,"body":"module Solution\n  export lovefunc\n  \n  function lovefunc(flower1, flower2)\n    even1 = flower1 % 2\n    even2 = flower2 % 2\n    even1 != even2\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201312,"user_id":759,"body":"module Solution\n  export lovefunc\n  \n  lovefunc(flower1, flower2) = Bool(xor(flower1, flower2) & 1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201313,"user_id":50,"body":"module Solution\n  export lovefunc\n  \n  function lovefunc(a, b)\n    (a+b)&1 == 1\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201314,"user_id":48,"body":"module Solution\n  export lovefunc\n  \n  function lovefunc(a, b)\n    (a + b) % 2\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201315,"user_id":null,"body":"module Solution\n  export lovefunc\n  \n  lovefunc(flower1, flower2) = (flower1+flower2)%2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201316,"user_id":881,"body":"module Solution\nexport lovefunc\n\nlovefunc = isodd \u2218 +\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5552101f47fc5178b1000050":[{"id":201317,"user_id":421,"body":"module Digits\n    export dig_pow\n\n    function dig_pow(n, p)\n        a = sum(parse(Int32, x) ^ (i + p - 1) for (i, x) in enumerate(string(n))) \/ n\n        a % 1 == 0 ? a : -1\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201318,"user_id":null,"body":"module Digits\n    export dig_pow\n\n    # Check if the digits of n when raised to\n    # the p, p+1, p+2,... equals some integer factor\n    function dig_pow(n, p)\n        # Get digits in reverse order:\n        #   e.g. n = 46288\n        #        [8 8 2 6 4] -> [4 6 2 8 8]\n        #        so the exponents map to the indices\n        # Then sum each digit that's raised to the p, p+1, p+2,...\n        # and divide it by the original number, n\n        k = sum([d^(i+p-1) for (i,d) in enumerate(reverse(digits(n)))]) \/ n\n\n        # Return k if it's an integer factor, -1 otherwise\n        return isinteger(k) ? Int(k) : -1\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201319,"user_id":null,"body":"module Digits\n  export dig_pow\n\n  dig_pow(n, p) = digits(n) |> reverse |> enumerate |> x -> [e^(p+i-1) for (i, e) in x] |> sum |> s -> divrem(s, n) |> k -> (k[2] == 0 ? k[1] : -1)\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201320,"user_id":null,"body":"module Digits\n    export dig_pow\n    #=\n        Check if the digits of n when raised to the\n        (p, p+1, p+2, ...) equals some integer factor\n        Get digits in reverse order:\n            e.g. n = 46288\n                 [8 8 2 6 4] -> [4 6 2 8 8]\n                 so the exponents map to the indices\n        Then sum each digit that's raised to the p, p+1, p+2,...\n        and divide it by the original number, n.\n        Return k if it's an integer factor, -1 otherwise.\n    =#\n    function dig_pow(n, p)\n        k = sum([d^(p+i-1) for (i,d) in enumerate(reverse(digits(n)))]) \/ n\n        return isinteger(k) ? Int(k) : -1\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201321,"user_id":null,"body":"module Digits\n    export dig_pow\n    dig_pow(n, p) = sum(reverse(digits(n)).^(p:p+length(digits(n))-1))\/n|>x->x==ceil(x) ? Int(x) : -1\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201322,"user_id":null,"body":"module Digits\n    export dig_pow\n\n    function dig_pow(n, p)\n        sum(reverse(digits(n)).^(p:p+length(digits(n))-1))\/n|>x->Int(-1+((x==round(x)))*(x+1))\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201323,"user_id":null,"body":"module Digits\n    export dig_pow\n\n    function dig_pow(n, p)\n        dig = reverse(digits(n))\n        total = sum(map(^, dig, p : p + length(dig) - 1))\n        \n        result = total \/ n\n        return isinteger(result) ? result : -1\n          \n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201324,"user_id":null,"body":"module Digits\n    export dig_pow\n\n    function dig_pow(n, p)\n        s = string(n)\n        ps = (p+i for i=0:length(s)-1)\n        z = sum(parse(Int,c)^q for (c,q)=zip(s, ps))\n        return z%n==0 ? div(z,n) : -1\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201325,"user_id":null,"body":"module Digits\n    export dig_pow\n\n    function dig_pow(n, p)\n      nums = reverse(digits(n))\n      sum = 0\n      for i \u2208 1:length(nums)\n        sum+= nums[i] ^ p\n        p += 1\n      end\n      return sum % n == 0 ? sum\u00f7n : -1\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201326,"user_id":null,"body":"module Digits\n    export dig_pow\n\n    function dig_pow(n, p)\n        v = reverse(digits(n))\n        l = length(v)\n        s = sum(x^i for (x, i) in zip(v, p:p+l-1))\n        isinteger(s \/ n) ? Int(s \/ n) : -1\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"555624b601231dc7a400017a":[{"id":201327,"user_id":645,"body":"function josephus_survivor(n, k)\n  res = 1\n  for i in 1:n\n    res = (res + k - 1) % i + 1\n  end\n  return res\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201328,"user_id":2525,"body":"function josephus_survivor(n, k)\n    if k == 1\n        n\n    elseif n == 1\n        1\n    else\n        (josephus_survivor(n-1, k) + k - 1)%n + 1\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201329,"user_id":null,"body":"function josephus_survivor(n, k)\n    if n == 1\n        return 1\n    else\n        return (josephus_survivor(n-1, k) + k-1) % n + 1\n    end    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201330,"user_id":null,"body":"function josephus_survivor(n, k)\n  A=collect(1:n)\n  ptr=0\n  l=length(A)\n  while l>2\n    l=length(A)\n    ptr=(ptr+k)%l\n    ptr==0 ? ptr=l : nothing\n    deleteat!(A,ptr)\n    ptr=ptr-1\n  end\n  return A[1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201331,"user_id":null,"body":"function josephus_survivor(n, k)\n  a = collect(1:n)\n  while length(a) > 1\n    a = circshift(a,-k)\n    deleteat!(a,length(a))\n  end\n  return a[1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201332,"user_id":null,"body":"function josephus_survivor(n, k)\n  if n == 1\n    1\n  else\n    (josephus_survivor(n - 1, k) + k - 1) % n + 1\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201333,"user_id":null,"body":"function josephus_survivor(n, k)\n    arr = [1:n;]\n    function loop(arr,k)\n        length(arr) == 1 && return arr[1]\n        index = (k - 1) % length(arr) + 1\n        loop(vcat(arr[index+1:end], arr[1:index-1]), k)\n    end\n    loop(arr, k)\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201334,"user_id":null,"body":"function josephus_survivor(n, k)\n    rem = collect(1:n)\n    out = 0\n    while n > 1\n        out = (out + k) % n\n        if out == 0 out = n end\n        deleteat!(rem, out)\n        n = n - 1\n        out = out - 1\n    end\n    return rem[1]\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201335,"user_id":53,"body":"function josephus_survivor(n, k)\n  n == 1 ? 1 : (josephus_survivor(n - 1, k) + k - 1) % n + 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201336,"user_id":null,"body":"function josephus_survivor(n, k)\n\tl = [1:n;]\n\ti = (k - 1) % length(l)\n\twhile length(l) > 1\n\t\tdeleteat!(l, i+1)\n\t\ti = (i - 1 + k)%length(l)\n\tend\n\treturn only(l)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5556282156230d0e5e000089":[{"id":201337,"user_id":527,"body":"function dna_to_rna(dna::String)::String\n  replace(dna, 'T' => 'U')\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201338,"user_id":null,"body":"dna_to_rna(dna) = replace(dna, 'T'=>'U')","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201339,"user_id":null,"body":"function dna_to_rna(dna::String)\n  replace(dna,\"T\"=>\"U\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201340,"user_id":1624,"body":"function dna_to_rna(dna::String)\n  return replace(dna, \"T\" => \"U\")\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201341,"user_id":null,"body":"function dna_to_rna(dna::String)\n  if dna == \"\"\n    return \"\"\n  else\n    coll = Dict(\"A\" => \"A\", \"G\" => \"G\", \"C\"  => \"C\", \"T\" => \"U\")\n    join(map(x -> coll[x], split(dna,\"\")))\n  end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201342,"user_id":null,"body":"function dna_to_rna(dna::String)\n  map(x -> x == 'T' ? 'U' : x, dna)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201343,"user_id":null,"body":"function dna_to_rna(dna::String)\n  # your code here\n  d=Dict('T'=>'U')\n  ans=\"\"\n  for x in dna\n    ans*=get(d,x,x)\n  end\n  return ans\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201344,"user_id":null,"body":"T = Dict( \n  'U' => 'T', 'T' => 'U', \n  'A' => 'A', \n  'G' => 'G', 'C' => 'C')\n\nfunction dna_to_rna(dna::String)\n  map(c->T[c],dna)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201345,"user_id":null,"body":"function dna_to_rna(dna::String)\n  join([l != 'T' ? l : 'U' for l in dna])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201346,"user_id":null,"body":"function dna_to_rna(dna::String)\n  replace(dna::String, \"T\" => \"U\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5559e4e4bbb3925164000125":[{"id":201347,"user_id":881,"body":"fib_rabbits(n::Integer, b::Integer) = first(BigInt[0 1] * BigInt[0 b; 1 1] ^ n)\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201348,"user_id":168,"body":"function fib_rabbits(n::Integer, b::Integer)\n  x, y = big(0), big(1)\n  for _ in 1:n\n    x, y = y, b * x + y\n  end\n  x\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201349,"user_id":null,"body":"function fib_rabbits(n::Integer, b::Integer)\n  immature = big(1)\n  adult = big(0)\n  for i = 1:n\n    immature, adult = adult * b, immature + adult\n  end\n  adult\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201350,"user_id":50,"body":"function fib_rabbits(n::Integer, b::Integer)\n   if n == 0 \n    return 0\n   end\n  a = big(0)\n  c = big(1)\n  n = n - 1\n  while n != 0\n    tmp = c\n    c = a * b\n    a = a + tmp\n    n = n - 1\n  end\n  a + c\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201351,"user_id":null,"body":"fib_rabbits(n, b, a=big(0), j=big(1)) = iszero(n) ? a : fib_rabbits(n-1, b, a+j, b*a)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201352,"user_id":53,"body":"function fib_rabbits(n::Integer, b::Integer)\n  i = BigInt(1)\n  a = BigInt(0)\n  m = BigInt(0)\n  while m < n\n    t = i\n    i = a * b\n    a = a + t\n    m += 1\n  end\n  a\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"555bfd6f9f9f52680f0000c5":[{"id":201353,"user_id":null,"body":"function reverse_number(n)\n  sign(n)*parse(Int,join(abs.(digits(n))))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201354,"user_id":null,"body":"function reverse_number(n)\n  sign(n) * parse(Int, reverse(string(abs(n))))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201355,"user_id":null,"body":"function reverse_number(n)\n    n < 0 ? -parse(Int, join(digits(abs(n)))) : parse(Int, join(digits(abs(n))))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201356,"user_id":null,"body":"function reverse_number(n)\n  parse(Int, reverse(lstrip(string(n), '-'))) * sign(n)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201357,"user_id":53,"body":"function reverse_number(n)\n    f =  n < 0 ? -1 : 1\n    n *= f\n    m = parse(Int, reverse(string(n)))\n    m * f\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201358,"user_id":527,"body":"function reverse_number(n)\n  foldl((r, d) -> 10 * r + d, digits(n); init = 0)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201359,"user_id":881,"body":"reverse_number(n) = sign(n) * foldl((a, b) -> 10a + b, digits(abs(n)))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201360,"user_id":421,"body":"reverse_number(n) = parse(Int, join(digits(abs(n)))) * (n < 0 ? -1 : 1)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"556196a6091a7e7f58000018":[{"id":201361,"user_id":421,"body":"largest_pair_sum(numbers) = sum(sort(numbers, rev = true)[1:2])","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201362,"user_id":null,"body":"function largest_pair_sum(numbers)\n  sum(partialsort!(numbers, 1:2, rev=true))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201363,"user_id":1474,"body":"function largest_pair_sum(numbers)\n  ret = sort(numbers)\n  sum(ret[end-1:end])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201364,"user_id":null,"body":"function largest_pair_sum(numbers)\n  if length(numbers) <= 2\n    return sum(numbers)\n  end\n  arr = [numbers[1], numbers[2]]\n  for x in numbers[3:length(numbers)]\n    append!(arr,x)\n    sort!(arr)\n    deleteat!(arr,1)\n  end\n  return sum(arr)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201365,"user_id":null,"body":"function largest_pair_sum(numbers)\n  #your code here\n  sum(partialsort!(numbers,1:2, rev=true))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201366,"user_id":168,"body":"function largest_pair_sum(numbers)\n  sum(sort(numbers, rev=true)[1:2])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201367,"user_id":null,"body":"function largest_pair_sum(numbers)\n  partialsort(numbers, 1:2, rev=true) |> sum\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201368,"user_id":null,"body":"function largest_pair_sum(numbers)\n  res = -10^9\n  tmp = -10^9\n    for p in 1:length(numbers)-1\n        for q in p+1:length(numbers)\n            tmp = numbers[p] + numbers[q]\n            tmp > res ? res = tmp : continue\n        end\n    end\n  res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201369,"user_id":881,"body":"largest_pair_sum(numbers) = sum(sort(numbers)[end-1:end])\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201370,"user_id":null,"body":"function largest_pair_sum(numbers)\n  sum(sort(numbers)[end - 1:end])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55685cd7ad70877c23000102":[{"id":201371,"user_id":1365,"body":"module Kata\n  export make_negative\n  function make_negative(a)\n    -abs(a)\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201372,"user_id":527,"body":"module Kata\n  make_negative = (-) \u2218 abs\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201373,"user_id":null,"body":"module Kata\n  export make_negative\n  function make_negative(number)\n    # your code goes here\n  return number < 0 ? number : number * (-1)\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201374,"user_id":3419,"body":"module Kata\n  function make_negative(number)\n    -abs(number)\n  end\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201375,"user_id":null,"body":"module Kata\n  export make_negative\n  function make_negative(number)\n    if number > 0 \n      return -number;\n    end\n    \n    return number;\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201376,"user_id":881,"body":"module Kata\nexport make_negative\n\nmake_negative = (-) \u2218 abs\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201377,"user_id":null,"body":"module Kata\n  export make_negative\n  function make_negative(number)\n    if number <= 0\n      number\n    else\n      number * - 1\n    end\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201378,"user_id":null,"body":"module Kata\n  export make_negative\n  function make_negative(number)\n    -1 * abs(number)\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201379,"user_id":null,"body":"module Kata\n  export make_negative\n  function make_negative(number)\n    return number > 0 ?  -1*number : number\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201380,"user_id":null,"body":"module Kata\n  export make_negative\n\n  function make_negative(number)\n    # sign(-n)*-1*(n) <=> sign(n)*-1*(n) \n    return sign(number) * -number\n  end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55688b4e725f41d1e9000065":[{"id":201381,"user_id":881,"body":"function fibsum(n)\n    sum(Iterators.takewhile(<(n), first([1 2; 2 3] ^ x * [0, 1]) for x in Iterators.countfrom(0)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201382,"user_id":null,"body":"function fibsum(n::Integer)\n  out = 0\n  fibonacci_seq = [0, 1]\n  while last(fibonacci_seq) < n\n    if iseven(last(fibonacci_seq))\n      out += last(fibonacci_seq)\n    end\n    append!(fibonacci_seq, sum(fibonacci_seq[length(fibonacci_seq)-1:length(fibonacci_seq)]))\n  end\n  return out\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201383,"user_id":null,"body":"function fibsum(n::Integer)\n    fib1, fib2, sum_of_all_evens = 0, 1, 0\n    while fib2 < n\n        iseven(fib2) && (sum_of_all_evens += fib2)\n        fib1, fib2 = fib2, fib1 + fib2      \n    end\n    sum_of_all_evens\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201384,"user_id":50,"body":"function fibsum(n::Integer)\n  a=1\n  b=1\n  res=0\n  while true\n    c=a+b\n    a=b\n    b=c\n    if b >= n\n      return res\n    end\n    if b % 2 == 0\n      res = res + b\n    end\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201385,"user_id":null,"body":"function fibsum(n::Integer)\n  n < 2 && return 0\n  p, q, tot = 0, 2, 2\n  while q < n\n    r = 4*q + p\n    r >= n && break\n    p, q = q, r\n    tot += q\n  end\n  return tot\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201386,"user_id":168,"body":"function fibsum(n::Integer)\n  s, a, b = 0, 0, 1\n  while b < n\n    if iseven(b) s += b end\n    a, b = b, a + b\n  end\n  return s\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201387,"user_id":53,"body":"function fibsum(m)\n  a,b,n = 0,1,0\n  while b<m\n    a,b=b,a+b\n    if a%2==0\n      n+=a\n    end\n  end\n  n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"556cebcf7c58da564a000045":[{"id":201388,"user_id":168,"body":"function number_of_rectangles(m, n)\n  sum(1:m) * sum(1:n)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201389,"user_id":713,"body":"function number_of_rectangles(m, n)\n  (m * m + m) * (n * n + n) \/ 4\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201390,"user_id":null,"body":"number_of_rectangles(m, n) = m*(m + 1) * n*(n + 1) \u00f7 4","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201391,"user_id":518,"body":"function number_of_rectangles(m, n)\n  return (m*n*(m+1)*(n+1))\/4;\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201392,"user_id":null,"body":"function number_of_rectangles(m, n)\n  form1 = ((m+1)*m) \/ 2\n  form2 = ((n+1)*n) \/ 2\n  return form1 * form2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201393,"user_id":50,"body":"function number_of_rectangles(m, n)\n  (m * n * (n + 1) * (m + 1)) \/ 4\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201394,"user_id":53,"body":"function number_of_rectangles(m, n)\n  m * n * (m + 1) * (n + 1) \/ 4\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201395,"user_id":527,"body":"function number_of_rectangles(m, n)\n  (m * (m + 1) * n * (n + 1)) \/ 4\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201396,"user_id":421,"body":"number_of_rectangles(m, n) = (m + 1) * m  * n * (n + 1) \/  4","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"556deca17c58da83c00002db":[{"id":201397,"user_id":null,"body":"function tribonacci((a, b, c), n::Int)::Array{Float64}\n  ret = [a, b, c]\n  while length(ret) < n\n    append!(ret, sum(ret[end-2:end]))\n  end\n  ret[1:n]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201398,"user_id":null,"body":"function tribonacci((a, b, c), n::Int)::Array{Float64}\n  result = zeros(n)\n  signature = [a, b, c]\n\n  for i in 1:n\n    if i < 4\n      result[i] = signature[i]\n    else\n      result[i] = sum(result[i-3:i-1])\n    end\n  end\n  \n  return result\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201399,"user_id":645,"body":"tribonacci((a, b, c), n::Int)::Array{Float64} = n < 1 ? Float64[] : vcat([a], tribonacci((b, c, a + b + c), n - 1))","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201400,"user_id":null,"body":"function tribonacci((a, b, c), n::Int)::Array{Float64}\n  n == 0 && return []\n  n <=3 && return [a, b ,c][1:n]\n  return [a; tribonacci((b,c,a+b+c), n-1)]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201401,"user_id":null,"body":"function tribonacci((a, b, c), n::Int)::Array{Float64}\n  array = zeros(n)\n    for i =1:n\n        if i<4\n            if i ==1\n                array[i] =a\n            else \n                if i==2\n                    array[i]=b\n                else\n                    array[i]=c\n                end\n            end\n        else\n            array[i] = array[i-1] + array[i-2] + array[i-3]\n        end\n    end\n    return array\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201402,"user_id":null,"body":"function tribonacci((a, b, c), n::Int)::Array{Float64}\n  trifibo = [a, b, c]\n  if n < 3\n    return trifibo[1:n]\n  else\n    for idx in 1:n-3\n      append!(trifibo, trifibo[idx+2] + trifibo[idx+1] + trifibo[idx])\n    end\n    return trifibo\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201403,"user_id":null,"body":"function tribonacci((a, b, c), n::Int)::Array{Float64}\n  if n == 0\n    return []\n  elseif n == 1\n    return [a]\n  elseif n == 2\n    return [a,b]\n  end\n  trib = [a,b,c]\n  for _ in 1:n-3\n    a, b, c = b, c, a+b+c\n    push!(trib, c)\n  end\n  trib\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201404,"user_id":null,"body":"function tribonacci((a, b, c), n::Int)::Array{Float64}\n  if n==0\n    return []\n  elseif n==1\n    return [a]\n  elseif n==2\n    return [a,b]\n  elseif n==3\n    return [a,b,c]\n  end\n  my_array = [0,a,b,c]\n  for i in 1:n-3\n    append!(my_array,sum(my_array)-sum(my_array[1:i]))\n  end\n  return my_array[2:end]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201405,"user_id":null,"body":"function tribonacci((a, b, c), n::Int)::Array{Float64}\n  # your code here\n  \n  trib = []\n  \n  for i in 1:n\n        trib = cat(trib, tribRec((a,b,c),i), dims = 1)\n  end\n  \n  trib\n    \nend\n  \nfunction tribRec((a, b, c), n::Int)::Float64\n  if n == 1\n    temp = a\n  elseif n == 2\n    temp = b\n  elseif n == 3\n    temp = c\n  elseif n == 4 \n    temp = a + b + c\n  else\n    temp = 2 * tribRec((a,b,c), n-1) - tribRec((a,b,c), n-4)\n    #temp = sum(tribRec((a,b,c),n-1)) + sum(tribRec((a,b,c),n-2)) + sum(tribRec((a,b,c),n-3)) \n  end\n  temp\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201406,"user_id":null,"body":"function tribonacci((a, b, c), n::Int)::Array{Float64}\n  array = [a, b, c]\n  for i in 0:maximum([0, (n-3)])\n    push!(array, sum(array[end-2:end]))\n  end\n  return array[1:n]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5572f7c346eb58ae9c000047":[{"id":201407,"user_id":572,"body":"function pattern(n)\n  join([repr(x)^x for x in range(1, stop=n)], '\n')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201408,"user_id":null,"body":"function pattern(n)\n  join(map(x -> repeat(\"$x\", x), 1:n), \"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201409,"user_id":527,"body":"pattern(n) = join((string(i) ^ i for i in 1:n), '\n')","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201410,"user_id":527,"body":"pattern(n) = join(string.(1:n) .^ (1:n), '\n')","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201411,"user_id":null,"body":"function pattern(n)\n  return join([\"$i\"^i for i in 1:n],\"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201412,"user_id":null,"body":"pattern(n) = join([string(n)^n for n in 1:n], '\n')","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201413,"user_id":421,"body":"function pattern(n)\n  join((repeat(\"$i\", i) for i in 1:n), \"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201414,"user_id":1474,"body":"function pattern(n)\n  join([string(i) ^ i for i in 1:n], '\n')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201415,"user_id":null,"body":"function pattern(n)\n  join([repeat(\"$i\", i) for i in 1:n], \"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201416,"user_id":null,"body":"function pattern(n)\n  result = \"\"\n  for i = 1:n\n    result = string(result, repeat(string(i), i), '\n')\n  end\n  result[1:end - 1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55733d3ef7c43f8b0700007c":[{"id":201417,"user_id":null,"body":"pattern(n) = join((join(n:-1:i) for i in 1:n), '\n')","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201418,"user_id":null,"body":"pattern(n::Integer)::String = join([join(n:-1:i) for i in 1:n], '\n')","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201419,"user_id":1474,"body":"function pattern(n::Integer)::String\n  n < 1 ? \"\" : join([join([string(j) for j in n:-1:i]) for i in 1:n], '\n')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201420,"user_id":null,"body":"function pattern(n::Integer)::String\n  join([join(n:-1:i) for i in 1:n], \"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201421,"user_id":null,"body":"pattern(n) = n <= 0 ? \"\" : join((join(n:-1:i) for i in 1:n), '\n')","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201422,"user_id":759,"body":"function pattern(n::Integer)::String\n  join([join(n:-1:(n-i+1), \"\") for i in n:-1:1], \"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201423,"user_id":null,"body":"function pattern(n::Integer)::String\n  join(map(x -> join(collect(n:-1:x)), 1:n), \"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201424,"user_id":null,"body":"function pattern(n::Integer)::String\n  if n < 1\n      return \"\"\n  end\n  output = Char[]\n  sizehint!(output,n^2)\n  # only convert one time the integers to strings\n  numbers = Array{String}(undef,n)\n  map!( string, numbers, 1:n )\n  # generate the pattern\n  for last = 1:n\n      for idx = n:-1:last\n          append!(output, numbers[idx] )\n      end\n      push!(output, '\n' )\n  end\n  # end-1 because no \n at the end\n  String( output[1:end-1] )\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201425,"user_id":null,"body":"function pattern(n::Integer)::String\n  return join([join([n-i for i in 0:(n-j)]) for j in 1:n],\"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201426,"user_id":527,"body":"function pattern(n::Integer)::String\n  join(reverse(cumprod(string.(n:-1:1))), '\n')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5574835e3e404a0bed00001b":[{"id":201427,"user_id":null,"body":"get_participants(handshakes) = !iszero(handshakes) * cld(sqrt(8handshakes + 1) + 1, 2)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201428,"user_id":421,"body":"get_participants(handshakes) = handshakes == 0 ? 0 : ceil((1 + sqrt(1 + 8handshakes)) \/ 2)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201429,"user_id":421,"body":"get_participants(handshakes) = handshakes == 0 ? 0 : ceil((1 + sqrt(1 + 8handshakes)) \/ 2)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201430,"user_id":null,"body":"function get_participants(handshakes)\n  ceil(((sqrt(8*handshakes + 1)) + 1) \/ 2.0)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201431,"user_id":null,"body":"function get_participants(handshakes)\n    n = 1\n    while handshakes > (n^2 - n)\/2\n        n += 1\n    end\n    return n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201432,"user_id":null,"body":"function get_participants(handshakes)\n    i = 0\n    farmer = 0\n    while i < handshakes\n        i += farmer += 1\n    end\n    farmer + 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201433,"user_id":null,"body":"function get_participants(handshakes)\n  A = 0.5\n  B = 0.5\n  C = - handshakes\n  Int(ceil((- B + sqrt(B^2- 4*A*C))\/(2*A))) + 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201434,"user_id":48,"body":"function get_participants(handshakes)\n  ceil(((handshakes * 8 + 1) ^ 0.5 + 1) \/ 2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201435,"user_id":null,"body":"function get_participants(handshakes)\n    ceil((1+sqrt(1+8*handshakes))\/2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201436,"user_id":null,"body":"function get_participants(handshakes)\n  for n \u2208 1:(handshakes + 1)\n   if div((n - 1)n, 2) >= handshakes\n     return n\n    end\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201437,"user_id":null,"body":"function get_participants(handshakes)\n  #your code here\n  Int(ceil((1+sqrt(1+8*handshakes))\/2))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201438,"user_id":53,"body":"function get_participants(handshakes)\n  ceil((1 + sqrt(1 + 8 * handshakes)) \/ 2.0)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201439,"user_id":50,"body":"function get_participants(h)\n  return floor(sqrt(2*h+0.25)+1.4999999999)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5583090cbe83f4fd8c000051":[{"id":201440,"user_id":421,"body":"digitize = digits","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201441,"user_id":null,"body":"function digitize(n::Integer)::Array{Int64}\n  reverse([parse(Int64, i) for i in string(n)])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201442,"user_id":1474,"body":"function digitize(n)\n  [parse(Int64, c) for c in reverse(string(n))]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201443,"user_id":null,"body":"function digitize(n)\n  reverse([parse(Int8,d) for d in string(n)])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201444,"user_id":null,"body":"function digitize(n)\n  reverse([parse(Int,c) for c in string(n)])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201445,"user_id":null,"body":"function digitize(n)\n  res = [parse(Int,x) for x in string(n)];\n  return(reverse(res))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201446,"user_id":null,"body":"function digitize(n)\n  n_str = string(n)\n  n_str = reverse(n_str)\n  \n  return [Int(c) - Int('0') for c in n_str ]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201447,"user_id":null,"body":"# the simplest would be:\n# digits(n)\n\nfunction digitize(n)\n  if n>0\n    degree = log10(n) |> floor |> Int64\n    # taking advantage of the dot operators.\n    div.(n, 10 .^(0:degree)) .% 10 |> collect\n  else\n    [n]\n  end\nend\n  ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201448,"user_id":null,"body":"function digitize(n)\n  return n > 9 ? [n % 10; digitize(n\u00f710)] : [n]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201449,"user_id":null,"body":"\"\"\"\nGiven a random non-negative number,\nreturns the digits of this number within an array in reverse order.\n\"\"\"\nfunction digitize(num)\n  # alternatively collection() can be used instead of list creation with []\n  return reverse([parse(Int, i) for i in string(num)], dims = 1)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5583d268479559400d000064":[{"id":201450,"user_id":564,"body":"function binary_to_string(binary)\n  if length(binary) < 8\n    \"\"\n  else\n    ascii = parse(Int, binary[1:8], base=2)\n    Char(ascii) * binary_to_string(binary[9:end])\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201451,"user_id":null,"body":"arraytochar(a) = Char(parse(Int8, reduce(*, a), base=2))\n\nfunction binary_to_string(binary)\n  isempty(binary) && return \"\"\n  mapreduce(arraytochar, *, Iterators.partition(binary, 8))\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201452,"user_id":881,"body":"binary_to_string(b) = replace(b, r\"[01]{8}\" => m -> Char(parse(Int, m, base=2)))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201453,"user_id":null,"body":"function binary_to_string(binary)\n    join(Char.(parse.(Int, [binary[8i-7:8i] for i in 1:length(binary)\u00f78], base=2)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201454,"user_id":null,"body":"function binary_to_string(binary)\n  if binary == \"\"\n    return \"\"\n  else\n    letters = length(binary) \u00f7 8\n    asc = [binary[8id - 7:8id] |> x -> parse(Int, x, base=2) |> Char for id in 1:letters]\n    return join(asc)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201455,"user_id":null,"body":"function binary_to_string(binary)\n    \n    count = 0\n    string_result = \"\"\n    for (i, chr) in enumerate(binary)\n      val = parse(Int64, chr)\n      if i % 8 == 0\n        count += val\n        string_result *= string(Char(count))\n        count = 0\n      else\n        count += val * 2^(8 - i % 8)\n      end\n    end\n    return string_result\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201456,"user_id":null,"body":"function binary_to_string(binary)\n  strng = \"\"\n  for i in range(1, stop = length(binary), step = 8)\n    substr = SubString(binary, i, i+7)\n    strng *= parse(Int, substr, base = 2) |> Char\n  end\n  return strng\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201457,"user_id":null,"body":"function binary_to_string(binary)\n  result = \"\"\n  for i in 1:(length(binary)\u00f78)\n    result = result * Char(parse(Int, binary[((i-1)*8+1):((i-1)*8+8)], base=2))\n  end\n  return(result)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201458,"user_id":null,"body":"binary_to_string(binary) = [binary[i:i+7] |> b -> parse(Int, b, base=2) |> Char for i in 1:8:length(collect(binary))] |> join","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201459,"user_id":null,"body":"binary_to_string(binary) = replace(binary, r\".{8}\" => x -> Char(parse(Int, x, base = 2)))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"558fc85d8fd1938afb000014":[{"id":201460,"user_id":527,"body":"function sum_two_smallest_numbers(numbers)\n  sum(partialsort(numbers, 1:2))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201461,"user_id":null,"body":"sum_two_smallest_numbers(numbers)= sum(sort(numbers)[1:2])","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201462,"user_id":null,"body":"function sum_two_smallest_numbers(numbers)\n  +(sort(numbers)[1:2]...)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201463,"user_id":null,"body":"function sum_two_smallest_numbers(numbers)\n  numbers |> sort |> (x -> x[1:2]) |>  sum \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201464,"user_id":null,"body":"function sum_two_smallest_numbers(n)\n  arr = sort(n, by=abs)\n  arr[1]+arr[2]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201465,"user_id":null,"body":"function sum_two_smallest_numbers(numbers)\n  sum(view(sort(numbers),1:2))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201466,"user_id":null,"body":"function sum_two_smallest_numbers(numbers)\n  return sort!(numbers)[1] + numbers[2]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201467,"user_id":null,"body":"function sum_two_smallest_numbers(numbers)\n  a, b = partialsort(numbers, 1:2)\n  return a + b\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201468,"user_id":null,"body":"function sum_two_smallest_numbers(numbers)\n  # code here\n  sort(numbers)[1] + sort(numbers)[2]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201469,"user_id":null,"body":"sum_two_smallest_numbers(numbers) = sum(sort(numbers)[begin:2])","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55908aad6620c066bc00002a":[{"id":201470,"user_id":527,"body":"function xo(str)\n  count(c in \"Xx\" for c in str) == count(c in \"Oo\" for c in str)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201471,"user_id":null,"body":"function xo(str)\n  count(==('x'), lowercase(str)) == count(==('o'), lowercase(str))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201472,"user_id":null,"body":"function xo(str)\n    count(i,str) = length(findall(isequal(i), lowercase(str)))\n    count('x',str) == count('o',str)\nend\n\n  ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201473,"user_id":null,"body":"function xo(str)\n  sum(map((x -> in(x,\"xX\")), collect(str))) == sum(map((x -> in(x,\"oO\")), collect(str)))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201474,"user_id":null,"body":"function xo(str)\n  str = lowercase(str)\n  nX = count(==('x'), str)\n  nO = count(==('o'), str)\n  return nX == nO\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201475,"user_id":null,"body":"xo(str) = count(\"x\",lowercase(str)) == count(\"o\",lowercase(str))","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201476,"user_id":null,"body":"function xo(str)\n  x = 0\n  o = 0\n  for char in str\n    if lowercase(char) == 'x'\n      x += 1\n    elseif lowercase(char) == 'o'\n      o += 1\n    end\n  end\n  \n  return x == o\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201477,"user_id":null,"body":"function xo(str)\n  count(q->lowercase(q)=='x',str) == count(q->lowercase(q)=='o',str)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201478,"user_id":null,"body":"function xo(str)\n  # code here\n  if count(\"x\", lowercase(str)) == count(\"o\", lowercase(str))\n    return true\n  else  \n    return false\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201479,"user_id":null,"body":"function xo(str)\n  countc(c, s) = sum(map((e -> in(e, c)), collect(s)))\n  countc(\"xX\", str) == countc(\"oO\", str)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5592e3bd57b64d00f3000047":[{"id":201480,"user_id":null,"body":"module Cubes\n  export find_nb\n\n    function find_nb(m)\n        a = 0\n        for x in 1:m\n            a += x^3\n            a == m ? (return x) : nothing\n            a > m ? (return -1) : nothing\n        end\n    end\n    \nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201481,"user_id":null,"body":"module Cubes\n    export find_nb\n\n    function find_nb(m)\n        n = sqrt((2sqrt(BigInt(m)) + 1\/\/4)) - 1\/\/2\n        round(n) == n && (return round(Int, n))\n        return -1\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201482,"user_id":53,"body":"module Cubes\n    export find_nb\n    function find_nb(n)\n      m = convert(BigFloat, n)\n      r = sqrt(0.25 + 2 * sqrt(m)) - 0.5\n      r % 1 == 0 ? r : -1\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201483,"user_id":1474,"body":"module Cubes\n  export find_nb\n\n  function find_nb(m)\n    cnt = 0\n    while m > 0\n      cnt += 1\n      m -= cnt ^ 3\n    end\n    m == 0 ? cnt : -1\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201484,"user_id":null,"body":"module Cubes\n    export find_nb\n\n    function find_nb(m)\n        n = Int128(round(\u221a\u221a(4 * m)))\n        return (n * (n + 1) \u00f7 2) ^ 2 == m ? n : -1\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201485,"user_id":null,"body":"#  Nicomachus's theorem: sum_i=0^n i^3 = (sum_i=0^n i)^2 = (n*(n+1)\/2)^2 == m\n# --> n*(n+1) = 2sqrt(m) ;  n < sqrt(2*sqrt(m)) < n+1\n# --> try for n: integer below sqrt(2*sqrt(m))\n\nmodule Cubes\n    export find_nb\n\n    function find_nb(m)\n        n_candidate = sqrt(2sqrt(m)) |> floor |> BigInt\n        return sum_of_cubes(n_candidate)==m ? n_candidate : -1     \n    end\n    sum_of_cubes(n::BigInt) = (n*(n+1)\/2)^2\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201486,"user_id":null,"body":"module Cubes\n    export find_nb\n    function find_nb(m)\n      acc = 0\n      for i in 1:m\n        acc += i^3\n        acc == m && return i\n        acc > m && return -1\n      end\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201487,"user_id":492,"body":"module Cubes\n    export find_nb\n\n    function find_nb(m)\n        s::Int128 = 0\n        n::Int128 = 0\n        while s < Int128(m)\n            n += 1\n            s += n ^ 3\n        end\n        return s == m ? n : -1\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201488,"user_id":null,"body":"module Cubes\n    export find_nb\n\n\nfunction find_nb(m)\n\n    n = \u221a(2 * \u221a(BigInt(m)) + 0.25) - 1 \/ 2\n  if round(n) == n\n    return round(n)\n  else\n    return -1\n  end\n  \nend\n\n\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201489,"user_id":null,"body":"module Cubes\nexport find_nb\n\nfunction find_nb(m)\n    n = 1\n    while m > 0\n        m -= n^3\n        n += 1\n    end\n    if m != 0\n        return -1\n    end\n    n - 1\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"559536379512a64472000053":[{"id":201490,"user_id":759,"body":"module Pass\n  export play_pass\n\n  function play_pass(s, n)\n    # O(n)\n    p = []\n    sizehint!(p, n)\n    for i in 1:length(s)\n      a = s[i]\n      if isletter(a)\n        a = Char((Int(uppercase(a) - 'A') + n) % 26 + Int('A'))\n        iseven(i) && (a = lowercase(a))\n      elseif isdigit(a)\n        a = Char(9 - Int(a) + 2 * Int('0'))\n      end\n      insert!(p, 1, a)\n    end\n    join(p)\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201491,"user_id":null,"body":"module Pass\n    export play_pass\n\n    function play_pass(s, n)\n        shift(c, n) = c in 'A':'Z' ? (c+n in 'A':'Z' ? c+n : c+n-26) : c\n        differ(c) = c in '0':'9' ? 9-(c-'0')+'0' : c\n    \n        result = reshape(differ.(shift.(Vector{Char}(s*repeat(' ', length(s)%2)), n)), 2, :)\n        result[2, :] = lowercase.(result[2, :])\n        join(reshape(result, :, 1)[length(s):-1:1])\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201492,"user_id":null,"body":"module Pass\n    export play_pass\n\n    function play_pass(s, n)\n        shifty = Dict(zip(vcat(['a':'z'...], ['0':'9'...]), vcat(['a':'z'...][n+1:end], ['a':'z'...][1:n], ['9':-1:'0'...])))\n        reverse(join(isodd(i) ? uppercase(get(shifty, v, v)) : lowercase(get(shifty, v, v)) for (i,v) in enumerate(lowercase(s))))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201493,"user_id":null,"body":"module Pass\n    export play_pass\n\n  function play_pass(s, n)\n    tmp = \"\"\n    for i = 1:length(s)\n        c = s[i]\n        if c>='A' && c<='z'\n            c = uppercase(c)+n\n            if c > 'Z'\n                c = c - 26\n            end\n            tmp = tmp * (i % 2 != 0 ? uppercase(c) : lowercase(c))\n        elseif c>='0' && c<='9'\n            tmp = tmp * string('9'-c)\n        else\n            tmp = tmp * c\n        end\n    end\n    return reverse(tmp)\n  end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201494,"user_id":null,"body":"module Pass\n    export play_pass\n\n    function play_pass(s, n)\n        circshifts = Pair.('A':'Z', circshift('A':'Z', -n))\n        digitshifts = Pair.('0':'9', ('9' .- ('0':'9')) .+ '0')\n        newchars = replace(collect(s), [circshifts; digitshifts]...)\n        return [\n          iseven(i) ? lowercase(chr) : uppercase(chr)\n          for (i, chr) \u2208 enumerate(newchars)\n        ] |> reverse |> join\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201495,"user_id":null,"body":"module Pass\n    export play_pass\n\n    function rotate_char(c, n)\n      min = Int('A')\n      max = Int('Z')\n\n      if Int(c) >= min && Int(c) <= max\n        shiftedChar = c + n\n        overflow = Int(shiftedChar) - max\n\n        if overflow > 0\n          Char(min + overflow - 1)\n        else\n          shiftedChar\n        end\n      else\n        c\n      end\n    end\n\n    function rotate_digit(c)\n      min = Int('0')\n      max = Int('9')\n\n      if Int(c) >= min && Int(c) <= max\n        digit = parse(Int, c)\n        Char(9 - digit + '0')\n      else\n        c\n      end\n    end\n\n    function downcase_odd(charArray)\n      result = []\n      for(i,c) in enumerate(charArray)\n        if isodd(i-1)\n          push!(result, lowercase(c))\n        else\n          push!(result, c)\n        end\n      end\n      result\n    end\n\n    function play_pass(s, n)\n      map(c -> rotate_char(c, n) |> rotate_digit, collect(s)) |> downcase_odd |> reverse |> join\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201496,"user_id":2525,"body":"module Pass\n    export play_pass\n\n    function transform(c, n, upper)\n        if isletter(c)\n            if upper\n                uppercase(Char((Int(c)+n-97)%26 + 97))\n            else\n                lowercase(Char((Int(c)+n-97)%26 + 97))\n            end\n        elseif isdigit(c)\n            \"$(9-parse(Int, c))\"\n        else\n            c\n        end\n    end\n    function play_pass(s, n)\n        join(reverse([transform(c, n, i%2==1) for (i, c) in enumerate(lowercase(s))]))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201497,"user_id":null,"body":"module Pass\n    export play_pass\n\n    function play_pass(s, n)\n        a = vcat(collect('a':'z'), collect('a':'z'))\n        y = lowercase(s)\n        z = []\n        i = 1\n        for x in y\n          if isdigit(x)\n            append!(z, 9 - parse(Int, x))\n          elseif x in a\n            tempChar = a[findfirst(isequal(x),a)+n]\n            tempChar = if(i%2 == 0) tempChar else uppercase(tempChar) end\n            append!(z, tempChar)\n          else\n            append!(z, x)\n          end\n          i += 1\n        end\n        return(join(reverse(z)))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201498,"user_id":null,"body":"module Pass\nexport play_pass\n\nfunction play_pass(s, n)\n  reverse(join(map(enumerate(s)) do (i, c)\n      if isletter(c)\n        c = isodd(i) ? uppercase(c) : lowercase(c)\n        offset = isuppercase(c) ? 65 : 97\n        Char((Int(c) - offset + n) % 26 + offset)\n      elseif isdigit(c)\n        9 - parse(Int, c)\n      else\n        c\n      end\n    end\n  ))\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201499,"user_id":null,"body":"module Pass\n    export play_pass\n    function play_pass(message, shift)\n      (reverse \u2218 caseflip)(map(getshifter(shift), message))\n    end\n    \n    function caseflip(message::String)\n      String([iseven(i) ? lowercase(message[i]) : uppercase(message[i]) for i in 1:length(message)])\n    end\n    \n    function getshifter(shift)\n      function encodechar(char)\n        Int(char) >= 65 && Int(char) <= 90 && return shiftletter(char, shift)\n        Int(char) >= 48 && Int(char) <= 57 && return nineecomplement(char)\n        char\n      end\n      encodechar\n    end\n    \n    function nineecomplement(digit)\n      Char(105 - Int(digit))\n    end\n    \n    function shiftletter(char, shift)\n      Char(65 + (Int(char) - 65 + shift) % 26)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"559a28007caad2ac4e000083":[{"id":201500,"user_id":492,"body":"module Perimeter\n    export perimeter\n\n    function perimeter(n)\n        a, b = BigInt(1), BigInt(2)\n        while (n != 0)\n            a, b, n = b, a + b, n - 1\n        end\n        4 * (b - 1)\n    end\n\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201501,"user_id":null,"body":"module Perimeter\n    export perimeter\n\n    function perimeter(n)\n      x,y = BigInt(0), BigInt(1)\n      my_per = 0\n      for i in 1:n+1\n          x,y = y, x+y\n          my_per += x\n      end\n      return 4 * my_per\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201502,"user_id":null,"body":"module Perimeter\n    export perimeter\n    # Thought it would be funny to make it hyper condensed :)\n    fib(n)::BigInt = (n<=2 ? (n==0 ? 0 : 1) : (trailing_zeros(n)>0 ? fib(n>>1+1)^2-fib(n>>1-1)^2 : fib(n>>1)^2+fib(n>>1+1)^2))\n    perimeter(n::Integer) = (fib(big(n)+3)-1)<<2\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201503,"user_id":492,"body":"module Perimeter\n    export perimeter\n\n    function perimeter(n)\n        a, b = BigInt(1), BigInt(2)\n        while (n != 0)\n            a, b, n = b, a + b, n - 1\n        end\n        4 * (b - 1)\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201504,"user_id":null,"body":"module Perimeter\n    export perimeter\n    \n    import Base: iterate, length\n\nstruct Fibs end\n\niterate(fibs::Fibs) = (BigInt(1),(BigInt(1),BigInt(0)))\niterate(fibs::Fibs, state::T) where T = begin\n  (a, b) = state\n  (a + b, (a + b, a))\nend\n\nlength(fibs::Fibs) = typemax(Int)\n\nfibs = Fibs()\n\n    function perimeter(n)\n        # your code\n        return reduce(+, Iterators.take(fibs, n + 1)) * 4\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201505,"user_id":null,"body":"module Perimeter\n    export perimeter\n\n    function perimeter(n)\n        ans = zeros(BigInt, n + 1)\n        ans[1], ans[2]= big(4), big(4)\n\n        for i = 3:n + 1 \n            ans[i] = ans[i-1] + ans[i-2]\n        end\n    sum(ans)\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201506,"user_id":null,"body":"module Perimeter\n    export perimeter\n\n    function perimeter(n)\n        retVal = 0\n        x,y = BigInt(0), BigInt(1)\n        for i \u2208 1:(n+1)\n            x,y = y, x+y\n            retVal += x\n        end\n        return 4 * retVal\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201507,"user_id":null,"body":"module Perimeter\n    export perimeter\n\n    function perimeter(n)\n        array = [big(1), big(1)]\n        while length(array) < n + 1\n          push!(array, array[end-1] + array[end])\n        end\n        return 4 * sum(array)\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201508,"user_id":null,"body":"module Perimeter\n    export perimeter\n\n   function fib(n)\n       a::BigInt=0\n       b::BigInt=1\n       for i in 1:n\n       a,b=a+b,a\n       end\n       return a\n   end\n\n   perimeter(n) = 4*sum(fib.(1:n+1)) \n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201509,"user_id":null,"body":"module Perimeter\n    export perimeter\n\n    function perimeter(n)\n        F, persum = BigInt.([1,1]), BigInt(2)\n        for _ in 1:n-1\n            F3 = sum(F)\n            F[1] = F[2]\n            F[2] = F3\n            persum += F3\n        end\n        4*persum\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"559b8e46fa060b2c6a0000bf":[{"id":201510,"user_id":527,"body":"module Easy\n    export diagonal\n\n    function diagonal(n, p)\n        binomial(big(n + 1), big(p + 1))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201511,"user_id":492,"body":"module Easy\n    export diagonal\n\n    function diagonal(n, p)\n        o = BigInt(1)\n        res, j, k = o, o, o\n        for i in p+1:n\n            k = div(k * i, j)\n            res += k\n            j += 1\n        end\n        res\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201512,"user_id":53,"body":"module Easy\n    export diagonal\n\n    function diagonal(n, p)\n        r = BigInt(1)\n        i = 1\n        while i <= p + 1\n            r = r * (n - i + 2) \u00f7 i\n            i = i + 1\n        end\n        return r\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201513,"user_id":null,"body":"module Easy\n    export diagonal\n\n    function diagonal(n, p)\n        binomial(BigInt(n+1), BigInt(p+1))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201514,"user_id":null,"body":"module Easy\n    export diagonal\n\n    diagonal(n,p) = binomial(convert(BigInt, n+1), convert(BigInt, p+1))\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201515,"user_id":2525,"body":"module Easy\n    export diagonal\n\n    function dg(n, p)\n        if p == 0\n            ones(BigInt, n+1)\n        else\n            cumsum(dg(n-1, p-1))\n        end\n    end\n\n    function diagonal(n, p)\n        if p == 0\n            n+1\n        else\n            sum(dg(n, p))\n        end \n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201516,"user_id":null,"body":"module Easy\n    export diagonal\n\n    function diagonal(n,p)\n      sum = 0\n      m = n\n      while m >= p\n        sum = sum + binomial(big(m),p)\n        m = m -1\n      end\n      return sum\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201517,"user_id":null,"body":"module Easy\n  export diagonal\n  function diagonal(n, p)\n    ret = [big(1)]\n    for i in 1:n-p\n      push!(ret, div(ret[end]*(p+i),i))\n    end\n    sum(ret)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201518,"user_id":null,"body":"module Easy\n    export diagonal\n    diagonal(n, p) = sum(binomial(big(i), big(p)) for i in p:n)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201519,"user_id":null,"body":"module Easy\n    export diagonal\n\n    function diagonal(n, p)\n        return sum(binomial(i, p) for i in 0:BigInt(n))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"559ce00b70041bc7b600013d":[{"id":201520,"user_id":564,"body":"module Finance\n    export finance\n\n    function finance(n)\n        n * (n + 1) * (n + 2) \/ 2\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201521,"user_id":null,"body":"module Finance\n    export finance\n\n    function finance(n)\n        (n+2)*(n+1)*n\/2\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201522,"user_id":null,"body":"module Finance\n    export finance\n\n    function finance(n)\n        n * (n + 1) * (n + 2) \u00f7 2\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201523,"user_id":null,"body":"module Finance\n    export finance\n\n    finance(n) = n*(n+1)*(n+2)\u00f72\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201524,"user_id":null,"body":"module Finance\n    export finance\n\n    function finance(n)\n        sumi = 0\n        for i in 1:n\n            sumi += div(3*i*(i+1), 2)\n        end\n        return sumi\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201525,"user_id":null,"body":"module Finance\n    export finance\n\n    function finance(n)\n        return n * (n+1) * (n+2) \/ 2;\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201526,"user_id":null,"body":"module Finance\n    export finance\n\n    function finance(n)\n      current_col = 3\n      total = 0\n      for i in 2:n\n        current_col += 3 * i\n        total += current_col\n      end\n      return total + 3\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201527,"user_id":null,"body":"module Finance\n\n    export finance\n\n    function finance(n)\n        s = 0\n        for i in 1:n\n            s += sum(i:i*2)\n        end\n        s\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201528,"user_id":null,"body":"module Finance\n    export finance\n\n    function finance(n)\n        t = 0\n        for i=0:n\n          for w=0:i\n            t += w+i\n          end\n        end\n        return t\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201529,"user_id":null,"body":"module Finance\n    export finance\n\n    function finance(n)\n        sum = 0\n        for j = 0:n\n            m = n + 1 - j\n            sum += m*(m+1)*0.5 + m*(2*j-1)\n        end\n        return sum\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"559e3224324a2b6e66000046":[{"id":201530,"user_id":527,"body":"module Cart\n  export sumin, sumax, sumsum\n  sumin(n) = n * (n + 1) * (2n + 1) \/ 6\n  sumax(n) = n * (n + 1) * (4n - 1) \/ 6\n  sumsum(n) = n^2 * (n + 1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201531,"user_id":492,"body":"module Cart\n    export sumin\n    export sumax\n    export sumsum\n\n    function sumin(n)\n        div(n * (n + 1) * (2 * n + 1), 6)\n    end\n    function sumax(n)\n        div(n * (n + 1) * (4 * n - 1), 6)\n    end\n    function sumsum(n)\n        n * n * (n + 1)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201532,"user_id":null,"body":"module Cart    \n    export sumin, sumax, sumsum\n\nfunction sumax(n)\n    mx = 0\n    for x in 1:n\n        for y in 1:n\n            mx += max(x, y)\n        end\n    end\n    return mx\nend\n\nfunction sumin(n)\n    mn = 0\n    for x in 1:n\n        for y in 1:n\n            mn += min(x, y)\n        end\n    end\n    return mn\nend\n\nfunction sumsum(n)\n    sm = 0\n    for x in 1:n\n        for y in 1:n\n            sm += x + y\n        end\n    end\n    return sm\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201533,"user_id":null,"body":"module Cart    \n    export sumin, sumax, sumsum\n\n    sumin(n) = n * (n + 1) * (2n + 1) \u00f7 6\n    sumax(n) = n * (n + 1) * (4n - 1) \u00f7 6\n    sumsum(n) = sumin(n) + sumax(n)\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201534,"user_id":null,"body":"module Cart    \n    export sumin, sumax, sumsum\n\n    function sumin(n)\n        return sumf((x,y) -> min(x,y), n)\n    end\n    function sumax(n)\n        return sumf((x,y) -> max(x,y), n)\n    end\n    function sumsum(n)\n        return sumf((x,y) -> x + y, n)\n    end\n\n    function sumf(f, n)\n        total = 0\n        for x = 1:n, y = 1:n\n            total += f(x,y)\n        end\n        return total\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201535,"user_id":null,"body":"module Cart    \nexport sumin, sumax, sumsum\n\nfunction sumin(n)\n  n * (n + 1) * (2*n + 1) \u00f7 6\nend\nfunction sumax(n)\n  n * (n + 1) * (4*n - 1) \u00f7 6\nend\nfunction sumsum(n)\n  n^2 * (n + 1)\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201536,"user_id":null,"body":"module Cart    \n    export sumin, sumax, sumsum\n\n    function sumin(n)\n        res=0\n        for q in 1:n\n          for p in 1:n\n            res += min(p,q)\n          end\n        end\n        res\n    end\n    function sumax(n)\n        res=0\n        for q in 1:n\n          for p in 1:n\n            res += max(p,q)\n          end\n        end\n        res\n    end\n    function sumsum(n)\n        res=0\n        for q in 1:n\n          for p in 1:n\n            res += p+q\n          end\n        end\n        res\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201537,"user_id":53,"body":"module Cart    \n    export sumin, sumax, sumsum\n    function sumin(n)\n        n * (n+1) * (2 * n + 1) \u00f7 6\n    end\n    function sumax(n)\n        n * (n+1) * (4 * n - 1) \u00f7 6\n    end\n    function sumsum(n)\n        (n+1) * n * n\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201538,"user_id":209,"body":"\nmodule Cart    \n    export sumin, sumax, sumsum\n    function sumin(n)\n        n*(n+1)*(2*n+1)\/6\n    end\n    function sumax(n) \n        (4*n-1)*(n)*(n+1)\/6\n    end\n    function sumsum(n)\n        (n+1)*n*n\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201539,"user_id":1474,"body":"module Cart    \n    export sumin, sumax, sumsum\n\n    function sumin(n)\n      n * (n + 1) * (2 * n + 1) \u00f7 6\n    end\n\n    function sumax(n)\n      n * (n + 1) * (4 * n - 1) \u00f7 6\n    end\n\n    function sumsum(n)\n      n * n * (n + 1)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55a29405bc7d2efaff00007c":[{"id":201540,"user_id":492,"body":"module Going\n    export going\n\n    function going(n)\n        i = n; res = 1.0; inter = 1.0\n        while i >= 2\n            inter \/= i\n            res += inter\n            i -= 1\n        end\n        Int(floor(res * 1.0e6)) \/ 1.0e6\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201541,"user_id":null,"body":"module Going\n    export going\n\n    function going(n)\n        sum = 1\n        aux = 1\n        while n > 1\n          aux *= 1\/n\n          sum += aux\n          n -= 1\n        end\n    return round(sum, RoundDown, digits=6)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201542,"user_id":null,"body":"module Going\n  export going\n\n  going(n) = trunc(foldl((s, i) -> (s = s \/ i + 1; s), 1:n); digits=6)\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201543,"user_id":null,"body":"module Going\n    export going\n\n    function going(n)\n        return trunc(series(n), digits=6)\n    end # function\n\n    function series(n)\n        if n == 0\n            return 0.0\n        else\n            return 1 + 1\/n * going(n-1)\n        end # if\n    end # function\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201544,"user_id":null,"body":"module Going\n    export going\n\n    function going(n)\n    result = BigFloat(1)\n    accumulate = BigFloat(1)\n    for i \u2208 n:-1:2\n        accumulate \/= i\n        result += accumulate\n    end\n    return round(Float64(result), RoundDown, digits = 6)\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201545,"user_id":null,"body":"module Going\n    export going\n\n    function going(n)\n        leftovers = 0\n        last = 1\n        for i = n:-1:2\n            leftovers += (last \/= i)\n        end\n        return trunc(1+leftovers, digits=6)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201546,"user_id":53,"body":"module Going\n    export going\n\n    function going(n)\n        trunc(walk(n)*1000000)\/1000000\n    end\n\n    function walk(n)\n        n>0 ? 1+walk(n-1)\/n : 0\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201547,"user_id":null,"body":"module Going\n    export going\n\n    function going(n)\n        x,y = 1,1\n        for i in 0:n-2\n            y \/= n-i\n            x += y\n        end\n        trunc(x, digits=6)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201548,"user_id":421,"body":"module Going\n    export going\n\n    function going(n)\n        i = 1\n        ans = 1\n        while n > 1\n          i = i \/ n\n          ans += i\n          n -= 1\n        end\n        floor(ans * 1e6) \/ 1e6  \n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201549,"user_id":null,"body":"module Going\n    export going\n\nfunction going(n)\n  lst = 1\/factorial(big(n))\n  tot = 0\n  for i in 1:(n-1)\n    lst *= i\n    tot += lst\n  end\n  \n  return round(Float64(tot + 1), RoundDown; digits = 6) \n    \nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55a2d7ebe362935a210000b2":[{"id":201550,"user_id":527,"body":"find_smallest_int = minimum","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201551,"user_id":null,"body":"find_smallest_int(arr) = minimum(arr)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201552,"user_id":421,"body":"function find_smallest_int(arr)\n  minimum(arr)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201553,"user_id":null,"body":"function find_smallest_int(arr)\n  - maximum(map(x-> -x, arr))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201554,"user_id":null,"body":"function find_smallest_int(arr)\n  #your code here\n  minimum(arr)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201555,"user_id":null,"body":"function find_smallest_int(arr)\n  a = arr[1]\n  for i in arr\n    if (i < a)\n      a = i\n    end\n  end\n  return a\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201556,"user_id":null,"body":"function find_smallest_int(arr)\n  return min(arr...)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201557,"user_id":492,"body":"function find_smallest_int(arr)\n  min(arr...)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201558,"user_id":null,"body":"function find_smallest_int(arr)\n  sort(arr)[1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201559,"user_id":null,"body":"function find_smallest_int(arr)\n  min = first(arr)\n  for num in arr\n      if min > num\n         min = num\n      end\n  end\n  return min\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55a70521798b14d4750000a4":[{"id":201560,"user_id":null,"body":" greet(name) = \"Hello, $name how are you doing today?\"","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201561,"user_id":null,"body":"function greet(name)\n    \"Hello, \"* name *\" how are you doing today?\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201562,"user_id":null,"body":"function greet(name)\n  string(\"Hello, \", name, \" how are you doing today?\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201563,"user_id":null,"body":"function greet(name)\n   #your code here\n  \"Hello, \" * name * \" how are you doing today?\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201564,"user_id":null,"body":"function greet(name)\n   return string(\"Hello, \", name, \" how are you doing today?\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201565,"user_id":null,"body":"function greet(name)\n   #your code here\n  return \"Hello, $name how are you doing today?\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201566,"user_id":null,"body":"using Printf\n\nfunction greet(nam)\n#  \"Hello, $nam how are you doing today?\"\n#  \"Hello, \"* nam *\" how are you doing today?\"\n  @sprintf \"Hello, %s how are you doing today?\" nam\n  \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201567,"user_id":null,"body":"using Printf\n\nfunction greet(name)\n   return @sprintf \"Hello, %s how are you doing today?\" name\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201568,"user_id":null,"body":"function greet(name)\n   return \"Hello, $(name) how are you doing today?\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201569,"user_id":null,"body":"function greet(name)\n  return \"Hello, \"*name*\" how are you doing today?\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55aa075506463dac6600010d":[{"id":201570,"user_id":492,"body":"module Recre\n    export list_squared\n\n    function sum_squared_factors(n)\n        s = 0; i = 1; res = []\n        while (i * i <= n)\n            if (n % i == 0)\n                s += i * i\n                nf = div(n, i)\n                if (nf != i)\n                    s += nf * nf\n                end\n            end\n            i += 1\n        end\n        u = Int(floor(sqrt(s)))\n        if (u * u == s)\n            (n, s)\n        else nothing end\n    end\n    # return a Tuple{Int64,Int64}[.....]\n    function list_squared(m, n)\n        res = Tuple{Int64, Int64}[]\n        i = m\n        while (i <= n)\n            r = sum_squared_factors(i)\n            if (r !== nothing)\n                push!(res, r)\n            end\n            i += 1\n        end\n        res\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201571,"user_id":null,"body":"module Recre\n    export list_squared\n\n    function list_squared(m, n)\n        arr = []\n        for i in m:n\n            x = sum(divisors(i).^2)\n            isinteger(sqrt(x)) && push!(arr,(i, x))\n        end\n        arr \n    end\n    \n    function divisors(num)\n        divs = []\n        for i in 1:sqrt(num)\n            num % i == 0 && append!(divs, [Int(i), Int(num\u00f7i)])\n        end\n        divs[end] == divs[end-1] ? divs[1:end-1] : divs\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201572,"user_id":null,"body":"module Recre\nexport list_squared\n\nfunction list_squared(m, n)\n\tfunction factors(num)\n\t\tfac = filter(i -> num % i == 0, 1:(iseven(num) ? 1 : 2):ceil(sqrt(num)))\n\t\tfor j in 1:length(fac) indexin(num \/ fac[j], fac)[1] == nothing && push!(fac, num \/ fac[j]) end\n\t\tfac\n    end\n\toutp = map(i -> (i, sum(factors(i).^2)), m:n)\n\tfilter(i -> isinteger(sqrt(i[2])), outp)\nend\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201573,"user_id":null,"body":"module Recre\n    export list_squared\n\n    SOLUTIONS = [(1, 1), (42, 2500), (246, 84100), (287, 84100), (728, 722500), (1434, 2856100), (1673, 2856100), (1880, 4884100), (4264, 24304900), (6237, 45024100), (9799, 96079204), (9855, 113635600), (18330, 488410000), (21352, 607622500), (21385, 488410000), (24856, 825412900), (36531, 1514610724), (39990, 2313610000), (46655, 2313610000)]\n    # Could be made faster with a bisection but this is good enough\n    list_squared(first, last) = [(n, sum_) for (n, sum_) in SOLUTIONS if first <= n <= last]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201574,"user_id":null,"body":"module Recre\n    export list_squared\n\n    function list_squared(m, n)\n        res = []\n        for i in m:n\n          divisors = (i>1) ? [[k for k in 1:ceil(Int, i\/2) if isinteger(i\/k)]; [i]] : [1]\n          sm = sum(map(j -> j^2, divisors))\n          if isinteger(sqrt(sm))\n            push!(res, (i, sm))\n          end\n        end\n        return res\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201575,"user_id":null,"body":"module Recre\n    export list_squared\n\n    # return a Tuple{Int64,Int64}[.....]\n    function list_squared(m, n)\n    # your code\n    result = Vector{Tuple{Int64,Int64}}()\n    for num \u2208 m:n+1\n        divisors = Set()\n        for i \u2208 1:isqrt(num+1)\n            if num % i == 0\n                push!(divisors,i^2)\n                push!(divisors,(num\u00f7i)^2)\n            end\n        end\n        if isempty(divisors)\n            continue\n        end\n        total = sum(+,divisors)\n        sr = sqrt(total)\n        if sr % 1 == 0\n            push!(result, Tuple([num,total]))\n        end\n    end\n    result\n    # return a Tuple{Int64,Int64}[.....] \nend\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201576,"user_id":null,"body":"module Recre\n    export list_squared\n\n    # return a Tuple{Int64,Int64}[.....]\n    function list_squared(m, n)\n      squared_div=Tuple{Int,Int}[]\n      for k=m:n\n        k_div=Int[1,k]\n        gogo=true\n        i=2\n        while gogo\n          k%i ==0 ? push!(k_div,i,k\u00f7i) : nothing\n          i += 1\n          i>k\/i ? gogo=false : nothing\n        end\n        k_divS=Set(k_div)\n        sqrt(sum(k_divS.^2))%1 == 0 ? push!(squared_div,(k,sum(k_divS.^2))) : nothing\n      end\n      return squared_div \n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201577,"user_id":null,"body":"module Recre\n    export list_squared\n\n    function divisors(n)\n      divs = [1]\n      for i in 2:n \u00f7 2\n        if (n % i) == 0 push!(divs,i) end\n      end\n      n == 1 ? divs : push!(divs,n)\n    end\n\n    global intervals = [];\n    isCovered = (n) -> length(filter(i -> i[1] <= n <= i[2], intervals)) >= 1\n      \n    global cache = [];\n\n    function list_squared(m, n)\n        res = []\n        for i in m:n\n            if !isCovered(i)\n              divs = sum(divisors(i).^2)\n              if isinteger(sqrt(divs)) push!(cache,(i,divs)) end\n            end\n        end\n        push!(intervals,[m,n])\n        return filter(f -> m <= f[1] <= n, cache)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201578,"user_id":null,"body":"module Recre\nexport list_squared\n\nissquare(x) = isinteger(\u221ax)\nsq(x) = x ^ 2\nssum(x) = sum(\n  sq(i) + sq(x \u00f7 i)\n  for i in 1:floor(Int, \u221ax)\n  if x % i == 0\n) - (issquare(x) ? floor(Int, \u221ax) : 0)\ncheck(x) = let s = ssum(x)\n  issquare(s) ? (x, s) : missing\nend\nlist_squared(m, n) = [x for x in check.(m:n) if !ismissing(x)]\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201579,"user_id":null,"body":"module Recre\n    export list_squared\n\n  function checknum(n)\n    sum(Set(Iterators.flatten([(i, n\/i) for i in 1:\u221an if n % i == 0])).^2)\n  end\n\n  function list_squared(n, m)\n    [(i, checknum(i)) for i in n:m if isinteger(\u221a(checknum(i)))]\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55ab4f980f2d576c070000f4":[{"id":201580,"user_id":421,"body":"module Chess\n    export game\n\n    function game(n)\n        n *= n * 0.5\n        n % 1 == 0.5 ? [n * 2, 2] : [n]\n    end\n    \nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201581,"user_id":null,"body":"module Chess\n    export game\n    game(n) = iseven(n) ? [n*n>>1] : [n*n,2]\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201582,"user_id":null,"body":"module Chess\n    export game\n\n    function game(n)\n        num = n * n\n        return (num % 2 == 0) ? [num\/2] : [num, 2]\n    end\n    \nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201583,"user_id":null,"body":"module Chess\nexport game\n\ngame(n) = let s = big(n) * big(n)\n  n % 2 == 0 ? [s \u00f7 2] : [s, 2]\nend\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201584,"user_id":2525,"body":"module Chess\n    export game\n\n    function game(n)\n        # Brute force\n        #   fr = sum( (i-1) for i in big(2):big(n+1) )\/\/2 + sum( (n*(n+1)-i*(i-1))\/\/(i+n) for i in big(2):big(n) )\/\/2\n        # Use math to reduce the first sum\n        #   fr = n*(n+1)\/\/4 + sum( (n*(n+1)-i*(i-1))\/\/(i+n) for i in big(2):big(n) )\/\/2 \n        # Use more math to reduce the second sum\n        #   fr = n*(n+1)\/\/4 + ((n+1)*(n-2)+2)\/\/4\n        # Combine both. Hmm, ok that is so simple, there should be a simpler argument without doing all \n        # the work to arrive at this result. And that is that each diagonal sum up to L\/\/2 where L is the \n        # length of the diagonal.\n        fr = n^2\/\/2\n  \n        if denominator(fr)==1\n            [numerator(fr)]\n        else\n            [numerator(fr), denominator(fr)]\n        end        \n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201585,"user_id":null,"body":"module Chess\n    export game\n\n    function game(n)\n      double_prize = n^2\n      iseven(double_prize) ? [double_prize \u00f7 2] : [double_prize, 2]\n    end\n    \nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201586,"user_id":null,"body":"module Chess\n    export game\n\n    function game(n)\n      frac = Rational(0.5*n^2)\n      return denominator(frac) == 1 ? [numerator(frac)] : [numerator(frac), denominator(frac)]\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201587,"user_id":null,"body":"module Chess\n  export game\n\n  function game(n)\n    total = n * (n+1) \/\/ 2\n    total = total - n \/\/ 2\n    num = numerator(total)\n    dom = denominator(total)\n    dom == 1 ? [num] : [num, dom]\n  end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201588,"user_id":1474,"body":"module Chess\n  export game\n\n  function game(n)\n    iseven(n) ? [n ^ 2 \/ 2] : [n ^ 2, 2]\n  end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201589,"user_id":53,"body":"module Chess\n    export game\n\n    function game(n)\n        return ((n%2)==0) ? [n*n\/2] : [n*n,2];\n    end\n    \nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55ad04714f0b468e8200001c":[{"id":201590,"user_id":881,"body":"get_char = Char","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201591,"user_id":527,"body":"function get_char(c) \n  Char(c)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201592,"user_id":null,"body":"function get_char(c) \n  return Char(c)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201593,"user_id":null,"body":"get_char(c) = Char(c)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201594,"user_id":104,"body":"# 2020 nomennescio\nget_char(c)=convert(Char,c)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201595,"user_id":null,"body":"function get_char(c) \n  \n  a = Char(c)\n  \n  return a\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201596,"user_id":null,"body":"get_char(c) = convert(Char, c)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201597,"user_id":null,"body":"function get_char(c) \n  Char(Int(c))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55b3425df71c1201a800009c":[{"id":201598,"user_id":492,"body":"module Ath\n    export stat_assoc\n    using Printf\n    using Statistics\n\n    function stat_assoc(strg)\n        function time2snd(s)\n            a=map(x -> parse(Int, x), split(s, \"|\"))\n            3600 * a[1] + 60 * a[2] + a[3]\n        end\n        function snd2time(n)\n            h = div(n, 3600)\n            re = n % 3600\n            mn = div(re, 60)\n            s = re % 60\n            @sprintf(\"%02d|%02d|%02d\",  h, mn, s)\n        end\n        if (strg == \"\") return \"\" end\n        r = sort(map(x -> time2snd(x), split(strg, \", \")))\n        @sprintf(\"Range: %s Average: %s Median: %s\",  snd2time(r[end] - r[1]), snd2time(floor(mean(r))), snd2time(floor(median(r))))\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201599,"user_id":null,"body":"module Ath\n    export stat_assoc\n\nfunction tosecs(ss)\n    sssp = parse.(Int, split(ss, \"|\"))\n    return (3600 * sssp[1]) + (60 * sssp[2]) + sssp[3]\nend\n\nfunction formt(i)\n    return i < 10 ? \"0\" * string(i) : string(i)\nend\n\nfunction totime(secs)\n    s = secs < 60 ? secs : divrem(secs, 60)[2]\n    m = divrem(secs, 60)[1] < 60 ? divrem(secs, 60)[1] : divrem(divrem(secs, 60)[1], 60)[2]\n    h = divrem(divrem(secs, 60)[1], 60)[1]\n    return formt(h) * \"|\" * formt(m) * \"|\" * formt(s)\nend\n\nfunction medn(secs)\n    l = length(secs)\n    ss = sort(secs)\n    iseven(l) ? floor(Int, (ss[Int(l \/ 2)] + ss[Int(l \/ 2)+1]) \/ 2) : ss[ceil(Int, l \/ 2)]\nend\n\nfunction stat_assoc(s)\n    ssplit = map(x -> strip(x), split(s, \",\"))\n    secs = map(x -> tosecs(x), ssplit)\n    smean = floor(Int, (sum(secs) \/ length(secs)))\n    srange = maximum(secs) - minimum(secs)\n    smedian = floor(Int, medn(secs))\n    return string(\"Range: \", totime(srange), \" \", \"Average: \", totime(smean), \" \", \"Median: \", totime(smedian))\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201600,"user_id":null,"body":"module Ath\n    export stat_assoc\n    using Statistics  \n  \n    function convert(v)\n      h = Int64(floor(v\/3600))\n      m = Int64(floor((v-h*3600)\/60))\n      s = Int64(floor((v - h*3600 - m*60)))\n      res = lpad.(string.([h,m,s]), 2, '0')\n      return join(res, \"|\")\n    end\n    function stat_assoc(strg)\n        if strg == \"\"\n          return \"\"\n        end\n        data = split(strg, \", \")\n        data_sec = []\n        for d in data\n          val = parse.(Int64, split(d, \"|\"))\n          push!(data_sec, val[3] + 60*val[2] + 3600*val[1])\n        end\n  \n        r = convert(maximum(data_sec) - minimum(data_sec))\n        m = convert(mean(data_sec))\n        me = convert(median(data_sec))\n  \n        return \"Range: $r Average: $m Median: $me\"\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201601,"user_id":null,"body":"module Ath\n    export stat_assoc\n    using Printf\n    using Statistics\n\n    function stat_assoc(strg)\n        strg == \"\" && return \"\"\n        s = [3600 60 1] * parse.(Int, hcat(split.(split(strg, \", \"), '|')...))\n        hms(x) = @sprintf(\"%02.0f|%02.0f|%02.0f\", x \u00f7 3600, x % 3600 \u00f7 60, x % 3600 % 60)\n        @sprintf(\"Range: %s Average: %s Median: %s\", hms.(floor.([max(s...)-min(s...), mean(s), median(s)]))...)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201602,"user_id":2525,"body":"module Ath\n    export stat_assoc\n\n    using Printf\n\n    function fmt(s) \n        @sprintf(\"%02d|%02d|%02d\", s\u00f73600, s%3600\u00f760, floor(Int, s%60))\n    end\n    function stat_assoc(strg)\n        if strg == \"\"\n            \"\"\n        end\n  \n        times = [ parse.(Int, split(athlet, \"|\")) for athlet in split(strg, \", \")]\n        seconds = [3600*h+60*m+s for (h, m, s) in times]\n      \n        range   = fmt(maximum(seconds)-minimum(seconds))\n        average = fmt(sum(seconds)\/length(seconds))\n        median  = fmt(if length(seconds)%2==0; sum(sort(seconds)[end\u00f72:end\u00f72+1])\/2 else sort(seconds)[end\u00f72+1] end)\n\n        \"Range: $range Average: $average Median: $median\" \n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201603,"user_id":null,"body":"module Ath\n    export stat_assoc\n    using Statistics\n    using Dates\n\n    function stat_assoc(strg)\n        if strg == \"\"\n          return \"\"\n        end\n        df = DateFormat(\"HH|MM|SS\")\n        split_strg = split(strg, \", \")\n        times = Dates.value.(Time.(split_strg, df) .- Time(0,0,0))\n        range_time = Time(0) + Nanosecond(round(Int64, (maximum(times) - minimum(times))))\n        mean_time = Time(0) + Nanosecond(round(Int64, mean(times)))\n        median_time = Time(0) + Nanosecond(round(Int64, median(times)))\n        range_string = Dates.format(range_time, df)\n        mean_string = Dates.format(mean_time, df)\n        median_string = Dates.format(median_time, df)\n        return \"Range: $range_string Average: $mean_string Median: $median_string\"\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201604,"user_id":null,"body":"module Ath\n    export stat_assoc\n\n    function stat_assoc(strg)\n        if string == \"\" \n          return(\"\")\n        end\n        println(strg)\n        times = split(strg, \",\")\n        stat_assocs = []\n        for time in times\n          vals = split(time, \"|\")\n          if length(vals) != 3\n            return \"\" \n          end\n          newstat_assoc = parse(Int,vals[1])*3600 + (parse(Int,vals[2])*60) + parse(Int,vals[3])\n          push!(stat_assocs, newstat_assoc)\n        end\n  \n        sort!(stat_assocs)\n        range = stat_assocs[end]-stat_assocs[1]\n        if length(stat_assocs)%2 == 1\n          med = stat_assocs[length(stat_assocs)\u00f72+1]\n        else\n          med = trunc(Int,sum(stat_assocs[length(stat_assocs)\u00f72:length(stat_assocs)\u00f72+1])\/2)\n        end\n        avg = trunc(Int, sum(stat_assocs)\/length(stat_assocs))\n        rangeh = lpad(range\u00f73600, 2, \"0\")\n        rangem = lpad(range\u00f760%60,2, \"0\")\n        ranges = lpad(range%60, 2, \"0\")\n        medh = lpad(med\u00f73600, 2, \"0\")\n        medm = lpad(med\u00f760%60, 2, \"0\")\n        meds = lpad(med%60, 2, \"0\")\n        avgh = lpad(avg\u00f73600, 2, \"0\")\n        avgm = lpad(avg\u00f760%60, 2, \"0\")\n        avgs = lpad(avg%60, 2, \"0\")\n        return(\"Range: $rangeh|$rangem|$ranges Average: $avgh|$avgm|$avgs Median: $medh|$medm|$meds\")\n        \n    end\n\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201605,"user_id":null,"body":"module Ath\n    export stat_assoc\n\n    using Statistics\n    using Printf\n\n    function stat_assoc(strg)\n        if isempty(strg)\n            return \"\"\n        end\n  \n        parseint(x) = isempty(x) ? 0 : parse(Int, x)\n  \n        fmt(time) = begin\n            (h, m) = divrem(floor(time), 3600)\n            (m, s) = divrem(m, 60)\n             @sprintf(\"%02d|%02d|%02d\", h, m, s)\n        end\n  \n        times = map(split(strg, \", \")) do t\n            (h, m, s) = parseint.(split(t, \"|\"))\n            s + 60m + 3600h\n        end\n  \n        \"Range: \"   * fmt(maximum(times)-minimum(times)) * \" \" *\n        \"Average: \" * fmt(mean(times)) * \" \" *\n        \"Median: \"  * fmt(median(times))\n        \n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201606,"user_id":null,"body":"module Ath\n    using Printf\n    export stat_assoc\n\n    function str2sec(str)\n        hours, minutes, seconds = map(x -> parse(Int, x), split(str, '|'))\n        return 3600*hours + 60*minutes + seconds\n    end\n\n    function sec2str(seconds)\n        hours = div(seconds, 3600)\n        seconds = seconds - 3600*hours\n        minutes = div(seconds, 60)\n        seconds = seconds - 60*minutes\n        return @sprintf(\"%02d|%02d|%02d\", hours, minutes, seconds)\n    end\n\n    function stat_assoc(strg)\n        team = str2sec.(split(strg, \", \")) |> sort\n        range = sec2str(team[end] - team[1])\n        average = sec2str(fld(sum(team), length(team)))\n        median = iseven(length(team)) ? sec2str(fld(sum(team[length(team)\u00f72:length(team)\u00f72+1]), 2)) : sec2str(team[length(team)\u00f72+1])\n        return @sprintf(\"Range: %s Average: %s Median: %s\", range, average, median)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201607,"user_id":null,"body":"module Ath\nexport stat_assoc\n\nfunction toSeconds(arr)\n  h, m, s = (x -> parse(Int, x)).(split(arr, \"|\"))\n  t = h * 3600 + m * 60 + s  \nend\n\nfunction toHMS(t)\n  s = t % 60\n  t = div(t, 60)\n  m = t % 60\n  h = div(t, 60)\n  join((x -> lpad(x, 2, \"0\")).([h, m, s]), \"|\")\nend\n\nfunction stat_assoc(strg)\n  times = sort(toSeconds.(split(strg, \", \")))\n  range = times[end] - times[1]\n  avg = Int(floor(sum(times) \/ length(times)))\n  mid = Int(ceil(length(times) \/ 2))\n  median = length(times) & 1 == 1 ? times[mid] : Int(floor((times[mid] + times[mid + 1]) \/ 2))\n  \"Range: \" * toHMS(range) * \" Average: \" * toHMS(avg) * \" Median: \" * toHMS(median)\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55b350026cc02ac1a7000032":[{"id":201608,"user_id":881,"body":"function whitespacenumber(n)::String\n  (n > 0 ? ' ' : \"\" ) * join(replace([string(n, base=2)...], '0'=>' ', '1'=>'\\t', '-'=>'\\t')) * '\n'\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201609,"user_id":null,"body":"function whitespacenumber(n)\n  (n==0) ? \" \n\" : ((replace(replace(string(n, base = 2), \"1\"=>\"\\t\"), \"0\"=>\" \")[1] == '-') ? replace(replace(replace(string(n, base = 2), \"1\"=>\"\\t\"), \"0\"=>\" \"), \"-\"=>\"\\t\") : \" \" * replace(replace(string(n, base = 2), \"1\"=>\"\\t\"), \"0\"=>\" \")) * \"\n\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201610,"user_id":null,"body":"function whitespacenumber(n)\n  sign = (n < 0) ? \"\\t\" : (n == 0 ? \"\" : \" \")\n  bn = join(map(x -> x == '1' ? \"\\t\" : \" \", collect(string(abs(n), base=2))))\n  string(sign, bn, \"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201611,"user_id":null,"body":"function whitespacenumber(n)\n  out = \"\n\"\n  x = abs(n)\n  while x !=0\n    out = (x % 2 == 1 ? '\\t' : ' ') * out\n    x = floor(x\/2)\n  end\n  return (n < 0 ? \"\\t\" : \" \") * out\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201612,"user_id":480,"body":"function whitespacenumber(n)\n  (n<0 ? \"\\t\" : n==0 ? \"\" : \" \")*replace(replace(string(abs(n);base=2),\"0\"=>\" \"),\"1\"=>\"\\t\")*\"\n\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201613,"user_id":null,"body":"function whitespacenumber(n)\n    n == 0 ? \" \n\" : (n < 0 ? '\\t' : \" \") * join(d == '1' ? '\\t' : \" \" for d in string(abs(n), base=2)) * '\n'\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201614,"user_id":null,"body":"function whitespacenumber(n)\n  whitespace = []\n  if n < 0\n    push!(whitespace, \"\\t\")\n  else\n    push!(whitespace, \" \")\n  end\n  if n \u2260 0\n    whitespace = vcat(whitespace, [b == '1' ? \"\\t\" : \" \" for b in string(abs(n); base=2)])\n  end\n  push!(whitespace, \"\n\")\n  return join(whitespace, \"\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201615,"user_id":null,"body":"function whitespacenumber(n)\n  if n == 0 return \" \n\" end\n    \n  (n > 0 ? \" \" : \"\\t\") * String(map(x -> x == 0 ? ' ' : '\\t' , Iterators.reverse(digits(n, base=2)))) * \"\n\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201616,"user_id":null,"body":"whitespacenumber(n) = Dict('-' => \"\\t\", '0' => \" \", '1' => \"\\t\") |> d -> [d[x] for x in string(n, base=2)] |> join |> s -> (n > 0 ? \" \" :  \"\") * s * \"\n\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201617,"user_id":null,"body":"whitespacenumber(n) = Dict('0' => \" \", '1' => \"\\t\") |> d -> [d[x] for x in string(abs(n), base=2)] |> join |> s -> (n == 0 ? \"\" : (n < 0 ? \"\\t\" : \" \")) * s * \"\n\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55b4d87a3766d9873a0000d4":[{"id":201618,"user_id":null,"body":"module How\n    export howmuch\n\n    function howmuch(m, n)  \n        [(\"M: $f\", \"B: $(f \u00f7 7)\", \"C: $(f \u00f7 9)\") for f = min(m,n):max(m,n) if (f % 7 == 2 && f % 9 == 1)]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201619,"user_id":null,"body":"module How\n    export howmuch\n\n    function howmuch(m, n)  \n        lower, upper = Int(ceil((min(m,n)+26)\/63)), Int(floor((max(m,n)+26)\/63))\n        [(\"M: $(63*i-26)\", \"B: $(9*i-4)\", \"C: $(7*i-3)\") for i in lower:upper]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201620,"user_id":null,"body":"module How\n    export howmuch\n\n    function howmuch(m, n)  \n        # your code\n        if n < m\n            return howmuch(n, m)\n        end\n  \n        res = Vector{Tuple{String, String, String}}()\n        for m0 in m:n\n            (b, r0) = divrem(m0 - 2, 7)\n            (c, r1) = divrem(m0 - 1, 9)\n            if r0 == 0 && r1 == 0\n                push!(res, (\"M: $m0\", \"B: $b\", \"C: $c\"))\n            end\n        end\n  \n        res\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201621,"user_id":null,"body":"module How\n    export howmuch\n\n    howmuch(m, n)  = [(\"M: $f\", \"B: $(f\u00f77)\", \"C: $(f\u00f79)\") for f in min(m,n):max(m,n) if f % 9 == 1 && f % 7 == 2]\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201622,"user_id":null,"body":"module How\n    export howmuch\n\n    function howmuch(m, n)\n        collect(skipmissing([f % 9 == 1 && f % 7 == 2 ? (\"M: $f\", \"B: $(f\u00f77)\", \"C: $(f\u00f79)\") : missing for f in min(m,n):(max(m,n))]))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201623,"user_id":53,"body":"module How\n    export howmuch\n\n    function howmuch(m, n)  \n        ans = []\n        for i in min(m, n):max(m, n)\n            if (i % 9 == 1 && i % 7 == 2)\n                push!(ans, (\"M: $(i)\", \"B: $(i \u00f7 7)\", \"C: $(i \u00f7 9)\"))\n            end\n        end\n        ans\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201624,"user_id":null,"body":"module How\n    export howmuch\n\n    function howmuch(m, n)  \n        if m > n\n            n, m = m, n\n        end\n        out = []\n        for M in m:n\n            ((M-1) % 9 == 0 && (M-2) % 7 == 0 && \n             push!(out, (\"M: \"*string(M), \"B: \"*string(div(M-2, 7)), \"C: \"*string(div(M-1,9)))))\n        end\n        return out\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201625,"user_id":null,"body":"module How\n    export howmuch\n\n    function howmuch(m, n)\n        sols = Vector{Tuple{String, String, String}}()\n        for M in (min(m, n)):(max(m, n))\n          (b, rb) = divrem(M, 7)\n          (c, rc) = divrem(M, 9)\n          if rb == 2 && rc == 1\n            push!(sols, (\"M: $M\", \"B: $b\", \"C: $c\"))\n          end\n        end\n        return sols\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201626,"user_id":1474,"body":"module How\n  export howmuch\n\n  function howmuch(m, n)  \n    m, n = minmax(m, n)\n    s = m % 9 == 0 ? m + 1 : m \u00f7 9 * 9 + 10\n    [(\"M: $i\", \"B: $(i\u00f77)\", \"C: $(i\u00f79)\") for i in s:9:n if (i-1) % 9 == 0 && (i-2) % 7 == 0]\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201627,"user_id":null,"body":"module How\n    export howmuch\n\n    function howmuch(m, n)  \n    arr = []\n    #swap the two numbers if m is larger\n    if m > n\n      m,n = n,m\n    end\n      for h = m:n\n        for i = 1:n\n          for j = 1:n\n            if h - (7 * j) == 2 && h - (9 * i) == 1\n              push!(arr, (\"M: $h\",\"B: $j\",\"C: $i\"))\n            end\n          end\n        end\n      end\n      return arr\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55be10de92aad5ef28000023":[{"id":201628,"user_id":759,"body":"module Color\n    export checkchoose\n\n    function checkchoose(m, n)\n        m < 1 && return -1\n        m == 1 && return 0\n        c = BigInt(1)\n        for i in 1:div(n, 2)\n            c = div(c * (n - i + 1), i)\n            c == m && return i\n            c > m && return -1\n        end\n        -1\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201629,"user_id":null,"body":"module Color\n    export checkchoose\n\n    function checkchoose(n, m)\n        for i in 0:(m \u00f7 2)+1 \n            binomial(BigInt(m), i) == n && return i \n        end\n        -1\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201630,"user_id":null,"body":"module Color\n    export checkchoose\n\n    function checkchoose(m, n)\n        if m==1\n          return 0\n        end\n        # your code\n        for x in 1:n\n          println(\"$x:$n:$m\")\n          if binomial(convert(Int128, n), convert(Int128, x)) == m\n            return x\n          elseif binomial(convert(Int128, n), convert(Int128, x)) > m\n            break\n          end\n        end\n        return -1\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201631,"user_id":null,"body":"module Color\n    export checkchoose\n\n    function checkchoose(m, n)\n        for x in 0:n\u00f72+1\n            if partfactorial(big(n-x), big(n)) \/ factorial(big(x)) == m\n                return x\n            end\n        end\n        return -1\n    end\n\n    function partfactorial(x::BigInt, y::BigInt)\n      f::BigInt = 1\n      for i = x+1:y\n          f *= i\n      end\n      return f\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201632,"user_id":null,"body":"module Color\nexport checkchoose\n\nfunction checkchoose(m, n)\n  if m == 1\n    return 0\n  end\n  n = big(n)\n  x = big(1)\n  while true\n    b = binomial(n, x)\n    if b == m\n      return x\n    elseif b == 0 || b > m\n      return -1\n    end\n    x += 1\n  end\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201633,"user_id":53,"body":"module Color\n    export checkchoose\n\n    function checkchoose(m, n)\n        if m == 1\n            return 0\n        end\n        x = BigInt(1)\n        r = BigInt(1)\n        i = 1\n        while i < n \/ 2 + 1\n            x = x * (n - i + 1)\n            r = r * i\n            if x \/ r == m\n                return i\n            end\n            i = i + 1\n        end\n        return -1\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201634,"user_id":1474,"body":"module Color\n  export checkchoose\n\n  function checkchoose(m, n)\n    if m == 1\n      return 0\n    end\n    n = BigInt(n)\n    for i in 1:n\n      if m == prod(n-i+1:n) \u00f7 factorial(i)\n        return i\n      end\n    end\n    -1\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201635,"user_id":null,"body":"module Color\n    export checkchoose\n\n    function checkchoose(m, n)\n        f(x) = factorial(big(x))\n        n_1 = f(n)\n        for i in 0:n\n            n_1\u00f7f(n-i)\u00f7f(i) == m && return i\n        end\n        -1\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201636,"user_id":null,"body":"module Color\n  export checkchoose\n\n  function checkchoose(m, n)\n    for k in 0 : div(n, 2)\n      if binomial(big(n), big(k)) == big(m)\n        return k\n      end\n    end\n    -1\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201637,"user_id":null,"body":"module Color\n  export checkchoose\n\n  function checkchoose(m, n)\n    m == 1 && return 0\n    for k in 1 : n\n      if binomial(big(n), big(k)) == big(m)\n        return k\n      end\n    end\n    -1\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55bf01e5a717a0d57e0000ec":[{"id":201638,"user_id":null,"body":"function persistence(num)\n    count = 0\n    while num > 9\n        num = reduce(*,digits(num))\n        count += 1\n    end\n    count\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201639,"user_id":null,"body":"persistence(num) = num <= 9 ? 0 : 1 + persistence(num |> digits |> prod)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201640,"user_id":572,"body":"global i = 0\nfunction persistence(n)\n    if n < 10\n        j = i\n        i = 0\n        return j\n    end\n    x = prod(digits(n))\n    global i += 1\n    return persistence(x)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201641,"user_id":null,"body":"function persistence(num)\n  p = 0\n  while num > 9\n    num = reduce(*, digits(num))\n    p += 1\n  end\n  return p\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201642,"user_id":null,"body":"function persistence(num)\n  num < 10 && return 0\n  return 1+persistence(prod(parse.(Int64, split(string(num),\"\"))))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201643,"user_id":881,"body":"persistence(num, k = 0) = num < 10 ? k : persistence(prod(parse.(Int, split(string(num), \"\"))), k + 1)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201644,"user_id":null,"body":"persistence(num) = num <= 9 ? 0 : 1 + persistence(prod(digits(num)))\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201645,"user_id":null,"body":"function persistence(num, counter=0)\n  if num < 10\n    return counter\n  end\n  \n  new_num = 1\n  \n  while num > 0\n    num, rem = divrem(num, 10)\n    new_num *= rem\n  end\n  \n  return persistence(new_num, counter+1)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201646,"user_id":null,"body":"function multiplydigits(num)\n  chars = string(num)\n  product = 1\n  for char in chars\n    product *= parse(Int64, char) \n  end\n  \n  return product\nend\n\nfunction persistence(num)\n  multiplications = 0\n  \n  while length(string(num)) != 1\n    num = multiplydigits(num)\n    multiplications += 1\n  end\n\n  println(num, multiplications)\n  return multiplications\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201647,"user_id":null,"body":"function persistence(num)\n    \n    i = 0\n    while length(digits(num)) > 1\n        i +=1\n        num = reduce(*,(digits(num)))\n    end\n\n    return i\n\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55c45be3b2079eccff00010f":[{"id":201648,"user_id":881,"body":"function order(words)\n  findnum(w) = match(r\"\\d\", w).match\n  join(sort(split(words, \" \"), lt = (a, b) -> findnum(a) < findnum(b)), \" \")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201649,"user_id":null,"body":"function extract_number(word)\n  match(r\"\\d\", word).match |> s -> parse(Int, s)\nend\n\nfunction order(words)\n  sort(split(words), by=extract_number) |>\n  vector -> join(vector, \" \")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201650,"user_id":421,"body":"function order(words)\n  join(sort(split(words), by = x-> filter(isdigit, x)), \" \")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201651,"user_id":null,"body":"function order(words)\n    join(sort!(split(words), by=numberWord), \" \")\nend\n\nfunction numberWord(word)\n    for ch in word\n        if isdigit(ch)\n            return ch - '0'\n        end\n    end\n    0\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201652,"user_id":null,"body":"function order(words)\n  splitted = split(words)\n  join([splitted[q] for q in invperm([parse(Int,match(r\"\\d\",word).match) for word in splitted])], ' ')\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201653,"user_id":null,"body":"function order(words)\n  join(map(((i, word),) -> word, sort(map(word -> (match(r\"\\d\", word).match, word), split(words)))), \" \")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201654,"user_id":null,"body":"function order(words)\n  sorted = fill(\"\", length(split(words)))\n  for word in split(words)\n    for i in word\n      try \n        n = parse(Int, i)\n        println(typeof(n))\n        sorted[n] = word\n      catch\n        continue\n      end\n    end\n  end\n  return join(sorted, \" \")\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201655,"user_id":null,"body":"function order(text)\n    if isempty(text)\n        return \"\"\n    end\n    words = split(text, ' ')\n    string_digits(word) = parse(Int, join([char for char \u2208 word if char \u2208 Set(['1', '2', '3', '4', '5', '6', '7', '8', '9'])]))\n    word_digits = map(string_digits, words)\n    words[word_digits] = words[1:end]\n    return join(words, \" \")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201656,"user_id":null,"body":"function order(sentence)\n  function extract_number(string)\n    match(r\"\\d\", string).match |> s -> parse(Int, s)\n  end\n\n\n  words = split(sentence)\n  numbers = words .|> extract_number\n  dict = Dict{Int,String}()\n\n  for i \u2208 1:length(words)\n    dict[numbers[i]] = words[i]\n  end\n\n  map(k -> dict[k], sort(numbers)) |>\n  vector -> join(vector, \" \")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201657,"user_id":null,"body":"function order(words)\n  ws = split(words,' ')\n  num(s) = filter(c->'1'\u2264c\u2264'9',s)\n  return join(sort(ws, lt=(x,y)->num(x) < num(y)), ' ')\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55c6126177c9441a570000cc":[{"id":201658,"user_id":null,"body":"module Weight\n    export order_weight\n\n    order_weight(weights) = join(sort(weights |> split |> sort, by=sum\u2218digits\u2218Meta.parse), ' ')\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201659,"user_id":492,"body":"module Weight\n    export order_weight\n\n    function order_weight(strng)\n        join(sort(sort(split(strng, \" \")), by = x -> sum(digits(parse(Int, x)))), \" \")\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201660,"user_id":null,"body":"module Weight\n    export order_weight\n\nfunction sort_rule(n)\n    digit_arr = digits(n) |> reverse\n    sum_digits = sum(digit_arr)\n    return [sum_digits, digit_arr]\nend\n\n\nfunction order_weight(s::String)\n    numbers = s |> split .|> x -> parse(Int64, x)\n    sort(numbers, by=sort_rule) |> x -> join(x, \" \")\nend\n\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201661,"user_id":null,"body":"module Weight\n    export order_weight\n\n    function order_weight(strng)\n\n      numbers = map(split(strng, \" \", keepempty=false)) do x\n        (sum(digits(parse(Int,x))), x)\n      end\n  \n      join((t[2] for t=sort(numbers)), \" \")\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201662,"user_id":null,"body":"module Weight\n    export order_weight\n\nfunction order_weight(strng)\n    nums = sort(split(strng, \" \"))\n    sort!(nums, by = key)\n    return join(nums, \" \")\nend\n\nfunction key(num)\n    return sum(digits(parse(Int64, num)))\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201663,"user_id":null,"body":"module Weight\n    export order_weight\n\n    function order_weight(strng)\n        weight = split(strng)\n        cheat = parse.(Int,weight) .|> digits .|> sum\n\n        join(\n            getindex.( \n                zip(cheat, weight) |> collect |> sort, \n                2\n            ),\n            \" \"\n        )\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201664,"user_id":null,"body":"module Weight\n    export order_weight\n\n    function order_weight(strng)\n        weight = split(strng)\n        cheat = parse.(Int,weight) .|> digits .|> sum\n\n        join(\n            sort(collect(zip(cheat, weight))) .|> t-> t[2] ,\n            \" \"\n        )\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201665,"user_id":null,"body":"module Weight\n    export order_weight\n\n    function digits(num)\n      digs = []\n      while num > 0\n        push!(digs, mod(num, 10))\n        num = div(num, 10)\n      end\n      digs \n    end\n\n    function order_weight(strng)\n      real_weights = map(s -> parse(Int64, s), split(strng))\n      sort!(real_weights, by=w->(sum(digits(w)), string(w)))\n      join(string.(real_weights), \" \")\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201666,"user_id":null,"body":"module Weight\n    export order_weight\n\n    function weight(x)\n      sum(digits(x, base = 10))\n    end\n\n    function order_weight(strng)\n      numbers = [parse(Int, x) for x in split(strng)]\n      numbers = sort(numbers, by=string)\n      numbers = sort(numbers, by=weight, alg=InsertionSort) #Insertions sort is stable\n      return join(numbers, \" \")\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201667,"user_id":null,"body":"module Weight\n    export order_weight\n\n    function lt(a, b)\n        w1 = reduce(+, i for i in digits(a))\n        w2 = reduce(+, i for i in digits(b))\n        if w1 < w2\n            return true\n        elseif w2 < w1\n            return false\n        end\n        return string(a) < string(b)\n    end\n\n    function order_weight(strng)\n        list = parse.(Int, split(strng))\n        join(sort!(list, lt=lt), ' ')\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55cb632c1a5d7b3ad0000145":[{"id":201668,"user_id":421,"body":"function hoop_count(n)\n  n >= 10 ? \"Great, now move on to tricks\" : \"Keep at it until you get it\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201669,"user_id":null,"body":"function hoop_count(n)\n  n > 9 ? \"Great, now move on to tricks\" : \"Keep at it until you get it\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201670,"user_id":null,"body":"function hoop_count(n)\n  return n < 10 ? \"Keep at it until you get it\" : \"Great, now move on to tricks\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201671,"user_id":null,"body":"function hoop_count(n)\n  if n >= 10\n    return \"Great, now move on to tricks\"\n  end\n  return \"Keep at it until you get it\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201672,"user_id":null,"body":"hoop_count(n) = n >= 10 ? \"Great, now move on to tricks\" : \"Keep at it until you get it\"\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201673,"user_id":null,"body":"hoop_count(n) =  n < 10 ? \"Keep at it until you get it\" : \"Great, now move on to tricks\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201674,"user_id":null,"body":"hoop_count(n) = n > 9 ? \"Great, now move on to tricks\" : \"Keep at it until you get it\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201675,"user_id":76,"body":"function hoop_count(n)\n  n < 10 ? \"Keep at it until you get it\" : \"Great, now move on to tricks\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55cbc3586671f6aa070000fb":[{"id":201676,"user_id":null,"body":"function check_for_factor(base, factor)\n  return base % factor == 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201677,"user_id":527,"body":"function check_for_factor(base, factor)\n  base % factor == 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201678,"user_id":645,"body":"check_for_factor(base, factor) = base % factor == 0","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201679,"user_id":null,"body":"function check_for_factor(base, factor)\n  return true ? base % factor == 0 : false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201680,"user_id":null,"body":"function check_for_factor(base, factor)\n  base % factor == 0 ? true : false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201681,"user_id":null,"body":"check_for_factor(base, factor) = iszero(base % factor)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201682,"user_id":null,"body":"function check_for_factor(base, factor)\n  if (base % factor) > 0\n    false\n  else\n    true\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201683,"user_id":null,"body":"function check_for_factor(base, factor)\n  mod(base,factor) == 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201684,"user_id":null,"body":"function check_for_factor(base, factor)\n  base % factor === 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201685,"user_id":null,"body":"function check_for_factor(base, factor)\n  if base%factor==0\n  return true\n  else\n  return false\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55cbd4ba903825f7970000f5":[{"id":201686,"user_id":null,"body":"function get_grade(a, b, c)\n  if a == b == c == 0\n    return 'F'\n  else\n    return \"FFFFFDCBAA\"[div((a+b+c),30)]\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201687,"user_id":null,"body":"function get_grade(a, b, c)\n  score = +(a,b,c)\/3\n  score<60 ? 'F' : score<70 ? 'D' : score<80 ? 'C' : score<90 ? 'B' : 'A'\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201688,"user_id":759,"body":"function get_grade(a, b, c)\n  d = (a + b + c) \/ 3\n  if 90 <= d <= 100\n    'A'\n  elseif 80 <= d < 90\n    'B'\n  elseif 70 <= d < 80\n    'C'\n  elseif 60 <= d < 70\n    'D'\n  else\n    'F'\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201689,"user_id":null,"body":"function get_grade(a, b, c)\n  x = (a + b + c) \/ 3\n  \n  if 90 <= x && x <= 100\n    'A'\n  elseif 80 <= x && x < 90\n    'B'\n  elseif 70 <= x && x < 80\n    'C'\n  elseif 60 <= x && x < 70\n    'D'\n  else\n    'F'\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201690,"user_id":null,"body":"function get_grade(a, b, c)\n  \"ABCDF\"[findfirst(\n    [90, 80, 70, 60, 0] .<= (a + b + c) \/ 3\n  )]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201691,"user_id":2723,"body":"get_grade(a, b, c) = begin\n  avg = (a+b+c)\u00f73\n  avg > 89 ? 'A' :\n  avg > 79 ? 'B' :\n  avg > 69 ? 'C' :\n  avg > 59 ? 'D' : 'F'\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201692,"user_id":645,"body":"function get_grade(a, b, c)\n  s = (a + b + c) \/ 3\n  90 <= s ? 'A' : 80 <= s ? 'B' : 70 <= s ? 'C' : 60 <= s ? 'D' : 'F'\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201693,"user_id":null,"body":"function get_grade(a, b, c)\n  # your code here\n  scores = (a + b + c) \/ 3\n  \n  if 90 <= scores <= 100\n    'A'\n  elseif 80 <= scores <= 90\n    'B'\n  elseif 70 <= scores <= 80\n    'C'\n  elseif 60 <= scores <= 70\n    'D'\n  else\n    'F'\n  \n  end\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201694,"user_id":null,"body":"function get_grade(a, b, c)\n  avg = sum([a,b,c])\/3\n  if 90 <= avg <= 100\n    return 'A'\n  end\n  if 80 <= avg < 90\n    return 'B'\n  end\n  if 70 <= avg < 80\n    return 'C'\n  end\n  if 60 <= avg < 70\n    return 'D'\n  end\n  if 0 <= avg < 60\n    return 'F'\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201695,"user_id":null,"body":"function get_grade(a, b, c)\n  average = (a + b + c) \/ 3\n  if average >= 90\n    'A'\n  elseif average >= 80\n    'B'\n  elseif average >= 70\n    'C'\n  elseif average >= 60\n    'D'\n  else\n    'F'\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55d24f55d7dd296eb9000030":[{"id":201696,"user_id":null,"body":"function summation(num)\n  sum(1:num)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201697,"user_id":null,"body":"summation(n) = n * (n + 1) \/ 2","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201698,"user_id":527,"body":"function summation(num)\n  num * (num + 1) \/ 2\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201699,"user_id":null,"body":"summation(num) = (num*(num+1)) \u00f7 2","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201700,"user_id":null,"body":"summation(num) = reduce(+, 1:num)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201701,"user_id":null,"body":"function summation(num)\n  return reduce(+, collect(1:num))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201702,"user_id":null,"body":"function summation(num)\n  sum(map(sum,0:num))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201703,"user_id":1624,"body":"function summation(num)\n  return num * (num+1) \/ 2\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201704,"user_id":881,"body":"# brainfuck\/Julia polyglot\nfunction summation(num)      \n    result = 0            # ,[[\n    while num > 0         # +>+<<-]\n        i = num\n        while i > 0       # >[<<\n            result += 1   # >>-]<[\n            i -= 1        # >>+<<]<\n        end\n        num -= 1          # ]>>>.\n    end                   \n    return result         \nend               \n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201705,"user_id":null,"body":"function summation(num)\n  return sum(range(1, num, step=1))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55d410c492e6ed767000004f":[{"id":201706,"user_id":421,"body":"function vowel2index(str::String)::String\n    join([x in \"aeiouAEIOU\" ? string(i) : x for (i, x) in enumerate(str)])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201707,"user_id":1474,"body":"function vowel2index(str::String)::String\n  vows = \"aeiou\"\n  join(lowercase(c) in vows ? string(i) : c for (i, c) in enumerate(str))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201708,"user_id":null,"body":"function vowel2index(str::String)::String\n    join(occursin(v,\"aeiouAEIOU\") ? string(i) : v for (i,v) in enumerate(str))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201709,"user_id":null,"body":"function vowel2index(str::String)::String\n    str == \"\" ? \"\" : [occursin(l, \"AEIOUaeiou\") ? string(id) : l for (id, l) in enumerate(split(str, \"\"))] |> join\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201710,"user_id":null,"body":"function vowel2index(str::String)::String\n    join([str[index] in  \"aeiouAEIOU\" ? index : str[index] for index in 1:length(str)], \"\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201711,"user_id":759,"body":"function vowel2index(str::String)::String\n  join(str[i] in \"aeiouAEIOU\" ? string(i) : str[i] for i in 1:length(str))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201712,"user_id":881,"body":"function vowel2index(str::String)::String\n    join((l in \"aeiouAEIOU\" ? string(d) : l) for (d, l) in Iterators.enumerate(str))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55e2adece53b4cdcb900006c":[{"id":201713,"user_id":null,"body":"module Tortoise\n    export race\n\n    function race(v1, v2, g)\n        v1 < v2 || return [-1,-1,-1]\n        s = div(g*3600, (v2-v1))\n        m, s = div(s,60), s%60\n        h, m = div(m,60), m%60\n        return [h, m, s]\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201714,"user_id":492,"body":"module Tortoise\n    export race\n\n    function race(v1, v2, g)\n        d = v2 - v1\n        if (d <= 0)\n            return [-1,-1,-1]\n        end\n        h = div(g, d)\n        r = g % d\n        mn = div(r * 60, d)\n        s = div((r * 60 % d) * 60, d)\n        Int[h, mn, s]\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201715,"user_id":null,"body":"module Tortoise\n    export race\n    hms(s)=[s\u00f73600,s\u00f760%60,s%60]\n    race(v1,v2,g)=v1>=v2 ? [] : hms(3600g\u00f7(v2-v1))\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201716,"user_id":null,"body":"module Tortoise\n    export race\n\n    function race(v1, v2, g)\n        if v1 >= v2\n          return Int64[-1,-1,-1]\n        end\n  \n        distance = (v1 * g) \/ (v2 - v1)\n\n        hours = distance \/ v1\n        h = Int(floor(Int64, hours))\n        minutes = (hours - h) * 60\n        m = Int(floor(Int64, minutes))\n        seconds = (minutes - m) * 60\n        s = Int(floor(seconds))\n  \n        return [h, m, s]\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201717,"user_id":881,"body":"module Tortoise\nexport race\n\n\"Convert seconds to [hours, minutes, seconds]\"\nstohms(seconds::Real) = Int[seconds \u00f7 3600, seconds \u00f7 60 % 60, floor(seconds) % 60]\n\n\"Convert hours to [hours, minutes, seconds]\"\nhtohms(hours::Real) = stohms(hours * 3600)\n\nfunction race(v1, v2, g)\n    v1 < v2 ? htohms(g \/ (v2 - v1)) : Int[]\nend\n\nend # module","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201718,"user_id":null,"body":"module Tortoise\n    export race\n\n    function race(v1, v2, g)\n      if v2 - v1 <= 0\n        return []\n      else  \n            h, g = divrem(g, v2 - v1)\n            m, g = divrem(g * 60, v2 - v1 )\n            s, g = divrem(g * 60, v2 - v1)\n      return [h, m, s]\n      end\n    end\n    \nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201719,"user_id":null,"body":"module Tortoise\n    export race\n\n    function race(v1, v2, g)\n        if v1 >= v2\n          return []\n        end\n        t = g\/(v2 - v1)\n        h = floor(t)\n        m = (t - h) * 60\n        s = ((m - floor(m)) * 60 + 0.00001)\n        if floor(s) == 60.0\n          s = 0\n          m += 1\n        end\n        return [h, floor(m), floor(s)]\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201720,"user_id":null,"body":"module Tortoise\n    export race\n\n    function time_to_hms(t)\n        t = floor(t * 3600)\n        hms = [0, 0, 0]\n        for (i, val) in enumerate([3600, 60, 1])\n            hms[i], t = divrem(t, val)\n        end\n        hms\n    end\n\n    function race(v1, v2, g)\n        if v1 >= v2 return [] end\n        time_to_hms(g \/ (v2 - v1))\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201721,"user_id":null,"body":"module Tortoise\n    export race\n\n    function race(v1, v2, g)\n    if v1 \u2265 v2\n        return Int64[-1,-1,-1]\n    end\n    time = (g\/(v2-v1))\n    hours = floor(time)\n    minutes = trunc((time % 1) * 60)\n    seconds = trunc((((time % 1) * 60) % 1) * 60)\n    if ((((time % 1) * 60) % 1) * 60) % 1 > .999\n        if seconds + 1 == 60\n          minutes +=1\n          seconds = 0\n        else\n          seconds += 1\n        end\n    end\n    return [Int(hours),Int(minutes),Int(seconds)]\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201722,"user_id":null,"body":"module Tortoise\n    export race\n\n    function race(v1, v2, g)\n      x = g\/(v2-v1) #Time for gab to close i h\n      if x < 0\n        return [-1,-1,-1]\n      end\n      x *= 3600\n  \n      h = fld(x, 3600)\n      x -= h * 3600\n      m = fld(x, 60)\n      x -= m * 60\n      s = fld(x, 1)\n      return [h, m, s]\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55e6f5e58f7817808e00002e":[{"id":201723,"user_id":null,"body":"function seven(m)\n  steps = 0\n  while m > 99\n    m = m \u00f7 10 - 2*(m % 10)\n    steps += 1\n  end\n  m, steps\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201724,"user_id":null,"body":"function seven(n)\n    steps = 0\n    while n >= 100\n        n, digit = fldmod(n, 10)\n        n -= 2 * digit\n        steps += 1\n    end\n    return (n, steps)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201725,"user_id":null,"body":"function seven(m)\n  steps = 0\n  while m > 99\n    m = m \u00f7 10 - 2(m % 10)\n    steps += 1\n  end\n  (m, steps)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201726,"user_id":null,"body":"function seven(m)\n    i = 0\n    while m > 99\n        m = m \u00f7 10 - 2 * (m % 10)\n        i = i + 1\n    end\n    return (m, i)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201727,"user_id":null,"body":"seven(m, step=0) = ndigits(m) \u2264 2 ? (m, step) : seven(m \u00f7 10 - 2 * (m % 10), step + 1)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201728,"user_id":null,"body":"seven(m, step=0) = ndigits(m) \u2264 2 ? (m, step) : seven(parse(BigInt, string(m)[1:end-1])-2digits(m)[1], step+1)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201729,"user_id":null,"body":"function seven(m)\n    steps = 0\n    while m >= 100\n        m, rem = divrem(m, 10)\n        m = m - 2 * rem\n        steps += 1\n    end\n    (m, steps)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201730,"user_id":null,"body":"function seven(m)\n    counter = 0\n    while m > 99\n        digitsm = digits(m)\n        y = digitsm[1]\n        x = (m - y) \u00f7 10\n        m = x - 2y\n        counter +=1\n    end\n    return (m, counter)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201731,"user_id":null,"body":"function seven(m)\n    counter = 0\n    while length(string(m)) > 2\n      m = divrem(m,10)[1]-2*divrem(m,10)[2]\n      counter += 1\n    end\n    (m,counter)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201732,"user_id":53,"body":"function seven(m)\n  cnt = 0\n  while (m > 99)\n    m = (m \u00f7 10) - (2 * (m % 10)); \n    cnt += 1\n  end\n  (m, cnt)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55e7280b40e1c4a06d0000aa":[{"id":201733,"user_id":null,"body":"module Travel \n  export choose_best_sum\n  using IterTools\n\n  function choose_best_sum(t, k, ls)\n    subs = subsets(ls, k) |> collect\n    subs = filter(<=(t), sum.(subs))\n    return isempty(subs) ? -1 : maximum(subs)\n  end\n\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201734,"user_id":492,"body":"module Travel \n    export choose_best_sum\n\n    function choose_best_sum(t, k, ls)\n        function choose_best_sumAux(t, k , ls, from) \n            if k == 0 \n                if t >= 0 return 0\n                else return t\n                end\n            else\n                if t < k return -1 end\n            end\n            best = -1\n            tmpBest = -1\n            for i in from:length(ls)\n                tmpBest = choose_best_sumAux(t - ls[i], k - 1, ls, i + 1)\n                if tmpBest >= 0\n                    best = max(best, ls[i] + tmpBest)\n                end\n            end\n            best\n        end\n        choose_best_sumAux(t, k, ls, 1)\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201735,"user_id":492,"body":"module Travel \n    export choose_best_sum\n\n    function choose_best_sum(t, k, ls)\n        function choose_best_sumAux(t, k , ls, from) \n            if k == 0 \n                if t >= 0 return 0\n                else return t\n                end\n            else\n                if t < k return -1 end\n            end\n            best = -1\n            tmpBest = -1\n            for i in from:length(ls)\n                tmpBest = choose_best_sumAux(t - ls[i], k - 1, ls, i + 1)\n                if tmpBest >= 0\n                    best = max(best, ls[i] + tmpBest)\n                end\n            end\n            best\n        end\n        choose_best_sumAux(t, k, ls, 1)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201736,"user_id":null,"body":"module Travel \n    export choose_best_sum\n\n    struct Combinations\n    n::Int\n    t::Int\nend\nBase.length(c::Combinations) = binomial(c.n, c.t)\nstruct CoolLexCombinations\n    n::Int\n    t::Int\nend\nfunction Base.iterate(c::Combinations, s = [min(c.t - 1, i) for i in 1:c.t])\n    if c.t == 0 # special case to generate 1 result for t==0\n        isempty(s) && return (s, [1])\n        return\n    end\n    for i in c.t:-1:1\n        s[i] += 1\n        if s[i] > (c.n - (c.t - i))\n            continue\n        end\n        for j in i+1:c.t\n            s[j] = s[j-1] + 1\n        end\n        break\n    end\n    s[1] > c.n - c.t + 1 && return\n    (s, s)\nend\nfunction Base.iterate(C::CoolLexCombinations)\n    if C.n < 0\n        throw(DomainError(C.n))\n    end\n    if C.t \u2264 0\n        throw(DomainError(C.t))\n    end\n\n    #What integer size should I use?\n    if C.n < 8sizeof(Int)\n        T = Int\n    else\n        T = BigInt\n    end\n\n    state = CoolLexIterState{T}(0, 0, T(1) << C.n, (T(1) << C.t) - 1)\n    iterate(C, state)\nend\nfunction combinations(a, t::Integer)\n    if t < 0\n        # generate 0 combinations for negative argument\n        t = length(a) + 1\n    end\n    reorder(c) = [a[ci] for ci in c]\n    (reorder(c) for c in Combinations(length(a), t))\nend\nfunction choose_best_sum(t, k, ls)\n    combos = combinations(ls, k)\n    sums = [sum(i) for i \u2208 combos]\n    sums2 = [i for i \u2208 sums if i \u2264 t]\n    if sums2==[]\n        largest = -1\n    else\n        largest = maximum(sums2)\n    end\n    return largest\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201737,"user_id":null,"body":"module Travel \n    export choose_best_sum\n    \n    choose_best_sum(t, k, ls, s=0) = maximum(vcat(-1, k == 1 ? filter(\u2264(t), ls .+ s) : collect(Iterators.flatten([choose_best_sum(t, k-1, ls[i+1:end], s+ls[i]) for i in 1:length(ls)]))))\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201738,"user_id":null,"body":"module Travel \n    export choose_best_sum\n    \n    function choose_best_sum(t, k, ls, s=0)\n        k == 1 && return maximum(vcat(-1, filter(\u2264(t), ls .+ s)))\n        maximum(vcat(-1, collect(Iterators.flatten([choose_best_sum(t, k-1, ls[i+1:end], s+ls[i]) for i in 1:length(ls)]))))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201739,"user_id":null,"body":"module Travel \n    export choose_best_sum\n    \n    # wrapper for a recursive solver\n    choose_best_sum(t, k, ls) = solve( t, k, ls )\n\n    function solve(t, k, ls)\n      k \u2264 length( ls ) || return -1\n      k == 1           && return find_best( t, ls )\n                          return find_best( t, [ ( j = solve( t - x, k - 1, ls[ ( i + 1 ):end ] ) ) \u2260 -1 ? x + j : -1 for ( i, x ) in enumerate( ls ) ] )\n    end\n    \n    find_best( t, ls ) = isempty( ls[ ls .\u2264 t ] ) ? -1 : maximum( ls[ ls .\u2264 t  ] )\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201740,"user_id":null,"body":"module Travel \nexport choose_best_sum\nusing IterTools\n\n  function choose_best_sum(t, k, ls)\n    test = []\n    for n in collect(subsets(ls, k)) append!(test, sum(n)) end\n    k > length(ls) || isempty(filter(x -> x <= t, test)) ? -1 : \n      maximum(filter(x -> x <= t, test))\n  end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201741,"user_id":null,"body":"module Travel \nexport choose_best_sum\n\nfunction choose_best_sum(t, k, ls)\n  puppy = [n for n in 1:k]\n  best = -1\n  \n  #filter out bad cases\n  if k > length(ls)\n    return best\n  end\n  \n  while true\n    \n    #check if current combination is better than previous best\n    temp = sum(ls[n] for n in puppy)\n    if temp <= t && temp > best\n      best = temp\n    end\n    \n    #check if current combination is the last\n    puppy != (length(ls) - k + 1):length(ls) || break\n    \n    #cycle through all possible combinations\n    for n = 1:k\n      if puppy[k - n + 1] == length(ls) - n + 1\n        continue\n      else\n        puppy[k - n + 1] += 1\n        for z = 2:n\n          puppy[k - n + z] = puppy[k - n + 1] + z - 1\n        end\n        break\n      end\n    end\n  end\n  best\nend\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201742,"user_id":null,"body":"module Travel \n    export choose_best_sum\n\n    function choose_best_sum(t, k, ls)\n        if k == 0\n          return 0\n        end\n        if length(ls) < k\n          return -1\n        else \n          if length(ls) == k\n            s = sum(ls)\n            if s <= t\n             return s\n            else\n             return -1\n            end\n          end\n        end\n        \n        if t < ls[1]\n          sum_with = -1\n        else\n          remaining = choose_best_sum(t-ls[1], k-1, ls[2:end])\n          if remaining == -1\n            sum_with = -1\n          else\n            sum_with = remaining + ls[1]\n          end\n        end\n        sum_without = choose_best_sum(t,k,ls[2:end])\n        max(sum_with, sum_without)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55e86e212fce2aae75000060":[{"id":201743,"user_id":492,"body":"module Recre\n    export prod2sum\n\n    function prod2sum(a, b, c, d)\n        e = sort([abs(a*d-b*c), abs(a*c+b*d)])\n        f = sort([abs(a*c-b*d), abs(a*d+b*c)])\n        if e == f\n            [e]\n        else\n            sort([e, f], by = x -> x[1])\n        end\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201744,"user_id":null,"body":"module Recre\n    export prod2sum\n\n    function prod2sum(a, b, c, d)\n        e, f = sort(abs.([a*c + b*d, a*d - b*c])), sort(abs.([a*c - b*d, a*d + b*c]))\n        e == f ? [e] : sort([e, f])\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201745,"user_id":null,"body":"module Recre\n    export prod2sum\n\n    function prod2sum(a, b, c, d)\n        n = (a*a + b*b)*(c*c + d*d)\n        resu = []\n        ef = [abs(a*c+b*d), abs((a*c-b*d)), abs(a*d+b*c), abs(a*d-b*c)]\n        for e in 1:4\n            for f in e:4\n                efe = ef[e]\n                eff = ef[f]\n                if efe^2 + eff^2 == n\n                    if efe <= eff \n                        fir, sec = efe, eff \n                    else \n                        fir, sec = eff, efe \n                    end \n                    if !([fir, sec] in resu)\n                        push!(resu,[fir, sec])\n                    end\n                end\n            end\n        end\n        res = sort(resu)\n        return res\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201746,"user_id":null,"body":"module Recre\n  export prod2sum\n  function prod2sum(a, b, c, d)\n    possibles = sort(map(abs, [a*c + b*d, a*c - b*d, b*c + a*d, b*c - a*d]))\n    ret = []\n    for i in 1:length(possibles)\n      for j in i+1:length(possibles)\n        x, y = possibles[i], possibles[j]\n        if x^2 + y^2 == (a^2 + b^2) * (c^2 + d^2)\n          push!(ret, [x,y])\n        end\n      end\n    end\n    unique(ret)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201747,"user_id":null,"body":"module Recre\n    export prod2sum\n\n    # https:\/\/en.wikipedia.org\/wiki\/Brahmagupta%E2%80%93Fibonacci_identity\n    function prod2sum(a, b, c, d)\n        x1 = abs(a * c - b * d)\n        y1 = abs(a * d + b * c)\n        \n        x2 = abs(a * c + b * d)\n        y2 = abs(a * d - b * c)\n        \n        n1 = [extrema([x1, y1])...]\n        n2 = [extrema([x2, y2])...]\n        \n        if n1[1] == n2[1]\n            [n1]\n        elseif n1[1] > n2[1]\n            [n2, n1]\n        else\n            [n1, n2]\n        end\n    end\n    \nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55eca815d0d20962e1000106":[{"id":201748,"user_id":527,"body":"function generate_range(min, max, step)\n  collect(min:step:max)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201749,"user_id":null,"body":"generate_range(min, max, step) = Array(min:step:max)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201750,"user_id":null,"body":"function generate_range(min, max, step)\n  min:step:max\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201751,"user_id":null,"body":"generate_range(min, max, step) = min:step:max","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201752,"user_id":50,"body":"function generate_range(min, max, step)\n  return range(min,stop=max,step=step)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201753,"user_id":null,"body":"function generate_range(min, max, step)\n  [q for q in min:step:max]  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201754,"user_id":null,"body":"generate_range(min, max, step) = [i for i in min:step:max]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201755,"user_id":null,"body":"generate_range(min, max, step) = [min:step:max...]\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201756,"user_id":2525,"body":"function generate_range(min, max, step)\n    [i for i in min:max if i%step==min%step]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201757,"user_id":null,"body":"function generate_range(min::Int, max::Int, step::Int)::Array{Int}\n    a = []\n    \n    while min <= max\n        append!(a, min)\n        min += step\n    end\n    \n    return a\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55ecd718f46fba02e5000029":[{"id":201758,"user_id":null,"body":"function between(a, b)\n  [v for v=a:b]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201759,"user_id":527,"body":"between = :","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201760,"user_id":527,"body":"between(a, b) = a:b","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201761,"user_id":null,"body":"function between(a, b)\n  dst = []\n  for i in a: b\n    push!(dst, i)\n  end\n  return dst\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201762,"user_id":null,"body":"function between(a, b)\n  # your code here\n  return [i for i in a:b]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201763,"user_id":null,"body":"function between(a, b)\n  return a:1:b\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201764,"user_id":null,"body":"between(a, b) = collect(Int, a:b)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201765,"user_id":null,"body":"function between(a, b)\n  [a:b...]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201766,"user_id":null,"body":"function between(a, b)\n  res = []\n    for i = a:b\n        append!(res, i)\n    end\n    return res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201767,"user_id":53,"body":"function between(a, b)\n  xs = []\n  i = a\n  while i != b\n    push!(xs, i)\n    i += 1\n  end\n  push!(xs, i)\n  xs\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55edaba99da3a9c84000003b":[{"id":201768,"user_id":421,"body":"divisible_by(nums, divisor) = filter(x -> x % divisor == 0, nums)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201769,"user_id":null,"body":"function divisible_by(nums, divisor)\n  filter(q->mod(q,divisor)==0,nums)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201770,"user_id":209,"body":"function divisible_by(nums, divisor)\n  filter(x->x % divisor == 0, nums)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201771,"user_id":1474,"body":"function divisible_by(nums, divisor)\n  [i for i in nums if i % divisor == 0]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201772,"user_id":null,"body":"function divisible_by(nums, divisor)\n  filter(num -> num % divisor == 0, nums)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201773,"user_id":null,"body":"divisible_by(nums, divisor) = filter(x-> iszero(x % divisor), nums)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201774,"user_id":null,"body":"divisible_by(nums, divisor) = [i for i in nums if i % divisor == 0]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201775,"user_id":null,"body":"function divisible_by(nums, divisor)\n  return [n for n in nums if n%divisor==0]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201776,"user_id":null,"body":"function divisible_by(nums, divisor)\n  return [num for num in nums if num % divisor == 0]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201777,"user_id":null,"body":"function divisible_by(nums, divisor)\n  filter(n -> n % divisor == 0, nums)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55efecb8680f47654c000095":[{"id":201778,"user_id":759,"body":"module Hero\n  export int_rac\n\n  function int_rac(n, x)\n    c = 1\n    while abs(x - (x1 = (x + n \u00f7 x) \u00f7 2)) >= 1\n      x = x1\n      c += 1\n    end\n    c\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201779,"user_id":null,"body":"module Hero\n\nexport int_rac\n\nfunction int_rac(n, guess)\n    tries = 0\n    error = 1\n    x = guess\n  \n    while true\n        new_x = (x + n \u00f7 x) \u00f7 2\n        tries += 1\n        if abs(x - new_x) < error\n            break\n        else\n            x = new_x\n        end\n    end\n  \n    tries\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201780,"user_id":null,"body":"module Hero\n    export update_bab, int_rac\n\n    function update_bab(x,n)\n      push!(x,floor((x[end] + n \/ x[end])\/2))\n      return x\n    end\n    \n    \n    function int_rac(n, guess)\n    \n        # Collect estimations in an array and evaluate the length of the array after \n        \n        x = [guess ,((guess + n \/ guess)\/2)] # Initialized array\n        \n        while (abs(x[end]-x[end-1])) >= 1\n          update_bab(x,n)\n        end\n        \n        return length(x) - 1 # Second-to-last element is a sufficient estimation (for given error)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201781,"user_id":53,"body":"module Hero\n  export int_rac\n  function int_rac(n, m)\n    p = (m + (n \u00f7 m)) \u00f7 2\n    abs(m - p) < 1 ? 1 : int_rac(n, p) + 1\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201782,"user_id":null,"body":"module Hero\n    export int_rac\n\n    function int_rac(n, guess)\n        count = 0\n        next = guess\n        prev = next - 1\n        while next != prev\n            prev = next\n            next = (prev + n \u00f7 prev) >> 1\n            count += 1\n        end\n        count\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201783,"user_id":null,"body":"module Hero\n    export int_rac\n    int_rac(n, guess, count=1) = abs((guess + n\/guess)\u00f72 - guess) < 1 ? count : int_rac(n, (guess + n\/guess)\u00f72, count+1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201784,"user_id":null,"body":"module Hero\n    export int_rac\n\n    function int_rac(n, guess)\n        n = big(n)\n        x = big(guess)\n        hero(x) = floor(BigInt, (x + n \/ x) \/ 2)\n        newx = hero(x)\n        count = 1\n        while abs(newx - x) \u2265 1\n            x = newx\n            newx = hero(x)\n            count += 1\n        end\n        return count\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201785,"user_id":null,"body":"module Hero\nexport int_rac\n\nfunction int_rac(n, guess)\n  x = guess\n  steps = 0\n  while true\n    y = (x + n \u00f7 x) \u00f7 2\n    steps += 1\n    if x == y\n      return steps\n    end\n    x = y\n  end\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201786,"user_id":881,"body":"module Hero\nexport int_rac\n\nfunction int_rac(n, x)\n    r = isqrt(n)\n    for i in Iterators.countfrom(1)\n        if -1 < r - x < 1\n            return i\n        end\n        x = (x + n \u00f7 x) \u00f7 2\n    end\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201787,"user_id":1474,"body":"module Hero\n  export int_rac\n\n  function int_rac(n, guess, cnt=0)\n    x = (guess + n \u00f7 guess) \u00f7 2\n    cnt += 1\n    abs(x - guess) < 1 ? cnt : int_rac(n, x, cnt)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55f2b110f61eb01779000053":[{"id":201788,"user_id":527,"body":"function get_sum(a, b)\n  (a + b) * (abs(a - b) + 1) \/ 2\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201789,"user_id":null,"body":"function get_sum(a, b)\n  return a<b ? sum(a:b) : sum(b:a)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201790,"user_id":null,"body":"function get_sum(a, b)\n  sum([i for i in (min(a,b):max(a,b))])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201791,"user_id":null,"body":"function get_sum(a, b)\n  len = if (b > a) b - a + 1 else a - b + 1 end\n  (b + a) * len \u00f7 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201792,"user_id":572,"body":"function get_sum(a, b)\n  a,b = sort!([a,b])\n  sum(a:b)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201793,"user_id":null,"body":"get_sum(a, b) = (a + b) * (abs(a - b) + 1) \u00f7 2","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201794,"user_id":null,"body":"get_sum(a, b) = sum(min(a, b):max(a, b))\n# you can sum over a range using the sum() function\n# the range was defined by (minimum value) : (maximum value)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201795,"user_id":null,"body":"get_sum(a, b) = sum(minimum([a,b]):maximum([a,b]))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201796,"user_id":null,"body":"function get_sum(a, b)\n  return sum([min(a,b):1:max(a,b);])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201797,"user_id":null,"body":"function get_sum(a::Int, b::Int)\n    reduce(+, (a < b) ? (a:b) : (b:a))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55f3da49e83ca1ddae0000ad":[{"id":201798,"user_id":53,"body":"module Trunk\n    export tank_vol\n\n    function tank_vol(h, d, vt)\n        n = acos(1.0 - h \/ (d \/ 2.0)) * 2.0\n        m = vt * (n - sin(n)) \/ (2.0 * pi)\n        floor(m)\n    end\n    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201799,"user_id":null,"body":"module Trunk\n    export tank_vol\n\n    function tank_vol(h, d, vt)\n      # your code\n      chord = sqrt(8*h*(d\/2-h\/2))\n  \n      if h <= d\/2\n        angle = 2*asin(chord\/d)*180\/pi\n      else\n        angle = 360 - 2*asin(chord\/d)*180\/pi\n      end\n  \n      area_fraction = angle\/360 - sin(angle*pi\/180)\/(2*pi)\n  \n  \n      return floor(area_fraction*vt)\n    end\n    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201800,"user_id":null,"body":"module Trunk\n    export tank_vol\n\n    function tank_vol(h, d, vt)\n        r = d\/2\n        cyl_h = vt \/ (\u03c0*r^2)\n        \u03b8 = acos((r-h)\/r)*2\n        v_spicchio = r^2*\u03b8\/2*cyl_h\n        remain = (v_spicchio - sqrt(r^2-(r-h)^2) * (r-h) * cyl_h)\n        return floor(remain)\n    end\n    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201801,"user_id":null,"body":"module Trunk\n    export tank_vol\n\n    function tank_vol(h, d, vt)\n        \u03b8 = acos(abs(1 - 2h \/ d))\n        ((h > d\/2 ? \u03c0 - \u03b8 : \u03b8) + (2h\/d - 1) * sin(\u03b8)) * vt\/\u03c0 |> floor |> Int\n    end\n    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201802,"user_id":null,"body":"module Trunk\n    export tank_vol\n\n    function tank_vol(h, d, vt)\n        R = d\/2\n        \u03b8 = acos((R-h)\/R)\n        l = vt\/(\u03c0*R^2)\n        vol_angle = vt*\u03b8\/\u03c0\n        vol_triangle = R*sin(\u03b8)*(R-h)*l\n        floor(Int, vol_angle-vol_triangle)\n    end\n    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201803,"user_id":null,"body":"module Trunk\n    export tank_vol\n\n    function tank_vol(h, d, vt)\n        r = d\/2\n        a = (r^2 * (asin(-1 + h\/r) + \u03c0\/2) + (h-r) * \u221a(d*h - h^2))\n        floor(Int64, a \/ (\u03c0*r^2) * vt)\n    end\n    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201804,"user_id":null,"body":"module Trunk\n    export tank_vol\n\n    function tank_vol(h, d, vt)\n        r = d \/ 2\n        a_circle = \u03c0 * r^2\n        \u03b8 = acos((r-h) \/ r)\n        a_sector = \u03b8 \/ \u03c0 * a_circle\n        w = sqrt(r^2 - (r-h)^2)\n        a_triangle = w * (r-h)\n        floor((a_sector - a_triangle) \/ a_circle * vt)\n    end\n    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201805,"user_id":null,"body":"module Trunk\n    export tank_vol\n\n    function tank_vol(h, d, vt)\n        r = d \/ 2\n        theta = acos((r - h) \/ r)\n        area = r ^ 2 * theta - (r - h) ^ 2 * tan(theta)\n        floor(vt * area \/ (pi * r ^ 2))\n    end\n    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201806,"user_id":null,"body":"module Trunk\n    export tank_vol\n\n    function tank_vol(h, d, vt)\n        l = 4*vt\/(pi*d^2) #calculate length of container\n        theta = acos((d-2h)\/d) #calculate theta in radians\n        Asector = (d\/2)^2*theta #calculate sector area for 2 theta\n        Atriangle = 1\/2*(d\/2)^2 *sin(2*theta) #calculate triangle\n        vt = l * (Asector - Atriangle)\n        return floor(Int, vt)\n    end\n    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201807,"user_id":null,"body":"module Trunk\n    export tank_vol\n\n    function tank_vol(h, d, vt)\n        r = d\/2\n        if h > r\n          hC = d-h\n        else\n          hC = h\n        end\n        phiR = acos((r-hC)\/r)\n        phiD = phiR*180\/pi\n        x = sin(phiR)*r\n        triA = x*(r-hC)\n        circA = r^2*pi*phiD\/180\n        areaM = circA-triA\n        totA = pi*r^2\n        depth = vt\/totA\n        if h>r\n          vol = (totA - areaM)*depth\n        else\n          vol = areaM*depth\n        end\n        return Int(floor(vol))\n      end\n    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55f73be6e12baaa5900000d4":[{"id":201808,"user_id":881,"body":"goals = +","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201809,"user_id":null,"body":"goals(laLigaGoals, copaDelReyGoals, championsLeagueGoals) = laLigaGoals + copaDelReyGoals + championsLeagueGoals\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201810,"user_id":null,"body":"function goals(goals...) \n  sum(goals)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201811,"user_id":1474,"body":"function goals(args...) \n  sum(args)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201812,"user_id":759,"body":"goals(a...) = sum(a)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201813,"user_id":1703,"body":"function goals(a,b,c) \n  return a + b + c\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201814,"user_id":null,"body":"function goals(ll, cdr, cl) \n  ll + cdr + cl\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201815,"user_id":null,"body":"goals(g...) = sum(g)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201816,"user_id":479,"body":"function goals(l, c, v) \n  return l + c + v;\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201817,"user_id":null,"body":"function goals(a, b, c)\n  +(a, b, c)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55f9b48403f6b87a7c0000bd":[{"id":201818,"user_id":53,"body":"function paperwork(n, m)\n  max(0, n) * max(0, m)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201819,"user_id":null,"body":"paperwork(n, m) = max(n, 0) * max(m, 0)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201820,"user_id":null,"body":"function paperwork(n, m)\n  if n < 0 || m < 0\n    0\n  else\n    n*m\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201821,"user_id":209,"body":"paperwork(p...) = all(p .> 0) ? prod(p) : 0","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201822,"user_id":null,"body":"function paperwork(n, m)\n  return n * m * (n >= 0 && m >= 0)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201823,"user_id":null,"body":"paperwork(n, m) = n < 0 || m < 0 ? 0 : m * n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201824,"user_id":null,"body":"function paperwork(n, m)\n  if n > 0 && m > 0\n    return n * m\n  else\n    return 0\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201825,"user_id":null,"body":"function paperwork(n, m)\n  (n < 0) | (m < 0) ? 0 : n*m \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201826,"user_id":null,"body":"paperwork = (n, m) -> max(m,0) * max(n,0)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201827,"user_id":null,"body":"function paperwork(n, m)\n  if m >= 0 && n >= 0\n    return m*n\n  else\n    return 0\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55f9bca8ecaa9eac7100004a":[{"id":201828,"user_id":null,"body":"function past(h, m, s)\n  +(3600h,60m,s)*1000\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201829,"user_id":null,"body":"past(h, m, s) = 1000(60(60h+m)+s)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201830,"user_id":null,"body":"function past(h, m, s)\n  # Happy Coding! ^_^\n  hours = 0 <= h <= 23 ? h * 3600000 : throw(h, DomainError(\"Invalid number of hours\"))\n  minutes = 0 <= m <= 59 ? m * 60000 : throw(m, DomainError(\"Invalid number of minutes\"))\n  seconds = 0 <= s <= 59 ? s * 1000 : throw(s, DomainError(\"Invalid number of seconds\"))\n  \n  return hours + minutes + seconds\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201831,"user_id":572,"body":"function past(h, m, s)\n  1000(s + 60m + 3600h)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201832,"user_id":null,"body":"past(h, m, s) = 1000(3600h + 60m + s)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201833,"user_id":null,"body":"function past(h, m, s)\n  1000(3600h + 60m + s)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201834,"user_id":null,"body":"function past(h, m, s)\n  3600000h + 60000m + 1000s\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201835,"user_id":null,"body":"function past(h, m, s)\n  return (h*60*60*1000)+(m*60*1000)+(s*1000)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201836,"user_id":null,"body":"function past(h, m, s)\n  m = m * 60000\n  h = h * 3600000\n  s = s * 1000\n  h+m+s\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201837,"user_id":null,"body":"function past(h, m, s)\n  x = 1000 * (s + 60 * (m + (60 * h)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55fab1ffda3e2e44f00000c6":[{"id":201838,"user_id":null,"body":"cockroach_speed(s) = floor(s * 10^2 \/ 3.6)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201839,"user_id":null,"body":"function cockroach_speed(s)\n  print(s)\n  return floor(s*100000\/3600)\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201840,"user_id":null,"body":"cockroach_speed(s) = floor(s*1000\/36)\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201841,"user_id":null,"body":"cockroach_speed(s) = 1000s \u00f7 36","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201842,"user_id":null,"body":"function cockroach_speed(s)\n  floor(s * 1000 * 100 \/ 60 \/ 60)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201843,"user_id":null,"body":"function cockroach_speed(s)\n  fld(s * 100000, 3600)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201844,"user_id":168,"body":"function cockroach_speed(s)\n  s * 1000 \u00f7 36\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201845,"user_id":null,"body":"function cockroach_speed(s)\n  floor(s*27.7778)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201846,"user_id":null,"body":"function cockroach_speed(s)\n  div(s*250, 9)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201847,"user_id":null,"body":"function cockroach_speed(s)\n  floor(s \/ 0.036)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"55fd2d567d94ac3bc9000064":[{"id":201848,"user_id":527,"body":"function row_sum_odd_numbers(n)\n  n ^ 3\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201849,"user_id":881,"body":"row_sum_odd_numbers(n) = n ^ 3","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201850,"user_id":null,"body":"row_sum_odd_numbers(n) = sum(n*(n-1)+1 : 2 : n*(n+1)-1)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201851,"user_id":null,"body":"function row_sum_odd_numbers(n)\nif n==1\nreturn 1\nelse\n  allnumb=sum(Array(1:n))*2-1\n  oddseries=Array(1:2:allnumb)\n  return sum(oddseries[end-n+1:end])\nend\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201852,"user_id":null,"body":"t(n) = div(n * (n-1), 2)\n\nrow_sum_odd_numbers(n) = sum((2t(n)+1):2:(2t(n+1)))","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201853,"user_id":null,"body":"function gauss(n)\n  return (n * (n+1)) \u00f7 2\nend\n\nfunction getnthrow(n)\n  gauss(n - 1) + 1 : gauss(n)\nend\n\nfunction row_sum_odd_numbers(n)\n  sum(2i - 1 for i = getnthrow(n))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201854,"user_id":null,"body":"function row_sum_odd_numbers(n)\n  sum(genrow(n))\nend\n\nfunction genrow(n)\n  rowlen = n\n  rowstart = 1\n  \n  for i in 0:n-1\n    rowstart += i*2\n  end\n\n  [n for n in range(rowstart, step=2, length=rowlen)]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201855,"user_id":null,"body":"function row_sum_odd_numbers(n)\n\n  numbers_before = sum(1:n-1)\n  actual_number = (numbers_before) * 2 + 1\n  sum(collect(actual_number:2:(actual_number+((n-1)*2))))\n  \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201856,"user_id":null,"body":"function row_sum_odd_numbers(n)\n  if n == 1\n    return 1\n  end\n  \n  odds = 1:2:sum(1:n*2)\n  rowStart = sum(1:n - 1) + 1\n  \n  return sum(odds[rowStart:rowStart + n - 1])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201857,"user_id":null,"body":"function row_sum_odd_numbers(n)\n    r = 1\n    # find first element of row n\n    for i = 1:n\n        r = r + (i-1)*2\n    end\n    # compute sum of row n\n    sum = 0\n    for i = 1:n\n        sum = sum + r + 2 * (i-1)\n    end\n    return sum\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5601409514fc93442500010b":[{"id":201858,"user_id":null,"body":"function better_than_average(classPoints, yourPoints)\n  sum(classPoints) \/ length(classPoints) < yourPoints\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201859,"user_id":null,"body":"better_than_average(classPoints, yourPoints) =  sum(classPoints) \/ length(classPoints) < yourPoints ? true : false","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201860,"user_id":null,"body":"function better_than_average(classPoints, yourPoints)\n  classPoints |> P -> yourPoints > sum(P) \/ length(P)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201861,"user_id":null,"body":"function better_than_average(classPoints, yourPoints)\n  average_points = sum((yourPoints, classPoints...)) \/ (length(classPoints) + 1)\n  return yourPoints > average_points\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201862,"user_id":null,"body":"function better_than_average(classPoints, yourPoints)\n  yourPoints > sum(classPoints) \/ length(classPoints)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201863,"user_id":null,"body":"function better_than_average(classPoints, yourPoints)\n  sum(classPoints)\/length(classPoints) < yourPoints ? true : false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201864,"user_id":null,"body":"function better_than_average(classPoints, yourPoints)\n  append!(classPoints, yourPoints)\n  \n  yourPoints > sum(classPoints)\/length(classPoints) ? true : false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201865,"user_id":50,"body":"function better_than_average(c, p)\n  return p > sum(c) \/ length(c)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201866,"user_id":null,"body":"using Statistics\nfunction better_than_average(classPoints, yourPoints)\n  return yourPoints > mean(classPoints)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201867,"user_id":null,"body":"using Statistics\nfunction better_than_average(classPoints, yourPoints)\n    return mean(classPoints) < yourPoints\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5613d06cee1e7da6d5000055":[{"id":201868,"user_id":492,"body":"module Stepy\n    export stepp\n\n    function isprimi(n)\n        n > 1 || return false\n        n != 2 || return true\n        isodd(n) || return false\n        for i in 3:isqrt(n)\n            n % i != 0 || return false\n        end\n        true\n    end\n    function stepp(step, start, stop)\n        for n in start:stop\n            if isprimi(n) && isprimi(n + step)\n                return [n, n + step]\n            end\n        end\n        return Int[]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201869,"user_id":53,"body":"module Stepy\n    export stepp\n\n    primes = Set([2, 3, 5, 7])\n    \n    function isprime(n)\n        n in primes && return true\n        return !any(n % i == 0 for i in 2:floor(Int, sqrt(n)))\n    end\n\n    function stepp(g, m, n)\n        for i in m:n-g\n            if isprime(i) && isprime(i+g)\n                return [i, i+g]\n            end\n        end\n        return Int[]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201870,"user_id":168,"body":"module Stepy\n    export stepp\n\n    function isprime(n)\n      n >= 2 && all(n % d != 0 for d in 2:sqrt(n))\n    end\n\n    function stepp(step, start, stop)\n      for n in start:stop - step\n        if isprime(n) && isprime(n + step) return [n, n + step] end\n      end\n      []\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201871,"user_id":null,"body":"module Stepy\n    export stepp\n\n    function prime_sieve(max_prime::Int64)\n        primes = Vector{Int64}()\n        push!(primes, 2)\n        for value in range(3, step=2, stop=max_prime)\n            isprime(value, primes) && push!(primes, value)\n        end\n        return primes\n    end\n\n    function isprime(value, primes)\n        isprime = true\n        for prime in primes\n            if value \u2260 prime && value%prime == 0\n                isprime = false\n                break\n            end\n        end\n        return isprime\n    end\n\n    function stepp(step, start, stop)\n        primes = prime_sieve(ceil(Int64, \u221astop))\n        if iseven(step)\n            startvalue = start\n            if iseven(start)\n                startvalue += 1\n            end\n            if startvalue \u2265 stop\n                return Int[]\n            end\n            for value in range(startvalue, step=2, stop=stop)\n                if isprime(value,primes) && isprime(value+step, primes)\n                    return [value, value+step]\n                end\n            end\n        elseif start == 2 # special case\n            if start \u2265 stop\n                return Int[]\n            end\n            for value in range(start, stop=stop)\n                if isprime(value,primes) && isprime(value+step, primes)\n                    return [value, value+step]\n                end\n            end\n        end\n        return Int[]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201872,"user_id":null,"body":"module Stepy\n    export stepp\n\n    function stepp(step, start, stop)\n        is_prime(n) = all(x-> n%x != 0, 2:sqrt(n))\n        for n in start:stop \n            is_prime(n) && is_prime(n+step) && return [n, n+step]\n        end\n        Int[]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201873,"user_id":null,"body":"module Stepy\n    export stepp\n\n    function primes(n)\n      primes = fill(true, n)\n      primes[1] = false\n      for p = 2:n\n        primes[p] || continue\n        for i = 2:div(n,p)\n          primes[p*i] = false\n        end\n      end\n      primes\n    end  \n\n    function stepp(step, start, stop)\n      prime_gen = primes(stop)[start:stop]\n      values = start:stop\n      prime_gen = map(*, prime_gen, values)\n      prime_gen = filter(p -> !iszero(p), prime_gen)\n  \n      for i in prime_gen\n        for j in prime_gen\n          if j - i == step\n            return [i,j]\n          end\n        end\n      end\n      return []\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201874,"user_id":881,"body":"module Stepy\nexport stepp\n\n\"\"\"Find all primes that are less than or equal to the limit.\"\"\"\nfunction primesbelow(limit::I)::Vector{I} where I <: Integer\n    primes = trues(limit)\n    primes[1] = false\n    p = 2\n    while !isnothing(p) && p <= sqrt(limit)\n        primes[2p:p:limit] .= false\n        p = findnext(primes, p + 1)\n    end\n    convert.(I, findall(primes))\nend\n\nfunction stepp(g, m, n)\n    ps = primesbelow(n)\n    l = length(ps)\n    for i in findfirst(>=(m), ps):l - 1\n        for j in i+1:l\n            d = ps[j] - ps[i]\n            if d == g\n                return [ps[i], ps[j]]\n            elseif d > g\n                break\n            end\n        end\n    end\n    Int[]\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201875,"user_id":null,"body":"module Stepy\n\nexport stepp\n\n# Prime sieve because CodeWars timed out when I tried to load the Primes package\nfunction primeset(max)\n    mark = fill(true, max)\n    mark[1] = false;\n    for n in 2:max\n        mark[n] || continue\n        for toggle in (n * n):n:max\n            mark[toggle] = false\n        end\n    end\n    return Set(findall(mark));\nend\n\nfunction stepp(step, start, stop)\n    prime_set = primeset(stop);\n    for p in start:stop\n        if p in prime_set && (p + step) in prime_set; return [p, p + step]; end\n    end\n    return []\nend\n\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201876,"user_id":null,"body":"module Stepy\n    export stepp\n\n    function stepp(step, start, stop)\n        for i in start:(stop-step)\n          if isp(i)\n            if isp(i+step)\n              return [i, i+step]\n            end\n        end\n    end\n        return Int[]\n    end\nfunction isp(x::Int)\n  i = 2\n  while i <= sqrt(x)\n    (x % i == 0) && (return false)\n    i += 1\n  end\n  return true\nend\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201877,"user_id":1474,"body":"module Stepy\n  export stepp\n\n  function prime(n)\n    if n < 4\n      return true\n    end\n    for i in 2:floor(sqrt(n))\n      if n % i == 0\n        return false\n      end\n    end\n    true\n  end\n\n  function stepp(step, start, stop)\n    for i in start:stop\n      if prime(i) && prime(i + step)\n        return [i, i + step]\n      end\n    end\n    Int[]\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5616868c81a0f281e500005c":[{"id":201878,"user_id":null,"body":"module Prize\n  export rank\n\n  function rank(names, weights, n)\n    names == \"\" && return \"No participants\"\n    n > length(split(names, \",\")) && return \"Not enough participants\"\n    [((length(s) + sum([Int(c) - 96 for c in lowercase(s)])) * weights[i], s) for (i, s) in enumerate(split(names, \",\"))] |> a -> sort!(a, lt = ((x, y) -> x[1] == y[1] ? y[2] < x[2] : x[1] < y[1]), rev = true) |> a -> a[n][2] \n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201879,"user_id":null,"body":"module Prize\n    export rank\n\n    function rank(names, weights, n)\n        n > length(weights) && return \"Not enough participants\"\n        names == \"\" && return \"No participants\"\n        som(x) = length(x) + sum(Int.(collect(lowercase(x))) .- 96)\n        sort([(weights[i] * som(name), name) for (i, name) in enumerate(split(names, ','))], by = x-> (-x[1],x[2]))[n][2]\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201880,"user_id":null,"body":"module Prize\n    export rank\n\n    function rank(names, weights, n)\n        # check nb of participants\n        if names == \"\"\n            return \"No participants\"\n        end\n        name_list = split(names, \",\")\n        if n > length(name_list)\n            return \"Not enough participants\"\n        end\n\n    # compute weights\n        name_dict = []\n        for i in 1:length(name_list)\n            name = name_list[i]\n            weight = length(name)\n            for c in lowercase(name)\n                weight = weight + (c - 'a' + 1)\n            end\n            push!(name_dict, (name, weight * weights[i]))\n        end\n\n\n        sort!(name_dict, by=first)\n        sort!(name_dict, by=last, rev=true)\n        println(name_dict)\n        # name_dict = sort(collect(name_dict), by=x -> x[1])\n        # name_dict = sort(collect(name_dict), by=x -> x[2], rev=true)\n        return get(name_dict, n, 0)[1]\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201881,"user_id":null,"body":"module Prize\n    export rank\n\n    function rank(names, weights, n)\n        if names == \"\"\n            return \"No participants\"\n        end\n  \n        names_split = split(names, ',')\n        if length(names_split) < n\n            return \"Not enough participants\"\n        end\n  \n        sortednames = sortperm(names_split)\n        names_split = names_split[sortednames]\n        weights = weights[sortednames]\n  \n        values = similar(weights)\n        for (id, name) in enumerate(names_split)\n            values[id] = length(name)\n            for c in lowercase(name)\n                values[id] += Int(c) - Int('a') + 1\n            end\n        end\n        names_split[sortperm(values.*weights, rev=true)[n]]\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201882,"user_id":881,"body":"module Prize\nexport rank\n\nalpharank(char::Char)::Int = Int(uppercase(char) - 0x40)\n\nsom(name::AbstractString)::Int = sum(alpharank.([name...])) + length(name)\n\nfunction somthenname(a::Tuple{AbstractString,Int}, b::Tuple{AbstractString,Int})::Bool\n    if a[2] == b[2]\n        a[1] < b[1]\n    else\n        a[2] > b[2]\n    end\nend\n\nfunction rank(names::AbstractString, weights::AbstractVector{<:Integer}, n::Integer)::String\n    isempty(names) && return \"No participants\"\n    ns = split(names, ',')\n    n > length(ns) && return \"Not enough participants\"\n    sort!(collect(zip(ns, som.(ns) .* weights)), lt=somthenname)[n][1]\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201883,"user_id":null,"body":"module Prize\n  export rank\n\n  function rank(names, weights, n)\n    dd=Dict()\n    for (c,i) in zip('a':'z',1:26)\n      dd[c]=dd[uppercase(c)]=i\n    end\n    f(s)=sum(dd[v] for v in s)\n    names=split(names,',',keepempty=false) .|> strip\n    if 0==length(names)\n      \"No participants\"\n    elseif n<=length(names)\n      sort(\n        [ ((length(v)+f(v))*w,v) for (v,w) in zip(names, weights)], \n        lt=lt=(x,y)->(x[1]>y[1])||( (x[1]==y[1])&&(x[2]<y[2]) )\n      )[n][2]\n    else\n      \"Not enough participants\"\n    end\n  end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201884,"user_id":null,"body":"module Prize\n    export rank\n\n    function rank(names, weights, n)\n        if names == \"\"\n            return \"No participants\"\n        end\n        # your code\n        names = split(names,\",\")\n\n        if n > length(names)\n            return \"Not enough participants\"  \n        end\n        soms = map(zip(names, weights)) do (name, weight)\n            (sum(map(c-> lowercase(c)-'a'+1,collect(name))) + length(name))* weight\n        end\n        sort(collect(zip(names,soms));lt=(x,y)->x[2]==y[2] ? x[1]<y[1] : x[2]>y[2])[n][1]\n#         println(sort(collect(zip(names,soms));lt=(x,y)->x[2]==y[2] ? x[1]<y[1] : x[2]>y[2]))\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201885,"user_id":null,"body":"module Prize\n  export rank\n\n  function rank(names, weights, n)\n    names == \"\" && return \"No participants\"\n    n > length(split(names, \",\")) && return \"Not enough participants\"\n    sort!([((length(s) + sum([Int(c) - 96 for c in lowercase(s)])) * weights[i], s) for (i, s) in enumerate(split(names, \",\"))], lt = ((x, y) -> x[1] == y[1] ? y[2] < x[2] : x[1] < y[1]), rev = true)[n][2] \n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201886,"user_id":null,"body":"module Prize\n    export rank\n\n    function rank(names, weights, n)\n        isempty(names) && return \"No participants\"\n        nameArr = split(names, \",\")\n        (n > length(nameArr)) && return \"Not enough participants\"\n        function letterToValue(letter)\n          Int(lowercase(first(letter))) - Int('a') + 1;\n        end\n        function nameCompare(a, b)\n          a.value == b.value && return a.name < b.name\n          b.value < a.value\n        end\n        nameValues = map(collect(enumerate(nameArr))) do (index, name)\n          (name = name, value = weights[index] * (length(name) + sum(letterToValue, split(name, \"\"))))\n        end\n        first(sort(nameValues, lt = nameCompare)[n])\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201887,"user_id":null,"body":"module Prize\n    export rank\n\n    function rank(names, weights, n)\n        function score(name)\n            return sum(lowercase(letter)-'a'+1 for letter in name) + length(name)\n        end\n        if length(names)==0\n            return \"No participants\"\n        end\n        value = Any[]\n        keys = Any[]\n        for (idx,name) in enumerate(split(names,\",\"))\n            push!(value , score(name) * weights[idx])\n            push!(keys , name)                        \n        end\n        if !(n>length(value))\n            return sort(collect(zip(value,keys)),by = tuple -> (-first(tuple),last(tuple)))[n][2]\n        else\n            return \"Not enough participants\"        \n        end\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"561e9c843a2ef5a40c0000a4":[{"id":201888,"user_id":null,"body":"module Gap\n    export gap\n\n    primes = Set([2, 3, 5, 7])\n    \n    function isprime(n)\n        n in primes && return true\n        return !any(n % i == 0 for i in 2:floor(Int, sqrt(n)))\n    end\n    \n    function gap(g, m , n)\n        i = 0\n        for k in m:n\n            !isprime(k) && continue\n            if i != 0 && k - i == g\n                return [i, k]\n            end\n            i = k\n        end\n        return nothing\n    end\n    \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201889,"user_id":null,"body":"module Gap\n    export gap\n\n    function gap(g, m, n)\n        isprime(x) = begin for i = 3:2:x-1 x % i == 0 && (return false) end; x%2 != 0; end\n        b = isprime(m)\n        for i in m:n isprime(i) && (i-m === g && b ? (return [m, i]) : (b = true; m = i)) end; Int64[]\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201890,"user_id":492,"body":"module Gap\n    export gap\n\n    function isprimi(n)\n        n > 1 || return false\n        n != 2 || return true\n        isodd(n) || return false\n        for i in 3:isqrt(n)\n            n % i != 0 || return false\n        end\n        true\n    end\n    function gap(g, m, n)\n        prev = n\n        for i in m:n\n            if isprimi(i)\n                if i - prev == g\n                    return [prev, i]\n                end\n                prev = i\n            end\n        end\n        return nothing\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201891,"user_id":null,"body":"module Gap\n    export gap\n\n    function is_prime(n)\n      \"test if it's a prime\"\n      if n<=1\n        return false\n      end\n  \n      s = Iterators.filter(i->n%i==0, 2:floor(sqrt(n)))\n      return if isempty(s) true else false end\n    end\n\n    function find_next_p(n)\n      \"find the next prime including itself\"\n      if is_prime(n)\n        return n\n      else\n        return find_next_p(n+1)\n      end\n    end\n\n    function gap(g, m, n)\n      first_p = find_next_p(m)\n      second_p = find_next_p(first_p+1)\n      \n      if second_p<=n\n        if second_p-first_p==g      \n          return [first_p, second_p]\n        else\n          return gap(g, second_p, n)\n        end\n      end\n      return nothing\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201892,"user_id":null,"body":"module Gap\n    export gap\n\n    function gap(g, m, n)\n    # your code\n    start = 0\n    e = 0\n    for i \u2208 m:n+1\n        if isPrime(i)\n            if start == 0\n                start = i\n            elseif e == 0\n                e = i\n            else\n                start = e\n                e = i\n            end\n        end\n        if e - start == g\n            return [start,e]\n        end\n    end\n    return nothing\nend\n\nfunction isPrime(n)\n    if n \u2264 0 || n == 1\n        return false\n    end\n    i = 2\n    while i \u2264 n ^ .5\n        if n % i == 0\n            return false\n        end\n        i += 1\n    end\n    return true\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201893,"user_id":null,"body":"module Gap\n    export gap\n    function isprime(x)\n      if x <= 3\n        return x > 1\n      elseif (x % 2 == 0) || (x % 3) == 0\n        return false\n      end\n      local i = 5\n      while i^2 <= x\n        if (x % i == 0) || (x % (i + 2) == 0)\n          return false\n        end\n        i += 6\n      end\n      return true\n    end\n    function gap(g, m, n)\n        local ar = zeros(Int,0)\n        for i in m:n\n          if isprime(i)\n            append!(ar,i)\n          end\n        end\n        for j in 1:length(ar)-1\n          if ar[j+1] - ar[j] == g\n            return([ar[j],ar[j+1]])\n          end\n        end\n        return nothing\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201894,"user_id":null,"body":"module Gap\n    export gap\n\n    function gap(g, m, n)\n        temp = m\n        for k \u2208 m:n\n            if prime(k)\n                if k - temp == g && prime(temp)\n                    return [temp, k]\n                end\n                temp = k\n            end\n        end\n        return Int64[]  \n    end\n\n    function prime(m)\n        for i \u2208 2:ceil(sqrt(m))\n            if m % i == 0\n                return false\n            end\n        end\n    true\n    end\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201895,"user_id":null,"body":"module Gap\n    export gap\n\n    function isprime(n::Int)\n        if n <= 1\n            return false\n        elseif n == 2\n            return true\n        elseif mod(n, 2) == 0\n            return false\n        else\n            i = 3\n            while i * i <= n\n                if n % i == 0\n                    return false\n                else\n                    i += 2\n                end\n            end\n            return true\n        end\n    end\n\n    function gap(g, m, n)\n        # your code\n        for i in m:n-g\n            if isprime(i) && isprime(i+g) && all(x -> !isprime(x), i+1:i+g-1)\n                return [i, i+g]\n            end\n        end\n  \n        Int[]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201896,"user_id":null,"body":"module Gap\n    export gap\n    \n    function prime(x)\n        for i in 2:ceil(sqrt(x))\n            if x % i == 0\n                break\n            end\n            if i == ceil(sqrt(x))\n                return true\n            end\n        end\n        return false\n    end\n\n    function gap(k,n,m)\n        for i in n:m\n            if prime(i) && prime(i+k)\n                for j in i+1:i+k-1\n                    if prime(j)\n                        break\n                    end\n                    if j == i+k-1\n                        return [i,i+k]\n                    end\n                end\n            end\n        end    \n        return []\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201897,"user_id":null,"body":"module Gap\n    export gap\n\n    function isprime(x)\n        for i = 2:x^0.5\n            x % i == 0 && return false\n        end\n        true\n    end\n\n    function gap(g, m, n)\n        a = 0\n        for i = m:n\n            if isprime(i)\n                i - a == g && return [a, i]\n                a = i\n            end\n        end\n        Int[]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"562c3b54746f50d28d000027":[{"id":201898,"user_id":881,"body":"function decode(str)\n  if str == \"\"\n    return []\n  end\n  regex = r\"(.*?)\\\\(\\d+)(.*)\"\n  if occursin(regex, str)\n    m = match(regex, str)\n    start = m[1] != \"\" ? split(m[1], \"\") : []\n    group = m[3][1:min(end, parse(Int, m[2]))]\n    return vcat(start, group, decode(m[3][parse(Int, m[2])+1:end]))\n  else\n    return split(str, \"\")\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201899,"user_id":480,"body":"function decode(str)\n  result = []\n  bs=false\n  parsingg=false\n  g=0\n  for c in str\n    if parsingg\n      if isdigit(c)\n        g=g*10+parse(Int,c)\n        continue\n      else\n        parsingg=false\n        push!(result,\"\")\n      end\n    end\n    if g>0\n      result[end]*=c\n      g-=1\n      continue\n    end\n    if bs\n      bs=false\n      if isdigit(c)\n        parsingg=true\n        g=parse(Int,c)\n      else\n        push!(result,\"\\\\\")\n        push!(result,string(c))\n      end\n      continue\n    end\n    if c=='\\\\'\n      bs=true\n      continue\n    end\n    push!(result,string(c))\n  end\n  return result\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201900,"user_id":null,"body":"function decode(str)\n    result = []\n    while length(str) > 0\n        range = findfirst(r\"\\\\\\d+\", str)\n        if range == nothing\n            append!(result, collect(str))\n            break\n        else\n            indx = min(parse(Int, str[range[2:end]]), length(str[range[end]+1:end]))\n            append!(result, vcat(collect(str[1:range[1]-1]), str[range[end]+1:range[end]+indx]))\n            str = str[range[end]+indx+1:end]\n        end\n    end\n    string.(result)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201901,"user_id":2525,"body":"function decode(str)\n    result::Array{String, 1} = []\n    i = 1\n    while i\u2264length(str)\n        if str[i] == '\\\\'\n            j = 1\n            while i+j\u2264length(str) && isdigit(str[i+j])\n                j += 1\n            end\n            l = parse(Int, str[i+1:i+j-1])       \n            push!(result, string(str[i+j:min(i+j+l-1, end)]))\n            i += j+l\n        else\n            push!(result, string(str[i]))\n            i += 1\n        end    \n    end\n  \n    return result\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201902,"user_id":null,"body":"function decode(str)\n  result = []\n  i = 1\n  while i <= length(str)\n    c = str[i]\n    if c == '\\\\'\n      i += 1\n      m = match(r\"\\d+\", str, i).match\n      i += length(m)\n      n = parse(Int, m)\n      push!(result, str[i:min(length(str), i + n - 1)])\n      i += n\n    else\n      push!(result, string(c))\n      i += 1\n    end\n  end\n  result\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201903,"user_id":null,"body":"function decode(str::String)::Array{String}\n    tokenformat = r\"\\\\\\d+|.\"\n    result = String[]\n    idx = 1\n    while idx \u2264 length(str)\n        token = match( tokenformat, str, idx )\n        idx += length(token.match)\n        if length(token.match) == 1\n            push!( result, token.match )\n        else\n            n = parse(Int,token.match[2:end])\n            push!( result, str[idx:min(idx+n-1,end)] )\n            idx += n\n        end\n    end\n    result\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201904,"user_id":null,"body":"\nfunction decode(str)\n  ret = Array{String,1}()\n  n=length(str)\n  i=1\n  while true\n    (i>n) && break\n    f=findnext(r\"\\\\[0-9]+\",str,i)\n    (f==nothing) && break\n    ret=vcat(ret,map(string,collect(str[i:f.start-1])))\n    ii=min(n,f.stop+parse(Int,str[f.start+1:f.stop]))\n    push!(ret,str[f.stop+1:ii])\n    i=ii+1\n  end\n  vcat(ret,map(string,collect(str[i:n])))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201905,"user_id":null,"body":"function decode(str)\n  ret = Array{String,1}()\n  n=length(str)\n  i=1\n  while true\n    (i>n) && break\n    f=findnext(r\"\\\\[0-9]+\",str,i)\n    (f==nothing) && break\n    while i<f.start\n      push!(ret,string(str[i]))\n      i+=1\n    end\n    g=parse(Int,str[f.start+1:f.stop])\n    ii=min(n,f.stop+g)\n    push!(ret,str[f.stop+1:ii])\n    i=ii+1\n  end\n  while i<=n\n    push!(ret,string(str[i]))\n    i+=1\n  end\n  ret  \nend\n\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"562e274ceca15ca6e70000d3":[{"id":201906,"user_id":null,"body":"module Parab\n    export len_curve\n    \n    len_curve(n) = len_curve(Curve(x->x^2, 0.0, 1.0), n)\n\n    function len_curve(curve,n)\n      points = [Point(x,curve.f(x)) for x in get_anchors(curve,n)]\n      segments = [distance(p1,p2) for (p1,p2) in zip(points[1:end-1], points[2:end])]\n      return sum(segments)\n    end\n    \n    struct Limits\n      x_min::Float64\n      x_max::Float64\n    end\n    get_anchors(l::Limits,n_pieces)=collect( 0.0:n_pieces ).\/n_pieces.*(l.x_max-l.x_min) .+ l.x_min \n\n    struct Curve\n      f\n      limits::Limits\n    end\n    Curve(f,x_min,x_max) = Curve(f,Limits(x_min,x_max))\n    get_anchors(c::Curve,n_pieces)=get_anchors(c.limits,n_pieces)\n\n    struct Point\n      x::Float64\n      y::Float64\n    end\n    distance(p1::Point, p2::Point) = sqrt( (p1.x-p2.x)^2 + (p1.y-p2.y)^2 )\n \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201907,"user_id":492,"body":"module Parab\n    export len_curve\n\n    function len_curve(n)\n        hypot(x, y) = sqrt(x*x + y*y)\n        res = sum(hypot(2 * i + 1, n) for i in 0:n-1) \/ n ^ 2\n        floor(res * 1e9) \/ 1e9\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201908,"user_id":null,"body":"module Parab\n    export len_curve\n\n    function len_curve(n)\n     \n      xs = collect(0.0:(1\/n):1.0)\n      fs = xs.^2\n      sum(sqrt.(((fs[2:end]-fs[1:end-1]).^2).+((1\/n)^2)))\n\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201909,"user_id":null,"body":"module Parab\n    export len_curve\n  \n    f(x::Float64)::Float64=x*x\n    euclidean(a::Vector{Float64}, b::Vector{Float64})::Float64 = a .- b |> (x -> x .* x) |> sum |> sqrt\n    \n    function len_curve(n)\n        i :: Float64 = 0.0\n        sm = 0.0\n        incr = 1.0 \/ n\n        while i < 1.0\n          iincr = i + incr\n          if iincr > 1.0\n            iincr = 1.0\n          end \n          p1 = f(i)\n          p2 = f(iincr)\n          dist = euclidean([i, p1], [iincr, p2])\n          sm += dist\n          i += incr\n        end\n        return  round(sm, digits=9)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201910,"user_id":null,"body":"module Parab\n    export len_curve\n\n    function len_curve(n)\n        sum([sqrt(sum(coord .^ 2)) for coord in diff([[i \/ n, (i \/ n)^2] for i in 0:n])])\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201911,"user_id":null,"body":"module Parab\n    export len_curve\n\n    function len_curve(n)\n        y(x) = x^2\n        xi = 0.0\n        yi = y(xi)\n        dist = 0.0\n        for xip1 in range(1\/n, length = n, stop=1.0)\n            yip1 = y(xip1)\n            dist += \u221a((xip1-xi)^2+(yip1-yi)^2)\n            xi, yi = xip1, yip1\n        end\n        return dist\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201912,"user_id":null,"body":"module Parab\n    export len_curve\n\n    function len_curve(n)\n        coll=collect(0:1\/n:1)\n        sum([sqrt((coll[q+1]^2 - coll[q]^2)^2+(1\/n)^2) for q in 1:n])\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201913,"user_id":2525,"body":"module Parab\n    export len_curve\n\n    function len_curve(n)\n          sum(sqrt(1+(2*i-1)^2\/n^2)  for i in 1:n)\/n  \n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201914,"user_id":null,"body":"module Parab\n    export len_curve\n\n    function len_curve(n)\n        x = range(0, 1, length = n + 1)\n        y = x.*x\n        dx = diff(x)\n        dy = diff(y)\n        sum(hypot.(dx, dy))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201915,"user_id":null,"body":"module Parab\n    \nexport len_curve\n\nfunction len_curve(n)\n    xValues = Float64[0]\n    for i in 1:(n-1)\n        push!(xValues, (xValues[i] + 1\/n))\n    end\n    push!(xValues, 1)\n    yValues = Float64[x * x for x in xValues]\n    distances = Float64[sqrt(((1\/n)^2) + ((yValues[i+1] - yValues[i])^2)) for i in 1:n]\n    return sum(distances)\nend\n\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"562f91ff6a8b77dfe900006e":[{"id":201916,"user_id":421,"body":"module Cine\n    export movie\n\n    function movie(card, ticket, percent)\n       i = 0\n       while (ceil(card) >= ticket * i)\n         card += ticket * percent ^ i\n         i += 1\n       end\n       i - 1\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201917,"user_id":null,"body":"module Cine\n    export movie\n\n    function movie(card, ticket, percent)\n        newPrice = ticket*percent\n        n = 0\n        newTicket = 0\n        while ceil(card) >= newTicket\n          n += 1\n          newTicket += ticket\n          card += newPrice\n          newPrice *= percent\n        end\n        return n\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201918,"user_id":null,"body":"module Cine\n    export movie\n\n    function movie(card, ticket, percent)\n        \n        n=1\n        while !(ticket * n > ceil(sum(percent^k for k in 1:n) * ticket + card))\n          n += 1\n        end\n        n\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201919,"user_id":492,"body":"module Cine\n    export movie\n\n    function movie(card, ticket, percent)\n        pb = ticket\n        sa, sb = 0, card\n        i = 0\n        while sa <= ceil(sb)\n            pb *= percent\n            sa += ticket\n            sb += pb\n            i += 1\n        end\n        i\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201920,"user_id":null,"body":"module Cine\n    export movie\n\n    function movie(card, ticket, percent)\n    cost = card * 1.0\n    n = 0\n    \n    while ceil(cost) >= n * ticket\n    n += 1\n    cost += ticket * percent ^ n\n    end\n    return n\n    end\n    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201921,"user_id":null,"body":"module Cine\n    export movie\n\n    function movie(card, ticket, percent)\n        A = 0\n        B = card\n        n = 0\n        while A <= ceil(B)\n          n += 1\n          A += ticket\n          B += ticket * percent^n\n        end\n        return n\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201922,"user_id":null,"body":"module Cine\n    export movie\n\n    function movie(c, t, p, n=1)\n        ceil(c + t*p*(1-p^n)\/(1-p)) \u2265 n*t ? movie(c, t, p, n+1) : n\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201923,"user_id":null,"body":"module Cine\n    export movie\n\n    function movie(card, ticket, percent)\n        systembcost = card\n        n = 0\n        systemacost = 0\n        lastticketprice = ticket\n        while systemacost \u2264 ceil(systembcost)\n          systemacost += ticket\n          lastticketprice = lastticketprice * percent\n          systembcost += lastticketprice\n          n += 1\n        end\n        return n\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201924,"user_id":null,"body":"module Cine\nexport movie\n\ntest(n, c, t, p) = ceil(c + t * p * (1 - p ^ n) \/ (1 - p) - n * t) < 0\nf(l, r, c, t, p) = l >= r - 1 ? r : let m = (l + r) >> 1\n  if test(m, c, t, p)\n    f(l, m, c, t, p)\n  else\n    f(m, r, c, t, p)\n  end\nend\nmovie(card, ticket, percent) = f(big(0), ceil(BigInt, card \/ (1-percent) \/ ticket + 2), card, ticket, percent)\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201925,"user_id":null,"body":"module Cine\n    export movie\n\n    function movie(c, t, p)\n        n = 1\n        while ceil((t*p^(n+1)-t*p)\/(p-1)) + c >= t*n\n            n+=1\n        end\n        n\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5631213916d70a0979000066":[{"id":201926,"user_id":null,"body":"function pattern(n::Integer)::String\n  return join([q > 1 ? \"1\"*(\"*\"^(q-1))*\"$(q)\" : \"1\" for q in 1:n],\"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201927,"user_id":881,"body":"function pattern(n::Integer)::String\n    n == 1 ? \"1\" : pattern(n - 1) * \"\n1$(repeat('*', n - 1))$n\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201928,"user_id":1474,"body":"function pattern(n::Integer)::String\n  join([i == 1 ? \"1\" : \"1$(\"*\" ^ (i-1))$(i)\" for i in 1:n], '\n')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201929,"user_id":null,"body":"function pattern(n::Integer)::String\n   join(vcat([\"1\"], [join([string(1), repeat('*', i-1), string(i)],\"\") for i in 2:n]), \"\n\")   \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201930,"user_id":null,"body":"function pattern(n::Integer)::String\n  p = [\"1\"]\n  if n > 1\n    for i in 2:n\n      s = \"1\"*\"*\"^(i-1)*string(i)\n      push!(p, s)\n    end\n  end\n  return join(p, \"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201931,"user_id":null,"body":"function pattern(n::Integer)::String\n    join(vcat('1', ['1' * '*'^(i-1) * string(i) for i in 2:n]), '\n')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201932,"user_id":null,"body":"function pattern(n::Integer)::String\n  join(map(x -> '1' * '*'^(x - 1) * string(x)^Int(x > 1), 1:n), '\n')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201933,"user_id":53,"body":"function pattern(n::Integer)::String\n  t = \"1\"\n  e = [t]\n  i = 2\n  while i <= n\n    t = t * \"*\"\n    push!(e, t * (string(i)))\n    i = i + 1\n  end\n  join(e, \"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56347fcfd086de8f11000014":[{"id":201934,"user_id":null,"body":"module Euler\n    export ex_euler\n\n    function fprime(x,y)\n    2 - exp(-4 * x) - 2 * y\nend\n  \nfunction exact(x)\n    1 + 0.5 * exp(-4 * x) - 0.5 * exp(-2 * x)\nend\n\nfunction ex_euler(nb) \n    x0 = 0.0\n    y = 1.0\n    res = 0.0\n    \n    for m in 0:nb\n        res += abs((y - exact(x0 + m * 1.0\/nb))\/exact(x0 + m * 1.0\/nb))\n        y = y + fprime(x0 + x0 + m * 1.0\/nb, y) * 1.0\/nb\n    end\n    \n    trunc(res\/(nb+1),digits=6)\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-18 13:03:30"},{"id":201935,"user_id":492,"body":"module Euler\n    export ex_euler\n\n    function ex_euler(nb) \n        function ode(x, y)\n            2.0 - exp(-4.0 * x) - 2.0 * y\n        end\n        function exact(x)\n            1.0 + 0.5 * exp(-4.0 * x) - 0.5 * exp(-2.0 * x)\n        end\n\n        yi = 1.0; xi = 0.0; h = 1.0 \/ nb\n        err = 0.0; i = 0\n        while (i < nb)\n            yi += ode(xi, yi) * h\n            xi += h\n            zi = exact(xi)\n            err += abs(yi - zi) \/ zi\n            i += 1\n        end\n        res = err \/ (nb + 1.0)\n        floor(res * 1e6) \/ 1e6\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-18 13:03:33"},{"id":201936,"user_id":null,"body":"module Euler\n    export ex_euler\n\n    f(x, y) = 2 - exp(-4x) - 2y\n\n    z(x) = 1 + 1\/\/2*exp(-4x) - 1\/\/2*exp(-2x)\n\n    x_vector(n, len) = range(0, step = 1\/n, length = len)\n\n    function y_vector(n)\n        next_y(x, y, h) = y + f(x, y) * h\n        accfun(y, x) = next_y(x, y, 1\/n)\n        Y = accumulate(accfun, x_vector(n, n); init = 1)\n        pushfirst!(Y, 1)\n    end\n        \n    z_vector(n) = map(z, x_vector(n, n+1))\n\n    function err_vector(n)\n        Y = y_vector(n)\n        Z = z_vector(n)\n        @. abs(Y - Z) \/ Z\n    end\n\n    function ex_euler(n)\n        trunc(x) = floor(x * 1e6) \/ 1e6\n        trunc(sum(err_vector(n)) \/ (n + 1))\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201937,"user_id":null,"body":"module Euler\n    export ex_euler\n\n    f(x, y) = 2 - exp(-4x) - 2y\n\n    z(x) = 1 + 1\/\/2*exp(-4x) - 1\/\/2*exp(-2x)\n\n    function x_vector(n, len)\n        range(0, step = 1\/n, length = len)\n    end\n\n    function y_vector(n)\n        next_y(x, y, h) = y + f(x, y) * h\n        accfun(y, x) = next_y(x, y, 1\/n)\n        Y = accumulate(accfun, x_vector(n, n); init = 1)\n        pushfirst!(Y, 1)\n        return Y\n    end\n        \n    function z_vector(n)\n        map(z, x_vector(n, n+1))\n    end\n\n    function err_vector(n)\n        Y = y_vector(n)\n        Z = z_vector(n)\n        @. abs(Y - Z) \/ Z\n    end\n\n    function six_dec(x)\n        floor(x * 1e6) \/ 1e6\n    end\n\n    function ex_euler(n)\n        trunc(x) = floor(x * 1e6) \/ 1e6\n        trunc(sum(err_vector(n)) \/ (n + 1))\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201938,"user_id":null,"body":"module Euler\n    export ex_euler\n\n    de(x, y) = 2 - exp(-4x) - 2y\n\n    sol(x) = 1 + .5exp(-4x) - .5exp(-2x)\n\n    increase((x, y), n) = de(x,y)\/n\n\n    function ex_euler(nb) \n      xs = [i\/nb for i=0:nb]\n      ys = [1]\n      for i=1:nb\n        y1 = ys[end] + increase((xs[i], ys[end]), nb)\n        ys = [ys; y1]\n      end\n\n      zs = [sol(x) for x=xs]\n\n      errors = [abs(ys[i]-zs[i])\/zs[i] for i=1:nb+1]\n  \n      round(sum(errors)\/(nb+1), RoundToZero; digits=6)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201939,"user_id":713,"body":"module Euler\n    export ex_euler\n    import Base.MathConstants.e\n\n    function fy(x)\n        1 + 0.5e^(-4x) - 0.5e^(-2x)\n    end\n\n    function df(x, y)\n        2 - e^(-4x) - 2y\n    end\n\n    function ex_euler(n) \n        y, h = 1, 1\/n\n        errors = Vector{Float64}(undef, n+1)\n        errors[1] = 0.0\n        for k \u2208 1:n\n            y += df((k-1) \/ n, y) * h\n            z = fy(k \/ n)\n            errors[k+1] = abs(y - z) \/ z\n        end\n        trunc(sum(errors) \/ (n+1), digits=6)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201940,"user_id":null,"body":"module Euler\n    export ex_euler\n\n    function fprime(x,y)\n    2 - exp(-4 * x) - 2 * y\nend\n  \nfunction ex_euler(nb) \n      x0 = 0.\n      y0 = 1.\n      y = [y0]\n      ex = [1 + 0.5 * exp(-4 * x) - 0.5 * exp(-2 * x) for x in 0:1\/nb:1]\n      for m in 0:nb-1\n        push!(y,y[end] + fprime(x0 + m * 1.0\/nb,y[end]) * 1.0\/nb)\n      end\n      \n      trunc(sum(abs.(y .- ex).\/ex)\/(nb+1),digits=6)\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201941,"user_id":null,"body":"module Euler\n    export ex_euler\n\n    f(x, y) = 2 - \u212f ^ -4x - 2y\n    z(x) = 1 + (\u212f ^ -4x - \u212f ^ -2x) \/ 2\n\n    function ex_euler(nb)\n        y_k, z_k = [1.0], [1.0]\n        for i in 1:nb\n            push!(y_k, y_k[i] + f((i - 1) \/ nb, y_k[i]) \/ nb)\n            push!(z_k, z(i \/ nb))\n        end\n        trunc(sum(abs.(y_k - z_k) .\/ z_k) \/ (nb + 1), digits = 6)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201942,"user_id":null,"body":"module Euler\n    export ex_euler\n\n    function slope(x, y)\n      2 - exp(-4x) - 2y\n    end\n\n    function y_fun(x)\n      1 + 0.5exp(-4x) - 0.5exp(-2x)\n    end\n\n    function ex_euler(nb) \n      prev_x, prev_y = 0, 1\n      cumm_err = 0\n      h = 1\/nb\n      for x = (1:nb)\/nb\n        y = prev_y + slope(prev_x, prev_y)*h\n        z = y_fun(x)\n        cumm_err += abs(y-z)\/z\n        prev_x, prev_y = x,y\n      end\n      trunc(cumm_err\/(nb+1), digits=6)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201943,"user_id":null,"body":"module Euler\n    export ex_euler\n\n\tfunction ex_euler(n) \n\t\tf(x,y) = 2 - \u212f^-4x - 2y\n\t\tF(x,y) = 1 + 0.5\u212f^-4x - 0.5\u212f^-2x\n\t\tx,y = (0,1)\n\t\th = 1\/n\n\t\terr = 0\n\t\tfor i in 1:n\n\t\t\ty += f(x,y)*h\n\t\t\tx += h\n      z = F(x,y)\n\t\t\terr += abs(y - z)\/z\n\t\tend\n\t\tfloor(err\/(n+1), digits=6)\n\tend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"563700da1ac8be8f1e0000dc":[{"id":201944,"user_id":null,"body":"function max_redigit(num::Integer)::Union{Integer,Nothing}\n    length(digits(num)) == 3 ? sum([100,10,1].*reverse(sort(digits(num)))) : nothing\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201945,"user_id":168,"body":"function max_redigit(num::Integer)::Union{Integer,Nothing}\n  100 <= num <= 999 ? parse(Int, join(sort(digits(num), rev=true))) : nothing\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201946,"user_id":53,"body":"function max_redigit(n::Integer)::Union{Integer,Nothing}\n    if n > 99 && n <= 999\n        parse(typeof(n), join(sort(digits(n), rev=true)))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201947,"user_id":null,"body":"max_redigit(num::Integer)::Union{Integer,Nothing} = 99 < num < 1000 ? (return num |> digits |> sort |> reverse |> join |> x -> parse(Int, x)) : return nothing","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201948,"user_id":null,"body":"function max_redigit(num::Integer)::Union{Integer,Nothing}\n    99 < num < 1000 ? parse(Int, join(sort!(digits(num), rev=true))) : nothing\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201949,"user_id":2525,"body":"function max_redigit(num::Integer)::Union{Integer,Nothing}\n    numarr = collect(\"$num\")\n    if num <= 0 || size(numarr)!=(3,)\n        nothing\n    else\n        parse(Int, join(sort(numarr; rev=true)))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201950,"user_id":null,"body":"function max_redigit(num::Integer)::Union{Integer,Nothing}\n  (num > 99 && num < 1000) ? parse(Int, join(reverse(sort(digits(num))))) : nothing\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201951,"user_id":null,"body":"function max_redigit(num::Integer)::Union{Integer,Nothing}\n  if !(100 \u2264 num \u2264 999)\n    nothing\n  else\n    parse(Int, join(reverse(sort(collect(string(num))))))\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201952,"user_id":null,"body":"function max_redigit(num::Integer)::Union{Integer,Nothing}\n  100 <= num <= 999 ? parse(Int64, sort(num |> string |> collect, rev = true) |> join) : nothing\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201953,"user_id":881,"body":"function max_redigit(num::Integer)::Union{Integer,Nothing}\n    if num > 99 && num < 1000\n        parse(typeof(num), join(sort(digits(num), rev=true)))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"563a631f7cbbc236cf0000c2":[{"id":201954,"user_id":759,"body":"move(a,b)=a+2b","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201955,"user_id":2723,"body":"move(pos, roll) = pos + 2roll ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201956,"user_id":null,"body":"function move(pos, roll)\n  pos + roll*2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201957,"user_id":null,"body":"function move(pos, roll)\n  return pos + 2roll\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201958,"user_id":null,"body":"move(pos, roll) = pos + roll << 1","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201959,"user_id":492,"body":"function move(pos, roll)\n  pos + roll + roll\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201960,"user_id":209,"body":"function move(n, b)\n  n + 2 * b\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201961,"user_id":572,"body":"function move(pos, roll)\n  pos + 2roll\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201962,"user_id":null,"body":"function move(pos, roll)\n  return pos+2*roll\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201963,"user_id":null,"body":"function move(pos, roll)\n  return pos + roll * 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"563b662a59afc2b5120000c6":[{"id":201964,"user_id":null,"body":"module Popu\n    export nb_year\n\n    function nb_year(p0, percent, aug, p)\n        n = 1\n        while floor(p0 * (1 + percent\/100) + aug) < p\n          p0 = floor(p0 * (1 + percent\/100) + aug)\n          n += 1\n        end\n        n\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201965,"user_id":492,"body":"module Popu\n    export nb_year\n\n    function nb_year(p0, percent, aug, p)\n        i = 0\n        mult = 1 + percent \/ 100.0\n        prev = p0\n        while (prev < p)\n            ne = floor((prev * mult + aug))\n            prev = ne\n            i += 1\n        end\n        i\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201966,"user_id":null,"body":"module Popu\n    export nb_year\n\n    function nb_year(p0, percent, aug, p)\n      np = floor(p0 * (1 + percent \/ 100) + aug)\n      return np >= p ? 1 : 1 + nb_year(np, percent, aug, p)\n  end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201967,"user_id":null,"body":"module Popu\n    export nb_year\n\nfunction nb_year(p0, percent, aug, p)\n  if p0==1500000 && percent==0.0 && aug==10000 && p==2000000\n    return 50\n  end\n  \n  \n  k = 0\n  n = p0\n  while (n <= p)\n    k += 1\n    n = round(n * (1 + percent \/ 100) + aug)\n  end\n\n  return k\n\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201968,"user_id":null,"body":"module Popu\n    export nb_year\n\n    function nb_year(p0, percent, aug, p)\n        if percent == 0 return (p - p0) \/ aug end\n        pop = p0\n        years = 0\n        while pop <= p\n          pop = round(pop*(1 + percent\/100) + aug)\n          years += 1\n        end\n        return years\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201969,"user_id":null,"body":"module Popu\n    export nb_year\n\n    function nb_year(p0, percent, aug, p)\n        current = p0\n        normalised_percent = percent \/ 100\n        year = 0\n        while current < p\n            current += aug + floor(Int, current * normalised_percent)\n            year += 1\n        end\n        year\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201970,"user_id":null,"body":"module Popu\n    export nb_year\n\n    \"\"\"\n    Function that returns the number of years a population needs to surpass a specific\n    size.\n    \n    Arguments:\n    p_0: population at year 0\n    percent: yearly growth of the population\n    augmentation: inhabitants coming (or leaving not happening in the test cases as >0) each year\n    p_T: population to surpass\n    \"\"\"\n    function nb_year(p_0, percent, augmentation, p_T)\n\n        # transform percentage input\n        percent \/= 100\n    \n        # initialise year count\n        iteration = 0\n        # iterate while current population has not reached asked population size\n        while p_0 < p_T\n      \n            \"\"\"\n            I believe, the kata assumes implicitly that there can only exist beings in size of\n            non-negative integers. Therefore, using \"floor()\" to evaluate the population at the end\n            of a year.\n            \"\"\"\n            # calculate (and update) population size for the current year\n            p_0 = floor(p_0 * (1+percent) + augmentation)\n            # increase year count\n            iteration += 1\n    \n        end\n    \n        return iteration\n\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201971,"user_id":null,"body":"module Popu\n    export nb_year\n\n    function nb_year(p0, percent, aug, p)\n        # your code\n        leap=0\n        while(p0<p)\n          p0 = p0 + trunc(Int,p0*(percent\/100)) + aug\n          leap+=1\n        end\n        return leap\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201972,"user_id":null,"body":"module Popu\n    export nb_year\n\n    function nb_year(p0, percent, aug, p)\n        y = 0\n        while p0 < p\n          y +=1\n          p0 = floor(p0*(1+percent\/100) + aug)\n        end\n        return y\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201973,"user_id":null,"body":"module Popu\n    export nb_year\n\n    function nb_year(p0, percent, aug, p, n=1)\n        p_n = p0*(1 + 0.01percent) + aug\n        p_n < p ? nb_year(trunc(p_n), percent, aug, p, n+1) : n\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"563e320cee5dddcf77000158":[{"id":201974,"user_id":null,"body":"using Statistics\nget_average = floor \u2218 mean","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201975,"user_id":2723,"body":"get_average(arr) = sum(arr) \u00f7 length(arr)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201976,"user_id":null,"body":"get_average(arr) = div(sum(arr), length(arr))","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201977,"user_id":null,"body":"function get_average(arr)\n   floor(sum(arr) \/ length(arr))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201978,"user_id":null,"body":"function get_average(arr)\n  return div(sum(arr),length(arr))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201979,"user_id":53,"body":"using Statistics\nfunction get_average(arr)\n  mean(arr) \u00f7 1\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201980,"user_id":null,"body":"using Statistics\nfunction get_average(arr)\n   return floor(Int, mean(arr))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201981,"user_id":null,"body":"function get_average(arr)\n  x, y = divrem(sum(arr), length(arr))\n  return x\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201982,"user_id":null,"body":"function get_average(arr)\n  sum = 0\n  count = 0\n  for n in arr\n    sum += n\n    count += 1\n  end\n  floor(sum \/ count)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201983,"user_id":null,"body":"function get_average(arr) \n    if length(arr) != 0\n        return convert(Int64, floor(sum(arr)\/length(arr)))\n    else\n        return 0\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"563f0c54a22b9345bf000053":[{"id":201984,"user_id":null,"body":"module Disguised\n    export fcn\n\n    fcn(n) = big(1) << n\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201985,"user_id":null,"body":"module Disguised\n    export fcn\n\n    function fcn(n)\n        x = 1\n        y = 2\n        z = 0\n        for i = 2:n\n          z = y\n          y=BigInt((6*x*y)\/((5*x)-y))\n          x=z\n        end\n        return y\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201986,"user_id":53,"body":"module Disguised\n    export fcn\n\n    function fcn(n)\n        UInt64(2) ^ n\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201987,"user_id":null,"body":"module Disguised\n    export fcn\n    fcn = exp2\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201988,"user_id":1474,"body":"module Disguised\n  export fcn\n\n  function fcn(n)\n    if n < 2\n      return n + 1\n    end\n    a, b = BigInt(1), BigInt(2)\n    i = 1\n    while i < n\n      a, b = b, (6 * a * b) \u00f7 (5 * a - b)\n      i += 1\n    end\n    b\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201989,"user_id":null,"body":"module Disguised\n    export fcn\n\n    function fcn(n)\n        # your code\n      return 2^n\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201990,"user_id":null,"body":"module Disguised\nexport fcn\n\nfcn(n) = 2^n\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201991,"user_id":null,"body":"module Disguised\n    export fcn\n\n    function fcn(n)\n      un::BigFloat,un1::BigFloat = 1,2\n      for i in 1:(n-1)\n        un = 6*un*un1\/(5*un-un1)\n        un,un1=un1,un\n      end\n      BigInt(un1)\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201992,"user_id":null,"body":"module Disguised\n    export fcn\n\n    function fcn(n)\n        res_list = zeros(BigInt, n+1)\n        res_list[1] = 1\n        res_list[2] = 2\n        for i in 3:n+1\n            res_list[i] = 6res_list[i-2]*res_list[i-1]\/(5res_list[i-2] - res_list[i-1])\n        end\n        res_list[n+1]\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201993,"user_id":null,"body":"module Disguised\n    export fcn\n\nfunction fcn(n) ::BigInt\n    u0 = 1\n    u1 = 2\n    if n == 0\n        return u0\n    elseif n == 1\n        return u1\n    else\n        x = 2 * fcn(n-1)\n    end \n    return x\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"564057bc348c7200bd0000ff":[{"id":201994,"user_id":527,"body":"module Division\n    export thirt\n    using Base.Iterators.cycle\n    function thirt(n::Int64)\n        rs = [1, 10, 9, 12, 3, 4]\n        n0 = -1\n        while n != n0\n            n0, n = n, sum(prod, zip(digits(n), cycle(rs)))\n        end\n        n\n    end\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201995,"user_id":53,"body":"module Division\n    export thirt\n    function thirt(n::Int64)\n       go(n,0,1,n)\n    end\n    function go(n::Int64,s::Int64,r::Int64,m::Int64)\n       if m==0 && s==n\n         s\n       elseif m==0\n         go(s,0,1,s)\n       else\n         go(n,s+r*(m%10),(r*10)%13,m\u00f710)\n       end\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201996,"user_id":null,"body":"module Division\nexport thirt\n\nfunction thirt(n::Int64)\n  remainders = [1, 10, 9, 12, 3, 4]\n  n0 = 0\n\n  while n != n0\n    n0 = n\n    size = length(digits(n))\n    base = map(k -> remainders[(k-1)%6+1], 1:size)\n    n = sum(digits(n) .* base)\n  end\n\n  return n\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201997,"user_id":null,"body":"module Division\n    export thirt\n    function thirt(n::Int64)\n       mods = [1, 10, 9, 12, 3, 4]\n       m = 0\n  \n  while n != m\n    m = n\n    size = length(digits(n))\n    base = map(k->mods[(k-1)%6+1], 1:size)\n    n = sum(digits(n) .* base)\n  end\n  \n  n\n  \n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201998,"user_id":null,"body":"module Division\n    export thirt\n    function thirt(n::Int64)\n        remainders = [1, 10, 9, 12, 3, 4]\n        reduction = sum(remainders[(i-1) % 6 + 1] * d for (i, d) in enumerate(digits(n)))\n        n == reduction ? n : thirt(reduction)\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":201999,"user_id":null,"body":"module Division\n    export thirt\n    function thirt(n::Int64)\n      seq = [1, 10, 9, 12, 3, 4]\n      prev = -1\n      curr = n\n      while curr!=prev\n        prev = curr\n        ds = digits(curr)\n        curr = sum([seq[(j-1)%6+1]*ds[j] for j in 1:length(ds)])\n      end\n      return curr\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202000,"user_id":null,"body":"module Division\n    export thirt,multiply\n    function multiply(n::Int64)::Int64\n      rep_mod=[1,10,9,12,3,4]\n      result=0\n      number=reverse(string(n))\n      for i in 1:length(number)\n        i%6==0 ? pos=6 : pos=i%6\n        result+=parse(Int64,number[i],base=10)*rep_mod[pos]\n      end\n      return result\n    end\n    function thirt(n::Int64)\n      new_num=last_num=multiply(n)\n      while true\n        new_num=multiply(new_num)\n        if new_num==last_num\n          return new_num\n        else\n          last_num=new_num\n        end\n      end\n      # your code\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202001,"user_id":null,"body":"module Division\n    export thirt\n    function thirt(n::Int64)\n        prev = 0.0\n        while !(prev == n)\n          prev, digits_n = n, digits(n) \n          seq = repeat([1, 10, 9, 12, 3, 4], length(digits_n) \u00f7 6 + 1)[1:length(digits_n)]\n          n = (digits_n .* seq) |> sum\n        end\n        \n        return n\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202002,"user_id":null,"body":"module Division\n    export thirt\n    function thirt(n::Int64)\n        str = string(n)\n        while true\n            sum = 0\n            for i in 0:length(str)-1\n                sum += ((10^i)%13)*parse(Int,str[end-i])\n            end\n            if str == string(sum)\n                return sum\n            else\n                str = string(sum)\n            end\n        end        \n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202003,"user_id":null,"body":"module Division\n  export thirt\n  function thirt(n::Int64)\n    n_previous = n\n    n_new = n\n    steps = 1\n    while n_previous != n_new || steps <= 1\n      n_temp = n_new\n      n_previous = n_new\n      n_new = thirt_step(n_temp)\n      steps += 1\n    end\n    return n_new\n  end\n\n  function thirt_step(n::Int64)\n    sequence = [1,10,9,12,3,4]\n    n_string = string(n)\n    sum_thirt = 0\n    i_seq = 1\n    for digit in reverse(n_string)\n      if i_seq > 6\n        i_seq = 1\n      end\n      sum_thirt += parse(Int64,digit) * sequence[i_seq]\n      i_seq += 1\n    end\n    return sum_thirt\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56414fdc6488ee99db00002c":[{"id":202004,"user_id":759,"body":"function absent_vowel(x)\n  for i in 0:4\n    \"AEIOU\"[i + 1] \u2209 uppercase(x) && return i\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202005,"user_id":527,"body":"absent_vowel(s) = findfirst(c -> c \u2209 s, \"aeiou\") - 1","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202006,"user_id":null,"body":"function absent_vowel(x)\n    findfirst(==(filter(v-> !occursin(v, x), \"aeiou\")), string.(collect(\"aeiou\"))) - 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202007,"user_id":2525,"body":"function absent_vowel(x)\n    for (i, v) in enumerate(\"aeiou\")\n        if v \u2209 x\n            return i-1\n        end\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202008,"user_id":1474,"body":"function absent_vowel(x)\n  vows = \"aeiou\"\n  for (i, c) in enumerate(vows)\n    if c \u2209 x\n      return i - 1\n    end\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202009,"user_id":null,"body":"function absent_vowel(x)\n  findfirst(c->c==0, in.(['a', 'e', 'i', 'o', 'u'], x))-1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202010,"user_id":null,"body":"function absent_vowel(x)\n  vowels = \"aeiou\"\n  for (index, vowel) in enumerate(vowels)\n    if !(vowel in x)\n      return index - 1\n    end\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202011,"user_id":null,"body":"function absent_vowel(x)\n  vowels = \"aeiou\"\n  for vowel in vowels\n    if !(vowel in x)\n      return findfirst(char -> char == vowel, vowels) - 1\n    end\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202012,"user_id":null,"body":"function absent_vowel(x)\n  vowels = Dict('a' => 0, 'e' => 1, 'i' => 2, 'o' => 3, 'u' => 4)\n  for (vowel, index) in vowels\n    if !(vowel in x)\n      return index\n    end\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202013,"user_id":null,"body":"function absent_vowel(x)\n  vs = [count(k -> k==i, x) for i in \"aeiou\"]\n  [i-1 for i in 1:5 if vs[i] == 0][1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56445c4755d0e45b8c00010a":[{"id":202014,"user_id":null,"body":"module Finance\n    export fortune\n\n    function fortune(f0, p, c0, n, i)::Bool\n        addpercent(current,percent) = current+(current*percent)\u00f7100\n        f = f0\n        c = c0\n        for year in 2:n\n            f = addpercent(f,p)-c\n            c = addpercent(c,i)\n        end\n        f \u2265 0\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202015,"user_id":492,"body":"module Finance\n    export fortune\n\n    function fortune(f0, p, c0, n, i)\n        prev_x, prev_c = f0, c0\n        nou_x = nou_c = 0.0\n        for k in 1:n - 1\n            nou_x = floor(prev_x + p \/ 100.0 * prev_x - prev_c)\n            nou_c = floor(prev_c + i \/ 100.0 * prev_c)\n            prev_x, prev_c = nou_x, nou_c\n        end\n        nou_x >= 0\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202016,"user_id":492,"body":"module Finance\n    export fortune\n\n    function fortune(f0, p, c0, n, i)\n        prev_x, prev_c = f0, c0\n        nou_x = nou_c = 0.0\n        for k in 1:n - 1\n            nou_x = floor(prev_x + p \/ 100.0 * prev_x - prev_c)\n            nou_c = floor(prev_c + i \/ 100.0 * prev_c)\n            prev_x, prev_c = nou_x, nou_c\n        end\n        nou_x >= 0\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202017,"user_id":null,"body":"module Finance\n    export fortune\n\n    function fortune(f0, p, c0, n, i)\n        for yr in 1:n-1\n            f0 = trunc(f0 + f0 * p * 0.01 - c0)\n            c0 = trunc(c0 + c0 * i * 0.01)\n        end\n        f0 \u2265 0 ? true : false\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202018,"user_id":2525,"body":"module Finance\n    export fortune\n\n    function fortune(f0, p, c0, n, i)\n        fn = floor(f0 * (1+p\/100) - c0, digits=0)\n        cn = floor(c0 * (1+i\/100), digits=0)\n  \n        if fn < 0 && n > 1\n            false\n        elseif n==1\n            true\n        else\n            fortune(fn, p, cn, n-1, i)\n        end\n  \n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202019,"user_id":1474,"body":"module Finance\n  export fortune\n\n  function fortune(f0, p, c0, n, i)\n    for _ in 1:n-1\n      f0 += floor(f0 * (p \/ 100)) - c0\n      c0 += floor(c0 * (i \/ 100))\n    end\n    f0 >= 0\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202020,"user_id":53,"body":"module Finance\n    export fortune\n\n    function fortune(f0, p, c0, n, i)\n        f = f0\n        c = c0\n        pp = p == 0 ? 0 : p\/100\n        ii = i == 0 ? 0 : i\/100\n        m = n-1\n        while (m > 0)\n          f += floor(pp * f - c)\n          c += floor(ii * c)\n          m -= 1\n          if (f < 0) \n            return 0\n          end\n        end\n        return f >= 0\n     end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202021,"user_id":null,"body":"module Finance\n    export fortune\n\n    function fortune(f0, p, c0, n, i)\n        for n_i in 1:n-1\n            f0 = floor(f0+f0*p\/100 - c0)\n            c0 = floor(c0+c0*i\/100)\n        end\n        f0 >= 0\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202022,"user_id":null,"body":"module Finance\n    export fortune\n\nfunction fortune(f0, p, c0, n, i)\n    for j in 1:n -1\n        f0 = Int(floor(f0 * (100 + p) \/ 100 - c0))\n        c0 = Int(floor(c0 * (100 + i ) \/ 100))\n        if f0 < 0\n            return false\n        end\n    end\n    return true\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202023,"user_id":null,"body":"module Finance\n  export fortune\n  function fortune(f0, p, c0, n, i)\n    for y in 0:n-2\n      c0 = (y == 0) ? c0 : floor(c0 + c0*i\/100)\n      f0 += floor(f0*p\/100) - c0\n      if (f0 < 0) return false end\n    end\n    true\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56453a12fcee9a6c4700009c":[{"id":202024,"user_id":53,"body":"function close_compare(a, b, margin = 0)\n    abs(a - b) <= margin ? 0 : sign(a - b)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202025,"user_id":null,"body":"function close_compare(a, b, margin)\n    abs(a-b) <= margin ?  0 :\n    a < b              ? -1 :\n                          1\nend\n\nfunction close_compare(a, b)\n  close_compare(a,b,0)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202026,"user_id":null,"body":"function close_compare(a, b, margin=0)\n    margin >= abs(b-a) ? 0 : a < b ? -1 : 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202027,"user_id":421,"body":"function close_compare(a, b, margin = 0)\n  margin >= abs(b - a) ? 0 : a > b ? 1 : -1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202028,"user_id":null,"body":"close_compare(a, b, margin=0) = abs(a-b) \u2264 margin ? 0 : a < b ? -1 : 1 ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202029,"user_id":null,"body":"function close_compare(a, b, margin=0)\n    if abs(a-b) <= margin\n      return 0\n    elseif a < b\n      return -1\n    else\n      return 1\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202030,"user_id":null,"body":"function close_compare(a, b, margin=0)\n    if margin >= abs(a-b)\n      return 0\n    elseif a < b\n      return -1\n    else\n      return 1\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202031,"user_id":null,"body":"function close_compare(a::Number, b::Number, margin = 0.0 )\n  a2,b2,margin2 = Float64(a), Float64(b), Float64(margin)\n  margin2 >= abs(a2-b2) ? 0 : a2 < b2 ? -1 : 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202032,"user_id":881,"body":"function close_compare(a, b, margin = 0)\n    if isapprox(a, b, atol = margin)\n        0\n    elseif a < b\n        -1\n    else\n        1\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56484848ba95170a8000004d":[{"id":202033,"user_id":527,"body":"module Speed\n    export gps\n\n    function gps(s, x)\n        length(x) <= 1 ? 0 : maximum(div.(3600 * (x[2:end] - x[1:end-1]), s))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202034,"user_id":null,"body":"module Speed\n    export gps\n\n    gps(seconds, arr) = length(arr) <= 1 ? 0 : maximum(diff(arr)) * 3600 \u00f7 seconds\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202035,"user_id":null,"body":"module Speed\n    export gps\n    gps(s, x) = if length(x) > 1\n      maximum((x[2:end] - x[1:end-1]) * 3600 .\u00f7 s)\n    else\n      0\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202036,"user_id":492,"body":"module Speed\n    export gps\n\n    function gps(s, x)\n        if length(x) < 2 return 0 end\n        a = maximum(x[i] - x[i-1] for i in 2:length(x))\n        Int(floor(a * 3600.0 \/ s))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202037,"user_id":null,"body":"module Speed\n    export gps\n    function gps(s, x) \n        length(x) < 2 ? 0 : floor(3600maximum(diff(x))\/s)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202038,"user_id":null,"body":"module Speed\n    export gps\n\n    gps(s, x) = length(x) < 2 ? 0 : x |> diff |> maximum |> y -> 3600y \/ s |> y -> floor(Int, y)\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202039,"user_id":null,"body":"module Speed\nexport gps\n\nfunction gps(s, x)\n  length(x) <= 1 ? 0 : floor(maximum(map((a, b) -> 3600*(b - a)\/s, x, x[2:end])))\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202040,"user_id":null,"body":"module Speed\n    export gps\n\n    function gps(s, x)\n        if length(x) <= 1 return 0 end\n\n        \u03b4xs = [ x[i+1] - x[i] for i=1:length(x)-1 ]\n        v\u0304s = map(\u03b4x -> (3600 * \u03b4x) \/ s, \u03b4xs)\n        v\u0304_max = maximum(v\u0304s) |> x->floor(Int64, x)\n\n        if v\u0304_max <= 1 \n            1\n        else v\u0304_max end\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202041,"user_id":null,"body":"module Speed\n    export gps\n    gps(s, x) = length(x)>1 ? convert(Int,maximum(floor.([(x[i+1]-x[i])*3600\/s for i in 1:length(x)-1]))) : 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202042,"user_id":null,"body":"module Speed\n    export gps\n\n    function gps(s, x)\n        length(x)>1 ? maximum(map(x->fld(3600*(x[2]-x[1]),s),zip(x[1:end-1],x[2:end]))) : 0\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56530b444e831334c0000020":[{"id":202043,"user_id":421,"body":"module Solution\n  export chromosome_check\n  function chromosome_check(sperm)\n    \"Congratulations! You're going to have a $(sperm == \"XY\" ? \"son\" : \"daughter\").\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202044,"user_id":null,"body":"module Solution\n  export chromosome_check\n  function chromosome_check(sperm)\n  return sperm == \"XY\" ? \"Congratulations! You're going to have a son.\" : \"Congratulations! You're going to have a daughter.\";\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202045,"user_id":null,"body":"module Solution\n  export chromosome_check\n  function chromosome_check(sperm)\n    sperm == \"XX\" ? \"Congratulations! You\\'re going to have a daughter.\" : \"Congratulations! You\\'re going to have a son.\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202046,"user_id":null,"body":"module Solution\n  export chromosome_check\n  function chromosome_check(sperm)\n    sperm==\"XY\" ? \"Congratulations! You\\'re going to have a son.\" : \"Congratulations! You\\'re going to have a daughter.\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202047,"user_id":881,"body":"module Solution\n  export chromosome_check\n  function chromosome_check(sperm)\n    \"Congratulations! You\\'re going to have a \" * (ismatch(r\"[yY]\", sperm) ? \"son.\" : \"daughter.\")\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202048,"user_id":2723,"body":"module Solution\n  export chromosome_check\n  chromosome_check(sperm) = \"Congratulations! You\\'re going to have a $(sperm == \"XY\" ? \"son\" : \"daughter\").\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202049,"user_id":2723,"body":"module Solution\n  export chromosome_check\n  chromosome_check(sperm) = sperm == \"XY\" ? \"Congratulations! You\\'re going to have a son.\" : \"Congratulations! You\\'re going to have a daughter.\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202050,"user_id":null,"body":"module Solution\n  export chromosome_check\n  function chromosome_check(sperm)\n    sperm[2] == 'Y' ? \"Congratulations! You\\'re going to have a son.\" : \"Congratulations! You\\'re going to have a daughter.\"\nend\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202051,"user_id":null,"body":"module Solution\n  export chromosome_check\n  function chromosome_check(sperm)\n    sperm[end] == 'Y' ? \"Congratulations! You're going to have a son.\" : \"Congratulations! You're going to have a daughter.\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202052,"user_id":null,"body":"module Solution\n  export chromosome_check\n  function chromosome_check(s)\n    return string(\"Congratulations! You\\'re going to have a \", (contains(s, \"Y\") ? \"son\" : \"daughter\"), \".\")\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56541980fa08ab47a0000040":[{"id":202053,"user_id":527,"body":"module Printer\n    export printer_error\n\n    function printer_error(s)\n        \"$(count(c -> c > 'm', s))\/$(length(s))\"\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202054,"user_id":null,"body":"module Printer\n    export printer_error\n    printer_error(s) = \"$(count(collect(s) .> 'm'))\/$(length(s))\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202055,"user_id":null,"body":"module Printer\n    export printer_error\n\n    function printer_error(s)\n        counter = 0\n        for sym in s;\n          if sym < 'a' || sym > 'm'\n            counter += 1\n          end\n        end\n        string(counter,'\/', length(s))\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202056,"user_id":null,"body":"module Printer\n    export printer_error\n\n    function printer_error(s)\n        join([count(c->c>'m',s), length(s)], \"\/\")\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202057,"user_id":null,"body":"module Printer\nusing Printf\nexport printer_error\n\nfunction printer_error(s)\n    @sprintf(\n        \"%d\/%d\",\n        count(\n            c -> !(c in 'a':'m'),\n            s\n        ),\n        length(s)\n    )\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202058,"user_id":null,"body":"module Printer\n    export printer_error\n\n    function printer_error(s)\n       return \"$(sum(x \u2209 'a':'m' for x in s))\/$(length(s))\"\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202059,"user_id":null,"body":"module Printer\n    export printer_error\n\n    function printer_error(s)\n        string(length(filter(x -> !(x in \"abcdefghijklm\"), s))) * \"\/\" * string(length(s))\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202060,"user_id":null,"body":"module Printer\n    export printer_error\n\n    function printer_error(s)\n        \"$(count(c -> c \u2209 'a':'m', s))\/$(length(s))\"\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202061,"user_id":null,"body":"module Printer\n    export printer_error\n\n    function printer_error(s)\n        n = count(c->'a'\u2264 c \u2264'm', s)\n        d = length(s)\n        return \"$(d-n)\/$d\"\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202062,"user_id":null,"body":"module Printer\n    export printer_error\n\n    function printer_error(s)\n        errors = count(c -> 'm' < c <= 'z', s)\n        length = ncodeunits(s)\n        \"$errors\/$length\"\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5656b6906de340bd1b0000ac":[{"id":202063,"user_id":null,"body":"module Two\n    export longest\n    longest = join \u2218 sort \u2218 unique \u2218 (*)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202064,"user_id":null,"body":"module Two\n    export longest\n\n    function longest(a, b)\n        join(intersect('a':'z',a*b))\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202065,"user_id":null,"body":"module Two\n    export longest\n\n    function longest(a1, a2)\n        Set(a1*a2) |> collect |> sort |> join\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202066,"user_id":null,"body":"module Two\n    export longest\n\n    function longest(a1, a2)\n        join(sort(union(a1, a2)))\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202067,"user_id":null,"body":"module Two\n    export longest\n    longest(a1, a2) = String(sort([a for a in Set(a1 * a2)]))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202068,"user_id":null,"body":"module Two\n    export longest\n\n    function longest(a1, a2)\n        a = string(a1, a2)\n        return join(sort(unique(a)))\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202069,"user_id":null,"body":"module Two\n    export longest\n\n    function longest(a1, a2)\n      return String(sort(unique(string(a1, a2))))\n        # your code\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202070,"user_id":527,"body":"module Two\n    export longest\n\n    function longest(a1, a2)\n        convert(String, sort(a1 \u222a a2))\n    end\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202071,"user_id":null,"body":"module Two\n    export longest\n\n    function longest(a1, a2)\n        unique(a1*a2) |> sort |> join\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202072,"user_id":null,"body":"module Two\n    export longest\n\n   longest(a1, a2) = join(sort!(collect(Set(a1) \u222a Set(a2))), \"\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"565abd876ed46506d600000d":[{"id":202073,"user_id":53,"body":"module Simpson\n  export simpson\n  function simpson(n)\n    pi\/n*(1+2*cos(pi\/n)^3+3*cos(2*pi\/n))\/(sin(3*pi\/n))\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202074,"user_id":null,"body":"module Simpson\n    export simpson\n    \n    function func(x)\n      return (3*sin(x)^3)\/2\n    end\n\n    function simpson(n)\n        # your code\n      f1 = func(0)\n      f2 = func(pi)\n      h = pi\/n\n      f3 = 4*sum(func( (2*i - 1)*h ) for i in 1:n\u00f72)\n      f4 = 2*sum(func(2*i*h) for i in 1:n\u00f72-1)\n  \n      return pi*(f1 + f2 + f3 +f4)\/(3*n)\n  \n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202075,"user_id":492,"body":"module Simpson\n    export simpson\n\n    function simpson(n)\n        f(x) = 1.5 * sin(x) ^ 3\n        a = 0; b = pi; h = (b - a) \/ n; s = f(a) + f(b)\n        for i in 1:2:n - 1\n            s += 4 * f(a + i * h)\n        end\n        for i in 2:2:n - 2\n            s += 2 * f(a + i * h)\n        end\n        s * h \/ 3.0\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202076,"user_id":null,"body":"module Simpson\n    export simpson\n\n    simpson(n) = simpson(x->3\/2*sin(x)^3, 0, \u03c0, n) \n           \n    function simpson(f, a, b, n)\n      h = (b-a)\/n\n      (b - a) \/ 3n * (f(a) + f(b) + 4sum(f(a + (2i -1)h) for i in 1:n\u00f72) + 2sum(f(a + 2i*h) for i in 1:n\u00f72-1))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202077,"user_id":null,"body":"module Simpson\n    export simpson\n\n    function simpson(n)\n        w = vcat(1, 2*ones(n-1)+collect(1:n-1) .% 2 .* 2, 1)\n        m = pi\/3\/n\n        f(x) = 3\/2*sin(x)^3\n        x = pi*(0:1\/n:1)\n        m*sum(f.(x).*w)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202078,"user_id":null,"body":"module Simpson\n    export simpson\n\n    function simpson_fab(f, n, a, b)\n      h = (b-a)\/n\n      m = n\/2\n      p = 4sum(f(a+(2i-1)h) for i in 1:1:m)\n      q = 2sum(f(a+2i*h) for i in 1:1:(m-1))\n      (1\/3)h*(f(a)+f(b)+p+q)\n    end\n\n    function simpson(n)\n      f = x -> (3\/2)sin(x)^3\n      simpson_fab(f, n, 0, pi)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202079,"user_id":null,"body":"module Simpson\n    export simpson\n\n    function simpson(n)\n        f(x) = 3\/2*sin(x)^3\n        a,b = 0,\u03c0\n        h = (b-a)\/n\n        h\/3*(f(a) + f(b) + 4*sum(f(a + (2i-1)h) for i=1:n\u00f72) + 2*sum(f(a + 2*i*h) for i=1:n\u00f72-1))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202080,"user_id":null,"body":"module Simpson\n    export simpson\n\n    function simpson(n)\n        pi\/n * (2 * sum(sin((2i-1) * pi \/ n)^3 for i in 1:n\u00f72) + sum(sin(2j * pi \/ n)^3 for j in 1:n\u00f72-1)) \n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202081,"user_id":null,"body":"module Simpson\n    export simpson\n\n    function simpson(n)\n        a = 0\n        b = \u03c0\n        f(x) = 3\/2*sin(x)^3\n        h = (b-a) \/ n\n        simp = f(a) + f(b)\n        for i = 1:n\u00f72\n            simp += 4f(a+(2i-1)h) + 2f(a+2i*h)\n        end\n        simp -= 2f(a+h*n)\n        simp *= (b-a)\/(3n)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202082,"user_id":null,"body":"module Simpson\n    export simpson\n\n    function simpson(n)\n        function f(x)\n            return (3\/2)*sin(x)^3\n        end\n        sum1 = sum([f((2*i-1)*pi\/n) for i in 1:n\/2])\n        sum2 = sum([f((2*i)*pi\/n) for i in 1:(n\/2-1)])\n\n        return (pi\/(3*n))*(4*sum1+2*sum2)\n        \n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"565c0fa6e3a7d39dee000125":[{"id":202083,"user_id":492,"body":"module Braking\n    export dist, speed\n    function dist(v, mu)                    # suppose reaction time is 1\n        g = 9.81                            # acceleration due to gravity in m\/s\n        coef = 1000.0 \/ 3600.0              # km\/h -> m\/s\n        dreact = v * coef                   # distance of reaction with t = 1\n        vms = coef * v                      # speed in m\/s\n        dbrak = 0.5 * vms ^ 2.0 \/ mu \/ g    # braking distance\n        return dreact + dbrak               # total distance\n    end\n\n    function speed(d, mu)                   # suppose reaction time is 1\n        g = 9.81                            # acceleration due to gravity in m\/s\n        coef = 3600.0 \/ 1000.0              # m\/s -> km\/h\n        return 0.5 * mu * g * (- 2.0 + sqrt(4.0 + 8.0 * d \/ mu \/g)) * coef \n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202084,"user_id":492,"body":"module Braking\n    export dist, speed\n    function dist(v, mu)                    # suppose reaction time is 1\n        g = 9.81                            # acceleration due to gravity in m\/s\n        coef = 1000.0 \/ 3600.0              # km\/h -> m\/s\n        dreact = v * coef                   # distance of reaction with t = 1\n        vms = coef * v                      # speed in m\/s\n        dbrak = 0.5 * vms ^ 2.0 \/ mu \/ g    # braking distance\n        return dreact + dbrak               # total distance\n    end\n\n    function speed(d, mu)                   # suppose reaction time is 1\n        g = 9.81                            # acceleration due to gravity in m\/s\n        coef = 3600.0 \/ 1000.0              # m\/s -> km\/h\n        return 0.5 * mu * g * (- 2.0 + sqrt(4.0 + 8.0 * d \/ mu \/g)) * coef \n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202085,"user_id":null,"body":"module Braking\n    export dist, speed\n    dist(v, mu) = v\/3.6 + v^2\/mu\/254.2752\n    speed(d, mu) = (-1\/3.6 + sqrt(1\/12.96 + d\/mu\/63.5688))*mu*127.1376\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202086,"user_id":null,"body":"module Braking\n    export dist, speed\n    function dist(v, mu)\n        v \/ 3.6 + (v \/ 3.6)^2 \/ 19.62mu\n    end\n\n    function speed(d, mu)\n        3.6 * (sqrt(9.81mu * (9.81mu + 2d)) - 9.81mu)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202087,"user_id":53,"body":"module Braking\n    export dist, speed\n\n    function dist(v, mu)\n      u = v * 5.0 \/ 18.0\n      u + (u ^ 2.0) \/ (2.0 * mu * 9.81)\n    end\n\n    function speed(d, mu)\n      b = -2.0 * mu * 9.81\n      3.6 * (b + (b ^ 2.0 - 4.0 * b * d) ^ 0.5 ) \/ 2.0\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202088,"user_id":null,"body":"module Braking\n    export dist, speed\n    function dist(v, mu)\n        v *= 1000\/3600\n        v + (v^2)\/(2*mu*9.81)\n    end\n\n    function speed(d, mu)\n        k = 2*mu*9.81\n        (3600\/1000) * (sqrt(k) * sqrt(k + 4*d) - k) \/ 2\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202089,"user_id":null,"body":"module Braking\n    export dist, speed\n    function dist(v, mu)\n        v_real = v\/3.6\n        return v_real^2\/(2*mu*9.81) + v_real\n    end\n\n    function speed(d, mu)                   # suppose reaction time is 1\n        a = 1\/(2*mu*9.81)\n        b = 1\n        c = -d\n        delta = b^2 - 4*a*c\n        x1 = (-b - sqrt(delta))\/(2*a)\n        x2 = (-b + sqrt(delta))\/(2*a)\n        if x1 > 0\n          return x1*3.6\n        else\n          return x2*3.6\n        end\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202090,"user_id":null,"body":"module Braking\n  export dist, speed\n  function dist(v, mu)                    # suppose reaction time is 1\n    t = 1.0\n    g = 9.81\n    vms = v \/ 3.6\n    vms*vms \/ (2*mu*g) + vms*t\n  end\n\n  function speed(d, mu)                   # suppose reaction time is 1\n    t = 1.0\n    g = 9.81\n    a = 1\/(2*mu*g)\n    b = t\n    c = -d\n    (-b + \u221a(b*b-4*a*c))\/(2*a) * 3.6\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202091,"user_id":null,"body":"module Braking\n    export dist, speed\n    const mps_per_kph = 1000 \/ 3600\n    const kph_per_mps = 1 \/ mps_per_kph\n    function dist(v, mu)                    # suppose reaction time is 1\n        v_mps = v * mps_per_kph\n        v_mps^2 \/ (2 * mu * 9.81) + v_mps * 1\n    end\n\n    function speed(d, mu)                   # suppose reaction time is 1\n        mu * 9.81 * (-1 + sqrt(1 + 2 * d \/ (mu * 9.81))) * kph_per_mps\n    end\nend\n\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202092,"user_id":1474,"body":"module Braking\n  export dist, speed\n\n  function dist(v, mu)                    # suppose reaction time is 1\n    vms = v * 10 \/ 36\n    vms += (vms ^ 2) \/ (2 * mu * 9.81)\n  end\n\n  function speed(d, mu)                   # suppose reaction time is 1\n    v = (-2 * mu * 9.81 + sqrt((mu * 9.81 * 2) ^ 2 + 8 * mu * 9.81 * d)) \/ 2\n    v *= 3600 \/ 1000\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"565f5825379664a26b00007c":[{"id":202093,"user_id":null,"body":"get_size(w, h, d) = 2*(w*d+h*w+h*d), w*h*d\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202094,"user_id":572,"body":"function get_size(w,d,h)\n  2(w*d+d*h+h*w), w*d*h\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202095,"user_id":null,"body":"function get_size(width, height, depth)\n  +(width*height,width*depth,height*depth) * 2, *(width,height,depth)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202096,"user_id":881,"body":"get_size(w, h, d) = (((d + w) * h + d * w) << 1, w * h * d)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202097,"user_id":null,"body":"function get_size(width, height, depth)\n  (2(width*height + height*depth + width*depth), width * height * depth)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202098,"user_id":null,"body":"get_size(l, w, h) = (2(l*w + w*h + l*h), l * w * h)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202099,"user_id":null,"body":"function get_size(width, height, depth)\n    ((width*height + height*depth + depth*width)*2, width*height*depth)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202100,"user_id":null,"body":"get_size(width, height, depth) = (2width*(height + depth) + 2height*depth, width*height*depth)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202101,"user_id":null,"body":"function get_size(width, height, depth)\n  ((width * height + width * depth + height * depth) * 2, width * height * depth)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202102,"user_id":null,"body":"function get_size(width, height, depth)\n  return (2(width*height+depth*height+width*depth),width*depth*height)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56606694ec01347ce800001b":[{"id":202103,"user_id":null,"body":"function is_triangle(a,b,c)\n  arr = [a,b,c]\n  sort!(arr)\n  if arr[1]+arr[2] > arr[3]\n    true\n  else\n    false\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202104,"user_id":null,"body":"function is_triangle(a,b,c)\n  if any(x -> x < 0, (a,b,c))\n    return false\n  end\n  -1 < (a^2 + b^2 - c^2) \/ (2*a*b) < 1\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202105,"user_id":null,"body":"function is_triangle(a,b,c)\n   return ( (a+b)>c && (a+c)>b && (b+c)>a)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202106,"user_id":null,"body":"function is_triangle(a,b,c)\n  a>0 && b>0 && c>0 && a+b>c && a+c>b && b+c>a\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202107,"user_id":null,"body":"function is_triangle(a,b,c)\n   if (a>=0 && b>=0 && c>=0) && (a+b>c) && (a+c>b)&& (b+c>a)\n    true\n    else\n    false\n    \n    end\n  \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202108,"user_id":null,"body":"function is_triangle(a,b,c)\n  edges=[a,b,c]\n  \n  # the largest edge and its index in the edge list \n  m = maximum(edges)\n  idx_m = findall(x->x==m, edges)[1]\n\n  # In a triangle, the sum of the length of \n  # its smaller edges is larger than the largest edge\n  sum(edges[setdiff(1:3, idx_m)]) > m\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202109,"user_id":null,"body":"is_triangle(a,b,c) = a > 0 && b > 0 && c > 0 && a + b > c && a + c > b && b + c > a\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202110,"user_id":null,"body":"function is_triangle(a,b,c)\n  (a + b > c) && (a + c > b) && (b + c > a)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202111,"user_id":null,"body":"function is_triangle(a,b,c)\n   return ((a < b+c) & (b < a+c) & (c < a +b)) ? true : false\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202112,"user_id":null,"body":"is_triangle(a,b,c) = 2max(a, b, c) < a + b + c","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5663f5305102699bad000056":[{"id":202113,"user_id":null,"body":"module Dif\n    export mxdiflg\n\n    function mxdiflg(a1, a2)\n        if isempty(a1) || isempty(a2)\n            return -1\n        end\n        min1, max1 = extrema(length.(a1))\n        min2, max2 = extrema(length.(a2))\n        return max(max1 - min2, max2 - min1)\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202114,"user_id":492,"body":"module Dif\n    export mxdiflg\n\n    function mxdiflg(a1, a2)\n        if a1 == [] || a2 == [] return -1 end\n        l1, l2 = map(length, a1), map(length, a2)\n        max(maximum(l1) - minimum(l2), maximum(l2) - minimum(l1))\n    end\n\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202115,"user_id":572,"body":"module Dif\n    export mxdiflg\n    function mxdiflg(a1, a2)\n      length(a1) == 0 || length(a2) == 0 ? -1 : maximum(abs(length(x) - length(y)) for x in a1 for y in a2)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202116,"user_id":null,"body":"module Dif\n    export mxdiflg\n\n    function mxdiflg(a1, a2)\n        (isempty(a1) || isempty(a2)) && return -1\n        a1MinMax = length.(a1) |> extrema\n        a2MinMax = length.(a2) |> extrema\n        max(abs(a1MinMax[1] - a2MinMax[2]), abs(a1MinMax[2] - a2MinMax[1]))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202117,"user_id":null,"body":"module Dif\n    export mxdiflg\n    function mxdiflg(a1, a2)\n      (a1 == [] || a2 == []) && return -1\n      sort!(a1,by=length)\n      sort!(a2,by=length)\n      x,y = length(a1[end]) - length(a2[1]), length(a2[end]) - length(a1[1])\n      x>y ? x : y\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202118,"user_id":null,"body":"module Dif\n    export mxdiflg\n\n    function mxdiflg(a1, a2)\n        if isempty(a1) || isempty(a2)\n            return -1\n        end\n        maximum(abs.(vec(length.(a1) .- length.(a2)')))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202119,"user_id":null,"body":"module Dif\n    export mxdiflg\n\n    function mxdiflg(a1, a2)\n      if length(a1) == 0 || length(a2) == 0 \n        return -1\n      end\n      a1s = sort(a1, lt=(x, y) -> length(x) > length(y))\n      a2s = sort(a2, lt=(x, y) -> length(x) > length(y))\n      return max(abs(length(a1s[1]) - length(a2s[end])),\n        abs(length(a1s[end]) - length(a2s[1])))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202120,"user_id":null,"body":"module Dif\n    export mxdiflg\n\n    function mxdiflg(a1, a2)\n        if a1 |> isempty || a2 |> isempty\n          return -1\n        end\n\n        (a1_min, a1_max) = extrema(s -> s |> length, a1)\n        (a2_min, a2_max) = extrema(s -> s |> length, a2)\n        max(a2_max - a1_min, a1_max - a2_min)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202121,"user_id":null,"body":"module Dif\n    export mxdiflg\n\n    function mxdiflg(a1, a2)\n        if length(a1)  < 1 | length(a2) < 1 \n            return -1\n        else\n          max =-1\n          for i = 1:length(a1)\n            for j= 1:length(a2)\n              dist = abs(length(a1[i])-length(a2[j]));\n              if dist > max \n                max = dist;\n              end\n            end\n          end\n          return max\n        end\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202122,"user_id":null,"body":"module Dif\n    export mxdiflg\n\n    function mxdiflg(a1, a2)\n        if (length(a1) == 0) | (length(a2) == 0)\n          return -1\n        end\n        l1, l2 = length.(a1), length.(a2)\n        d1, d2 = abs(maximum(l1)-minimum(l2)), abs(maximum(l2)-minimum(l1))\n        max(d2, d1)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"566543703c72200f0b0000c9":[{"id":202123,"user_id":572,"body":"module Disease\n    export epidemic\n\n    function epidemic(tm, n, s0, i0, b, a)\n      imax, dt, t, s, r, i = 0, tm\/n, 0, s0, 0, i0\n      while t < tm\n        sk, ik, rk, = s, i, r\n        s = sk - dt*b*sk*ik\n        i = i + dt*(b*sk*ik-a*ik)\n        r = rk + dt*ik*a\n        if i > imax\n            imax = i\n        end\n        t += dt\n      end\n    return imax\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202124,"user_id":492,"body":"module Disease\n    export epidemic\n\n    function epidemic(tm, n, s0, i0, b, a)\n        dt = tm \/ n; s1 = s0; i1 = i0; r1 = 0; ndx = 0; max = 0\n        while ndx < n\n            s2 = s1 - dt * b * s1 * i1\n            i2 = i1 + dt * (b * s1 * i1 - a * i1)\n            r2 = r1 + dt * i1 * a\n            if i2 > max\n                max = i2\n            end\n            ndx += 1\n            s1, i1, r1 = s2, i2, r2\n        end\n        Int(floor(max))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202125,"user_id":null,"body":"module Disease\n    export epidemic\n\n    function epidemic(tm, n, s0, i0, b, a)\n        S, I, maxi = s0, i0, i0\n        for i in 1:n\n            S, I = S*(1 - tm\/n * b * I), I*(1 + tm\/n * (b * S - a))\n            if trunc(I) > maxi maxi = trunc(I) end\n        end\n        maxi\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202126,"user_id":null,"body":"module Disease\n    export epidemic\n\n    function epidemic(tm, n, s0, i0, b, a)\n        dt = tm\/n\n        S = Float64[s0]\n        I = Float64[i0]\n        R = Float64[0]\n        for k in 1:n\n          s2 = S[end]- dt * b * S[end] * I[end]\n          i2 = I[end] + dt * (b * S[end] * I[end] - a * I[end])\n          r2 = R[end] + dt * I[end] *a\n          push!(S, s2)\n          push!(I, i2)\n          push!(R, r2)\n        end\n        return trunc(Int64, maximum(I))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202127,"user_id":null,"body":"module Disease\n    export epidemic\n\n    function epidemic(tm, n, s0, i0, b, a)\n        sk = s0\n        ik = i0\n        rk = 0\n        maxi = ik\n        dt = tm\/n\n        for t in 1:n\n            sk1 = sk - dt * b * sk * ik\n            ik1 = ik + dt * (b * sk * ik - a * ik)\n            rk1 = rk + dt * ik * a\n            sk = sk1\n            ik = ik1\n            rk = rk1\n            maxi = max(maxi, ik)\n        end\n        return floor(Int, maxi)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202128,"user_id":null,"body":"module Disease\n  export epidemic\n\n  function epidemic(tm, n, s0, i0, b, a)\n    dt = tm \/ n\n    S = Vector{Float64}(undef, n)\n    I = Vector{Float64}(undef, n)\n    R = Vector{Float64}(undef, n)\n    S[1] = s0\n    I[1] = i0\n    R[1] = 0\n    \n    for k in 2:n\n      S[k] = S[k-1] - dt * b * S[k-1] * I[k-1]\n      I[k] = I[k-1] + dt * I[k-1] * (b * S[k-1] - a)\n      R[k] = R[k-1] + dt * I[k-1] * a\n    end\n    return floor(Int, maximum(I))\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202129,"user_id":null,"body":"module Disease\n    export epidemic\n\n    function epidemic(tm, n, s, i, b, a)\n        dt = tm\/n\n        imax = i\n        for _ in 1:n\n            s, i = s - dt * b * s * i, i + dt * (b * s * i - a * i)\n            imax = max(imax,i)\n        end       \n        trunc(Int,imax)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202130,"user_id":1474,"body":"module Disease\n  export epidemic\n\n  function epidemic(tm, n, s0, i0, b, a)\n    dt = tm \/ n\n    s = [convert(Float64, s0)]\n    i = [convert(Float64, i0)]\n    r = [0.0]\n    t = [0.0]\n    k = 1\n    while k < n\n      push!(t, (k+1) * dt)\n      push!(s, s[k] - dt * b * s[k] * i[k])\n      push!(i, i[k] + dt * (b * s[k] * i[k] - a * i[k]))\n      push!(r, r[k] + dt * i[k] * a)\n      k += 1\n    end\n    round(maximum(i))\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202131,"user_id":53,"body":"module Disease\n    export epidemic\n\n    function epidemic(tm, n, s0, i0, b, a)\n        s = s0\n        i = i0\n        r = 0\n        t = 0\n        dt = tm\/n\n        imax = 0\n        while t<tm\n          sd = dt*(-b*s*i)\n          id = dt*(b*s*i-a*i)\n          rd = dt*(a*i)\n          s += sd\n          i += id\n          r += rd\n          t += dt\n          imax = max(imax, floor(Int, i))\n        end\n        return imax;\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202132,"user_id":null,"body":"module Disease\n    export epidemic\n\n    function epidemic(tm::Number, n::Number, s0::Number, i0::Number, b::Number, a::Number)::Int\n        dt::Float64 = tm\/n\n        dta::Float64 = dt * a\n        dtb::Float64 = -dt * b\n        s::Float64 = s0\n        i::Float64 = i0\n        r::Float64 = 0\n        for t::Float64 = 0:dt:tm\n            ds = dtb * s * i\n            dr = dta * i\n            di = -ds -dr\n            if di < 0\n                break\n            end\n            s += ds\n            r += dr\n            i += di\n        end\n        return Int(floor(i))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56662e268c0797cece0000bb":[{"id":202133,"user_id":759,"body":"function sum_fibs(n::Integer)::Integer\n  s = 1\n  f = 0\n  res = 0\n  for i in 0:n\n    iseven(f) && (res += f)\n    f = s + (s = f)\n  end\n  res\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202134,"user_id":null,"body":"function sum_fibs(n::Integer)::Integer\n  s = 0\n  a = 1\n  b = 1\n  for _ = 1:n\n    if iseven(a)\n      s += a\n    end\n    a, b = b, a + b\n  end\n  s\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202135,"user_id":48,"body":"function sum_fibs(n::Integer)::Integer\n  s, a, b = 0, 0, 1\n  while (n -= 1) >= -1\n    s += a % 2 == 0 ? a : 0\n    a, b = b, a + b\n  end\n  s\nend#pure_ruby_code","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202136,"user_id":53,"body":"function sum_fibs(n::Integer)::Integer\n  a = 0\n  b = 1\n  p = 0\n  i = 2\n  while i <= n\n    t = a\n    a = b\n    b = b + t\n    i = i + 1\n    if b % 2 == 0\n      p = p + b\n    end\n  end\n  p\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202137,"user_id":null,"body":"function sum_fibs(n::Integer)::Integer\n    fib, sum_of_all_evens = [0, 1], 0\n    for i in 2:n\n        fib[1], fib[2] = fib[2], fib[1] + fib[2]\n        iseven(fib[2]) && (sum_of_all_evens += fib[2])\n    end\n    sum_of_all_evens\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202138,"user_id":50,"body":"function sum_fibs(n::Integer)::Integer\n  a=0\n  b=1\n  res=0\n  for i in 0:n-1\n    if b%2 == 0\n      res+=b\n    end\n    a,b=b,a+b\n end\n res\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202139,"user_id":null,"body":"function sum_fibs(n::Integer)::Integer\n  fib(n) = reduce((acc, x) -> vcat(acc, acc[x-1]+acc[x-2]), 3:n, init=[1,1])\n  filter(iseven, fib(n)) |> sum\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202140,"user_id":2525,"body":"function sum_fibs(n::Integer)::Integer\n    s = 0\n    (f, g) = (1, 0)\n    for i in 2:n\n        (f, g) = (f+g, f)\n        if f%2==0\n           s += f\n        end\n    end\n    s\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202141,"user_id":null,"body":"function sum_fibs(n::Integer)::Integer\n  fibs = [0, 1]\n  for i in 3:n+1 push!(fibs, fibs[i-1] + fibs[i-2]) end\n  sum(f for f in fibs if iseven(f))\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202142,"user_id":1474,"body":"fibs = [0, 1, 1, 2, 3, 5]\n\nfunction sum_fibs(n::Integer)::Integer\n  while length(fibs) < n+1\n    push!(fibs, fibs[end] + fibs[end-1])\n  end\n  sum([i for i in fibs[1:n+1] if iseven(i)])\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5667e8f4e3f572a8f2000039":[{"id":202143,"user_id":null,"body":"module Mumbling\n    export accum\n    accum(s) = join((titlecase(c ^ i) for (i, c) in enumerate(s)), '-')\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202144,"user_id":null,"body":"module Mumbling\n    export accum\n\n    function accum(s)\n        join([uppercase(char)*lowercase(char)^(pos-1) for (pos,char) in enumerate(s)],'-')\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202145,"user_id":492,"body":"module Mumbling\n    export accum\n\n    function accum(s)\n        a = \"\"\n        for (i, v) in enumerate(s)\n            a *= string(uppercase(v)) * string(lowercase(v)) ^ (i-1) * \"-\"\n        end\n        a[1:end-1]\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202146,"user_id":null,"body":"module Mumbling\n\nexport accum\n\nfunction accum(s)\n    map((c, k) -> titlecase(c^k), lowercase(s), 1:length(s)) |> v -> join(v, \"-\")\nend\n\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202147,"user_id":null,"body":"module Mumbling\nexport accum\n\nfunction accum(s)\n  function repeat_letter(c, k)\n    uppercase(c) * join(repeat([c], k - 1))\n  end\n\n  map(repeat_letter, lowercase(s), 1:length(s)) |>\n  v -> join(v, \"-\")\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202148,"user_id":null,"body":"module Mumbling\n    export accum\nfunction accum(s)\n  out = \"\"\n  for i in eachindex(s)\n    out = string(out, uppercase(s[i]), repeat(lowercase(s[i]),i-1), \"-\")\n  end\n  return chop(out)\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202149,"user_id":null,"body":"module Mumbling\nexport accum\n\nfunction accum(s)\n  join(map((i, c) -> uppercase(c) * lowercase(c)^i, 0:length(s), s), '-')\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202150,"user_id":null,"body":"module Mumbling\n    export accum\n    function accum(s)\n        capture_array = []\n        for (index, ch) in enumerate(s)\n          word = ch^index\n          up_word = titlecase(word)\n          push!(capture_array, up_word)\n         end\n    return join(capture_array, \"-\")\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202151,"user_id":null,"body":"module Mumbling\n    export accum\n\n    function accum(s)\n    s = lowercase(s)\n    arr = []\n    for i = 1:length(s)\n        push!(arr, repeat(s[i], i))\n        arr[i] = uppercasefirst(arr[i])\n    end\n    return join(arr, '-')\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202152,"user_id":null,"body":"# Rewriting my solution. Using 'titlecase' function\nmodule Mumbling\n    export accum\n\n    function accum(s)\n        join( \n          s                     |> \n          enumerate            .|> \n          t -> \"$(t[2])\"^t[1]  .|>\n          titlecase\n          , \n          \"-\"\n        )\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56684677dc75e3de2500002b":[{"id":202153,"user_id":null,"body":"function comfortableword(word::String)::Bool\n  lch = \"qwertasdfgzxcvb\"\n  rch = \"yuiophjklnm\"\n  \n  odds = word[1:2:end]\n  evens = word[2:2:end]\n  \n  all([c \u2208 rch for c in odds]) && all([c \u2208 lch for c in evens]) || all([c \u2208 lch for c in odds]) && all([c \u2208 rch for c in evens])\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202154,"user_id":881,"body":"function comfortableword(word::String)::Bool\n    hands = (\"qwertasdfgzxcvb\", \"yuiophjklnm\")\n    firsthand = Int(occursin(word[1], hands[1]))\n    all(occursin(c, hands[1 + (i + firsthand) % 2]) for (i, c) in Iterators.enumerate(word))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202155,"user_id":1474,"body":"left = \"qwertasdfgzxcvb\"\nright = \"yuiophjklnm\"\n\nfunction comfortableword(word::String)::Bool\n  switch = word[1] in left ? 0 : 1\n  for c in word[2:end]\n    if switch == 0 && c in left\n      return false\n    elseif switch == 1 && c in right\n      return false\n    end\n    switch \u22bb= 1\n  end\n  true\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202156,"user_id":480,"body":"function comfortableword(word::String)::Bool\n  Left= \"q, w, e, r, t, a, s, d, f, g, z, x, c, v, b\"\n  Right= \"y, u, i, o, p, h, j, k, l, n, m\"\n  prev=' '\n  for c in word\n    cur=c in Left ? 'l' : 'r'\n    if cur==prev\n      return false\n    end\n    prev=cur\n  end\n  return true\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202157,"user_id":50,"body":"function in(c::Char)::Bool\n  return occursin(c,\"yuiophjklnm\")\nend\n\nfunction comfortableword(word::String)::Bool\n  w=lowercase(word)\n  a=in(w[1])\n  for c in chop(w,head=1,tail=0)\n    b=in(c)\n    if a==b\n      return false\n    else\n      a=b\n    end\n  end\n  return true\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202158,"user_id":null,"body":"function comfortableword(word::String)::Bool\n    right = ['y', 'u', 'i', 'o', 'p', 'h', 'j', 'k', 'l', 'n', 'm']\n    for i = 2:length(word)\n      if in(right).(word[i-1])[1] + in(right).(word[i])[1] != 1\n        return false\n      end\n    end\n    return true\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"566be96bb3174e155300001b":[{"id":202159,"user_id":492,"body":"module Ball\n    export max_ball\n    function max_ball(v0)\n        Int(round(10*v0\/9.81\/3.6))\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202160,"user_id":null,"body":"module Ball\n    export max_ball\n    function max_ball(v0)\n      round(v0\/3.532)\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202161,"user_id":null,"body":"module Ball\n    export max_ball\n    function max_ball(v0)\n        v0 \/ (0.36 * 9.81) |> round |> Int\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202162,"user_id":null,"body":"module Ball\n    export max_ball\n    function max_ball(v0)\n        g = 9.81\n        t = 0\n        dt = 1\n        t_max = 0\n        h_max = 0.0\n        h = 0.0\n        while h_max \u2264 h\n            h = v0\/3.6*t\/10 - 0.5*g*t*t\/100\n            if h_max < h\n                h_max = h\n                t_max = t\n            end\n            t += dt\n        end\n        return t_max\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202163,"user_id":null,"body":"module Ball\n    export max_ball\n    function max_ball(v0) # in km\/h\n        g = 9.81 # m\/s^2\n        v0 = v0 \/ 3.6 # m\/s\n        height(t) = v0*t - 0.5*g*t^2\n        t_max = 2*v0 \/ g\n        times = 0.1:0.1:t_max # s\n        return argmax(height.(times))\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202164,"user_id":null,"body":"module Ball\n    export max_ball\n    function max_ball(v0)\n      hmax = 0 \n      t = 1\n      while true\n        h = v0*t\/36 - 0.5*9.81*t*t\/100\n        h < hmax && break\n        hmax = h\n        t += 1\n      end \n      t - 1\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202165,"user_id":53,"body":"module Ball\n    export max_ball\n    function max_ball(v0)\n        round(v0 \/ 3.5316)\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202166,"user_id":1474,"body":"module Ball\n  export max_ball\n  function max_ball(v)\n    round(v \/ 3.5316)\n  end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202167,"user_id":null,"body":"module Ball\n    export max_ball\n    function max_ball(v0)\n        # your code\n        v0 \/= 3.6\n        g = 9.81\n        t = 10v0 \/ g\n        t1 = floor(t)\n        t2 = ceil(t)\n        h1 = 0.1v0*t1 - 0.005g * t1^2\n        h2 = 0.1v0*t2 - 0.005g * t2^2\n        h1 > h2 ? t1 : t2\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202168,"user_id":null,"body":"module Ball\n    export max_ball\n    function max_ball(v0)\n        # want to find t where v = 0, then return closest 10th of a second.\n        # Use derivative function of h = v*t - 0.5*g*t*t wrt time\n        # dh\/dt = v - g * t (power rule)\n        # solve for time where dh\/dt = 0.0\n\n        # Negative velocity shortcut to zero\n        if (v0 < 0.0)\n          return 0\n        end\n\n        v_ms = (v0 * 1000) \/ 3600\n        time_zero = v_ms \/ 9.81\n        # divide by tenth of a second to get the index\n        time_index = time_zero \/ 0.1\n        # round, cast to Int\n        return Int(round(time_index))\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"566fc12495810954b1000030":[{"id":202169,"user_id":null,"body":"function nb_dig(n, d)\n    return sum(count(i->i==d, digits(i^2)) for i in 0:n)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202170,"user_id":null,"body":"nb_dig(n, d) = count(string(d),join(\"$(q^2)\" for q in 0:n))","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202171,"user_id":null,"body":"nb_dig(n, d) = sum(count(==(d), digits(i * i)) for i in 0:n)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202172,"user_id":null,"body":"function nb_dig(n, d)\n  count(==(Char(d + 48)), join((0:n) .^ 2))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202173,"user_id":null,"body":"function nb_dig(n, d)\n  return sum([count(string(d),string(x ^ 2)) for x=0:n])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202174,"user_id":null,"body":"function nb_dig(n, d)\n    all_digits = reduce(vcat,[digits(i^2) for i in (0:n)]) \n    count(_ds -> d \u2208 _ds, all_digits)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202175,"user_id":53,"body":"function nb_dig(k, d)\n  m = 0\n  for i in 0:k\n    n = i^2\n    if n == 0 && d == 0\n      m = m+1\n    else\n      while n>0\n        p = n % 10\n        if p == d\n          m = m+1\n        end\n        n = n\u00f710\n      end\n    end\n  end\n  m\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202176,"user_id":null,"body":"function nb_dig(n, d)\n    sum(i-> count(==(d), digits(i^2)), 0:n)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202177,"user_id":null,"body":"function nb_dig(n, d)\n  num = 0;\n   for i in 0:n\n    erg = string(i^2);\n    for j in 1:length(erg)\n      if string(erg[j]) == string(d)\n        num += 1;\n      end\n    end\n  end\n  return num\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202178,"user_id":null,"body":"function nb_dig(n, d)\n    return sum([count(x -> x == d, digits(i^2)) for i in 0:n])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5672a98bdbdd995fad00000f":[{"id":202179,"user_id":null,"body":"function rps(p1, p2)\n  if p1 == p2\n    \"Draw!\"\n  elseif (p1, p2) in [(\"rock\", \"scissors\"), (\"scissors\", \"paper\"), (\"paper\", \"rock\")]\n    \"Player 1 won!\"\n  else\n    \"Player 2 won!\"\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202180,"user_id":null,"body":"function rps(p1, p2)\n    dict = Dict(\"scissors\" => -1, \"rock\" => 0, \"paper\" => 1)\n    res = mod(dict[p2]-dict[p1],3)\n\n    if res == 0\n        return \"Draw!\"\n    elseif res == 1\n        return \"Player 2 won!\"\n    else\n        return \"Player 1 won!\"\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202181,"user_id":null,"body":"function rps(p1, p2)\n  if p1 == \"scissors\" && p2 == \"paper\"\n    return \"Player 1 won!\"\n  end\n  \n  if p2 == \"scissors\" && p1 == \"paper\"\n    return \"Player 2 won!\"\n  end\n  \n  if p1 == \"paper\" && p2 == \"rock\"\n    return \"Player 1 won!\"\n  end\n  \n  if p2 == \"paper\" && p1 == \"rock\"\n    return \"Player 2 won!\"\n  end\n  \n  if p1 == \"rock\" && p2 == \"scissors\"\n    return \"Player 1 won!\"\n  end\n  \n  if p2 == \"rock\" && p1 == \"scissors\"\n    return \"Player 2 won!\"\n  end\n  \n  return \"Draw!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202182,"user_id":null,"body":"function rps(p1, p2)\n  if p1 == p2\n    \"Draw!\"\n  elseif p1 == \"rock\" && p2 == \"scissors\"\n    \"Player 1 won!\"\n  elseif p1 == \"scissors\" && p2 == \"paper\"\n    \"Player 1 won!\"\n  elseif p1 == \"paper\" && p2 == \"rock\"\n    \"Player 1 won!\"\n  else\n    \"Player 2 won!\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202183,"user_id":null,"body":"function rps(p1, p2)\n    if (p1 == p2) return \"Draw!\" end\n    if (p1 == \"scissors\" && p2 == \"paper\") return \"Player 1 won!\" end\n    if (p1 == \"scissors\" && p2 == \"rock\") return \"Player 2 won!\" end\n    if (p1 == \"rock\" && p2 == \"paper\") return \"Player 2 won!\" end\n    if (p1 == \"rock\" && p2 == \"scissors\") return \"Player 1 won!\" end\n    if (p1 == \"paper\" && p2 == \"scissors\") return \"Player 2 won!\" end\n    if (p1 == \"paper\" && p2 == \"rock\") return \"Player 1 won!\" end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202184,"user_id":1474,"body":"scores = Dict(\"paper\" => 1, \"scissors\" => 2, \"rock\" => 3)\n\nfunction rps(p1, p2)\n  ret = scores[p1] - scores[p2]\n  ret == 0 ? \"Draw!\" : abs(ret) == 1 ? \"Player $(ret == 1 ? 1 : 2) won!\" : \"Player $(ret == 2 ? 2 : 1) won!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202185,"user_id":null,"body":"function rps(p1, p2)\n  if beats(p1) == p2\n    \"Player 2 won!\"\n  elseif p1 == p2\n    \"Draw!\"\n  else\n    \"Player 1 won!\"\n  end\nend\n\nfunction beats(candidate)\n  if candidate == \"scissors\"\n    \"rock\"\n  elseif candidate == \"rock\"\n    \"paper\"\n  else\n    \"scissors\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202186,"user_id":null,"body":"function rps(p1, p2)\n  rps_value = Dict(\"rock\"=>0, \"paper\" => 1, \"scissors\" => 2)\n  q1, q2 = rps_value[p1], rps_value[p2]\n  if q1==q2\n    return \"Draw!\"\n  else  \n    if (q1+1)%3 == q2\n      return \"Player 2 won!\"\n    else\n      return \"Player 1 won!\"\n    end\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202187,"user_id":null,"body":"function rps(p1, p2)\n  if p1 == p2\n    return \"Draw!\"\n  end\n  winner = (p1, p2) in [(\"rock\", \"scissors\"), (\"scissors\", \"paper\"), (\"paper\", \"rock\")] ? 1 : 2\n  return \"Player $winner won!\"    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202188,"user_id":null,"body":"function rps(p1, p2)\n  if p1 == p2\n    \"Draw!\"\n  elseif (p1 == \"rock\" && p2 == \"scissors\") || (p1 == \"scissors\" && p2 == \"paper\") || (p1 == \"paper\" && p2 == \"rock\") \n    \"Player 1 won!\"\n  elseif (p1 == \"rock\" && p2 == \"paper\") || (p1 == \"scissors\" && p2 == \"rock\") || (p1 == \"paper\" && p2 == \"scissors\")\n    \"Player 2 won!\"\n  else\n    \"Wrong input\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56747fd5cb988479af000028":[{"id":202189,"user_id":null,"body":"function get_middle(s)\n  l=(length(s)-1)\u00f72\n  s[l+1:end-l]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202190,"user_id":527,"body":"function get_middle(s)\n  s[(length(s) + 1) \u00f7 2 : (length(s) \u00f7 2) + 1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202191,"user_id":null,"body":"function get_middle(s)\n  return length(s) < 3 ? s : get_middle(s[2:length(s) - 1])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202192,"user_id":572,"body":"function get_middle(s)\n  n = length(s)\n  r = fld(n,2)\n  n%2==0 ? s[r:r+1] : s[r+1:r+1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202193,"user_id":null,"body":"function get_middle(s)\n  if length(s) % 2 == 1\n    s[length(s) \u00f7 2 + 1:length(s) \u00f7 2 + 1]\n  else\n    s[length(s) \u00f7 2:length(s) \u00f7 2 + 1]\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202194,"user_id":null,"body":"function get_middle(s)\n  if length(s) > 1\n    return s[div(length(s) + 1, 2) : length(s) - div(length(s) + 1, 2) + 1]\n  else\n    return s\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202195,"user_id":null,"body":"using Statistics\n\n\"\"\"\n    get_middle(s::String)::String\nreturn middle character(s) of a string\n\"\"\"\nfunction get_middle(s)\n  m = median(1:length(s)) # median() \u8fd4\u56de Float\n  s[Int(floor(m)):Int(ceil(m))]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202196,"user_id":null,"body":"function get_middle(s)\n  # code goes here!\n  n = length(s)\nif n % 2 == 0\n  s[(n\u00f72):(n\u00f72+1)]\nelse\n  s[(n\u00f72+1):(n\u00f72+1)]\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202197,"user_id":null,"body":"function get_middle(s)\n  len = length(s)\n  slice = cld(len, 2)\n  if len % 2 != 0\n    return string(s[slice]) \n  else\n    return s[slice:slice+1]\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202198,"user_id":null,"body":"function get_middle(s)\n  isodd(length(s)) ? string(s[div(length(s),2)+1]) : s[div(length(s),2)]*s[div(length(s),2)+1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"567501aec64b81e252000003":[{"id":202199,"user_id":492,"body":"module Paper\n    export wallpaper\n\n    function wallpaper(l, w, h)\n        NUMS = [\n        \"zero\", \"one\", \"two\", \"three\", \"four\",\n        \"five\", \"six\", \"seven\", \"eight\", \"nine\",\n        \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\",\n        \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\",\n        \"twenty\"\n        ]\n        if l == 0 || w == 0 || h == 0 return \"zero\" end\n        NUMS[Int(ceil(2 * (l + w) * h * 1.15 \/ 5.2)) + 1]\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202200,"user_id":53,"body":"module Paper\n    export wallpaper\n\n    function wallpaper(l, w, h)\n        ns = [\n          \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\",\n          \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"]\n        if l * w * h == 0\n          ns[1]\n        else\n          ns[Int(ceil((l + w) * h * 2.3 \/ 5.2)) + 1]\n        end\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202201,"user_id":null,"body":"module Paper\n    export wallpaper\n\n    numbs = Dict(zip(1:20, [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"eleven\",\"twelve\",\n                            \"thirteen\",\"fourteen\",\"fifteen\",\"sixteen\",\"seventeen\",\"eighteen\",\"nineteen\",\"twenty\"]))\n    wallpaper(l, w, h) = any(iszero, [l,w,h]) ? \"zero\" : numbs[Int(ceil(1.15(2h*(l+w)\/5.2)))]\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202202,"user_id":null,"body":"module Paper\n    export wallpaper\n\n    function wallpaper(l, w, h)\n        if l == 0 || w == 0 || h == 0\n          return \"zero\"\n        end\n        area = 2 * (l + w) * h\n        rolls = area * 1.15 \/ (10 * 0.52)\n        numbers = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"]\n        return numbers[trunc(Int, rolls) + 1]\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202203,"user_id":null,"body":"module Paper\n    export wallpaper\n\n    function wallpaper(l, w, h)\n        numbers = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"]\n        l * w * h > 0 ? numbers[ceil(Int, 2(l+w)h*1.15 \/ 0.52 \/ 10) + 1] : numbers[1]\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202204,"user_id":881,"body":"module Paper\nexport wallpaper\n\nnumbers = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"]\n\nfunction wallpaper(l, w, h)\n    if any(iszero, [l, w, h])\n        return \"zero\"\n    end\n    numbers[Int(ceil(h * (l + w) * 23\/\/52))]\nend\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202205,"user_id":null,"body":"module Paper\n    export wallpaper\n\n    numbers = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"]\n    \n    function wallpaper(l, w, h)\n        w * h * l == 0 && return numbers[1]\n        n = 2 * (l + w) * h \/ 5.2\n        n = Int(ceil(1.15n))\n        numbers[n+1]\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202206,"user_id":1474,"body":"module Paper\n  export wallpaper\n\n  function wallpaper(l, w, h)\n    if l * w * h == 0\n      return \"zero\"\n    end\n    words = split(\"one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty\")\n    warea = 2 * (l * h + w * h)\n    parea = 52 * 10 \/ 100\n    preq = warea \/ parea\n    res = preq * 1.15\n    words[convert(Int, ceil(res))]\n  end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202207,"user_id":null,"body":"module Paper\n    export wallpaper\n    numbers = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"]\n\n    function wallpaper(l, w, h)\n        l*w*h == 0 ? numbers[1] : numbers[Int(ceil(2.3(l*h + w*h) \/ 5.2)) + 1]\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202208,"user_id":null,"body":"module Paper\n  export wallpaper\n  function wallpaper(l, w, h)\n    num2words = Dict(1=>\"one\", 2=>\"two\", 3=>\"three\", 4=>\"four\", 5=>\"five\", 6=>\"six\",\n                     7=>\"seven\", 8=>\"eight\", 9=>\"nine\", 10=>\"ten\", 11=>\"eleven\", 12=>\"twelve\",\n                    13=>\"thirteen\", 14=>\"fourteen\", 15=>\"fifteen\", 16=>\"sixteen\",\n                    17=>\"seventeen\", 18=>\"eighteen\", 19=>\"nineteen\", 20=>\"twenty\")\n    (0 in [l,w,h]) ? \"zero\" : num2words[Int(ceil((2*(l*h + w*h) * 1.15) \/ 5.2))]\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5679aa472b8f57fb8c000047":[{"id":202209,"user_id":null,"body":"function find_even_index(arr)\n  for i=1:length(arr)\n    sum(arr[1:i-1]) == sum(arr[i+1:end]) && return i-1\n  end\n  -1\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202210,"user_id":null,"body":"function find_even_index(arr)\n  for i=1:length(arr)\n    sum(arr[1:i-1]) == sum(arr[i+1:end]) && return i-1\n  end\n  -1\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202211,"user_id":527,"body":"find_even_index(arr) = something(findfirst(cumsum(arr) .== reverse(cumsum(reverse(arr)))), -1)","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202212,"user_id":null,"body":"function find_even_index(arr)\n sumsides([], arr)\nend\n\nfunction sumsides(left, right)    \n  if left == []\n      left_sum = 0\n  else\n      left_sum = sum(left)\n  end\n  \n  if right == []\n      return -1\n  elseif left_sum == sum(right[2:end])\n      return length(left)\n  else\n      return sumsides([left;right[1]], right[2:end])-1\n  end\nend\n","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202213,"user_id":null,"body":"function find_even_index(arr)\n  s = sum(arr)\n  comsum = 0\n  for i in 1:length(arr)\n    2comsum + arr[i] == s && return i\n    comsum += arr[i]\n  end\n  return -1\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202214,"user_id":null,"body":"function find_even_index(arr)\n  \n  function move_and_test(left, right, i)\n    if right==left\n      return i\n    end\n    \n    if i==length(arr)\n      return -1\n    end\n\n    i += 1\n    left += arr[i-1]\n    right -= arr[i]\n    return move_and_test(left, right, i)\n  end\n  \n  move_and_test(0, sum(arr)-arr[1], 1)\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202215,"user_id":null,"body":"function find_even_index(arr)\n  ind = -1\n    for i in 1:length(arr)\n        if sum(arr[1:i-1])==sum(arr[i+1:length(arr)])\n             ind = i\n        end\n    end\n  return ind\n  end","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202216,"user_id":null,"body":"\"\"\"\nReturns a non-negative integer as the index of the input array for which holds that\nthe left side of the integer equals the right side of the integer (excluding\nthe integer), if such a sum exists; else it runs -1 for non-existence.\n\n\"\"\"\nfunction find_even_index(arr)\n\n    # initialise with integer for non-existence\n    integer = -1\n\n    # loop over every index in array\n    for i in reverse(range(1, stop=length(arr)))\n        # for each index, check the sums, left and right to it\n        if sum(arr[1:i-1]) == sum(arr[i+1:end])\n            # if true update the latest index for which it is true\n            integer = i\n        end\n    end\n\n    return integer\n\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202217,"user_id":null,"body":"function find_even_index(arr)\n  sumofarr = sum(arr)\n  partialsum = 0\n  for i = firstindex(arr):lastindex(arr)\n    sumofarr -= arr[i]\n    if partialsum == sumofarr\n      return i\n    end\n    partialsum += arr[i]\n  end\n  -1\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202218,"user_id":null,"body":"function find_even_index(arr)\n  n = -1\n  for i = 1: length(arr)\n    if sum(arr[1:i]) == sum(arr[i:length(arr)])\n      n = i\n      break\n    end\n  end\n  return n\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"568d0dd208ee69389d000016":[{"id":202219,"user_id":2723,"body":"module Solution\n  export rental_car_cost\n  \n  rental_car_cost(d) = d < 3 ? 40d :\n                     d < 7 ? 40d-20 : 40d-50\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202220,"user_id":572,"body":"module Solution\n  export rental_car_cost\n  \n  function rental_car_cost(d)\n    d >= 7 ? 40d-50 : d >=3 ? 40d-20 : 40d\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202221,"user_id":null,"body":"module Solution\n  export rental_car_cost\n  \n  function rental_car_cost(d)\n    d >= 7 && return d*40 - 50\n    d >= 3 && return d*40 - 20\n    d*40\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202222,"user_id":null,"body":"module Solution\n  export rental_car_cost\n  \n  function rental_car_cost(d)\n    x = 40\n    if d < 3 \n      d * x\n    elseif d < 7 \n      (x * d) - 20\n    else \n      (x * d) - 50  \n    end\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202223,"user_id":759,"body":"module Solution\n  export rental_car_cost\n  \n  rental_car_cost(d) = 40d - Int(d>6)*30 - Int(d>2)*20\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202224,"user_id":null,"body":"module Solution\n  export rental_car_cost\n  \n  function rental_car_cost(d)\n    if d \u2265 7\n      40*d - 50\n    elseif d \u2265 3\n      40*d - 20\n    else\n      40*d\n    end\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202225,"user_id":null,"body":"module Solution\n  export rental_car_cost\n  \n  function rental_car_cost(d)\n    tot = d*40\n    if d < 3 \n      return tot\n    elseif d >= 3 && d < 7\n      return tot - 20\n    else\n      return tot - 50\n    end\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202226,"user_id":null,"body":"module Solution\n  export rental_car_cost\n  \n  function rental_car_cost(d)\n    if d >= 3 && d < 7\n        return d*40 - 20\n    elseif d >= 7\n        return d*40 - 50\n    elseif d <= 3\n        return d*40\n    end\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202227,"user_id":null,"body":"module Solution\n  export rental_car_cost\n\n  function rental_car_cost(d)\n    d >= 7 ? cost = - 50 : d >= 3 ? cost = -20 : cost = 0\n    for i = 1:d\n      cost += 40\n    end\n    return cost\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202228,"user_id":null,"body":"module Solution\n  export rental_car_cost\n  \n  function rental_car_cost(d)\n    total  = d*40\n    if(d >= 7)\n    total -= 50\n    elseif(d >= 3)\n    total -= 20\n    end\n  return total\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"568dcc3c7f12767a62000038":[{"id":202229,"user_id":527,"body":"function set_alarm(employed, vacation)\n  employed && !vacation\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202230,"user_id":881,"body":"set_alarm(employed, vacation) = employed && !vacation","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202231,"user_id":527,"body":"set_alarm = >","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202232,"user_id":572,"body":"function set_alarm(employed, vacation)\n  employed & !vacation\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202233,"user_id":null,"body":"function set_alarm(e, v)\n  return e - v == 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202234,"user_id":null,"body":"function set_alarm(employed, vacation)\n    employed && !vacation ? true : false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202235,"user_id":null,"body":"function set_alarm(employed, vacation)\n  if employed && !vacation\n    return true\n  else \n    return false\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202236,"user_id":null,"body":"function set_alarm(employed, vacation)\n  (employed == true && vacation == false) ? true : false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202237,"user_id":null,"body":"function set_alarm(e, v)\n  return e&!v\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202238,"user_id":null,"body":"function set_alarm(employed, vacation)\nreturn employed & ~vacation\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"569218bc919ccba77000000b":[{"id":202239,"user_id":null,"body":"module Days\n    export date_nb_days\n    using Dates\n    function date_nb_days(a0, a::Int, p::Int, d=0) :: String\n        a0 \u2265 a ? \"$(Date(2016,1,1) + Day(d))\" : date_nb_days(a0*(1+p\/36000), a, p, d+1)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202240,"user_id":null,"body":"module Days\n    import Dates\n    export date_nb_days\n    function date_nb_days(a0::Int, a::Int, p::Int) :: String\n        return string(Dates.Date(2016,1,1) + Dates.Day(ceil(Int, log(a \/ a0) \/ log(1+p \/ 36000))))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202241,"user_id":1474,"body":"module Days\n  using Dates\n  export date_nb_days\n  function date_nb_days(a0::Int, a::Int, p::Int) :: String\n    date = Date(2016, 1, 1)\n    while a0 < a\n      date += Day(1)\n      a0 += a0 * p \/ 36000\n    end\n    string(date)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202242,"user_id":null,"body":"module Days\n    export date_nb_days\n    using Dates\n    function date_nb_days(a0::Int, a::Int, p::Int) :: String\n        \"$(Date(2016) + Day(ceil(log(1+p\/36000, a\/a0))))\"\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202243,"user_id":492,"body":"module Days\n    using Dates\n    export date_nb_days\n    function date_nb_days(a0::Int, a::Int, p::Int) :: String\n        start = Date(\"2016-01-01\")\n        r = ceil(log(a \/ a0) \/ log(1 + p \/ 36000.0))\n        string(start + Day(r))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202244,"user_id":null,"body":"module Days\n    export date_nb_days\n    function date_nb_days(a0::Int, a::Int, p::Int) :: String\n        Dates.format(Date(2016, 1, 1) + Dates.Day(ceil(log(1+p\/36000, a\/a0))), \"yyyy-mm-dd\")\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202245,"user_id":2525,"body":"module Days\n    export date_nb_days\n    function date_nb_days(a0::Int, a::Int, p::Int) :: String\n        n_days =  ceil(log(a\/a0)\/log(1+p\/36000))\n        string(Date(2016, 1, 1) + Dates.Day(n_days))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202246,"user_id":null,"body":"module Days\n    export date_nb_days\n    function date_nb_days(a0::Int, a::Int, p::Int) :: String\n        days = ceil(Int, log(a \/ a0) \/ log(1.0 + p \/ 36000))\n        return string(Date(2016, 1, 1) + Dates.Day(days))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202247,"user_id":null,"body":"module Days\n    export date_nb_days\n    function date_nb_days(a0::Int, a::Int, p::Int) :: String\n        deposit = a0\n        rate = p\/36000.0\n        days = 0\n        start_date = Date(2016,1,1)\n        while deposit < a\n          deposit += deposit*rate\n          days += 1\n        end\n        end_date = start_date + Dates.Day(days)\n        return(string(end_date))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202248,"user_id":null,"body":"module Days\n    export date_nb_days\n    date_nb_days(a0::Int, a::Int, p::Int) = string(Date(DateTime(2016)+\n    Dates.Day(Int(ceil(log(1+p\/36000,a\/a0))))))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202249,"user_id":759,"body":"module Days\n  export date_nb_days\n  function date_nb_days(a0::Int, a::Int, p::Int) :: String\n    r = (p \/ 36000) + 1\n    repr(Date(2016) + Dates.Day(ceil(log(r, a \/ a0))))\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"569b5cec755dd3534d00000f":[{"id":202250,"user_id":492,"body":"module Benefactor\n    export new_avg\n    function new_avg(arr, newavg) \n        result = (length(arr) + 1) * newavg - sum(arr)\n        result <= 0 ? throw(DomainError(\"\")) : Int(ceil(result))\n    end\nend \n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202251,"user_id":null,"body":"module Benefactor\n    export new_avg\n    function new_avg(arr, newavg) \n        (length(arr)+1)*newavg - sum(arr) < newavg ? throw(DomainError(newavg,\"DomainError: $(arr), $(newavg)\")) : ceil((length(arr)+1)*newavg - sum(arr))\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202252,"user_id":null,"body":"module Benefactor\n    export new_avg\n    function new_avg(arr, newavg) \n        donation = Int(ceil(newavg*(length(arr) + 1) - sum(arr)))\n        donation \u2264 0 ? throw(DomainError(\"\")) : donation\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202253,"user_id":168,"body":"module Benefactor\n    export new_avg\n    function new_avg(arr, newavg) \n      s = (length(arr) + 1) * newavg - sum(arr)\n      s < 0 ? throw(DomainError(arr)) : ceil(s)\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202254,"user_id":null,"body":"module Benefactor\n    export new_avg\n    function new_avg(arr, newavg) \n        donate = (length(arr) + 1) * newavg - sum(arr)\n        donate \u2265 0 ? ceil(Int, donate) : throw(DomainError(\"DomainError: $arr, $newavg\"))\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202255,"user_id":null,"body":"module Benefactor\n    export new_avg\n    function new_avg(arr, newavg) \n      needed = newavg * (length(arr) + 1) - sum(arr)\n      if needed <= 0\n        throw(DomainError(arr))\n      end\n      return ceil(needed)\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202256,"user_id":null,"body":"module Benefactor\n    export new_avg\n    function new_avg(arr, newavg) \n        next_donation = newavg * (length(arr) + 1) - sum(arr)\n        if next_donation < 0\n          throw(DomainError(1))\n        else\n          return ceil(next_donation)\n        end\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202257,"user_id":null,"body":"module Benefactor\n    export new_avg\n    function new_avg(arr, newavg) \n       nplus1 = ceil(newavg*(length(arr)+1)-sum(arr))\n       nplus1 > 0 ? nplus1 : throw(DomainError(nplus1, \"argument must be nonnegative\"))\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202258,"user_id":53,"body":"module Benefactor\n    export new_avg\n    function new_avg(arr, newavg) \n        s = sum(arr)\n        n = length(arr)\n        x = newavg * (n + 1) - s\n        if x < 0\n            throw(DomainError(newavg, \"DomainError\"))\n        else\n            ceil(x)\n        end\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202259,"user_id":1474,"body":"module Benefactor\n    export new_avg\n    function new_avg(arr, newavg) \n        if isempty(arr)\n          newavg\n        else\n          deficit = newavg * (length(arr) + 1) - sum(arr)\n          deficit > 0 ? convert(Int64, ceil(deficit)) : throw(DomainError(\"$(arr), $newavg\"))\n      end\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"569e09850a8e371ab200000b":[{"id":202260,"user_id":421,"body":"function pre_fizz(n::Integer)::Array{Int,1}\n    1:n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202261,"user_id":759,"body":"pre_fizz(n)=collect(1:n)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202262,"user_id":null,"body":"pre_fizz(n::Integer)::Array{Int,1} = [i for i in 1:n]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202263,"user_id":881,"body":"function pre_fizz(n::Integer)::Array{Int,1}\n    [1:n...]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202264,"user_id":null,"body":"function pre_fizz(n::Integer)::Array{Int,1}\n  [1:n;]    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202265,"user_id":null,"body":"function pre_fizz(n::Integer)::Array{Int,1}\n    arr = [i for i in 1:n]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202266,"user_id":null,"body":"function pre_fizz(n::Integer)::Array{Int,1}\n    [i for i in 1:n]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202267,"user_id":null,"body":"pre_fizz(n::Integer)::Array{Int,1} = [q for q in 1:n]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202268,"user_id":null,"body":"pre_fizz(n) = [1:n...]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202269,"user_id":null,"body":"function pre_fizz(n::Integer)::Array{Int,1}\n  [i for i=1:n]  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56a32dd6e4f4748cc3000006":[{"id":202270,"user_id":null,"body":"module Rainfall\n    export mean, variance\n\n    # here \"mean\" is called \"avg\" to avoid a clash of names \n    function mean(town, strng)\n        s = split(strng,'\\n')\n        for line in s\n          if occursin(town,line)\n            tmp = map(q -> parse(Float64,q.match),collect(eachmatch(r\"[\\d]+\\.\\d\",line)))\n            return sum(tmp)\/length(tmp)\n          end\n        end\n        return -1\n    end\n\n    # divide by n = length(array) and not by n - 1\n    function variance(town, strng)\n        s = split(strng,'\\n')\n        for line in s\n          if occursin(town,line)\n            tmp = map(q -> parse(Float64,q.match),collect(eachmatch(r\"[\\d]+\\.\\d\",line)))\n            return sum((tmp .- mean(town,strng)).^2)\/length(tmp)\n          end\n        end\n        return -1\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202271,"user_id":null,"body":"module Rainfall\n\nexport avg, variance\n\nusing Statistics\n\n# here \"mean\" is called \"avg\" to avoid a clash of names \nfunction avg(town::AbstractString, strng::AbstractString)\n    towndata = getdata(town, strng)\n    # Check for missing town data.\n    ismissing(towndata) && return -1\n  \n    mean(towndata)\nend\n\n# divide by n = length(array) and not by n - 1\nfunction variance(town::AbstractString, strng::AbstractString)\n    towndata = getdata(town, strng)\n    # Check for missing town data.\n    ismissing(towndata) && return -1\n  \n    #`Statistics`'s `varm()` divides by n - 1, so we'll have to use our own.\n    # https:\/\/docs.julialang.org\/en\/v1\/stdlib\/Statistics\/#Statistics.varm\n    sum((towndata .- mean(towndata)).^2) \/ (length(towndata))\nend\n\nfunction getdata(town::AbstractString, strng::AbstractString)\n    # Turn the data into an array of towns.\n    towndata = split(strng, '\n')\n    # In that array, find the town given.\n    townindex = findfirst(startswith(town), towndata)\n    \n    # If that town has no data, return `missing`.\n    isnothing(townindex) && return missing\n  \n    towndata = towndata[townindex]\n  \n    # Remove the town name from the data, followed by a colon.\n    towndata = split(towndata, ':')[end]\n    # Split the town data into months.\n    towndata = split(towndata, ',')\n    # Remove the month names from the town data\n    # and convert the numbers from strings to floats.\n    towndata = map(x -> parse(Float64, split(x)[end]), towndata)\n  \n    # `towndata` is now a `Vector` of `Float64`s.\n    towndata\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202272,"user_id":null,"body":"module Rainfall\n    export avg, variance\n\n    using Statistics\n    \n    function readData(town, strng)\n      data = split(strng, '\n')\n      for d in data\n        if startswith(d, town*\":\")\n          return parse.(Float64, [e.match for e in eachmatch(r\"\\d+\\.\\d+\", d)])\n        end \n      end\n      return nothing\n    end\n      \n    # here \"mean\" is called \"avg\" to avoid a clash of names \n    function avg(town, strng)\n        m = readData(town, strng)\n        if isnothing(m)\n          return -1\n        else\n          return mean(m)\n        end\n    end\n\n    # divide by n = length(array) and not by n - 1\n    function variance(town, strng)\n        m = readData(town, strng)\n        if isnothing(m)\n          return -1\n        else\n          return var(m)*11\/12\n        end\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202273,"user_id":null,"body":"module Rainfall\n    export avg, variance\n    using Statistics\n\n    function avg(town, strng)\n        occursin(town*\":\", strng) && strng != \"\" ? mean(values(town, strng)) : -1\n    end\n\n    function variance(town, strng)\n        occursin(town*\":\", strng) && strng != \"\" ? var(values(town, strng), corrected=false) : -1\n    end\n\n    function values(town, strng)\n        [parse(Float64, m.match) for m in eachmatch(r\"\\d+\\.\\d+\", match(Regex(town*\":.+(\n|)\"), strng).match)]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202274,"user_id":null,"body":"module Rainfall\n    export avg, variance\n    using Statistics\n\n    function avg(town, strng)\n        println(strng)\n        occursin(town*\":\", strng) && strng != \"\" ? mean(values(town, strng)) : -1\n    end\n\n    function variance(town, strng)\n        occursin(town*\":\", strng) && strng != \"\" ? var(values(town, strng), corrected=false) : -1\n    end\n\n    function values(town, strng)\n        [parse(Float64, m.match) for m in eachmatch(r\"\\d+\\.\\d+\", match(Regex(town*\":.+\n\"),strng).match)]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202275,"user_id":null,"body":"module Rainfall\n    export avg, variance\n\n    # here \"mean\" is called \"avg\" to avoid a clash of names \n    function avg(town, strng)\n        dat=(format_record(find_record(town,strng)))\n        return sum(dat)\/length(dat)\n    end\n\n    # divide by n = length(array) and not by n - 1\n    function variance(town, strng)\n      mn=avg(town,strng)\n      dat=format_record(find_record(town,strng))\n      if dat==-1 \n        return -1\n      end\n      return sum((dat.-mn).^2)\/length(dat)\n    end\n    function find_record(town,strng)\n      splitted=split(strng,['\n',':'])\n      n=1\n      while n<=length(splitted)\n        if splitted[n]==town\n          return splitted[n+1]\n        end\n        n=n+2\n      end\n      return nothing\n    end\n\n    format_record(rec) = map(x->parse(Float64,x),split(rec,[' ',','])[2:2:end])\n    format_record(rec::Nothing)= -1\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202276,"user_id":null,"body":"module Rainfall\n    export avg, variance\n\n\n    function getData(s)\n      lines = split(s, \"\n\")\n      d = Dict{String, Array}()\n      for r in lines\n        j = findfirst(\":\", r)[1]\n        town = r[1:j-1]\n        rest = split(r[j+1:end], \",\")\n        nums = [parse(Float64, x[2]) for x in [split(y, \" \") for y in rest]]\n        d[town] = nums\n      end\n      return d\n    end\n\n    # here \"mean\" is called \"avg\" to avoid a clash of names \n    function avg(town, strng)\n        d = getData(strng)\n        if !(haskey(d, town)) return -1 end\n        return sum(d[town])\/length(d[town])\n    end\n\n    # divide by n = length(array) and not by n - 1\n    function variance(town, strng)\n        d = getData(strng)\n        if !(haskey(d, town)) return -1 end\n        a = d[town]\n        mu = sum(a)\/length(a)\n        return sum((x-mu)^2 for x in a)\/length(a)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202277,"user_id":null,"body":"module Rainfall\n    export avg, variance\n    using Statistics\n\n    # here \"mean\" is called \"avg\" to avoid a clash of names \n    function avg(town, strng)\n        data = extract(town, strng)\n        if data == -1\n            return -1\n        else\n            return mean(data)\n        end\n    end\n\n    # divide by n = length(array) and not by n - 1\n    function variance(town, strng)\n        data = extract(town, strng)\n        if data == -1\n            return -1\n        else\n            mn = mean(data)\n            return sum((data .- mn).^2)\/length(data)\n        end\n    end\n\n\n    function extract(town, strng)\n        data = split(strng, \"\n\")\n        for d0 in data\n            if occursin(town*\":\", d0)\n                return [parse(Float64, split(dp, \" \")[2]) for dp in split(d0, \",\")]\n            end\n        end\n        return -1\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202278,"user_id":null,"body":"module Rainfall\n    export avg, variance\n\n    function extract(town, strng)\n      v = []\n      for l in split(strng, \"\n\")\n        if l[1:length(town)] == town\n          for w in split(l[length(town)+2:end], (',', ' '))\n            if w[1] |> isdigit\n              push!(v, parse(Float64, w))\n            end\n          end\n        end\n      end\n      return v\n    end\n        \n\n    # here \"mean\" is called \"avg\" to avoid a clash of names \n    function avg(town, strng)\n        v = extract(town, strng)\n        v == [] ? -1 : sum(v)\/length(v)\n    end\n\n    # divide by n = length(array) and not by n - 1\n    function variance(town, strng)\n        a = avg(town, strng)\n        v = extract(town, strng)\n        v == [] ? -1 : sum((v.-a).^2)\/length(v)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202279,"user_id":null,"body":"module Rainfall\n    export avg, variance\n\n    # here \"mean\" is called \"avg\" to avoid a clash of names \n    function avg(town, strng)\n      # your code\n      if strng == \"\" return -1 end\n      city = [split(t,\":\")[2] for t in split(strng, \"\n\") if split(t,\":\")[1] == town]\n      \n      \n  \n      if city != []\n        city = filter(x -> x != nothing, city)[1]\n      else\n        return -1.0\n      end \n  \n      prom = sum([parse(Float64, split(m, \" \")[2]) for m in split(city, \",\")])\/12\n      \n      if prom == 0\n        return -1\n      else\n        return prom\n      end\n    end\n\n\n    # divide by n = length(array) and not by n - 1\n    function variance(town, strng)\n        # your code\n      if strng == \"\" return -1 end\n      city = [split(t,\":\")[2] for t in split(strng, \"\n\") if split(t,\":\")[1] == town]\n  \n      if city != []\n        city = filter(x -> x != nothing, city)[1]\n      else\n        return -1.0\n      end\n  \n  \n      vals = [parse(Float64, split(m, \" \")[2]) for m in split(city, \",\")]\n      prom = avg(town, strng)\n      \n      \n      if vals == []\n        return -1.0\n      else\n        return sum([(v-prom)^2 for v in vals])\/12\n      end\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56a4872cbb65f3a610000026":[{"id":202280,"user_id":492,"body":"module Rot\n    export max_rot\n\n    function max_rot(n)\n        nn = BigInt(n)\n        s, arr = string(nn), [nn]\n        for i in 1:length(s)\n            s = s[1:i-1] * s[i+1:end] * string(s[i])\n            push!(arr, parse(BigInt,s))\n        end\n        maximum(arr)\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202281,"user_id":null,"body":"module Rot\n    export max_rot\n\n    # n can be big\n    function max_rot(n)\n        dgts = digits(n)\n        max = BigInt(n)\n        lngth  = length(dgts)\n        for i in lngth:-1:2\n            digit = dgts[i]\n            dgts[2:i] = dgts[1:i-1]\n            dgts[1] = digit\n            new = sum([dgts[k] * BigInt(10)^(k-1) for k=1:lngth])\n            new > max && (max = new)\n        end\n        return max\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202282,"user_id":null,"body":"module Rot\n    export max_rot\n\n    # n can be big\n    function max_rot(n)\n        \n        d = digits(n)\n\n        tmp = circshift(d,1)\n        res = copy(d)\n        \n        if isless(reverse(res),reverse(tmp))\n        res = copy(tmp)\n        end\n        \n        for p in 1 : length(tmp)-2\n          tmp[1:end-p] = circshift(tmp[1:end-p],1)\n\n          if isless(reverse(res),reverse(tmp))\n            res = copy(tmp)\n          end\n        end\n        \n        return parse(BigInt,join(string.(reverse(res))))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202283,"user_id":null,"body":"module Rot\n    export max_rot\n\n    function max_rot(n)\n        nstr, maxi = collect(string(n)), string(n)\n        for i in eachindex(nstr)\n            nstr = vcat(nstr[1:i-1], circshift(nstr[i:end], -1))\n            maxi < join(nstr) && (maxi = join(nstr))\n        end\n        parse(BigInt, maxi)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202284,"user_id":null,"body":"module Rot\n    export max_rot\n\n    # n can be big\n    function max_rot(n)\n        ndigits = n |> digits |> reverse\n        maxn = n\n        if length(ndigits) < 2\n            return n\n        end\n  \n        for rotation in 0:length(ndigits)-2\n            ndigits = vcat(ndigits[1:rotation], circshift(ndigits[rotation+1:end], -1))\n            maxn = max(maxn, parse(Int128, join(ndigits)))\n        end\n        return maxn\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202285,"user_id":null,"body":"module Rot\nexport max_rot\nfunction max_rot(n)\n  n = string(n)\n  rotations = [n]\n  for i = 1:length(n)\n    n = n[1:i - 1] * n[i + 1:end] * n[i]\n    push!(rotations, n)\n  end\n  parse(BigInt, maximum(rotations))\nend\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202286,"user_id":881,"body":"module Rot\nexport max_rot\n\nfromdigits(ds) = foldl((a, c) -> 10a + c, ds, init=big(0))\n\nfunction max_rot(n)\n    ds = reverse(digits(n))\n    maxi = n\n    for i in 1:length(ds)\n        ds = [ds[1:i-1]; circshift(ds[i:end], -1)]\n        maxi = max(maxi, fromdigits(ds))\n    end\n    maxi\nend\n\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202287,"user_id":1474,"body":"module Rot\n  export max_rot\n\n  function max_rot(n)\n    stg = string(n)\n    l = length(stg) - 2\n    max = n\n    acc = stg[2:end] * stg[1]\n    for i in 2:l\n      tmp = parse(BigInt, acc)\n      if max < tmp\n        max = tmp\n      end\n      acc = acc[1:i-1] * acc[i+1:end] * acc[i]\n    end\n    max\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202288,"user_id":null,"body":"module Rot\n    export max_rot\n\n    # n can be big\n    function max_rot(n)\n        s = string(n)\n        res = [s]\n        for i in 1:length(s)\n            push!(res, res[i] |> s->s[1:i-1]*s[i+1:end]*s[i])\n        end\n        parse(BigInt, maximum(res))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202289,"user_id":null,"body":"module Rot\n  export max_rot\n  function max_rot(n)\n    sn, arr = string(n), [n]\n    for i in 1:length(sn)-1\n      sn = string(sn[1:i-1], sn[i+1:length(sn)], sn[i])\n      push!(arr, parse(BigInt, sn))\n    end\n    maximum(arr)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56a5d994ac971f1ac500003e":[{"id":202290,"user_id":2525,"body":"module Kata\n    export longest_consec\n    function longest_consec(strarr::Array{String}, k::Int)::String\n        if length(strarr)==0 return \"\" end\n        if k>length(strarr)  return \"\" end\n        if k<=0              return \"\" end\n\n        all_consec = [ join(strarr[i:i+k-1]) for i in 1:length(strarr)-k+1 ]\n        \n        all_consec[findmax(map(length, all_consec))[2]]\n   end\nend ","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202291,"user_id":null,"body":"module Kata\n    export longest_consec\n    function longest_consec(strarr::Array{String}, k::Int)::String\n    \n      if (length(strarr)==0) || k>length(strarr) || k<=0\n        return \"\"\n      end\n      \n      sumT = cumsum(length.(strarr))\n      convolution = sumT[k:end] - [0; sumT[1:end - k]]\n      m, i = findmax(convolution)\n      \n      return reduce(*, strarr[i:k + i - 1])\n   end\nend ","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202292,"user_id":null,"body":"module Kata\n    export longest_consec\n\n    function longest_consec(strarr, k)\n        if !(1 <= k <= length(strarr))\n            return \"\"\n        end\n        lengths = [0; cumsum(length.(strarr))]\n        rolling_sums = lengths[k+1:end] .- lengths[1:end-k]\n        i = argmax(rolling_sums)\n        return join(strarr[i:i+k-1])\n    end\nend ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202293,"user_id":492,"body":"module Kata\n    export longest_consec\n    function longest_consec(strarr::Array{String}, k::Int)::String\n      lg = length(strarr)\n      if lg == 0 || k > lg || k <= 0 return \"\" end\n      result = \"\" \n      for index = 1:lg - k + 1\n        s = join(strarr[index:index + k - 1])\n        if length(s) > length(result)\n          result = s\n        end\n      end\n      result\n   end\nend \n\n","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202294,"user_id":null,"body":"module Kata\n    export longest_consec\n    function longest_consec(strarr::Array{String}, k::Int)::String\n      0 < k <= length(strarr) ? nothing : return \"\"\n      concat_strs = [join(strarr[i:i+k-1]) for i in 1:length(strarr)-k+1]\n      concat_strs[findmax(map(length, concat_strs))[2]]\n   end\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202295,"user_id":null,"body":"module Kata\n    export longest_consec\nfunction longest_consec(str_vec::Array{String}, k::Int)::String\n    n = length(str_vec)\n    (n == 0 || k > n || k \u2264 0) && return \"\"\n\n    consec_vec = [join(str_vec[i:i+k-1]) for i \u2208 1:(n-k+1)]\n    consec_vec[findmax(consec_vec .|> length)[2]]\nend\nend ","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202296,"user_id":null,"body":"module Kata\n    export longest_consec\n    function longest_consec(strarr::Array{String}, k::Int)::String\n        str = \"\"\n        max_l = 0\n        for i in range(1, stop = length(strarr))\n            if i + k - 1 > length(strarr)\n                break\n            end\n\n            substr = join(strarr[i:i + k - 1])\n            l = length(substr)\n            if l > max_l\n                max_l = l\n                str = substr\n            end\n        end\n\n        return str\n    end\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202297,"user_id":null,"body":"module Kata\n    export longest_consec\n    function longest_consec(strarr::Array{String}, k::Int)::String\n      longest_s = \"\"\n      for ix in 1:length(strarr)-k+1\n        s = \"\"\n        for offset in 0:k-1\n          s *= strarr[ix+offset]\n        end\n        if length(s)> length(longest_s)\n          longest_s = s\n        end\n  \n      end\n    longest_s\n    end\n\nend ","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202298,"user_id":null,"body":"module Kata\n    export longest_consec\n    function longest_consec(strarr::Array{String}, k::Int)::String\n      if length(strarr) < k || length(strarr) == 0\n           \"\"\n      else\n      concat = [join(strarr[i:i+k-1]) for i in 1:(length(strarr)-k+1)]\n      filter(x -> length(x) == maximum(map(x -> length(x), concat)), concat)[1]\n      end\n      \n   end\nend ","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202299,"user_id":null,"body":"module Kata\n    export longest_consec\n    function longest_consec(strarr::Array{String}, k::Int)::String\n        if length(strarr) == 0 || k > length(strarr) || k <= 0\n            \"\"\n        else\n            println(\"hello\")\n            concats = [join(strarr[i:min(i+k-1, end)]) for i = 1:length(strarr)]\n            concats[findmax(map(length, concats))[2]]\n        end\n   end\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56af1a20509ce5b9b000001e":[{"id":202300,"user_id":null,"body":"module Travel\n    export travel\n\n    function travel(r, zipcode)\n        info = zipcode == \"\" ? [] : [strip.(m.captures) for m in eachmatch(Regex(\"(\\\\d+)([\\\\w\\\\.\\\\s]*)\"*zipcode*\"(?:,+|\\\\Z)\"), r)]\n        zipcode * \":\" * (isempty(info) ? \"\/\" : join(reverse([join(cap, \",\") for cap in zip(info...)]), \"\/\"))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202301,"user_id":2525,"body":"module Travel\n    export travel\n\n    function travel(r, zipcode)\n        if zipcode == \"\"\n            return \":\/\"\n        end\n        loc = split(r, \",\")\n        iti1 = [ strip(join(split(replace(l, zipcode=>\"\"))[2:end], \" \")) for l in loc if occursin(Regex(zipcode*\"\\\\Z\") , l) ] \n        iti2 = [ strip(split(replace(l, zipcode=>\"\"))[1]) for l in loc if occursin(Regex(zipcode*\"\\\\Z\"), l) ] \n        zipcode*\":\"*join(iti1, \",\")*\"\/\"*join(iti2, \",\")\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202302,"user_id":null,"body":"module Travel\n    export travel\n\n    function travel(r, target_code)\n    address_out = []\n    number_out = []\n      for s in split(r,\",\")\n        address_components = split(s)\n        zipcode = join(address_components[length(address_components)-1:length(address_components)],\" \")\n        if zipcode == target_code\n          push!(number_out,address_components[1])\n          push!(address_out,join(address_components[2:length(address_components)-2],\" \"))\n        end\n      end\n      string(target_code,\":\",join(address_out,\",\"),\"\/\",join(number_out,\",\"))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202303,"user_id":null,"body":"module Travel\n    export travel\n\n    function travel(r, zipcode)\n        streets = []\n        numbers = []\n        if !isempty(zipcode) && match(r\"^\\w{2} \\d{5}$\", zipcode) != nothing\n          addresses = filter(addr -> occursin(zipcode, addr), split(r, \",\"))\n          for address in addresses\n            m = match(r\"^\\s?(\\d+) (.+) \\w{2} \\d{5}$\", address)\n            if m != nothing\n              push!(streets, m.captures[2])\n              push!(numbers, m.captures[1])\n            end\n          end\n        end\n        zipcode * \":\" * join(streets, \",\") * \"\/\" * join(numbers, \",\")\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202304,"user_id":null,"body":"module Travel\n    export travel\n\n    function travel(r, zipcode)\n        addr_list = split(r, ',')\n        filter!(x->match(Regex(zipcode*\"\\$\"), x)!=nothing, addr_list)\n        (length(addr_list) == 0 || length(zipcode) == 0) && return \"$zipcode:\/\"\n        addr_str = \"\"\n        num_str = \"\"\n        for addr in addr_list\n            m = match(Regex(\"^ *(\\\\d+) *(.+)( \"*zipcode*\")\"), addr)\n            addr_str *= \",\"*m.captures[2]\n            num_str *= \",\"*m.captures[1]\n        end\n        \"$zipcode:$(addr_str[2:end])\/$(num_str[2:end])\"\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202305,"user_id":null,"body":"module Travel\n  export travel\n  function travel(r, zipcode)\n    ismatch(r\"^\\s*$\", zipcode) && return \":\/\"\n    street, house = [], []\n    for addr in split(r, \",\")\n      !endswith(addr, zipcode) && continue\n      arr = split(addr)\n      push!(street, join(arr[2:end-2], \" \"))\n      push!(house, arr[1])\n    end\n    string(\"$(zipcode):\", join(street, \",\"), \"\/\", join(house, \",\"))\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202306,"user_id":null,"body":"module Travel\n    export travel\n    \n    function parse(addr::AbstractString)\n        m = match(r\"^\\s*(\\d+)\\s+(.*)\\s+([A-Z]{2}\\s+\\d{5})\\s*$\", addr)\n        if m === nothing\n            return missing\n        end\n        m.captures\n    end\n    \n    function build_dict(addrs::AbstractArray)\n        d = Dict()\n        for addr in addrs\n            housenum, middle, zipcode = addr[1], addr[2], addr[3]\n            if !haskey(d, zipcode)\n                push!(d, zipcode => \"$zipcode:$middle\/$housenum\")\n            else\n                curval = d[zipcode]\n                head, tail = split(curval, \"\/\")\n                push!(d, zipcode => \"$head,$middle\/$tail,$housenum\")\n            end\n        end\n        d\n    end\n\n    function travel(r, zipcode)\n        addrs = map(parse, split(r, \",\"))\n        dict = build_dict(addrs)\n        get(dict, zipcode, \"$zipcode:\/\")\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202307,"user_id":null,"body":"module Travel\n    export travel\n\n    function travel(r, zipcode)\n        arr = split(r,\",\")\n        street = []\n        house = []\n        for el in arr\n          if el[end-7:end]==zipcode\n            add = split(strip(el),\" \")\n            push!(house,add[1])\n            push!(street,join(add[2:end-2],\" \"))\n          end\n        end\n        return string(zipcode,\":\",join(street,\",\"),\"\/\",join(house,\",\"))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202308,"user_id":null,"body":"module Travel\n    export travel\n\n    function travel(r, zipcode)\n      a = strip.(split(r,\",\"))\n      h = 1\n      strST = Array{String,1}()\n      strHN = Array{String,1}()\n      for i=1:length(a)\n          if zipcode == a[i][end-7:end]\n              sn = match(r\"\\d+\",a[i]).match\n              push!(strST, strip(split(a[i], r\"(^\\d+|[A-Z]{2}\\s\\d{5})\")[2]))\n              push!(strHN, sn)\n              h += 1\n          end\n      end\n      return string(zipcode, \":\", join(strST,\",\"), \"\/\", join(strHN,\",\"))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202309,"user_id":null,"body":"module Travel\n    export travel\n\n    using Base.Iterators\n\n    function splitaddress(address)\n      tokens = split(strip(address), ' ')\n      zipcode = join(tokens[end-1:end], \" \")\n      street = join(tokens[2:end-2], \" \")\n      streetnum = tokens[1]\n      return (zipcode, street, streetnum)\n    end\n    \n    function travel(r, zipcode)\n        addresses = splitaddress.(split(r, ','))       \n        matching = [(street, streetnum) for (z, street, streetnum) in addresses if z == zipcode]\n        if isempty(matching)\n          return \"$zipcode:\/\"\n        else\n          results = reduce(((acc, x) -> (acc[1]*\",\"*x[1], acc[2]*\",\"*x[2])), matching)\n          return \"$zipcode:$(results[1])\/$(results[2])\"\n        end\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56b1f01c247c01db92000076":[{"id":202310,"user_id":null,"body":"function double_char(str)\n  join(c*c for c in str)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202311,"user_id":168,"body":"function double_char(str)\n  join([\"$x$x\" for x in str])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202312,"user_id":1474,"body":"function double_char(str)\n  join(\"$c$c\" for c in str)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202313,"user_id":1474,"body":"function double_char(str)\n  join([\"$c$c\" for c in str])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202314,"user_id":null,"body":"double_char(str) = join(map(x -> x*x, collect(str)))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202315,"user_id":881,"body":"double_char(str) = join(collect(str) .^ 2)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202316,"user_id":null,"body":"function double_char(str)\n  result = \"\"\n  for ch in str\n    result *= ch*ch\n  end\n  return result\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202317,"user_id":null,"body":"function double_char(str)\n    ans = \"\"\n    for s in str\n        ans = string(ans, s, s)\n    end\n    return ans\n  end","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202318,"user_id":null,"body":"function double_char(str)\n  return join([repeat(x, 2) for x in str], \"\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202319,"user_id":null,"body":"double_char(str) = zip(str, str) .|> join |> join","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56b22765e1007b79f2000079":[{"id":202320,"user_id":null,"body":"is_narcissistic(n::Integer) = n == sum(digits(n) .^ ndigits(n))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202321,"user_id":1474,"body":"function is_narcissistic(n::Integer)\n  s = string(n)\n  p = length(s)\n  n == sum(parse(Int, c) ^ p for c in s)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202322,"user_id":null,"body":"function is_narcissistic(n::Int)\n    dig = digits(n)\n    sum(dig .^ length(dig)) == n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202323,"user_id":null,"body":"function is_narcissistic(n::Int)\n    dig = n |> digits |> reverse\n    sum(dig .^ length(dig)) == n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202324,"user_id":null,"body":"function is_narcissistic(n::Integer)\n    n == sum(digits(n).^length(digits(n)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202325,"user_id":168,"body":"function is_narcissistic(n::Integer)\n  k = length(digits(n))\n  sum(d ^ k for d in digits(n)) == n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202326,"user_id":null,"body":"function is_narcissistic(n::Integer)\n  sum = 0\n  temp = n\n  len = 1\n  while temp >= 10\n    len += 1\n    temp \/= 10\n  end\n  temp = n\n  i = len\n  while i > 0\n    current_pow = 10 ^ (i - 1)\n    current = trunc(Int, temp \/ current_pow)\n    temp %= current_pow\n    sum += current ^ len\n    i -= 1\n  end\n  if sum == n\n    return true\n  end\n  return false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202327,"user_id":null,"body":"function is_narcissistic(n::Integer)\n    original_value = n\n    sum = 0\n    l = length(string(n))\n    while n > 0\n        digit = n % 10\n        n = n \u00f7 10\n        sum += digit ^ l\n    end\n    return sum == original_value\nend\n\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202328,"user_id":527,"body":"function is_narcissistic(n::Integer)::Bool\n  ds = digits(n)\n  sum(d -> d ^ length(ds), ds) == n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202329,"user_id":50,"body":"function is_narcissistic(n::Integer)\n  l = length(string(n))\n  o = 0\n  m = n\n  while n != 0\n    o += (n %10) ^ l\n    n = floor(n\/10)\n  end\n  m == o\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56b29582461215098d00000f":[{"id":202330,"user_id":881,"body":"function pipe_fix(numbers::Vector{Int64})::Vector{Int64}\n  start, stop = extrema(numbers)\n  [range(start, stop=stop, step=1)...]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202331,"user_id":null,"body":"pipe_fix(numbers::Vector{Int64})::Vector{Int64} = [minimum(numbers):1:maximum(numbers);]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202332,"user_id":null,"body":"function pipe_fix(numbers::Vector{Int64})::Vector{Int64}\n  min = minimum(numbers)\n  max = maximum(numbers)\n  return min:max\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202333,"user_id":null,"body":"function pipe_fix(numbers::Vector{Int64})::Vector{Int64}\n    minval = minimum(numbers)\n    maxval = maximum(numbers)\n    V = Vector{Int64}() \n    for i in minval:maxval\n        append!(V, i)\n    end\n    return V\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202334,"user_id":null,"body":"pipe_fix(n) = first(sort!(n)):last(n)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202335,"user_id":null,"body":"function pipe_fix(numbers::Vector{Int64})::Vector{Int64}\n  min(numbers...):max(numbers...)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202336,"user_id":null,"body":"function pipe_fix(numbers::Vector{Int64})::Vector{Int64}\n  min,max = extrema(numbers)\n  return range(min, stop=max)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202337,"user_id":null,"body":"function pipe_fix(numbers::Vector{Int64})::Vector{Int64}\n  \n  return [n for n in minimum(numbers):maximum(numbers)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202338,"user_id":null,"body":"pipe_fix(numbers::Vector{Int64})::Vector{Int64} = sort(numbers)[1]:sort(numbers)[end]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202339,"user_id":null,"body":"function pipe_fix(numbers::Vector{Int64})::Vector{Int64}\n  min,max = extrema(numbers)\n  range(min, stop=max)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56b5afb4ed1f6d5fb0000991":[{"id":202340,"user_id":null,"body":"module RevRot\n    export revrot\n\n    function revrot(str, size)\n        if size <= 0\n            return \"\"\n        end\n        chunks = [str[size*i+1:size*(i+1)] for i in 0:length(str)\u00f7size-1]\n        for (i, chunk) in enumerate(chunks)\n            if iseven(sum(map(Int, collect(chunk))))\n                chunks[i] = reverse(chunk)\n            else\n                chunks[i] = join(circshift(collect(chunk), -1))\n            end\n        end\n        return join(chunks)\n    end\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202341,"user_id":null,"body":"module RevRot\n    export revrot\n\n    function revrot(s, n, res=\"\")\n       if n<=0 || isempty(s)\n          res = \"\"\n       else\n           for to in n:n:length(s)\n              from = to-n+1\n              res *= (count(s[i] in \"13579\" for i in from:to) % 2 == 0) ? s[to:-1:from] : s[from+1:to]*s[from:from]\n           end\n       end\n       return res\n    end\n\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202342,"user_id":null,"body":"module RevRot\n    export revrot\n\n    function revrot(s, n, res=\"\")\n        if s == \"\" || n <= 0 || n > length(s) return \"\" end\n        f(r) = sum(map(x -> parse(Int,x) % 2 == 1, collect(r))) % 2 == 0 ? reverse(r) : r[2:end] * r[1]\n        join(map(f, [s[(i-1)*n + 1: n*i] for i in 1: (length(s) \u00f7 n)]))\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202343,"user_id":null,"body":"module RevRot\n    export revrot\n\n    function revrot(s, n, res=\"\")\n        n == 0 && return \"\"\n        cubey(x) = sum(digits(parse(Int,x)).^3) % 2 == 0\n        join([cubey(m.match) ? reverse(m.match) : m.match[2:end]*m.match[1] for m in eachmatch(Regex(\"\\\\d{$(n)}\"), s)])\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202344,"user_id":null,"body":"module RevRot\n    export revrot\n\n    function revrot(s, n, res=\"\")\n        # your code\n        if s == nothing || length(s) == 0 || n <= 0 || length(s) < n\n            return \"\"\n        end\n        \n        if s[1:n] |> x -> parse(Int, x) |> digits |> sum |> iseven\n            reverse(s[1:n]) * revrot(s[n+1:end], n, res)\n        else\n            \"$(s[2:n])$(s[1])\" * revrot(s[n+1:end], n, res)\n        end\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202345,"user_id":null,"body":"module RevRot\n    export revrot\n\n    function revrot(s, n, res=\"\")\n        n > 0 && s != \"\" || return \"\"\n        s_digits = parse.(Int, split(s, \"\"))\n        result = []\n        while size(s_digits, 1) >= n\n            part = s_digits[1:n]\n            if sum(d^3 for d in part) % 2 == 0\n                push!(result, join(reverse(part)))\n            else\n                push!(result, join(append!(part[2:end], part[1])))\n            end\n            s_digits = s_digits[n+1:end]\n        end\n        join(result)\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202346,"user_id":null,"body":"module RevRot\n    export revrot\n\n    function revrot(s, n, res = \"\")\n        0 < n <= length(s) || return \"\"\n        isempty(s) && return \"\"\n        chunks = Iterators.partition(s, n)\n        map(chunks) do chunk\n            length(chunk) < n && return []\n            sumcubes = sum(parse.(Int, chunk) .^ 3)\n            return iseven(sumcubes) ? reverse(chunk) : circshift(chunk, -1)\n        end |> Iterators.flatten |> join\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202347,"user_id":881,"body":"module RevRot\nexport revrot\n\nfunction revrot(s, n, res=\"\")\n    if n > 0\n        join(\n            join(\n                if iseven(sum(parse.(Int, cs) .^ 3))\n                    reverse(cs)\n                else\n                    circshift(cs, -1)\n                end\n            ) for cs in Iterators.partition(s, n) if length(cs) == n\n        )\n    else\n        \"\"\n    end\nend\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202348,"user_id":null,"body":"module RevRot\n\nexport revrot\n\nfunction revrot(s, n, res=\"\")\n    (n <= 0 || isempty(s)) && return \"\"\n    (n > length(s)) && return \"\"\n  \n    re = Regex(\"([\\\\s\\\\S]{$n})\")\n    chunks = [m.match for m in eachmatch(re, s)]\n    out_str = \"\"\n  \n    for chunk in chunks\n        if sum(digits(parse(Int, chunk)) .^ 3) % 2 == 0\n            out_str *= reverse(chunk)\n        else\n            out_str *= (chunk[2:end] * chunk[begin])\n        end\n    end\n  \n    out_str\nend\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202349,"user_id":null,"body":"module RevRot\n    export revrot\n\n    function revrot(s, n, res=\"\")\n        if s==\"\"\n          return \"\"\n        elseif n==0 || n > length(s)\n          return \"\"\n          #s = digits(parse(Int64,s))\n          #(mod(sum(map(x->x^2,s)),2) == 0) ? (res *= string(reverse(s)...)) : (res *= string(circshift(s,-1)...))\n        else\n            parsed=[]\n            for elem in s\n              push!(parsed,parse(Int64,elem))\n            end\n            col=collect(Iterators.partition(parsed,n))\n            if length(col[1]) > length(col[end])\n              pop!(col)\n            end\n            for chunk in col\n              (mod(sum(map(x->x^2,chunk)),2) == 0) ? (res *= string(reverse(chunk)...)) : (res *= string(circshift(chunk,-1)...))\n            end\n            return res\n        end\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56b861671d36bb0aa8000819":[{"id":202350,"user_id":881,"body":"function reverse_and_combine_text(str::String)::String\n  words = split(str)\n  while length(words) > 1\n    words = map(wordpair -> join(reverse.(wordpair)), Base.Iterators.partition(words, 2))\n  end\n  join(words, ' ')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202351,"user_id":null,"body":"function reverse_and_combine_text(str::String)::String\n    rev = reverse.(split(str))\n    next = [join(rev[2i-1:2i]) for i in 1:length(rev)\u00f72]\n    length(next) == 0 ? str : reverse_and_combine_text(join(next, \" \") * (isodd(length(rev)) ? \" \" * rev[end] : \"\")) \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202352,"user_id":2525,"body":"function reverse_and_combine_text(str::String)::String\n    words = split(str)\n    if length(words)==1\n        return words[1]\n    else\n        newwords = \"\"\n        for (i, v) in enumerate([reverse(w) for w in words])\n            newwords *= v *\" \"^((i-1)%2)\n        end\n        return reverse_and_combine_text(newwords)\n    end\n    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202353,"user_id":null,"body":"function reverse_and_combine_text(str::String)::String\n  # enjoy! :)\n  \n  while occursin(\" \", str)\n    words = [reverse(w) for w in split(str, \" \")]\n  \n    if length(words) % 2 == 0\n      words = [words[i]*words[i+1] for i in 1:2:length(words)-1]\n    else\n      words = vcat([words[i]*words[i+1] for i in 1:2:length(words)-1],[words[end]])\n    end \n    \n    str =  join(words, \" \")   \n  end\n  \n  return str\nend  ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202354,"user_id":null,"body":"reverse_and_combine_text(str::String)::String = !occursin(\" \", str) ? str : reverse_and_combine_text(join(((p) -> join(reverse.(p))).(Iterators.partition(split(str, \" \"), 2)), \" \"))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202355,"user_id":null,"body":"function reverse_and_combine_text(str::String)::String\n  while occursin(\" \", str)\n    sp = split(str, ' ')\n    isodd(length(sp)) && append!(sp, [\"\"])\n    str = join(((i) -> reverse(sp[i])*reverse(sp[i+1])).(1:2:length(sp)), \" \")\n  end\n  str\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202356,"user_id":null,"body":"function reverse_and_combine_text(str::String)::String\n  words = split(str)\n  length(words) == 1 ? str : reverse_and_combine_text(join((pair -> join(reverse.(pair))).(Iterators.partition(words, 2)), \" \"))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202357,"user_id":null,"body":"function reverse_and_combine_text(str::String)::String\n  words = split(str)\n  if length(words) == 1\n    return str\n  end\n  reverse_and_combine_text(reduce((acc, (i, word)) -> acc * reverse(word) * (i < length(words) && i % 2 == 0 ? \" \" : \"\"), enumerate(words), init = \"\"))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202358,"user_id":null,"body":"function reverse_and_combine_text(str::String)::String\n  a = split(str)\n  while length(a) > 1\n    t = []\n    for i in 1:2:length(a)\n      if i+1 <= length(a)\n        push!(t, string(reverse(a[i]), reverse(a[i+1])))\n      else\n        push!(t, reverse(a[i]))\n      end\n    end\n    a = split(join(t, \" \"))\n  end\n  a[1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202359,"user_id":null,"body":"function reverse_and_combine_text(str::String)::String\n    words = split(str,' ')\n    # standard word sequence\n    index = collect(1:lastindex(words))\n    # calculate the reverseandcombine word sequence\n    blocksize = 1\n    while blocksize < lastindex(words)\n        for bindex = 1:blocksize:lastindex(words)\n            block = bindex:min(lastindex(words),bindex+blocksize-1)\n            index[block] = -reverse(index[block])\n        end\n        blocksize *= 2\n    end\n    # combine the words\n    buffer = IOBuffer(maxsize=length(str))\n    for i in index\n        write( buffer, i < 0 ? reverse(words[-i]) : words[i] )\n    end\n    String(take!(buffer))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56b8903933dbe5831e000c76":[{"id":202360,"user_id":null,"body":"function spoonerize(words::AbstractString)::String\n    spl = split(words)\n    spl[2][1]*spl[1][2:end] * \" \" * spl[1][1]*spl[2][2:end]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202361,"user_id":759,"body":"function spoonerize(words::AbstractString)::String\n  ind = findfirst(' ', words)\n  string(words[ind+1], words[2:ind-1], ' ', words[1], words[ind+2:end])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202362,"user_id":527,"body":"function spoonerize(words::AbstractString)::String\n  replace(words, r\"(\\S)(\\S*)\\s(\\S)(\\S*)\" => s\"\\3\\2 \\1\\4\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202363,"user_id":null,"body":"function spoonerize(words::AbstractString)::String\n    # ...aaaaand SPOONERIZE!\n  arr = split(words, \" \")\n  word1 = arr[1]\n  word2 = arr[2]\n\n  return word2[1] * word1[2:end] *\" \" * word1[1] * word2[2:end]\nend\n\n#https:\/\/en.wikibooks.org\/wiki\/Introducing_Julia\/Strings_and_characters","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202364,"user_id":null,"body":"function spoonerize(words::AbstractString)::String\n    word1, word2 = collect.(split(words))\n    word1[1], word2[1] = word2[1], word1[1]\n    join(join.([word1, word2]), \" \")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202365,"user_id":null,"body":"function spoonerize(words::AbstractString)::String\n  tokens = split(words, \" \")\n  return SubString(tokens[2], 1, 1) * SubString(tokens[1], 2) * \" \" * SubString(tokens[1], 1, 1) * SubString(tokens[2], 2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202366,"user_id":null,"body":"function spoonerize(words::AbstractString)::String\n  a, b = split(words)\n  \"$(b[1])$(a[2:end]) $(a[1])$(b[2:end])\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202367,"user_id":null,"body":"function spoonerize(words::AbstractString)::String\n    x, y = split(words, \" \")\n    \"$(y[1]x[2:end]) $(x[1]y[2:end])\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202368,"user_id":null,"body":"function spoonerize(words::AbstractString)::String\n    words = split(words)\n    string(words[2][1],words[1][2:end],\" \",words[1][1],words[2][2:end])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202369,"user_id":53,"body":"function spoonerize(words::AbstractString)::String\n    w = split(words, \" \")\n    w1 = w[1]\n    w2 = w[2]\n    v1 = w2[1] * SubString(w1, 2, length(w1))\n    v2 = w1[1] * SubString(w2, 2, length(w2))\n    return v1 * \" \" * v2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56baeae7022c16dd7400086e":[{"id":202370,"user_id":null,"body":"module Phone\n    export phone\n\nfunction phone(strng, num)\n    lines = split(strng, \"\n\")\n    lists = Vector{AbstractString}[]\n    count = 0\n    for i \u2208 1:length(lines)\n        phoneReg = r\".\\d\\-\\d\\d\\d\\-\\d\\d\\d\\-\\d\\d\\d\\d\"\n        phoneNum = SubString.(lines[i], findall(phoneReg, lines[i]))\n        if length(phoneNum) == 0\n            continue\n        end\n        phoneNum = replace(phoneNum[1], r\"[\\+]\" => \"\")\n\n        nameReg = r\"\\<.*\\>\"\n        name = SubString.(lines[i], findall(nameReg, lines[i]))\n        if length(name) == 0\n            continue\n        end\n        name = replace(name[1], r\"[\\<,\\>]\" => \"\")\n\n        address = replace(lines[i], r\"[\\\/\\,\\+\\;\\*\\<\\>]\" => \"\")\n        address = replace(address, phoneNum=>\" \")\n        address = strip(replace(address, name => \"\"))\n        address = replace(address, r\"[\\_\\$\\!\\?\\:]\" => \" \")\n        address = strip(replace(address, r\"\\s+\" => \" \"))\n\n        retArray = [phoneNum, name, address]\n        push!(lists, retArray)\n    end\n    index = 1\n    for i \u2208 1:length(lists)\n        if num == lists[i][1]\n            count += 1\n            index = i\n        end\n    end\n    if count == 0\n        return \"Error => Not found: \" * num\n    elseif count > 1\n        return \"Error => Too many people: \" * num\n    else\n        return \"Phone => \" * lists[index][1] * \", Name => \" * lists[index][2] * \", Address => \" * lists[index][3]\n    end\nend\n\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202371,"user_id":null,"body":"module Phone\n    export phone\n\n    function phone(strng, num)\n        people = [x for x in split(strng, '\n') if occursin('+'*num, x)]\n\n        if length(people) > 1\n            \"Error => Too many people: $(num)\"\n        elseif length(people) == 0\n            \"Error => Not found: $(num)\"\n        else\n            name = match(r\"<.*>\", people[1]).match\n            rest = replace(replace(people[1], num=>\"\"), name=>\"\")\n            \"Phone => $(num), Name => $(name[2:end-1]), Address => $(replace(strip(replace(rest, r\"[^A-Za-z0-9 .-]\"=>\" \"),  [' ']), r\" +\"=>\" \"))\"\n        end\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202372,"user_id":null,"body":"module Phone\n    export phone\n\n    function phone(strng, num)\n        err = length(collect(eachmatch(r\"\\+\"*num, strng)))\n        err == 0 && return \"Error => Not found: $(num)\"\n        err > 1 && return \"Error => Too many people: $(num)\"\n        line = [line for line in split(strng, '\n') if occursin(r\"\\+\"*num, line)][1]\n        name = chop(line[findfirst(r\"\\w+\\ ?\\w*\\'?\\w*>\", line)])\n        line = replace(line, r\"<.+>\" => \"\")\n        line = replace(line, \"+$(num)\" => \"\")\n        line = replace(line, \"_\" => \" \")\n        \"Phone => $(num), Name => $(name), Address => $(join([m.match for m in eachmatch(r\"\\w+\\.*-*\\d*\", line)], \" \"))\"\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202373,"user_id":null,"body":"module Phone\n    export phone\n\n    function phone(strng, num)\n        data = split(strng, '\n')\n        findnum = findall(x -> contains(x, \"+\"*num), data)\n        if length(findnum) > 1\n            return \"Error => Too many people: $num\"\n        elseif length(findnum) == 0\n            return \"Error => Not found: $num\"\n        else\n            namematch = match(r\"(?<=<).*(?=>)\", data[findnum[1]])\n            name = namematch.match\n            address = replace(data[findnum[1]], \"+\"*num => \"\")\n            address = replace(address, \"<\"*name*\">\" => \"\")\n            address = replace(address, r\"[^(a-zA-z0-9 .\\-)]\" => \"\")\n            address = replace(address, r\"\\s{2,}|_\" => \" \")\n            address = address |> lstrip |> rstrip\n        end\n\n        return \"Phone => $num, Name => $name, Address => $address\"\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202374,"user_id":null,"body":"module Phone\n    export phone\n\n    function phone(strng, num)\n    phone_re = r\"\\+\\d{1,2}(?:-\\d{3}){2}-\\d{4}\"\n    name_re = r\"(?<=<).+(?=>)\"\n\n    # Find the line in `strng` that contains `num`. If more than one line is found, or\n    # if no lines are found, return the appropriate error string.\n    entry = filter(x -> occursin(\"+\"*num, x), split(strng, \"\n\"))\n    length(entry) > 1 && return \"Error => Too many people: $num\"\n    length(entry) == 0 && return \"Error => Not found: $num\"\n\n    # Pull out the name by regular expression\n    name = match(name_re, first(entry)).match\n\n    # Strip out phone number, name, and special characters. What's left must be the\n    # address\n    strip_phone = replace(first(entry), phone_re => \"\")\n    strip_name = replace(strip_phone, name_re => \"\")\n    address = replace(strip(replace(strip_name, r\"[^a-zA-Z0-9\\.\\s-]\" => \" \")), r\"\\s+\" => \" \")\n\n    return \"Phone => $num, Name => $name, Address => $address\"\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202375,"user_id":null,"body":"module Phone\n    export phone\n\n    function phone(strng, num)\n        entries = split(strng, \"\n\", keepempty = false)\n        \n        phone_matches = filter(x -> occursin('+'*num, x), entries)\n        n_matches = length(phone_matches)\n  \n        n_matches == 0 && return \"Error => Not found: $num\"\n        n_matches > 1 && return \"Error => Too many people: $num\"\n        \n        entry = only(phone_matches)\n  \n        \n        name = match(r\"(?<=<).+(?=>)\", entry).match\n        entry_no_name = replace(entry, r\" ?<.+> ?\" => \" \")\n        address = replace(entry_no_name, Regex(\" ?[^ ]*\\\\+$(num)[^ ]* ?\") => \" \") |>\n          (x -> replace(x, \"_\" => \" \")) |>\n          (x -> replace(x, r\"[^[:alnum:] \\-\\.]\" => \"\")) |>\n          (x -> replace(x, r\" {2,}\" => \" \")) |>\n          strip\n        \n  \n        return \"Phone => $num, Name => $name, Address => $address\"\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202376,"user_id":492,"body":"module Phone\n    export phone\n\n    function phone(strng, num)\n        nnum = \"+\" * num; cnt = 0; l = \"\"\n        for line in split(strng, \"\n\")\n            if occursin(nnum, line)\n                cnt += 1\n                l = line\n            end\n        end\n        if (cnt > 1) return \"Error => Too many people: \" * num end\n        if (cnt == 0) return \"Error => Not found: \" * num end\n        l = replace(l, Pair(r\"[^-0-9a-z\\\\s+A-Z<>.']\", \" \"))\n        l = replace(l, Pair(\"$nnum\", \"\"))\n        name = match(r\"<(.+)>\", l)[1]\n        adr = strip(replace(replace(l, Pair(\"<$name>\", \"\")), Pair(r\" +\", \" \")))\n        \"Phone => \" * num * \", Name => \" * name * \", Address => \" * adr\n    end\n    \n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202377,"user_id":null,"body":"module Phone\nexport phone\n\nfunction phone(strng, num)\n  phoneDict = Dict()\n  lines = split(strng, \"\n\")\n  for line in lines\n    isempty(line) && continue\n    phone = match(r\"(\\d{1,2}-\\d{3}-\\d{3}-\\d{4})\", line).captures[1]\n    phone != num && continue\n    haskey(phoneDict, phone) && return \"Error => Too many people: \" * num\n    #(haskey(phoneDict, phone) || num == \"8-421-674-8974\") && return \"Error => Too many people: \" * num\n    name = match(r\"<([^>]+)>\", line).captures[1]\n    addr = replace(line, \"+$phone\" => \"\")\n    addr = replace(addr, \"<$name>\" => \"\")\n    addr = replace(addr, r\"[^-.0-9A-Za-z]\" => \" \")\n    addr = replace(addr, r\"^\\s+|\\s+$\" => \"\")\n    addr = replace(addr, r\"\\s+\" => \" \")\n    phoneDict[phone] = (name = name, addr = addr)\n  end\n  !haskey(phoneDict, num) && return \"Error => Not found: \" * num\n  \"Phone => $num, Name => $(phoneDict[num].name), Address => $(phoneDict[num].addr)\"\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202378,"user_id":null,"body":"module Phone\n    export phone\n\n    function phone(strng, num)\n        book = split(strng, '\n')\n        filter!(x->occursin(num, x), book)\n        length(book) > 1 && return \"Error => Too many people: $num\"\n        length(book) == 0 && return \"Error => Not found: $num\"\n        addr_chs = Vector{Char}(replace(replace(replace(book[1], num=>\"\"), r\"<.*>\"=>\"\"), \"_\"=>\" \"))\n        addr = replace(strip(join(filter(x->(isletter(x) || isdigit(x) || x == ' ' || x == '-' || x == '.'), addr_chs))), r\" +\"=>\" \")\n        \"Phone => $num, Name => $(match(r\"<(.+)>\", book[1]).captures[1]), Address => $addr\"\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202379,"user_id":null,"body":"module Phone\n  export phone\n  function phone(strng, num)\n    arr = [s for s in split(strng,\"\n\") if contains(s, \"+$num\")]\n    if length(arr) > 1 return \"Error => Too many people: $num\" end\n    if isempty(arr) return \"Error => Not found: $num\" end\n    m = match(r\"\\<(.+)\\>\", arr[1]); name = m.captures[1]\n    rx = Regex(\"\\\\+$num\")\n    addr = replace(arr[1], rx, \"\")\n    addr = replace(addr, r\"\\<.+\\>\", \"\")\n    addr = replace(addr, r\"[!,;:\\\/\\$\\*\\?_]\", \" \")\n    addr = strip(replace(addr, r\" +\", \" \"))\n    \"Phone => $num, Name => $name, Address => $addr\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56bc28ad5bdaeb48760009b0":[{"id":202380,"user_id":527,"body":"function remove_char(str)\n  str[2:end-1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202381,"user_id":564,"body":"remove_char(str) = str[2:end-1]\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202382,"user_id":null,"body":"function remove_char(str)\n  chop(str, head=1, tail=1)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202383,"user_id":null,"body":"function remove_char(str)\n  return str[2:end-1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202384,"user_id":null,"body":"function remove_char(str)\n  return str[begin+1:end-1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202385,"user_id":null,"body":"function remove_char(str)\n  str = str[2:end-1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202386,"user_id":null,"body":"function remove_char(str)\n  # You got this!\n  \nchop(str, head=1, tail=1)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202387,"user_id":null,"body":"function remove_char(str)\n  length(str) < 2 ? \"\" : str[begin+1:end-1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202388,"user_id":null,"body":"function remove_char(str)\n  str[begin+1:end-1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202389,"user_id":null,"body":"function remove_char(str)\n  n = length(str)\n  str[2:n-1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56bdd0aec5dc03d7780010a5":[{"id":202390,"user_id":645,"body":"function next_higher(n::Int)::Int\n  o = n & -n\n  (n + o) | (xor(n, n + o) \u00f7 4o)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202391,"user_id":53,"body":"function next_higher(n::Int)::Int\n  r = n & -n\n  p = n + r\n  q = (n \u22bb p) \u00f7 (4 * r)\n  p | q\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202392,"user_id":645,"body":"function next_higher(n::Int)::Int\n  o = n & -n\n  (n + o) | ((xor(n, n + o) \u00f7 o) >> 2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202393,"user_id":null,"body":"function next_higher(n::Int)::Int\n  x = n + 1\n  while count_ones(x) != count_ones(n)\n    x += 1\n  end\n  x\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202394,"user_id":null,"body":"function next_higher(n::Int)::Int\n    bits = bitstring(n)\n    splt = findlast(\"01\", bits)\n    parse(Int, bits[1:splt[1]-1] * \"10\" * (bits[splt[2]+1:end] |> collect |> sort! |> join), base=2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202395,"user_id":421,"body":"function next_higher(n::Int)::Int\n  x = n & -n\n  return (n + x) | ((xor(n, n + x) \u00f7 x) >> 2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202396,"user_id":null,"body":"function next_higher(n::Int)::Int\n    bits = '0' * bitstring(n)\n    swaploc = findlast(\"01\", bits)\n    afterswap = bits[swaploc[2]+1:end]\n    onesafter = count(==('1'), afterswap)\n    zerosafter = length(afterswap) - onesafter\n    newbits = bits[1:swaploc[1]-1] * \"10\" * '0'^zerosafter * '1'^onesafter\n    return parse(Int, newbits; base = 2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202397,"user_id":2525,"body":"function next_higher(n::Int)::Int\n    nd = sum(digits(n, base=2))\n    i = n+1\n    while sum(digits(i, base=2)) != nd\n        i += 1\n    end\n    i\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202398,"user_id":null,"body":"function next_higher(n::Int)::Int\n  s = \"0\" * bitstring(n) # Add a leading zero just in case\n  # Note: a bug in Julia 1.6 causes this next line to throw an error if \"01\" matches only at the beggining of the string.\n  ul = rsplit(s, \"01\"; limit=2, keepempty=true)\n  # Upper bits stay the same, lower bits must be right-packed\n  n_ones = count(x->x == '1', ul[2])\n  ul[2] = lpad(\"1\"^n_ones, length(ul[2]), '0')\n  s = join(ul, \"10\") # Flip \"01\"->\"10\" and join the upper and lower bits back together\n  parse(Int, s; base=2) # Back to an integer\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202399,"user_id":881,"body":"popcount(n::Int)::Int = count(==('1'), bitstring(n))\n\nfunction next_higher(n::Int)::Int\n    pc = popcount(n)\n    if pc == 1 \n        n << 1\n    else\n        for x in Iterators.countfrom(n + 1)\n            if popcount(x) == pc\n                return x\n            end\n        end\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56c5847f27be2c3db20009c3":[{"id":202400,"user_id":645,"body":"subtract_sum(_) = \"apple\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202401,"user_id":null,"body":"function subtract_sum(n)\n  \"apple\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202402,"user_id":null,"body":"subtract_sum(n) = \"apple\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202403,"user_id":null,"body":"function subtract_sum(n)\n  return \"apple\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202404,"user_id":304,"body":"function subtract_sum(n)\n  # fruit name like \"apple\"\n  \"apple\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202405,"user_id":null,"body":"table = [\"kiwi\", \n\"pear\", \n\"kiwi\", \n\"banana\", \n\"melon\", \n\"banana\", \n\"melon\", \n\"pineapple\", \n\"apple\", \n\"pineapple\", \n\"cucumber\", \n\"pineapple\", \n\"cucumber\", \n\"orange\", \n\"grape\", \n\"orange\", \n\"grape\", \n\"apple\", \n\"grape\", \n\"cherry\", \n\"pear\", \n\"cherry\", \n\"pear\", \n\"kiwi\", \n\"banana\", \n\"kiwi\", \n\"apple\", \n\"melon\", \n\"banana\", \n\"melon\", \n\"pineapple\", \n\"melon\", \n\"pineapple\", \n\"cucumber\", \n\"orange\", \n\"apple\", \n\"orange\", \n\"grape\", \n\"orange\", \n\"grape\", \n\"cherry\", \n\"pear\", \n\"cherry\", \n\"pear\", \n\"apple\", \n\"pear\", \n\"kiwi\", \n\"banana\", \n\"kiwi\", \n\"banana\", \n\"melon\", \n\"pineapple\", \n\"melon\", \n\"apple\", \n\"cucumber\", \n\"pineapple\", \n\"cucumber\", \n\"orange\", \n\"cucumber\", \n\"orange\", \n\"grape\", \n\"cherry\", \n\"apple\", \n\"cherry\", \n\"pear\", \n\"cherry\", \n\"pear\", \n\"kiwi\", \n\"pear\", \n\"kiwi\", \n\"banana\", \n\"apple\", \n\"banana\", \n\"melon\", \n\"pineapple\", \n\"melon\", \n\"pineapple\", \n\"cucumber\", \n\"pineapple\", \n\"cucumber\", \n\"apple\", \n\"grape\", \n\"orange\", \n\"grape\", \n\"cherry\", \n\"grape\", \n\"cherry\", \n\"pear\", \n\"cherry\", \n\"apple\", \n\"kiwi\", \n\"banana\", \n\"kiwi\", \n\"banana\", \n\"melon\", \n\"banana\", \n\"melon\", \n\"pineapple\", \n\"apple\", \n\"pineapple\"]\n\nfunction subtract_sum(n)\n  n - sum(digits(n)) |> x -> x <= 100 ? table[x] : subtract_sum(x)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202406,"user_id":2723,"body":"fruit = Dict(1 => \"kiwi\",\n2 => \"pear\",\n3 => \"kiwi\",\n4 => \"banana\",\n5 => \"melon\",\n6 => \"banana\",\n7 => \"melon\",\n8 => \"pineapple\",\n9 => \"apple\",\n10 => \"pineapple\",\n11 => \"cucumber\",\n12 => \"pineapple\",\n13 => \"cucumber\",\n14 => \"orange\",\n15 => \"grape\",\n16 => \"orange\",\n17 => \"grape\",\n18 => \"apple\",\n19 => \"grape\",\n20 => \"cherry\",\n21 => \"pear\",\n22 => \"cherry\",\n23 => \"pear\",\n24 => \"kiwi\",\n25 => \"banana\",\n26 => \"kiwi\",\n27 => \"apple\",\n28 => \"melon\",\n29 => \"banana\",\n30 => \"melon\",\n31 => \"pineapple\",\n32 => \"melon\",\n33 => \"pineapple\",\n34 => \"cucumber\",\n35 => \"orange\",\n36 => \"apple\",\n37 => \"orange\",\n38 => \"grape\",\n39 => \"orange\",\n40 => \"grape\",\n41 => \"cherry\",\n42 => \"pear\",\n43 => \"cherry\",\n44 => \"pear\",\n45 => \"apple\",\n46 => \"pear\",\n47 => \"kiwi\",\n48 => \"banana\",\n49 => \"kiwi\",\n50 => \"banana\",\n51 => \"melon\",\n52 => \"pineapple\",\n53 => \"melon\",\n54 => \"apple\",\n55 => \"cucumber\",\n56 => \"pineapple\",\n57 => \"cucumber\",\n58 => \"orange\",\n59 => \"cucumber\",\n60 => \"orange\",\n61 => \"grape\",\n62 => \"cherry\",\n63 => \"apple\",\n64 => \"cherry\",\n65 => \"pear\",\n66 => \"cherry\",\n67 => \"pear\",\n68 => \"kiwi\",\n69 => \"pear\",\n70 => \"kiwi\",\n71 => \"banana\",\n72 => \"apple\",\n73 => \"banana\",\n74 => \"melon\",\n75 => \"pineapple\",\n76 => \"melon\",\n77 => \"pineapple\",\n78 => \"cucumber\",\n79 => \"pineapple\",\n80 => \"cucumber\",\n81 => \"apple\",\n82 => \"grape\",\n83 => \"orange\",\n84 => \"grape\",\n85 => \"cherry\",\n86 => \"grape\",\n87 => \"cherry\",\n88 => \"pear\",\n89 => \"cherry\",\n90 => \"apple\",\n91 => \"kiwi\",\n92 => \"banana\",\n93 => \"kiwi\",\n94 => \"banana\",\n95 => \"melon\",\n96 => \"banana\",\n97 => \"melon\",\n98 => \"pineapple\",\n99 => \"apple\",\n100 => :\"pineapple\")\n\nfunction subtract_sum(n)\n  n -= sum(parse(Int,num) for num in string(n))\n  while n > 99\n    n -= sum(parse(Int,num) for num in string(n))\n  end\n  fruit[n]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202407,"user_id":null,"body":"input = \"\"\"\n  1-kiwi\n  2-pear\n  3-kiwi\n  4-banana\n  5-melon\n  6-banana\n  7-melon\n  8-pineapple\n  9-apple\n  10-pineapple\n  11-cucumber\n  12-pineapple\n  13-cucumber\n  14-orange\n  15-grape\n  16-orange\n  17-grape\n  18-apple\n  19-grape\n  20-cherry\n  21-pear\n  22-cherry\n  23-pear\n  24-kiwi\n  25-banana\n  26-kiwi\n  27-apple\n  28-melon\n  29-banana\n  30-melon\n  31-pineapple\n  32-melon\n  33-pineapple\n  34-cucumber\n  35-orange\n  36-apple\n  37-orange\n  38-grape\n  39-orange\n  40-grape\n  41-cherry\n  42-pear\n  43-cherry\n  44-pear\n  45-apple\n  46-pear\n  47-kiwi\n  48-banana\n  49-kiwi\n  50-banana\n  51-melon\n  52-pineapple\n  53-melon\n  54-apple\n  55-cucumber\n  56-pineapple\n  57-cucumber\n  58-orange\n  59-cucumber\n  60-orange\n  61-grape\n  62-cherry\n  63-apple\n  64-cherry\n  65-pear\n  66-cherry\n  67-pear\n  68-kiwi\n  69-pear\n  70-kiwi\n  71-banana\n  72-apple\n  73-banana\n  74-melon\n  75-pineapple\n  76-melon\n  77-pineapple\n  78-cucumber\n  79-pineapple\n  80-cucumber\n  81-apple\n  82-grape\n  83-orange\n  84-grape\n  85-cherry\n  86-grape\n  87-cherry\n  88-pear\n  89-cherry\n  90-apple\n  91-kiwi\n  92-banana\n  93-kiwi\n  94-banana\n  95-melon\n  96-banana\n  97-melon\n  98-pineapple\n  99-apple\n  100-pineapple\"\"\"\n\ninputDict = Dict()\nfor line in split(input, \"\n\")\n  (k, v) = split(line, \"-\")\n  inputDict[parse(Int, k)] = v\nend\n\nfunction subtract_sum(n)\n  result = n - sum(digits(n))\n  if haskey(inputDict, result)\n    return inputDict[result]\n  end\n  subtract_sum(result)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202408,"user_id":null,"body":"function digitsum(n, acc=0)\n    return if n == 0\n        acc\n    else\n        digitsum(n \u00f7 10, acc + n % 10)\n    end\nend\n\nfunction subtract_sum(n)\n    nsum = n - digitsum(n)\n    while (nsum > 100)\n        nsum = nsum - digitsum(nsum)\n    end\n    fruit = [\"kiwi\", \"pear\", \"kiwi\", \"banana\", \"melon\", \"banana\", \"melon\", \"pineapple\", \"apple\", \"pineapple\",\n        \"cucumber\", \"pineapple\", \"cucumber\", \"orange\", \"grape\", \"orange\", \"grape\", \"apple\", \"grape\", \"cherry\",\n        \"pear\", \"cherry\", \"pear\", \"kiwi\", \"banana\", \"kiwi\", \"apple\", \"melon\", \"banana\", \"melon\",\n        \"pineapple\", \"melon\", \"pineapple\", \"cucumber\", \"orange\", \"apple\", \"orange\", \"grape\", \"orange\", \"grape\",\n        \"cherry\", \"pear\", \"cherry\", \"pear\", \"apple\", \"pear\", \"kiwi\", \"banana\", \"kiwi\", \"banana\",\n        \"melon\", \"pineapple\", \"melon\", \"apple\", \"cucumber\", \"pineapple\", \"cucumber\", \"orange\", \"cucumber\", \"orange\",\n        \"grape\", \"cherry\", \"apple\", \"cherry\", \"pear\", \"cherry\", \"pear\", \"kiwi\", \"pear\", \"kiwi\",\n        \"banana\", \"apple\", \"banana\", \"melon\", \"pineapple\", \"melon\", \"pineapple\", \"cucumber\", \"pineapple\", \"cucumber\",\n        \"apple\", \"grape\", \"orange\", \"grape\", \"cherry\", \"grape\", \"cherry\", \"pear\", \"cherry\", \"apple\",\n        \"kiwi\", \"banana\", \"kiwi\", \"banana\", \"melon\", \"banana\", \"melon\", \"pineapple\", \"apple\", \"pineapple\"]\n    fruit[nsum]\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202409,"user_id":null,"body":"function getnum(n)\n  m = string(n)\n  s = 0\n  for c in m\n    s += parse(Int,c)\n  end\n  s = n - s\n  if s <= 100\n    return s\n  else\n    return getnum(s)\n  end\nend\n\nfunction subtract_sum(n)\n  fruits = Dict(\n    \"1\"=>\"kiwi\",\n    \"2\"=>\"pear\",\n    \"3\"=>\"kiwi\",\n    \"4\"=>\"banana\",\n    \"5\"=>\"melon\",\n    \"6\"=>\"banana\",\n    \"7\"=>\"melon\",\n    \"8\"=>\"pineapple\",\n    \"9\"=>\"apple\",\n    \"10\"=>\"pineapple\",\n    \"11\"=>\"cucumber\",\n    \"12\"=>\"pineapple\",\n    \"13\"=>\"cucumber\",\n    \"14\"=>\"orange\",\n    \"15\"=>\"grape\",\n    \"16\"=>\"orange\",\n    \"17\"=>\"grape\",\n    \"18\"=>\"apple\",\n    \"19\"=>\"grape\",\n    \"20\"=>\"cherry\",\n    \"21\"=>\"pear\",\n    \"22\"=>\"cherry\",\n    \"23\"=>\"pear\",\n    \"24\"=>\"kiwi\",\n    \"25\"=>\"banana\",\n    \"26\"=>\"kiwi\",\n    \"27\"=>\"apple\",\n    \"28\"=>\"melon\",\n    \"29\"=>\"banana\",\n    \"30\"=>\"melon\",\n    \"31\"=>\"pineapple\",\n    \"32\"=>\"melon\",\n    \"33\"=>\"pineapple\",\n    \"34\"=>\"cucumber\",\n    \"35\"=>\"orange\",\n    \"36\"=>\"apple\",\n    \"37\"=>\"orange\",\n    \"38\"=>\"grape\",\n    \"39\"=>\"orange\",\n    \"40\"=>\"grape\",\n    \"41\"=>\"cherry\",\n    \"42\"=>\"pear\",\n    \"43\"=>\"cherry\",\n    \"44\"=>\"pear\",\n    \"45\"=>\"apple\",\n    \"46\"=>\"pear\",\n    \"47\"=>\"kiwi\",\n    \"48\"=>\"banana\",\n    \"49\"=>\"kiwi\",\n    \"50\"=>\"banana\",\n    \"51\"=>\"melon\",\n    \"52\"=>\"pineapple\",\n    \"53\"=>\"melon\",\n    \"54\"=>\"apple\",\n    \"55\"=>\"cucumber\",\n    \"56\"=>\"pineapple\",\n    \"57\"=>\"cucumber\",\n    \"58\"=>\"orange\",\n    \"59\"=>\"cucumber\",\n    \"60\"=>\"orange\",\n    \"61\"=>\"grape\",\n    \"62\"=>\"cherry\",\n    \"63\"=>\"apple\",\n    \"64\"=>\"cherry\",\n    \"65\"=>\"pear\",\n    \"66\"=>\"cherry\",\n    \"67\"=>\"pear\",\n    \"68\"=>\"kiwi\",\n    \"69\"=>\"pear\",\n    \"70\"=>\"kiwi\",\n    \"71\"=>\"banana\",\n    \"72\"=>\"apple\",\n    \"73\"=>\"banana\",\n    \"74\"=>\"melon\",\n    \"75\"=>\"pineapple\",\n    \"76\"=>\"melon\",\n    \"77\"=>\"pineapple\",\n    \"78\"=>\"cucumber\",\n    \"79\"=>\"pineapple\",\n    \"80\"=>\"cucumber\",\n    \"81\"=>\"apple\",\n    \"82\"=>\"grape\",\n    \"83\"=>\"orange\",\n    \"84\"=>\"grape\",\n    \"85\"=>\"cherry\",\n    \"86\"=>\"grape\",\n    \"87\"=>\"cherry\",\n    \"88\"=>\"pear\",\n    \"89\"=>\"cherry\",\n    \"90\"=>\"apple\",\n    \"91\"=>\"kiwi\",\n    \"92\"=>\"banana\",\n    \"93\"=>\"kiwi\",\n    \"94\"=>\"banana\",\n    \"95\"=>\"melon\",\n    \"96\"=>\"banana\",\n    \"97\"=>\"melon\",\n    \"98\"=>\"pineapple\",\n    \"99\"=>\"apple\",\n    \"100\"=>\"pineapple\"\n  )\n  return fruits[string(getnum(n))]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56cac350145912e68b0006f0":[{"id":202410,"user_id":492,"body":"module UpDown\n    export arrange\n\n    function arrange(strng)\n        res = split(strng, \" \")   \n        for i in 1:length(res) - 1\n            if ((i % 2 == 0) && (length(res[i]) < length(res[i + 1]))) || ((i % 2 == 1) && (length(res[i]) > length(res[i + 1])))\n                res[i], res[i + 1] = res[i + 1], res[i]\n            end\n        end\n        r = []\n        for i in 1:length(res)\n            if (i & 1 == 1)\n                push!(r, lowercase(res[i]))\n            else\n                push!(r, uppercase(res[i]))\n            end\n        end\n        join(r, \" \")\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202411,"user_id":null,"body":"module UpDown\n    export arrange\n\n    function arrange(strng)\n        x = split(strng)\n        for i in 1:length(x)-1\n            if (isodd(i) && length(x[i+1]) < length(x[i])) || (iseven(i) && length(x[i]) < length(x[i+1])) \n                x[i], x[i+1] = x[i+1], x[i]\n            end\n        end\n        join([isodd(i) ? lowercase(v) : uppercase(v) for (i, v) in enumerate(x)], \" \")\n    end\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202412,"user_id":2525,"body":"module UpDown\n    export arrange\n\n    function arrange(strng)\n        if strng == \"\"; return \"\" end\n  \n        words = split(strng)\n        n = length(words)  \n        for i in 1:n-1    \n            if (-1)^i * length(words[i+1]) > (-1)^i * length(words[i])\n                (words[i], words[i+1]) = (words[i+1], words[i])\n            end\n        end\n\n        join([if idx%2==1; lowercase(word) else uppercase(word) end for (idx, word) in enumerate(words)], \" \")\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202413,"user_id":1474,"body":"module UpDown\n  export arrange\n\n  function arrange(strng)\n    ar = split(strng)\n    for i in 2:2:length(ar)\n      if length(ar[i-1]) > length(ar[i])\n        ar[i-1], ar[i] = ar[i], ar[i-1]\n      end\n      if i < length(ar) && length(ar[i+1]) > length(ar[i])\n        ar[i+1], ar[i] = ar[i], ar[i+1]\n      end\n    end\n    join([isodd(i) ? lowercase(s) : uppercase(s) for (i, s) in enumerate(ar)], ' ')\n  end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202414,"user_id":null,"body":"module UpDown\n    export arrange\n\n    function arrange(strng)\n      str = split(strng, \" \")\n    \n      for ii in 1:(length(str) - 1 )\n        if (ii % 2 == 1) && (length(str[ii]) > length(str[ii+1]))\n          str[ii], str[ii+1] = str[ii+1], str[ii]\n        elseif (ii % 2 == 0) && (length(str[ii]) < length(str[ii+1]))\n          str[ii], str[ii+1] = str[ii+1], str[ii]\n        end\n      end\n    \n      for ii in eachindex(str)\n        ii % 2 == 1 ?   str[ii] = lowercase(str[ii]) : str[ii] = uppercase(str[ii])        \n      end\n    \n      return join(str,\" \")\n  end\n\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202415,"user_id":null,"body":"module UpDown\n  export arrange\n\n  function swap(lst, i, j)\n    t = lst[i]; lst[i] = lst[j]; lst[j] = t\n    lst\n  end\n  \n  function arrange(strng)\n    arr = split(strng, \" \")\n    for i in 1:length(arr)\n      pos = i\n      uord = iseven(pos) ? 1 : 0\n      while pos < length(arr)\n        if uord == 0 && length(arr[pos]) > length(arr[pos+1])\n          arr = swap(arr, pos, pos+1)\n          uord = 1\n          pos += 1\n        elseif uord == 1 && length(arr[pos]) < length(arr[pos+1])\n          arr = swap(arr, pos, pos+1)\n          uord = 0\n          pos += 1 \n        else\n          break\n        end\n      end\n    end\n    join((iseven(i) ? uppercase(s) : lowercase(s) for (i,s) in enumerate(arr)), \" \")\n  end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56cafdabc8cfcc3ad4000a2b":[{"id":202416,"user_id":null,"body":"function score(n)\n  reduce(|, 0:n)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202417,"user_id":null,"body":"function score(n)\n  a=0\n  for i=1:n\n    a |= i\n  end\n  a\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202418,"user_id":null,"body":"function score(n)\n  iszero(n) ? 0 : reduce(|, 1:n)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202419,"user_id":759,"body":"score(n) = 1 << (sizeof(n) * 8 - leading_zeros(n)) - 1","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202420,"user_id":null,"body":"function score(n)\n  res = 0;\n  while res < n\n    res <<= 1\n    res |= 1\n  end; res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202421,"user_id":null,"body":"function score(n)\n  if n == 1\n    return 1\n  else\n    tmp = 0\n  end\n  \n  for q in 1:n-1\n    tmp = tmp | q\n  end\n  tmp\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202422,"user_id":null,"body":"function score(n)\n  if n<=0 return 0 end\n  reduce(function(a,x) a|x end, 1:n)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202423,"user_id":480,"body":"function score(n)\n  s=n\n  while n>0\n    n>>=1\n    s|=n\n  end\n  return s\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202424,"user_id":null,"body":"score(n) = iszero(n) ? 0 : 1 << ndigits(n, base=2) - 1","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202425,"user_id":null,"body":"function score(n)\n    reduce(|, range(0, n, step = 1))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56cca888a9d0f25985000036":[{"id":202426,"user_id":881,"body":"candies_to_buy(kids) = lcm(1:big(kids))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202427,"user_id":53,"body":"function candies_to_buy(n::Integer)::BigInt\n  lcm(1 : big(n))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202428,"user_id":168,"body":"function candies_to_buy(kids::Integer)::BigInt\n  lcm(1:BigInt(kids))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202429,"user_id":null,"body":"candies_to_buy(kids::Integer)::BigInt = lcm(big(1):kids)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202430,"user_id":null,"body":"candies_to_buy(kids::Integer)::BigInt = lcm(1:big(kids))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202431,"user_id":527,"body":"candies_to_buy = Base.Fix1(reduce, lcm) \u2218 Base.Fix1(:, big(1))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202432,"user_id":527,"body":"function candies_to_buy(kids::Integer)::BigInt\n  reduce(lcm, big(1) : kids)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202433,"user_id":50,"body":"function gcd(a::BigInt, b::BigInt)::BigInt\n  if b == 0\n    return a\n  else\n    return gcd(b, a% b)\n  end\nend\n\nfunction candies_to_buy(a::Integer)::BigInt\n  res = BigInt(a)\n  for n in BigInt(2):BigInt(a-1)\n    if res % n != 0\n      res *= BigInt(n \/ gcd(res, n))\n    end\n  end\n  return res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56cd44e1aa4ac7879200010b":[{"id":202434,"user_id":null,"body":"is_uppercase(str::String) = all(!islowercase, str)\n","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202435,"user_id":645,"body":"is_uppercase(str::String) = uppercase(str) == str","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202436,"user_id":null,"body":"is_uppercase(str) = uppercase(str)==str","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202437,"user_id":572,"body":"function is_uppercase(str)\n  all(is_uppercasecase, join(split(str)))\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202438,"user_id":null,"body":"function is_uppercase(str::String)\n    occursin(r\"^[A-Z,\\s]+$\",str)\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202439,"user_id":881,"body":"is_uppercase(str::String) = all(is_uppercasecase, filter(isletter, str))","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202440,"user_id":50,"body":"function is_uppercase(str::String)\n  return occursin(r\"[a-z]\",str) == false\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202441,"user_id":null,"body":"is_uppercase(str) = all(is_uppercasecase, replace(str, \" \"=> \"\"))","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202442,"user_id":null,"body":"function is_uppercase(str::String)\n  !any(islowercase, str)\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202443,"user_id":null,"body":"function is_uppercase(str::String)\n  !any(map(islowercase, collect(str)))\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56d0a591c6c8b466ca00118b":[{"id":202444,"user_id":53,"body":"function is_triangular(t::Integer)::Bool\n    sqrt(8*t + 1) % 1 == 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202445,"user_id":null,"body":"function is_triangular(t::Integer)::Bool\n    m = round(Int,\u221a(1+8t))\n    return (1+8t == m^2) & (isodd(m))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202446,"user_id":null,"body":"function is_triangular(t::Integer)::Bool\n    isinteger((sqrt(1 + 8t) - 1) \/ 2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202447,"user_id":2525,"body":"function is_triangular(t::Integer)::Bool\n    d = sqrt(1+8*t) \n    d - floor(d) < 1e-10\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202448,"user_id":421,"body":"function is_triangular(t::Integer)::Bool\n   (t * 8 + 1) ^ 0.5 % 1 == 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202449,"user_id":209,"body":"function is_triangular(t::Integer)::Bool\n    (1 + 8t) ^ 0.5 % 1 == 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202450,"user_id":209,"body":"function is_triangular(t::Integer)::Bool\n    isinteger(sqrt(1+8*t))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202451,"user_id":881,"body":"is_triangular(t::Integer)::Bool = isinteger(sqrt(8t + 1))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56d5166ec87df55dbe000063":[{"id":202452,"user_id":759,"body":"using Statistics\n\nsum_average(arr) = floor(sum(mean, arr))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202453,"user_id":null,"body":"import Statistics.mean\nfunction sum_average(arr)\n  floor(sum(mean(lst) for lst in arr))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202454,"user_id":881,"body":"sum_average(arr) = floor(sum(mean.(arr)))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202455,"user_id":null,"body":"sum_average(arr) = arr .|> mean |> sum |> floor","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202456,"user_id":2525,"body":"function sum_average(arr)\n    floor(Int, sum([mean(sub) for sub in arr]))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202457,"user_id":null,"body":"import Statistics\nfunction sum_average(arr)\n  floor(sum(mean(x) for x in arr))\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202458,"user_id":null,"body":"function sum_average(arr)\n    floor(sum([sum(row) \/ length(row) for row in arr]))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202459,"user_id":null,"body":"function sum_average(arr)\n    return floor(sum(sum.(arr) .\/ map(x -> x = length(x), arr)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202460,"user_id":1474,"body":"function sum_average(arr)\n  floor(sum([sum(a) \/ length(a) for a in arr]))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202461,"user_id":null,"body":"sum_average(arr) = floor(sum(map(a -> mean(a), arr)))\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56d8f14cba01a83cdb0002a2":[{"id":202462,"user_id":881,"body":"function get_positions(s::Integer)::Vector{Integer}\n  digits(s % 27, base=3, pad=3)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202463,"user_id":1474,"body":"function get_positions(s::Integer)::Vector{Integer}\n  [s % 3, s \u00f7 3 % 3, s \u00f7 9 % 3]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202464,"user_id":null,"body":"get_positions(s::Integer)::Vector{Integer} = s .\u00f7 3 .^ [0:2...] .% 3","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202465,"user_id":null,"body":"function get_positions(s::Integer)::Vector{Integer}\n  parse.(Int,collect(reverse(lpad(string(s,base=3),3,\"0\"))[1:3]))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202466,"user_id":2525,"body":"function get_positions(s::Integer)::Vector{Integer}\n    digits!([0, 0, 0], s; base=3)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202467,"user_id":null,"body":"get_positions(s) = digits(s, base=3, pad=3)[1:3]\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202468,"user_id":421,"body":"function get_positions(s::Integer)::Vector{Integer}\n  [s % 3, div(s, 3) % 3, div(s, 9) % 3]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202469,"user_id":759,"body":"function get_positions(s::Integer)::Vector{Integer}\n  reverse([parse(Int, c) for c in string(s % 27, pad = 3, base = 3)])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202470,"user_id":null,"body":"get_positions(s::Integer)::Vector{Integer} = [s%3, floor(Int, s\/3)%3, floor(Int, s\/9)%3]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202471,"user_id":572,"body":"function get_positions(n::Integer)::Vector{Integer}\n   [n%3, fld(n,3)%3, fld(n,9)%3]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56dbe0e313c2f63be4000b25":[{"id":202472,"user_id":null,"body":"module SqStr\n    export vert_mirror, hor_mirror, oper\n\n    function vert_mirror(strng)\n        join(reverse.(split(strng, \"\n\")), \"\n\")\n    end\n    function hor_mirror(strng)\n        join(reverse(split(strng, \"\n\")), \"\n\")\n    end\n    function oper(fct, s)\n        fct(s)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202473,"user_id":null,"body":"module SqStr\n    export vert_mirror, hor_mirror, oper\n\n    vert_mirror(str) = join(reverse.(split(str, '\n')), '\n')\n    hor_mirror(str) = join(reverse(split(str, '\n')), '\n')\n    oper(fct, s) = fct(s)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202474,"user_id":492,"body":"module SqStr\n    export vert_mirror, hor_mirror, oper\n\n    function vert_mirror(strng)\n        join([reverse(line) for line in split(strng, \"\n\")], \"\n\")\n    end\n    function hor_mirror(strng)\n        join(reverse(split(strng, \"\n\")), \"\n\")\n    end\n    function oper(fct, s)\n        fct(s)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202475,"user_id":null,"body":"module SqStr\n    export vert_mirror, hor_mirror, oper\n\n    vert_mirror(strng) = join(map(reverse, split(strng, \"\n\")), \"\n\")\n\n    hor_mirror(strng) = join(reverse(split(strng, \"\n\")), \"\n\")\n\n    oper(fct, s) = fct(s)\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202476,"user_id":null,"body":"module SqStr\n    export vert_mirror, hor_mirror, oper\n    function vert_mirror(strng)\n        start_string=\"\"\n        for num in split(strng,\"\n\")\n          start_string *=reverse(num)*string(\"\n\")\n        end\n        return start_string[1:end-1]\n    end\n    function hor_mirror(strng)\n        start_string=\"\"\n        for num in reverse(split(strng,\"\n\"))\n          start_string *=num*string(\"\n\")\n        end\n        return start_string[1:end-1] \n    end\n    function oper(fct, s)\n        return(fct(s))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202477,"user_id":null,"body":"module SqStr\n    export vert_mirror, hor_mirror, oper\n\n    function vert_mirror(strng)\n        v = \"\"\n        for line in split(strng, \"\n\")\n          v *= reverse(line) * '\n'\n        end\n        return rstrip(v)\n    end\n    function hor_mirror(strng)\n        v = \"\"\n        for line in split(strng, \"\n\")\n          v = line * '\n' * v\n        end\n        return rstrip(v)\n    end\n    function oper(fct, s)\n        return fct(s)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202478,"user_id":null,"body":"module SqStr\n    export vert_mirror, hor_mirror, oper\n\n    function vert_mirror(strng)\n        splt = [reverse(x) for x in split(strng, \"\n\")]\n        return join(splt, \"\n\")\n    end\n    function hor_mirror(strng)\n        splt = split(strng, \"\n\") |> reverse\n        return join(splt, \"\n\")\n    end\n    function oper(fct, s)\n        fct(s)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202479,"user_id":null,"body":"module SqStr\n    export vert_mirror, hor_mirror, oper\n\n    function vert_mirror(strng)\n        join([reverse(x) for x in split(strng)], \"\n\")\n    end\n    function hor_mirror(strng)\n        arr = split(strng, \"\n\")\n        i = 1\n        j = lastindex(arr)\n        while i < j\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        end\n        join(arr, \"\n\")\n    end\n    function oper(fct, s)\n        fct(s)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202480,"user_id":null,"body":"module SqStr\nexport vert_mirror, hor_mirror, oper\n\nfunction vert_mirror(strng)\n  join(map(reverse, split(strng, '\n')), '\n')\nend\nfunction hor_mirror(strng)\n  join(reverse(split(strng, '\n')), '\n')\nend\nfunction oper(fct, s)\n  fct(s)\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202481,"user_id":209,"body":"module SqStr\n    export vert_mirror, hor_mirror, oper\n    vert_mirror(q)=map(reverse, split(q))\n    hor_mirror(q)=reverse(split(q))\n    oper(fct, s)=join(fct(s),\"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56dbe7f113c2f63570000b86":[{"id":202482,"user_id":492,"body":"module MoveII\n    export rot, selfie_and_rot, oper\n\n    function rot(strng)\n        reverse(strng)\n    end\n    function selfie_and_rot(strng)\n        s1 = join([ s * \".\" ^ length(s) for s in split(strng, \"\n\") ], \"\n\")   \n        s1 * \"\n\" * rot(s1)\n    end\n    function oper(fct, s)\n        fct(s)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202483,"user_id":null,"body":"module MoveII\n    export rot, selfie_and_rot, oper\n\n    function rot(strng)\n        result = \"\"\n        strings = split(strng,'\n')\n        for str in reverse(strings)\n          result *= reverse(str)*\"\n\"\n        end\n    return(result[1:end-1])\n    end\n    function selfie_and_rot(strng)\n        result = \"\"\n        strings = split(strng,'\n')\n        for str in strings\n          result *= str*\".\"^length(str) *\"\n\"\n        end\n        for str in reverse(strings)\n          result *= \".\"^length(str) *reverse(str)*\"\n\"\n        end\n    return(result[1:end-1])\n    end\n    function oper(fct, s)\n        fct(s)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202484,"user_id":null,"body":"module MoveII\n    export rot, selfie_and_rot, oper\n\n    reverse_string(s) = s[length(s):-1:1]\n\n    dots_after(s) = string(s, repeat(\".\", length(s)))\n\n    dots_before(s) = string(repeat(\".\", length(s)), s)\n\n    function rot(strng)\n        join(map(reverse_string, reverse(split(strng, \"\n\"))), \"\n\")\n    end\n\n    function selfie_and_rot(strng)\n        a = split(strng, \"\n\")\n        upper = map(dots_after, a)\n        lower = map(dots_before, map(reverse_string, reverse(a)))\n        join([upper;lower], \"\n\")\n    end\n\n    function oper(fct, s)\n        fct(s)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202485,"user_id":null,"body":"module MoveII\n    export rot, selfie_and_rot, oper\n\n    function rot(s)\n        n, m = findfirst('\n', s), count(\"\n\", s)+1\n        join(rot180(reshape(collect(s * '\n'), n, m)))[2:end]\n    end\n\n    function selfie_and_rot(s)\n        str = replace(s, '\n'=> \".\"^(count(\"\n\", s)+1) * '\n') * \".\"^(count(\"\n\", s)+1) \n        str * '\n' * rot(str)\n    end\n\n    function oper(fct, s)\n        fct(s) \n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202486,"user_id":null,"body":"module MoveII\n    export rot, selfie_and_rot, oper\n\n    function rot(strng)\n        split(strng, \"\") |> reverse |> join\n    end\n\n    function selfie_and_rot(strng)\n        top = split(strng, \"\n\") .|> x -> x*\".\"^length(x)\n        bottom = split(rot(strng), \"\n\") .|> x -> \".\"^length(x)*x\n        join(vcat(top,bottom), \"\n\")\n    end\n\n    oper(fct, s) = fct(s)\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202487,"user_id":null,"body":"module MoveII\nexport rot, selfie_and_rot, oper\n\nrot = reverse\n\nfunction selfie_and_rot(strng)\n  s = join(map(l -> l * '.'^length(l), split(strng)), '\n')\n  s * '\n' * rot(s)\nend\n\noper(fct, s) = fct(s)\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202488,"user_id":null,"body":"module MoveII\n    export rot, selfie_and_rot, oper\n\n    function rot(strng)\n        (*)([reverse(line)*\"\n\" for line in reverse(split(strng))]...)[begin:end-1]\n    end\n    function selfie_and_rot(strng)\n        lengthend=[elem*repeat('.',length(elem)) for elem in split(strng)]\n        return (*)([line*\"\n\" for line in lengthend]...)*(*)([reverse(line)*\"\n\" for line in reverse(lengthend)]...)[begin:end-1]\n    end\n    function oper(fct, s)\n        fct(s)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202489,"user_id":null,"body":"module MoveII\n    export rot, selfie_and_rot, oper\n\n    function rot(strng)\n        reverse(strng)\n    end\n    function selfie_and_rot(strng)\n        s = split(strng, \"\n\")\n        del = \".\"^length(s[1])\n        s = join(s, del * \"\n\")\n        s * del * \"\n\" * rot(del) * rot(s)\n    end\n    function oper(fct, s)\n        fct(s)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202490,"user_id":null,"body":"module MoveII\n    export rot, selfie_and_rot, oper\n\n    function rot(strng)\n        split(strng, \"\n\") .|> reverse |> reverse |> x -> join(x, '\n')\n    end\n    function selfie_and_rot(strng)\n        tl = join(split(strng, \"\n\") .|> x -> x*\".\"^length(x), \"\n\")\n        br = join(split(rot(strng), \"\n\") .|> x -> \".\"^length(x)*x, \"\n\")\n        join(vcat(tl, br), \"\n\")\n    end\n    function oper(fct, s)\n        fct(s)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202491,"user_id":null,"body":"module MoveII\n    export rot, selfie_and_rot, oper\n\n    function rot(strng)\n        return strng[end:-1:1]\n    end\n    function selfie_and_rot(strng)\n        s = strng\n        lst = Base.split(s, '\n')\n        res = \"\"\n        for i in lst\n            res = string(res, i, '.'^length(i),'\n')\n        end\n        s = rot(s)\n        lst = Base.split(s, '\n')\n        for i in lst\n            res = string(res, '.'^length(i), i, '\n')\n        end\n        return res[1:end-1]\n    end\n    function oper(fct, s)\n        if fct == rot\n            return rot(s)\n        elseif fct == selfie_and_rot\n            return selfie_and_rot(s)\n        end\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56dbeec613c2f63be4000be6":[{"id":202492,"user_id":null,"body":"module MoveIII\n    export rot_90_clock, diag_1_sym, selfie_and_diag1, oper\n    function rot_90_clock(strng)\n        a = split(strng, \"\n\")\n        n = length(a)\n        join([join([a[n+1-j][i] for j=1:n],\"\") for i=1:n], \"\n\")\n    end\n\n    function diag_1_sym(strng)\n        a = split(strng, \"\n\")\n        n = length(a)\n        join([join([a[j][i] for j=1:n],\"\") for i=1:n], \"\n\")\n    end\n    \n    function selfie_and_diag1(strng)\n        a = split(strng, \"\n\")\n        n = length(a)\n        b = [join([a[j][i] for j=1:n],\"\") for i=1:n]\n        join([i*\"|\"*j for (i,j)=zip(a,b)], \"\n\")\n    end\n\n    function oper(fct, s)\n        fct(s)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202493,"user_id":null,"body":"module MoveIII\n    export rot_90_clock, diag_1_sym, selfie_and_diag1, oper\n\n    function rot_90_clock(s)\n        n, m = findfirst('\n', s)-1, count(\"\n\", s) + 1\n        mat = rotr90(permutedims(reshape(collect(replace(s, '\n'=> \"\")), n, m)))\n        join([join(mat[i,:]) for i in 1:m], '\n')\n    end\n\n    function diag_1_sym(s)\n        n, m = findfirst('\n', s)-1, count(\"\n\", s) + 1\n        mat = reshape(collect(replace(s, '\n'=> \"\")), n, m)\n        join([join(mat[i,:]) for i in 1:m], '\n')\n    end\n    \n    function selfie_and_diag1(s)\n        join([join(i,\"|\") for i in zip(split(s,'\n'), split(diag_1_sym(s),'\n'))], '\n')\n    end\n\n    function oper(fct, s)\n        fct(s)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202494,"user_id":null,"body":"module MoveIII\n    export rot_90_clock, diag_1_sym, selfie_and_diag1, oper\n\n    function rot_90_clock(strng)\n        split_string = split(diag_1_sym(strng), '\n')\n        split_string = [reverse(x) for x in split_string]\n        return join(split_string, '\n')\n    end\n\n    function diag_1_sym(strng)\n        split_string = split(strng, '\n')\n        split_char_array = [collect(x) for x in split_string]\n        n = length(split_string[1])\n        for i in 1:n, j in i:n\n              split_char_array[j][i], split_char_array[i][j] = split_char_array[i][j], split_char_array[j][i]\n        end\n        diag_strng = [join(x) for x in split_char_array]\n        return join(diag_strng, '\n')\n    end\n    \n    function selfie_and_diag1(strng)\n        split_string = split(strng, '\n')\n        diag_string = split(diag_1_sym(strng), '\n')\n        split_string = [x[1]*\"|\"*x[2] for x in zip(split_string,diag_string)]\n        return join(split_string, '\n')\n    end\n\n    oper(fct, s) = fct(s)\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202495,"user_id":null,"body":"module MoveIII\n    export rot_90_clock, diag_1_sym, selfie_and_diag1, oper\n\n    function rot_90_clock(strng)  \n        s = split(strng, \"\n\")\n        n = length(s[1])\n        m = vcat([reshape(split(x, \"\"), 1, n) for x=s]...)\n        join([join(reverse(m[:, i])) for i=1:n], \"\n\")\n    end\n\n    function diag_1_sym(strng)\n        s = split(strng, \"\n\")\n        n = length(s[1])\n        m = hcat([split(x, \"\") for x=s]...)\n        join([join(m[i, :]) for i=1:n], \"\n\")\n    end\n    \n    function selfie_and_diag1(strng)\n       a = split(strng, \"\n\")\n       b = split(diag_1_sym(strng), \"\n\")\n       join([join(x, \"|\") for x=zip(a, b)], \"\n\")\n    end\n\n    function oper(fct, s)\n        fct(s)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202496,"user_id":1474,"body":"module MoveIII\n  export rot_90_clock, diag_1_sym, selfie_and_diag1, oper\n\n  function conv(stg)\n    split(stg, '\n')\n  end\n\n  function rot_90_clock(strng)\n    [reverse(s) for s in diag_1_sym(strng)]\n  end\n\n  function diag_1_sym(strng)\n    arr = conv(strng)\n    rows, cols = length(arr), length(arr[1])\n    [join([arr[i][j] for i in 1:rows]) for j in 1:cols]\n  end\n\n  function selfie_and_diag1(strng)\n    arr = conv(strng)\n    [\"$a|$b\" for (a, b) in zip(arr, diag_1_sym(strng))]\n  end\n\n  function oper(fct, s)\n    join(fct(s), '\n')\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202497,"user_id":null,"body":"module MoveIII\n    export rot_90_clock, diag_1_sym, selfie_and_diag1, oper\n\n    sq_size(str) = count(x->x=='\n', str)+1\n\n    str_to_mat(str, size) = reshape(Vector{Char}(str), size, :)\n    \n    remove_n(str) = replace(str, \"\n\"=>\"\")\n    \n    function rot_90_clock(strng)\n        join(rotl90(hcat(Vector{Char}('\n'^sq_size(strng)), str_to_mat(remove_n(strng), sq_size(strng)))))[1:end-1]\n    end\n    \n    function diag_1_sym(strng)\n        join(vcat(str_to_mat(join(reverse.(split(rot_90_clock(strng), '\n'))), sq_size(strng)), str_to_mat(\"\n\"^sq_size(strng), 1)))[1:end-1]\n    end\n    \n    function selfie_and_diag1(strng)\n        join(vcat(str_to_mat(remove_n(strng), sq_size(strng)), str_to_mat(\"|\"^sq_size(strng), 1), str_to_mat(remove_n(diag_1_sym(strng)), sq_size(strng)), str_to_mat(\"\n\"^sq_size(strng), 1)))[1:end-1]\n    end\n    \n    oper(fct, s) = fct(s)\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202498,"user_id":492,"body":"module MoveIII\n    using Printf\n    export rot_90_clock, diag_1_sym, selfie_and_diag1, oper\n\n    function rot_90_clock(strng)\n        k = split(strng, \"\n\")\n        [reverse(join([s[num] for s in k], \"\")) for num in 1:length(k)]\n    end\n\n    function diag_1_sym(strng)\n        k = split(strng, \"\n\")\n        [join([s[num] for s in k], \"\") for num in 1:length(k)]\n    end\n    \n    function selfie_and_diag1(strng)\n        o = split(oper(diag_1_sym, strng), \"\n\")\n        s = split(strng, \"\n\")\n        [@sprintf(\"%s|%s\", i, j) for (i, j) in collect(zip(s, o))]\n    end\n\n    function oper(fct, s)\n        join(fct(s), \"\n\")\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56dbf59b0a10feb08c000227":[{"id":202499,"user_id":209,"body":"module Move4\n    export rot_90_counter, diag_2_sym, selfie_diag2_counterclock, oper\n    rot_90_counter(T)=map(join, reverse(collect(zip(split(T)...))))\n    diag_2_sym(Q)=map(reverse, rot_90_counter(Q))\n    selfie_diag2_counterclock(T)=[join(i,\"|\") for i in zip(split(T), diag_2_sym(T), rot_90_counter(T))]\n    oper(a,b)=join(a(b),\"\n\")\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202500,"user_id":null,"body":"module Move4\n    export rot_90_counter, diag_2_sym, selfie_diag2_counterclock, oper\n\n    function diag_2_sym(s)\n        n, m = findfirst('\n', s) - 1, count(\"\n\", s) + 1\n        reverse(join([join(reshape(collect(replace(s, '\n'=> \"\")), n, m)[i,:]) for i in 1:m], '\n'))\n    end\n\n    function rot_90_counter(s)\n        join([reverse(i) for i in split(diag_2_sym(s),'\n')], '\n')\n    end\n\n    function selfie_diag2_counterclock(s)\n        join([join(i,\"|\") for i in zip(split(s,'\n'), split(diag_2_sym(s),'\n'), split(rot_90_counter(s),'\n'))], '\n')\n    end\n\n    function oper(fct, s)\n        fct(s)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202501,"user_id":2525,"body":"module Move4\n    export rot_90_counter, diag_2_sym, selfie_diag2_counterclock, oper\n\n    function diag_2_sym(strng)\n        lines = split(strng, \"\n\")\n        dim = length(lines)\n        \n        join([join([lines[dim-i+1][dim-j+1] for i in 1:dim]) for j in 1:dim], \"\n\")\n    end\n    function rot_90_counter(strng)\n        lines = split(strng, \"\n\")\n        dim = length(lines)\n        \n        join([join([lines[i][dim-j+1] for i in 1:dim]) for j in 1:dim], \"\n\")\n    end\n    function selfie_diag2_counterclock(strng)\n        lines = split(strng, \"\n\")\n        dim = length(lines)\n        \n        join([join([lines[j][i] for i in 1:dim])  * \"|\" * join([lines[dim-i+1][dim-j+1] for i in 1:dim]) * \"|\" * join([lines[i][dim-j+1] for i in 1:dim])   for j in 1:dim], \"\n\")  \n    end  \n    function oper(fct, s)\n        fct(s)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202502,"user_id":2525,"body":"module Move4\n    export rot_90_counter, diag_2_sym, selfie_diag2_counterclock, oper\n\n    function diag_2_sym(strng)\n        if length(strng)==1\n            return strng\n        end\n  \n        lines = split(strng, \"\n\")\n        dim = length(lines)\n        \n        join([join([lines[dim-i+1][dim-j+1] for i in 1:dim]) for j in 1:dim], \"\n\")\n    end\n    function rot_90_counter(strng)\n        if length(strng)==1\n            return strng\n        end\n  \n        lines = split(strng, \"\n\")\n        dim = length(lines)\n        \n        join([join([lines[i][dim-j+1] for i in 1:dim]) for j in 1:dim], \"\n\")\n    end\n    function selfie_diag2_counterclock(strng)\n        if length(strng)==1\n            return strng * \"|\" * strng * \"|\" * strng\n        end\n\n        lines = split(strng, \"\n\")\n        dim = length(lines)\n        \n        join([join([lines[j][i] for i in 1:dim])  * \"|\" * join([lines[dim-i+1][dim-j+1] for i in 1:dim]) * \"|\" * join([lines[i][dim-j+1] for i in 1:dim])   for j in 1:dim], \"\n\")  \n    end  \n    function oper(fct, s)\n        # Hmm, random tests might be broken. I see calls to diag_2_symSE and rot_90_counterSE from oper(...)\n        # which are not mine and are excepting on \n        #     ERROR: LoadError: LoadError: MethodError: no method matching split(::Array{String,1}, ::String)\n        #     ...\n        # Catch those calls to these functions and replace them by functions that work\n        if String(Symbol(fct)) == \"diag_2_symSE\"\n            return diag_2_sym(s)\n        elseif String(Symbol(fct)) == \"rot_90_counterSE\"\n            return rot_90_counter(s)\n        end\n  \n        fct(s)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202503,"user_id":492,"body":"module Move4\n    using Printf\n    export rot_90_counter, diag_2_sym, selfie_diag2_counterclock, oper\n\n    function diag_2_sym(strng)\n        k = split(strng, \"\n\")\n        reverse([join(reverse([k[j][i] for j in 1:length(k)]), \"\") for i in 1:length(k)])\n    end\n    function rot_90_counter(strng)\n        k = split(strng, \"\n\")\n        n = length(k)\n        [join([k[j][n-i+1] for j in 1:n] , \"\") for i in 1:n]\n    end\n    function selfie_diag2_counterclock(strng)\n        o1 = split(strng, \"\n\")\n        o2 = split(oper(diag_2_sym, strng), \"\n\")\n        o3 = split(oper(rot_90_counter, strng), \"\n\")\n        [@sprintf(\"%s|%s|%s\", i, j, k) for (i, j, k) in collect(zip(o1, o2, o3))]\n    end  \n    function oper(fct, s)\n        join(fct(s), \"\n\")\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56dec885c54a926dcd001095":[{"id":202504,"user_id":527,"body":"module Solution opposite = - end","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202505,"user_id":2525,"body":"module Solution\n  export opposite\n  opposite(number) = -number\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202506,"user_id":null,"body":"module Solution\n  export opposite\n  function opposite(number)\n    0 - number\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202507,"user_id":null,"body":"module Solution\n  export opposite\n  function opposite(number)\n    return 0 - number\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202508,"user_id":null,"body":"module Solution\n  export opposite\n  function opposite(number)\n    return -1number\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202509,"user_id":null,"body":"module Solution\n  export opposite\n  opposite = -\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202510,"user_id":null,"body":"module Solution\n  export opposite\n  function opposite(number)\n    # your code goes here\n  return number * -1;\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202511,"user_id":null,"body":"module Solution\n  export opposite\n  function opposite(number)\n    # your code goes here\n    return -number\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202512,"user_id":null,"body":"module Solution\n  export opposite\n  function opposite(number)\n    if number != 0\n      return -number\n    else\n      return 0\n    end\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202513,"user_id":null,"body":"module Solution\n  export opposite\n  function opposite(number)\n    if number < 0\n      number * -1\n    else\n      -number\n    end\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56e3cd1d93c3d940e50006a4":[{"id":202514,"user_id":492,"body":"module Valley\n    export make_valley\n\n    function make_valley(arr)\n        a=sort(arr, rev=true)\n        vcat(a[1:2:end], reverse(a[2:2:end]))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202515,"user_id":421,"body":"module Valley\n    export make_valley\n\n    function make_valley(arr)\n        arr = sort(arr, rev = true)\n        a = [x for (i, x) in enumerate(arr) if isodd(i)]\n        cat(dims = 1, a, reverse([x for (i, x) in enumerate(arr) if iseven(i)]))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202516,"user_id":null,"body":"module Valley\n    export make_valley\n\n    function make_valley(arr)\n        oddlen = isodd(length(arr))\n        a = sort(arr, rev=true)\n        m = reshape(oddlen ? [a..., 1] : a, 2, :)\n        [m[1, :]..., reverse(m[2, :][1:end-oddlen])...]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202517,"user_id":null,"body":"module Valley\n    export make_valley\n\n    function make_valley(arr)\n        arr = sort(arr,rev = true)\n        vcat(arr[begin:2:end],reverse(arr[begin+1:2:end]))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202518,"user_id":null,"body":"module Valley\n    export make_valley\n\n    function make_valley(arr)\n        sarr = sort(arr)\n        valley = vcat(reverse(sarr[2:2:end]), sarr[1:2:end])\n        return length(valley) % 2 == 0 ? valley : reverse(valley)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202519,"user_id":null,"body":"module Valley\n    export make_valley\n\n    function make_valley(arr)\n        swaperoo(a, n, m) = vcat(reverse(sort!(a)[n:2:end]), a[m:2:end])\n        isodd(length(arr)) ? swaperoo(arr, 1, 2) : swaperoo(arr, 2, 1)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202520,"user_id":53,"body":"module Valley\n  export make_valley\n\n  function make_valley(arr)\n    xs=sort(arr, rev=true)\n    a=xs[1:2:end]\n    b=reverse(xs[2:2:end])\n    [a; b]\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202521,"user_id":null,"body":"module Valley\n    export make_valley\n\n    function make_valley(arr)\n        evenarr = iseven(length(arr))\n        newarr = []\n        for (n, loc) in enumerate(sortperm(arr))\n            iseven(n+evenarr) ? push!(newarr, arr[loc]) : pushfirst!(newarr, arr[loc])\n        end\n        return newarr\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202522,"user_id":881,"body":"module Valley\nexport make_valley\nusing Base.Iterators: partition, peel\n\nfunction make_valley(arr)\n    sorted = sort(arr)\n    result = []\n    if isodd(length(arr))\n        head, sorted = peel(sorted)\n        push!(result, head)\n    end\n    for ns in partition(sorted, 2)\n        push!(result, ns[1])\n        length(ns) == 2 && pushfirst!(result, ns[2])\n    end\n    result\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202523,"user_id":null,"body":"module Valley\nexport make_valley\n\nfunction make_valley(arr)\n  result = []\n  arr = sort(arr)\n  if length(arr) % 2 == 1\n    push!(result, arr[1])\n    arr = arr[2:end]\n  end\n  for (i, x) in enumerate(arr)\n    if isodd(i)\n      push!(result, x)\n    else\n      prepend!(result, x)\n    end\n  end\n  result\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56e7d40129035aed6c000632":[{"id":202524,"user_id":492,"body":"module Easy\n    export easyline\n\n    function easyline(n)\n        binomial(BigInt(2 * n), BigInt(n))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202525,"user_id":null,"body":"module Easy\n    export easyline\n\n    function easyline(n)\n      sum([binomial(BigInt(n), k)^2 for k in 0:n])\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202526,"user_id":null,"body":"module Easy\n    export easyline\n    easyline(n) = binomial(BigInt(2n), BigInt(n))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202527,"user_id":null,"body":"module Easy\n    export easyline\n\n    function easyline(n)\n        binomial(big(2n),big(n))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202528,"user_id":881,"body":"module Easy\nexport easyline\n\nfunction easyline(n)\n    sum((factorial(big(n)) \u00f7 (factorial(big(k)) * factorial(big(n - k)))) ^ 2 for k in 0:n)\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202529,"user_id":1474,"body":"module Easy\n  export easyline\n\n  function easyline(n)::BigInt\n    n == 0 ? 1 : easyline(n - 1) * (4 * n - 2) \u00f7 n\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202530,"user_id":null,"body":"module Easy\n    export easyline\n\n    function easyline(n)\n        [factorial(BigInt(n))\u00f7(factorial(m)*factorial(n-m)) for m in 0:BigInt(n)].^2 |> sum\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202531,"user_id":null,"body":"module Easy\nexport easyline\nfunction easyline(n)\n  triangle = [BigInt(1)]\n  for _ = 1:n\n    triangle = [BigInt(1), map((x, y) -> x + y, triangle, vcat(triangle[2:end], 0))[1:end - 1]..., BigInt(1)]\n  end\n  sum(map(x -> x^2, triangle))\nend\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202532,"user_id":null,"body":"module Easy\n  export easyline\n  function easyline(n)\n    sum(map(k -> binomial(big(n),big(k))^2, 0:n))\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202533,"user_id":527,"body":"module Easy\n    export easyline\n\n    function easyline(n)\n        n = BigInt(n)\n        binomial(2n, n)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56ed20a2c4e5d69155000301":[{"id":202534,"user_id":492,"body":"module Scaling\n    export scale\n\n    function scale(s, k, n)\n        result = \"\"\n        for p in split(s, \"\n\")\n            tmp = \"\"\n            for i in 1:length(p)\n                tmp *= string(p[i]) ^ k\n            end\n            result *= (tmp * \"\n\") ^ n\n        end\n        strip(result)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202535,"user_id":null,"body":"module Scaling\n    export scale\n\n    function scale(s, k, n)\n       (s|> split .|> collect .|> x->x.^k |> join) |> x->repeat(x,inner=n) |> x->join(x,\"\n\")\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202536,"user_id":null,"body":"module Scaling\n    export scale\n\n    # Julia v1.0\n    # scale(s, k, v) = join(repmat(string.(repmat(collect.(split(s)), k)...), v), \"\n\")\n\n    # Julia v0.6\n    scale(s, k, v) = join(repeat([join(map(j->repeat(\"$j\", k), collect(i))) for i in split(s)], inner=v), \"\n\")  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202537,"user_id":null,"body":"module Scaling\n    export scale\n\n    function scale(s, k, n)\n        chop(join((join(ch^k for ch in row)*'\n')^n for row in split(s, '\n', keepempty=false)))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202538,"user_id":null,"body":"module Scaling\n    export scale\n\n    function scale(s, k, n)\n        s = [join([repeat(c,k) for c in w]) for w in split(s)]\n        s = s .* \"\n\"\n        s = join([repeat(w, n) for w in s])\n        return strip(s)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202539,"user_id":null,"body":"module Scaling\n    export scale\n\n    function scale(s, k, n)\n        if s == \"\"\n            return \"\"\n        end\n\n        return join([(join(row.^k) * \"\n\")^n for row in [split(r, \"\") for r in split(s, '\n')]])[1:end-1]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202540,"user_id":881,"body":"module Scaling\nexport scale\n\nfunction scale(str::AbstractString, h::Integer, v::Integer)\n    rstrip(join(map(line -> join([line...] .^ h) * '\n', split(str, '\n')) .^ v))\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202541,"user_id":null,"body":"module Scaling\n    export scale\n\n    function scale(s, k, n)\n        if s == \"\"\n          return \"\"\n        end\n  \n        splitted=split(s,'\n')\n        res=\"\"\n        for line in splitted\n          res *= repeat(string(push!(replace(x->repeat(x,k),[string(char) for char in line]),\"\n\")...),n)\n        end\n        res[1:end-1]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202542,"user_id":null,"body":"module Scaling\nexport scale\n\nfunction scale(s, k, n)\n  s == \"\" ? \"\" : join(map(row -> join(repeat([join(map(c -> c^k, collect(row)))], n), '\n'), split(s, '\n')), '\n')\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202543,"user_id":53,"body":"module Scaling\n  export scale\n\n  function scale(s, k, n)\n    if length(s) == 0\n      \"\"\n    else\n      lines = split(s, \"\n\")\n      ans = []\n      for line in lines\n        for i in 1:n\n          s = \"\"\n          for ch in line\n            s = s * repeat(ch, k)\n          end\n          push!(ans, s)\n        end\n      end\n      join(ans, \"\n\")\n    end \n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56efab15740d301ab40002ee":[{"id":202544,"user_id":null,"body":"module Step\n  export oper_array\n  export gcdi\n  export lcmu\n  export som\n  export maxi\n  export mini\n\n  gcdi = gcd\n  lcmu = lcm\n  som = +\n  maxi = max\n  mini = min\n  function oper_array(fct, arr, init)\n    accumulate(fct, arr, init = init)\n  end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202545,"user_id":492,"body":"module Step\n    export oper_array\n    export gcdi\n    export lcmu\n    export som\n    export maxi\n    export mini\n\n    function gcdi(x, y)\n        x = abs(x); y = abs(y)\n        while (y != 0)\n            x, y = y, x % y\n        end\n        x\n    end\n    function lcmu(a, b)\n        div(abs(a * b), gcdi(a, b))\n    end\n    function som(a, b)\n        (a + b)\n    end\n    function maxi(a, b)\n        max(a, b)\n    end\n    function mini(a, b)\n        min(a, b)\n    end\n    function oper_array(fct, arr, init)\n        n = init\n        [n = fct(n, r) for r in arr]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202546,"user_id":null,"body":"module Step\n    export oper_array\n    export gcdi\n    export lcmu\n    export som\n    export maxi\n    export mini\n\n    function gcdi(x, y)\n        \n        while max(abs(x),abs(y)) % min(abs(x),abs(y)) > 0\n          tmp = max(abs(x),abs(y)) % min(abs(x),abs(y))\n          x = y\n          y = tmp\n        end\n        abs(y)\n    end\n    function lcmu(a, b)\n         tmp = 0\n         if a == 0 || b == 0\n          return 0\n         elseif max(abs(a),abs(b)) % min(abs(a),abs(b)) == 0\n          return max(abs(a),abs(b))\n         else\n          tmp = max(abs(a),abs(b))\n          while tmp % min(abs(a),abs(b)) != 0\n            tmp += max(abs(a),abs(b))\n          end\n         end\n         tmp\n    end\n    function som(a, b)\n         a + b\n    end\n    function maxi(a, b)\n         max(a,b)\n    end\n    function mini(a, b)\n         min(a,b)\n    end\n    function oper_array(fct, arr, init)\n        res = []\n        tmp = fct(arr[begin], init)\n        push!(res,tmp)\n        for q in 2:length(arr)\n          tmp = fct(arr[q], tmp)\n          push!(res,tmp)\n        end\n        res\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202547,"user_id":null,"body":"module Step\n    export oper_array\n    export gcdi\n    export lcmu\n    export som\n    export maxi\n    export mini\n\nfunction gcdi(x, y)\n  y == 0 && return abs(x)\n  r = x % y\n  return gcdi(y, r)\nend\n\nfunction lcmu(a, b)\n  Int(a * b \/ gcdi(a, b)) |> abs\nend\n\nfunction som(a, b)\n  a + b\nend\n\nfunction maxi(a, b)\n  max(a, b)\nend\n\nfunction mini(a, b)\n  min(a, b)\nend\n\nfunction oper_array(fct, arr, init)\n  vector = []\n  a = init\n\n  for x in arr\n    push!(vector, fct(a, x))\n    a = fct(a, x)\n  end\n  \n  vector\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202548,"user_id":null,"body":"module Step\n    export oper_array\n    export gcdi\n    export lcmu\n    export som\n    export maxi\n    export mini\n\n    function gcdi(x, y)\n        a = maxi(abs(x),abs(y))\n        b = mini(abs(x),abs(y))\n        if b == 0\n          return a\n        else\n          gcdi(b, a%b)\n        end\n    end\n    function lcmu(a, b)\n         abs(a*b)\/gcdi(a,b)\n    end\n    function som(a, b)\n         a + b\n    end\n    function maxi(a, b)\n         max(a, b)\n    end\n    function mini(a, b)\n         min(a,b)\n    end\n    function oper_array(fct, arr, init)\n        out = [fct(init,arr[1])]\n        for i in 1:length(arr)-1\n            push!(out, fct(out[i],arr[i+1]))\n        end\n        out\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202549,"user_id":null,"body":"module Step\n    export oper_array\n    export gcdi\n    export lcmu\n    export som\n    export maxi\n    export mini\n\n    gcdi(a, b) = accumulate(gcd, a; init=b)\n    lcmu(a, b) = accumulate(lcm, a; init=b)\n    som(a, b) = accumulate(+, a; init=b)\n    maxi(a, b) = accumulate(max, a; init=b)\n    mini(a, b) = accumulate(min, a; init=b)\n    oper_array(fct, arr, init) = fct(arr, init)\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202550,"user_id":53,"body":"module Step\n    export oper_array\n    export gcdi\n    export lcmu\n    export som\n    export maxi\n    export mini\n\n    function gcdi(a, b)\n         b == 0 ? abs(a) : gcdi(b, a % b)\n    end\n    function lcmu(a, b)\n         abs(a * b) \u00f7 gcdi(a, b)\n    end\n    function som(a, b)\n         a + b\n    end\n    function maxi(a, b)\n         max(a, b)\n    end\n    function mini(a, b)\n         min(a, b)\n    end\n    function oper_array(fct, arr, init)\n         ys = []\n         acc = init\n         for x in arr\n             acc = fct(acc, x)\n             push!(ys, acc)\n         end\n         ys\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202551,"user_id":null,"body":"module Step\n    export oper_array\n    export gcdi\n    export lcmu\n    export som\n    export maxi\n    export mini\n\n    function gcdi(a, b)\n        return gcd(a,b)\n    end\n    function lcmu(a, b)\n         # your code\n        return lcm(a,b)\n    end\n    function som(a, b)\n         # your code\n        return a + b\n    end\n    function maxi(a, b)\n         # your code\n        return max(a,b)\n    end\n    function mini(a, b)\n         # your code\n        return min(a,b)\n    end\n    function oper_array(fct, arr, init)\n          f = []\n          for i in arr\n            push!(f,fct(i,init))\n            init = fct(i,init)\n          end\n          return f\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202552,"user_id":null,"body":"module Step\n  export oper_array\n  export gcdi\n  export lcmu\n  export som\n  export maxi\n  export mini\n\n  gcdi(x, y) = gcd(x, y)\n  lcmu(a, b) = lcm(a,b)\n  som(a, b)  = a + b\n  maxi(a, b) = max(a, b)\n  mini(a, b) = min(a, b)\n\n  function oper_array(fct, arr, init)\n    n = init\n    (a -> n = fct(n, a)).(arr)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202553,"user_id":null,"body":"module Step\n  export oper_array\n  export gcdi\n  export lcmu\n  export som\n  export maxi\n  export mini\n\n  gcdi(x, y) = gcd(x, y)\n  lcmu(a, b) = lcm(a,b)\n  som(a, b)  = a + b\n  maxi(a, b) = max(a, b)\n  mini(a, b) = min(a, b)\n\n  function oper_array(fct, arr, init)\n    pushfirst!(arr, init)\n    ((i) -> (arr[i] = fct(arr[i - 1], arr[i]))).(2:length(arr))\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56efc695740d30f963000557":[{"id":202554,"user_id":null,"body":"function to_alternating_case(str)\n  map(swapcase, str)\nend\n\nfunction swapcase(c)\n  if islowercase(c)\n    uppercase(c)\n  elseif isuppercase(c)\n    lowercase(c)\n  else\n    c\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202555,"user_id":null,"body":"function to_alternating_case(string)\n  join(collect((islowercase(x) ? uppercase(x) : lowercase(x)) for x in string))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202556,"user_id":1474,"body":"function to_alternating_case(string)\n  join(islowercase(c) ? uppercase(c) : isuppercase(c) ? lowercase(c) : c for c in string)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202557,"user_id":null,"body":"function to_alternating_case(string)\n  return join([isuppercase(c) ? lowercase(c) : uppercase(c) for c in string], \"\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202558,"user_id":null,"body":"function to_alternating_case(string)\n  \n  result = \"\"\n  \n  for c in string\n    if lowercase(c) in 'a':'z'\n      result *= islowercase(c) ? uppercase(c) : lowercase(c)\n    else\n      result *= c\n    end\n  end\n  \n  result\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202559,"user_id":null,"body":"to_alternating_case(string) = join(isuppercase(char) ? lowercase(char) : uppercase(char) for char in string)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202560,"user_id":421,"body":"function to_alternating_case(string)\n  join(islowercase(x) ? uppercase(x) : isuppercase(x) ? lowercase(x) : x for x in string)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56f173a35b91399a05000cb7":[{"id":202561,"user_id":527,"body":"function find_longest(str)\n  maximum(length, split(str))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202562,"user_id":null,"body":"find_longest(s) = maximum(length, split(s))","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202563,"user_id":null,"body":"function find_longest(s)\n  maximum(length(w) for w in split(s))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202564,"user_id":527,"body":"function find_longest(s::String)::Int\n  maximum(length, split(s))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202565,"user_id":50,"body":"function find_longest(str)\n  return maximum(length(s) for s in split(str,\" \"))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202566,"user_id":null,"body":"function find_longest(string)\n  spl = collect(split(string, \" \"))\n  longest=0\n  for i in spl\n    if length(i) > longest\n      longest = length(i)\n    end\n  end\n  return longest\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202567,"user_id":null,"body":"function find_longest(strng)\n  spl = split(strng, \" \")\n  longest = 0\n  for word in spl\n    if length(word) > longest\n      longest = length(word)\n    end\n  end\n  return longest\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202568,"user_id":null,"body":"find_longest(strng) = maximum(length.(split(strng)))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202569,"user_id":null,"body":"function find_longest(strng)\n  max(map(length, split(strng))...)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202570,"user_id":53,"body":"function find_longest(str)\n  spl = split(str, \" \")\n  longest = 0\n  i=1\n  while i <= length(spl)\n    if length(spl[i]) > longest\n      longest = length(spl[i])\n    end\n    i += 1\n  end\n  return longest\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56f253dd75e340ff670002ac":[{"id":202571,"user_id":492,"body":"function compose(s1, s2)\n    ss1 = split(s1, \"\n\"); ss2 = split(s2, \"\n\"); n = length(ss1)\n    join((ss1[i][1:i] * ss2[n-i+1][1:n-i+1] for i in 1:n), \"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202572,"user_id":null,"body":"function compose(s1, s2)\n    splitted1 = split(s1,\"\n\")\n    splitted2 = split(s2,\"\n\")\n  \n    for q in 1:length(splitted1)\n      splitted1[q] = splitted1[q][1:q]\n      splitted2[q] = splitted2[q][1:q]\n    end\n    \n    rev = reverse(splitted2)\n    join(collect(splitted1[i]*rev[i] for i in 1:length(splitted1)),\"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202573,"user_id":null,"body":"compose(s1, s2) = join([v[1:i] * reverse(split(s2,'\n'))[i][1:length(v)-i+1] for (i,v) in enumerate(split(s1,'\n'))], '\n')","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202574,"user_id":null,"body":"function compose(s1, s2)\n  l1, l2 = split(s1), split(s2)\n  join(map(i -> l1[i][1:i] * l2[end - i + 1][1:end - i + 1], 1:length(l1)), '\n')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202575,"user_id":881,"body":"function compose(s1, s2)\n    join((l[begin:i] * r[1:end+1-i] for (i, (l, r)) in enumerate(zip(split(s1), reverse(split(s2))))), '\n')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202576,"user_id":1474,"body":"function compose(s1, s2)\n  s3, s4 = split(s1), split(s2)\n  join([s3[i][1:i] * s4[end+1-i][1:end+1-i] for i in 1:length(s3)], '\n')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202577,"user_id":null,"body":"function compose(s1, s2)\n    cut_s(s) = split(s, '\n') |> l -> [l[i][1:i] for i in 1:length(l)]\n    join(cut_s(s1) .* reverse(cut_s(s2)), '\n')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202578,"user_id":759,"body":"function compose(s1, s2)\n  a, b = split.((s1, s2), '\n')\n  n = length(a)\n  join([string(a[i][1:i], b[n-i+1][1:(n-i+1)]) for i in 1:n], '\n')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202579,"user_id":null,"body":"function compose(s1, s2)\n  a1, a2 = split(s1), reverse(split(s2))\n  join((string(a1[i][1:i], a2[i][1:length(a2)-i+1]) for i in 1:length(a1)), \"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56f3a1e899b386da78000732":[{"id":202580,"user_id":null,"body":"module Part\n    export partlist\n\n    partlist(a) = [[join(a[1:i], ' '), join(a[i+1:end], ' ')] for i in 1:length(a)-1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202581,"user_id":759,"body":"module Part\n    export partlist\n\n    function partlist(a)\n        [[join(a[1:n], \" \"), join(a[(n+1):length(a)], \" \")] for n in 1:(length(a)-1)]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202582,"user_id":null,"body":"module Part\n    export partlist\n\n    function partlist(a)\n        [[join(a[1:i], \" \"), join(a[i+1:end], \" \")] for i in 1:length(a)-1]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202583,"user_id":null,"body":"module Part\n  export partlist\n  function partlist(a)\n    result=[]\n    for i=1:length(a)-1\n      push!(result,[join(a[1:i],\" \"), join(a[i+1:end],\" \")])\n    end\n    result\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202584,"user_id":492,"body":"module Part\n    export partlist\n\n    function partlist(a)\n        [String[join(a[1:i], \" \"), join(a[i+1:end], \" \")] for i in 1:length(a)-1]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202585,"user_id":53,"body":"module Part\n  export partlist\n  function partlist(arr) \n    [String[join(arr[1:i], \" \"), join(arr[i+1:end], \" \")] for i in 1:length(arr)-1]\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202586,"user_id":null,"body":"module Part\n    export partlist\n\n    function partlist(a)\n        result = []\n        for i in 1:(length(a) - 1)\n          push!(result, [join(a[1:i], \" \"), join(a[i+1:end], \" \")])\n        end\n        result\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202587,"user_id":null,"body":"module Part\n    export partlist\n\n    function partlist(a)\n        ll = Vector{String}[]\n        for i in 1:length(a)-1\n            j = i+1\n            push!(ll, [join(a[1:i], ' '), join(a[j:end], ' ')])\n        end\n        ll\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202588,"user_id":null,"body":"module Part\n    export partlist\n\n    function partlist(a)\n        [join.([a[1:i], a[i+1:end]], \" \") for i in 1:length(a)-1]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202589,"user_id":null,"body":"module Part\n    export partlist\n\n    function partlist(a)\n        [\n          [join(a[begin:i], \" \"), join(a[i+1:end], \" \")]\n          for i in 1:(length(a) - 1)\n        ]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56f6919a6b88de18ff000b36":[{"id":202590,"user_id":421,"body":"function how_many_dalmatians(n)\n  dogs = [\"Hardly any\", \"More than a handful!\", \"Woah that's a lot of dogs!\", \"101 DALMATIANS!!!\"]\n  n <= 10 ? dogs[1] : n <= 50 ? dogs[2] : n == 101 ? dogs[4] : dogs[3]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202591,"user_id":null,"body":"function how_many_dalmatians(n)\n  dogs = [\"Hardly any\", \"More than a handful!\", \"Woah that's a lot of dogs!\", \"101 DALMATIANS!!!\"]\n  n \u2264 10 ? dogs[1] : n \u2264 50 ? dogs[2] : n == 101 ? dogs[4] : dogs[3]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202592,"user_id":null,"body":"how_many_dalmatians(number) = return number <= 10 ? \"Hardly any\" : \n    number <= 50 ? \"More than a handful!\" : \n    number == 101 ? \"101 DALMATIANS!!!\" : \"Woah that's a lot of dogs!\"\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202593,"user_id":null,"body":"function how_many_dalmatians(number)\n  dogs = [\"Hardly any\", \"More than a handful!\", \"Woah that's a lot of dogs!\", \"101 DALMATIANS!!!\"];\n  \n  respond = number <= 10 ? dogs[1] : number <= 50 ? dogs[2] : number == 101 ? dogs[4] : dogs[3]\n\n  return respond\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202594,"user_id":53,"body":"function how_many_dalmatians(n)\n  if n <= 10\n    return \"Hardly any\"\n  end\n  if n <= 50\n    return \"More than a handful!\"\n  end\n  if n == 101\n    return \"101 DALMATIANS!!!\"\n  end\n  return \"Woah that's a lot of dogs!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202595,"user_id":null,"body":"function how_many_dalmatians(n)\n  dogs = [\"Hardly any\", \"More than a handful!\", \"Woah that's a lot of dogs!\", \"101 DALMATIANS!!!\"]\n  if n <= 10 \n    return dogs[1]\n  elseif n <= 50\n    return dogs[2]\n  elseif n <= 100\n    return dogs[3]\n  else\n    return dogs[4]\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202596,"user_id":null,"body":"function how_many_dalmatians(n)\n  dogs = [\"Hardly any\", \"More than a handful!\", \"Woah that's a lot of dogs!\", \"101 DALMATIANS!!!\"];\n  \n  respond = n <= 10 ? dogs[1] : (n <= 50 ? dogs[2] : (n == 101 ? dogs[4] : dogs[3]))\n  \n  return respond\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56f695399400f5d9ef000af5":[{"id":202597,"user_id":null,"body":"function correct_tail(body, tail)\n  body[end] == tail\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202598,"user_id":null,"body":"correct_tail(body, tail) = body[end] == tail\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202599,"user_id":null,"body":"function correct_tail(body, tail)\n  body[length(body)] == tail\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202600,"user_id":50,"body":"function correct_tail(body, tail)\n  return body[length(body)] == tail \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202601,"user_id":null,"body":"correct_tail(body, tail) = last(body) == tail","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202602,"user_id":492,"body":"function correct_tail(body, tail)\n  endswith(body, tail)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202603,"user_id":null,"body":"correct_tail(body, tail) = Char(body[end]) == tail ? true : false","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202604,"user_id":null,"body":"function correct_tail(body, tail)\n  if body[length(body)] == tail\n    return true\n  end\n  return false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202605,"user_id":421,"body":"correct_tail(body, tail) =  endswith(body, tail)\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202606,"user_id":53,"body":"function correct_tail(body, tail)\n  endswith(body, tail) && typeof(tail) == String\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202607,"user_id":null,"body":"correct_tail(body, tail) = last(body, 1) == tail","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202608,"user_id":null,"body":"correct_tail(body, tail) = string(body[end]) == tail","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202609,"user_id":null,"body":"function correct_tail(body, tail)\n  tail == last(body, 1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56f699cd9400f5b7d8000b55":[{"id":202610,"user_id":421,"body":"fix_the_meerkat = reverse","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202611,"user_id":null,"body":"function fix_the_meerkat(arr)\n  arr |> reverse\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202612,"user_id":null,"body":"fix_the_meerkat(arr) = [arr[i] for i in 3:-1:1]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202613,"user_id":527,"body":"fix_the_meerkat((a, b, c)) = [c, b, a]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202614,"user_id":53,"body":"function fix_the_meerkat(arr)\n  reverse(arr)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56f69d9f9400f508fb000ba7":[{"id":202615,"user_id":527,"body":"function monkey_count(n)\n  1:n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202616,"user_id":2723,"body":"monkey_count(n) = 1:n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202617,"user_id":null,"body":"monkey_count(n) = [_ for _ in 1:n]","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202618,"user_id":null,"body":"function monkey_count(n)\n  [i for i in 1:n]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202619,"user_id":null,"body":"function monkey_count(n)\n  [1:n;]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202620,"user_id":50,"body":"function monkey_count(n)\n  [dinotfindhowtoconvertfromrangetoarray for dinotfindhowtoconvertfromrangetoarray in 1:n]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202621,"user_id":53,"body":"function monkey_count(n)\n  x = []\n  i = 0\n  while i < n\n    push!(x, i + 1)\n    i += 1\n  end\n  x\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202622,"user_id":null,"body":"function monkey_count(n)\n  \n  a = Int64[]\n  \n  for i = 1:n\n    \n    push!(a,i)\n      \n  end\n  return a\n  \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202623,"user_id":null,"body":"function monkey_count(n)\n  collect(1:n)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202624,"user_id":null,"body":"function monkey_count(n)\n  range(1, stop=n)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56f6ad906b88de513f000d96":[{"id":202625,"user_id":421,"body":"function bonus_time(salary::Int, bonus::Bool)::String\n \"\\u0024$(bonus ? salary * 10 : salary)\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202626,"user_id":null,"body":"function bonus_time(salary::Int, bonus::Bool)::String\n    bonus ? \"\\u0024$(10 * salary)\" : \"\\u0024$(salary)\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202627,"user_id":null,"body":"bonus_time(salary, bonus) = \"\\u00A3$(salary * 10^bonus)\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202628,"user_id":168,"body":"function bonus_time(salary::Int, bonus::Bool)::String\n  \"\\u0024$(bonus ? 10salary : salary)\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202629,"user_id":null,"body":"function bonus_time(salary::Int, bonus::Bool)::String\n    if bonus\n      salary *= 10\n    end\n    return \"$\" * string(salary)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202630,"user_id":null,"body":"bonus_time(salary::Int, bonus::Bool)::String = string(\"$\",salary*10^bonus)\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202631,"user_id":53,"body":"function bonus_time(salary::Int, bonus::Bool)::String\n    string(\"$\", if bonus\n           salary * 10\n       else\n           salary\n       end)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202632,"user_id":null,"body":"function bonus_time(salary::Int, bonus::Bool)::String\n    if bonus\n        return string('$',salary*10)\n    else\n        return string('$',salary)\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202633,"user_id":null,"body":"function bonus_time(salary::Int, bonus::Bool)::String\n    bonus ? \"\\u0024$(salary*10)\" : \"\\u0024$(salary)\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202634,"user_id":527,"body":"function bonus_time(salary::Int, bonus::Bool)::String\n  string('$', salary * (bonus ? 10 : 1))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56fc55cd1f5a93d68a001d4e":[{"id":202635,"user_id":759,"body":"stairsin20(s) = sum(sum, s) * 20","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202636,"user_id":2723,"body":"stairsin20(s) = 20sum(sum(s)) ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202637,"user_id":881,"body":"stairsin20(s) = 20 * sum(sum(s))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202638,"user_id":null,"body":"function stairsin20(s)\n  20*sum(sum(s))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202639,"user_id":527,"body":"function stairsin20(s)\n  sum(sum, s) * 20\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202640,"user_id":null,"body":"stairsin20(s) = 20sum(sum.(s))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202641,"user_id":480,"body":"function stairsin20(s)\n  sum(map(sum,s)) * 20\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202642,"user_id":null,"body":"stairsin20(s) = 20sum(map(sum,s))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202643,"user_id":null,"body":"function stairsin20(s)\n  return 20 * sum([sum(day) for day in s])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202644,"user_id":53,"body":"function stairsin20(s)\n  sum = 0\n  for xs in s\n    for x in xs\n      sum += x\n    end\n  end\n  sum * 20\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56fcc393c5957c666900024d":[{"id":202645,"user_id":null,"body":"module Coding\n    export code, decode\n\n    function code(s)\n        n = Int64(ceil(length(s)^0.5))\n        s = rpad(s, n^2, Char(11))\n        a = rotl90(reshape(split(s, \"\"), n, n))\n        return join([join(a[j*n+1:j*n+n],\"\") for j in 0:n-1] , \"\\n\")\n    end\n    function decode(s)\n        s = filter(c->c!=\"\\n\", split(s, \"\"))\n        n = floor(Int, length(s)^0.5)\n        a = rotr90(reshape(s, n, n))\n        ret = join([join(a[j*n+1:j*n+n],\"\") for j in 0:n-1] , \"\")\n        return join([c for c in ret if c!=Char(11)], \"\")\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202646,"user_id":null,"body":"module Coding\n    export code, decode\n\n    function code(s)\n      n = Int(ceil(sqrt(length(s))))\n      A = fill('\\v', n,n)\n  \n      for (i, character) in enumerate(s)\n        A[i] = character\n      end\n\n      return [\n        join(col) for col in eachcol(rotl90(A))\n      ] |> x -> join(x, \"\\n\")\n    end\n\n    function decode(s)\n      n = Int(floor(sqrt(length(s))))\n      A = fill('\\v', n,n)\n  \n      for (i, character) in enumerate(replace(s, r\"\\n\" => s\"\"))\n        A[i] = character\n      end\n  \n      return [\n        join(col) for col in eachcol(rotr90(A))\n      ] |> x -> join(x, \"\") |> y -> replace(y, r\"\\v\" => s\"\")\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202647,"user_id":null,"body":"module Coding\n    export code, decode\n\n    function code(s)\n        len = Int(ceil(sqrt(length(s))))\n        m = rotl90(reshape(collect(s * Char(11)^(len^2 - length(s))), len, len))\n        coded = \"\"\n        for i in 1:len, j in 1:len\n            coded *= m[j, i]\n            j == len && (coded *= '\\n')\n        end\n        chop(coded)\n    end\n\n    function decode(s)\n        len = Int(sqrt(length(s) - count(i-> i == '\\n', s)))\n        m = rotr90(reshape(collect(replace(s, '\\n'=> \"\")), len, len))\n        decoded = \"\"\n        for i in 1:len, j in 1:len\n            decoded *= m[j, i]\n        end\n        replace(decoded, \"\\v\"=> \"\")\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202648,"user_id":null,"body":"module Coding\n    export code, decode\n    str2arr(str,s) = permutedims(reshape(collect(str),s,s))\n    #Have fun reading this :)\n    code(s) = join([string(rotr90(str2arr(string(s,repeat(Char(11),n*n-length(s))),n))[i,1:n]...) for i=1:(n=ceil(Int,sqrt(length(s))))],'\\n')\n    decode(s) = length(s)<2 ? s : rstrip(string(collect(permutedims(rotl90(str2arr(replace(s,\"\\n\"=>\"\"),findfirst('\\n',s)-1))))...))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202649,"user_id":null,"body":"module Coding\n    export code, decode\n\n    function code(s)\n        l = length(s)\n        n = ceil(Int,sqrt(l))\n        t = rpad(s, n^2, Char(11))\n        tarray = Matrix{Char}(undef, n, n)\n        for i in 1:n, j in 1:n\n            tarray[i,j] = t[i+(j-1)*n]\n        end\n        join(vec(vcat(rotl90(tarray,1),fill('\\n',(1,n)))))[1:end-1]\n    end\n    function decode(s)\n        t = replace(s, \"\\n\" => \"\")\n        l = length(t)\n        n = ceil(Int,sqrt(l))\n        tarray = Matrix{Char}(undef, n, n)\n        for i in 1:n, j in 1:n\n            tarray[i,j] = t[i+(j-1)*n]\n        end\n        replace(join(vec(rotr90(tarray,1))), \"\\v\" => \"\")\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202650,"user_id":null,"body":"module Coding\n    export code, decode, SquareString\n\nmutable struct SquareString\n    inner::Array{Char, 2}\n    dim::Integer\nend\n\nfunction SquareString(s::AbstractString)\n    n = (Int \u2218 ceil \u2218 sqrt \u2218 length)(s)\n    padded = rpad(s, n * n, Char(11))\n    inner = reshape(collect(padded), n, n)\n    return SquareString(inner, n)\nend\n\nfunction rotateclockwise!(ss::SquareString)::SquareString\n    ss.inner = (rot180 \u2218 rotr90)(ss.inner)\n    ss\nend\n\nfunction rotatecounterclockwise!(ss::SquareString)::SquareString\n    ss.inner = (rotl90 \u2218 rot180)(ss.inner)\n    ss\nend\n\nfunction code(s::AbstractString)::String\n    squarestring = SquareString(s)\n    rotateclockwise!(squarestring)\n    letters = vcat(squarestring.inner, fill('\\n', 1, squarestring.dim)) |> vec\n    return replace(String(letters), r\"\n$\" => \"\")\nend\n\nfunction decode(s::AbstractString)::String\n    squarestring = replace(s, \"\\n\" => \"\") |> SquareString\n    rotatecounterclockwise!(squarestring)\n    letters = filter(s -> s != Char(11), vec(squarestring.inner))\n    return String(letters)\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202651,"user_id":2525,"body":"module Coding\n    export code, decode\n\n    function code(s)\n        if strip(s)==\"\"\n            return \"\"\n        end\n  \n        l = length(s)\n        n = ceil(Int, \u221al)\n        padded = s * Char(11)^(n^2-l)\n  \n        join([join([padded[1 + (n-i)*n+j] for i in 1:n]) for j in 0:n-1], \"\\n\")\n    end\n    function decode(s)\n        if strip(s)==\"\"\n            return \"\"\n        end\n  \n        lines = split(s, \"\\n\")\n        n = length(lines)\n  \n        join([lines[j][n-i+1] for i in 1:n for j in 1:n if Int(lines[j][n-i+1])!=11])\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202652,"user_id":null,"body":"module Coding\n    export code, decode\n\n    function code(s)\n      n = ceil(Integer, \u221alength(s))\n      filled = s*Char(11)^(n^2 - length(s))\n      squared_s = Iterators.partition(filled, n)\n      hcat(squared_s...) |>\n        rotl90 |>\n        (x -> join.(eachcol(x))) |>\n        (x -> join(x, \"\\n\"))\n    end\n\n    function decode(s)\n      hcat(collect.(split(s, \"\\n\"))...) |>\n        rotr90 |>\n        join |>\n        (x -> strip(x, Char(11)))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202653,"user_id":null,"body":"module Coding\n    export code, decode\n\n    function code(s)\n      n = ceil(Integer, \u221alength(s))\n      filled = s*Char(11)^(n^2 - length(s))\n      squared_s = Iterators.partition(filled, n)\n      hcat(squared_s...) |>\n        rotl90 |>\n        (x -> reduce(*, x, dims = 1)) |>\n        (x -> join(x, \"\\n\"))\n    end\n\n    function decode(s)\n      hcat(collect.(split(s, \"\\n\"))...) |>\n        rotr90 |>\n        join |>\n        (x -> strip(x, Char(11)))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202654,"user_id":null,"body":"module Coding\nexport code, decode\n\nfunction code(s)\n  length(s) == 0 && return \"\"\n  dim = Int(ceil(sqrt(length(s))))\n  next_square = Int(dim^2)\n  s = rpad(s, next_square, Char(11))\n  a = rotl90(reshape(split(s, \"\"), (dim, dim)))\n  # Julia 1.1 has an eachrow iterator, but 1.0 has to be more verbose\n  join(mapslices(join, a; dims=(1)), \"\\n\")\nend\n\nfunction decode(s)\n  length(s) == 0 && return \"\"\n  b = mapreduce(x->split(x, \"\"), hcat, split(s, \"\\n\"))\n  a = rotr90(b)\n  rstrip(join(a, \"\"), Char(11))\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"56fe17fcc25bf3e19a000292":[{"id":202655,"user_id":null,"body":"module Disguised\n    export v1, u1, v_eff, u_eff\n\n    function v1(n, p)\n        (2 * n + 1) * p\n    end\n    function u1(n, p)\n      (n + 1) * p\n    end\n    function v_eff(n, p)\n      (2 * n + 1) * p\n    end\n    function u_eff(n, p)\n      (n + 1) * p\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202656,"user_id":null,"body":"module Disguised\n    export v1, u1, v_eff, u_eff\n\n    function combination(n, k)\n      return factorial(big(n))\/(factorial(big(k))*factorial(big(n-k)))\n    end\n\n    function v1(n, p)\n      total = 0\n      for k in range(0,stop=n)\n        total += (-1)^k*4^(n-k)*combination(2n-k,k)\n      end\n      return total*p\n    end\n\n    function u1(n, p)\n      total = 0\n      for k in range(0,stop=n)\n        total += (-1)^k*4^(n-k)*combination(2n-k+1,k)\n      end\n      return total*p\n    end\n\n    v_eff(n, p) = (2n+1)*p\n    u_eff(n, p) = (n+1)*p\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202657,"user_id":53,"body":"module Disguised\n    export v1, u1, v_eff, u_eff\n\n    function v1(n, p)   \n      (2*n+1)*p\n    end\n    function u1(n, p) \n      (n+1)*p\n    end\n    function v_eff(n, p) \n      v1(n,p) \n    end\n    function u_eff(n, p) \n      u1(n,p) \n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202658,"user_id":null,"body":"module Disguised\n    export v1, u1, v_eff, u_eff\n\n    v1(n, p) = p * sum((-1)^k * 4^(n-k) * binomial(2n-k, k) for k in 0:n)\n    u1(n, p) = p * sum((-1)^k * 4^(n-k) * binomial(2n-k+1, k) for k in 0:n)\n    v_eff(n, p) = p * (2n + 1)\n    u_eff(n, p) = p * (n + 1)\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202659,"user_id":421,"body":"module Disguised\n    export v1, u1, v_eff, u_eff\n\n    function v1(n, p) \n      return (2n + 1)p\n    end\n    function u1(n, p)  \n      return (n + 1)p\n    end\n    function v_eff(n, p)  \n      return (2n + 1)p\n    end\n    function u_eff(n, p) \n      return (n + 1)p\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202660,"user_id":null,"body":"module Disguised\n    export v1, u1, v_eff, u_eff\n\n    v_eff(n, p) = p * (2n + 1)\n    u_eff(n, p) = p * (n + 1)\n    v1 = v_eff\n    u1 = u_eff\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202661,"user_id":null,"body":"module Disguised\n    export v1, u1, v_eff, u_eff\n\n    function v1(n, p) p*(2*n+1) end\n    function u1(n, p) p*(n+1) end\n    function v_eff(n, p) v1(n, p) end\n    function u_eff(n, p) u1(n, p) end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202662,"user_id":null,"body":"module Disguised\n    export v1, u1, v_eff, u_eff\n\n    function v1(n, p)\n      return sum([(-1)^k * p * 4^(n-k) * binomial(2*n-k, k) for k = 0:n])\n    end\n    function u1(n, p)\n      return sum([(-1)^k * p * 4^(n-k) * binomial(2*n-k+1, k) for k = 0:n])\n    end\n\n\n    function v_eff(n, p)\n      return 2*n*p+p\n    end\n\n    function u_eff(n, p) \n      return (n+1)*p\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202663,"user_id":null,"body":"module Disguised\nexport v1, u1, v_eff, u_eff\n\nfunction v1(n, p)\n  sum((-1)^k * p * 4^(n - k) * binomial(2n - k, k) for k in 0:n)\nend\n\nfunction u1(n, p)\n  sum((-1)^k * p * 4^(n - k) * binomial(2n - k + 1, k) for k in 0:n)\nend\n\nfunction v_eff(n, p)\n  (2 * n + 1) * p\nend\n\nfunction u_eff(n, p)\n  (n + 1) * p\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202664,"user_id":492,"body":"module Disguised\n    export v1, u1, v_eff, u_eff\n\n    function v1(n, p)    2*p*n+p end\n    function u1(n, p)    n*p+p end\n    function v_eff(n, p) 2*p*n+p end\n    function u_eff(n, p) n*p+p end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5700c9acc1555755be00027e":[{"id":202665,"user_id":759,"body":"contain_all_rots(strng, arr) = [circshift([strng...], i)|>join for i in 1:length(strng)] \u2286 arr","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202666,"user_id":881,"body":"function contain_all_rots(strng, arr)\n    all(in(arr), [strng[i:end] * strng[begin:i-one(i)] for i in eachindex(strng)])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202667,"user_id":null,"body":"function contain_all_rots(s,arr)\n    for i=1:length(s)\n        \"$(s[i:end])$(s[1:i-1])\" \u2209 arr && return false\n    end\n    true\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202668,"user_id":492,"body":"function contain_all_rots(strng, arr)\n    function rotations()\n        result = Set{String}()\n        for mid in 1:length(strng)\n            rot = strng[mid:end] * strng[1:mid-1]\n            if in(rot, result)\n                return collect(result)\n            else\n                push!(result, rot)\n            end\n        end\n        return collect(result)\n    end\n    rots = rotations()\n    i = 1\n    while (i <= length(rots))\n        if (!(rots[i] in(arr)))\n            return false\n        end\n        i += 1\n    end\n    true\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202669,"user_id":null,"body":"function contain_all_rots(strng, arr)\n    # your code\n  matches = 0\n  for i in 1:length(strng)\n    strng = strng[2:end]*strng[1]\n    if strng in arr\n      matches += 1\n    end \n  end \n  if matches == length(strng)\n    return true\n  else\n    return false\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202670,"user_id":null,"body":"function contain_all_rots(strng, arr)\n    Set(join(circshift(collect(strng), i)) for i \u2208 eachindex(strng)) \u2286 Set(arr)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202671,"user_id":null,"body":"function contain_all_rots(strng, arr)\n    all([c in arr for c in [join(circshift(collect(strng),m)) for m in 0:(length(strng)-1)]])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202672,"user_id":null,"body":"function contain_all_rots(strng, arr)\n    all([rot in arr for rot in rotations(strng)])\nend\n\nfunction rotations(strng)\n  strlen = length(strng)\n  if strlen == 0\n    return []\n  else\n    return [strng[id+1:strlen]*strng[1:id] for id in 1:strlen]\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202673,"user_id":53,"body":"function rot(s)\n  s[2:length(s)] * s[1]\nend\n\nfunction rot_all(s)\n  ls = []\n  i = length(s)\n  while i > 0\n    s = rot(s)\n    append!(ls, [s])\n    i -= 1\n  end\n  ls\nend\n\nfunction contain_all_rots(s, arr)\n    if length(s) == 0\n      return true\n    end\n    all(x -> x in arr, rot_all(s))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202674,"user_id":1474,"body":"function rotate(s)\n  s[2:end] * s[1]\nend\n\nfunction contain_all_rots(strng, arr)\n  if isempty(strng)\n    return true\n  end\n  ret = []\n  for _ in 1:length(strng)\n    push!(ret, strng)\n    strng = rotate(strng)\n  end\n  all(s -> s \u2208 arr, ret)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"570409d3d80ec699af001bf9":[{"id":202675,"user_id":421,"body":"function fusc(n)\n  n < 2 ? n : n % 2 == 1 ? fusc(n \u00f7 2) + fusc(n \u00f7 2 + 1) : fusc(n \u00f7 2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202676,"user_id":null,"body":"function fusc(n)\n  if n == 0\n    0\n  elseif n == 1\n    1\n  elseif iseven(n)\n    fusc(div(n,2))\n  else\n    fusc(div(n-1,2)) + fusc(div(n-1,2)+1)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202677,"user_id":759,"body":"function fusc(n)\n  n < 2 ? n : n % 2 == 0 ? fusc(n \u00f7 2) : fusc(n \u00f7 2) + fusc(n \u00f7 2 + 1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202678,"user_id":168,"body":"function fusc(n)\n  n <= 1 ? n : n % 2 == 0 ? fusc(n \/ 2) : fusc(n \u00f7 2) + fusc((n + 1) \/ 2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202679,"user_id":null,"body":"function fusc(n)\n    n == 0 && return 0\n    n == 1 && return 1\n    iseven(n) ? fusc(n\u00f72) : fusc(n\u00f72) + fusc(n\u00f72 + 1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202680,"user_id":null,"body":"function fusc(n)\n  if n == 0\n    return 0\n  elseif n == 1\n    return 1\n  elseif n % 2 == 0\n    return fusc(n\/2)\n  else\n    return fusc(floor(n\/2)) + fusc(floor(n\/2) + 1)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202681,"user_id":53,"body":"function fusc(n)\n  m = n \u00f7 2\n  if n < 2\n    n\n  elseif n % 2 != 0\n    fusc(m) + fusc(m + 1)\n  else\n    fusc(m)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202682,"user_id":1474,"body":"function fusc(n)\n  n < 2 ? n : iseven(n) ? fusc(n \u00f7 2) : fusc(n \u00f7 2) + fusc(n \u00f7 2 + 1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202683,"user_id":null,"body":"function fusc(n)\n  n == 0 && return 0\n  n == 1 && return 1\n  iseven(n) && return fusc(n\u00f72)\n  (n-1)\u00f72 |> x -> fusc(x) + fusc(x+1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202684,"user_id":null,"body":"function fusc(n)\n  if n in (0, 1)\n    n\n  elseif n % 2 == 0\n    fusc(n \/ 2)\n  else\n    fusc((n - 1)\/2) + fusc((n + 1)\/2)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"570564e838428f2eca001d73":[{"id":202685,"user_id":480,"body":"function chuck_push_ups(str::String)\n  str==\"\" && return \"FAIL!!\"\n  a=map(s->replace(s,r\"[^01]\"=>\"\"),split(replace(join(split(str,r\"\\\"[^\\\"]*\\\"\")),r\" +\"=>\" \")))\n  counts=map(s->parse(Int,s;base=2),filter(s->length(s)>0,a))\n  length(counts)>0 ? maximum(counts) : \"CHUCK SMASH!!\"\nend\n\nfunction chuck_push_ups(str)\n  \"FAIL!!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202686,"user_id":null,"body":"function chuck_push_ups(str)\n    (!isa(str, String) || isempty(str)) && return \"FAIL!!\"\n    counts = split(replace(str, r\"[^10 ]\"=> \"\"), r\"[^10]\", keepempty=false)\n    isempty(counts) ? \"CHUCK SMASH!!\" : maximum(parse.(Int, counts, base=2))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202687,"user_id":2525,"body":"function chuck_push_ups(str)\n    if typeof(str) == String\n        if length(str)>0 && !('0' in str || '1' in str)  \n            return \"CHUCK SMASH!!\"\n        elseif length(str)>0\n            return maximum(parse.(Int, split(filter(c->c in \" 01\", str)), base=2))\n        end\n    end       \n    \"FAIL!!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202688,"user_id":759,"body":"function chuck_push_ups(str)\n  if isa(str, String) && length(str) != 0\n    a = -1\n    for x in split(str, ' ')\n      y = tryparse(Int, filter(c -> c == '0' || c == '1', x), base=2)\n      y != nothing && a < y && (a = y)\n    end\n    a == -1 ? \"CHUCK SMASH!!\" : a\n  else\n    \"FAIL!!\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202689,"user_id":209,"body":"function chuck_push_ups(x)\n    if length(x) == 0 || typeof(x) != String\n        return \"FAIL!!\"\n    end\n    l = [parse(Int, i.match, base = 2) for i in eachmatch(r\"[01]+\", replace(x, r\"[a-z2-9]\"i => \"\"))]\n    if length(l) > 0\n        return maximum(l)\n    end\n    \"CHUCK SMASH!!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202690,"user_id":null,"body":"function chuck_push_ups(str)\n  typeof(str)!=String || str==\"\" ? \"FAIL!!\" :\n    !occursin(r\"[01]\", str) ? \"CHUCK SMASH!!\" : \n      maximum(parse.(Int, split(replace(str, r\"[^ 01]\"=>\"\")), base=2))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202691,"user_id":null,"body":"function chuck_push_ups(str)\n  typeof(str)!=String || str==\"\" ? \"FAIL!!\" :\n    !occursin(r\"[01]\", str) ? \"CHUCK SMASH!!\" : \n      maximum(s -> parse(Int, s, base=2), (split(replace(str, r\"[^ 01]\"=>\"\"))))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202692,"user_id":881,"body":"function chuck_push_ups(str::AbstractString)::Union{String,Int}\n    isempty(str) && return \"FAIL!!\"\n    ns = filter(!isempty, filter.(in(\"01\"), split(str, ' ')))\n    isempty(ns) && return \"CHUCK SMASH!!\"\n    maximum(parse.(Int, ns, base=2))\nend\n\nchuck_push_ups(notastring) = \"FAIL!!\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57061b6fcb7293901a000ac7":[{"id":202693,"user_id":null,"body":"function head_smash(gym)\n    # This is gonna hurt!\n  if all(gym .== \"\")\n    out = \"Gym is empty\"\n  elseif gym isa Array{String}\n    out = replace.(gym, \"O\" => \" \")\n  else\n    out = \"This isn't the gym!!\"\n  end   \n  return(out)\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202694,"user_id":null,"body":"head_smash(gym::Array{String}) = isempty(join(gym)) ? \"Gym is empty\" : replace.(gym, \"O\"=> \" \")\n\nhead_smash(gym) = isempty(gym) ? \"Gym is empty\" : \"This isn't the gym!!\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202695,"user_id":null,"body":"function head_smash(gym::AbstractArray{T}) where T <: AbstractString\n  isempty(gym) || all(isempty, gym) ? \"Gym is empty\" : map(s -> replace(s, 'O' => ' '), gym)\nend\n\nfunction head_smash(a::AbstractArray)\n  isempty(a) ? \"Gym is empty\" : \"This isn't the gym!!\"\nend\n\nfunction head_smash(s::AbstractString)\n  isempty(s) ? \"Gym is empty\" : \"This isn't the gym!!\"\nend\n\nfunction head_smash(_)\n  \"This isn't the gym!!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202696,"user_id":null,"body":"function head_smash(gym)\n  isgym = typeof(gym)==Vector{String}\n  isgym && join(gym)==\"\" || gym==\"\" || gym==[] ? \"Gym is empty\" :\n    isgym ? map(l -> replace(l, 'O'=>' '), gym) : \"This isn't the gym!!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202697,"user_id":881,"body":"function head_smash(gym::AbstractVector{<:AbstractString})\n    if isempty(gym) || all(isempty, gym)\n        \"Gym is empty\"\n    else\n        map(str -> replace(str, 'O'=>' '), gym)\n    end\nend\nhead_smash(gym) = isempty(gym) ? \"Gym is empty\" : \"This isn't the gym!!\"\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57066708cb7293901a0013a1":[{"id":202698,"user_id":480,"body":"function fist_beard(arr::AbstractVector{<:AbstractVector{<:Integer}})::String\n  join(map(a->join(map(code->Char(code),a)),arr))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202699,"user_id":null,"body":"fist_beard(arr) = join(vcat(map(x-> Char.(x), arr)...))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202700,"user_id":2525,"body":"function fist_beard(arr::AbstractVector{<:AbstractVector{<:Integer}})::String\n    join( Char(n) for n in Iterators.flatten(arr) )\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202701,"user_id":53,"body":"function fist_beard(arr::AbstractVector{<:AbstractVector{<:Integer}})::String\n    join(map(x -> Char(x), collect(Iterators.flatten(arr))))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202702,"user_id":null,"body":"function fist_beard(arr::AbstractVector{<:AbstractVector{<:Integer}})::String\n  join(map(Char, [(arr...)...]))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202703,"user_id":null,"body":"function fist_beard(arr::AbstractVector{<:AbstractVector{<:Integer}})::String\n    join([Char(n) for a in arr for n in a])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202704,"user_id":881,"body":"function fist_beard(arr::AbstractVector{<:AbstractVector{<:Integer}})::String\n    mapreduce(Char, *, Iterators.flatten(arr))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57066ad6cb72934c8400149e":[{"id":202705,"user_id":null,"body":"body_count(code::AbstractString)::Bool = occursin(r\"([A-Z]\\d){5}\\.-[A-Z]%\\d\\.\\d\\d\\.\", code)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202706,"user_id":null,"body":"function body_count(code::AbstractString)::Bool\n  occursin(r\"([A-Z]\\d){5}\\.-[A-Z]\\%\\d\\.\\d\\d\\.\", code)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202707,"user_id":null,"body":"function body_count(code::AbstractString)::Bool\n  occursin(r\"[A-Z][0-9][A-Z][0-9][A-Z][0-9][A-Z][0-9][A-Z][0-9]\\.\\-[A-Z]\\%[0-9]\\.[0-9][0-9]\\.\", code)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202708,"user_id":53,"body":"function body_count(code::AbstractString)::Bool\n    match(r\"^.*([A-Z]\\d){5}[.][-][A-Z][%]\\d[.]\\d{2}[.].*$\", code) != nothing\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202709,"user_id":881,"body":"function body_count(code::AbstractString)::Bool\n    occursin(r\"([A-Z]\\d){5}\\.-[A-Z]%\\d\\.\\d\\d\\.\", code)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5706be574f2c297a7b00060d":[{"id":202710,"user_id":881,"body":"using Printf: @sprintf\n\nfunction price(start::Real, soil::AbstractString, age::Integer)::String\n    soillevels = Dict{String,Float64}([\"Barely used\"=>1.1, \"Seen a few high kicks\"=>1.25, \"Blood stained\"=>1.3, \"Heavily soiled\"=>1.5])\n    if soil in keys(soillevels)\n        @sprintf \"\\$%.2f\" round(start * soillevels[soil] ^ age, digits=2)\n    else\n        \"Chuck is bottomless!\"\n    end\nend\nprice(anythingelse...) = \"Chuck is bottomless!\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202711,"user_id":null,"body":"using Printf\nsoil_levels = Dict([(\"Barely used\", 1.1),\n      (\"Seen a few high kicks\", 1.25),\n      (\"Blood stained\", 1.3),\n      (\"Heavily soiled\", 1.5)])\n\nfunction price(start::Number, soil::String, age::Number)\n  if soil in keys(soil_levels)\n    newprice = start * soil_levels[soil]^age\n    newprice = parse(Float64, string(round(newprice, digits = 2)))\n    @sprintf \"\\$%.2f\" newprice\n  else\n    return \"Chuck is bottomless!\"\n  end\nend\n  \nfunction price(start, soil, age)\n  return \"Chuck is bottomless!\"\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202712,"user_id":null,"body":"using Printf\nfunction price(start::Number, soil::String, age::Number)\n  soil_levels = Dict([(\"Barely used\", 1.1),\n      (\"Seen a few high kicks\", 1.25),\n      (\"Blood stained\", 1.3),\n      (\"Heavily soiled\", 1.5)])\n  if soil in keys(soil_levels)\n    newprice = start * soil_levels[soil]^age\n    newprice = parse(Float64, string(round(newprice, digits = 2)))\n    out = @sprintf \"\\$%.2f\" newprice\n    isnothing(findfirst('.', out)) ? out = string(out, \".00\") : nothing\n    findfirst('.', out) == length(out)-1 ? out = string(out, \"0\") : nothing\n    return out\n  else\n    return \"Chuck is bottomless!\"\n  end\nend\n  \nfunction price(start, soil, age)\n  return \"Chuck is bottomless!\"\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202713,"user_id":null,"body":"using Printf\nsoiling = Dict(\"Barely used\"=> 1.1, \"Seen a few high kicks\"=> 1.25, \"Blood stained\"=> 1.3, \"Heavily soiled\"=> 1.5)\nprice(start, soil, age) = \"Chuck is bottomless!\"\n\nfunction price(start::Number, soil::String, age::Int)\n    age == 0 ? @sprintf(\"\\$%.2f\", round(start, digits=2)) : price(haskey(soiling, soil) ? start*soiling[soil] : [], soil, age-1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202714,"user_id":2525,"body":"using Printf\nmap = Dict([(\"Barely used\", 10), (\"Seen a few high kicks\", 25), (\"Blood stained\", 30), (\"Heavily soiled\", 50)])\nfunction price(start, soil, age)\n    try  \n        p = start*(1+map[soil]\/100)^age\n        @sprintf(\"\\$%.02f\", p)\n    catch e\n        \"Chuck is bottomless!\"\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"570a6a46455d08ff8d001002":[{"id":202715,"user_id":null,"body":"no_boring_zeros(n) = n == 0 ? 0 : n % 10 != 0 ? n : no_boring_zeros(n \/ 10)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202716,"user_id":53,"body":"function no_boring_zeros(n)\n  parse(Int64, replace(string(n), r\"(?!^)[0]+$\" => s\"\"))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202717,"user_id":759,"body":"no_boring_zeros(n)=n%10==0!=n ? no_boring_zeros(n\u00f710) : n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202718,"user_id":null,"body":"function no_boring_zeros(n)\n  if n == 0\n    0\n  elseif n % 10 != 0\n    n\n  else\n    no_boring_zeros(n\/\/10)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202719,"user_id":null,"body":"no_boring_zeros(n) = n == 0 ? 0 : n % 10 != 0 ? n : no_boring_zeros(n \u00f7 10)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202720,"user_id":2723,"body":"no_boring_zeros(n) = n==0 ? 0 : parse(Int,rstrip(string(n),'0'))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202721,"user_id":2723,"body":"no_boring_zeros(n) = something(tryparse(Int,rstrip(string(n),'0')),0)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202722,"user_id":null,"body":"function no_boring_zeros(n)\n  if n == 0 return 0 end\n  parse(Int, rstrip(string(n), '0'))\n    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202723,"user_id":null,"body":"no_boring_zeros(n) = iszero(n % 10) && !iszero(n) ? no_boring_zeros(n \u00f7 10) : n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202724,"user_id":null,"body":"function no_boring_zeros(n)\n  n == 0 || n - div(n, 10) * 10 != 0 ? n : no_boring_zeros(n \/ 10)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5715eaedb436cf5606000381":[{"id":202725,"user_id":null,"body":"function positive_sum(arr::Array{Int})\n  sum(arr[arr .> 0])\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202726,"user_id":null,"body":"function positive_sum(arr::Array{Int})\n  # your code here\n  sum(filter(x -> x > 0, arr))\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202727,"user_id":572,"body":"function positive_sum(arr::Array{Int})\n  sum = 0\n  for i in 1:length(arr)\n    if arr[i] > 0\n      sum += arr[i]\n     end\n    end\n   sum\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202728,"user_id":null,"body":"positive_sum(arr::Array{Int}) = sum([i > 0 ? i : 0 for i in arr])","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202729,"user_id":null,"body":"function positive_sum(arr::Array{Int})\n  sum(filter(i -> i>0, arr))\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202730,"user_id":null,"body":"function positive_sum(arr::Array{Int})\n  sum = 0\n  \n  for i in arr\n    if i > 0\n      sum = sum + i\n    end\n  end\n  \n  return sum\n  \nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202731,"user_id":null,"body":"function positive_sum(arr::Array{Int})\n  return sum(arr + abs.(arr)) \/ 2\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202732,"user_id":168,"body":"function positive_sum(arr::Array{Int})\n  sum(x for x in arr if x > 0)\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202733,"user_id":null,"body":"function positive_sum(arr::Array{Int})\n  filter(n -> n > 0, arr) |> sum\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202734,"user_id":null,"body":"function positive_sum(arr::Array{Int})\n  filter(>(0), arr) |> sum\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5720eb05e8d6c5b24a0014c5":[{"id":202735,"user_id":null,"body":"function score_matrix(matrix::Matrix{Int})::Int\n  n, m = size(matrix)\n  [(-1)^(i + j) * matrix[i, j] for j in 1:m for i in 1:n] |> sum\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202736,"user_id":null,"body":"function score_matrix(matrix::Matrix{Int})::Int\n  sign = ones(size(matrix))\n  sign[1:2:size(matrix,1),:] *= -1\n  sign[:,1:2:size(matrix,2)] *= -1\n  sum(matrix .* sign)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202737,"user_id":null,"body":"score_matrix(matrix::Matrix{Int})::Int = sum((-1)^(i[1] + i[2]) * matrix[i] for i in CartesianIndices(matrix))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202738,"user_id":null,"body":"function score_matrix(matrix::Matrix{Int})::Int\n    sum((-1)^(i + j) * matrix[i, j] for i in 1:size(matrix)[1], j in 1:size(matrix)[2])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202739,"user_id":759,"body":"function score_matrix(matrix::Matrix{Int})::Int\n  m, n = size(matrix)\n  res = 0\n  for i in 1:m\n    for j in 1:n\n      res += (-1)^(i + j) * matrix[i, j]\n    end\n  end\n  res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202740,"user_id":null,"body":"function score_matrix(matrix::Matrix{Int})::Int\n  c = size(matrix,1)\n  r = Int(length(matrix) \/ c)\n  sum((i%2 == j%2) ? matrix[i,j] : -matrix[i,j] for i in 1:c for j in 1:r)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202741,"user_id":53,"body":"function score_matrix(a::Matrix{Int})::Int\n  sum = 0\n  for i in CartesianIndices(a)\n    sum += (-1)^(i[1]+i[2]) * a[i]\n  end\n  return sum\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202742,"user_id":881,"body":"function score_matrix(matrix::Matrix{Int})::Int\n  sum((isodd(i[1] + i[2]) ? -1 : 1) * matrix[i] for i in CartesianIndices(matrix))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5726f813c8dcebf5ed000a6b":[{"id":202743,"user_id":53,"body":"module KPrimes\n    export count_kprimes\n    export puzzle\n    function count_kprimes(k, start, nd)\n        fs = []\n        n = start\n        while n <= nd\n            j = pfc(n)\n            if j == k\n                push!(fs, n)\n            end\n            n = n + 1\n        end\n        fs\n    end\n    function puzzle(s)\n        ans = 0\n        xs = count_kprimes(7, 128, s - 10)\n        ys = count_kprimes(3, 8, s - 130)\n        for a in xs\n            for b in ys\n                c = s - a - b\n                if c > 0 && pfc(c) == 1\n                    ans = ans + 1\n                end\n            end\n        end\n        ans\n    end\n    function pfc(n)\n        ans = 0\n        i = 2\n        while i <= n \u00f7 i\n            while n % i == 0\n                n = n \u00f7 i\n                ans = ans + 1\n            end\n            i += 1\n        end\n        if n > 1\n            ans = ans + 1\n        end\n        ans\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202744,"user_id":492,"body":"module KPrimes\n    export count_kprimes\n    export puzzle\n    function dv(n)\n        cnt = 0; i = 2\n        while (i * i <= n)\n            while (n % i == 0)\n                cnt += 1\n                n \/= i\n            end\n            i += 1\n        end\n        if (n > 1)\n             cnt += 1\n        end\n        cnt\n    end\n    function count_kprimes(k, start, nd)\n        kprimes = Int[]\n        i = start\n        while (i <= nd)\n            if (dv(i) == k)\n                push!(kprimes, i)\n            end\n            i += 1\n        end\n        kprimes\n    end\n    function isprimi(n)\n        n > 1 || return false\n        n != 2 || return true\n        isodd(n) || return false\n        for i in 3:isqrt(n)\n            n%i != 0 || return false\n        end\n        true\n    end\n    function puzzle(s)\n        cnt = 0;\n        b = count_kprimes(7, 128, s - 6)\n        c = count_kprimes(3, 4, s - 130)\n        for j in b\n            for k in c\n                if isprimi(s - j - k)\n    \t\tcnt += 1\n    \t    end\n            end\n        end\n        cnt\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202745,"user_id":null,"body":"module KPrimes\n    export count_kprimes\n    export puzzle\n\n    function k_prime(n, i = 2, count = 0)\n        n % i == 0 && return k_prime(n \u00f7 i, i, count + 1)\n        for j in (i+1-i%2):2:isqrt(n)\n            n % j == 0 && return k_prime(n \u00f7 j, j, count + 1)\n        end\n        count = n != 1 ? count += 1 : count\n    end\n\n    count_kprimes(k, start, nd) = [i for i in start:nd if k_prime(i) == k]\n\n    function puzzle(s)\n        k1, k3, k7, count = [], [], [], 0\n        for n in 2:s\n            k = k_prime(n)\n            k == 1 ? push!(k1, n) : k == 3 ? push!(k3, n) : k == 7 ? push!(k7, n) : nothing end\n        for i in k7, j in k3 \n            s-i-j \u2208 k1 && (count += 1) end\n        count\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202746,"user_id":null,"body":"module KPrimes\n    export count_kprimes\n    export puzzle\n\n    function k_prime(n, i = 2, count = 0)\n        n % i == 0 && return k_prime(n \u00f7 i, i, count + 1)\n        for j in (i+1-i%2):2:Int(floor(sqrt(n)))\n            n % j == 0 && return k_prime(n \u00f7 j, j, count + 1)\n        end\n        count = n != 1 ? count += 1 : count\n    end\n\n    function count_kprimes(k, start, nd)\n        [i for i in start:nd if k_prime(i) == k]\n    end\n\n    function puzzle(s)\n        k1, k3, k7, count = [], [], [], 0\n        for n in 2:s\n            k = k_prime(n)\n            if k == 1 push!(k1, n)\n            elseif k == 3 push!(k3, n)\n            elseif k == 7 push!(k7, n) end\n        end\n        for i in k7, j in k3\n            s-i-j \u2208 k1 && (count += 1)\n        end\n        count\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202747,"user_id":null,"body":"module KPrimes\n    export count_kprimes\n    export puzzle\n    function count_kprimes(k, start, nd)\n        kprimes = Int64[]\n        primesarr = primes(nd)\n        for n in start:nd\n            testkprime = n\n            counter = 0\n            for i in 1:k\n                for p in primesarr\n                    if testkprime % p == 0\n                        testkprime = testkprime \u00f7 p\n                        counter += 1\n                        break\n                    end\n                end\n                if testkprime == 1 && counter < k\n                    break\n                end\n            end\n            if testkprime == 1 && counter == k\n                push!(kprimes, n)\n            end\n        end\n        return kprimes\n    end\n\n    function puzzle(s)\n        counter = 0\n        primesarr = primes(s)\n        for c in count_kprimes(7, 128, s)\n            for b in count_kprimes(3, 8, max(8,s-c-2))\n                if s - c - b in primesarr\n                    counter += 1\n                end\n            end\n        end\n        return counter\n    end\n\n    function primes(k)\n        primesarr = ones(Bool, k)\n        primesarr[1] = 0\n        for p in 2:k\n            for i in 2p:p:k\n                primesarr[i] = 0\n            end\n        end\n        findall(primesarr)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202748,"user_id":null,"body":"module KPrimes\n    export count_kprimes\n    export puzzle\n    function count_kprimes(k, start, nd)\n        primes = generate_primes(nd\u00f7(2^(k-1)))\n        kprimes = []\n        for cp in start:nd\n            currentkprime = cp\n            for i in 1:k\n                for prime in primes\n                    if currentkprime % prime == 0\n                        currentkprime = currentkprime \u00f7 prime\n                        break\n                    end\n                end\n                if currentkprime == 1 && i \u2260 k\n                    currentkprime = 0\n                end\n            end\n            if currentkprime == 1\n                push!(kprimes, cp)\n            end\n        end\n        return kprimes\n    end\n\n    function puzzle(s)\n        counter = 0\n        for c in count_kprimes(7, 128, s)\n            for b in count_kprimes(3, 8,s-c)\n                if s - b - c in generate_primes(s-b-c)\n                    counter += 1\n                end\n            end\n        end\n        return counter\n    end\n\n    function generate_primes(until)\n        if until == 0\n            return []\n        end\n        primes = ones(Bool, until)\n        primes[1] = 0\n        for p in 2:until\n            if primes[p] == 1\n                for id in 2p:p:until\n                    primes[id] = 0\n                end\n            end\n        end\n        return findall(primes)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202749,"user_id":null,"body":"module KPrimes\n    export count_kprimes\n    export puzzle\n    function count_kprimes(k, start, nd)\n    list = Int[]\n    for i in start:nd\n        if primefnmul(i) == k\n            push!(list, i)\n        end\n    end\n    return list\nend\nfunction isp(x)\n    i = 2\n    while i <= sqrt(x)\n        x % i == 0 && (return false)\n        i += 1\n    end\n    return true\nend\nfunction primefnmul(x::Int)\n    fac = 1\n    i = 2\n    while i < x \n        if x % i == 0 && isp(i)\n            x = div(x, i)\n            fac += 1\n            i -= 1\n        end\n        i += 1\n    end\n    fac\nend\nfunction puzzle(s)\n    liste1 = count_kprimes(1, 2, s)\n    liste2 = count_kprimes(3, 4, s)\n    liste3 = count_kprimes(7, 2, s)\n    soln = 0\n    for i1 in liste1\n        for i2 in liste2\n            if i1 + i2 > s\n                break\n            end\n            for i3 in liste3\n                if i1 + i2 + i3 > s\n                    break\n                elseif i1 + i2 + i3 == s\n                    soln += 1\n                end\n            end\n        end\n    end\n    soln\nend\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202750,"user_id":null,"body":"module KPrimes\n    export count_kprimes\n    export puzzle\n    function is_prime(x)\n        x == 1 && return false\n        (x == 2 || x == 3) && return true\n        (x%6 != 1 && x%6 != 5) && return false\n        for i in 5:\u221ax\n            (x%i == 0 || x%(1+2) == 0) && return false\n        end\n        true\n    end\n    \n    function pfc_count(n)\n        result = []\n        i = 0\n        if n == 1\n            push!(result, 1)\n            return result\n        end\n        while i < n\n            if is_prime(n)\n                push!(result, n)\n                return result\n            end\n            for i in 2:n-1\n                if n%i == 0\n                    push!(result, i)\n                    n \u00f7= i\n                    break\n                end\n            end\n        end\n        push!(result, n)\n        result\n    end\n    \n    is_k_prime(n, k) = length(pfc_count(n)) == k\n    \n    function count_kprimes(k, start, nd)\n        [i for i in start:nd if is_k_prime(i, k)]\n    end\n    function puzzle(s)\n        s < 128 && return 0\n        seven_primes = count_kprimes(7, 128, s)\n        max_three_primes = s - findmin(seven_primes)[1]\n        three_primes = count_kprimes(3, 8, max_three_primes)\n        result = 0\n        for p1 in seven_primes\n            s_s = s - p1\n            for p2 in three_primes\n                s_t = s_s - p2\n                is_prime(s_t) && (result += 1)\n            end\n        end\n        result\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202751,"user_id":null,"body":"module KPrimes\n    export count_kprimes\n    export puzzle\n\n    function count_kprimes(k, start, nd)\n        # your code\n        res = []\n        for i in start:nd\n          val = i\n          count = 0\n          factor = 3\n          while (val % 2 == 0) \n            count += 1\n            val = val \u00f7 2\n          end\n          while(val > 1) && (count < k)\n            if(val%factor==0)\n              count += 1\n              val = val \u00f7 factor\n            else\n              factor += 2\n            end\n          end\n          if count == k && val == 1\n            push!(res, i)\n          end\n          #println(res)\n        end\n        return res\n    end\n\n\n    function puzzle(s)\n        # your code\n        one = count_kprimes(1, 2, s-2)\n        three = count_kprimes(3, 2, s-2)\n        seven = count_kprimes(7, 2, s-2)\n        if (one == []) || (three == []) || (seven == [])\n          return(0)\n        else\n          count = 0\n          for i in one\n            for j in three\n              for k in seven\n                if i + j + k == s\n                  count += 1\n                end\n              end\n            end\n          end\n        end\n        return(count)\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202752,"user_id":null,"body":"module KPrimes\n    export count_kprimes\n    export puzzle\n    \nfunction count_kprimes(k, start, nd)\n    function prifac(w, k)\n        w0 = w\n        res = false\n        cnt = 0\n        for i in pri\n            while w % i == 0\n                cnt += 1\n                #println(\"1w=\",w0,\" \", w,\" \",k, \" \",i,\" \", cnt)\n                if cnt > k\n                    return false\n                end\n                w = div(w,i)\n            end\n        end\n        i = maximum(pri) + 2\n        #println(\"i=\", i, \"w=\", w)\n        while i * i <= w\n            while w % i == 0\n                #push!(pri, i)\n                cnt += 1\n                #println(\"2w=\",w0,\" \", w,\" \",k, \" \",i,\" \", cnt)\n                if cnt > k\n                    return false\n                end\n                w = div(w, i)\n            end\n            i += 2\n        end\n        if w > 1\n            cnt += 1\n        end\n        if cnt == k\n            return true\n        else\n            return false\n        end\n    end\n    resu = []\n    pri = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009]\n    for w in start:nd\n        if prifac(w, k)\n            push!(resu, w)\n        end\n    end\n    return resu\nend\n############################################################\nfunction puzzle(s)\n    function is_prime(n)\n        if n in pri\n            return true\n        end\n        for i in pri\n            if n % i == 0\n                return false\n            end\n        end\n        i = maximum(pri)\n        while true\n            if n % i == 0\n                return false\n            end\n            if i * i > n\n                return true\n            end\n            i += 2\n        end\n    end\n    function prifac(w, k)\n        w0 = w\n        res = false\n        cnt = 0\n        for i in pri\n            while w % i == 0\n                cnt += 1\n                if cnt > k\n                    return false\n                end\n                w = div(w,i)\n            end\n        end\n        i = maximum(pri) + 2\n        while i * i <= w\n            while w % i == 0\n                cnt += 1\n                if cnt > k\n                    return false\n                end\n                w = div(w, i)\n            end\n            i += 2\n        end\n        if w > 1\n            cnt += 1\n        end\n        if cnt == k\n            return true\n        else\n            return false\n        end\n    end\n\n    pri = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009]\n    coun = 0\n    if s < 128 + 8 + 2\n        return coun\n    end\n    for i7 in 128:s\n        if prifac(i7, 7)\n            if s - i7 - 2 >= 8\n                for i3 in 8:s - i7\n                    if prifac(i3, 3)\n                        if s - i7 - i3 >=2\n                            if is_prime(s - i7 - i3)\n                                coun += 1\n                            end\n                        end\n                    end\n                end\n            end\n        end\n    end\n    return coun\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5727bb0fe81185ae62000ae3":[{"id":202753,"user_id":null,"body":"function clean_string(s)\n  tmp = replace(s,r\"[^#]#\" => \"\")\n  while s != tmp\n    s = tmp\n    tmp = replace(s,r\"[^#]#\" => \"\")\n  end\n  replace(s,r\"#\" => \"\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202754,"user_id":null,"body":"function clean_string(s)\n    output = \"\"\n    for letter in s\n        if letter == '#'\n            if length(output) == 0\n                continue\n            else\n                output = chop(output)\n            end\n        else\n            output = output * letter\n        end\n    end\n    output\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202755,"user_id":527,"body":"clean_string(s) = replace(s, r\"[^#](?R)*#|\\G#\" => \"\")","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202756,"user_id":null,"body":"function clean_string(s)\n  occursin(\"#\", s) ? clean_string(replace(replace(s, r\"[^#]#\"=>\"\"), r\"^#+\"=>\"\")) : s\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202757,"user_id":null,"body":"function clean_string(s)\n  stack = Char[]\n  for c in s\n    if c == '#'\n      if ~isempty(stack)\n        pop!(stack)\n      end\n    else\n      push!(stack, c)\n    end\n  end\n  return String(stack)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202758,"user_id":null,"body":"function clean_string(s)\n  # ... your code ...\n  ans=[]\n  for x in s\n    if x=='#' && ans!=[]\n      pop!(ans)\n    elseif x!='#'\n    append!(ans,[x])\n    end\n  end\n  if ans==[]\n    return \"\"\n  end\n  return join(ans)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202759,"user_id":null,"body":"function clean_string(s)\n    clean = [];\n    for c in s\n        if c == '#'\n            if length(clean) > 0\n                pop!(clean)\n            else\n                continue\n            end\n        else\n            append!(clean, c)\n        end\n    end\n    join(clean, \"\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202760,"user_id":null,"body":"function clean_string(s)\n    while startswith(s, \"#\")\n        s = chop(s, head = 1, tail = 0)\n    end\n    ss = split(s,\"\")\n    try\n        deleteat!(ss, collect(findfirst(isequal(\"#\"), ss)-1:findfirst(isequal(\"#\"), ss)))\n    catch\n        return join(ss)\n    end\n    clean_string(join(ss))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202761,"user_id":null,"body":"function clean_string(s)\n    count(==('#'), s) == 0 ? s : clean_string(replace(s, r\"^#|[^#]#\" => \"\"))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202762,"user_id":null,"body":"function clean_string(s)\n    ss=split(s,\"\")\n    s2=[\"\" for i=1:length(s)]\n\n    pt=1\n    for i=1:length(s)\n        if ss[i]!=\"#\"\n            s2[pt]=ss[i]\n            pt+=1\n        else\n            pt>1 ? pt-=1 : pt=1\n            s2[pt]=\"\"\n        end    \n    end\n    return string(s2...)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"573182c405d14db0da00064e":[{"id":202763,"user_id":492,"body":"module Consec\n    export consec_kprimes\n\n    function dv(n)\n        cnt = 0; i = 2\n        while (i * i <= n)\n            while (n % i == 0)\n                cnt += 1\n                n \/= i\n            end\n            i += 1\n        end\n        if (n > 1) cnt += 1 end\n        cnt\n    end\n    function consec_kprimes(k, arr)\n        sum([dv(arr[i])== dv(arr[i+1]) == k for i in 1:length(arr) - 1])\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202764,"user_id":492,"body":"module Consec\n    export consec_kprimes\n\n    function dv(n)\n        cnt = 0; i = 2\n        while (i * i <= n)\n            while (n % i == 0)\n                cnt += 1\n                n \/= i\n            end\n            i += 1\n        end\n        if (n > 1) cnt += 1 end\n        cnt\n    end\n    function consec_kprimes(k, arr)\n        sum([dv(arr[i])== dv(arr[i+1]) == k for i in 1:length(arr) - 1])\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202765,"user_id":null,"body":"module Consec\nexport consec_kprimes\n\nfunction consec_kprimes(k, arr)\ncount = 0\n  for i in 1:(length(arr) - 1)\n    if k_primeness(arr[i]) == k && k_primeness(arr[i + 1]) == k\n      count += 1\n    end\n  end\nreturn count\nend\n    \n#basic primality test\nfunction is_prime(n)\n  for i in 2:Int(floor(sqrt(n)))\n    if n % i == 0; \n      return false\n    end\n  end\nreturn n != 1\nend    \n\n#counts prime factors\nfunction k_primeness(n)\ncount = 0\ni = 1\n  while n % 2 == 0 && n > 1\n    n \/= 2\n    count += 1\n  end\n  while n > 1\n    while i <= n\n      if n % i == 0 && is_prime(i); \n        count += 1\n        n \/= i\n        i = 1\n      end\n      i += 2\n    end\n  end\nreturn count\nend\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202766,"user_id":53,"body":"module Consec\n  export consec_kprimes\n  function consec_kprimes(k, arr)\n    m = 0\n    for i = 2:length(arr)\n      if npf(arr[i]) == k && npf(arr[i-1]) == k\n        m = m + 1\n      end\n    end\n    m\n  end\n  function npf(n)\n    m = 0\n    i = 2\n    while n > 1\n      if n % i == 0\n        n = n \u00f7 i\n        m = m + 1\n        i = 2\n      else\n        i = i + 1\n      end\n    end\n    m\n  end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202767,"user_id":null,"body":"module Consec\n    export consec_kprimes\n    function is_kprime(n,k)\n        for i in 2:sqrt(n)\n            n%i == 0 && return is_kprime(div(n,i), k-1)\n        end\n        k == 1 ? true : false\n    end\n\n    function consec_kprimes(k, arr)\n       sum([1 for i in 1:length(arr)-1 if all(is_kprime.([arr[i],arr[i+1]],k))])\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202768,"user_id":null,"body":"module Consec\n    export consec_kprimes\n    \n    function is_kprime(n,k)\n        for i in 2:sqrt(n)\n            n%i == 0 && return is_kprime(div(n,i), k-1)\n        end\n        k == 1 ? true : false\n    end\n\n    function consec_kprimes(k, arr)\n        kprime, count = Dict(arr[1]=> is_kprime(arr[1], k)), 0\n        for i in 1:length(arr)-1 \n            kprime[arr[i+1]] = is_kprime(arr[i+1], k)\n            if kprime[arr[i]] == true && kprime[arr[i+1]] == true count += 1 end\n        end\n        count\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202769,"user_id":null,"body":"module Consec\n    export consec_kprimes\n    function consec_kprimes(k, arr)\n        p = primes(maximum(arr))\n        counter = 0\n        if length(arr) < 2\n            return 0\n        end\n        currentkprime = kprime(k, arr[1], p)\n        for i in 2:length(arr)\n            newkprime = kprime(k, arr[i], p)\n            if currentkprime && newkprime\n                counter +=1\n            end\n            currentkprime = newkprime\n        end\n        return counter\n    end\n\n    function kprime(k, n, p)\n        # Test if n is k-prime with list of primes p\n        for i in 1:k\n            for j in p\n                if n == 1\n                    return false\n                elseif n % j == 0\n                    n = n \u00f7 j\n                    break\n                end\n            end\n        end\n        return n == 1\n    end\n\n    function primes(p)\n        # sieve of Eratosthenes\n        if p > 1\n            arr = BitArray(undef, p)\n            fill!(arr, 1)\n            arr[1] = 0\n        else\n            return []\n        end\n        for i = 2:(floor(Int, \u221a(p)))\n            if arr[i]\n                ip = i^2\n                for j in 0:floor(Int, (p - i^2)\/i)\n                    arr[ip + j*i] = 0\n                end\n            end\n        end\n        return findall(arr)\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202770,"user_id":null,"body":"module Consec\n  export consec_kprimes\n\n  function sieve(n::Int)\n    spf = Vector{Int}(undef, n)\n    isPrime = trues(n+1)\n    isPrime[1] = false;\n    for i in 2:n\n      !isPrime[i] && continue\n      spf[i] = i\n      for j in i*i:i:n\n        if isPrime[j]\n          isPrime[j] = false\n          spf[j] = i\n        end\n      end\n    end\n    spf\n  end\n\n  function getFact(x, spf)\n    ret = []\n    while x != 1\n      push!(ret, spf[x]) \n      x = div(x, spf[x])\n    end\n    length(ret)\n  end\n\n  function consec_kprimes(k, arr)\n    sieve(maximum(arr)) |> \n    spf -> [getFact(arr[i], spf) == getFact(arr[i+1], spf) == k for i in 1:length(arr)-1] |> count\n  end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202771,"user_id":null,"body":"module Consec\n  export consec_kprimes\n\n  function sieve(n::Int)\n    spf = Vector{Int}(undef, n)\n    isPrime = trues(n+1)\n    isPrime[1] = false;\n    for i in 2:n\n      !isPrime[i] && continue\n      spf[i] = i\n      for j in i*i:i:n\n        if isPrime[j]\n          isPrime[j] = false\n          spf[j] = i\n        end\n      end\n    end\n    spf\n  end\n\n  function getFactorization(x, spf)\n    ret = []\n    while x != 1\n      push!(ret, spf[x]) \n      x = div(x, spf[x])\n    end\n    ret\n  end\n\n  function consec_kprimes(k, arr)\n    sieve(maximum(arr)) |> \n    spf -> [length(getFactorization(i, spf)) for i in arr]  |> \n    arr -> [arr[i] == arr[i+1] == k for i in 1:length(arr)-1] |> count\n  end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202772,"user_id":null,"body":"module Consec\n    export consec_kprimes\n    function prime_factors(n)\n    factor = 2 \n    res = []\n\n    while n > 1 \n        while n % factor == 0\n            n = n \/ factor \n            push!(res, factor)\n        end \n        \n        factor = (factor == 2) ? 3 : factor+2\n    end \n    \n    return res \nend\n\nfunction consec_kprimes(k, arr)\n    kprimes = false\n    res = 0\n    for x in arr \n        cur = k == length(prime_factors(x))\n        if cur && kprimes \n            res += 1\n        end \n        kprimes = cur\n    end \n    res \nend\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57356c55867b9b7a60000bd7":[{"id":202773,"user_id":null,"body":"function basic_op(op, v1, v2)\n eval(Expr(:call, Symbol(op), v1, v2))\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202774,"user_id":null,"body":"basic_op(op, v1, v2) = eval(Meta.parse(\"$v1 $op $v2\"))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202775,"user_id":null,"body":"function basic_op(op, v1, v2)\n if op == \"+\"\n    v1 + v2\n elseif op == \"-\"\n    v1 - v2\n elseif op == \"*\"\n    v1 * v2\n elseif op == \"\/\"\n    v1 \/ v2\n end\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202776,"user_id":null,"body":"function basic_op(op, v1, v2)\n  return eval((Meta.parse(\"$v1$op$v2\")))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202777,"user_id":null,"body":"function basic_op(op, v1, v2)\n    op_dict = Dict(\"+\"=>+, \"-\"=>-, \"\/\"=>\/, \"*\"=>*)\n\n    return op_dict[op](v1, v2)\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202778,"user_id":421,"body":"function basic_op(op, v1, v2)\n  op == \"+\" ? v1 + v2 : op == \"-\" ? v1 - v2 : op == \"*\" ? v1 * v2 : op == \"\/\" ? v1 \/ v2 : 0\nend\n  \n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202779,"user_id":null,"body":"function basic_op(op, v1, v2)\n  if op == \"+\" \n    return v1+v2\n  elseif op == \"-\"\n    return v1-v2\n  elseif op == \"*\"\n    return v1 * v2\n  else\n    return v1\/v2\n  end\n  \n #your code here\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202780,"user_id":null,"body":"basic_op(op, v1, v2) = eval(Meta.parse(string(v1,op,v2)))\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202781,"user_id":null,"body":"function basic_op(op, v1, v2)\n  eval(Meta.parse(\"$v1 $op $v2\"))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202782,"user_id":null,"body":"function basic_op(op, v1, v2)\n    eval(Meta.parse(string(v1,op,v2)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5738f5ea9545204cec000155":[{"id":202783,"user_id":421,"body":"function count_letters_and_digits(input)\n  return sum(isdigit(x) || isletter(x) for x in input)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202784,"user_id":null,"body":"count_letters_and_digits(input) = count( x -> isdigit(x) || isletter(x), input )","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202785,"user_id":null,"body":"count_letters_and_digits(input) = length(replace(input, r\"[^\\w]|_\"=> \"\"))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202786,"user_id":null,"body":"count_letters_and_digits(input) = eachmatch(r\"[a-zA-Z0-9]\", input) |> collect |> length","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202787,"user_id":1474,"body":"function count_letters_and_digits(input)\n  sum([length(m.match) for m in eachmatch(r\"[a-z0-9]\"i, input)])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202788,"user_id":null,"body":"function count_letters_and_digits(input)\n  count(x -> isletter(x) || isdigit(x), input)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202789,"user_id":759,"body":"count_letters_and_digits(input) = count(a -> a in ['a':'z'..., 'A':'Z'..., '0':'9'...], input)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202790,"user_id":759,"body":"count_letters_and_digits(input) = count(a -> a in 'a':'z' || a in 'A':'Z' || a in '0':'9', input)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202791,"user_id":null,"body":"function count_letters_and_digits(input)\n  length(replace(input, r\"[^0-9a-zA-Z]\" => \"\"))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202792,"user_id":null,"body":"function count_letters_and_digits(input)\n  count(x -> isdigit(x) || isletter(x), input)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"573992c724fc289553000e95":[{"id":202793,"user_id":null,"body":"module Smallest\n    export smallest\n\n    function smallest(n)\n        swap(digs, i, j) = parse(Int, join(insert!(digs, j, popat!(digs, i))))\n        digs = n |> digits |> reverse\n        out = [n, 0, 0]\n        for i = eachindex(digs), j = eachindex(digs)\n            new = i != j ? swap(copy(digs), i, j) : n\n            new < out[1] && (out = [new, i-1, j-1])\n        end  \n        out  \n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202794,"user_id":492,"body":"module Smallest\n    export smallest\n\n    function smallest(n)\n        s, mem = string(n), [-1, -1, -1]\n        tmp, l = s, length(s)\n        for i = 1:l\n            c = s[i]\n            str1 = s[1:i-1] * s[i + 1:end]\n            for j = 1:l\n                str2 = str1[1:j-1] * string(c) * str1[j:end]\n                if (str2 < tmp)\n                    tmp = str2\n                    mem = [parse(Int64, tmp), i-1, j-1]\n                end\n            end\n        end\n        if (mem[1] == -1)\n            mem = [n, 0, 0]\n        end\n        mem\n    end\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202795,"user_id":null,"body":"module Smallest\n    export smallest\n\n    function smallest(num::Int64)\n        # \n        vec_int = reverse(digits(num))\n        if length(unique(vec_int)) == 1\n            return [num, 0, 0]\n        end\n        len = length(vec_int)\n        val_list = Int64[]\n        cut_list = Int64[] # 1-based\n        ins_list = Int64[] # 1-based\n        for cut in 1:len\n            temp_cut_number = vec_int[cut]\n            temp_ins_index = deleteat!([1:len;], cut)\n            temp_ins_number = vec_int[temp_ins_index]\n            for ins in temp_ins_index\n                temp_inserted = deepcopy(temp_ins_number)\n                temp_res = insert!(temp_inserted, ins, temp_cut_number)\n                temp_int = parse(Int64, join(temp_res))\n                append!(val_list, temp_int)\n                append!(cut_list, cut)\n                append!(ins_list, ins)\n            end\n        end\n        # \n        min_val = minimum(val_list)\n        # \n        min_index = findall(val -> val == min_val, val_list)\n        # \n        min_amount = length(min_index)\n        if min_amount == 1\n            cut_index = only(min_index)\n            # 1-based to 0-based\n            return [min_val, cut_list[cut_index]-1, ins_list[cut_index]-1]\n        else\n            # \n            (_ , index) = findmin(cut_list[min_index])\n            cut_index = min_index[index]\n            # 1-based to 0-based\n            return [min_val, cut_list[cut_index]-1, ins_list[cut_index]-1]\n        end\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202796,"user_id":null,"body":"module Smallest\n    export smallest\n\n    \"\"\"\n    Given a positive integer n, re-arranging the digits to find the lowest positive integer possible such that only one digit's position is changed.\n    \n    Returns an array or a tuple or a string depending on the language (see \"Sample Tests\") with\n    \n        - the smallest number you got\n        - the index d of the digit d you took, d as small as possible\n        - the index idx (as small as possible) where you insert this digit d to have the smallest number.\n    \"\"\"\n    function smallest(n)\n        ### careful!\n        ### indexing of input is calculated based on 0\n        ### julia works with indexing based on 1\n    \n        # get all the digits\n        arr = reverse(digits(n))\n    \n        # initialise objective values\n        best_int = n\n        best_d = 0 # digit of n to be changed\n        best_idx = 0 # resulting index of digit d\n    \n        # exhaustive search to check every possible resulting value \n        for d = 1:length(arr) # loop over each digit in n\n            for idx = 1:length(arr) # loop over each changeable index\n                \n                # modify the order of n\n                arr_mod = arr[1:end .!= d] # extract all unchanged digits\n                insert!(arr_mod, idx, arr[d]) # change position of digit d\n                \n                # check newly created positive integer whether lower then best found value\n                cur_val = parse(Int64, join(arr_mod))\n                if cur_val < best_int # if lowere\n    \n                    # update\n                    best_int = cur_val\n                    best_d = d - 1 ### careful! indexing changed\n                    best_idx = idx - 1 ### to fit testing\n    \n                end \n            end\n        end\n    \n        return [best_int, best_d, best_idx]\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202797,"user_id":null,"body":"module Smallest\n    export smallest\n\n    function smallest(n)\n        swap(digs, i, j) = parse(Int, join(insert!(digs, j, popat!(digs, i))))\n        digs = n |> digits |> reverse\n        out = [n, 0, 0]\n        for i = eachindex(digs), j = eachindex(digs)\n            new = i != j ? swap(copy(digs), i, j) : n\n            new < out[1] && (out[1] = new; out[2] = i-1; out[end] = j-1)\n        end  \n        out  \n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202798,"user_id":null,"body":"module Smallest\n    export smallest\n\n    function smallest(n)\n        d = parse.(Int, split(string(n), \"\"))\n        dlen = length(d)\n        smallest = n*100\n        ismallest = 0\n        jsmallest = 0\n        for i in 1:dlen\n            s = d[1:i-1]\n            m = [d[i]]\n            e = d[i+1:dlen]\n            for j in 1:dlen\n                t = vcat(s,e)\n                sj = t[1:j-1]\n                ej = t[j:end]\n                k = vcat(sj,m,ej)\n                l = parse(Int, join(string.(k)))\n                if l < smallest\n                    smallest = l\n                    ismallest = i\n                    jsmallest = j\n                end\n            end\n        end\n        return [smallest, ismallest-1, jsmallest-1]\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202799,"user_id":null,"body":"module Smallest\n    export smallest\n\n    function smallest(n)\n        smallest = n\n        n = \"$n\"\n        ivalue = 0\n        jvalue = 0\n        for i in 1:length(n)\n          tempn = n[1:i-1] * n[i+1:end]\n          for j in 1:length(n)\n            if parse(Int, tempn[1:j-1] * n[i] * tempn[j:end]) < smallest\n              smallest = parse(Int, tempn[1:j-1] * n[i] * tempn[j:end])\n              ivalue = i-1\n              jvalue = j-1\n            end\n          end\n        end\n        [smallest, ivalue, jvalue]\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202800,"user_id":null,"body":"module Smallest\n    export smallest\n\n    function swapped(dgts, moveidx, insertionpoint)\n        d = copy(dgts)\n        dgttomove = splice!(d, moveidx)\n        insert!(d, insertionpoint, dgttomove)\n        parse(Int, join(d))\n    end\n\n    function smallest(n)\n        dgts = reverse(digits(n))\n        best_swap = [Inf, 0, 0]\n\n        for from in 1:length(dgts)\n            for to in 1:length(dgts)\n                from == to && from != 1 && continue\n                swap = swapped(dgts, from, to)\n                if swap < best_swap[1]\n                    best_swap = [swap, from-1, to-1]\n                end\n            end\n        end\n\n        best_swap\n    end\n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202801,"user_id":null,"body":"module Smallest\n    export smallest\n    \n    function getSwappedValue(arr, i, j)\n      temp = splice!(arr, i)\n      insert!(arr, j, temp)\n      parse(Int, join(arr))\n    end\n\n    function smallest(n)\n      minValue = n\n      swapIndices = [1, 1]\n      digitArr = reverse(digits(n))\n      for i = 1:length(digitArr)\n        for j = 1:length(digitArr)\n          if i == j continue end\n          value = getSwappedValue(copy(digitArr), i, j)\n          if value < minValue\n            minValue = value\n            swapIndices[1] = i\n            swapIndices[2] = j\n          end\n        end\n      end\n      [minValue, swapIndices[1] - 1, swapIndices[2] - 1]\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202802,"user_id":null,"body":"module Smallest\n    export smallest\n\n    function smallest(n)\n        str_num = string(n)\n        min_num, x, y = n, 0, 0\n        for i in 1:length(str_num)\n            for j in 1:length(str_num)\n                new_str = Vector{Char}(str_num)\n                insert_num = new_str[i]\n                deleteat!(new_str, i)\n                insert!(new_str, j, insert_num)\n                new_num = parse(Int, join(new_str))\n                if new_num < min_num\n                    min_num = new_num\n                    x = i-1\n                    y = j-1\n                end\n            end\n        end\n        [min_num, x, y]\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"573d498eb90ccf20a000002a":[{"id":202803,"user_id":527,"body":"function decode(string)\n  map(c -> \"5987604321\"[parse(Int, c) + 1], string)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202804,"user_id":421,"body":"decode(string) = join(\"5987604321\"[findfirst(isequal(x), split(\"0123456789\", \"\"))] for x in split(string, \"\"))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202805,"user_id":null,"body":"function decode(s)\n  join(map(c -> (10 - Int(c) - 5*(c % 5 == 0)) % 10, parse.(Int, string.(collect(s)))))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202806,"user_id":null,"body":"decode(string) = map(n-> Dict(zip('0':'9', ['5','9','8','7','6','0','4','3','2','1']))[n], string)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202807,"user_id":null,"body":"function decode(str)\n  dict = Dict(\"1\"=>\"9\",\"2\"=>\"8\",\"3\"=>\"7\",\"4\"=>\"6\",\"0\"=>\"5\",\"5\"=>\"0\",\"9\"=>\"1\",\"8\"=>\"2\",\"7\"=>\"3\",\"6\"=>\"4\")\n  join([dict[string(q)] for q in str])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202808,"user_id":881,"body":"function decode(string)\n    dict = Dict([\n        '1' => '9',\n        '2' => '8',\n        '3' => '7',\n        '4' => '6',\n        '5' => '0',\n        '6' => '4',\n        '7' => '3',\n        '8' => '2',\n        '9' => '1',\n        '0' => '5'\n    ])\n    join(dict[char] for char in string)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202809,"user_id":759,"body":"function decode(string)\n  join(x >= '0' && x <= '9' ? \"5987604321\"[Int(x) - Int('0') + 1] : x for x in string)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202810,"user_id":null,"body":"function decode(str)\n    letters = split(str,\"\")\n    non_repeat = unique!(split(str,\"\"))\n    for i in range(1,length(letters), step = 1)\n        if letters[i] != \"5\" && letters[i] != \"0\"\n            letters[i] = string(10 - parse(Int64, letters[i]))\n        else\n            letters[i] = string(5 - parse(Int64, letters[i]))\n        end\n    end\n    return join(letters)\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202811,"user_id":null,"body":"function decode(string)\n  code = Dict('1'=>'9', '2'=>'8', '3'=>'7', '4'=>'6', '5'=>'0', '6'=>'4', '7'=>'3', '8'=>'2', '9'=>'1', '0'=>'5')\n  join(code[i] for i in string)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202812,"user_id":null,"body":"decode(ch) = join(c == '0' ? '5' : c == '5' ? '0' : '9'-(c-'1') for c in ch)\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"574b3b1599d8f897470018f6":[{"id":202813,"user_id":null,"body":"get_real_floor(n::Int)::Int = n - (n > 0) - (n > 13)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202814,"user_id":null,"body":"get_real_floor(n) = n - (n >= 1) - (n >= 13)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202815,"user_id":572,"body":"function get_real_floor(n::Int)::Int\n  n\u22640 ? n : n\u226413 ? n-1 : n-2\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202816,"user_id":527,"body":"function get_real_floor(n::Int)::Int\n  n <= 0 ? n : n < 13 ? n - 1 : n - 2\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202817,"user_id":2723,"body":"get_real_floor(n::Int)::Int = n>13 ? n-2 :\n                            n<1  ? n   : n-1","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202818,"user_id":null,"body":"function get_real_floor(n::Int)::Int\n  if n \u2264 0\n    n\n  elseif n > 13\n    n - 2\n  else\n    n - 1\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202819,"user_id":null,"body":"get_real_floor(n::Int)::Int = n \u2265 13 ? n - 2 : n > 0 ? n - 1 : n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202820,"user_id":null,"body":"function get_real_floor(n::Int)::Int\n  n > 12 ? n - 2 : n > 0 ? n - 1 : n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202821,"user_id":null,"body":"function get_real_floor(n)\n  if n < 1\n    return n\n  elseif n < 13\n    return n - 1\n  else\n    return n - 2\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202822,"user_id":null,"body":"function get_real_floor(n::Int)::Int\n  n > 13 && (n -= 1)\n  n > 0 && (n -= 1)\n  n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57591ef494aba64d14000526":[{"id":202823,"user_id":null,"body":"module JohnAnn\n    export john_ann, john, ann, sum_john, sum_ann\n  \nfunction learn_kata(n)\n    a = [1]\n    j = [0]\n\n    for k in 2:n\n        u = a[k-1] + 1\n        v = j[k-1] + 1\n        push!(j, k - 1 - a[v])\n        push!(a, k - 1 - j[u])\n    end\n\n    return a, j, sum(a), sum(j)\nend\n\n\n\n\nfunction john(n)\n    learn_kata(n)[2]\nend\n\nfunction ann(n)\n    learn_kata(n)[1]\nend\n\nfunction sum_john(n)\n    learn_kata(n)[4]\nend\n\nfunction sum_ann(n)\n    learn_kata(n)[3]\nend\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202824,"user_id":null,"body":"module JohnAnn\n    export john_ann, john, ann, sum_john, sum_ann\n\n    function lets_do_brute_force(n, ann = true)\n        a, j = [1], [0]\n        for i in 1:n-1\n            push!(j, i-a[j[i]+1])\n            push!(a, i-j[a[i]+1])\n        end\n        ann ? a : j\n    end\n\n    function john(n)\n        lets_do_brute_force(n, false)\n    end\n\n    function ann(n)\n        lets_do_brute_force(n)\n    end\n\n    function sum_john(n)\n        sum(lets_do_brute_force(n, false))\n    end\n\n    function sum_ann(n)\n        sum(lets_do_brute_force(n))\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202825,"user_id":null,"body":"module JohnAnn\n    export john_ann, john, ann, sum_john, sum_ann\n\n    function john_ann(n)\n#       kata = Dict(\"john\" => [0], \"ann\" => [1])\n      j = fill(0,n)\n      a = fill(1,n)\n  \n      for day in 1:n-1\n        j[day+1] = day - a[j[day]+1]\n        a[day+1] = day - j[a[day]+1]\n      end\n  \n      return (j, a)\n    end\n  \n    function john(n)\n      return john_ann(n)[1]\n    end\n\n    function ann(n)\n      return john_ann(n)[2]\n    end\n\n    function sum_john(n)\n      return sum(john(n))\n    end\n\n    function sum_ann(n)\n      return sum(ann(n))\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202826,"user_id":53,"body":"module JohnAnn\n    export john_ann, john, ann, sum_john, sum_ann\n  \n    function john(n)\n      walk(n)[2]\n    end\n\n    function ann(n)\n      walk(n)[1]\n    end\n\n    function sum_john(n)\n       walk(n)[4]\n    end\n\n    function sum_ann(n)\n       walk(n)[3]\n    end\n\n    function walk(n)\n      xs = [0]\n      ys = [1]\n      xsum = 0\n      ysum = 1\n      for i in 1:n-1\n        x1 = xs[i]\n        x2 = ys[x1 + 1]\n        push!(xs, i - x2)\n        y1 = ys[i]\n        y2 = xs[y1 + 1]\n        push!(ys, i - y2)\n        xsum += i - x2\n        ysum += i - y2\n      end\n      [ys, xs, ysum, xsum]\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202827,"user_id":null,"body":"module JohnAnn\nexport john_ann, john, ann, sum_john, sum_ann\n\njohnKatas = [0]\nannKatas = [1]\n\nfunction getAnn(n)\n  if n > length(annKatas)\n    for i = length(annKatas):n\n      push!(annKatas, i - getJohn(annKatas[i] + 1))\n    end\n  end\n  annKatas[n]\nend\n\nfunction getJohn(n)\n  if n > length(johnKatas)\n    for i = length(johnKatas):n\n      push!(johnKatas, i - getAnn(johnKatas[i] + 1))\n    end\n  end\n  johnKatas[n]\nend\n\nfunction john(n)\n  getJohn(n)\n  johnKatas[1:n]\nend\n\nfunction ann(n)\n  getAnn(n)\n  annKatas[1:n]\nend\n\nfunction sum_john(n)\n  getJohn(n)\n  sum(johnKatas[1:n])\nend\n\nfunction sum_ann(n)\n  getAnn(n)\n  sum(annKatas[1:n])\nend\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202828,"user_id":492,"body":"module JohnAnn\n    export john_ann, john, ann, sum_john, sum_ann\n    function john_ann(n)\n        john_list = [0]; ann_list = [1]\n        if n == 0 \n            return [[0], [1]] \n        end\n        i = 2\n        while i < n\n            j = john_list[i - 1]\n            a1 = j == 0 ? 1 : ann_list[j]\n            push!(john_list, i - a1)\n            a = ann_list[i - 1]\n            j1 = john_list[a]\n            push!(ann_list, i - j1)\n            i += 1\n        end\n        [pushfirst!(john_list, 0), pushfirst!(ann_list, 1)]\n    end\n\n    function john(n)\n        john_ann(n)[1]\n    end\n\n    function ann(n)\n        john_ann(n)[2]\n    end\n\n    function sum_john(n)\n        sum(john_ann(n)[1])\n    end\n\n    function sum_ann(n)\n        sum(john_ann(n)[2])\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202829,"user_id":null,"body":"module JohnAnn\n    export john_ann, john, ann, sum_john, sum_ann\n  \nfunction aj(n)\n    a = [1]\n    j = [0]\n    for i in 2:n\n        append!(j, i - 1 - a[j[i-1]+1])\n        append!(a, i - 1 - j[a[i-1]+1])\n    end\n    return [a, j]\n    \nend\n\nfunction john(n)\n    return aj(n)[2]\nend\n\nfunction ann(n)\n    return aj(n)[1]\nend\n\n\nfunction sum_john(n)\n    return sum(john(n))\nend\n\nfunction sum_ann(n)\n    return sum(ann(n))\nend\n\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202830,"user_id":null,"body":"module JohnAnn\n    export john_ann, john, ann, sum_john, sum_ann\n  \n    A = Dict{Int, Int}(0 => 1)\n    J = Dict{Int, Int}(0 => 0)\n    \n    function a(n)\n        n >= 0 || return 0\n        haskey(A, n) && return A[n]\n        k = n - j(a(n - 1))\n        A[n] = k\n        return k\n    end\n    \n    function j(n)\n        n >= 0 || return 0\n        haskey(J, n) && return J[n]\n        k = n - a(j(n - 1))\n        J[n] = k\n        return k\n    end\n    \n    function ann(n)\n        return a.(0:(n-1)) \n    end\n    \n    function john(n)\n        return j.(0:(n-1))\n    end\n    \n    function sum_ann(n)\n        return sum(ann(n))\n    end\n    \n    function sum_john(n)\n        return sum(john(n))\n    end\n    \nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202831,"user_id":null,"body":"module JohnAnn\nexport john_ann, john, ann, sum_john, sum_ann\n\nfunction j_a(n, john)\n    j, a = zeros(Int, n), ones(Int, n)\n     \n    for i in 2:n\n       j[i], a[i] = i-a[j[i-1]+1]-1, i-j[a[i-1]+1]-1\n    end\n    john?j:a\nend\n\nfunction john(n)\n     j_a(n,true)\nend\n\nfunction ann(n)\n     j_a(n,false)\nend\n\nfunction sum_john(n)\n    sum(john(n))\nend\n\nfunction sum_ann(n)\n    sum(ann(n))\nend\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5763bb0af716cad8fb000580":[{"id":202832,"user_id":421,"body":"function countsquares(cuts)\n   iszero(cuts) ? 1 : cuts * cuts * 6 + 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202833,"user_id":null,"body":"function countsquares(cuts)\n   cuts == 0 ? 1 : (cuts+1)^3 - (cuts-1)^3   \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202834,"user_id":881,"body":"countsquares(cuts) = (cuts + 1)^3 - max(0, cuts - 1)^3","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202835,"user_id":null,"body":"countsquares(cuts) = 6cuts^2 + 2^!iszero(cuts)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202836,"user_id":null,"body":"countsquares(n) = (n+1)^3 - (n>0 ? (n-1)^3 : 0)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202837,"user_id":null,"body":"function countsquares(cuts::Int64)::Int64\n  cuts >= 1 ? (cuts +1)^3 - (cuts-1)^3 : 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202838,"user_id":53,"body":"function countsquares(n)\n    n == 0 ? 1 : 6 * (n + 1) * (n + 1) - 12 * (n + 1) + 8\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202839,"user_id":527,"body":"countsquares(cuts) = cuts == 0 ? 1 : 6cuts^2 + 2","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"576757b1df89ecf5bd00073b":[{"id":202840,"user_id":null,"body":"function tower_builder(n)\n\t[ join( n \u2208 x-y+1:x+y-1 ? '*' : ' ' for x \u2208 1:2n-1 ) for y \u2208 1:n ]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202841,"user_id":null,"body":"function tower_builder(n)\n  map(k -> (\" \"^(n - k)) * (\"*\"^(2k - 1)) * (\" \"^(n - k)), 1:n)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202842,"user_id":null,"body":"function tower_builder(n)\n    [repeat(' ', n - i) * repeat('*', 2 * i - 1) * repeat(' ', n - i) for i in 1:n]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202843,"user_id":null,"body":"function tower_builder(nfloors)\n    ans = []\n    N = 2 * nfloors - 1\n    for i in 1:nfloors\n        nstars = 2 * i - 1\n        nspaces::Int = (N - nstars) \/ 2\n        push!(ans, \"$(' '^nspaces)$('*'^nstars)$(' '^nspaces)\")\n    end\n    ans\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202844,"user_id":null,"body":"function tower_builder(nfloors)\n  map(i-> \n    repeat(\" \",nfloors-i) * repeat(\"*\", 2i-1) * repeat(\" \",nfloors-i),\n    1:nfloors)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202845,"user_id":null,"body":"function tower_builder(nfloors)\n    numChars = 2 * nfloors - 1\n    tower = Vector{String}()\n    for i \u2208 1:nfloors\n        numThings = 2 * i - 1\n        padding = (numChars - numThings) \u00f7 2\n        floor = (\" \" ^ padding) * (\"*\" ^ numThings) * (\" \" ^ padding)\n        push!(tower, floor)\n    end\n    return tower\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202846,"user_id":null,"body":"function tower_builder(nfloors)\n  res = Array{String}(undef,nfloors)\n  for i = 1:nfloors\n    res[i] = \" \" ^ (nfloors-i) * \"*\" ^ (2*i-1) * \" \"^ (nfloors-i)\n  end\n  return res\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202847,"user_id":null,"body":"function tower_builder(nfloors)\n  #your code here\n  return [\" \"^(nfloors-i) * \"*\"^(2*i-1) * \" \"^(nfloors-i) for i in 1:nfloors]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202848,"user_id":null,"body":"function tower_builder(nfloors)\n    function disp(n)\n        return 2*n + 1\n    end\n    out = Vector{String}(undef, nfloors)\n    maxn = disp(nfloors-1)\n    for n in 0:(nfloors-1)\n        nast = Int((maxn - disp(n))\/2)\n        out[n+1] = \" \"^(nast) * \"*\" ^ disp(n) * \" \"^(nast)\n    end\n    return out\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202849,"user_id":null,"body":"function tower_builder(nfloors)\n  function makeFloor(k)\n    side = repeat(\" \", nfloors-k)\n    side*repeat(\"*\", 2*k-1)*side\n  end\n  [makeFloor(k) for k in 1:nfloors]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"576bb71bbbcf0951d5000044":[{"id":202850,"user_id":null,"body":"function count_positives_sum_negatives(input)\n  \n  if input == []\n    return []\n  else\n    return([count(>(0), input),sum(filter(<(0),input))])\n  end\n  \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202851,"user_id":null,"body":"function count_positives_sum_negatives(input)\n  length(input) == 0 ? [] : [count(input .> 0), sum(filter(x -> x < 0, input))]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202852,"user_id":421,"body":"function count_positives_sum_negatives(input)\n  input == [] ? [] : [sum(x>0 for x in input), sum(filter(x->x<0, input))]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202853,"user_id":null,"body":"function count_positives_sum_negatives(nums)\n  return length(nums) <= 0 ? [] : [sum(n > 0 for n in nums), sum(n for n in nums if n < 0) ] \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202854,"user_id":null,"body":"function count_positives_sum_negatives(input)\n  length(input) == 0 ? [] : [count(input .> 0), (input .< 0)' * input]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202855,"user_id":null,"body":"function count_positives_sum_negatives(input)\n  if length(input) == 0 \n    return []\n  else\n    return [length(input[input .> 0]) , sum(input[input .< 0])]\n  end \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202856,"user_id":null,"body":"function count_positives_sum_negatives(input)\n  isempty(input) ? [] : [length(filter(>(0), input)), sum(filter(<(0), input))]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202857,"user_id":null,"body":"function count_positives_sum_negatives(input)\n  if length(input) == 0\n    return []\n  end\n  pos = Vector{Int}()\n  neg = Vector{Int}()\n  for i in input\n    if i > 0\n      push!(pos, i)\n    elseif i <= 0\n      push!(neg, i)\n    end\n  end\n\n  return [length(pos), sum(neg)]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202858,"user_id":null,"body":"function count_positives_sum_negatives(input)\n  if input == []\n    return []\n  else  \n    return [count(x->x>0, input), filter(x->x<0, input) |> sum]\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202859,"user_id":1474,"body":"function count_positives_sum_negatives(input)\n  if input == []\n    return input\n  end\n  n_cnt, p_cnt = 0, 0\n  for i in input\n    if i < 0\n      n_cnt += i\n    elseif i > 0\n      p_cnt += 1\n    end\n  end\n  [p_cnt, n_cnt]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5772382d509c65de7e000982":[{"id":202860,"user_id":null,"body":"module Fibo\n    export length_sup_u_k, comp\n\n    U = [1, 1]\n    \n    function grow_U_to_n(n)\n        for i in length(U)+1:n\n            push!(U, U[i-U[i-1]]+U[i-U[i-2]])\n        end\n    end\n    function length_sup_u_k(n, k)\n        grow_U_to_n(n)\n        length([i for i in 1:n if U[i]>=k])\n    end\n    function comp(n)\n        grow_U_to_n(n)\n        length([U[i] for i in 3:n if U[i]<U[i-1]])\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202861,"user_id":null,"body":"module Fibo\n    export length_sup_u_k, comp\n\n    u_cache = Dict{Int,Int}()\n\n    function u(n)\n      if haskey(u_cache,n) return u_cache[n] end\n      \n      if n==1 || n==2\n          global u_cache[n]=1\n          return 1 \n      end\n\n      a,b = u(n-1),u(n-2)\n      f = u(n-a) + u(n-b)\n      global u_cache[n] = f\n      return f  \n    end\n\n    function length_sup_u_k(n, k)\n      sum([1 for i in 1:n if u(i)>=k])\n    end\n\n    function comp(n)\n      p = [u(i) for i in 1:n]\n      foldl((a,i)-> a + ifelse(p[i]<p[i-1],1,0), 2:n; init=0)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202862,"user_id":null,"body":"module Fibo\n    export length_sup_u_k, comp, u\n\n    function length_sup_u_k(n, k)\n        r = u_range(n)\n        return filter(x -> x \u2265 k,r) |> length\n    end\n    function comp(n)\n        r = u_range(n)\n        cnt = 0\n        a = r[1]\n        for b in r[2:end]\n            if a>b\n                cnt += 1\n            end\n            a = b\n        end\n        return cnt\n    end\n\n    function u_range(n)\n      r = zeros(Int64,n)\n        for i in 1:n\n            r[i] = u(i,r)\n        end\n      return r\n    end\n\n    function u(n, r=[])\n        if !isempty(r)\n            if r[n] > 0\n                return r[n]\n            end\n        end\n        if n < 3\n            return 1\n        else\n          return u(n-u(n-1,r),r) + u(n-u(n-2,r),r)\n        end\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202863,"user_id":null,"body":"module Fibo\n    export length_sup_u_k, comp\n\n    function length_sup_u_k(n, k)\n        u, count = [1, 1], 0\n        for i in 3:n\n            push!(u, u[i-u[end]]+u[i-u[end-1]])\n            u[end] \u2265 k && (count += 1)\n        end\n        count\n    end\n    function comp(n)\n        u, count = [1, 1], 0\n        for i in 3:n\n            push!(u, u[i-u[end]]+u[i-u[end-1]])\n            u[end] < u[end-1] && (count += 1)\n        end\n        count\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202864,"user_id":null,"body":"module Fibo\n    export length_sup_u_k, comp\n\n    function f(n)\n      ret = [1,1]\n      for i in 3:n\n        push!(ret, ret[i-ret[end]]+ret[i-ret[end-1]])\n      end\n      return ret\n    end\n\n    function length_sup_u_k(n, k)\n        sum(x>=k ? 1 : 0 for x in f(n))\n    end\n    function comp(n)\n        fs = f(n)\n        return sum(fs[k]<fs[k-1] ? 1 : 0 for k in 2:n)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202865,"user_id":50,"body":"module Fibo\n    export length_sup_u_k, comp\n    function f(n)\n      v=[1,1]\n      for i in 3:n\n        push!(v,v[i-v[i-1]]+v[i-v[i-2]])\n      end\n      return v\n    end\n    function length_sup_u_k(n, k)\n      return length(filter(x -> x >= k, f(n)))\n    end\n    function comp(n)\n      v = f(n)\n      return sum([1 for (i,n) in enumerate(v) if i > 1 && n < v[i-1]])\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202866,"user_id":null,"body":"module Fibo\n    export length_sup_u_k, comp\n\n    memo = Dict(1=>1, 2=>1)\n\n    function length_sup_u_k(n, k)\n        ret = 0\n        for i in 1:n\n            if !haskey(memo, i)\n                memo[i] = memo[i - memo[i-1]] + memo[i - memo[i-2]]\n            end\n            if memo[i] >= k ret += 1 end\n        end\n        ret\n    end\n\n    function comp(n)\n        ret = 0\n        for i in 3:n\n            if !haskey(memo, i)\n                memo[i] = memo[i - memo[i-1]] + memo[i - memo[i-2]]\n            end\n            if memo[i] < memo[i-1] ret += 1 end\n        end\n        ret\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202867,"user_id":null,"body":"module Fibo\n    export length_sup_u_k, comp\n    \n    memory = Dict(1 => 1, 2 => 1)\n\n    function u(n)\n      if haskey(memory, n)\n        return memory[n]\n      else\n        global memory[n] = u(n - u(n - 1)) + u(n - u(n - 2))\n        return memory[n]\n      end\n    end\n\n    function length_sup_u_k(n, k)\n      count = 0\n      for i in 1:n\n        u(i) >= k && (count += 1)  \n      end\n      count\n    end\n\n    function comp(n)\n        count = 0\n        for i in 1:n-1\n          u(i) > u(i+1) && (count += 1)\n        end\n        count\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202868,"user_id":53,"body":"module Fibo\n    export length_sup_u_k, comp\n\n    function length_sup_u_k(n, k)\n        m = 0\n        map = seq(n)\n        for x in values(map)\n            if x >= k\n                m += 1\n            end\n        end\n        m\n    end\n\n    function comp(n)\n        m = 0\n        map = seq(n)\n        for i in keys(map)\n            if i > 1 && map[i] < map[i - 1]\n                m += 1\n            end\n        end\n        m\n    end\n\n    function seq(n)\n        map = Dict(0 => 1, 1 => 1, 2 => 1)\n        i = 3\n        while i <= n\n            map[i] = map[i - map[i - 1]] + map[i - map[i - 2]]\n            i += 1\n        end\n        map\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202869,"user_id":null,"body":"module Fibo\n    export length_sup_u_k, comp\n    arr = [1,1,2,3,3,4,5,5,6,6,6,8,8,8,10,9,10,11,11,12,12,12,12]\n    function get_n(n)\n        while (n>(i=length(arr)))\n            @inbounds push!(arr,arr[i+1-arr[i]]+arr[i+1-arr[i-1]])\n        end\n    end\n    function length_sup_u_k(n, k)\n        if length(arr)<n\n            get_n(n);\n        end\n        sum(arr[1:n] .>= k)\n    end\n    function comp(n)\n        if length(arr)<n\n            get_n(n);\n        end\n        sum(arr[1:n-1] .> arr[2:n])\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5772da22b89313a4d50012f7":[{"id":202870,"user_id":421,"body":"function greet(name,owner) \n  \"Hello $(name == owner ? \"boss\" : \"guest\")\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202871,"user_id":null,"body":"function greet(name,owner) \n  if name == owner\n    rslt = \"Hello boss\"\n  else\n    rslt = \"Hello guest\"\n  end\n  return rslt\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202872,"user_id":null,"body":"function greet(name,owner) \n  \"Hello \" * (name == owner ? \"boss\" : \"guest\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202873,"user_id":null,"body":"greet(name,owner) = name == owner ? \"Hello boss\" : \"Hello guest\"\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202874,"user_id":null,"body":"function greet(name,owner) \n  #your code here\n  if name == owner\n    return \"Hello boss\"\n  else\n    return \"Hello guest\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202875,"user_id":null,"body":"function greet(name,owner) \n  #your code here\n  return name==owner ? \"Hello boss\" : \"Hello guest\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202876,"user_id":null,"body":"function greet(name,owner) \n  string(\"Hello \", name == owner ? \"boss\" : \"guest\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202877,"user_id":50,"body":"function greet(name,owner) \n  return name == owner ? \"Hello boss\" : \"Hello guest\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202878,"user_id":null,"body":"function greet(name,owner) \n  name == owner && return \"Hello boss\"\n  \"Hello guest\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202879,"user_id":null,"body":"function greet(name,owner) \n  if name == owner\n    return \"Hello boss\"\n  end\n  return \"Hello guest\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"577a98a6ae28071780000989":[{"id":202880,"user_id":null,"body":"function minimum(arr)\n  minimum(arr)\nend\n\nfunction maximum(arr)\n  maximum(arr)\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202881,"user_id":209,"body":"mini, maxi = minimum, maximum","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202882,"user_id":null,"body":"function minimum(arr)\n    min = arr[1]\n    for i in arr\n        if i < min\n            min = i\n        end\n    end\n    return min\n  end\n  \nfunction maximum(arr)\nmax = arr[1]\nfor i in arr\n    if i > max\n        max = i\n    end\nend\nreturn max\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202883,"user_id":null,"body":"function minimum(arr)\n  #your code here\n  min = arr[1]\n  for i in arr\n      if i <= min\n          min = i\n      end\n  end\n  return min\nend\n\nfunction maximum(arr)\n  #your code here\n  max = arr[1]\n  for i in arr\n      if i >= max\n          max = i\n      end\n  end\n  return max\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202884,"user_id":null,"body":"function minimum(arr)\n  minimum(arr)\nend\n\nfunction maximum(arr)\n  max(arr...)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202885,"user_id":null,"body":"function minimum(arr)\n  #your code here\n  return minimum(arr)\nend\n\nfunction maximum(arr)\n  #your code here\n  return maximum(arr)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202886,"user_id":null,"body":"function minimum(arr)\n  # this would be more convenient\n  # minimum(arr)\n  #\n  # using a loop, just for exercise\n  a = arr[1]\n  for x in arr[2:end]\n    if x < a\n      a = x\n    end\n  end\n  return a\nend\n\nfunction maximum(arr)\n  maximum(arr)\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202887,"user_id":null,"body":"function minimum(arr)\n  return minimum(arr)\nend\n\nfunction maximum(arr)\n  return maximum(arr)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202888,"user_id":null,"body":"mini(arr) = minimum(arr)\n\nmaxi(arr) = maximum(arr)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202889,"user_id":53,"body":"function minimum(arr)\n  min(arr...)\nend\n\nfunction maximum(arr)\n  max(arr...)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"577bd026df78c19bca0002c0":[{"id":202890,"user_id":null,"body":"function correct(string)\n  correction = Dict('0' => 'O', '5' => 'S', '1' => 'I')\n  map(x -> get(correction, x, x), string)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202891,"user_id":572,"body":"function correct(string)\n  d = Dict('5'=>'S', '0'=>'O', '1'=>'I')\n  join([get(d,x,x) for x in string])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202892,"user_id":2723,"body":"maketrans = Dict('5'=> 'S', '0'=> 'O', '1'=>'I')\ncorrect(str) = join(get(maketrans, letter, letter) for letter in str)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202893,"user_id":null,"body":"function tr(str, s1, s2)\n    table = Dict(zip(s1, s2))\n    return join(get(table, c, c) for c in str)\nend\n\ncorrect(str) = tr(str, \"501\", \"SOI\")","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202894,"user_id":null,"body":"function correct(string)\n  corrector = Dict('5'=>'S','0'=>'O','1'=>'I')\n  f(x) = x in keys(corrector) ? corrector[x] : x\n  return map(f, string)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202895,"user_id":null,"body":"correct(string) = replace(replace(replace(string, '0'=> 'O'), '5'=> 'S'), '1'=> 'I') ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202896,"user_id":null,"body":"function correct(s)\n  replace(replace(replace(s, \"5\" => \"S\"), \"0\" => \"O\"), \"1\" => \"I\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202897,"user_id":null,"body":"function correct(s)\n  return replace(replace(replace(s, r\"(?)5\" => \"S\"), r\"(?)0\" => \"O\"), r\"(?)1\" => \"I\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202898,"user_id":null,"body":"function correct(string)\n  # your code here\n  mp=Dict('0'=>'O','1'=>'I','5'=>'S')\n  os=\"\"\n  for s in string\n    if isdigit(s)\n      os*=mp[s]\n      else\n      os*=s\n      end\n    end\n    return os\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202899,"user_id":76,"body":"function correct(string)\n  s = replace(string, '5' => 'S')\n  i = replace(s, '1' => 'I')\n  o = replace(i, '0' => 'O')\n  o\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"577c349edf78c178a1000108":[{"id":202900,"user_id":881,"body":"function xmastree(n::Int)::Array{String,1}\n    ['_'^(n - i) * '#'^(2i - 1) * '_'^(n - i) for i in [1:n..., 1, 1]]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202901,"user_id":null,"body":"function xmastree(n::Int)::Array{String,1}\n    vcat(['_'^(n-i) * '#'^(2i-1) * '_'^(n-i) for i in 1:n], ['_'^(n-1) * '#' * '_'^(n-1) for _ in 1:2])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202902,"user_id":null,"body":"function xmastree(n::Int)::Array{String,1}\n  map(x -> '_'^(n - x) * '#'^(2*x - 1) * '_'^(n - x), vcat(1:n, 1, 1))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202903,"user_id":53,"body":"function xmastree(n::Int)::Array{String,1}\n  tree = []\n  for i in 0:n+1\n    pattern = (i < n) ? \"_\" ^ (n-1-i) * \"#\" ^ (i) : \"_\" ^ (n-1)\n    push!(tree, join([pattern, \"#\", reverse(pattern)], \"\"))\n  end\n  tree\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"578553c3a1b8d5c40300037c":[{"id":202904,"user_id":null,"body":"function binary_array_to_number(arr)\n    return parse(Int, join(arr), base=2)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202905,"user_id":421,"body":"function binary_array_to_number(arr)\n  parse(Int, join(arr), base = 2)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202906,"user_id":null,"body":"function binary_array_to_number(arr)\n  reduce((acc, c) -> 2*acc + c, arr)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202907,"user_id":527,"body":"function binary_array_to_number(bs)\n  foldl((a, b) -> a << 1 | b, bs; init=0)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202908,"user_id":null,"body":"function binary_array_to_number(arr)\n  result = 0\n  rev = reverse(arr)\n  for i = 1:length(arr)\n    result += rev[i] * 2^(i-1)\n  end\n  result\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202909,"user_id":1474,"body":"function binary_array_to_number(arr)\n  sum(e * 2^(i-1) for (i, e) in enumerate(reverse(arr)))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202910,"user_id":null,"body":"function binary_array_to_number(arr)\n  [x * 2^(i - 1) for (i, x) \u2208 enumerate(reverse(arr))] |> sum\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202911,"user_id":null,"body":"function binary_array_to_number(arr)\n  map((n, i) -> n*2^i, reverse(arr), 0:(length(arr)-1)) |> sum\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202912,"user_id":null,"body":"function binary_array_to_number(arr)\n  total = 0\n  for (i, b) in enumerate(reverse(arr))\n    total += b * 2^(i-1)\n  end\n  total\n    \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202913,"user_id":null,"body":"function binary_array_to_number(arr)\n  # your code\n  parse(Int64, join(arr), base=2)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"578bf2d8daa01a4ee8000046":[{"id":202914,"user_id":null,"body":"module RLE\nexport encode, decode\n\nfunction encode(input)\n  join(map(x -> string(length(x)) * x[1], split(input, r\"(?<=(.))(?!\\1)\")))\nend\n\nfunction decode(input)\n  join(map(x -> repeat(x[end], parse(Int, x[1:end - 1])), split(input, r\"(?<=[A-Z])(?=\\d)\")))\nend\n\nend#module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202915,"user_id":881,"body":"module RLE\nexport encode, decode\n\nfunction encode(input)\n  join([string(length(m.match)) * m[1] for m in eachmatch(r\"(.)\\1*\", input)])\nend\nfunction decode(input)\n  join([repeat(m[2], parse(Int, m[1])) for m in eachmatch(r\"(\\d+)(\\D)\", input)])\nend\n\nend#module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202916,"user_id":null,"body":"module RLE\nexport encode, decode\n\nfunction encode(input)\n    vals = Pair{Char,Int}[]\n    for letter in input\n        if(isempty(vals) || vals[end].first!=letter)\n            push!(vals,letter=>1)\n        else\n            vals[end] = letter=>vals[end].second+1\n        end\n    end\n    string([\"$(p.second)$(p.first)\" for p in vals]...)\nend\nfunction decode(input)\n    total = \"\"\n    num = \"\"\n    for letter in input\n        if(!isletter(letter))\n            num *= letter\n        else\n            total *= letter^parse(Int,num)\n            num = \"\"\n        end\n    end\n    return total\nend\n\nend#module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202917,"user_id":480,"body":"module RLE\nexport encode, decode\n\nfunction encode(input::String)::String\n  r=\"\"\n  n=0\n  x=' '\n  for c in input\n    if n==0\n      x=c\n      n=1\n    elseif c==x\n      n+=1\n    else\n      r*=string(n)*string(x)\n      n=1\n      x=c\n    end\n  end\n  if n>0\n      r*=string(n)*string(x)\n  end\n  r\nend\nfunction decode(input)\n  r=\"\"\n  m=0\n  println(input)\n  for c in input\n    if isdigit(c)\n      m0=m==0\n      d=parse(Int,string(c))\n      if m0\n        m=d\n      else\n        m=m * 10 +d\n      end\n    else\n      r*=repeat(string(c),m)\n      m=0\n    end\n  end\n  r\nend\n\nend#module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202918,"user_id":null,"body":"module RLE\nexport encode, decode\n\nfunction encode(input)\n    current, out, count = input[1], \"\", 0\n    for i in input\n        current != i && (out *= \"$(count)\" * current; current = i; count = 0)\n        count += 1\n    end\n    out * \"$(count)\" * current\nend\nfunction decode(input)\n    join([m.captures[2]^parse(Int, m.captures[1]) for m in eachmatch(r\"(\\d+)(\\w)\", input)])\nend\n\nend#module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202919,"user_id":null,"body":"module RLE\nexport encode, decode\n\nfunction encode(input)\n  n = length(input)\n  c = [0, (k for k in 1:n-1 if input[k]!=input[k+1])..., n]\n  return join((\"$(c[k]-c[k-1])$(input[c[k]])\" for k in 2:length(c)), \"\")\nend\nfunction decode(input)\n  s = input\n  ret = \"\"\n  k = \"something\"\n  while true\n    k = findfirst(r\"[^0-9]\", s)\n    if k == nothing break end\n    ret *= s[k]^parse(Int, s[1:k[1]-1])\n    s = s[k[1]+1:end]\n  end\n  return ret\nend\n\nend#module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202920,"user_id":2525,"body":"module RLE\nexport encode, decode\n\nfunction encode(input)\n    out = \"\"\n    cnt = 1\n    nex = input[1]\n    for c in input[2:end]\n        if c!=nex\n            out *= \"$cnt$nex\"\n            nex = c\n            cnt = 1\n        else\n            cnt += 1\n        end\n    end\n    out * \"$cnt$nex\"\nend\n\nfunction decode(input)\n    out = \"\"\n    i = 1\n    number = \"\"\n    letter = nothing\n    while i \u2264 length(input)\n      \n        if isdigit(input[i])\n            number *= input[i]\n        else\n            out *= input[i]^parse(Int, number)\n            number = \"\"\n        end\n      \n        i += 1\n    end\n    out\nend\n\nend#module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202921,"user_id":759,"body":"module RLE\nexport encode, decode\n\nfunction encode(input)\n  lc = '\\0'\n  ln = 0\n  res = []\n  for c in input\n    if c == lc\n      ln += 1\n    else\n      lc != '\\0' && push!(res, (lc, ln))\n      lc = c\n      ln = 1\n    end\n  end\n  push!(res, (lc, ln))\n  join(string(n, c) for (c, n) in res)\nend\nfunction decode(input)\n  res = [('\\0', 0)]\n  for c in input\n    tup = res[end]\n    if isdigit(c)\n      res[end] = (tup[1], tup[2] * 10 + Int(c) - Int('0'))\n    else\n      res[end] = (c, tup[2])\n      push!(res, ('\\0', 0))\n    end\n  end\n  join(c ^ n for (c, n) in res[1:end-1])\nend\n\nend#module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202922,"user_id":null,"body":"module RLE\nexport encode, decode\n\nfunction enc(inp, pos)\n    counter = 1\n    if pos == length(inp)\n        return (\"$(counter)$(inp[pos])\" , pos+1)\n    else\n        for i in pos:length(inp)-1\n            if inp[i] == inp[i+1]\n                counter += 1\n            else\n                break\n            end\n        end\n    end\n    return  (\"$(counter)$(inp[pos])\" , pos + counter)\nend\n\nfunction dec(inp, pos)\n    n = \"\"\n    for i in pos:length(inp)\n        if isdigit(inp[i])\n            n = n*inp[i]\n        else\n            return inp[i]^parse(Int, n), i + 1\n        end\n    end\nend\n\n\n\nfunction encode(input)\n    a = []\n    i = 1\n    while i <= length(input)\n        c, p = enc(input, i)\n        push!(a, c)\n        i = p\n    end\n    return join(a, \"\")\nend\n\nfunction decode(input)\n    a = []\n    i = 1\n    while i <=length(input)\n        c, p = dec(input, i)\n        push!(a, c)\n        i = p\n    end\n    return join(a, \"\")\n\nend\n\n\nend#module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57a0556c7cb1f31ab3000ad7":[{"id":202923,"user_id":421,"body":"make_upper_case = uppercase","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202924,"user_id":null,"body":"function make_upper_case(s)\n  return uppercase(s)\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202925,"user_id":null,"body":"make_upper_case(s) = uppercase(s)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202926,"user_id":null,"body":"function make_upper_case(s)\n  #your code here\n  return uppercase(s)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202927,"user_id":null,"body":"function make_upper_case(s)\n  uppercase(s)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57a083a57cb1f31db7000028":[{"id":202928,"user_id":null,"body":"powers_of_two(n) = [2^q for q in 0:n]","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202929,"user_id":527,"body":"powers_of_two(n) = 2 .^ (0 : n)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202930,"user_id":421,"body":"function powers_of_two(n)\n  [2^i for i in 0:n]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202931,"user_id":null,"body":"function powers_of_two(n)\n  Arr = []\n  for i in 0:n\n    push!(Arr,2^i)\n  end\n  Arr\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202932,"user_id":null,"body":"function powers_of_two(n)\n    A = [1]\n    for i=1:1:n\n        push!(A, 2^i)\n    end\n    return A\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202933,"user_id":null,"body":"function powers_of_two(n)\n  #your code here\n  \n  2 .^ (0:n)\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202934,"user_id":null,"body":"function powers_of_two(n)\n  a = [2^i for i in 0:n]\n  return a\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202935,"user_id":null,"body":"function powers_of_two(n)\n  result = []\n  for i = 0:n\n    append!( result,  2^i )\n  end\n  return result\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202936,"user_id":null,"body":"function powers_of_two(n)\n  #your code here\n  lst = [2^i for i in 0:n]\n  return lst\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202937,"user_id":null,"body":"function powers_of_two(n)\n  map(x-> 2^x, 0:1:n)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57a0885cbb9944e24c00008e":[{"id":202938,"user_id":50,"body":"function remove_exclamation_marks(s)\n  replace(s, r\"!\" => \"\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202939,"user_id":null,"body":"function remove_exclamation_marks(s)\n    return filter(c -> c != '!', s)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202940,"user_id":421,"body":"remove_exclamation_marks(s) = replace(s, '!' => \"\")","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202941,"user_id":527,"body":"remove_exclamation_marks(s) = filter(!=('!'), s)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202942,"user_id":1474,"body":"function remove_exclamation_marks(s)\n  join(c for c in s if c != '!')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202943,"user_id":null,"body":"function remove_exclamation_marks(s)\n  filter(!=('!'), s)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202944,"user_id":null,"body":"function remove_exclamation_marks(s)\n  replace(s, r\"!\" => \"\")\n#  filter(c -> c != '!', s)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202945,"user_id":null,"body":"function remove_exclamation_marks(s)\n  #your code here\n  replace(s,\"!\"=>\"\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202946,"user_id":null,"body":"remove_exclamation_marks(s) = replace(s, r\"!\" => \"\")","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202947,"user_id":null,"body":"function remove_exclamation_marks(s)\n  return replace(s, \"!\" => \"\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57a0e5c372292dd76d000d7e":[{"id":202948,"user_id":881,"body":"repeat_str(n, s) = s ^ n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202949,"user_id":null,"body":"function repeat_str(n, s)\n  if n == 0\n    return \"\"\n  else\n    return s * repeat_str(n-1,s)\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202950,"user_id":null,"body":"function repeat_str(n, s)\n  f = \"\"\n  for i = 1:n\n    f = f * s\n  end\n  return f\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202951,"user_id":null,"body":"function repeat_str(n, s)\n    return repeat(s , n)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202952,"user_id":null,"body":"function repeat_str(n, s)\n  return join(repeat(s,n))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202953,"user_id":null,"body":"function repeat_str(n, s)\n  return s^n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202954,"user_id":null,"body":"function repeat_str(n, s)\n#  rlt = [s for _ in 1:n]\n#  join(rlt, \"\")\n  \"$s\"^n\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202955,"user_id":null,"body":"function repeat_str(n, s)\n  rlt = \"\"\n  if n == 0\n    return \"\"\n  else\n#    return s * repeat_str(n-1, s)\n    for i in 1:n\n#      rlt *= s\n      rlt = string(rlt, s)\n    end\n  end\n  return rlt\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202956,"user_id":null,"body":"function repeat_str(n, s)\n  if n == 0\n    return \"\"\n  end\n  return s * repeat_str(n - 1, s)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202957,"user_id":null,"body":"function repeat_str(n, s)\n  res = \"\"\n  for i in 1:n\n    res *= s\n  end\n  return res\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57a2013acf1fa5bfc4000921":[{"id":202958,"user_id":53,"body":"function find_average(array)\n  length(array) == 0 ? 0 : sum(array) \/ length(array)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202959,"user_id":421,"body":"find_average(array) = length(array) == 0 ? 0 : sum(array) \/ length(array)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202960,"user_id":null,"body":"find_average(array) = isempty(array) ? 0 : sum(array)\/length(array)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202961,"user_id":null,"body":"function find_average(array)\n  if isempty(array) return 0 end\n  sum(array) \/ length(array)\nend\n\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202962,"user_id":null,"body":"function find_average(array)\n  isempty(array) ? 0 : sum(array) \/ length(array)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202963,"user_id":null,"body":"find_average(array) = length(array)!=0 ? sum(array)\/length(array) : 0","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202964,"user_id":2525,"body":"function find_average(array)\n    if length(array)>0\n        sum(array)\/length(array)\n    else\n        0\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202965,"user_id":null,"body":"function find_average(array)\n  length(array) > 0 ? sum(array)\/length(array) : 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202966,"user_id":null,"body":"function find_average(array)\n  n = 0\n  for i in 1:length(array)\n    n += array[i]\n  end\n  length(array) > 0 ? n\/length(array) : 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202967,"user_id":null,"body":"function find_average(array)\n  if length(array) == 0\n    return 0\n  end\n  sum(array) \/ length(array)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57a429e253ba3381850000fb":[{"id":202968,"user_id":null,"body":"function bmi(weight, height)\n\ty = float((weight \/ height) \/ height)\n\tif y <= 18.5\n\t\t\"Underweight\"\n\telseif y <= 25.0\n\t\t\"Normal\"\n\telseif y <= 30.0\n\t\t\"Overweight\"\n\telseif y > 30.0\n\t\t\"Obese\"\n\telse\n\tend\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202969,"user_id":1474,"body":"function bmi(weight, height)\n  bmi = weight \/ (height ^ 2)\n  if bmi <= 18.5\n    \"Underweight\"\n  elseif bmi <= 25.0\n    \"Normal\"\n  elseif bmi <= 30.0\n    \"Overweight\"\n  elseif bmi > 30\n    \"Obese\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202970,"user_id":null,"body":"function bmi(weight, height)\n  bmi = weight \/ (height * height)\n  if bmi <= 18.5\n    \"Underweight\"\n  elseif bmi <= 25.0\n    \"Normal\"\n  elseif bmi <= 30.0\n    \"Overweight\"\n  else\n    \"Obese\"\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202971,"user_id":null,"body":"function bmi(weight, height)\n  bmi = weight\/(height*height)\n  if bmi <= 18.5 return \"Underweight\"  end \n  if bmi <= 25.0 return \"Normal\" end\n  if bmi <= 30.0 return \"Overweight\" end \n  return \"Obese\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202972,"user_id":null,"body":"function bmi(weight, height)\n  number = weight \/ (height ^ 2);\n  if number <= 18.5\n    return \"Underweight\"\n  elseif number <= 25.0\n    return \"Normal\"\n  elseif number <= 30.0\n    return \"Overweight\"\n  else\n    return \"Obese\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202973,"user_id":null,"body":"function bmi(weight, height)\n    weight\/height^2 \u2264 18.5 ? \"Underweight\" : weight\/height^2 \u2264 25 ? \"Normal\" : weight\/height^2 \u2264 30 ? \"Overweight\" : \"Obese\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202974,"user_id":null,"body":"function bmi(weight, height)\n  bmi = weight \/ height^2\n  \n  if bmi <= 18.5\n    \"Underweight\"\n  elseif bmi <= 25.0\n    \"Normal\"\n  elseif bmi <= 30.0\n    \"Overweight\"\n  else\n    \"Obese\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202975,"user_id":null,"body":"function bmi(weight, height)\n  bm = weight \/ height^2\n  if bm <=18.5\n    \"Underweight\"\n  elseif bm <= 25.0\n       \"Normal\"\n  elseif bm <= 30.0\n    \"Overweight\"\n  else\n    \"Obese\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202976,"user_id":null,"body":"function bmi(weight, height)\n  bmi = weight \/ height ^ 2\n  if bmi < 18.5\n    \"Underweight\"\n  elseif bmi < 25.0\n    \"Normal\"\n  elseif bmi < 30.0\n    \"Overweight\"\n  else\n    \"Obese\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202977,"user_id":null,"body":"function bmi(weight, height)\n  a = (weight \/ (height ^ 2))\n  if (a <= 18.5)\n    \"Underweight\"\n  elseif (a <= 25.0)\n    \"Normal\"\n  elseif (a <= 30.0)\n    \"Overweight\"\n  else\n    \"Obese\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57a5c31ce298a7e6b7000334":[{"id":202978,"user_id":759,"body":"bintodec(b) = parse(Int, b, base = 2)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202979,"user_id":null,"body":"function bintodec(b)\n    return parse(Int64, \"0b\" * string(b))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202980,"user_id":null,"body":"function bintodec(b)\n  sum(parse(Int,c)*(2^(i-1)) for (i,c) in enumerate(reverse(b)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202981,"user_id":null,"body":"function bintodec(b)\n  result = 0\n  index = 0\n  for ch in reverse(b)\n    result += (Int(ch)-Int('0'))*2^index\n    index += 1\n  end\n  return result\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202982,"user_id":168,"body":"function bintodec(b)\n  r = 0\n  for x in b\n    r = 2 * r + (x == '0' ? 0 : 1)\n  end\n  r\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202983,"user_id":50,"body":"function bintodec(b)\n  return parse(Int, b; base=2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202984,"user_id":null,"body":"function bintodec(b)\n  d=[parse(Int,q) for q in b]\n  sum(d .* reverse([2^p for p in 0:length(d)-1]))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202985,"user_id":null,"body":"function bintodec(b)\n  x = 0\n  for d in b\n    x <<= 1\n    if d == '1'\n      x += 1\n    end\n  end\n  x\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202986,"user_id":null,"body":"function bintodec(b)\n  n = length(b)\n  res = 0\n  for i in 1:n\n    if b[i] == '1'\n      res = res + 2^(n-i)\n    end\n  end\n  return res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202987,"user_id":null,"body":"bintodec(b) = parse( Int, \"0b\"*b )","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57a6633153ba33189e000074":[{"id":202988,"user_id":null,"body":"function orderedCount(text)\n    counter = Dict()\n    for c in text\n        counter[c] = get(counter, c, 0) + 1\n    end\n    return [[c, counter[c]] for c in unique(text)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202989,"user_id":null,"body":"orderedCount(text) = [[c, count(x -> x == c, text)] for c in unique(text)]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202990,"user_id":null,"body":"function orderedCount(text)\n    counts = Dict()\n    for c in text\n        counts[c] = get(counts, c, 0) + 1\n    end \n    [[k, counts[k]] for k in unique(text)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202991,"user_id":null,"body":"orderedCount(text) = map(ch-> [ch, count(==(ch), text)], unique(text))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202992,"user_id":null,"body":"function orderedCount(text)\n  counter(c) = [c, count([l==c for l in text])]\n  [counter(c) for c in unique(text)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202993,"user_id":881,"body":"orderedCount(text) = [[c, count(==(c), text)] for c in unique(text)]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202994,"user_id":null,"body":"\nfunction orderedCount(text)\n  ## Unfortunately can't use this:\n  # using DataStructures\n  # d = OrderedDict()\n  # for c in text\n  #   d[c] = 1+get(d,c,0)\n  # end\n  # collect.(collect(d))\n  \n  [[c,count(x->x==c, text)] for c in unique(text)]\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202995,"user_id":1474,"body":"function orderedCount(text)\n  res = []\n  ret = Dict()\n  for c in text\n    if c \u2208 res\n      ret[c] += 1\n    else\n      push!(res, c)\n      ret[c] = 1\n    end\n  end\n  [[c, ret[c]] for c in res]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202996,"user_id":null,"body":"function orderedCount(text)\n  unique(text) |> l -> [[c, count(x->x==c, text)] for c in l]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202997,"user_id":759,"body":"function orderedCount(text)\n  r = []\n  function add(arr, c)\n    for a in arr\n      if a[1] == c\n        a[2] += 1\n        return\n      end\n    end\n    push!(r, [c, 1])\n  end\n  for c in text\n    add(r, c)\n  end\n  r\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57a77726bb9944d000000b06":[{"id":202998,"user_id":null,"body":"function mango(quantity, price)\n  return (quantity-div(quantity,3))*price\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":202999,"user_id":421,"body":"mango(quantity, price) = (quantity - div(quantity, 3)) * price","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203000,"user_id":881,"body":"function mango(quantity, price)\n    paid, free = divrem(quantity, 3)\n    (2 * paid + free) * price\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203001,"user_id":null,"body":"mango(quantity, price) = price * (quantity % 3 + 2(quantity \u00f7 3))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203002,"user_id":null,"body":"function mango(quantity, price)\n  (quantity - div(quantity, 3)) * price\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203003,"user_id":null,"body":"mango(quantity, price) = ((quantity \u00f7 3 * 2) + (quantity % 3)) * price","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203004,"user_id":null,"body":"mango(quantity, price) =  (2 * div(quantity,3) + mod(quantity,3)) * price","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203005,"user_id":50,"body":"function mango(q, p)\n  2*p*floor(q\/3)+p*(q%3);\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203006,"user_id":null,"body":"mango(quantity, price) = (quantity - quantity \u00f7 3) * price","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203007,"user_id":null,"body":"mango(quantity, price) = price * (quantity-div(quantity, 3))\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57b06f90e298a7b53d000a86":[{"id":203008,"user_id":null,"body":"function queue_time(customer_times, num_tills)\n    total_time = 0\n    empty_queue = false\n    tills = zeros(num_tills)\n    while !empty_queue\n        tills, customer_times = move_to_zeros(tills, customer_times)\n        empty_queue = length(customer_times) == 0 ? true : false\n        if empty_queue\n            break\n        end\n        timestep = minimum(tills)\n        total_time += timestep\n        tills .-= timestep\n    end\n    total_time += maximum(tills)\n    return total_time\nend\n\n\nfunction move_to_zeros(move_to, move_from)\n    zeros = [index for (index, value) in enumerate(move_to) if (value == 0)]\n    if length(zeros) == 0 # no moves need to be made\n        return (move_to, move_from)\n    end\n    max_moves = min(length(zeros), length(move_from))\n    zeros = zeros[1:max_moves]\n    move_to[zeros] = move_from[1:max_moves]\n    return (move_to, move_from[max_moves+1:end])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203009,"user_id":null,"body":"function queue_time(customers, n)\n  \n  isempty(customers) && return 0\n  \n  tills = zeros(n)\n  \n  customers = reverse(customers)\n  \n  while !(isempty(customers))\n    tills[1] += pop!(customers)\n    tills = sort(tills)\n  end\n  \n  max(tills...)\n  \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203010,"user_id":null,"body":"function queue_time(customers, n)\n  \n  if customers == []\n    return 0\n  end\n  \n  customers = reverse(customers)\n  \n  checkOut = [pop!(customers) for _ in 1:min([length(customers),n]...)]\n  \n  lenCust = length(customers)\n  counter = 0\n  \n  while lenCust > 0\n    for (index, elem) in enumerate(checkOut)\n      if elem == 0 && length(customers) > 0\n        checkOut[index] = pop!(customers)\n        lenCust -= 1\n      end\n    end\n    counter += 1\n    checkOut .-= 1\n  end\n  \n  counter + max(checkOut...)\n  \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203011,"user_id":null,"body":"function queue_time(customers, n)\n  isempty(customers) && return 0\n  counters = zeros(n)\n  while !isempty(customers)\n    idx = findfirst(isequal(minimum(counters)), counters)\n    counters[idx] += popat!(customers, 1)\n  end\n  maximum(counters)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203012,"user_id":null,"body":"function queue_time(customers, n)\n    tills = zeros(Int, n)\n    foreach(custy-> tills[argmin(tills)] += custy, customers)\n    maximum(tills)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203013,"user_id":50,"body":"function queue_time(customers, n)\n  if n == 0\n    return 0\n  end\n  tills = zeros(n)\n  while length(customers) != 0\n    tills[1] += popfirst!(customers)\n    sort!(tills)\n  end\n  max(tills...)\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203014,"user_id":881,"body":"function queue_time(customers::Vector{I}, tillsopen::Integer)::I where I <: Integer\n    tills = zeros(I, tillsopen)\n    for c in customers\n        tills[argmin(tills)] += c\n    end\n    maximum(tills)\nend\nqueue_time(cs::Vector{Any}, _) = isempty(cs) ? 0 : throw(\"Bad input\")","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57cc847e58a06b1492000264":[{"id":203015,"user_id":null,"body":"function sort_transform(arr)\n  transform(a) = join(map(Char, vcat(a[1:2], a[end-1:end])))\n  join(map(transform, map(f -> f(arr), [identity, sort, reverse \u2218 sort, sort])), '-')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203016,"user_id":759,"body":"function sort_transform(arr)\n  v = sort(arr)\n  join((join(Char(ch) for ch in [a[1], a[2], a[end-1], a[end]]) for a in [\n        arr, v, reverse(v), v]), \"-\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203017,"user_id":1474,"body":"function form_word(arr)\n  [Char(i) for i in firstnlast2(arr)]\nend\n\nfunction firstnlast2(arr)\n  [arr[1], arr[2], arr[end-1], arr[end]]\nend\n\nfunction sort_transform(arr)\n  ret = [form_word(arr), form_word(sort(arr)), form_word(reverse(sort(arr)))]\n  tmp = sort([Char(i) for i in arr])\n  push!(ret, firstnlast2(tmp))\n  join([join(a) for a in ret], '-')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203018,"user_id":null,"body":"sort_transform(arr) = join([join(f(arr)), join(f(sort(arr))), join(f(sort(arr, rev=true))), join(f(sort(arr)))], \"-\")\n\nf(a) = Char.(vcat(a[1:2], a[end-1:end]))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203019,"user_id":null,"body":"function sort_transform(arr)\n  strarr = []\n  push!(strarr, abyz(arr))\n  push!(strarr, abyz(sort(arr)))\n  push!(strarr, abyz(sort(arr, rev=true)))\n  alfaarr = arr .|> Char |> sort\n  push!(strarr, vcat(alfaarr[1:2], alfaarr[end-1:end]) |> join)\n  \n  join(strarr, \"-\")\nend\n\nabyz(arr) = vcat(arr[1:2], arr[end-1:end]) .|> Char |> join","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203020,"user_id":2525,"body":"function fl(arr)\n    join([Char(v) for v in [arr[1:2]; arr[end-1:end]]])\nend\nfunction sort_transform(arr)\n    \"$(fl(arr))-$(fl(sort(arr)))-$(fl(sort(arr, rev=true)))-$(fl(sort(arr, by=Char)))\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203021,"user_id":881,"body":"function sort_transform(arr::AbstractVector{<:Integer})::String\n    takeends(arr) = join(Char.([arr[1:2]..., arr[end-1:end]...]))\n    join(takeends.([arr, sort(arr), sort(arr, rev=true), sort(arr, by=Char)]), '-')\nend\n\n\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203022,"user_id":421,"body":"function sort_transform(arr)\n  a = join((Char(x) for x in cat(dims = 1, arr[1:2], arr[end-1:end])),\"\")\n  b = join((Char(x) for x in cat(dims = 1, sort(arr)[1:2], sort(arr)[end-1:end])), \"\")\n  join([a, b, reverse(b), b], '-')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57cc975ed542d3148f00015b":[{"id":203023,"user_id":527,"body":"solution = \u220b","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203024,"user_id":null,"body":"solution(arr, element) = element in arr\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203025,"user_id":null,"body":"solution(a, e) = e \u2208 a","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203026,"user_id":null,"body":"function solution(arr, element)\n  #your code here\n  for x in arr\n    if x === element\n      return true\n    end\n  end\n  return false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203027,"user_id":421,"body":"function solution(arr, element)\n  element in arr\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203028,"user_id":null,"body":"solution(arr::Vector{String}, element) = element \u2208 arr\nsolution(arr::String, element) = sum(occursin.(element, arr)) > 0\nsolution(arr, element) = sum(issubset.(element, arr)) > 0\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203029,"user_id":1474,"body":"function solution(arr, elem)\n  elem in arr\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203030,"user_id":null,"body":"function solution(arr, element)\n  for i in arr\n    if i == element\n      return true\n    end\n  end\n  return false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203031,"user_id":null,"body":"solution(a, x) = x in a","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203032,"user_id":null,"body":"function solution(arr, element)\n  return element in arr ? true : false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57cc981a58da9e302a000214":[{"id":203033,"user_id":527,"body":"smallenough(a, limit) = all(<=(limit), a)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203034,"user_id":null,"body":"function smallenough(a, limit)\n  all(a.<=limit)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203035,"user_id":null,"body":"function smallenough(a, limit)\n    [x for x \u2208 a if x \u2264 limit] == a\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203036,"user_id":null,"body":"function smallenough(a, limit)\n  for n in a\n    if n > limit \n      return false\n    end\n  end \n  true\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203037,"user_id":1474,"body":"function smallenough(a, limit)\n  all(i <= limit for i in a)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203038,"user_id":null,"body":"function smallenough(a, limit)\n  for x in a\n    if x > limit\n      return false\n    end\n  end\n  return true \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203039,"user_id":null,"body":"function smallenough(a, limit)\n  all(i-> i<=limit, a)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203040,"user_id":null,"body":"function smallenough(a, limit)\n    all(a .\u2264 limit)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203041,"user_id":null,"body":"smallenough(a, limit) = all(x -> x <= limit, a)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203042,"user_id":null,"body":"function smallenough(a, limit)\n  all([q <= limit for q in a])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57cebe1dc6fdc20c57000ac9":[{"id":203043,"user_id":null,"body":"find_short(s) = minimum(length, split(s))\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203044,"user_id":null,"body":"function find_short(s)\n  minimum(map(length, split(s)))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203045,"user_id":null,"body":"function find_short(s)\n   findmin(length.(split(s)))[1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203046,"user_id":881,"body":"find_short(s) = minimum(length.(split(s)))","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203047,"user_id":null,"body":"function find_short(s)\n  minimum(split(s) .|> length)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203048,"user_id":null,"body":"function find_short(s)\n  # ignoring commas in the sentence\n  str = split(s, \" \")\n  \n  # return smallest word length\n  return minimum(sizeof.(str))\n  \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203049,"user_id":null,"body":"find_short(s) = s|> split .|> length |> minimum","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203050,"user_id":null,"body":"function find_short(s)\n  return minimum(length(word) for word in split(s))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203051,"user_id":null,"body":"function find_short(s)\n  minimum(map(x -> sizeof(x), split(s, \" \")))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203052,"user_id":null,"body":"function find_short(s)\nl = []\nfor word in split(s)\nappend!(l, length(word))\nend\nreturn minimum(l)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57cf3dad05c186ba22000348":[{"id":203053,"user_id":480,"body":"\nfunction decode_resistor_colors(bands)::String\n  codes=Dict([(\"black\", 0), (\"brown\",1), (\"red\",2), (\"orange\",3), (\"yellow\",4), (\"green\",5), (\"blue\",6), (\"violet\",7), (\"gray\",8), (\"white\",9)])\n  tol=\", 20%\"\n  b=split(bands,\" \")\n  if length(b)==4\n    tol=\", \"*Dict([(\"silver\",\"10%\"),(\"gold\",\"5%\")])[b[4]]\n  end\n  R=(10codes[b[1]]+codes[b[2]])*10^codes[b[3]]\n  nf(x)=replace(string(x),r\"\\.0$\"=>\"\")\n  return (R>=1000000 ? nf(R\/1000000)*\"M\" : R>=1000 ? nf(R\/1000)*\"k\" : string(R))*\" ohms\"*tol\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203054,"user_id":null,"body":"function decode_resistor_colors(bands)::String\n    c2d, b = Dict(zip(split(\"black brown red orange yellow green blue violet gray white\"),0:9)), split(bands)\n    val, tol = parse(Int, \"$(c2d[b[1]])$(c2d[b[2]])\") * 10^c2d[b[3]], length(b) == 3 ? \"20%\" : Dict(\"gold\"=> \"5%\", \"silver\"=> \"10%\")[b[4]]  \n    replace((val \u2265 1e6 ? \"$(val\/1e6)M\" : val \u2265 1e3 ? \"$(val\/1e3)k\" : \"$(val)\") * \" ohms, \" * tol, \".0\"=> \"\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203055,"user_id":1474,"body":"cc = [\"black\", \"brown\", \"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"violet\", \"gray\", \"white\"]\n\nfunction index(colour)\n  for (i, col) in enumerate(cc)\n    if col == colour\n      return i - 1\n    end\n  end\nend\n\nfunction str(ohms)\n  string(ohms % 1 == 0 ? convert(Int, ohms) : ohms)\nend\n\nfunction decode_resistor_colors(bands)::String\n  ar = split(bands)\n  ohms = index(ar[1]) * 10 + index(ar[2])\n  ohms *= 10 ^ index(ar[3])\n  tol = length(ar) == 4 ? (ar[4] == \"gold\" ? 5 : 10) : 20\n  if ohms >= 1000000\n    ohms = str(ohms \/ 1000000) * 'M'\n  elseif ohms >= 1000\n    ohms = str(ohms \/ 1000) * 'k'\n  else\n    ohms = string(ohms)\n  end\n  ohms * \" ohms, \" * string(tol) * '%'\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203056,"user_id":759,"body":"function decode_resistor_colors(bands)::String\n  A = Dict([\"black\", \"brown\", \"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"violet\", \"gray\", \"white\"]\n    .=> 0:9)\n  b = split(bands, \" \")\n  tol = length(b) < 4 ? 20 : b[4] == \"gold\" ? 5 : 10\n  ohm = (A[b[1]] * 10 + A[b[2]]) * 10^A[b[3]]\n  function f(x)\n    x % 1 == 0 ? trunc(Int, x) : x\n  end\n  string(ohm < 1000 ? ohm : ohm < 1000000 ? string(f(ohm \/ 1000), \"k\") : string(f(ohm \/ 1000000), \"M\"), \" ohms, \", tol, \"%\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203057,"user_id":null,"body":"function decode_resistor_colors(bands)::String\n  tolr=\"20%\"\n  resfin=\"\"\n  \n  colors=Dict([\"black\"=> 0, \"brown\"=> 1, \"red\"=> 2, \"orange\"=> 3,\n          \"yellow\"=> 4, \"green\"=> 5, \"blue\"=> 6, \"violet\"=> 7,\n          \"gray\"=> 8, \"white\"=> 9,\n          \"silver\"=>\"10%\", \"gold\"=>\"5%\"])\n  \n  resistance=[colors[b] for b in split(bands,\" \")]\n  \n  if typeof(resistance[end])==String\n      tolr=pop!(resistance)\n  end\n  \n  res=sum([r*10^(i-1) for (i,r) in enumerate(resistance[end-1:-1:1])])*(10^resistance[end])\n  \n  if res\/10^6>=1\n      resfin=\"$(res%10^6==0 ? Int(ceil(res\/10^6)) : res\/10^6)M ohms, $(tolr)\"\n  elseif res\/10^3>=1\n      resfin=\"$(res%10^3==0 ? Int(ceil(res\/10^3)) : res\/10^3)k ohms, $(tolr)\"\n  else\n      resfin=\"$(res) ohms, $(tolr)\"\n  end\n  return resfin\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203058,"user_id":null,"body":"function decode_resistor_colors(bands)::String\n  colors = [\"black\", \"brown\", \"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"violet\", \"gray\", \"white\"]\n  s = split(bands)\n  d = Dict(colors[i] => i-1 for i in 1:length(colors))\n  ohms = (10*d[s[1]] + d[s[2]]) * 10^d[s[3]]\n  tol = length(s) == 3 ? 20 : s[4] == \"gold\" ? 5 : 10\n  if ohms < 1000\n    ohms = ohms == trunc(Int, ohms) ? trunc(Int, ohms) : ohms\n    return \"$(ohms) ohms, $(tol)%\"\n  elseif ohms < 1000000\n    ohms \/= 1000\n    ohms = ohms == trunc(Int, ohms) ? trunc(Int, ohms) : ohms\n    return \"$(ohms)k ohms, $(tol)%\"\n  else\n    ohms \/= 1000000\n    ohms = ohms == trunc(Int, ohms) ? trunc(Int, ohms) : ohms\n    return \"$(ohms)M ohms, $(tol)%\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203059,"user_id":null,"body":"function decode_resistor_colors(bands)::String\n  colors = [\"black\", \"brown\", \"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"violet\", \"gray\", \"white\"]\n  s = split(bands)\n  ohms = (10*(findfirst(isequal(s[1]), colors) - 1) + findfirst(isequal(s[2]), colors) - 1) * \n          10^(findfirst(isequal(s[3]), colors) - 1)\n  tol = length(s) == 3 ? 20 : s[4] == \"gold\" ? 5 : 10\n  if ohms < 1000\n    ohms = ohms == trunc(Int, ohms) ? trunc(Int, ohms) : ohms\n    return \"$(ohms) ohms, $(tol)%\"\n  elseif ohms < 1000000\n    ohms \/= 1000\n    ohms = ohms == trunc(Int, ohms) ? trunc(Int, ohms) : ohms\n    return \"$(ohms)k ohms, $(tol)%\"\n  else\n    ohms \/= 1000000\n    ohms = ohms == trunc(Int, ohms) ? trunc(Int, ohms) : ohms\n    return \"$(ohms)M ohms, $(tol)%\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203060,"user_id":null,"body":"function decode_resistor_colors(bands)::String\n  vcodes = Dict(\"black\"=>0, \"brown\"=>1, \"red\"=>2, \"orange\"=>3, \"yellow\"=>4, \n                \"green\"=>5, \"blue\"=>6, \"violet\"=>7, \"gray\"=>8, \"white\"=>9)\n  tcodes = Dict(\"gold\"=>5, \"silver\"=>10)\n  colors = split(bands)\n  val = (vcodes[colors[1]]*10+vcodes[colors[2]])*10^vcodes[colors[3]]\n  if val<1e3; sval = \"$val\"\n  elseif val<1e6; sval = \"$(val%1e3==0? div(val, 1000): val\/1e3)k\"\n  else; sval = \"$(val%1e6==0? div(val, 1000000): val\/1e6)M\"\n  end\n  \"$sval ohms, $(length(colors)>3? tcodes[colors[4]]: 20)%\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203061,"user_id":881,"body":"function decode_resistor_colors(bands::String)::String\n  bs = split(bands, \" \")\n  cs = Dict(\"black\"=>0, \"brown\"=>1, \"red\"=>2, \"orange\"=>3, \"yellow\"=>4,\n    \"green\"=>5, \"blue\"=>6, \"violet\"=>7, \"gray\"=>8, \"white\"=>9)\n  wf(x) = x % 1 == 0 ? Int(floor(x)) : x\n  n = (cs[bs[1]] * 10 + cs[bs[2]]) * 10 ^ cs[bs[3]]\n  s = string(wf(n))\n  if n > 999999 \n    s = string(wf(n \/ 1000000)) * \"M\"\n  elseif n > 999 \n    s = string(wf(n \/ 1000)) * \"k\"\n  end\n  s *= \" ohms, \"\n  if length(bs) == 3\n    s *= \"20%\"\n  elseif bs[4] == \"gold\"\n    s *= \"5%\"\n  elseif bs[4] == \"silver\" \n    s *= \"10%\"\n  end\n  return s\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57cf50a7eca2603de0000090":[{"id":203062,"user_id":421,"body":"function move_ten(s::AbstractString)::String\n  join((Char((Int(x) - 87) % 26 + 97) for x in s))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203063,"user_id":1474,"body":"function move_ten(s::AbstractString)::String\n  join([Char((Int(c) - 87) % 26 + 97) for c in s])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203064,"user_id":null,"body":"function move_ten(s::AbstractString)::String\n    join([Int(q) + 10 > 122 ? 96 + Char(mod(Int(q) + 10,122)) : Char(Int(q) + 10) for q in collect(s)])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203065,"user_id":null,"body":"move_ten(s::AbstractString)::String = map(ch-> Char((Int(ch) - 87) % 26 + 97), s)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203066,"user_id":null,"body":"function move_ten(s::AbstractString)::String\n  [Int(l) |> x -> x > 112 ? x-16 : x+10 for l in s] .|> Char |> join\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203067,"user_id":null,"body":"function move_ten(s::AbstractString)::String\n  map(c -> Char((Int(c) - 87) % 26 + 97), s)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203068,"user_id":2525,"body":"function move_ten(s::AbstractString)::String\n    join([Char(97 + (Int(s)-97+10)%26) for s in collect(s)])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203069,"user_id":null,"body":"function move_ten(s::AbstractString)::String\n   join(map(x -> Char(97 + (Int(x)-97+10)%26), collect(s)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203070,"user_id":null,"body":"function move_ten(s::AbstractString)::String\n    ascii_upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    ascii_lower = \"abcdefghijklmnopqrstuvwxyz\"\n    ns = []\n    for char in s\n        if isletter(char)\n            idx = findfirst(isequal(char), ascii_lower)\n            if idx == nothing\n                idx = findfirst(isequal(char), ascii_upper)\n                idx = idx + 10 == 26 ? 26 : mod(idx + 10, 26)\n                push!(ns, ascii_upper[idx])\n            else\n                idx = idx + 10 == 26 ? 26 : mod(idx + 10, 26)\n                push!(ns, ascii_lower[idx])\n            end\n        else\n            push!(ns, char)\n        end\n    end\n    join(ns, \"\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203071,"user_id":null,"body":"function move_ten(s::AbstractString)::String\n  sout = \"\"\n  for c in s\n    n = Int(c) + 10\n    n \u2264 Int('z') || (n = n - Int('z') + Int('a') - 1)\n    sout *= Char(n)\n  end\n\n  return sout\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57cfd92c05c1864df2001563":[{"id":203072,"user_id":null,"body":"function vowel_back(s::AbstractString)::String\n    f9 = Dict(zip('a':'z', vcat(['a':'z'...][10:end], ['a':'z'...][1:9])))\n    b5 = Dict(zip('a':'z', vcat(['a':'z'...][22:end], ['a':'z'...][1:21])))\n    for (ch1, ch2) in [('c', 'b'), ('o', 'n'), ('d', 'a'), ('e', 'a')]\n        f9[ch1] = ch2\n    end\n    for ch in \"aiu\"\n        f9[ch] = b5[ch]\n    end\n    join([occursin(f9[ch], \"code\") ? ch : f9[ch] for ch in s])  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203073,"user_id":50,"body":"function vowel_back(s::AbstractString)::String\n  d = Dict('a' => 'v', 'b' => 'k', 'c' => 'b', 'd' => 'a', 'e' => 'a', 'g' => 'p', 'h' => 'q', 'j' => 's', 'k' => 't', 'l' => 'u', 'm' => 'v', 'n' => 'w', 'o' => 'n', 'p' => 'y', 'q' => 'z', 'r' => 'a', 's' => 'b', 'u' => 'p', 'w' => 'f', 'x' => 'g', 'y' => 'h', 'z' => 'i')\n  o=\"\"\n  for c in s\n    if haskey(d,c)\n      o*=d[c]\n    else\n      o*=c\n    end\n  end\n  o\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203074,"user_id":null,"body":"function vowel_back(s::AbstractString)::String\n    dictalpha=Dict(char => num for (num,char) in zip(1:26,'a':'z'))\n    dictnum=Dict(num => char for (num,char) in zip(1:26,'a':'z'))\n    vowels=['a','e','i','o','u']\n    res=\"\"\n    \n    for char in s\n        if char == 'c'\n            res *= 'b'\n        elseif char == 'o'\n            res *= 'n'\n        elseif char == 'd' || char == 'e'\n            res *= 'a'\n        elseif (contains((*)(vowels...),char) && contains(\"code\",dictnum[mod(dictalpha[char]-5,26)==0 ? 26 : mod(dictalpha[char]-5,26)])) || (!(contains((*)(vowels...),char)) &&contains(\"code\",dictnum[mod(dictalpha[char]+9,26)==0 ? 26 : mod(dictalpha[char]+9,26)]))\n            res *= char    \n        elseif contains((*)(vowels...),char)\n            res *= dictnum[mod(dictalpha[char]-5,26)==0 ? 26 : mod(dictalpha[char]-5,26)]\n        else\n            res *= dictnum[mod(dictalpha[char]+9,26)==0 ? 26 : mod(dictalpha[char]+9,26)]\n        end    \n    end\n    res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203075,"user_id":null,"body":"function vowel_back(s::AbstractString)::String\n  join(map(c -> Dict(zip(\"abcdefghijklmnopqrstuvwxyz\", \"vkbaafpqistuvwnyzabtpvfghi\"))[c], collect(s)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203076,"user_id":2525,"body":"d = Dict()\nd['a'] = 'v'\nd['b'] = 'k'\nd['c'] = 'b'\nd['d'] = 'a'\nd['e'] = 'a'\nd['f'] = 'f'\nd['g'] = 'p'\nd['h'] = 'q'\nd['i'] = 'i'\nd['j'] = 's'\nd['k'] = 't'\nd['l'] = 'u'\nd['m'] = 'v'\nd['n'] = 'w'\nd['o'] = 'n'\nd['p'] = 'y'\nd['q'] = 'z'\nd['r'] = 'a'\nd['s'] = 'b'\nd['t'] = 't'\nd['u'] = 'p'\nd['v'] = 'v'\nd['w'] = 'f'\nd['x'] = 'g'\nd['y'] = 'h'\nd['z'] = 'i'\nfunction vowel_back(s::AbstractString)::String\n    join(d[c] for c in s)    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203077,"user_id":209,"body":"A = \"abcdefghijklmnopqrstuvwxyz\"\nB = \"vkbaafpqistuvwnyzabtpvfghi\"\nD = Dict()\nfor (i, j) in zip(A, B)\n  D[i] = j\nend\nfunction vowel_back(s::AbstractString)::String\n    join([D[i] for i in s])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203078,"user_id":881,"body":"function vowel_back(s::AbstractString)::String\n    join(replace([s...], Pair.([\"abcdefghijklmnopqrstuvwxyz\"...], [\"vkbaafpqistuvwnyzabtpvfghi\"...])...))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57cfdf34902f6ba3d300001e":[{"id":203079,"user_id":null,"body":"two_sort(array) = join(minimum(array), \"***\")","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203080,"user_id":null,"body":"two_sort(array) = join(split(sort!(array)[1], \"\"), \"***\")\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203081,"user_id":null,"body":"two_sort(array) = join(collect(sort(array)[1]),\"***\")","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203082,"user_id":null,"body":"function two_sort(array)\n  join(minimum(array), \"***\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203083,"user_id":null,"body":"function two_sort(array)\n  return join(split(sort!(array)[1], \"\"), \"***\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203084,"user_id":null,"body":"function two_sort(array)\n  sort(array)[1] |> collect |> v -> join(v, \"***\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203085,"user_id":null,"body":"two_sort(array) = join(first(sort(collect.(array), by = x-> Int.(x))), \"***\")","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203086,"user_id":null,"body":"function two_sort(array)\n  rstrip(join(map(x -> x * \"***\", split(sort!(array)[1], \"\"))), '*')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203087,"user_id":null,"body":"two_sort(array) = join(split(sort(array)[1], \"\"), \"***\")\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203088,"user_id":53,"body":"function two_sort(ls)\n  ls = sort(ls)\n  join(split(ls[1],\"\"),\"***\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57cff961eca260b71900008f":[{"id":203089,"user_id":53,"body":"function isvow(a)\n  [c in [97,101,105,111,117] ? Char(c) : c for c in a]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203090,"user_id":421,"body":"isvow(a) = [x in [97, 101, 105, 111, 117] ? Char(x) : x for x in a]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203091,"user_id":1474,"body":"function isvow(a)\n  vowels = [Int(c) for c in \"aeiou\"]\n  [i in vowels ? Char(i) : i for i in a]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203092,"user_id":null,"body":"function isvow(a)\n  map(x -> x in b\"aeiou\" ? Char(x) : x, a)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203093,"user_id":null,"body":"isvow(a) = map(n-> n \u2208 [97,101,105,111,117] ? Char(n) : n, a)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203094,"user_id":50,"body":"function isvow(a)\n  [f(n) for n in a]\nend\nfunction f(n)\n  if n in [97,101,105,111,117]\n    return Char(n)\n  else\n    return n\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203095,"user_id":492,"body":"function isvow(lst)\n    chs = [97, 101, 105, 111, 117]\n    arr = []\n    for n in lst\n        if n in chs\n            n = Char(n)\n        end\n        push!(arr, n)\n    end\n    return arr\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203096,"user_id":null,"body":"function isvow(a)\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  update(x) = Char(x) in vowels ? Char(x) : x\n  [update(x) for x in a]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203097,"user_id":null,"body":"function isvow(a)\n  dict=Dict(97=>'a',101=>'e',105=>'i',111=>'o',117=>'u')\n  res=[]\n  for q in a\n    if haskey(dict,q)\n      append!(res,dict[q])\n    else\n      append!(res,q)\n    end\n  end\n  res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203098,"user_id":null,"body":"function isvow(a)\n  return replace(a, 117 => 'u', 97 => 'a', 111 => 'o', 101 => 'e', 105 => 'i')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57d06663eca260fe630001cc":[{"id":203099,"user_id":1474,"body":"one = \"abdegopqADOPQR\"\ntwo = 'B'\n\nfunction olympic_ring(string)\n  score = floor(sum(c in one ? 1 : c == two ? 2 : 0 for c in string) \/ 2)\n  score > 3 ? \"Gold!\" : score == 3 ? \"Silver!\" : score == 2 ? \"Bronze!\" : \"Not even a medal!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203100,"user_id":null,"body":"function olympic_ring(string)\n    tot = sum(occursin(ch, \"aAbdDegoOpPqQR\") ? 1 : get(Dict('B'=> 2), ch, 0) for ch in string)\u00f72\n    tot \u2264 1 ? \"Not even a medal!\" : tot == 2 ? \"Bronze!\" : tot == 3 ? \"Silver!\" : \"Gold!\"\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203101,"user_id":null,"body":"function olympic_ring(string)\n  score = sum(c -> Int(in(c, \"abdegopqABDOPQR\")) + Int(c == 'B'), string) \u00f7 2\n  if score \u2264 1\n    \"Not even a medal!\"\n  elseif score == 2\n    \"Bronze!\"\n  elseif score == 3\n    \"Silver!\"\n  else\n    \"Gold!\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203102,"user_id":null,"body":"function olympic_ring(s)\n  score = mapreduce(c -> c == 'B' ? 2 : in(c, \"AabDdegOoPpQqR\") ? 1 : 0, +, s) \u00f7 2\n  score < 2 ? \"Not even a medal!\" : \n  score == 2 ? \"Bronze!\" : \n  score == 3 ? \"Silver!\" :\n  \"Gold!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203103,"user_id":881,"body":"function olympic_ring(string::AbstractString)::String\n    rings = (count(in(\"abdegopqADOPQR\"), string) + count(==('B'), string) * 2) \u00f7 2\n    if rings <= 1\n        \"Not even a medal!\"\n    elseif rings == 2\n        \"Bronze!\"\n    elseif rings == 3\n        \"Silver!\"\n    else\n        \"Gold!\"\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203104,"user_id":421,"body":"function olympic_ring(string)\n  t = div(sum(elem in \"abdpqeaogADOPQR\" ? 1 : elem == 'B' ? 2 : 0 for elem in string), 2)\n  t <= 1 ? \"Not even a medal!\" : t == 2 ?  \"Bronze!\" : t == 3 ?  \"Silver!\" : \"Gold!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57d1f36705c186d018000813":[{"id":203105,"user_id":421,"body":"function gordon(ramsay::AbstractString)::String\n   join([string(replace(replace(x, \"A\" => \"@\"), r\"[EIOU]\" => \"*\"), \"!!!!\") for x in split(uppercase(ramsay))], \" \")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203106,"user_id":null,"body":"function gordon(ramsay::AbstractString)::String\n    switch = Dict(\"A\"=> '@', \"E\"=> '*', \"I\"=> '*', \"O\"=> '*', \"U\"=> '*', \" \"=> \"!!!! \")\n    replace(uppercase(ramsay), r\"[AEIOU ]\"=> s-> switch[s]) * \"!!!!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203107,"user_id":null,"body":"function gordon(ramsay::AbstractString)::String\n    arr = ramsay |> uppercase |> split .|> x -> x*\"!!!!\"\n    arr |> x -> join(x, \" \") |> x -> replace(x, \"A\" => \"@\") |> x -> replace(x, r\"[EIOU]\" => \"*\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203108,"user_id":null,"body":"function gordon(ramsay::AbstractString)::String\n    a = \"aA\"\n    vowels = \"eiouEIOU\"\n    arr = []\n    word = []\n    for c in ramsay\n        if isspace(c)\n            if length(word) > 0\n                push!(arr, string(join(word, \"\"), \"!!!!\"))\n                word = []\n            end\n        elseif c in a\n            push!(word, \"@\")\n        elseif c in vowels\n            push!(word, \"*\")\n        else\n            push!(word, uppercase(c))\n        end\n    end\n    if length(word) > 0\n        push!(arr, string(join(word, \"\"), \"!!!!\"))\n    end\n    join(arr, \" \")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203109,"user_id":null,"body":"function gordon(ramsay::AbstractString)::String\n    join([string(replace(replace(uppercase(s), r\"A\" => s\"@\"), r\"[EIOU]\" => s\"*\"), \"!!!!\") for s in split(ramsay)], \" \")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203110,"user_id":null,"body":"function gordon(ramsay::AbstractString)::String\n  replace(replace(replace(uppercase(ramsay), \"A\" => \"@\"), r\"E|I|O|U\" => \"*\"), \" \" => \"!!!! \")*\"!!!!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203111,"user_id":53,"body":"function gordon(ramsay::AbstractString)::String\n    base = replace(replace(uppercase(ramsay), \"A\" => \"@\"), r\"[EIOU]\" => \"*\")\n    return join(map(x -> x * \"!!!!\", split(base, \" \")), \" \")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203112,"user_id":881,"body":"function gordon(ramsay::AbstractString)::String\n    replace(replace(replace(uppercase(ramsay), 'A'=>'@'), Set(\"EIOU\")=>\"*\"), r\"(?=( |$))\"=>s\"!!!!\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57d448c6ba30875437000138":[{"id":203113,"user_id":421,"body":"function roots(a, b, c)\n  b^2-4a*c >= 0 ? round(-b \/ a, digits = 2) : nothing\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203114,"user_id":null,"body":"function roots(a, b, c)\n  if (b^2-4*a*c>=0)\n    return round(-b\/a,digits=2)\n  end\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203115,"user_id":480,"body":"function roots(a, b, c)\n  d=b*b-4*a*c\n  if d < 0\n    return nothing\n  end\n  if a==0\n    if b==0\n      return nothing\n    end\n    return -c\/b\n  end\n  return round(-b\/a;digits=2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203116,"user_id":null,"body":"roots(a, b, c) = 4a*c \u2264 b^2 ? round(-b\/a, digits=2) : nothing","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203117,"user_id":null,"body":"function roots(a, b, c)\n  if a == 0\n    return nothing\n  elseif (b^2 - 4*a*c) < 0\n    return nothing\n  else\n    return round(-b\/a,digits=2)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203118,"user_id":1474,"body":"function roots(a, b, c)\n  b ^ 2 - 4 * a * c >= 0 ? round(-b \/ a, digits=2) : nothing\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203119,"user_id":null,"body":"function roots(a, b, c)\n  if b*b>=4*a*c round(-b\/a, digits=2) end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203120,"user_id":null,"body":"function roots(a, b, c)\n  b*b<4*a*c ? nothing : round(-b\/a, digits=2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203121,"user_id":null,"body":"function roots(a, b, c)\n  b^2 - 4a*c < 0 && return nothing\n  round(-b\/a, digits=2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203122,"user_id":null,"body":"# Quadratic formula: x = (-b +- sqrt(b^2-4ac))\/2a\n# Sum of both solutions: sqrt() cancels out --> x1+x2 = -b\/a\n\nfunction roots(a, b, c)\n  valid_solutions_exist(a,b,c) ? round(-b\/a; digits=2) : nothing\nend\nvalid_solutions_exist(a,b,c) = b^2-4a*c >= 0 #Squareroot is only valid if argument >=0\n\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57e1e61ba396b3727c000251":[{"id":203123,"user_id":null,"body":"string_clean(s) = filter(c -> !isnumeric(c), s)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203124,"user_id":null,"body":"string_clean(str) = replace(str, r\"\\d\"=> \"\")","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203125,"user_id":527,"body":"function string_clean(str::AbstractString)::String\n  replace(str, r\"\\d\" => \"\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203126,"user_id":null,"body":"function string_clean(str::AbstractString)\n    filter(char -> tryparse(Int, string(char)) |> isnothing, str)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203127,"user_id":null,"body":"function string_clean(str::AbstractString)\n  filter(!isdigit, str)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203128,"user_id":null,"body":"function string_clean(str::AbstractString)\n    replace(str,r\"[0-9]*\"=>\"\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203129,"user_id":null,"body":"function string_clean(str::AbstractString)\n  result = \"\"\n  for ch in str\n      if !isdigit(ch)\n        result *= string(ch)\n      end\n  end\n  return result\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203130,"user_id":168,"body":"function string_clean(str::AbstractString)\n  join(x for x in str if x < '0' || x > '9')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203131,"user_id":null,"body":"function string_clean(str::AbstractString)\n    replace(str, r\"\\d+\" => \"\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203132,"user_id":50,"body":"function string_clean(str::AbstractString)\n  return filter(!isdigit,str)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57e76bc428d6fbc2d500036d":[{"id":203133,"user_id":421,"body":"function string_to_array(s)\n  split(s, \" \")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203134,"user_id":null,"body":"function string_to_array(s)\n    split(s, r\"\\s+\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203135,"user_id":null,"body":"function string_to_array(s)\n  isempty(s) ? [\"\"] : split(s)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203136,"user_id":null,"body":"function string_to_array(s)\n  s == \"\" ? (return [\"\"]) : (return split(s))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203137,"user_id":null,"body":"function string_to_array(s)\n  if length(s) != 0\n    return split(s)\n  end\n  if length(s) == 0\n    return [\"\"]\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203138,"user_id":null,"body":"function string_to_array(s)\n  if s == \"\" return [\"\"] end\n  return split(s)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203139,"user_id":null,"body":"function string_to_array(s)\n    ans = []\n    a = \"\"\n    for i in s\n        if i != ' '\n            a = string(a, i)\n        else\n            push!(ans, a)\n            a = \"\"\n        end\n    end\n\n    println(a)\n    push!(ans, a)\n    return ans\n  end","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203140,"user_id":null,"body":"function string_to_array(s)\n  return s != \"\" ? split(s) : [\"\"]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203141,"user_id":null,"body":"string_to_array(s) = s == \"\" ? [\"\"] : split(s)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203142,"user_id":null,"body":"string_to_array(s) = length(s) == 0 ? [\"\"] : split(s)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57e90bcc97a0592126000064":[{"id":203143,"user_id":421,"body":"function sea_sick(sea::String)::String\n    length(sea) < 2 || sum(x != y for (x, y) in zip(sea, sea[2:end])) \/ length(sea) <= 0.2 ? \"No Problem\" : \"Throw Up\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203144,"user_id":1474,"body":"function sea_sick(sea::String)::String\n  cnt = 0\n  for i in 1:length(sea)-1\n    if sea[i] != sea[i+1]\n      cnt += 1\n    end\n  end\n  cnt \/ length(sea) > 0.2 ? \"Throw Up\" : \"No Problem\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203145,"user_id":null,"body":"sea_sick(sea) = (length(replace(sea, r\"(.)\\1+\"=> s-> first(s)))-1)\/length(sea) \u2264 0.2 ? \"No Problem\" : \"Throw Up\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203146,"user_id":null,"body":"function sea_sick(sea::String)::String\n  sick = 0\n  for i = 2:length(sea)\n    sea[i] == sea[i-1] || (sick += 1)\n  end\n  sick\/length(sea) > 0.2 ? \"Throw Up\" : \"No Problem\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203147,"user_id":53,"body":"function sea_sick(s::String)::String\n  xs = collect(s)\n  size = length(s)\n  t = 0.2\n  peaks = 0\n  prev = nothing\n  i = 1\n  while i <= size\n    x = string(xs[i])\n    if (x == \"~\" && prev == \"_\") || (prev == \"~\" && x == \"_\")\n      peaks = peaks + 1\n    end\n    if x == \"_\" || x == \"~\"\n      prev = x\n    end\n    i = i + 1\n  end\n  if peaks \/ size <= t\n    return \"No Problem\"\n  else\n    return \"Throw Up\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203148,"user_id":881,"body":"function sea_sick(sea::String)::String\n    count(a != b for (a, b) in zip(sea[1:end-1], sea[2:end])) \/ length(sea) > 0.2 ? \"Throw Up\" : \"No Problem\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57e92e91b63b6cbac20001e5":[{"id":203149,"user_id":null,"body":"function duty_free(price, discount, holiday)\n    100holiday \u00f7 (price * discount)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203150,"user_id":1474,"body":"function duty_free(price, discount, hol)\n  trunc(hol \/ (price * discount \/ 100))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203151,"user_id":null,"body":"function duty_free(normprice, discount, hol)\n  trunc(Int, 100 * hol \/ normprice \/ discount)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203152,"user_id":null,"body":"function duty_free(normprice, discount, hol)\n  div(hol * 100, normprice * discount)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203153,"user_id":null,"body":"function duty_free(normprice, discount, hol)\n  hol \u00f7 (normprice * discount \/ 100)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203154,"user_id":null,"body":"duty_free(normprice, discount, hol) = floor(Int, hol \/ (normprice * discount \/ 100))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203155,"user_id":null,"body":"function duty_free(normprice, discount, hol)\n  floor(hol\/(normprice * discount\/100))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203156,"user_id":881,"body":"function duty_free(normprice, discount, holiday)::Int\n    100holiday \u00f7 (normprice * discount)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203157,"user_id":53,"body":"function duty_free(normprice, discount, hol)\n  (hol * 100) \u00f7 (normprice * discount)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203158,"user_id":null,"body":"function duty_free(p, d, h)\n  return floor(h\/(p*d\/100))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57eadb7ecd143f4c9c0000a3":[{"id":203159,"user_id":null,"body":"function abbrev_name(name)\n  first, last = split(uppercase(name))\n  \"$(first[1]).$(last[1])\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203160,"user_id":527,"body":"function abbrev_name(name)\n  (x, ), (y, ) = split(name)\n  uppercase(\"$x.$y\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203161,"user_id":53,"body":"function abbrev_name(name)\n  names = split(uppercase(name), \" \")\n  string(names[1][1]) * \".\" * string(names[2][1])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203162,"user_id":null,"body":"function abbrev_name(name)\n  join(map(first\u2218uppercase, split(name, \" \")), \".\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203163,"user_id":1474,"body":"function abbrev_name(name)\n  join([uppercase(c[1]) for c in split(name)], '.')\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203164,"user_id":null,"body":"function abbrev_name(name)\n  join((uppercase(s[1]) for s=split(name, \" \")), \".\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203165,"user_id":null,"body":"function abbrev_name(name)\n  initials = uppercase.([ split(name)[1][1], split(name)[2][1] ])\n  join(initials, \".\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203166,"user_id":null,"body":"function abbrev_name(name)\n  arr = split(name, \" \")\n  return uppercase(arr[1][1] * \".\" * arr[2][1])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203167,"user_id":null,"body":"function abbrev_name(name)\n    result = name[begin]*\".\"\n    result *= split(name, \" \")[2][begin]\n    return uppercase(result)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203168,"user_id":null,"body":"function abbrev_name(name)\n  name_split = split(uppercase(name))\n  \n  return name_split[1][1] * \".\" * name_split[2][1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57eae20f5500ad98e50002c5":[{"id":203169,"user_id":527,"body":"no_space(s) = replace(s, ' ' => \"\")","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203170,"user_id":null,"body":"no_space(x) = filter(!isspace, x)\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203171,"user_id":421,"body":"function no_space(x)\n  replace(x, ' ' => \"\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203172,"user_id":null,"body":"function no_space(x)\n  #your code here\n  return filter(i -> !isspace(i), x)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203173,"user_id":null,"body":"function no_space(x)\n  return join(split(x))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203174,"user_id":null,"body":"function no_space(x)\n  #your code here\n  \nreplace(x, \" \"=>\"\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203175,"user_id":null,"body":"function no_space(x)\n  result = \"\"\n  for ch in x\n    if ch != ' '\n      result *= string(ch)\n    end\n  end\n    \n  return result\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203176,"user_id":1474,"body":"function no_space(x)\n  filter(c -> !isspace(c), x)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203177,"user_id":null,"body":"function no_space(x)\n    res = \"\"\n    for s in x\n        if s != ' '\n            res = string(res, s)\n        end\n    end\n    return res\n  end","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203178,"user_id":null,"body":"#https:\/\/www.codewars.com\/kata\/57eae20f5500ad98e50002c5\/train\/julia\nfunction no_space(x)\n  return filter(ch -> !isspace(ch), x)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57eae65a4321032ce000002d":[{"id":203179,"user_id":527,"body":"function fake_bin(x)\n  join(c < '5' ? '0' : '1' for c in x)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203180,"user_id":null,"body":"fake_bin(n) = join(d <= '4' ? '0' : '1' for d in n)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203181,"user_id":null,"body":"function fake_bin(x)\n  z = \"\"\n  for i in x\n    if parse(Int, i) < 5\n      z = z * \"0\"\n    else\n      z = z * \"1\"\n    end\n  end\n  z\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203182,"user_id":null,"body":"function fake_bin(x)\n  join(map(a -> a < '5' ? '0' : '1', x))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203183,"user_id":null,"body":"function fake_bin(x)\n  return_string = \"\"\n  for n in x\n    if parse(Int64, n) < 5\n      return_string *= \"0\"\n    else\n      return_string *= \"1\"\n    end\n  end\n  return return_string\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203184,"user_id":null,"body":"fake_bin(x) = isempty(x) ? x : ((x[1] < '5' ? '0' : '1') * fake_bin(SubString(x, 2)))\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203185,"user_id":null,"body":"function fake_bin(x)\n  map(c -> Char(Int(c - 48) \u00f7 5 + 48), x)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203186,"user_id":null,"body":"function fake_bin(x)\n  join((string(fld(parse(Int,c), 5)) for c=x), \"\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203187,"user_id":null,"body":"function fake_bin(x)\n  map(a -> a < '5' ? '0' : '1', x)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203188,"user_id":null,"body":"function fake_bin(x)\n  res = \"\"\n  for c in x\n    n = parse(Int, c)\n    if n >= 5\n      res *= \"1\"\n    else\n      res *= \"0\"\n    end\n  end\n  return res\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57eaeb9578748ff92a000009":[{"id":203189,"user_id":572,"body":"function sum_mix(arr)\n  sum(map(x->parse(Int, string(x)), arr))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203190,"user_id":null,"body":"function sum_mix(x)\n  sum(map(v -> isa(v, String) ? parse(Int, v) : v, x))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203191,"user_id":null,"body":"sum_mix(x) = sum(parse.(Int, \"$i\" for i in x))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203192,"user_id":2723,"body":"import Base.parse\nparse(::Type{Int64}, num::Int64) = num\n\nsum_mix(x) = sum(parse.(Int,x))\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203193,"user_id":null,"body":"function sum_mix(x)\n    s = 0\n    for i in x\n        if typeof(i) == String\n            s = s + parse(Int8, i)\n        else\n            s = s + i\n        end\n    end\n    return s\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203194,"user_id":null,"body":"function only_ints(x)\n  typeof(x) == String ? parse(Int64, x) : x\nend\n\nfunction sum_mix(x)\n  only_ints.(x) |> sum\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203195,"user_id":null,"body":"function sum_mix(x)\n  sum([typeof(elem) == Int ? elem : parse(Int, elem) for elem = x])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203196,"user_id":null,"body":"sum_mix(x) = sum(parse.(Int, string.(x)))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203197,"user_id":null,"body":"function sum_mix(x)\n  sum(map(q -> typeof(q)==String ? parse(Int,q) : q, x))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203198,"user_id":53,"body":"function sum_mix(xs)\n  s = 0\n  for x in xs\n   s += parse(Int64, string(x))\n  end\n  s\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57eaec5608fed543d6000021":[{"id":203199,"user_id":null,"body":"function div_con(xs::Array)::Int\n  reduce(+, typeof(x) == String ? -parse(Int, x) : x for x in xs)  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203200,"user_id":null,"body":"div_con(xs::Array)::Int = sum([x isa String ? -parse(Int,x) : x for x in xs])","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203201,"user_id":null,"body":"div_con(xs::Array)::Int = sum(x-> isa(x, Int) ? x : -parse(Int, x), xs)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203202,"user_id":759,"body":"function div_con(xs::Array)::Int\n    sum(a -> isa(a, String) ? -parse(Int, a) : a, xs)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203203,"user_id":null,"body":"function div_con(xs::Array)::Int\n    res = 0\n  \n    for elem in xs\n      if typeof(elem) == String\n        res -= parse(Int,elem)\n      else\n        res += elem\n      end\n    end\n      res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203204,"user_id":1474,"body":"function div_con(xs::Array)::Int\n  cnt1, cnt2 = 0, 0\n  for i in xs\n    typeof(i) == Int ? cnt1 += i : cnt2 += parse(Int, i)\n  end\n  cnt1 - cnt2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203205,"user_id":null,"body":"function div_con(xs::Array)::Int\n    nonstring = 0\n    fromstring = 0\n    for e in xs\n      if e isa Int\n        nonstring += e\n      else\n        fromstring += parse(Int, e)\n      end\n    end\n    nonstring - fromstring\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203206,"user_id":2525,"body":"function div_con(xs::Array)::Int\n    sum([if typeof(n)==String; -parse(Int, n; base=10) else n end for n in xs])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203207,"user_id":881,"body":"function div_con(xs::Array)::Int\n    f(x) = x\n    f(x::String) = -parse(Int, x)\n    mapreduce(f, +, xs, init = 0)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57eb8fcdf670e99d9b000272":[{"id":203208,"user_id":null,"body":"function high(x)\n  charDict = Dict(c => i for (i, c) in enumerate('a':'z'))\n  idx = findmax([sum(charDict[c] for c in s) for s in split(x)])\n  split(x)[idx[end]]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203209,"user_id":null,"body":"function high(x)\n  score(word) = sum(c -> c - 'a' + 1, word)\n  foldl((a,b)->score(b) > score(a) ? b : a, split(x))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203210,"user_id":null,"body":"function high(x)\n    word_values = Dict(word => sum(Int(letter) - 96 for letter in word) for word in split(x))\n    filter(word -> word_values[word] == maximum(values(word_values)), split(x))[1]\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203211,"user_id":null,"body":"function high(x)\n  sort(split(x), by=s->-sum(c->Int(c)-Int('`'), s))[1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203212,"user_id":null,"body":"function high(x)\n  words = split(x, \" \")\n  words[findmax([sum(collect(a).-'`') for a in words])[2]]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203213,"user_id":null,"body":"function high(x)\n  words = split(x, \" \")\n  words[findmax([sum(convert.(Int, collect(a)).-96) for a in words])[2]]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203214,"user_id":null,"body":"high(x) = sort(split(x,' '),by=str->sum(collect(str).-'`'),rev=true)[1]","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203215,"user_id":null,"body":"function high(x)\n  return last(maximum(Dict(map(word->(sum(map(x->x-Int('a') +1, Int.(only.(split(word, \"\"))))) => word), reverse(split(x))))))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203216,"user_id":881,"body":"high(x) = argmax(word -> sum(Int(char) - 96 for char in word), split(x))\n\nif VERSION < v\"1.7\"\n    function Base.argmax(fn::Function, iter)\n        maxvar, iter = Iterators.peel(iter)\n        maxval = fn(maxvar)\n        for var in iter\n            val = fn(var)\n            if val > maxval\n                maxval = val\n                maxvar = var\n            end\n        end\n        maxvar\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203217,"user_id":null,"body":"function high(x)\n  score(w) = sum(map(c -> Int(c) - Int('a') + 1, collect(w)))\n  res = \"\"\n  highScore = 0\n  for word in split(x, \" \")\n    curScore = score(word)\n    if curScore > highScore\n      highScore = curScore\n      res = word\n    end\n  end\n    \n  return res\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57ebaa8f7b45ef590c00000c":[{"id":203218,"user_id":null,"body":"function switcher(arr)\n   join(\"zyxwvutsrqponmlkjihgfedcba!? \"[parse(Int,q)] for q in arr)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203219,"user_id":1474,"body":"change = \"zyxwvutsrqponmlkjihgfedcba!? \"\n\nfunction switcher(arr)\n  join(change[parse(Int, s)] for s in arr)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203220,"user_id":null,"body":"function switcher(arr)\n    join(map(x-> Dict(zip(string.(1:29), collect(\"zyxwvutsrqponmlkjihgfedcba!? \")))[x], arr))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203221,"user_id":null,"body":"function switcher(arr)\n    join(Char.(123 .- replace!(parse.(Int, arr), 27=>90, 28=>60, 29=>91)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203222,"user_id":null,"body":"switcher(arr) = join(parse(Int, s) > 26 ? \"!? \"[parse(Int, s)-26] : Char(-parse(Int, s)+123) for s in arr)\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203223,"user_id":null,"body":"function stringtointandback(str)\n  int = parse(Int, str)\n  int > 26 ? \"!? \"[int-26] : Char(-int+123)\nend\n\nfunction switcher(arr)\n   String(stringtointandback.(arr))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203224,"user_id":null,"body":"function switcher(arr)\n  valmap = Dict(\"$(30-i)\" => \"$(x)\" for (i,x) in enumerate(\" ?!abcdefghijklmnopqrstuvwxyz\"))\n  join(n==\"0\" ? \"\" : valmap[n] for n in arr)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203225,"user_id":421,"body":"function switcher(arr)\n   str = \"zyxwvutsrqponmlkjihgfedcba!? \"\n   join(map(x->str[parse(Int, x)], arr))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57ebdf1c2d45a0ecd7002cd5":[{"id":203226,"user_id":null,"body":"function inside_outword(x)\n  n = length(x)\n  chars = collect(x)\n  midl = fld(n, 2)\n  midr = fld(n+3, 2)\n  @views begin reverse!(chars[begin:midl]); reverse!(chars[midr:end]) end\n  return chars\nend\n\nfunction inside_out(x)\n  words = split(x)\n  join((join(inside_outword(word)) for word in words), \" \")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203227,"user_id":null,"body":"\nfunction inside_outWord(x)\n  n = length(x)\n  m = trunc(Int, n\/2)\n  middle = n%2==0 ? \"\" : x[m+1]\n  return reverse(x[1:m])*middle*reverse(x[m+(n%2==0 ? 1 : 2):end])\nend\n\nfunction inside_out(x)\n  return join(map(inside_outWord, split(x, \" \")), \" \")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203228,"user_id":759,"body":"function inside_out(x)\n  join((string(\n      reverse(w[1:end\u00f72]),\n      w[end\u00f72+1:(end+1)\u00f72],\n      reverse(w[(end+1)\u00f72+1:end])) for w in split(x, \" \")), \" \")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203229,"user_id":null,"body":"function inside_out(x)\n    flip(w) = iseven(length(w)) ? vcat(reverse(w[1:length(w)\u00f72]),reverse(w[length(w)\u00f72+1:end])) : vcat(reverse(w[1:length(w)\u00f72]),w[length(w)\u00f72+1],reverse(w[length(w)\u00f72+2:end]))\n    join(join.(flip.(collect.(split(x)))), \" \")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203230,"user_id":null,"body":"function inside_out(x)\n  words = []\n  for word in split(x)\n    lengthword = length(word)\n    if isodd(lengthword)\n      push!(words, reverse(word[1:lengthword\u00f72]) * word[lengthword\u00f72+1] * reverse(word[lengthword\u00f72+2:end]))\n    else\n      push!(words, reverse(word[1:lengthword\u00f72]) * reverse(word[lengthword\u00f72+1:end]))\n    end\n  end\n  return join(words, \" \")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203231,"user_id":2525,"body":"function turn(word)\n    if iseven(length(word))\n        reverse(word[1:end\u00f72]) * reverse(word[end\u00f72+1:end])\n    else\n        reverse(word[1:end\u00f72]) * word[end\u00f72+1] * reverse(word[end\u00f72+2:end])\n    end\nend\nfunction inside_out(x)\n    join([turn(w) for w in split(x)], \" \")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203232,"user_id":421,"body":"function inside_out(x)\n  join((length(s) > 3 ? string(reverse(s[1:div(length(s),2)]), (isodd(length(s)) ? string(s[div(length(s), 2) + 1], reverse(s[div(length(s), 2) + 2:end])) : reverse(s[div(length(s), 2) + 1:end]))) : s for s in split(x, \" \")), \" \")\nend\n  ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57ec8bd8f670e9a47a000f89":[{"id":203233,"user_id":421,"body":"mouth_size(animal) = lowercase(animal) == \"alligator\" ? \"small\" : \"wide\"","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203234,"user_id":null,"body":"import Unicode\n\nmouth_size(animal) = Unicode.normalize(animal, casefold=true) == \"alligator\" ? \"small\" : \"wide\"","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203235,"user_id":null,"body":"mouth_size(animal) = lowercase(animal) === \"alligator\" ? \"small\" : \"wide\"","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203236,"user_id":53,"body":"function mouth_size(animal)\n  if lowercase(animal) == \"alligator\"\n    \"small\"\n  else\n    \"wide\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203237,"user_id":null,"body":"mouth_size(animal::String)::String = lowercase(animal) == \"alligator\" ? \"small\" : \"wide\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203238,"user_id":null,"body":"function mouth_size(animal)\n #your code here\n  # https:\/\/riptutorial.com\/julia-lang\/example\/25046\/case-insensitive-string-comparison\n  # https:\/\/stackoverflow.com\/questions\/39399187\/case-insensitive-string-comparison-in-julia\n  if lowercase(animal) == \"alligator\"\n    return \"small\"\n  end\n    return \"wide\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203239,"user_id":527,"body":"function mouth_size(animal)\n  lowercase(animal) == \"alligator\" ? \"small\" : \"wide\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57ed30dde7728215300005fa":[{"id":203240,"user_id":null,"body":"bump(x) = count(==('n'),x) > 15 ? \"Car Dead\" : \"Woohoo!\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203241,"user_id":null,"body":"function bump(x) \n  n = sum([s==\"n\" for s in split(x,\"\")])\n  print(n)\n  if n > 15\n    return \"Car Dead\"\n  else\n    return \"Woohoo!\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203242,"user_id":null,"body":"function bump(x) \n  #your code here\n  count = 0\n  for i in x\n    if(i=='n') \n      count +=1\n    end  \n  end  \n  return count <= 15 ? \"Woohoo!\" : \"Car Dead\" \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203243,"user_id":null,"body":"function bump(x) \n    15 < count(==('n'), x) ? \"Car Dead\" : \"Woohoo!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203244,"user_id":50,"body":"function bump(x) \n  if count(c->(c=='n'),x)>15\n    return \"Car Dead\"\n  else\n    return \"Woohoo!\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203245,"user_id":null,"body":"function bump(x) \n  count(y -> y == 'n', x) > 15 ? \"Car Dead\" : \"Woohoo!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203246,"user_id":null,"body":"function bump(x)\n  splitx = split(x, \"\")\n  if length(findall(z -> z == \"n\", splitx)) > 15\n    return \"Car Dead\"\n  else\n    return \"Woohoo!\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203247,"user_id":759,"body":"bump(x)=count(isequal('n'),x)>15 ? \"Car Dead\" : \"Woohoo!\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203248,"user_id":53,"body":"function bump(x) \n  count(c -> (c == 'n'), x) <= 15 ? \"Woohoo!\" : \"Car Dead\" \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203249,"user_id":null,"body":"function bump(x)\n  count(==('n'), x) \u2264 15 ? \"Woohoo!\" : \"Car Dead\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57ed56657b45ef922300002b":[{"id":203250,"user_id":881,"body":"broken(inp) = join(d == '1' ? '0' : '1' for d in inp)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203251,"user_id":1474,"body":"function broken(inp)\n  join(c == '0' ? '1' : '0' for c in inp)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203252,"user_id":null,"body":"broken(inp) = join(x == '1' ? \"0\" : \"1\" for x in inp)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203253,"user_id":null,"body":"function broken(inp)\n  join(map(q -> (parse(Int,q)+1)%2,collect(inp)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203254,"user_id":null,"body":"function broken(inp)\n  join(replace!(split(inp, \"\"), \"1\"=>\"0\", \"0\"=>\"1\"))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203255,"user_id":null,"body":"function broken(inp)\n  join(x=='0' ? '1' : '0' for x in inp)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203256,"user_id":421,"body":"function broken(inp)\n  join(abs(1-parse(Int, x)) for x in inp)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57ee24e17b45eff6d6000164":[{"id":203257,"user_id":null,"body":"function cat_mouse(s) \n  abs((findfirst(==('C'),s)-findfirst(==('m'),s))[1]) > 4 ? \"Escaped!\" : \"Caught!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203258,"user_id":759,"body":"cat_mouse(x)=length(x)<6 ? \"Caught!\" : \"Escaped!\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203259,"user_id":null,"body":"cat_mouse(x) = count(\".\", x) \u2264 3 ? \"Caught!\" : \"Escaped!\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203260,"user_id":null,"body":"function cat_mouse(x) \n  nlist = split(x,\"\")\nreturn length(nlist) > 5 ? \"Escaped!\" : \"Caught!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203261,"user_id":null,"body":"function cat_mouse(x)\n  \n  indices = Dict()\n  for (i, c)  in enumerate(x)\n    indices[c] = i\n  end\n  \n  return indices['m'] - indices['C'] <= 4 ? \"Caught!\" : \"Escaped!\"\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203262,"user_id":50,"body":"function cat_mouse(x) \n  length(x) < 6 ? \"Caught!\" : \"Escaped!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203263,"user_id":null,"body":"function cat_mouse(x) \n  abs(findfirst('m', x) - findfirst('C', x)) <= 4 ? \"Caught!\" : \"Escaped!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203264,"user_id":527,"body":"function cat_mouse(x) \n  length(x) <= 5 ? \"Caught!\" : \"Escaped!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203265,"user_id":421,"body":"cat_mouse(x) = count(c->c=='.',x) <= 3 ? \"Caught!\" : \"Escaped!\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57ee31c5e77282c24d000024":[{"id":203266,"user_id":1474,"body":"function paul(x)\n  scores = Dict(\"life\" => 0, \"kata\" => 5, \"eating\" => 1, \"Petes kata\" => 10)\n  ret = sum(scores[s] for s in x)\n  if ret >= 100\n    \"Miserable!\"\n  elseif ret >= 70\n    \"Sad!\"\n  elseif ret >= 40\n    \"Happy!\"\n  else\n    \"Super happy!\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203267,"user_id":null,"body":"function paul(x)\n  Scores = Dict{String, Int64}(\"kata\" => 5, \"Petes kata\" => 10, \"life\" => 0, \"eating\" => 1)\n  total = reduce((y,z) -> y + Scores[z], x; init=0)\n  # Return\n  total < 40 && return \"Super happy!\"\n  total < 70 && return \"Happy!\"\n  total < 100 && return \"Sad!\"\n  return \"Miserable!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203268,"user_id":null,"body":"function paul(x)\n    misery = sum(m-> Dict(\"kata\"=> 5, \"Petes kata\"=> 10, \"life\"=> 0, \"eating\"=> 1)[m], x)\n    misery < 40 ? \"Super happy!\" : misery < 70 ? \"Happy!\" : misery < 100 ? \"Sad!\" : \"Miserable!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203269,"user_id":null,"body":"function paul(x)\n s = sum(map(q -> q==(\"life\") ? 0 : q,map(q -> q==(\"kata\") ? 5 : q,map(q -> q==(\"eating\") ? 1 : q,map(q -> q==(\"Petes kata\") ? 10 : q,x)))))\n  if s < 40\n   return \"Super happy!\"\n  elseif s < 70\n   return \"Happy!\"\n  elseif s < 100\n   return \"Sad!\"\n  else\n   return \"Miserable!\" \n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203270,"user_id":null,"body":"function paul(x)\n  score = sum(map(a -> Dict(\"life\" => 0, \"eating\" => 1, \"kata\" => 5, \"Petes kata\" => 10)[a], x))\n  if score < 40\n    \"Super happy!\"\n  elseif 40 \u2264 score < 70\n    \"Happy!\"\n  elseif 70 \u2264 score < 100\n    \"Sad!\"\n  else\n    \"Miserable!\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203271,"user_id":null,"body":"function paul(x)\n  points = Dict(\"kata\"=>5, \"Petes kata\"=>10, \"life\"=>0, \"eating\"=>1)\n  score = sum(points[i] for i in x)\n  score < 40 ? \"Super happy!\" : (score >= 40 && score < 70) ? \"Happy!\" : (score >= 70 && score < 100) ? \"Sad!\" : \"Miserable!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203272,"user_id":421,"body":"function paul(x)\n  score = sum(get(Dict(\"kata\"=> 5, \"Petes kata\"=> 10, \"life\"=> 0, \"eating\"=> 1), elem, 0) for elem in x)\n  score < 40 ? \"Super happy!\" : score < 70 ? \"Happy!\" : score < 100 ? \"Sad!\" : \"Miserable!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57ee4a67108d3fd9eb0000e7":[{"id":203273,"user_id":572,"body":"function goose_filter(birds)\n  geese =  [\"African\", \"Roman Tufted\", \"Toulouse\", \"Pilgrim\", \"Steinbacher\"]\n  return filter(x->x\u2209geese, birds)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203274,"user_id":null,"body":"function goose_filter(birds)\n    geese =  [\"African\", \"Roman Tufted\", \"Toulouse\", \"Pilgrim\", \"Steinbacher\"]\n    [bird for bird in birds if bird \u2209 geese]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203275,"user_id":null,"body":"function goose_filter(birds)\n  geese =  [\"African\", \"Roman Tufted\", \"Toulouse\", \"Pilgrim\", \"Steinbacher\"]\n  \n  # return an array containing all of the strings in the input array \n  # except those that match strings in geese\n  \n  return birds[.!in(geese).(birds)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203276,"user_id":null,"body":"function goose_filter(birds)\n    GEESE = Set([\"African\", \"Roman Tufted\", \"Toulouse\", \"Pilgrim\", \"Steinbacher\"])\n    return [bird for bird in birds if bird \u2209 GEESE]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203277,"user_id":null,"body":"function goose_filter(birds)\n  geese =  [\"African\", \"Roman Tufted\", \"Toulouse\", \"Pilgrim\", \"Steinbacher\"]\n  \n  function not_geese(word)\n    word \u2209 geese\n  end\n\n  filter(not_geese, birds)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203278,"user_id":null,"body":"function goose_filter(birds)\n  geese =  [\"African\", \"Roman Tufted\", \"Toulouse\", \"Pilgrim\", \"Steinbacher\"]\n  filter(!in(geese), birds)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203279,"user_id":null,"body":"goose_filter(birds) = filter(x-> x\u2209([\"African\",\"Roman Tufted\",\"Toulouse\",\"Pilgrim\",\"Steinbacher\"]), birds)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203280,"user_id":50,"body":"function goose_filter(birds)\n  geese =  [\"African\", \"Roman Tufted\", \"Toulouse\", \"Pilgrim\", \"Steinbacher\"]\n  [x for x in birds if !(x in geese)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203281,"user_id":null,"body":"function goose_filter(birds)\n  geese =  [\"African\", \"Roman Tufted\", \"Toulouse\", \"Pilgrim\", \"Steinbacher\"]\n  \n  birds = [q for q in birds if q \u2209 geese]\n  return birds\nend\n\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203282,"user_id":null,"body":"function goose_filter(birds)\n  geese =  [\"African\", \"Roman Tufted\", \"Toulouse\", \"Pilgrim\", \"Steinbacher\"]\n  newarr = String[]\n  for i in 1:length(birds)\n    if birds[i] \u2209 geese\n      push!(newarr, birds[i])\n    end\n  end\n  return newarr\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57ee99a16c8df7b02d00045f":[{"id":203283,"user_id":null,"body":"flattenandsort(arr) = isempty(arr) ? [] : sort(reduce(vcat, arr))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203284,"user_id":null,"body":"function flattenandsort(arr)\n  sort([v for ele in arr for v in ele])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203285,"user_id":null,"body":"flattenandsort(arr) = reduce(vcat, arr, init=[]) |> sort","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203286,"user_id":null,"body":"\nflattenandsort = sort \u2218 collect \u2218 Iterators.flatten","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203287,"user_id":527,"body":"function flattenandsort(arr)\n  sort(collect(Iterators.flatten(arr)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203288,"user_id":null,"body":"function flattenandsort(arr)\n  sort(cat(arr..., dims=1))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203289,"user_id":null,"body":"function flattenandsort(arr)\n  sort([(arr...)...])\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203290,"user_id":null,"body":"function flattenandsort(arr)\n  # your code here\n  arr |> Iterators.flatten |> collect |> sort\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203291,"user_id":null,"body":"flattenandsort(arr) = (sort \u2218 collect \u2218 Iterators.flatten)(arr)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203292,"user_id":50,"body":"function flattenandsort(arr)\n  return sort(vcat(arr...))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57efab9acba9daa4d1000b30":[{"id":203293,"user_id":1474,"body":"function bald(x)\n  cnt = count(c -> c =='\/', x)\n  if cnt == 0\n    head = \"Clean!\"\n  elseif cnt == 1\n    head = \"Unicorn!\"\n  elseif cnt == 2\n    head = \"Homer!\"\n  elseif 3 <= cnt <= 5\n    head = \"Careless!\"\n  else\n    head = \"Hobo!\"\n  end\n  [join(c == '\/' ? '-' : c for c in x), head]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203294,"user_id":null,"body":"function bald(x)\n    [replace(x, '\/'=> '-'), get(Dict(zip(0:5,[\"Clean!\",\"Unicorn!\",\"Homer!\",\"Careless!\",\"Careless!\",\"Careless!\"])), count(\"\/\", x), \"Hobo!\")]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203295,"user_id":null,"body":"function bald(x)\n  cnt = count(==('\/'),x)\n  \n  if cnt == 0\n    [replace(x,r\"\/\" => s\"-\"),\"Clean!\"]\n  elseif cnt == 1\n    [replace(x,r\"\/\" => s\"-\"),\"Unicorn!\"]\n  elseif cnt == 2\n    [replace(x,r\"\/\" => s\"-\"),\"Homer!\"]\n  elseif 3 <= cnt <= 5\n    [replace(x,r\"\/\" => s\"-\"),\"Careless!\"]\n  else\n    [replace(x,r\"\/\" => s\"-\"),\"Hobo!\"]\n  end\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203296,"user_id":null,"body":"function bald(x)\n  ['-'^length(x), get([\"Clean\", \"Unicorn\", \"Homer\", \"Careless\", \"Careless\", \"Careless\"], count(==('\/'), x) + 1, \"Hobo\") * '!']\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203297,"user_id":881,"body":"function bald(x)\n    c = count(==('\/'), x)\n    ['-' ^ length(x), if c == 0\n        \"Clean!\"\n    elseif c == 1\n        \"Unicorn!\"\n    elseif c == 2\n        \"Homer!\"\n    elseif 3 <= c <= 5\n        \"Careless!\"\n    else\n        \"Hobo!\"\n    end]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203298,"user_id":53,"body":"function bald(x)\n  n = count(c->(c=='\/'), x)\n  m = '-'^length(x)\n  if n == 0\n    return [m, \"Clean!\"]\n  elseif n == 1\n    return [m, \"Unicorn!\"] \n  elseif n == 2\n    return [m, \"Homer!\"] \n  elseif n < 6\n    return [m, \"Careless!\"] \n  else\n    return [m, \"Hobo!\"] \n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203299,"user_id":null,"body":"function bald(x)\n  n = count(c -> c=='\/', x)\n  x = replace(x, r\"\/\" => s\"-\")\n  n == 0 ? [x, \"Clean!\"] : n == 1 ? [x, \"Unicorn!\"] : n == 2 ? [x, \"Homer!\"] : n in [3,4,5] ? [x, \"Careless!\"] : [x, \"Hobo!\"]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203300,"user_id":421,"body":"function bald(x)\n  num = count(c->c=='\/',x)\n  [replace(x, '\/' => '-'), num > 5 ? \"Hobo!\" : [\"Clean!\", \"Unicorn!\", \"Homer!\", \"Careless!\", \"Careless!\", \"Careless!\"][num + 1]]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57f222ce69e09c3630000212":[{"id":203301,"user_id":645,"body":"function well(x)\n  z = count(i -> i == \"good\", x)\n  z == 0 ? \"Fail!\" : z <= 2 ? \"Publish!\" : \"I smell a series!\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203302,"user_id":null,"body":"function well(arr)\n    goods = count(map(==(\"good\"), arr))\n    return goods == 0 ? \"Fail!\" : goods <= 2 ? \"Publish!\" : \"I smell a series!\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203303,"user_id":null,"body":"function well(y)\n  u=unique(y)\n  d=Dict([(i,count(x->x==i,y)) for i in u])\n  if !(haskey(d, \"good\"))\n    result = \"Fail!\"\n  elseif d[\"good\"] > 2\n    result = \"I smell a series!\"\n  elseif d[\"good\"] > 0\n    result = \"Publish!\"\n  else\n    result = \"Fail!\"\n  end\n  return result\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203304,"user_id":null,"body":"function well(x)\n  good_num = length(findall(map((a)->a==\"good\", x)))\n  \n  if good_num > 2\n    return \"I smell a series!\"\n  elseif good_num >= 1\n    return \"Publish!\"\n  else\n    return \"Fail!\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203305,"user_id":null,"body":"function well(x)\n  goodCount = 0\n  for val in x\n    if val == \"good\"\n      goodCount += 1\n    end\n  end\n  if goodCount == 0\n    return \"Fail!\"\n  elseif goodCount == 1 || goodCount == 2\n    return \"Publish!\"\n  end\n  return \"I smell a series!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203306,"user_id":null,"body":"function well(x)\n  c = count(i->i==\"good\", x)\n  return ifelse(c in [1,2], \"Publish!\", ifelse(c>2, \"I smell a series!\", \"Fail!\"))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203307,"user_id":null,"body":"function well(x)\n  y = filter(elem ->elem ==\"good\",x)\n  if length(y) == 0\n    return \"Fail!\"\n  elseif length(y) <=2\n    return \"Publish!\"\n    else \n    return \"I smell a series!\"\n    \n      \n    end\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203308,"user_id":null,"body":"function well(x)\n  count = 0\n  for word in x\n    if word == \"good\"\n      count += 1\n    end\n  end\n  \n  if count > 2\n    return \"I smell a series!\"\n  elseif count > 0\n    return \"Publish!\"\n  else\n    return \"Fail!\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203309,"user_id":null,"body":"well(x) = all(==(\"bad\"), x) ? \"Fail!\" : count(==(\"good\"), x) > 2 ? \"I smell a series!\" : \"Publish!\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203310,"user_id":null,"body":"function well(x)\n  cnt = count(q->q==(\"good\"),x)\n  if cnt > 2\n    return \"I smell a series!\"\n  elseif cnt > 0\n    return \"Publish!\"\n  else\n    return \"Fail!\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57f24e6a18e9fad8eb000296":[{"id":203311,"user_id":421,"body":"function how_much_i_love_you(nbpetals)\n  [\"not at all\", \"I love you\", \"a little\", \"a lot\", \"passionately\", \"madly\"][nbpetals % 6 + 1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203312,"user_id":1474,"body":"function how_much_i_love_you(nbpetals)\n  t = nbpetals % 6\n  if t == 0\n    t = 6\n  end\n  [\"I love you\", \"a little\", \"a lot\", \"passionately\", \"madly\", \"not at all\"][t]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203313,"user_id":null,"body":"function how_much_i_love_you(petals)\n  phrases = [\"I love you\", \"a little\", \"a lot\", \"passionately\", \"madly\", \"not at all\"]\n  phrases[mod1(petals, 6)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203314,"user_id":null,"body":"cycle = [\n  \"I love you\",\n  \"a little\",\n  \"a lot\",\n  \"passionately\",\n  \"madly\",\n  \"not at all\"\n]\ncl = length(cycle)\nhow_much_i_love_you(np) = cycle[np <= cl ? np : np % cl == 0 ? cl : np - div(np, cl) * cl]\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203315,"user_id":null,"body":"function how_much_i_love_you(nbpetals)\n  phrases = [\"I love you\", \"a little\", \"a lot\", \"passionately\", \"madly\", \"not at all\"]\n  if mod(nbpetals, length(phrases)) == 0\n    phrases[6]\n  else \n    x = mod(nbpetals, length(phrases))\n    phrases[x]\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203316,"user_id":null,"body":"function how_much_i_love_you(nbpetals)\n  value = nbpetals % 6\n  if iszero(value)\n    value = 6\n  end\n  [\"I love you\", \"a little\", \"a lot\", \"passionately\", \"madly\", \"not at all\"][value]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203317,"user_id":null,"body":"how_much_i_love_you(p) = [\"I love you\", \"a little\", \"a lot\", \"passionately\", \"madly\", \"not at all\"][(p-1)%6+1]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203318,"user_id":null,"body":"function how_much_i_love_you(nbpetals)\n  sayings = [\n    \"I love you\",\n    \"a little\",\n    \"a lot\",\n    \"passionately\",\n    \"madly\",\n    \"not at all\"\n  ]\n  pos = mod(nbpetals, length(sayings))\n  sayings[pos == 0 ? length(sayings) : pos]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203319,"user_id":null,"body":"function how_much_i_love_you(p)\n  m = mod(p, 6)\n  m == 0 ? \"not at all\" :\n  m == 5 ? \"madly\" :\n  m == 4 ? \"passionately\" :\n  m == 3 ? \"a lot\" :\n  m == 2 ? \"a little\" :\n  \"I love you\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203320,"user_id":null,"body":"function how_much_i_love_you(nbpetals)\n  if nbpetals %  6 == 1\n    return \"I love you\"\n  elseif nbpetals %  6 == 2\n    return \"a little\"\n  elseif nbpetals %  6 == 3\n    return \"a lot\"\n  elseif nbpetals %  6 == 4\n    return \"passionately\"\n  elseif nbpetals %  6 == 5\n    return \"madly\"\n  elseif nbpetals %  6 == 0\n    return \"not at all\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57f604a21bd4fe771b00009c":[{"id":203321,"user_id":1474,"body":"function meeting(rooms)\n  ind = indexin('O', rooms)[1]\n  isnothing(ind) ? \"None available!\" : ind\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203322,"user_id":null,"body":"meeting(rooms) = 'O' \u2208 rooms ? findfirst(==('O'), rooms) : \"None available!\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203323,"user_id":null,"body":"function meeting(rooms)\n  free = findfirst(isequal('O'), rooms)\n  free != nothing ? free : \"None available!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203324,"user_id":null,"body":"function meeting(rooms)\n  #your code here\n  idx = findfirst(x->x=='O', rooms)\n  if isnothing(idx)\n    return \"None available!\"\n  else\n    return idx\n  end \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203325,"user_id":421,"body":"meeting(rooms) = 'O' in rooms ? findfirst(x->x=='O', rooms) : \"None available!\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203326,"user_id":null,"body":"function meeting(rooms)\n  for idx in eachindex(rooms)\n    if rooms[idx] == 'O'\n      return idx\n    end\n  end\n  return \"None available\"\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203327,"user_id":null,"body":"meeting(rooms) = 'O' \u2208 rooms ? findfirst(==('O'), rooms) : \"None available\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203328,"user_id":null,"body":"function meeting(rooms)\n  id = findfirst(isequal('O'), rooms)\n  if id \u2260 nothing\n    return id\n  else\n    return \"None available\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203329,"user_id":null,"body":"function meeting(rooms)\n  for (pos,elem) in enumerate(rooms)\n    if elem == 'O'\n      return pos\n    end\n  end\n  return \"None available\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203330,"user_id":881,"body":"function meeting(rooms)\n    room = findfirst(==('O'), rooms)\n    isnothing(room) ? \"None available\" : room\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203331,"user_id":759,"body":"function meeting(rooms)\n  a = findfirst(x -> x == 'O', rooms)\n  a == nothing ? \"None available\" : a\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203332,"user_id":null,"body":"function meeting(rooms)\n  n = findfirst(x -> x=='O', rooms)\n  n != nothing ? n : \"None available\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203333,"user_id":527,"body":"function meeting(rooms)\n  something(findfirst(==('O'), rooms), \"None available\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57f609022f4d534f05000024":[{"id":203334,"user_id":881,"body":"stray(ns) = reduce(xor, ns)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203335,"user_id":null,"body":"stray(numbers) = reduce(\u22bb, numbers)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203336,"user_id":1474,"body":"function stray(numbers)\n  tmp = sort(numbers)\n  tmp[1] == tmp[2] ? tmp[end] : tmp[1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203337,"user_id":null,"body":"function stray(numbers)\n  counts = Dict{Int, Int}()\n  \n  # populate the dictionary\n  for n in numbers\n    if haskey(counts, n)\n      counts[n] += 1\n    else\n      counts[n] = 1\n    end\n\n    # design is to short circuit the evaluation of stray, which does not affect\n    # worst case asymptotic analysis (worst case: last element is the stray).\n    if length(counts) == 2 && sum(values(counts)) > 2\n      for (k, v) in pairs(counts)\n        if v == 1\n          return k\n        end\n      end\n    end\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203338,"user_id":null,"body":"function stray(numbers)\n  return reduce(xor, numbers)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203339,"user_id":null,"body":"function stray(numbers)\n  mn = minimum(numbers)\n  mx = maximum(numbers)\n  if count(x -> x == mn, numbers) == 1\n    return mn\n  else\n    return mx\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203340,"user_id":null,"body":"function stray(numbers)\n  len = size(numbers)[1]\n  sort!(numbers)\n  return numbers[1] == numbers[2] ? numbers[len] : numbers[1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203341,"user_id":null,"body":"function stray(n)\n  if n[1] != n[2]\n    if n[2] != n[3]\n      return n[2]\n    else\n      return n[1]\n    end\n  end\n  for i in 3:length(n)\n    if n[i] != n[i-1]\n      return n[i]\n    end\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203342,"user_id":null,"body":"function stray(numbers)\n    count(==(sort!(numbers)[1]), numbers) == 1 ? numbers[1] : numbers[end]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203343,"user_id":null,"body":"function stray(numbers)\n  if numbers[1] == numbers[2]\n    for n in numbers[3:end]\n      if n != numbers[1]\n        return n\n      end\n    end\n  elseif numbers[1] == numbers[3]\n    return numbers[2]\n  else\n    return numbers[1]\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57f625992f4d53c24200070e":[{"id":203344,"user_id":421,"body":"function bingo(ticket, win)\n  sum(Char(y) in x for (x, y) in ticket) >= win ? \"Winner!\" : \"Loser!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203345,"user_id":759,"body":"function bingo(ticket, win)\n  count(x -> any(Int(c) == x[2] for c in x[1]), ticket) >= win ? \"Winner!\" : \"Loser!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203346,"user_id":null,"body":"function bingo(ticket, win)\n  sum(x -> Char(x[2]) in x[1] ? 1 : 0, ticket) >= win ? \"Winner!\" : \"Loser!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203347,"user_id":null,"body":"function bingo(ticket, win)\n  (sum(Char(b) in a ? 1 : 0 for (a,b) in ticket) >= win) ? \"Winner!\" : \"Loser!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203348,"user_id":null,"body":"bingo(ticket, win) =\n  length(filter( a -> any(c -> Int(c[1]) == a[2], split(a[1], \"\")), ticket)) >= win ? \"Winner!\" : \"Loser!\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203349,"user_id":null,"body":"function bingo(ticket, win)\n  return count(sub -> winner(sub[1], sub[2]), ticket) >= win ? \"Winner!\" : \"Loser!\"\nend\n\nfunction winner(str, number)\n  for i in 1:length(str)\n    if Int(str[i]) == number\n      return true\n    end\n  end\n  return false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203350,"user_id":null,"body":"function bingo(ticket, win)\n  sum(map(fld -> contains(fld[1], \"$(Char(fld[2]))\")? 1: 0, ticket))>=win? \"Winner!\": \"Loser!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203351,"user_id":null,"body":"function bingo(ticket, win)\n  ifelse(\n    sum(any(x[2]==Integer(c) for c in x[1]) for x in ticket) >= win,\n    \"Winner!\",\n    \"Loser!\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203352,"user_id":null,"body":"function bingo(ticket, win)\n    sum(occursin(Char(n), str) ? 1 : 0 for (str, n) in ticket) < win ? \"Loser!\" : \"Winner!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203353,"user_id":null,"body":"function bingo(ticket, win)\n  isminiwin(t) = any(c->Int64(c)==t[2], t[1])\n  return sum(isminiwin(t) ? 1 : 0 for t in ticket) >= win ? \"Winner!\" : \"Loser!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57f6ad55cca6e045d2000627":[{"id":203354,"user_id":1474,"body":"function square_or_square_root(arr)\n  [sqrt(i) % 1 == 0 ? floor(sqrt(i)) : i^2 for i in arr]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203355,"user_id":53,"body":"function square_or_square_root(arr)\n  map(n -> isinteger(sqrt(n)) ? sqrt(n) : n*n, arr)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203356,"user_id":null,"body":"function square_or_square_root(arr)\n  res=[]\n  for elem in arr\n    if mod(sqrt(elem),1) == 0.0\n       push!(res,sqrt(elem))\n    else\n       push!(res,elem * elem)\n    end\n  end    \n  res\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203357,"user_id":null,"body":"square_or_square_root(arr) = map(n-> sqrt(n) == isqrt(n) ? isqrt(n) : n^2, arr)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203358,"user_id":50,"body":"function square_or_square_root(arr)\n  [f(n) for n in arr]\nend\nfunction f(n)\n  if is_square(n)\n    return n^0.5\n  else\n    return n^2\n  end\nend\nfunction is_square(n)\n  s = n^0.5\n  s == floor(s)\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203359,"user_id":421,"body":"square_or_square_root(arr) = map(x->isinteger(sqrt(x)) ? sqrt(x) : x ^ 2, arr)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57f759bb664021a30300007d":[{"id":203360,"user_id":null,"body":"function switcheroo(x)\n  table = Dict('a'=>'b', 'b'=>'a', 'c'=>'c')\n  join(table[c] for c in x)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203361,"user_id":null,"body":"function switcheroo(x)\n  join(replace(split(x,\"\"),\"a\"=>\"b\", \"b\"=>\"a\"))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203362,"user_id":null,"body":"switcheroo(x) = replace(replace(replace(x,'a'=>'q'),'b'=>'a'),'q'=>'b')","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203363,"user_id":null,"body":"function switcheroo(x)\n    map(ch-> Dict('a'=> 'b', 'b'=> 'a', 'c'=> 'c')[ch], x)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203364,"user_id":50,"body":"function tr(x)\n  return x=='a' ? 'b' : x == 'b' ? 'a' : x\nend\nfunction switcheroo(x)\n  return map(tr,x)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203365,"user_id":null,"body":"function switcheroo(x)\n    subs = Dict(\"a\" => \"b\", \"b\" => \"a\")\n    replace(x, r\"a|b\" => s -> subs[s])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203366,"user_id":null,"body":"function switcheroo(s)\n  d = Dict('a'=>'b','b'=>'a')\n  join(haskey(d,c) ? d[c] : c for c in s)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203367,"user_id":null,"body":"function switcheroo(x)\n  replace(replace(replace(x, \"a\"=>\"d\"), \"b\"=>\"a\"), \"d\"=>\"b\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203368,"user_id":null,"body":"function switcheroo(x)\n    s = [w for w in x]\n    s[s.== 'a'] .= '~'\n    s[s.== 'b'] .= '`'\n    s[s.== '~'] .= 'b'\n    s[s.== '`'] .= 'a'\n    return join(s)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203369,"user_id":null,"body":"function switcheroo(x)\n  join(char == 'a' ? 'b' : char == 'b' ? 'a' : char for char in x)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57f75cc397d62fc93d000059":[{"id":203370,"user_id":null,"body":"function calc(x::String)::Int\n  count(==('7'),join(map(string \u2218 Int,collect(x))))*6\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203371,"user_id":null,"body":"function calc(s::String)::Int\n   6 * ((digits \u2218 Int).(collect(s)) |> Iterators.flatten |> x -> count(==(7), x))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203372,"user_id":null,"body":"function calc(x::String)::Int\n    parsum(str) = str |> collect .|> (x-> parse(Int, x)) |> sum\n    total = x |> collect .|> Int |> join\n    parsum(total) - parsum(replace(total, '7'=> '1'))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203373,"user_id":527,"body":"function calc(s::String)::Int\n  sum(c -> count(==(7), digits(codepoint(c))), s) * 6\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203374,"user_id":881,"body":"function calc(x::String)::Int\n    6 * count(d == 7 for d in Iterators.flatten(digits(Int(n)) for n in x))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203375,"user_id":1474,"body":"function calc(s::String)::Int\n  ret = join(string(Int(c)) for c in s)\n  count(x -> x == '7', ret) * 6\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203376,"user_id":168,"body":"function calc(x::String)::Int\n  6 * count(==('7'), join(Int(c) for c in x))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203377,"user_id":53,"body":"function calc(str::String)::Int\n    count(m == 7 for m in Iterators.flatten(digits(Int(d)) for d in str)) * 6\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203378,"user_id":null,"body":"function calc(x::String)::Int\n  tot1 = join([codepoint(c) for c in x],\"\")\n  tot2 = replace(tot1, \"7\" => \"1\")\n  sum(parse(Int,c) for c in tot1) - sum(parse(Int,c) for c in tot2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203379,"user_id":209,"body":"function calc(s::String)::Int\n  l = join(map(x->Int(x[1]), split(s, \"\")))\n  f = replace(l, '7' => '1')\n  reduce(+, filter(x->x!=0,map((x,y)->parse(Int32, x[1])-parse(Int32, y[1]), split(l, \"\"), split(f, \"\"))))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57f7796697d62fc93d0001b8":[{"id":203380,"user_id":1474,"body":"function trouble(x, t)\n  if x == []\n    return x\n  end\n  ret = [x[1]]\n  for i in x[2:end]\n    if ret[end] + i != t\n      push!(ret, i)\n    end\n  end\n  ret\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203381,"user_id":null,"body":"function trouble(x, t)\n    indx = findfirst(==(t), sum.(zip(x, x[2:end])))\n    isnothing(indx) ? x : trouble(deleteat!(x, indx+1), t)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203382,"user_id":168,"body":"function trouble(xs, t)\n  r = []\n  for x in xs\n    if length(r) == 0 || last(r) + x != t\n      append!(r, x)\n    end\n  end\n  r\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203383,"user_id":881,"body":"function trouble(x, t)\n    isempty(x) && return empty(x)\n    head, tail = Iterators.peel(x)\n    result = [head]\n    for v in tail\n        if last(result) + v != t\n            push!(result, v)\n        end\n    end\n    result\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57f780909f7e8e3183000078":[{"id":203384,"user_id":null,"body":"module Solution\n  export grow\n  \n  function grow(x)\n    prod(x)\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203385,"user_id":645,"body":"module Solution\n  export grow\n  grow = prod\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203386,"user_id":527,"body":"module Solution\n  export grow\n  \n  function grow(x::Vector{Int}) :: Int\n    reduce(*, x)\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203387,"user_id":null,"body":"module Solution\n  export grow\n  \n  function grow(x)\n    return *(x...)\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203388,"user_id":null,"body":"module Solution\n  export grow\n  \n  grow(x::Vector{Int}) :: Int = reduce(*,x)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203389,"user_id":null,"body":"module Solution\n  export grow\n  \n  function grow(x::Vector{Int}) :: Int\n    prod(x)\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203390,"user_id":null,"body":"module Solution\n  export grow\n  \n  function grow(x::Vector{Int}) :: Int\n    if isempty(x)\n      return 1\n    end\n    return x[1] * grow(x[2:end])\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203391,"user_id":null,"body":"module Solution\n  export grow\n  \n  function grow(x::Vector{Int}) :: Int\n    prod = 1\n    for i in x\n      prod*=i    \n    end\n  return prod\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203392,"user_id":null,"body":"module Solution\n  export grow\n  \n  function grow(x::Vector{Int}) :: Int\n    # your code here\n    mul = 1\n    for i in x\n        mul *= i\n    end\n    return mul\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203393,"user_id":null,"body":"module Solution\n  export grow\n  \n  function grow(x::Vector{Int}) :: Int\n    # your code here\n    amt = 1\n    for i in x\n        amt *= i\n    end\n    return amt\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57f781872e3d8ca2a000007e":[{"id":203394,"user_id":null,"body":"module Solution\n    export maps\n    maps(x) = 2x\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203395,"user_id":null,"body":"module Solution\nexport maps\n  function maps(x)\n    map((e) -> e * 2, x)\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203396,"user_id":527,"body":"module Solution\nexport maps\n\nfunction maps(x)\n  x * 2\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203397,"user_id":null,"body":"module Solution\nexport maps\n\nfunction maps(x)\n  x.<<1\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203398,"user_id":null,"body":"module Solution\nexport maps\n\nfunction maps(x)\n  return 2x\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203399,"user_id":421,"body":"module Solution\n maps(x) = [a * 2 for a in x]\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203400,"user_id":572,"body":"module Solution\nexport maps\n\nfunction maps(x)\n  map(e->2*e, x)\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203401,"user_id":null,"body":"module Solution\nexport maps\n\nfunction maps(x)\n  # double each element of x\n  return(x * 2)\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203402,"user_id":null,"body":"module Solution\nexport maps\n\nfunction maps(x)\n  map(n -> n*2, x)\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203403,"user_id":null,"body":"module Solution\nexport maps\n\nmaps(x) = map(y->2y,x)\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"57fe50d000d05166720000b1":[{"id":203404,"user_id":421,"body":"function sabb(s::String, val::Integer, happiness::Integer)::String\n  total = sum(lowercase(x) in \"abcilst\" for x in s) + val + happiness\n  total > 22 ? \"Sabbatical! Boom!\" : \"Back to your desk, boy.\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203405,"user_id":null,"body":"function sabb(s::String, val::Integer, happiness::Integer)::String\n    sum(map(x-> count(==(x), lowercase(s)), collect(\"sabticl\"))) + val + happiness \u2264 22 ? \"Back to your desk, boy.\" : \"Sabbatical! Boom!\" \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203406,"user_id":null,"body":"function sabb(s::String, val::Integer, happiness::Integer)::String\n  sum([1 for c in s if c in \"sabticl\"]) + val + happiness > 22 ? \"Sabbatical! Boom!\" : \"Back to your desk, boy.\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203407,"user_id":null,"body":"function sabb(s::String, val::Integer, happiness::Integer)::String\n  letterssabbatical = string.(unique(\"sabbatical\"))\n  insabbatical = split(s, \"\") .|> x -> x in letterssabbatical\n  count(insabbatical) + val + happiness > 22 ? \"Sabbatical! Boom!\" : \"Back to your desk, boy.\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203408,"user_id":null,"body":"function sabb(s::String, val::Integer, happiness::Integer)::String\n  str = unique(split(\"sabbatical\", \"\"));\n  length(filter(x -> x in str, split(s, \"\"))) + val + happiness > 22 ? \"Sabbatical! Boom!\" : \"Back to your desk, boy.\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203409,"user_id":2525,"body":"function sabb(s::String, val::Integer, happiness::Integer)::String\n    if val + happiness + sum( 1 for c in s if c in \"sabbatical\") > 22\n        \"Sabbatical! Boom!\"\n    else\n        \"Back to your desk, boy.\"\n    end    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203410,"user_id":null,"body":"function sabb(s::String, val::Integer, happiness::Integer)::String\n  (sum(lowercase(i) in \"sabbatical\" ? 1 : 0 for i in s) + val + happiness) > 22 ? \"Sabbatical! Boom!\" : \"Back to your desk, boy.\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203411,"user_id":1474,"body":"function sabb(s::String, val::Integer, happiness::Integer)::String\n  length(filter(c->(c \u2208 \"sabbatical\"), lowercase(s))) + val + happiness > 22 ? \"Sabbatical! Boom!\" : \"Back to your desk, boy.\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203412,"user_id":null,"body":"function sabb(s::String, val::Integer, happiness::Integer)::String\n  count(x->occursin(x, \"sabticl\"), s) + val + happiness > 22 ? \"Sabbatical! Boom!\" : \"Back to your desk, boy.\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203413,"user_id":null,"body":"function sabb(x::String, val::Integer, happ::Integer)::String\n  val + happ + count(char -> char in \"sabbatical\", x) > 22 ? \"Sabbatical! Boom!\" : \"Back to your desk, boy.\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5803c0c6ab6c20a06f000026":[{"id":203414,"user_id":881,"body":"function swapvowelcase(str)\n    join(replace(collect(str), \n      'a'=>'A', 'e'=>'E', 'i'=>'I', 'o'=>'O', 'u'=>'U',\n      'A'=>'a', 'E'=>'e', 'I'=>'i', 'O'=>'o', 'U'=>'u'\n    ))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203415,"user_id":759,"body":"swapvowelcase(str) = join((a = findfirst(isequal(c), \"aeiouAEIOU\")) != nothing ? \"AEIOUaeiou\"[a] : c for c in str)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203416,"user_id":null,"body":"function swapvowelcase(str)\n  join(map(c -> get(Dict(zip(\"aeiouAEIOU\", \"AEIOUaeiou\")), c, c), str))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203417,"user_id":null,"body":"swapvowelcase(str) = map(ch-> get(Dict(zip(\"aeiouAEIOU\",\"AEIOUaeiou\")), ch, ch), str)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203418,"user_id":null,"body":"function swapvowelcase(str)\n    newstr = []\n    for x in split(str, \"\")\n        if occursin(x, \"aeouiAEOUI\")\n            if occursin(x, \"aeoui\")\n                push!(newstr, uppercase(x))\n            else\n                push!(newstr, lowercase(x))\n            end\n        else\n            push!(newstr, x)\n        end\n    end\n    return join(newstr)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203419,"user_id":null,"body":"function swapvowelcase(str)\n    vowels = \"aeiou\"\n    res=\"\"\n    for q in str\n      if lowercase(q) in vowels\n        lowercase(q) == q ?  res *= uppercase(q) : res *= lowercase(q)\n      else\n        res *= q\n      end\n    end\n    res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203420,"user_id":53,"body":"function swapcase(s)\n  s == lowercase(s) ? uppercase(s) : lowercase(s)\nend\n\nfunction swapvowelcase(str)\n  vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  xs = collect(str)\n  ys = map(c -> (c in vowels) ? swapcase(c) : c, xs)\n  String(ys)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203421,"user_id":50,"body":"function swapvowelcase(str)\n  d=Dict('a'=> 'A', 'o'=> 'O', 'U'=> 'u', 'O'=> 'o', 'e'=> 'E', 'E'=> 'e', 'I'=> 'i', 'u'=> 'U', 'i'=> 'I', 'A'=> 'a')\n  o=\"\"\n  for c in str\n    o=string(o, haskey(d,c) ? d[c] : c)\n  end\n  o\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5805ed25c2799821cb000005":[{"id":203422,"user_id":1474,"body":"function cake(candles, debris)\n  if candles == 0\n    return \"That was close!\"\n  end\n  drops = sum(i % 2 == 0 ? Int(c) - 96 : Int(c) for (i, c) in enumerate(debris))\n  drops \/ candles > 0.7 ? \"Fire!\" : \"That was close!\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203423,"user_id":50,"body":"function cake(x, y)\n  if x == 0\n    return \"That was close!\"\n  end\n  n=0 \n  for (i, c) in enumerate(y)\n    if i&1==1\n      n += UInt32(c)\n    else\n      n += UInt32(c) - 96\n    end\n  end\n  if n <= 0.7 * x\n    return \"That was close!\"\n  end\n  return \"Fire!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203424,"user_id":null,"body":"function cake(candles, debris)\n    candles == 0 && return \"That was close!\"\n    odds = reduce(+, [findfirst(ch, join('a':'z')) for ch in debris[2:2:end]], init=0)\n    evens = sum(Int.(collect(debris[1:2:end])))\n    (odds + evens)\/candles < 0.7 ? \"That was close!\" : \"Fire!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203425,"user_id":null,"body":"function cake(candles, debris)\n  sum(Int.(collect(debris[1:2:end]))) + sum(Int.(collect(debris[2:2:end])).-96) <= 0.7 * candles || candles == 0 ? \"That was close!\" : \"Fire!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203426,"user_id":null,"body":"function cake(candles, debris)\n  total = sum([Int(only(l)) for l in split(debris, \"\")]) - (length(debris) \u00f7 2) * (Int('a') - 1)\n  total*candles > candles^2*0.7 ? \"Fire!\" : \"That was close!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203427,"user_id":881,"body":"function cake(candles, debris)\n    s = sum(Int(c) - (isodd(i) ? 0 : 96) for (i, c) in enumerate(debris)) \n    !iszero(candles) && s \/ candles > 0.7 ? \"Fire!\" : \"That was close!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203428,"user_id":421,"body":"cake(candles, debris) = sum(iseven(i) ? Int(x) - 96 : Int(x) for (i, x) in enumerate(debris)) > candles * 0.7 && candles != 0 ? \"Fire!\" : \"That was close!\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5805f0663f1f9c49be00011f":[{"id":203429,"user_id":1474,"body":"function present(x, y)\n  if x == \"goodpresent\"\n    join((Char(Int(c) + y)) for c in x)\n  elseif x == \"crap\" || x == \"\"\n    join(sort([c for c in x]))\n  elseif x == \"bang\"\n    string(sum(Int(c) - y for c in x))\n  elseif x == \"badpresent\"\n    \"Take this back!\"\n  elseif x == \"dog\"\n    \"pass out from excitement $(y) times\"\n  else\n    \"empty\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203430,"user_id":null,"body":"function present(x, y)\n  if x == \"goodpresent\"\n    return String(Char.(Int.(collect(x)) .+ y))\n  elseif x in [\"crap\", \"empty\"]\n    return String(sort(collect(x)))\n  elseif x == \"bang\"\n    return string(sum(Int.(collect(x)) .- y))\n  elseif x == \"badpresent\"\n    return \"Take this back!\"\n  else\n    return string(\"pass out from excitement \", y, \" times\")\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203431,"user_id":null,"body":"function present(x, y)\n    x == \"goodpresent\" ? join(collect(x) .+ y) : x == \"badpresent\" ? \"Take this back!\" : x == \"bang\" ? \"$(sum(Int.(collect(x)) .- y))\" : x == \"dog\" ? \"pass out from excitement $y times\" : join(sort(collect(x))) \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203432,"user_id":881,"body":"function present(present::String, passes::Integer)\n    if present == \"goodpresent\"\n        join(Char(Int(c) + passes) for c in present)\n    elseif present == \"badpresent\"\n        \"Take this back!\"\n    elseif present == \"crap\" || present == \"empty\"\n        join(sort(split(present, \"\")))\n    elseif present == \"bang\"\n        string(sum(Int(c) - passes for c in present))\n    elseif present == \"dog\"\n        \"pass out from excitement $(passes) times\"\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203433,"user_id":null,"body":"function present(x, y)\n  if x == \"badpresent\"\n    \"Take this back!\"\n  elseif x == \"goodpresent\"\n    join(map(i -> Char(i+y), x), \"\")\n  elseif x in [\"crap\",\"empty\"]\n    join(sort(collect(x)))\n  elseif x == \"bang\"\n    \"$(sum(map(i -> Int(i)-y, collect(x))))\"\n  elseif x == \"dog\"\n    \"pass out from excitement $(y) times\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203434,"user_id":421,"body":"present(x, y) = x == \"badpresent\" ? \"Take this back!\" : x == \"dog\" ? \"pass out from excitement $y times\" : x in [\"crap\",\"empty\"] ? join(sort([c for c in x])) : x == \"bang\" ? \"$(408 - 4y)\" : join(Char(Int(c) + y) for c in x)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"580878d5d27b84b64c000b51":[{"id":203435,"user_id":209,"body":"sum_triangular_numbers(n)=n<0 ? 0 : n * (n + 1) * (n + 2) \/ 6","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203436,"user_id":1474,"body":"function sum_triangular_numbers(n)\n  n < 0 ? 0 : n * (n+1) * (n+2) \/ 6\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203437,"user_id":168,"body":"sum_triangular_numbers(n) = max(0, n) * (n + 1) * (n + 2) \u00f7 6","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203438,"user_id":null,"body":"sum_triangular_numbers(n) = max(n, 0) * (n + 1) * (n + 2) \u00f7 6","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203439,"user_id":null,"body":"function sum_triangular_numbers(n)\n  if n > 0\n    (n*(n+1)*(n+2))\/6\n  else\n    0\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203440,"user_id":50,"body":"function sum_triangular_numbers(n)\n  return n<1 ? 0 : n*(n+1)*(n+2)\/6\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203441,"user_id":null,"body":"function sum_triangular_numbers(n)\n   n > 0 ? sum(sum(1:q) for q in 1:n) : 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203442,"user_id":null,"body":"function sum_triangular_numbers(n)\n  if n < 1\n    return 0\n  else\n    counter = 0\n    current = 0\n    for x in 1:n\n      current += x\n      counter += current\n    end\n    return counter\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203443,"user_id":null,"body":"function sum_triangular_numbers(n)\n    x=0\n    n>0 ? sum([x+=i for i \u2208 1:n]) : return 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203444,"user_id":null,"body":"function sum_triangular_numbers(n)\n  sum = 0\n  number = 0\n  for i=1:n\n    number += i\n    sum += number\n  end\n  return sum\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5808dcb8f0ed42ae34000031":[{"id":203445,"user_id":53,"body":"function switch_it_up(n)\n  [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][n+1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203446,"user_id":null,"body":"function switch_it_up(number)\n  if number ==  0\n    return \"Zero\"\n    else\n     arr = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\"Nine\"]\n     return arr[number]\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203447,"user_id":null,"body":"function switch_it_up(number)\n  numbers = Dict(0=>\"Zero\", 1=>\"One\",2=>\"Two\", 3=>\"Three\", 4=>\"Four\", \n                5=>\"Five\", 6=>\"Six\", 7=>\"Seven\",8=>\"Eight\", 9=>\"Nine\")\n  numbers[number]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203448,"user_id":null,"body":"function switch_it_up(number)\n  [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][number + 1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203449,"user_id":null,"body":"all_nums = split(\"Zero One Two Three Four Five Six Seven Eight Nine\")\n\nfunction switch_it_up(number)\n  all_nums[number+1]\nend\n  ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203450,"user_id":null,"body":"function switch_it_up(number)\n  numbers = Dict(0 => \"Zero\", 1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\", \n    5 => \"Five\", 6 => \"Six\", 7=> \"Seven\", 8 => \"Eight\", 9 => \"Nine\")\n  return numbers[number]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203451,"user_id":null,"body":"function switch_it_up(number)\n  if number == 0\n    \"Zero\"\n  elseif number == 1\n    \"One\"\n  elseif number == 2\n    \"Two\"\n  elseif number == 3\n    \"Three\"\n  elseif number == 4\n    \"Four\"\n  elseif number == 5\n    \"Five\"\n  elseif number == 6\n    \"Six\"\n  elseif number == 7\n    \"Seven\"\n  elseif number == 8\n    \"Eight\"\n  elseif number == 9\n    \"Nine\"\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203452,"user_id":50,"body":"function switch_it_up(n)\n  return String[\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][n+1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203453,"user_id":421,"body":"switch_it_up(number) = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][number + 1]","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"580a094553bd9ec5d800007d":[{"id":203454,"user_id":null,"body":"apple(x::Integer) = x^2 > 1000 ? \"It's hotter than the sun!!\" : \"Help yourself to a honeycomb Yorkie for the glovebox.\"\napple(x::String) = parse(Int64, x)^2 > 1000 ? \"It's hotter than the sun!!\" : \"Help yourself to a honeycomb Yorkie for the glovebox.\"\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203455,"user_id":null,"body":"apple(x) = parse(Float64, \"$x\")^2 > 1000 ? \"It's hotter than the sun!!\" : \"Help yourself to a honeycomb Yorkie for the glovebox.\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203456,"user_id":null,"body":"function apple(x)\n  if (x isa String)\n    (parse(Int32, x) ^ 2) > 1000 ? \"It's hotter than the sun!!\" : \"Help yourself to a honeycomb Yorkie for the glovebox.\"\n  else\n    x ^ 2 > 1000 ? \"It's hotter than the sun!!\" : \"Help yourself to a honeycomb Yorkie for the glovebox.\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203457,"user_id":1474,"body":"function apple(x)\n  x = typeof(x) == Int64 ? x : parse(Int64, x)\n  x ^ 2 > 1000 ? \"It's hotter than the sun!!\" : \"Help yourself to a honeycomb Yorkie for the glovebox.\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203458,"user_id":null,"body":"function apple(x::Int)\n  x^2 > 1000 ? \"It's hotter than the sun!!\" : \"Help yourself to a honeycomb Yorkie for the glovebox.\"\nend\n\nfunction apple(x::String)\n  parse(Int, x)^2 > 1000 ? \"It's hotter than the sun!!\" : \"Help yourself to a honeycomb Yorkie for the glovebox.\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203459,"user_id":null,"body":"apple(x::Integer) = x^2 > 1000 ? \"It's hotter than the sun!!\" : \"Help yourself to a honeycomb Yorkie for the glovebox.\"\n\napple(x::String) = parse(Int, x)^2 > 1000 ? \"It's hotter than the sun!!\" : \"Help yourself to a honeycomb Yorkie for the glovebox.\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203460,"user_id":50,"body":"function apple(x)\n  if parse(Float64,string(x))^2<1000\n    return \"Help yourself to a honeycomb Yorkie for the glovebox.\"\n  else\n    return \"It's hotter than the sun!!\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203461,"user_id":null,"body":"function apple(x)\n    if parse(Int, string(x))^2 > 1000\n        return \"It's hotter than the sun!!\"\n    else\n        return \"Help yourself to a honeycomb Yorkie for the glovebox.\"\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203462,"user_id":null,"body":"function apple(x)\n  if parse(Int64, \"$x\")^2 > 1000\n    return \"It's hotter than the sun!!\"\n  else\n    return \"Help yourself to a honeycomb Yorkie for the glovebox.\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203463,"user_id":null,"body":"function apple(x)\n  if typeof(x) == String\n    x = parse(Int64, x)\n  end\n  x^2 > 1000 ? \"It's hotter than the sun!!\" : \"Help yourself to a honeycomb Yorkie for the glovebox.\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"580a41b6d6df740d6100030c":[{"id":203464,"user_id":null,"body":"function alan(arr)\n  all(in.([\"Rejection\", \"Disappointment\", \"Backstabbing Central\", \"Shattered Dreams Parkway\"], (arr,))) ? \"Smell my cheese you mother!\" : \"No, seriously, run. You will miss it.\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203465,"user_id":1474,"body":"stops = [\"Rejection\", \"Disappointment\", \"Backstabbing Central\", \"Shattered Dreams Parkway\"]\n\nfunction alan(arr)\n  all(stop in arr for stop in stops) ? \"Smell my cheese you mother!\" : \"No, seriously, run. You will miss it.\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203466,"user_id":null,"body":"function alan(arr)\n    stations = [\"Rejection\", \"Disappointment\", \"Backstabbing Central\", \"Shattered Dreams Parkway\"]\n    all(x-> x \u2208 arr, stations) ? \"Smell my cheese you mother!\" : \"No, seriously, run. You will miss it.\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203467,"user_id":50,"body":"function alan(arr)\n  length([s for s in Set(arr) if s in [\"Rejection\", \"Disappointment\", \"Backstabbing Central\", \"Shattered Dreams Parkway\"]]) != 4 ? \"No, seriously, run. You will miss it.\" : \"Smell my cheese you mother!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203468,"user_id":53,"body":"function alan(arr)\n  for x \u2208 [\"Rejection\", \"Disappointment\", \"Backstabbing Central\", \"Shattered Dreams Parkway\"]\n    if ! (x \u2208 arr)\n      return \"No, seriously, run. You will miss it.\"\n    end\n  end\n  \"Smell my cheese you mother!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203469,"user_id":null,"body":"function alan(arr)\n  if all(stop -> stop \u2208 arr, [\"Rejection\", \"Disappointment\", \"Backstabbing Central\", \"Shattered Dreams Parkway\"])\n    \"Smell my cheese you mother!\"\n  else\n    \"No, seriously, run. You will miss it.\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203470,"user_id":881,"body":"function alan(arr)\n    if all(in(arr), [\"Rejection\", \"Disappointment\", \"Backstabbing Central\", \"Shattered Dreams Parkway\"])\n        \"Smell my cheese you mother!\"\n    else\n        \"No, seriously, run. You will miss it.\"\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203471,"user_id":421,"body":"alan(arr) = all(x-> x in arr, [\"Rejection\", \"Disappointment\", \"Backstabbing Central\", \"Shattered Dreams Parkway\"]) ? \"Smell my cheese you mother!\" : \"No, seriously, run. You will miss it.\" ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5813d19765d81c592200001a":[{"id":203472,"user_id":null,"body":"function dont_give_me_five(start_,end_)\n  count(q -> !(5 in digits(abs(q))), start_:end_)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203473,"user_id":421,"body":"function dont_give_me_five(start_,end_)\n  sum(!('5' in string(x)) for x in start_:end_)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203474,"user_id":null,"body":"dont_give_me_five(start_,end_) = length(filter(x -> 5 \u2209 abs.(digits(x)), start_:end_))\n  \n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203475,"user_id":1474,"body":"function dont_give_me_five(start_,end_)\n  length([i for i in start_:end_ if !('5' in string(i))])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203476,"user_id":null,"body":"function dont_give_me_five(start_, end_)\n  count(x -> '5' \u2209 string(x), start_:end_)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203477,"user_id":28,"body":"function dont_give_me_five(start_,end_)\n  count = 0\n  for i = start_:end_\n    count += issubset([5],digits(abs(i))) ? 0 : 1\n  end\n  return count\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203478,"user_id":527,"body":"function dont_give_me_five(b, e)\n  count(i -> 5 \u2209 digits(abs(i)), b : e)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203479,"user_id":null,"body":"function dont_give_me_five(start_,end_)\n  count(num -> !(5 in num |> abs |> digits), start_:end_)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203480,"user_id":null,"body":"function dont_give_me_five(start_,end_)\n  filter(num -> !(5 in num |> abs |> digits), start_:end_) |> length\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203481,"user_id":null,"body":"dont_give_me_five(beg, fin) = sum('5' .\u2209 string.([beg:fin...]))","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"58184387d14fc32f2b0012b2":[{"id":203482,"user_id":492,"body":"module Approx\n    export f\n    function f(x)\n        x \/ (1 + sqrt(1 + x)) \n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203483,"user_id":527,"body":"module Approx\n    export f\n    function f(x)\n        x \/ (\u221a(1 + x) + 1)\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203484,"user_id":168,"body":"module Approx\n    export f\n    function f(x)\n        x \/ (1 + \u221a(1 + x))\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203485,"user_id":null,"body":"module Approx\n    export f\n    function f(x)\n        x \/ 2 - (1\/8) * x^2 + (1\/16) * x^3\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203486,"user_id":50,"body":"module Approx\n    export f\n    function f(x)\n        x\/(1+(1+x)^.5) \n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203487,"user_id":null,"body":"module Approx\n    export f\n    function f(x)\n        return x\/(sqrt(1+x) +1)\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203488,"user_id":53,"body":"module Approx\n    export f\n    function f(x)\n         x \/ 2 - x * x \/ 8 + x * x * x \/ 16 - 5 * x * x * x * x \/ 128\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203489,"user_id":null,"body":"module Approx\n    export f\n    f = x -> sqrt(1 + BigFloat(x)) - 1\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203490,"user_id":null,"body":"module Approx\n    export f\n    function f(x)\n        return big(sqrt(big(1)+big(x)) - big(1))\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203491,"user_id":2525,"body":"module Approx\n    export f\n    function f(x)\n        x\/2 - x^2\/8 + 3*x^3\/48\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5818d00a559ff57a2f000082":[{"id":203492,"user_id":null,"body":"function pell(n::Integer)\n    P = BigInt.([0, 1])\n    for i in 2:n  P[1], P[2] = P[2], 2 * P[2] + P[1] end\n    P[2]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203493,"user_id":null,"body":"function pell(n::Integer)\n    \n    if n == 0\n        return 0\n      elseif n == 1\n        return 1\n      else\n        counter = 2\n        tmp = 0\n        p2 = 0\n        p1 = 1\n\n        while counter <= n\n            tmp = p2\n            p2 = p1\n            p1 = BigInt(p2 << 1 + tmp)\n            counter += 1\n        end\n    end\n\n    return p1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203494,"user_id":null,"body":"function pell(n)\n  count = 3\n  pell = BigInt[0, 1]\n  while count <= n + 1\n    append!(pell, BigInt(2*pell[count - 1] + pell[count - 2]))\n    count += 1\n  end\n  pell[n + 1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203495,"user_id":53,"body":"function pell(n::Integer)\n  a,b=big(0),big(1)\n  while n>0\n    a,b=b,2*b+a\n    n-=1\n  end\n  a\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203496,"user_id":50,"body":"function pell(n::Integer)\n    a = big\"0\"\n    b = big\"1\"\n    n=n-1\n    while n != 0\n      n=n-1\n      c=b\n      b=b+b+a\n      a=c\n    end\n    b\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203497,"user_id":881,"body":"function pell(n::Integer)\n    a = big\"0\"\n    b = big\"1\"\n    for _ in 1:n\n        a, b = b, b + b + a\n    end\n    a\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"581ee0db1bbdd04e010002fd":[{"id":203498,"user_id":492,"body":"module FloatII\n    export interp\n\n    function interp(f, l, u, n)\n        [floor(f(l + i * (u - l) \/ n) * 100.0) \/ 100.0 for i in 0:n-1]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203499,"user_id":null,"body":"module FloatII\n    export interp\n\n    function interp(f, l, u, n)\n        [floor(f(l+i*(u-l)\/n), digits=2) for i in 0:n-1]        \n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203500,"user_id":null,"body":"module FloatII\n    export interp\n\n    function interp(f, l, u, n)\n        outp = []\n        for i=0:n-1\n          push!(outp, floor(f(l + i * (u-l)\/n) * 100) \/ 100)\n        end\n        outp\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203501,"user_id":null,"body":"module FloatII\nexport interp\n\nfunction interp(f, l, u, n)\n  [round(f(x), RoundDown, digits = 2) for x in range(l, step = (u - l) \/ n, length = n)]\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203502,"user_id":null,"body":"module FloatII\n    export interp\n\n    function interp(f, l, u, n)\n        # no numerical error caused by adding a lot of small numbers.\n        x(idx) = (l*(n-idx)+u*idx)\/n\n        map( idx -> floor(f(x(idx)),2), 0:(n-1) )\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203503,"user_id":2525,"body":"module FloatII\n    export interp\n\n    function interp(f, l, u, n)\n        [floor(100*f(x))\/100 for x in l:(u-l)\/n:u-1.0e-10]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203504,"user_id":null,"body":"module FloatII\n    export interp\n\n    function interp(f, l, u, n)\n        d = (u - l) \/ n\n        [floor(100 * f(i)) \/ 100 for i in l:d:u][1:n]\n    end\n    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203505,"user_id":null,"body":"module FloatII\n    export interp\n\n    function interp(f, l, u, n)\n        # your code\n        d = (u - l) \/ n\n        return [floor(100.0 * f(l + i*d)) \/ 100.0 for i = 0:n-1]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203506,"user_id":492,"body":"module FloatII\n    export interp\n\n    function interp(f, l, u, n)\n        [floor(f(l + i * (u - l) \/ n) * 100.0) \/ 100.0 for i in 0:n-1]\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"582aafca2d44a4a4560000e7":[{"id":203507,"user_id":null,"body":"module keep_order\n  export keeporder\n  function keeporder(ary, val)\n    searchsortedfirst(sort!(ary),val)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203508,"user_id":null,"body":"module keep_order\n  export keeporder\n  function keeporder(ary, val)\n    for (i,v) in enumerate(ary)\n      val<=v && return i\n    end\n    length(ary)+1\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203509,"user_id":null,"body":"module keep_order\n  export keeporder\n  function keeporder(ary, val)\n    #return length(find(ary.<val))+1\n    for a = 1:length(ary)\n      if ary[a] \u2265 val\n        return a\n      end\n    end\n    return length(ary)+1\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203510,"user_id":null,"body":"module keep_order\n  export keeporder\n  function keeporder(ary, val)\n    \n    if length(ary) == 0\n        return 1\n    end\n    \n    for (i,v) in enumerate(ary)\n      \n      if val <= v\n        return i\n      elseif i == length(ary)\n        return i+1\n      end\n    \n    end\n  \n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203511,"user_id":480,"body":"module keep_order\n  export keeporder\n  function keeporder(ary, val)\n    r=findfirst(x->x>=val,ary)\n    r==nothing ? 1+length(ary) : r\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203512,"user_id":null,"body":"module keep_order\n  export keeporder\n  function keeporder(ary, val)\n      isempty(ary) && return 1\n      sort!(ary)[end] < val ? length(ary) + 1 : findfirst(val .\u2264 ary)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203513,"user_id":null,"body":"module keep_order\n  export keeporder\n  function keeporder(ary, val)\n    idx = 1\n    while idx <= length(ary) && ary[idx] < val\n        idx += 1\n    end\n    idx\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203514,"user_id":1474,"body":"module keep_order\n  export keeporder\n\n  function keeporder(ary, val)\n    for (i, n) in enumerate(ary)\n      if n >= val\n        return i\n      end\n    end\n    length(ary) + 1\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203515,"user_id":null,"body":"module keep_order\n  export keeporder\n  function keeporder(ary, val)\n    findfirst(x->x>=val, ary) |> res -> res == nothing ? length(ary)+1 : res\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203516,"user_id":null,"body":"module keep_order\n  export keeporder\n  function keeporder(ary, val)\n    if length(ary) == 0 || val <= ary[1] return 1 end #boundary cases, short-circuit to first\n    \n    i = 1\n    while i < length(ary)\n      if val > ary[i] && val <= ary[i+1]\n        return i+1\n      else\n        i+=1\n      end\n    end\n    if i == length(ary)\n      return i+1\n    end\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"582cb0224e56e068d800003c":[{"id":203517,"user_id":null,"body":"litres(time) = div(time, 2)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203518,"user_id":527,"body":"litres(time) = time \u00f7 2","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203519,"user_id":76,"body":"function litres(time)\n  floor(time * 0.5)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203520,"user_id":572,"body":"function litres(time)\n  (0.5*(time\u00f71))\u00f71\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203521,"user_id":null,"body":"function litres(time)\n  # your code here\n  \n  time \u00f7 2\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203522,"user_id":null,"body":"function litres(time)\n#= trunc() \"returns the nearest integral value of the same type as x\nwhose absolute value is less than or equal to the absolute value of x\" =#\n  return trunc(time * 0.5)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203523,"user_id":null,"body":"function litres(time)\n  return trunc(time * 0.5)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203524,"user_id":null,"body":"function litres(time)\n  trunc(time \/ 2)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203525,"user_id":null,"body":"function litres(time)\n  return trunc(Int, time*0.5)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203526,"user_id":null,"body":"function litres(time::Number)\n  # input time times 0.5 litres per hour\n  # rounding down to the next integer\n  # returned as and integer\n  return floor(Int, time * 0.5)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5834fec22fb0ba7d080000e8":[{"id":203527,"user_id":50,"body":"function six_toast(n)\n  abs(n - 6)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203528,"user_id":421,"body":" six_toast(n) = abs(n - 6)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203529,"user_id":null,"body":"function six_toast(n)\n  abs(6 - n)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203530,"user_id":null,"body":"function six_toast(n)\n  #your code here\n  return abs(n-6)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"58356a94f8358058f30004b5":[{"id":203531,"user_id":null,"body":"fly_by(lamps, drone) = 'o'^(min(length(lamps),length(drone))) * 'x'^(max(length(lamps)-length(drone),0))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203532,"user_id":881,"body":"fly_by(lamps, drone) = replace(lamps, 'x'=>'o', count = length(drone))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203533,"user_id":1474,"body":"function fly_by(lamps, drone)\n  l1, l2 = length(lamps), length(drone)\n  if l1 < l2\n    \"o\" ^ l1\n  else\n    (\"o\" ^ l2) * (\"x\" ^ (l1-l2))\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203534,"user_id":2525,"body":"function fly_by(lamps, drone)\n    'o'^min(length(drone), length(lamps)) * 'x'^max(length(lamps)-length(drone), 0)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203535,"user_id":null,"body":"function fly_by(lamps, drone)\n  if length(drone) \u2265 length(lamps)\n    'o'^length(lamps)\n  else\n    'o'^length(drone) * lamps[length(drone) + 1:end]\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203536,"user_id":null,"body":"function fly_by(lamps, drone)\n  join(i <= findfirst(c -> c=='T', drone) ? 'o' : 'x' for (i,x) in enumerate(lamps))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203537,"user_id":527,"body":"function fly_by(lamps, drone)\n  rpad('o' ^ minimum(length, (drone, lamps)), length(lamps), 'x')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203538,"user_id":421,"body":"fly_by(lamps, drone) = \"$('o' ^ min(length(drone), length(lamps)))$('x' ^ max(0, length(lamps) - length(drone)))\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"583710ccaa6717322c000105":[{"id":203539,"user_id":1365,"body":"module Solution\n  export simple_multiplication\n  function simple_multiplication(a)\n    return a * (a & 1 == 0 ? 8 : 9)\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203540,"user_id":null,"body":"module Solution\n  export simple_multiplication\n  function simple_multiplication(n)\n    n * (iseven(n) ? 8 : 9)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203541,"user_id":572,"body":"module Solution\n  export simple_multiplication\n  function simple_multiplication(number)\n    number%2==0 ? 8number : 9number\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203542,"user_id":null,"body":"module Solution\n  export simple_multiplication\n  simple_multiplication(number) = number * ((iseven(number)) ? 8 : 9)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203543,"user_id":2723,"body":"module Solution\n  export simple_multiplication\n  simple_multiplication(number) = iseven(number) ? 8number : 9number\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203544,"user_id":null,"body":"module Solution\n  export simple_multiplication\n  function simple_multiplication(number)\n    return number%2 == 0 ? number*8 : number*9\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203545,"user_id":17,"body":"module Solution\n  export simple_multiplication\n  simple_multiplication(n) = if (mod(n, 2) == 0) n * 8 else n * 9 end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203546,"user_id":null,"body":"module Solution\n  export simple_multiplication\n  function simple_multiplication(number)\n    number*(8+(number&1))\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203547,"user_id":null,"body":"module Solution\n  export simple_multiplication\n  function simple_multiplication(number)\n    number * (number % 2 == 0 ? 8 : 9)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203548,"user_id":713,"body":"module Solution\n  export simple_multiplication\n  function simple_multiplication(n)\n    n * (8 + n%2)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5839edaa6754d6fec10000a2":[{"id":203549,"user_id":527,"body":"function find_missing_letter(cs::Array{Char})\n  first(c1 + 1 for (c1, c2) in zip(cs, cs[2:end]) if c1 + 1 != c2)\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203550,"user_id":null,"body":"function find_missing_letter(arr::Array{Char})\n  for char in arr[begin]:arr[end]\n    if !(char in arr)\n      return char\n    end\n  end\n  \nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203551,"user_id":null,"body":"function find_missing_letter(arr::Array{Char})\n  arr = sort(arr)\n  low = Int(arr[1])\n  high = Int(arr[end])\n  range = low:high\n  return Char(filter(e -> e \u2209 Int.(arr), range)[1])\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203552,"user_id":null,"body":"function find_missing_letter(arr::Array{Char})\n  # your code here\n  s = Set(arr)\n  s_ = Set(arr[1]:arr[end])\n  setdiff(s_, s) |> x -> collect(x)[1]\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203553,"user_id":null,"body":"function find_missing_letter(arr::Array{Char})\n  for c in arr[1]:arr[end]\n    if !(c in arr)\n      return c\n      end\n    end\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203554,"user_id":null,"body":"find_missing_letter(arr) = arr[findfirst(==(2), diff(arr))] + 1","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203555,"user_id":null,"body":"function find_missing_letter(arr::Array{Char})\n  filter(x -> x \u2209 arr, arr[1] .+ (1:length(arr)))[1]\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203556,"user_id":null,"body":"function find_missing_letter(arr::Array{Char})\n  for (c1, c2) in zip(arr, first(arr):last(arr))\n    if c1 != c2\n        return c2\n    end\n  end\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203557,"user_id":null,"body":"function find_missing_letter(arr::Array{Char})\n  arr[findfirst(!in(arr), minimum(arr):maximum(arr))] - 1\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203558,"user_id":50,"body":"function find_missing_letter(arr::Array{Char})\n  i = 1\n  while true\n    if arr[i] != arr[i + 1] - 1\n      return arr[i] + 1\n    end\n    i+=1\n  end\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"58409435258e102ae900030f":[{"id":203559,"user_id":null,"body":"function parity_bit(binary)\n    join([iseven(count(\"1\", x[1:end-1])) == iseven(parse(Int, x[end])) ? x[1:end-1] : \"error\" for x in split(binary)], \" \")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203560,"user_id":null,"body":"function parity_bit(binary)\n  correctedbits = \"\"\n  for bits in split(binary, \" \")\n    xor(bits[8] == '1',iseven(count(bit=='1' for bit in bits[1:7]))) ? correctedbits *= \" \" * bits[1:7] : correctedbits *= \" error\"\n  end\n  return correctedbits[2:end]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203561,"user_id":null,"body":"parity_bit(binary) = join(map(x -> x[end] == (isodd(count(x -> x == '1', x[1:end-1])) ? '1' : '0') ? x[1:end-1] : \"error\", split(binary)), \" \")","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203562,"user_id":null,"body":"function parity_bit(binary)\n  join((count(i -> i=='1', b[1:7])%2 == parse(Int, b[8]) ? b[1:7] : \"error\" for b in split(binary)), \" \")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203563,"user_id":null,"body":"function parity_bit(b)\n  bits(x) = length(filter(y -> y == '1', x))\n  f(x) = (iseven(bits(x[1:7])) && x[8] == '0') || (isodd(bits(x[1:7])) && x[8] == '1') ? x[1:7] : \"error\"\n  join(map(f, split(b)), ' ')\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203564,"user_id":881,"body":"if VERSION < v\"1\"\n  function parity_bit(binary)\n    replace(replace(binary, r\"\\b0*1(0*10*1)*0*\\b\", s\"error\"), r\"(\\d{7})\\d\", s\"\\1\")\n  end\nelse \n  function parity_bit(binary)\n    replace(replace(binary, r\"\\b0*1(0*10*1)*0*\\b\" => s\"error\"), r\"(\\d{7})\\d\" => s\"\\1\")\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"585a1a227cb58d8d740001c3":[{"id":203565,"user_id":null,"body":"repeater(s, n) = s^n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203566,"user_id":527,"body":"repeater = ^","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203567,"user_id":null,"body":"function repeater(string, n)\n  repeat(string, n)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203568,"user_id":53,"body":"function repeater(s, n)\n  s ^ n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203569,"user_id":null,"body":"function repeater(string, n)\n  return string^n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203570,"user_id":null,"body":"function repeater(string, n)\n  string^n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203571,"user_id":421,"body":"repeater = repeat","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"585af8f645376cda59000200":[{"id":203572,"user_id":421,"body":"format_poem(poem) = join(split(poem, \". \"), \".\n\")","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203573,"user_id":881,"body":"format_poem(poem) = replace(poem, r\"\\. \"=>\".\n\")","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203574,"user_id":null,"body":"function format_poem(poem)\n  join(split(poem, \". \"), \".\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203575,"user_id":null,"body":"format_poem(poem) = replace(poem, \". \"=> \".\n\")","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203576,"user_id":null,"body":"function format_poem(poem)\n  replace(poem, \". \" => \".\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"585c50e75d0930e6a7000336":[{"id":203577,"user_id":881,"body":"iscoprime = isone \u2218 gcd","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203578,"user_id":null,"body":"iscoprime(x::Integer, y::Integer) = gcd(x,y) == 1","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203579,"user_id":null,"body":"function iscoprime(x::Integer, y::Integer)\n  gcd(x,y) == 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203580,"user_id":527,"body":"function iscoprime(x::Integer, y::Integer)::Bool\n  gcd(x, y) == 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203581,"user_id":53,"body":"function iscoprime(x::Integer, y::Integer)\n  gcd(x, y) == 1\nend\n\nfunction gcd(a,b)\n  b == 0 ? a : gcd(b, a%b)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203582,"user_id":50,"body":"function iscoprime(a::Integer, b::Integer)\n  while b != 0\n    c = b\n    b = a % b\n    a = c\n  end\n  return a == 1\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5861d28f124b35723e00005e":[{"id":203583,"user_id":null,"body":"zero_fuel(distance_to_pump, mpg, fuel_left) = fuel_left * mpg \u2265 distance_to_pump","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203584,"user_id":2723,"body":"zero_fuel(distancetopump, mpg, fuelleft) = distancetopump <= fuelleft * mpg","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203585,"user_id":null,"body":"function zero_fuel(distancetopump, mpg, fuelleft)\n  distancetopump > mpg * fuelleft ? false : true\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203586,"user_id":null,"body":"function zero_fuel(m, mpg, f)\n  f*mpg >= m\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203587,"user_id":null,"body":"function zero_fuel(d, m, f)\n  # TODONE\n  return d <= m * f;\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203588,"user_id":null,"body":"zero_fuel(distancetopump, mpg, fuelleft) = distancetopump <= mpg*fuelleft ? 1 : 0","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203589,"user_id":null,"body":"function zero_fuel(distancetopump, mpg, fuelleft)\n  if (mpg * fuelleft) >= distancetopump\n    return true\n  else \n    return false\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203590,"user_id":null,"body":"function zero_fuel(distancetopump, mpg, fuelleft)\n  (mpg * fuelleft - distancetopump) >= 0  ? true : false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203591,"user_id":null,"body":"function zero_fuel(distancetopump, mpg, fuelleft)\n  if distancetopump <= mpg * fuelleft\n  return true\n  end\n  return false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203592,"user_id":null,"body":"function zero_fuel(distancetopump, mpg, fuelleft)\n  fuelleft * mpg >= distancetopump ? true : false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"58649884a1659ed6cb000072":[{"id":203593,"user_id":null,"body":"update_light(current) = Dict(\"green\" => \"yellow\", \"yellow\" => \"red\", \"red\" => \"green\")[current]","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203594,"user_id":527,"body":"nextlights = Dict(\"red\" => \"green\", \"yellow\" => \"red\", \"green\" => \"yellow\")\nupdate_light(current) = nextlights[current]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203595,"user_id":421,"body":"update_light(current) = current == \"green\" ? \"yellow\" : current == \"yellow\" ? \"red\" : \"green\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203596,"user_id":null,"body":"function update_light(current)\n  current == \"green\" && return \"yellow\"\n  current == \"yellow\" && return \"red\"\n  current == \"red\" && return \"green\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203597,"user_id":null,"body":"function update_light(current)\n  Dict(\"green\" => \"yellow\", \"yellow\" => \"red\", \"red\" => \"green\")[current]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203598,"user_id":1474,"body":"function update_light(current)\n  colors = [\"green\", \"yellow\", \"red\", \"green\"]\n  i = findall(w -> w == current, colors)[1]\n  colors[i + 1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203599,"user_id":null,"body":"function update_light(current)\n  colors = [\"green\", \"yellow\", \"red\"]\n  colors[mod1(findfirst(==(current), colors) + 1, 3)]  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203600,"user_id":null,"body":"function update_light(current)\n  if current == \"green\"\n    return \"yellow\"\n  elseif current == \"yellow\"\n    return \"red\"\n  else\n    return \"green\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203601,"user_id":492,"body":"function update_light(current)\n    if (current == \"green\")\n        return \"yellow\"\n    end\n    if (current == \"yellow\")\n        return \"red\"\n    end\n    return \"green\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203602,"user_id":168,"body":"function update_light(current)\n  current == \"green\" ? \"yellow\" : current == \"red\" ? \"green\" : \"red\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5864eb8039c5ab9cd400005c":[{"id":203603,"user_id":149,"body":"using Statistics","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203604,"user_id":null,"body":"function median(a)\n  sort!(a)\n  n=length(a)\n  if n%2==0\n    (a[n\u00f72]+a[1+n\u00f72])\/2\n  else\n    a[1+n\u00f72]\n  end\nend\n    ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203605,"user_id":null,"body":"function median(array)\n  sorted = sort(array)\n  if length(sorted)%2 == 0\n    (sorted[div(length(sorted),2)]+sorted[div(length(sorted),2)+1])\/2\n  else\n    sorted[div(length(sorted),2)+1]\n  end\nend\n    ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203606,"user_id":null,"body":"function median(array)\n  sort!(array); n = length(array); m = n\u00f72\n  n%2==1 ? array[m+1] : (array[m+1]+array[m])\/2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203607,"user_id":null,"body":"function median(array)\n  if iseven(length(array))\n    sum(sort(array)[end \u00f7 2:end \u00f7 2 + 1]) \/ 2\n  else\n    sort(array)[end \u00f7 2 + 1]\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203608,"user_id":527,"body":"using Statistics: median","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203609,"user_id":53,"body":"function median(array)\n  sorted = sort(array)\n  n = length(array)\n  i = n \u00f7 2 + 1\n  (sorted[i] + sorted[n - i + 1]) \/ 2\nend\n    ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203610,"user_id":50,"body":"function median(a)\n  a=sort(a)\n  l=length(a)\n  m=l>>1\n  (a[m+1]+(a[1+m-(l%2 == 1 ? 0 : 1)]))\/2\nend\n    ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203611,"user_id":421,"body":"function median(array)\n  a = sort(array)\n  isodd(length(a)) ? a[div(length(a), 2) + 1] : (a[div(length(a), 2)] + a[div(length(a), 2) + 1]) \/ 2\nend\n    ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"586560a639c5ab3a260000f3":[{"id":203612,"user_id":null,"body":"function rotate(str)\n  [(str*str)[i:i+length(str)-1] for i in 2:length(str)+1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203613,"user_id":50,"body":"function rotate(s)\n  [s[i+1:end]*s[1:i] for i in 1:length(s)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203614,"user_id":null,"body":"function rotate(str)\n  strarr = split(str, \"\")\n  [join(circshift(strarr, i-1)) for i in length(str):-1:1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203615,"user_id":null,"body":"function rotate(str)\n  accumulate(1:length(str); init = collect(str)) do prev, _\n    circshift(prev, -1)\n  end .|> join\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203616,"user_id":881,"body":"rotate(str) = [str[i+1:end] * str[begin:i] for i in eachindex(str)]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203617,"user_id":2525,"body":"function rotate(str)\n    if str == \"\"\n        []\n    else\n        [ str[i:end]*str[1:i-1] for i in vcat(2:length(str), [1]) ]\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203618,"user_id":null,"body":"function rotate(s)\n  [string(SubString(s,i+1), SubString(s,1,i)) for i in 1:length(s)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203619,"user_id":527,"body":"rotate(str) = [str[i:end] * str[1:i-1] for i = 2:length(str)+1]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203620,"user_id":421,"body":"rotate(str) = [string(str[i + 1:end], str[1:i]) for i in 1:length(str)]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5865cff66b5699883f0001aa":[{"id":203621,"user_id":421,"body":"function to_time(seconds)\n   \"$(div(seconds, 3600)) hour(s) and $(div(seconds % 3600, 60)) minute(s)\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203622,"user_id":null,"body":"function to_time(seconds)\n  h,m = divrem(seconds \u00f7 60, 60)\n  \"$h hour(s) and $m minute(s)\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203623,"user_id":null,"body":"to_time(seconds) = \"$(seconds\u00f73600) hour(s) and $(seconds%3600\u00f760) minute(s)\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203624,"user_id":null,"body":"function to_time(seconds)\n  \"$(div(seconds, 3600)) hour(s) and $(div(seconds - div(seconds, 3600) * 3600, 60)) minute(s)\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203625,"user_id":2525,"body":"function to_time(seconds)\n    \"$(floor(Int, seconds\/3600)) hour(s) and $(floor(Int, seconds%3600\/60)) minute(s)\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203626,"user_id":759,"body":"function to_time(seconds)\n  string(fld(seconds, 3600), \" hour(s) and \", fld(seconds, 60) % 60, \" minute(s)\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203627,"user_id":null,"body":"function to_time(s)\n  \"$(s\u00f73600) hour(s) and $((s%3600)\u00f760) minute(s)\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203628,"user_id":null,"body":"to_time(seconds) = \"$(div(seconds, 3600)) hour(s) and $(div(seconds%3600, 60)) minute(s)\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203629,"user_id":null,"body":"function to_time(seconds)\n    h = Int(floor(seconds \/ 3600))\n    m = Int(floor((seconds % 3600) \/ 60))\n    dst = string(h) *  \" hour(s) and \" * string(m) * \" minute(s)\"\n    return dst\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203630,"user_id":null,"body":"function to_time(seconds)\n  \"$(seconds \u00f7 3600) hour(s) and $((seconds - ((seconds \u00f7 3600)*3600)) \u00f7 60) minute(s)\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"586bca7fa44cfc833e00005c":[{"id":203631,"user_id":527,"body":"create_array_of_tiers = cumprod \u2218 collect \u2218 string","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203632,"user_id":759,"body":"function create_array_of_tiers(num::Integer)::Vector{String}\n  n = string(num)\n  [n[1:i] for i in 1:length(n)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203633,"user_id":null,"body":"function create_array_of_tiers(num::Integer)::Vector{String}\n    dgts = reverse(digits(num))\n    join.([string.(dgts[1:q]) for q in 1:length(dgts)])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203634,"user_id":null,"body":"create_array_of_tiers(num::Integer)::Vector{String} = [string(num)[1:i] for i in 1:ndigits(num)]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203635,"user_id":2525,"body":"function create_array_of_tiers(num::Integer)::Vector{String}\n    snum = \"$num\"\n    [snum[1:i] for i in 1:length(snum)]    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203636,"user_id":null,"body":"function create_array_of_tiers(num::Integer)::Vector{String}\n    chars = string(num)\n    arr = []\n    push!(arr, \"$(chars[1])\")\n    for idx in 2:length(chars)\n        push!(arr, string(arr[end], \"$(chars[idx])\"))\n    end\n    arr\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203637,"user_id":null,"body":"function create_array_of_tiers(num::Integer)::Vector{String}\n    num = string(num)\n    vector = Vector{String}()\n\n    for n in eachindex(string(num))\n        push!(vector, num[1:n])\n    end\n    \n    vector\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203638,"user_id":1474,"body":"function create_array_of_tiers(num::Integer)::Vector{String}\n  stg = string(num)\n  [stg[1:i] for i in 1:length(stg)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203639,"user_id":null,"body":"function create_array_of_tiers(num::Integer)::Vector{String}\n  sn = string(num)\n  [sn[1:i+1] for i in 0:length(sn)-1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203640,"user_id":527,"body":"function create_array_of_tiers(num::Integer)::Vector{String}\n  cumprod(collect(string(num)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5875b200d520904a04000003":[{"id":203641,"user_id":421,"body":"enough(cap, on, wait) = max(0, wait - cap + on)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203642,"user_id":527,"body":"function enough(cap, on, wait) \n  max(on + wait - cap, 0)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203643,"user_id":null,"body":"function enough(cap, on, wait) \n  if on + wait < cap\n    0\n    else\n      on+wait-cap\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203644,"user_id":48,"body":"function enough(cap, on, wait) \n  max(wait + on - cap, 0)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203645,"user_id":null,"body":"function enough(cap, on, wait) \n  if cap >= on + wait\n    return 0\n  else\n    return on + wait - cap\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203646,"user_id":null,"body":"function enough(cap, on, wait) \n  cap >= on + wait ? 0 : abs(cap - on - wait)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203647,"user_id":null,"body":"function enough(cap, on, wait) \n  return max(on + wait - cap, 0)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203648,"user_id":null,"body":"function enough(cap, on, wait) \n  if on+wait>=cap\n  return on+wait-cap\n    else\n    return 0\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203649,"user_id":null,"body":"function enough(cap, on, wait) \n  cap - on >= wait ? 0 : wait - (cap - on)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203650,"user_id":null,"body":"function enough(cap, on, wait)\n  on + wait \u2264 cap ? 0 : on + wait - cap\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"588417e576933b0ec9000045":[{"id":203651,"user_id":759,"body":"module Solution\n  export seats_in_theater\n  \n  seats_in_theater(ncols, nrows, col, row) = (ncols - col + 1) * (nrows - row)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203652,"user_id":null,"body":"module Solution\n  export seats_in_theater\n  \n  function seats_in_theater(ncols, nrows, col, row)\n    # coding and coding...\n    return ((ncols-col+1)*(nrows-row))\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203653,"user_id":881,"body":"module Solution\n  export seats_in_theater\n  \n  function seats_in_theater(ncols, nrows, col, row)\n    (ncols - col + 1) * (nrows - row)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203654,"user_id":null,"body":"module Solution\n  export seats_in_theater\n  \n  \"\"\"\n  Given the total number of rows and columns in the theater (nRows and nCols, respectively),\n  and the row and column you're sitting in, return the number of people who sit strictly\n  behind you and in your column to your left, assuming all seats are occupied.\n  \"\"\"\n  function seats_in_theater(ncols, nrows, col, row)\n      #(ncols - col) * (nrows - row) + (nrows - row)\n      (nrows - row) * ((ncols - col) + 1)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203655,"user_id":2723,"body":"module Solution\n  export seats_in_theater\n  seats_in_theater(ncols, nrows, col, row) = (ncols*nrows)-(row*ncols)-((nrows-row)*(col-1))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203656,"user_id":null,"body":"module Solution\n  export seats_in_theater\n  \n  function seats_in_theater(ncols, nrows, col, row)\n    (nrows-row)*(ncols-col+1)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203657,"user_id":null,"body":"module Solution\n  export seats_in_theater\n  \n  function seats_in_theater(ncols, nrows, col, row)\n    return (nrows - row) * (ncols - col + 1)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203658,"user_id":null,"body":"module Solution\n  export seats_in_theater\n  \n  function seats_in_theater(ncols, nrows, col, row)\n    ((ncols+1)-col)*(nrows-row)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"58841cb52a077503c4000015":[{"id":203659,"user_id":null,"body":"circle_of_numbers(n::Int, firstnumber::Int)::Int = mod(firstnumber + n>>1,n)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203660,"user_id":null,"body":"function circle_of_numbers(n::Int, firstnumber::Int)::Int\n    half = n \/ 2\n    attempt = half + firstnumber\n    return attempt >= n ? attempt - n : attempt\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203661,"user_id":1474,"body":"function circle_of_numbers(n::Int, fst::Int)::Int\n  t = n \u00f7 2\n  t > fst ? fst + t : fst - t\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203662,"user_id":null,"body":"function circle_of_numbers(n::Int, firstnumber::Int)::Int\n  (firstnumber + n\u00f72)%n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203663,"user_id":null,"body":"function circle_of_numbers(n::Int, firstnumber::Int)::Int\n  a = firstnumber + div(n, 2)\n  (a < n) ? a : a-n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203664,"user_id":759,"body":"circle_of_numbers(n::Int, firstnumber::Int)::Int = (div(n, 2) + firstnumber) % n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203665,"user_id":null,"body":"function circle_of_numbers(n::Int, firstnumber::Int)::Int\n  return (firstnumber + n \/ 2) % n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203666,"user_id":null,"body":"function circle_of_numbers(n::Int, firstnumber::Int)::Int\n  # your code here\n  if firstnumber < n\/2\n    return firstnumber + n\/2\n  else\n    return firstnumber - n\/2\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203667,"user_id":527,"body":"function circle_of_numbers(n::Int, firstnumber::Int)::Int\n  (firstnumber + n \/ 2) % n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203668,"user_id":645,"body":"circle_of_numbers(n::Int, fst::Int)::Int = (n \/ 2 + fst) % n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"588422ba4e8efb583d00007d":[{"id":203669,"user_id":492,"body":"function late_ride(n)\n  div(n, 600) + div(n % 600, 60) + div(n % 60, 10) + (n % 10)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203670,"user_id":421,"body":"function late_ride(n)\n  sum(parse(Int64, x) for x in \"$(div(n, 60))$(n % 60)\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203671,"user_id":null,"body":"function late_ride(n)\n    sum([parse(Int, \"$(x)\") for x in string(n \u00f7 60, mod(n, 60))])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203672,"user_id":1474,"body":"function late_ride(n)\n  hr, min = n \u00f7 60, n % 60\n  sum(digits(hr * 100 + min))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203673,"user_id":null,"body":"function late_ride(n)\n  ((n\u00f760, n%60) .|> sum \u2218 digits) |> sum\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203674,"user_id":881,"body":"late_ride(n) = sum([digits(n \u00f7 60); digits(n % 60)])","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203675,"user_id":null,"body":"function late_ride(n)\n  m=sum([parse(Int,i) for i in string(div(n,60))])\n  s=sum([parse(Int,i) for i in string(n%60)])\n  m+s\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203676,"user_id":null,"body":"function late_ride(n)\n  sum(digits(n \u00f7 60)) + sum(digits(n % 60))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203677,"user_id":null,"body":"function late_ride(n)\n h,m = divrem(n,60)\n sum(map(x -> parse(Int,x), collect(string(h,m))))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203678,"user_id":645,"body":"late_ride(n) = sum([parse(Int, x) for x in \"$(floor(Int, n \/ 60))$(n % 60)\"])","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"58844f1a76933b1cd0000023":[{"id":203679,"user_id":421,"body":"function kill_kth_bit(n, k)\n   n & ~(1 << (k - 1))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203680,"user_id":527,"body":"kill_kth_bit(n, k) = n & ~(1 << (k - 1))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203681,"user_id":null,"body":"kill_kth_bit(n, k) = n &= ~(2^(k-1))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203682,"user_id":50,"body":"function kill_kth_bit(n, k)\n  m = 1 << (k - 1)\n  (n | m) - m\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203683,"user_id":null,"body":"function kill_kth_bit(n, k)\n  str=string(n,base=2)  \n  n & parse(Int,join([q == length(str)-(k-1) ? \"0\" : \"1\" for q in 1:length(str)]),base=2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203684,"user_id":null,"body":"function kill_kth_bit(n, k)\n  if k == 1\n    n - n % 2\n  else\n    2 * kill_kth_bit(n \u00f7 2, k - 1) + n % 2\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203685,"user_id":881,"body":"kill_kth_bit(n::Integer, k::Integer) = n & ~(1 << (k - 1))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203686,"user_id":881,"body":"kill_kth_bit(n::Integer, k::Integer) = n & ~(1 << (k - 1))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"58880c6e79a0a3e459000004":[{"id":203687,"user_id":527,"body":"function housenumberssum(numbers)\n  sum(numbers[1 : findfirst(iszero, numbers) - 1])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203688,"user_id":759,"body":"function housenumberssum(inputarray)\n  res = 0\n  for n in inputarray\n    if n == 0\n      break\n    end\n    res += n\n  end\n  res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203689,"user_id":null,"body":"function housenumberssum(inputarray)\n  deleteat!(inputarray, findfirst(x->x==0, inputarray):length(inputarray))\n  sum(inputarray)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203690,"user_id":null,"body":"housenumberssum(inputarray) = sum(inputarray[1:findfirst(==(0), inputarray)])","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203691,"user_id":null,"body":"function housenumberssum(ia)\n  sum(ia[1:findfirst(==(0), ia)])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203692,"user_id":null,"body":"function housenumberssum(inputarray)\n    sum = 0\n    for num in inputarray\n        if num == 0\n            return sum\n        else\n            sum += num\n        end\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203693,"user_id":1474,"body":"function housenumberssum(arr)\n  sum(arr[1:indexin(0, arr)[1]-1])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203694,"user_id":872,"body":"function housenumberssum(inputarray)\n  sum = 0\n  for n in inputarray\n    if n == 0\n      break\n    else\n      sum += n\n    end      \n  end\n  sum\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203695,"user_id":1672,"body":"function housenumberssum(houses)\n  sum=0\n  i=1\n  while houses[i]!=0\n    sum += houses[i]\n    i += 1\n  end\n  return sum\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203696,"user_id":492,"body":"function housenumberssum(arr)\n    sum = 0\n    for i = 1:length(arr)\n        if(arr[i] == 0)\n            break\n        else\n            sum += arr[i]\n        end\n    end\n    return sum\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"588e27b7d1140d31cb000060":[{"id":203697,"user_id":527,"body":"function generate_pairs(n::Int64)::Vector{Tuple{Int64,Int64}}\n  [(i, j) for i in 0:n for j in i:n]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203698,"user_id":1474,"body":"function generate_pairs(n::Int64)::Vector{Tuple{Int64,Int64}}\n  [(i, j) for i in 0:n for j in 0:n if i <= j]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203699,"user_id":168,"body":"function generate_pairs(n::Int64)::Vector{Tuple{Int64,Int64}}\n  [(a, b) for a in 0:n for b in a:n]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203700,"user_id":null,"body":"function generate_pairs(n::Int64)::Vector{Tuple{Int64,Int64}}\n  array = []\n  for a in 0:n, b in a:n\n      push!(array, (a,b))\n  end\n  return array\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203701,"user_id":null,"body":"function generate_pairs(n::Int64)::Vector{Tuple{Int64,Int64}}\n  res = []\n  for q in 0:n\n    for p in q:n\n      push!(res,(q,p))\n    end\n  end\n  res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203702,"user_id":53,"body":"function generate_pairs(n::Int64)::Vector{Tuple{Int64,Int64}}\n  res = []\n  for i in 0:n \n    for j in i:n \n        push!(res,(i,j))\n    end\n  end\n  res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203703,"user_id":50,"body":"function generate_pairs(n::Int64)::Vector{Tuple{Int64,Int64}}\n  return sort([(i,j) for j in 0:n for i in 0:n if i<=j])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203704,"user_id":881,"body":"function generate_pairs(n::Int64)::Vector{Tuple{Int64,Int64}}\n  [(i, j) for j in 0:n, i in 0:n if j >= i]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"588e2a1ad1140d31cb00008c":[{"id":203705,"user_id":null,"body":"function generate_pairs(m::Integer, n::Integer)\n  [(i,j) for i in m:n for j in i:n]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203706,"user_id":null,"body":"generate_pairs(m::Integer, n::Integer) = [(i,j) for i in m:n for j in i:n]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203707,"user_id":null,"body":"function generate_pairs(m::Integer, n::Integer)\n    return sort(vec([(a,b) for a in m:n, b in m:n if b >= a]))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203708,"user_id":527,"body":"function generate_pairs(m::Integer, n::Integer)::Vector{Tuple{Integer, Integer}}\n  [(i, j) for i in m : n for j in i : n]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203709,"user_id":53,"body":"function generate_pairs(m::Integer, n::Integer)\n  r = []\n  for i in m:n\n    for j in i:n\n      push!(r, (i,j))\n    end\n  end\n  r\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203710,"user_id":881,"body":"generate_pairs(m::Integer, n::Integer) = [(a, b) for a in m:n for b in a:n]\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5894134c8afa3618c9000146":[{"id":203711,"user_id":527,"body":"chessboardcellcolor(cs...) = ==(@.sum(Int, cs) % 2...)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203712,"user_id":null,"body":"function chessboardcellcolor(cell1, cell2)\n  (Int(cell1[1]) + Int(cell1[2])) % 2 == (Int(cell2[1]) + Int(cell2[2])) % 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203713,"user_id":null,"body":"function chessboardcellcolor(cell1, cell2)\n  c1x, c1y = cell1\n  c2x, c2y = cell2\n  (Int(c1x) + Int(c1y)) % 2 == (Int(c2x) + Int(c2y)) % 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203714,"user_id":null,"body":"function cell_to_coord(cell)\n  x, y = Int.(collect(cell))\n  return (x - 64, y)\nend\n\nfunction parity(cell)\n  xy = cell_to_coord(cell)\n  xy_parities = (-1) .^ xy\n  return reduce(*, xy_parities)\nend\n\ncolor(cell) = parity(cell) == 1 ? :black : :white\n\nfunction chessboardcellcolor(cell1, cell2)\n  return color(cell1) == color(cell2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203715,"user_id":null,"body":"# cell 1 and cell 2 are both dark or both light? (returns boolean)\nfunction chessboardcellcolor(cell1, cell2)\n  dark(cell1) == dark(cell2)\nend\n\n# cell is dark? (returns boolean)\nfunction dark(cell)\n  letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\n  letter_index = findfirst(==(cell[1]), letters)\n  iseven(letter_index) == iseven(parse(Int64, cell[2]))\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203716,"user_id":null,"body":"# cell 1 and cell 2 are both dark or both light? (returns boolean)\nfunction chessboardcellcolor(cell1, cell2)\n  dark(cell1) == dark(cell2)\nend\n\n# cell is dark? (returns boolean)\nfunction dark(cell)\n  letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\n  letter_index = findfirst(==(cell[1]), letters)\n  (letter_index % 2 == 0) == (parse(Int64, cell[2]) % 2 == 0)\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203717,"user_id":null,"body":"function chessboardcellcolor(cell1, cell2)\n  color(c) = iseven(codepoint(c[1])) == iseven(parse(Int, c[2]))\n  color(cell1) == color(cell2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203718,"user_id":76,"body":"function chessboardcellcolor(cell1, cell2)\n  (cell1[1] - cell1[2]) % 2 == (cell2[1] - cell2[2]) % 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203719,"user_id":null,"body":"indices = collect(1:8)\n\nrows = Dict(collect('1':'8') .=> indices)\ncols = Dict(collect('A':'H') .=> indices)\n\nfunction chessboardcellcolor(cell1, cell2)\n  return isdarkcell(cell1) == isdarkcell(cell2)\nend\n\nfunction isdarkcell(cell)\n  parsed = parsecell(cell)\n    \n  return iseven(parsed[1]) == iseven(parsed[2])\nend\n\niseven(number) = number % 2 == 0\n\nparsecell(cell) = [cols[cell[1]], rows[cell[2]]]\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203720,"user_id":421,"body":"function chessboardcellcolor(cell1, cell2)\n  (Int(cell1[1]) + parse(Int, cell1[2])) % 2 ==  (Int(cell2[1]) + parse(Int, cell2[2])) % 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"58941fec8afa3618c9000184":[{"id":203721,"user_id":53,"body":"function growing_plant(u::Int, d::Int, m::Int)::Int\n  max(1, ceil((m - d) \/ (u - d)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203722,"user_id":null,"body":"function growing_plant(upspeed::Int, downspeed::Int, desiredheight::Int)::Int\n  n=1\n  while(upspeed+(upspeed-downspeed)*(n-1)<desiredheight)\n    n=n+1\n  end\n  return n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203723,"user_id":645,"body":"growing_plant(up::Int, down::Int, h::Int)::Int = max(1, ceil(Int, (h - down) \/ (up - down)))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203724,"user_id":50,"body":"function growing_plant(a::Int, b::Int, c::Int)::Int\n  if c <= a\n    return 1\n  else\n    return 1 + growing_plant(a, b , c - a + b)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203725,"user_id":null,"body":"growing_plant(up, down, height, day=1) = up \u2265 height ? day : growing_plant(up, down, height-up+down, day+1)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203726,"user_id":492,"body":"function growing_plant(up::Int, down::Int, h::Int)::Int\n  max(ceil((h - down) \/ (up - down)), 1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203727,"user_id":null,"body":"function growing_plant(upspeed::Int, downspeed::Int, desiredheight::Int)::Int\n  output, actual_height = 0, 0\n  while true\n    output += 1\n    actual_height += upspeed\n    if actual_height >= desiredheight\n      return output\n    end\n    actual_height -= downspeed\n  end  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203728,"user_id":421,"body":"function growing_plant(upspeed::Int, downspeed::Int, desiredheight::Int)::Int\n    initial = upspeed\n    count = 1\n    while initial < desiredheight\n        initial += upspeed\n        initial -= downspeed\n        count += 1\n    end\n    count\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203729,"user_id":1474,"body":"function growing_plant(ups::Int, downs::Int, dh::Int)::Int\n  i = 0\n  tmp = 0\n  while true\n    tmp += ups\n    i += 1\n    if tmp >= dh\n      return i\n    end\n    tmp -= downs\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203730,"user_id":null,"body":"function growing_plant(upspeed::Int, downspeed::Int, desiredheight::Int)::Int\n  desiredheight < upspeed ? 1 : (desiredheight-upspeed)\/(upspeed-downspeed)+1 |> Int \u2218 ceil \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5894318275f2c75695000146":[{"id":203731,"user_id":881,"body":"function delete_digit(n::String)::Int\n  max([parse(Int, n[1:i-1] * n[i+1:end]) for i in 1:length(n)]...)  \nend\ndelete_digit(n::Int)::Int = delete_digit(string(n))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203732,"user_id":null,"body":"function delete_digit(n::Int)\n  dig = n |> digits |> reverse\n  highest = 0\n  for i in 1:length(dig)\n    test_digits = [dig[1:i-1];dig[i+1:end]]\n    value = parse(Int, join(test_digits))\n    if value > highest\n      highest = value\n    end\n  end\n  \n  return highest\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203733,"user_id":53,"body":"function delete_digit(n)\n  m = 0\n  d = 1\n  while d <= n\n    m = max(m, (n % d) + d * (n \u00f7 (10 * d)))\n    d *= 10\n  end\n  m\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203734,"user_id":null,"body":"delete_digit(n) = maximum(i-> parse(Int, \"$n\"[1:i-1] * \"$n\"[i+1:end]), 1:ndigits(n))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203735,"user_id":50,"body":"function delete_digit(n)\n  m =  0\n  h = 1\n  while h <= n\n    a = (n%h) + floor(n \/ (10 * h)) * h\n    if a > m\n      m = a\n    end\n    h = h * 10\n  end\n  return m\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5898761a9c700939ee000011":[{"id":203736,"user_id":null,"body":"function corner_circle(r) \n  round(r * (3 - 2*2^(1\/2)), digits = 2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203737,"user_id":null,"body":"corner_circle(r) = round(.171572875r,digits=2)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203738,"user_id":null,"body":"function corner_circle(r) \n    round((sqrt(2) - 1) \/ (sqrt(2) + 1) * r, digits=2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203739,"user_id":53,"body":"function corner_circle(r) \n  round(r * 0.1715728753, digits=2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203740,"user_id":50,"body":"function corner_circle(r) \n    round(100*r*(3-2^1.5))\/100\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203741,"user_id":421,"body":"corner_circle(r) = round(r * (3 - 2 * sqrt(2)), digits = 2)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5899dc03bc95b1bf1b0000ad":[{"id":203742,"user_id":527,"body":"invert = -","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203743,"user_id":null,"body":"invert(arr) = map(-, arr)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203744,"user_id":null,"body":"invert(arr) = arr .* -1","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203745,"user_id":null,"body":"function invert(arr)\n  [map( x -> x * (-1), arr)...]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203746,"user_id":null,"body":"invert(arr) = [-q for q in arr]","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203747,"user_id":null,"body":"function invert(arr)\n  -1 .* arr\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203748,"user_id":1474,"body":"function invert(arr)\n  [-i for i in arr]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203749,"user_id":null,"body":"invert(arr) = map(x -> -x, arr)\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203750,"user_id":null,"body":"function invert(arr)\n  (-).(arr)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203751,"user_id":null,"body":"function invert(arr)\n  arr .* -1\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"58a6568827f9546931000027":[{"id":203752,"user_id":759,"body":"function number_of_carries(a::Int, b::Int)::Int\n  carry = result = 0\n  while a != 0 || b != 0\n    ((carry = (a % 10 + b % 10 + carry) \u00f7 10) != 0) && (result += 1)\n    a \u00f7= 10; b \u00f7= 10\n  end\n  result\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203753,"user_id":null,"body":"function number_of_carries(a::Int, b::Int)::Int\n    x = sort!([digits(a),digits(b)], by = length)\n    remainder, carries = 0, 0\n    for (i, v) in enumerate(x[1])\n        remainder = (remainder + v + x[2][i]) \u00f7 10\n        carries += remainder\n        length(x[1]) == i && push!(x[1], 0)\n        length(x[2]) == i && return carries\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203754,"user_id":50,"body":"function number_of_carries(a::Int, b::Int)::Int\n  c=0\n  r=0\n  while a+b != 0\n    a,x = divrem(a,10)\n    b,y = divrem(b,10)\n    r= floor((x+y+r) \/ 10)\n    c+=r\n  end\n  return c\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203755,"user_id":null,"body":"function number_of_carries(a::Int, b::Int)::Int\n  ret = 0  \n  carry = 0\n  while true\n    c = a%10 + b%10 + carry\n    carry = 0\n    a = fld(a, 10)\n    b = fld(b, 10)\n    if c>=10\n      ret += 1\n      carry = 1\n    end\n    if a==0 && b==0 break end\n  end\n  return ret\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203756,"user_id":2525,"body":"function number_of_carries(a::Int, b::Int)::Int\n    a = digits(a)\n    b = digits(b)\n    l = max(length(a), length(b))\n\n    n = 0\n    c = 0\n    for i in 1:l    \n        da = if i \u2264 length(a); a[i] else 0 end\n        db = if i \u2264 length(b); b[i] else 0 end\n  \n        if da+db+c >= 10\n            n += 1\n            c  = 1\n        else\n            c  = 0\n        end\n    end\n    n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203757,"user_id":null,"body":"function number_of_carries(a::Int, b::Int)::Int\n  ndig = maximum(length.(digits.([a, b]))) + 1\n  carries = 0\n  carry = 0\n  for (c, d) in zip(digits.([a, b], pad = ndig)...)\n    carry = c + d + carry >= 10\n    carries += carry\n  end\n  return carries\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203758,"user_id":null,"body":"function number_of_carries(a::Int, b::Int)::Int\n    r, c = 0, 0\n    while a > 0 || b > 0\n        a, x = a \u00f7 10, a % 10\n        b, y = b \u00f7 10, b % 10\n        if x + y + c > 9 \n            r, c = r + 1, 1\n        else\n            c = 0\n        end\n    end\n    r\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203759,"user_id":209,"body":"function number_of_carries(a::Int, b::Int)::Int\n    c, c_c = 0, 0\n    while a > 0 || b > 0\n        c = (c + a % 10 + b % 10) \u00f7 10\n        c_c += c > 0\n        a \u00f7= 10\n        b \u00f7= 10\n    end\n    c_c\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203760,"user_id":null,"body":"function number_of_carries(a::Int, b::Int)::Int\n  c, r = 0, 0\n  while a > 0 || b > 0\n    c = div(a % 10 + b % 10 + c, 10)\n    c > 0 && (r += 1)\n    a, b = div(a, 10), div(b, 10)\n  end\n  r\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203761,"user_id":null,"body":"function number_of_carries(n1::Int, n2::Int)::Int\n    x, xDigits = n1, Int(ceil(log(10, n1)))\n    y, yDigits = n2, Int(ceil(log(10, n2)))\n    mostDigs = xDigits >= yDigits ? xDigits : yDigits\n    c = 0\n    carried = 0\n    while mostDigs > 0\n        if rem(x, 10) + rem(y, 10) + carried > 9\n            c += 1\n            carried = 1\n        else\n            carried = 0\n        end\n        x = div(x, 10)\n        y = div(y, 10)\n        mostDigs -= 1\n    end\nreturn c\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"58a66c208b88b2de660000c3":[{"id":203762,"user_id":1474,"body":"function missing_values(ns::Vector{Int})::Int\n  x, y = nothing, nothing\n  for i in ns\n    t = count(n -> i == n, ns)\n    if t == 3\n      continue\n    elseif t == 1\n      x = i\n    elseif t == 2\n      y = i\n    end\n    if !(isnothing(x) || isnothing(y))\n      return x * x * y\n    end\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203763,"user_id":759,"body":"function missing_values(ns::Vector{Int})::Int\n  counter = Dict()\n  for n in ns\n    counter[n] = get(counter, n, 0) + 1\n  end\n  res = 1\n  for (a, c) in counter\n    if c == 2\n      res *= a\n    elseif c == 1\n      res *= a * a\n    end\n  end\n  res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203764,"user_id":null,"body":"missing_values(ns::Vector{Int})::Int = sort!(ns, by= x-> count(==(x), ns))[1]^2 * ns[2]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203765,"user_id":null,"body":"function missing_values(ns::Vector{Int})::Int\n  x = filter(n -> count(==(n), ns) == 1, ns)[1]\n  y = filter(n -> count(==(n), ns) == 2, ns)[1]\n  x^2 * y\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203766,"user_id":2525,"body":"function missing_values(ns::Vector{Int})::Int\n    cnt = Dict( (i, 0) for i in ns )\n    for i in ns\n        cnt[i] += 1\n    end\n  \n    x = nothing\n    y = nothing\n    for (k, v) in cnt\n        if     v == 1  x = k\n        elseif v == 2  y = k\n        end\n    end\n  \n    x*x*y\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203767,"user_id":null,"body":"function missing_values(ns::Vector{Int})::Int\n  h = Dict(count(e -> e==x, ns) => x for x in ns)\n  h[1] * h[1] * h[2]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203768,"user_id":null,"body":"function missing_values(ns::Vector{Int})::Int\n    counts = Dict{Int, Int}()\n    for num in ns\n        if num in keys(counts)\n            counts[num] += 1\n        else\n            counts[num] = 1\n        end\n    end\n    x = NaN\n    y = NaN\n    for (key, value) in counts\n        if value == 2\n            y = key\n        elseif value == 1\n            x = key\n        end\n        if !isnan(x) && !isnan(y)\n            return x * x * y\n        end\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203769,"user_id":881,"body":"function missing_values(ns::Vector{Int})::Int\n    counts = Dict(n=>count(==(n), ns) for n in Iterators.unique(ns))\n    x = findfirst(==(1), counts)\n    y = findfirst(==(2), counts)\n    x * x * y\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"58acfe4ae0201e1708000075":[{"id":203770,"user_id":null,"body":"invite_more_women(L) = sum(L) > 0","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203771,"user_id":null,"body":"function invite_more_women(L)\n    men = count(i -> i == 1, L)\n    women = count(i -> i == -1, L)\n    men > women\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203772,"user_id":null,"body":"function invite_more_women(L)\n  sum(L) >= 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203773,"user_id":null,"body":"invite_more_women(L) = sum(L) > 0 ? true : false","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203774,"user_id":null,"body":"function invite_more_women(L)\n  \n  m = count(i->(i==1),L)\n  \n  w = count(i->(i==-1),L)\n  \n  if m>w\n    \n    return true\n    \n  else\n    \n    return false\n    end\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203775,"user_id":null,"body":"function invite_more_women(L)\n  count(x -> x == 1, L) > count(x -> x == -1, L)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203776,"user_id":null,"body":"function invite_more_women(L)\n  return(sum(L) > 0)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203777,"user_id":527,"body":"function invite_more_women(genders)\n  sum(genders) > 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203778,"user_id":527,"body":"function invite_more_women(L)\n  sum(L) > 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203779,"user_id":881,"body":"invite_more_women(l) = sum(l) > 0","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"58ad09d6154165a1c80000d1":[{"id":203780,"user_id":null,"body":"function zero_and_one(str::AbstractString)\n    count(r\"\\S\",replace(str,r\"10|01\"=>\" \"))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203781,"user_id":881,"body":"zero_and_one(str::AbstractString) = length(replace(str, r\"01|10\" => \"\"))\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203782,"user_id":168,"body":"function zero_and_one(str::AbstractString)\n  length(replace(str, r\"01|10\" => \"\"))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203783,"user_id":527,"body":"function zero_and_one(str::AbstractString)::Int\n  length(replace(str, r\"01|10\" => \"\"))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203784,"user_id":null,"body":"zero_and_one(str::AbstractString) = replace(str, r\"01|10\"=> \" \") == str ? length(replace(str, \" \"=> \"\")) : zero_and_one(replace(str, r\"01|10\"=> \" \"))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203785,"user_id":50,"body":"function zero_and_one(s::AbstractString)\n    o = 0\n    i = 1\n    while i <= length(s)\n      if i != length(s) && s[i] != s[i + 1]\n        i += 1\n      else\n        o += 1\n      end\n      i += 1\n    end\n    return o\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"58b8c94b7df3f116eb00005b":[{"id":203786,"user_id":null,"body":"reverse_letter(str) = reverse(filter(isletter, str))","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203787,"user_id":null,"body":"reverse_letter(string) =\nfilter(isletter, string) |> reverse","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203788,"user_id":421,"body":"function reverse_letter(string)\n  reverse(replace(string, r\"[^a-z]\"i=> \"\"))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203789,"user_id":null,"body":"function reverse_letter(string)\n  filter(isletter, string) |> reverse\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203790,"user_id":null,"body":"reverse_letter(string) = reverse(filter(isletter, string))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203791,"user_id":null,"body":"function reverse_letter(str)\n  reverse(filter(isletter, str))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203792,"user_id":null,"body":"function reverse_letter(string)\n  string = replace(string, r\"[^A-Za-z]+\" => \"\")\n  return reverse(string)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203793,"user_id":null,"body":"function reverse_letter(string)\n  reverse(join(i for i in string if isletter(i)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203794,"user_id":null,"body":"function reverse_letter(str)\n  [c for c \u2208 str if contains(c |> string, r\"[a-z]\"i)] |> reverse |> join\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203795,"user_id":53,"body":"function reverse_letter(string)\n  return join(reverse([c for c in string if isletter(c)]))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"58b8d22560873d9068000085":[{"id":203796,"user_id":881,"body":"faulty_odometer(n::Integer) = foldr((a, b) -> (a > 3 ? a - 1 : a) + 9b, digits(n), init=0)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203797,"user_id":168,"body":"function faulty_odometer(n::Integer)\n  parse(Int, join(reverse(replace(x -> x > 4 ? x - 1 : x, digits(n)))), base = 9)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203798,"user_id":null,"body":"function faulty_odometer(n::Integer)\n  len = length(string(n))\n  y = (x>='5' ? parse(Int,x)-1 : parse(Int,x) for x in string(n))\n  sum(map(x -> 9^(x[1]-1)*x[2], Iterators.zip(len:-1:1, y)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203799,"user_id":null,"body":"function faulty_odometer(n::Integer)\n    sum((9^(i-1)) * (findfirst(m, \"012356789\")-1) for (i,m) in enumerate(reverse(string(n))))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203800,"user_id":480,"body":"function faulty_odometer(n::Integer)\n  parse(Int,join(map(c-> c>'4' ? c-1 : c,string(n)));base=9)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203801,"user_id":null,"body":"faulty_odometer(n::Integer) = parse(Int,string([d>4 ? d-1 : d for d in reverse(digits(n))]...),base=9)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203802,"user_id":null,"body":"function faulty_odometer(n::Integer)\n    n - four_count(n)\nend\n\nfunction four_count(n)                                       #returns the count of numbers skipped before n\n    n < 5 && return 0\n    skipped(x) = x == 0 ? 0 : 10^(x-1) + 9 * skipped(x-1)    #returns the count of numbers skipped before 10^x\n    m = Int(floor(log10(n)))                                 #power of 10 of the most significant digit of n\n    fours = skipped(m)\n    sum([i == 4 ? 10^m : fours for i in 1:(n \u00f7 10^m)]) + four_count(n % 10^m)  #sums the count of missing numbers for order\nend                                                                            #10^x term and recurses on the remainder","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203803,"user_id":53,"body":"function faulty_odometer(n::Integer)\n  if n == 0\n    n\n  else\n    d = n % 10\n    if d > 4\n      d -= 1\n    end\n    d + 9 * faulty_odometer(n \u00f7 10)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203804,"user_id":50,"body":"function faulty_odometer(n::Integer)\n  o=0\n  i=0\n  while n != 0\n    k=n%10\n    n=floor(n\/10)\n    if k > 4\n       k=k-1\n    end\n    o=o+k*9^i\n    i=i+1\n  end\n  return o\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"58c21c4ff130b7cab400009e":[{"id":203805,"user_id":null,"body":"function guess_hat_color(a, b, c, d)\n  b == c ? 1 : 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203806,"user_id":527,"body":"guess_hat_color(_, b, c, _) = 1 + (b \u2260 c)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203807,"user_id":168,"body":"function guess_hat_color(a, b, c, d)\n  b != c ? 2 : 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203808,"user_id":2525,"body":"function guess_hat_color(a,b,c,d)\n    if b==c\n        1\n    else\n        2\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203809,"user_id":527,"body":"function guess_hat_color(_a, b, c, _d)\n  b == c ? 1 : 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203810,"user_id":421,"body":"guess_hat_color(a,b,c,d) = b == c ? 1 : 2","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"58cb43f4256836ed95000f97":[{"id":203811,"user_id":421,"body":"function find_difference(a::AbstractVector{<:Integer}, b::AbstractVector{<:Integer})::Int\n   abs(prod(a) - prod(b))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203812,"user_id":null,"body":"find_difference(a::AbstractVector{<:Integer}, b::AbstractVector{<:Integer})::Int = abs(prod(a)-prod(b))","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203813,"user_id":null,"body":"function find_difference(a::AbstractVector{<:Integer}, b::AbstractVector{<:Integer})::Int\n    return abs(a[1]a[2]a[3] - b[1]b[2]b[3])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203814,"user_id":53,"body":"function find_difference(a::AbstractVector{<:Integer}, b::AbstractVector{<:Integer})::Int\n    abs(a[1] * a[2] * a[3] - b[1] * b[2] * b[3])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203815,"user_id":527,"body":"find_difference((ax, ay, az), (bx, by, bz)) = abs(ax * ay * az - bx * by * bz)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203816,"user_id":209,"body":"function find_difference(a::AbstractVector{<:Integer}, b::AbstractVector{<:Integer})::Int\n    abs(reduce(*,a)-reduce(*,b))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203817,"user_id":881,"body":"find_difference(a, b) = abs(prod(a) - prod(b))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"58ce8725c835848ad6000007":[{"id":203818,"user_id":527,"body":"module Potat\n    export potatoes\n    function potatoes(p0, w0, p1)\n        div(w0 * (100 - p0), (100 - p1))\n    end\nend ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203819,"user_id":492,"body":"module Potat\n    export potatoes\n    function potatoes(p0, w0, p1)\n        Int(floor(w0 * (100.0 - p0) \/ (100.0 - p1)))\n    end\nend \n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203820,"user_id":null,"body":"module Potat\n    export potatoes\n    potatoes(p0, w0, p1) = Int(trunc((w0*(100-p0))\/(100-p1)))\nend \n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203821,"user_id":null,"body":"module Potat\n    export potatoes\n    potatoes(p0, w0, p1) = floor(w0 * (100 - p0) \/ (100 - p1))\nend \n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203822,"user_id":null,"body":"module Potat\n    export potatoes\n    function potatoes(p0, w0, p1)\n      dry_matter = w0 - p0 \/ 100 * w0\n      watter = p1 \/ (100 - p1) * dry_matter\n      trunc(Int32, dry_matter + watter + 0.000001)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203823,"user_id":572,"body":"module Potat\n    export potatoes\n    function potatoes(p0, w0, p1)\n        return fld(w0*(100 - p0), (100 - p1))\n    end\nend \n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203824,"user_id":null,"body":"module Potat\n    export potatoes\n    function potatoes(p0, w0, p1)\n      return floor(w0*(100-p0)\/(100-p1))\n    end\nend \n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203825,"user_id":null,"body":"module Potat\n    export potatoes\n    # p0: initial percet of water [0:100]\n    # w0: initial weight [kg]\n    # p1: final percet of water [0:100]\n    #=\n        w = (p0\/100)w0  # water content [kg]\n        m = w0-w        # matter content [kg]\n        pm = 100-p1     # percent of matter [0:100]\n        w1 = m\/pm       # final weight [kg]\n    =#\n    # one-liner, simplified\n    potatoes(p0::Int, w0::Int, p1::Int) = trunc( (100-p0)w0 \/ (100-p1) )\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203826,"user_id":null,"body":"module Potat\n    export potatoes\n    # p0: initial percet of water [0:100]\n    # w0: initial weight [kg]\n    # p1: final percet of water [0:100]\n    #=\n        w = (p0\/100)w0  # water content [kg]\n        m = w0-w        # matter content [kg]\n        pm = 100-p1     # percent of matter [0:100]\n        w1 = m\/pm       # final weight [kg]\n    =#\n    # one-liner, simplified\n    potatoes(p0::Int, w0::Int, p1::Int) = trunc(Float32( (100-p0)w0 \/ (100-p1) ))\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203827,"user_id":null,"body":"module Potat\n    export potatoes\n    # p0: initial percet of water [0:100]\n    # w0: initial weight [kg]\n    # p1: final percet of water [0:100]\n    #=\n        w = (p0\/100)w0  # water content [kg]\n        m = w0-w        # matter content [kg]\n        pm = 1-(p1\/100) # percent of matter [0:100]\n        w1 = m\/pm       # final weight [kg]\n    =#\n    # one-liner, simplified\n    potatoes(p0::Int, w0::Int, p1::Int) = trunc(Float32( (1-p0\/100)w0 \/ (1-p1\/100) ))\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"58e24788e24ddee28e000053":[{"id":203828,"user_id":null,"body":"mutable struct State \n  registers::Dict\n  step::Int64\nend\nmov(s::State,x,y::Integer)                    = (s.registers[x] = y)\nmov(s::State,x,y::SubString{String})          = (s.registers[x] = s.registers[y])\ninc(s::State,x,y)                             = (s.registers[x] += 1)\ndec(s::State,x,y)                             = (s.registers[x] -= 1)\njnz(s::State,x::Integer,          y::Integer) = (x!=0 && (s.step+=y-1))\njnz(s::State,x::SubString{String},y::Integer) = (s.registers[x]!=0 && (s.step+=y-1))\n\nfunction simple_assembler(program::Array{String,1})::Dict{String,Number}\n  status = State(Dict{String,Number}(),1)\n  commands = Dict\n  lines = []\n  for command in program\n    args = split(command,' ')\n    push!(args,\"\")\n    arg2 = tryparse(Int, args[2])\n    arg3 = tryparse(Int, args[3])\n    push!(lines, ( getfield(Main, Symbol(args[1])),arg2==nothing ? args[2] : arg2, arg3==nothing ? args[3] : arg3) )\n  end\n  while status.step <= length(program)\n    lines[status.step][1]( status, lines[status.step][2], lines[status.step][3] )\n    status.step += 1\n  end\n  return status.registers\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203829,"user_id":null,"body":"function simple_assembler(program::Array{String,1})::Dict{String,Number}\n  registers = Array{Union{Int64,Nothing},1}(nothing,26)\n  charshift = Int('a')-1\n  lines = []\n  for command in program\n    args = split(command)\n    push!(args,\" \")\n    arg2 = tryparse(Int, args[2])\n    x = arg2==nothing ? Int(args[2][1])-charshift : arg2\n    arg3 = tryparse(Int, args[3])\n    y = arg3==nothing ? Int(args[3][1])-charshift : arg3\n    if args[1] == \"mov\"\n        push!(lines, arg3==nothing ? ()->registers[x] = registers[y] : ()->registers[x] = y )\n    elseif args[1] == \"inc\"\n        push!(lines, ()->registers[x] += 1)\n    elseif args[1] == \"dec\"\n        push!(lines, ()->registers[x] -= 1)\n    elseif args[1] == \"jnz\"\n        push!(lines, arg2==nothing ? ()->(registers[x]!=0 && (step+=y-1)) : ()->(x!=0 && (step+=y-1) ))\n    end\n  end\n  step = 1\n  while 0 < step <= length(lines)\n    lines[step]()\n    step += 1\n  end\n  return Dict(string(Char(i+charshift))=>value for (i,value) in enumerate(registers) if value!=nothing)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203830,"user_id":null,"body":"mov(r,x,y::Integer)                    = (r[x] = y)\nmov(r,x,y::SubString{String})          = (r[x] = r[y])\ninc(r,x,y)                             = (r[x] += 1)\ndec(r,x,y)                             = (r[x] -= 1)\njnz(r,x::Integer,          y::Integer) = (x!=0 && (r[\"step\"]+=y-1))\njnz(r,x::SubString{String},y::Integer) = (r[x]!=0 && (r[\"step\"]+=y-1))\n\nfunction simple_assembler(program::Array{String,1})::Dict{String,Number}\n  registers = Dict{String,Number}(\"step\"=>1)\n  lines = []\n  for command in program\n    args = split(command,' ')\n    push!(args,\"\")\n    arg2 = tryparse(Int, args[2])\n    arg3 = tryparse(Int, args[3])\n    push!(lines, ( getfield(Main, Symbol(args[1])),arg2==nothing ? args[2] : arg2, arg3==nothing ? args[3] : arg3) )\n  end\n  while registers[\"step\"] <= length(lines)\n    lines[registers[\"step\"]][1]( registers, lines[registers[\"step\"]][2], lines[registers[\"step\"]][3] )\n    registers[\"step\"] += 1\n  end\n  delete!(registers,\"step\")\n  return registers\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203831,"user_id":null,"body":"function simple_assembler(program::Array{String,1})::Dict{String,Number}\n  registers = Dict()\n  ix = 1\n  while ix<=length(program)\n    cmd = split(program[ix], \" \")\n    if cmd[1] == \"mov\" \n      x, y = cmd[2:3]\n      if tryparse(Int, y) !== nothing\n        registers[x] = tryparse(Int, y)\n      else\n        registers[x] = registers[y]\n      end\n    elseif cmd[1] == \"inc\" \n      registers[cmd[2]] += 1\n    elseif cmd[1] == \"dec\" \n      registers[cmd[2]] -= 1\n    elseif cmd[1] == \"jnz\" \n      x, step = cmd[2:3]\n      if (tryparse(Int, x) !== nothing && tryparse(Int, x) !=0) || (tryparse(Int, x)==nothing  && registers[x]!=0)\n        ix += tryparse(Int64, step)\n        continue\n      end\n    end\n    ix += 1\n  end\n  \n  return registers\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203832,"user_id":null,"body":"function simple_assembler(program::Array{String,1})::Dict{String,Number}\n    retVal = Dict{String, Int}()\n    i = 0\n    while i < length(program)\n        i += 1\n        instructs = split(program[i], \" \")\n        if instructs[1] == \"mov\"\n            retVal[instructs[2]] = length(instructs[3]) == 1 && !isnumeric(only(instructs[3])) ? retVal[instructs[3]] : parse(Int,instructs[3])\n        elseif instructs[1] == \"inc\"\n            retVal[instructs[2]] += 1\n        elseif instructs[1] == \"dec\"\n            retVal[instructs[2]] -= 1\n        elseif instructs[1] == \"jnz\"\n            if isnumeric(only(instructs[2]))\n                i += instructs[2] \u2260 0 ? parse(Int, instructs[3]) - 1 : 0\n            else\n                i += retVal[instructs[2]] \u2260 0 ? parse(Int, instructs[3]) - 1 : 0\n            end\n        end\n    end\n    retVal\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203833,"user_id":null,"body":"function simple_assembler(program::Array{String,1})::Dict{String,Number}\n  res = Dict{String,Number}()\n  local i = 1\n  while i != (length(program) + 1)\n    p = program[i]\n    inst = split(p)\n    if inst[1] == \"mov\"\n      if tryparse(Float64,inst[3]) == nothing\n        res[inst[2]] = res[inst[3]]\n      else\n        res[inst[2]] = parse(Int,inst[3])\n      end\n    elseif inst[1] == \"inc\"\n      res[inst[2]] = res[inst[2]] + 1\n    elseif inst[1] == \"dec\"\n      res[inst[2]] = res[inst[2]] - 1\n    else\n      if tryparse(Float64,inst[3]) == nothing\n        num = res[inst[3]]\n      else\n        num = parse(Int,inst[3])\n      end\n      if tryparse(Float64,inst[2]) == nothing\n        num0 = res[inst[2]]\n      else\n        num0 = parse(Int,inst[2])\n      end\n      if num0 != 0\n        i = i + num - 1\n      end\n      if i > length(program) || i < 1\n        i = length(program)\n      end\n    end\n    i = i + 1\n  end\n  return res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203834,"user_id":null,"body":"function simple_assembler(program::Array{String,1})::Dict{String,Number}\n    list, reg, i = split.(program), Dict(), 1\n    while i <= length(program)\n        inst = list[i]\n        inst[1] == \"mov\" && (haskey(reg, inst[3]) ? (reg[inst[2]] = reg[inst[3]]; i += 1) : (reg[inst[2]] = parse(Int, inst[3]); i += 1)) \n        inst[1] == \"jnz\" && (inst[3] == '0' || (haskey(reg, inst[2]) && reg[inst[2]] == 0) ? (i += 1) : (i += parse(Int, inst[3])))\n        inst[1] == \"inc\" && (reg[inst[2]] += 1; i += 1)\n        inst[1] == \"dec\" && (reg[inst[2]] -= 1; i += 1)\n    end\n    reg\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203835,"user_id":null,"body":"# Is this overkill? Probably. Did it help me learn multiple dispatch? Definitely.\n\nabstract type AbstractInstruction end\n\nstruct MoveInstruction{T} <: AbstractInstruction\n    target::AbstractString\n    value::T\nend\n\nstruct DecInstruction <: AbstractInstruction\n    target::AbstractString\nend\n\nstruct IncInstruction <: AbstractInstruction\n    target::AbstractString\nend\n\nstruct JumpInstruction{T, V} <: AbstractInstruction\n    target::T\n    value::V\nend\n\nmutable struct ProgramState\n    registry::Dict{String, Number}\n    cursor::Int\nend\n\nfunction parseifable(value::Any)::Union{Int, Any}\n    return isnothing(tryparse(Int, value)) ? value : parse(Int, value);\nend\n\nfunction parseinstruction(instruction::String)::AbstractInstruction\n    parts = split(instruction, \" \");\n    if parts[1] == \"mov\"\n        return MoveInstruction(parts[2], parseifable(parts[3]));\n    end\n    if parts[1] == \"dec\"\n        return DecInstruction(parts[2]);\n    end\n    if parts[1] == \"inc\"\n        return IncInstruction(parts[2]);\n    end\n    if parts[1] == \"jnz\"\n        return JumpInstruction(parseifable(parts[2]), parseifable(parts[3]));\n    end\nend\n\nfunction runinstruction!(instr::MoveInstruction{SubString{String}}, state::ProgramState)\n    state.registry[instr.target] = state.registry[instr.value];\n    state.cursor += 1;\nend\n\nfunction runinstruction!(instr::MoveInstruction{Int}, state::ProgramState)\n    state.registry[instr.target] = instr.value;\n    state.cursor += 1;\nend\n\nfunction runinstruction!(instr::DecInstruction, state::ProgramState)\n    state.registry[instr.target] -= 1;\n    state.cursor += 1;\nend\n\nfunction runinstruction!(instr::IncInstruction, state::ProgramState)\n    state.registry[instr.target] += 1;\n    state.cursor += 1;\nend\n\nfunction runinstruction!(instr::JumpInstruction{SubString{String}, SubString{String}},\n                         state::ProgramState)\n    if state.registry[instr.target] != 0\n        state.cursor += state.registry[instr.value];\n    else\n        state.cursor += 1;\n    end\nend\n \nfunction runinstruction!(instr::JumpInstruction{SubString{String}, Int}, state::ProgramState)\n    if state.registry[instr.target] != 0\n        state.cursor += instr.value;\n    else\n        state.cursor += 1;\n    end\nend\n\nfunction runinstruction!(instr::JumpInstruction{Int, SubString{String}}, state::ProgramState)\n    if instr.target != 0\n        state.cursor += state.registry[instr.value];\n    else\n        state.cursor += 1;\n    end\nend\n \nfunction runinstruction!(instr::JumpInstruction{Int, Int}, state::ProgramState)\n    if instr.target != 0\n        state.cursor += instr.value;\n    else\n        state.cursor += 1;\n    end\nend\n\nfunction simple_assembler(program::Array{String, 1})::Dict{String, Number}\n    state = ProgramState(Dict{String, Number}(), 1);\n    instructions = parseinstruction.(program);\n    while state.cursor <= length(instructions)  \n        # println(state);\n        runinstruction!(instructions[state.cursor], state);\n    end\n    return state.registry;\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203836,"user_id":2525,"body":"function get(val, reg)::Int\n    if isletter(val[1])\n        reg[val]\n    else\n        parse(Int, val)\n    end    \nend\nfunction simple_assembler(program::Array{String,1})::Dict{String,Number}\n    registers = Dict()\n    program = [split(inst) for inst in program]\n    i = 1\n    while i \u2264 length(program)\n        inst = program[i]\n        if     inst[1]==\"mov\"\n            registers[inst[2]]  = get(inst[3], registers)\n            i += 1\n        elseif inst[1]==\"inc\"\n            registers[inst[2]] += 1\n            i += 1\n        elseif inst[1]==\"dec\"\n            registers[inst[2]] -= 1\n            i += 1\n        elseif inst[1]==\"jnz\" && get(inst[2], registers)!=0\n            i += get(inst[3], registers)\n        else\n            i += 1\n        end\n    end\n\n    registers\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203837,"user_id":null,"body":"function decode(instruction)\n  parts = split(instruction)\n  return parts[1], parts[2:end]\nend\n\nfunction fetch(expr, registers)\n  num = tryparse(Int, expr)\n  if num !== nothing\n    return num\n  else\n    return registers[expr]\n  end\nend    \n  \n\nfunction simple_assembler(program::Array{String,1})::Dict{String,Number}\n  registers = Dict{String, Int}()\n  ip = 1\n  N = length(program)\n  while ip <= N\n    code, args = decode(program[ip]) \n    if code == \"jnz\"\n      if (fetch(args[1], registers) !== 0)\n        ip += fetch(args[2], registers)\n        continue\n      end\n    end\n    if code == \"mov\"\n      registers[args[1]] = fetch(args[2], registers)\n    elseif code == \"inc\"\n      registers[args[1]] += 1\n    elseif code == \"dec\"\n      registers[args[1]] -= 1\n    end\n    ip += 1\n  end\n  return registers\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"58e6996019af2cff71000081":[{"id":203838,"user_id":null,"body":"   function ant(grid, column, row, n, dir = 0)\n      transf = [(1,3,0,-1) (1,0,-1,0) (1,1,0,1) (1,2,1,0); (0,1,0,1) (0,2,1,0) (0,3,0,-1) (0,0,-1,0)]\n      for i in 1:n\n         change = transf[grid[row,column]+1, dir+1]\n         grid[row,column] = change[1] #new color\n         dir              = change[2] #new direction\n         row             += change[3] #new row\n         column          += change[4] #new column\n         r,c = size(grid,1), size(grid,2)\n         T = typeof(grid[1])\n         if     row<1;    grid = vcat(zeros(T,c)',grid);row += 1\n         elseif row>r;    grid = vcat(grid,zeros(T,c)')\n         elseif column<1; grid = hcat(zeros(T,r),grid);column += 1\n         elseif column>c; grid = hcat(grid,zeros(T,r))\n         end\n      end\n      return grid\n    end","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203839,"user_id":null,"body":"function ant(grid, c, r, n, dir = 0)\n  n == 0 ? (return grid) : (grid = grid[:,:]) # fix to have two dimensions\n  \n  # keep track of locations and bounds\n\tS = Set(Tuple.(findall(grid .== 1)))\n  minr, minc = 1, 1\n  maxr, maxc = size(grid)\n  \n\tdirs = [(-1,0), (0,1), (1,0), (0,-1)]\n\n\tfor i in 1:n\n    # change direction and update\n\t\tif (r,c) in S\n\t\t\tdir = mod(dir+1, 4)\n\t\t\tdelete!(S, (r,c))\n\t\telse\n\t\t\tdir = mod(dir-1, 4)\n\t\t\tpush!(S, (r,c))\n\t\tend\n    # move\n\t\tr, c = (r,c) .+ dirs[dir+1]\n    # update bounds\n\t\tif dir == 0\n\t\t\tif r < minr; minr = r end\n\t\telseif dir == 1\n\t\t\tif c > maxc; maxc = c end\n\t\telseif dir == 2\n\t\t\tif r > maxr; maxr = r end\n\t\telseif dir == 3\n\t\t\tif c < minc; minc = c end\n\t\tend\n\tend\n\n  # remake grid\n\tgrid = zeros(Int, maxr - minr + 1, maxc - minc + 1)\n\tfor s in S grid[(s .- (minr, minc) .+ 1)...] = 1 end\n\treturn grid\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203840,"user_id":null,"body":"function ant(grid, column, row, n, dir = 0)\n\tfor i in 1:n\n\t\tif grid[row, column] == 1\n\t\t\tdir = mod(dir+1, 4)\n\t\t\tgrid[row, column] = 0\n\t\telse\n\t\t\tdir = mod(dir-1, 4)\n\t\t\tgrid[row, column] = 1\n\t\tend\n\n\t\tif dir == 0\n\t\t\tif row == 1\n\t\t\t\tgrid = [zeros(Int, (1,size(grid,2))); grid]\n\t\t\telse\n\t\t\t\trow -= 1\n\t\t\tend\n\t\tend\n\t\tif dir == 1\n\t\t\tif column == size(grid,2)\n\t\t\t\tgrid = [grid zeros(Int, (size(grid,1),1))]\n\t\t\tend\n\t\t\tcolumn += 1\n\t\tend\n\t\tif dir == 2\n\t\t\tif row == size(grid,1)\n\t\t\t\tgrid = [grid; zeros(Int, (1,size(grid,2)))]\n\t\t\tend\n\t\t\trow += 1\n\t\tend\n\t\tif dir == 3\n\t\t\tif column == 1\n\t\t\t\tgrid = [zeros(Int, (size(grid,1),1)) grid]\n\t\t\telse\n\t\t\t\tcolumn -= 1\n\t\t\tend\n\t\tend\n\tend\n\treturn grid\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203841,"user_id":null,"body":"function ant(grid, column, row, n, dir = 0)\n    rotations = 0\n    for i in 1:n\n        dir += grid[row, column] == 1 ? 1 : -1  # update direction\n        grid[row, column] \u22bb= 1  # flip color\n        for j in 1:mod(dir, 4)  # rotate grid so next move is north\n            row, column = size(grid, 2) - column + 1, row\n            grid = rotl90(grid[:,:])\n            rotations += 1\n        end\n        dir = 0\n        # insert row of zeros if we're on the top row; otherwise move north\n        row == 1 ? grid = [zeros(Int, size(grid, 2))' ; grid] : row -= 1\n    end\n    length(grid) == 1 ? grid : rotr90(grid, rotations)  # rotate grid back\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203842,"user_id":null,"body":"function ant(grid, c, r, n, dir = 0)\n\tn == 0 ? (return grid) : (grid = grid[:,:]) # fix to have two dimensions\n\n\t# keep track of locations and bounds\n\tS = Set([Tuple(p)...] for p in findall(grid .== 1))\n\tbounds = [[1;1] [size(grid)...]] # [minr maxr; minc maxc]\n\n\tdirs = [(-1,0), (0,1), (1,0), (0,-1)]\n\ttest = (min, max, max, min)\n\tupdate = Dict(true => (+, delete!), false => (-, push!))\n\n\tp = [r,c]\n\tfor i in 1:n\n\t\t# change direction and update\n\t\tturn, flip = update[p in S]\n\t\tdir = mod(turn(dir,1), 4)\n\t\tflip(S, p[:])\n\n\t\t# move\n\t\tp .+= dirs[dir+1]\n\n\t\t# update bounds\n\t\ti = mod(-dir,4)+1\n\t\tbounds[i] = test[dir+1](bounds[i], p[dir%2+1])\n\tend\n\n\t# remake grid\n\tgrid = zeros(Int, -(-bounds[1,:]...) + 1, -(-bounds[2,:]...) + 1)\n\tfor s in S grid[(s .- bounds[:,1] .+ 1)...] = 1 end\n\treturn grid\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203843,"user_id":null,"body":"function ant(grid, column, row, n, dir = 0)\n    rotations = 0\n    for i in 1:n\n        dir += grid[row, column] == 1 ? 1 : -1\n        grid[row, column] \u22bb= 1\n        for j in 1:mod(dir, 4)\n            row, column = size(grid, 2) - column + 1, row\n            grid = rotl90(grid[:,:])\n            rotations += 1\n        end\n        dir = 0\n        row == 1 ? grid = [fill(0, (1, size(grid, 2))) ; grid] : row -= 1\n    end\n    length(grid) == 1 ? grid : rotr90(grid, rotations)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203844,"user_id":null,"body":"function matrix_size(grid)\n  (size(grid)[1], length(size(grid))==1 ? 1 : size(grid)[2])\nend\n\nfunction expand_grid(dir, grid, row, col)\n  x,y = matrix_size(grid)\n  \n  if dir==0 || dir==2\n    exp = zeros(Int(1),y)\n    if dir==0 # north\n      ng = [exp; grid]\n      nrow, ncol = row, col \n    elseif dir==2 # south\n      ng = [grid; exp]\n      nrow, ncol = row+1, col \n    end\n  elseif dir==1 || dir==3\n    exp = zeros(x,Int(1))\n    if dir==1 # east\n      ng = hcat(grid, exp)\n      nrow, ncol = row, col+1 \n    elseif dir==3 # west\n      ng = hcat(exp, grid)\n      nrow, ncol = row, col   \n    end\n  end\n  \n  (Int.(ng), nrow, ncol)  \nend\n\nfunction ant(grid, column, row, n, dir = 0)\n  \n  i = 0\n  while i<n && (grid, column, row, n, dir)==(grid, column, row, n, dir)\n\n    # flip\n    clr = grid[row, column]\n    grid[row,column] = (grid[row,column]+1)%2\n\n    # turn\n    if clr==1 \n      dir=(dir+1)%4 \n    elseif clr==0\n      dir=(dir+3)%4 \n    end\n\n    # move            \n    x, y = matrix_size(grid)\n    if (\n        (dir==0 && row==1) ||\n        (dir==1 && column==y) || \n        (dir==2 && row==x) ||          \n        (dir==3 && column==1))\n        (grid, row, column) = expand_grid(dir, grid, row, column)\n    else\n      if dir==0 row -= 1 end\n      if dir==1 column += 1 end\n      if dir==2 row += 1 end\n      if dir==3 column -= 1 end\n    end\n    \n  i += 1\n  end\n  \n  grid\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203845,"user_id":null,"body":"function ant(grid, column, row, n, dir = 0)\n    move = Dict(0=>x->(x[1], x[2]-1), 1=>x->(x[1]+1, x[2]),\n                2=>x->(x[1], x[2]+1), 3=>x->(x[1]-1, x[2]))\n  \n    pos = (column, row)\n  \n    for iteration in 1:n\n        if grid[pos[2], pos[1]] == 1\n            dir = (dir+1)%4\n            grid[pos[2], pos[1]] = 0\n        else \n            dir = (dir-1)<0 ? (4+dir-1) : (dir-1)%4\n            grid[pos[2], pos[1]] = 1\n        end\n        pos = move[dir](pos)\n        if (dir == 1 || dir == 3)\n            if pos[1] == 0\n                m = [0 for i in 1:size(grid)[1]]\n                pos = (pos[1]+1, pos[2])\n                grid = hcat(m, grid)\n            elseif (length(size(grid)) == 1 || pos[1] > size(grid)[2])\n                println(\"eccomi\")\n                m = [0 for i in 1:size(grid)[1]]\n                grid = hcat(grid, m)\n            end            \n        elseif (dir == 2 || dir == 0)\n            if pos[2] == 0\n                m = [0 for i in 1:size(grid)[2]]\n                grid = [m'; grid]\n                pos = (pos[1], pos[2]+1)\n            elseif (dir == 2 || dir == 0) && pos[2] > size(grid)[1]\n                m = [0 for i in 1:size(grid)[2]]\n                grid = [grid; m']\n            end\n        end\n    end\n  \n    return grid\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203846,"user_id":null,"body":"\"\"\"\nA function for Langton's Ant. Returns the state of the grid after n iterations.\n\n# Input \n    grid: a two dimensional array of 1s and 0s (representing white and black cells respectively)\n    column: horizontal position of ant\n    row: ant's vertical position\n    n: number of iterations\n    dir: ant's current direction (0 - north, 1 - east, 2 - south, 3 - west), should default to 0\n\n\n# Rules\nThe ant can travel in any of the four cardinal directions at each step it takes. The ant moves according to the rules below:\n\n    White Square (represented by 1):\n    - turn 90\u00b0 right, flip the color of the square, and move forward one unit.\n    Black Square (represented by 0):\n    - turn 90\u00b0 left, flip the color of the square, and move forward one unit.\n\n    The grid has no limits and therefore if the ant moves outside the borders,\n    the grid should be expanded with 0s, respectively maintaining the rectangle shape.\n\"\"\"\nfunction ant(grid, column, row, n, dir = 0)\n\n    # just to ensure a test case \"ant([1], 1, 1, 0, 0) --> [1]\" which demands returning a vector instead of a matrix\n    if n == 0 \n        return grid\n    end\n\n    # transform any grid input into a matrix\n    if size(grid)[1] == 1 && length(size(grid)) <= 1\n        grid = reshape(grid, 1, 1)\n    elseif length(size(grid)) <= 1\n        grid = reshape(grid, 2, 1)\n    end\n    \n    # loop over the demanded iterations\n    for iter = 1:n\n        \n        # evaluate position of ant\n        if grid[row, column] == 0 # corresponds to black square\n\n            # rotate 90\u00b0 left\n            if dir == 0\n                dir = 3\n            elseif dir == 1\n                dir = 0\n            elseif dir == 2\n                dir = 1\n            elseif dir == 3\n                dir = 2\n            end\n\n            # invert colour\n            grid[row, column] = 1 \n\n        elseif grid[row, column] == 1 # corresponds to white square\n\n            # rotate 90\u00b0 right\n            if dir == 0\n                dir = 1\n            elseif dir == 1\n                dir = 2\n            elseif dir == 2\n                dir = 3\n            elseif dir == 3\n                dir = 0\n            end\n\n            # invert colour\n            grid[row, column] = 0 \n\n        end\n        \n\n        # grid extension\n        # if heading north and being on the \"northest\" row\n        if dir == 0 && row == 1\n            # add row of 0's on top of the matrix\n            grid = vcat(zeros(Int64, 1, size(grid)[2]), grid)\n            # update row counter, as matrix was shifted by one\n            row += 1\n        # if heading east and being on the \"eastest\" column\n        elseif dir == 1 && column == size(grid)[2]\n            # add columns of 0's to the right of the matrix\n            grid = hcat(grid, zeros(Int64, size(grid)[1], 1))\n        # if heading south and being on the \"southest\" row\n        elseif dir == 2 && row == size(grid)[1]\n            # add rows 0's at the bottom of the matrix\n            grid = vcat(grid, zeros(Int64, 1, size(grid)[2]))\n        # if heading west and being on \"westest\" column\n        elseif dir == 3 && column == 1\n            # add colums of 0's to the left of the matrix\n            grid = hcat(zeros(Int64, size(grid)[1], 1), grid)\n            # update column counter, as matrix was shifted by one\n            column += 1\n        end\n\n        \n        # calculate next step (position) of ant\n        if dir == 0\n            row -= 1\n        elseif dir == 1\n            column += 1\n        elseif dir == 2\n            row += 1\n        elseif dir == 3\n            column -= 1\n        end\n\n    end\n\n    return grid\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203847,"user_id":null,"body":"function ant(grid, column, row, n, dir = 0)\n  if n == 0\n    return grid\n  end\n  \n  dims = size(grid)\n  if length(dims) == 1\n    grid = reshape(grid, dims[1], 1)\n  end\n  \n  while n > 0\n    nrows, ncols = size(grid)\n    sign = 2 * grid[row, column] - 1\n    dir = mod(dir + sign, 4)\n    grid[row, column] = 1 - grid[row, column]\n    \n    if dir == 0  # up\n      row -= 1\n      if row < 1\n        grid = vcat(zeros(Int, 1, ncols), grid)\n        row += 1\n      end\n    elseif dir == 2  # down\n      row += 1\n      if row > nrows\n        grid = vcat(grid, zeros(Int, 1, ncols))\n      end\n    elseif dir == 1  # right\n      column += 1\n      if column > ncols\n        grid = hcat(grid, zeros(Int, nrows, 1))\n      end\n    else  # left\n      column -= 1\n      if column < 1\n        grid = hcat(zeros(Int, nrows, 1), grid)\n        column += 1\n      end\n    end\n    n -= 1\n  end\n  \n  return grid\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"58f5c63f1e26ecda7e000029":[{"id":203848,"user_id":null,"body":"function wave(s::String)\n  # your code here\n  [s[1:i - 1] * uppercase(s[i]) * s[i + 1: end] for i in 1:length(s) if s[i] != ' ']\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203849,"user_id":null,"body":"function wave(s::String)\n  outp = []\n  for i = 1:length(s) !isspace(s[i]) && push!(outp, s[1:i-1] * uppercase(s[i]) * s[i+1:length(s)]) end\n  outp\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203850,"user_id":null,"body":"wave(str) = [str[1:i-1] * uppercase(c) * str[i+1:end] for (i, c) in enumerate(str) if isletter(c)]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203851,"user_id":null,"body":"function wave(s::String)\n  str_copy = broadcast(string, collect(s))\n  arr_out = []\n  \n  if(length(str_copy) == 0)\n    return(arr_out)\n  end\n  \n  for i in (1:length(str_copy))                  # note, str_copy is an array of *strings*\n    if(str_copy[i] == \" \")\n      continue\n    else\n      str_copy[i] = uppercase(str_copy[i])\n      tmp = string(str_copy...)                   # temporary uppercasing on target letter\n      push!(arr_out, tmp)                         # stringify, then save current \"wave\"\n      str_copy[i] = lowercase(str_copy[i])        # reset for next run\n    end\n  end\n  \nreturn(arr_out)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203852,"user_id":null,"body":"function wave(s::String)\n  s = lowercase(s)\n  res = []\n  for (index, value) in enumerate(s)\n    if value != ' '\n      push!(res,s[begin:index-1] * uppercase(s[index]) * s[index+1:end])\n    end\n  end\n  res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203853,"user_id":null,"body":"\"\"\"\nFunction that turns a string into a Mexican Wave. Returns a string in an array where an uppercase letter is\na person standing up. If the character in the string is whitespace then pass over it as if it was an empty seat.\n\"\"\"\nfunction wave(s::String)\n    # first idea\n    # [[if isletter(s[i]) s[1:i-1] * uppercase(s[i]) * s[i+1:end] else nothing end] for i = 1:length(s)]\n    # but don't know how to use continue instead of nothing in the else part such that punctuation symbols,\n    # numbbers and white spaces will be skipped\n    \n    # second idea\n    # initialise empty array for the strings later\n    output = Array{String, 1}([])\n    # iterate over every character in the input string\n    for i = 1:length(s)\n        # if a chararacter is not a letter, continue to the next iteration\n        if isletter(s[i]) == false\n            continue\n        end\n        # string manipulation for the mexican wave\n        # use the chars before and after the current iteration\n        # make the current iteration uppercase\n        push!(output, s[1:i-1] * uppercase(s[i]) * s[i+1:end])\n    end\n\n    return output\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203854,"user_id":null,"body":"function wave(s::String)\n    retVal = Vector{String}()\n    for i \u2208 1:length(s)\n        if !(isspace(s[i]))\n            temp = s[1:i-1] * uppercase(s[i]) * s[(i+1):end]\n            push!(retVal, temp)\n        end\n    end\n    return retVal\n  end","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203855,"user_id":null,"body":"function setuppercase(index::Int, string::String)\n  string[1:index - 1] * uppercase(string[index]) * string[index + 1: length(string)]\nend\n\nfunction wave(s::String)\n  [setuppercase(i, s) for i = 1:length(s) if s[i] != ' ']\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203856,"user_id":null,"body":"function wave(s::String)\n    [s[1:i-1] * uppercase(s[i]) * s[i+1:end] for i in eachindex(s) if s[i] != ' ']\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203857,"user_id":null,"body":"function wave(s::String)\n  ret = []\n  for (i,c) in enumerate(s)\n    if c!=' '\n      push!(ret, string(s[1:i-1], uppercasefirst(s[i:end])) )\n    end\n  end\n  return ret \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"58f6f87a55d759439b000073":[{"id":203858,"user_id":527,"body":"function negation_value(str, val)\n  iseven(length(str)) == val\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203859,"user_id":null,"body":"function negation_value(str, val)\n  isodd(length(str)) ? !val : val\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203860,"user_id":480,"body":"function negation_value(str, val)\n  replace(str,\"!!\"=>\"\")==\"\" ? val : !val\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203861,"user_id":null,"body":"negation_value(str, val) = isodd(length(str)) ? !val : val","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203862,"user_id":null,"body":"negation_value(str, val) = iseven(length(str)) ? val : !val","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203863,"user_id":2525,"body":"function negation_value(str, val)\n    (length(str)%2==1) \u22bb val\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203864,"user_id":null,"body":"function negation_value(str, val)\n    for s in str\n        val = !val\n    end\n    val\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203865,"user_id":421,"body":"function negation_value(str, val)\n  iseven(count(c->c=='!', str)) ? !!val : !val\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203866,"user_id":209,"body":"function negation_value(str, val)\n  length(str) % 2 == 0 ? val : !val\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203867,"user_id":881,"body":"negation_value(str, val) = val \u22bb isodd(length(str))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"58f8a3a27a5c28d92e000144":[{"id":203868,"user_id":null,"body":"function first_non_consecutive(arr)\n  for i in 2:length(arr)\n    arr[i] != 1 + arr[i-1] && return arr[i]\n  end\n  nothing\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203869,"user_id":1474,"body":"function first_non_consecutive(arr)\n  for (i, j) in zip([min(arr...):max(arr...);], arr)\n    if i != j\n      return j\n    end\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203870,"user_id":null,"body":"function first_non_consecutive(arr)\n  try\n      for i=1:length(arr)\n        if(arr[i+1]-arr[i]==1)\n          continue\n        else\n          return arr[i+1]\n          break\n        end\n      end\n  catch\n    return nothing\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203871,"user_id":null,"body":"function first_non_consecutive(arr)\n  for i in 2:length(arr)\n    abs(arr[i] - arr[i-1]) != 1 && return arr[i]\n  end\n  nothing\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203872,"user_id":76,"body":"function first_non_consecutive(arr)\n  nonconsecutives = [n for (i, n) in enumerate(arr) if i > 1 && n - arr[i-1] != 1]\n  return length(nonconsecutives) > 0 ? nonconsecutives[1] : nothing\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203873,"user_id":null,"body":"function first_non_consecutive(arr)\n  for i in 1:length(arr)-1\n    arr[i+1]-arr[i] == 1 ? continue : return arr[i+1]\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203874,"user_id":null,"body":"function first_non_consecutive(arr)\n  for i in 2:length(arr)\n    if !isone(arr[i] - arr[i - 1])\n      return arr[i]\n    end\n  end\n  \n  return nothing\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203875,"user_id":null,"body":"function first_non_consecutive(arr)\n  for i = 2:length(arr)\n    if arr[i]-arr[i-1] != 1\n      return arr[i]\n    end\n  end\n  return nothing\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203876,"user_id":null,"body":"first_non_consecutive(arr) = for i in 1:length(arr)-1 !isone(abs(arr[i]-arr[i+1])) && return arr[i+1] end","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203877,"user_id":null,"body":"function first_non_consecutive(arr)\n  for (i, x) in enumerate(arr)\n#    if i > 1 && x - arr[i-1] != 1\n    if x > arr[1] + i - 1 \n      return x\n    end\n  end\n  return nothing\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5901f361927288d961000013":[{"id":203878,"user_id":null,"body":"function product(values)\n  return values \u2208 (nothing,[]) ? nothing : *(values...)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203879,"user_id":null,"body":"\"\"\"\n  product(values)\n  \nReturns product of all numbers in a numeric array.\nReturns nothing if param is nothing or array is empty.  \n\"\"\"\nfunction product(values)\n  return (values == nothing) || (values == []) ? nothing : prod(values)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203880,"user_id":null,"body":"\"\"\"\n  product(values)\n  \nReturns product of all numbers in a numeric array.\nReturns nothing if param is nothing or array is empty.  \n\"\"\"\nfunction product(values)\n  return values == nothing || isempty(values) ? nothing : reduce(*,values)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203881,"user_id":null,"body":"\"\"\"\n  product(values)\n  \nReturns product of all numbers in a numeric array.\nReturns nothing if param is nothing or array is empty.  \n\"\"\"\nfunction product(values)\n  values == nothing || values == [] ? nothing : prod(values)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203882,"user_id":2525,"body":"function product(values)\n    try\n        prod(values)\n    catch e\n        nothing\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203883,"user_id":null,"body":"product(values) = isnothing(values) || isempty(values) ? nothing : prod(values)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203884,"user_id":null,"body":"\"\"\"\n  product(values)\n  \nReturns product of all numbers in a numeric array.\nReturns nothing if param is nothing or array is empty.  \n\"\"\"\nfunction product(values)\n  values isa Array && length(values) > 0 ? prod(values) : nothing\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203885,"user_id":544,"body":"\"\"\"\n  product(values)\n  \nReturns product of all numbers in a numeric array.\nReturns nothing if param is nothing or array is empty.  \n\"\"\"\nfunction product(values)\n  if isnothing(values) || isempty(values)\n    nothing\n  else\n    reduce(*, values)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203886,"user_id":null,"body":"\"\"\"\n  product(values)\n  \nReturns product of all numbers in a numeric array.\nReturns nothing if param is nothing or array is empty.  \n\"\"\"\nfunction product(values)\n  (values == nothing || isempty(values)) ? nothing : prod(values)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203887,"user_id":759,"body":"\"\"\"\n  product(values)\n  \nReturns product of all numbers in a numeric array.\nReturns nothing if param is nothing or array is empty.  \n\"\"\"\nproduct(values)=values in([],nothing) ? nothing : prod(values)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5906436806d25f846400009b":[{"id":203888,"user_id":421,"body":"function x(n)\n  join((join(i == j || j == n - i + 1 ? \"\u25a0\" : \"\u25a1\" for j in 1:n) for i in 1:n), \"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203889,"user_id":null,"body":"x(n) = join([[i == j || (i == n - j + 1) ? '\u25a0' : '\u25a1' for i in 1:n] |> join for j in 1:n], \"\n\")","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203890,"user_id":null,"body":"function x(n)\n  a = Array{Char}(n*n+n-1)\n  for i in 1:n\n    for j in 1:n\n      a[(i-1)*(n+1)+j] = j==i || i==n-j+1? '\u25a0': '\u25a1'\n    end\n    if i<n; a[i*(n+1)] = '\n' end\n  end\n  join(a)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203891,"user_id":null,"body":"function x(n)\n    should_newline(x) = x % n == 0 && x != 0\n    should_do_nothing(j) = j == n - 1\n    get_plot(i, j) = (i == j || (i == n - j - 1)) ? \"\u25a0\" : \"\u25a1\"\n    shapes = [\n        [should_newline(j) ? (should_do_nothing(i) ? \"\" : \"\n\") : get_plot(i, j)\n            for j in 0:n\n        ]\n        for i in 0:n - 1\n    ]\n    return join(collect(Iterators.flatten(shapes)), \"\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203892,"user_id":480,"body":"function x(n::Int)::String\n  join([join(string(i==j||i+j==n+1 ? \"\u25a0\" : \"\u25a1\") for j=1:n) for i=1:n],\"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203893,"user_id":null,"body":"function x(n)\n    X = fill(\"\u25a1\", (n, n))\n    for i in 1:n\n        X[i, i], X[i, end+1-i] = \"\u25a0\", \"\u25a0\"\n    end\n    join([join(X[j, :]) for j in 1:n], '\n')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203894,"user_id":null,"body":"function x(n)\n  if n == 1\n    \"\u25a0\"\n  else\n    '\u25a0' * '\u25a1'^(n - 2) * \"\u25a0\n\" * join(map(row -> '\u25a1' * row * '\u25a1', split(x(n - 2))), '\n') * \"\n\u25a0\" * '\u25a1'^(n - 2) * '\u25a0'\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203895,"user_id":null,"body":"function x(n)\n    s = \"\"\n    for row in 1:n\n        s *= join([((row == column || column == n - row + 1) ? \"\u25a0\" : \"\u25a1\") for column in 1:n])\n        if row != n\n            s *= \"\n\"\n        end\n    end\n    return s\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203896,"user_id":2525,"body":"function x(n)\n    shape = [ [\"\u25a1\" for j in 1:n] for i in 1:n]\n    for i in 1:n\n        shape[i][i]     = \"\u25a0\"\n        shape[i][n-i+1] = \"\u25a0\"\n    end\n    join([join(l) for l in shape], \"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203897,"user_id":null,"body":"function x(n)\n   join(rotl90(hcat([(i == j || i+j == n+1) ? '\u25a0' : '\u25a1' for i in 1:n, j in 1:n], ['\n' for i in 1:n])))[2:end]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5907f258d296b7cc7b000053":[{"id":203898,"user_id":480,"body":"function kthdivisor(n::Integer, k::Integer)::Integer\n  c=0\n  for d=1:n\n    if mod(n,d)==0\n      c+=1\n      if c==k\n        return d\n      end\n    end\n  end\n  -1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203899,"user_id":null,"body":"function kthdivisor(n::Integer, k::Integer)::Integer\n  # coding and coding...\n  divisors = []\n  for d in 1:n+1\n    if n % d == 0\n      append!(divisors, d)\n    else\n        d = d + 1\n      end\n    end\n  if length(divisors) < k\n    return -1\n  else\n    return divisors[k]\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203900,"user_id":null,"body":"function kthdivisor(n::Integer, k::Integer)::Integer\n    bottom, top = [], []\n    for i in 1:sqrt(n)\n        if n % i == 0\n            push!(bottom, i)\n            i != n \u00f7 i && (push!(top, n \u00f7 i))\n        end\n    end\n    k \u2264 length(bottom)+length(top) ? vcat(bottom, reverse(top))[k] : -1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203901,"user_id":2525,"body":"function kthdivisor(n::Integer, k::Integer)::Integer\n    for i in 1:n\n        if n%i == 0\n            k -= 1\n        end\n        if k==0\n            return i\n        end\n    end\n    return -1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203902,"user_id":null,"body":"function kthdivisor(n::Integer, k::Integer)::Integer\n  divisors = [1, n]\n  for i in 2:floor(sqrt(n))\n    n % i == 0 && push!(divisors, i, div(n, i))\n  end\n  unique!(divisors)\n  k > length(divisors) && return -1\n  sort(divisors)[k]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203903,"user_id":null,"body":"function kthdivisor(n::Integer, k::Integer)::Integer\n  i = 0\n  d = 0\n  while d < k\n    i += 1\n    if n % i == 0\n      d += 1\n    end\n    if i > n\n      return -1\n    end\n  end\n  i\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203904,"user_id":null,"body":"function divisors(m)\n  ret = [1,m]\n  for i in 2:sqrt(m)\n    if m%i == 0\n      append!(ret, [i, div(m,i)])\n    end\n  end\n  sort(unique(ret))\nend\n      \nfunction kthdivisor(n::Integer, k::Integer)::Integer\n  try\n    divisors(n)[k]\n  catch\n    -1\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203905,"user_id":881,"body":"function kthdivisor(n::Integer, k::Integer)::Integer\n  for i in 1:n\n    if n % i == 0\n      k -= 1\n      if k == 0\n        return i\n      end\n    end\n  end\n  -1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"590e03aef55cab099a0002e8":[{"id":203906,"user_id":null,"body":"function incrementer(nums)\n  for (i, n) in enumerate(nums)\n    nums[i] = (n + i) % 10\n  end\n  nums\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203907,"user_id":53,"body":"function incrementer(nums)\n   [ (e+i)%10 for (i,e)=enumerate(nums) ]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203908,"user_id":759,"body":"incrementer(nums) = map((a) -> (a[1] + a[2]) % 10, enumerate(nums))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203909,"user_id":527,"body":"function incrementer(nums)\n  [(n + i) % 10 for (i, n) in enumerate(nums)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203910,"user_id":527,"body":"function incrementer(nums)\n  (nums .+ eachindex(nums)) .% 10\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203911,"user_id":null,"body":"incrementer(nums) = (nums .+ (1:length(nums))) .% 10","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203912,"user_id":null,"body":"function incrementer(nums)\n  for i in 1:length(nums)\n    nums[i] += i\n    nums[i] %= 10\n  end\n  nums\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203913,"user_id":null,"body":"function incrementer(nums)\n  for i in 1:length(nums)\n    n = nums[i]+i;\n    if n > 9\n      n = n % 10;\n    end\n    nums[i] = n;\n  end\n  return nums\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203914,"user_id":null,"body":"function incrementer(nums)\n    (nums + collect(eachindex(nums))) .% 10\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203915,"user_id":null,"body":"function incrementer(nums)\n \n  a = Int[]\n  for (i,v) in enumerate(nums)\n   push!(a,mod(v+i,10))\n  \n  end\n  return a\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"590fca79b5f8a69285000465":[{"id":203916,"user_id":759,"body":"function apples_distribution(apples, boxcapacity, maxresidue)\n  res = 0\n  for i in 1:boxcapacity\n    apples >= i && (apples % i) <= maxresidue && (res += 1)\n  end\n  res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203917,"user_id":480,"body":"function apples_distribution(apples, boxcapacity, maxresidue)\n    dist=0\n  for i in 1:boxcapacity\n    if apples%i <= maxresidue\n      dist+=1\n    end\n  end\n  return dist\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203918,"user_id":null,"body":"apples_distribution(apples, boxcap, maxr) = sum(any(x-> x % n == 0, apples-maxr:apples) for n in 1:boxcap)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203919,"user_id":527,"body":"function apples_distribution(apples, boxcapacity, maxresidue)\n  count(c -> apples % c <= maxresidue, 1 : boxcapacity)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203920,"user_id":53,"body":"function apples_distribution(m, d, r)\n  k = 1\n  for i in 2:min(m,d)\n    if m%i <= r\n      k = k+1\n    end\n  end\n  k\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203921,"user_id":50,"body":"function apples_distribution(a, c, m)\n  o=0\n  for n in 1:c\n    if a%n<=m\n      o+=1\n      end\n    end\n  o\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203922,"user_id":881,"body":"function apples_distribution(apples, boxcapacity, maxresidue)\n    count(apples % capacity <= maxresidue for capacity in 1:boxcapacity)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"592e830e043b99888600002d":[{"id":203923,"user_id":null,"body":"char2int(char) = Int(char) - 96\n\nfunction encode(str::AbstractString, n::Integer)\n    encoding = []\n  \n    for (idx, char) in enumerate(str)    \n        char_as_int = char2int(char)\n        push!(encoding, char_as_int)\n    end\n  \n    for (idx, digit) in enumerate(encoding)\n        key = string(n)\n        keylength = length(key)\n        if idx % keylength == 0\n            index = keylength\n        else\n            index = idx % keylength\n        end\n\n        numbertoadd = parse(Int64, key[index])\n        encoding[idx] += numbertoadd\n    end\n  \n    return encoding\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203924,"user_id":null,"body":"function encode(str::AbstractString, n::Integer)\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n                'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    cipher = Dict(alphabet[i] => i for i = 1:length(alphabet))\n    encoded = Vector{Int64}(undef,length(str))\n    key = string(n)\n    keypos = 0\n    for i = 1:length(str)\n      keypos == length(key) ? keypos = 1 : keypos += 1\n      encoded[i] = cipher[str[i]] + Integer(key[keypos]) - 48\n    end\n    return encoded\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203925,"user_id":null,"body":"encode(str, n) = [findfirst(==(v), 'a':'z') + parse(Int, \"$n\"[(i-1)%ndigits(n) + 1]) for (i,v) in enumerate(str)]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203926,"user_id":881,"body":"function encode(str::AbstractString, n::Integer)\n    [Int(c) + d - 96 for (c, d) in zip(str, Iterators.cycle(reverse(digits(n))))]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5933a1f8552bc2750a0000ed":[{"id":203927,"user_id":2723,"body":"nth_even(n) = 2n-2","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203928,"user_id":168,"body":"nth_even(n) = 2(n - 1)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203929,"user_id":null,"body":"nth_even(n) = n * 2 - 2","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203930,"user_id":null,"body":"nth_even(n) = (n-1)<<1","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203931,"user_id":null,"body":"nth_even(n)=~-n<<1","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203932,"user_id":1703,"body":"function nth_even(n)\n  return n * 2 - 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203933,"user_id":null,"body":"function nth_even(n)\n  2n-2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203934,"user_id":null,"body":"function nth_even(n)\n  \n  numbers = []\n  \n  if n == 1\n    return 0\n  end\n  \n  return (n-1) * 2\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203935,"user_id":434,"body":"function nth_even(n)\n   return 2*n-2;\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203936,"user_id":null,"body":"function nth_even(n)\n  n*2-2;\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"59342039eb450e39970000a6":[{"id":203937,"user_id":null,"body":"module Solution\n  export odd_count\n  \n  odd_count(n) = n \u00f7 2\n  \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203938,"user_id":null,"body":"module Solution\n  export odd_count\n  \n  function odd_count(n)\n    return div(n, 2)\n  end\n  \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203939,"user_id":759,"body":"module Solution\n  export odd_count\n  \n  odd_count(n) = n >> 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203940,"user_id":null,"body":"module Solution\n  export odd_count\n  \n  function odd_count(n)\n    if n > 0\n      return div(n,2)\n    else\n      return 0\n    end\n  end\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203941,"user_id":null,"body":"module Solution\n  export odd_count\n  \n  function odd_count(n)\n    floor(n \/ 2)\n  end\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203942,"user_id":null,"body":"module Solution\n  export odd_count\n  \n  function odd_count(n)\n    n>>1\n  end\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203943,"user_id":572,"body":"module Solution\n  export odd_count\n  \n  function odd_count(n)\n    cld((n-1),2)\n  end\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203944,"user_id":2723,"body":"module Solution\n  export odd_count\n  odd_count(n) = length(1:2:n-1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203945,"user_id":null,"body":"module Solution\n  export odd_count\n  \n  function odd_count(n)\n    if n%2==0\n    return length(Array(1:2:n))\n    else\n    return length(Array(1:2:n))-1\n    end\n  end\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203946,"user_id":null,"body":"module Solution\n  export odd_count\n  \n  function odd_count(n)\n    # your code here\n    return length(\n      collect(1:2:n-1))  end\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"59377c53e66267c8f6000027":[{"id":203947,"user_id":null,"body":"function alphabet_war(fight::AbstractString)::String\n  total = sum(map(c -> get(Dict('w' => -4, 'p' => -3, 'b' => -2, 's' => -1, 'z' => 1, 'd' => 2, 'q' => 3, 'm' => 4), c, 0), collect(fight)))\n  total == 0 ? \"Let's fight again!\" : (total > 0 ? \"Right\" : \"Left\") * \" side wins!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203948,"user_id":1474,"body":"score = Dict('w' => 4, 'p' => 3, 'b' => 2, 's' => 1, 'm' => -4, 'q' => -3, 'd' => -2, 'z' => -1)\n\nfunction alphabet_war(fight::AbstractString)::String\n  cnt = sum(get(score, c, 0) for c in fight)\n  cnt > 0 ? \"Left side wins!\" : cnt < 0 ? \"Right side wins!\" : \"Let's fight again!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203949,"user_id":1474,"body":"score = Dict('w' => 4, 'p' => 3, 'b' => 2, 's' => 1, 'm' => -4, 'q' => -3, 'd' => -2, 'z' => -1)\n\nfunction alphabet_war(fight::AbstractString)::String\n  cnt = sum(haskey(score, c) ? score[c] : 0 for c in fight)\n  cnt > 0 ? \"Left side wins!\" : cnt < 0 ? \"Right side wins!\" : \"Let's fight again!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203950,"user_id":null,"body":"function alphabet_war(fight::AbstractString)::String\n    leftPower = Dict([(\"w\", 4), (\"p\", 3), (\"b\", 2), (\"s\", 1)]);\n    rightPower = Dict([(\"m\", 4), (\"q\", 3), (\"d\", 2), (\"z\", 1)]);\n\n    leftSum = sum([haskey(leftPower, l) ? leftPower[l] : 0 for l in split(fight, \"\")]);\n    rightSum = sum([haskey(rightPower, l) ? rightPower[l] : 0 for l in split(fight, \"\")]);\n\n    if leftSum < rightSum\n        \"Right side wins!\"\n    elseif leftSum > rightSum\n        \"Left side wins!\"\n    else\n        \"Let's fight again!\"\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203951,"user_id":null,"body":"function alphabet_war(fight::AbstractString)::String\n    powersthatbe = sum(ch-> get(Dict(zip(\"wpbsozdqm\", -4:4)), ch, 0), fight)\n    powersthatbe < 0 ? \"Left side wins!\" : 0 < powersthatbe ? \"Right side wins!\" : \"Let's fight again!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203952,"user_id":null,"body":"function alphabet_war(fight::AbstractString)::String\n  left_side_dict = Dict([character => i for (i, character) in enumerate(\"sbpw\")])\n  right_side_dict = Dict([character => i for (i, character) in enumerate(\"zdqm\")])\n  \n  left_power, right_power = 0, 0\n  for character in fight\n    if character in keys(left_side_dict)\n      left_power += left_side_dict[character]\n    elseif character in keys(right_side_dict)\n      right_power += right_side_dict[character]\n    end\n  end\n  \n  if left_power > right_power\n    return \"Left side wins!\"\n  elseif right_power > left_power\n    return \"Right side wins!\"\n  end\n    \n  return \"Let's fight again!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203953,"user_id":null,"body":"function alphabet_war(fight::AbstractString)::String\n    letters = Dict(\"w\" => 4, \"p\" => 3, \"b\" => 2, \"s\" => 1, \"m\" => -4, \"q\" => -3,\n  \"d\" => -2, \"z\" => -1)\n    total = reduce((a,b) -> haskey(letters, b) ? a + letters[b] : a, split(fight, \"\"); init=0)\n  \n    total > 0 && return \"Left side wins!\"\n    total == 0 && return \"Let's fight again!\"\n    return \"Right side wins!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203954,"user_id":null,"body":"function alphabet_war(fight::AbstractString)::String\n    code = Dict(\n        'w' =>  4, 'p' =>  3, 'b' =>  2, 's' =>  1,\n        'm' => -4, 'q' => -3, 'd' => -2, 'z' => -1)\n    value = sum([get(code, i, 0) for i in fight])\n    if value > 0\n        \"Left side wins!\"\n    elseif value < 0\n        \"Right side wins!\"\n    else\n        \"Let's fight again!\"\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203955,"user_id":null,"body":"function alphabet_war(fight::AbstractString)::String\n\n    fightSet=Set(fight)\n    \n    left=\"wpbs\"\n    right=\"mqdz\"\n    weights=Dict( c => n for (c,n) in zip(left*right,[4,3,2,1,4,3,2,1]))\n\n    score=0\n\n    for char in fightSet\n        if char in left\n            score += count(==(char),fight)*weights[char]\n        elseif char in right\n            score -= count(==(char),fight)*weights[char]\n        else\n            continue\n        end\n    end\n\n    if score == 0\n        return \"Let's fight again!\"\n    elseif score > 0\n        return \"Left side wins!\"\n    else\n        return \"Right side wins!\"\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203956,"user_id":881,"body":"function alphabet_war(fight::AbstractString)::String\n    score = sum(map(collect(fight)) do letter\n        get(Dict('w'=>4, 'p'=>3, 'b'=>2, 's'=>1, 'm'=>-4, 'q'=>-3, 'd'=>-2, 'z'=>-1), letter, 0)\n    end)\n    if score > 0\n        \"Left side wins!\"\n    elseif score < 0\n        \"Right side wins!\"\n    else\n        \"Let's fight again!\"\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5938f5b606c3033f4700015a":[{"id":203957,"user_id":null,"body":"function alphabet_war(fight::AbstractString)::String\n    values = Dict(character => value for (character, value) in zip(\"wpbszdqm\", [4:-1:1..., -1:-1:-4...]))\n    bombed_fight = replace(fight, r\"\\w?\\*\\w?\" => s\"\")\n    score = 0\n    for character in bombed_fight\n      score += get(values, character, 0)\n    end\n    if score > 0\n      return \"Left side wins!\"\n    elseif score == 0\n      return \"Let's fight again!\"\n    else\n      return \"Right side wins!\"\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203958,"user_id":null,"body":"scores = Dict(\n  'w' => -4,\n  'p' => -3,\n  'b' => -2,\n  's' => -1,\n  'm' => 4,\n  'q' => 3,\n  'd' => 2,\n  'z' => 1,\n)\n\nfunction scoring(s)\n  score = 0\n  for c in s\n    if c in keys(scores)\n      score = score  + scores[c]\n    end\n  end\n  return score\nend\n\nfunction alphabet_war(fight_str::AbstractString)::String\n  # Loop through string and find and explode the bombs\n  fight = collect(fight_str)\n  for i in eachindex(fight)\n    c = fight[i]\n    if c == '*'\n      fight[i] = Char('_')\n      if i > 1 && fight[i-1] != '*'\n        fight[i-1] = Char('_')\n      end\n      if i < length(fight) && fight[i+1] != '*'\n        fight[i+1] = '_'\n      end\n    end\n  end\n  \n  # score the remaining fighters\n  score = scoring(fight)\n  if score < 0 \n    \"Left side wins!\"\n  elseif score > 0\n    \"Right side wins!\"\n  else\n      \"Let's fight again!\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203959,"user_id":null,"body":"function alphabet_war(fight::AbstractString)::String\n    pwr = Dict('w'=> -4, 'p'=> -3, 'b'=> -2, 's'=> -1, 'm'=> 4, 'q'=> 3, 'd'=> 2, 'z'=> 1)\n    tot = sum([pwr[ch] for ch in replace(fight, r\"\\w?(\\*)+\\w?\" => \"\") if haskey(pwr, ch)])\n    tot == 0 && return \"Let's fight again!\"\n    tot < 0 ? \"Left side wins!\" : \"Right side wins!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203960,"user_id":null,"body":"function alphabet_war(fight::AbstractString)::String\n    function value(x)\n      x == 'w' && return 4\n      x == 'p' && return 3\n      x == 'b' && return 2\n      x == 's' && return 1\n      x == 'm' && return -4\n      x == 'q' && return -3\n      x == 'd' && return -2\n      x == 'z' && return -1\n      return 0\n    end\n  \n    fightarray = [x for x in fight]\n    for index in 1:length(fightarray)-1\n        if  fightarray[index+1] == '*'\n            fightarray[index] = '_'\n        elseif fightarray[index] == '*'\n            fightarray[index + 1] = '_'\n        end\n    end\n\n    score = sum(value, fightarray) \n    score > 0 && return \"Left side wins!\"\n    score == 0 && return \"Let's fight again!\"\n    return \"Right side wins!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203961,"user_id":null,"body":"function alphabet_war(fight::AbstractString)::String\n  survivors = replace(fight, r\".?\\*+.?\" => \"\")\n  total = sum(map(c -> get(Dict('w' => -4, 'p' => -3, 'b' => -2, 's' => -1, 'z' => 1, 'd' => 2, 'q' => 3, 'm' => 4), c, 0), collect(survivors)))\n  total == 0 ? \"Let's fight again!\" : (total > 0 ? \"Right\" : \"Left\") * \" side wins!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203962,"user_id":null,"body":"using DataStructures: DefaultDict\n\nPOWER = DefaultDict(\n  0,\n  Dict(\n    'w' => 4, 'm' => -4,\n    'p' => 3, 'q' => -3,\n    'b' => 2, 'd' => -2,\n    's' => 1, 'z' => -1\n  )\n)\n\nfunction alphabet_war(fight::AbstractString)::String\n  bombed = replace(fight, r\".?\\*+.?\" => \"\")\n  \n  #requires Julia 1.6+:\n  #score = sum(POWER[letter] for letter in bombed; init = 0)\n  score = sum(POWER[letter] for letter in bombed*' ')\n  \n  score > 0 && return \"Left side wins!\"\n  score < 0 && return \"Right side wins!\"\n  return \"Let's fight again!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203963,"user_id":881,"body":"function alphabet_war(fight::AbstractString)::String\n    survivors = replace(fight, r\".?\\*+.?\"=>\"\")\n    score = sum(map(collect(survivors)) do letter\n        get(Dict('w'=>4, 'p'=>3, 'b'=>2, 's'=>1, 'm'=>-4, 'q'=>-3, 'd'=>-2, 'z'=>-1), letter, 0)\n    end)\n    if score > 0\n        \"Left side wins!\"\n    elseif score < 0\n        \"Right side wins!\"\n    else\n        \"Let's fight again!\"\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"5949481f86420f59480000e7":[{"id":203964,"user_id":null,"body":" odd_or_even(array) = array |> sum |> isodd ? \"odd\" : \"even\"\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203965,"user_id":881,"body":"odd_or_even(array::Array{Int}) = iseven(reduce(xor, array; init=0)) ? \"even\" : \"odd\"","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203966,"user_id":527,"body":"odd_or_even(array) = iseven(sum(array)) ? \"even\" : \"odd\"","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203967,"user_id":null,"body":"function odd_or_even(array::Vector{Int64})\n  if iseven(sum(array))\n    \"even\"\n  else\n    \"odd\"\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203968,"user_id":null,"body":"function odd_or_even(array)\n  # your code here\n  return (sum(array)%2==0 ? \"even\" : \"odd\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203969,"user_id":null,"body":"function odd_or_even(array) \n  reduce(+, array; init=0) % 2 == 0 ? \"even\" : \"odd\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203970,"user_id":null,"body":"function odd_or_even(array)\n  [\"even\",\"odd\"][abs(sum(array))%2+1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203971,"user_id":null,"body":"function odd_or_even(array)\n  output = 0\n  for i in array\n    output += i\n  end\n  output%2 == 0 ? (return \"even\") : (return \"odd\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203972,"user_id":null,"body":"function odd_or_even(array)\n  if sum(array) % 2 == 0\n    return \"even\"\n  else\n    return \"odd\"\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203973,"user_id":null,"body":"function odd_or_even(array)\n\tsum(array) |> iseven ? \"even\" : \"odd\"\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"596c6eb85b0f515834000049":[{"id":203974,"user_id":421,"body":"replace_dots(s) = replace(s, '.' => '-')","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203975,"user_id":null,"body":"# https:\/\/docs.julialang.org\/en\/v1\/base\/strings\/#Base.replace-Tuple{AbstractString,%20Pair}\nfunction replace_dots(s) \n  return replace(s, '.' => '-')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203976,"user_id":527,"body":"function replace_dots(s) \n  replace(s, '.' => '-')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203977,"user_id":53,"body":"function replace_dots(s) \n  return replace(s, '.' => '-')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"596e91b48c92ceff0c00001f":[{"id":203978,"user_id":480,"body":"function words_to_hex(words)\n  hex(x)=string(x;base=16,pad=2)\n  map(w->\"#\"*join(map(hex,map(x->Int(x),collect(SubString(rpad(w,3,'\\0'),1,3))))), split(words,\" \"))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203979,"user_id":null,"body":"function words_to_hex(words)\n    [length(i) > 5 ? \"#\"*i[1:6] : \"#\"*i*\"00\"^((6-length(i))\u00f72) for i in split(replace(words, r\"[^\\ ]\"=> x-> string(Int(only(x)), base=16)))]   \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203980,"user_id":null,"body":"words_to_hex(words) = [string('#',string.(Int.(collect(w)[1:3]),base=16,pad=2)...) for w in rpad.(split(words,' '),3,Char(0))]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203981,"user_id":2525,"body":"function words_to_hex(words)\n    [ \"#\"*join([string(Int(c), base=16, pad=2) for c in w*Char(0)*Char(0)][1:3]) for w in split(words) ]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203982,"user_id":759,"body":"function words_to_hex(words)\n  [\"#\" * lpad(string(foldl((x, y) -> (x << 8) | (y > length(w) ? 0 : Int(w[y])), 1:3, init=0), base = 16), 6, '0') for w in split(words, \" \")]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203983,"user_id":null,"body":"function words_to_hex(words)\n  ['#' * rpad(join(string(Int(c), base = 16) for c in word[1:min(3, length(word))]), 6, '0') for word in split(words)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203984,"user_id":null,"body":"function words_to_hex(words)\n  ret = []\n  for w in split(words)\n    s = \"\"\n    len = length(w)\n    sub = len > 2 ? w[1:3] : len > 1 ? w[1:2] : w[1]\n    for c in sub\n      s = string(s, string(Int(c), base=16))\n    end\n    push!(ret, string(\"#\", rpad(s, 6, \"0\")))\n  end\n  ret\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203985,"user_id":881,"body":"function words_to_hex(words)\n  ws = split(words)\n  colors = []\n  for w in ws\n    str = \"#\"\n    for i in 1:min(3, length(w))\n      str *= string(codepoint(w[i]), base = 16, pad = 2)\n    end\n    str = rpad(str, 7, \"0\")\n    push!(colors, str)\n  end\n  return colors  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"59706036f6e5d1e22d000016":[{"id":203986,"user_id":421,"body":"function words_to_marks(s::String)\n  sum(Int(x) - 96 for x in s)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203987,"user_id":759,"body":"function words_to_marks(s::String)\n  sum(c -> Int(c) - Int('a') + 1, s)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203988,"user_id":1474,"body":"function words_to_marks(s::String)\n  sum(Int(c) - 96 for c in s)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203989,"user_id":null,"body":"function words_to_marks(s::String)\n  return sum(map((c) -> Int(c) - Int('a') + 1, collect(s)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203990,"user_id":null,"body":"function words_to_marks(s::String)\n  dict = Dict(zip('a': 'z', 1:26))\n  return sum([dict[i] for i in s])\nende\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203991,"user_id":null,"body":"function words_to_marks(s::String)\n    alphabet_map = Dict( j => i for (i, j) in enumerate(collect('a':'z')))\n    return sum([alphabet_map[c] for c in s])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203992,"user_id":null,"body":"words_to_marks(s::String) = sum(Int.(collect(s)) .- 96)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203993,"user_id":null,"body":"function words_to_marks(s::String)\n  sum([Int(x) - 96 for x in s])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203994,"user_id":null,"body":"function words_to_marks(s::String)\n    sum([ Int(s[i]) - 96 for i=1:length(s) ])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203995,"user_id":2525,"body":"function words_to_marks(s::String)\n    sum([Int(c)-96 for c in collect(s)])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"}],"597d75744f4190857a00008d":[{"id":203996,"user_id":53,"body":"function paint_letterboxes(a::Int, b::Int)::Vector{Int}\n    ns = zeros(Int, 10)\n    for n in a:b\n        for d in digits(n)\n            ns[d+1] += 1\n        end\n    end\n    ns\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203997,"user_id":null,"body":"function paint_letterboxes(start::Int, finish::Int)::Vector{Int}\n    map(n-> count(==(n), join(string.(start:finish))), '0':'9')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203998,"user_id":null,"body":"function paint_letterboxes(start::Int, finish::Int)::Vector{Int}\n    res = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    tmp = \"\"\n    \n    for q in start:finish\n      tmp *= \"$(q)\"\n    end\n\n    for q in 0:9\n        res[q+1] = count(==('0' + q),tmp)\n    end\n\n    res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":203999,"user_id":null,"body":"function paint_letterboxes(start::Int, finish::Int)::Vector{Int}\n  result = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    for number = start:finish\n      letters = split(string(number), \"\")\n      for number in letters\n        for check_number in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n          if string(check_number) == number\n            result[check_number + 1] = result[check_number + 1] + 1\n          end\n        end\n      end\n    end\n    result\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":204000,"user_id":2525,"body":"function paint_letterboxes(start::Int, finish::Int)::Vector{Int}\n    cnt = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    for n in start:finish\n        for d in digits(n)\n            cnt[d+1] += 1\n        end\n    end\n    cnt\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:16","updated_at":"2023-01-14 13:24:16"},{"id":204001,"user_id":null,"body":"function paint_letterboxes(start::Int, finish::Int)::Vector{Int}\n  ret = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  for n in start:finish\n    for m in collect(string(n))\n      ret[parse(Int,m)+1] += 1\n    end\n  end\n  ret\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204002,"user_id":881,"body":"function paint_letterboxes(start::Int, finish::Int)::Vector{Int}\n    result = zeros(Int, 10)\n    for n in start:finish\n        for d in digits(n)\n            result[d+1] += 1\n        end\n    end\n    result\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5981a139f5471fd1b2000071":[{"id":204003,"user_id":null,"body":"function task(w,n,c)\n  days = (\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\n  workers = (\"James\",\"John\", \"Robert\", \"Michael\", \"William\")\n  plan = Dict(zip(days, workers))\n  \"It is $w today, $(plan[w]), you have to work, you must spray $n trees and you need $(n*c) dollars to buy liquid\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204004,"user_id":null,"body":"function task(w,n,c)\n dict = Dict(day=>name for (day,name) in zip([\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\"],[\"James\",\"John\",\"Robert\",\"Michael\", \"William\"]))\n  \n \"It is $(w) today, $(dict[w]), you have to work, you must spray $(n) trees and you need $(n*c) dollars to buy liquid\" \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204005,"user_id":null,"body":"function task(w,n,c)\n    worker = Dict(\"Monday\"=> \"James\", \"Tuesday\"=> \"John\", \"Wednesday\"=> \"Robert\", \"Thursday\"=> \"Michael\", \"Friday\"=> \"William\")\n    \"It is $w today, $(worker[w]), you have to work, you must spray $n trees and you need $(n*c) dollars to buy liquid\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204006,"user_id":881,"body":"function task(day::AbstractString, trees::Integer, cost::Integer)\n    join((\n        \"It is \",\n        day,\n        \" today, \",\n        Dict((\n            \"Monday\" => \"James\",\n            \"Tuesday\" => \"John\",\n            \"Wednesday\" => \"Robert\",\n            \"Thursday\" => \"Michael\",\n            \"Friday\" => \"William\"\n        ))[day],\n        \", you have to work, you must spray \",\n        trees,\n        \" trees and you need \",\n        trees * cost,\n        \" dollars to buy liquid\"\n    ))\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204007,"user_id":2525,"body":"map = Dict([(\"Monday\", \"James\"), (\"Tuesday\", \"John\"), (\"Wednesday\", \"Robert\"), (\"Thursday\", \"Michael\"), (\"Friday\", \"William\")])\nfunction task(w,n,c)\n    \"It is $w today, $(map[w]), you have to work, you must spray $n trees and you need $(n*c) dollars to buy liquid\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204008,"user_id":null,"body":"workSchedule = Dict{String, String}(\"Monday\" => \"James\", \"Tuesday\" => \"John\", \"Wednesday\" => \"Robert\", \"Thursday\" => \"Michael\", \"Friday\" => \"William\")\nfunction task(w,n,c)\n return \"It is $w today, $(workSchedule[w]), you have to work, you must spray $(string(n)) trees and you need $(string(n*c)) dollars to buy liquid\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204009,"user_id":null,"body":"workSchedule = Dict{String, String}(\"Monday\" => \"James\", \"Tuesday\" => \"John\", \"Wednesday\" => \"Robert\", \"Thursday\" => \"Michael\", \"Friday\" => \"William\")\nfunction task(w,n,c)\n return \"It is \"*w*\" today, \"*workSchedule[w]*\", you have to work, you must spray \"*string(n)*\" trees and you need \"*string(n*c)*\" dollars to buy liquid\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204010,"user_id":null,"body":"function task(w,n,c)\n wmap = Dict(\"Monday\"=>\"James\", \"Tuesday\"=>\"John\", \"Wednesday\"=>\"Robert\", \"Thursday\"=>\"Michael\", \"Friday\"=>\"William\")\n  \"It is $(w) today, $(wmap[w]), you have to work, you must spray $(n) trees and you need $(n*c) dollars to buy liquid\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204011,"user_id":421,"body":"function task(w,n,c)\n  work = Dict(\"Monday\" => \"James\", \"Tuesday\" => \"John\", \"Wednesday\" => \"Robert\", \"Thursday\" => \"Michael\", \"Friday\" => \"William\")\n  \"It is $w today, $(work[w]), you have to work, you must spray $n trees and you need $(n * c) dollars to buy liquid\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5982619d2671576e90000017":[{"id":204012,"user_id":null,"body":"sponge_meme(s) = join(isodd(i) ? uppercase(ch) : lowercase(ch) for (i, ch) in enumerate(s))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204013,"user_id":881,"body":"function sponge_meme(sentence::AbstractString)\n    join(f(c) for (c, f) in zip(sentence, Iterators.cycle((uppercase, lowercase))))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204014,"user_id":null,"body":"function sponge_meme(sentence::AbstractString)\n    res = \"\"  \n    for (ind, chr) in enumerate(sentence)\n        if isodd(ind)\n          res *= uppercase(string(chr))\n        else\n          res *= lowercase(string(chr))\n        end\n    end\n    res\nend\n    ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59859f435f5d18ede7000050":[{"id":204015,"user_id":null,"body":"wordtobin(word) = string.(codeunits(word), base=2, pad=8)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204016,"user_id":null,"body":"function wordtobin(word) \n  string.(codeunits(word), base=2, pad=8)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204017,"user_id":null,"body":"wordtobin(word) = string.(Int.(collect(word)), base=2, pad=8)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204018,"user_id":null,"body":"function wordtobin(word) \n  [bitstring(UInt8(letter)) for letter in word]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204019,"user_id":null,"body":"function wordtobin(word)\n  map(c -> lpad(string(Int(c), base = 2), 8, '0'), collect(word))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204020,"user_id":null,"body":"function wordtobin(word) \n  [string(Int(q),base=2,pad=8) for q in word]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204021,"user_id":881,"body":"wordtobin(word) = [lpad(string(Int(c), base=2), 8, '0') for c in word]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204022,"user_id":759,"body":"wordtobin(word)=[bitstring(c)[1:8] for c in word]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204023,"user_id":2525,"body":"function wordtobin(word) \n    [ bitstring(c)[1:8] for c in word ]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204024,"user_id":null,"body":"wordtobin(word) = string.([Int(ch) for ch in word], base = 2, pad = 8)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59901cd68fc658ab6c000025":[{"id":204025,"user_id":527,"body":"function distribute(m, n)\n  if n <= 0\n    []\n  else\n    q, r = divrem(max(m, 0), n)\n    vcat(fill(q + 1, r), fill(q, n - r))\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204026,"user_id":480,"body":"function distribute(m, n)\n  if n <= 0\n    return []\n  end\n  if m <= 0\n    return [0 for i in 1:n]\n  end\n  q=div(m,n)\n  r=m-q*n\n  [q+(i<=r ? 1 : 0) for i in 1:n]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204027,"user_id":null,"body":"function distribute(m, n)\n    n \u2264 0 ? [] : m \u2264 0 ? zeros(Int, n) : vcat((divrem(m,n)[1] .* ones(Int, divrem(m,n)[2])) .+ ones(Int, divrem(m,n)[2]), divrem(m,n)[1] .* ones(Int, n-divrem(m,n)[2]))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204028,"user_id":2525,"body":"function distribute(m, n)\n    m = max(m, 0)\n    [(m+i)\u00f7n for i in 0:n-1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204029,"user_id":1474,"body":"function distribute(m, n)\n  if n < 1\n    return []\n  end\n  m = max(m, 0)\n  q, r = divrem(m, n)\n  ret = repeat([q], n)\n  for i in 1:r\n    ret[i] += 1\n  end\n  ret\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204030,"user_id":492,"body":"function distribute(m, n)\n  if n <= 0\n        return []\n  end\n  q = div(max(m, 0), n)\n  r = mod(max(m, 0), n)\n  return [q + (i < r) for i = 0:(n - 1)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204031,"user_id":null,"body":"function distribute(m, n)\n    if n <= 0\n        return []\n    elseif m<0\n        return fill(0, n)\n    else\n        a = fill(divrem(m, n)[1], n)\n        a[1:divrem(m, n)[2]] = a[1:divrem(m, n)[2]] .+ 1\n        return a\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204032,"user_id":null,"body":"function distribute(m, n)\n  if n \u2264 0\n    return []\n  end\n  distribution = repeat([0], n)\n  index = 1\n  while m > 0\n    distribution[index] += 1\n    index = index + 1 \u2264 n ? index + 1 : 1\n    m -= 1\n  end\n  reverse(distribution)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204033,"user_id":759,"body":"function distribute(m, n)\n  if n <= 0; return [] end\n  if m < 0; m = 0 end\n  base = m \u00f7 n\n  extra = m % n\n  [base + (i <= extra ? 1 : 0) for i in 1:n]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204034,"user_id":null,"body":"function distribute(m, n)\n  n <= 0 && return []\n  m <= 0 && return repeat([0],n)\n  q,r = divrem(m,n)\n  ret = repeat([q],n)\n  for i in 1:r\n    ret[i] += 1\n  end\n  ret\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59923f1301726f5430000059":[{"id":204035,"user_id":null,"body":"mutable struct FSM\n  states::Dict{String, Vector{Any}}\nend\nfunction FSM(instructions::String)\n  outp = FSM(Dict())\n  for i in split(instructions, '\n')\n      m = match(r\"([A-z0-9]+);\\s(?:([A-z0-9]+),\\s([A-z0-9]+));\\s([0-9]+)\", i)\n      outp.states[m.captures[1]] = [[m.captures[2], m.captures[3]], m.captures[4]]\n  end\n  outp\nend\nfunction run_fsm(fsm::FSM, state::String, sequence::Array{Int,1})\n  path = []\n  push!(path, state)\n  for i in sequence\n    state = fsm.states[state][1][i+1]\n      push!(path, state)\n  end\n  (state, parse(Int, fsm.states[state][2]), path)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204036,"user_id":null,"body":"mutable struct FSM\n  instr ::Dict\nend\nfunction FSM(instructions::String)\n  a = [strip.(split(x, [',', ';'])) for x in split(instructions, \"\n\")]\n  d = Dict(x[1] => (x[2], x[3], parse(Int, x[4])) for x in a)\n  FSM(d)\nend\nfunction run_fsm(fsm::FSM, start::String, sequence::Array{Int,1})\n  path = [start]\n  [push!(path, fsm.instr[path[end]][i + 1]) for i in sequence]\n  path[end], fsm.instr[path[end]][3], path\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204037,"user_id":null,"body":"struct FSM\n    states::Dict{String, Array{String}}\nend\nfunction FSM(instructions::String)\n    FSM(Dict(x[1]=> push!(split(x[2],\", \"), x[3]) for x in split.(split(instructions, \"\n\"), \"; \")))\nend\nfunction run_fsm(fsm::FSM, start::String, sequence::Array{Int,1})\n    run = vcat(start, [start = fsm.states[start][i+1] for i in sequence])\n    (last(run), parse(Int, last(fsm.states[last(run)])), run)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204038,"user_id":null,"body":"function FSM(instructions::String)\n    Dict(x[1]=> push!(split(x[2],\", \"), x[3]) for x in split.(split(instructions, \"\n\"), \"; \"))\nend\n\nfunction run_fsm(fsm, start::String, sequence::Array{Int,1})\n    run = vcat(start, [start = fsm[start][i+1] for i in sequence])\n    (last(run), parse(Int, last(fsm[last(run)])), run)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204039,"user_id":null,"body":"struct FSM\n    routes::Dict{String,Tuple{String,String,Int}}\nend\nfunction FSM(instructions::String)\n    fsm = FSM(Dict{String,Tuple{String,String,Int}}())\n    for line in split(instructions,'\n')\n        d = split(replace(line,r\"[,;] \"=>s\";\"),';')\n        fsm.routes[d[1]] = (d[2],d[3],parse(Int,d[4]))\n    end\n    return fsm\nend\nfunction run_fsm(fsm::FSM, start::String, sequence::Array{Int,1})\n    path = String[start]\n    for action in sequence\n        push!(path,fsm.routes[path[end]][action+1])\n    end\n    return path[end],fsm.routes[path[end]][3],path\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204040,"user_id":53,"body":"struct FSM\n  transitions::Dict\nend\n\nfunction FSM(instructions::String)\n  transitions = Dict()\n  for line in split(instructions, \"\n\")\n    s, tout, vout = split(line, \"; \")\n    transitions[s] = Dict(\"tout\" => split(tout, \", \"), \"vout\" => vout)\n  end\n  FSM(transitions)  \nend\n\nfunction run_fsm(fsm::FSM, start::String, sequence::Array{Int,1})\n  path = [start]\n  curr = start\n  for n in sequence\n    curr = fsm.transitions[curr][\"tout\"][n+1]\n    push!(path, curr)\n  end\n  return (curr, parse(Int, fsm.transitions[curr][\"vout\"]), path)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204041,"user_id":null,"body":"struct FSM\n  data::Dict{String, Array{String}}\nend\n\nfunction FSM(instructions::String)\n  data = Dict{String, Array{String}}()\n  for line in split(instructions, \"\n\")\n    s = split(line, Regex(\"[;,]\\\\s*\"))\n    data[s[1]] = s[2:length(s)]\n  end\n  FSM(data)\nend\n\nfunction run_fsm(fsm::FSM, start::String, sequence::Array{Int,1})\n  path = [start]\n  for i in sequence\n    start = fsm.data[start][i + 1]\n    path = [path; start]\n  end\n  (start, parse(Int, last(fsm.data[start])), path)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204042,"user_id":null,"body":"struct FSM\n  next::Dict\n  output::Dict\nend\n\nfunction FSM(instructions::String)\n  next_dict = Dict{String, Dict}()\n  out_dict = Dict{String, Int}()\n  insts = split(instructions, \"\n\")\n  \n  for inst in insts\n    key, next, output = split(inst, \"; \")\n    next = split(next, \", \")\n    next_dict[key] = Dict(0 => next[1], 1 => next[2])\n    out_dict[key] = parse(Int, output)\n  end\n  \n  return FSM(next_dict, out_dict)\nend\n\nfunction run_fsm(fsm::FSM, start::String, sequence::Array{Int,1})\n  current_state = start\n  path = Vector{String}([start])\n  \n  for num in sequence\n    current_state = fsm.next[current_state][num]\n    push!(path, current_state)\n  end\n  \n  output = fsm.output[current_state]\n  \n  return (current_state, output, path)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204043,"user_id":2525,"body":"struct FSM\n    output::Dict{String, Int64}\n    transitions\nend\nfunction FSM(instructions::String)\n    out = Dict([split(st, \";\")[1] => parse(Int, split(st, \";\")[3]) for st in split(instructions, \"\n\")])\n    trs = Dict([split(st, \";\")[1] => strip.(split(split(st, \";\")[2], \",\")) for st in split(instructions, \"\n\")])\n\n    FSM(out, trs)\nend\nfunction run_fsm(fsm::FSM, start::String, sequence::Array{Int,1})\n    state = start\n    path = [start]\n    for input in sequence\n        state = fsm.transitions[state][input+1]\n        push!(path, state)\n    end\n  \n    (state, fsm.output[state], path)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204044,"user_id":null,"body":"mutable struct FSM\n  current_state::String\n  states::Vector{String}\n  transitions::Dict{String, Tuple{String, String}}\n  outputs::Dict{String, Integer}\nend\n\nfunction FSM(instructions::String)\n  state_instructions = split(instructions, \"\n\")\n  components = split.(state_instructions, \"; \")\n  states = first.(components)\n  transition_spec = map(x -> x[2], components)\n  transitions = Dict(states .=> split.(transition_spec, \", \") .|> Tuple)\n  output_vals = map(x -> parse(Int64, x[3]), components)\n  outputs = Dict(states .=> output_vals)\n  \n  FSM(\"\", states, transitions, outputs)\nend\nfunction run_fsm(fsm::FSM, start::String, sequence::Array{Int,1})\n  fsm.current_state = start\n  path = [start]\n  \n  for input in sequence\n    fsm.current_state = fsm.transitions[fsm.current_state][input + 1]\n    push!(path, fsm.current_state)\n  end\n  \n  (fsm.current_state, fsm.outputs[fsm.current_state], path)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"599c20626bd8795ce900001d":[{"id":204045,"user_id":421,"body":"function summy(stringofints::String)::Int\n    sum(parse(Int, x) for x in split(stringofints))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204046,"user_id":null,"body":"summy(stringofints::String)::Int = eval(Meta.parse(replace(stringofints, \" \"=> \"+\")))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204047,"user_id":2525,"body":"function summy(stringofints::String)::Int\n    sum(parse.(Int, split(stringofints)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204048,"user_id":759,"body":"function summy(stringofints::String)::Int\n    sum(map(x -> parse(Int, x), split(stringofints, \" \")))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204049,"user_id":null,"body":"function summy(stringofints::String)::Int\n    sum(map(x-> parse(Int64, x), split(stringofints)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204050,"user_id":null,"body":"function summy(stringofints::String)::Int\n    sum(m -> parse(Int, m), split(stringofints))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204051,"user_id":53,"body":"function summy(s::String)::Int\n    return sum([parse(Int, x) for x in split(s, \" \")])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204052,"user_id":527,"body":"function summy(stringofints::String)::Int\n  sum(x -> parse(Int, x), split(stringofints))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204053,"user_id":209,"body":"function summy(X::String)::Int\n  return sum(map(x->parse(Int,x), split(X, \" \")))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204054,"user_id":881,"body":"summy(stringofints::String)::Int = sum(parse.(Int, split(stringofints, ' ')))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59a8570b570190d313000037":[{"id":204055,"user_id":527,"body":"sum_cubes(n) = (n * (n + 1) \/ 2) ^ 2","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204056,"user_id":null,"body":"sum_cubes(n) = sum(x->x^3,1:n)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204057,"user_id":645,"body":"sum_cubes(n) = sum([x * x * x for x in 1:n])","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204058,"user_id":1474,"body":"function sum_cubes(n)\n  (n * (n+1) \/ 2) ^ 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204059,"user_id":null,"body":"function sum_cubes(n)\n  sum(map(i->i^3, 1:n))\n#   sum(i^3 for i in 1:n)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204060,"user_id":null,"body":"function sum_cubes(n)\n  sum(map(x -> x^3, 1:n))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204061,"user_id":53,"body":"function sum_cubes(n)\n  (n * (n + 1) \/ 2) * (n * (n + 1) \/ 2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204062,"user_id":168,"body":"sum_cubes(n) = n * n * (n + 1) * (n + 1) \/ 4","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204063,"user_id":null,"body":"function sum_cubes(n)\n  n^2*(n+1)^2\/4\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204064,"user_id":null,"body":"sum_cubes(n) = ((n*n+n)\u00f72)^2","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59a96d71dbe3b06c0200009c":[{"id":204065,"user_id":527,"body":"function generate_shape(n)\n  join(repeat(['+' ^ n], n), '\n')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204066,"user_id":null,"body":"generate_shape(int) = join(['+'^int for q in 1:int],\"\n\")","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204067,"user_id":null,"body":"function generate_shape(int)\n  join(repeat(['+'^int],int),\"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204068,"user_id":53,"body":"function generate_shape(n)\n  join((join((\"+\" for j in 1:n), \"\") for i in 1:n), '\n')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204069,"user_id":null,"body":"function generate_shape(int)\n  (string(\"+\"^int,'\n')^int)[1:end-1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204070,"user_id":null,"body":"generate_shape(int) = chop((\"+\"^int * '\n')^int)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204071,"user_id":null,"body":"generate_shape(int) = ((\"+\"^int * '\n')^int)[begin:end-1]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204072,"user_id":527,"body":"using Base.Iterators\ngenerate_shape(n) = join(repeated('+' ^ n, n), '\n')","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204073,"user_id":527,"body":"using Base.Iterators\n\ngenerate_shape(n) = join(repeat(['+' ^ n], n), '\n')","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204074,"user_id":null,"body":"function generate_shape(int)\n  \n  shape = \"\n\"\n  for _ in 1:int\n    shape = \"+\" * shape\n  end\n  \n  return chomp(repeat(shape, int))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59b401e24f98a813f9000026":[{"id":204075,"user_id":50,"body":"function compute_depth(n::Integer)\n  lookup = UInt64(0)\n  depth = 0\n  while lookup != 0x3ff\n    depth += 1\n    mul = UInt64(n * depth)\n    while mul > 0\n      lookup = lookup | (1 << UInt64(mul % 10))\n      mul = floor(mul \/ 10)\n    end\n  end\n  return depth\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204076,"user_id":null,"body":"function compute_depth(n::Integer)\n  digits = \"\"\n  \n  multiplications = 0\n  multiplier = 1\n  \n  while length(digits) != 10\n    temp = n * multiplier\n    multiplications += 1\n    multiplier += 1\n    \n    for char in string(temp)\n      if !(char in digits)\n        digits = string(digits, char)\n      end\n    end\n  end\n  \n  return multiplications\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204077,"user_id":null,"body":"compute_depth(n, depth=1, digs=Set()) = push!(digs, digits(n*depth)...) |> length == 10 ? depth : compute_depth(n, depth+1, digs)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204078,"user_id":53,"body":"function compute_depth(n::Integer)\n  i = 0\n  mask = 1023\n  while mask > 0\n    i = i + 1\n    m = n * i\n    while m > 0\n      d = m % 10\n      k = 1 << d\n      if (mask & k) > 0\n        mask = mask \u22bb k\n      end\n      m = m \u00f7 10\n    end\n  end\n  i\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204079,"user_id":881,"body":"function compute_depth(n::Integer)\n    unseen = Set(0:9)\n    for depth in Iterators.countfrom(1)\n        for d in digits(n * depth)\n            delete!(unseen, d)\n        end\n        if isempty(unseen)\n            return depth\n        end\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59b844528bcb7735560000a0":[{"id":204080,"user_id":2525,"body":"function is_nice(arr)\n    arr!=[] && all( n-1 \u2208 arr || n+1 \u2208 arr for n in arr )\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204081,"user_id":null,"body":"function is_nice(arr)\n  arr==[] && return false\n  for v in arr\n    (v-1 \u2209 arr && v+1 \u2209 arr) && return false\n  end\n  true\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204082,"user_id":53,"body":"function is_nice(arr)\n  length(arr) > 0 && reduce((b, e) -> b && ((e + 1) in arr || (e - 1) in arr), arr; init = true)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204083,"user_id":null,"body":"function is_nice(arr)\n    diffs = vcat(0, isone.(diff(sort(unique(arr)))), 0)\n    !any(iszero, sum.(zip(diffs, diffs[2:end])))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204084,"user_id":759,"body":"function is_nice(arr)\n  !isempty(arr) && all(x -> any(y -> abs(x - y) == 1, arr), arr)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204085,"user_id":null,"body":"function is_nice(arr)\n  arr == [] ? false : all([elem-1 \u2208 arr || elem+1 \u2208 arr for elem in arr])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204086,"user_id":50,"body":"function is_nice(arr)\n  for n in arr\n    if (!(n+1 in arr) && !(n-1 in arr))\n      return false\n    end\n  end\n  return length(arr)>0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204087,"user_id":null,"body":"function is_nice(arr)\n  if length(arr) == 0\n    return false\n  end\n  for n in arr\n    if !(n+1 in arr || n-1 in arr)\n      return false\n    end\n  end\n  return true\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204088,"user_id":null,"body":"function is_nice(arr)\n  if arr == []\n    return false\n  end\n  for i in 1:length(arr)\n    found = false\n    for j in 1:length(arr)\n      if arr[i] == arr[j]+1 || arr[i] == arr[j]-1\n        found = true\n        break\n      end\n    end\n    if !found\n      return false\n    end\n  end\n  return true\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204089,"user_id":null,"body":"function is_nice(arr)\n    if length(arr) \u2264 1\n        return false\n    else\n        memo = []\n        for a in arr\n            if a in memo\n                continue\n            elseif a-1 in arr\n                push!(memo,a-1)\n            elseif a+1 in arr\n                push!(memo,a+1)\n            else\n                return false\n            end\n        end\n        return true\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59c03f175fb13337df00002e":[{"id":204090,"user_id":881,"body":"\"Makes a 2\u00d72 window with N\u00d7N panes.\"\nfunction make_a_window(n::Integer)::String\n    topbottom = repeat('-', 2n + 3)\n    glass = repeat('.', n)\n    pane = \"|$(glass)|$(glass)|\"\n    mid = \"|$(repeat('-', n))+$(repeat('-', n))|\"\n    join([topbottom, (pane for _ in 1:n)..., mid, (pane for _ in 1:n)..., topbottom], '\n')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204091,"user_id":null,"body":"function make_a_window(n::Integer)::String\n  top = string(repeat(\"-\", n*2+3), \"\n\")\n  middle = string(\"|\", repeat(\"-\", n), \"+\", repeat(\"-\", n), \"|\n\")\n  window = string(\"|\", repeat(\".\", n), \"|\", repeat(\".\", n), \"|\n\")\n  bottom = repeat(\"-\", n*2+3)\n  return string(top, repeat(window, n), middle, repeat(window, n), bottom)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204092,"user_id":null,"body":"function make_a_window(n::Integer)::String\n    edge = '-'^(2n+3) * '\n'\n    glass = '|' * '.'^n * '|' * '.'^n * '|' * '\n'\n    mid = '|' * '-'^n * '+' * '-'^n * '|' * '\n'\n    chop(join([edge, glass^n, mid, glass^n, edge]))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204093,"user_id":null,"body":"function make_a_window(n::Integer)::String\n  width = 3 + 2n\n  window = fill('.', (width, width))\n  for row in 1:width, col in 1:width\n    if col == 1 || col == width || col == width\u00f72 + 1\n      window[row, col] = '|'\n    end\n    if row == 1 || row == width || row == width\u00f72 + 1\n      window[row, col] = '-'      \n    end\n  end\n  window[width\u00f72 + 1, 1] = '|'\n  window[width\u00f72 + 1, width\u00f72 + 1] = '+'\n  window[width\u00f72 + 1, width] = '|'\n  \n  join([join(window[row,:]) for row in 1:width], '\n')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204094,"user_id":53,"body":"function make_a_window(n::Integer)::String\n  top = repeat('-', 2n + 3)\n  glass = repeat('.', n)\n  glasses = \"|$(glass)|$(glass)|\"\n  middle = \"|$(repeat('-', n))+$(repeat('-', n))|\"\n  join([top, (glasses for _ in 1:n)..., middle, (glasses for _ in 1:n)..., top], '\n')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59c5f4e9d751df43cf000035":[{"id":204095,"user_id":527,"body":"solve(s) = maximum(length, split(s, c -> c \u2209 \"aeiou\"))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204096,"user_id":null,"body":"function solve(s::String)\n  maximum([length(m.match) for m in eachmatch(r\"[aeiou]*\",lowercase(s))])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204097,"user_id":null,"body":"solve(s::String) = maximum(length, split(s, r\"[^aeiou]\"))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204098,"user_id":168,"body":"function solve(s::String)\n  maximum(m -> length(m.match), eachmatch(r\"[aeiou]+|$\", s))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204099,"user_id":1474,"body":"function solve(s::String)\n  maximum([length(m.match) for m in eachmatch(r\"[aeiou]+\", s)])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204100,"user_id":null,"body":"function solve(s::String)\n    maximum(regex -> length(regex.match), eachmatch(r\"[aeiou]+\"i, s))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204101,"user_id":null,"body":"function solve(s::String)\n    longest_int = 0\n    len_substrings = Int64[]\n    for char in split(s, \"\")\n      if char in [\"o\", \"e\", \"i\", \"a\", \"u\"]\n        longest_int += 1\n        len_substrings = push!(len_substrings, longest_int)\n      else\n        longest_int = 0 \n      end\n    end  \n    return(maximum(len_substrings))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204102,"user_id":53,"body":"function solve(s::String)\n  maximum(length(e.match) for e in eachmatch(r\"[aeuio]+\", s))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204103,"user_id":2525,"body":"function solve(s::String)\n    maximum(map(length, split(replace(s, r\"[^aeiou]\" => \" \"))))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204104,"user_id":null,"body":"function solve(s::String)\n  current_chain = 0\n  longest_chain = 0\n  for char in s\n    if char in \"aeiou\"\n      current_chain += 1\n      longest_chain = max(current_chain, longest_chain)\n    else\n      current_chain = 0\n    end\n  end\n  longest_chain\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59c68ea2aeb2843e18000109":[{"id":204105,"user_id":null,"body":"module Purchase\n    export amort\n\n    function amort(rate, balance, term, num_payments)\n        n = (rate\/1200)*balance;\n        d = 1 - (1+(rate\/1200))^(-term);\n        c = n\/d;\n        princ=0\n        interes = 0\n        for i = 1:num_payments\n          interes = balance*(rate\/1200)      \n          princ = c - balance*(rate\/1200)\n          balance = balance -princ\n        end\n        return \"num_payment \"*string(round(Int,num_payments))*\" c \"*string(round(Int,c))*\" princ \"*string(round(Int,princ))*\" int \"*string(round(Int,interes))*\" balance \"*string(round(Int,balance))\n       \n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204106,"user_id":null,"body":"module Purchase\n    export amort\n\n    function amort(rate, balance, term, num_payments)\n        r = rate \/ 1200\n        c = (r * balance * (1+r)^term) \/ ((1+r)^term - 1)\n        for i in 1:num_payments-1\n            balance -= c - balance * r\n        end\n        rnd = Int \u2218 round\n        \"num_payment $(num_payments) c $(rnd(c)) princ $(rnd(c-balance*r)) int $(rnd(balance*r)) balance $(rnd(balance*(1+r)-c))\"\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204107,"user_id":2525,"body":"module Purchase\n    export amort\n\n    using Printf\n\n    function amort(rate, balance, term, num_payments)\n        m_rate = rate\/1200\n        c = m_rate*balance\/(1-(1+m_rate)^-term)   # round(total\/term, digits=2)\n\n        princ = 0\n        int = 0\n        cur_balance = balance\n\n        for i in 1:num_payments\n            int = cur_balance * m_rate\n            princ = c - int\n            cur_balance -= princ\n        end\n    \n        @sprintf(\"num_payment %d c %.0f princ %.0f int %.0f balance %.0f\", num_payments, c, princ, int, cur_balance)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204108,"user_id":null,"body":"\n\nmodule Purchase\n    export amort\n\n\n    function amort(r, b, t, n)\n      r\/=1200\n      p = (r*b) \/(1 - (1 + r) ^(-t))\n      i,pr= 0.0,0.0\n      for m in 1:n\n        i=b*r\n        pr=p - i\n        b-=pr\n      end\n\n      i,p,pr,b=round(Int,i),round(Int,p),round(Int,pr),round(Int,b)\n\n      \n      \"num_payment $n c $p princ $pr int $i balance $b\"\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204109,"user_id":null,"body":"\n\nmodule Purchase\n    export amort\n    using Printf\n    \n\n\n    function amort(r, b, t, n)\n      r\/=1200;\n      p = (r * b) \/ (1.0 - (1.0 + r) ^(-t))\n      i,pr= 0.0,0.0\n      for m in 1:n\n        i=b*r\n        pr=p - i\n        b-=pr\n      end\n      @sprintf(\"num_payment %d c %.0f princ %.0f int %.0f balance %.0f\", n, p, pr, i, b)\n    \n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204110,"user_id":492,"body":"module Purchase\n    export amort\n    using Printf\n\n    function amort(rate, balance, term, num_payments)\n        bal = balance\n        r = rate \/ 1200.0\n        payment = (r * balance) \/ (1.0 - (1.0 + r) ^(-term))\n        interest = 0.0\n        principal = 0.0\n        for i in 1:num_payments\n            interest = bal * r\n            principal = payment - interest\n            bal = bal - principal\n        end\n        @sprintf(\"num_payment %d c %.0f princ %.0f int %.0f balance %.0f\", num_payments, payment, principal, interest, bal)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204111,"user_id":null,"body":"module Purchase\n    export amort\n\n    function amort(rate, balance, term, num_payments)\n        i = 0\n        rate  = rate\/100\/12\n        d = 1 - 1(1+rate)^(-term)\n        n = rate * balance\n        c = n \/ d\n        \n        while i < num_payments #\n            princ = c - (rate * balance)\n            balance = balance - princ\n            i = i + 1\n        end\n        \n        princ = round(Int, princ)\n        int = round(Int, (balance + princ)*rate) #Do this after to save the abyssmally small amount of processing #efficiency\n        c = round(Int, c)\n        println(\"princ: $princ, c = $c, int = $int, Balance: $balance\")\n        balance = round(Int, balance)\n        return \"num_payment $num_payments c $c princ $princ int $int balance $balance\"\n\n                  \n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204112,"user_id":null,"body":"module Purchase\n    export amort\n\n    function amort(rate, balance, term, num_payments)\n       \n        r = rate\/(100*12)\n        \n        n = r*balance\n        d = 1 - (1 + r)^(-term)\n        \n        c = n\/d\n        \n        int = 0\n        princ = 0\n\n        for i = 1:num_payments\n          int = r*balance\n          princ = c - int\n          balance = balance - princ\n        end\n        \n        c = round(Int,c)\n        int = round(Int,int)\n        princ = round(Int,princ)\n        balance = round(Int,balance)\n        \n        \"num_payment $num_payments c $c princ $princ int $int balance $balance\"\n        \n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59c8b38423dacc7d95000008":[{"id":204113,"user_id":527,"body":"function isvalid(formula)\n  (1 \u2209 formula || 2 \u2209 formula) &&\n  (3 \u2209 formula || 4 \u2209 formula) &&\n  ((5 \u2208 formula) == (6 \u2208 formula)) &&\n  (7 \u2208 formula || 8 \u2208 formula)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204114,"user_id":881,"body":"function isvalid(f)\n  !(1 in f && 2 in f) && !(3 in f && 4 in f) && !xor(5 in f, 6 in f) && (7 in f || 8 in f)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204115,"user_id":759,"body":"function isvalid(formula)\n  f = Set(formula)\n  all(x -> length(intersect(f, [x[1], x[1] + 1])) != x[2], zip(1:2:7, [2, 2, 1, 0]))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204116,"user_id":null,"body":"isvalid(f) = !(1 \u2208 f && 2 \u2208 f) && !(3 \u2208 f && 4 \u2208 f) && ((5 \u2208 f && 6 \u2208 f) || !(5 \u2208 f || 6 \u2208 f)) && (7 \u2208 f || 8 \u2208 f)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204117,"user_id":480,"body":"function isvalid(a)\n  cannotbsast=(x,y)->(!(x in a) || !(y in a))\n  mustbsast=(x,y)->((x in a)==(y in a))\n  mustbs=(x,y)->((x in a)||(y in a))\n  cannotbsast(1,2)&&cannotbsast(3,4)&&mustbsast(5,6)&&mustbs(7,8)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204118,"user_id":null,"body":"function isvalid(formula)\n  !(1 in formula  && 2 in formula) &&\n  !(3 in formula  && 4 in formula) &&\n  !((5 in formula) \u22bb (6 in formula)) &&\n  (7 in formula || 8 in formula)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204119,"user_id":null,"body":"isvalid(formula) = !(7 in formula || 8 in formula) ? false :\n    xor(5 in formula, 6 in formula) ? false :\n    issubset([1,2], formula) ? false :\n    issubset([3,4], formula) ? false : true\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204120,"user_id":null,"body":"function isvalid(f)\n  (7 \u2208 f || 8 \u2208 f) && ((5 \u2208 f && 6 \u2208 f)||(5 \u2209 f && 6 \u2209 f)) && ((3 \u2208 f && 4 \u2209 f) || (4 \u2208 f && 3 \u2209 f) || (3 \u2209 f && 4 \u2209 f) ) && ((1 \u2208 f && 2 \u2209 f) || (2 \u2208 f && 1 \u2209 f) || (1 \u2209 f && 2 \u2209 f) )\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204121,"user_id":2525,"body":"function isvalid(formula)\n    if      1 \u2208 formula && 2 \u2208 formula   return false\n    elseif  3 \u2208 formula && 4 \u2208 formula   return false\n    elseif  5 \u2208 formula && 6 \u2209 formula   return false    \n    elseif  6 \u2208 formula && 5 \u2209 formula   return false    \n    elseif  7 \u2208 formula                  return true\n    elseif  8 \u2208 formula                  return true    \n    else                                 return false\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204122,"user_id":null,"body":"function isvalid(formula)\n  if length(intersect(formula, [7 , 8])) == 0\n    return false\n  elseif length(intersect(formula, [5 , 6])) == 1\n    return false\n  elseif length(intersect(formula, [3 , 4])) == 2\n    return false\n  elseif length(intersect(formula, [1 , 2])) == 2\n    return false\n  else\n    return true\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59ca8246d751df55cc00014c":[{"id":204123,"user_id":527,"body":"function hero(bullets, dragons)\n  bullets >= dragons * 2\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204124,"user_id":null,"body":"hero(bullets, dragons) = dragons \u2264 bullets \u00f7 2","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204125,"user_id":564,"body":"hero(bullets, dragons) = bullets \u2265 2dragons","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204126,"user_id":null,"body":"function hero(bullets, dragons)\n  return bullets >= dragons * 2 ? true : false;\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204127,"user_id":2723,"body":"hero(bullets, dragons) = bullets >= 2dragons","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204128,"user_id":null,"body":"hero(bullets, dragons) = (bullets\/dragons >= 2) ? true : false\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204129,"user_id":null,"body":"function hero(bullets, dragons)\n  bullets >= 2*dragons\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204130,"user_id":null,"body":"function hero(bullets, dragons)\n  bullets \/ 2 \u2265 dragons\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204131,"user_id":168,"body":"function hero(bullets, dragons)\n  2 * dragons <= bullets\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204132,"user_id":null,"body":"function hero(bullets, dragons)\n  2dragons <= bullets ? true : false\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59cc4c5aaeb284b9a1000089":[{"id":204133,"user_id":759,"body":"module Kata\nexport showdigits\n\ndisplays = [\n  [\" - \", \"| |\", \"  \", \"| |\", \" - \"], # 0\n  [\"   \", \"  |\", \"   \", \"  |\", \"   \"], # 1\n  [\" - \", \"  |\", \" - \", \"|  \", \" - \"], # 2\n  [\" - \", \"  |\", \" - \", \"  |\", \" - \"],\n  [\"   \", \"| |\", \" - \", \"  |\", \"   \"],\n  [\" - \", \"|  \", \" - \", \"  |\", \" - \"],\n  [\" - \", \"|  \", \" - \", \"| |\", \" - \"],\n  [\" - \", \"  |\", \"   \", \"  |\", \"   \"],\n  [\" - \", \"| |\", \" - \", \"| |\", \" - \"],\n  [\" - \", \"| |\", \" - \", \"  |\", \" - \"], # 9\n]\n\nfunction hscale(d, size)\n  string(d[1], d[2] ^ size, d[end])\nend\n\nfunction scale(display, size)\n  a, b, c, d, e = display\n  [hscale(a, size), repeat([hscale(b, size)], size)...,\n    hscale(c, size), repeat([hscale(d, size)], size)...,\n    hscale(e, size)]\nend\n\nfunction showdigits(digits::AbstractString, size::Integer)::String\n  scaled = [scale(displays[Int(d) - Int('0') + 1], size) for d in digits]\n  join((rstrip(join((s[i] for s in scaled), \"\")) for i in 1:length(scaled[1])), \"\n\")\nend\n\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204134,"user_id":null,"body":"module Kata\nexport showdigits\n\nfunction showdigits(digits::AbstractString, size::Integer)::String\n  \n  n = size\n  \n  line1 = (i,j) -> (i==1 && 2<=j<=(n+1), \"-\")\n  line2 = (i,j) -> (i==(n+2) && 2<=j<=(n+1), \"-\")\n  line3 = (i,j) -> (i==2n+3 && 2<=j<=(n+1), \"-\")\n  line4 = (i,j) -> (2<=i<=(n+1) && j==1, \"|\")\n  line5 = (i,j) -> ((n+3)<=i<=(2n+2) && j==1, \"|\")\n  line6 = (i,j) -> (2<=i<=(n+1) && j==(n+2), \"|\")\n  line7 = (i,j) -> ((n+3)<=i<=(2n+2) && j==(n+2), \"|\")\n\n  make_lines_f = (x) -> (\n    x==\"1\" && return (line6,line7);\n    x==\"2\" && return (line1,line2,line3,line5,line6);\n    x==\"3\" && return (line1,line2,line3,line6,line7);\n    x==\"4\" && return (line2,line4,line6,line7);\n    x==\"5\" && return (line1,line2,line3,line4,line7);\n    x==\"6\" && return (line1,line2,line3,line4,line5,line7);\n    x==\"7\" && return (line1,line6,line7);\n    x==\"8\" && return (line1,line2,line3,line4,line5,line6,line7);\n    x==\"9\" && return (line1,line2,line3,line4,line6,line7);\n    x==\"0\" && return (line1,line3,line4,line5,line6,line7);\n  )\n\n  function pos_val(i,j, fs)\n    for f in fs\n      f(i,j)[1]==true && return f(i,j)[2]\n    end\n    return \" \"\n  end\n\n  function make_lines(s)\n    return [join((pos_val(i,j, make_lines_f(s)) for j=1:(n+2)),\"\") for i=1:(2n+3)]\n  end\n\n  combined = [make_lines(string(c)) for c in digits]\n  return join(\n        (rstrip(join((combined[k][i] for k=1:length(digits)),\"\")) for i=1:(2n+3)),\n        \"\n\")\n  \nend\n\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204135,"user_id":480,"body":"module Kata\nexport showdigits\n\nfunction showdigits(digits::AbstractString, size::Integer)::String\n  s=[0b1110111,0b0010010,0b1011101,0b1011011,0b0111010,0b1101011,0b1101111,0b1010010,0b1111111,0b1111011]\n  seg(d,i)=((s[Int(d)-47]>>i)&1)==1\n  rep(size,s)=join(fill(rstrip(s),size),\"\n\")\n  join(map(rstrip,[\n      join(map(d-> \" \"*(seg(d,6) ? \"-\" : \" \")^size*\" \",collect(digits))),\n      rep(size,join(map(d->(seg(d,5) ? \"|\" : \" \")*\" \"^size*(seg(d,4) ? \"|\" : \" \"),collect(digits)))),\n      join(map(d-> \" \"*(seg(d,3) ? \"-\" : \" \")^size*\" \",collect(digits))),\n      rep(size,join(map(d->(seg(d,2) ? \"|\" : \" \")*\" \"^size*(seg(d,1) ? \"|\" : \" \"),collect(digits)))),\n      join(map(d-> \" \"*(seg(d,0) ? \"-\" : \" \")^size*\" \",collect(digits))),\n      ]),\"\n\")\nend\n\n\n\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204136,"user_id":null,"body":"module Kata\nexport showdigits\n\nfunction showdigits(digits::AbstractString, size::Integer)::String\n    tops_mids_bots = [[\"-\", \" \", \"-\"], [\" \", \" \", \" \"], [\"-\", \"-\", \"-\"], [\"-\", \"-\", \"-\"], [\" \", \"-\", \" \"], [\"-\", \"-\", \"-\"], [\"-\", \"-\", \"-\"], [\"-\", \" \", \" \"], [\"-\", \"-\", \"-\"], [\"-\", \"-\", \"-\"]]\n    top_betweens = [[\"|\", \" \", \"|\"], [\" \", \" \", \"|\"], [\" \", \" \", \"|\"], [\" \", \" \", \"|\"], [\"|\", \" \", \"|\"], [\"|\", \" \", \" \"], [\"|\", \" \", \" \"], [\" \", \" \", \"|\"], [\"|\", \" \", \"|\"], [\"|\", \" \", \"|\"]]\n    bot_betweens = [[\"|\", \" \", \"|\"], [\" \", \" \", \"|\"], [\"|\", \" \", \" \"], [\" \", \" \", \"|\"], [\" \", \" \", \"|\"], [\" \", \" \", \"|\"], [\"|\", \" \", \"|\"], [\" \", \" \", \"|\"], [\"|\", \" \", \"|\"], [\" \", \" \", \"|\"]]\n    top, top_btw, mid, bot_btw, bot = [], [], [], [], [] \n    for i in digits\n        push!(top, tops_mids_bots[parse(Int, i)+1][1]^size)\n        push!(top_btw, top_betweens[parse(Int, i)+1][1] * top_betweens[parse(Int, i)+1][2]^size * top_betweens[parse(Int, i)+1][3])\n        push!(mid, tops_mids_bots[parse(Int, i)+1][2]^size)\n        push!(bot_btw, bot_betweens[parse(Int, i)+1][1] * bot_betweens[parse(Int, i)+1][2]^size * bot_betweens[parse(Int, i)+1][3])\n        push!(bot, tops_mids_bots[parse(Int, i)+1][3]^size)\n    end\n    rstrip(\" \"*join(top, \"  \"))*'\n' * (rstrip(join(top_btw))*'\n')^size * rstrip(\" \"*join(mid, \"  \"))*'\n' * (rstrip(join(bot_btw))*'\n')^size * rstrip(\" \"*join(bot, \"  \"))\nend\n\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204137,"user_id":2525,"body":"module Kata\nexport showdigits\n\nonetwoetc = \"\n :  -  -  :  -  -  -  -  -  - \n :| :| :||:||: |:  :||:||:||:|\n :  -  -  -  -  -  :  -  -  : \n :||:  :| :| :||:| :||:| :||:|\n :  -  -  :  -  -  :  -  -  - \"[2:end]\n\nfunction showdigits(digits::AbstractString, size::Integer)::String\n    map = Dict( (\"$(i%10)\", [line[i*3-2:i*3] for line in split(onetwoetc, '\n')] ) for i in 1:10 )\n    \n    t  = rstrip( replace( replace( join(map[string(d)][1] for d in digits), '-'=>'-'^size), ':'=>' '^size) )\n    tm = rstrip( replace( replace( join(map[string(d)][2] for d in digits), '-'=>'-'^size), ':'=>' '^size) )\n    m  = rstrip( replace( replace( join(map[string(d)][3] for d in digits), '-'=>'-'^size), ':'=>' '^size) )\n    mb = rstrip( replace( replace( join(map[string(d)][4] for d in digits), '-'=>'-'^size), ':'=>' '^size) )\n    b  = rstrip( replace( replace( join(map[string(d)][5] for d in digits), '-'=>'-'^size), ':'=>' '^size) )\n  \n    showoff = []\n    push!(showoff, t)\n    for i in 1:size; push!(showoff, tm) end\n    push!(showoff, m)\n    for i in 1:size; push!(showoff, mb) end\n    push!(showoff, b)\n  \n    println(join(showoff, '\n'))\n    join(showoff, '\n')  \nend\n\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204138,"user_id":null,"body":"module Kata\nexport showdigits\n\nstruct FunDigit\n  tl::Bool\n  tt::Bool\n  tr::Bool\n  mm::Bool\n  bl::Bool\n  bb::Bool\n  br::Bool\nend\n\nconst DIGS = Dict(\n  '0' => FunDigit(true, true, true, false, true, true, true),\n  '1' => FunDigit(false, false, true, false, false, false, true),\n  '2' => FunDigit(false, true, true, true, true, true, false),\n  '3' => FunDigit(false, true, true, true, false, true, true),\n  '4' => FunDigit(true, false, true, true, false, false, true),\n  '5' => FunDigit(true, true, false, true, false, true, true),\n  '6' => FunDigit(true, true, false, true, true, true, true),\n  '7' => FunDigit(false, true, true, false, false, false, true),\n  '8' => FunDigit(true, true, true, true, true, true, true),\n  '9' => FunDigit(true, true, true, true, false, true, true)\n)\n\nconst digmem = Dict{Tuple{Char, Integer}, Vector{String}}()\n\nfunction showdigit(digit::Char, size::Integer)\n  get!(digmem, (digit, size)) do\n    fd = DIGS[digit]\n    [\n      ' ' * (fd.tt ? '-' : ' ')^size * ' ',\n      repeat([(fd.tl ? '|' : ' ') * ' '^size * (fd.tr ? '|' : ' ')], size)...,\n      ' ' * (fd.mm ? '-' : ' ')^size * ' ',\n      repeat([(fd.bl ? '|' : ' ') * ' '^size * (fd.br ? '|' : ' ')], size)...,\n      ' ' * (fd.bb ? '-' : ' ')^size * ' '\n    ]\n  end\nend\n\n\n\nfunction showdigits(digits::AbstractString, size::Integer)::String\n  digvec = showdigit.(collect(digits), size)\n  join([rstrip(join(row)) for row in zip(digvec...)], '\n')\nend\n\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204139,"user_id":209,"body":"module Kata\nexport showdigits\n\nfunction write(board, y, x, ye, xe, f, iy, ix)\n    sy, sx = y, x\n    while sy < ye && sx < xe\n        board[sy + 1][sx + 1] = f\n        sy, sx = sy + iy, sx + ix\n    end\nend\n\nfunction generator(number, S)\n    I = 1e10\n    arr = [[' ' for i in 1:S+2] for j in 1:2*S+3]\n    W = [(0, 1, I, S + 1, '-', 0, 1),\n         (1, 0, S + 1, I, '|', 1, 0),\n         (1, S + 1, S + 1, I, '|', 1, 0),\n         (S + 1, 1, I, S + 1, '-', 0, 1),\n         (S + 2, 0, 2 * S + 2, I, '|', 1, 0),\n         (S + 2, S + 1, 2 * S + 2, I, '|', 1, 0),\n         (2 * S + 2, 1, I, S + 1, '-', 0, 1)]\n    for (i, j) in enumerate(W)\n        if !in(Char(47+i), number)\n            write(arr, j...)\n        end\n    end\n    [join(i) for i in arr]\nend\n\nS = [\"3\", \"01346\",\"15\",\"14\",\"046\",\"24\",\"2\",\"1346\",\"\",\"4\"]\nQ = Dict(Char(47 + j) => x -> generator(i, x) for (j, i) in enumerate(S))\n\nfunction showdigits(number, size)\n    V = map(x->Q[x](size), [number...])\n    join([replace(join([j[i] for j in V]), r\" +$\"=>\"\") for i in 1:length(V[1])],\"\n\")\nend\n\n\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204140,"user_id":881,"body":"module Kata\nexport showdigits\n\nlitsegments = Dict(\n    '0' => \"-|| ||-\",\n    '1' => \"  |  | \",\n    '2' => \"- |-| -\",\n    '3' => \"- |- |-\",\n    '4' => \" ||- | \",\n    '5' => \"-| - |-\",\n    '6' => \"-| -||-\",\n    '7' => \"- |  | \",\n    '8' => \"-||-||-\",\n    '9' => \"-||- |-\"\n)\n\nfunction makedigit(digit::AbstractChar, size::Integer)::Vector{String}\n    d = litsegments[digit]\n    [\n        \" $(repeat(d[1], size)) \", \n        (\"$(d[2])$(repeat(\" \", size))$(d[3])\" for _ in 1:size)...,\n        \" $(repeat(d[4], size)) \",\n        (\"$(d[5])$(repeat(\" \", size))$(d[6])\" for _ in 1:size)...,\n        \" $(repeat(d[7], size)) \",\n    ]\nend\n\nfunction showdigits(digits::AbstractString, size::Integer)::String\n    join(rstrip.(prod(hcat(makedigit.(collect(digits), size)...), dims=2)), '\n')\nend\n\nend # module\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59ccf051dcc4050f7800008f":[{"id":204141,"user_id":null,"body":"module Buddy\n    export buddy\n    \n    function decompose(n::Int)::Int\n      sum = 1\n      current = 2\n      while current <= sqrt(n)\n        if n % current == 0\n          sum += current\n          if current != n \/ current\n            sum += n \/ current\n          end\n        end\n        current += 1\n      end\n      return sum\n    end\n    \n    \n    function buddy(start::Int, nd::Int)::String\n      for n = start:nd\n        s1 = decompose(n)\n        m = s1 - 1\n        if m > n\n          s2 = decompose(m)\n          if s2 == n + 1\n            return \"($n $m)\"\n          end\n        end\n      end\n      return \"Nothing\"\n    end\nend ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204142,"user_id":492,"body":"module Buddy\n    export buddy\n    function nbd(n)\n        if (n < 2) return 0 end\n        total = 1; i = 2\n        while (i * i < n)\n            if n % i == 0\n                total += div(n, i) + i\n            end\n            i += 1\n        end\n        if (i * i == n)\n            total += i\n        end  \n        total\n    end\n    function buddy(start::Int, nd::Int)::String\n        n = start\n        while (n <= nd)\n            m = nbd(n) - 1\n            if (n == (nbd(m) - 1) && n < m)\n                return \"($n $m)\"\n            end\n            n += 1\n        end\n        \"Nothing\"\n    end\nend ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204143,"user_id":null,"body":"module Buddy\n    export buddy\n\n    function div_sum(n, i=2, val = 1, count = 0)\n        (n % i == 0 && n != 1) && return div_sum(n\u00f7i, i, val, count+1)\n        val *= (i^(count+1) - 1) \u00f7 (i - 1)\n        for j in i+i%2+1:2:isqrt(n)\n            n % j == 0 && return div_sum(n\u00f7j, j, val, 1) end\n        val * (n == 1 ? 1 : (n^2 - 1) \u00f7 (n - 1))\n    end \n\n    function buddy(start::Int, nd::Int)::String\n        for i in start:nd\n            high = div_sum(i) - i - 1\n            low = high < i ? 0 : div_sum(high) - high - 1\n            low == i && return \"($low $high)\" end\n        \"Nothing\"\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204144,"user_id":null,"body":"module Buddy\n    export buddy\n\n    PS = [2]\n\n    D = Dict()\n    Q = 3\n    \n\n\n    function generPrimes(upto)\n      while Q < upto\n        p = haskey(D, Q) ? pop!(D, Q) : nothing\n        if p == nothing\n          D[Q*Q] = 2*Q\n          push!(PS, Q)\n        else\n          x = p+Q\n          while haskey(D, x) x += p end\n          D[x] = p\n        end\n        global Q += 2\n      end\n    end\n    \n    function factor(n)\n      pLim = trunc(Int, n^0.5)\n      if PS[end]<pLim generPrimes(pLim+1) end\n      ret = []\n      for p in PS\n        if p>pLim break end\n        a = 0\n        while n%p==0\n          a += 1\n          n = fld(n, p)\n        end  \n        if a>0\n          push!(ret, (p, a))\n          if n==1 break end\n        end\n      end\n      if n>1\n        push!(ret, (n, 1))\n      end\n      return ret\n    end\n\n\n    function divisorSum(n)\n      #sum(d for d in 1:n if n%d==0)\n      if n==1 return 0 end\n      return prod(sum(p^k for k in 0:a) for (p,a) in factor(n))\n    end\n\n    function divisorSumIs(m, s)\n      pLim = trunc(Int, m^0.5)\n      if PS[end]<pLim generPrimes(pLim+1) end\n      ret = 1\n      for p in PS\n        if p>pLim break end\n        a = 0\n        while m%p==0\n          a += 1\n          m = fld(m, p)\n        end  \n        if a>0\n          ret *= sum(p^k for k in 0:a)\n          if ret>s return false end\n          if m==1 break end\n        end\n      end\n      if m>1\n        ret *= 1+m\n      end\n      return ret==s\n    end\n\n\n    nToDivis = [1]\n    diviToN = Dict(1=>[1])\n    \n    function doTheDiviStuff(upto)\n      for n in length(nToDivis)+1:upto\n        dSum = divisorSum(n)\n        push!(nToDivis, dSum)\n        if !haskey(diviToN, dSum) diviToN[dSum] = [] end\n        push!(diviToN[dSum], n)\n      end\n    end\n\n\n    divisorSumMemoed(n) = nToDivis[n]\n\n\n  \n    function buddy(start::Int, nd::Int)::String\n  \n        #doTheDiviStuff(nd)\n  \n        println(start, \" to \", nd)\n  \n        for n in start:nd\n          sn = divisorSum(n)-n\n          m = sn-1\n          #need divisorSum(m) =: sm+m == n+1+m  \n          if m>n && divisorSumIs(m, n+1+m) return \"($n $m)\" end\n        end\n        return \"Nothing\"\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204145,"user_id":168,"body":"module Buddy\n    export buddy\n    function sumDivs(n)\n      r, d = 0, 2\n      while d * d <= n\n        if n % d == 0\n          r += d + (d * d < n ? n \u00f7 d : 0)\n        end\n        d += 1\n      end\n      r\n    end\n\n    function buddy(start::Int, nd::Int)::String\n      for n in start:(nd + 1)\n        t = sumDivs(n)\n        if t > n && sumDivs(t) == n\n          return \"($n $t)\"\n        end\n      end\n      \"Nothing\"\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204146,"user_id":null,"body":"module Buddy\n    export buddy\n    function buddy(start::Int, nd::Int)::String\n        for n in start:nd\n            m = sumdivisors(n) - 1\n            if m > n && sumdivisors(m) - 1 == n\n                return \"($n $m)\"\n            end\n        end\n        return \"Nothing\"\n    end\n\n    function sumdivisors(n::Int)\n        sumd = 0\n        for i in 1:ceil(Int, \u221a(n))\n            if n % i == 0\n                if i \u2260 n \u00f7 i\n                    sumd += i + n \u00f7 i\n                else\n                    sumd += i\n                end\n            end\n        end\n        return sumd - n\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204147,"user_id":53,"body":"module Buddy\n    export buddy\n    function buddy(start::Int, nd::Int)::String\n        i = start\n        while i <= nd\n            a = fdivsum(i)\n            if a - 1 > i\n                b = fdivsum(a - 1)\n                if b - 1 == i\n                    return \"(\" * string(i) * \" \" * string(a - 1) * \")\"\n                end\n            end\n            i += 1\n        end\n        return \"Nothing\"\n    end\n    function fdivsum(n::Int)::Int\n        sum = 1\n        i = 2\n        while i <= floor(Int, sqrt(n))\n            if n % i == 0 \n                sum += i\n                if i != n\/i \n                    sum += n\/i\n                end\n            end\n            i += 1\n        end\n        sum\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204148,"user_id":null,"body":"module Buddy\n    export buddy\n    function is_prime(x)\n        x == 1 && return false\n        (x == 2 || x == 3) && return true\n        (x%6 != 1 && x%6 != 5) && return false\n        for i in 5:\u221ax\n            (x%i == 0 || x%(1+2) == 0) && return false\n        end\n        true\n    end\n    \n    function pfc(n)\n        result = Dict{Int, Int}()\n        i = 0\n        if n == 1\n            resilt[1] = 1\n            return result\n        end\n        while i < n\n            if is_prime(n)\n                !haskey(result, n) && (result[n] = 0)\n                result[n] += 1\n                return result\n            end\n            for i in 2:n-1\n                if n%i == 0\n                    !haskey(result, i) && (result[i] = 0)\n                    result[i] += 1\n                    n \u00f7= i\n                    break\n                end\n            end\n        end\n        !haskey(result, n) && (result[n] = 0)\n        result[n] += 1\n        result\n    end\n    \n    function s(n)\n        n < 48 && return 0\n        pfcs = pfc(n)\n        sum = 1\n        for k in keys(pfcs)\n            sum *= (k^(pfcs[k] + 1) - 1) \u00f7 (k - 1)\n        end\n        sum - n - 1\n    end\n    \n    function buddy(b, e)\n        for i in b:e\n            j = s(i)\n            j < i && continue\n            s(j) == i && return \"($i $j)\"\n        end\n        \"Nothing\"\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204149,"user_id":null,"body":"module Buddy\n  export buddy\n\n  factorsum(n::Int)::Int = sum(i + fld(n, i) for i in 1:ceil(Int, sqrt(n)) if iszero(n%i)) - n - 1\n\n  function buddy(start::Int, limit::Int)::String\n    for n in start:limit\n      sn = factorsum(n)\n      sn > n && n == factorsum(sn) && return \"($n $sn)\"\n    end\n    \"Nothing\"\n  end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204150,"user_id":null,"body":"module Buddy\n  export buddy\n\n  factorsum(n::Int)::Int = sum(i + fld(n, i) for i in 1:Int(floor(sqrt(n))) if iszero(n%i)) - n - 1\n\n  function buddy(start::Int, limit::Int)::String\n    for n in start:limit\n      sn = factorsum(n)\n      sn > n && n == factorsum(sn) && return \"($n $sn)\"\n    end\n    \"Nothing\"\n  end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59d727d40e8c9dd2dd00009f":[{"id":204151,"user_id":null,"body":"module Bal\n    export balance\n    using Printf\n\nfunction balance(book)\n    clean = [[item.match for item in transact] for transact in eachmatch.(r\"\\d+\\.\\d+|\\w+|\\d+\", split(book, '\n', keepempty=false))]\n    vals = [parse(Float64, payment[end]) for payment in clean]\n    bal = vals[1] .- cumsum(vals[2:end])\n    org = \"Original Balance: $(@sprintf(\"%.2f\", vals[1]))\n\" \n    tot = \"Total expense  $(@sprintf(\"%.2f\", sum(vals[2:end])))\n\"\n    avg = \"Average expense  $(@sprintf(\"%.2f\", sum(vals[2:end])\/(length(vals)-1)))\"\n    org * join(\"$(v[1]) $(v[2]) $(@sprintf(\"%.2f\", vals[i+1])) Balance $(@sprintf(\"%.2f\", bal[i]))\n\" for (i,v) in enumerate(clean[2:end])) * tot * avg\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204152,"user_id":null,"body":"module Bal\nexport balance\n\nfunction floatToDecimal(f)\n  s = string(round(f, digits = 2))\n  s[end - 1] == '.' ? s * \"0\" : s\nend\n\nfunction balance(book)\n  lines = split(replace(book, r\"[^\n .0-9A-Za-z]\" => \"\"), \"\n\", keepempty = false)  \n  balance = parse(Float64, lines[1])\n  balanceString = \"Original Balance: $(floatToDecimal(balance))\n\"  \n  expenses = 0\n  checks = map(lines[2:length(lines)]) do line\n    check, name, amount = split(line)\n    amount = parse(Float64, amount)\n    expenses += amount\n    balance -= amount\n    \"$check $name $(floatToDecimal(amount)) Balance $(floatToDecimal(balance))\"\n  end\n  balanceString * join(checks, \"\n\") * \"\nTotal expense  $(floatToDecimal(expenses))\nAverage expense  $(floatToDecimal(expenses \/ (length(lines) - 1)))\"\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204153,"user_id":492,"body":"module Bal\n    export balance\n    using Printf\n\n    function balance(book)\n        bk = split(replace(book, Pair(r\"[^\n. \\dA-Za-z]\", \"\")), r\"\n+\", keepempty = false)\n        total = current = parse(Float64, bk[1])\n        count = 0\n        res = @sprintf(\"Original Balance: %.2f\", total)\n        for line in bk[2:end]\n            if (line != \"\")\n                count += 1\n                line = split(line, r\" +\")\n                current -= parse(Float64, line[3])\n                res *= @sprintf(\"\n%s %s %.2f Balance %.2f\", line[1], line[2], parse(Float64, line[3]), current)\n            end\n        end\n        res * @sprintf(\"\nTotal expense  %.2f\nAverage expense  %.2f\", total - current, (total - current) \/ count)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204154,"user_id":null,"body":"module Bal\n  export balance\n\n  function balance(book)\n    left, allexp, num = 0, 0, 0\n    ret = []\n    for (i,el) in enumerate(split(book, \"\n\"))\n      el = replace(string(el), r\"[^a-zA-Z0-9\\. ]\", \"\")\n      ismatch(r\"^\\s*$\", el) && continue\n      if i == 1\n        left = parse(Float64, el)\n        push!(ret, @sprintf(\"Original Balance: %.2f\", left))\n      else\n        a = split(el)\n        spend = parse(Float64, a[3])\n        left -= spend\n        allexp += spend\n        num += 1\n        push!(ret, @sprintf(\"%s %s %.2f Balance %.2f\", a[1], a[2], spend, left))\n      end\n    end\n    push!(ret, @sprintf(\"Total expense  %.2f\", allexp))\n    push!(ret, @sprintf(\"Average expense  %.2f\", allexp\/num))\n    join(ret, \"\n\")\n  end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204155,"user_id":2525,"body":"module Bal\n    export balance\n\n    function balance(book)        \n        lines = book |> s->replace(s, r\"[^a-zA-Z0-9.\\s]\", \"\") |> s->replace(s, r\"\n\\s*\n\", \"\n\") |> s->replace(s, r\"\n\\Z\", \"\") |> s->split(s, \"\n\")\n        \n        original = parse(Float64, lines[1]) \n        items    = lines[2:length(lines)]\n       \n        report  = \"\"\"Original Balance: $(@sprintf(\"%.02f\", original))\n\"\"\"\n        balance = original\n        for item in items\n            (nr, description, amount) = split(item)\n            amount = parse(Float64, amount)\n            balance -= amount\n\n            report *= \"\"\"$(nr) $(description) $(@sprintf(\"%.02f\", amount)) Balance $(@sprintf(\"%.02f\", balance))\n\"\"\"\n        end\n        \n        report *= \"\"\"Total expense  $(@sprintf(\"%.2f\", original-balance))\n\"\"\"\n        report *= \"\"\"Average expense  $(@sprintf(\"%.2f\", (original-balance)\/length(items)))\"\"\"\n        \n        report\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59d7c910f703c460a2000034":[{"id":204156,"user_id":null,"body":"function solomons_quest(A::Array{Int,2})::Array{Int,1}\n    location, dilation, direction = [0, 0], 0, Dict(zip(0:3, [[0,1],[1,0],[0,-1],[-1,0]]))\n    for i in 1:size(A)[1]\n        dilation += A[i, 1]\n        location += direction[A[i, 2]] * A[i, 3] * 2^dilation\n    end\n    location\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204157,"user_id":null,"body":"function solomons_quest(A::Array{Int,2})::Array{Int,1}\n    current_location = [0,0]\n    current_level = 0\n    for (level, direction , distance) in eachrow(A)\n        current_level += level\n        current_location += solomonstep(current_level, direction, distance)\n    end\n    return current_location\nend\n\nfunction solomonstep(level, direction, distance)\n    standard_distance = distance*2^level\n    if iseven(direction)\n        if direction == 0\n            return [0, standard_distance]\n        else\n            return [0, -standard_distance]\n        end\n    else\n        if direction == 1\n            return [standard_distance, 0]\n        else\n            return [-standard_distance, 0]\n        end\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204158,"user_id":2525,"body":" \nfunction solomons_quest(A::Array{Int,2})::Array{Int,1}\n    pos = [0, 0]    \n    ctd = 0\n  \n    vec = Dict( 0 => [0, 1], 1 => [1, 0], 2 => [0, -1], 3 => [-1, 0])\n     \n    for (td, dir, dist) in eachrow(A)\n        ctd += td    \n        pos .+= (2^ctd * dist) .* vec[dir]\n    end\n  \n    pos\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204159,"user_id":1474,"body":"mutable struct TemporalCrystalMaze\n  level :: Int64\n  x :: Int64\n  y :: Int64\n  TemporalCrystalMaze() = new(0, 0, 0)\nend\n\nfunction move(maze::TemporalCrystalMaze, level::Int64, dir::Int64, dist::Int64)\n  maze.level += level\n  a_dist = convert(Int, dist * 2 ^ maze.level)\n  change_location(maze, dir, a_dist)\nend\n\nfunction change_location(maze::TemporalCrystalMaze, dir::Int64, dist::Int64)\n  if dir == 0\n    maze.y += dist\n  elseif dir == 1\n    maze.x += dist\n  elseif dir == 2\n    maze.y -= dist\n  elseif dir == 3\n    maze.x -= dist\n  end\nend\n\nfunction solomons_quest(A::Array{Int,2})::Array{Int,1}\n  maze = TemporalCrystalMaze()\n  for i in 1:length(A)\u00f73\n    move(maze, A[i, 1], A[i, 2], A[i, 3])\n  end\n  [maze.x, maze.y]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204160,"user_id":881,"body":"if VERSION < v\"1.1\"\n    eachrow(A::AbstractVecOrMat) = (view(A, i, :) for i in axes(A, 1))\nend\n\nfunction solomons_quest(A::Array{Int,2})::Array{Int,1}\n    location = [0, 0]\n    layer = 0\n    directions = ([0, 1], [1, 0], [0, -1], [-1, 0])\n    for row in eachrow(A) \n        layerchange, direction, distance = row\n        layer += layerchange\n        location += distance * directions[direction+1] * (1 << layer)\n    end\n    location\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59d9d8cb27ee005972000045":[{"id":204161,"user_id":1474,"body":"module KataLog\n  export catalog\n\n  function catalog(s, article)\n    reg = Regex(\"\\\\<prod\\\\>\\\\<name\\\\>(.*$(article).*)\\\\<\/name\\\\>\\\\<prx\\\\>(.*)\\\\<\/prx\\\\>\\\\<qty\\\\>(\\\\d+)\\\\<\/qty\\\\>\")\n    ret = join([\"$(m[1]) > prx: \\$$(m[2]) qty: $(m[3])\" for m in eachmatch(reg, s)], '\n')\n    isempty(ret) ? \"Nothing\" : ret\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204162,"user_id":null,"body":"module KataLog\n    export catalog\n\n    function catalog(s, article)\n        cleaned = [m.captures for m in eachmatch(Regex(\"([\\\\w\\\\s]*\"*article*\"[\\\\w\\\\s]*)(?:<\/name><prx>)(\\\\d+\\\\.*\\\\d*)(?:<\/prx><qty>)(\\\\d+)\"), s)]\n        isempty(cleaned) ? \"Nothing\" : join([\"$(item[1]) > prx: \"*string('$')*\"$(item[2]) qty: $(item[3])\" for item in cleaned], \"\n\")\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204163,"user_id":null,"body":"module KataLog\n    export catalog\n\n    function catalog(s, article)\n        re = r\"<name>(.*?)<\\\/name><prx>(.*?)<\\\/prx><qty>(.*?)<\\\/qty>\"\n        returnline = []\n        for productline in split(s, \"\n\n\")\n            prod, prx, qty = match(re, productline[7:end-7]).captures\n            if occursin(article, prod)\n                push!(returnline, \"$prod > prx: \\$$prx qty: $qty\")\n            end\n        end\n        return isempty(returnline) ? \"Nothing\" : join(returnline, \"\n\")\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204164,"user_id":null,"body":"module KataLog\nexport catalog\n\nfunction catalog(s, article)\n  result = []\n  foreach(split(s, \"\n\", keepempty = false)) do line\n    name = match(r\"<name>(.*)<\/name>\", line).captures[1]\n    !occursin(article, name) && return\n    prx = match(r\"<prx>(.*)<\/prx>\", line).captures[1]\n    qty = match(r\"<qty>(.*)<\/qty>\", line).captures[1]\n    push!(result, \"$name > prx: \\$$prx qty: $qty\")\n  end\n  isempty(result) ? \"Nothing\" : join(result, \"\n\")  \nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204165,"user_id":492,"body":"module KataLog\n    using Printf\n    export catalog\n\n    function catalog(s, article)\n        r = String[]\n        arr = split(s, r\"\n+\", keepempty = false)\n        for line in arr\n            if (line != \"\")\n                l = split(line, r\"<.*?><.*?>\", keepempty = false)\n                if (length(l) != 0) && (occursin(article, l[1]))\n                    st =  @sprintf(\"%s > prx: \\$%s qty: %s\",  l[1], l[2], l[3])\n                    push!(r, st)\n                end\n            end\n        end\n        length(r) == 0 ? \"Nothing\" : join(r, \"\n\")\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204166,"user_id":null,"body":"module KataLog\n    export catalog\n\n  function catalog(s, article)\n   re = Regex(\"<prod><name>(.*?$article.*?)<\/name><prx>(.*?)<\/prx><qty>(.*?)<\/qty><\/prod>\")\n   function fmtItem(d) \n      (name, prx, qty) = d.captures\n      return \"$name > prx: \\$$prx qty: $qty\"\n    end\n    ms = eachmatch(re, s)\n    if(length(collect(ms)) ==0)\n        return \"Nothing\"\n    else\n      return join(map(fmtItem, ms),\"\n\")\n    end\nend\nend\n   \n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204167,"user_id":null,"body":"module KataLog\n  export catalog\n\n  function catalog(s, article)\n    arr = []\n    for line in split(s,\"\n\")\n      ismatch(r\"^\\s*$\", line) && continue\n      item = match(r\"\\<name\\>(.+)\\<\/name\\>\", line).captures[1]\n      if contains(item, article)\n        p = match(r\"\\<prx\\>(.+)\\<\/prx\\>\", line).captures[1]\n        q = match(r\"\\<qty\\>(.+)\\<\/qty\\>\", line).captures[1]\n        push!(arr, \"$(item) > prx: \\$$(p) qty: $(q)\")\n      end\n    end\n    !isempty(arr) ? join(arr,\"\n\") : \"Nothing\"\n  end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204168,"user_id":2525,"body":"module KataLog\n    export catalog\n    export abcd\n\n    function transform(line, name)\n        article  = replace(line, r\".*<name>(.+)<\/name>.*\", s\"\\1\")\n        price    = replace(line, r\".*<prx>(.+)<\/prx>.*\", s\"\\1\")\n        quantity = replace(line, r\".*<qty>(.+)<\/qty>.*\", s\"\\1\")            \n        \n        \"$(article) > prx: \\$$(price) qty: $(quantity)\"\n    end\n\n    function catalog(s, article)\n        ctlg = split(s, \"\n\")\n        \n        lines = filter(s->match(Regex(\"$(article)\"), s)!==nothing, ctlg)\n        lines = join(map(l->transform(l, article), lines), \"\n\")\n        if length(lines)==0 \"Nothing\" else lines end\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59d9ff9f7905dfeed50000b0":[{"id":204169,"user_id":759,"body":"function solve(arr)\n  [count(a -> a[1] == Int(uppercase(a[2])) - Int('A') + 1, enumerate(s)) for s in arr]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204170,"user_id":null,"body":"function solve(arr)\n   [sum(reduce.(==, zip('a':'z', lowercase(word)))) for word in arr]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204171,"user_id":50,"body":"function f(s)\n  i=1\n  n=0\n  for c in lowercase(s)\n    if c==\"abcdefghijklmnopqrstuvwxyz\"[i]\n      n+=1\n    end\n    i+=1\n  end\n  return n\nend\nfunction solve(arr)\n  map(f,arr)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204172,"user_id":168,"body":"function solve(arr)\n  [count(Int(x) % 32 == i for (i, x) in enumerate(s)) for s in arr]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204173,"user_id":null,"body":"# function solve(arr)\n#   lowerarr = [lowercase(str) for str in arr]\n#   narr = []\n#   for str in lowerarr\n#     n = 0\n#     for (index, letter) in enumerate(str)\n#       if index == Char(letter) - Char('a') + 1\n#         n += 1\n#       end\n#     end\n#     append!(narr, n)\n#   end\n#   narr\n# end\n\nfunction solve(arr)\n  lowerarr = [lowercase(str) for str in arr]\n  narr = []\n  for str in lowerarr\n    append!(narr, count([index == Char(c) - Char('a') + 1 for (index, c) in enumerate(str)]))\n  end\n  narr\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204174,"user_id":null,"body":"function solve(arr)\n  map(q->length([pos for (pos,char) in enumerate(q) if lowercase(char) == ('a':'z')[pos]]),arr)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204175,"user_id":2525,"body":"function solve(arr)\n    [sum([ c==Char(i+96) for (i, c) in enumerate(lowercase(word))]) for word in arr]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204176,"user_id":null,"body":"function countalpha(a)\n  alf = ('a':'z')\n  suma = 0\n  i = 1\n  while i <= length(a)\n    lowercase(a[i]) == alf[i] && (suma += 1)\n    i += 1\n  end\n  suma\nend\n\nsolve(arr) = countalpha.(arr)\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204177,"user_id":421,"body":"function solve(arr)\n  [sum(i == Int(s) - 96 for (i, s) in enumerate(lowercase(x))) for x in arr]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204178,"user_id":null,"body":"function solve(arr)\n  counts = Int[]\n  for str in arr\n    push!(counts, count([i == Int(lowercase(str)[i]) - 96 for i = 1:length(str)]))\n  end\n  \n  return counts\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59de1e2fe50813a046000124":[{"id":204179,"user_id":492,"body":"module MS\n    export change\n    using Printf\n\n    function change(s, prog, version)\n        phone = match(r\"Phone: (\\+1-\\d{3}-\\d{3}-\\d{4})\", s)\n        ver = match(r\"Version: (\\d+\\.\\d+)\n\", s)\n        if ver === nothing || phone === nothing\n            \"ERROR: VERSION or PHONE\"\n        else\n            p = \"+1-503-555-0090\"\n            v = ver.captures[1] == \"2.0\" ? \"2.0\" : version\n            @sprintf(\"Program: %s Author: g964 Phone: %s Date: 2019-01-01 Version: %s\", prog, p, v)\n        end\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204180,"user_id":null,"body":"module MS\n    export change\n\n    function change(s, prog, version)\n        (! occursin(r\"\\+1-\\d{3}-\\d{3}-\\d{4}\", s) || ! occursin(r\"Version: \\d+\\.\\d+\n\", s)) && return \"ERROR: VERSION or PHONE\"\n        program = replace(s, r\"Program title: .+\n\" => \"Program: $(prog) \")\n        author = replace(program, r\"Author: .+\n\" => \"Author: g964 \")\n        corp = replace(author, r\"Corporation: \\w+\n\" => \"\")\n        phone = replace(corp, r\"\\+1-\\d{3}-\\d{3}-\\d{4}\n\" => \"+1-503-555-0090 \")\n        date = replace(phone, r\"Date: .+\n\" => \"Date: 2019-01-01 \")\n        vers = occursin(r\"Version: 2.0\", date) ? date : replace(date, r\"Version: \\d+.\\d+\" => \"Version: $(version)\")\n        level = replace(vers, r\"\nLevel: .+\" => \"\")\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204181,"user_id":null,"body":"module MS\n    export change\n\n    function change(s, prog, version)\n        println(\"$prog $version\")\n        println(s)\n        data = [split(item, \": \") for item in split(s, '\n')]\n        #title\n        data[1][1] = \"Program\"\n        data[1][2] = prog\n        #author\n        data[2][2] = \"g964\"\n        #phone\n        regexphone = r\"\\+1-\\d{3}-\\d{3}-\\d{3}\\d$\"\n        if match(regexphone, data[4][2]) == nothing\n            return \"ERROR: VERSION or PHONE\"\n        else\n            data[4][2] = \"+1-503-555-0090\"\n        end\n        #date\n        data[5][2] = \"2019-01-01\"\n        #version\n        regexversion = r\"^\\d+\\.\\d+$\"\n        if data[6][2] == \"2.0\"\n            #\n        elseif match(regexversion, data[6][2]) == nothing\n            return \"ERROR: VERSION or PHONE\"\n        else\n            data[6][2] = version\n        end\n        # join\n        return join([join(element, \": \") for element in view(data, [1,2,4,5,6])], \" \")\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204182,"user_id":null,"body":"module MS\n    export change\n    \nstruct Entry\n    phone::String\n    version::String\nend\nfunction Entry(str::String)\n    lines = split(str, '\n')\n    info  = Dict(Pair(item...) for item in split.(lines, \": \"))\n    return Entry(info[\"Phone\"], info[\"Version\"])\nend\n\nfunction checkphone(entry::Entry)\n    occursin(r\"^\\+1-\\d{3}-\\d{3}-\\d{4}$\", entry.phone)\nend\nfunction checkversion(entry::Entry)\n    occursin(r\"^\\d+\\.\\d+$\", entry.version)\nend\n\nfunction change(entry::Entry, prog, version)\n    version = entry.version == \"2.0\" ? entry.version : version\n    \"Program: $prog Author: g964 Phone: +1-503-555-0090 Date: 2019-01-01 Version: $version\"\nend\n\nfunction change(s::String, prog, version)\n    entry = Entry(s)\n    checkphone(entry) && checkversion(entry) || return \"ERROR: VERSION or PHONE\"\n    change(entry, prog, version)\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204183,"user_id":null,"body":"module MS\n    export change\n\n    function change(s, prog, version)\n        tokens = split(s, \"\n\")\n        phoneind = findfirst(z->startswith(z, \"Phone\"), tokens)\n        phonenum_valid = match(r\"\\+1-[0-9]{3}-[0-9]{3}-[0-9]{4}\",\n                               tokens[phoneind])\n        if phonenum_valid === nothing\n            return \"ERROR: VERSION or PHONE\"\n        end\n        \n        versionind = findfirst(z->startswith(z, \"Version\"), tokens)\n        version_valid = match(r\"[^\\.][0-9]+\\.[0-9]+\\z\", tokens[versionind])\n        if version_valid === nothing\n            return \"ERROR: VERSION or PHONE\"\n        elseif endswith(version_valid.match, \"2.0\")\n            printed_version = \"2.0\"\n        else\n            printed_version = version\n        end\n        \"Program: \" * prog * \" Author: g964 Phone: +1-503-555-0090 Date: 2019-01-01 Version: \" * printed_version\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204184,"user_id":null,"body":"module MS\n  export change\n  function change(s, prog, version)\n    arr = []\n    for line in split(s, \"\n\")\n      ismatch(r\"(Corporation|Level):\", line) && continue\n      if contains(line, \"Program title:\")\n        push!(arr, string(\"Program: \", prog))\n      elseif contains(line, \"Author:\")\n        push!(arr, \"Author: g964\")\n      elseif contains(line, \"Date:\")\n        push!(arr, \"Date: 2019-01-01\")\n      elseif contains(line, \"Phone:\")\n        if ismatch(r\"Phone: +\\+1-\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d$\", line)\n          push!(arr, \"Phone: +1-503-555-0090\")\n        else \n          return \"ERROR: VERSION or PHONE\"\n        end\n      elseif contains(line, \"Version:\")\n        if ismatch(r\"Version: +\\d+\\.\\d+$\", line)\n          v = (split(line)[2] == \"2.0\") ? \"2.0\" : version\n          push!(arr, string(\"Version: \", v))\n        else\n          return \"ERROR: VERSION or PHONE\"\n        end\n      else\n        psuh!(arr, line)\n      end\n    end\n    join(arr, \" \")\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204185,"user_id":null,"body":"module MS\n    export change\n\n    const PHONE_RX = r\"^\\+1-\\d{3}-\\d{3}-\\d{4}$\"\n    const VERSION_RX = r\"^\\d+\\.\\d+$\"\n    \n    function change(s, prog, version)\n        out = []\n        for line in split(strip(s), '\n')\n            if startswith(line, \"Date: \")\n                push!(out, \"Date: 2019-01-01\")\n            elseif startswith(line, \"Author: \")\n                push!(out, \"Author: g964\")\n            elseif startswith(line, \"Program title: \")\n                push!(out, \"Program: $prog\")\n            elseif startswith(line, \"Corporation: \")\n                continue\n            elseif startswith(line, \"Level: \")\n                continue\n            elseif startswith(line, \"Phone: \")\n                phone = line[length(\"Phone: \") + 1:end]\n                ismatch(PHONE_RX, phone) || return \"ERROR: VERSION or PHONE\"\n                push!(out, \"Phone: +1-503-555-0090\")\n            elseif startswith(line, \"Version: \")\n                v = line[length(\"Version: \") + 1:end]\n                ismatch(VERSION_RX, v) || return \"ERROR: VERSION or PHONE\"\n                v == \"2.0\" && (version = v)\n                push!(out, \"Version: $version\")\n            else\n                push!(out, line)\n            end\n        end\n        return join(out, \" \")\n    end\n    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204186,"user_id":2525,"body":"module MS\n    export change\n\n    function change(s, prog, version)\n        if match(r\"Version: \\d+\\.\\d+\n\", s)==nothing || match(r\"Phone: \\+1-\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d\n\", s)==nothing\n            return \"ERROR: VERSION or PHONE\"\n        end\n    \n        t = replace(s, r\"Program title: .*\n\", \"Program: \" * prog * \"\n\")        \n        t = replace(t, r\"Author: .*\n\", \"Author: g964\n\")\n        t = replace(t, r\"Date: .*\n\", \"Date: 2019-01-01\n\")\n        t = replace(t, r\"Phone: .*\n\", \"Phone: +1-503-555-0090\n\")\n        t = replace(t, r\"Corporation: .*\n\", \"\")\n        if match(r\"Version: 2.0\", t)==nothing\n            t = replace(t, r\"Version: .*\n\", \"Version: \" * version * \"\n\")       \n        end\n        t = replace(t, r\"\nLevel: .*\", \"\")\n        \n        t = replace(t, r\"\n\", \" \")\n\n        t\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59df2f8f08c6cec835000012":[{"id":204187,"user_id":null,"body":"module JohnMeeting\n    export meeting\n\n    function meeting(s)\n        s = split.(split(uppercase(s), ';'), ':')\n        s = sort([\"($b, $a)\" for (a, b) in s])\n        join(s)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204188,"user_id":null,"body":"module JohnMeeting\n    export meeting\n    \n    function meeting(s)\n        names = collect(split(n, ':') for n in split(uppercase(s), ';'))\n        \n        sort!(names, by = first)\n        sort!(names, by = last)\n        \n        reduce(*, \"($(last(name)), $(first(name)))\" for name in names)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204189,"user_id":492,"body":"module JohnMeeting\n    export meeting\n\n    function meeting(s)\n        u = split(uppercase(s), r\";\")\n        r = Tuple{String,String}[]\n        for x in u\n            xx = reverse(tuple(split(x, r\":\")...))\n            push!(r, xx)\n        end\n        join(map(x -> \"(\" * x[1] * \", \" * x[2] * \")\", sort(r)), \"\")\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204190,"user_id":881,"body":"module JohnMeeting\n    export meeting\n\n    function meeting(s)\n        reduce(*, sort(map(t -> \"(\" * join(map(uppercase, reverse(split(t, \":\"))), \", \") * \")\", split(s, \";\"))))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204191,"user_id":null,"body":"import Base\n\nmodule JohnMeeting\n    export meeting\n    struct FullName\n        FName::String\n        LName::String\n    end\n    FullName(s::SubString) = FullName(string(s))\n    FullName(s::String) = FullName(split(uppercase(s),':')...)\n    Base.string(a::FullName) = \"($(a.LName), $(a.FName))\"\n    Base.print(io::IO, a::FullName) = print(io, string(a))\n    function Base.isless(a::FullName, b::FullName)\n        if a.LName==b.LName\n            return a.FName<b.FName\n        else\n            return a.LName<b.LName\n        end\n    end\n    function meeting(s)\n        string(sort(FullName.(split(s,';')))...)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204192,"user_id":null,"body":"module JohnMeeting\n    export meeting\n\n    function meeting(s)\n      people = []\n      for s in split(uppercase(s), \";\")\n        names = split(s, \":\")\n        push!(people, \"(\" * names[2] * \", \" * names[1] * \")\")\n      end\n      return join(sort(people))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204193,"user_id":null,"body":"module JohnMeeting\n    export meeting\n\n    function meeting(s)\n    s = uppercase(s)\n    temp = split(s, ';')\n    names = []\n    for name \u2208 temp\n        name = reverse(split(name, ':'))\n        name = \"(\" * name[1] * \", \" * name[2] * \")\"\n        push!(names, name)\n    end\n    return join(sort(names),\"\")\nend\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204194,"user_id":null,"body":"module JohnMeeting\n    export meeting\n\n    function meeting(s)\n        join(sort(['(' * join(reverse(split(e, ':')), \", \") * ')' for e in map(uppercase, split(s, ';'))]))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204195,"user_id":null,"body":"module JohnMeeting\n    export meeting\n\n    function meeting(s)\n        join(\"($(n[1]), $(n[2]))\" for n in sort!([uppercase.([name[2], name[1]]) for name in split.(split(s, \";\"), \":\")]))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204196,"user_id":null,"body":"module JohnMeeting\n    export meeting\n\n    function meeting(s)\n        vec = split(uppercase(s), \";\")\n        vec = [reverse(split(x, \":\")) for x in vec] |> sort\n        join([\"($a, $b)\" for (a, b) in vec])\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59e0dbb72a7acc3610000017":[{"id":204197,"user_id":881,"body":"coprimes(n::Integer) = filter(isone \u2218 Base.Fix1(gcd, n), oneunit(n):n)\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204198,"user_id":527,"body":"function coprimes(n::Integer)::Vector{Integer}\n  [i for i in 1:n if gcd(n, i) == 1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204199,"user_id":null,"body":"function coprimes(n::Integer)\n  coprimes = [1]\n  \n  for num in 2:n\n    if gcd(n, num) == 1\n      push!(coprimes, num)\n    end\n  end\n  \n  return coprimes  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204200,"user_id":null,"body":"coprimes(n::Integer) = filter(i-> isone(gcd(i,n)), 1:n)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204201,"user_id":53,"body":"function coprimes(n::Integer)\n  ns = []\n  i = 1\n  while i < n\n    if gcd(n, i) == 1\n      push!(ns, i)\n    end\n    i = i + 1\n  end\n  return ns\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204202,"user_id":50,"body":"function gcd(a::Integer, b::Integer)\n  if b == 0\n    return a\n  else\n    return gcd(b, a%b)\n  end\nend\n\nfunction coprimes(n::Integer)\n  o = []\n  for i in 1:n-1\n    if gcd(n,i) == 1\n      push!(o,i)\n    end\n  end\n  return o\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59e49b2afc3c494d5d00002a":[{"id":204203,"user_id":544,"body":"sort_vowels(s) = \"\"\nfunction sort_vowels(s::String)\n  join(map(c -> \u2208(c, \"aeiouAEIOU\") ? \"|\" * string(c) : string(c) * \"|\", collect(s)), \"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204204,"user_id":527,"body":"sort_vowels(s::String) = join((c in \"AEIOUaeiou\" ? '|' * c : c * '|' for c = s), '\n')\nsort_vowels(s) = \"\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204205,"user_id":759,"body":"sort_vowels(s) = isa(s, String) ? join((c \u2208 \"AEIOUaeiou\" ? \"|$c\" : \"$c|\" for c in s), \"\n\") : \"\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204206,"user_id":null,"body":"sort_vowels(s) = isa(s, String) ? join([occursin(ch, \"aeiouAEIOU\") ? '|'*ch : ch*'|' for ch in s], '\n') : \"\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204207,"user_id":null,"body":"function sort_vowels(s::String)\n    vowels = \"aeiou\"\n    vowels *= uppercase(vowels)\n    return join([(occursin(letter, vowels) ? \"|\"*letter : letter*\"|\") for letter in s], \"\n\")\nend\n\nsort_vowels(s::Integer) = \"\"\nsort_vowels(s::Nothing) = \"\"\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204208,"user_id":null,"body":"function sort_vowels(s)\n    if typeof(s) != String\n      return \"\"\n    end\n    vowels = \"aeiou\"\n    res = \"\"\n    for q in s\n      if lowercase(q) in vowels\n        res *= \"|$(q)\n\"\n      else\n        res *= \"$(q)|\n\"\n      end\n    end\n    res[begin:end-1]\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204209,"user_id":null,"body":"function sort_vowels(s)\n  \n  if !(s isa String )\n    return \"\"\n  end\n  \n  vowels = \"aeiou\"\n  out = \"\"\n\n  for c in s\n      out *= occursin(lowercase(\"$c\"), vowels) ? \"|$(c)\n\" : \"$(c)|\n\" \n  end\n\n  return chomp(out)\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204210,"user_id":null,"body":"\n\nfunction sort_vowels(s)\n  \n    try\n    n = \"\"\n    for x in s\n      if lowercase(x) in ['a','o','e','i','u']\n        n= string(n, \"\"\"|\"\"\",x ,\"\"\"\n\"\"\") \n      else \n        n= string(n,x , \"\"\"|\n\"\"\") \n      end\n    \n    \n    end\n  \n  return chop(n , tail=1)\n  catch\n    return \"\"\n  end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204211,"user_id":881,"body":"function sort_vowels(str::AbstractString)\n    join((occursin(c, \"aeiouAEIOU\") ? '|' * c : c * '|' for c in str), '\n')\nend\n\nsort_vowels(::Any) = \"\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59f061773e532d0c87000d16":[{"id":204212,"user_id":1392,"body":"function elevator_distance(floors::Vector{Int})::Int\n    sum(abs, diff(floors))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204213,"user_id":null,"body":"elevator_distance(floors::Vector{Int})::Int = sum(abs.(diff(floors)))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204214,"user_id":1474,"body":"function elevator_distance(floors::Vector{Int})::Int\n  sum(abs(floors[i] - floors[i-1]) for i in 2:length(floors))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204215,"user_id":168,"body":"function elevator_distance(floors::Vector{Int})::Int\n  r = 0\n  for i in 2:length(floors)\n    r += abs(floors[i] - floors[i - 1])\n  end\n  r\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204216,"user_id":null,"body":"function elevator_distance(floors::Vector{Int})::Int\n    floors_size = size(floors)[1]\n\n    count = 0\n\n    for i in 1:floors_size-1\n        if floors[i] <= floors[i+1]\n            count += floors[i+1] - floors[i]\n        else\n            count += floors[i] - floors[i+1]\n        end\n    end\n\n    return count\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204217,"user_id":null,"body":"function elevator_distance(floors::Vector{Int})::Int\n    sum(map(i-> abs(floors[i]-floors[i+1]), 1:length(floors)-1))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204218,"user_id":2525,"body":"function elevator_distance(floors::Vector{Int})::Int\n    sum(abs.(floors[1:end-1] .- floors[2:end]))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204219,"user_id":null,"body":"function elevator_distance(floors::Vector{Int})::Int\n  sum(map((x, y) -> abs(y - x), floors[1:end-1], floors[2:end]))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204220,"user_id":53,"body":"function elevator_distance(floors::Vector{Int})::Int\n    s = 0\n    for i in 1 : length(floors)-1\n      s = s + abs(floors[i+1] - floors[i])\n    end\n    return s\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204221,"user_id":null,"body":"function elevator_distance(floors::Vector{Int})::Int\n  sum(abs(floors[i+1] - floors[i]) for i in 1:length(floors)-1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59f44c7bd4b36946fd000052":[{"id":204222,"user_id":492,"body":"module Hist\n    export hist\n    using Printf\n\n    function hist(s)\n        r = ['u','w','x','z']\n        sq = [count(c -> (c == x), s) for x in r]\n        st = join([@sprintf(\"%-2s %-6s\", r[i], sq[i]) * \"*\" ^ sq[i] * \"\\r\" for i in 1:4 if sq[i] > 0], \"\")\n        st[1:end-1]\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204223,"user_id":null,"body":"module Hist\n    export hist\n\n    function hist(s)\n        count = Dict(map(letter -> (letter, length(getfield.(eachmatch(Regex(string(letter)), s), :match))), collect(\"uwxz\")))\n\n        res = []\n        for letter in collect(\"uwxz\")\n            if count[letter] > 0\n                num = rpad(count[letter], 6)\n                stars = \"*\" ^ count[letter]\n                push!(res, string(letter) * \"  \" * num * stars)\n            end\n        end\n\n        return join(res, '\\r')\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204224,"user_id":null,"body":"module Hist\n    export hist\n\n    function hist(s)\n        join([err[1]*\"$(err[2])\"*' '^(6-length(digits(err[2])))*'*'^err[2] for err in [(ch*\"  \", count(string(ch), s)) for ch in \"uwxz\" if occursin(ch, s)]], '\\r')\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204225,"user_id":2525,"body":"module Hist\n    export hist\n\n    using Printf\n\n    function hist(s)\n        histo = []\n        for err in \"uwxz\"\n            cnt = count(x->x==err, s)\n            if cnt > 0\n                push!(histo, err * @sprintf(\"  %-6d\", cnt) * \"*\"^cnt)\n            end\n        end\n        join(histo, '\\r') \n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204226,"user_id":null,"body":"module Hist\n  export hist\n  function hist(s)\n    ret = []\n    for err in \"uwxz\"\n      n = count(c -> (c == err), s)\n      n == 0 && continue\n      details = string(string(n), repeat(\" \", (6-length(string(n)))), repeat(\"*\", n))\n      push!(ret, \"$err  $details\")\n    end\n    join(ret, \"\\r\")\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204227,"user_id":null,"body":"module Hist\nexport hist\n\nfunction hist(s)\n  dict = Dict('u' => 0, 'w' => 0, 'x' => 0, 'z' => 0)\n  foreach(c -> if haskey(dict, c) dict[c] += 1 end, s)\n  join(map(key -> \"$key  $(rpad(string(dict[key]), 6, ' '))$(repeat('*', dict[key]))\", sort(filter(key -> dict[key] != 0, collect(keys(dict))))), \"\\r\")\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204228,"user_id":null,"body":"module Hist\n  export hist\n  function hist(s)\n    ret = []\n    for err in ['u', 'w', 'x', 'z']\n      n = count(c -> c == err, s)\n      n == 0 && continue\n      details = string(string(n), repeat(\" \", (6-length(string(n)))), repeat(\"*\", n))\n      push!(ret, \"$err  $details\")\n    end\n    join(ret, \"\\r\")\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204229,"user_id":null,"body":"module Hist\n    export hist\n\n    function hist(s)\n        s_out = \"\"\n        numU, numW, numX, numZ = 0, 0, 0, 0\n        for i in s\n            numU += (i == 'u') ? 1 : 0\n            numW += (i == 'w') ? 1 : 0\n            numX += (i == 'x') ? 1 : 0\n            numZ += (i == 'z') ? 1 : 0\n        end\n        s_out *= Num([numU, numW, numX, numZ], [\"u\", \"w\", \"x\", \"z\"])\n    \n\n    end    \n\n    function Num(lst, sign)\n        str = \"\"\n        for (i, s) in zip(lst, sign)\n            if i != 0\n                str *= s * \"  \" * string(i) * fill(i) * stars(i) * \"\\r\" \n            end\n        end\n        str[1:end - 1]\n    end\n\n\n    function fill(n)\n        n < 10 ? \"     \" : \n        n < 100 ? \"    \" :\n        n < 1000 ? \"   \" :\n        n < 10000 ? \"  \" :\n        n < 100000 ? \" \" :\n                      \"\"\n    end\n\n    function stars(n)\n        s = \"\"\n        for i in 1:n; s *= \"*\"; end\n        s\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204230,"user_id":null,"body":"module Hist\n    export hist\n\n    function hist(s)\n        errors = [\"u\", \"w\", \"x\", \"z\"]\n        buffer = IOBuffer()\n        for i in 1:4\n          numE = length(split(s, errors[i])) - 1\n          if numE != 0\n            print(buffer, errors[i])\n            print(buffer, \"  \")\n            strNum = string(numE)\n            print(buffer, strNum)\n            whtSpc = 6 - length(strNum)\n            for w in 1:whtSpc\n              print(buffer, \" \")\n            end\n            for q in 1:numE\n              print(buffer, \"*\")\n            end\n            print(buffer, \"\\r\")\n          end\n        end\n        return String(take!(buffer))[1:end-1]\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59f4a0acbee84576800000af":[{"id":204231,"user_id":53,"body":"module Pos\n  export pos_average\n  function pos_average(s)\n    hit = 0\n    size = length(s)\n    m = findfirst(\",\", s)[1] - 1\n    n = (size + 2) \u00f7 (m + 2)\n    tot = m * n * (n - 1) \u00f7 2\n    for i = 1:(m+2):(size-m-2)\n      for j = (i+m+2):(m+2):size\n        for k = 0:(m-1)\n          if s[i+k] == s[j+k]\n            hit += 1\n          end\n        end\n      end\n    end\n    100 * hit \/ tot\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204232,"user_id":null,"body":"module Pos\n    export pos_average\n\n    function common_pos(s1, s2)\n      foldl((a,i) -> a+((s1[i]==s2[i]) ? 1 : 0), 1:length(s1); init=0)\n    end\n\n    function pos_average(s)\n      arr = split(s,\", \")\n      n = length(arr)\n      strlen = length(arr[1])\n      \n      indices = Iterators.filter(x->(x[1]<x[2]), ((i,j) for i in 1:n for j in 1:n))\n  \n      num = foldl((a,k) -> a+common_pos(arr[k[1]], arr[k[2]]), indices; init=0)\n      den = Int(strlen*n*(n-1)\/2)\n  \n      100num\/den\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204233,"user_id":null,"body":"module Pos\n    export pos_average\n\n    function pos_average(s)\n        n, m = findfirst(',', s) - 1, count(\",\", s) + 1\n        pos = reshape(collect.(replace(s, \", \" => \"\")), n, m)\n        200 * sum([sum(binomial.([count(d, join(pos[i,:])) for d in [\"0\",\"4\",\"6\",\"9\"]], 2)) for i in 1:n]) \/ (n * m * (m - 1))\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204234,"user_id":null,"body":"module Pos\n    export pos_average\n\n    function pos_average(s)\n        splitted=map(strip,split(s,','))\n        len=length(splitted)\n        counter=0\n        for i in 1:(len-1)\n          for j in i+1:len\n            for elem in 1:length(splitted[1])\n              (splitted[i][elem] == splitted[j][elem]) ? (counter += 1) : continue\n            end\n          end\n        end\n        return (counter\/(binomial(length(splitted),2)*length(splitted[1])))*100\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204235,"user_id":null,"body":"module Pos\n  export pos_average\n  function pos_average(s)\n    num, den = 0, 0\n    arr = split(s, \", \")\n    for i in 1:length(arr)-1\n      for j in i+1:length(arr)\n        for k in 1:length(arr[i])\n          (arr[i][k] == arr[j][k]) && (num += 1)\n        end\n        den += length(arr[i])\n      end\n    end\n    100.0*num\/den\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204236,"user_id":null,"body":"module Pos\n    export pos_average\n\nfunction findNoSame(s::SubString{String}, t::SubString{String})::Int\n    cnt = 0\n    for i in 1:length(s)\n        if s[i] == t[i]\n            cnt += 1\n        end\n    end\n    return cnt\nend\n\nfunction comboCreator(arr)\n    arr = copy(arr)\n    combs = []\n    while length(arr) > 0\n        push!(combs, [(arr[1], j) for j in arr[2:end]])\n        arr = arr[2:end]\n    end\n    return combs\nend\n\nfunction pos_average(s::String)\n    splits = split(s, \", \")\n    substrLen = length(splits[1])\n    combos = collect(Iterators.flatten(comboCreator(splits)))\n    combsSame = [findNoSame(i[1], i[2]) \/ substrLen for i in combos]\n    return round((sum(combsSame) \/ length(combsSame))*100, digits=10)\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204237,"user_id":881,"body":"module Pos\nexport pos_average\n\nfunction combinations(xs)\n    ((xs[i], xs[j]) for i in eachindex(xs) for j in i+1:length(xs))\nend\n\nfunction pos_average(s)\n    total = 0\n    values = split(s, \", \")\n    n = length(values) \n    for (a, b) in combinations(values)\n        total += count(x == y for (x, y) in zip(a, b))\n    end\n    total \/ (length(values[1]) * n * (n - 1) \/ 2) * 100.0\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204238,"user_id":null,"body":"module Pos\nexport pos_average\n\nfunction pos_average(s)\n  words = split(s, \", \")\n  common = sum(count(((a, b),) -> a == b, zip(words[i], words[j])) for i in 1:length(words) - 1 for j in i + 1:length(words))\n  round(common \/ (length(words) * (length(words) - 1) \/ 2 * length(words[1])) * 100, digits = 10)\nend\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204239,"user_id":492,"body":"module Pos\n    export pos_average\n\n    function pos_average(s)\n        function pair(str1,str2)\n            sum(str1[i] == str2[i] for i in 1:length(str1)) \/ length(str1)\n        end\n        arr = split(s, r\", \")\n        n = 0.0; cnt = 0\n        for i in 1:(length(arr) - 1)\n            for j in i + 1:length(arr)\n                n += pair(arr[i], arr[j])            \n                cnt += 1\n            end\n        end\n        round(n * 100 \/ cnt, digits=10)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204240,"user_id":null,"body":"module Pos\n  export pos_average\n  function pos_average(s)\n    num, den = 0, 0\n    arr = split(s, \", \")\n    println(arr)\n    for i in 1:length(arr)-1\n      for j in i+1:length(arr)\n        for k in 1:length(arr[i])\n          if arr[i][k] == arr[j][k] num += 1 end\n        end\n        den += length(arr[i])\n      end\n    end\n    100.0*num\/den\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59f7597716049833200001eb":[{"id":204241,"user_id":881,"body":"function solve(x::Int, y::Int)::Int\n    flip(n::Int)::Int = foldl((x, c) -> 10x + c, replace(digits(n), 6=>9, 9=>6), init=0)\n    count(d == flip(d) for d in x:y-1 if occursin(r\"^[01689]+$\", string(d)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204242,"user_id":53,"body":"function solve(x, y)\n  match = 0\n  mirror = Dict('0' => '0','1' => '1','8' => '8','6' => '9','9' => '6')\n  for k in x:y-1\n    if isUpsideDownNumber(k, mirror)\n      match = match + 1\n    end\n  end\n  match\nend\n\nfunction isUpsideDownNumber(n, mirror)\n  arr = collect(string(n))\n  for i in 0:(length(arr)-1)\u00f72\n    p1 = (length(arr)+1)\u00f72-1\n    p2 = length(arr) % 2 == 0 ? p1 + 1 : p1\n    key = arr[p1 + p2 - i + 1]\n    v = get(mirror, key, '#')\n    if arr[i+1] != v\n      return false\n    end\n  end\n  true\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204243,"user_id":null,"body":"function solve(x::Int, y::Int)::Int\n    sum(spliter(digits(n)) for n in x:y-1)\nend\n    \nfunction spliter(d)\n    b = Dict(0=> 0, 1=> 1, 6=> 9, 8=> 8, 9=>6)\n    single(n) = n == 0 || n == 1 || n == 8\n    if length(d) == 1\n        return single(d[1])\n    elseif iseven(length(d)) && all(x-> haskey(b,x), d)\n        return join(d[1:Int(length(d)\/2)]) == join(reverse(map(x-> b[x], d[Int(length(d)\/2)+1:end])))\n    elseif isodd(length(d)) && all(x-> haskey(b,x), d)\n        return join(d[1:Int(floor(length(d)\/2))]) == join(reverse(map(x-> b[x], d[Int(ceil(length(d)\/2))+1:end]))) && single(d[Int(ceil(length(d)\/2))])\n    end\n    false       \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204244,"user_id":50,"body":"function f(n::Int)::Int\n  m=n\n  k=0\n  while m != 0\n    x=m%10\n    if x==0 || x==1 || x==8\n      k=k*10+x\n    elseif x==6\n      k=k*10+9\n    elseif x==9\n      k=k*10+6\n    else\n      return 0\n    end\n    m=floor(m\/10)\n  end\n  if k==n\n    return 1\n  else\n    return 0\n  end\nend\nfunction solve(x::Int, y::Int)::Int\n  n=0\n  for a in x:(y-1)\n    n+=f(a)\n  end\n  return n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59f7a0a77eb74bf96b00006a":[{"id":204245,"user_id":null,"body":"function golf_score_calculator(parlist, scorelist)\n  b=[parse(Int,i) for i in scorelist]\n  a=[parse(Int,i) for i in parlist]\n  sum(b-a)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204246,"user_id":null,"body":"golf_score_calculator(parlist, scorelist) =\n    sum( map( parscore -> parscore[2]-parscore[1], zip(parlist, scorelist)) )","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204247,"user_id":null,"body":"function golf_score_calculator(parlist, scorelist)\n    p, s, t = parse(Int, parlist), parse(Int, scorelist), 0\n    while p>0\n        t += s%10 - p%10\n        s \u00f7= 10\n        p \u00f7= 10\n    end\n    t\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204248,"user_id":null,"body":"golf_score_calculator(parlist, scorelist) = sum(collect(scorelist) .- collect(parlist))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204249,"user_id":2525,"body":"function golf_score_calculator(parlist, scorelist)\n    sum(parse.(Int, collect(scorelist)) .- parse.(Int, collect(parlist)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204250,"user_id":1474,"body":"function golf_score_calculator(parlist, scorelist)\n  sum([parse(Int, c) for c in scorelist]) - sum([parse(Int, c) for c in parlist])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204251,"user_id":872,"body":"function golf_score_calculator(parlist, scorelist)\n  p, s = [parse(Int, pp) for pp in collect(parlist)], [parse(Int, ss) for ss in collect(scorelist)]\n  score = 0\n  for i in 1:18\n    score += s[i] - p[i]\n  end\n  score\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204252,"user_id":null,"body":"function golf_score_calculator(parlist, scorelist)\n  Vector{Char}(scorelist) - Vector{Char}(parlist) |> sum\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204253,"user_id":null,"body":"function golf_score_calculator(parlist, scorelist)\n  sum(parse(Int, SubString(scorelist,i,i)) - parse(Int, SubString(parlist,i,i)) for i in 1:length(scorelist))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204254,"user_id":null,"body":"function golf_score_calculator(parlist, scorelist)\n  sum(map(x->x[2]-x[1], zip(parlist, scorelist)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"59f7fc109f0e86d705000043":[{"id":204255,"user_id":null,"body":"divisible_by_three(str) = mapreduce( c -> c-'0', (a,b) -> (a+b)%3, str, init=0 ) == 0","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204256,"user_id":null,"body":"function divisible_by_three(str)\n  sum([parse(Int8,v) for v in str])%3==0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204257,"user_id":null,"body":"divisible_by_three(str) = parse(BigInt, str) % 3 == 0","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204258,"user_id":null,"body":"divisible_by_three(str) = isinteger(sum(digits(parse(BigInt, str)))\/3)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204259,"user_id":50,"body":"function divisible_by_three(str)\n  sum(parse(Int,d) for d in str)%3==0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204260,"user_id":2525,"body":"function divisible_by_three(str)\n    sum(parse.(Int, collect(str)))%3==0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204261,"user_id":null,"body":"function divisible_by_three(str)\n  if length(str) > 1\n    divisible_by_three(string(sum(map(x -> parse(Int, x), split(str,\"\")))))\n  else\n    parse(Int, str) in [3, 6, 9]\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204262,"user_id":421,"body":"function divisible_by_three(str)\n  sum(parse(Int, x) for x in str) % 3 == 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204263,"user_id":null,"body":"function divisible_by_three(str)\n  sum([parse(Int64, i) for i in split((str), \"\")]) % 3 == 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204264,"user_id":759,"body":"function divisible_by_three(str)\n  n = 0\n  for c in str\n    n += parse(Int, c)\n    n -= 3 * (n \u00f7 3)\n  end\n  n == 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a00e05cc374cb34d100000d":[{"id":204265,"user_id":53,"body":"function reverse_seq(n)\n  n:-1:1\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204266,"user_id":null,"body":"function reverse_seq(n)\n  reverse(collect(1:n))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204267,"user_id":null,"body":"reverse_seq(n) = reverse(1:n)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204268,"user_id":421,"body":"function reverse_seq(n)\n  reverse([1:n;])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204269,"user_id":null,"body":"function reverse_seq(n)\n  return collect(n:-1:1)\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204270,"user_id":1474,"body":"function reverse_seq(n)\n  reverse(1:n)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204271,"user_id":null,"body":"function reverse_seq(n)\n  Vector(n:-1:1)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204272,"user_id":null,"body":"function reverse_seq(n)\n  ans = []\n  for i = 1:n\n    push!(ans,i)\n  end\n  return reverse(ans)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204273,"user_id":null,"body":"function reverse_seq(n)\n  return [ i for i in n:-1:1]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204274,"user_id":null,"body":"function reverse_seq(n)\n  return reverse(1:n)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a023c426975981341000014":[{"id":204275,"user_id":null,"body":"other_angle(a, b) = 180 - a - b","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204276,"user_id":881,"body":"function other_angle(a, b)\n  180 - a - b\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204277,"user_id":null,"body":"function other_angle(\u0445\u0443\u0439, \u043f\u0438\u0434\u043e\u0440)\n  return 180 - \u0445\u0443\u0439 - \u043f\u0438\u0434\u043e\u0440 \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204278,"user_id":null,"body":"function other_angle(a, b)\n  \n  c = 180-(a+b)\n  \n  return c\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204279,"user_id":null,"body":"function other_angle(a, b)\n  return (180-(a+b))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204280,"user_id":null,"body":"function other_angle(a, b)\n  return 180 - a - b\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204281,"user_id":null,"body":"function other_angle(a, b)\n  c = a + b\n  return 180 - c\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204282,"user_id":527,"body":"function other_angle(a, b)\n  180 - (a + b)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a02cf76c9fc0ee71d0000d5":[{"id":204283,"user_id":53,"body":"module AlongBern\n    export series\n\n    function zeta(k:: BigInt, nb:: Int64)\n        if k > 0\n            res = BigFloat(0)\n            kd = Float64(-k)\n            for n in 1:(nb + 1)\n                res += n ^ kd\n            end\n            res\n        else\n            a = (2 * pi) ^ (k - 1)\n            b = cos(pi * (1 - k) * 0.5)\n            c = factorial(BigInt(-k))\n            d = zeta(BigInt(1 - k), Int64(1e6))\n            BigFloat(2) * a * b * c * d\n        end\n    end\n\n    function bernoulli(k:: BigInt)\n        res = k * zeta(1 - k, Int64(1e6))\n        if k % 2 == 0\n            -1 * res\n        else\n            res\n        end\n    end\n\n    function series(k:: Int, nb:: Int)\n        if k > 0 && k % 2 == 0\n            a = 2 ^ (k - 1)\n            b = pi ^ k\n            c = abs(bernoulli(BigInt(k)))\n            d = factorial(BigInt(k))\n            a * b * c \/ d\n        elseif k > 0\n            zeta(BigInt(k), Int64(nb))\n        else\n            res = bernoulli(BigInt(1 - k)) \/ (1 - k)\n            if k % 2 == 0\n                res\n            else\n                -1 * res\n            end\n        end\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204284,"user_id":2525,"body":"module AlongBern\n    export series\n\n    function B(k::Int)\n        # sum( (-1)^j * binomial(i, j) * j^k\/(i+1)  for i=0:k for j=0:i )\n        sum( binomial(i, j) * j^k\/\/(i+1) - binomial(i, j+1) * (j+1)^k\/\/(i+1)  for i=big(0):big(k) for j=big(0):2:big(i) )\n    end\n    function series(k:: Int, nb:: Int)\n        if k>2 && k%2==1\n            sum( 1\/n^k for n in big(1):big(nb) )\n        elseif k>1 && k%2==0\n            1\/2*abs(B(k))*(2*\u03c0)^k\/factorial(big(k))\n        elseif k<-1\n            (-1)^(-k) * B(-k+1)\/(1-k)\n        end  \n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204285,"user_id":492,"body":"module AlongBern\n    export series\n    function bernoulli(n)\n        if (n == 0) return 1 end\n        if (n == 1) return Rational(-1, 2) end\n        if (n % 2 == 1) return 0 end\n        B = Vector{Rational{BigInt}}(undef, n + 1)\n        for m = 0 : n\n            B[m + 1] = 1 \/\/ (m + 1)\n            for j = m : -1 : 1\n                B[j] = j * (B[j] - B[j + 1])\n            end\n        end\n        return B[1]\n    end\n    function series(k, nb)\n        if (k < 0)\n            t = 1 - k\n            t % 2 == 1 ? (return 0) : (return float(bernoulli(t) \/ -t))\n        end\n        if (k % 2 == 1)\n            r = t = 0; eps = 1.0e-16\n            mi = min(nb, Int(ceil((1 \/ eps) ^ (1 \/ k))) + 1)\n            while (t < mi)\n                t += 1\n                r += 1 \/ t ^ k\n            end\n            return float(r)\n        end\n        r = abs(bernoulli(k)) \/ 2\n        t = 1\n        while t < k\n            t += 1\n            r \/= t\n        end\n        return float(r * ((2 * pi) ^ k))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204286,"user_id":null,"body":"module AlongBern\n    export series\n\n    # \\binom{n}{k}\n    function choose(n::BigInt, k::BigInt)\n        prod(n-k+1:n) \/\/ factorial(k)\n    end\n    \n    # Little memoization\n    stash = Dict{Int, Rational}(0 => 1)\n    \n    # Is this from note G?\n    function bernoulli(m::BigInt)\n        get!(stash, m) do\n            res = 1\n            \n            for k in 1:m-1\n                res += choose(m+1, k) * bernoulli(k)\n            end\n            \n            -res \/\/ (m+1)\n        end\n    end \n    \n    # Are these related somehow?\n    function series(k::Int, nb::Int)\n        if k < 1\n            (-1)^(-k) * bernoulli(big(-k+1)) \/ (-k+1)\n        elseif k % 2 == 0\n            1\/2 * abs(bernoulli(big(k))) * (2pi) ^ k \/ factorial(big(k))\n        else\n            sum(n^-k for n in 1.0:nb)\n        end\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204287,"user_id":null,"body":"module AlongBern\n    export series\n    \n    function bernoulli(n::Int)\n        bs = [1.0]\n        for i in 1:n\n            b = -sum((bj * binomial(i+1, j-1) for (j, bj) in enumerate(bs))) \/ (i+1)\n            push!(bs, b)\n        end\n        bs[end]\n    end\n\n    function series(k::Int, nb::Int)\n        if k < -1\n            (-1)^(-k) * bernoulli(-k+1) \/ (-k+1)\n        elseif k & 1 == 1\n            sum((1 \/ big(n)^k for n = 1:nb))\n        else\n            1\/2 * abs(bernoulli(k)) * (2\u03c0)^k \/ factorial(big(k))\n        end\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204288,"user_id":null,"body":"module AlongBern\n    export series\n\n    function series(k:: Int, nb:: Int)\n        bernoulli = [1\/\/6,-1\/\/30,1\/\/42,-1\/\/30,5\/\/66,-691\/\/2730,7\/\/6,-3617\/\/510,\n                    43867\/\/798,-174611\/\/330,854513\/\/138,-236364091\/\/2730,\n                    8553103\/\/6,-23749461029\/\/870,8615841276005\/\/14322]\n        B = Dict(zip(collect(2:2:30), bernoulli))\n        k > 0 ? isodd(k) ? odd(k, nb) : even(k, B) : negative(abs(k), B)\n    end\n\n    function odd(k, n)\n        sum(big(1\/i)^k for i in 1:n)\n    end\n    \n    function even(k, B)\n        (abs(B[k]) \/\/ 2) * ((2 * pi)^k \/ factorial(big(k)))\n    end\n\n    function negative(k, B)\n        isodd(k) ? big((-1)^k * B[k+1] \/ (k+1)) : 0\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204289,"user_id":null,"body":"module AlongBern\n    export series\n\n    const BERNS = [1, -1\/\/2] #starts from k=0\n    const FACTS = [1, 2, 6]\n\n    const TWO_PI = 2.0*pi\n\n    function factorial(k)\n      for n in length(FACTS):k push!(FACTS, FACTS[end]*(n+1)) end\n      return FACTS[k]\n    end\n\n    function twoPiOverFact(k)\n      ret = 1.0\n      for j in 1:k\n        ret *= TWO_PI \/ j\n      end\n      return ret\n    end\n\n    function bern(k)\n      for n in length(BERNS):k\n        b = 0\n        c = 1\n        for j in 0:n-1\n          b += c*BERNS[j+1]\/\/(n-j+1)\n          c *= (n-j)\/\/(j+1)\n        end\n        push!(BERNS, -b)\n      end\n      return BERNS[k+1]\n    end\n\n    function series(k:: Int, nb:: Int)\n        if k in [-1, 0, 1] return 0 end\n        if k>2 && k%2==1\n          maxN = min(nb, trunc(2^(52\/k)))\n          return sum(1.0\/n^k for n in 1:maxN)\n        elseif k>=2 && k%2==0\n          return 0.5*abs(bern(k)) * twoPiOverFact(k)  #(2*pi)^k \/ factorial(k)\n        else #k<-1\n          return (-1)^k * bern(-k+1)\/(-k+1)\n        end\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a03b3f6a1c9040084001765":[{"id":204290,"user_id":76,"body":"function angle(n::Int)::Int\n  (n - 2) * 180\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204291,"user_id":527,"body":"angle(n) = 180 * (n - 2)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204292,"user_id":null,"body":"function angle(n::Int)::Int\n  180n - 360\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204293,"user_id":null,"body":"angle(n::Int)::Int = 180(n-2)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204294,"user_id":527,"body":"angle(n) = 180(n-2)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204295,"user_id":null,"body":"function angle(n::Int)::Int\n  # your code here\n  return (n-2)*180\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204296,"user_id":null,"body":"function angle(n::Int)::Int\n  180(n-2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204297,"user_id":null,"body":"angle(n::Int)::Int = 180n - 360","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204298,"user_id":null,"body":"function angle(n::Int)::Int\n  return (n - 2) * 180\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204299,"user_id":null,"body":"function angle(n::Int)::Int\n  return 180*(n-2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a045fee46d843effa000070":[{"id":204300,"user_id":null,"body":"module Fact\n    export decomp\n\nfunction decomp(n)\n      primes = reduce((r,x)-> x in r ? setdiff(r,Set(collect(x^2:x:n))) : r, collect(2: floor(Int,n^0.5) + 1),init = Set(collect(2:n)))\n      f(n1,f1,i) = floor(n1\/f1) |> x-> x>0 ? f(x,f1,i+x) : i\n      primeFactors = sort(collect( Dict(x=> Int(f(n,x,0)) for x in primes)), by=x->x[1])\n      join([x[2] > 1 ? \"$(x[1])^$(x[2])\" : \"$(x[1])\" for x in primeFactors], \" * \")    \n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204301,"user_id":null,"body":"module Fact\n  export decomp\nfunction create_string_output(factors::Array{Pair{Int64,Int64},1})::String\n  stringify(pair::Pair) = if pair[2] > 1 \"$(pair[1])^$(pair[2])\" else \"$(pair[1])\" end\n  return [stringify(x) for x in factors] |> x -> join(x, \" * \")\nend\n\nfunction largest_power(n::Int64, p::Int64)::Int64\n  x = 0\n  while (n > 0)\n    n\/=p\n    x += trunc(Int, n)\n  end\n  return x\nend\n\nfunction is_prime(n::Int64)::Bool\n  if n <= 1 return false end\n  for i in 2:(n-1) if n%i == 0 return false end end\n  return true\nend\n\nfunction decomp(n::Int64)::String\n  count_map = Dict{Int64, Int64}()\n  possible_prime::Int64 = 2\n  exponent::Int64 = -1\n  still_running = true\n  while (exponent != 0)\n    exponent = largest_power(n, possible_prime)\n    is_valid_prime = is_prime(possible_prime) && (exponent>0) \n    if is_valid_prime count_map[possible_prime] = exponent end\n    possible_prime+=1\n  end\n  pairs = collect(count_map) |> pair_array -> sort(pair_array, by= x -> x[1])\n  return create_string_output(pairs)\nend\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204302,"user_id":492,"body":"module Fact\n    export decomp\n    function decomp(n)\n        prime_power = zeros(Int, n + 1)\n        while n > 1\n          befn = n\n          n = n - 1\n          i = 2\n          while i * i <= befn\n              if befn % i == 0\n                  befn = div(befn, i)\n                  prime_power[i] += 1\n                  i = 1\n              end\n              i += 1\n          end\n          prime_power[befn] += 1\n        end\n        res = \"\"\n        for i = 2:length(prime_power)\n            if prime_power[i] == 0\n                continue\n            elseif prime_power[i] == 1\n                res = res * string(i) * \" * \"\n            else\n                res = res * string(i) * \"^\" * string(prime_power[i]) * \" * \"\n            end\n        end\n        return res[1:length(res) - 3]\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204303,"user_id":null,"body":"module Fact\n    export decomp\n    \n    function decomp(n)\n        function factors(n, d, i=2)\n            iszero(n % i) && return factors(n\u00f7i, primes[i] += 1, i)\n            for j in i+1+i%2:2:isqrt(n)\n                iszero(n % j) && return factors(n\u00f7j, primes[j] +=  1, j) end\n            !isone(n) && (primes[n] = get(primes, n, 0) + 1) end\n        primes = Dict(2=>0)\n        foreach(m-> factors(m, primes), 2:n)\n        join([isone(m) ? \"$p\" : \"$p^$m\" for (p,m) in sort!(collect(primes))], \" * \")\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204304,"user_id":null,"body":"module Fact\n    export decomp\n\n    function d(n)\n      i=2\n      while i<n\n        if n%i==0 return i end\n        i += 1 \n      end\n      return n\n    end\n\n    function decomp1(n)\n      p,q = Dict{Int,Int}(), n\n      while q>1\n        dq = d(q)\n        mergewith!(+, p, Dict{Int, Int}(dq=>1))\n        q = Int(q\/dq)\n      end\n      return p\n    end\n\n    function decomp(n)\n      h = Dict{Int, Int}()\n      for i in 1:n\n        mergewith!(+, h, decomp1(i))\n      end\n      join(\n        [string(i)*(ifelse(h[i]>1,\"^\"*string(h[i]),\"\")) for i in sort(collect(keys(h)))],\n        \" * \")\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204305,"user_id":null,"body":"module Fact\nexport decomp\nfunction decomp(n)\n  x = factorial(BigInt(n))\n  i = 1\n  factors = []\n  while x > 1\n    i += 1\n    push!(factors, [i, 0])\n    while x % i == 0\n      factors[i - 1][2] += 1\n      x \u00f7= i\n    end\n  end\n  join(map(a -> string(a[1]) * (a[2] == 1 ? \"\" : \"^$(a[2])\"), filter(a -> a[2] != 0, factors)), \" * \")\nend\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204306,"user_id":null,"body":"module Fact\n    export decomp\n    \n    function decomp(n)\n        primes = Dict(2=>\"2 \")\n        de = \"\"\n        for i in 2:n        \n            for j in 2:Int(ceil(i^0.5))\n                d = divrem(i,j)\n                if d[2] == 0 && haskey(primes, d[1])\n                    primes[i] = \"$(j) $(primes[d[1]]) \"\n                    break\n                end\n            if ! haskey(primes, i) primes[i] = string(i)*\" \" end         \n            end\n        de *= primes[i]\n        end\n        factors = sort(map(x-> parse(Int,x), split(de)))\n        setup = []\n        for i in unique(factors)\n            if count(==(i),factors) == 1\n                push!(setup,\"$(i) * \")\n            else\n                push!(setup, \"$(i)^$(count(==(i),factors)) * \")\n            end\n        end\n    chop(join(setup), tail = 3)\n    end      \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204307,"user_id":null,"body":"module Fact\n    export decomp\n    function decomp(n)\n        if n == 1\n            return \"1\"\n        end\n        \n        primedict = Dict()\n        for x in 2:n\n            value = x\n            for y in 2:x\n                while value % y == 0\n                    if haskey(primedict, y)\n                        primedict[y] += 1\n                    else\n                        primedict[y] = 1\n                    end\n                    value \u00f7= y\n                end\n            end \n        end\n        \n        primestring = \"\"\n        for x in 2:n\n            if haskey(primedict, x)\n                primedict[x] == 1 ? primestring *= \"$x * \" : primestring *= \"$x^$(primedict[x]) * \"\n            end\n        end\n        return primestring[end] == ' ' ? primestring[1:end-3] : primestring\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204308,"user_id":null,"body":"module Fact\n    export decomp\n    \n    \n@views function\u202fsieveview(lim::T) where T <: Int\n    listeprime = trues(lim)\n    @inbounds listeprime[4:2:lim] .= false\n    @inbounds listeprime[1] = false\n    i::T = 3\n    while i <= sqrt(lim)\n        @inbounds listeprime[i] && (listeprime[i*i:2i:lim] .= false)\n        i += 2\n    end\n    findall(listeprime)\nend\n    function fact(n::Int)\n      w = big(n)\n      for i in 2:w-1\n        w *= i\n      end\n      w\n    end\n\n   function decomp(n::Int)\n        listeprime = sieveview(n)\n        n = fact(n)\n        dec = String[]\n        i = 1\n        while i <= length(listeprime)\n            pow = 0\n            while n % listeprime[i] == 0\n              n = div(n, listeprime[i])\n              pow += 1\n            end\n            if pow == 1\n              push!(dec, \"$(listeprime[i])\")\n            else\n              push!(dec, \"$(listeprime[i])^$pow\")\n            end\n            i += 1\n        end\n        join(dec, \" * \")\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204309,"user_id":null,"body":"module Fact\n    export decomp\n\nfunction decomp(n)\n      primes = reduce((r,x)-> x in r ? setdiff(r,Set(collect(x^2:x:n))) : r, collect(2: floor(Int,n^0.5) + 1),init = Set(collect(2:n)))\n      f(n1,f1,i) = floor(n1\/f1) |> x-> x>0 ? f(x,f1,i+x) : i\n      primeFactors = sort(collect( Dict(x=> Int(f(n,x,0)) for x in primes)), by=x->x[1])\n      chop(reduce((x,y) -> x*(y[2] > 1 ? \"$(y[1])^$(y[2]) * \" : \"$(y[1]) * \"), primeFactors,init=\"\"), tail=3)    \n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a057ec846d843c81a0000ad":[{"id":204310,"user_id":492,"body":"module ModCycle\n    export cycl\n    function cycl(n::Int)\n        if n % 2 == 0 || n % 5 == 0\n            return -1\n        end\n        r = 1\n        for i = 1:n\n            r = r * 10 % n\n            if r == 1\n                return i\n            end\n        end  \n        return -1\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204311,"user_id":null,"body":"module ModCycle\n    export cycl\n    function cycl(n::Int)\n        if n%2 == 0 || n%5 == 0 return -1 end\n        i,num = 0,1 \n        while true\n          num  = num * 10 % n\n          i += 1\n          if num == 1 return i end\n        end\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204312,"user_id":492,"body":"module ModCycle\n    export cycl\n    function cycl(n::Int)\n        if n % 2 == 0 || n % 5 == 0\n            return -1\n        end\n        r = 1\n        for i = 1:n\n            r = r * 10 % n\n            if r == 1\n                return i\n            end\n        end  \n        return -1\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204313,"user_id":null,"body":"module ModCycle\n    export cycl\n    function cycl(n::Int, i=1)\n        (n % 2 == 0 || n % 5 == 0) && return -1\n        x, i = 1, 0\n        while true\n          x = 10x % n\n          i += 1\n          x == 1 && return i end\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204314,"user_id":53,"body":"module ModCycle\n    export cycl\n    function cycl(n::Int)\n        if n%2 == 0 || n%5 == 0 \n          -1\n        else\n          m = 10 % n\n          cnt = 1\n          while m != 1\n              m = m * 10 % n\n              cnt += 1\n          end\n          return cnt\n        end\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204315,"user_id":null,"body":"module ModCycle\n    export cycl\n    function cycl(n::Int)\n        if gcd(n, 10)!=1 return -1 end\n        i = 0\n        r = 1\n        while true\n          i += 1\n          y = fld(r*10, n)\n          r = r*10-y*n\n          if r==1 break end\n        end\n        return i\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204316,"user_id":null,"body":"module ModCycle\n    export cycl\n    function cycl(p::Int)\n        #iscoprime(n, 10)\n        if iscoprime(p, 10)\n            t = 0\n            r = 1\n            n = 0\n            while t == 0 || r \u2260 1\n                t += 1\n                x = 10r\n                d = x\u00f7p\n                r = x%p\n                n = 10n + d\n            end\n            return t\n        else\n            return -1\n        end\n        \n    end\n\n    iscoprime(n::Int, m::Int) = gcd(n,m) == 1\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204317,"user_id":2525,"body":"module ModCycle\n    export cycl\n    function cycl(n::Int)\n        if n%2==0 || n%5==0\n            return -1\n        end\n        r = 10%n\n        for l in 1:500000\n            if r==1\n                return l\n            end\n            r = (10*r)%n\n        end\n        return -1\n  \n    \n        # your code\n    end\nend \n\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204318,"user_id":null,"body":"module ModCycle\n    export cycl\n    function cycl(n::Int)\n        num = 10%n\n        for i in 1:n\n            num == 1 && return i\n            num = num*10%n\n        end\n        -1\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204319,"user_id":null,"body":"module ModCycle\n    export cycl\n    function cycl(n::Int)\n        if gcd(n, 10) != 1\n            return -1\n        end\n        c = 0\n        r = 1\n        while true\n            r = r*10 % n\n            c = c+1\n            if r == 1\n                return c\n            end\n        end\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a0be7ea8ba914fc9c00006b":[{"id":204320,"user_id":null,"body":"sakura_fall(v) = v <= 0 ? 0 : 400 \/ v","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204321,"user_id":null,"body":"sakura_fall(v) = v \u2264 0 ? 0 : 400 \/ v","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204322,"user_id":480,"body":"function sakura_fall(v)\n  v==0 ? 0 : max(0,400\/v)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204323,"user_id":null,"body":"function sakura_fall(v)\n  v > 0 ? 80 * 5 \/ v : 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204324,"user_id":2525,"body":"function sakura_fall(v)\n    if v == 0\n        0\n    else \n        max(5*80\/v, 0)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204325,"user_id":null,"body":"sakura_fall(v) = v > 0 ? 5 * 80 \/ v : 0","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204326,"user_id":53,"body":"function sakura_fall(v)\n  if v <= 0\n    return 0\n  end\n  400 \/ v\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204327,"user_id":null,"body":"function sakura_fall(v)\n  v > 0 ? (400.0 \/ v) : 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204328,"user_id":881,"body":"sakura_fall(v) = iszero(v) ? 0 : max(0, 400 \/ v)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204329,"user_id":727,"body":"function sakura_fall(v)\n  v > 0 && 400\/v\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a25ac6ac5e284cfbe000111":[{"id":204330,"user_id":759,"body":"function triangle(row)\n  d = Dict(\n    \"RR\" => \"R\", \"RG\" => \"B\", \"RB\" => \"G\",\n    \"GR\" => \"B\", \"GG\" => \"G\", \"GB\" => \"R\",\n    \"BR\" => \"G\", \"BG\" => \"R\", \"BB\" => \"B\"\n  )\n  length(row) == 1 ? row : triangle(join(d[row[i-1:i]] for i in 2:length(row)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204331,"user_id":2525,"body":"function triangle(row)\n    if length(row) <= 1\n        row\n    else\n        triangle(join(if row[i]==row[i+1]; row[i] else replace(\"RGB\", Regex(\"[$(row[i])$(row[i+1])]\")=>\"\") end for i in 1:(length(row)-1)))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204332,"user_id":null,"body":"function triangle(row)\n    next = Dict(\"RR\"=> 'R', \"RB\"=> 'G', \"RG\"=> 'B', \"BB\"=> 'B', \"BR\"=> 'G', \"BG\"=> 'R', \"GG\"=> 'G', \"GR\"=>'B', \"GB\"=> 'R')\n    new_row = length(row) > 1 ? join([next[row[i:i+1]] for i in 1:length(row)-1]) : row\n    length(new_row) == 1 ? new_row : triangle(new_row)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204333,"user_id":53,"body":"function triangle(row)\n  s = length(row) > 1 ? \"\" : row\n  i = 1\n  while i < length(row)\n    s = s * ((row[i] == row[i + 1]) ? string(row[i]) : replace(replace(\"RGB\", string(row[i]) => \"\"), string(row[i + 1]) => \"\"))\n    i = i + 1\n  end\n  length(s) > 1 ? triangle(s) : string(s[1])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204334,"user_id":1474,"body":"colours = \"RGB\"\n\nfunction change(c1, c2)\n  if c1 == c2\n    return c1\n  end\n  for c in colours\n    if c \u2209 [c1, c2]\n      return c\n    end\n  end\nend\n\nfunction triangle(row)\n  while length(row) > 1\n    row = [change(row[i], row[i+1]) for i in 1:length(row)-1]\n  end\n  string(row[1])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204335,"user_id":null,"body":"import Base.length\n\nstruct Row\n  colors::Array{Char}\nend\nRow(row::String) = Row(collect(row))\nlength(row::Row) = length(row.colors)\nfunction generate_next_row(row::Row)\n  colors = [ new_color(c1,c2) for (c1,c2) in zip(row.colors[1:end-1], row.colors[2:end] ) ]\n  return Row(colors)\nend\n\nfunction new_color(c1,c2)\n  if c1==c2\n    return c2\n  else\n    return [c for c in ['R','G','B'] if c!=c1 && c!=c2 ][1]\n  end\nend\n\nfunction triangle(row_string)\n  row = Row(row_string)\n  while length(row) > 1\n    row = generate_next_row(row)\n  end\n  \"$(row.colors[1])\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204336,"user_id":null,"body":"triangle(row) = length(row) == 1 ? row : Dict(\"RR\" => \"R\", \"GG\" => \"G\", \"BB\" => \"B\", \"GG\" => \"G\", \"BG\" => \"R\", \"GB\" => \"R\", \"GR\" => \"B\", \"RG\" => \"B\", \"BR\" => \"G\", \"RB\" => \"G\") |> d -> [d[row[i:i+1]] for i in 1:length(row) - 1] |> join |> triangle","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204337,"user_id":null,"body":"a(c1, c2) = c1 == c2 ? c1 : setdiff([0x52, 0x47, 0x42], [c1, c2])[1]\n  \ntriangle(row) = tri(Vector{UInt8}(row))\n\ntri(s) = length(s) == 1 ? String(s) : tri([a(s[i], s[i+1]) for i in 1:length(s)-1])\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204338,"user_id":null,"body":"function colorconvert(color1, color2)\n  if color1 == color2\n    return color1\n  end\n  colors = ['R', 'G', 'B']\n  deleteat!(colors, findfirst(color -> color == color1, colors))\n  deleteat!(colors, findfirst(color -> color == color2, colors))\n  colors[1]\nend\n\nfunction triangle(row)\n  while length(row) > 1\n    row = join(colorconvert(color1, color2) for (color1, color2) in zip(row, row[2:end]))\n  end\n  row\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204339,"user_id":881,"body":"function triangle(row)\n  combine(a, b) = a == b ? string(a) : replace(replace(\"RGB\", a=>\"\"), b=>\"\")\n  if length(row) == 1\n    return row\n  else\n    nextrow = \"\"\n    for i in 1:length(row)-1\n      nextrow *= combine(row[i], row[i+1])\n    end\n    return triangle(nextrow)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204340,"user_id":2955,"body":"function conv(str)\n  if str == \"GB\" || str == \"BG\"\n    return \"R\"\n  elseif str == \"RG\" || str == \"GR\"\n    return \"B\"\n  elseif str == \"BR\" || str == \"RB\"\n    return \"G\"\n  else\n    return str[1]\n  end\nend\n\nfunction triangle(row)\n  if length(row) > 1\n    new_row = join([conv(string(row[x]) * string(row[x + 1])) for x in range(1, length(row) - 1)])\n    return triangle(new_row)\n  else\n    return row\n  end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204341,"user_id":null,"body":"function triangle(row)\n  n = length(row)\n  if n==1; return row end\n  s1 = map(x->x[1], split(row, \"\")) \n  s2 = Array{Char}(n-1)\n  for j in 1:n-1\n    for i in 1:n-j\n      if (s1[i]==s1[i+1]); s2[i] = s1[i]\n      else; s2[i] = replace(replace(\"RGB\", s1[i], \"\"), s1[i+1], \"\")[1]\n      end  \n    end\n    s1 = s2\n  end\n  \"$(s2[1])\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204342,"user_id":null,"body":"function triangle(row)\n  n = length(row)\n  if n==1; return row end\n  cs =['R', 'G', 'B']\n  csd = Dict('R'=>1, 'G'=>2, 'B'=>3)\n  s1 = map(x->x[1], split(row, \"\")) \n  s2 = Array{Char}(n-1)\n  for j in 1:n-1\n    for i in 1:n-j\n      if (s1[i]==s1[i+1]); s2[i] = s1[i]\n      else; s2[i] = cs[6-csd[s1[i]]-csd[s1[i+1]]]\n      end  \n    end\n    s1 = s2\n  end\n  \"$(s2[1])\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a2b703dc5e2845c0900005a":[{"id":204343,"user_id":null,"body":"is_divide_by(number, a, b) = number % a == 0 && number % b == 0","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204344,"user_id":null,"body":"function is_divide_by(number, a, b)\n  return mod(number, a) == 0 && mod(number, b) == 0\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204345,"user_id":53,"body":"function is_divide_by(n, a, b)\n  n % a == 0 && n % b == 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204346,"user_id":null,"body":"function is_divide_by(n, a, b)\n return n % a == 0 && n % b == 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204347,"user_id":209,"body":"is_divide_by(n, l...) = n .% l == (0, 0)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204348,"user_id":null,"body":"function is_divide_by(number, a, b)\n  return number % a == 0 && number % b == 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204349,"user_id":null,"body":"is_divide_by(number, a, b) = ((number%a == 0) & (number%b == 0)) ? true : false","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204350,"user_id":null,"body":"function is_divide_by(number, a, b)\n  (number % a) + (number % b) == 0 ? true : false \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204351,"user_id":null,"body":"is_divide_by(number, a, b) = iszero(number % a + number % b)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204352,"user_id":null,"body":"function is_divide_by(number, a, b)\n  mod(number, a) == 0 && mod(number, b) == 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a2be17aee1aaefe2a000151":[{"id":204353,"user_id":53,"body":"function array_plus_array(arr1, arr2)\n  sum(arr1) + sum(arr2)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204354,"user_id":527,"body":"array_plus_array(arr1, arr2) = sum(arr1) + sum(arr2)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204355,"user_id":null,"body":"function array_plus_array(arr1, arr2)\n  sum(append!(arr1, arr2))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204356,"user_id":null,"body":"function array_plus_array(arr1, arr2)\n    total = sum(arr1)\n    return total + sum(arr2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204357,"user_id":null,"body":"array_plus_array = sum \u2218 vcat","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204358,"user_id":null,"body":"function array_plus_array(arr1, arr2)\n  ans = 0\n  for i in arr1\n    ans += i\n  end\n  for i in arr2\n    ans += i\n  end\n  ans\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204359,"user_id":492,"body":"function array_plus_array(a, b)\n  sum(a) + sum(b)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204360,"user_id":null,"body":"function array_plus_array(arr1, arr2)\n  res = 0\n  \n  for p in arr1\n    res += p\n  end\n  \n  for q in arr2\n    res += q\n  end\n  \n  res\n      \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204361,"user_id":527,"body":"array_plus_array(xss...) = sum(sum, xss)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204362,"user_id":50,"body":"function array_plus_array(arr1, arr2)\n  return sum(arr1)+sum(arr2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a2fd38b55519ed98f0000ce":[{"id":204363,"user_id":527,"body":"function multi_table(number) \n  join((\"$i * $number = $(i * number)\" for i in 1:10), '\\n')\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204364,"user_id":421,"body":"multi_table(number) = join((\"$i * $number = $(i * number)\" for i in 1:10), \"\n\")","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204365,"user_id":2525,"body":"function multi_table(number) \n    join([\"$i * $number = $(i*number)\" for i in 1:10], \"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204366,"user_id":null,"body":"function multi_table(number) \n  join(map(i -> \"$i * $number = $(i * number)\", 1:10), \"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204367,"user_id":null,"body":"function multi_table(number) \n  elements = [\"$(i) * $(number) = $(i * number)\" for i in [1:10;]]\n  return join(elements, '\n')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204368,"user_id":null,"body":"multi_table(x) = join(map(y -> \"$y * $x = $(y * x)\", 1:10), '\n')","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204369,"user_id":null,"body":"multi_table(number) = join(map(i-> \"$i * $number = $(i*number)\", 1:10), '\n')","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204370,"user_id":492,"body":"function multi_table(n) \n    s = \"\"\n    for i in 1:10\n        s *= string(i) * \" * \" * string(n) * \" = \" * string(i*n)\n        if (i < 10)\n          s *= \"\n\"\n        end\n    end\n    s\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204371,"user_id":null,"body":"multi_table(number) = join(\"$x * $number = $(x*number)\n\" for x in 1:10)[1:end-1]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204372,"user_id":null,"body":"function multi_table(number)\n  return chomp(join([\"$x * $number = $(x*number)\n\" for x in range(1, length=10)]))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a30e7e9c5e28454790000c1":[{"id":204373,"user_id":null,"body":"module Kata\nexport spidertofly\n\nfunction spidertofly(spider, fly)\n  \u03d1 = (spider[1] - fly[1])*2*pi\/8\n  return abs(parse(Int, spider[2]) - parse(Int, fly[2])*exp(\u03d1*im))\nend\n\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204374,"user_id":null,"body":"module Kata\nexport spidertofly\n\nspidertofly(spider, fly) = sqrt((spider[2]-'0')^2+(fly[2]-'0')^2-2*(spider[2]-'0')*(fly[2]-'0')*cos(pi\/4*(spider[1]-fly[1])))\n\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204375,"user_id":480,"body":"module Kata\nexport spidertofly\n\nfunction spidertofly(spider, fly)\n  function polar(spider)\n    parse(Int,spider[2]), pi\/2-(Int(spider[1])-Int('A'))*pi\/4\n  end\n  function cartesian(polar)\n    polar[1]*cos(polar[2]), polar[1]*sin(polar[2])\n  end\n  (xs,ys)=cartesian(polar(spider))\n  (xf,yf)=cartesian(polar(fly))\n  hypot(xs-xf,ys-yf)\nend\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204376,"user_id":null,"body":"module Kata\nexport spidertofly\n\n    function spidertofly(spider, fly)\n        theta = Dict(zip('A':'H', pi\/4 * [0,1,2,3,4,5,6,7]))\n        pol2cart(c) = parse(Int, c[2]) * [sin(theta[c[1]]), cos(theta[c[1]])]\n        (pol2cart(spider) - pol2cart(fly)) .^ 2 |> sum |> sqrt\n    end\n\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204377,"user_id":544,"body":"module Kata\nexport spidertofly\n\nstruct PolarPoint\n  r\n  \u03b8\nend\n\nfunction spidertofly(spider, fly)\n  s = coord_to_polar(spider)\n  f = coord_to_polar(fly)\n  return \u221a(s.r^2 + f.r^2 - 2 * s.r * f.r * cos(s.\u03b8 - f.\u03b8))\nend\n\nfunction coord_to_polar(coord)\n  r = Int(coord[2] - '0')\n  \u03b8 = Int(coord[1] - 'A') * \u03c0 \/ 4\n  return PolarPoint(r, \u03b8)\nend\n\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204378,"user_id":2525,"body":"module Kata\nexport spidertofly\n\nfunction spidertofly(spider, fly)\n    alpha = \u03c0\/4 * (Int(spider[1])-97)\n    beta  = \u03c0\/4 * (Int(fly[1])-97)\n  \n    (r_s, r_f) = (parse(Int, spider[2]), parse(Int, fly[2]))\n  \n    d = r_s .* ( cos(alpha), sin(alpha) )  .-  r_f .* ( cos(beta), sin(beta) )\n  \n    \u221asum(d.*d)\nend\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204379,"user_id":null,"body":"module Kata\nexport spidertofly\n\nfunction parsepolar(coord::String)\n  \u03b8 = \u03c0\/2 - \u03c0\/4 * (coord[1] - 'A')\n  r = parse(Int, coord[2])\n  return (\u03b8, r)\nend\n\nfunction spidertofly(spider, fly)\n  (\u03b8\u2080, r\u2080) = parsepolar(spider)\n  (\u03b8\u2081, r\u2081) = parsepolar(fly)\n  \u221a(r\u2081^2 + r\u2080^2 - 2 * r\u2080 * r\u2081 * cos(\u03b8\u2081 - \u03b8\u2080))\nend\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204380,"user_id":421,"body":"module Kata\nexport spidertofly\n\nfunction spidertofly(spider, fly)\n  a = parse(Int, spider[2])\n  b = parse(Int, fly[2])\n  angle = 45 * (Int(spider[1]) - Int(fly[1])) * pi \/ 180\n  return sqrt(a ^ 2 + b ^ 2 - 2 * a * b * cos(angle))\nend\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204381,"user_id":null,"body":"module Kata\nexport spidertofly\n\nfunction spidertofly(spider, fly)\n  function toPoint(coord, angle)\n    angle *= coord[1] - 'A'\n    ring = parse(Int, coord[2])\n    [cos(angle) * ring, sin(angle) * ring]\n  end  \n  angle = pi \/ 4\n  p = toPoint(spider, angle) - toPoint(fly, angle)\n  hypot(p[1], p[2])\nend\n\nend # module","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204382,"user_id":null,"body":"module Kata\n  export spidertofly\n  \n  function spidertofly(spider, fly)\n    (spider == fly) && (return(0))\n    \n    angle = Dict(\n    'A' => (\u03c0\/2),\n    'B' => (\u03c0\/4),\n    'C' => (0),\n    'D' => (-\u03c0\/4),\n    'E' => (-\u03c0\/2),\n    'F' => (-3\u03c0\/4),\n    'G' => (\u03c0),\n    'H' => (3\u03c0\/4))\n    \n    \u03b8(x) = angle[x[1]]\n    m(x) = parse(Int, x[2])\n    \n    s, f = m(spider), m(fly)\n    \u0394\u03b8 = \u03b8(spider) - \u03b8(fly)\n    \n    \u221a(s^2 + f^2 - 2*s*f*cos(\u0394\u03b8))\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a34b80155519e1a00000009":[{"id":204383,"user_id":null,"body":"function multiple_of_index(arr)\n  [value for (index,value) in enumerate(arr) if value % index == 0]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204384,"user_id":759,"body":"multiple_of_index(arr)=[arr[i] for i in 1:length(arr) if arr[i] % i == 0]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204385,"user_id":1474,"body":"function multiple_of_index(arr)\n  [e for (i, e) in enumerate(arr) if e % i == 0]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204386,"user_id":null,"body":"function multiple_of_index(arr)\n  [x for (i, x) in enumerate(arr) if x % i == 0]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204387,"user_id":null,"body":"multiple_of_index(arr) = [v for (i,v) in enumerate(arr) if iszero(v%i)]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204388,"user_id":null,"body":"function multiple_of_index(arr)\n  [v for (i,v) in enumerate(arr) if i > 0 && v % i == 0]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204389,"user_id":null,"body":"function multiple_of_index(arr)\n  [value for (index,value) in enumerate(arr) if index > 0 && value % index == 0]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204390,"user_id":null,"body":"function multiple_of_index(arr)\n  newarr = []\n  for (index, value) in enumerate(arr)\n    if value % index == 0\n      append!(newarr, value)\n    end\n  end\n  newarr\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204391,"user_id":null,"body":"function multiple_of_index(arr)\n  [v for (i,v) in enumerate(arr) if v%i == 0]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204392,"user_id":null,"body":"function multiple_of_index(arr)\n  res=[]\n  for (ind,elem) in enumerate(arr)\n    if mod(elem,ind)==0\n      append!(res,elem)\n    end\n  end\n  res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a3e1319b6486ac96f000049":[{"id":204393,"user_id":1474,"body":"function consecutivepairs(ns::Vector{Int})::Int\n  sum(abs(ns[i]-ns[i+1]) == 1 ? 1 : 0 for i in 1:2:length(ns)-1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204394,"user_id":null,"body":"consecutivepairs(ns::Vector{Int})::Int = count(isone \u2218 abs, diff(ns)[1:2:end])","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204395,"user_id":null,"body":"function consecutivepairs(ns::Vector{Int})::Int\n  count(x -> abs(x[2] - x[1]) == 1, zip(ns[1:2:end], ns[2:2:end]))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204396,"user_id":2525,"body":"function consecutivepairs(ns::Vector{Int})::Int\n    n = size(ns)[1]\u00f72\n    sum( abs(ns[2*i-1] - ns[2*i])==1 for i in 1:n )\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204397,"user_id":null,"body":"function consecutivepairs(ns::Vector{Int})::Int\n  count = 0\n  for (x, y) in zip(ns[1:2:end], ns[2:2:end])\n    if abs(y - x) == 1\n      count += 1\n    end\n  end\n  count\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204398,"user_id":881,"body":"function consecutivepairs(ns::Vector{Int})::Int\n    count(abs(x - y) == 1 for (x, y) in zip(ns[1:2:end], ns[2:2:end]))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a3fe3dde1ce0e8ed6000097":[{"id":204399,"user_id":null,"body":"module Solution\n  export century_from_year\n  function century_from_year(number)\n    (number + 99) \u00f7 100\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204400,"user_id":null,"body":"module Solution\n  export century_from_year\n  function century_from_year(number)\n    return ceil(number \/ 100)\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204401,"user_id":572,"body":"module Solution\n  export century_from_year\n  function century_from_year(number)\n    fld(number-1, 100)+1\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204402,"user_id":null,"body":"module Solution\n  export century_from_year\n  century_from_year(n)=(n+99)\u00f7100\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204403,"user_id":2525,"body":"module Solution\n  export century_from_year\n  function century_from_year(number)\n    div(number+99, 100)\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204404,"user_id":null,"body":"module Solution\n  export century_from_year\n  function century_from_year(number)\n    cld(number, 100)\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204405,"user_id":null,"body":"module Solution\n  export century_from_year\n  function century_from_year(number)\n    floor(Int, (number+99)\/100 )\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204406,"user_id":null,"body":"module Solution\n  export century_from_year\n  function century_from_year(number)\n    c = (number + 99) \/ 100\n  result = floor(Int, c)\n  return result\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204407,"user_id":null,"body":"module Solution\n  export century_from_year\n  function century_from_year(number)\n    ns = string(number)\n  cent = Any\n \n  if number < 100\n    cent = 1\n    elseif 100 <= number < 999\n    if ns[2:3] == \"00\"\n      cent = parse(Int, ns[1])\n      else\n      cent = parse(Int, ns[1]) + 1\n      end\n    else\n  if ns[3:4] == \"00\"\n    cent = parse(Int, ns[1:2])\n    else\n    cent = parse(Int, ns[1:2]) + 1\n    end\n    end\n  \n  return cent\n    \n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204408,"user_id":null,"body":"module Solution\n  export century_from_year\n  function century_from_year(number)\n    return (number - number % 100) \/ 100 + 1 - (number % 100 == 0)\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a4138acf28b82aa43000117":[{"id":204409,"user_id":null,"body":"adjacentelementsproduct(array) =\n    maximum( v -> v[1]*v[2], zip(array,array[2:end]) )","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204410,"user_id":null,"body":"adjacentelementsproduct(array) = maximum(array[1:end-1] .* array[2:end])","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204411,"user_id":null,"body":"function adjacentelementsproduct(array)\n  result = *(array[1:2]...)\n  for i=1:length(array)-1\n    m = *(array[i:i+1]...)\n    m > result && (result = m)\n  end\n  result\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204412,"user_id":null,"body":"function adjacentelementsproduct(arr)\n return maximum(arr[1:end-1].*arr[2:end])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204413,"user_id":null,"body":"function adjacentelementsproduct(array)\n  maximum(map(*, array, array[2:end]))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204414,"user_id":null,"body":"adjacentelementsproduct(array) = zip(array, array[2:end]) .|> prod |> maximum","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204415,"user_id":null,"body":"function adjacentelementsproduct(array)\n    maximum(i-> prod(array[i:i+1]), 1:length(array)-1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204416,"user_id":null,"body":"function adjacentelementsproduct(array)\n  maximum([p*q for (p,q) in zip(array[1:end-1],circshift(array,-1)[1:end-1])])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204417,"user_id":null,"body":"function adjacentelementsproduct(array)\n  max([x * y for (x, y) in zip(array, array[2:end])]...)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204418,"user_id":53,"body":"function adjacentelementsproduct(xs)\n  n = length(xs)\n  i = 2\n  m = 0\n  while i <= n\n    if i == 2 || xs[i] * xs[i-1] > m\n      m = xs[i] * xs[i-1]\n    end\n    i += 1\n  end\n  m\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a48948e145c46820b00002f":[{"id":204419,"user_id":null,"body":"module Step\n    export kprimesStep\n\n    function is_kprime(n,k)\n        for i in 2:sqrt(n)\n            n % i == 0 && return is_kprime(div(n,i), k-1)\n        end\n        k == 1 ? true : false\n    end\n\n    function kprimesStep(k, step, start, nd)\n        [(n, n+step) for n in start:nd if n+step <= nd && all(is_kprime.([n, n+step], k))]\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204420,"user_id":2525,"body":"\nmodule Step\n    export kprimesStep\n\n    function getk(n)\n        if n \u2264 1\n            return 0\n        end\n  \n        for i in 2:floor(Int, \u221an)\n            if n%i==0;  return getk(n\u00f7i) + 1  end\n        end\n        1\n    end\n\n    function kprimesStep(k, step, start, nd)\n        ks = [i for i in start:nd if getk(i)==k]\n  \n        [ (i, i+step) for i in ks if i+step in ks ]\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204421,"user_id":null,"body":"module Step\n  export kprimesStep\n\n  function kprimesStep(k, step, start, nd)\n    ret = []\n    kprimes = filter(x -> length(factorize(x)) == k, start:nd)\n    for i in 1:length(kprimes)-1\n      for j in i+1:length(kprimes)\n        (kprimes[j] - kprimes[i] == step) && push!(ret, (kprimes[i], kprimes[j]))\n      end\n    end\n    ret\n  end\n\n  function factorize(n)\n    arr = []\n    while n%2 == 0\n      push!(arr,2)\n      n \/= 2\n    end\n    for i in 3:floor(sqrt(n))\n      while n%i == 0\n        push!(arr,i)\n        n \/= i\n      end\n    end\n    (n > 2) && push!(arr, n)\n    arr\n  end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204422,"user_id":1392,"body":"module Step\n    export kprimesStep\n\n    function factor(n::Int64)\n      m = floor(Int64, \u221a(n))\n  \n      count = 0\n      for i \u2208 2:m\n          if mod(n, i) == 0\n              count += factor(n \u00f7 i)\n              count += factor(i)\n              return count\n          end\n      end\n  \n      return 1\n    end\n\n    function kprimesStep(k, step, a, b)\n      k_primes = (a:b)[factor.(a:b) .== k]\n      n = length(k_primes)\n  \n      return [(k_primes[i], k_primes[j]) for i \u2208 1:n for j \u2208 (i+1):n if k_primes[j] - k_primes[i] == step]\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204423,"user_id":53,"body":"module Step\n    export kprimesStep\n\n    function primeFactorCount(n)\n        len = 0\n        i = 2\n        while i * i <= n\n            while n % i == 0\n                len += 1\n                n \/= i\n            end\n            i += 1\n        end\n        if n > 1\n            len += 1\n        end\n        return len\n    end\n        \n    function kprimesStep(k, step, start, nd)\n        arr = Tuple{Int64,Int64}[]\n        i = start\n        while i <= nd - step\n            if primeFactorCount(i) == k && primeFactorCount(i + step) == k\n                 push!(arr, (i, i + step)) \n            end\n            i += 1\n        end\n        return arr\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204424,"user_id":1474,"body":"module Step\n  export kprimesStep\n  \n  function prime_factors_cnt(n)\n    cnt = 0\n    while n % 2 == 0\n      n \u00f7= 2\n      cnt += 1\n    end\n    for i in 3:2:sqrt(n)+1\n      while n % i == 0\n        n \u00f7= i\n        cnt += 1\n      end\n    end\n    if n > 2\n      cnt += 1\n    end\n    cnt\n  end\n\n  function kprimesStep(k, step, start, nd)\n    ret = [(i, i+step) for i in start:nd-step if prime_factors_cnt(i) == prime_factors_cnt(i+step) == k]\n    isempty(ret) ? Int64[] : ret\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204425,"user_id":492,"body":"module Step\n    export kprimesStep\n\n    function dv(n)\n        cnt = 0; i = 2\n        while (i * i <= n)\n            while (n % i == 0)\n                cnt += 1\n                n \/= i\n            end\n            i += 1\n        end\n        if (n > 1)\n             cnt += 1\n        end\n        cnt\n    end\n    function kprimesStep(k, step, start, nd)\n        res = Tuple{Int64, Int64}[]\n        for i = start:nd - step\n            if (dv(i) == k && dv(i + step) == k)\n                push!(res, (i, i + step))\n            end\n        end\n        res\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204426,"user_id":null,"body":"module Step\n    export kprimesStep\n\n    function kprime_test(n, k)\n        i = 0\n        m = ceil(Int, sqrt(n))\n        for p in 2:n\n            while n % p == 0\n                i += 1\n                i > k && return false\n                n \u00f7= p\n            end\n            n == 1 && break\n            if p > m\n                i += 1\n                break\n            end\n        end\n        return i == k\n    end\n    \n    function kprimesStep(k, step, start, nd)\n        # test error\n        if nd > 200000\n            nd += 1\n        end\n        result = Tuple{Int64,Int64}[]\n        kprime = zeros(Int, step)\n        for n in start:nd\n            s = n % step + 1\n            if !kprime_test(n, k)\n                kprime[s] = 0\n                continue\n            end\n            if kprime[s] != 0\n                push!(result, (kprime[s], n))\n            end\n            kprime[s] = n\n        end\n        return result\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204427,"user_id":null,"body":"module Step\n    export kprimesStep\n\n    primes = [2]\n    max_checked = 2\n\n    function prepare_primes(max_n)\n        global max_checked\n        for n = max_checked+1:max_n\n            p2 = isqrt(n)\n            found = true\n            for p in primes\n                p <= p2 || break\n                if n % p == 0\n                    found = false\n                    break\n                end\n            end\n            found && push!(primes, n)\n        end\n        if max_checked < max_n\n            max_checked = max_n\n        end\n    end\n\n    function is_prime(n)\n        prepare_primes(n)\n        rg = searchsorted(primes, n)\n        rg.start == rg.stop\n    end\n\n    function is_kprime(k, n)\n      (k < 1 || n < 2) && return false\n      k == 1 && return is_prime(n)\n      p2 = isqrt(n)\n      prepare_primes(p2)\n      for p in primes\n        p <= p2 || break\n        n % p == 0 && return is_kprime(k-1, n\u00f7p)\n      end\n      false\n    end\n\n    # return an array of Tuple of Int64\n    function kprimesStep(k, step, start, nd)\n        kprimes = Set()\n        result = []\n        for n = start:nd+1 # \"+1\" is to pass the buggy random tests\n          if is_kprime(k, n)\n            push!(kprimes, n)\n            in(n-step, kprimes) && push!(result, (n-step, n))\n          end\n        end\n        result\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a4d303f880385399b000001":[{"id":204428,"user_id":null,"body":"function strong(n)\n  d = digits(n)\n  sum(@.factorial(d))==n ? \"STRONG!!!!\" : \"Not Strong !!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204429,"user_id":null,"body":"function strong(n)\n  n == sum(factorial.(digits(n))) ? \"STRONG!!!!\" : \"Not Strong !!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204430,"user_id":53,"body":"function strong(n)\n  n in [1,2,145,40585] ? \"STRONG!!!!\" : \"Not Strong !!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204431,"user_id":null,"body":"function strong(n)\n  (digits(sum(factorial.(digits(n)))) == digits(n)) ? \"STRONG!!!!\" : \"Not Strong !!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204432,"user_id":2525,"body":"function strong(n)\n    if sum(map(factorial, digits(n)))==n\n        \"STRONG!!!!\"\n    else\n        \"Not Strong !!\"\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204433,"user_id":421,"body":"function factorial(n)\n  n < 2 ? 1 : n * factorial(n - 1)\nend\n\nfunction strong(n)\n  return sum(map(factorial, digits(n))) == n ? \"STRONG!!!!\" : \"Not Strong !!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204434,"user_id":null,"body":"function strong(n)\n  d = digits(n)\n  sum(factorial.(d)) == n ? \"STRONG!!!!\" : \"Not Strong !!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204435,"user_id":1474,"body":"function fact(n)\n  cnt = 1\n  for i = (2:n)\n    cnt *= i\n  end\n  cnt\nend\n\nfunction strong(n)\n  t = n\n  cnt = 0\n  while t > 0\n    cnt += fact(t % 10)\n    t \u00f7= 10\n  end\n  cnt == n ? \"STRONG!!!!\" : \"Not Strong !!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204436,"user_id":null,"body":"function strong(n)\n  sum(factorial.(digits(n))) == n ? \"STRONG!!!!\" : \"Not Strong !!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204437,"user_id":null,"body":"function strong(n)\n  return (sum([factorial(i) for i in digits(n)])) == n ? \"STRONG!!!!\" : \"Not Strong !!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a4e3782880385ba68000018":[{"id":204438,"user_id":null,"body":"function balanced_num(n)\n    s=[parse(Int,v) for v \u2208 string(n)]\n    l=(length(s)-1)\u00f72\n    equal = length(s) < 3 || sum(s[1:l])==sum(s[end-l+1:end])\n    equal && return \"Balanced\"\n    \"Not Balanced\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204439,"user_id":168,"body":"function balanced_num(number)\n  ds = digits(number)\n  k = length(ds)\n  sum(ds[1:(k - 1) \u00f7 2]) == sum(ds[k \u00f7 2 + 2:end]) ? \"Balanced\" : \"Not Balanced\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204440,"user_id":null,"body":"function balanced_num(number)\n  dig = digits(number)\n  l = (length(dig) - 1) \u00f7 2\n  sum(dig[1:l]) == sum(dig[end-l+1:end]) ? \"Balanced\" : \"Not Balanced\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204441,"user_id":null,"body":"function balanced_num(number)\n  digits(number) |> arr -> length(arr) |> len -> sum(arr[1:len\u00f72-iseven(len)]) == sum(arr[len\u00f72+2:end]) ? \"Balanced\" : \"Not Balanced\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204442,"user_id":null,"body":"function balanced_num(number)\n  num = string(number)\n  if length(num) == 2 \n    return \"Balanced\"\n  elseif length(num) % 2 == 0\n    mid_low = length(num) \u00f7 2\n    first = collect(num[1:mid_low-1])\n    last = collect(num[mid_low+2:length(num)])\n  else\n    mid = (length(num) \u00f7 2) + 1\n    first = collect(num[1:mid-1])\n    last = collect(num[mid+1:length(num)])\n  end\n  \n  if sum(map(x -> parse(Int, x), first)) == sum(map(x -> parse(Int, x), last))\n    return \"Balanced\"\n  else\n    return \"Not Balanced\"\n  end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204443,"user_id":null,"body":"function balanced_num(n)\n    sum(digits(n)[1:(ndigits(n)-1)\u00f72]) == sum(reverse(digits(n))[1:(ndigits(n)-1)\u00f72]) ? \"Balanced\" : \"Not Balanced\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204444,"user_id":null,"body":"function balanced_num(number)\n  d = digits(number)\n  ld = length(d)\n  sum(d[1:ceil(Int,ld\/2)-1]) == sum(d[floor(Int, ld\/2)+2:end]) ? \"Balanced\" : \"Not Balanced\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204445,"user_id":null,"body":"function balanced_num(number)\n  dgts = digits(number)\n  \n  if length(dgts) == 1 || length(dgts) == 2\n    \"Balanced\"\n  elseif length(dgts) % 2 == 0\n    sum(dgts[1:end\u00f72-1]) == sum(dgts[end\u00f72+2:end]) ? \"Balanced\" : \"Not Balanced\"\n  else\n    sum(dgts[1:end\u00f72]) == sum(dgts[end\u00f72+2:end]) ? \"Balanced\" : \"Not Balanced\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204446,"user_id":null,"body":"const results = [\"Balanced\",\"Not Balanced\"]\n\nfunction balanced_num(number)\n  if number < 100\n    # one and two digits are balanced\n    return results[1]\n  end\n  d = digits(number)\n  m = (length(d)-1) \u00f7 2\n  n = (length(d)+4) \u00f7 2\n  return results[sum(d[1:m]) == sum(d[n:end]) ? 1 : 2]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204447,"user_id":2525,"body":"function balanced_num(number)\n    d = digits(number)\n    s = (length(d)-1)\u00f72\n    r = d[1:s]\n    l = d[end-s+1:end]\n  \n    if sum(l) == sum(r)\n        \"Balanced\"\n    else\n        \"Not Balanced\"\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a4ea304b3bfa89a9900008e":[{"id":204448,"user_id":null,"body":"max_number(n) = parse(Int, join(sort(digits(n), rev=true)))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204449,"user_id":759,"body":"max_number(n) = reduce((a, b) -> muladd(a, 10, b), sort(digits(n), rev=true))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204450,"user_id":null,"body":"function max_number(n)\n  # your code here\n  parse(Int, n |> string |> collect |> sort |> reverse |> join)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204451,"user_id":null,"body":"max_number(n)=parse(Int,sort(digits(n),rev=true)|>join)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204452,"user_id":null,"body":"max_number(n) = parse(Int, sort(collect(string(n)), rev=true) |> join)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204453,"user_id":null,"body":"function max_number(n)\n  parse(Int,join(reverse(sort(digits(n)))))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204454,"user_id":null,"body":"max_number(n) = n |> digits |> sort |> reverse |> join |> x-> parse(Int, x)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204455,"user_id":null,"body":"function max_number(n)\n  s = string(n)\n  s = sort([c for c in s], rev=true)\n  parse(Int, join(s))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204456,"user_id":2525,"body":"function max_number(n)\n    d = digits(n) \n    sum([10^i for i in size(d)[1]-1:-1:0] .* sort(d, rev=true))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204457,"user_id":null,"body":"function max_number(n)\n  max = 0\n  ls = sort!(digits(n), rev=true)\n  for i in 1:length(ls)\n    max += 10^(length(ls) - i)*ls[i]\n    end\n  return max\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a5032f4fd56cb958e00007a":[{"id":204458,"user_id":null,"body":"d=Dict( 'a'=>(1,1), 'b'=>(1,2), 'c'=>(1,3), 'd'=>(1,4), 'e'=>(1,5), '1'=>(1,6), '2'=>(1,7), '3'=>(1,8),\n        'f'=>(2,1), 'g'=>(2,2), 'h'=>(2,3), 'i'=>(2,4), 'j'=>(2,5), '4'=>(2,6), '5'=>(2,7), '6'=>(2,8),\n        'k'=>(3,1), 'l'=>(3,2), 'm'=>(3,3), 'n'=>(3,4), 'o'=>(3,5), '7'=>(3,6), '8'=>(3,7), '9'=>(3,8),\n        'p'=>(4,1), 'q'=>(4,2), 'r'=>(4,3), 's'=>(4,4), 't'=>(4,5), '.'=>(4,6), '@'=>(4,7), '0'=>(4,8),\n        'u'=>(5,1), 'v'=>(5,2), 'w'=>(5,3), 'x'=>(5,4), 'y'=>(5,5), 'z'=>(5,6), '_'=>(5,7), '\/'=>(5,8)\n)\nfunction tv_remote(word)\n  click=0\n  current = 'a'\n  for c in word\n    start=d[current]\n    destination = d[c]\n    click += abs(destination[1] - start[1]) + abs(destination[2] - start[2]) + 1\n    current = c\n  end\n  click\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204459,"user_id":null,"body":"function tv_remote(word)\n    butt = Dict(zip(\"afkpubglqvchmrwdinsxejoty147.z258@_3690\/\", [[i,j] for i in 1:5, j in 1:8]))\n    sum(sum(abs.(butt[('a'*word)[k]] - butt[('a'*word)[k+1]])) + 1 for k in eachindex(word))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204460,"user_id":null,"body":"function tv_remote(word)\n  dict = Dict('a' => [1,1], 'b' => [1,2], 'c' => [1,3], 'd' => [1,4], 'e' => [1,5], '1' => [1,6], '2' => [1,7], '3' => [1,8],\n              'f' => [2,1], 'g' => [2,2], 'h' => [2,3], 'i' => [2,4], 'j' => [2,5], '4' => [2,6], '5' => [2,7], '6' => [2,8],\n              'k' => [3,1], 'l' => [3,2], 'm' => [3,3], 'n' => [3,4], 'o' => [3,5], '7' => [3,6], '8' => [3,7], '9' => [3,8],\n              'p' => [4,1], 'q' => [4,2], 'r' => [4,3], 's' => [4,4], 't' => [4,5], '.' => [4,6], '@' => [4,7], '0' => [4,8],\n              'u' => [5,1], 'v' => [5,2], 'w' => [5,3], 'x' => [5,4], 'y' => [5,5], 'z' => [5,6], '_' => [5,7], '\/' => [5,8])\n  res = sum(map(abs,dict['a']-dict[word[1]]))+1\n  \n  for n in 1:length(word)-1\n    res += sum(map(abs,dict[word[n]]-dict[word[n+1]]))+1\n  end\n  \n  return res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204461,"user_id":168,"body":"const keyboard = \"abcde123fghij456klmno789pqrst.@0uvwxyz_\/\"\n\nfunction tv_remote(word)\n  res, i = 0, 0\n  for x in word\n    d = findfirst(x, keyboard) - 1\n    res += abs(d \u00f7 8 - i \u00f7 8) + abs(d % 8 - i % 8) + 1\n    i = d\n  end\n  return res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204462,"user_id":null,"body":"keyboard = [\n\t'a' 'b' 'c' 'd' 'e' '1' '2' '3'\n\t'f' 'g' 'h' 'i' 'j' '4' '5' '6'\n\t'k' 'l' 'm' 'n' 'o' '7' '8' '9'\n\t'p' 'q' 'r' 's' 't' '.' '@' '0'\n\t'u' 'v' 'w' 'x' 'y' 'z' '_' '\/'\n]\n\nlayout = Dict(map(CartesianIndices(keyboard)) do idx\n\tkeyboard[idx] => Tuple(idx)\nend)\n\ndistance(a, b) = sum(abs.(layout[a] .- layout[b]))\n\nfunction tv_remote(word)\n\tprev = 'a'\n\ttotal = 0 \n\tfor c in word\n\t\ttotal += distance(prev, c) + 1\n\t\tprev = c\n\tend\n\ttotal\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204463,"user_id":2525,"body":"rkeys = \"abcde123fghij456klmno789pqrst.@0uvwxyz_\/\"\ncoord = Dict( k => ((i-1)\u00f78, (i-1)%8) for (i, k) in enumerate(rkeys) )\n\nfunction tv_remote(word)\n    horizontal = [coord[c][2] for c in \"a\"*word]\n    vertical   = [coord[c][1] for c in \"a\"*word]\n  \n    sum(abs.(diff(horizontal))) + sum(abs.(diff(vertical))) + length(word)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204464,"user_id":1474,"body":"keys = [\"abcde123\", \"fghij456\", \"klmno789\", \"pqrst.@0\", \"uvwxyz_\/\"]\n\nfunction findchar(c)\n  for (i, s) in enumerate(keys)\n    j = findfirst(j->s[j] == c, 1:length(s))\n    if j != nothing\n      return [i, j]\n    end\n  end\nend\n\nfunction tv_remote(word)\n  ret = [findchar(c) for c in word]\n  cnt = 0\n  m, n = 1, 1\n  for (i, j) in ret\n    cnt, m, n = cnt + abs(i - m) + abs(j - n) + 1, i, j\n  end\n  cnt\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204465,"user_id":null,"body":"function get_ch_coord(ch)\n  ch == '.' && return [5, 3]\n  ch == '@' && return [6, 3]\n  ch == '0' && return [7, 3]\n  ch == 'z' && return [5, 4]\n  ch == '_' && return [6, 4]\n  ch == '\/' && return [7, 4]\n  isdigit(ch) && return ch-'1' |> c -> [c%3+5, c\u00f73]\n  ch-'a' |> c -> [c%5, c\u00f75]\nend\n\nfunction tv_remote(word)\n  [get_ch_coord(c) for c in word] |> coords -> vcat(coords[1], [length(coords), 0], (coords[2:end] - coords[1:end-1])...) .|> abs |> sum\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204466,"user_id":null,"body":"function tv_remote(word)\n  graph = [\n    [\"a\", \"b\", \"c\", \"d\", \"e\", \"1\", \"2\", \"3\"],\n    [\"f\", \"g\", \"h\", \"i\", \"j\", \"4\", \"5\", \"6\"],\n    [\"k\", \"l\", \"m\", \"n\", \"o\", \"7\", \"8\", \"9\"],\n    [\"p\", \"q\", \"r\", \"s\", \"t\", \".\", \"@\", \"0\"],\n    [\"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"_\", \"\/\"]\n  ]\n  \n  start = (1,1)\n  result = 0\n  \n  for char in word\n    (path, x) = bfs(graph, start, string(char))\n    result = result + length(path)\n    start = x\n  end\n  \n  return result\nend\n\nfunction bfs(graph, start, target)\n  queue = [start]\n  visited = Set([])\n  parent = Dict()\n  \n  while !isempty(queue)\n    current = popfirst!(queue)\n    visited = push!(visited, current)\n    \n    if graph[current[1]][current[2]] == string(target)\n      path = backtrace(parent, start, current)\n      return (path, current)\n    else\n      for node in neighbors(graph, current[1], current[2])\n        if !(node in visited)\n          parent[node] = current\n          queue = push!(queue, node)\n        end\n      end\n    end\n  end\n\n  return ([], start)\nend\n\nfunction neighbors(graph, x, y)\n  result = []\n\n  if (x + 1) <= length(graph)\n    result = vcat(result, (x + 1, y)) # :left\n  end\n  \n  if (y + 1) <= length(graph[1])\n    result = vcat(result, (x, y + 1)) # :down\n  end  \n  \n  if (x - 1) >= 1\n    result = vcat(result, (x - 1, y)) # :right\n  end\n  \n  if (y - 1) >= 1\n    result = vcat(result, (x, y - 1)) # :up\n  end\n  \n  return result\nend\n\nfunction backtrace(parent, start, finish)\n  path = [finish]\n  \n  while last(path) != start\n    element = get(parent, last(path), (0,0))\n    path = push!(path, element)\n  end\n\n  return reverse(path)\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204467,"user_id":881,"body":"function tv_remote(word)\n  buttons = [\n    'a' 'b' 'c' 'd' 'e' '1' '2' '3';\n    'f' 'g' 'h' 'i' 'j' '4' '5' '6';\n    'k' 'l' 'm' 'n' 'o' '7' '8' '9';\n    'p' 'q' 'r' 's' 't' '.' '@' '0';\n    'u' 'v' 'w' 'x' 'y' 'z' '_' '\/'\n  ]\n  lastindex = CartesianIndex(1, 1)\n  total = 0\n  for letter in word\n    nextindex = findfirst(button -> button == letter, buttons)\n    if VERSION < v\"1\" \n      x = nextindex % 5\n      nextindex = CartesianIndex(iszero(x) ? 5 : x, Int(ceil(nextindex \/ 5)))\n    end  \n    distance = nextindex - lastindex\n    total += abs(distance[1]) + abs(distance[2]) + 1\n    lastindex = nextindex\n  end\n  return total\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a512f6a80eba857280000fc":[{"id":204468,"user_id":527,"body":"nth_smallest = partialsort","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204469,"user_id":881,"body":"nth_smallest(arr, pos) = sort(arr)[pos]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204470,"user_id":527,"body":"function nth_smallest(arr, pos)\n  partialsort(arr, pos)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204471,"user_id":null,"body":"nth_smallest(arr, pos) = partialsort(arr, pos)[end]\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204472,"user_id":50,"body":"function nth_smallest(arr, pos)\n  return sort(arr)[pos]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204473,"user_id":null,"body":"function nth_smallest(arr, pos)\n  sort(arr)[pos]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204474,"user_id":null,"body":"nth_smallest(arr, pos) = sort(unique(arr))[pos]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204475,"user_id":null,"body":"function nth_smallest(arr, pos)\n  sort!(arr)[pos]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204476,"user_id":null,"body":"function nth_smallest(arr::Array{T,1}, pos::Integer)::T where T <: Number\n    sort(arr)[pos]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204477,"user_id":null,"body":"function nth_smallest(arr, pos)\n  arr = sort(arr)\n  while pos>1\n     popfirst!(arr);pos = pos - 1 \n  end\n  return popfirst!(arr)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a523566b3bfa84c2e00010b":[{"id":204478,"user_id":null,"body":"function min_sum(arr)\n    sorted = sort(arr)\n    sum(sorted[1:end\u00f72].*reverse(sorted[end\u00f72+1:end]))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204479,"user_id":null,"body":"function min_sum(arr)\n  s_arr = sort(arr)\n  lower = s_arr[1:div(end,2)]\n  upper = s_arr[div(end,2):end]\n  mapreduce(prod, +, zip(reverse(upper), lower))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204480,"user_id":null,"body":"function min_sum(arr)\n  sort(arr) |> a -> sum(a[1:2:end] .* a[end:-2:1])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204481,"user_id":168,"body":"function min_sum(arr)\n  xs = sort(arr)\n  sum(map(*, xs, reverse(xs))) \/ 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204482,"user_id":null,"body":"min_sum(arr) = sum(sort!(arr) .* reverse(arr)) \u00f7 2","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204483,"user_id":null,"body":"function min_sum(arr)\n  sort!(arr)\n  n = length(arr)\n  sum(arr[begin:(n\u00f72)] .* reverse(arr[(n\u00f72 + 1):end]))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204484,"user_id":null,"body":"function min_sum(arr)\n  sortedarr = sort(arr)\n  n = length(sortedarr) \u00f7 2\n  sum(sortedarr[1:n] .* reverse(sortedarr[n+1:2n]))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204485,"user_id":null,"body":"function min_sum(arr)\n  a = 0\n  sorted = sort(arr)\n  for idx in 1:length(sorted)\u00f72\n    a += sorted[idx] * sorted[length(sorted) + 1 - idx]\n  end\n  a\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204486,"user_id":2525,"body":"function min_sum(arr)\n    s = sort(arr)\n    sum(s[1:end\u00f72] .* s[end:-1:end\u00f72+1])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204487,"user_id":421,"body":"function min_sum(arr)\n  arr = sort!(arr)\n  total = 0\n  for i in 1:div(length(arr), 2)\n    total += arr[i] * arr[length(arr) + 1 - i]\n  end\n  total\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a53a17bfd56cb9c14000003":[{"id":204488,"user_id":421,"body":"function disarium_number(n)\n  a = reverse(digits(n))\n  sum(x ^ i for (i, x) in enumerate(a)) == n ? \"Disarium !!\" : \"Not !!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204489,"user_id":null,"body":"disarium_number(n) = n == sum(digits(n) .^ collect(ndigits(n):-1:1)) ? \"Disarium !!\" : \"Not !!\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204490,"user_id":null,"body":"function disarium_number(n)\n  res = 0\n  for (p, b) in enumerate(reverse(digits(n)))\n    res += b^p\n  end\n  if res == n\n    \"Disarium !!\"\n  else\n    \"Not !!\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204491,"user_id":53,"body":"function disarium_number(n)\n  if n == 0\n    \"Disarium !!\"\n  else\n    c = trunc(Int, log10(n)) + 1\n    s = 0\n    m = n\n    while (c > 0)\n      d  = m % 10\n      s += d ^ c\n      c -= 1\n      m  = m \u00f7 10\n    end\n    n == s ? \"Disarium !!\" : \"Not !!\"\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204492,"user_id":null,"body":"function disarium_number(n)\n  sum(elem^pos for (pos, elem) in enumerate(reverse(digits(n)))) == n ? \"Disarium !!\" : \"Not !!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204493,"user_id":168,"body":"function disarium_number(n)\n  sum(x^i for (i, x) in enumerate(reverse(digits(n)))) == n ? \"Disarium !!\" : \"Not !!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204494,"user_id":2525,"body":"function disarium_number(n)\n    if sum(d^i for (i, d) in enumerate(digits(n)[end:-1:1]))==n\n        \"Disarium !!\"\n    else\n        \"Not !!\"\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204495,"user_id":null,"body":"function disarium_number(n)\n  sum(d^i for (i,d) in enumerate(reverse(digits(n)))) == n ? \"Disarium !!\" : \"Not !!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204496,"user_id":null,"body":"function disarium_number(n)\n  sum([d^i for (i,d) in enumerate(reverse(digits(n)))]) == n ? \"Disarium !!\" : \"Not !!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204497,"user_id":1474,"body":"function disarium_number(n)\n  n == sum([parse(Int, c) ^ i for (i, c) in enumerate(string(n))]) ? \"Disarium !!\" : \"Not !!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a54e796b3bfa8932c0000ed":[{"id":204498,"user_id":null,"body":"function jumping_number(n)\n  \n abs(prod(diff(digits(n)))) == 1 ? \"Jumping!!\" : \"Not!!\"\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204499,"user_id":null,"body":"function jumping_number(n)\n  n |> digits |> diff .|> abs |> x -> all(y -> y==1,x) ? \"Jumping!!\" : \"Not!!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204500,"user_id":759,"body":"jumping_number(n) = all(abs(n % 10 - (n = n \u00f7 10) % 10) == 1 for i in 1:log10(n)) ? \"Jumping!!\" : \"Not!!\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204501,"user_id":null,"body":"jumping_number(n) = all(isone, abs.(diff(digits(n)))) ? \"Jumping!!\" : \"Not!!\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204502,"user_id":53,"body":"function jumping_number(n)\n  p = n % 10\n  n = n \u00f7 10\n  while (n > 0)\n    d = n % 10\n    if (abs(d - p) != 1)\n        return \"Not!!\"\n    end\n    p = d\n    n = n \u00f7 10\n  end\n  \"Jumping!!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204503,"user_id":168,"body":"function jumping_number(n)\n  ds = digits(n)\n  all(abs(x - y) == 1 for (x, y) in zip(ds, ds[2:length(ds)])) ? \"Jumping!!\" : \"Not!!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204504,"user_id":2525,"body":"function jumping_number(n)\n    if n < 10\n        return \"Jumping!!\"\n    else\n        p = digits(n)[1]\n        for d in digits(n)[2:end]        \n            if abs(p-d) != 1\n                return \"Not!!\"\n            end\n            p = d\n        end\n    end\n  \n    \"Jumping!!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204505,"user_id":421,"body":"function jumping_number(n)\n  n = reverse(digits(n))\n  all([abs(y - x) == 1 for (x, y) in zip(n, n[2:end])]) ? \"Jumping!!\" : \"Not!!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204506,"user_id":null,"body":"function jumping_number(n)\n  d = digits(n)\n  all(abs.(d[1:length(d)-1] .- d[2:length(d)]) .== 1) ? \"Jumping!!\" : \"Not!!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204507,"user_id":null,"body":"function jumping_number(n)\n  ndigits(n) == 1 ? \"Jumping!!\" :\n  all(x->x==1,abs.(digits(n)[1:2:end-1]-digits(n)[2:2:end])) ? \"Jumping!!\" : \"Not!!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a55f04be6be383a50000187":[{"id":204508,"user_id":2525,"body":"function special_number(n)\n    if issubset(digits(n), 0:5)\n        \"Special!!\"\n    else\n        \"NOT!!\"\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204509,"user_id":421,"body":"function special_number(n)\n  all(x < '6' for x in string(n)) ? \"Special!!\" : \"NOT!!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204510,"user_id":759,"body":"special_number(n) = all(a -> Int(a - Char('0')) in 0:5, string(n)) ? \"Special!!\" : \"NOT!!\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204511,"user_id":null,"body":"special_number(n) = all(in(0:5), digits(n)) ? \"Special!!\" : \"NOT!!\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204512,"user_id":null,"body":"function special_number(n)\n  n = string(n)\n  for d in n\n    if d in ['0', '1', '2', '3', '4', '5']\n      continue\n    else\n      return \"NOT!!\"\n    end\n  end\n  return \"Special!!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204513,"user_id":null,"body":"function special_number(n)\n    isnothing(match(r\"[6-9]\", string(n))) ? \"Special!!\" : \"NOT!!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204514,"user_id":null,"body":"function special_number(n)\n  all([q \u2208 [0,1,2,3,4,5] for q in digits(n)]) ? \"Special!!\" : \"NOT!!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204515,"user_id":53,"body":"function special_number(n)\n  while (n>0)\n      if (n%10>5) \n        return \"NOT!!\"\n      end\n      n = n\u00f710\n  end\n  \"Special!!\";\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204516,"user_id":null,"body":"special_number(n) = any([x > 5 for x in digits(n)]) ? \"NOT!!\" : \"Special!!\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204517,"user_id":null,"body":"special_number(n) = any([x \u2209 0:5 for x in digits(n)]) ? \"NOT!!\" : \"Special!!\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a58d889880385c2f40000aa":[{"id":204518,"user_id":null,"body":"automorphic(n) = endswith(string(n ^ 2), string(n)) ? \"Automorphic\" : \"Not!!\"\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204519,"user_id":759,"body":"function automorphic(n)\n  endswith(string(n * n), string(n)) ? \"Automorphic\" : \"Not!!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204520,"user_id":null,"body":"automorphic(n) = digits(n) == digits(n^2)[1:ndigits(n)] ? \"Automorphic\" : \"Not!!\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204521,"user_id":null,"body":"function automorphic(n::Int)::String\n  endswith(string(n^2), string(n)) ? \"Automorphic\" : \"Not!!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204522,"user_id":null,"body":"function automorphic(n)\n  \n  str_n = string(n)\n  str_sq = string(n^2)\n  \n  return last(str_sq, length(str_n)) == str_n ? \"Automorphic\" : \"Not!!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204523,"user_id":53,"body":"function automorphic(n)\n  m = n*n\n  while (n > 0)\n    if (n%10 != m%10) \n      return \"Not!!\"\n    end\n  n = n \u00f7 10\n  m = m \u00f7 10\n  end\n  return \"Automorphic\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204524,"user_id":null,"body":"function automorphic(n)\n  digits(n^2)[1:length(digits(n))] == digits(n) ? \"Automorphic\" : \"Not!!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204525,"user_id":null,"body":"function automorphic(n)\n  digits(n) == digits(n^2)[1:length(digits(n))] ? \"Automorphic\" : \"Not!!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204526,"user_id":2525,"body":"function automorphic(n)\n    if digits(n) == digits(n^2)[1:length(digits(n))]\n        \"Automorphic\"\n    else\n        \"Not!!\"\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204527,"user_id":null,"body":"function automorphic(n)\n  s = n^2\n  dn = digits(n)\n  ds = digits(s)[1:length(dn)]\n  dn == ds ? \"Automorphic\" : \"Not!!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a63948acadebff56f000018":[{"id":204528,"user_id":527,"body":"function max_product(numbers, size)\n  prod(partialsort(numbers, 1:size, rev=true))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204529,"user_id":null,"body":"max_product(numbers, size) = partialsort(numbers, 1:size, rev=true) |> prod","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204530,"user_id":168,"body":"function max_product(numbers, size)\n  reduce(*, sort(numbers, rev=true)[1:size])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204531,"user_id":null,"body":"function max_product(numbers, size)\n  max = 1\n  sort!(numbers)\n  for i in 1:size\n    max *= last(numbers)\n    pop!(numbers)\n  end\n  return max\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204532,"user_id":null,"body":"function max_product(numbers, size)\n  sort(numbers, rev=true)[1:size] |> prod\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204533,"user_id":null,"body":"max_product(numbers, size) = reduce(*, sort(numbers, rev=true)[1:size])","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204534,"user_id":759,"body":"max_product(numbers, size) = prod(sort(numbers,rev=true)[1:size])","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204535,"user_id":null,"body":"function max_product(numbers, size)\n  prod(sort(numbers)[end - size + 1:end])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204536,"user_id":null,"body":"function max_product(numbers, size)\n  prod(sort(numbers, rev=true)[1:size])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204537,"user_id":null,"body":"function max_product(numbers, size)\n  numbers = reverse(sort(numbers))\n  product = 1\n  for i in 1:size\n    product = product * numbers[i]\n  end\n  return product\n  # your code here\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a651865fd56cb55760000e0":[{"id":204538,"user_id":759,"body":"function array_leaders(numbers)\n  [numbers[i] for i in 1:length(numbers) if numbers[i] > sum(numbers[i+1:end])]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204539,"user_id":null,"body":"function array_leaders(numbers)\n  res = []\n\nfor p in 1:length(numbers)-1\n    if numbers[p] > sum(numbers[p+1:end])\n        push!(res,numbers[p])\n    end\nend\nif numbers[end] > 0\n    push!(res,numbers[end])\nend\n\nres\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204540,"user_id":null,"body":"function array_leaders(numbers)\n    [numbers[i] for i in eachindex(numbers) if vcat(reverse(cumsum(reverse(numbers)))[2:end], 0)[i] < numbers[i]]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204541,"user_id":null,"body":"function array_leaders(numbers)\n  a = collect(zip(numbers, vcat(reverse(cumsum(reverse(numbers)))[2:end],[0])))\n  return numbers[findall(x -> x[1] > x[2], a)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204542,"user_id":null,"body":"function array_leaders(numbers)\n\n  leaders = Int[]\n  count = 0\n  for i in lastindex(numbers):-1:1\n    if numbers[i] > count\n        pushfirst!(leaders, numbers[i])\n    end\n    count += numbers[i]\n  end\n\n  return leaders\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204543,"user_id":2525,"body":"function array_leaders(numbers)\n    [n for (i, n) in enumerate(numbers) if n>sum(numbers[i+1:end])]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204544,"user_id":1474,"body":"function array_leaders(nums)\n  ret = []\n  for (i, n) in enumerate(nums)\n    if sum(nums[i+1:end]) < n\n      push!(ret, n)\n    end\n  end\n  ret\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204545,"user_id":null,"body":"function array_leaders(numbers)\n  push!(numbers, 0)\n  [numbers[i] for i in 1:length(numbers)-1 if numbers[i] > sum(numbers[i+1:end])]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204546,"user_id":null,"body":"function array_leaders(numbers)\n  ret = []\n  for i in 1:length(numbers)\n    rsum = 0\n    for j in i+1:length(numbers)\n      rsum += numbers[j]\n    end\n    (numbers[i] > rsum) && push!(ret, numbers[i])\n  end\n  ret\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204547,"user_id":null,"body":"function array_leaders(numbers)\n  i = 1\n  a1 = []\n  while i < length(numbers) + 1\n    leader = true\n    if i == length(numbers) && !(numbers[i] > 0)\n      leader = false\n    elseif numbers[i] <= sum(numbers[i+1:end])\n      leader = false\n    end\n    \n    if leader == true\n      a1 = [a1; numbers[i] ]\n    end\n    i+=1\n  end\n  return a1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a662a02e626c54e87000123":[{"id":204548,"user_id":1474,"body":"function extra_perfect(n)\n  [1:2:n;]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204549,"user_id":527,"body":"function extra_perfect(n)\n  1:2:n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204550,"user_id":759,"body":"extra_perfect(n) = [i for i in 1:2:n]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204551,"user_id":null,"body":"function isperfect(n)\n  bn = string(n, base=2)\n  SubString(bn,1,1) == \"1\" && SubString(bn,length(bn)) == \"1\"\nend\n\nfunction extra_perfect(n)\n  [i for i in 1:n if isperfect(i)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204552,"user_id":null,"body":"extra_perfect(n) = 1:2:n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204553,"user_id":null,"body":"function extra_perfect(n)\n  [q for q in 1:2:n]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204554,"user_id":53,"body":"function extra_perfect(n)\n  [1:2:n...]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204555,"user_id":2525,"body":"function extra_perfect(n)\n    [2*i-1 for i in 1:(n+1)\u00f72]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204556,"user_id":null,"body":"function extra_perfect(n)\n    k = []\n    for i in [1:n]\n        append!(k, i)\n    end\n    filter(isodd, k)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204557,"user_id":1474,"body":"function extra_perfect(n)\n  filter(i->(trailing_ones(i) > 0), 1:n)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a6663e9fd56cb5ab800008b":[{"id":204558,"user_id":null,"body":"function human_years_cat_years_dog_years(human_years) \n  human_years == 1 ? [1, 15, 15] : [human_years, 24 + (human_years-2)*4, 24 + (human_years-2)*5]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204559,"user_id":null,"body":"function human_years_cat_years_dog_years(human_years) \n  [\n    human_years,\n    human_years == 1 ? 15 : 24 + (human_years - 2) * 4,\n    human_years == 1 ? 15 : 24 + (human_years - 2) * 5,    \n  ]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204560,"user_id":421,"body":"human_years_cat_years_dog_years(human_years) = human_years == 1 ? [1, 15, 15] : [human_years, 4(human_years - 2) + 24, 5(human_years - 2) + 24]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204561,"user_id":null,"body":"function human_years_cat_years_dog_years(human_years) \n  cat_years = 15\n  dog_years = 15\n  if human_years >= 2\n    cat_years += 9 + 4 * (human_years - 2)\n    dog_years += 9 + 5 * (human_years - 2)\n  end\n  \n  return [human_years, cat_years, dog_years]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204562,"user_id":null,"body":"function human_years_cat_years_dog_years(human_years) \n  h = human_years\n  \n  c,d = 0,0\n  \n  for i=1:h\n    if i==1\n      c += 15; d += 15\n    elseif i==2\n      c += 9;  d += 9\n    else \n      c += 4;  d += 5\n    end\n  end\n  \n  return [h, c, d]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204563,"user_id":null,"body":"function human_years_cat_years_dog_years(human_years) \n  years = zeros(3)\n  for i in 1:human_years\n    years[1] += 1\n    if i == 1\n      years[2] += 15\n      years[3] += 15\n    elseif i == 2\n      years[2] += 9\n      years[3] += 9\n    else\n      years[2] += 4\n      years[3] += 5\n    end\n  end\n  return years\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204564,"user_id":null,"body":"human_years_cat_years_dog_years(y) = [y, 15*(y\u22651)+9*(y\u22652)+4*max(0,y-2), 15*(y\u22651)+9*(y\u22652)+5*max(0,y-2)]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204565,"user_id":null,"body":"function human_years_cat_years_dog_years(human_years) \n  years = 15\n  cat_years = 15\n  dog_years = 15\n  if human_years > 1\n    cat_years += 9\n    dog_years += 9\n    cat_years = cat_years + (human_years - 2) * 4\n    dog_years = dog_years + (human_years - 2) * 5\n  end\n  return [human_years, cat_years, dog_years]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204566,"user_id":null,"body":"function human_years_cat_years_dog_years(human_years) \n  catyears = human_years * 4 + 11\n  dogyears = human_years * 5 + 10\n  if human_years \u2265 2\n      catyears += 5\n      dogyears += 4\n  end\n  return [human_years, catyears, dogyears]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204567,"user_id":48,"body":"function human_years_cat_years_dog_years(man) \n    cat = 15 + (man >= 2 ? 9 + 4 * (man-2) : 0)\n    dog = 15 + (man >= 2 ? 9 + 5 * (man-2) : 0)\n    return [man, cat, dog];\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a69d609e626c5708d0000c0":[{"id":204568,"user_id":1474,"body":"conv = Dict('\u0410' => 'A', '\u0430' => 'a', '\u0411' => 'B', '\u0431' => 'b', '\u0412' => 'V', '\u0432' => 'v', '\u0413' => 'G', '\u0433' => 'g',\n            '\u0414' => 'D', '\u0434' => 'd', '\u0415' => 'E', '\u0435' => 'e', '\u0401' => 'E', '\u0451' => 'e', '\u0416' => \"Zh\",\n            '\u0436' => \"zh\", '\u0417' => 'Z', '\u0437' => 'z', '\u0418' => 'I', '\u0438' => 'i', '\u0419' => \"I\", '\u0439' => \"i\",\n            '\u041a' => 'K', '\u043a' => 'k', '\u041b' => 'L', '\u043b' => 'l', '\u041c' => 'M', '\u043c' => 'm', '\u041d' => 'N', '\u043d' => 'n',\n            '\u041e' => 'O', '\u043e' => 'o', '\u041f' => 'P', '\u043f' => 'p', '\u0420' => 'R', '\u0440' => 'r', '\u0421' => 'S', '\u0441' => 's',\n            '\u0422' => 'T', '\u0442' => 't', '\u0423' => 'U', '\u0443' => 'u', '\u0424' => 'F', '\u0444' => 'f', '\u0425' => \"Kh\", '\u0445' => \"kh\",\n            '\u0426' => \"Ts\", '\u0446' => \"ts\", '\u0427' => \"Ch\", '\u0447' => \"ch\", '\u0428' => \"Sh\", '\u0448' => \"sh\", '\u0429' => \"Shch\",\n            '\u0449' => \"shch\", '\u042d' => 'E', '\u044d' => 'e', '\u042e' => \"Iu\", '\u044e' => \"iu\", '\u042f' => \"Ia\", '\u044f' => \"ia\",\n            '\u042b' => 'Y', '\u044b' => 'y', ' ' => ' ', '\u042a' => \"Ie\", '\u044a' => \"ie\")\n\nfunction romanize(cyrillic)\n  join([conv[c] for c in cyrillic if haskey(conv, c)])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204569,"user_id":480,"body":"function romanize(cyrillic)\n  dic=Dict([\n      ('\u0410',\"a\"), ('\u0411',\"b\"), ('\u0412',\"v\"), ('\u0413',\"g\"), ('\u0414',\"d\"), ('\u0415',\"e\"), ('\u0401',\"e\"), ('\u0416',\"zh\"), ('\u0417',\"z\"), ('\u0418',\"i\"), ('\u0419',\"i\"), ('\u041a',\"k\"), ('\u041b',\"l\"), ('\u041c',\"m\"), ('\u041d',\"n\"), ('\u041e',\"o\"), ('\u041f',\"p\"), ('\u0420',\"r\"), ('\u0421',\"s\"), ('\u0422',\"t\"), ('\u0423',\"u\"), ('\u0424',\"f\"), ('\u0425',\"kh\"), ('\u0426',\"ts\"), ('\u0427',\"ch\"), ('\u0428',\"sh\"), ('\u0429',\"shch\"),('\u042a',\"ie\"), ('\u042b',\"y\"), ('\u042d',\"e\"), ('\u042e',\"iu\"), ('\u042f',\"ia\"),\n      ('\u0430',\"a\"), ('\u0431',\"b\"), ('\u0432',\"v\"), ('\u0433',\"g\"), ('\u0434',\"d\"), ('\u0435',\"e\"), ('\u0451',\"e\"), ('\u0436',\"zh\"), ('\u0437',\"z\"), ('\u0438',\"i\"), ('\u0439',\"i\"), ('\u043a',\"k\"), ('\u043b',\"l\"), ('\u043c',\"m\"), ('\u043d',\"n\"), ('\u043e',\"o\"), ('\u043f',\"p\"), ('\u0440',\"r\"), ('\u0441',\"s\"), ('\u0442',\"t\"), ('\u0443',\"u\"), ('\u0444',\"f\"), ('\u0445',\"kh\"), ('\u0446',\"ts\"), ('\u0447',\"ch\"), ('\u0448',\"sh\"), ('\u0449',\"shch\"), ('\u044a',\"ie\"), ('\u044b',\"y\"), ('\u044d',\"e\"), ('\u044e',\"iu\"), ('\u044f',\"ia\"),  \n      ('\u044c',\"\")\n      ])\n  join(map(uppercasefirst,split(join(map(c->c in keys(dic) ? dic[c] : string(c),collect(cyrillic))), \" \")),\" \")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204570,"user_id":null,"body":"m = ['\u0430','a','\u0431','b','\u0432','v','\u0433','g','\u0434','d','\u0435','e','\u0451','e','\u0436',\"zh\",'\u0437','z','\u0438','i','\u0439','i','\u043a','k',\n     '\u043b','l','\u043c','m','\u043d','n','\u043e','o','\u043f','p','\u0440','r','\u0441','s','\u0442','t','\u0443','u','\u0444','f','\u0445',\"kh\",'\u0446',\"ts\",\n     '\u0447',\"ch\",'\u0448',\"sh\",'\u0449',\"shch\",'\u044a',\"ie\",'\u044b','y','\u044c',\"\",'\u044d','e','\u044e',\"iu\",'\u044f',\"ia\"]\n\nromanize(cyrillic) = titlecase(join(get(Dict(zip(m[1:2:end],m[2:2:end])), c, c) for c \u2208 lowercase(cyrillic)))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204571,"user_id":2525,"body":"trans = Dict( [(\"\u0410\", \"A\"), (\"\u0411\", \"B\"), (\"\u0412\", \"V\"), (\"\u0413\", \"G\"), (\"\u0414\", \"D\"), (\"\u0415\", \"E\"), (\"\u0401\", \"E\"), (\"\u0416\", \"Zh\"), (\"\u0417\", \"Z\"), (\"\u0418\", \"I\"), (\"\u0419\", \"I\"), (\"\u041a\", \"K\"),\n    (\"\u041b\", \"L\"), (\"\u041c\", \"M\"), (\"\u041d\", \"N\"), (\"\u041e\", \"O\"), (\"\u041f\", \"P\"), (\"\u0420\", \"R\"), (\"\u0421\", \"S\"), (\"\u0422\", \"T\"), (\"\u0423\", \"U\"), (\"\u0424\", \"F\"), (\"\u0425\", \"Kh\"), (\"\u0426\", \"Ts\"), (\"\u0427\", \"Ch\"),\n    (\"\u0428\", \"Sh\"), (\"\u0429\", \"Shch\"), (\"\u042a\", \"Ie\"), (\"\u042b\", \"Y\"), (\"\u042c\", \"\"), (\"\u042d\", \"E\"), (\"\u042e\", \"Iu\"), (\"\u042f\", \"Ia\"),\n    (\"\u0430\", \"a\"), (\"\u0431\", \"b\"), (\"\u0432\", \"v\"), (\"\u0433\", \"g\"), (\"\u0434\", \"d\"), (\"\u0435\", \"e\"), (\"\u0451\", \"e\"), (\"\u0436\", \"zh\"), (\"\u0437\", \"z\"), (\"\u0438\", \"i\"), (\"\u0439\", \"i\"), (\"\u043a\", \"k\"), (\"\u043b\", \"l\"),\n    (\"\u043c\", \"m\"), (\"\u043d\", \"n\"), (\"\u043e\", \"o\"), (\"\u043f\", \"p\"), (\"\u0440\", \"r\"), (\"\u0441\", \"s\"), (\"\u0442\", \"t\"), (\"\u0443\", \"u\"), (\"\u0444\", \"f\"), (\"\u0445\", \"kh\"), (\"\u0446\", \"ts\"), (\"\u0447\", \"ch\"), (\"\u0448\", \"sh\"),\n    (\"\u0449\", \"shch\"), (\"\u044a\", \"ie\"), (\"\u044b\", \"y\"), (\"\u044c\", \"\"), (\"\u044d\", \"e\"), (\"\u044e\", \"iu\"), (\"\u044f\", \"ia\"), ])\n\nfunction romanize(cyrillic)\n    join( get(trans, string(c), string(c)) for c in cyrillic )  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204572,"user_id":null,"body":"function romanize(cyrillic)\n  d = Dict(\n  '\u0430' => \"a\",\n    '\u0431' => \"b\",\n    '\u0432' => \"v\",\n    '\u0433' => \"g\",\n    '\u0434' => \"d\",\n    '\u0435' => \"e\",\n    '\u0451' => \"e\",\n    '\u0436' => \"zh\",\n    '\u0437' => \"z\",\n    '\u0438' => \"i\",\n    '\u0439' => \"i\",\n    '\u043a' => \"k\",\n    '\u043b' => \"l\",\n    '\u043c' => \"m\",\n    '\u043d' => \"n\",\n    '\u043e' => \"o\",\n    '\u043f' => \"p\",\n    '\u0440' => \"r\",\n    '\u0441' => \"s\",\n    '\u0442' => \"t\",\n    '\u0443' => \"u\",\n    '\u0444' => \"f\",\n    '\u0445' => \"kh\",\n    '\u0446' => \"ts\",\n    '\u0447' => \"ch\",\n    '\u0448' => \"sh\",\n    '\u0449' => \"shch\",\n    '\u044a' => \"ie\",\n    '\u044b' => \"y\",\n    '\u044c' => \"\",\n    '\u044d' => \"e\",\n    '\u044e' => \"iu\",\n    '\u044f' => \"ia\",\n    ' ' => \" \"   # hacky\n  )\n  titlecase(join(d[x] for x in lowercase(cyrillic)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204573,"user_id":null,"body":"function romanize(cyrillic)\n  rus = \"\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437\u0438\u0439\u043a\u043b\u043c\u043d\u043e\u043f\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044c\u044b\u044a\u044d\u044e\u044f \"\n  lat = split(\"a,b,v,g,d,e,e,zh,z,i,i,k,l,m,n,o,p,r,s,t,u,f,kh,ts,ch,sh,shch,,y,ie,e,iu,ia, \", ',')\n  tl = Dict(zip(rus, lat))\n  titlecase(join([tl[c] for c in lowercase(cyrillic)]))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204574,"user_id":null,"body":"tl=Dict(\"\u0410\"=>\"A\",\"\u0430\"=>\"a\",\"\u0411\"=>\"B\",\"\u0431\"=>\"b\",\"\u0412\"=>\"V\",\"\u0432\"=>\"v\",\"\u0413\"=>\"G\",\"\u0433\"=>\"g\",\"\u0414\"=>\"D\",\"\u0434\"=>\"d\",\"\u0415\"=>\"E\",\"\u0435\"=>\"e\",\"\u0416\"=>\"Zh\",\"\u0436\"=>\"zh\",\"\u0417\"=>\"Z\",\"\u0437\"=>\"z\",\"\u0418\"=>\"I\",\"\u0438\"=>\"i\",\"\u0419\"=>\"I\",\"\u0439\"=>\"i\",\"\u041a\"=>\"K\",\"\u043a\"=>\"k\",\"\u041b\"=>\"L\",\"\u043b\"=>\"l\",\"\u041c\"=>\"M\",\"\u043c\"=>\"m\",\"\u041d\"=>\"N\",\"\u043d\"=>\"n\",\"\u041e\"=>\"O\",\"\u043e\"=>\"o\",\"\u041f\"=>\"P\",\"\u043f\"=>\"p\",\"\u0420\"=>\"R\",\"\u0440\"=>\"r\",\"\u0421\"=>\"S\",\"\u0441\"=>\"s\",\"\u0422\"=>\"T\",\"\u0442\"=>\"t\",\"\u0423\"=>\"U\",\"\u0443\"=>\"u\",\"\u0424\"=>\"F\",\"\u0444\"=>\"f\",\"\u0425\"=>\"Kh\",\"\u0445\"=>\"kh\",\"\u0426\"=>\"Ts\",\"\u0446\"=>\"ts\",\"\u0427\"=>\"Ch\",\"\u0447\"=>\"ch\",\"\u0428\"=>\"Sh\",\"\u0448\"=>\"sh\",\"\u0429\"=>\"Shch\",\"\u0449\"=>\"shch\",\"\u042a\"=>\"Ie\",\"\u044a\"=>\"ie\",\"\u042b\"=>\"Y\",\"\u044b\"=>\"y\",\"\u042c\"=>\"\",\"\u044c\"=>\"\",\"\u042d\"=>\"E\",\"\u044d\"=>\"e\",\"\u042e\"=>\"Iu\",\"\u044e\"=>\"iu\",\"\u042f\"=>\"Ia\",\"\u044f\"=>\"ia\",\"\u0401\"=>\"E\",\"\u0451\"=>\"e\")\n\nfunction romanize(cyrillic)\n  foldl(replace,tl,init=cyrillic)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204575,"user_id":881,"body":"function romanize(cyrillic)\n  letters = [\"\u0446\"=>\"ts\", \"\u0443\"=>\"u\", \"\u043a\"=>\"k\", \"\u0435\"=>\"e\", \"\u043d\"=>\"n\", \"\u0433\"=>\"g\",\n    \"\u0448\"=>\"sh\", \"\u0449\"=>\"shch\", \"\u0437\"=>\"z\", \"\u0445\"=>\"kh\", \"\u044a\"=>\"ie\", \"\u0444\"=>\"f\", \"\u044b\"=>\"y\",\n    \"\u0432\"=>\"v\", \"\u0430\"=>\"a\", \"\u043f\"=>\"p\", \"\u0440\"=>\"r\", \"\u043e\"=>\"o\", \"\u043b\"=>\"l\", \"\u0434\"=>\"d\",\n    \"\u0436\"=>\"zh\", \"\u044d\"=>\"e\", \"\u044f\"=>\"ia\", \"\u0447\"=>\"ch\", \"\u0441\"=>\"s\", \"\u043c\"=>\"m\", \"\u0438\"=>\"i\",\n    \"\u0442\"=>\"t\", \"\u044c\"=>\"\", \"\u0431\"=>\"b\", \"\u044e\"=>\"iu\", \"\u0439\"=>\"i\", \"\u0419\"=>\"I\", \"\u0426\"=>\"Ts\",\n    \"\u0423\"=>\"U\", \"\u041a\"=>\"K\", \"\u0415\"=>\"E\", \"\u041d\"=>\"N\", \"\u0413\"=>\"G\", \"\u0428\"=>\"Sh\", \"\u0429\"=>\"Shch\",\n    \"\u0417\"=>\"Z\", \"\u0425\"=>\"Kh\", \"\u042a\"=>\"Ie\", \"\u0424\"=>\"F\", \"\u042b\"=>\"Y\", \"\u0412\"=>\"V\", \"\u0410\"=>\"A\",\n    \"\u041f\"=>\"P\", \"\u0420\"=>\"R\", \"\u041e\"=>\"O\", \"\u041b\"=>\"L\", \"\u0414\"=>\"D\", \"\u0416\"=>\"Zh\", \"\u042d\"=>\"E\",\n    \"\u042f\"=>\"Ia\", \"\u0427\"=>\"Ch\", \"\u0421\"=>\"S\", \"\u041c\"=>\"M\", \"\u0418\"=>\"I\", \"\u0422\"=>\"T\", \"\u042c\"=>\"\",\n    \"\u0411\"=>\"B\", \"\u042e\"=>\"Iu\", \"\u0451\"=>\"e\", \"\u0401\"=>\"E\"]\n  for l in letters\n    cyrillic = replace(cyrillic, l)\n  end\n  return cyrillic\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a7893ef0025e9eb50000013":[{"id":204576,"user_id":2525,"body":"max_gap = maximum \u2218 diff \u2218 sort","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204577,"user_id":421,"body":"function max_gap(nums)\n  nums = sort(nums)\n  maximum([y - x for (x, y) in zip(nums, nums[2:end])])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204578,"user_id":null,"body":"function max_gap(nums)\n  maximum(map(-, sort(nums)[2:end], sort(nums)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204579,"user_id":null,"body":"max_gap(nums) = sort(nums) |> diff |> maximum","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204580,"user_id":759,"body":"function max_gap(nums)\n  sort!(nums)\n  maximum(nums[i + 1] - nums[i] for i in 1:(length(nums) - 1))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204581,"user_id":1474,"body":"function max_gap(nums)\n  tmp = sort(nums)\n  maximum([tmp[i+1] - tmp[i] for i in 1:length(tmp)-1])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204582,"user_id":null,"body":"function max_gap(nums)\n  sort(nums, rev=true) |> a -> maximum(a[1:end-1] .- a[2:end])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204583,"user_id":null,"body":"function max_gap(nums)\n  sort!(nums)\n  maximum(abs(nums[i+1] - nums[i]) for i in 1:length(nums)-1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204584,"user_id":881,"body":"max_gap(nums) = maximum([abs(nums[n] - nums[n + 1]) for n in 1:length(sort!(nums)) - 1])","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204585,"user_id":645,"body":"function max_gap(nums)\n  sorted = sort(nums)\n  max([sorted[i + 1] - x for (i, x) in enumerate(sorted[1:(end - 1)])]...)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a87449ab1710171300000fd":[{"id":204586,"user_id":null,"body":"tidynumber = issorted \u2218 reverse \u2218 digits","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204587,"user_id":null,"body":"tidynumber(n) = issorted(digits(n), rev=true)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204588,"user_id":759,"body":"function tidynumber(n)\n  s = string(n)\n  !any(i -> s[i] > s[i + 1], 1:(length(s)-1))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204589,"user_id":null,"body":"tidynumber = issorted \u2218 string","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204590,"user_id":null,"body":"function tidynumber(n)\n  n == parse(Int, join(sort(collect(string(n)))))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204591,"user_id":null,"body":"tidynumber(n) = reverse(digits(n)) == sort(digits(n))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204592,"user_id":null,"body":"function tidynumber(n)\n  sort(digits(n)) == reverse(digits(n))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204593,"user_id":2525,"body":"function tidynumber(n)\n    digits(n) == sort(digits(n), rev=true)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204594,"user_id":421,"body":"function tidynumber(n)\n  reverse(digits(n)) == sort(digits(n))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204595,"user_id":null,"body":"function tidynumber(n) \n  sort(collect(string(n))) == collect(string(n))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a905c2157c562994900009d":[{"id":204596,"user_id":527,"body":"function product_array(numbers)\n  prod(numbers) .\u00f7 numbers\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204597,"user_id":53,"body":"function product_array(xs)\n  p = prod(xs)\n  [p\/n for n in xs]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204598,"user_id":null,"body":"product_array(numbers) = prod(numbers) .\u00f7 numbers","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204599,"user_id":null,"body":"function product_array(numbers)\n    indices = 1:length(numbers)\n    [prod(numbers[setdiff(indices, i)]) for i in indices]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204600,"user_id":null,"body":"function product_array(numbers)\n  res=[]\n  for q in 1:length(numbers)\n    tmp = copy(numbers)\n    popat!(tmp,q)\n    push!(res,prod(tmp))\n  end\n  res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204601,"user_id":2525,"body":"function product_array(numbers)\n    p = prod(numbers)\n    [p\u00f7n for n in numbers]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204602,"user_id":421,"body":"function product_array(numbers)\n  [reduce(*, numbers) \/ x for x in numbers]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204603,"user_id":1474,"body":"function product_array(arr)\n  [prod(vcat(arr[1:i-1], arr[i+1:end])) for i in 1:length(arr)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204604,"user_id":null,"body":"function product_array(numbers)\n  [prod([numbers[1:i-1]..., numbers[i+1:end]...]) for i in 1:length(numbers)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204605,"user_id":759,"body":"function product_array(numbers)\n  p=prod(numbers)\n  [p\/x for x in numbers]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a91a7c5fd8c061367000002":[{"id":204606,"user_id":null,"body":"function minimum_steps(numbers, value)\n  srtd = sort(numbers)\n  n = 2\n  \n  if srtd[1] >= value\n    return 0\n  else\n    while value > sum(srtd[1:n])\n      n += 1\n    end\n  end\n  \n  n-1\n    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204607,"user_id":759,"body":"function minimum_steps(numbers, value)\n  i = 0\n  r = 0\n  for n in sort(numbers)\n    r += n\n    r >= value && return i\n    i += 1\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204608,"user_id":53,"body":"function minimum_steps(ns, k)\n  for (i, e) in enumerate(sort(ns))\n    k -= e\n    if k <= 0\n      return i - 1\n    end\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204609,"user_id":null,"body":"function minimum_steps(numbers, value)\n    nums = sort(numbers)\n    count = 0\n    for i in 1:length(nums)\n        count < value ? count += nums[i] : return i-2\n    end\n    length(nums)-1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204610,"user_id":168,"body":"function minimum_steps(numbers, value)\n  findfirst(x -> x >= value, cumsum(sort(numbers))) - 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204611,"user_id":2525,"body":"function minimum_steps(numbers, value) \n    for (i, n) in enumerate(sort(numbers))\n        value -= n\n        if value \u2264 0\n            return i-1\n        end\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204612,"user_id":421,"body":"function minimum_steps(numbers, value)\n  numbers = sort(numbers)\n  count = 1\n  total = numbers[1]\n  while total < value\n    total += numbers[count + 1]\n    count += 1\n  end\n  count - 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204613,"user_id":1474,"body":"function minimum_steps(numbers, value)\n  ret = sort(numbers)\n  cnt = popfirst!(ret)\n  i = 0\n  while !isempty(ret)\n    if cnt >= value\n      return i\n    end\n    cnt += popfirst!(ret)\n    i += 1\n  end\n  if cnt >= value\n    return i\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204614,"user_id":null,"body":"function minimum_steps(numbers, value)\n  sort(numbers) |> a -> findfirst(x->x>=value, [sum(a[1:i]) for i in 1:length(a)])-1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204615,"user_id":null,"body":"function minimum_steps(numbers, value)\n  result = 0\n  sumofnumbers = 0\n  sort!(numbers)\n  while sumofnumbers < value\n    sumofnumbers += popfirst!(numbers)\n    result += 1\n  end\n  result - 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a99a03e4a6b34bb3c000124":[{"id":204616,"user_id":null,"body":"function num_primorial(n)\n  primes = [2, 3]\n  p = 5\n  while length(primes) < n\n    if all((x -> p % x != 0).(primes))\n      push!(primes, p)\n    end\n    p += 2\n  end\n  prod(primes[1:n])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204617,"user_id":null,"body":"iscoprime(P, i) = !any(x -> i % x == 0, P)\n\nfunction sieve(n)\n    P = Int[]\n    for i in 2:n\n        if iscoprime(P, i)\n            push!(P, i)\n        end\n    end\n    P\nend\n\nfunction num_primorial(number::Integer)\n    primes = sieve(10000)\n    partPrimes = primes[1:number]\n    return reduce(*, partPrimes)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204618,"user_id":null,"body":"function num_primorial(n, p = 2)\n    n == 0 ? 1 : all(i-> p % i != 0, 2:sqrt(p)) ? p * num_primorial(n-1, p+1) : 1 * num_primorial(n, p+1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204619,"user_id":2525,"body":"primes = [2, 3, 5]\nfunction is_prime(i) \n    for p in primes\n        if i%p==0;  return false  end\n    end\n    true\nend  \nfunction addprimes(n)\n    m = length(primes)\n    i = maximum(primes)+2\n    while m < n\n        if is_prime(i)\n            push!(primes, i)\n            m += 1\n        end    \n        i += 2\n    end    \nend\nfunction num_primorial(n)\n    if n > length(primes)\n        addprimes(n)\n    end\n  \n    prod(primes[1:n])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204620,"user_id":null,"body":"function isprime(num)\n    if num < 2 \n        return false \n    end\n    for i in 2:floor(Int, sqrt(num))\n        if (num % i) == 0 \n            return false\n        end\n    end\n    return true\nend\n\nfunction nextprime(n) \n    while true \n        n += 1\n        if isprime(n)\n            return(n)\n        end\n    end\nend\n\n\nfunction num_primorial(n)\n    res = 2\n    cur = 2\n    for i in 1:(n-1)\n        cur = nextprime(cur)\n        res *= cur\n    end\n    return res\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204621,"user_id":null,"body":"# function isprime() taken from Primes.jl (https:\/\/github.com\/JuliaMath\/Primes.jl)\nfunction isprime(n::Integer)\n    for m in (2, 3, 5, 7, 11, 13, 17, 19, 23)\n        n % m == 0 && return n == m\n    end\n    n < 841 && return n > 1\n    s = trailing_zeros(n - 1)\n    d = (n - 1) >>> s\n    for a in witnesses(n)::Tuple{Vararg{Int}}\n        x = powermod(a, d, n)\n        x == 1 && continue\n        t = s\n        while x != n - 1\n            (t -= 1) \u2264 0 && return false\n            x = oftype(n, widemul(x, x) % n)\n            x == 1 && return false\n        end\n    end\n    return true\nend\n\nfunction num_primorial(n)\n  total = 1\n  N = 0\n  i = 1\n  while N < n\n    i += 1\n    if isprime(i)\n      total *= i\n      N += 1\n    end\n  end\n  return total\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204622,"user_id":null,"body":"function num_primorial(n)\n  primelist = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973]\n  foldr(*, primelist[1:n], init=BigInt(1))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204623,"user_id":null,"body":"function isprime(x)\n  for i = 2:x - 1\n    if x % i == 0\n      return false\n    end\n  end\n  true\nend\n\nfunction num_primorial(n)\n  primes = []\n  t = 2\n  while length(primes) < n\n    if isprime(t)\n      push!(primes, t)\n    end\n    t += 1\n  end\n  prod(primes)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204624,"user_id":null,"body":"function isprime(n)\n  (n == 0 || n == 1) && return false\n  n_divs = 0\n  for i in 2:sqrt(n)\n    (i != n && n%i == 0) && return false\n  end\n  return true\nend\n  \nfunction num_primorial(n)\n  n_primes, i, ret = 0, 2, 1\n  while true\n    if isprime(i)\n      ret *= i\n      n_primes += 1\n    end\n    n_primes == n && break\n    i += 1\n  end\n  ret\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204625,"user_id":881,"body":"primes = [2, 3]\n\nfunction nthprime(n)\n  i = primes[end]\n  while length(primes) < n\n    i += 2\n    rooti = sqrt(i)\n    isprime = true\n    for p in primes\n      if i % p == 0\n        isprime = false\n        break\n      elseif p > rooti\n        break\n      end      \n    end\n    if isprime\n      push!(primes, i)\n    end\n  end  \n  primes[n]\nend \n\nprimorials = [2]\n\nfunction num_primorial(n)\n  if length(primorials) < n\n    push!(primorials, nthprime(n) * num_primorial(n - 1))\n  end\n  primorials[n]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5a9c35e9ba1bb5c54a0001ac":[{"id":204626,"user_id":null,"body":"function add(a, b)\n  a==0 && return b\n  return add((a&b)<<1,xor(a,b))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204627,"user_id":null,"body":"using LinearAlgebra\nadd(a, b) = [a b] \u22c5 [1 1]","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204628,"user_id":null,"body":"function add(a, b)\n    while b != 0\n        carry = a & b\n        a \u22bb= b\n        b = carry << 1\n    end\n    a\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204629,"user_id":null,"body":"using LinearAlgebra\nfunction add(a, b)\n  return tr([a 0; 0 b])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204630,"user_id":2525,"body":"using LinearAlgebra\nfunction add(a, b)\n    A = [a 0; 0 b]\n    tr(A)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204631,"user_id":null,"body":"function add(a, b)\n  sm, _ = Base.add_with_overflow(a, b)\n  return sm\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204632,"user_id":421,"body":"function add(a, b)\n  b != 0 ? add(a \u22bb b, (a & b) << 1) : a\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204633,"user_id":null,"body":"import LinearAlgebra\nfunction add(a, b)\n  A = [a 0; 0 b]\n  LinearAlgebra.dot(A, [1 0; 0 1])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204634,"user_id":null,"body":"function add_bit(a, b, c)\n    a == '1' && b == '1' && return (c, 1)\n    (a == '1' || b == '1') && return c == 1 ? (0, 1) : (1, 0)\n    (c, 0)\nend\n\nfunction add(a, b)\n    a_l = reverse(bitstring(a))\n    b_l = reverse(bitstring(b))\n    c = 0\n    res = []\n    for i in 1:length(a_l)\n        x, c = add_bit(a_l[i], b_l[i], c)\n        push!(res, x)\n    end\n    reinterpret(Int, parse(UInt, join(reverse(res)), base=2))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204635,"user_id":null,"body":"function add(a, b)\n  if b == 0\n    return a\n  end\n  return add(a \u22bb b, (a & b) << 1)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5aa1bcda373c2eb596000112":[{"id":204636,"user_id":null,"body":"function max_tri_sum(numbers)\n    numbers |> unique |> sort |> n -> n[end - 2:end] |> sum\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204637,"user_id":759,"body":"function max_tri_sum(numbers)\n  sum(unique(sort(numbers))[max(end-2,1):end])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204638,"user_id":null,"body":"function max_tri_sum(numbers)\n  a=reverse!(sort!(collect(Set(numbers))))\n\n  return a[1]+a[2]+a[3]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204639,"user_id":null,"body":"max_tri_sum(numbers) = sum(sort(unique(numbers), rev=true)[1:3])","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204640,"user_id":null,"body":"function max_tri_sum(numbers)\n  sum(unique(sort(numbers, rev=true))[1:3])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204641,"user_id":1474,"body":"function max_tri_sum(numbers)\n  ret = []\n  for i in numbers\n    if i \u2209 ret\n      push!(ret, i)\n    end\n  end\n  sort!(ret)\n  sum(ret[end-2:end])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204642,"user_id":null,"body":"function max_tri_sum(numbers)\n  array = []\n  for i in eachindex(numbers)\n    if !(numbers[i] in array)\n      append!(array, numbers[i])\n    end\n   end\n  return sum(sort(array, rev=true)[1:3])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204643,"user_id":null,"body":"max_tri_sum(numbers) = sum(sort(unique(numbers))[end-2:end])","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204644,"user_id":null,"body":"function max_tri_sum(numbers)\n  sum(sort(unique(numbers))[end-2:end])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204645,"user_id":null,"body":"function max_tri_sum(numbers)\n  sum(sort(unique(numbers), rev=true)[1:3])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5ab6538b379d20ad880000ab":[{"id":204646,"user_id":1365,"body":"module Solution\n  export area_or_perimeter\n  function area_or_perimeter(a, b)\n    a == b ? a * b : 2 * (a + b)\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204647,"user_id":null,"body":"module Solution\n  export area_or_perimeter\n  area_or_perimeter(l, w) = l == w ? l^2 : 2 * (l+w)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204648,"user_id":null,"body":"module Solution\n    export area_or_perimeter\n        function area_or_perimeter(l, w)\n            l == w ? l * w : (l + l) + (w + w)\n        end\n    end","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204649,"user_id":null,"body":"module Solution\n  export area_or_perimeter\n  function area_or_perimeter(l, w)\n    l==w ? l*w : 2(l+w)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204650,"user_id":null,"body":"module Solution\n  export area_or_perimeter\n  function area_or_perimeter(l, w)\n    if l == w\n      l * w\n    else\n      (l+w) * 2\n    end\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204651,"user_id":null,"body":"module Solution\n  export area_or_perimeter\n  function area_or_perimeter(l, w)\n    if l==w\n      return l^2\n    else\n    return 2*l+2*w\n    end\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204652,"user_id":null,"body":"module Solution\n  export area_or_perimeter\n  function area_or_perimeter(l, w)\n    l == w ? l*w : 2l + 2w\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204653,"user_id":null,"body":"module Solution\n  export area_or_perimeter\n  function area_or_perimeter(l, w)\n    l == w ? l * l : 2(l + w)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204654,"user_id":null,"body":"module Solution\n  export area_or_perimeter\n  function area_or_perimeter(l, w)\n    l == w ? l * w : (l + w) * 2\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204655,"user_id":null,"body":"module Solution\n  export area_or_perimeter\n  function area_or_perimeter(l, w)\n    # code goes here\n    return (l == w ? (l * w) : ((2 * l) + (2 * w)))\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5aba780a6a176b029800041c":[{"id":204656,"user_id":881,"body":"max_multiple(divisor, bound) = bound - bound % divisor","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204657,"user_id":null,"body":"function max_multiple(divisor, bound)\n  return bound - bound % divisor;\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204658,"user_id":527,"body":"function max_multiple(divisor, bound)\n  bound - bound % divisor\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204659,"user_id":null,"body":"function max_multiple(divisor, bound)\n  bound % divisor == 0 ? bound : max_multiple(divisor, bound-1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204660,"user_id":null,"body":"max_multiple(divisor, bound) = (0:divisor:bound).stop","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204661,"user_id":null,"body":"function max_multiple(divisor, bound)\n  # your code here\n  for N in bound:-1:1\n    if N%divisor == 0\n      return N\n      end\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204662,"user_id":null,"body":"function max_multiple(divisor, bound)\n  for num in bound:-1:1\n    if num % divisor == 0\n      return num\n    end\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204663,"user_id":null,"body":"function max_multiple(divisor, bound)\n    for i in bound:-1:1\n        if rem(i, divisor) == 0 && i <= bound && i > 0\n            return i\n        end\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204664,"user_id":null,"body":"function max_multiple(divisor, bound)\n  divisor * div(bound,divisor)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204665,"user_id":null,"body":"function max_multiple(divisor, bound)\n  return Int64((bound-bound%divisor)\/divisor)*divisor\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5abd66a5ccfd1130b30000a9":[{"id":204666,"user_id":null,"body":"function row_weights(array)\n  [sum(array[1:2:end]), sum(array[2:2:end])]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204667,"user_id":null,"body":"function row_weights(array)\n  return sum.([array[1:2:end],array[2:2:end]])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204668,"user_id":null,"body":"row_weights(array) = [sum(array[1:2:end]), sum(array[2:2:end])]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204669,"user_id":null,"body":"row_weights(array) = sum.([array[1:2:end], array[2:2:end]])","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204670,"user_id":null,"body":"function row_weights(array)\n  a=sum([array[i] for i=1:length(array) if isodd(i)])\n  b=sum([array[i] for i=1:length(array) if iseven(i)]) \n  [a,b]\n    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204671,"user_id":null,"body":"function row_weights(array)\n  [array[1:2:end], array[2:2:end]] .|> sum\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204672,"user_id":null,"body":"function row_weights(array)\n  length(array) == 1 ? [array[1],0] : [sum(array[1:2:end]),sum(array[2:2:end])]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204673,"user_id":null,"body":"function row_weights(array)\n  one = 0\n  two = 0\n  for i in 1:length(array)\n    isodd(i) ? one +=array[i] : two +=array[i]\n  end\n  return [one, two]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204674,"user_id":null,"body":"function row_weights(array)\n  ret = [0, 0]\n  i = 0\n  for w in array\n    ret[i+1] += w\n    i = (i+1)%2\n  end\n  return ret\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204675,"user_id":null,"body":"function row_weights(array)\n  one = two = 0\n  for i = 1:length(array)\n    i%2 == 1  ? one += array[i] : two += array[i]\n  end\n  [one, two]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5ac6932b2f317b96980000ca":[{"id":204676,"user_id":null,"body":"min_value(values) = parse(Int, join(sort(unique(values))))\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204677,"user_id":null,"body":"function min_value(values)\n  parse(Int, join(sort(unique(values))))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204678,"user_id":null,"body":"min_value(values) = values |> unique |> sort |> join |> x -> parse(Int, x)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204679,"user_id":759,"body":"min_value(values) = reduce((a, b) -> 10a + b, unique(sort(values)))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204680,"user_id":null,"body":"min_value(values) = parse(Int, values |> unique |> sort |> join)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204681,"user_id":null,"body":"function min_value(values)\n  set = Set(values)\n  parse(Int64 , join([pop!(set, minimum(set)) for i=1:length(Set(values))]))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204682,"user_id":null,"body":"min_value(values) = parse(Int, join(sort!(unique(values))))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204683,"user_id":null,"body":"function min_value(values)\n  return parse(Int64,join(sort!(unique!(values))))\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204684,"user_id":null,"body":"min_value(d)=parse(Int,d|>unique|>sort|>join)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204685,"user_id":null,"body":"min_value(d)=parse(Int,join(sort(unique(d))))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5ad0d8356165e63c140014d4":[{"id":204686,"user_id":1624,"body":"function final_grade(exam, projects)\n  if exam > 90 || projects > 10\n    100\n  elseif exam > 75 && projects >= 5\n    90\n  elseif exam > 50 && projects >= 2\n    75\n  else\n    0\n  end\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204687,"user_id":2723,"body":"final_grade(e, p) = e>90 || p>10 ? 100 :\n                   e>75 && p>4  ? 90  :\n                   e>50 && p>1  ? 75  : 0","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204688,"user_id":null,"body":"function final_grade(exam, projects)\n  if exam > 90 || projects > 10\n    return 100\n  elseif exam > 75 && !(projects < 5)\n    return 90\n  elseif exam > 50 && !(projects < 2)\n    return 75\n  else\n    return 0\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204689,"user_id":null,"body":"function final_grade(exam, projects)\n  (exam > 90 || projects > 10) && return 100\n  exam > 75 && projects > 4 && return 90\n  exam > 50 && projects > 1 && return 75\n  0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204690,"user_id":759,"body":"final_grade(exam, projects) =\n  if exam > 90 || projects > 10\n    100\n  elseif exam > 75 && projects >= 5\n    90\n  elseif exam > 50 && projects >= 2\n    75\n  else\n    0\n  end","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204691,"user_id":2723,"body":"final_grade(e, p) = (e>90) | (p>10) ? 100 :\n                   (e>75) & (p>4)  ? 90  :\n                   (e>50) & (p>1)  ? 75  : 0","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204692,"user_id":null,"body":"function final_grade(exam, projects)\n  if exam > 90 || projects > 10\n    100\n  elseif exam > 75 && projects \u2265 5\n    90\n  elseif exam > 50 && projects \u2265 2\n    75\n  else\n    0\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204693,"user_id":null,"body":"function final_grade(exam, projects)\n    if exam > 90 || projects > 10 return 100 end \n    if exam > 75 && projects >= 5 return 90 end \n    if exam > 50 && projects >= 2 return 75 end \n    return 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204694,"user_id":null,"body":"function final_grade(exam, projects)\n  ifelse(exam>90 || projects>10, 100, \n    ifelse(exam>75 && projects>=5, 90, \n      ifelse(exam>50 && projects>=2, 75, 0)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204695,"user_id":null,"body":"function final_grade(exam, projects)\n    if exam > 90 || projects > 10\n        a = 100\n    elseif  exam > 75 && projects >= 5\n        a = 90\n    elseif  exam > 50 && projects >= 2\n        a = 75\n    else\n        a = 0\n    end\n  return a\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5ae326342f8cbc72220000d2":[{"id":204696,"user_id":881,"body":"function string_expansion(s)\n  for m in eachmatch(r\"\\d*(\\d)(\\D*)\", s)\n    s = replace(s, m.match => join(repeat.(split(m[2], \"\"), parse(Int,m[1])), \"\"), count=1)\n  end\n  return s\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204697,"user_id":null,"body":"function string_expansion(s) \n    join(i == \"\" ? j : join(split(j,\"\").^parse(Int,i[end])) for (i,j) in [m.captures for m in eachmatch(r\"(\\d*)(\\D+)\", s)])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204698,"user_id":2525,"body":"function string_expansion(s)\n    ans = \"\"\n    multiplier = 1\n    for c in s\n        if isdigit(c)\n            multiplier = parse(Int, c)\n        else\n            ans *= c^multiplier\n        end\n    end\n    ans\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204699,"user_id":null,"body":"function string_expansion(s)\n  pair_matches = eachmatch(r\"(\\d)([A-Za-z]+)\", '1'*s)\n  Base.Iterators.flatten(\n    repeat(collect(m[2]); inner = parse(Int8, m[1])) for m in pair_matches\n  ) |> join\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204700,"user_id":null,"body":"function string_expansion(s)\n  r = 1\n  expansion = \"\"\n  for c = s\n    if isnumeric(c)\n      r = parse(Int, c)\n    else\n      expansion *= repeat(string(c), r)\n    end\n  end\n  expansion\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204701,"user_id":492,"body":"function string_expansion(s)\n    res = \"\"\n    cpt = 1\n    for c in s\n        try\n            cpt = parse(Int, c)\n        catch\n            res *= c ^ cpt\n            continue\n        end\n    end\n    return res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204702,"user_id":492,"body":"function string_expansion(s)\n    m = \"\"\n    n = 1\n    for c in s\n        if isdigit(c)\n            n = parse(Int, c)\n        else\n            m *= repeat(string(c), n)\n        end\n    end\n    return m\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204703,"user_id":null,"body":"function string_expansion(s)\n  i = 1 #counter\n  e = \"\"\n  multiplier = 1\n  while !(i>length(s)) \n    if (i !== length(s) && s[i] in ['0','1','2','3','4','5','6','7','8','9']) && lowercase(s[i+1]) in \"abcdefghijklmnopqrstuvwxyz\"\n      multiplier = parse(Int, s[i])\n      e = string(e, s[i+1]^multiplier)\n      i+=2\n    elseif lowercase(s[i]) in \"abcdefghijklmnopqrstuvwxyz\"\n      e = string(e, s[i]^multiplier)\n      i+=1\n    else\n      i+=1\n    end\n  end\n  return e\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5ae62fcf252e66d44d00008e":[{"id":204704,"user_id":null,"body":"function expression_matter(a, b, c)\n  max(*(a,b,c), +(a,b,c), (a+b)c, (b+c)a)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204705,"user_id":527,"body":"function expression_matter(a, b, c)\n  max(a + b + c, a * (b + c), (a + b) * c, a * b * c)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204706,"user_id":null,"body":"function expression_matter(a, b, c)\n    x = max(a + b, a * b)\n    y = max(b + c, b * c)\n\n    return max(x + c, x * c, a + y, a * y)\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204707,"user_id":null,"body":"function expression_matter(a, b, c)\n  if sum([a,c]) < 3\n    return sum([a,b,c])\n  elseif b <= 1\n    return maximum([a,c]) * (minimum([a,c]) + b)\n  elseif a <= 1\n    return (a + b) * c\n  elseif c <= 1\n    return (c + b) * a\n  else\n    return a * b * c\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204708,"user_id":50,"body":"function expression_matter(a, b, c)\n  return max((a+b)*c, (a+b)*c, a*(b+c), a+b+c, a*b*c)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204709,"user_id":null,"body":"expression_matter(a, b, c) = max((a+b)*c, a*(b+c), a*b*c, a+b+c)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204710,"user_id":168,"body":"function expression_matter(a, b, c)\n  maximum([a + b + c, a * b * c, (a + b) * c, a * (b + c)])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204711,"user_id":null,"body":"function expression_matter(a, b, c)\n  arr = [[a,b,c], [b,c,a]]\n  operators = [[*,*], [*,+], [+,*], [+,+]]\n  max_value = a*b*c\n  for row in arr\n    for op in operators\n      max_value = max(max_value, op[2](op[1](row[1],row[2]),row[3]))\n    end\n  end\n  return max_value\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204712,"user_id":null,"body":"function expression_matter(a, b, c)\n  return maximum([prod([a,b,c]),sum([a,b,c]),(a+b)*c,a*(b+c),a*b+c,a+b*c])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204713,"user_id":2525,"body":"function expression_matter(a, b, c)\n    if a == c == 1\n        b + 2\n    elseif 1 \u2208 (a, b, c)\n        (b + min(a, c)) * max(a, c)\n    else\n        a * b * c\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5ae7e3f068e6445bc8000046":[{"id":204714,"user_id":421,"body":"function next_happy_year(year)\n  a = year + 1\n  while length(string(a)) != length(unique(digits(a)))\n    a += 1\n  end\n  a\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204715,"user_id":759,"body":"function next_happy_year(year)\n  while ((year += 1)|>string|>unique|>length) != 4 end\n  year\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204716,"user_id":null,"body":"next_happy_year(year) = year+1 |> digits |> unique |> length == 4 ? year + 1 : next_happy_year(year+1)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204717,"user_id":null,"body":"function next_happy_year(year)\n  y = year + 1\n  while length(unique(digits(y))) \u2260 length(digits(y))\n    y += 1\n  end\n  return y\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204718,"user_id":2525,"body":"function next_happy_year(year)\n    year += 1\n    while length(unique(digits(year)))!=4\n        year += 1\n    end\n    year\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204719,"user_id":1474,"body":"function happy(n)\n  ret1 = [c for c in string(n)]\n  ret2 = []\n  for c in ret1\n    if c \u2209 ret2\n      push!(ret2, c)\n    end\n  end\n  ret1 == ret2\nend\n\nfunction next_happy_year(year)\n  while true\n    year += 1\n    if happy(year)\n      return year\n    end\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204720,"user_id":null,"body":"function next_happy_year(year)\n  year+1 |> next -> digits(next) |> y -> length(unique(y)) == length(y) ? next : next_happy_year(next)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204721,"user_id":null,"body":"function next_happy_year(year)\n  year += 1\n  while unique(string(year)) != collect(string(year))\n    year += 1\n  end\n  year\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204722,"user_id":null,"body":"function next_happy_year(year)\n  while true\n    year += 1\n    if length(digits(year)) == length(unique(digits(year)))\n      return year\n    end\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204723,"user_id":null,"body":"function next_happy_year(year)\n  local x = year + 1\n\n  while true\n    local s = split(string(x), \"\")\n    \n    if s == unique(s)\n      return x\n    else\n      x = x + 1\n    end\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5af15a37de4c7f223e00012d":[{"id":204724,"user_id":null,"body":"function men_from_boys(arr)\n  boys = unique(filter(isodd, arr))\n  mens = unique(filter(iseven, arr))\n  (vcat(sort(mens), sort(boys, rev=true)))\nend\n\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204725,"user_id":1672,"body":"function men_from_boys(arr)\n  ar=unique(arr)\n  boys=sort!(filter(a->a%2!=0,ar),rev=true)\n  men=sort(filter(a->a%2==0,ar))\n\n  return vcat(men,boys)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204726,"user_id":null,"body":"function men_from_boys(arr)\n  e=sort(filter(a->iseven(a),arr))\n  o=sort(filter(a->isodd(a),arr),rev=true)\n  unique(vcat(e,o))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204727,"user_id":null,"body":"men_from_boys(arr) = vcat(sort!(filter(iseven, unique(arr))), sort!(filter(isodd, unique(arr)), rev=true))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204728,"user_id":null,"body":"function men_from_boys(arr)\n  men = arr |> x -> filter(iseven, x) |> sort |> unique\n  boys = arr |> x -> filter(isodd, x) |> sort |> unique |> reverse\n  vcat(men, boys)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204729,"user_id":759,"body":"function men_from_boys(arr)\n  a = [Set(arr)...]\n  vcat(sort(filter(iseven, a)), sort(filter(isodd, a), rev = true))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204730,"user_id":null,"body":"function men_from_boys(arr)\n    unique(append!(sort(filter((x) -> x % 2 == 0, arr)), sort(filter((x) -> x % 2 != 0, arr), rev=true)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204731,"user_id":1474,"body":"function men_from_boys(arr)\n  men = []\n  boys = []\n  for i in arr\n    if i % 2 == 0\n      if i \u2209 men\n        push!(men, i)\n      end\n    else\n      if i \u2209 boys\n        push!(boys, i)\n      end\n    end\n  end\n  sort!(men)\n  sort!(boys, rev=true)\n  vcat(men, boys)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204732,"user_id":null,"body":"function men_from_boys(arr)\n  [sort(unique(filter(iseven, arr)))..., sort(unique(filter(isodd, arr)), rev=true)...]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204733,"user_id":null,"body":"function men_from_boys(arr)\n    arr = unique(arr) # unique! would be more efficient but not sure this is allowed.\n    evens = sort(filter(iseven, arr))\n    odds = sort(filter(isodd, arr), rev=true)\n    return vcat(evens, odds)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5aff237c578a14752d0035ae":[{"id":204734,"user_id":null,"body":"module Solution\n  export predict_age \n  function predict_age(ages...)\n      div(norm([ages...]),2)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204735,"user_id":null,"body":"module Solution\n  import LinearAlgebra\n  predict_age(age...) = LinearAlgebra.norm(age) \u00f7 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204736,"user_id":571,"body":"module Solution\n  predict_age(ages...)=floor(sqrt(mapreduce(x->x*x, +, ages))\/2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204737,"user_id":null,"body":"module Solution\n  export predict_age \n  function predict_age(age1, age2, age3, age4, age5, age6, age7, age8)\n    ages = [age1, age2, age3, age4, age5, age6, age7, age8]\n    floor(.5(\u221asum(ages .^2)))\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204738,"user_id":null,"body":"module Solution\n  export predict_age \n  function predict_age(age1, age2, age3, age4, age5, age6, age7, age8)\n    li = [age1, age2, age3, age4, age5, age6, age7, age8]\n    r = mapreduce(x->x*x, +, li)\n    return trunc(Int, sqrt(r)\/2)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204739,"user_id":null,"body":"module Solution\n  predict_age(age...) = \u221asum([age...] .^2) \u00f7 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204740,"user_id":null,"body":"module Solution\n  export predict_age \n  predict_age(age...) = floor(\u221asum(age.^2)\/2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204741,"user_id":null,"body":"module Solution\n  export predict_age \n  function predict_age(age1, age2, age3, age4, age5, age6, age7, age8)\n    arr = [age1, age2, age3, age4, age5, age6, age7, age8]\n    \n    return floor(sqrt(sum(arr.^2))\/2)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204742,"user_id":null,"body":"module Solution\n  export predict_age \n  predict_age(args...) = \u221a(sum(args .^ 2)) \u00f7 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204743,"user_id":null,"body":"module Solution\n  export predict_age \n  function predict_age(age1, age2, age3, age4, age5, age6, age7, age8)\n    return floor(Int,((age1^2 + age2^2 + age3^2 + age4^2 + age5^2 + age6^2 + age7^2 + age8^2 )^(0.5) )\/2)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5b06c990908b7eea73000069":[{"id":204744,"user_id":53,"body":"module Solve\n    export f\n    function f(z::Complex{Float64}, eps::Float64)::Int\n        ans = log(eps) \/ log(hypot(real(z), imag(z)))\n        ans < 0 ? -1 : floor(ans)\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204745,"user_id":492,"body":"module Solve\n    export f\n    function f(z::Complex{Float64}, eps::Float64)::Int\n        if (abs(z) >= 1.0) return -1 end\n        Int(floor(log(eps) \/ log(abs(z))))\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204746,"user_id":null,"body":"module Solve\nexport f\nfunction f(z::Complex{Float64}, eps::Float64)::Int\n    if norm(z) > 1.0\n        -1\n    else\n        trunc(Int, log(norm(z), eps))\n    end\nend  \nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204747,"user_id":168,"body":"module Solve\n    export f\n    function f(z::Complex{Float64}, eps::Float64)::Int\n      x = abs(z)\n      x >= 1 ? -1 : floor(log(eps) \/ log(x))\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204748,"user_id":null,"body":"module Solve\n    export f\n    function f(z::Complex{Float64}, eps::Float64)::Int\n        abs(z) > 1 && return -1\n        Int(floor(log(abs(z), eps)))\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204749,"user_id":2525,"body":"module Solve\n    export f\n    function f(z::Complex{Float64}, eps::Float64)::Int\n        \n        if abs(z) \u2264 1\n            ceil(Int, log(eps)\/log(abs(z)))\n        else\n            -1\n        end\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204750,"user_id":null,"body":"module Solve\n    export f\n    function f(z::Complex{Float64}, eps::Float64)::Int\n        abs(z) < 1 || return -1\n        return floor(Int, log(eps) \/ log(abs(z)))\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5b077ebdaf15be5c7f000077":[{"id":204751,"user_id":null,"body":"count_sheep(num) = join(\"$n sheep...\" for n in 1:num)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204752,"user_id":null,"body":"function count_sheep(num)\n  join([\"$i sheep...\" for i=1:num],\"\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204753,"user_id":null,"body":"function count_sheep(num)\n  join([\"$(n) sheep...\" for n in 1:num])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204754,"user_id":572,"body":"function count_sheep(num)\n  join([\"$i sheep...\" for i in 1:num], \"\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204755,"user_id":527,"body":"function count_sheep(num)\n  join(\"$i sheep...\" for i in 1:num)\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204756,"user_id":null,"body":"function count_sheep(num)\n  return join(map(n -> \"$n sheep...\", (1:num)))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204757,"user_id":null,"body":"function count_sheep(num)\n  temp = \"\"\n  for i in 1:num\n    temp *= string(i)*\" sheep...\"\n  end\n  return temp\n  # your code here\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204758,"user_id":null,"body":"function count_sheep(num)\n  str = \"\"\n  for i=1:num\n    str*=\"$(i) sheep...\"\n  end\n  str\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204759,"user_id":null,"body":"function count_sheep(num)\n  res = \"\"\n  for i=1:num\n    res = res * string(i) * \" \" * \"sheep...\"\n  end\n  return res\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204760,"user_id":null,"body":"function count_sheep(num)\n  join(\"$n sheep...\" for n in 1:num)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5b0c0ec907756ffcff00006e":[{"id":204761,"user_id":492,"body":"module Float\n    export quadratic\n\n    function quadratic(a, b, c)\n        -c \/ b\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204762,"user_id":492,"body":"module Float\n    export quadratic\n\n    function quadratic(a, b, c)\n        -c \/ b\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204763,"user_id":null,"body":"module Float\n    export quadratic\n    quadratic(a, b, c) = 2c \/ (-b - sign(b)*sqrt(big(b)^2 - 4a*c))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204764,"user_id":168,"body":"module Float\n    export quadratic\n\n    quadratic(a, b, c) = -c \/ b\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204765,"user_id":null,"body":"module Float\n    # We could use BigFloats in Julia; but that would be cheating, wouldn't it?\n    # \n    # Another way: x ~ -b\/2a *(1-sqrt(1-4a*c\/b^2))\n    # As sqrt(1-4a*c\/b^2) ~ 1, the difference is causing the inaccuracies.\n    # -> Develop sqrt(1+x) around x=0, which is a Binomial Series ( https:\/\/en.wikipedia.org\/wiki\/Binomial_series)\n    # sqrt(1+x) = 1 + 0.5*x - 1\/8*x^2 +...\n    # --> -b\/2a *(1-sqrt(1-4a*c\/b^2)) ~ -b\/2a*(1-(1-0.5*4ac\/b^2-...))\n    #       ~ -b\/2a*2ac\/b^2 = -c\/b\n    export quadratic\n\n    function quadratic(a, b, c)\n        return -c\/b \n        #-c\/b*(1+4*a*c\/b^2) could be used when including the 3rd term.\n        # This is unecessary, as 1>> 4*a*c\/b^2.\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204766,"user_id":759,"body":"module Float\n    export quadratic\n\n    function quadratic(a, b, c)\n        a, b, c = BigFloat.((a, b, c))\n        d = \u221a(b*b - 4*a*c)\n        x1, x2 = (-b + d) \/ 2a, (-b - d) \/ 2a\n        abs(x1) < abs(x2) ? x1 : x2\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204767,"user_id":2525,"body":"module Float\n    export quadratic\n\n    function quadratic(a, b, c)\n        (-BigFloat(b) + sqrt(BigFloat(b)^2 - 4*BigFloat(a*c)))\/2\/BigFloat(a)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204768,"user_id":null,"body":"module Float\n    export quadratic\n\n    function quadratic(a, b, c)\n        b = BigFloat(b)\n        return (-b + sqrt(b ^ 2 - 4 * a * c)) \/ (2 * a)\n    end\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5b0d67c1cb35dfa10b0022c7":[{"id":204769,"user_id":421,"body":"function squares_needed(grains)\n  grains == 0 ? 0 : length(string(grains, base = 2))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204770,"user_id":544,"body":"function squares_needed(grains)\n  grains == 0 ? 0 : floor(Int, log(2, grains)) + 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204771,"user_id":50,"body":"function squares_needed(n)\n  o=0\n  while n>0\n    n>>=1\n    o=o+1\n  end\n  return o\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204772,"user_id":null,"body":"squares_needed(grains) = grains + 1 |> log2 |> ceil","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204773,"user_id":53,"body":"function squares_needed(n)\n  n == 0 ? 0 : 1 + squares_needed(n \u00f7 2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204774,"user_id":null,"body":"function squares_needed(grains)\n  n = 0\n  \n  if grains == 0\n    return 0\n  end\n  \n  while grains > sum(x->2^x,0:n)\n    n += 1\n  end\n  \n  n+1\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204775,"user_id":null,"body":"function squares_needed(n)\n  n == 0 ? 0 : 1 + squares_needed(div(n, 2))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204776,"user_id":2525,"body":"function squares_needed(grains)\n    if grains==0\n        0\n    else\n        length(digits(grains, base=2))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204777,"user_id":1474,"body":"function squares_needed(grains)\n  grains > 0 ? length(string(grains, base=2)) : grains\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204778,"user_id":null,"body":"squares_needed(grains) = grains < 1 ? 0 : floor(log2(grains)) + 1","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5b1cd19fcd206af728000056":[{"id":204779,"user_id":null,"body":"module Solve\n    export solve\n    solve(m) = (2m + 1 - sqrt(-1 * (-4m - 1)))\/2m\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204780,"user_id":572,"body":"module Solve\n    export solve\n    function solve(m)\n        (2*m + 1 - (4*m + 1)^0.5)\/(2 * m)\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204781,"user_id":null,"body":"module Solve\n    export solve\n    #= \n    Explanation:\n      * Expressed mathematically, the instructions say: \" Solve sum_n=1^(infinity) n*x^n = m for x.\"\n      \n      * sum_n=1^(infinity) n*x^n is a Taylor Series\n      * Wikipedia: 1\/(1-x)^2 = sum_n=1^(infinity) n*x^(n-1) \n        ==> sum_n=1^(infinity) n*x^n = x *  1\/(1-x)^2\n        \n      * As the Taylor Serie is now reduced to a simple function, we can simply solve for x: \n        x *  1\/(1-x)^2 = m\n        x^2 -(2+1\/m) +1 = 0\n        This quadratic equation can be solved with the quadratic formula.\n    =#\n    function solve(m)\n        # quadratic formula\n        a = 1\n        b = -(2 + 1\/m)  \n        c = 1\n        return (-b - sqrt(b^2-4a*c) )\/2a # Taylor Series only valid for x<1 => \"-\" before the squareroot.\n    end\n    \nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204782,"user_id":492,"body":"module Solve\n    export solve\n    function solve(m)\n        s = sqrt(4 * m + 1)    \n        (2 * m + 1 - s) \/ (2 * m) \n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204783,"user_id":null,"body":"module Solve\n    export solve\n    function solve(m)\n        # your code\n      s = sqrt(4m + 1)\n  (2m + 1 - s) \/ (2m)\n\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204784,"user_id":null,"body":"module Solve\n    export solve\n    function solve(m)\n        1+(1-(4*m+1)^0.5)\/(2*m)\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204785,"user_id":null,"body":"module Solve\n    export solve\n\n    function solve(m)\n        b = -1 -2m\n        return (-b - \u221a(b^2-4m*m))\/2m\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204786,"user_id":null,"body":"module Solve\n    export solve\n    function solve(m)\n      (2m - \u221a(4m + 1) + 1) \/ 2m\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204787,"user_id":null,"body":"module Solve\n    export solve\n    function solve(m)\n        (2m+1 - \u221a((-2m-1)^2-4m^2)) \/ (2m)\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204788,"user_id":null,"body":"module Solve\n    export solve\n    function solve(s)\n      s=0.5*(1+sqrt(1+4s))\n      1-1\/s\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5b39e3772ae7545f650000fc":[{"id":204789,"user_id":881,"body":"remove_duplicate_words(s::String) = join(unique(split(s)), \" \")","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204790,"user_id":null,"body":"remove_duplicate_words(s) = join(s |> split |> unique, ' ')","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204791,"user_id":null,"body":"function remove_duplicate_words(s::String)\n  result=[]\n  for ele in split(s)\n    ele in result && continue\n    push!(result,ele)\n  end\n  join(result,\" \")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204792,"user_id":null,"body":"function remove_duplicate_words(s::String)\n  join(unique(split(s)), ' ')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204793,"user_id":null,"body":"remove_duplicate_words(s) = join((unique \u2218 split)(s), ' ')\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204794,"user_id":null,"body":"function remove_duplicate_words(s::String)\n    return join(unique(split(s,' ')), ' ')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204795,"user_id":null,"body":"function remove_duplicate_words(s::String)\n  seen = Set()\n  ret = []\n  for w in split(s, \" \")\n    if w \u2209 seen\n      push!(ret, w)\n      push!(seen, w)\n    end\n  end\n  return join(ret, \" \")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204796,"user_id":null,"body":"function remove_duplicate_words(s::String)\n  # your perfect code...\n  s0 = split(s)\n  s1 = Set()\n  s2 = []\n  for w in s0\n    if w \u2209 s1\n      push!(s2, w)\n      push!(s1, w)\n    end\n  end\n  \n  join(s2, \" \")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204797,"user_id":null,"body":"function remove_duplicate_words(s::String)\n  s_split = split(s, ' ')\n  return join(unique(s_split), ' ')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204798,"user_id":null,"body":"function remove_duplicate_words(s::String)\n  # your perfect code...\n  words = split(s)\n  c = \" \"\n  for w in words \n    if !(occursin(\" \"*w*\" \",c))\n      c = c * w * \" \"\n    end\n  end\n  return c[2:end-1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5b40b666dfb4291ad9000049":[{"id":204799,"user_id":null,"body":"module Walker\n    export solve\n    function solve(a::Int, b::Int, c::Int, \u03b1::Int, \u03b2::Int, \u03b3::Int)::Array{Int}\n        O = complex(0, 0)\n        A = O + complex(a*cosd(\u03b1), a*sind(\u03b1))\n        B = A + complex(-b*sind(\u03b2), b*cosd(\u03b2))\n        C = B + complex(-c*cosd(\u03b3), -c*sind(\u03b3))\n        \u03b4 = rad2deg(angle(C))\n        minutes = rem(\u03b4, 1) * 60\n        seconds = rem(minutes, 1) * 60\n        results = [round(abs(C)), trunc(\u03b4), trunc(minutes), trunc(seconds)]\n        return convert(Array{Int64}, results)\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204800,"user_id":null,"body":"module Walker\n    export solve\n    function solve(a::Int, b::Int, c::Int, alpha::Int, beta::Int, gamma::Int)::Array{Int}\n        alpha = deg2rad(alpha); beta = deg2rad(beta); gamma = deg2rad(gamma)\n        y = a*sin(alpha) + b*cos(beta) - c*sin(gamma)\n        x = a*cos(alpha) - b*sin(beta) - c*cos(gamma)\n        ang = rad2deg(atan(y\/x))+180\n        [round(\u221a(x^2+y^2)), floor(ang), floor(ang*60%60), floor(ang*3600%60)]\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204801,"user_id":53,"body":"module Walker\n    export solve\n    function solve(a::Int, b::Int, c::Int, alpha::Int, beta::Int, gamma::Int)::Array{Int}\n        u = alpha * pi \/ 180\n        v = beta * pi \/ 180\n        w = gamma * pi \/ 180\n        x = a * cos(u) - b * sin(v) - c * cos(w)\n        y = a * sin(u) + b * cos(v) - c * sin(w)\n        t = atan(y, x) * 180 \/ pi\n        r = hypot(y, x)\n        [round(Int, r), floor(Int, t), floor(Int, t * 60) % 60, floor(Int, t * 3600) % 60]\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204802,"user_id":492,"body":"module Walker\n    export solve\n    function solve(a::Int, b::Int, c::Int, alpha::Int, beta::Int, gamma::Int)::Array{Int}\n        alpha *= pi \/180; beta *= pi \/180; gamma *= pi \/ 180\n        X = a * cos(alpha) - b * sin(beta) - c * cos(gamma)\n        Y = a * sin(alpha) + b * cos(beta) - c * sin(gamma)\n        r = sqrt(X * X + Y * Y)\n        theta = floor(Int, acos(X\/r) * 180 * 3600 \/ pi)\n        d = div(theta, 3600)\n        mm = mod(theta, 3600)\n        m = div(mm, 60)\n        s = mod(mm, 60)\n        rr = round(Int, r)\n        return [rr, d, m, s]\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204803,"user_id":492,"body":"module Walker\n    export solve\n    function solve(a::Int, b::Int, c::Int, alpha::Int, beta::Int, gamma::Int)::Array{Int}\n        alpha *= pi \/180; beta *= pi \/180; gamma *= pi \/ 180\n        X = a * cos(alpha) - b * sin(beta) - c * cos(gamma)\n        Y = a * sin(alpha) + b * cos(beta) - c * sin(gamma)\n        r = sqrt(X * X + Y * Y)\n        theta = floor(Int, acos(X\/r) * 180 * 3600 \/ pi)\n        d = div(theta, 3600)\n        mm = mod(theta, 3600)\n        m = div(mm, 60)\n        s = mod(mm, 60)\n        rr = round(Int, r)\n        return [rr, d, m, s]\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204804,"user_id":null,"body":"module Walker\n    export solve\n\n    function \u0394x\u0394y(dist,angle)\n        return [dist*cosd(angle), dist*sind(angle)]\n    end\n\n    function solve(OA::Int, AB::Int, BC::Int, alpha::Int, beta::Int, gamma::Int)::Array{Int}\n        C = \u0394x\u0394y(OA,alpha) + \u0394x\u0394y(AB,beta+90) + \u0394x\u0394y(BC,gamma+180)\n        OC = \u221a(C[1]^2+C[2]^2)\n        tOC = atand(C[2],C[1])\n        tOC_deg = trunc(Int,tOC)\n        tOC_min = trunc(Int,(tOC - tOC_deg)*60)\n        tOC_sec = trunc(Int,(tOC - tOC_deg - tOC_min\/60.0)*3600)\n        return [round(Int,OC),tOC_deg,tOC_min,tOC_sec]\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204805,"user_id":null,"body":"module Walker\n    export solve\n    function solve(a::Int, b::Int, c::Int, alpha::Int, beta::Int, gamma::Int)::Array{Int}\n        h = a*sin(alpha*pi\/180)+b*cos(beta*pi\/180)-c*sin(gamma*pi\/180)\n        u = a*cos(alpha*pi\/180)-b*sin(beta*pi\/180)-c*cos(gamma*pi\/180)\n        CO = round(sqrt(h^2+u^2))\n        ang = 180+atan(h\/u)*180\/pi\n        min = (ang%1)*60\n        sec = trunc((min%1)*60)\n        [CO, trunc(ang), trunc(min), sec]\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204806,"user_id":null,"body":"module Walker\nexport solve\n\nfunction solve(a::Int, b::Int, c::Int, alpha::Int, beta::Int, gamma::Int)::Array{Int}\n  function toVector(dist, angle, offset)\n    angle = deg2rad(angle) + offset\n    [cos(angle), sin(angle)] * dist\n  end\n  v = sum(x -> toVector(x...), [[a, alpha, 0], [b, beta, pi \/ 2], [c, gamma, pi]])\n  dist = round(hypot(v...))\n  angle = rad2deg(atan(v[2], v[1]))\n  deg = floor(angle)\n  angle = (angle - deg) * 60\n  min = floor(angle)\n  sec = floor((angle - min) * 60)\n  [dist, deg, min, sec]\nend\n\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204807,"user_id":2525,"body":"module Walker\n    export solve\n    function solve(a::Int, b::Int, c::Int, alpha::Int, beta::Int, gamma::Int)::Array{Int}\n        cx = a*cos(alpha\/180*pi) - b*sin(beta\/180*pi) - c*cos(gamma\/180*pi)\n        cy = a*sin(alpha\/180*pi) + b*cos(beta\/180*pi) - c*sin(gamma\/180*pi)\n        \n        d = sqrt(cx^2+cy^2)\n        toc = acos(cx\/d)\n        degrees = floor(Int, toc\/pi*180)\n        minutes = floor(Int, toc\/pi*180*60 - degrees*60)\n        seconds = floor(Int, toc\/pi*180*3600 - degrees*3600 - minutes*60)\n\n        [round(Int, d), degrees, minutes, seconds]\n    end\nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204808,"user_id":null,"body":"module Walker\n    export solve\n    function solve(a::Int, b::Int, c::Int, alpha::Int, beta::Int, gamma::Int)::Array{Int64}\n                  # your code\n                  alpha, beta, gamma = (@. deg2rad((alpha, beta, gamma) ))\n                  A1 = b * sin(beta) + c * cos(gamma) - a * cos(alpha)\n                  A2 = a * sin(alpha) + b * cos(beta) - c * sin(gamma)\n                  OC = Int(round(sqrt(A1 ^ 2 + A2 ^ 2)) )\n                  \n                  angle = 180 - rad2deg(atan(A2 \/ A1))\n                  \n                  \n                  \n                  degrees = floor(angle)\n                  minutes = (angle - degrees) * 60\n                  seconds = floor((minutes - floor(minutes))  * 60)\n                  \n                  degrees = Int(degrees)\n                  minutes = Int(floor(minutes))\n                  seconds = Int(seconds)\n\n                  [OC, degrees, minutes, seconds]\n                  \n              end\n    \n    \nend ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5b4e779c578c6a898e0005c5":[{"id":204809,"user_id":527,"body":"draw_stairs(n) = join(lpad.('I', 1:n), '\n')","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204810,"user_id":812,"body":"function draw_stairs(n)\n  str = \"\"\n  for i in range(1, n - 1, step = 1)\n    str = string(str, \" \" ^ (i - 1), \"I\n\")\n  end\n  str = string(str, \" \" ^ (n - 1), \"I\")\n  str\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204811,"user_id":null,"body":"draw_stairs(n) = join((\" \" .^ (0:n-1) .* 'I'), '\n')","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204812,"user_id":480,"body":"function draw_stairs(n)\n  r = \"I\"\n  s= \"\"\n  for i=1:n-1\n    s = string(s, \" \")\n    r = string(r,\"\n\",s,\"I\")\n  end\n  r\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204813,"user_id":null,"body":"draw_stairs(n) = strip(join([\"I\n\"*\" \"^q for q in 1:n]))\n  ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204814,"user_id":null,"body":"function draw_stairs(n)\n  steps = [repeat(' ', i) * \"I\" for i in 0:n-1]\n  return join(steps, \"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204815,"user_id":2525,"body":"function draw_stairs(n)\n    if n==1 \n        return \"I\"\n    else\n        return draw_stairs(n-1) * \"\n\" * \" \"^(n-1) * \"I\"\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204816,"user_id":null,"body":"function draw_stairs(n)\n  stair = \"I\n\"\n  i = 1\n  while i < n\n    stair = stair*(\" \"^i)*\"I\n\"\n    i +=1\n  end\n  return stair[1:end-1]\n  \n    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204817,"user_id":421,"body":"function draw_stairs(n)\n  join([\"$(repeat(' ', x - 1))I\" for x in 1:n], \"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204818,"user_id":53,"body":"function draw_stairs(n)\n    xs = []\n    for i = 0:n-1\n        xs = append!(xs, [lpad(\"I\", i+1, \" \")])\n    end\n    return join(xs, \"\n\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5b71af678adeae41df00008c":[{"id":204819,"user_id":null,"body":"function shortestdistance(a::Real, b::Real, c::Real)::Real\n    sqrt(a^2 + b^2 + c^2 + 2 * prod(sort([a,b,c])[1:2]))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204820,"user_id":2525,"body":"function shortestdistance(a::Real, b::Real, c::Real)::Real\n    (x, y, z) = sort([a, b, c])\n    sqrt((x+y)^2 + z^2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204821,"user_id":1474,"body":"function shortestdistance(a::Real, b::Real, c::Real)::Real\n  minimum([((a+b)^2 + c^2)^0.5,((a+c)^2 + b^2)^0.5,((b+c)^2 + a^2)^0.5])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204822,"user_id":null,"body":"function shortestdistance(a::Real, b::Real, c::Real)::Real\n  edges = [a,b,c]\n  longest_edge = findmax(edges)\n  deleteat!(edges, longest_edge[2])\n  step1 = sqrt((longest_edge[1] * edges[1]\/sum(edges))^2 + edges[1]^2)\n  step2 = sqrt((longest_edge[1] * edges[2]\/sum(edges))^2 + edges[2]^2)\n  return step1 + step2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204823,"user_id":null,"body":"function shortestdistance(a::Real, b::Real, c::Real)::Real\n    sqrt(max(a,b,c)^2 + sum(sort!([a,b,c])[1:2])^2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204824,"user_id":null,"body":"function shortestdistance(a::Real, b::Real, c::Real)::Real\n    minimum([sqrt(c^2 + (a + b)^2), sqrt(a^2 + (c + b)^2), sqrt(b^2 + (a + c)^2)])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204825,"user_id":527,"body":"function shortestdistance(a::Real, b::Real, c::Real)::Real\n  min(hypot(a + b, c), hypot(a + c, b), hypot(b + c, a))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204826,"user_id":881,"body":"function shortestdistance(a::Real, b::Real, c::Real)::Real\n    m = max(a, b, c)\n    hypot(a + b + c - m, m)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5b728f801db5cec7320000c7":[{"id":204827,"user_id":2525,"body":"function solve(s::String, k::Int)::String\n    if k<=0 || s == \"\"\n        s\n    else\n        solve(replace(s, minimum(s)=>\"\"; count=1), k-1)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204828,"user_id":1474,"body":"function solve(s::String, k::Int)::String\n  if k >= length(s)\n    return \"\"\n  end\n  for c in \"abcdefghijklmnopqrstuvwxyz\"\n    if !(c in s)\n      continue\n    end\n    cnt = count(x -> x == c, s)\n    if k <= cnt\n      return replace(s, c => \"\", count=k)\n    end\n    s = replace(s, c => \"\")\n    k -= cnt\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204829,"user_id":null,"body":"function solve(s::String, k::Int)::String\n    (k == 0 || s == \"\") && return s\n    for ch in join('a':'z')\n        occursin(ch, s) && return solve(replace(s, ch => \"\", count=1), k-1)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204830,"user_id":null,"body":"function solve(s::String, k::Int)::String\n  c = 'a'\n  while k > 0 && s != \"\"\n    s, k = replace(s, c => \"\", count = k), k - count(==(c), s)\n    c = Char(Int(c) + 1)\n  end\n  s\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204831,"user_id":null,"body":"letters = \"abcdefghijklmnopqrstuvwxyz\"\n\nfunction solve(s::String, k::Int)::String\n    count = k\n    if length(s) <= count\n        return \"\"\n    end\n    for letter in letters\n        while occursin(letter, s)\n            s = replace(s, \"$(letter)\" => \"\", count=1)\n            count -= 1\n            if count == 0\n                return s\n            end\n        end\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204832,"user_id":881,"body":"function solve(s::String, k::Int)::String\n    if k >= length(s)\n        return \"\"\n    end\n    while k > 0\n        for l in 'a':'z'\n            d = min(count(==(l), s), k)\n            s = replace(s, l=>\"\", count=d)\n            k -= d\n        end\n    end\n    s\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5b73fe9fb3d9776fbf00009e":[{"id":204833,"user_id":881,"body":"sum_of_differences(arr::Array{<:Number}) = -(-(extrema(arr)...))\nsum_of_differences(arr::Array) = isempty(arr) ? 0 : throw(\"Bad input\")","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204834,"user_id":null,"body":"function sum_of_differences(arr)\n  sorted = sort(arr)\n  res=0\n  \n  if length(arr) < 2\n    return 0\n  end\n  \n  for index in 1:length(arr)-1\n    res += sorted[index] - sorted[index+1]\n  end\n  \n  abs(res)\n  \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204835,"user_id":null,"body":"function sum_of_differences(arr)\n  arr = sort(arr, rev=true)\n  res = 0\n  for i in 1:(length(arr)-1)\n    res += (arr[i] - arr[i+1])\n  end\n  return res\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204836,"user_id":1474,"body":"function sum_of_differences(arr)\n  length(arr) < 2 ? 0 : maximum(arr) - minimum(arr)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204837,"user_id":null,"body":"function sum_of_differences(arr)\n  isempty(arr) ? 0 : maximum(arr) - minimum(arr)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204838,"user_id":null,"body":"sum_of_differences(::Vector{Any}) = 0\nsum_of_differences(arr::Vector{Int}) = arr |> sort |> diff |> sum","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204839,"user_id":null,"body":"function sum_of_differences(arr)\n  convert(Vector{Int}, arr) |> sort |> diff |> sum\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204840,"user_id":null,"body":"sum_of_differences = sum \u2218 diff \u2218 sort \u2218 (arr -> convert(Vector{Int}, arr))","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204841,"user_id":null,"body":"function sum_of_differences(arr)\n  length(arr) == 0 ? 0 : (maximum(arr) - minimum(arr))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204842,"user_id":168,"body":"function sum_of_differences(arr)\n  length(arr) > 0 ? maximum(arr) - minimum(arr) : 0\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5b7ea71db90cc0f17c000a5a":[{"id":204843,"user_id":421,"body":"function ptotal(M\u2081, M\u2082, m\u2081, m\u2082, V, T)\n    (m\u2081 \/ M\u2081 + m\u2082 \/ M\u2082) * (T + 273.15) * 0.082 \/ V\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204844,"user_id":null,"body":"function ptotal(M\u2081, M\u2082, m\u2081, m\u2082, V, T)\n    (m\u2081\/M\u2081 + m\u2082\/M\u2082) * 0.082 * (T + 273.15) \/ V\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204845,"user_id":null,"body":"function ptotal(molarMass1, molarMass2, givenMass1, givenMass2, volume, temp)\n  pressure1 = givenMass1 \/ molarMass1\n  pressure2 = givenMass2 \/ molarMass2\n  (pressure1 + pressure2) * (0.082 * (temp + 273.15)) \/ volume\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204846,"user_id":null,"body":"ptotal(M\u2081, M\u2082, m\u2081, m\u2082, V, T) = 0.082(T + 273.15) * (m\u2081\/M\u2081 + m\u2082\/M\u2082) \/ V","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204847,"user_id":null,"body":"R = 0.082\n\nfunction ptotal(M\u2081, M\u2082, m\u2081, m\u2082, V, T)\n    T += 273.15\n    R*T*(m\u2081\/\/M\u2081 + m\u2082\/\/M\u2082)\/V\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204848,"user_id":492,"body":"function ptotal(M\u2081, M\u2082, m\u2081, m\u2082, V, T)\n    # your code goes here\nend\nfunction ptotal(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp)\n    local a = given_mass1 * 0.001 \/ molar_mass1\n    local b = given_mass2 * 0.001 \/ molar_mass2\n    temp += 273.15\n    return (((a + b) * 0.082 * temp) \/ volume) * 1000\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204849,"user_id":null,"body":"function ptotal(M\u2081, M\u2082, m\u2081, m\u2082, V, T)\n    R = 0.082\n    ZeroC = 273.15\n    (m\u2081\/M\u2081 + m\u2082\/M\u2082) * R * (T + ZeroC) \/ V\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204850,"user_id":null,"body":"function ptotal(M\u2081, M\u2082, m\u2081, m\u2082, V, T)\n  ems = (m\u2081 \/ M\u2081) + (m\u2082 \/ M\u2082)\n  R = 0.082\n  up = ems * R * (T+273.15)\n  up\/V\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204851,"user_id":209,"body":"function ptotal(M1, M2, m1, m2, V, T)\n    (m1\/M1+m2\/M2)*0.082*(T+273.15)\/V\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204852,"user_id":null,"body":"function ptotal(M\u2081, M\u2082, m\u2081, m\u2082, V, T)\n    P = (m\u2081\/M\u2081 + m\u2082\/M\u2082) * 0.082 * (T + 273.15) \/ V\n  return P\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5b853229cfde412a470000d0":[{"id":204853,"user_id":null,"body":"twice_as_old(dadyearsold, sonyearsold) = abs(2 * sonyearsold - dadyearsold)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204854,"user_id":null,"body":"function twice_as_old(dadyearsold, sonyearsold)\n  abs(2*sonyearsold - dadyearsold)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204855,"user_id":53,"body":"function twice_as_old(a, b)\n  abs(a - 2 * b)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204856,"user_id":421,"body":"twice_as_old(dadyearsold, sonyearsold) = abs(dadyearsold - 2sonyearsold)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204857,"user_id":null,"body":"function twice_as_old(dad, son)\n  (dad - son * 2) > 0 ? dad - son * 2 : son * 2 - dad;\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204858,"user_id":1474,"body":"function twice_as_old(dad, son)\n  abs(2 * son - dad)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204859,"user_id":812,"body":"function twice_as_old(dadyearsold, sonyearsold)\n  ans = 0\n  while dadyearsold != 2 * sonyearsold\n      ans += 1\n      dadyearsold += 1\n      sonyearsold += 1\n#      println(dadyearsold, sonyearsold)\n  end\n  abs(ans)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204860,"user_id":null,"body":"function twice_as_old(dadyearsold, sonyearsold)\n  #your code here\n\n  doubdad = sonyearsold * 2\n    if dadyearsold - doubdad < 0\n        dif = doubdad - dadyearsold\n    else\n        dif = dadyearsold - doubdad\n    end\n  return dif\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204861,"user_id":50,"body":"function twice_as_old(d, s)\n  return abs(d-2*s)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204862,"user_id":null,"body":"function twice_as_old(dadyearsold, sonyearsold)\n  return abs((2 * (dadyearsold - sonyearsold)) - dadyearsold)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5ba38ba180824a86850000f7":[{"id":204863,"user_id":527,"body":"solve = reverse \u2218 unique \u2218 reverse","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204864,"user_id":null,"body":"function solve(a)\n  reverse(union(reverse(a)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204865,"user_id":759,"body":"function solve(a)\n  res = []\n  for i in length(a):-1:1\n    a[i] \u2209 res && pushfirst!(res, a[i])\n  end\n  res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204866,"user_id":527,"body":"function solve(a)\n  reverse(unique(reverse(a)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204867,"user_id":null,"body":"solve(v) = \u222a(reverse(v)) |> reverse","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204868,"user_id":881,"body":"solve(a) = reverse!(unique!(reverse(a)))\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204869,"user_id":572,"body":"function solve(a)\n  unique(a[end:-1:1])[end:-1:1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204870,"user_id":null,"body":"function solve(a)\n  totheright(x,id) = x in a[id+1:end]\n  uniqueright = []\n  for id in 1:length(a)\n    !totheright(a[id], id) && push!(uniqueright, a[id])\n  end\n  uniqueright\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204871,"user_id":2525,"body":"function solve(a)\n    sort(collect(Set(a)), by=x->findlast(isequal(x), a))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204872,"user_id":null,"body":"function solve(a) \n  result = a\n  iter = 1\n  while length(result) != length(Set(a))\n    if count(==(a[iter]), result) > 1\n      deleteat!(result, iter)\n    else\n      iter +=1\n    end\n  end\n  result\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5bb0c58f484fcd170700063d":[{"id":204873,"user_id":null,"body":"function pillars(numpill, dist, width)\n  numpill <= 1 ? 0 : (numpill-2)width + (numpill-1)dist*100\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204874,"user_id":572,"body":"function pillars(numpill, dist, width)\n  100dist*(numpill-1) + width*(numpill-2)*(numpill > 1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204875,"user_id":null,"body":"function pillars(numpill, dist, width)\n  return numpill > 1 ? (dist*100 + width)*(numpill-2) + dist*100 : 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204876,"user_id":1566,"body":"pillars(n,d,w)=(n-1)*d*100+(n-2)*w*(n>1)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204877,"user_id":null,"body":"function pillars(numpill, dist, width)\n  if numpill > 1\n    ((numpill - 1) * dist * 100) + ((numpill - 2) * width)\n  else\n    0\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204878,"user_id":null,"body":"function pillars(numpill, dist, width)\n  if numpill==1\n    return false\n  end\n  \n  dist *= 100\n  (numpill - 1) * dist + (numpill - 2) * width\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204879,"user_id":null,"body":"pillars(n, d, w) = 100d*(n - 1) + w*max(0, n - 2)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204880,"user_id":null,"body":"function pillars(numpill, dist, width)\n  # your code here\n  if numpill == 1\n    return 0\n  elseif numpill == 2\n    return dist * 100\n  else\n    return (numpill - 1) * dist * 100 + (numpill -2) *  width\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204881,"user_id":null,"body":"function pillars(numpill, dist, width)\n  dst = (numpill - 1) * dist * 100\n  dst += (numpill > 2 ? numpill - 2 : 0) * width\n  return dst\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204882,"user_id":168,"body":"function pillars(n, dist, width)\n  (n - 1) * dist * 100 + max(n - 2, 0) * width\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5bb148b840196d1be50000b1":[{"id":204883,"user_id":2525,"body":"function convert(word)\n    if word == \"\"\n        0\n    else\n        word = lowercase(word)\n        parse(Int, join(Dict(zip(unique(word), \"1023456789\"))[c] for c in word))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204884,"user_id":null,"body":"function convert(word)\n    word == \"\" && return 0\n    chars = word |> lowercase |> unique\n    converter = Dict(zip(chars, string.(vcat([1,0], 2:length(chars)))))\n    parse(Int, join(converter[ch] for ch in lowercase(word)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204885,"user_id":null,"body":"function convert(word)\n  word = lowercase(word)\n  n = length(word)\n  if n==0 return 0 end\n  d = Dict([])\n  toUse = [1, 0, 2:9...]\n  currI = 1\n  for c in word\n    if haskey(d, c) continue end\n    d[c] = toUse[currI]\n    currI += 1\n  end\n  return sum(d[word[end-k]]*10^k for k in 0:n-1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204886,"user_id":null,"body":"function convert(word)\n    letters = split(word, \"\")\n    indiv_up = unique!(split(uppercase(word), \"\"))\n    indiv_low = unique!(split(lowercase(word), \"\"))\n    ind = range(1, length(indiv_up), step=1)\n    if word == \"\"\n        return 0\n    elseif length(letters) == 1\n        return 1\n    elseif length(indiv_up) == 1\n        return parse(Int64, \"1\"^length(letters))\n    else\n        val_assign1 = Dict(indiv_up[i] => i-1 for i in ind )\n        val_assign2 = Dict(indiv_low[i] => i-1 for i in ind )\n        val_assign = merge(val_assign1,val_assign2)\n\n        switch_up = val_assign[indiv_up[1]]\n        val_assign[indiv_up[1]] = val_assign[indiv_up[2]]\n        val_assign[indiv_up[2]] = switch_up\n\n        switch_low = val_assign[indiv_low[1]]\n        val_assign[indiv_low[1]] = val_assign[indiv_low[2]]\n        val_assign[indiv_low[2]] = switch_low\n        number = [val_assign[i] for i in letters]\n        #parse(Int64, join(number))\n        return parse(Int64, join(number))\n    \n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204887,"user_id":53,"body":"function convert(word)\n  xs = ['1','0','2','3','4','5','6','7','8','9']\n  hs = Dict()\n  i = 1\n  ret = \"\"\n  for c in lowercase(word)\n    if !haskey(hs, c)\n      hs[c] = xs[i]\n      i += 1\n    end\n    ret *= string(hs[c])\n  end\n  length(ret) == 0 ? 0 : parse(Int64, ret)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204888,"user_id":881,"body":"function convert(word::String)::Int\n  if isempty(word)\n    return 0\n  end\n  \n  numbers = Iterators.Stateful(\"1023456789\")\n  assignments::Dict{Char,Char} = Dict()\n  result = \"\"\n  \n  for letter in lowercase(word)\n    if !haskey(assignments, letter)\n      assignments[letter] = popfirst!(numbers)\n    end\n    result *= assignments[letter]\n  end\n  \n  parse(Int, result)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5bb3e299484fcd5dbb002912":[{"id":204889,"user_id":2525,"body":"function pyramid(balls) \n    floor(Int, sqrt(1+8*balls)\/2-1\/2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204890,"user_id":null,"body":"function pyramid(balls)\n  div(sqrt(8 * balls + 1) - 1 , 2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204891,"user_id":null,"body":"pyramid(balls) = (sqrt(1 + 8balls) - 1)\u00f72","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204892,"user_id":null,"body":"function pyramid(balls)\n  n = 0\n  while div(n * (n + 1),2) <= balls\n    n += 1\n  end\n  return n-1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204893,"user_id":null,"body":"pyramid(balls) = floor(Int, -1\/2 + 1\/2*\u221a(1 + 8*balls))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204894,"user_id":527,"body":"function pyramid(balls)\n  (\u221a(8 * balls + 1) - 1) \u00f7 2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204895,"user_id":null,"body":"function pyramid(balls)\n  floor((-1 + (1 + 8*balls)^0.5) \/ 2.0)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204896,"user_id":53,"body":"function pyramid(balls)\n  div(-1 + sqrt(1 + 8 * balls), 2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204897,"user_id":421,"body":"pyramid(balls) = div(-1 + sqrt(1 + 4 * balls * 2), 2)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5bb804397274c772b40000ca":[{"id":204898,"user_id":759,"body":"function stackheight2d(layers)\n  layers == 0 ? 0 : 1 + (layers - 1) * sind(60)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204899,"user_id":null,"body":"function stackheight2d(layers)\n  layers==0 ? 0 : muladd((\u221a3)\/2,layers-1,1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204900,"user_id":null,"body":"stackheight2d(layers) = iszero(layers) ? 0 : (layers - 1)*sin(\u03c0\/3) + 1","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204901,"user_id":2525,"body":"function stackheight2d(layers)\n    if layers == 0\n        0\n    else\n        1 + (layers-1)*sqrt(3)\/2\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204902,"user_id":421,"body":"function stackheight2d(layers)\n  layers < 2 ? layers : (layers - 1) * sqrt(3) \/ 2 + 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204903,"user_id":null,"body":"function stackheight2d(layers)\n  layers == 0 ? 0 : (layers-1)\/2*\u221a3 + 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204904,"user_id":null,"body":"function stackheight2d(layers)\n  layers == 0 ? 0 : layers - 0.1339745962155614*(layers - 1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204905,"user_id":881,"body":"stackheight2d(layers) = min(layers, cos(pi \/ 6) * (layers - 1) + 1)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204906,"user_id":645,"body":"stackheight2d(layers) = 0 < layers ? 1 + (layers - 1) * sqrt(3) \/ 2 : 0","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5bb904724c47249b10000131":[{"id":204907,"user_id":null,"body":"function points(games)\n  sum(re[1]>re[3] ? 3 : re[1]==re[3] ? 1 : 0 for re in games)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204908,"user_id":881,"body":"points(games) = mapreduce(s -> s[1] > s[3] ? 3 : s[1] == s[3] ? 1 : 0, +, games)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204909,"user_id":null,"body":"points(game::String) = [0, 1, 3][2 + cmp(game[1], game[3])]\npoints(games::Array{String,1}) = sum(points.(games))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204910,"user_id":null,"body":"function points(games)\n  mapreduce(scoreassignment, +, games)\nend\n\nfunction scoreassignment(score)\n  home, away = interpretscore(score)\n  home > away && return 3\n  home == away && return 1\n  return 0\nend\n\nfunction interpretscore(score::String)\n  score[1], score[3]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204911,"user_id":2723,"body":"points(games) = sum(game[1] < game[end] ? 0 :\n                    game[1] > game[end] ? 3 : 1 for game in games)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204912,"user_id":759,"body":"function points(games)\n  sum(a -> begin\n    c = -(map(b -> parse(Int, b), split(a, ':'))...)\n    c == 0 ? 1 : c < 0 ? 0 : 3\n  end, games)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204913,"user_id":null,"body":"function points(games)\n  points = 0\n    for i in 1:length(games)\n    if games[i][1] > games[i][3]\n      points = points + 3\n      elseif games[i][1] == games[i][3]\n      points = points + 1\n      else games[i][1] < games[i][3]\n      points = points + 0    \n    end\n    end\n  return points\n    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204914,"user_id":null,"body":"function points(games)\n  total = 0\n  for game in games\n      x = game[1] - '0'\n      y = game[3] - '0'\n      \n      if x > y\n        total += 3\n      elseif x == y\n        total += 1\n      end\n  end\n  return total\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204915,"user_id":null,"body":"function points(games)\n points = 0\n  for x in games\n    if x[1]>x[3]\n      points += 3\n      elseif x[1] == x[3]\n        points += 1\n      end\n  end\n  return points\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204916,"user_id":null,"body":"function points(games)\n    total = 0\n    for game in games\n        x = game[begin]\n        y = game[end]\n\n        if x > y\n            total += 3\n        elseif x == y\n            total += 1\n        end \n    end\n\n    return total\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5bc052f93f43de7054000188":[{"id":204917,"user_id":null,"body":"function solve(a, b)\n  r = Regex(replace(a, \"*\" => \".*\"))\n  m = match(r, b)\n  m \u2260 nothing ? m.match == b : false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204918,"user_id":209,"body":"function solve(a, b)\n  match(Regex(\"^\"*replace(a, \"*\"=>\".*\")*\"\\$\"), b) != nothing\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204919,"user_id":null,"body":"function solve(a, b)\n  match(Regex(\"^$(replace(a, \"*\"=>\".*\"))\\$\"), b) != nothing\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204920,"user_id":881,"body":"solve(a, b) = occursin(Regex('^' * replace(a, \"*\" => \".*\") * '$'), b)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204921,"user_id":53,"body":"function solve(a, b)\n  occursin(Regex('^' * replace(a, \"*\" => \".*\") * '$'), b)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204922,"user_id":null,"body":"function solve(a, b)\n  if length(a) > length(b)+1\n    return false  \n  elseif contains(a,\"*\")\n    return a[1:findfirst(\"*\",a)[1]-1] == b[1:findfirst(\"*\",a)[1]-1] && a[findfirst(\"*\",a)[1]+1:end] == b[end-(length(a[findfirst(\"*\",a)[1]+1:end])-1):end]\n  else\n    return a == b\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204923,"user_id":null,"body":"function solve(a, b)\n    length(b) < length(a) - 1 && return false\n    splt = split(a, \"*\")\n    isone(length(splt)) ? b == splt[1] : startswith(b, splt[1]) && endswith(b, splt[2])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204924,"user_id":2525,"body":"function solve(a, b)\n    match(Regex(replace(\"\\\\A\"*a*\"\\\\Z\", \"*\" => \".*\")), b) != nothing\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204925,"user_id":1474,"body":"function solve(a, b)\n  stg = replace(a, '*' => \".*\")\n  reg = Regex(\"^$stg\\$\")\n  match(reg, b) \u2260 nothing\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204926,"user_id":null,"body":"function solve(a, b)\n  if !occursin('*', a)\n    a == b\n  else\n    while a[1] != '*'\n      if b == \"\"\n        return false\n      end\n      if a[1] != b[1]\n        return false\n      end\n      a, b = a[2:end], b[2:end]\n    end\n    while a[end] != '*'\n      if b == \"\"\n        return false\n      end\n      if a[end] != b[end]\n        return false\n      end\n      a, b = a[1:end - 1], b[1:end - 1]\n    end\n    true\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5bd776533a7e2720c40000e5":[{"id":204927,"user_id":null,"body":"pendulum(numbers) = vcat(reverse(sort(numbers)[1:2:end]), sort(numbers)[2:2:end])","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204928,"user_id":null,"body":"pendulum(numbers) = vcat(reverse(sort!(numbers)[1:2:end]), numbers[2:2:end])","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204929,"user_id":null,"body":"function pendulum(numbers)\n  s = sort(numbers)\n  vcat(reverse(s[1:2:end]), s[2:2:end])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204930,"user_id":2525,"body":"function pendulum(numbers)\n    poet = []\n    for (i, n) in enumerate(sort(numbers))\n        if i%2==0\n            push!(poet, n)\n        else\n            pushfirst!(poet, n)\n        end    \n    end\n  \n    return poet\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204931,"user_id":1474,"body":"function pendulum(numbers)\n  ret = []\n  for (i, e) in enumerate(sort(numbers))\n    if i % 2 == 0\n      push!(ret, e)\n    else\n      pushfirst!(ret, e)\n    end\n  end\n  ret\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204932,"user_id":null,"body":"function pendulum(numbers)\n  (isodd(length(numbers)) ? [numbers..., maximum(numbers)] : numbers) |> arr -> reshape(sort(arr), 2, :) |> a -> reshape(hcat(reverse(a[1, :]), a[2, :]), 1, :)[1:length(numbers)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204933,"user_id":null,"body":"function pendulum(numbers)\n  output = []\n  sort!(numbers)\n  index = 1\n  while length(numbers) > 0\n    insert!(output, index, popfirst!(numbers))\n    index == 1 ? index = length(output) + 1 : index = 1\n  end\n  return output\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204934,"user_id":793,"body":"function pendulum(xs)\n  xs = sort(xs)\n  return xs[[((length(xs)-1)&~1)+1:-2:1; 2:2:length(xs)]]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204935,"user_id":null,"body":"function pendulum(numbers)\n    sorted = sort(numbers)\n    result = similar(sorted)\n    destination = (1+lastindex(result))\u00f72\n    step = 1\n    for v in sorted\n        result[destination] = v\n        destination += step\n        step = step < 0 ? -step+1 : -step-1\n    end\n    result\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204936,"user_id":null,"body":"function pendulum(numbers)\n  n = length(numbers)\n  p = [reverse(1:2:n); 2:2:n]\n  sort(numbers)[p]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5c44b0b200ce187106452139":[{"id":204937,"user_id":null,"body":"args_count(args...) = length([args...])","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204938,"user_id":null,"body":"# Create a function called args_count that returns the number of arguments provided\n\nargs_count(a::Any...) = length(a)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204939,"user_id":null,"body":"args_count(arr...) = length(arr)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204940,"user_id":759,"body":"args_count(a...)=length(a)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204941,"user_id":null,"body":"# Create a function called args_count that returns the number of arguments provided\n\"\nVARARGS\n\"\nfunction args_count(x...)\n  count = 0\n  if length(x) == 0\n    return 0\n  else\n    for i in 1:length(x)\n      count+=1\n    end\n    return count\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204942,"user_id":null,"body":"# Create a function called args_count that returns the number of arguments provided\n\nfunction args_count(x...)\n  return length(x)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204943,"user_id":527,"body":"function args_count(args...)\n  length(args)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204944,"user_id":881,"body":"args_count(args...) = length(args)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5c46ea433dd41b19af1ca3b3":[{"id":204945,"user_id":480,"body":"function hex_word_sum(string)\n  s=0\n  for w in split(replace(replace(string,\"O\"=>\"0\"),\"S\"=>\"5\"),\" \")\n    if w!=\"\"  && all(c->c in \"0123456789ABCDEF\",collect(w))\n      s+=parse(Int,w;base=16)\n    end\n  end\n  s\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204946,"user_id":null,"body":"hex_word_sum(string) = sum(parse.(Int, filter(x-> occursin(r\"^[A-F0-9]+$\", x), split(replace(replace(string, \"S\"=>\"5\"), \"O\"=>\"0\"))), base=16))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204947,"user_id":null,"body":"function hex_word_sum(string)\n  isempty(string) ? 0 : sum(w -> all(in(\"0123456789ABCDEF\"), w) ? parse(Int, w, base = 16) : 0, split(replace(replace(string, 'O' => '0'), 'S' => '5')))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204948,"user_id":2525,"body":"function hex_word_sum(string)\n    sum( if n!=nothing; n else 0 end for n in tryparse.(Int, split(replace(replace(string*\" 0\", 'O'=>'0'), 'S'=>'5')); base=16) )\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204949,"user_id":1474,"body":"function hex_word_sum(string)\n  stg = replace(string, 'O' => '0')\n  stg = replace(stg, 'S' => '5')\n  reg = r\"^[0-9A-F]+$\"\n  sum([parse(Int, w, base=16) for w in split(stg) if occursin(reg, w)])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204950,"user_id":null,"body":"function hex_word_sum(string)\n  is_valid(s) = match(r\"^[0-9A-F]+$\", s) != nothing\n  parse.(Int, filter(is_valid, split(replace(replace(string, \"O\"=>\"0\"), \"S\"=>5))), base=16) |> sum\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204951,"user_id":null,"body":"function hex_word_sum(string)\n  sum([occursin(r\"^[A-FOS]+$\", word) ?\n      parse(Int, replace(replace(word, 'O'=>'0'), 'S'=>'5'), base=16) :\n      0 for word in split(string)])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204952,"user_id":759,"body":"function hex_word_sum(string)\n  res = 0\n  for s in split(string, \" \")\n    num = 0\n    for i in 1:length(s)\n      num *= 16\n      map = Dict(\n        '0' => 0, '1' => 1, '2' => 2,\n        '3' => 3, '4' => 4, '5' => 5,\n        '6' => 6, '7' => 7, '8' => 8,\n        '9' => 9, 'A' => 10, 'B' => 11,\n        'C' => 12, 'D' => 13, 'E' => 14,\n        'F' => 15, 'S' => 5, 'O' => 0\n      )\n      if haskey(map, s[i])\n        num += map[s[i]]\n      else\n        num = 0\n        break\n      end\n    end\n    res += num\n  end\n  res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204953,"user_id":null,"body":"function hex_word_sum(s)\n  s = reduce(replace, [\"O\" => \"0\", \"S\" => \"5\"], init=s)\n  isempty(s) ? 0 : sum(occursin(r\"^[0123456789ABCDEF]+$\", w) ? parse(Int, w, base=16) : 0 for w in split(s))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204954,"user_id":null,"body":"function hex_word_sum(string)\n    sum( split(string,' ') ) do s\n        s = replace(s, 'S' => '5' )\n        s = replace(s, 'O' => '0' )\n        if !isempty(s) && all(isxdigit,s)\n            parse(Int,s,base=16)\n        else\n            0\n        end            \n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5c563cb78dac1951c2d60f01":[{"id":204955,"user_id":759,"body":"function pass_the_door_man(word)\n  for i in 1:length(word)-1\n    word[i] == word[i + 1] && return 3(Int(word[i]) - Int('a') + 1)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204956,"user_id":null,"body":"function pass_the_door_man(word)\n  l=[]\n  for c in word\n    c in l && return (Int(c)-96)*3\n    push!(l,c)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204957,"user_id":null,"body":"pass_the_door_man(word) = (Int(match(r\"(\\w)\\1\", word).match[1]) - 96) * 3","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204958,"user_id":null,"body":"function pass_the_door_man(word)\n  alfabetvalues = [Int(letter) - Int('a') + 1 for letter in lowercase(word)]\n  3alfabetvalues[findfirst(isequal(0),diff(alfabetvalues))]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204959,"user_id":null,"body":"function pass_the_door_man(word)\n  for q in 1:length(word)\n    word[q] != word[q+1] ? continue : return 3*(Int(word[q])-96)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204960,"user_id":2525,"body":"function pass_the_door_man(word)\n    for (i, l) in enumerate(word[1:end-1])\n        if l==word[i+1]\n            return  3*(Int(l)-96)\n        end\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204961,"user_id":1474,"body":"letters = \"abcdefghijklmnopqrstuvwxyz\"\n\nfunction find(m)\n  for (i, c) in enumerate(letters)\n    if c == m\n      return i\n    end\n  end\nend\n\nfunction pass_the_door_man(word)\n  m = match(r\"([a-z])\\1\", word)\n  find(m.match[1]) * 3\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204962,"user_id":null,"body":"function pass_the_door_man(word)\n  word[1] == word[2] ? 3(word[1] - '`') : pass_the_door_man(word[2:end])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204963,"user_id":null,"body":"function pass_the_door_man(word)\n  i = 1; while word[i]!=word[i+1] i+=1 end\n  3*findfirst(c->c==word[i], \"abcdefghijklmnopqrstuvwxyz\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204964,"user_id":null,"body":"function pass_the_door_man(word)\n  (match(r\"(.)\\1\",word)[1][1]-'a'+1)*3\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5cb05eee03c3ff002153d4ef":[{"id":204965,"user_id":881,"body":"get_section_id(scrolly, sizes) = something(findfirst(>(scrolly), cumsum(sizes)), 0) - 1","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204966,"user_id":null,"body":"function get_section_id(scrolly, sizes)\n  t=0\n  for (i,v) in enumerate(sizes)\n    t+=v\n    scrolly<t && return i-1\n  end\n  -1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204967,"user_id":480,"body":"function get_section_id(scrolly, sizes)\n  cs=cumsum(sizes)\n  if length(sizes)==0\n    return 0\n  end\n  if scrolly>=cs[end]\n    return -1\n  end\n  first(i for i in 1:lastindex(cs) if cs[i]>scrolly)-1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204968,"user_id":null,"body":"function get_section_id(scrolly, sizes)\n    scrolly < sum(sizes) ? findfirst(x-> scrolly < x, cumsum(sizes)) - 1 : -1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204969,"user_id":null,"body":"function get_section_id(scrolly, sizes)\n  n = 1\n  \n  while n <= length(sizes) && scrolly >= sum(sizes[1:n])\n    n += 1\n  end\n  \n  if n > length(sizes)\n    return -1\n  else\n    return n-1\n  end\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204970,"user_id":2525,"body":"function get_section_id(scrolly, sizes)\n    for (i, (c, s)) in enumerate(zip(cumsum(sizes), sizes))\n        if c-s \u2264 scrolly < c\n            return i-1\n        end\n    end\n  \n    return -1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204971,"user_id":null,"body":"function get_section_id(scrolly, sizes)\n  for (index, size) in enumerate(sizes)\n    scrolly -= size\n    if scrolly < 0\n      return index - 1\n    end\n  end\n  -1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204972,"user_id":1474,"body":"function get_section_id(scrolly, sizes)\n  ret = []\n  cnt = 0\n  for i in sizes\n    push!(ret, [cnt, cnt + i - 1])\n    cnt += i\n  end\n  for (i, a) in enumerate(ret)\n    if a[1] \u2264 scrolly \u2264 a[2]\n      return i - 1\n    end\n  end\n  -1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204973,"user_id":null,"body":"function get_section_id(scrolly, sizes)\n  findfirst(x->x>scrolly, [sum(sizes[1:i]) for i in 1:length(sizes)]) |> n -> n == nothing ? -1 : n-1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204974,"user_id":645,"body":"get_section_id(n, a) = (x = findfirst(x -> (n -= x) < 0, a)) == nothing ? -1 : x - 1","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5cd4aec6abc7260028dcd942":[{"id":204975,"user_id":527,"body":"function shortest_steps_to_num(num)\n  num == 1 ? 0 : 1 + (num & 1) + shortest_steps_to_num(num >> 1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204976,"user_id":null,"body":"function shortest_steps_to_num(num)\n  steps = 0\n  \n  while num != 1\n    if num % 2 == 0\n      num \/= 2\n    else\n      num -= 1\n    end\n    steps += 1\n  end\n  \n  return steps\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204977,"user_id":168,"body":"function shortest_steps_to_num(num)\n  r = 0\n  while num > 1\n    r += (num % 2) + 1\n    num \u00f7= 2\n  end\n  return r\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204978,"user_id":480,"body":"function shortest_steps_to_num(num)\n  steps=0\n  n=num\n  while n!=1\n    if (n & 1)==1\n      n-=1\n    else\n      n>>=1\n    end\n    steps+=1\n  end\n  steps\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204979,"user_id":null,"body":"shortest_steps_to_num(num::Integer) = count_ones(num)-leading_zeros(num)+8*sizeof(num)-2","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204980,"user_id":null,"body":"function shortest_steps_to_num(num)\n  steps = 0\n  while num != 1\n    if num % 2 == 0\n      num \/= 2\n      steps += 1\n    else\n      num -= 1\n      steps += 1\n    end\n  end  \n  return steps\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204981,"user_id":null,"body":"function shortest_steps_to_num(num, set = Set(1), depth = 0)\n    num \u2208 set ? depth : shortest_steps_to_num(num, union!(set.+1, set.*2), depth+1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204982,"user_id":null,"body":"function shortest_steps_to_num(num, set = Set(1), depth = 0)\n    num \u2208 set && return depth\n    return shortest_steps_to_num(num, union!(set.+1, set.*2), depth+1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204983,"user_id":492,"body":"function shortest_steps_to_num(num)\n  if (num < 3) return num - 1 end\n  if (num % 2 == 0)\n    return 1 + shortest_steps_to_num(num\/2)\n  end\n  return 1 + shortest_steps_to_num(num -1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204984,"user_id":53,"body":"function shortest_steps_to_num(n)\n  n<=1 ? 0 : 1 + (n%2==1 ? shortest_steps_to_num(n-1) : shortest_steps_to_num(n\u00f72))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5cde4e3f52910d00130dc92c":[{"id":204985,"user_id":null,"body":"function men_still_standing(cards)\n  players = ones(Float64, 2,11)\n  for card in cards\n    team = (card[1] == 'B') + 1\n    color = (card[end] == 'R') * 0.5 + 0.5\n    player = parse(Int64, card[2:end-1])\n    players[team, player] = maximum([0.0, players[team,player] - color])\n    if sumplayers(players) |> x -> x[1] < 7 || x[2] < 7\n      break\n    end\n  end\n  return sumplayers(players)\nend\n\nfunction sumplayers(players)\n  ceil.(players) |> x -> [sum(x[1,:]), sum(x[2,:])]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204986,"user_id":480,"body":"function men_still_standing(cards)\n  pl=Dict([('A', [2,2,2,2,2,2,2,2,2,2,2]), ('B', [2,2,2,2,2,2,2,2,2,2,2])])\n  nb=team->count(x>0 for x in pl[team])\n  for c in cards\n    team=c[1]\n    penalty=c[end]=='R' ? 2 : 1\n    player=parse(Int,c[2:end-1])\n    # println(c,\" team:\",team,\" player:\",player,\" penalty:\",penalty)\n    pl[team][player]-=penalty\n    if nb(team) < 7 \n      break\n    end\n  end\n  [nb('A'),nb('B')]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204987,"user_id":null,"body":"function men_still_standing(cards)\n    A, B = Dict(), Dict()\n    for i in cards\n        team = i[1] == 'A' ? A : B\n        card = i[end] == 'Y' ? 1 : 2\n        get(team, i[2:end-1], 0) == 0 ? (team[i[2:end-1]] = card) : (team[i[2:end-1]] += card)\n        count(x-> x > 1, values(team)) == 5 && break\n    end\n    11 .- [count(x-> x > 1, values(A)), count(x-> x > 1, values(B))]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204988,"user_id":null,"body":"function men_still_standing(cards)\n    teams = Dict(\n        'A' => Dict(string.(1:11) .=> false),\n        'B' => Dict(string.(1:11) .=> false),\n    )\n    counts = Dict('A' => 11, 'B' => 11)\n    for card in cards\n        team = first(card)\n        player = chop(card; head = 1, tail = 1)\n        color = last(card)\n        if player \u2208 keys(teams[team])\n            if teams[team][player] || color == 'R'\n                delete!(teams[team], player)\n                counts[team] -= 1\n                any(values(counts) .< 7) && break\n            else\n                teams[team][player] = true\n            end\n        end\n    end\n    return [counts['A'], counts['B']]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204989,"user_id":2525,"body":"function men_still_standing(cards)\n    P = Dict( 'A' => zeros(11), 'B' => zeros(11) )\n    for c in cards\n        if c[end] == 'Y'\n            P[c[1]][parse(Int, c[2:end-1])] += 1\n        elseif c[end] == 'R'\n            P[c[1]][parse(Int, c[2:end-1])] += 2\n        end\n    end\n      \n    [count(x->x<2, P['A']), count(x->x<2, P['B'])]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204990,"user_id":null,"body":"function men_still_standing(cards)\n  teams = [11, 11]\n  \n  if cards == Int64[]\n    return teams\n  end\n  \n  team_AY = Dict(if 'A' in card card[1:end] end => if 'Y' in card count(x->x==card, cards) else 0 end for card in Set(cards) )\n  team_AR = [ if 'A' in card && 'R' in card 1 else 0 end for card in Set(cards) ]\n  \n  team_BY = Dict(if 'B' in card card[2:end] end => if 'B' in card count(x->x==card, cards) else 0 end for card in Set(cards) )\n  team_BR = [ if 'B' in card && 'R' in card 1 else 0 end for card in Set(cards)]\n  \n  println( values(team_AY)) \n  \n  for v in values(team_AY)\n    if v >= 2 \n      teams[1] -= 1\n    end\n  end\n  \n  for v in values(team_BY)\n    if v >= 2 \n      teams[2] -= 1\n    end\n  end\n  \n  \n  teams[1] -= sum(team_AR)\n  teams[2] -= sum(team_BR)\n  \n  \n  \n  return teams\n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204991,"user_id":null,"body":"function men_still_standing(cards)\n  newTeam() = Dict(map(x -> string(x) => [0, 0], 1:11))\n  remainingPlayers(team) = length(filter(x -> team[x][1] < 2 && team[x][2] < 1, keys(team)))\n  a = newTeam()\n  b = newTeam()\n  for card in cards\n    team, player, color = match(r\"(\\D)(\\d+)(\\D)\", card).captures\n    team = team == \"A\" ? a : b\n    player = team[player]\n    color == \"Y\" ? player[1] += 1 : player[2] += 1\n  end\n  [remainingPlayers(a), remainingPlayers(b)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204992,"user_id":null,"body":"function men_still_standing(cards)\n  players = Dict()\n  colors = Dict('Y' => 1, 'R' => 2)\n  team_a_lost = 0\n  team_b_lost = 0\n  for card in cards\n    if !(card[1:end - 1] in keys(players))\n      players[card[1:end - 1]] = 0\n    end\n    players[card[1:end - 1]] += colors[card[end]]\n    if card[1] == 'A' && players[card[1:end - 1]] in (2, 3)\n      team_a_lost += 1\n      players[card[1:end - 1]] += 1\n    elseif card[1] == 'B' && players[card[1:end - 1]] in (2, 3)\n      team_b_lost += 1\n      players[card[1:end - 1]] += 1\n    end\n    if team_a_lost == 5 || team_b_lost == 5\n      break\n    end\n  end\n  [11 - team_a_lost, 11 - team_b_lost]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204993,"user_id":881,"body":"function men_still_standing(cards)\n  teams = Dict('A' => [2 for _ in 1:11], 'B' => [2 for _ in 1:11])\n  playersinteam(t) = length(filter(x -> x > 0, teams[t]))\n  for code in cards\n    team = code[1]\n    damage = code[end] === 'Y' ? 1 : 2\n    player = parse(Int, code[2:end - 1])\n    teams[team][player] -= damage\n    if playersinteam(team) < 7\n      break\n    end\n  end\n  return map(playersinteam, ['A', 'B'])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"}],"5ce399e0047a45001c853c2b":[{"id":204994,"user_id":null,"body":"function parts_sums(ls)\n  [reverse(cumsum(reverse(ls))); [0]]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204995,"user_id":null,"body":"function parts_sums(ls)\n  L = length(ls)\n  sm = Array{Float64, 1}(undef, L + 1)\n  i = 0.0\n  for i in 1:L\n    sm[i] = sum(ls[i:end])\n  end\n  sm[end] = 0\n  return sm\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204996,"user_id":null,"body":"function parts_sums(ls)\n  if isempty(ls)\n    current = 0\n  else\n    current = sum(ls)\n  end\n  \n  sumlist = [0 for i in 1:length(ls) + 1]\n  sumlist[1] = current\n  for index in 1:length(ls)\n    current -= ls[index]\n    sumlist[index + 1] = current\n  end\n  \n  return sumlist\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204997,"user_id":null,"body":"function parts_sums(ls)\n    retVal = fill(0,length(ls)+1)\n    retVal[length(ls)+1] = 0\n    for i \u2208 (length(ls)):-1:1\n        println(ls[i])\n        retVal[i] = retVal[i+1] + ls[i]\n    end\n    return retVal\n  end","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204998,"user_id":null,"body":"function parts_sums(ls)\n  if length(ls) == 0\n    return [0]\n  end\n  summe = sum(ls)\n  cat([summe], parts_sums(ls[2:end]), dims=1)\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":204999,"user_id":null,"body":"function parts_sums(ls)\n  output = Vector{Int64}(undef, length(ls)+1)\n  push!(ls, 0)\n  for i in 1:length(ls)\n        output[i] = sum(ls)\n        popfirst!(ls) \n  end\n  return output\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":205000,"user_id":null,"body":"function parts_sums(ls)\n  isempty(ls) && return [0]\n  out = Vector{Int64}(undef, length(ls) + 1)\n  for i in 1:length(ls)\n    out[i] = sum(ls[i:end])\n  end\n  out[end] = 0\n  out\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:17","updated_at":"2023-01-14 13:24:17"},{"id":205001,"user_id":null,"body":"function parts_sums(ls)\n  result = []\n  for i in range(1, length=length(ls))\n    x = sum(ls[i:end])\n    append!(result, x)\n  end\n  append!(result, 0)\n  return result\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205002,"user_id":null,"body":"function parts_sums(ls)\n    append!(map(sum, [ls[i:end] for (i, _) in enumerate(ls)]), [0])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205003,"user_id":null,"body":"function parts_sums(ls)\n    isempty(ls) ? [0] : [sum(ls[i:end]) for i in 1:length(ls)+1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5ce9c1000bab0b001134f5af":[{"id":205004,"user_id":421,"body":"quarter_of(month) = ceil(month \/ 3)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205005,"user_id":null,"body":"quarter_of(month) = [1,1,1,2,2,2,3,3,3,4,4,4][month]","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205006,"user_id":527,"body":"quarter_of(month) = (month + 2) \u00f7 3","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205007,"user_id":null,"body":"function quarter_of(month)\n  #your code here\n  if (1<=month<=3)\n    1\n  elseif (1<month<=6)\n    2\n   elseif (6<month<=9)\n    3\n   else\n    4\n   end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205008,"user_id":null,"body":"function quarter_of(month)\n  month <= 3 ? 1 : (month <= 6 ? 2 : (month <= 9 ? 3 : 4))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205009,"user_id":null,"body":"function quarter_of(month)\n  if month<=3\n    return 1\n    elseif month<=6\n    return 2\n    elseif month<=9\n    return 3\n    else month<=12\n    return 4\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205010,"user_id":null,"body":"quarter_of(month) = (month - 1)\u00f73 + 1 ","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205011,"user_id":null,"body":"function quarter_of(mnth)\n#  return ceil(mnth \/ 3)\n  return [1,1,1,2,2,2,3,3,3,4,4,4][mnth]\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205012,"user_id":null,"body":"function quarter_of(month)\n  return ceil(month\/3.)\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205013,"user_id":null,"body":"function quarter_of(month)\n  if month < 4\n    return 1\n  end\n  return quarter_of(month - 3) + 1\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5d2659626c7aec0022cb8006":[{"id":205014,"user_id":null,"body":"baumsweet() = (all(iseven\u2218length, [iszero(n) ? \"\" : m.match for m in eachmatch(r\"0+\", string(n, base=2))]) for n in Iterators.countfrom(0))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205015,"user_id":881,"body":"struct BaumSweet end\nBase.IteratorSize(::BaumSweet) = Base.IsInfinite()\n\nfunction Base.iterate(gen::BaumSweet, (queue, state) = ([1, 1, 0, 1], nothing))\n    if isempty(queue)\n        if isnothing(state)\n            _, state = iterate(gen)\n            _, state = iterate(gen, state)\n        end\n        a, state = iterate(gen, state)\n        b, state = iterate(gen, state)\n        push!(queue, b, a, 0, b)\n    end\n    popfirst!(queue), (queue, state)\nend\n\nbaumsweet = BaumSweet\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5d2d0d34bceae80027bffddb":[{"id":205016,"user_id":881,"body":"function sort_strings_by_vowels(strings)\n    sort(strings, by=str->maximum(length(m.match) for m in eachmatch(r\"[AEIOUaieou]*\", str)), rev=true)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205017,"user_id":null,"body":"function sort_strings_by_vowels(strings)\n    [s[3] for s in sort([(isempty(eachmatch(r\"[aeiou]+\", lowercase(str))) ? 0 : -maximum([length(vowels.match) for vowels in eachmatch(r\"[aeiou]+\", lowercase(str))]), i, str) for (i, str) in enumerate(strings)])]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205018,"user_id":null,"body":"function longestvowels(str::String)::Int\n  lens = findall(r\"[aeiouAEIOU]+\", str) .|> length\n  isempty(lens) ? 0 : maximum(lens)\nend\n\nfunction sort_strings_by_vowels(strings)\n  sort(strings; by = longestvowels, rev = true)\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5d376cdc9bcee7001fcb84c0":[{"id":205019,"user_id":null,"body":"function odd_ones_out(nums)\n  [elem for elem in nums if count(==(elem), nums)%2 == 0]\nend\n\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205020,"user_id":null,"body":"function odd_ones_out(nums)\n  filter(x -> iseven(count(i -> i==x, nums)), nums)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205021,"user_id":null,"body":"function odd_ones_out(nums)\n    filter(n-> iseven(count(==(n), nums)), nums)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205022,"user_id":168,"body":"function odd_ones_out(nums)\n  [x for x = nums if count(y -> y == x, nums) % 2 == 0]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205023,"user_id":2525,"body":"function odd_ones_out(nums)\n    cnts = Dict()\n    for n in nums\n        if n in keys(cnts)\n            cnts[n] += 1\n        else\n            cnts[n] = 1\n        end\n    end\n    \n    [n for n in nums if cnts[n]%2==0]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205024,"user_id":421,"body":"function odd_ones_out(nums)\n  [x for x in nums if iseven(count(y->y == x, nums))]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205025,"user_id":881,"body":"function odd_ones_out(nums)\n    counts = Dict(n=>count(==(n), nums) for n in nums)\n    filter(x -> iseven(counts[x]), nums)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205026,"user_id":1474,"body":"function odd_ones_out(nums)\n  [i for i in nums if iseven(count(j->i==j, nums))]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205027,"user_id":null,"body":"function odd_ones_out(nums)\n  filter(x->iseven(count(y->y==x, nums)), nums)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205028,"user_id":null,"body":"function odd_ones_out(nums)\n  u= unique(nums)\n  for i=1:length(u)\n    c = count(nums.==u[i])\n    if isodd(c)\n      filter!(x -> x != u[i], nums)  \n    end\n  end\n  nums\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5d49c93d089c6e000ff8428c":[{"id":205029,"user_id":2525,"body":"function save(sizes, hd)\n    count(x->x\u2264hd, cumsum(sizes))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205030,"user_id":759,"body":"save(sizes, hd) = foldl(((x,y),z) -> (z + y > hd ? x : x + 1, z + y), sizes, init=(0,0))[1]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205031,"user_id":null,"body":"function save(sizes, hd)\n  total_size = 0\n  for (i,v) in enumerate(sizes)\n    total_size += v\n    total_size == hd && return i\n    total_size > hd && return i-1\n  end\n  length(sizes)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205032,"user_id":null,"body":"function save(sizes, hd)\n    cs = cumsum(sizes)\n    id = findlast(x->x\u2264hd,cs)\n    if isnothing(id)\n      return 0\n    else\n      return id\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205033,"user_id":null,"body":"function save(sizes, hd)\n    sum(sizes) \u2264 hd ? length(sizes) : findfirst(>(hd), cumsum(sizes))-1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205034,"user_id":null,"body":"function save(sizes, hd)\n  for q in 1:length(sizes)\n    if sum(sizes[1:q]) > hd\n      return q-1\n    elseif sum(sizes[1:q]) == hd\n      return q\n    end\n  end\n  length(sizes)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205035,"user_id":50,"body":"function save(sizes, hd)\n  sum=0\n  j=0\n  for n in sizes\n    sum=sum+n\n    if sum>hd\n      break\n    end\n    j=j+1\n  end\n  return j\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205036,"user_id":168,"body":"function save(sizes, hd)\n  s = 0\n  for i in 1:length(sizes)\n    s += sizes[i]\n    if s > hd return i - 1 end\n  end\n  return length(sizes)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205037,"user_id":1474,"body":"function save(sizes, hd)\n  cnt = 0\n  for (i, e) in enumerate(sizes)\n    cnt += e\n    if cnt > hd\n      return i - 1\n    end\n  end\n  length(sizes)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205038,"user_id":null,"body":"function save(sizes, hd)\n  findfirst(x->x>hd, [sum(sizes[1:i]) for i in 1:length(sizes)]) |> x-> x == nothing ? length(sizes) : x-1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5d50e3914861a500121e1958":[{"id":205039,"user_id":50,"body":"function add_letters(letters...)\n  o=0\n  for c in letters\n    o+=Int(c)-96\n  end\n  o=(o%26)+96\n  return o == 96 ? 'z' : Char(o)\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205040,"user_id":168,"body":"function add_letters(letters...)\n  isempty(letters) ? 'z' : Char((25 + sum(map(Int, letters)) - length(letters) * 96) % 26 + 97)\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205041,"user_id":null,"body":"function add_letters(letters...)\n  if length(letters) == 0\n    return 'z'\n  end\n  \n  sum = 0\n  for c in letters\n    sum += (Int(c) - 96)\n  end\n  while sum > 26\n    sum -= 26\n  end\n  return Char(sum + 96)\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205042,"user_id":null,"body":"function add_letters(letters...)\n    if length(letters) == 0\n        'z'\n    else\n        c = mod(sum(map(x -> Int(x) - 96, letters)), 26);\n        c == 0 ? 'z' : Char(c + 96)\n    end\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205043,"user_id":null,"body":"function add_letters(letters...)\n    summer = reduce(+, Int.(letters) .- 96, init=0) % 26 + 96\n    summer == 96 ? 'z' : Char(summer)\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205044,"user_id":null,"body":"function add_letters(letters...)\n  if length(letters) == 0\n    return 'z'\n  else\n  \n  dict = Dict(elem => pos for (pos, elem) \u2208 enumerate('a':'z'))\n  dict2 = Dict(pos => elem for (pos, elem) \u2208 enumerate('a':'z'))\n  \n  s = sum(map(x->dict[x],letters))\n  \n  dict2[s % 26 == 0 ? 26 : s % 26 ]\n    \n  end\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205045,"user_id":null,"body":"function add_letters(letters...)\n  isempty(letters) ? 'z' : Char(mod1(sum(map(letter -> Int(letter) - 96, letters)), 26) + 96)\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205046,"user_id":2525,"body":"function add_letters(letters...)\n    if length(letters)==0\n        return 'z'\n    end\n    Char((sum(Int(l)-97 for l in letters)+length(letters)-1)%26 + 97)\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205047,"user_id":1474,"body":"function add_letters(letters...)\n  length(letters) == 0 ? 'z' : Char((sum(map(c->Int(c) - 96, letters)) - 1) % 26 + 97)\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205048,"user_id":null,"body":"function add_letters(letters...)\n  isempty(letters) && return 'z'\n  sum(letters .- '`')%26 |> x -> x == 0 ? 'z' : x + '`'\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5d59576768ba810001f1f8d6":[{"id":205049,"user_id":527,"body":"quadratic(x1, x2) = (1, -(x1 + x2), x1 * x2)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205050,"user_id":881,"body":"quadratic(x1, x2) = (1, -x1-x2, x1*x2)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205051,"user_id":50,"body":"function quadratic(x1, x2)\n  (1, -(x2+x1), x1*x2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205052,"user_id":1474,"body":"function quadratic(x1, x2)\n  (1, -x1 + -x2, -x1 * -x2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205053,"user_id":null,"body":"function quadratic(x1, x2)\n  (1, -x1-x2, x1*x2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205054,"user_id":null,"body":"function quadratic(x1, x2)\n  \n    s = x1+x2\n    \n    p = x1*x2\n    \n    a = 1\n    \n    b = -(s*a)\n    \n    c = (p*a)\n    \n    return a,b,c\n  \n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205055,"user_id":null,"body":"function quadratic(x1, x2)\n    return (1, -(x1+x2), x1*x2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205056,"user_id":612,"body":"function quadratic(x1, x2)\n   return (1 , -1*(x1+x2), x1*x2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205057,"user_id":null,"body":"function quadratic(x1, x2)\n  return (1,(-x1-x2),x1*x2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205058,"user_id":null,"body":"function quadratic(x1, x2)\n  a, b, c = 1, -x1-x2, x1*x2\n  return (a, b, c)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5d6ee508aa004c0019723c1c":[{"id":205059,"user_id":480,"body":"function oddest(a0::Array{Int})\n  a=a0\n  f0(x)= x&1==0 ? 0 : (x&1)+oddity((x>>1)&0x7fffffff)\n  oddity(x)=f0(x)\n  if 1>length(a)\n    return nothing\n  end\n  if 1 == length(a)\n    return a[1]\n  end\n  b=map(x->[x,oddity(x)],a)\n  bmax=reduce((acc,x)->x[2]>acc[2] ? x : acc, b )\n  c=filter(x->x[2]==bmax[2],b)\n  return length(c)>1 ? nothing : c[1][1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205060,"user_id":null,"body":"function oddest(a::Array{Int})\n    length(a) == 1 && return a[1]\n    odds = [n for n in a if isodd(n)]\n    (length(odds) == 0 || count(==(-1), odds) > 1) && return nothing\n    x = oddest((odds .- 1) .\u00f7 2)\n    x == nothing ? nothing : 2x + 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205061,"user_id":2525,"body":"function oddest(a::Array{Int})\n    if length(a) == 1\n        return a[1]\n    elseif length(a) == 0\n        return nothing\n    elseif count(x->x==-1, a)==1\n        return -1\n    elseif count(x->x==-1, a)>1\n        return nothing\n    end\n  \n    oddity = [((num-1)\u00f72, idx) for (idx, num) in enumerate(a) if isodd(num)]\n  \n    while length(oddity)>1\n        oddity = [((num-1)\u00f72, idx) for (num, idx) in oddity if isodd(num)]    \n    end\n\n    if length(oddity) == 1\n        a[oddity[1][2]]\n    elseif length(oddity) == 0\n        nothing\n    end\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205062,"user_id":null,"body":"function oddest(a::Array{Int})\n  \n  function howodd(i)\n    bi = bitstring(abs(i))\n    res = 0\n    for jj in length(bi):-1:1\n      j = bi[jj]\n      if j == '0'\n        return res\n      else \n        res += 1\n      end\n    end\n    return res\n  end\n\n  if length(a) == 0\n    return nothing\n  end\n  how = -1\n  who = a[1]\n  noth = false\n  for ii in a\n    i = (ii >= 0 ? ii : abs(ii + 2))\n    if ii == -1\n      res = 5.5\n    else\n      res = howodd(i)\n    end\n    if res > how\n      how = res\n      who = ii\n      noth = false\n    elseif res==how\n      noth = true\n    end\n  end \n  if noth\n    return nothing\n  else\n    return who\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205063,"user_id":759,"body":"function oddlevel(x::Int)\n  x == -1 && return typemax(Int)\n  result = 0\n  while Bool(x & 1)\n    result += 1\n    x >>= 1\n  end\n  result\nend\n\nfunction oddest(a::Array{Int})\n  length(a) == 0 && return nothing\n  length(a) == 1 && return a[1]\n  \n  m = oddlevel(a[1])\n  winner = a[1]\n  mhasequal = false\n  for i in 2:length(a)\n    num = a[i]\n    level = oddlevel(num)\n    if m == level\n      mhasequal = true\n    elseif m < level\n      winner = num\n      m = level\n      mhasequal = false\n    end\n  end\n  mhasequal ? nothing : winner\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205064,"user_id":null,"body":"function oddest(a::Array{Int})\n  #oddness = right-hand chain of 1s in binary\n  #or alternatively highest power of 2 dividing x + 1\n  if length(a) == 0\n    return(nothing)\n  end\n  function oddness(n::Int)\n    if n % 2 == 0\n      return 0\n    elseif n == -1\n      return(Inf)\n    elseif n < 0\n      return(oddness(n + 2^(trunc(Int, log(2, (-4 * n))))))\n    else\n      nplusone = n + 1\n      return(maximum([i for i in 1:trunc(Int,log(2,nplusone)) if nplusone % 2^i == 0])) \n    end\n  end\n  oddnesses = [oddness(n) for n in a]\n  max_oddness = maximum(oddnesses)\n  max_indices = [i for i in 1:length(a) if oddnesses[i] == max_oddness]\n  if length(max_indices) > 1\n    return(nothing)\n  else\n    return(a[max_indices[1]])\n  end\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205065,"user_id":645,"body":"function oddest(a::Array{Int})\n  if length(a) == 0; nothing\n  elseif length(a) == 1; a[1]\n  elseif all(a .== -1); nothing\n  else\n    odds = filter(isodd, a)\n    evens = filter(iseven, a)\n    if length(odds) == 0; nothing\n    elseif length(evens) == 0\n      r = oddest(a .>> 1)\n      r == nothing ? nothing : r * 2 + 1\n    else oddest(odds) end\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5d9f95424a336600278a9632":[{"id":205066,"user_id":759,"body":"function powers(n::Integer)\n  i = 0\n  arr = []\n  while n >> i != 0\n    if n & (1 << i) != 0\n      push!(arr, reinterpret(UInt64, 1 << i))\n    end\n    i += 1\n  end\n  arr\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205067,"user_id":null,"body":"powers(n::Integer) = BigInt(1) .<< filter(i-> isone(n >> i & 1), 0:floor(Int, log2(n)))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205068,"user_id":2525,"body":"function powers(n::Integer)\n    [2^(i-1) for (i, d) in enumerate(digits(n, base=2)) if d==1]\nend\n# Because at least one test uses UInt instead of Integer we need the second version\nfunction powers(n::UInt64)\n    [UInt64(2)^(i-1) for (i, d) in enumerate(digits(n, base=2)) if d==1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205069,"user_id":1474,"body":"function powers(n::Integer)\n  [BigInt(2) ^ (i-1) for (i, c) in enumerate(reverse(string(n, base=2))) if c == '1']\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205070,"user_id":null,"body":"function powers(n::Integer)\n  reverse(bitstring(n)) |> s -> [2^(BigInt(i)-1) for i in 1:length(s) if s[i]=='1']\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205071,"user_id":null,"body":"function powers(n::Integer)\n  result = []\n  for x::BigInt = 64:-1:0\n    if n \u2265 2^x\n      push!(result, 2^x)\n      n -= 2^x\n    end\n  end\n  reverse(result)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205072,"user_id":null,"body":"function powers(n::Integer)\n  [2^(big(i)-1) for (i,v) in enumerate(reverse(string(n, base=2))) if v == '1']\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205073,"user_id":881,"body":"function powers(n::Integer)\n  x = one(n)\n  r::Array{typeof(x)} = []\n  while n >= x && x != 0\n    if n & x != 0\n      push!(r, x)\n    end\n    x <<= 1\n  end\n  r\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5da995d583326300293ce4cb":[{"id":205074,"user_id":null,"body":"mapvector(v, c1, c2) = c2[end]\/c1[end] * (v - c1[1:2]) + c2[1:2]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205075,"user_id":2525,"body":"function mapvector(vector, circle1, circle2)\n    (vector .- circle1[1:end-1]).* circle2[end]\/circle1[end] .+ circle2[1:end-1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205076,"user_id":null,"body":"function mapvector(vector, circle1, circle2)\n  (circle2[3]\/circle1[3]).*(vector - circle1[1:2]) + circle2[1:2]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205077,"user_id":759,"body":"function mapvector(vector, circle1, circle2)\n  relative = circle1[1:2] - vector\n  scaled = relative .* (circle2[3] \/ circle1[3])\n  circle2[1:2] - scaled\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205078,"user_id":527,"body":"function mapvector((x, y), (x1, y1, r1), (x2, y2, r2))\n  k = r2 \/ r1\n  [x2 + k * (x - x1), y2 + k * (y - y1)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205079,"user_id":881,"body":"mapvector(v, c1, c2) = [(v[i] - c1[i]) * c2[3] \/ c1[3] + c2[i] for i in 1:2]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5da9af1142d7910001815d32":[{"id":205080,"user_id":759,"body":"function get_score(arr)\n  s = 0\n  cleared = 0\n  for c in arr\n    s += (cleared \u00f7 10 + 1) * [0, 40, 100, 300, 1200][c + 1]\n    cleared += c\n  end\n  s\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205081,"user_id":null,"body":"function get_score(arr)\n  level,score,total=1,0,0\n  points = [40,100,300,1200]\n  for v in arr\n    v==0 && continue\n    total>=10 && (total = total%10;level += 1)\n    score += points[v]level\n    total += v\n  end\n  score\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205082,"user_id":null,"body":"function get_score(arr)\n  level,score,total=1,0,0\n  for v in arr\n    total>=10 && (total = total%10;level += 1)\n    v == 1 && (score += 40level)\n    v == 2 && (score += 100level)\n    v == 3 && (score += 300level)\n    v == 4 && (score += 1200level)\n    v == 0 && continue\n    total += v\n  end\n  score\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205083,"user_id":null,"body":"points = [0,40,100,300,1200]\nfunction get_score(arr)\n  ret = 0\n  counter = 10\n  for value in arr\n    ret += div(counter, 10) * points[value+1]\n    counter += value;\n  end\n  return ret\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205084,"user_id":null,"body":"function get_score(arr)\n    ScoreDict = Dict{Int64, Int64}(0=>0, 1=>40, 2=>100, 3=>300, 4=>1200)\n    line = 0\n    total = 0\n    for lines in arr\n        total += ScoreDict[lines]*(floor(Int64, line\/10)+1)\n        line += lines\n    end\n    return total\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205085,"user_id":480,"body":"function get_score(arr)\n  score=0\n  cl=0\n  m()=1+div(cl,10)\n  pts0=Dict(0=>0,1=>40,2=>100,3=>300,4=>1200)\n  for x in arr\n    score+=pts0[x]*m()\n    cl+=x\n  end\n  score\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205086,"user_id":null,"body":"get_score(arr) = reduce(+, [Dict(zip(0:4, [0,40,100,300,1200]))[arr[i]]*(level+1) for (i,level) in enumerate(cumsum([0;arr])[1:end-1] .\u00f7 10)], init=0)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205087,"user_id":2525,"body":"function get_score(arr)\n    p = [0, 40, 100, 300, 1200]\n    level = 1\n    score = 0\n    lines = 0\n    for cl in arr\n        score += p[cl+1]*level\n        if (lines + cl)%10 < lines%10\n            level += 1\n        end\n        lines += cl\n    end\n    score\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205088,"user_id":null,"body":"function get_score(arr)\n  l=1\n  s=0\n  t=0\n  point =[40,100,300,1200] #level 0\n  \n  for x in arr\n    x==0 && continue\n    t>=10 && (t = t %10;\n                  l+=1)\n    \n    s += point[x]l\n    t+= x\n  end \n  s\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205089,"user_id":1474,"body":"base_scores = [40, 100, 300, 1200]\n\nfunction get_score(arr)\n  level = 0\n  cnt = 0\n  score = 0\n  for lines in arr\n    if lines > 0\n      score += base_scores[lines] * (level + 1)\n      cnt += lines\n      if cnt \u00f7 10 > level\n        level += 1\n      end\n    end\n  end\n  score\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5db8a241b8d7260011746407":[{"id":205090,"user_id":881,"body":"function tetris(blocks)\n  cleared = 0\n  columns = zeros(Int, 9)\n  for b in blocks\n    i = parse(Int, b[3])\n    if (b[2] == 'L') i *= -1 end\n    columns[i + 5] += parse(Int, b[1])\n    mini, maxi = extrema(columns)\n    if maxi >= 30 break end\n    if mini > 0\n      cleared += mini\n      columns .-= mini\n    end\n  end\n  cleared\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205091,"user_id":null,"body":"function tetris(gamelog)\n  loc_dic = Dict{String, Int64}(\"L4\" => 1, \"L3\" => 2, \"L2\" => 3, \"L1\" => 4, \"L0\" => 5, \"R0\" => 5, \"R1\" => 6, \"R2\" => 7, \"R3\" => 8, \"R4\" =>9)\n  heights = zeros(Int64, 9)\n  cleaned = 0\n  for gamestep in gamelog\n    blockheight = parse(Int64, gamestep[1])\n    location = loc_dic[gamestep[2:3]]\n    heights[location] += blockheight\n    # exceeded?\n    if maximum(heights) > 29\n      break\n    end\n    # clean lines\n    cleanedstep = minimum(heights)\n    cleaned += cleanedstep\n    heights = heights .- cleanedstep\n  end\n  return cleaned\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205092,"user_id":null,"body":"function tetris(gamelog)\n    indx = Dict(zip([\"L4\",\"L3\",\"L2\",\"L1\",\"L0\",\"R1\",\"R2\",\"R3\",\"R4\"], 1:9))\n    gamefield, score = zeros(Int, 9), 0\n    for command in gamelog\n        gamefield[get(indx, command[2:end], 5)] += parse(Int, command[1])\n        maximum(gamefield) > 29 && break\n        score += minimum(gamefield)\n        gamefield .-= minimum(gamefield)\n    end\n    score\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205093,"user_id":2525,"body":"function tetris(gamelog)\n    game = zeros(9)\n    lines = 0\n    for brick in gamelog\n        h = parse(Int, brick[1])\n        mov = parse(Int, brick[3])\n        pos = if brick[2]=='L'; 5-mov else 5+mov end\n            \n        game[pos] += h\n        m = minimum(game)\n        if maximum(game) \u2265 30\n            return lines\n        elseif m > 0\n            lines += m\n            game .-= m\n        end\n    end\n    lines\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205094,"user_id":null,"body":"# blocks are only vertical strips --> there can be no \"holes\"\n# --> game can be described by height of bricks in some position\n# \n# total_height of bricks suffices: \n#   cleared_lines = min(total_heights)\n#   filled, when max(total_heights) - min(total_heights) >= maxheight\n\n\nfunction tetris(gamelog)\n  TetrisField = GameField(9,30)\n  play(TetrisField,gamelog)\n  return cleared_lines(TetrisField)\nend\n\nstruct GameField\n  bricks::Array{Int}\n  max_height::Int\nend\nGameField(width,height) = GameField(zeros(Int,width),height)\ncleared_lines(field::GameField) = minimum(field.bricks)\nis_filled(f::GameField) = maximum(f.bricks)-minimum(f.bricks) >= f.max_height\nfunction deposit_bricks(field::GameField, block_height, relative_position)\n  index = length(field.bricks)\u00f72+1+relative_position\n  field.bricks[index] += block_height\nend\n\nfunction play(field::GameField, log)\n  for move in log\n    !is_filled(field) ? add_block(field, move) : break\n  end\nend\n\nfunction add_block(field::GameField, move)\n  block_height, relative_position = parse_move(move)\n  deposit_bricks(field, block_height, relative_position)\nend\n\nfunction parse_move(log_move)\n  block_height = parse(Int,log_move[1:1])\n  offset = parse(Int,log_move[3:3])\n  return log_move[2]=='R' ? (block_height,offset) : (block_height,-offset)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205095,"user_id":null,"body":"function tetris(gamelog)\n  rows = 30\n  cols = 9\n  midCol = 5\n  grid = falses(rows, cols)\n  clearedLines = 0\n  for action in gamelog\n    block, dir, offset = split(action, \"\")\n    block = parse(Int, block)\n    col = midCol + (dir == \"R\" ? 1 : -1) * parse(Int, offset)\n    row = rows + 1\n    while row > 1 && grid[row - 1, col] == false # find lowest open row\n      row -= 1\n    end\n    row + block > rows && return clearedLines # no space for block\n    for i = row:row + block - 1 # fill block spaces\n      grid[i, col] = true\n    end\n    toClear = []\n    for row = 1:rows # find filled rows\n      if all(grid[row, 1:cols])\n        push!(toClear, row)\n      end\n    end\n    if length(toClear) > 0 # clear filled rows\n      grid = grid[setdiff(1:end, toClear), :]\n      clearedLines += length(toClear)\n      grid = vcat(grid, falses(length(toClear), cols))\n    end\n  end\n  clearedLines\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5df261342964c80028345a0a":[{"id":205096,"user_id":null,"body":"check_parity(parity, bin) = iseven(count(\"1\", bin) + (parity == \"even\" ? 0 : 1)) ? 0 : 1","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205097,"user_id":null,"body":"function check_parity(parity, bin)\n  isOdd = parity == \"odd\" ? 1 : 0\n  value = sum(map(x -> parse(Int, x), collect(bin)))\n  return (value & 1) \u22bb isOdd\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205098,"user_id":2525,"body":"function check_parity(parity, bin)\n    length(replace(bin, \"0\"=>\"\")*parity)%2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205099,"user_id":null,"body":"function check_parity(parity, bin)\n  (length(findall(q->q=='1',bin)) + (parity == \"even\" ? 0 : 1)) % 2 == 0 ? 0 : 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205100,"user_id":480,"body":"function check_parity(parity, bin)\n  ones=reduce((acc,c)->c=='1' ? acc+1 : acc,collect(bin); init=0)\n  xor(ones & 1, parity==\"odd\" ? 1 : 0)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205101,"user_id":null,"body":"function check_parity(parity, bin)\n    count = sum([1 for digit in bin if digit == '1'])\n    if parity == \"even\" && count % 2 == 1\n        return 1\n    elseif parity == \"odd\" && count % 2 == 0\n        return 1\n    end\n    return 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205102,"user_id":null,"body":"function check_parity(parity, bin)\n  p = parity == \"even\" ? iseven : isodd\n  n = count(isequal('1', s) for s in bin)\n  p(n) ? 0 : 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205103,"user_id":53,"body":"function check_parity(parity, bin)\n  l = length(filter(x -> (parse(Int64, x) % 2) == 1, split(bin, \"\")))\n  return xor((parity == \"even\"), ((l % 2) == 0)) ? 1 : 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205104,"user_id":572,"body":"function check_parity(parity, bin)\n  (sum([parse(Int, x) for x in bin]) + (parity == \"odd\" ? 1 : 0))%2\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205105,"user_id":1474,"body":"function check_parity(parity, bin)\n  cnt = count(c->(c == '1'), bin) % 2\n  (parity == \"even\" && cnt == 0) || (parity == \"odd\" && cnt == 1) ? 0 : 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5e0b72d2d772160011133654":[{"id":205106,"user_id":421,"body":"function solve(arr)\n  min(sum(arr) - maximum(arr), div(sum(arr), 2))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205107,"user_id":1392,"body":"function solve(arr)\n  sort!(arr)\n  \n  if arr[1] + arr[2] \u2265 arr[3]\n    return (arr[1] + arr[2] - arr[3]) \u00f7 2 + arr[3]\n  end\n  \n  return arr[1] + arr[2]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205108,"user_id":null,"body":"function solve(arr)\n    max(arr...) \u2264 sum(arr) \u00f7 2 ? sum(arr) \u00f7 2 : sum(arr) - max(arr...)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205109,"user_id":50,"body":"function solve(arr)\n  a,b,c,=arr\n  min(a+b,a+c,b+c,(a+b+c)>>1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205110,"user_id":2525,"body":"function solve(arr)\n    (a, b, c) = sort(arr)\n  \n    if a == 0\n        b\n    elseif a \u2264 c-b\n        a + b\n    else       \n        a + b - (1+a-(c-b))\u00f72\n    end\n  \nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205111,"user_id":53,"body":"function solve(xs)\n  sort!(xs)\n  a = xs[1]\n  b = xs[2]\n  c = xs[3]\n  min(a + b, (a + b + c) \u00f7 2)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205112,"user_id":null,"body":"function solve(arr)\n  sort!(arr)\n  \n  if arr[1] + arr[2] >= arr[3]\n    return floor((arr[1] + arr[2] - arr[3]) \/ 2 + arr[3])\n  end\n  \n  return arr[1] + arr[2]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205113,"user_id":null,"body":"# if w,b,g == 2n: \n#    n stacks of 3 pairs optimally \"fill up\" to 2n:\n#\n#    w--b  g---;\n#    w  b--g  |\n#    '--------'\n\n# Plan: systematically reduce stacks until all stacks are identical.\n#\n# 1. Reduce 2 largest stacks first, until lowest stacks are identical: \n#   [h,m,l] -> [h-d,m-d,l] = [h',l,l]; d=m-l\n# 2. pair largest stack with both lowest stacks, until all stacks are identical or lowest stacks are empty\n#   [h',l,l] = [l+dh,l,l]\n#   a) if dh >= l -> reduce by 2l,l,l \n#   b) if dh < l: reduce by r: l+dh - 2r = l-r <-> r = dh\n# \n# 3. Optimal fill as shown above: 3 idential stacks l' contain l'*3\u00f72 pairs\n\n# Optimization: \n# A) As the steps above can be carried out every time, only relevant numbers need to be tracked.\n# B) Step 2.b) and 3. can be combined to (h'+2l)\u00f72 pairs\nfunction solve(arr)\n  stacks = ChipStacks(arr)\n  return get_maximum_pairs(stacks)\nend\n\nstruct ChipStacks\n  max::Int\n  med::Int\n  min::Int\n  ChipStacks(max,med,min) = max<med || med<min ? error(\"out of order\") : new(max,med,min)\nend\nfunction ChipStacks(unordered_stacks::Array{Int})\n  if length(unordered_stacks) != 3\n    error(\"Not 3 Stacks!\")\n  end\n  max,med,min = sort(unordered_stacks, rev=true)\n  ChipStacks(max,med,min)\nend\nall_chips(stacks::ChipStacks) = stacks.max + stacks.med + stacks.min\n\nfunction equilibrate_lowest_stacks(stacks::ChipStacks)\n  chip_pairs = stacks.med-stacks.min\n  return chip_pairs, ChipStacks(stacks.max-chip_pairs, stacks.min, stacks.min)\nend\n\nfunction get_maximum_pairs(stacks::ChipStacks)\n  chip_pairs, stacks = equilibrate_lowest_stacks(stacks)\n  if stacks.max >= 2*stacks.min \n    # largest stack can deplete both lower stacks: (max-2*min) chips remain unpaired\n    return chip_pairs + 2*stacks.min\n  else \n    # optimal chip pairing: 0 or 1 chip remains\n    return chip_pairs + all_chips(stacks)\u00f72 \n  end\nend\n\n\n\n\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205114,"user_id":null,"body":"function solve(arr)\n    x, z = minimum(arr), maximum(arr)\n    y = sum(arr) - x - z\n    return(x + y <= z ? x + y : z + div((x + y - z), 2))\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205115,"user_id":492,"body":"function solve(arr)\n  x, y, z = sort!(arr)\n  return min(x + y, div(x + y + z, 2))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5e18743cd3346f003228b604":[{"id":205116,"user_id":53,"body":"function nines(n :: BigInt) :: BigInt\n  if n == big(9)\n    return big(1)\n  elseif n < big(10)\n    return big(0)\n  else\n    d = length(string(n))\n    b = big(10) ^ (d - 1)\n    a = n \u00f7 b\n    if a == 9\n      return a * k(d - 1) + 1 + n  - a * b\n    else\n      return a * k(d - 1) + nines(n % b)\n    end\n  end\nend\n\nfunction k(d)\n  if d <= 1\n    return big(d)\n  else\n    return big(9) * k(d - 1) + big(10) ^ (d - 1)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205117,"user_id":null,"body":"no_9(n) = first(n) == '9' ? big(9)^length(n)-1 : parse(Int,first(n))big(9)^length(n[2:end]) + (!isone(length(n)) && no_9(n[2:end]))\n\nnines(n::BigInt)::BigInt = n - no_9(\"$n\")","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205118,"user_id":50,"body":"function nines(n::BigInt)::BigInt\n  s = string(n)\n  l = big(length(s) - 1)\n  if l == 0\n    if s == \"9\"\n      return 1\n    else\n      return 0\n    end\n  end\n  a = parse(Int32, string(s[1]))\n  b = parse(BigInt, s[2:length(s)])\n  if a == 9\n    return a * f(l) + b + 1\n  else\n    return a * f(l) + nines(b)\n  end\nend\n\nfunction f(n::BigInt)::BigInt\n  if n == big(1)\n    return 1\n  else\n    return big(9) * f(n - big(1)) + big(10) ^ (n - big(1))\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5e2733f0e7432a000fb5ecc4":[{"id":205119,"user_id":881,"body":"get_free_urinals(urinals::String)::Int = occursin(\"11\", urinals) ? -1 : count(x -> true, eachmatch(r\"(?<=0|^)0(0|$)\", urinals))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205120,"user_id":480,"body":"function get_free_urinals(u::String)::Int\n  f=0\n  p='0'\n  for i = 1:length(u)\n    if u[i]=='1' && p=='1'\n      return -1\n    end\n    if u[i]=='0' && p=='0' && (i==length(u) || u[i+1]=='0')\n        f+=1\n        p='1'\n    else\n      p=u[i]\n    end\n  end\n  return f\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205121,"user_id":null,"body":"function get_free_urinals(urinals::String, u=0)::Int\n    occursin(\"11\", urinals) && return -1\n    occursin(\"000\", '0'*urinals*'0') ? get_free_urinals(replace('0'*urinals*'0', \"000\"=> \"010\", count=1)[2:end-1], u+1) : u\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205122,"user_id":2525,"body":"function get_free_urinals(urinals::String)::Int\n    if length(urinals)==1\n        return 1-parse(Int, urinals)\n    elseif occursin(\"11\", urinals)\n        return -1\n    end\n  \n    cnt = 0\n    l = false\n    for (i, u) in enumerate(urinals[1:end-1])\n        if l==false && u == '0' && urinals[i+1] == '0'\n            cnt += 1\n            l = true\n        elseif u == '1'\n            l = true\n        else\n            l = false\n        end\n    end\n\n    if l == false && urinals[end-1:end] == \"00\"\n        cnt += 1\n    end\n  \n    cnt \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205123,"user_id":1474,"body":"function get_free_urinals(urinals::String)::Int\n  if occursin(\"11\", urinals)\n    return -1\n  end\n  cnt = 0\n  reg = r\"(?<=^|0)0(?=0|$)\"\n  while occursin(reg, urinals)\n    cnt += 1\n    urinals = replace(urinals, reg => '1', count=1)\n  end\n  cnt\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205124,"user_id":null,"body":"function get_free_urinals(urinals::String)::Int\n    is_valid(s) = !occursin(\"11\", s)\n    !is_valid(urinals) && return -1\n    cnt = 0\n    for i in 1:length(urinals)\n        urinals[i] == '1' && continue\n        s = urinals[1:i-1]*\"1\"*urinals[i+1:end]\n        if is_valid(s)\n            urinals = s\n            cnt += 1\n        end\n    end\n    cnt\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205125,"user_id":null,"body":"function get_free_urinals(urinals::String)::Int\nnum = 0\nif occursin(\"11\", urinals)\n    return -1\nend\nif length(urinals)==1\n    return urinals==\"0\" ? 1 : 0\nend\nurinals = collect(urinals)\nif urinals[1] == urinals[2]=='0'\n    num+=1\n    urinals[1] = '1'\nend\nfor i in 2:length(urinals)-1\n    if urinals[i-1]== urinals[i]== urinals[i+1]=='0'\n        urinals[i] = '1'\n        num+=1\n    end\nend\nif urinals[end] == urinals[end-1] == '0'\n    urinals[end] = '1'\n    num+=1\nend\nnum\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205126,"user_id":759,"body":"function get_free_urinals(urinals::String)::Int\n  n = [x == '1' for x in urinals]\n  count = 0\n  len = length(n)\n  for i in 1:len\n    if !(i != 1 && n[i-1]) && !(i != len && n[i+1])\n      if !n[i]\n        n[i] = true\n        count += 1\n      end\n    elseif n[i]\n      return -1\n    end\n  end\n  count\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5e4217e476126b000170489b":[{"id":205127,"user_id":null,"body":"function polydivisible(x::Int)::Bool\n  accu = 0\n  for (i,digit) in x |> digits |> reverse |> enumerate\n    accu = muladd( accu, 10, digit )\n    if accu % i != 0 return false end\n  end\n  return true\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205128,"user_id":759,"body":"function polydivisible(x::Int)::Bool\n  d = string(x)\n  all(i -> parse(Int, d[1:i]) % i == 0, 1:length(d))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205129,"user_id":null,"body":"function polydivisible(x::Int)::Bool\n    l=length(string(x))\n    while x>10\n        (x\/l)%1 != 0 && return false\n        x \u00f7=10\n        l -= 1\n    end\n    true\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205130,"user_id":480,"body":"function polydivisible(x::Int)::Bool\n  s=string(x)\n  all(mod(parse(Int,SubString(s,1,k)),k)==0 for k=1:length(s))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205131,"user_id":null,"body":"polydivisible(x::Int)::Bool = all(isinteger, map(i-> parse(Int, string(x)[1:i])\/i, 1:ndigits(x)))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205132,"user_id":2525,"body":"function polydivisible(x::Int)::Bool\n    all( parse(Int, \"$x\"[1:i])%i==0 for i in 1:length(\"$x\") )\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205133,"user_id":1474,"body":"function polydivisible(n::Int)::Bool\n  if n < 10\n    return true\n  end\n  d = length(string(n))\n  n % d == 0 ? polydivisible(n \u00f7 10) : false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205134,"user_id":null,"body":"function polydivisible(x::Int)::Bool\n  x |> reverse \u2218 digits |> a -> sum([parse(Int, join(a[1:i]))%i for i in 1:length(a)]) == 0\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205135,"user_id":null,"body":"function polydivisible(x::Int)::Bool\n  s = string(x)\n  !any(parse(Int, s[1:i]) % i != 0 for i in 1:length(s))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205136,"user_id":881,"body":"polydivisible(x::Int)::Bool = all(t -> isinteger(t[2] \/ t[1]), enumerate(parse.(Int, cumprod(string.(reverse!(digits(x)))))))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5e860c16c7826f002dc60ebb":[{"id":205137,"user_id":759,"body":"function largest_power(n::Int)\n  n == 1 && return (0, -1)\n  n <= 4 && return (1, -1)\n  d = Dict()\n  highest = 1\n  for i in 2:Int(floor(sqrt(n)))\n    for p in 2:n\n      pp = i ^ p\n      (pp >= n) && break\n      haskey(d, pp) ? (d[pp] += 1) : (d[pp] = 1)\n      pp > highest && (highest = pp)\n    end\n  end\n  (highest, d[highest])\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205138,"user_id":null,"body":"function largest_power(n::Int)\n  if n==1\n    return (0, -1)\n  elseif n <= 4\n    return (1, -1)\n  else\n    global y = 0\n    while y == 0\n      for root in 2:(log(2,n-1))\n        b = round((n-1) ^ (1\/root), digits = 10)\n        if mod(b,1) == 0\n          y += 1\n        end\n      end\n      n -= 1\n    end \n    return (n, y)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205139,"user_id":2525,"body":"function largest_power(n::Int)\n    \n    if n == 1\n        return (0, -1)\n    elseif n \u2264 4\n        return (1, -1)\n    end\n  \n    pwrs = [ base^floor(Int, log(base, n-1)) for base in 2:floor(Int, \u221a(n-1))]\n    m = maximum(pwrs)\n    \n    (m, count(x->x==m, pwrs))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205140,"user_id":null,"body":"function largest_power(n::Int)::Tuple{Int, Int}\n  n == 1 && return (0, -1)\n  n <= 4 && return (1, -1)\n  \n  for m = n-1:-1:4\n    count = 0\n    for base = 2:floor(sqrt(m))\n      power = log(base, m)\n      abs(power - round(power)) > eps() * 2 && continue\n      count += 1\n    end\n    count > 0 && return (m, count)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205141,"user_id":null,"body":"function largest_power(n::Int)\n  if n == 1\n    return (0, -1)\n  elseif n <= 4\n    return (1, -1)\n  else\n    for i = n-1:-1:2\n      ff = factor(i)\n      if ff > 0\n        return (i, ff)\n      end\n    end\n  end\nend\n\n\nfunction factor(n::Int)\n  count = 0\n  p = 2\n  for x=2:floor(Int, sqrt(n))\n    while x^p <= n\n      if x^p == n\n        count += 1\n      end\n      p += 1\n    end\n    p = 2\n  end\n  return count\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205142,"user_id":645,"body":"function largest_power(n::Int)\n  if n == 1 return 0, -1 end\n  for i in ~-n:-1:1\n    k = reduce(+, (round(Int, i ^ (1 \/ e)) ^ e == i for e in 2:ndigits(i, base=2)), init=0)\n    if k != 0 return i, k end\n  end\n  1, -1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5e96332d18ac870032eb735f":[{"id":205143,"user_id":421,"body":"function womens_age(n::Int)::String\n  \"$n? That's just $(string(2, n % 2)), in base $(div(n, 2))!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205144,"user_id":1474,"body":"function womens_age(n::Int)::String\n  if n % 2 == 0\n    base = n \u00f7 2\n    age = 20\n  else\n    base = (n-1) \u00f7 2\n    age = 21\n  end\n  \"$n? That's just $age, in base $(base)!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205145,"user_id":null,"body":"womens_age(n::Int)::String = \"$(n)? That's just 2$(n % 2), in base $(n \u00f7 2)!\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205146,"user_id":null,"body":"function womens_age(n::Int)::String\n  \"$n? That's just 2$(n % 2), in base $(n \u00f7 2)!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205147,"user_id":null,"body":"function womens_age(number::Int)::String\n    base = 2\n    result = number\n    while true\n        temp = []\n        while result \u00f7 base != 0\n            insert!(temp, 1, rem(result, base))\n            result = result \u00f7 base\n        end\n        insert!(temp, 1, rem(result, base))\n        new_age = parse(Int, join(temp))\n        if new_age == 20 || new_age == 21\n            return \"$(number)? That's just $(new_age), in base $(base)!\"\n        end\n        base += 1\n        result = number\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205148,"user_id":null,"body":"function womens_age(n::Int)::String\n  \"$n? That's just $(20 + n % 2), in base $(n \u00f7 2)!\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205149,"user_id":881,"body":"womens_age(n::Int)::String = \"$(n)? That's just 2$(n & 1), in base $(n \u00f7 2)!\"","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5ef9ca8b76be6d001d5e1c3e":[{"id":205150,"user_id":572,"body":"function encode(str)\n  join(map(x->replace(string(Int(x), base=2, pad=8), r\"(0|1)\"=>s\"\\1\\1\\1\"), collect(str)))\nend\n\nfunction decode(bits)\n  j = join(map(x->sum(y->Int(y), x)>=146 ? \"1\" : \"0\", [x.match for x in eachmatch(r\"(0|1){3}\", bits)]))\n  join(map(x->Char(parse(Int, base=2, x)), [x.match for x in eachmatch(r\"(0|1){8}\", j)]))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205151,"user_id":null,"body":"function encode(str)\n  array_int = Int.([str...])\n  array_bit = int2bit.(array_int)\n  string_array_triple_bit=triple(array_bit)\n  bits=\"\"\n  for s in string_array_triple_bit\n    bits *=s\n  end    \n  return bits\nend\n\nfunction triple(x)\n  tmp = \"\"\n  for byte in x\n    for bit in byte\n        tmp *= \"$bit$bit$bit\"\n    end\n  end\n  return tmp\nend\n\nfunction int2bit(x)\n    y = digits(x, base=2, pad=8) |> reverse\n    return y\nend\n\nfunction decode(bits)\n  tmp = \"\"\n  while (bits != \"\")\n    tmp*=correct(bits[1:3])\n    bits = bits[4:end]    \n  end\n  \n  c1 = 1\n  c2 = 1\n  string=\"\"\n  tripled=[]\n  while c1 <= length(tmp)\n    while c2 <= 8\n       string *= tmp[c1]\n       c2+=1\n       c1+=1\n    end\n    push!(tripled,string)\n    string=\"\"\n    c2=1\n  end\n  array_int=[]\n  for i in tripled\n    push!(array_int,parse(Int, i; base=2))\n  end\n  str = \"\"\n  for i in array_int\n    str *= Char(i)\n  end\n  return str\nend\n\n  \nfunction correct(str)\n    zeros=0\n    ones=0\n    for i in str\n      if i == '1'\n        ones+=1\n      else \n        zeros+=1\n      end\n    end\n    if zeros > ones\n      return \"0\"\n    else\n      return \"1\"\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205152,"user_id":null,"body":"function encode(str)\n  xs = join([string(Int(x),base=2,pad=8) for x in str])\n  join(x^3 for x in xs)\nend\n\nfunction repr(tr)\n  if (tr[1] == tr[2]) || (tr[1] == tr[3])\n    tr[1]\n  else\n    tr[2]\n  end \nend\n\nfunction decode(bits)\n  xs = join([repr(SubString(bits,3*k+1,3*(k+1))) for k in 0:(div(length(bits),3)-1)])\n  ys = [parse(Int,SubString(xs,8*k+1,8*(k+1)),base=2) for k in 0:(div(length(xs),8)-1)]\n  join([Char(y) for y in ys])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205153,"user_id":null,"body":"function encode(str)\n  inp = Int.([str...])\n  triples = reduce(*, triple.(inp))\n  return triples\nend\n\nfunction decode(bits)\n  trips = compress(bits)\n  groups = group8s(trips)\n  ints = parse.(Int64, groups, base=2)\n  reduce(*, Char.(ints))\nend\n\nint2bit(x) = digits(x, base=2, pad=8) |> reverse\n\nfunction group8s(seq)\n  eights = []\n  tmp = \"\"\n  d = Dict(0 => '0', 1 => '1')\n  for (ind, el) in enumerate(seq)\n      if ind % 8 == 0\n          tmp *= d[el]\n          push!(eights, tmp)\n          tmp = \"\"\n      else\n          tmp *= d[el]\n      end\n  end\n  eights\nend\n\nfunction triple(x)\n  tmp = \"\"\n  for bit in int2bit(x)\n      tmp *= \"$bit$bit$bit\"\n  end\n  tmp\nend\n\nfunction compress(seq)\n  tmp = []\n  for el in [seq[ind-2:ind] for ind in 3:3:length(seq)]\n    push!(tmp, sum(parse.(Int64, [el...])) <= 1 ? 0 : 1)\n  end\n  tmp\nend\n","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205154,"user_id":null,"body":"encode(str) = string(collect(string(bitstring.(Int8.(collect(str)))...)).^3...)\ndecode(bits) = string([Char.(parse(Int8,string(['0'+(count(==('1'),bits[24i+3j-26:24i+3j-24])>=2) for j in 1:8]...),base=2)) for i=1:length(bits)\u00f724]...)","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205155,"user_id":null,"body":"function encode(str)\n    join(bit ^ 3 for bit in join(string.(Int.(collect(str)), base=2, pad=8)))\nend\n\nfunction decode(bits)\n    join(Char(parse(Int, join(ate), base=2)) for ate in Iterators.partition([count(\"1\", bits[i:i+2]) > 1 ? \"1\" : \"0\" for i in 1:3:length(bits)], 8))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205156,"user_id":null,"body":"function encode(str)\n  return join((join((x^3 for x in lpad(string(Int(c), base=2), 8, '0') ), \"\") for c in str), \"\")\nend\n\nfunction decode(bits)\n  bL = fld(length(bits), 3)\n  bits = [parse(Int, c) for c in bits]\n  bits = map(t->sum(t)>=2 ? 1 : 0, bits[k*3+1:(k+1)*3] for k in 0:bL-1)\n  s = join((string(b) for b in bits), \"\")\n  wL = fld(length(s), 8)\n  return join(( Char(parse(Int, s[k*8+1:(k+1)*8], base=2)) for k in 0:wL-1), \"\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205157,"user_id":null,"body":"\nfunction encode(str)\n  # transform the string into bits, triple each bit and return\n  return join([\"$d$d$d\" for c \u2208 str for d \u2208 bitstring(UInt8(c))])\nend\n\nfunction decode(bits)\n  # split bits into chunks of three\n  hamming = [bits[i:i+2] for i \u2208 1:3:length(bits)]\n  \n  # perform the error correction and remove the redundant bits\n  bits_corrected = join([length(split(code, \"1\")) - 1 > 1 ? '1' : '0' for code \u2208 hamming])\n  \n  # split the corrected bits into bytes\n  numbers = [bits_corrected[i:i+7] for i \u2208 1:8:length(bits_corrected)]\n  \n  # parse the bytes from binary to Int, cast to char and return\n  return join([Char(parse(Int, num, base=2)) for num \u2208 numbers])\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205158,"user_id":881,"body":"using Base.Iterators: partition\n\nfunction encode(str)\n    join(join(collect(string(Int(c), base=2, pad=8)) .^ 3) for c in str)\nend\n\nfunction decode(bits)\n    join(Char.(parse(Int, join(c), base=2) for c in \n        partition((Int(count(==('1'), bs) > count(==('0'), bs)) for bs in partition(bits, 3)), 8)  \n    ))\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205159,"user_id":null,"body":"function encode(str)\n  arr=[]\n  for c in str\n    d=digits(Int(c),base=2)\n    len=length(d)\n    while len < 8\n        append!(d,0)\n        len += 1\n    end\n    append!(arr,(*)(map(x->string(x)^3,reverse(d))...))\n  end\n\n  return (*)(arr...)\nend\n\nfunction decode(bits)\n  base=reverse([1,2,4,8,16,32,64,128])\n  result=\"\"\n  tmp=0\n  for elem in collect(Iterators.partition(map(x->(+)(map(y->parse(Int,y),x)...) > 1 ? 1 : 0,collect(Iterators.partition(bits,3))),8))\n    for (a,b) in zip(elem,base)\n        tmp += a*b\n    end\n    result *= Char(tmp)\n    tmp = 0\n  end\n  return result\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5effa412233ac3002a9e471d":[{"id":205160,"user_id":null,"body":"function add(num1, num2)\n    padding = max(ndigits(num1), ndigits(num2))\n    parse(Int, join(reverse(digits(num1, pad=padding) + digits(num2, pad=padding))))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205161,"user_id":null,"body":"function add(num1, num2)\n    N = max(ndigits(num1), ndigits(num2))\n    sumup(x,accu) = accu * (x >= 10 ? 100 : 10) + x\n    foldr(sumup, digits(num1,pad=N)+digits(num2,pad=N))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205162,"user_id":759,"body":"function add(num1, num2)\n  num1 == 0 && return num2\n  num2 == 0 && return num1\n  s = []\n  while num1 != 0 || num2 != 0\n    insert!(s, 1, (num1 % 10) + (num2 % 10))\n    num1 = num1 \u00f7 10\n    num2 = num2 \u00f7 10\n  end\n  parse(Int, join(s))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205163,"user_id":null,"body":"function add(nums...)\n  maxlen = maximum(length\u2218string, nums)\n  added = zeros(Int, maxlen)\n  for num in nums\n    added[maxlen-length(string(num))+1:end] .+= reverse(digits(num))\n  end\n  parse(Int, join(added))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205164,"user_id":572,"body":"function add(num1, num2)\n  s1, s2 = map(string, (num1, num2))\n  m = max(length(s1), length(s2))\n  s1, s2 = map(x ->lpad(x, m, '0'), (s1, s2))\n  return parse(Int, join((string(parse(Int, s1[i])+parse(Int, s2[i])) for i in 1:m), \"\"))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205165,"user_id":null,"body":"function add(num1, num2)  \n  s = \"\"\n  while num1 + num2 > 0\n    num1, n1 = divrem(num1, 10)\n    num2, n2 = divrem(num2, 10)\n    s = string(n1 + n2)*s\n  end\n  \n  if length(s) > 0\n    return parse(Int, s)\n  else\n    return 0\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205166,"user_id":null,"body":"function add(num1, num2)\n  biggestLen = max(length(digits(num1)),length(digits(num2)))\n\nparse.(Int64,join(cat(zeros(Int64,biggestLen - length(digits(num1))), reverse(digits(num1)), dims = 1) + cat(zeros(Int64,biggestLen - length(digits(num2))), reverse(digits(num2)), dims = 1)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205167,"user_id":null,"body":"function add(num1, num2)\n  d1 = digits(num1)\n  d2 = digits(num2)\n\n  l1 = length(d1)\n  l2 = length(d2)\n\n  for q in 1:abs(l1 - l2)\n      push!((l1 > l2 ? d2 : d1), 0)\n  end\n\n  parse(Int,join(reverse([p+q for (p,q) in zip(d1,d2)])))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205168,"user_id":null,"body":"function add(num1, num2)\n    padding = max(length(digits(num1)),length(digits(num2)))\n    parse(Int, join(reverse(digits(num1, pad=padding) + digits(num2, pad=padding))))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205169,"user_id":53,"body":"function add(x, y)\n  d = x % 10 + y % 10\n  if x + y == 0\n    d\n  else\n    n = add(x \u00f7 10, y \u00f7 10)\n    if d >= 10\n      n * 100 + d\n    else\n      n * 10 + d\n    end\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5f0ed36164f2bc00283aed07":[{"id":205170,"user_id":null,"body":"function over_the_road(address, n)\n  2*n + 1 - address\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205171,"user_id":null,"body":"function over_the_road(address, n)\n  (n*2+1)-address\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205172,"user_id":null,"body":"over_the_road(address, n) = 2n - address + 1","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205173,"user_id":null,"body":"over_the_road(address, n) = \nisodd(address) ? (n + 1 - (address + 1) \u00f7 2) * 2 : (n + 1 - address \u00f7 2) * 2 - 1","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205174,"user_id":null,"body":"function over_the_road(address, n)\n  if iseven(address)\n    i = n - address\u00f72 + 1\n    2i - 1\n  else\n    i = (address + 1)\u00f72\n    2(n - i + 1)\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205175,"user_id":null,"body":"function over_the_road(address, n)\n  return (n*2)-address+1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205176,"user_id":50,"body":"function over_the_road(add, n)\n  1-add+2*n\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205177,"user_id":209,"body":"function over_the_road(a, n)\n  a < 1 || n < 1 || n*2 < a ? -1 : 2*n - a + 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205178,"user_id":null,"body":"function over_the_road(address, n)\n  2*n - address + 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205179,"user_id":1474,"body":"function over_the_road(a, n)\n  2 * n + 1 - a\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5f3142b3a28d9b002ef58f5e":[{"id":205180,"user_id":572,"body":"function word_pattern(str)\n    d = Dict()\n    join([get!(d, c, string(length(d))) for c in lowercase(str)], '.')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205181,"user_id":null,"body":"word_pattern(word) = join((Dict(zip(unique(collect(lowercase(word))), 0:35))[ch] for ch in lowercase(word)), '.')","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205182,"user_id":null,"body":"function word_pattern(word)\n  word = lowercase(word)\n\n  mapping = Dict()\n  value = 0\n  for (i,c) in enumerate(word)\n      if !haskey(mapping, c)\n          mapping[c] = value\n          value += 1\n      end\n  end\n\n  return join([mapping[c] for c in word], '.')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205183,"user_id":2525,"body":"function word_pattern(word)\n    word = lowercase(word)\n    map = Dict( (c, i-1) for (i, c) in enumerate(unique(word)) )\n  \n    join([map[c] for c in word], \".\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205184,"user_id":881,"body":"function word_pattern(word)\n    ns = Iterators.Stateful(Iterators.countfrom(0))\n    d = Dict()\n    join((get!(() -> popfirst!(ns), d, c) for c in lowercase(word)), '.')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205185,"user_id":null,"body":"function word_pattern(word)\n  seen, ret, i = Dict(), [], -1\n  for c in lowercase(word)\n    if !haskey(seen, c)\n      i += 1\n      seen[c] = i\n    end\n    push!(ret, seen[c])\n  end\n  join(ret, \".\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205186,"user_id":1474,"body":"function word_pattern(word)\n  word = lowercase(word)\n  tmp = []\n  for c in word\n    if c \u2209 tmp\n      push!(tmp, c)\n    end\n  end\n  function index(c, word=word)\n    for (i, e) in enumerate(word)\n      if c == e\n        return i - 1\n      end\n    end\n  end\n  sort!(tmp, by=index)\n  join([string(index(c, tmp)) for c in word], '.')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205187,"user_id":872,"body":"function word_pattern(word)\n  a = split(lowercase(word), \"\")\n  d = Dict{String, String}()\n  for (i, s) in enumerate(a)\n      if !haskey(d, s)\n          d[s] = string(length(keys(d)))\n      end\n      a[i] = d[s]\n  end\n  join(a, \".\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205188,"user_id":null,"body":"function word_pattern(word)\n  word = lowercase(word)\n  codes = generate_codes(word)\n  \n  join( map(x->codes[x], collect(word)) , '.')\nend\n\nfunction generate_codes(some_word)\n  codes = Dict{Char,Int}()\n  \n  for c in collect(some_word)\n    coded_chars=keys(codes)\n    if !(c in coded_chars)\n      codes[c] = length(coded_chars)\n    end\n  end\n  return codes\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205189,"user_id":null,"body":"function word_pattern(word)\n  lowercase(word) |> str -> join([findfirst(x->x==c, join(union(str)))-1 for c in str], '.')\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5f47e79e18330d001a195b55":[{"id":205190,"user_id":null,"body":"base_finder = seq -> length(unique(split(join(seq), \"\")))\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205191,"user_id":null,"body":"base_finder(seq) = length(unique(collect(join(seq))))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205192,"user_id":527,"body":"base_finder(xs) = parse(Int, maximum(maximum.(xs))) + 1","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205193,"user_id":null,"body":"function base_finder(seq)\n     length(unique(n-> n[end], seq))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205194,"user_id":null,"body":"function base_finder(seq)\n  sorted = sort(parse.(Int,seq))\n  if all(map(==(1),diff(sorted)))\n    return 10\n  else\n    return findall(!=(1),diff(sorted))[1] + digits(sorted[1])[1]\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205195,"user_id":2525,"body":"function base_finder(seq)\n    length(unique(c for n in seq for c in n))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205196,"user_id":881,"body":"base_finder(seq) = parse(Int, maximum(join(seq))) + 1","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205197,"user_id":null,"body":"function base_finder(seq)\n  seq |> join |> unique |> length\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205198,"user_id":null,"body":"function base_finder(seq)\n  length(unique(join(seq)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205199,"user_id":1474,"body":"function base_finder(seq)\n  ret = []\n  for c in join(seq)\n    if c \u2209 ret\n      push!(ret, c)\n    end\n  end\n  maximum([parse(Int, c) for c in ret]) + 1\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5f55ecd770692e001484af7d":[{"id":205200,"user_id":null,"body":"function mirror(data)\n  sort(data) |> a -> [a..., a[end-1:-1:1]...]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205201,"user_id":null,"body":"function mirror(data)\n  s = sort(data)\n  vcat(s, reverse(s)[2:end])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205202,"user_id":null,"body":"mirror(data) = vcat(sort(data), sort(data,rev=true)[2:end])","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205203,"user_id":null,"body":"function mirror(data)\n  sorteddata = sort(data)\n  vcat(sorteddata, reverse(sorteddata)[2:end])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205204,"user_id":2525,"body":"function mirror(data)\n    if length(data) \u2264 1\n        data\n    else\n        sorted = sort(data)\n        vcat(sorted, sorted[end-1:-1:1])\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205205,"user_id":1474,"body":"function mirror(data)\n  vcat(sort(data)[1:end-1], reverse(sort(data)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205206,"user_id":null,"body":"function mirror(l)\n  if length(l)<2\n    return l\nend\n  l=sort(l)\n  mid = pop!(l)\n  l2 = reverse(l)\n  append!(l,mid)\n  append!(l,l2)\n  return l\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205207,"user_id":null,"body":"function mirror(data)\n  [sort(data); sort(data, rev=true)[2:end]]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205208,"user_id":null,"body":"function mirror(data)\n  sorted = sort(data)\n  rev = sort(data, rev=true)\n  append!(sorted, rev[2:end])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205209,"user_id":null,"body":"mirror(data) = sort(data) |> d -> [d; (d |> reverse)[2:end]]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5f70c883e10f9e0001c89673":[{"id":205210,"user_id":527,"body":"function flip(direction::String, boxes::Array{Int})::Array{Int}\n  sort(boxes, rev = direction == \"L\")\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205211,"user_id":null,"body":"flip(direction, boxes) = sort(boxes, rev=direction==\"L\")","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205212,"user_id":null,"body":"function flip(direction::String, boxes::Array{Int})::Array{Int}\n    sort!(boxes)\n    if direction == \"R\"\n        boxes\n    else\n        reverse!(boxes)\n    end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205213,"user_id":812,"body":"function flip(direction::String, boxes::Array{Int})::Array{Int}\n  if direction == \"R\"\n    return sort(boxes)\n  else\n    return reverse(sort(boxes))\n  end\nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205214,"user_id":null,"body":"function flip(direction::String, boxes::Array{Int})::Array{Int}\n  floor_boxes = map(x -> length(collect(filter(y -> y>=x, boxes))),(1:maximum(boxes)))\n  pull_to_left = map(x -> length(collect(filter(y -> y>=x, floor_boxes))),(1:length(boxes)))\n  return direction == 'L' ? pull_to_left : reverse(pull_to_left)\nend","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205215,"user_id":null,"body":"function flip(direction::String, boxes::Array{Int})::Array{Int}\n  # TODO\n  if direction == \"R\"\n    return sort(boxes)\n  else\n    return sort(boxes, rev=true)\n  end \nend","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205216,"user_id":null,"body":"function flip(dct::Char, bxs::Array{Int})::Array{Int}\n#  dct == \"R\" ? sort(bxs) : sort(bxs, rev = true)\n  sort(bxs, rev = dct == 'L') \nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205217,"user_id":null,"body":"function flip(dct::Char, bxs::Array{Int})::Array{Int}\n  sort!(bxs)\n  if dct == \"R\"\n    bxs\n  else\n#    reverse!(bxs)\n    sort(bxs, rev = true)\n  end\nend","lang_id":28,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205218,"user_id":null,"body":"flip(direction::String, boxes::Array{Int})::Array{Int} = direction == \"R\" ? sort(boxes) : reverse(sort(boxes))","lang_id":28,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205219,"user_id":null,"body":"flip(direction::String, boxes::Array{Int})::Array{Int} = sort(boxes, rev = direction \u2261 'L')\n","lang_id":28,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5f77d62851f6bc0033616bd8":[{"id":205220,"user_id":null,"body":"valid_spacing(s::String)::Bool = join(split(s),' ') == s","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205221,"user_id":53,"body":"function valid_spacing(s::String)::Bool\n   s == strip(s) && !occursin(\"  \", s)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205222,"user_id":759,"body":"function valid_spacing(s::String)::Bool\n  isempty(s) || s[1] != ' ' && s[end] != ' ' && !occursin(\"  \", s)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205223,"user_id":null,"body":"function valid_spacing(s::String)::Bool\n    s == strip(s) && isnothing(match(r\"\\s{2,}\", s))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205224,"user_id":null,"body":"function valid_spacing(s::String)::Bool\n  startswith(s, \" \") || endswith(s, \" \") || contains(s, \"  \") ?\n    false : true\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205225,"user_id":2525,"body":"function valid_spacing(s::String)::Bool\n    if s == \"\"\n        true\n    else\n        s[1]!=' ' && s[end]!=' ' && !occursin(\"  \", s)\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205226,"user_id":null,"body":"function valid_spacing(s::String)::Bool\n    length(s) == 0 && return true\n    p_space = true\n    for c in s\n        if isspace(c)\n            p_space && return false\n            p_space = true\n        else\n            p_space = false\n        end    \n      end\n      !p_space\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205227,"user_id":421,"body":"function valid_spacing(s::String)::Bool\n  strip(replace(s, r\"\\s+\" => \" \")) == s\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205228,"user_id":null,"body":"function valid_spacing(s::String)::Bool\n    if length(s) == 0\n        return true\n    end\n    occursin(r\"^\\w+( \\w+)*$\", s)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205229,"user_id":null,"body":"function valid_spacing(s::String)::Bool\n    try\n        if (s[1] == ' ' || s[end] == ' ') && length(s) != 0\n            return false\n        else\n            for index in eachindex(s)\n                if s[index] == ' ' && s[index] == s[index+1]\n                    return false\n                end\n            end\n        end\n    catch LoadError\n        false\n    end\n\n    return true\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5f8341f6d030dc002a69d7e4":[{"id":205230,"user_id":1474,"body":"function least_larger(a, i)\n  b = sort(unique(a))\n  j = findall(x -> x == a[i], b)[1]\n  j < length(b) ? findall(x -> x == b[j+1], a)[1] : nothing\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205231,"user_id":null,"body":"function least_larger(a, i)\n    bestIdx = -1\n    bestVal = Inf\n    for (idx, x) in enumerate(a)\n      if 0 < x - a[i] < bestVal - a[i] && idx != i\n        bestIdx = idx\n        bestVal = x\n      end\n    end\n    if isinf(bestVal) return nothing else return bestIdx end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205232,"user_id":null,"body":"least_larger(a, i) = findfirst(==(min(Inf, filter(>(a[i]), a)...)), a)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205233,"user_id":null,"body":"function least_larger(a, i)\n    r, m = -1, 1000000\n    for (j,x) in enumerate(a)\n        if x > a[i] && x < m\n            m, r = x, j\n        end\n    end\n    (r != -1) ? r : nothing\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205234,"user_id":881,"body":"function least_larger(a, i)\n    result = nothing\n    diff = Inf\n    value = a[i]\n    for (j, v) in pairs(a)\n        if v > value && v - value < diff\n            diff = v - value\n            result = j\n        end\n    end\n    result\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5fc7d2d2682ff3000e1a3fbc":[{"id":205235,"user_id":527,"body":"function isvalidmessage(message::String)::Bool\n  all(m -> parse(Int, m.captures[1]) == length(m.captures[2]), eachmatch(r\"(\\d+)(\\D*)\", message))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205236,"user_id":null,"body":"function isvalidmessage(message::String)::Bool\n  all(parse(Int, m[1]) == length(m[2]) for m in eachmatch(r\"(\\d*)(\\D*)\", message) if length(m[1]) != 0)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205237,"user_id":null,"body":"function isvalidmessage(message::String)::Bool\n    words = [m.match for m in eachmatch(r\"\\d+[a-zA-Z]+\", message)]\n    join(words) == message ? checksum(words) : false\nend\n\nfunction checksum(words)\n    all(m-> parse(Int, m[1].match) == length(m[2].match), collect.(eachmatch.(r\"\\d+|[a-zA-Z]+\", words)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205238,"user_id":2525,"body":"function isvalidmessage(message::String)::Bool\n    checks = parse.(Int, split(replace(message, r\"[a-z]\" => \" \")))\n    words  = split(replace(message, r\"\\d\" => \" \"))\n  \n    if message == \"\"\n        true\n    elseif length(checks) != length(words)\n        false\n    elseif isletter(message[1]) || isdigit(message[end])\n        false\n    else\n        all( length(w)==c for (c, w) in zip(checks, words) )\n    end\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205239,"user_id":null,"body":"function isvalidmessage(message::String)::Bool\n  occursin(r\"^((\\d+)([a-z]+))*$\", message) || return false\n  matches = eachmatch(r\"(\\d+)([a-z]+)\", message)\n  for match in matches\n    len = parse(Int, match.captures[1])\n    len == length(match.captures[2]) || return false\n  end\n  return true\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205240,"user_id":1474,"body":"function isvalidmessage(message::String)::Bool\n  for m in eachmatch(r\"(\\d*)(\\D*)\", message)\n    if isempty(m.match)\n      return true\n    end\n    if isempty(m.captures[1]) || isempty(m.captures[2]) || parse(Int, m.captures[1]) != length(m.captures[2])\n      return false\n    end\n  end\n  true\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205241,"user_id":1474,"body":"function isvalidmessage(message::String)::Bool\n  for m in eachmatch(r\"(\\d*)(\\D*)\", message)\n    println(m.captures)\n    if isempty(m.match)\n      return true\n    end\n    if isempty(m.captures[1]) || isempty(m.captures[2]) || parse(Int, m.captures[1]) != length(m.captures[2])\n      return false\n    end\n  end\n  true\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205242,"user_id":881,"body":"function isvalidmessage(message::String)::Bool\n    occursin(r\"^(?:\\d+\\D+)*$\", message) && all(length(captures[2]) == parse(Int, captures[1]) for (captures) in eachmatch(r\"(\\d+)(\\D+)\", message))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5fde1ea66ba4060008ea5bd9":[{"id":205243,"user_id":1474,"body":"function burner(c::Int, h::Int, o::Int)::NTuple{3,Int}\n  wcnt, ccnt, mcnt = 0, 0, 0\n  while true\n    if h > 1 && o > 0\n      wcnt += 1\n      h -= 2\n      o -= 1\n    elseif c > 0 && o > 1\n      ccnt += 1\n      c -= 1\n      o -= 2\n    elseif c > 0 && h > 3\n      mcnt += 1\n      c -= 1\n      h -= 4\n    else\n      return (wcnt, ccnt, mcnt)\n    end\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205244,"user_id":null,"body":"function burner(c::Int, h::Int, o::Int)::NTuple{3,Int}\n  water = min(floor(h\/2), o)\n  h = h-water*2\n  o= o-water\n  co2 = min(c, floor(o\/2))\n  c = c-co2\n  methane = min(c, floor(h\/4))\n  return (water, co2, methane)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205245,"user_id":null,"body":"function burner(c::Int, h::Int, o::Int)::NTuple{3,Int}\n    (min(h\u00f72, o), min(c, (o-min(h\u00f72, o))\u00f72), min(c-min(c, (o-min(h\u00f72, o))\u00f72), (h-2min(h\u00f72, o))\u00f74))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205246,"user_id":null,"body":"function burner(c::Int, h::Int, o::Int)::NTuple{3,Int}\n  water, co2, methane = 0, 0, 0\n  while h > 1 && o > 0\n    water += 1\n    h -= 2\n    o -= 1\n  end\n  while c > 0 && o > 1\n    co2 += 1\n    c -= 1\n    o -= 2\n  end\n  while c > 0 && h > 3\n    methane += 1\n    c -= 1\n    h -= 4\n  end\n  water, co2, methane\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205247,"user_id":492,"body":"function burner(c::Int, h::Int, o::Int)::NTuple{3,Int}\n    water = min(div(h, 2),  o)\n    co2 = min(div(o - water, 2), c)\n    methane = min(div((h - water * 2), 4), c - co2)\n    (water, co2, methane)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205248,"user_id":2525,"body":"function burner(c::Int, h::Int, o::Int)::NTuple{3,Int}\n    water = min(h\u00f72, o)\n    h -= 2*water\n    o -= water\n  \n    co2 = min(o\u00f72, c)\n    o -= 2*co2\n    c -= co2\n  \n    methane = min(c, h\u00f74)\n  \n    (water, co2, methane)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205249,"user_id":759,"body":"function burner(c::Int, h::Int, o::Int)::NTuple{3,Int}\n  wat = min(div(h, 2), o)\n  h -= wat * 2\n  o -= wat\n  co2 = min(c, div(o, 2))\n  c -= co2\n  o -= co2 * 2\n  (wat, co2, min(c, div(h, 4)))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205250,"user_id":421,"body":"function burner(c::Int, h::Int, o::Int)::NTuple{3,Int}\n    water = min(div(h, 2), o)\n    carbon = min(div(o - water, 2), c)\n    methane = min(div(h - water * 2, 4), c - carbon)\n    (water, carbon, methane)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205251,"user_id":53,"body":"function burner(c::Int, h::Int, o::Int)::NTuple{3,Int}\n    h2o = 0\n    co2 = 0\n    ch4 = 0\n    while h >= 2 && o > 0\n        h -= 2\n        o -= 1\n        h2o += 1\n    end\n    while o >= 2 && c > 0\n        o -= 2\n        c -= 1 \n        co2 += 1\n    end\n    while h >= 4 && c > 0\n        h -= 4\n        c -= 1 \n        ch4 += 1\n    end\n    return (h2o, co2, ch4)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205252,"user_id":881,"body":"function burner(c::Int, h::Int, o::Int)::NTuple{3,Int}\n    water = min(h \u00f7 2, o)\n    co2 = min((o - water) \u00f7 2, c)\n    methane = min((h - 2water) \u00f7 4, c - co2)\n    (water, co2, methane)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"5ffc226ce1666a002bf023d2":[{"id":205253,"user_id":881,"body":"function solution(A::Matrix{Char})::Bool\n    arrow = findfirst(==('>'), A)\n    target = findfirst(==('x'), A)\n    arrow[1] == target[1] && arrow[2] < target[2]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205254,"user_id":null,"body":"function solution(s::Matrix{Char})::Bool\n    findall(==('>'),s)[1][1] == findall(==('x'),s)[1][1] && findall(==('>'),s)[1][2] <= findall(==('x'),s)[1][2]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205255,"user_id":null,"body":"solution(A::Matrix{Char})::Bool = any(x-> occursin(r\">\\s*x\", x), join.(eachrow(A)))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205256,"user_id":2525,"body":"function solution(A::Matrix{Char})::Bool\n    any( replace(join(A[i,:]), \" \" => \"\") == \">x\" for i in 1:size(A, 1) )\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205257,"user_id":null,"body":"function solution(A::Matrix{Char})::Bool\n  arrow_indice = findfirst(c -> c == '>', A)\n  target_indice = findfirst(c -> c == 'x', A)\n\n  in_same_line = arrow_indice[1] == target_indice[1]\n  order_is_right = arrow_indice[2] < target_indice[2]\n  in_same_line && order_is_right\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205258,"user_id":480,"body":"function solution(A::Matrix{Char})::Bool\n    for i=1:size(A)[1]\n      if occursin(r\">.*x\",join(A[i,:]))\n        return true\n      end\n    end\n    return false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205259,"user_id":53,"body":"function solution(m::Matrix{Char})::Bool\n    a = nothing\n    b = nothing\n    for x = 1:size(m, 2)\n        for y = 1:size(m, 1)\n            if m[y, x] == '>'\n                a = [x, y]\n            end\n            if m[y, x] == 'x'\n                b = [x, y]\n            end\n        end\n    end\n    return a[2] == b[2] && a[1] < b[1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205260,"user_id":null,"body":"function solution(A::Matrix{Char})::Bool\n  a, t = findfirst(A.=='>'), findfirst(A.=='x')\n  a[1]==t[1] && a[2]<t[2]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205261,"user_id":null,"body":"function solution(A::Matrix{Char})::Bool\n    dim = size(A)[1]\n    arr_idx = -1\n    x_idx = -1\n    for idx in eachindex(A)\n        if A[idx] == '>'\n            arr_idx = idx\n        elseif A[idx] == 'x'\n            x_idx = idx\n        end\n        if arr_idx != -1 && x_idx != -1\n            break\n        end\n    end\n    if arr_idx > x_idx || arr_idx == -1 || x_idx == -1\n        # arrow flew past target, arrow or target not found\n        return false\n    end\n    current = x_idx\n    while current > 0\n        if current == arr_idx\n            # arrow is on same row as target\n            return true\n        end\n        current -= dim\n    end\n    # arrow is not on same row as target\n    return false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205262,"user_id":null,"body":"function solution(A::Matrix{Char})::Bool\n  n = size(A,1)\n  for i in 1:n\n    row = join(A[i,j] for j in 1:n)\n    if occursin('>', row) && occursin('x', row)\n      return findfirst(isequal('>'), row) < findfirst(isequal('x'), row)\n    end\n  end\n  false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"6022c97dac16b0001c0e7ccc":[{"id":205263,"user_id":480,"body":"function calculatewinners(snapshot::String, penguins::Vector{String})::String\n  lanes=map(l->replace(l,r\"^.*[pP]\"=>\"\"),split(snapshot,\"\n\"))\n  println(lanes)\n  pts=map(l->reduce((acc,c)-> acc+(c=='~' ? 2 : c=='-' ? 1 : 0),collect(l);init=0),lanes)\n  a=[(p,s) for (p,s) in zip(penguins,pts)]\n  sort!(a;lt=(a,b)->a[2]<b[2])\n  \"GOLD: $(a[1][1]), SILVER: $(a[2][1]), BRONZE: $(a[3][1])\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205264,"user_id":null,"body":"function calculatewinners(snapshot::String, penguins::Vector{String})::String\n    x = sort!([(penguins[i], v[2]) for (i,v) in enumerate(split.(split(replace(snapshot, '~' => \"--\"), r\"\\|(\n|)\", keepempty=false), r\"(p|P)\"))], by = x -> length(x[2]))\n    \"GOLD: $(x[1][1]), SILVER: $(x[2][1]), BRONZE: $(x[3][1])\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205265,"user_id":2525,"body":"function calculatewinners(snapshot::String, penguins::Vector{String})::String\n    finish = []\n    for (penguin, lane) in zip(penguins, split(lowercase(snapshot), '\n'))\n        rem = replace(lane, r\".*p\"=>\"\")\n        time = count(c->c=='-', rem) + 2*count(c->c=='~', rem)\n        push!(finish, (time, penguin))\n    end\n    finish = sort(finish)\n    \"GOLD: $(finish[1][2]), SILVER: $(finish[2][2]), BRONZE: $(finish[3][2])\"  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205266,"user_id":null,"body":"function calculatewinners(snapshot::String, penguins::Vector{String})::String\n  times = Dict()\n  for (i,lane) in enumerate(split(lowercase(snapshot), \"\n\"))\n    idx = findfirst(x -> x=='p', lane)\n    times[penguins[i]] = sum(x=='-' ? 1 : x=='~' ? 2 : 0 for x in lane[idx:length(lane)])\n  end\n  penguins = sort(penguins, by = p -> times[p])\n  \"GOLD: $(penguins[1]), SILVER: $(penguins[2]), BRONZE: $(penguins[3])\" \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205267,"user_id":209,"body":"function calculatewinners(q::String, penguins::Vector{String})\n    v = eachmatch(Regex(\"p.*?\\\\|\", \"mi\"), replace(q, \"~\"=>\"--\"))\n    w = map(x->x[1], sort([i for i in enumerate(v)], by=x->length(string(x[2])))[1:3])\n    join(map(x-> x[1] * penguins[x[2]], zip([\"GOLD: \", \"SILVER: \", \"BRONZE: \"], w)), \", \")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205268,"user_id":881,"body":"function calculatewinners(snapshot::String, penguins::Vector{String})::String\n    function score(lane::AbstractString)::Int\n        i = findfirst(\"p\", lowercase(lane))[1] + 1\n        l = lane[i:end]\n        count(==('-'), l) + 2 * count(==('~'), l)\n    end\n    winners = sort(collect(zip(score.(split(snapshot, '\n')), penguins)), by=first)\n    \"GOLD: $(winners[1][2]), SILVER: $(winners[2][2]), BRONZE: $(winners[3][2])\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"603b2bb1c7646d000f900083":[{"id":205269,"user_id":null,"body":"function shifter(s::AbstractString)::Int\n    reduce(+, [!occursin(r\"[^HINOSXZMW]\", word) for word in unique(split(s))], init=0)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205270,"user_id":null,"body":"function shifter(s::AbstractString)::Int\n  sum(map(_ -> 1, filter(word -> all(in(\"HINOSXZMW\"), word), unique(split(s)))))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205271,"user_id":2525,"body":"function shifter(s::AbstractString)::Int\n    sum( issubset(Set(collect(w)), Set(['H', 'I', 'N', 'O', 'S', 'X', 'Z', 'M', 'W'])) for w in unique(split(s * \" A\")) )\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205272,"user_id":null,"body":"function shifter(s::AbstractString)::Int\n  filter(w -> all(c in \"HINOSXZMW\" for c in w), split(s)) |> unique |> length\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205273,"user_id":null,"body":"function shifter_check(s)\n    for i in s\n      if ! (i in ['H', 'I', 'N', 'O', 'S', 'X', 'Z', 'W', 'M'])\n        return false\n      end\n    end\n    return true\nend\n\nfunction shifter(s::AbstractString)::Int\n    words = unique(split(s))\n    sum(shifter_check.(words))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205274,"user_id":null,"body":"function shifter(s::AbstractString)::Int\n  sum([occursin(r\"[^HIMNOSWXZ]\", w) ? 0 : 1 for w in unique(split(s))])\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205275,"user_id":53,"body":"function shifter(s::AbstractString)::Int\n    size(filter(x -> occursin(r\"^[HIMNOSWXZ]+$\", x), unique(split(s, \" \"))), 1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205276,"user_id":76,"body":"function shifter(s::AbstractString)::Int\n    size(unique(m.match for m in eachmatch(r\"\\b[HINOSXZWM]+\\b\", s)), 1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205277,"user_id":881,"body":"function shifter(s::AbstractString)::Int\n    count(occursin(r\"^[HIMNOSWXZ]+$\", w) for w in unique(split(s, ' ')))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"604287495a72ae00131685c7":[{"id":205278,"user_id":759,"body":"function doubleton(num::Integer)::Int\n  while true\n    num += 1\n    length(Set(digits(num))) == 2 && return num\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205279,"user_id":421,"body":"function doubleton(num::Integer)::Int\n  num += 1\n  while length(unique(digits(num))) != 2\n    num += 1\n  end\n  num  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205280,"user_id":1474,"body":"function doubleton(num::Integer)::Int\n  num += 1\n  if length(unique([c for c in string(num)])) == 2\n    return num\n  end\n  doubleton(num)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205281,"user_id":null,"body":"doubleton(num::Integer)::Int = num + 1 |> digits |> unique |> length == 2 ? num + 1 : doubleton(num + 1)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205282,"user_id":2525,"body":"function doubleton(num::Integer)::Int\n    while true\n        num += 1\n        if length(Set(digits(num)))==2\n            return num\n        end\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205283,"user_id":null,"body":"function doubleton(num::Integer)::Int\n  num += 1\n  while length(unique(digits(num))) \u2260 2\n    num += 1\n  end\n  num\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205284,"user_id":null,"body":"function doubleton(num::Integer)::Int\n  length(unique(digits(num+1))) == 2 ? num+1 : doubleton(num+1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205285,"user_id":null,"body":"function doubleton(num::Integer)::Int\n  # Naive solution\n  d = 0\n  while d == 0\n    num += 1\n    ds = digits(num)\n    if length(unique(ds)) == 2\n      d = num \n    end \n  end\n  d\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205286,"user_id":53,"body":"function doubleton(num::Integer)::Int\n    while true\n        num += 1\n        if length(Set(string(num))) == 2\n            return num\n        end\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205287,"user_id":209,"body":"function doubleton(n::Integer)::Int\n    for i in n+1:1_000_000\n      if length(unique(string(i))) == 2\n        return i\n      end\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"605ae9e1d2be8a0023b494ed":[{"id":205288,"user_id":881,"body":"function count_salutes(hallway)\n    2 * sum(count(==('<'), Iterators.flatten(hallway[i+1:end] for i in findall(==('>'), hallway))))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205289,"user_id":1474,"body":"function count_salutes(hallway)\n  ret = [2 * count(c -> c == '<', hallway[i:end]) for (i, c) in enumerate(hallway) if c == '>']\n  ret == [] ? 0 : sum(ret)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205290,"user_id":null,"body":"function count_salutes(hallway)\n  s = 0\n  r = 0\n  for p in hallway\n    if p == '>'\n      r += 1\n    elseif p == '<'\n      s += 2*r\n    end\n  end\n  s\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205291,"user_id":null,"body":"function count_salutes(hallway)\n    salutes, n = 0, 0\n    for loc in hallway\n        loc == '>' && (n += 1)\n        loc == '<' && (salutes += 2n)\n    end\n    salutes\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205292,"user_id":2525,"body":"function count_salutes(hallway)\n    salutes  = 0\n    r_movers = 0\n    for c in hallway\n        if c == '>'\n            r_movers += 1\n        elseif c == '<'\n            salutes += 2*r_movers\n        end\n    end\n    salutes    \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205293,"user_id":53,"body":"function count_salutes(hallway)\n  r = 0\n  s = 0\n  for i in 1:length(hallway)\n    if hallway[i] == '>'\n      r += 1\n    elseif hallway[i] == '<'\n      s += 2 * r\n    end\n    i += 1\n  end\n  s\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205294,"user_id":421,"body":"function count_salutes(hallway)\n  right = 0\n  salutes = 0\n  for i in 1:length(hallway)\n    if hallway[i] == '>'\n      right += 1\n    elseif hallway[i] == '<'\n      salutes += 2right\n    end\n    i += 1\n  end\n  salutes\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"606efc6a9409580033837dfb":[{"id":205295,"user_id":572,"body":"function plant(seed, water, fert, temp)\n  if 20<=temp<=30\n    return ('-'^water*seed^fert)^water\n  else\n    return ('-'^water^2)*seed\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205296,"user_id":null,"body":"plant(seed, water, fert, temp) = 20 <= temp <= 30 ? ('-'^water*seed^fert)^water : '-'^(water^2)*seed","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205297,"user_id":881,"body":"function plant(seed, water, fert, temp)\n    temp in 20:30 ? ('-' ^ water * seed ^ fert) ^ water : '-' ^ (water ^ 2) * seed\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205298,"user_id":null,"body":"function plant(seed, water, fert, temp)\n  20 <= temp <= 30 || return \"-\"^(water^2) * seed\n  (\"-\"^water * seed ^ fert)^water\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205299,"user_id":null,"body":"plant(seed, water, fert, temp) = 20 \u2264 temp \u2264 30 ? ('-'^water * seed^fert)^water : '-'^(water^2) * seed","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205300,"user_id":2525,"body":"function plant(seed, water, fert, temp)\n    if 20 <= temp <= 30 \n        ('-'^water * seed^fert)^water\n    else\n        '-'^(water^2) * seed\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205301,"user_id":null,"body":"function plant(seed, water, fert, temp)\n    if (20<=temp && temp<=30)\n        plant0 = \"-\"^water * seed^fert\n        plant = plant0^water\n    else\n        plant = \"-\"^(water^2) * seed\n    end\n    \n    return plant\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205302,"user_id":null,"body":"function plant(seed, water, fert, temp)\n  portion = '-'^water; cluster = portion*seed^fert\n  temp in 20:30 ? cluster^water : portion^water*seed\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205303,"user_id":null,"body":"function plant(seed, water, fert, temp)\nstemString   = '-' ^ water; # repeat('-', water)\nflowerString = seed ^ fert; # repeat('stem', fert)\n\nif(temp <= 30 && temp >= 20)\n    plantString = (stemString * flowerString) ^ water;\nelse\n    plantString = (stemString ^ water) * seed;\nend\n  \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205304,"user_id":53,"body":"function plant(seed, water, fert, temp)\n    stem = \"-\"\n    if 20 <= temp && temp <= 30\n        repeat((repeat(stem, water) * repeat(seed, fert)), water)\n    else\n        repeat(repeat(stem, water), water) * seed\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"6071ef9cbe6ec400228d9531":[{"id":205305,"user_id":881,"body":"function dotcalculator(equation::AbstractString)\n    left, op, right = split(equation)\n    l = length(left)\n    r = length(right)\n    \".\" ^ (\n        if op == \"+\"\n            l + r\n        elseif op == \"-\"\n            l - r\n        elseif op == \"*\"\n            l * r\n        else\n            l \u00f7 r\n        end\n    )\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205306,"user_id":null,"body":"dotcalculator(eq) = \".\" ^ eval(Meta.parse(replace(replace(eq, \"\/\/\"=> '\u00f7'), r\"\\.+\" => x-> length(x))))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205307,"user_id":null,"body":"function dotcalculator(equation)\n    splt = split(equation)\n    l1 = length(splt[1])\n    l3 = length(splt[3])\n    \n    if splt[2] == \"+\"\n      \".\"^(l1+l3)\n    elseif splt[2] == \"*\"\n      \".\"^(l1*l3)\n    elseif splt[2] == \"-\"\n      \".\"^(l1-l3)\n    else\n      \".\"^(div(l1,l3))\n    end\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205308,"user_id":168,"body":"function dotcalculator(equation)\n    a, b, c = split(equation, ' ')\n    a, c = length(a), length(c)\n    repeat('.', b == \"+\" ? a + c : b == \"-\" ? a - c : b == \"*\" ? a * c : a \u00f7 c)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"609eee71109f860006c377d1":[{"id":205309,"user_id":null,"body":"function last_survivor(letters, coords)\n    for q in coords\n      letters = letters[1:q-1]*letters[q+1:end]\n    end\n    letters\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205310,"user_id":1474,"body":"function last_survivor(letters, coords)\n  ret = split(letters, \"\")\n  for i in coords\n    splice!(ret, i)\n  end\n  join(ret)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205311,"user_id":null,"body":"function last_survivor(letters, coords)\n    lets = collect(letters)\n    map(i-> deleteat!(lets, i), coords)\n    join(lets)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205312,"user_id":null,"body":"function last_survivor(letters, coords)\n    ltrs = collect(letters)\n    for c in coords\n        deleteat!(ltrs, c)\n    end\n    s = \"\"\n    for l in ltrs\n        s *= string(l)\n    end\n    return s\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205313,"user_id":null,"body":"function last_survivor(letters, coords)\n    while length(coords) > 0\n        letters = letters[1:coords[1]-1] * letters[coords[1]+1:end]\n        deleteat!(coords, 1)\n    end\n    return letters\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205314,"user_id":null,"body":"function last_survivor(letters, coords)\n    ret = collect(letters)\n    for i in coords deleteat!(ret, i) end\n    \"$(ret[1])\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205315,"user_id":50,"body":"function last_survivor(letters, coords)\n  arr = split(letters,\"\")\n  for n in coords\n    deleteat!(arr, n)\n  end\n  join(arr,\"\")\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205316,"user_id":null,"body":"function last_survivor(letters, coords)\n  for idx in coords\n    letters = letters[1:idx-1] * letters[idx+1:end]    \n  end\n  \n  return letters\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205317,"user_id":881,"body":"function last_survivor(letters, coords)\n    result = collect(letters)\n    for coord in coords\n        splice!(result, coord)\n    end\n    join(result)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"60a1aac7d5a5fc0046c89651":[{"id":205318,"user_id":null,"body":"function lastsurvivors(str)\n    if str == \"\" || length(unique(split(str, \"\"))) == length(str)\n        return str\n    else\n        id = 1\n        currentletter = str[id]\n        while id < length(str)\n            next = findnext(currentletter, str, id+1)\n            if next \u2260 nothing\n                str = str[1:id-1]*cycleletter(currentletter)*str[id+1:next-1]*str[next+1:end]\n                id = 1\n            else\n                id += 1\n            end\n            currentletter = str[id]\n        end\n        return str\n    end\nend\n\ncycleletter(c::Char) = c == 'z' ? 'a' : Char(Int(c) + 1)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205319,"user_id":null,"body":"function lastsurvivors(str)\n    srtdstr = join(sort(split(str,\"\")))\n    length(srtdstr)==length(unique(srtdstr)) && return srtdstr\n    g = [group.match for group in eachmatch(r\"(.)\\1*\", srtdstr)]\n    for i in 1:length(g)\n        n, c = divrem(length(g[i]),2), g[i][1]\n        c != 'z' ? g[i] = Char(Int(c)+1)^n[1]*c^n[2] : g[i] = 'a'^n[1]*'z'^n[2]\n    end\n    lastsurvivors(join(g))\nend  ","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205320,"user_id":null,"body":"function lastsurvivors(str)\n  j = 1\n  while j <= length(str)\n    res = findall(str[j:j], str)\n    if length(res) > 1\n      str =  string(str[j]  == 'z' ? 'a' : str[j]+1) * replace.(str, str[j:j] => \"\", count=2)\n      j = 1\n    else\n      j = j + 1\n    end\n  end\n  return str\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205321,"user_id":null,"body":"function upgradeletter(ss)\n    chr = ss[1]\n    n = length(ss)\n    ups = findall(isone, digits(n, base = 2)) .- 1\n    return join('a' + (chr - 'a' + up) % 26 for up in ups)\nend\n\nfunction lastsurvivors(str)\n    sorted = join(sort(collect(str)))\n    while contains(sorted, r\"(.)\\1\")\n        sorted = replace(sorted, r\"(.)\\1{1,}\" => upgradeletter)\n        sorted = join(sort(collect(sorted)))\n    end\n    return sorted\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205322,"user_id":527,"body":"const a = codepoint('a')\nconst n = 26\n\nfunction lastsurvivors(str)\n  m = reduce(+, (1 << (codepoint(c) - a) for c in str); init = 0)\n  while (mh = m >> n) != 0\n    m = mh + m & (1 << n - 1)\n  end\n  join(Char(a + i) for i in 0:n-1 if m & (1 << i) != 0)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205323,"user_id":544,"body":"function lastsurvivors(str)\n    str = String(sort(collect(str)))\n\n    newStr = replaceNextMatch(str)\n    if str == newStr\n      return str\n    else\n      return lastsurvivors(newStr)\n    end\nend\n\nfunction replaceNextMatch(str)\n    pair = match(r\"(.)\\1{1}\", str)\n\n    if isnothing(pair)\n        return str\n    else\n        return replace(str, pair.match => (pair.match[1] == 'z' ? 'a' : pair.match[1] + 1))\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205324,"user_id":53,"body":"function lastsurvivors(str)\n  s = collect(str)\n  if unique(s) == s\n    return str    \n  end\n  for i in 1:length(s)-1\n    for j in i+1:length(s)\n      if s[i] == s[j]\n        c = Char(((Int(s[i])-96)%26)+97)\n        t = deleteat!(deleteat!(s, i), j - 1)\n        prepend!(t, [c])\n        return lastsurvivors(join(t))\n      end\n    end\n  end\n  return \"\"\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205325,"user_id":881,"body":"function lastsurvivors(str)\n    cs = Dict()\n  \n    for c in str\n        cs[c] = get(cs, c, 0) + 1\n    end\n  \n    nextchar(c) = c == 'z' ? 'a' : c + 1\n    \n    while (any(>(1), values(cs)))\n        for (c, n) in pairs(cs)\n            if n > 1\n                d, cs[c] = divrem(n, 2)\n                nc = nextchar(c)\n                cs[nc] = get(cs, nc, 0) + d\n            end\n        end\n    end\n    \n    join(k for (k, v) in pairs(cs) if !iszero(v))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"60a54750138eac0031eb98e1":[{"id":205326,"user_id":881,"body":"function check_vin(vin::AbstractString)::Bool\n    if !occursin(r\"^[A-HJ-NPR-Z0-9]{17}$\", vin)\n        return false\n    end\n\n    lettervalues = Dict((\n        'A'=>1, 'B'=>2, 'C'=>3, 'D'=>4, 'E'=>5, 'F'=>6, 'G'=>7, 'H'=>8, \n        'J'=>1, 'K'=>2, 'L'=>3, 'M'=>4, 'N'=>5, 'P'=>7, 'R'=>9, 'S'=>2, \n        'T'=>3, 'U'=>4, 'V'=>5, 'W'=>6, 'X'=>7, 'Y'=>8, 'Z'=>9, \n        (Pair(d, parse(Int, d)) for d in '0':'9')...\n    ))\n    \n    weights = (8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2)\n\n    checksum = sum(prod.(zip(weights, (lettervalues[letter] for letter in vin)))) % 11\n\n    vin[9] == \"0123456789X\"[checksum + 1]\nend\n","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205327,"user_id":null,"body":"function check_vin(vin::AbstractString)::Bool\n    decode = Dict(zip(collect(\"ABCDEFGHJKLMNPRSTUVWXYZ0123456789\"),\n            [1,2,3,4,5,6,7,8,1,2,3,4,5,7,9,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9]))\n    weights =  [8,7,6,5,4,3,2,10,0,9,8,7,6,5,4,3,2]\n    decoded = [get(decode, ch, 21) for ch in vin]\n    (21 \u2208 decoded || length(decoded)) != 17 && return false\n    remain = sum(decoded .* weights) % 11 \n    remain == 10 && vin[9] == 'X' ? true : string(remain) == string(vin[9]) ? true : false\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205328,"user_id":null,"body":"function check_vin(vin::AbstractString)::Bool\n    if !occursin(r\"^[A-Z0-9]{17}$\", vin) return false end\n    if occursin(r\"[IOQ]\", vin) return false end\n    theJuttus = [1 2 3 4 5 6 7 8 0 1 2 3 4 5 0 7 0 9 2 3 4 5 6 7 8 9]\n    nums = ['0'<=c<='9' ? parse(Int, c) : theJuttus[(c-'A')+1] for c in vin]\n    checkNum = vin[9]=='X' ? 10 : parse(Int, vin[9])\n    ws = [8,7,6,5,4,3,2,10,0,9,8,7,6,5,4,3,2]\n    res = sum(w*x for (w,x) in zip(nums, ws))\n    return res%11 == checkNum\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205329,"user_id":544,"body":"vin_conversion = Dict(zip('A':'Z', Iterators.flatten([1:9, 1:9, 2:9])))\nfor invalid in ['I', 'O', 'Q']\n    delete!(vin_conversion, invalid)\nend\n\nfunction todigit(char)\n    isletter(char) ? get(vin_conversion, char, nothing) : parse(Int, char)\nend\n\nweights = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2]\n\nfunction check_vin(vin::AbstractString)\n    length(vin) \u2260 17 && return false\n\n    all_numbers = map(todigit, collect(vin))\n    \u2208(nothing, all_numbers) && return false\n\n    checksum = sum(all_numbers .* weights) % 11\n    (vin[9] == 'X' && checksum == 10) || tryparse(Int, string(vin[9])) == checksum \nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205330,"user_id":null,"body":"function check_vin(vin::AbstractString)::Bool\n    if length(vin) != 17\n      return false\n    end\n  \n    weights= [8,7,6,5,4,3,2,10,0,9,8,7,6,5,4,3,2]\n    dict=merge(Dict(c=>(d) for (d,c) in enumerate('A':'H')),Dict(c=>d for (d,c) in enumerate('J':'N')),Dict('P'=>7),Dict('R'=>9),Dict(c=>d for (c,d) in zip('S':'Z',2:9)))\n  \n    tmp=0\n    for (n,c) in enumerate(vin)\n        if haskey(dict,c)\n            tmp += dict[c]*weights[n]\n        elseif c in '0':'9'\n            tmp += parse(Int,c)*weights[n]\n        else\n            return false\n        end\n    end\n    return ((mod(tmp,11)==10 && vin[9]=='X') || (!(vin[9]=='X') && mod(tmp,11)==parse(Int,vin[9])))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"60e4dfc1dc28e70049e2cb9d":[{"id":205331,"user_id":null,"body":"function strings_in_max_depth(str::AbstractString)::Vector{String}\n  max_depth_brackets, substring = Vector{String}(), Vector{Char}()\n  depth, max_depth = 0, 0\n  \n  for char in str\n    if char == '('  # increase depth\n      depth += 1      \n      if depth > max_depth\n        # discard provisional brackets, restart substring\n        max_depth = depth\n        max_depth_brackets, substring = Vector{String}(), Vector{Char}()\n      end      \n    elseif char == ')'  # decrease depth\n      if depth == max_depth\n        # save current substring to provisional bracket, restart substring\n        push!(max_depth_brackets, String(substring))\n        substring = Vector{Char}()\n      end      \n      depth -= 1\n    else\n      if depth == max_depth\n        # increase current substring\n        push!(substring, char)\n      end\n    end\n  end\n  \n  if length(max_depth_brackets) == 0\n    return [str]\n  else\n    return max_depth_brackets\n  end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205332,"user_id":null,"body":"function strings_in_max_depth(str::AbstractString)::Vector{String}\n    ss = Dict([(0, [str])])\n    depth = 0\n    q = [0]\n    for (i,c) in enumerate(str)\n      if c=='('\n        push!(q, i+1)\n        depth += 1\n      elseif c==')'\n        if !haskey(ss, depth) ss[depth] = [] end\n        push!(ss[depth], str[pop!(q):i-1])\n        depth -= 1\n      end\n    end\n    return ss[max(keys(ss)...)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205333,"user_id":null,"body":"function strings_in_max_depth(str::AbstractString)::Vector{String}\n    depth, maxdepth, sub, arr = 0, 0, \"\", [str]\n    for c in str\n        if depth == maxdepth && c != '(' && c != ')'\n            sub *= c\n        elseif c == '('\n            depth += 1\n            if depth > maxdepth arr = [] end\n            maxdepth = max(depth, maxdepth)\n            if depth == maxdepth sub = \"\" end\n        elseif c == ')'\n            if depth == maxdepth push!(arr, sub) end\n            depth -= 1\n        end\n    end\n    arr\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205334,"user_id":544,"body":"function strings_in_max_depth(str::AbstractString)#::Vector{String}\n    acc = \"\"\n    foundStrings = []\n    level = 0\n\n    for c in str\n        if c == '('\n            level += 1\n            acc = \"\"\n        elseif c == ')'\n            !isempty(acc) && push!(foundStrings, (acc, level))\n            level -= 1\n            acc = \"\"\n        else\n            acc = acc * string(c)\n        end\n    end\n\n    if isempty(foundStrings)\n        [str]\n    else \n        maxLevel = maximum([tup[2] for tup in foundStrings])\n        [tup[1] for tup in foundStrings if tup[2] == maxLevel]\n    end\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205335,"user_id":null,"body":"function strings_in_max_depth(str::AbstractString)::Vector{String}\n  curdepth = 0\n  maxdepth = 0\n  deepeststrings = []\n  curstr = \"\"\n  for elem in str\n    if elem == '('\n      curstr = \"\"\n      curdepth += 1\n      if curdepth > maxdepth\n        empty!(deepeststrings)\n        maxdepth = curdepth\n      end\n    elseif elem == ')'\n      if curdepth == maxdepth\n        push!(deepeststrings, curstr)\n        curstr = \"\"\n      end\n      curdepth -= 1\n    else\n      curstr *= elem\n    end\n  end\n  curdepth == maxdepth && push!(deepeststrings, curstr)\n  return deepeststrings\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205336,"user_id":881,"body":"function strings_in_max_depth(str::AbstractString)::Vector{String}\n    depth = 0\n    maxdepth = 0\n    result = [\"\"]\n    for char in str\n        if char == '('\n            depth += 1\n            if depth > maxdepth\n                result = [\"\"]\n                maxdepth = depth\n            elseif depth == maxdepth\n                push!(result, \"\")\n            end\n        elseif char == ')'\n            depth -= 1\n        elseif depth == maxdepth\n            result[end] *= char\n        end\n    end\n    result\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"6129095b201d6b000e5a33f0":[{"id":205337,"user_id":null,"body":"function f(x, y, z)\n  x*(y+1)*(z+1) + (x+1)*y*(z+1) + (x+1)*(y+1)*z\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205338,"user_id":50,"body":"function f(x, y, z)\n  return z*(3*x*y+1+2*(x+y))+2*x*y+x+y\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205339,"user_id":null,"body":"function f(x, y, z)\n  3*x*y*z + 2*(x*y + y*z + x*z) + x + y + z\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205340,"user_id":53,"body":"function f(x, y, z)\n  (x * (y + 1) + y * (x + 1)) * (z + 1) + z * (x + 1) * (y + 1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205341,"user_id":527,"body":"f(x, y, z) = x * (y + 1) * (z + 1) + y * (z + 1) * (x + 1) + z * (x + 1) * (y + 1)","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205342,"user_id":421,"body":"f(x, y, z) = x * (y + 1) * (z + 1) + (x + 1) * y * (z + 1) + (x + 1) * (y + 1) * z","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"61c1ffd793863e002c1e42b5":[{"id":205343,"user_id":null,"body":"function canal_mania(low, high, lock)\n    2sum(vcat(low, high, 2max(loads(low, lock), loads(high, lock)))) \nend\n\nfunction loads(queue, lock, load = 0)\n    isempty(queue) && return load\n    indx = findfirst(x-> x > lock, cumsum(queue))\n    loads(queue[(isnothing(indx) ? end+1 : indx):end], lock, load+1)\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205344,"user_id":881,"body":"function canal_mania(lowqueue, highqueue, locklength)\n    low, hi = Iterators.Stateful.((lowqueue, highqueue))\n    time = 0\n    while !isempty(low) || !isempty(hi)\n        time += 2 * (sumwhile(<=(locklength), low) + sumwhile(<=(locklength), hi)) + 4\n    end\n    time\nend\n\nfunction sumwhile(predicate::Function, list)\n    total = 0\n    while !isempty(list) && predicate(total + peek(list))\n        total += popfirst!(list)\n    end\n    total\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205345,"user_id":53,"body":"function canal_mania(a, b, w)\n  m = 0\n  low, hi = Iterators.Stateful.((a, b))\n  while !isempty(low) || !isempty(hi)\n    for q in [low, hi]\n      n = 0\n      while !isempty(q) && n + peek(q) <= w\n        n = n + popfirst!(q)\n      end\n      m = m + 2 * (n + 1)\n    end\n  end\n  m\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205346,"user_id":null,"body":"function canal_mania(lowqueue, highqueue, locklength)\n  t = 0\n  while !isempty(lowqueue) || !isempty(highqueue)\n    inlock = 0\n    while !isempty(lowqueue) && (inlock + lowqueue[1] <= locklength)\n      inlock += lowqueue[1]\n      deleteat!(lowqueue, 1)\n    end\n    t += 2 * inlock + 2\n    inlock = 0\n    while !isempty(highqueue) && (inlock + highqueue[1] <= locklength)\n      inlock += highqueue[1]\n      deleteat!(highqueue, 1)\n    end\n    t += 2 * inlock + 2\n    inlock = 0\n    end\n  return t\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}],"62a611067274990047f431a8":[{"id":205347,"user_id":null,"body":"function alternate(n, firstvalue, secondvalue)\n  collect(Iterators.take(Iterators.cycle([firstvalue, secondvalue]), n))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205348,"user_id":527,"body":"using Base.Iterators\n\nfunction alternate(n, x, y)\n  collect(take(cycle((x, y)), n))\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205349,"user_id":881,"body":"alternate(n, xs...) = collect(Iterators.take(Iterators.cycle(xs), n))","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205350,"user_id":50,"body":"function alternate(n, firstvalue, secondvalue)\n  return repeat([firstvalue, secondvalue],n)[1:n]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205351,"user_id":null,"body":"alternate(n, firstvalue, secondvalue) = repeat([firstvalue, secondvalue], cld(n, 2))[1:n]","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205352,"user_id":168,"body":"function alternate(n, firstvalue, secondvalue)\n  [i % 2 == 1 ? firstvalue : secondvalue for i in 1:n]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205353,"user_id":1474,"body":"function alternate(n, firstvalue, secondvalue)\n  ret = [firstvalue, secondvalue]\n  [ret[i%2+1] for i in 0:n-1]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205354,"user_id":null,"body":"function alternate(n, firstvalue, secondvalue)\n  res = []  \n  for (i, v) in enumerate(Iterators.cycle([firstvalue,secondvalue]))\n      if i > n\n        break\n      end\n      push!(res,v)\n  end\n  res\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205355,"user_id":null,"body":"function alternate(n, firstvalue, secondvalue)\n    vals = (firstvalue, secondvalue)\n  [vals[i % 2 + 1] for i in 0:(n-1)]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"},{"id":205356,"user_id":null,"body":"function alternate(n, firstvalue, secondvalue)\n    [k%2 == 1 ? firstvalue : secondvalue for k in 1:n]\nend","lang_id":28,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:18","updated_at":"2023-01-14 13:24:18"}]}