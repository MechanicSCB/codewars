{"55b51a889a6e76b24a000066":[{"id":44808,"user_id":421,"body":"def generate_postcode()\n  s = ('A'..'Z').to_a.sample\n  digits = (1..9).to_a.sample\n   \"#{s}#{s}#{digits} #{digits}#{s}#{s}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44809,"user_id":53,"body":"def generate_postcode()\n  a = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\")\n  c = [0,1,2,3,4,5,6,7,8,9]\n \"#{a.sample}#{a.sample}#{c.sample} #{c.sample}#{a.sample}#{a.sample}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44810,"user_id":1624,"body":"def generate_postcode()\n  l = (\"A\"..\"Z\").to_a\n  n = (\"0\"..\"9\").to_a\n  [\n    l.sample,\n    l.sample,\n    n.sample,\n    \" \",\n    n.sample,\n    l.sample,\n    l.sample,\n  ].join\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44811,"user_id":null,"body":"def l\n  ('A'..'Z').to_a.sample\nend\n\ndef n\n  (0..9).to_a.sample\nend\n\ndef generate_postcode()\n  \"#{l}#{l}#{n} #{n}#{l}#{l}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44812,"user_id":759,"body":"def l; (64 + rand(26)).chr.to_s end\ndef n; rand(10).to_s end\ndef generate_postcode; l + l + n + \" \" + n + l + l end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44813,"user_id":1828,"body":"def generate_postcode()\n  a = Array.new(7){(\"A\"..\"Z\").to_a.sample}\n  a[2..4] = [\"#{rand(0..9)}\", \" \", \"#{rand(0..9)}\"]\n  return a.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"576ac45e726f4b9f7f000e4a":[{"id":44814,"user_id":421,"body":"def frequency_table(x)\n  x = x.downcase.split\n  x.uniq.map{|a| [a, x.count(a)]}.to_h\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44815,"user_id":null,"body":"def frequency_table(x)\n  (x = x.downcase.split \" \").uniq.each_with_object({} of String => Int32) { |w, o| o[w] = x.count w }.reject { |k, v| k.empty? }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44816,"user_id":null,"body":"def frequency_table(x)\n  freq = {} of String => Int32\n  return freq if x.size == 0\n  x = x.downcase\n  x.split(\" \").each do |x|\n    freq[x] += 1 if freq.has_key?(x)\n    freq[x] = 1 if !freq.has_key?(x)\n  end\n  freq\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44817,"user_id":277,"body":"def frequency_table(x)\n  frequencies = Hash(String, Int32).new\n  x.downcase.split(' ').each do |word|\n    if !word.empty?\n      if frequencies[word]?.nil?\n        frequencies[word]=1\n      else\n        frequencies[word] = frequencies[word]+1\n      end\n    end\n  end\n  return frequencies\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44818,"user_id":759,"body":"def frequency_table(x)\n  a = {} of String => Int32\n  x.downcase.split.each { |w| a[w]? ? (a[w] += 1) : (a[w] = 1) }\n  a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"578df20429281ca490000073":[{"id":44819,"user_id":1624,"body":"def order(string)\n  c = string.chars\n  if c.sort == c\n    \"IN ORDER\"\n  elsif c.sort.reverse == c\n    \"IN REVERSE ORDER\"\n  else\n    \"OUT OF ORDER\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44820,"user_id":1375,"body":"def order(string)\n  order = string.chars.sort.join\n  return \"IN ORDER\" if order == string\n  return \"IN REVERSE ORDER\" if order.reverse == string\n  \"OUT OF ORDER\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44821,"user_id":1474,"body":"def order(string)\n  std = string.chars.sort.join\n  std == string ? \"IN ORDER\" : std == string.reverse ? \"IN REVERSE ORDER\" : \"OUT OF ORDER\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44822,"user_id":1828,"body":"def order(string)\n  str = string.chars\n  return \"IN ORDER\" if str == str.sort\n  str == str.sort.reverse ? \"IN REVERSE ORDER\" : \"OUT OF ORDER\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44823,"user_id":1403,"body":"def order(string)\n  string = string.chars\n  string == string.sort ? \"IN ORDER\" : string == string.sort.reverse ? \"IN REVERSE ORDER\" : \"OUT OF ORDER\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44824,"user_id":1072,"body":"def order(i) b=i.split(\"\").sort; i==b.join ? \"IN ORDER\" : i==b.reverse.join ? \"IN REVERSE ORDER\" : \"OUT OF ORDER\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57cc5f9258da9e47bc000143":[{"id":44825,"user_id":1072,"body":"def copy(arr,a,b,p) a,b,p=a<0 ? arr.size+a : a,b<0 ? arr.size+b : b,p<0 ? arr.size+p : p; arr[0,p]+arr[a,[b-a,0].max]+arr[p+[b-a,0].max,9999] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57d14a9d95497e9912000267":[{"id":44826,"user_id":2986,"body":"def bath(s,x)\n  s.size > x.size - 2 \nend\n\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44827,"user_id":421,"body":"def bath(s,x)\n  s.size > x.count('~')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44828,"user_id":null,"body":"def bath(s,x)\n  return false if x.scan(\/~\/).size > s.size\n  true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44829,"user_id":1701,"body":"def bath(s,x)\n  return s.size > x.size - 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44830,"user_id":null,"body":"def bath(s,x) s.size>x.size-2 ? true : false end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57e56c416cb50810f300002d":[{"id":44831,"user_id":421,"body":"def list_mix(ls)\n  ls.sort!\n  median = ls.size.odd? ? ls[ls.size \/ 2]: (ls[ls.size \/ 2] + ls[ls.size \/ 2 - 1]) \/ 2.0\n  [ls.max, ls.min, median, ls.sum.fdiv(ls.size).round(2)]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44832,"user_id":null,"body":"def list_mix(ls)\n  [ls.max, ls.min, ls.size.odd? ? ls.sort[ls.size \/ 2] : (ls.sort[(ls.size \/ 2 - 1)..(ls.size \/ 2)].sum \/ 2.0).round(2), (ls.sum \/ ls.size.to_f64).round(2)]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44833,"user_id":1828,"body":"def list_mix(ls)\n  l = ls.size; i = l\/2; a = ls.sort\n  med = l.even? ? (a[i-1]+a[i]).fdiv(2).round(2) : a[i]\n  [ls.max, ls.min, med ,ls.sum.fdiv(l).round(2)]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44834,"user_id":2986,"body":"def mean(array)\n  (array.reduce(0) { |acc, i| acc + i } \/ array.size.to_f).round(2)\nend\n\ndef median(array)\n  return nil if array.empty?\n  array = array.sort\n  m_pos = array.size \/ 2\n  return (array.size % 2 == 1 ? array[m_pos] : mean(array[m_pos-1..m_pos])).round(2)\nend\n\ndef list_mix(ls)\n  max = ls.max\n  min = ls.min\n  med = median(ls)\n  mea = mean(ls)\n  [max, min, med, mea]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57e8e9df2aee49c0280009ab":[{"id":44835,"user_id":421,"body":"def bareable(heat, humidity)\n   !(humidity > 0.5 || heat > 35 || humidity > 0.4 && heat > 25 && heat < 36)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44836,"user_id":null,"body":"def bareable(heat, humidity)\n  !(humidity > 0.5 || heat >= 36 || 25 < heat && heat < 36 && humidity > 0.4)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44837,"user_id":1624,"body":"def bareable(heat, humidity)\n  (heat <= 35) && (humidity <= 0.5) && (heat <= 25 || humidity <= 0.4)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44838,"user_id":76,"body":"def bareable(heat, humidity)\n    humidity <= 0.5 && heat < 36 && (heat >= 25 && humidity <= 0.4 || heat < 25)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44839,"user_id":1828,"body":"def bareable(heat, humidity)\n  heat > 35 || humidity > 0.5 || heat < 36 && heat > 25 && humidity > 0.4 ? false : true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"581dc45f2228a31c13000389":[{"id":44840,"user_id":2986,"body":"def history_substitition(s,history)  \n  # Extract string1 and string2\n  strings = s.split(\"^\")\n  strings.delete(\"\")\n  string1 = strings[0]\n  string2 = strings[1] rescue \"\".to_s\n  \n  cmd = history.split(\/\n\/).last.sub(\/\\A\\s+\\d+\\s+\/,\"\")\n  \n  if cmd.index(string1) \n    return cmd.sub(string1,string2)\n  else\n    string2 == \"\" ? \":s^#{string1}: substitution failed\" : \":s^#{string1}^#{string2}: substitution failed\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5826bd59083e12abf9000016":[{"id":44841,"user_id":2986,"body":"def history_grep(s,history)\n  grep_history = history.split(\"\n\")\n  grep_history.select!{|cmd| cmd.index(s)}\n  grep_history.join(\"\n\") + \"\n\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58348ae9ed088ccf96000005":[{"id":44842,"user_id":421,"body":"def count_vowels(string)\n   string.count(\"aeiouAEIOU\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44843,"user_id":null,"body":"def count_vowels(string)\n  # this would be the correct solution:\n  # string.split(' ').count { |s| s.downcase.chars.count { |c| \"aeiou\".includes? c } > 1 }\n  \n  # but instead this is:\n  string.chars.count { |c| \"AEIOUaeiou\".includes? c }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44844,"user_id":1624,"body":"def count_vowels(s)\n  # Description does not match the kata\n  s.downcase.split(\"\").grep(\/[aeoui]\/).size\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44845,"user_id":null,"body":"def count_vowels(string)\n  sum : Int32 = 0\n  string.downcase.each_char do |x|\n    sum += 1 if x == 'e' || x == 'u' || x == 'a' || x == 'o' || x == 'i'\n  end\n  sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44846,"user_id":527,"body":"def count_vowels(string)\n  string.count(\"AEIOUaeiou\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44847,"user_id":1072,"body":"def count_vowels(s) s.downcase.scan(\/[aeiou]\/).size end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5859d3325a8a0747180000c6":[{"id":44848,"user_id":2986,"body":"def hello(name)\n  \"Hello, #{name}\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44849,"user_id":null,"body":"def hello(name)\n  \"Hello, \"+name\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44850,"user_id":645,"body":"def hello(x)\n  \"Hello, #{x}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44851,"user_id":null,"body":"def hello(name)\n  return \"Hello, \" + name\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44852,"user_id":2623,"body":"def hello(name)\n  return \"Hello, #{name}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"585ade78f59b3c83c1000059":[{"id":44853,"user_id":421,"body":"def golden?(x, y)\n  (y \/ x.to_f).round(3) == 1.618 || (x \/ y.to_f).round(3) == 1.618\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44854,"user_id":492,"body":"# return the two oldest\/oldest ages within the array of ages passed in.\n# it should return the two ages as a sorted array, youngest age first\ndef golden?(x, y)\n  return false if x == y\n  (y\/(x-y)).round(2) == (x\/y).round(2) ? true : false\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44855,"user_id":1624,"body":"# return the two oldest\/oldest ages within the array of ages passed in.\n# it should return the two ages as a sorted array, youngest age first\ndef golden?(x, y)\n  (x \/ y).round(3) == 1.618\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44856,"user_id":1828,"body":"# return the two oldest\/oldest ages within the array of ages passed in.\n# it should return the two ages as a sorted array, youngest age first\ndef golden?(x, y)\n  x.fdiv(y).round(3) == 1.618\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5861753eeec141a13200011d":[{"id":44857,"user_id":421,"body":"def beats_marketing(slogan)\n  variation = {\n    :upCase => slogan.upcase,\n    :lowCase => slogan.downcase,\n    :exClamated => slogan + '!'\n  }\n  variation\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44858,"user_id":2986,"body":"def beats_marketing(slogan)\n  variation = {\n    upCase:     slogan.upcase,\n    lowCase:    slogan.downcase,\n    exClamated: slogan + \"!\"\n  };\n  return variation;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44859,"user_id":1624,"body":"def beats_marketing(slogan)\n  {\n    upCase: slogan.upcase,\n    lowCase: slogan.downcase,\n    exClamated: slogan+\"!\",\n  }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44860,"user_id":null,"body":"def beats_marketing(slogan)\n  {:upCase => slogan.upcase, :lowCase => slogan.downcase, :exClamated => \"#{slogan}!\"}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5874d1c9d5abe8e534000235":[{"id":44861,"user_id":421,"body":"def get_two_complement_int(n)\n   n.to_s(2).tr(\"01\", \"10\").to_i(2) + 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44862,"user_id":1072,"body":"def get_two_complement_int(n) n.to_s(2).split(\"\").map{|d| d==\"0\" ? \"1\" : \"0\"}.join.to_i(2)+1 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44863,"user_id":1072,"body":"def get_two_complement_int(n) n.to_s(2).split(\"\").map{|d| d==\"0\" ? \"1\" : \"0\"}.join.to_i(2)+1 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5881a5a2ff359a4b450000d7":[{"id":44864,"user_id":1072,"body":"def calc_gas(m) (m*2\/25.0).round(2) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5881ae7d3a5cc4f14700002a":[{"id":44865,"user_id":527,"body":"def check_tense(word)\n  word.ends_with?(\"ed\") ? \"Past\" : \"Present\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44866,"user_id":1072,"body":"def check_tense(word) word[word.size-2...word.size]==\"ed\" ? \"Past\" : \"Present\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"588450296ddcc17ad4000053":[{"id":44867,"user_id":3089,"body":"def calc_investment(investors, amount)\n  return (0.0025 * amount * investors).round\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44868,"user_id":1828,"body":"def calc_investment(investors, amount)\n  (0.0025*investors*amount).round\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44869,"user_id":1072,"body":"def calc_investment(a,b) (a*b*0.0025).round end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5884ee2465fc9c8dee0005e8":[{"id":44870,"user_id":1072,"body":"def sentence_count(s) s.count(\"!\")+s.count(\"?\")+s.count(\".\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44871,"user_id":1072,"body":"def sentence_count(s) s.count(\"!\")+s.count(\"?\")+s.count(\".\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5886677b9a08e2f9c90000c7":[{"id":44872,"user_id":421,"body":"def calculate_payment(p0, amortization, interestRate)\n  n = amortization * 12\n  r = interestRate \/ 1200.0\n  (1.0 * r * p0 \/ (1 - (1 + r) ** (-n))).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44873,"user_id":1072,"body":"def calculate_payment(p,a,i) r=i\/1200.0; (r*p\/(1-(1+r)**(-a*12))).round(2) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58b6f701c298fe0f63000066":[{"id":44874,"user_id":1072,"body":"def which_oper(n1,n2,op) op==\"add\" ? n1+n2 : op==\"subtract\" ? n1-n2 : op==\"multiply\" ? n1*n2 : n1\/n2 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58be3f72c1dd1e6ec0000091":[{"id":44875,"user_id":null,"body":"def render_inventory(inventory)\n  a = [] of String; inventory.each { |i| i[\"products\"].each { |p| a << String.build { |s| s << \"#{i[\"name\"]}, #{p[\"name\"]}, #{p[\"price\"]}\" } } }; a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44876,"user_id":null,"body":"def render_inventory(inventory)\n  expected = [] of String\n\n  inventory.each do |val|\n    val[:products].each do |x|\n      expected << \"#{val[:name]}, #{x[:name]}, #{x[:price]}\"\n    end\n  end\n\n  \n  expected\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44877,"user_id":759,"body":"def render_inventory(inventory)\n  result = [] of String\n  inventory.each do |client|\n    client[:products].each do |product|\n      result << \"#{client[:name]}, #{product[:name]}, #{product[:price]}\"\n    end\n  end\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44878,"user_id":1828,"body":"def render_inventory(inventory)\n  res = [] of String\n  inventory.each do |i|\n    i[:products].each do |j|\n      res << \"#{i[:name]}, #{j.values.join(\", \")}\"\n    end\n  end\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58d3dd53b0fe8c9ac10000b3":[{"id":44879,"user_id":null,"body":"def remove_o(string)\n  string.tr \"o\", \"\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44880,"user_id":76,"body":"def remove_o(s)\n  s.delete('o')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44881,"user_id":null,"body":"def remove_o(string)\n  string.gsub(\/o\/, \"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44882,"user_id":527,"body":"def remove_o(string)\n  string.delete('o')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44883,"user_id":1072,"body":"def remove_o(s) s.gsub(\"o\",\"\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5914b412921f67e678000050":[{"id":44884,"user_id":527,"body":"def is_pi(n)\n  3.14 <= n && n <= Math::PI\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44885,"user_id":1072,"body":"def is_pi(n) n>=3.14 && n<=3.1415926535897932384626433832795028841971 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5926d7494b2b1843780001e6":[{"id":44886,"user_id":527,"body":"def add(*args)\n  args.sum(0)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44887,"user_id":421,"body":"def add(*n)\n  n.reduce(0){|x, y| x + y}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44888,"user_id":1624,"body":"def add(*args)\n  args.sum\nend\n\ndef add()\n  0\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44889,"user_id":490,"body":"def add(*args)\n  res = 0\n  args.each do |i|\n    res += i\n  end\n  res\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44890,"user_id":1474,"body":"def add(*args)\n  args.reduce(0){ |a, b| a + b }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44891,"user_id":1828,"body":"def add(*n) r = 0; n.each{|i| r += i}; r end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44892,"user_id":527,"body":"def add\n  0\nend\n\ndef add(*args)\n  args.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44893,"user_id":1072,"body":"def add(*n) n.reduce(0){|a,b|a+b} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5935ecef7705f9614500002d":[{"id":44894,"user_id":null,"body":"def detect(comment)\n  comment.starts_with?(\"Can someone explain\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44895,"user_id":null,"body":"def detect(comment)\n  (comment =~ \/^Can someone explain\/) == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44896,"user_id":527,"body":"def detect(comment : String) : Bool\n  comment.starts_with?(\"Can someone explain\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44897,"user_id":53,"body":"def detect(comment)\n  comment.starts_with?(\/(Can someone explain)\/)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44898,"user_id":48,"body":"def detect(c)\n  c.starts_with?(\"Can someone explain\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44899,"user_id":2795,"body":"def detect(comment)\n  if comment.starts_with?(\"Can someone explain\")\n    true\n  else\n    false\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44900,"user_id":1072,"body":"def detect(s) (s=~\/^Can someone explain\/) != nil end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5938fca106c3037d72000194":[{"id":44901,"user_id":233,"body":"def greet(name)\n  \"Hey #{name}!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44902,"user_id":1072,"body":"def greet(n) \"Hey #{n}!\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5956a69343e2a8e67b00000a":[{"id":44903,"user_id":1072,"body":"def swap(a,b) [b,a] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44904,"user_id":null,"body":"def swap(a, b)\n  return [a,b].reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44905,"user_id":null,"body":"def swap(a, b)\n  return [b, a]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59580a14838112d91f000174":[{"id":44906,"user_id":421,"body":"def can_climb(rope_length,climb_height)\n  rope_length.is_a?(Number) && climb_height.is_a?(Number) ? rope_length * 3.28 >= climb_height * 2 : nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44907,"user_id":null,"body":"def can_climb(rope_length,climb_height)\n  return nil unless rope_length.is_a? Number && climb_height.is_a? Number\n  rope_length * 2 >= climb_height\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44908,"user_id":1624,"body":"def can_climb(r,c)\n  return nil unless r.is_a?(Number) && c.is_a?(Number)\n  r*2 >= c\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44909,"user_id":null,"body":"def can_climb(rope_length,climb_height)\n  return nil if !rope_length.is_a?(Int32 | Float64) || !climb_height.is_a?(Int32 | Float64)\n  \n  # Conversion feet -> meters\n  climb_height_meters = 0.3048 * climb_height\n  return true if climb_height_meters * 2 < rope_length\n  false\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44910,"user_id":1072,"body":"def can_climb(r,c) [r.class,c.class].all?{|e| [Int32,Float64].includes?(e)} ? r.to_s.to_f>=c.to_s.to_f*0.6096 : nil end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44911,"user_id":1072,"body":"def can_climb(r,c) [r.class,c.class].all?{|e| [Int32,Float64].includes?(e)} ? r.to_s.to_f>=c.to_s.to_f*0.6096 : nil end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5963a97e33b908c26400000c":[{"id":44912,"user_id":1072,"body":"def function_factory(x,y,o) ->() {o==\"+\" ? x+y : o==\"-\" ? x-y : o==\"*\" ? x*y : o==\"\/\" ? x\/y : x%y} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44913,"user_id":645,"body":"def function_factory(x, y, o)\n  sol(x, y, o)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59781c959b82f6ee4f0000c0":[{"id":44914,"user_id":1624,"body":"def int_2_bin(num)\n  return \"0\" if num == 0\n  \"0\" + num.to_s(2)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44915,"user_id":527,"body":"def int_2_bin(num : Int) : String\n  num != 0 ? \"0\" + num.to_s(2) : \"0\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44916,"user_id":1072,"body":"def int_2_bin(n) \"0#{n==0 ? \"\" : n.to_s(2)}\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59b065ba8173abcf92000135":[{"id":44917,"user_id":2563,"body":"require \"json\"\n\ndef json_leaves(json)\n    j = JSON.parse_raw(json)\n    parse_leaves(\"\", j)\nend\n\ndef parse_leaves(root : String, json : JSON::Type) : Array(String)\n\n    l = [] of String\n\n    case json\n    when Hash   # object\n        root += \".\" if root != \"\"\n        json.each {|key, value| l += parse_leaves(root + key, value) }\n        l\n    when Array\n        json.each_index {|i| l += parse_leaves(root + \"[\" + i.to_s + \"]\", json[i]) }\n        l\n    when String\n        [root + %(=\"#{json}\")]\n    when Nil\n        [root + \"=null\"]\n    else\n        [root + \"=\" + json.to_s]\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a734929373c2e1f7100009d":[{"id":44918,"user_id":1072,"body":"def explosive(n) n<=(2..n**0.5).reduce(1){|a,b| a+(n%b == 0 ? b+n\/b : 0)} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5adf3cd70774db8e8c000007":[{"id":44919,"user_id":421,"body":"def porges_cycle(n)\n  lst = [n]\n  while !lst.includes?(1)\n    n = n.to_s.chars.sum{|x| x.to_i ** 2}\n    lst << n\n    if lst.count(n) == 2\n      return n\n    end\n  end\n  -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44920,"user_id":527,"body":"def porges_cycle(n : Int32) : Int32\n  seen = Set(Int32).new\n  until seen.includes?(n)\n    seen << n\n    n = digits(n).sum{ |d| d ** 2 }\n  end\n  n != 1 ? n : -1\nend\n\ndef digits(n)\n  Iterator.of do\n    next Iterator.stop if n == 0\n    n, d = n.divmod(10)\n    d\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44921,"user_id":1072,"body":"def porges_cycle(n) n==1 ? -1 : [4,16,37,58,89,145,42,20].includes?(n) ? n : porges_cycle(n.to_s.split(\"\").reduce(0){|a,b| a+b.to_i**2}) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5b56fdf94c82f1f1c3000cd3":[{"id":44922,"user_id":421,"body":"def queue(queuers,pos)\n  queuers.map_with_index{|x, i| [queuers[pos] - (i > pos ? 1 : 0), queuers[i]].min}.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44923,"user_id":null,"body":"def queue(q, pos, g = q[pos])\n  (0...q.size).map { |i| z = (pos >= i ? g : g - 1); q[i] > z ? z : q[i] }.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44924,"user_id":527,"body":"def queue(ns, p)\n  ns.each_with_index.sum{ |n, i| {n, i <= p ? ns[p] : ns[p] - 1}.min }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44925,"user_id":1072,"body":"def queue(q,p) i=-1; q.reduce(0){|a,b| i+=1; a+[q[p]-(i>p ? 1 : 0),b].min} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5b830cce4a6acaddf90000b8":[{"id":44926,"user_id":1072,"body":"def saint_petersburg_paradox(p,s) (0...s).reduce(0){|a,b| a+p**b} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5c01c1525486bf12bd0001cd":[{"id":44927,"user_id":1072,"body":"def year_max_people(r) res=r.reduce([] of Array(Int32)){|a,b| a+[[b[0], 0], [b[1], 1]]}.sort.reduce([0, 0, -1]){|a,b| p = a[0] + (b[1] == 0 ? 1 : -1); [p, [p, a[1]].max, p > a[1] ? b[0] : a[2]]}[1, 2]; Tuple.new(res[0],res[1]) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5d37899a3b34c6002df273ee":[{"id":44928,"user_id":421,"body":"def cant_beat_so_join(numbers)\n   numbers.sort_by{|x| -x.sum}.flatten\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44929,"user_id":645,"body":"def cant_beat_so_join(numbers)\n  numbers.sort_by(&.sum.*(-1)).flatten\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44930,"user_id":527,"body":"def cant_beat_so_join(numbers)\n  numbers.each_with_index.to_a.sort_by!{ |ns, i| {-ns.sum, i} }.flat_map(&.first)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44931,"user_id":645,"body":"def cant_beat_so_join(numbers)\n  return numbers.sort do | a, b |\n    b.sum <=> a.sum\n  end.flatten\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44932,"user_id":645,"body":"def cant_beat_so_join(numbers)\n  return numbers.sort do | a, b |\n    b.sum <=> a.sum\n  end.flatten\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5e29d57ac6b9af00333abd19":[{"id":44933,"user_id":863,"body":"module Forth\n  alias Stack = Array(Int32)\n  alias Operation = Proc(Stack, Stack)\nend\n\nmodule Forth\n  struct Statement\n    getter text : String\n    forward_missing_to @text\n    getter? new_word : Bool\n    def initialize(string)\n      @text = string.strip\n      @new_word = @text.starts_with?(':')\n    end\n  end\nend\n\nrequire \"string_scanner\"\nmodule Forth\n  class Lexer\n    include Iterator(Statement)\n\n    def initialize(source)\n      @source = StringScanner.new(source.upcase)\n    end\n\n    def next\n      (@source.scan(\/:[^;]+(?:;\\s*)|(?:\\s*)[^\\s]+(?:\\s*)\/).try &->Statement.new(String)) || stop\n    end\n  end\nend\n\nmodule Forth\n  class Parser\n    DICTIONARY = {\n      \"DUP\" => ->(stack : Stack) { stack.push(stack.last) },\n      \"DROP\" => ->(stack : Stack) { stack.pop; stack },\n      \"SWAP\" => ->(stack : Stack) { stack[-2], stack[-1] = stack[-1], stack[-2]; stack },\n      \"OVER\" => ->(stack : Stack) { stack << stack[-2] },\n      \"+\" => ->(stack : Stack) { a, b = stack.pop(2); stack << a + b },\n      \"-\" => ->(stack : Stack) { a, b = stack.pop(2); stack << a - b },\n      \"\/\" => ->(stack : Stack) { a, b = stack.pop(2); stack << a \/ b },\n      \"*\" => ->(stack : Stack) { a, b = stack.pop(2); stack << a * b }\n    }\n    @dict : Hash(String, Operation)\n    def initialize\n      @dict = DICTIONARY.dup\n    end\n\n    def parse(word)\n      @dict[word]?\n    end\n\n    def add_word(statement)\n      statement.match(\/^:\\s+(?<name>[^\\d\\s]+)\\s+(?<def>(?:\\S+\\s+)+);$\/).try do |matches|\n        @dict[matches[\"name\"]] = matches[\"def\"].split.reduce(->(s : Stack) { s }) do |memo, word|\n          proc = parse(word) || ->(s : Stack) { s << word.to_i }\n          ->(s : Stack) { proc.call(memo.call(s)) }\n        end\n      end || raise ArgumentError.new \"Bad definition: #{statement}\"\n    end\n  end\nend\n\nmodule Forth\n  class Interpreter\n    def initialize(source)\n      @program = Lexer.new(source)\n      @dict = Parser.new\n    end\n\n    def run\n      @program.each_with_object(Stack.new) do |statement, stack|\n        if statement.new_word?\n          @dict.add_word(statement)\n        elsif (op = @dict.parse(statement.text))\n          op.call(stack)\n        else\n          stack << statement.to_i\n        end\n      end\n    end\n  end\nend\n\nmodule Forth\n  def self.evaluate(source)\n    Interpreter.new(source).run\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"51c8e37cee245da6b40000bd":[{"id":44934,"user_id":645,"body":"def solution(input : String, markers : Array(String))\n  input.each_line.join(\"\n\") do |l|\n    m = markers.map { |x| l.index(x) }.compact.min?\n    m.nil? ? l : l[0...m].strip\n  end\nend\n","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44935,"user_id":null,"body":"def solution(input : String, markers : Array(String))\n  return input if markers.empty?\n  input.lines.map do |line|\n    line.gsub(\/\\s*#{Regex.union(markers)}.*\/, \"\")\n  end.join(\"\n\")\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44936,"user_id":50,"body":"def solution(input : String, markers : Array(String))\n  a=input.split(\"\n\")\n  markers.each{|m| a=a.map{|x| f(m,x)}}\n  a.join(\"\n\")\nend\ndef f(m,x)\n  o=\"\"\n  i=x.index(m)\n  !i ? x : i==0 || x==m.to_s ? \"\" : x[0..i-1].gsub(\/ +$\/,\"\")\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44937,"user_id":null,"body":"def solution(input : String, markers : Array(String))\n  return input if markers.size == 0\n  start = \/^(#{markers.map { |m| \"\\\\#{m}\" }.join(\"|\")}).*\/\n  pattern = \/\\s+(#{markers.map { |m| \"\\\\#{m}\" }.join(\"|\")}).*\/\n  input.split(\"\n\")\n    .map { |str| str.gsub(start, \"\").empty? ? \"\" : str.gsub(pattern, \"\") }\n    .join(\"\n\")\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44938,"user_id":null,"body":"def solution(input : String, markers : Array(String))\n  set = markers.map(&.[0]).to_set\n  input.lines.map do |line|\n    str = line.chars.take_while{ |c| !c.in?(set) }.join\n    str.size == line.size ? str : str.rstrip\n  end.join(\"\n\")\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44939,"user_id":null,"body":"def solution(input : String, markers : Array(String))\n  str = String.build do |str|\n    input.each_line do |line|\n      idx = line.size\n      markers.each do |m|\n        i = line.index(m)\n        idx = i if i && i < idx\n      end\n      el = line[0...idx]\n      while el.ends_with?(' ') && !el.ends_with?(\" , \")\n        el = el.chomp(' ')\n      end\n      str << el\n      str << \"\n\"\n    end\n  end\n  str.chomp\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44940,"user_id":null,"body":"def solution(input : String, markers : Array(String))\n  return input if markers.size==0\n  output=input.each_line(chomp=false).map do |line|\n    poslist=markers.map { |m| line.index(m)}.compact\n    if poslist.size >0\n      pos=poslist.min \n      line[0..pos-1].rstrip unless pos==0\n    else\n      line.chomp\n    end\n  end.join \"\n\"\nend\n","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44941,"user_id":null,"body":"def solution(input : String, markers : Array(String))\n  return input if markers.empty?\n  comment_regex = Regex.union(markers)\n  input.lines.map { |line|\n    if comment = line.match(comment_regex)\n      ci = comment.begin\n      line[0...ci].rstrip \n    else\n      line\n    end\n  }.join('\n')\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44942,"user_id":null,"body":"def solution(input : String, markers : Array(String))\n  return input if markers.size == 0\n  input.split(\"\n\").map { |i| i.split(Regex.union(markers)).first.rstrip }.join(\"\n\")\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44943,"user_id":null,"body":"def solution(input : String, markers : Array(String))\n  return input if markers.empty?\n  m = markers.uniq.map {|c| \"?$^+.*\".includes?(c) ? \"\\\\\" + c.chomp : c.chomp}.join \"|\"\n  r = \/\\s*(#{m}).*\/\n  input.each_line.map {|l| l.sub(r, \"\")}.join \"\n\"\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"521c2db8ddc89b9b7a0000c1":[{"id":44944,"user_id":645,"body":"def snail(xs)\n  xs.empty? ? [] of Int32 : xs.shift + snail(xs.transpose.reverse)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44945,"user_id":50,"body":"def snail(a)\n  o=[]of Int32\n  n=a.size\n  if n==0\n    return o\n  end\n  i=0\n  j=n-1\n  k=1\n  a[0].each do |h|\n    o.push(h)\n  end\n  until n==0\n    n-=1\n    (0..n-1).each do\n      i+=k\n      o.push(a[i][j])\n      end\n    k=-k\n    (0..n-1).each do\n      j+=k\n      o.push(a[i][j])\n      end\n    end\n  o\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44946,"user_id":null,"body":"def mt(xs : Array(Array(Int32)), idx : Int32, n : Int32)\n  case n\n  when 0\n    [] of Int32\n  when 1\n    xs[0].size == 0 ? [] of Int32 : [xs[idx][idx]]\n  else\n    tab = Array(Int32).new(4*n - 4, 0)\n    i = 0\n    (0...n).each do |j|\n      tab[i] = xs[idx][idx + j]\n      i += 1\n    end\n    (1...n).each do |j|\n      tab[i] = xs[idx + j][idx + n - 1]\n      i += 1\n    end\n    (0...n-1).reverse_each do |j|\n      tab[i] = xs[idx + n - 1][idx + j]\n      i += 1\n    end\n    (1...n-1).reverse_each do |j|\n      tab[i] = xs[idx + j][idx]\n      i += 1\n    end\n    tab + mt(xs, idx + 1, n - 2)\n  end\nend\n\ndef snail(xs)\n  mt(xs, 0, xs.size)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44947,"user_id":null,"body":"def snail(xs)\n  xs.any? ? xs.shift + snail(xs.transpose.reverse) : xs\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44948,"user_id":null,"body":"def snail(arr)\n  res = Array(Int32).new\n  until arr.empty?\n    arr.shift.each {|w| res << w}\n    arr.each {|w| res << w.pop}\n    arr.reverse!.map! {|w| w.reverse}\n  end\n  return res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44949,"user_id":null,"body":"def snail(xs)\n  res = [] of Int32\n  while xs.size > 0 \n    res += xs.shift\n    xs = xs.map(&.reverse).transpose\n  end\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44950,"user_id":null,"body":"def snail(xs)\n  n = xs.size\n  nxt, direction = [0], [[-1*n,1], [n,-1]]   #[[up,right],[down,left]]\n  return nxt.clear if xs.flatten.size == 0\n\n  (n-1).times{nxt << (nxt[-1]+1)}   # right across top.\n\n  (1...n).each do |a|   #down,left if odd.  up,right if even.\n    (n-a).times{nxt << (nxt[-1]+direction[a%2][0])}\n    (n-a).times{nxt << (nxt[-1]+direction[a%2][1])}\n  end\n\n  nxt.map{|b| xs.flatten[b]}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44951,"user_id":null,"body":"def snail(xs)\n  result = xs.shift\n  until xs.empty?\n    p! xs\n    xs = xs.map(&.reverse).transpose\n    result += xs.shift\n  end\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44952,"user_id":53,"body":"def snail(array)\n  res = [] of Int32\n  n = array.size\n  if n == 0 || (n == 1 && array[0].size == 0)\n    return res\n  end\n  x = -1\n  y = 0\n  dx = 1\n  dy = 0\n  l = array[0].size\n  while l > 0\n    i = 0\n    while i < l\n      x = x + dx\n      y = y + dy\n      res.push(array[y][x])\n      i = i + 1\n    end\n    tx = dx\n    ty = dy\n    dx = -dy\n    dy = tx\n    if ty == 0\n      l = l - 1\n    end\n  end\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44953,"user_id":null,"body":"def snail(xs)\n    n = xs[0].size\n    if n == 0\n       return [] of Int32\n    end\n    puts n\n    i = 0\n    j = 0\n    acc = Array(Int32).new\n    (0...n).each do |i|\n        acc.push xs[0][i]\n    end\n    pos = { 0, n-1 }\n    pathlen = n-1\n    dir = { 1, 0 }\n    while pathlen > 0\n        2.times do\n            pathlen.times do\n                pos = { pos[0] + dir[0], pos[1] + dir[1] }\n                acc.push xs[pos[0]][pos[1]]\n            end\n            dir = { dir[1], -dir[0] }\n        end\n        pathlen -= 1\n    end\n    acc\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"52b7ed099cdc285c300001cd":[{"id":44954,"user_id":645,"body":"def sum_of_intervals(intervals : Array(Tuple(Int32, Int32)))\n  intervals.flat_map do |a, b| (a...b).to_a end.uniq.size\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44955,"user_id":null,"body":"def sum_of_intervals(intervals : Array(Tuple(Int32, Int32)))\n  intervals.map { |s, e| (s...e).to_a }.reduce { |acc, curr| acc + curr }.uniq.size\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44956,"user_id":53,"body":"def sum_of_intervals(intervals : Array(Tuple(Int32, Int32)))\n  res = ([] of Int32).to_set\n  intervals.each{|t|\n    a,b = t\n    (a...b).each{|i|\n      res.add(i)\n    }\n  }\n  res.size\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44957,"user_id":null,"body":"def sum_of_intervals(i : Array(Tuple(Int32, Int32)))\n  i.transpose.map(&.sort).transpose.chunk_while{|p,n| p[-1] > n[0] }.map(&.flatten.minmax).sum{|f,l| l-f}\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44958,"user_id":421,"body":"def sum_of_intervals(intervals : Array(Tuple(Int32, Int32)))\n   intervals.map{|x| (x.min...x.max).to_a}.flatten.uniq.size\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44959,"user_id":null,"body":"\nclass Intervals\n  def initialize\n    @a = Array(Set(Int32)).new\n  end\n\n  def add(t : Tuple(Int32, Int32))\n    s = Set(Int32).new\n    t[0].upto t[1] - 1 do |n|\n      s.add(n)\n    end\n    @a << s\n  end\n\n  def sum\n    superset = Set(Int32).new\n    @a.each do |s|\n      superset += s\n    end\n    superset.size\n  end\nend\n\ndef sum_of_intervals(intervals : Array(Tuple(Int32, Int32)))\n  x = Intervals.new\n  intervals.each do |i|\n    x.add i\n  end\n  x.sum\nend\n","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44960,"user_id":null,"body":"def insert_interval(intervals, i)\n  intervals.size.times do |x|\n    l, h = intervals[x]\n    if (i[0] <= h && i[1] >= l)\n      intervals.delete_at(x)\n      insert_interval(intervals, {Math.min(i[0], l), Math.max(i[1], h)})\n      return\n    end\n  end\n  intervals << i\nend\n\ndef sum_of_intervals(intervals : Array(Tuple(Int32, Int32)))\n  r = [intervals.shift]\n  intervals.each do |i|\n    insert_interval(r, i)\n  end\n  r.sum {|i| i[1]-i[0]}\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44961,"user_id":null,"body":"class Intv\n    property lson, rson, lt, rt\n    def initialize(@lt : Int32, @rt : Int32)\n        @lson = nil.as Intv?\n        @rson = nil.as Intv?\n    end\n\n    def disjoint_rt(other : Intv)\n        if other.rt <= @rt\n            nil\n        else\n            Intv.new(max(@rt, other.lt), other.rt)\n        end\n    end\n\n    def disjoint_lt(other : Intv)\n        if other.lt >= @lt\n            nil\n        else\n            Intv.new(other.lt, min(@lt, other.rt))\n        end\n    end\n\n    def include(other : Intv)\n        r = disjoint_rt(other)\n        l = disjoint_lt(other)\n        unless r.nil?\n            if @rson.nil?\n                @rson = r\n            else\n                @rson.not_nil!.include(r)\n            end\n        end\n        unless l.nil?\n            if @lson.nil?\n                @lson = l\n            else\n                @lson.not_nil!.include(l)\n            end\n        end\n    end\n\n    def size\n        @rt - @lt + (@lson.nil? ? 0 : @lson.not_nil!.size) + (@rson.nil? ? 0 : @rson.not_nil!.size)\n    end\nend\n\ndef sum_of_intervals(intervals : Array(Tuple(Int32, Int32)))\n    tree = Intv.new(0, 0)\n    intervals.each do |x|\n        a, b = x\n        tree.include(Intv.new(a, b))\n    end\n    tree.size\nend\n\ndef max(a, b)\n    a >= b ? a : b\nend\n\ndef min(a, b)\n    a >= b ? b : a\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44962,"user_id":863,"body":"alias Interval = Tuple(Int32, Int32)\ndef sum_of_intervals(intervals : Array(Interval))\n  max = intervals.max_of(&.last)\n  min = intervals.min_of(&.first)\n  ranges = intervals.map { |(a, b)| Range.new(a, b, true) }\n  (min..max).count { |i| ranges.any?(&.covers?(i)) }\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44963,"user_id":645,"body":"def sum_of_intervals(intervals : Array(Tuple(Int32, Int32)))\n  intervals.flat_map do |a, b| (a..b - 1).to_a end.uniq.size\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"52f677797c461daaf7000740":[{"id":44964,"user_id":168,"body":"def solution(numbers)\n  numbers.reduce { |a, b| a.gcd(b) } * numbers.size\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44965,"user_id":53,"body":"def solution(arr)\n  arr.reduce{|sum,n|gcd(sum,n)}  * arr.size\nend\n\ndef gcd(a, b)\n  b == 0 ? a : gcd(b, a % b)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44966,"user_id":50,"body":"def solution(arr)\n  a=arr[0]\n  l=arr.size\n  (1...l).each do |i|\n    a=a.gcd(arr[i])\n  end\n  l*a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44967,"user_id":null,"body":"def solution(numbers)\n  min_val = numbers[0]\n  arr = numbers.uniq\n  n = arr.size\n  (0..n-2).each do |i|\n    (i+1..n-1).each do |j|\n      r = arr[j].gcd arr[i]\n      min_val = r if r < min_val\n      return numbers.size if min_val == 1\n    end\n  end\n  numbers.size * min_val\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44968,"user_id":null,"body":"# a >= b >= 0\ndef euklid(a, b)\n  return a if b == 0\n  return euklid(b, a % b)\nend\n\ndef solution(numbers)\n  min_val = numbers[0]\n  arr = numbers.uniq\n  n = arr.size\n  (0..n-2).each do |i|\n    (i+1..n-1).each do |j|\n      if arr[i] > arr[j]\n        r = euklid(arr[i], arr[j])\n      else\n        r = euklid(arr[j], arr[i])\n      end\n      min_val = r if r < min_val\n      break if min_val == 1\n    end\n    break if min_val == 1\n  end\n  numbers.size * min_val\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44969,"user_id":527,"body":"def solution(numbers)\n  loop do\n    min, max = numbers.minmax\n    break min * numbers.size if min == max\n    numbers[numbers.index(max).not_nil!] -= min\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44970,"user_id":209,"body":"def gcd(a, b)\n  a % b == 0 ? b : gcd(b, a % b)\nend\ndef solution(numbers)\n  numbers.size * numbers.map{|x| x.abs}.reduce{|x, y| gcd(x, y)}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44971,"user_id":null,"body":"require \"big\"\ndef solution(n)\n  d = n.first.to_big_i\n  n.each do |i|\n    d = d.gcd(i.to_big_i)\n    return n.size if d == 1\n  end\n  d.to_i * n.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44972,"user_id":492,"body":"def solution(arr)\n    x = arr.min.to_i64\n    m = x\n    i = 0\n    while i < arr.size\n        if (arr[i] % x != 0_i64)\n            x = arr[i] % x\n            if (m % x != 0_i64)\n                x = m % x\n            end\n        end\n        i += 1\n    end\n    (x * arr.size).abs\nend\n\n# 966903578","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44973,"user_id":527,"body":"def solution(numbers)\n  numbers.size * numbers.reduce{ |a, b| a.gcd(b) }\nend\n\n\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"53f40dff5f9d31b813000774":[{"id":44974,"user_id":986,"body":"def recover_secret(triplets)\n  final = \"\"\n  triplets_array = triplets.map { | t | t.clone }\n  uniq = triplets.flatten.uniq\n  size = uniq.size\n\n  until final.size == size\n    uniq.each do | char |\n      if triplets_array.all? { | triplet | triplet.index(char) == 0 || !triplet.includes?(char) }\n        final += char\n        uniq.delete(char)\n        triplets_array.each { | triplet | triplet.delete(char) }\n      end\n    end\n  end\n  final\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44975,"user_id":null,"body":"def recover_secret(t)\n  s = t.flatten.uniq\n  r = s.zip([0.0] * s.size).to_h\n  10.times do\n    t.each do |(a,b,c)|\n      r[b] += r[a] + 1.0\n      r[c] += r[b] + 1.0\n    end\n  end\n  r.to_a.sort_by(&.last).join(&.first)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44976,"user_id":863,"body":"def recover_secret(triplets)\n  size = triplets.flatten.uniq.size\n  String.build do |out|\n    (0...size).reduce(triplets) do |t, _|\n      c = (0..2).map { |i| t.map(&.[i]?) }.reduce { |m, e| m - e }.first\n      out << c\n      t.map { |e| e - [c] }\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44977,"user_id":53,"body":"def recover_secret(triplets)\n  s, seen = \"\", triplets.flatten.uniq\n  w = seen.size\n  while s.size != w\n    seen.each{|c|\n      if triplets.all? {|t| !t.includes?(c) || t.index(c) == 0}\n        seen.delete(c)\n        s += c\n        triplets.each {|t| t.delete(c) }\n      end\n    }\n  end\n  s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44978,"user_id":null,"body":"def recover_secret(triplets)\n  l = triplets.flatten.uniq\n  s = false\n  while !s\n    s = true\n    (0...l.size-1).each do |i|\n      (i+1...l.size).each do |j|\n        t = triplets.select {|x| x.includes?(l[i]) && x.includes?(l[j])}.first?\n        if !t.nil?\n          if t[0] == l[j] || t[2] == l[i]\n            l.swap(i, j)\n            s = false\n          end\n        end\n      end\n    end\n  end\n  l.join \"\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44979,"user_id":1624,"body":"def recover_secret(triplets)\n  # test and attempt do not match types\n  # force types\n  triplets = triplets.map(&.join.chars)\n\n  edges = triplets.flat_map{|(a,b,c)| [[a,b], [b,c]]}\n  forw = {} of Char => Set(Char)\n  back = {} of Char => Set(Char)\n  edges.each do |(a,b)|\n    forw[a] = Set(Char).new unless forw[a]?\n    forw[a] << b\n    back[b] = Set(Char).new unless back[b]?\n    back[b] << a\n  end\n  result = [] of Char\n  todo = forw.keys - back.keys\n  until todo.empty?\n    c = todo.shift\n    result << c\n    next unless forw[c]?\n    forw[c].each do |z|\n      back[z].delete(c)\n      if back[z].empty?\n        todo << z\n      end\n    end\n  end\n  result.join\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44980,"user_id":null,"body":"def recover_secret( triplets : Array(Array(String)) )\n  triplets1 = triplets.map { |t| \n                            [t[0].chars[0], t[1].chars[0], t[2].chars[0] ] }\n  recover_secret( triplets1 )\nend\n\ndef recover_secret(triplets : Array(Array(Char)))\n  h = Hash(Char, Int32).new\n  triplets.flatten.map {|c| \n        h[c] = 0 }\n\n  prev_sum = -1\n  h[triplets[0][0]] = 0\n  while h.values.sum > prev_sum\n     prev_sum = h.values.sum\n     triplets.map {|tri| update(h,tri) }\n  end\n  \n  h.to_a.sort_by { |p| p[1] }.map{ |p| p[0] }.join(\"\")\nend\n\ndef update( h, tri ) \n  c = tri[0]\n  u = tri[1]\n  d = tri[2]\n  h[u] = [ h[c] + 1, h[u] ].max()\n  h[d] = [ h[u] + 1, h[d] ].max()\n  # puts \"#{tri} #{c}:#{h[c]} #{u}:#{h[u]} #{d}: #{h[d]}\"\nend\n\ndef h_sum( h )\n  h.values.sum()\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"54d496788776e49e6b00052f":[{"id":44981,"user_id":492,"body":"def factors(m : Int64)\n  n_i64 = m.abs\n  if (n_i64 < 2)\n    return [] of Int64\n  end\n  f = [] of Int64; i_i64 = 2_i64\n  while (i_i64 <= n_i64)\n    while (n_i64 % i_i64 == 0)\n      f << i_i64\n      n_i64 \/= i_i64\n      \n    end\n    i_i64 += 1\n  end\n  f\nend\ndef list_factors(lst : Array(Int64))\n  lst.map { |x_i64| factors(x_i64) }.flatten.uniq\nend\ndef one_sum_of_divided(n : Int64, lst : Array(Int64))\n  lst.reduce(0_i64) { |sum_i64, x_i64|\n    if (x_i64 % n == 0) \n      sum_i64 += x_i64\n    else\n      sum_i64\n    end\n  }\nend\ndef sum_of_divided(lst : Array(Int64))\n  list_factors(lst).map { |x_i64| [x_i64, one_sum_of_divided(x_i64, lst)] }.sort\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44982,"user_id":null,"body":"def find_primes_up_to(x : Int)\n  primes = [2, 3, 5, 7, 11]\n  (primes.last + 2).upto(x).step(2).each { |i|\n    primes << i if primes.all? { |prime| i % prime != 0 }\n  }\n  primes\nend\n\ndef sum_of_divided(lst : Array(Int64))\n  return [] of Int64 if lst.empty?\n  primes = find_primes_up_to(lst.max_of(&.abs))\n  primes.map { |prime|\n    found = lst.select{ |num| num % prime == 0 }\n    [prime, found.sum] unless found.empty?\n  }.compact\nend\n","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44983,"user_id":null,"body":"def sum_of_divided(lst : Array(Int64))\n  primes = lst.map { |i| factors i.abs }.flatten.uniq.sort\n  primes.map { |i| [ i, lst.sum { |n| n.divisible_by?(i) ? n : 0 } ] }\nend\n\ndef self.factors(n : Int64) : Array(Int64)\n  res = [] of Int64\n  while n.divisible_by? 2\n    res << 2\n    n \/\/= 2\n  end\n  \n  (3..Math.sqrt(n)+1).step(by: 2).each do |i|\n    while n.divisible_by? i\n      res << i.to_i64\n      n \/\/= i\n    end\n  end\n  \n  res << n if n > 2\n  res\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44984,"user_id":null,"body":"module Sieve\n  protected class_getter sieve = Hash(Int32, Int32).new { |h, k| k }\n  @@calculated = 1\n\n  class Factors\n    include Iterator(Int32)\n\n    def initialize(@n : Int32)\n    end\n\n    def next\n      if @n == 1\n        stop\n      else\n        factor = Sieve.sieve[@n]\n        @n \/\/= factor\n        factor\n      end\n    end\n  end\n\n  def self.each_factor(n)\n    process_sieve(@@calculated, n) if @@calculated < n\n    Factors.new(n)\n  end\n\n  private def self.process_sieve(from : Int32, to : Int32)\n    ((from \/ 2).ceil.to_i * 2).step(to: to, by: 2).each { |i| @@sieve[i] = 2 }\n    3.step(to: Math.sqrt(to).ceil.to_i).each do |i|\n      if @@sieve[i] == i\n        (Math.max(i, (from \/ i).ceil.to_i) * i).step(to: to, by: i).each do |j|\n          @@sieve[j] = i if @@sieve[j] == j\n        end\n      end\n    end\n    @@calculated = to\n  end\nend\n\ndef sum_of_divided(lst : Array(Int64))\n  return [] of Array(Int32) if lst.empty?\n  max = lst.max_of(&.abs)\n  lst.map(&.to_i).reduce(Hash(Int32, Int32).new(0)) do |h, n|\n    Sieve.each_factor(n.abs).uniq.each { |f| h[f] += n }\n    h\n  end.to_a.map(&.to_a).sort_by(&.[0].abs)\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44985,"user_id":null,"body":"module Sieve\n  protected class_getter sieve = Hash(Int32, Int32).new { |h, k| k }\n  @@calculated = 1\n\n  class Factors\n    include Iterator(Int32)\n\n    def initialize(@n : Int32)\n    end\n\n    def next\n      if @n == 1\n        stop\n      else\n        factor = Sieve.sieve[@n]\n        @n \/\/= factor\n        factor\n      end\n    end\n  end\n\n  def self.each_factor(n)\n    process_sieve(@@calculated, n) if @@calculated < n\n    Factors.new(n)\n  end\n\n  private def self.process_sieve(from : Int32, to : Int32)\n    (from < 4 ? 4 : (from \/ 2).ceil.to_i * 2).step(to: to, by: 2).each { |i| @@sieve[i] = 2 }\n    Math.max(3, from).step(to: Math.sqrt(to).ceil.to_i).each do |i|\n      if @@sieve[i] == i\n        (i * i).step(to: to, by: i).each do |j|\n          @@sieve[j] = i if @@sieve[j] == j\n        end\n      end\n    end\n  end\nend\n\ndef sum_of_divided(lst : Array(Int64))\n  return [] of Array(Int32) if lst.empty?\n  max = lst.max_of(&.abs)\n  lst.map(&.to_i).reduce(Hash(Int32, Int32).new(0)) do |h, n|\n    Sieve.each_factor(n.abs).uniq.each { |f| h[f] += n }\n    h\n  end.to_a.map(&.to_a).sort_by(&.[0].abs)\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44986,"user_id":null,"body":"def sum_of_divided(lst : Array(Int64))\n  return [] of Array(Int32) if lst.empty?\n  max = lst.max_of(&.abs)\n  sieve = Hash(Int32, Int32).new { |h, k| k }\n  4.step(to: max, by: 2).each { |i| sieve[i] = 2 }\n  3.step(to: Math.sqrt(max).ceil).each do |i|\n    if sieve[i] == i\n      (i * i).step(to: max, by: i).each do |j|\n        sieve[j] = i if sieve[j] == j\n      end\n    end\n  end\n  lst.map(&.to_i).reduce(Hash(Int32, Int32).new(0)) do |h, n|\n    set = Set(Int32).new\n    num = n.abs\n    while num != 1\n      factor = sieve[num]\n      h[factor] += n if set.add? factor\n      num \/\/= factor\n    end\n    h\n  end.to_a.map(&.to_a).sort_by(&.[0].abs)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44987,"user_id":null,"body":"def sum_of_divided(lst : Array(Int64))\n  return [] of Array(Int32) if lst.empty?\n  max = lst.max_of(&.abs)\n  sieve = Hash(Int32, Int32).new { |h, k| k }\n  4.step(to: max, by: 2).each { |i| sieve[i] = 2 }\n  3.step(to: Math.sqrt(max).ceil).each do |i|\n    if sieve[i] == i\n      (i * i).step(to: max, by: i).each do |j|\n        sieve[j] = i if sieve[j] == j\n      end\n    end\n  end\n  lst.map(&.to_i).reduce(Hash(Int32, Int32).new(0)) do |h, n|\n    set = Set(Int32).new\n    num = n.abs\n    while num != 1\n      set.add sieve[num]\n      num \/\/= sieve[num]\n    end\n    set.each { |v| h[v] += n }\n    h\n  end.to_a.map(&.to_a).sort_by(&.[0].abs)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44988,"user_id":53,"body":"def sum_of_divided(lst : Array(Int64))\n  r = [] of Array(Int32)\n  return r if lst.size == 0\n  b = lst.map { |x| x.abs }.max\n  p = 2\n  while p <= b\n    t = lst.select { |x| x % p == 0 }\n    r << [p, t.sum.to_i] if t.size > 0\n    p = next_prime(p)\n  end\n  r\nend\n\ndef is_prime(n)\n  Math.sqrt(n).to_i.downto(2) do |i|\n    return false if n%i == 0\n  end\n  n > 1\nend\n\ndef next_prime(n)\n  n += 1\n  while ! is_prime(n)\n    n += 1\n  end\n  n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44989,"user_id":null,"body":"def sum_of_divided(lst : Array(Int64))\n  m = Hash(Int32, Int32).new\n  lst.each do |i|\n    x = i.to_i32\n    if x%2 == 0\n      m[2] = m.fetch(2, 0) + i.to_i32\n      x >>= 1\n    end\n    while x%2 == 0\n      x >>= 1\n    end\n    d = 3\n    while d**2 <= x.abs\n      if x%d == 0\n        m[d] = m.fetch(d, 0) + i.to_i32\n        x \/\/= d\n      end\n      while x%d == 0\n        x \/\/= d\n      end\n      d += 2\n    end\n    x = x.abs\n    if x > 1\n      m[x] = m.fetch(x, 0) + i\n    end\n  end\n  m.map {|k, v| [k, v]}.sort_by &.[0]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44990,"user_id":986,"body":"def sum_of_divided(arr : Array(Int64))\n  pairs_hash = {} of Int64 => Int64\n  pairs = [] of Array(Int64)\n  \n  arr.each { | num | find_divisors(num, pairs_hash) }\n  pairs_hash.each { |key, value| pairs.push([key, value]) }\n  \n  return pairs.sort\nend\n\ndef find_divisors(num, hash)\n  div = 2_i64\n  while div <= num.abs\n    if (num.abs)%div == 0 && prime?(div)\n      hash[div] = hash.keys.includes?(div) ? hash[div] + num : num\n    end\n    div += 1\n  end\nend\n\ndef prime?(n) \n  return true if n == 2\n  return false if n < 2 || n%2 == 0\n  \n  i = 3_i64\n  while i <= n**0.5\n    return false if n%i == 0\n    i += 2_i64\n  end\n  true\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"54eb33e5bc1a25440d000891":[{"id":44991,"user_id":null,"body":"def decompose(n)\n  goal = 0_i64\n  result : Array(Int64) = [n.to_i64]\n  while result.size > 0\n    current = result.pop.to_i64\n    goal += (current*current)\n    (current - 1).downto 0 do |i|\n      if goal - (i*i) >= 0\n        goal -= (i*i)\n        result << i\n        return result.sort if goal == 0\n      end\n    end\n  end\n  return nil\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44992,"user_id":492,"body":"def find_next(square : Int64, n : Int64)\n  return nil if n <= 0 || square < 0\n  return [] of Int64 if square == 0\n  while true\n    n -= 1\n    result = find_next(square - n * n, n)\n    return result + [n] unless result.nil?\n    break if n < 0\n  end \n  nil\nend\ndef decompose(n : Int32)\n  m = n.to_i64\n  find_next(m * m, m)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"551f23362ff852e2ab000037":[{"id":44993,"user_id":527,"body":"def longest_slide_down(pyramid : Array(Array(Int32))) : Int32\n  pyramid.reverse_each.reduce{ |xs, ys|\n    ys.each_index.map{ |i| ys[i] + {xs[i], xs[i+1]}.max }.to_a\n  }[0]\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44994,"user_id":53,"body":"def longest_slide_down(pyramid : Array(Array(Int32)))\n  i = pyramid.size - 2\n  while i > -1\n    j = 0\n    while j < pyramid[i].size\n      pyramid[i][j] += Math.max(pyramid[i + 1][j], pyramid[i + 1][j + 1])\n      j = j+1\n    end\n    i = i-1\n  end\n  pyramid[0][0]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44995,"user_id":null,"body":"def longest_slide_down(pyramid : Array(Array(Int32)))\n  init_array = pyramid.pop\n  pyramid.reverse.reduce(init_array){|acc, line| acc=line.map_with_index{|v, i| v+[acc[i],acc[i+1]].max}}.pop\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44996,"user_id":null,"body":"def longest_slide_down(pyramid : Array(Array(Int32)))\n  rv = pyramid[-1]\n  pyramid[0..-2].reverse_each do |level|\n    rv = level.map_with_index { |n, i| n + Math.max(rv[i], rv[i.succ]) }\n  end\n  rv[0]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44997,"user_id":null,"body":"def longest_slide_down(pyramid : Array(Array(Int32)))\n  (pyramid.size-2).downto(0).each do |i|\n    pyramid[i].map_with_index! { |parent, pidx|\n      children = pyramid[i+1][pidx,2]\n      parent + children.max\n    }\n  end\n  pyramid.first.first\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44998,"user_id":null,"body":"def longest_slide_down(pyramid : Array(Array(Int32)))\n  pl = pyramid.shift\n  pyramid.each do |l|\n    l.size.times do |i|\n      if i == 0\n        l[i] += pl.first\n      elsif i == l.size - 1\n        l[i] += pl.last\n      else\n        l[i] += [pl[i], pl[i-1]].max\n      end\n    end\n    pl = l\n  end\n  pl.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":44999,"user_id":null,"body":"def longest_slide_down(pyr : Array(Array(Int32)))\n  sums = [ [pyr[0][0]] ]\n  \n  (1...pyr.size).map_with_index { |j|\n    sums_row = [ 0 ] * (j+1)\n    # pyr[j]  has size j+1\n    (0..j).map { |i|\n      x = pyr[j][i]\n      prev = sums[j - 1] # this has size j\n      if i == 0\n        sums_row[i] = prev[0] + x\n      elsif i < j\n        sums_row[i] = [ prev[i-1], prev[i] ].max + x \n      else \n        sums_row[i] = prev[i-1] + x\n      end\n    }\n    sums << sums_row\n  }\n  \n  sums.last.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45000,"user_id":759,"body":"def longest_slide_down(pyramid : Array(Array(Int32))) : Int\n  s = pyramid.size\n  return pyramid[0][0] if s == 1\n  last2 = pyramid[s - 2]\n  last = pyramid[s - 1]\n  i = 0\n  while i < s - 1\n    last2[i] += Math.max(last[i], last[i + 1])\n    i += 1\n  end\n  longest_slide_down(pyramid[0..-2])\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45001,"user_id":null,"body":"def longest_slide_down(pyramid : Array(Array(Int32)))\n    (2..pyramid.size).each do |i|\n        (0...pyramid[-i].size).each do |j|\n            pyramid[-i][j] += Math.max(pyramid[-i+1][j], pyramid[-i+1][j+1])\n        end\n    end\n    pyramid[0][0]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45002,"user_id":986,"body":"def longest_slide_down(pyramid : Array(Array(Int32)))\n  slide = pyramid.dup.reverse\n  row = slide[0]\n  \n  while slide.size > 1\n    slide.shift\n    \n    row = slide[0].map_with_index { | num, idx | get_best_move(row, idx, num) }\n  end\n  return row.pop\nend\n\ndef get_best_move(row : Array(Int32), idx : Int32, num : Int32)\n  num + [ row[idx], row[idx + 1] ].max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55983863da40caa2c900004e":[{"id":45003,"user_id":53,"body":"def next_bigger(n : Int64)\n  print(n)\n  arr = sorted(n)\n  max = (arr.join(\"\") { |i| i }).to_i64\n  i = n + 1\n  while i <= max\n    m = sorted(i)\n    j = 0\n    k = 0\n    while j < m.size\n      if m[j] == arr[j]\n        k = k + 1\n      end\n      j = j + 1\n    end\n    if k == m.size\n      return i\n    end\n    i = i + 1\n  end\n  -1\nend\n\ndef sorted(n : Int64)\n  arr = [] of String\n  n.to_s.split(\"\") { |e| arr << e }\n  arr.sort! { |a, b| b <=> a }\n  return arr\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45004,"user_id":null,"body":"def next_bigger(n : Int64)\n    digits = n.digits.reverse!\n    index = digits.size - 1\n\n    # If a digit is greater than the previous, we can swap it\n    while index > 0 && digits[index] <= digits[index - 1]\n      index -= 1\n    end\n\n    # If there was none, it is already arranged in the highest possible combination\n    if index < 1\n      return -1\n    end\n\n    # Split the digits at the swappable number\n    left = digits[0, index - 1]\n    mid = digits[index - 1]\n    right = digits.[index, digits.size]\n\n    # The number we want to swap is the one that is the smallest of those that are greater than mid\n    candidate = (right.select { |n| n > mid }).min\n\n    # Swap the value of the first occurrence of candidate with mid\n    right[right.index(candidate) || 0] = mid\n    mid = candidate\n\n    # Sort right side to be the smallest possible combination\n    right.sort! {|a, b| a - b}\n\n    ((left << mid) + right).join.to_i64\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45005,"user_id":50,"body":"def next_bigger(n : Int64)\n  if n<10 || n.to_s.chars.sort.reverse.join.to_i64==n\n    return -1\n  else if n<100\n    return n.to_s.chars.reverse.join.to_i\n  end\n  r=n.to_s.chars.reverse\n  e=r.each_with_index.to_a.map{|x| x.reverse}\n  e[0..-2].zip(e[1..-1]).each do |i,j|\n    if i[1]>j[1]\n      e.each do |k|\n        if k[1]>j[1]\n          r.insert(j[0],r.delete_at(k[0]))\n          r.insert(k[0],r.delete_at(j[0]-1))\n          return (r[0..j[0]-1].sort.reverse+r[j[0]..-1]).reverse.join.to_i64\n        end\n      end\n    end\n  end\n  end # why needs this end when Ruby doesn't???\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45006,"user_id":null,"body":"def next_bigger(n)\n  m = n.to_s.chars\n  return -1 if m.uniq.size == 1\n\n  (0 .. m.size - 2).reverse_each do |i|\n    (i + 1 .. m.size - 1).reverse_each do |j|\n      if m[j] > m[i]\n        m[i], m[j] = m[j], m[i]\n        return (m[0 .. i] + m[i + 1 .. m.size - 1].sort).join.to_i64\n      end\n    end\n  end\n  -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45007,"user_id":null,"body":"struct Int\n    # Monkey patch the digits method (which would be available in later\n    # Crystal versions but CodeWars doesn't support those yet)\n    def digits\n        x = self\n        d = [] of typeof(self)\n        while x > 0\n            d << x % 10\n            x \/\/= 10\n        end\n        d\n    end\nend\n\ndef next_bigger(n : Int64)\n    digits = n.digits\n    \n    # If this line doesn't return it's guaranteed there's at least something to swap\n    return -1 if digits.sort == digits\n  \n    # Find the least significant digit that has a bigger number to the right of it\n    (1..digits.size).each { |i|\n        next if 0.upto(i-1).all? { |j| digits[j] <= digits[i] }\n      \n        first_swappable = i\n  \n        _, smallest_bigger = digits[0...i].each_with_index\n                                          .select { |(d, _)| d > digits[first_swappable] }\n                                          .min\n        \n        digits.swap(first_swappable, smallest_bigger)\n        \n        # The swap guarantees the number is bigger no matter what happens in less significant digits,\n        # so we can sort the rest of the digits in order to make sure the resulting number is as \n        # small as possible while still being bigger\n        digits = digits[0...first_swappable].sort_by!{|x| -x } + digits[first_swappable..]\n  \n        break\n    }\n    digits.reverse.join.to_i64\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45008,"user_id":null,"body":"def next_bigger(n : Int64)\n  a = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  peek = n % 10\n  loop do\n    lsd = peek\n    return -1 if ((n = n \/\/ 10) == 0)\n    a[lsd] += 1\n    next if (keep = peek = n % 10) >= lsd\n    a[peek] += 1\n    loop { break if a[peek += 1] > 0 }\n    a[peek] -= 1\n    n += peek - keep\n    10.times { |d| a[d].times { n = n * 10 + d } }\n    return n\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45009,"user_id":645,"body":"def next_bigger(n : Int64)\n  # anter69's Ruby solution\n  return -1 if n.to_s.chars.reverse == n.to_s.chars.sort\n  digits, n = n.to_s.chars.sort, n + 9\n  until n.to_s.chars.sort == digits; n += 9 end\n  n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55cf3b567fc0e02b0b00000b":[{"id":45010,"user_id":53,"body":"def part(n : Int64) : String\n    xs = init(n)\n    s = xs.reduce(0.to_i64) { |a,b| a+b } \n    l = xs.size\n    r = xs[l-1] - xs[0]\n    u = s.to_f64 \/ l\n    m = 0.5 * (xs[l>>1] + xs[(l-1)>>1])\n    \"Range: %d Average: %.2f Median: %.2f\" % [r, u, m]\nend\n\ndef init(n : Int64)\n    k = 1.to_i64\n    ans = [] of Int64 \n    while k <= n\n        gip(1.to_i64, 0.to_i64, n, k).each { |x| ans << x }\n        k = k+1\n    end\n    ans.uniq.sort\nend\n\ndef gip(p : Int64, d : Int64, n : Int64, k : Int64)\n    ans = [] of Int64\n    if n >= k && k >= 1\n        if k == 1\n            ans << (p * (n+d))\n        end\n        gip(p * (d+1), d, n-1, k-1).each { |x| ans << x }\n        gip(p, d+1, n-k, k).each { |x| ans << x }\n    end\n    ans\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-26 10:39:46"},{"id":45011,"user_id":492,"body":"def part_aux(s : Int64, k : Int64) : Array(Array(Int64))\n    k0 = [s, k].min\n    if k0 < 1\n        [] of Array(Int64)\n    else\n        res = Array(Array(Int64)).new\n        k0.downto(1) do |n|\n            r = s - n\n            if (r > 0)\n                arr = part_aux(r, n)\n                arr.each do |el|\n                    if (el.is_a?(Array))\n                      res.push([n].concat(el))\n                    else res.push([n, el]) end\n            end\n            else\n                res.push([n])\n            end\n        end\n        res\n    end\nend\n\ndef part(n : Int64) : String\n    r = part_aux(n, n).map{|x| x.reduce(1){ |p, x| p * x }}.uniq.sort\n    lg = r.size\n    avg = r.reduce(0.0){ |p, x| p + x } \/ lg.to_f64\n    rge = r[lg - 1] -  r[0]\n    md = (r[(lg - 1) \/ 2] + r[lg \/ 2]) \/ 2.0\n    \"Range: %d Average: %.2f Median: %.2f\" % [rge, avg, md]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45012,"user_id":50,"body":"def part(n : Int64) : String\n  case n\n    when 1\n       \"Range: 0 Average: 1.00 Median: 1.00\"\n    when 2\n       \"Range: 1 Average: 1.50 Median: 1.50\"\n    when 3\n       \"Range: 2 Average: 2.00 Median: 2.00\"\n    when 4\n       \"Range: 3 Average: 2.50 Median: 2.50\"\n    when 5\n       \"Range: 5 Average: 3.50 Median: 3.50\"\n    when 6\n       \"Range: 8 Average: 4.75 Median: 4.50\"\n    when 7\n       \"Range: 11 Average: 6.09 Median: 6.00\"\n    when 8\n       \"Range: 17 Average: 8.29 Median: 7.50\"\n    when 9\n       \"Range: 26 Average: 11.17 Median: 9.50\"\n    when 10\n       \"Range: 35 Average: 15.00 Median: 14.00\"\n    when 11\n       \"Range: 53 Average: 19.69 Median: 16.00\"\n    when 12\n       \"Range: 80 Average: 27.08 Median: 22.50\"\n    when 13\n       \"Range: 107 Average: 35.07 Median: 27.00\"\n    when 14\n       \"Range: 161 Average: 47.33 Median: 35.00\"\n    when 15\n       \"Range: 242 Average: 63.91 Median: 45.00\"\n    when 16\n       \"Range: 323 Average: 84.44 Median: 56.00\"\n    when 17\n       \"Range: 485 Average: 112.66 Median: 73.50\"\n    when 18\n       \"Range: 728 Average: 151.44 Median: 96.00\"\n    when 19\n       \"Range: 971 Average: 199.34 Median: 118.50\"\n    when 20\n       \"Range: 1457 Average: 268.11 Median: 152.00\"\n    when 21\n       \"Range: 2186 Average: 358.10 Median: 197.00\"\n    when 22\n       \"Range: 2915 Average: 475.46 Median: 245.00\"\n    when 23\n       \"Range: 4373 Average: 633.44 Median: 315.00\"\n    when 24\n       \"Range: 6560 Average: 846.79 Median: 390.00\"\n    when 25\n       \"Range: 8747 Average: 1126.14 Median: 500.00\"\n    when 26\n       \"Range: 13121 Average: 1500.90 Median: 625.00\"\n    when 27\n       \"Range: 19682 Average: 2009.29 Median: 775.00\"\n    when 28\n       \"Range: 26243 Average: 2669.98 Median: 980.00\"\n    when 29\n       \"Range: 39365 Average: 3558.37 Median: 1224.50\"\n    when 30\n       \"Range: 59048 Average: 4764.89 Median: 1538.00\"\n    when 31\n       \"Range: 78731 Average: 6326.47 Median: 1920.00\"\n    when 32\n       \"Range: 118097 Average: 8457.17 Median: 2420.00\"\n    when 33\n       \"Range: 177146 Average: 11292.63 Median: 3024.00\"\n    when 34\n       \"Range: 236195 Average: 15031.03 Median: 3761.50\"\n    when 35\n       \"Range: 354293 Average: 20088.78 Median: 4704.00\"\n    when 36\n       \"Range: 531440 Average: 26832.81 Median: 5865.00\"\n    when 37\n       \"Range: 708587 Average: 35745.98 Median: 7371.00\"\n    when 38\n       \"Range: 1062881 Average: 47763.72 Median: 9152.00\"\n    when 39\n       \"Range: 1594322 Average: 63823.27 Median: 11475.00\"\n    when 40\n       \"Range: 2125763 Average: 85158.49 Median: 14250.00\"\n    when 41\n       \"Range: 3188645 Average: 113720.82 Median: 17745.00\"\n    when 42\n       \"Range: 4782968 Average: 152184.15 Median: 21888.00\"\n    when 43\n       \"Range: 6377291 Average: 202904.65 Median: 27262.50\"\n    when 44\n       \"Range: 9565937 Average: 271332.21 Median: 33796.00\"\n    when 45\n       \"Range: 14348906 Average: 363114.82 Median: 41947.50\"\n    when 46\n       \"Range: 19131875 Average: 484712.39 Median: 51975.00\"\n    when 47\n       \"Range: 28697813 Average: 648367.27 Median: 64260.00\"\n    when 48\n       \"Range: 43046720 Average: 867970.08 Median: 79830.00\"\n    when 49\n       \"Range: 57395627 Average: 1159398.98 Median: 98227.50\"\n    else\n       \"Range: 86093441 Average: 1552316.81 Median: 120960.00\"\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45013,"user_id":null,"body":"class Results\n  @@tab = Array(Int64).new(205_000, 0_i64)\n\t@@len = 0_i64\n\n\tdef self.tab\n\t\t@@tab\n\tend\n\n\tdef self.len\n\t\t@@len\n\tend\n\n\tdef self.len=(@@len)\n\tend\n\n\tprivate def self.compute_median(arr)\n\t\tn = arr.size\n\t\tarr.sort!\n\t\tif n.even?\n\t\t\tp1, p2 = n \/ 2, n \/ 2 - 1\n\t\t\t(arr[p1] + arr[p2]).to_f \/ 2.0\n\t\telse\n\t\t\tp = n \/ 2\n\t\t\tarr[p].to_f\n\t\tend\n\tend\n\n  def self.compute_statistics\n\t\tz = Set(Int64).new\n\t\t(0...@@len).each { |i| z.add(@@tab[i]) }\n\t\tmin_val, max_val = z.minmax\n\t\tm = compute_median z.to_a\n\t\t{range: (max_val - min_val), average: (z.sum.to_f \/ z.size.to_f), median: m}\n  end\nend\n\ndef consume(a, n)\n\tprod = 1_i64\n  (0...n).each { |i| prod *= a[i] }\n  Results.tab[Results.len] = prod\n\tResults.len += 1\nend\n\ndef findAllUniqueParts(n)\n\tp = Array(Int64).new(n, 0_i64)\t\n\tk = 0\t\t\n\tp[k] = n\t\n\tloop do\n\t\tconsume p, k + 1\n\t\trem_val = 0_i64\n\t\twhile k >= 0 && p[k] == 1\n\t\t\trem_val += p[k]\n\t\t\tk -= 1\n    end\n\t\treturn if k < 0\n\t\tp[k] -= 1\n\t\trem_val += 1\n\t\twhile rem_val > p[k]\n\t\t\tp[k + 1] = p[k]\n\t\t\trem_val = rem_val - p[k]\n\t\t\tk += 1\n    end\n\t\tp[k + 1] = rem_val\n\t\tk += 1\n  end\nend\n\ndef part(n : Int64) : String\n  Results.len = 0_i64\n\tfindAllUniqueParts(n)\n\tr = Results.compute_statistics\n\t\"Range: #{r[:range]} Average: #{sprintf \"%.2f\", r[:average]} Median: #{sprintf \"%.2f\", r[:median]}\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45014,"user_id":53,"body":"def part(n : Int64) : String\n    xs = init(n)\n    s = xs.reduce(0.to_i64) { |a,b| a+b } \n    l = xs.size\n    r = xs[l-1] - xs[0]\n    u = s.to_f64 \/ l\n    m = 0.5 * (xs[l>>1] + xs[(l-1)>>1])\n    \"Range: #{r} Average: #{fmt(u)} Median: #{fmt(m)}\"\nend\n\ndef fmt(n : Float64)\n    s = n.round(2).to_s\n    if s.includes?('.')\n      i = s.index('.').to_s.to_i\n      if s.size - i == 2\n        s += \"0\"\n      end\n    else\n      s + \".00\"\n    end\n    s\nend\n\ndef init(n : Int64)\n    k = 1.to_i64\n    ans = [] of Int64 \n    while k <= n\n        gip(1.to_i64, 0.to_i64, n, k).each { |x| ans << x }\n        k = k+1\n    end\n    ans.uniq.sort\nend\n\ndef gip(p : Int64, d : Int64, n : Int64, k : Int64)\n    ans = [] of Int64\n    if n >= k && k >= 1\n        if k == 1\n            ans << (p * (n+d))\n        end\n        gip(p * (d+1), d, n-1, k-1).each { |x| ans << x }\n        gip(p, d+1, n-k, k).each { |x| ans << x }\n    end\n    ans\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45015,"user_id":null,"body":"def part(n : Int64) : String\n    r = range(n.to_i32)\n    rr = r[-1] - r[0]\n    \n    avg = average(n.to_i32)\n    med = median(n.to_i32)\n    resp = \"Range: #{rr} Average: %0.2f Median: %0.2f\" % {avg, med}\n    puts \"part(#{n}) => #{resp}\"\n    resp\nend\n\nR = {1 => [1], 2 => [1, 2], 3 => [1, 2, 3], 4 => [1, 2, 3, 4]}\n\ndef range(n : Int)\n  return R[n] if R.has_key?(n)\n  res = (1..n).to_a\n  (2..n).each do |i|\n    next if n - i < 2\n    l = range(i)\n    h = range(n - i)\n    l.each do |li|\n      next if li == 1\n      h.each do |hi|\n        next if hi == 1\n        res << li*hi\n      end\n    end\n  end\n  R[n] = res.sort.uniq\nend\n\n\ndef average(n : Int)\n  r = range(n)\n  s = 0_i64\n  r.each { |i| s += i }\n  s * 1.0 \/ r.size\nend\n\ndef median(n : Int)\n  r = range(n)\n  if r.size % 2 == 0\n    m =\n      r[r.size \/ 2 - 1, 2].sum \/ 2.0\n  else\n    1.0 * r[r.size\/2]\n  end\nend\n\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5629db57620258aa9d000014":[{"id":45016,"user_id":null,"body":"def mix_strings(s1, s2)\n  counts1, counts2 = [s1, s2].map { |s| s.chars.select(&.lowercase?).tally }\n  mixed = counts1.merge(counts2) { |k, v1, v2| [v1, v2].max }\n  mixed.select { |k, v| v > 1 }\n       .map { |k, v|\n         from = ['=', '1', '2'][counts1.fetch(k, 0) <=> counts2.fetch(k, 0)]\n         \"#{from}:#{k.to_s * v}\"\n       }\n       .sort_by { |s| {-s.size, s} }\n       .join('\/')\nend\n","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45017,"user_id":null,"body":"def mix_strings(s1, s2)\n    c = Hash(Char, Array(Int32)).new { |h, k| h[k] = [0, 0] }\n    s1.chars.each { |x| c[x][0] += 1 if x.ascii_lowercase? }\n    s2.chars.each { |x| c[x][1] += 1 if x.ascii_lowercase? }\n    c.to_a\n      .select!{ |x| x[1].max > 1 }\n      .map { |x|\n        ch, occs = x\n        occ = occs[0] == occs[1] ? '=' : (occs.index(occs.max).not_nil! + 1).to_s[0]\n        {occ, ch.to_s * occs.max}\n      }\n      .sort_by!{ |x| {-x[1].size, x[0], x[1][0]} }\n      .map { |x| \"#{x[0]}:#{x[1]}\"}\n      .join(\"\/\")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45018,"user_id":492,"body":"def comp(a, b)\n    if (a.size == b.size) \n    \treturn a <=> b \n    end\n    b.size < a.size ? -1 : 1\nend\ndef mix_strings(s1, s2)\n    alpha_s1, alpha_s2 = [0] * 26, [0] * 26\n    s1.each_char { |c| if ((c.ord >= 97) && (c.ord <= 122)) \n      alpha_s1[c.ord - 97] += 1 \n    end }\n    s2.each_char { |c| if ((c.ord >= 97) && (c.ord <= 122)) \n      alpha_s2[c.ord - 97] += 1 \n    end }\n    res = \"\"\n    i = 0\n    while (i < 26)\n        sm = [alpha_s1[i], alpha_s2[i]].max\n        if (sm > 1)\n            if (sm > alpha_s1[i])\n                res += 2.to_s + \":\"\n                res += (i + 97).chr.to_s * sm\n                res += \"\/\"\n            elsif (sm > alpha_s2[i])\n                res += 1.to_s + \":\"\n                res += (i + 97).chr.to_s * sm\n                res += \"\/\"\n            elsif (alpha_s1[i] == alpha_s2[i])\n                res += \"=:\"\n                res += (i + 97).chr.to_s * sm\n                res += \"\/\"\n            end\n        end\n        i += 1\n    end   \n    l = res[0..-2].split('\/').sort { |x, y| comp(x, y) }.join(\"\/\")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45019,"user_id":null,"body":"P = [\"=:%s\", \"1:%s\", \"2:%s\"]\ndef mix_strings(s1, s2)\n  t1,t2 = [s1, s2].map(&.chars.select!('a'..'z').tally)\n  (t1.keys | t2.keys).map do |c|\n    d = ((v1 = t1[c]? || 0).<=>(v2 = t2[c]? || 0))\n    next if (m = [v1,v2].max) < 2 \n    P[d] % (\"#{c}\" * m) \n  end.\n  compact.group_by{|s| -s.size}.to_a.sort.map{|g,s| s.sort}.flatten.join('\/')\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45020,"user_id":null,"body":"def mix_strings(s1, s2)\n  s1 = s1.split(\"\").uniq.reduce(Hash(String, Int32).new) { |r, e| r[e] = s1.count(e) if e.match(\/[a-z]\/); r }\n  s2 = s2.split(\"\").uniq.reduce(Hash(String, Int32).new) { |r, e| r[e] = s2.count(e) if e.match(\/[a-z]\/); r }\n\n  (s1.keys + s2.keys).uniq.reduce([] of String) do |res, i|\n    c1 = s1[i]? || 0\n    c2 = s2[i]? || 0\n    res << (c1 == c2 ? \"=:#{(i * c1)}\" : c1 > c2 ? \"1:#{i * c1}\" : \"2:#{i * c2}\") if c1 > 1 || c2 > 1\n    res\n  end.sort_by { |w| {-w.size, w[0], w[-1]} }.join \"\/\"\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45021,"user_id":null,"body":"ALLOWED_BYTES = 97..122\n\ndef mix (s1 : String, s2 : String) : String\n    i1 = get_bytes_infos(1, s1)\n    i2 = get_bytes_infos(2, s2)\n\n    infos = i1.merge(i2) do |key, v1, v2|\n        case v1[1] <=> v2[1]\n        when 1 then v1\n        when -1 then v2\n        else [3u32, v1[1]]\n        end\n    end\n\n    # Sort by occurences > id (3 for equality) > byte value\n    infos = infos.to_a.sort do |(a0, a1), (b0, b1)|\n        {b1[1], a1[0], a0} <=> {a1[1], b1[0], b0}\n    end\n\n    strfy = infos.map do |(code, info)|\n        String.build do |str|\n            str << (info[0] == 3 ? '=' : info[0].to_s) \\\n                << ':' \\\n                << code.unsafe_chr.to_s * info[1]\n        end\n    end\n\n    strfy.join(\"\/\")\nend\n\ndef get_bytes_infos (id : UInt32, str : String) : Hash(UInt8, Array(UInt32))\n    hash = {} of UInt8 => Array(UInt32)\n\n    str.bytes.each do |byte|\n        if hash.has_key?(byte)\n            hash[byte][1] += 1u32\n        elsif ALLOWED_BYTES.includes?(byte)\n            hash[byte] = [id, 1u32]\n        end\n    end\n\n    hash.reject { |_, infos| infos[1] == 1 }\nend\n","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45022,"user_id":863,"body":"class String\n  def tally\n    chars.each_with_object(Hash(Char, Int32).new(0)) do|c, memo|\n      memo[c] += 1\n    end\n  end\nend\n\ndef format(pre, c, cnt)\n  \"%s:%s\" % [pre, c.to_s * cnt.not_nil!]\nend\n\ndef mix_strings(*strings)\n  s1, s2 = strings.map(&.delete(\"^a-z\").tally.select {|_,v| v > 1 })\n  ('a'..'z').compact_map do |c|\n    a, b = s1[c]?, s2[c]?\n    case {a, b}\n    when {Nil, Nil}\n      next\n    when {Int32, Nil} then format(1, c, a)\n    when {Nil, Int32} then format(2, c, b)\n    else\n      case a.not_nil! <=> b.not_nil!\n      when -1 then format(2, c, b)\n      when 0 then format('=', c, a)\n      when 1 then format(1, c, a)\n      end\n    end\n  end.sort_by do |v|\n    # the middle test seems like it shouldn't be necessary\n    [v.size, -v[0].ord, -v[-1].ord]\n  end.reverse.join('\/')\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45023,"user_id":null,"body":"def mix_strings(s1, s2)\n  s1 = s1.chars\n  s2 = s2.chars\n  res = [] of Tuple(Int32, Char, Char)\n  \"abcdefghijklmnopqrstuvwxyz\".chars.each { |c|\n    c1 = s1.count c\n    c2 = s2.count c\n    next if c1 < 2 && c2 < 2\n    res << {c1 >= c2 ? c1 : c2, c, c1 == c2 ? '=' : c1 > c2 ? '1' : '2'}\n  }\n  res.sort { |a, b|\n    if a[0] == b[0]\n      arr = [a[2], b[2]]\n      if a[2] == b[2]\n        a[1] <=> b[1] \n      else\n        a[2] <=> b[2]\n      end\n    else\n      b[0] <=> a[0]\n    end\n  }.map { |t|\n    \"#{t[2]}:#{Array.new(t[0], t[1]).join(\"\")}\"\n  }.join(\"\/\")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45024,"user_id":null,"body":"def sToHash(s)\n  sHash = {} of Char => Int32\n  s.chars().each do |chr|\n      if \/^[[:alpha:]]$\/.match(chr.to_s) && chr == chr.downcase\n        if sHash.has_key?(chr)\n          sHash[chr] += 1\n        else\n          sHash[chr] = 1\n        end\n      end\n    end\n  sHash\nend\n\ndef mix_strings(s1, s2)\n    s1Hash = sToHash(s1)\n    s2Hash = sToHash(s2)\n    hashes = [s1Hash, s2Hash]\n    keys = (s1Hash.keys.to_a + s2Hash.keys.to_a).to_set\n    resultHash = {} of Char => Int32\n    keys.each do |a|\n      if s1Hash.has_key?(a) && s2Hash.has_key?(a)\n        if s1Hash[a] > s2Hash[a] && s1Hash[a] > 1\n          resultHash[a] = 0\n        elsif s1Hash[a] < s2Hash[a] && s2Hash[a] > 1\n          resultHash[a] = 1\n        elsif s1Hash[a] > 1 && s2Hash[a] > 1\n          resultHash[a] = 2\n        end\n      elsif s1Hash.has_key?(a) && s1Hash[a] > 1\n        resultHash[a] = 0\n      elsif s2Hash.has_key?(a) && s2Hash[a] > 1\n        resultHash[a] = 1\n      end\n    end\n    resultHash = resultHash.to_a.sort_by{|chr, who| [-hashes[who % 2][chr], who, chr.ord]}\n    result = String.build do |result|\n      resultHash.each do |chr, who|\n        case who\n          when 0\n            result << \"1:\"\n          when 1\n            result << \"2:\"\n          when 2\n            result << \"=:\"\n        end\n        result << chr.to_s * hashes[who % 2][chr] + \"\/\"\n      end\n    end\n    result[0...-1]\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45025,"user_id":null,"body":"def mix (s1, s2)\n  rank = [s1, s2].map_with_index do |str, index|\n    hash = {} of UInt8 => Int8\n\n    # str.chars.to_set.each() do |char|\n    #   if \/[a-z]\/.match(char.to_s) != nil\n    #     hash[code] = str.count(char)\n    #   end\n    # end\n\n    str.bytes.each do |code|\n      if code > 96 && code < 123\n        hash[code] = (hash[code]? || 0_i8) + 1_i8\n      end\n    end\n\n    hash.select { |_, value| value > 1 }\n      .to_a\n      .map { |key, value| [value, key, index + 1] }\n  end\n\n  rank = rank.reduce { |acc, follower| acc|follower }\n    .sort\n    .reverse\n    .group_by { |value| value[1] }\n    \n  rank = rank.map do |group|\n    group[1].reject! { |value| group[1][0][0] != value[0] }\n  end\n\n  rank.sort! do |x, y|\n    case\n    when y[0][0] != x[0][0] then y[0][0] <=> x[0][0]\n    when x.size != y.size then x.size <=> y.size\n    when x[0][2] != y[0][2] then x[0][2] <=> y[0][2]\n    else x[0][1] <=> y[0][1]\n    end\n  end\n\n  rank = rank.map do |x|\n    output = (x.size > 1 ? \"=\" : x[0][2].to_s) + \":\"\n    output += x[0][1].unsafe_chr.to_s * x[0][0]\n    output\n  end\n\n  rank.join(\"\/\")\nend\n","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5659c6d896bc135c4c00021e":[{"id":45026,"user_id":53,"body":"def next_smaller(n : Int64)\n  d = n.to_s.chars.map{|c|c.to_i}\n  x = y = -1\n  (0..d.size-2).reverse_each{|i|\n    break if x > -1\n    (i+1...d.size).each{|j|\n      if d[j]<d[i]\n        x = i\n        break\n      end\n    }\n  }\n  return x if x == -1\n  (x+1...d.size).each{|i|\n    y = i if d[i] < d[x] && (y == -1 || d[i] > d[y])\n  }\n  return -1 if d[y] == 0 && x == 0\n  t = d[x]\n  d[x] = d[y]\n  d[y] = t\n  e = d[x+1...d.size].sort{|a,b| b <=> a}\n  j = 0\n  (x+1...d.size).each{|i|\n    d[i] = e[j]\n    j += 1\n  }\n  d.join(\"\").to_i64\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45027,"user_id":50,"body":"def next_smaller(n : Int64)\n  if n<10\n    return -1\n  end\n  m,r=n.divmod(10)\n  until m==0\n    d=m%10\n    if d>r\n      break\n    else\n      m\/=10\n      r=d\n    end\n  end\n  if m==0\n    return -1\n  end\n  s=n.to_s.chars\n  l=s.size\n  j=l-1\n  i=j\n  until s[i-1]>s[i]\n    i-=1\n  end\n  until s[j]<s[i-1]\n    j-=1\n  end\n  tmp=s[i-1]\n  s[i-1]=s[j]\n  s[j]=tmp\n  s[0]=='0' ? -1 : (s[0..i-1].join+(l-1).downto(i).map{|k| s[k]}.join).to_i64\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45028,"user_id":986,"body":"#adapted from xurdedix's Ruby solution\ndef next_smaller(n : Int64)\ndigits = n.to_s.chars.reverse.map(&.to_i64)\n  return -1 if digits.sort.join == n.to_s  \n  digits[0..-2].each.with_index(1_i8) do | digit, i |\n    if digits[i] > digit\n      head = digits[0..i].sort\n      ordered = head.select { | d | d < digits[i] }\n      head << head.delete_at(ordered.size-1)\n      result = head + digits[i+1..-1]\n      return -1 if result.last.zero?\n      return result.reverse.join.to_i64\n    end\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5672682212c8ecf83e000050":[{"id":45029,"user_id":492,"body":"def dbl_linear(n)\n    h = 1; cnt = 0; q2, q3 = [] of Int32, [] of Int32\n    while true\n        if (cnt >= n)\n            return h\n        end\n        q2.push(2 * h + 1)\n        q3.push(3 * h + 1)\n        h = [q2[0], q3[0]].min\n        if h == q2[0] \n        \th = q2.shift() \n      \tend\n        if h == q3[0] \n        \th = q3.shift() \n      \tend\n        cnt += 1\n    end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45030,"user_id":492,"body":"def dbl_linear(n)\n    h = 1; cnt = 0; q2, q3 = [] of Int32, [] of Int32\n    while true\n        if (cnt >= n)\n            return h\n        end\n        q2.push(2 * h + 1)\n        q3.push(3 * h + 1)\n        h = [q2[0], q3[0]].min\n        if h == q2[0] \n        \th = q2.shift() \n      \tend\n        if h == q3[0] \n        \th = q3.shift() \n      \tend\n        cnt += 1\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45031,"user_id":50,"body":"def dbl_linear(n)\n  i=0\n  j=0\n  e=[1]\n  m=n\n  until m==0\n    a=e[i]*2+1\n    b=e[j]*3+1\n    if a<=b\n      e.push(a)\n      i+=1\n      if a==b\n        j+=1\n      end\n    else\n      e.push(b)\n      j+=1\n    end\n    m-=1\n  end\n  e[n]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45032,"user_id":null,"body":"def dbl_linear(n)\n  res = [1]\n  x, y = 0, 0\n  while res.size - 1 != n\n    res_x = 2 * res[x] + 1\n    res_y = 3 * res[y] + 1\n    if res_x > res_y\n      \tres << res_y\n      \ty += 1\n    elsif res_x < res_y\n    \tres << res_x\n    \tx += 1\n    else\n  \t\tres << res_x\n  \t\tx += 1\n  \t\ty += 1\n    end\n  end\nreturn res[-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45033,"user_id":421,"body":"def dbl_linear(n)\n  lst = [1]\n  first = 0\n  second = 0\n  while lst.size <= n\n    a = 2 * lst[first] + 1\n    b = 3 * lst[second] + 1\n    if b < a\n      lst << b\n      second += 1\n    elsif a < b\n      lst << a\n      first += 1\n    else\n      lst << a\n      first += 1\n      second += 1\n    end\n  end\n  lst[n]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45034,"user_id":53,"body":"include Math\n\ndef dbl_linear(n)\n    u = Array.new(n + 1, 0)\n    u[0] = 1\n    x = 0\n    y = 0\n    i = 1\n    while i <= n\n        u[i] = Math.min(2 * u[x] + 1, 3 * u[y] + 1)\n        if u[i] == 2 * u[x] + 1 \n            x += 1\n        end\n        if u[i] == 3 * u[y] + 1\n            y += 1\n        end\n        i += 1\n    end\n    return u[n]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45035,"user_id":null,"body":"def dbl_linear(n)\n    u = [1]\n    xy, xz = 0, 0\n    (1 .. n).each { |i|\n        u << Math.min(u[xy] * 2 + 1, u[xz] * 3 + 1)\n        if u[i] == u[xy] * 2 + 1; xy += 1 end \n        if u[i] == u[xz] * 3 + 1; xz += 1 end  \n    }\n    return u[n]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45036,"user_id":null,"body":"def dbl_linear(n)\n  qx = [] of Int32\n  qy = [] of Int32\n  q = [1]\n  (1..n).each do |i|\n    x = q[-1]\n    qx << (2*x + 1)\n    qy << (3*x + 1)\n    if qx[0] < qy[0]\n      q << qx.shift\n    elsif qx[0] == qy[0]\n      q << qx.shift\n      qy.shift\n    else\n      q << qy.shift\n    end\n  end\n  return q[-1]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56a1c63f3bc6827e13000006":[{"id":45037,"user_id":53,"body":"def smaller(arr)\n  ns = Array(Int32).new(arr.size, 0)\n  node = nil\n  i = arr.size-1\n  while i >= 0\n    node = Node.add(node, arr[i], ns, i, 0)\n    i -= 1\n  end\n  ns\nend\n\nclass Node\n  property :n, :acc, :count, :left, :right\n  @right : Node | Nil\n  @left : Node | Nil\n  def initialize(n : Int32, acc : Int32) \n    @n = n\n    @acc = acc\n    @count = 1\n    @left = nil\n    @right = nil\n  end\n  def self.add(node, n, ns, i, acc)\n    if node.nil?\n      node = Node.new(n, 0)\n      ns[i] = acc\n    else\n      if node.n > n\n        node.acc += 1\n        node.left = Node.add(node.left, n, ns, i, acc)\n      elsif node.n < n\n        node.right = Node.add(node.right, n, ns, i, acc + node.acc + node.count)\n      else\n        node.count += 1\n        ns[i] = acc + node.acc\n      end\n    end\n    node\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45038,"user_id":986,"body":"def smaller(arr)\n  result_array = Array(Int32).new(arr.size, 0)\n  \n  root_node = Node.new(1000, 0)\n\n  (arr.size - 1).downto(0).each do | i |\n    current_num = arr[i]\n    root_node = root_node.add_node(current_num, root_node, result_array, i, 0)\n  end\n  \n  result_array\nend\n\nclass Node\n  property :val, :total, :freq, :right, :left\n  \n  @right : Node | Nil\n  @left : Node | Nil\n    \n  def initialize(val : Int32, total : Int32)\n    @val = val\n    @total = total\n    @freq = 1\n    @right = nil\n    @left = nil\n  end\n  \n  def add_node(current_num, root_node, result_array, idx, smaller)\n    if root_node.nil?\n      root_node = Node.new(current_num, 0)\n      result_array[idx] = smaller\n    elsif root_node.val == current_num\n      root_node.freq += 1\n      result_array[idx] = smaller + root_node.total\n    elsif root_node.val > current_num\n      root_node.total += 1\n      root_node.left = root_node.add_node(current_num, root_node.left, result_array, idx, smaller)\n    else\n      smaller += root_node.freq + root_node.total\n      root_node.right = root_node.add_node(current_num, root_node.right, result_array, idx, smaller)\n    end\n    root_node\n  end\n  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45039,"user_id":645,"body":"def smaller(arr)\n  nematode(arr)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56c04261c3fcf33f2d000534":[{"id":45040,"user_id":null,"body":"def doubles(maxk, maxn)\n   sum = 0\n   (1..maxk).each do |k|\n     k = k.to_f\n     (1..maxn).each do |n|\n       sum += 1.0 \/ (k * (n + 1) ** (2 * k))\n     end\n   end\n   sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45041,"user_id":492,"body":"def doubles(maxk, maxn)\n    k, sm = 1, 0\n    while (k <= maxk)\n        n, vk = 2, 1 \/ (k * 2.0 ** (2 * k))\n        uk = vk\n        while (n <= maxn)\n            vk *= (n \/ (n + 1).to_f) ** (2 * k)\n            uk += vk\n            n += 1\n        end\n        sm += uk\n        k += 1\n    end\n    sm\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45042,"user_id":53,"body":"include Math\n\ndef doubles(maxk, maxn)\n  sum = 0.to_f64\n  k = 1.to_f64\n  while k <= maxk\n    n = 1.to_f64\n    while n <= maxn\n      sum = sum + (1.to_f64 \/ (k * (n + 1) ** (2 * k)))\n      n = n + 1\n    end\n    k = k + 1\n  end\n  return sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45043,"user_id":168,"body":"def doubles(maxk, maxn)\n  (1..maxk).sum { |k| (1..maxn).sum { |n| 1.0 \/ (n + 1.0) ** (2 * k) } \/ k }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45044,"user_id":null,"body":"def doubles(maxk, maxn)\n   (1 .. maxk).reduce(0) { |r, k| r + (2 .. maxn + 1).reduce(0) { |s, n| s + n ** (-2.0 * k) } \/ k }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45045,"user_id":527,"body":"def doubles(maxk, maxn)\n  (1..{maxk, 20}.min).sum{ |k| (1..{maxn, 20000}.min).sum{ |n| 1 \/ (k * (n + 1) ** (2.0 * k)) } }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"585894545a8a07255e0002f1":[{"id":45046,"user_id":53,"body":"def count_patterns_from(first_dot, length)\n  return length if length < 2\n  restricted = {\n    \"AC\" => \"B\", \n    \"AC\" => \"B\",\n    \"AG\" => \"D\", \n    \"AI\" => \"E\",  \n    \"BH\" => \"E\",\n    \"CA\" => \"B\",\n    \"CG\" => \"E\",\n    \"CI\" => \"F\",  \n    \"DF\" => \"E\",  \n    \"FD\" => \"E\",\n    \"GA\" => \"D\", \n    \"GC\" => \"E\", \n    \"GI\" => \"H\", \n    \"HB\" => \"E\",\n    \"IA\" => \"E\",\n    \"IC\" => \"F\", \n    \"IG\" => \"H\"\n  }\n  dfs(first_dot.to_s, restricted, length)\nend\n\ndef dfs(pattern, restricted, length)\n  return 1 if pattern.size == length\n  count = 0\n  \"ABCDEFGHI\".chars.each{|nxt|\n    if (nxt != pattern[-1] &&         \n            !pattern.includes?(nxt) &&      \n          ( !restricted.has_key?(pattern[-1]+nxt.to_s) || pattern.includes?(restricted[pattern[-1]+nxt.to_s]) ) \n        )\n      count += dfs(pattern+nxt.to_s, restricted, length);\n    end\n  }\n  count\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45047,"user_id":null,"body":"NEIGHBORS = {\n  'A' => [['B', 'C'], ['E', 'I'], ['D', 'G'], ['F'], ['H']],\n  'C' => [['B', 'A'], ['E', 'G'], ['F', 'I'], ['D'], ['H']],\n  'G' => [['D', 'A'], ['E', 'C'], ['H', 'I'], ['B'], ['F']],\n  'I' => [['H', 'G'], ['E', 'A'], ['F', 'C'], ['D'], ['B']],\n  'E' => [['A'], ['B'], ['C'], ['D'], ['F'], ['G'], ['H'], ['I']],\n  'B' => [['E', 'H'], ['A'], ['D'], ['G'], ['I'], ['F'], ['C']],\n  'D' => [['E', 'F'], ['A'], ['B'], ['C'], ['G'], ['H'], ['I']],\n  'F' => [['E', 'D'], ['A'], ['B'], ['C'], ['G'], ['H'], ['I']],\n  'H' => [['E', 'B'], ['A'], ['C'], ['D'], ['F'], ['G'], ['I']]\n}\n\ndef count_paths(start, length, path)\n  return 1 if path.size == length\n  NEIGHBORS[start].sum(0) do |neighbors_in_direction|\n    neighbor = neighbors_in_direction.find { |neighbor| !path.includes?(neighbor) }\n    neighbor.nil? ? 0 : count_paths(neighbor, length, path + [neighbor])\n  end\nend\n\ndef count_patterns_from(first_point : Char, length : Int)\n  return 0 if length == 0 || length > 9\n  count_paths(first_point, length, [first_point])\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45048,"user_id":null,"body":"Reachable = {\n  'a' => ['b', 'd', 'e', 'f', 'h'],\n  'b' => ['a', 'c', 'd', 'e', 'f', 'g', 'i'],\n  'c' => ['b', 'd', 'e', 'f', 'h'],\n  'd' => ['a', 'b', 'c', 'e', 'g', 'h', 'i'],\n  'e' => ['a', 'b', 'c', 'd', 'f', 'g', 'h', 'i'],\n  'f' => ['a', 'b', 'c', 'e', 'g', 'h', 'i'],\n  'g' => ['b', 'd', 'e', 'f', 'h'],\n  'h' => ['a', 'c', 'd', 'e', 'f', 'g', 'i'],\n  'i' => ['b', 'd', 'e', 'f', 'h'],\n}\n\nHidden = {\n  'a' => [['c', 'b'], ['g', 'd'], ['i', 'e']],\n  'b' => [['h', 'e']],\n  'c' => [['a', 'b'], ['g', 'e'], ['i', 'f']],\n  'd' => [['f', 'e']],\n  'e' => [] of Array(Char),\n  'f' => [['d', 'e']],\n  'g' => [['c', 'e'], ['a', 'd'], ['i', 'h']],\n  'h' => [['b', 'e']],\n  'i' => [['a', 'e'], ['g', 'h'], ['c', 'f']],\n}\n\ndef extensions(path, length)\n  return 1 if length <= 0\n  lp = path[-1]\n  cont = Reachable[lp]\n  cont += Hidden[lp].select { | (_, by) | path.includes?(by) }.map(&.first)\n  (cont - path).map { | c | extensions(path + [c], length - 1) }.sum\nend\n\n# String, Int ->  Int\ndef count_patterns_from(first_dot, length)\n  return 0 if length > 9\n  return 0 if length < 1\n  extensions([first_dot.downcase], length - 1)\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45049,"user_id":1072,"body":"def count_patterns_from(f,l) l>9 ? 0 : l < 2 ? l : {\"C2\"=>5, \"C3\"=>31, \"C4\"=>154, \"C5\"=>684, \"C6\"=>2516, \"C7\"=>7104, \"C8\"=>13792, \"C9\"=>13792, \"S2\"=>7, \"S3\"=>37, \"S4\"=>188, \"S5\"=>816, \"S6\"=>2926, \"S7\"=>8118, \"S8\"=>15564, \"S9\"=>15564, \"M2\"=>8, \"M3\"=>48, \"M4\"=>256, \"M5\"=>1152, \"M6\"=>4248, \"M7\"=>12024, \"M8\"=>23280, \"M9\"=>23280}[(f=='E' ? 'M' : \"ACGI\".includes?(f) ? 'C' : 'S')+l.to_s] end","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45050,"user_id":1072,"body":"def count_patterns_from(f,l) l>9 ? 0 : l < 2 ? l : {\"C2\"=>5, \"C3\"=>31, \"C4\"=>154, \"C5\"=>684, \"C6\"=>2516, \"C7\"=>7104, \"C8\"=>13792, \"C9\"=>13792, \"S2\"=>7, \"S3\"=>37, \"S4\"=>188, \"S5\"=>816, \"S6\"=>2926, \"S7\"=>8118, \"S8\"=>15564, \"S9\"=>15564, \"M2\"=>8, \"M3\"=>48, \"M4\"=>256, \"M5\"=>1152, \"M6\"=>4248, \"M7\"=>12024, \"M8\"=>23280, \"M9\"=>23280}[(f=='E' ? 'M' : \"ACGI\".includes?(f) ? 'C' : 'S')+l.to_s] end","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5877e7d568909e5ff90017e6":[{"id":45051,"user_id":986,"body":"def find_all(digit_sum, digit_length)\n  return [] of Int32 if 9 * digit_length < digit_sum\n\n  ans = (1..9).to_a\n            .repeated_combinations(digit_length)\n            .select { | c | c.sum == digit_sum }\n            \n  [ ans.size, ans[0].join.to_i64, ans[-1].join.to_i64 ] \nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-26 11:42:04"},{"id":45052,"user_id":53,"body":"def find_all(s, w)\n  return [] of Int32 if 9 * w < s\n  digs = (1..9).to_a\n  arr = digs.repeated_combinations(w).select {|d| d.sum == s}\n  to_num = ->(n : Array(Int32)) { n.join.to_i64 }\n  [arr.size, to_num.call(arr[0]), to_num.call(arr[-1])] \nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-26 11:43:15"},{"id":45053,"user_id":50,"body":"def find_all(n, k)\n  if k > n || 9*k < n\n    return [] of Int32\n  end\n  e=[] of Int64\n  (1..9).to_a.repeated_combinations(k).select{|seq| seq.sum==n}.each do |seq|\n    e.push(seq.map{|x| x.to_s}.join.to_i64)\n  end\n  [e.size,e.min.to_i64,e.max.to_i64]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45054,"user_id":863,"body":"# the array methods are backported from more recent versions of Crystal\nclass Array\n  private def pool_slice(pool, size, reuse)\n    if reuse\n      reuse.clear\n      size.times { |i| reuse << pool[i] }\n      reuse\n    else\n      pool[0, size]\n    end\n  end\n\n  def each_repeated_combination(size : Int = self.size, reuse = false) : Nil\n    n = self.size\n    return if size > n && n == 0\n    raise ArgumentError.new(\"Size must be positive\") if size < 0\n\n    reuse = check_reuse(reuse, size)\n    copy = self.dup\n    indices = Array.new(size, 0)\n    pool = indices.map { |i| copy[i] }\n\n    yield pool_slice(pool, size, reuse)\n\n    while true\n      stop = true\n\n      i = size - 1\n      while i >= 0\n        if indices[i] != n - 1\n          stop = false\n          break\n        end\n        i -= 1\n      end\n      return if stop\n\n      ii = indices[i] + 1\n      tmp = copy[ii]\n      indices.fill(i, size - i) { ii }\n      pool.fill(i, size - i) { tmp }\n\n      yield pool_slice(pool, size, reuse)\n    end\n  end\nend\n\ndef find_all(sum, length)\n  numbers = Array(Int64).new\n  (1..9).to_a.each_repeated_combination(length) do |e|\n    numbers << e.join.to_i64 if e.sum == sum\n  end\n  return numbers if numbers.empty?\n  [numbers.size.to_i64].push(*numbers.minmax)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5886e082a836a691340000c3":[{"id":45055,"user_id":53,"body":"def rectangle_rotation(a, b)\n  a = (a.to_f \/ Math.sqrt(2)).to_i\n  b = (b.to_f \/ Math.sqrt(2)).to_i\n  r = (a + 1) * (b + 1) + a * b\n  r + r % 2 - 1\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45056,"user_id":null,"body":"def rectangle_rotation(a, b)\n  a2 = a \/ 2 ** 1.5\n  b2 = b \/ 2 ** 1.5\n  r1a = a2.floor * 2 + 1\n  r1b = b2.floor * 2 + 1\n  r1a * r1b + (r1a + (a2 % 1 < 0.5 ? -1 : 1)) * (r1b + (b2 % 1 < 0.5 ? -1 : 1))\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45057,"user_id":null,"body":"def rectangle_rotation(a, b)\n  half_sqrt2 = Math.sqrt(2) \/ 2\n  start_x = half_sqrt2 * (a + b) \/ 2\n  start_y = half_sqrt2 * (a - b).abs \/ 2\n  p! start_x\n  p! start_y\n  points = 0\n  # iterate over each vertical line inside the rectangle\n  ((-start_x).to_i..start_x.to_i).each do |x|\n    if x < -start_y\n      y_upper = -start_y + (x + start_x)\n      y_lower = -start_y - (x + start_x)\n    elsif x < start_y\n      y_upper = -start_y + (x + start_x)\n      y_lower = -start_x + (x + start_y)\n    else\n      y_upper = start_x - (x - start_y)\n      y_lower = -start_x + (x + start_y)\n    end\n    pts = y_upper.floor.to_i - y_lower.ceil.to_i + 1\n    points += pts\n  end\n  points\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45058,"user_id":168,"body":"def rectangle_rotation(a, b)\n  x, y = a \/\/ Math.sqrt(2), b \/\/ Math.sqrt(2)\n  2 * x * y + x + y - ((x ^ y) & 1) + 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45059,"user_id":50,"body":"def f(a)\n  (a\/Math.sqrt(2)).floor\nend\ndef rectangle_rotation(a, b)\n  e=f(a)\n  h=f(b)\n  x=(2*e*h+e+h+1).to_i\n  x-(x&1^1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45060,"user_id":421,"body":"def rectangle_rotation(a, b)\n  a \/\/= Math.sqrt(2)\n  b \/\/= Math.sqrt(2)\n  r = (a + 1) * (b + 1) + a * b\n  r + r % 2 - 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45061,"user_id":null,"body":"def rectangle_rotation(a, b)\n    x, y = a \/\/ 2**0.5 + 1, b \/\/ 2**0.5 + 1\n    2 *x * y - x - y + 1 - (x + y) % 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45062,"user_id":492,"body":"def rectangle_rotation(a, b)\n    x = (a \/ Math.sqrt(2.0)).floor\n    y =(b \/ Math.sqrt(2.0)).floor\n    res = 0\n    if ((x + y) % 2 == 0)\n        res = (x + 1) * (y + 1) + x * y\n    else\n        res =  (x + 1) * y + x * (y + 1)\n    end\n    res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45063,"user_id":645,"body":"def rectangle_rotation(a, b)\n  h = (a \/ Math.sqrt(2)).to_i\n  v = (b \/ Math.sqrt(2)).to_i\n  h * v + -~h * -~v - (h % 2 ^ v % 2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58ad317d1541651a740000c5":[{"id":45064,"user_id":53,"body":"def middle_permutation(s) \n  s = s.chars.sort.reverse\n  i = s.size>>1\n  left = s[i,s.size%2+1]\n  mid = s[0,i]\n  right = s[i+(s.size%2+1),s.size]\n  (left+mid+right).join\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-26 10:09:31"},{"id":45065,"user_id":50,"body":"def middle_permutation(s)\n  a=s.chars.sort.reverse\n  l=s.size\n  b =a[l>>1..(l>>1)+(l&1)]\n  a.each do |c|\n    if !b.includes?(c)\n      b.push(c)\n    end\n  end\n  b.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45066,"user_id":null,"body":"def middle_permutation(string) \n   # at first you need to sort your characters \n   # next you need to find the middle part of your string\n   #then you should remove it and insert at the beginning of the reversed string\n     string = string.chars.sort.join\n     string.size.even? ? string[string.size \/\/ 2 - 1] + (string[0...string.size \/\/ 2 - 1] + string[string.size \/\/ 2..string.size - 1]).reverse : string[string.size \/\/ 2] + middle_permutation((string[0...string.size \/\/ 2] + string[string.size \/\/ 2 + 1..string.size - 1]))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45067,"user_id":421,"body":"def middle_permutation(string)\n  arr = string.split(\"\").sort\n  if arr.size.odd?\n    mid = arr[arr.size \/\/ 2] + arr[arr.size \/\/ 2 - 1]\n    mid + (arr[0...arr.size \/\/ 2 - 1] + arr[arr.size \/\/ 2 + 1..-1]).reverse.join\n  else \n    mid = arr[arr.size \/\/ 2 - 1]\n    mid + (arr[0...arr.size \/\/ 2 - 1] + arr[arr.size \/\/ 2..-1]).reverse.join\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45068,"user_id":527,"body":"require \"big\"\n\ndef middle_permutation(string : String) : String\n  chars = string.chars.sort\n  i = (chars.size.to_big_i.factorial - 1) \/\/ 2\n  String.build do |res|\n    (chars.size - 1).downto(0).each do |k|\n      j, i = i.divmod(k.to_big_i.factorial)\n      res << chars.delete_at(j)\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45069,"user_id":1072,"body":"def middle_permutation(s)\n  s,i=s.split(\"\").sort.reverse,s.size\/\/2\n  (s[i,s.size%2==1 ? 2 : 1]+s[0,i]+s[i+(s.size%2==1 ? 2 : 1),99]).join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45070,"user_id":null,"body":"def middle_permutation(string)\n  string = string.chars.sort.join(\"\")\n  return string if string.size <= 2\n  \n  if string.size.even?\n    middle = string.size \/ 2 - 1\n    remainder = string[0...middle] + string[middle+1..-1]\n    remainder.reverse.insert(0, string[middle])\n  else\n    middle = string.size \/ 2\n    remainder = string[0...middle-1] + string[middle+1..-1]\n    remainder.reverse.insert(0, string[middle-1]).insert(0, string[middle])\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45071,"user_id":null,"body":"def middle_permutation(string)\n  s = string.chars.sort\n  r = s.delete_at(s.size \/ 2 - (1 - s.size % 2)).to_s\n  if s.size % 2 == 0\n    r += s.delete_at(s.size \/ 2 - 1)\n  end\n  r + s.reverse.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45072,"user_id":null,"body":"def middle_permutation(string)\n    String.build do |buf|\n        chrs = string.chars.sort\n        if chrs.size % 2 == 1\n            buf << chrs[chrs.size \/ 2]\n            buf << chrs[chrs.size \/ 2 - 1]\n            (1..chrs.size).each do |i|\n                if i != chrs.size \/ 2 + 1 && i != chrs.size \/ 2 + 2\n                    buf << chrs[-i]\n                end\n            end\n        else\n            buf << chrs[chrs.size \/ 2 - 1]\n            (1..chrs.size).each do |i|\n                if i != chrs.size \/ 2 + 1\n                    buf << chrs[-i]\n                end\n            end\n        end\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45073,"user_id":863,"body":"def middle_permutation(string)\n  s = string.chars.sort.join\n  m = s.size \/ 2 - 1\n  if s.size.even?\n    s.match(\/(.{#{m}})(.)(.*)\/).try do |(_, first, mid, last)|\n      mid + (first + last).reverse\n    end\n  else\n    s.match(\/(.{#{m}})(.)(.)(.*)\/).try do |(_, first, ante, mid, last)|\n      mid + ante + (first + last).reverse\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45074,"user_id":null,"body":"require \"big\"\n\ndef middle_permutation(string)\n  cs = string.chars.sort\n  mid = [] of Char\n  rem = (fact(cs.size)-1)\/2\n  while cs.size > 0\n    idx, rem = rem \/ fact(cs.size-1), rem % fact(cs.size-1)\n    mid << cs.delete_at(idx)\n  end\n  mid.join\nend\n\ndef fact(n)\n  (1.to_big_i..n).product\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45075,"user_id":null,"body":"def middle_permutation(string)\n  arr = string.split(\/\/).sort\n  \n  res = [] of String\n  if arr.size % 2 == 1\n    res << arr.delete_at((arr.size \/ 2).floor)\n  end\n\n  res << arr.delete_at((arr.size \/ 2) - 1)\n  \n  res.concat(arr.reverse)\n  res.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45076,"user_id":null,"body":"def middle_permutation(string)\n  string = string.split(\"\").sort.join(\"\")\n  if string.size.even?\n    middle_char = string[(string.size \/ 2) - 1]\n    \"#{middle_char}#{string.delete(middle_char).reverse}\"\n  else\n    middle_chars = string[(string.size \/ 2) - 1..(string.size \/ 2)]\n    \"#{middle_chars.reverse}#{string.tr(middle_chars, \"\").reverse}\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45077,"user_id":null,"body":"def middle_permutation(s)\n  s = s.chars.sort.join\n  a, b, c, d = 0, s.size \/ 2 - 1, (s.size + 1) \/ 2, s.size\n  (s[a...b] + s[c...d] + s[b...c]).reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45078,"user_id":1072,"body":"def middle_permutation(s) s,i=s.split(\"\").sort.reverse,s.size\/2; (s[i,s.size%2==1 ? 2 : 1]+s[0,i]+s[i+(s.size%2==1 ? 2 : 1),99]).join end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a3af5b1ee1aaeabfe000084":[{"id":45079,"user_id":986,"body":"def sum_of_squares(n : Int32)\n  root = n**0.5\n  \n  return 1 if root.floor == root\n\n  while n%4 == 0\n    n \/= 4\n  end\n    \n  return 4 if n%8 == 7\n  \n  (2..root.to_i).each do |i|\n    square = i**2\n    next unless n >= square\n    complement = Math.sqrt(n - square)\n    return 2 if complement%1 == 0\n  end\n  3\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-26 15:08:57"},{"id":45080,"user_id":421,"body":"def sum_of_squares(n : Int32)\n  return 1 if Math.sqrt(n) % 1 == 0 # perfect square\n  # sum of 2 perfect squares\n  (1..Math.sqrt(n).ceil).each do |i|\n    return 2 if Math.sqrt(n - i * i) % 1 == 0\n  end\n  # sum of 4 perfect squares (4^a * (8b + 7))\n  while n % 4 == 0\n    n >>= 2\n  end\n  return 4 if n % 8 == 7\n  return 3\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45081,"user_id":53,"body":"def sum_of_squares(n)\n  return 1 if sq(n)\n  (1..isqrt(n)).each{|i|\n    return 2 if sq(n-i**2)\n  }\n  while n%4==0\n    n\/=4\n  end\n  n%8==7 ? 4 : 3\nend\n\ndef isqrt(n)\n  (n**0.5).to_i\nend\n\ndef sq(n)\n  isqrt(n)**2==n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45082,"user_id":50,"body":"def sum_of_squares(n : Int32)\n  a=n\n  until a%4!=0\n    a\/=4\n  end\n  if a%8==7\n    return 4\n  end\n  s=n**0.5\n  if s%1 == 0\n   return 1\n  end\n  (1..s.to_i).each do |k|\n    if ((n-k**2)**0.5)%1==0\n      return 2\n    end\n  end\n  3\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45083,"user_id":null,"body":"def factorize(n : Int32)\n  k = 2\n  res = {} of Int32 => Int32\n  while n >= k * k\n    while n % k == 0\n      res[k] ||= 0\n      res[k] += 1\n      n \/= k\n    end\n    k += 1\n  end\n  res[n] = 1 unless n == 1\n  res\nend\n\ndef sum_of_squares(n : Int32)\n  f = factorize(n)\n  return 1 if f.values.all?(&.even?)\n  return 2 if f.keys.all? { | p | p % 4 != 3 || f[p] % 2 == 0 }\n  return 3 if n \/ 4**((f[2]? || 0) \/ 2) % 8 != 7\n  return 4\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45084,"user_id":863,"body":"def square?(n)\n  Math.sqrt(n).to_i.abs2 == n\nend\n\ndef sum_of_squares(n)\n  return 1 if square?(n)\n  \n  while (n & 3).zero?\n    n = n >> 2\n  end\n  \n  return 4 if (n & 7) == 7\n  \n  (1..Math.sqrt(n)).any? {|i| square?(n - i.abs2) } ? 2 : 3\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45085,"user_id":null,"body":"def prime_factor(n : Int32, pf_hash : Hash(Int32, Int32))\n    (3..(Math.sqrt(n) + 1).to_i).each { |i|\n      if n % i == 0\n        pf_hash[i] = pf_hash[i] + 1\n        return prime_factor(n\/i, pf_hash)\n      end\n    }\n        \n    pf_hash[n] = pf_hash[n] + 1\n    return pf_hash\nend\n\ndef sum_of_squares(n : Int32)\n  if n % 4 == 0\n    return sum_of_squares(n\/4)\n  elsif n % 8 == 7\n    return 4\n  elsif n % 4 == 3\n    return 3\n  elsif n % 2 == 0 && n\/2 % 8 ==7\n    return 3\n  elsif n % 2 == 0\n    ss = sum_of_squares(n\/2)\n    ss == 1 ? 2: ss\n  elsif n == 1\n    return 1\n  else\n    pf = prime_factor(n, Hash(Int32, Int32).new(0))\n    if pf.select {|k, v| v % 2==1}.empty?\n      return 1\n    elsif pf.select{|k, v| v % 2 == 1 && k % 4 ==3}.empty?\n      return 2\n    else\n      return 3\n    end\n  end \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"50654ddff44f800200000004":[{"id":45086,"user_id":17,"body":"def multiply(x, y)\n  x * y\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45087,"user_id":null,"body":"def multiply(x, y)\n  return x * y\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45088,"user_id":null,"body":"def multiply(x : Int, y : Int)\n  x * y\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45089,"user_id":null,"body":"def multiply(x : Int64, y : Int64) : Int32\n  return x * y\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45090,"user_id":null,"body":"def multiply(x : Int64, y : Int64)\n  x * y\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45091,"user_id":null,"body":"def multiply(x : Number,  y : Number) : Number\n  x * y\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45092,"user_id":null,"body":"def multiply(x, y): Number\n  return x * y\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45093,"user_id":null,"body":"def multiply(a : Int, b : Int)\n  b == 0 ? 0: b > 0? a + multiply(a, b -1): multiply(a, b + 1) - a\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45094,"user_id":527,"body":"def multiply(x, y)\n  x * y + 0\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45095,"user_id":527,"body":"def multiply(x, y)\n  x * y + 0 * 7\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"50ee6b0bdeab583673000025":[{"id":45096,"user_id":null,"body":"A = \"code\"\nB = \"wa.rs\"\nName = \"codewa.rs\"","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45097,"user_id":null,"body":"A = \"code\"\nB = \"wa.rs\"\nName = A + B","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"511f11d355fe575d2c000001":[{"id":45098,"user_id":null,"body":"# return the two oldest\/oldest ages within the array of ages passed in.\ndef two_oldest_ages(ages)\n  ages.sort!.last 2\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45099,"user_id":null,"body":"# return the two oldest\/oldest ages within the array of ages passed in.\ndef two_oldest_ages(ages)\n  ages.sort { |a, b| b <=> a}[0..1].sort\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45100,"user_id":null,"body":"# return the two oldest\/oldest ages within the array of ages passed in.\ndef two_oldest_ages(ages)\n  ages.sort![-2..-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45101,"user_id":null,"body":"# return the two oldest\/oldest ages within the array of ages passed in.\ndef two_oldest_ages(ages)\n  oldest = 0\n  second_oldest = 0\n  ages.each do |age|\n    if age > oldest\n      second_oldest = oldest\n      oldest = age\n    end\n    if age > second_oldest && age < oldest\n      second_oldest = age\n    end\n  end\n  return [second_oldest,oldest]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45102,"user_id":null,"body":"# return the two oldest\/oldest ages within the array of ages passed in.\ndef two_oldest_ages(ages)\n  ages.sort!\n  return ages[-2..-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45103,"user_id":53,"body":"# return the two oldest\/oldest ages within the array of ages passed in.\ndef two_oldest_ages(ages)\n  sorted = ages.sort { |x, y| y <=> x }\n  return [sorted[1], sorted[0]]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45104,"user_id":null,"body":"# return the two oldest\/oldest ages within the array of ages passed in.\ndef two_oldest_ages(xs)\n  xs.sort[-2..-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45105,"user_id":null,"body":"# return the two oldest\/oldest ages within the array of ages passed in.\ndef two_oldest_ages(ages)\n  ages.sort[-2..]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45106,"user_id":null,"body":"# return the two oldest\/oldest ages within the array of ages passed in.\ndef two_oldest_ages(ages)\n  s = ages.sort { |x, y| y <=> x }\n  [s[1], s[0]]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45107,"user_id":null,"body":"# return the two oldest\/oldest ages within the array of ages passed in.\ndef two_oldest_ages(arr)\nmax1=0\nmax2=0\narr.each do |val|\n  puts val\n    if val>max1\n      max2=max1\n        max1=val\n    elsif val>max2\n    \tmax2=val\n  end\nend\nans=[max2,max1]\nreturn ans\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"514a6336889283a3d2000001":[{"id":45108,"user_id":null,"body":"def get_even_numbers(arr)\n  arr.select!(&.even?)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45109,"user_id":527,"body":"def get_even_numbers(xs : Array(T)) : Array(T) forall T\n  xs.select(&.even?)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45110,"user_id":53,"body":"def get_even_numbers(arr)\n  arr.select {|num| num.even? } \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45111,"user_id":50,"body":"def get_even_numbers(arr)\n  arr.select{|x| x&1==0}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45112,"user_id":421,"body":"def get_even_numbers(arr)\n  arr.select(&.even?)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"514b92a657cdc65150000006":[{"id":45113,"user_id":null,"body":"def solution(number : Int32)\n  (1..number-1).select { |i| i % 3 == 0 || i % 5 == 0 }.sum\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45114,"user_id":1624,"body":"def sum_multiples(n, d)\n  e  = ((n-1) \/ d).to_i\n  d * (1 + e) * e \/ 2\nend\n\ndef solution(n)\n  sum_multiples(n, 3) + sum_multiples(n, 5) - sum_multiples(n, 15)\nend\n","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45115,"user_id":null,"body":"def solution(number : Int32 )\n  sum : Int32 = 0\n  number.times {|x| sum += x if x % 3 == 0 || x % 5 == 0}\n  sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45116,"user_id":17,"body":"def solution(n)\n  3 * (((n - 1) \/ 3) * ((n - 1) \/ 3 + 1) \/ 2) + 5 * (((n - 1) \/ 5) * ((n - 1) \/ 5 + 1) \/ 2) - 15 * (((n - 1) \/ 15) * ((n - 1) \/ 15 + 1) \/ 2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45117,"user_id":null,"body":"def solution(number : Int32 )\n  number.times.select{ |i| (i % 3).zero? || (i % 5).zero? }.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45118,"user_id":null,"body":"def solution(num : Int32)\n  (1...num).sum { |n| [3,5].select(&.!= 0).any? { |m| n.divisible_by? m } ? n : 0 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45119,"user_id":53,"body":"def solution(n : Int32)\n  sum = 0\n  n -= 1\n  n3 = (n - n % 3) \/\/ 3\n  n5  = (n - n % 5 ) \/\/ 5\n  n15 = (n - n % 15) \/\/ 15\n  sum += 3 * n3 * (n3 + 1) \/\/ 2\n  sum += 5 * n5 * (n5 + 1) \/\/ 2\n  sum -= 15 * n15 * (n15 + 1) \/\/ 2\n  sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45120,"user_id":168,"body":"def solution(number : Int32 )\n  (3...number).select { |n| n % 3 == 0 || n % 5 == 0 }.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45121,"user_id":null,"body":"def solution(number : Int32)\n  number < 0 ? 0 : (0..number - 1).to_a.select { |n| n % 3 == 0 || n % 5 == 0 }.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45122,"user_id":null,"body":"def solution(number : Int32 )\n  (1..number-1).select{|x| (x % 3 == 0)||(x % 5 == 0)}.sum\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"515bb423de843ea99400000a":[{"id":45123,"user_id":53,"body":"class PaginationHelper(T)\n  def initialize(@collection : Array(T), @items_per_page : Int32)\n    \n  end\n  \n  def collection\n    @collection\n  end\n  \n  def items_per_page\n    @items_per_page\n  end\n  \n  def item_count\n    collection.size\n  end\n  \n  def page_count\n    (item_count \/ items_per_page).ceil\n  end\n  \n  def page_item_count(item_index : Int32)\n    (item_index < page_count) && (item_index >= 0) ? Math.min(items_per_page, item_count - item_index * items_per_page) : -1\n  end\n  \n  def page_index(page_index : Int32)\n    (page_index < item_count) && (page_index >= 0) ? (page_index \/ items_per_page).floor.to_i : -1\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45124,"user_id":null,"body":"class PaginationHelper(T)\n  def initialize(@collection : Array(T), @items_per_page : Int32)\n    \n  end\n  \n  def collection : Array(T)\n    return @collection\n  end\n  \n  def items_per_page : Int32\n    return @items_per_page\n  end\n  \n  def item_count : Int32\n    return @collection.size\n  end\n  \n  def page_count : Int32\n    return (@collection.size\/ @items_per_page).ceil.to_i\n  end\n  \n  def page_item_count(item_index : Int32)\n    index = @items_per_page*item_index\n    return index >= 0 && index < item_count() ? [index+@items_per_page, item_count()].min-index : -1\n  end\n  \n  def page_index(item_index : Int32)\n    return item_index >= 0 && item_index < item_count() ? item_index\/\/@items_per_page : -1\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45125,"user_id":null,"body":"class PaginationHelper(T)\n  getter collection, items_per_page\n  def initialize(@collection : Array(T), @items_per_page : Int32)\n    \n  end\n  \n  def item_count\n    @collection.size\n  end\n  \n  def page_count\n    (item_count \/ @items_per_page).ceil\n  end\n  \n  def last_page\n    page_count - 1\n  end\n  \n  def page_item_count(page_index : Int32)\n    case page_index\n    when 0...last_page\n      @items_per_page\n    when last_page\n      item_count % @items_per_page\n    else\n      -1\n    end\n  end\n  \n  def page_index(item_index : Int32)\n    if 0 <= item_index < item_count\n      item_index \/\/ @items_per_page\n    else\n      -1\n    end  \n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45126,"user_id":null,"body":"class PaginationHelper(T)\n  def initialize(@collection : Array(T), @items_per_page : Int32)\n    \n  end\n  \n  def collection\n    @collection\n  end\n  \n  def items_per_page\n    @items_per_page\n  end\n  \n  def item_count\n    collection.size\n  end\n  \n  def page_count\n    (collection.size \/ items_per_page).ceil\n  end\n  \n  def page_item_count(page_index : Int32)\n    return -1 if page_index < 0 || page_index >= page_count\n    return items_per_page if (page_index != page_count-1)\n    item_count % items_per_page\n  end\n  \n  def page_index(item_index : Int32)\n    return -1 if (item_index < 0 || item_index >= item_count)\n    (item_index \/ items_per_page).floor.to_i32;\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"515de9ae9dcfc28eb6000001":[{"id":45127,"user_id":null,"body":"def solution(str)\n  str.chars.in_groups_of(2, '_').map(&.join)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45128,"user_id":527,"body":"def solution(str)\n  (str + '_').scan(\/..\/).map(&.[](0))\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45129,"user_id":null,"body":"def solution(s)\n  s += '_' if s.size.odd?\n  s.each_char.slice(2).to_a.map(&.join)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45130,"user_id":527,"body":"def solution(str : String) : Array(String)\n  str.each_char.in_groups_of(2, '_', true).map(&.join).to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45131,"user_id":null,"body":"def solution(str)\n  str.chars.in_groups_of(2, \"_\").map{|a| a.join}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45132,"user_id":null,"body":"def solution(str)\n  str.split(\/(^\\d{1(?=(\\w{2})*$)|\\w{2})\/, remove_empty: true).map &.ljust(2, '_')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45133,"user_id":null,"body":"def solution(str)\n  if str.size % 2 > 0\n    str = \"#{str}_\"\n  end\n  \n  res = [] of String\n  (str.size \/\/ 2).times do |i|\n    res << String.build do |builder|\n      builder << str[i * 2]\n      builder << str[i * 2 + 1]\n    end\n  end\n\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45134,"user_id":null,"body":"def solution(str : String) : Array(String)\n  str.chars.in_groups_of(2, '_').map(&.join)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45135,"user_id":null,"body":"def solution(str)\n  return (str.size.even? ? str : \"#{str}_\").scan(\/\\w(\\w|_)\/).map(&.[0])\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45136,"user_id":null,"body":"def solution(str)\n  res = [] of String\n  \"#{str}\".chars.each_slice(2) do |e|\n  e << '_'  if e.size == 1\n    res << e.join\n  end\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"515e271a311df0350d00000f":[{"id":45137,"user_id":527,"body":"def square_sum(arr)\n  arr.sum(&.**(2))\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45138,"user_id":null,"body":"def square_sum(arr)\n  arr.sum { |n| n * n }\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45139,"user_id":527,"body":"def square_sum(arr)\n  arr.sum{ |x| x * x }\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45140,"user_id":53,"body":"def square_sum(arr)\n  arr.reduce(0){|acc,x|acc+x*x}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45141,"user_id":null,"body":"def square_sum(arr)\n  sum = 0\n  arr.each do |num|\n    sum += num * num\n  end\n  sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45142,"user_id":null,"body":"def square_sum(arr)\n  x = 0\n  ssum = 0\n  \n  while x < arr.size\n    ssum += arr[x] ** 2\n    x += 1\n  end\n\n  return ssum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45143,"user_id":null,"body":"def square_sum(arr)\n  arr = arr.map{|a| a*a}\n  arr.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45144,"user_id":null,"body":"def square_sum(arr)\n  out = 0\n  arr.each do |value|\n    out += value**2 \n   end\n  out\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45145,"user_id":null,"body":"def square_sum(arr)\n  sum = 0\n  arr.each do |i|\n    sum += i * i\n  end\n  sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45146,"user_id":null,"body":"def square_sum(arr)\n  arr.map { |n| n * n }.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"515f51d438015969f7000013":[{"id":45147,"user_id":564,"body":"def pyramid(n)\n  (1..n).map {|a| [1] * a}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45148,"user_id":null,"body":"def pyramid(n)\n  result = [] of Array(Int32)\n  n.times do |n|\n    result << Array.new(n+1, 1)\n  end\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45149,"user_id":null,"body":"def pyramid(n)\n  (1..n).map { |i| Array.new(i) { 1 } }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45150,"user_id":492,"body":"def pyramid(n)\n  (1..n).map { |num| [1] * num }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45151,"user_id":null,"body":"def pyramid(n)\n  (1..n).map { |s| Array.new(s, 1) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45152,"user_id":null,"body":"def pyramid(n)\n  return [] of Array(Int32) if n.zero?\n  pyramid(n-1) << Array(Int32).new(n, 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45153,"user_id":53,"body":"def pyramid(n)\n  acc = Array.new(n, [] of Int32)\n  i = 0\n  while i < n\n    acc[i] = [] of Int32\n    xs = acc[i]\n    j = 0\n    while j <= i\n      xs.push(1)\n      j += 1\n    end\n    i += 1\n  end\n  acc\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45154,"user_id":null,"body":"def pyramid(n)\n  (1..n).map{|x| [1]*x}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45155,"user_id":1474,"body":"def pyramid(n)\n  n == 0 ? [] of Int32 : (1..n).map { |i| [1] * i }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45156,"user_id":null,"body":"def pyramid(n)\n  (1..n).map{|i| [1]*i}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"51675d17e0c1bed195000001":[{"id":45157,"user_id":1474,"body":"def solution(digits)\n  digits.chars.each_cons(5).map { |a| a.join.to_i }.max\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45158,"user_id":null,"body":"def solution(n : String) : Int\n  digits = n.size\n  maximum = n[0...5].to_i\n  \n  (1..digits - 5).each do |i|\n    current = n[i...i + 5].to_i\n    maximum = current if current > maximum\n  end\n  \n  return maximum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45159,"user_id":null,"body":"def solution(digits)\n  acc = 0\n  digits.each_char_with_index { |_, i| acc = digits[i..i+4].to_i > acc ? digits[i..i+4].to_i : acc }\n  acc\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45160,"user_id":null,"body":"def solution(digits)\n  (0..digits.size-5).map{|x| digits[x...x+5].to_i}.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45161,"user_id":53,"body":"def solution(digits)\n  ans = 0\n  i = 0\n  while i < digits.size\n    n = digits[i, 5].to_i\n    ans = n if n > ans\n    i += 1\n  end\n  ans\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45162,"user_id":null,"body":"def solution(digits)\n  digits.split(\"\").each_cons(5).max_by { |cons| cons.join.to_i }.join.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45163,"user_id":null,"body":"def solution(digits)\n  n = 0\n  k = 0\n  len = digits.size - 1\n  \n  while n < len\n    num = digits[n, 5].to_i\n  \n    k = num if num > k\n    \n    n += 1\n  end\n\n  k\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45164,"user_id":527,"body":"def solution(digits)\n  digits.chars.each_cons(5).max_of(&.join.to_i)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45165,"user_id":209,"body":"def solution(d)\n  (0..d.size-5).map{|i| d[i,5].to_i}.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45166,"user_id":421,"body":"def solution(digits)\n  digits.size < 5 ? digits.to_i : digits.chars.each_cons(5).max.join.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5168bb5dfe9a00b126000018":[{"id":45167,"user_id":527,"body":"def solution(str : String) : String\n  str.reverse\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45168,"user_id":null,"body":"def solution(str)\n  str.chars.reduce(\"\") { |res, c| c + res } || \"\"\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45169,"user_id":209,"body":"def solution(x)\n  x.reverse\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45170,"user_id":421,"body":"def solution(str)\n str.reverse()\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"51c89385ee245d7ddf000001":[{"id":45171,"user_id":527,"body":"def solution(value)\n  \"Value is %05d\" % value\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45172,"user_id":421,"body":"def solution(value)\n  \"Value is #{value.to_s.rjust(5, '0')}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45173,"user_id":50,"body":"def solution(n)\n  \"Value is %05d\" % n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45174,"user_id":527,"body":"def solution(value : Int) : String\n  \"Value is %05d\" % value\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"51c8991dee245d7ddf00000e":[{"id":45175,"user_id":421,"body":"def reverse_words(sentence)\n  sentence.split.reverse.join \" \"\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45176,"user_id":null,"body":"def reverse_words(sentence)\n  sentence.split(\/\\s+\/).reverse.join(\" \")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45177,"user_id":527,"body":"def reverse_words(sentence : String) : String\n  sentence.split(' ').reverse.join(' ')\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45178,"user_id":209,"body":"def reverse_words(s)\n  s.split(\" \").reverse.join(\" \")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"51e04f6b544cf3f6550000c1":[{"id":45179,"user_id":421,"body":"def beeramid(bonus, price)\n  level = 0\n  n = 1\n  i = 1\n  while n <= bonus \/ price\n    i += 1\n    n += i ** 2\n    level += 1\n  end\n  level\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45180,"user_id":null,"body":"def beeramid(bonus : Number, price : Number) : Number\n  total = 0\n  i = 1\n  \n  while (bonus \/ price).floor > total\n    i += 1\n    total += i * i\n  end\n  \n  i - 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45181,"user_id":1474,"body":"def sum_of_squares(n)\n  n * (n + 1) * (2 * n + 1) \/ 6\nend\n\ndef beeramid(bonus, price)\n  tmp = bonus \/ price\n  ret = (1..tmp).take_while { |n| sum_of_squares(n) <= tmp }\n  ret.empty? ? 0 : ret.last\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45182,"user_id":527,"body":"def beeramid(bonus, price)\n  n = bonus \/\/ price\n  (1..).find{ |i| i * (i + 1) * (2 * i + 1) \/\/ 6 > n }.not_nil! - 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45183,"user_id":50,"body":"def beeramid(bonus, price)\n  k = 0\n  while k*(k+1)*(2*k+1)\/6-1<(bonus\/price).floor\n    k+=1\n  end\n  return [0,k-1].max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"51f2d1cafc9c0f745c00037d":[{"id":45184,"user_id":645,"body":"def solution(str, ending)\n  str.ends_with?(ending)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45185,"user_id":null,"body":"def solution(str, ending)\n  str.chomp(ending).size == str.size - ending.size\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45186,"user_id":null,"body":"def solution(str, ending)\n  str.ends_with?(ending)  # your code here\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45187,"user_id":null,"body":"def solution(str, ending)\n  # your code here\n  e = str.ends_with?(ending)\n  e\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45188,"user_id":null,"body":"def solution(str, ending)\n  # your code here\n  str.ends_with? ending\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45189,"user_id":null,"body":"def solution(str, ending)\n  # your code here\n  if ending == \"\"\n    true\n  elsif str.index(ending).nil? \n    false\n  else\n    return str[-ending.size..-1] == ending ? true : false\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45190,"user_id":null,"body":"def solution(str, ending)\n  return str.ends_with?(ending)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45191,"user_id":null,"body":"def solution(str, ending)\n  return false if (es = ending.size) > str.size \n  return true if es == 0\n  str[-es..-1] == ending\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45192,"user_id":null,"body":"def solution(str, ending)\n  str.ends_with?(ending) ? true : false\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45193,"user_id":null,"body":"def solution(str, ending)\n  str.size < ending.size ? false : str[-ending.size, ending.size].includes?(ending)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"51f41b98e8f176e70d0002a8":[{"id":45194,"user_id":null,"body":"# input: names - unsorted array\n# output: sorted array\ndef sortme(names)\n  names.sort\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45195,"user_id":527,"body":"def sortme(names : Array(T)) : Array(T) forall T\n  names.sort\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45196,"user_id":527,"body":"def sortme(names : Array(String)) : Array(String)\n  names.sort\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45197,"user_id":421,"body":"def sortme( names )\n  names.sort\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"51f9d93b4095e0a7200001b8":[{"id":45198,"user_id":1474,"body":"def how_many_light_sabers_do_you_own(name=\"dummy\")\n  name == \"Zach\" ? 18 : 0\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45199,"user_id":null,"body":"def how_many_light_sabers_do_you_own(name = \"\")\n  if name == \"Zach\"\n    18\n  else\n    0\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45200,"user_id":421,"body":"def how_many_light_sabers_do_you_own(name = \"\")\n  name == \"Zach\" ? 18 : 0\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"51fd6bc82bc150b28e0000ce":[{"id":45201,"user_id":null,"body":"def no_odds( values )\n  values.select!{|v|v.even?}\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 16:42:41"},{"id":45202,"user_id":null,"body":"def no_odds( values )\n  values.reject!{|n| n.odd?}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45203,"user_id":53,"body":"def no_odds( values )\n  values.select{|n|n%2==0}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45204,"user_id":50,"body":"def no_odds( values )\n    values.select{|n| n.even?}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45205,"user_id":null,"body":"def no_odds( values )\n  values.select{|x| x % 2 == 0}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45206,"user_id":209,"body":"def no_odds( v )\n  v.select{|i| i % 2 == 0}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45207,"user_id":421,"body":"def no_odds( values )\n  values.select(&.even?)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5208f99aee097e6552000148":[{"id":45208,"user_id":527,"body":"def solution(string : String) : String\n  string.gsub(\/(?=[A-Z])\/, ' ')\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45209,"user_id":421,"body":"def solution(string : String)\n   string.gsub(\/[A-Z]\/){|x| ' ' + x}\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45210,"user_id":682,"body":"def solution(string : String)\n  string.gsub(\/([A-Z])\/,\" \\\\1\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45211,"user_id":null,"body":"def solution(string : String)\n  string.chars.map do |char|\n    char.uppercase? ? \" #{char}\" : char\n  end.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45212,"user_id":null,"body":"def solution(string : String)\n    string.gsub(\/[A-Z]\/) { |i| \" #{i}\" }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45213,"user_id":null,"body":"def solution(string : String)\n  string.chars.map {|i| i.uppercase? ? \" #{i}\" : i}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45214,"user_id":null,"body":"def solution(string : String)\n  res = \"\"\n  string.chars.each {|l| l.ascii_uppercase? ? {res = res + \" \" + l} : {res = res + l}}\n  return res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45215,"user_id":null,"body":"def solution(s : String)\n    s.chars.map { |e| e.uppercase? ? \" \" + e : e }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45216,"user_id":null,"body":"def solution(s : String)\n    s.chars.map_with_index { |e, i| e.uppercase? ? \" \" + e : e }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45217,"user_id":null,"body":"def solution(string : String)\n  string.chars.map{|c| ('A' <= c && c <= 'Z' ? \" \" : \"\") + c}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5226eb40316b56c8d500030f":[{"id":45218,"user_id":1072,"body":"def pascals_triangle(n) (1...n).reduce([1]){|a,b| a+(0..b).map{|e| a[-b+e]+(e>0 && b-e>0 ? (a[-b+e-1]? || 0) : 0)}} end","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45219,"user_id":50,"body":"def f(a,b)\n  x=1\n  (0...b).each do |i|\n    x*=a-i\n    x\/=(i+1)\n  end\n  x\nend\ndef pascals_triangle(n)\n  (0...n).map{|i| (0..i).map{ |j| f(i,j)}}.flatten\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45220,"user_id":53,"body":"def pascals_triangle(n)\n  res = [] of Int64\n  (0...n).map{|i| \n    num = 1.to_i64\n    (0..i).map{|j| \n      res << num\n      num = ((num*(i-j)) \/ (j+1)).to_i64\n    }\n  }\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45221,"user_id":null,"body":"def pascals_triangle(n)\n  return [1] if n < 2\n  return [1,1,1] if n < 3\n\n  t = [ [1], [1,1] ]\n\n  (1..n-2).each { |i|\n    row = [1, 1]\n    t[i].each_cons_pair { |x, y|\n      row.insert(-2, x + y)\n    }\n    t.push(row)\n  }\n  t.flatten\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45222,"user_id":null,"body":"def pascals_triangle(n)\n  return [1] if n == 1\n  r = [[1], [1,1]]\n  (1...(n-1)).each do |i|\n    a = [1]\n    i.times{ |j| a.push(r[-1][j] + r[-1][j+1]) }\n    r.push(a.push(1))\n  end\n  r.flatten\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45223,"user_id":null,"body":"def pascals_triangle(n)\n  n.pred.times.reduce({[1], [1]}) do |row, _|\n    this_row = [1] + row.last.each_cons(2).map(&.sum).to_a + [1]\n    \n    {this_row.each_with_object(row.first) { |num, acc| acc << num }, this_row}\n  end.first\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45224,"user_id":null,"body":"def pascals_triangle(n)\n  n.pred.times.reduce({[1], [1]}) do |row, _|  \n    triangle, previous_row = row\n    this_row = [1] + previous_row.each_cons(2).map(&.sum).to_a + [1]\n    \n    {this_row.each_with_object(triangle) { |num, acc| acc << num }, this_row}\n  end.first\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45225,"user_id":null,"body":"def pascals_triangle(n)\n  n.times.reduce({[1], [1]}) do |row, row_ix|\n    next row if row_ix == 0\n  \n    triangle, previous_row = row\n    this_row = [1] + previous_row.each_cons(2).map { |(x, y)| x + y }.to_a + [1]\n    \n    {this_row.each_with_object(triangle) { |num, acc| acc << num }, this_row}\n  end.first\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45226,"user_id":null,"body":"def pascals_triangle(n)\n  l = [] of Int32\n  n.times do |row|\n    (row + 1).times do |col|\n      if col == 0 || col == row\n        l << 1\n      else\n        l << l[l.size - row - 1] + l[l.size - row]\n      end\n    end\n  end\n  l\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45227,"user_id":null,"body":"def pascals_triangle(n)\n    pred = [] of Int32\n    curr = [1]\n    full = [1]\n    if n == 1\n        return [1]\n    end\n    (0...n-1).each do |k|\n        pred = curr\n        curr = [] of Int32\n        curr << 1\n        (0...k).each do |i|\n            curr << pred[i] + pred[i+1]\n        end\n        curr << 1\n        #puts \"#{curr}\"\n        curr.each do |x|\n            full << x\n        end\n    end\n    full\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"523b4ff7adca849afe000035":[{"id":45228,"user_id":1365,"body":"def greet()\n  \"hello world!\"\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45229,"user_id":null,"body":"def greet() : String\n  \"hello world!\"\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45230,"user_id":527,"body":"\"\u202e\"; def greet() \"hello world!\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45231,"user_id":null,"body":"class HelloWorld\n  macro hw(value)\n    helloworld.push({{value}})\n  end\n\n  def helloworld_fin()\n    helloworld = Array(Char).new(12)\n    c_arr : Array(Char) = [\n      ' ',      # space\n      '\\u0064', # d\n      '\\u0065', # e\n      '\\u0068', # h\n      '\\u006C', # l\n      '\\u006F', # o\n      '\\u0072', # r\n      '\\u0077', # w\n      '\\u0021'  # !\n    ]\n\n    hw(c_arr[3])\n    hw(c_arr[2])\n    hw(c_arr[4])\n    hw(c_arr[4])\n    hw(c_arr[5])\n    hw(c_arr[0])\n    hw(c_arr[7])\n    hw(c_arr[5])\n    hw(c_arr[6])\n    hw(c_arr[4])\n    hw(c_arr[1])\n    hw(c_arr[8])\n\n    return helloworld\n  end\nend\n\ndef greet()\n  return HelloWorld.new.helloworld_fin().join(\"\").to_s.downcase\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45232,"user_id":null,"body":"record Greeter, greet = \"hello world!\"\nforward_missing_to Greeter.new\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45233,"user_id":null,"body":"# Write a function `greet` that returns \"hello world!\"\ndef greet()\n  should = \"hello world!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45234,"user_id":null,"body":"def greet() : String\n  return \"hello world!\"\nend# Write a function `greet` that returns \"hello world!\"","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45235,"user_id":null,"body":"def greet()\n  \"!dlrow olleh\".reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45236,"user_id":null,"body":"def greet()\n  p \"hello world!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45237,"user_id":63,"body":"def greet()\n  # I don't know how to write crystal lol\n  return \"hello world!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"523f5d21c841566fde000009":[{"id":45238,"user_id":527,"body":"def array_difference(a, b)\n  a - b\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45239,"user_id":null,"body":"def array_difference(a, b)\n  a.reject { |x| b.any?(&.== x) }\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45240,"user_id":53,"body":"def array_difference(a, b)\n  a.select{|e| !b.includes?(e)}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45241,"user_id":null,"body":"def array_difference(a, b)\n  return a if a.empty? || b.empty?\n  a.reject { |x| b.any?(&.== x) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45242,"user_id":null,"body":"def array_difference(a, b)\n  b.each do |l|\n    a.delete(l)\n  end\n  a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45243,"user_id":null,"body":"def array_difference(a, b)\n  a.reject {|x| b.includes? x}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45244,"user_id":null,"body":"def array_difference(a, b)\n  c = a\n  b.each {|x| c = c.reject(x)}\n  c\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45245,"user_id":null,"body":"def array_difference(a, b)\n  c = a\n  b.each do |x|\n    c = c.reject(x) \n  end\n  c\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45246,"user_id":null,"body":"def array_difference(a, b)\n  a.reduce([] of Int32) do |memo, i|\n    found_match = false\n    \n    b.each do |j|\n      if i == j\n        found_match = true\n        break\n      end\n    end\n    \n    found_match ? memo : memo << i\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45247,"user_id":null,"body":"def array_difference(a, b)\n  a.reject!{|x| b.includes? x}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5253d3a24f16f061cd000228":[{"id":45248,"user_id":1624,"body":"def compute\n  yield\nend\n\ndef compute\n  \"Do not compute\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45249,"user_id":null,"body":"def compute()\n  return \"Do not compute\"\nend\n\ndef compute(&block)\n  yield\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45250,"user_id":527,"body":"def compute(&block)\n  yield\nend\n\ndef compute\n  \"Do not compute\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45251,"user_id":645,"body":"def compute; \"Do not compute\" end\ndef compute; yield end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"525821ce8e7b0d240b002615":[{"id":45252,"user_id":421,"body":"def camelize(str)\n  str.split(\/\\W|_\/).map(&.capitalize).join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45253,"user_id":null,"body":"def camelize(str)\n  str.split(\/\\W|_\/).map { |x| x.capitalize }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"525c1a07bb6dda6944000031":[{"id":45254,"user_id":null,"body":"def websites\n  Array.new(1_000, \"codewars\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45255,"user_id":50,"body":"def websites\n  a=[\"codewars\"]\n  (1..999).each{ a.push(\"codewars\")}\n  a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45256,"user_id":53,"body":"def websites\n (1..1000).map{|_|\"codewars\"}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45257,"user_id":null,"body":"def websites\n  [] of String\n  return Array.new(1000, \"codewars\")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45258,"user_id":null,"body":"def websites\n  arr = [] of String\n  1000.times do arr << \"codewars\" end\n  arr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45259,"user_id":null,"body":"def websites\n  a = [] of String\n  1000.times do\n    a << \"codewars\"\n  end\n  a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45260,"user_id":null,"body":"def websites\n  Array.new(1000, \"codewars\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45261,"user_id":null,"body":"def websites\n  Array(String).new(1000) { |string| \"codewars\" }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45262,"user_id":2609,"body":"# seem to be faster than `websites = [\"codewars\"] ; websites *= 1000`\ndef websites\n  websites = [] of String\n  1000.times do\n    websites << \"codewars\"\n  end\n  return websites\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45263,"user_id":527,"body":"def websites\n  Array(String).new(1000, \"codewars\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"525dfedb5b62f6954d000006":[{"id":45264,"user_id":421,"body":"def score_throws(r)\n  total = r.map{|x| x > 10 ? 0 : x >= 5 ? 5 : 10}.sum\n  r.empty? ? 0 : r.all?{|x| x < 5} ? total + 100 : total\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45265,"user_id":527,"body":"def score_throws(rs)\n  rs.sum(rs.all?(...5) ? 100 : 0) do |r|\n    case r\n      when ...5 then 10\n      when 5..10 then 5\n      else 0\n    end\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45266,"user_id":53,"body":"def score_throws(radii)\n  points = 0\n  bonus = radii.size > 0\n  i = 0\n  while i < radii.size\n    r = radii[i]\n    if r > 4\n      bonus = false\n    end\n    if r > 4 && r < 11\n      points += 5\n    elsif r < 5\n      points += 10\n    end\n    i += 1\n  end\n  if bonus \n    points += 100\n  end\n  return points\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45267,"user_id":null,"body":"def score_throws(r)\n  sum : Int32 = 0\n  \n  r.each do |x|\n      if x < 5 \n        sum += 10\n      else if x >= 5 && x <= 10\n        sum += 5\n      end\n    end\n  end\n  if r.sort.last < 5\n    sum += 100\n  end  \n  sum\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45268,"user_id":1768,"body":"def score_throws(r)\n  if r.empty?\n    return 0\n  elsif r.all?{|i | i < 5}\n    return r.size * 10 + 100\n  end\n  r.select{|i| i <= 10}.select{|i| i >= 5}.size * 5 + r.select{|i| i < 5}.size * 10\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45269,"user_id":null,"body":"def score_throws(r)\n  points = 0\n  r.each do |i|\n    points += 0 if i > 10\n    points += 5 if i >= 5 && i <= 10\n    points += 10 if i < 5\n  end\n  points += 100 if points == (r.size * 10)\n  points\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45270,"user_id":1828,"body":"def score_throws(r)\n  return 0 if r.empty?\n  res = r.map{ |i| i > 10 ? 0 : i >= 5 && i <= 10 ? 5 : 10}.sum\n  res += 100 if r.all?{|i| i < 5}\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45271,"user_id":null,"body":"def score_throws(r)\n  sc = 0\n  all = true\n  r.each do |radius|\n    case\n    when radius > 10\n      all = false\n    when radius >= 5\n      all = false\n      sc += 5\n    else\n      sc += 10\n    end\n  end\n  sc += 100 if all && !r.empty?\n  sc\nend\n\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45272,"user_id":759,"body":"def score_throws(r)\n  a = 0\n  t = true\n  r.each do |x|\n    if x < 5\n      a += 10\n    else\n      a += 5 if x <= 10\n      t = false\n    end\n  end\n  a += 100 if t\n  a\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45273,"user_id":490,"body":"def score_throws(r)\n  a = r.reduce(0) do |o, q|\n    if q > 10\n      o\n    elsif q >= 5\n      o + 5\n    else\n      o + 10\n    end\n  end\n  if a == r.size * 10\n    return a + 100\n  else\n    return a\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"525f50e3b73515a6db000b83":[{"id":45274,"user_id":null,"body":"def create_phone_number(arr)\n  \"(#{arr[0..2].join}) #{arr[3..5].join}-#{arr[6..9].join}\"\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45275,"user_id":null,"body":"def create_phone_number(arr)\n  arr.join(\"\").gsub(\/^(.{3})(.{3})\/, \"(\\\\1) \\\\2-\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45276,"user_id":53,"body":"def create_phone_number(n)\n  String.build do |io|\n    io << \"(\" \n    io << n[0]\n    io << n[1]\n    io << n[2]\n    io << \") \"\n    io << n[3]\n    io << n[4]\n    io << n[5]\n    io << \"-\"\n    io << n[6]\n    io << n[7]\n    io << n[8]\n    io << n[9]\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45277,"user_id":null,"body":"def create_phone_number(arr)\n  sprintf(\"(%d%d%d) %d%d%d-%d%d%d%d\", arr)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45278,"user_id":null,"body":"def create_phone_number(arr)\n  return \"(#{arr[0..2].join}) #{arr.join[3..5]}-#{arr[6..9].join}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45279,"user_id":null,"body":"def create_phone_number(arr)\n  %((#{arr[0..2].join}) #{arr[3..5].join}-#{arr[6..9].join})\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45280,"user_id":null,"body":"def create_phone_number(arr)\n  #your code here\n  \"(\" + arr[0..2].join + \") \" + arr[3..5].join + \"-\" + arr[6..arr.size].join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45281,"user_id":50,"body":"def create_phone_number(a)\n  \"(#{a[0..2].join}) #{a[3..5].join}-#{a[6..-1].join}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45282,"user_id":null,"body":"# Write a function that accepts an array of 10 integers (between 0 and 9), \n# that returns a string of those numbers in the form of a phone number.\n\ndef create_phone_number(arr)\n  return nil if arr.size < 10\n  \"(#{arr[0..2].join(\"\")}) #{arr[3..5].join(\"\")}-#{arr[6..10].join(\"\")}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45283,"user_id":null,"body":"def create_phone_number(arr)\n\n  str = arr.join\n\n  \"(#{str[0..2]}) #{str[3..5]}-#{str[6..arr.size]}\"\n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"526156943dfe7ce06200063e":[{"id":45284,"user_id":168,"body":"def brain_luck(code, input)\n  output, input, memory = \"\", input.chars, [0] * 10000\n  stack, jumps = [] of Int32, {} of Int32 => Int32\n  code.chars.each_with_index do |x, i|\n    case x\n      when '['; stack << i\n      when ']'; j = stack.pop; jumps[i], jumps[j] = j, i\n    end\n  end\n  i, ptr = 0, 0\n  while i < code.size\n    case code[i]\n      when '+'; memory[ptr] = (memory[ptr] + 1) % 256\n      when '-'; memory[ptr] = (memory[ptr] - 1) % 256\n      when '>'; ptr += 1\n      when '<'; ptr -= 1\n      when '.'; output += memory[ptr].chr\n      when ','; memory[ptr] = input.shift.ord\n      when '['; i = memory[ptr] == 0 ? jumps[i] : i\n      when ']'; i = memory[ptr] == 0 ? i : jumps[i]\n    end\n    i += 1\n  end\n  output\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45285,"user_id":53,"body":"def brain_luck(code, input)\n  output,tape,i,j,ptr = \"\",(0..5000).map{|_|0}.to_a,0,0,0\n  while i<code.size\n    c = code[i].to_s\n    if (c == \">\") \n      ptr += 1\n    elsif (c == \"<\") \n      ptr -= 1\n    elsif (c == \"+\") \n      tape[ptr] = (tape[ptr] + 1) % 256\n    elsif (c == \"-\") \n      tape[ptr] = (tape[ptr] + 255) % 256\n    elsif (c == \".\") \n      output += tape[ptr].chr\n    elsif (c == \",\") \n      tape[ptr],j = input[j].ord,j+1\n    elsif (c == \"[\" && tape[ptr] == 0)\n      n = 1\n      while n>0\n        i += 1\n        n += 1 if (code[i].to_s == \"[\") \n        n -= 1 if (code[i].to_s == \"]\") \n      end\n    elsif (c == \"]\" && tape[ptr] != 0)\n      n = 1\n      while n>0\n        i -= 1\n        n -= 1 if (code[i].to_s == \"[\")  \n        n += 1 if (code[i].to_s == \"]\") \n      end\n    end\n    i += 1\n  end\n  output\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45286,"user_id":null,"body":"def brain_luck(code_ : String, input_ : String)\n  input = input_.chars.map { |c| c.ord }\n  input_pointer = 0\n\n  code = code_     # .chars\n  code_pointer = 0 # (\"instruction pointer\" in kata spec)\n\n  data = Array.new(3000, 0)\n  data_pointer = 0\n\n  stack = Array.new(100, 0)\n  stack_pointer = -1\n\n  output = \"\"\n\n  while (true)\n    case code[code_pointer]\n    when '>' # increment the data pointer (to point to the next cell to the right).\n      data_pointer = data_pointer + 1\n    when '<' # decrement the data pointer (to point to the next cell to the left).\n      data_pointer = data_pointer - 1\n    when '+'\n      # increment (increase by one, truncate overflow: 255 + 1 = 0)\n      # the byte at the data pointer.\n      data[data_pointer] = (data[data_pointer] + 1) & 0xFF\n    when '-'\n      # decrement (decrease by one, treat as unsigned byte: 0 - 1 = 255 )\n      # the byte at the data pointer.\n      data[data_pointer] = (data[data_pointer] - 1) & 0xFF\n    when '.' # output the byte at the data pointer.\n      output = output + data[data_pointer].chr\n    when ','\n      # accept one byte of input,\n      # storing its value in the byte at the data pointer.\n      data[data_pointer] = input[input_pointer]\n      input_pointer = input_pointer + 1\n    when '['\n      # if the byte at the data pointer is zero, then instead of\n      # moving the instruction pointer forward to the next command,\n      # jump it forward to the command after the matching ] command.\n      if data[data_pointer] == 0\n        level = 1\n        while (level > 0)\n          code_pointer = code_pointer + 1\n          level = level + 1 if code[code_pointer] == '['\n          level = level - 1 if code[code_pointer] == ']'\n        end\n      else\n        stack_pointer = stack_pointer + 1\n        stack[stack_pointer] = code_pointer\n      end\n    when ']'\n      # if the byte at the data pointer is nonzero, then instead of\n      # moving the instruction pointer forward to the next command,\n      # jump it back to the command after the matching [ command.\n      if data[data_pointer] != 0\n        code_pointer = stack[stack_pointer]\n      else\n        stack_pointer = stack_pointer - 1\n      end\n    else\n      puts\n      puts \"error: unknown symbol in code\"\n      break\n    end\n\n    code_pointer = code_pointer + 1\n    return output if code_pointer >= code.size\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45287,"user_id":null,"body":"def brain_luck(code, input)\n  o = [] of UInt8\n  r = \"\"\n  i = 0\n  p = 0\n  while i < code.size\n    case code[i]\n      when '>'\n        p += 1\n      when '<'\n        p -= 1 if p > 0\n      when '+'\n        if o.size < p+1\n          o += [0_u8] * (p - o.size + 1)\n        end\n        if o[p] == 255\n          o[p] = 0\n        else\n          o[p] += 1\n        end\n      when '-'\n        if o.size < p+1\n          o += [0_u8] * (p - o.size + 1)\n        end\n        if o[p] == 0\n          o[p] = 255\n        else\n          o[p] -= 1\n        end\n      when '.'\n        r += o[p].chr\n      when ','\n        if o.size < p+1\n          o += [0_u8] * (p - o.size + 1)\n        end\n        if input.empty?\n          o[p] = 0_u8\n        else\n          o[p] = input[0].ord.to_u8\n          input = input.lchop\n        end\n      when '['\n        if p >= o.size || o[p].zero?\n          d = 1\n          while d > 0\n            i += 1\n            case code[i]\n              when '['\n                d += 1\n              when ']'\n                d -= 1\n              else\n            end\n          end\n        end\n      when ']'\n        if p < o.size && !o[p].zero?\n          d = 1\n          while d > 0\n            i -= 1\n            case code[i]\n              when '['\n                d -= 1\n              when ']'\n                d += 1\n              else\n            end\n          end\n        end\n      else\n    end\n    i += 1\n  end\n  r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45288,"user_id":null,"body":"def brain_luck(code, input)\n  input = input.chars.map(&.ord)\n  code = code.chars\n  data = Hash(Int32, Int32).new\n\n  temp = [] of Int32\n  braces = Hash(Int32, Int32).new\n  code.map_with_index { |c, pos|\n    temp << pos if c == '['\n    next if c != ']'\n    start = temp.pop\n    braces[start] = pos\n    braces[pos] = start\n  }\n\n  ip = 0\n  dp = 0\n  output = \"\"\n  while true\n    data[dp] = 0 if !data.has_key?(dp)\n    case code[ip]?\n    when '>' then dp += 1\n    when '<' then dp -= 1\n    when '+' then data[dp] = data[dp] == 255 ? 0 : data[dp] + 1\n    when '-' then data[dp] = data[dp] == 0 ? 255 : data[dp] - 1\n    when '.' then output += data[dp].chr\n    when ',' then data[dp] = input.shift if input.size > 0\n    when '[' then ip = braces[ip] if data[dp] == 0\n    when ']' then ip = braces[ip] if data[dp] != 0\n    else          return output\n    end\n    ip += 1\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45289,"user_id":null,"body":"def brain_luck(code, input)\n  input = input.sub(255.chr, \"\\xFF\")\n  backtrack_stack = Deque(Int32).new\n  data = [0_u8]\n  input_pointer = 0\n  code_pointer = 0\n  data_pointer = 0\n  \n  String.build do |output|\n    while true\n      command = code.byte_at(code_pointer).chr\n      \n      case command\n      when '+'\n        if data[data_pointer] == 255_u8\n          data[data_pointer] = 0_u8\n        else\n          data[data_pointer] += 1\n        end\n      when '-'\n        if data[data_pointer] == 0_u8\n          data[data_pointer] = 255_u8\n        else\n          data[data_pointer] -= 1\n        end\n      when '.'\n        output.write_byte data[data_pointer]\n      when ','\n        data[data_pointer] = input.byte_at(input_pointer)\n        input_pointer += 1\n      when '['\n        if data[data_pointer] == 0_u8\n          open = 1\n          while code_pointer + 1 < code.bytesize\n            code_pointer += 1\n            command = code.byte_at(code_pointer)\n            case command\n            when '['\n              open += 1\n            when ']'\n              open -= 1\n              break if open == 0\n            end\n          end\n        else\n          backtrack_stack << code_pointer\n        end\n      when ']'\n        if data[data_pointer] != 0_u8\n          code_pointer = backtrack_stack.last\n        else\n          backtrack_stack.pop\n        end\n      when '>'\n        data_pointer += 1\n        if data.size <= data_pointer\n          data.push 0_u8\n        end\n      when '<'\n        data_pointer -= 1\n      else\n        raise \"unknown #{command}\"\n      end\n      \n      code_pointer += 1\n      break unless code_pointer < code.bytesize\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45290,"user_id":null,"body":"def brain_luck(code, input)\n  output = \"\"\n  data = Array(UInt8).new(1024, 0_u8)\n  instruction_pointer = 0\n  data_pointer = 0\n  input_pointer = 0\n  loop do\n    break if instruction_pointer > code.size - 1\n    command = code[instruction_pointer]\n    case command\n      when ','\n        data[data_pointer] = input[input_pointer].ord.to_u8\n        input_pointer += 1\n      when '+'\n        data[data_pointer] += 1\n      when '-'\n      \tdata[data_pointer] -= 1\n      when '.'\n        output += data[data_pointer].chr\n      when '>'\n        data_pointer += 1\n      when '<'\n        data_pointer -= 1\n      when '['\n        if data[data_pointer] == 0\n          brackets_count = 1\n          loop do\n            instruction_pointer += 1\n            case code[instruction_pointer]\n              when ']'\n                brackets_count -= 1\n                break if brackets_count == 0\n              when '['\n                brackets_count += 1\n            end\n          end\n        end\n      when ']'\n        if data[data_pointer] != 0\n          brackets_count = 1\n          loop do\n            instruction_pointer -= 1\n            case code[instruction_pointer]\n              when '['\n                brackets_count -= 1\n                break if brackets_count == 0\n              when ']'\n                brackets_count += 1\n            end\n          end\n        end\n    end\n    instruction_pointer += 1\n  end\n  # code here\n  output\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45291,"user_id":2098,"body":"def brain_luck(code, input)\n  d = [] of UInt8\n  pointer = 0\n  ans = \"\"\n  bytes = input.chars.map{|x| x.ord.to_u8}\n  c = 0\n  while c < code.size\n    while pointer > d.size - 1\n      d.push(0_u8)\n    end\n    case code[c]\n    when '>'\n      pointer += 1\n    when '<'\n      pointer -= 1\n    when '+'\n      d[pointer] += 1\n    when '-'\n      d[pointer] -= 1\n    when '.'\n      ans += d[pointer].chr\n    when ','\n      d[pointer] = bytes.shift\n    when '['\n      if d[pointer] == 0\n        m = 1\n        while m > 0\n          c += 1\n          puts \"c = \" + c.to_s\n          if code[c] == '['\n            m += 1\n          elsif code[c] == ']'\n            m -= 1\n          end\n        end\n      else\n\n      end\n    when ']'\n      if d[pointer] != 0\n        m = 1\n        while m > 0\n          c -= 1\n          if code[c] == '['\n            m -= 1\n          elsif code[c] == ']'\n            m += 1\n          end\n        end\n      end\n    end\n    c += 1\n  end\n  ans\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45292,"user_id":null,"body":"def brain_luck(code, input)\n  code = code.chars\n  cpos = 0\n  tape = Deque.new(1, 0u8)\n  tpos = 0\n  in = input.chars.each\n  ou = \"\"\n  \n  while 0 <= cpos < code.size\n    case code[cpos]\n    when '>'\n      tpos += 1\n      if tpos >= tape.size\n        tape.push 0u8\n      end\n    when '<'\n      if tpos > 0\n        tpos -= 1\n      else\n        tape.unshift 0u8\n      end\n    when '+'\n      tape[tpos] += 1\n    when '-'\n      tape[tpos] -= 1\n    when '.'\n      ou += tape[tpos].chr\n    when ','\n      tape[tpos] = in.next.as(Char).ord.to_u8\n    when '['\n      if tape[tpos] == 0\n        nest = 1\n        while nest > 0\n          cpos += 1\n          return ou if cpos >= code.size\n          case code[cpos]\n          when '['\n            nest += 1\n          when ']'\n            nest -= 1\n          end\n        end\n      end\n    when ']'\n      if tape[tpos] != 0\n        nest = 1\n        while nest > 0\n          cpos -= 1\n          return ou if cpos < 0\n          case code[cpos]\n          when ']'\n            nest += 1\n          when '['\n            nest -= 1\n          end\n        end\n      end\n    end\n    cpos += 1\n  end\n  ou\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45293,"user_id":null,"body":"def brain_luck(code, input)\n  data = [] of UInt8\n  pointer = 0\n  output = \"\"\n  bytes = input.chars.map{|x| x.ord.to_u8}\n  c = 0\n  while c < code.size\n    while pointer > data.size - 1\n      data.push(0_u8)\n    end\n    case code[c]\n    when '>'\n      pointer += 1\n    when '<'\n      pointer -= 1\n    when '+'\n      data[pointer] += 1\n    when '-'\n      data[pointer] -= 1\n    when '.'\n      output += data[pointer].chr\n    when ','\n      data[pointer] = bytes.shift\n    when '['\n      if data[pointer] == 0\n        match = 1\n        while match > 0\n          c += 1\n          puts \"c = \" + c.to_s\n          if code[c] == '['\n            match += 1\n          elsif code[c] == ']'\n            match -= 1\n          end\n        end\n      else\n\n      end\n    when ']'\n      if data[pointer] != 0\n        match = 1\n        while match > 0\n          c -= 1\n          if code[c] == '['\n            match -= 1\n          elsif code[c] == ']'\n            match += 1\n          end\n        end\n      end\n    end\n    c += 1\n  end\n  output\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5264d2b162488dc400000001":[{"id":45294,"user_id":527,"body":"def spin_words(str)\n  str.gsub(\/\\w{5,}\/, &.reverse)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45295,"user_id":null,"body":"def spin_words(str)\n  # your code here`\n  arr = str.split(\" \")\n  s =\"\"\n  arr.each do |w|\n    if w.size >= 5\n      s+=w.reverse+\" \"\n    else\n      s+=w+\" \"\n    end\n  end\n  s.rchop\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45296,"user_id":527,"body":"def spin_words(str : String) : String\n  str.gsub(\/\\w{5,}\/, &.reverse)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45297,"user_id":null,"body":"def spin_words(str)\n  str.split(\" \").map{|word|word.chars.size>=5?word.chars.reverse.join(\"\"): word}.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45298,"user_id":null,"body":"def spin_words(str)\n  String.build(str.size) do |io|\n    str.split do |word|\n      if word.size >= 5\n        io << word.reverse\n      else\n        io << word\n      end\n      io << ' ' unless io.bytesize == str.bytesize\n    end\n  end \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45299,"user_id":null,"body":"def spin_words(str)\n  str.gsub(\/\\w{5,}\/) { |s| s.reverse }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45300,"user_id":null,"body":"def spin_words(str)\n  z = str.split(\" \")\n  counter = 0\n\n  until counter == z.size()\n    \n    if z[counter].size >= 5\n      z[counter]=z[counter].reverse\n    end\n    puts z[counter]\n    counter += 1\n  end\n  return z.join(\" \")\n  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45301,"user_id":null,"body":"def spin_words(str)\n  str.split(' ')\n     .map{ | word | word.size >= 5 ? word.reverse : word }\n     .join(' ')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45302,"user_id":null,"body":"def spin_words(str)\n  # your code here\n  result = [] of String\n  str.split { |word| \n    if word.size > 4 \n      result << word.reverse\n    else\n      result << word\n    end\n  }\n  return result.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45303,"user_id":null,"body":"def spin_words(s)\n  s.split(\" \").map { |w| w.size >= 5 ? w.reverse : w }.join(\" \")\nend\n\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5265326f5fda8eb1160004c8":[{"id":45304,"user_id":527,"body":"def number_to_string(num)\n  num.to_s\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45305,"user_id":1072,"body":"def number_to_string(n) n.to_s end","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45306,"user_id":null,"body":"def number_to_string(num)\n  num.format(delimiter=\"\", separator=\"\")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45307,"user_id":null,"body":"def number_to_string(num : Number) : String\n  num.to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45308,"user_id":1566,"body":"def number_to_string(num)\n  \"#{num}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45309,"user_id":null,"body":"def number_to_string(num)\n  return \"#{num}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45310,"user_id":null,"body":"def number_to_string(num)\n  return num.to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45311,"user_id":1228,"body":"def number_to_string(num)\n  sprintf(\"%d\", num)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"526571aae218b8ee490006f4":[{"id":45312,"user_id":527,"body":"def count_bits(n)\n  n.popcount\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45313,"user_id":null,"body":"def count_bits(n)\n  tot = 0\n  while n > 0\n    tot += n % 2\n    n \/= 2\n  end\n  tot\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45314,"user_id":null,"body":"def count_bits(n)\n  #your code here\n  n.to_s(2).count '1'\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45315,"user_id":null,"body":"def count_bits(n)\n  (0...n.bit_length).sum do |i|\n    n.bit(i)\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45316,"user_id":null,"body":"def count_bits(n)\n  total = 0\n  (0..n.bit_length).each { |b| \n    if n.bit(b) == 1 \n        total = total + 1\n    end\n  }\n  return total\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45317,"user_id":53,"body":"def count_bits(n)\n  n.to_s(2).gsub(\/0\/,\"\").size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45318,"user_id":null,"body":"def count_bits(n)\n  n.to_s(2).chars.count { | thing | thing == '1'}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45319,"user_id":null,"body":"def count_bits(n)\n    c = 0\n    n.bit_length.times do |b|\n      c += n.bit(b)\n    end\n    c\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45320,"user_id":null,"body":"def count_bits(n)\n  n.to_s(2).count(&.==('1'))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45321,"user_id":null,"body":"def count_bits(n)\n  n.to_s(2).chars.map {|c| c.to_i }.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5274d9d3ebc3030802000165":[{"id":45322,"user_id":168,"body":"def nbr_of_laps(x, y)\n  d = x.gcd y\n  {y \/\/ d, x \/\/ d}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45323,"user_id":53,"body":"def nbr_of_laps(x, y)\n  a = b = 1\n  while b * y != a * x\n    if b * y < a * x\n      b += 1\n    else\n      a += 1\n    end\n  end\n  { a, b }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45324,"user_id":null,"body":"def nbr_of_laps(x, y)\n  lcm = x.lcm(y)\n  {lcm \/\/ x, lcm \/\/ y}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45325,"user_id":50,"body":"def nbr_of_laps(x, y)\n  g=x.gcd(y)\n  {y\/\/g,x\/\/g}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45326,"user_id":527,"body":"def nbr_of_laps(x, y)\n  d = x.gcd(y)\n  {y \/ d, x \/ d}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45327,"user_id":421,"body":"def nbr_of_laps(x, y)\n  lcms = x.lcm(y)\n  {lcms \/\/ x, lcms \/\/ y}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"52755006cc238fcae70000ed":[{"id":45328,"user_id":null,"body":"def christmas_tree(height)\n  (1..height).map{|n| \" \"*(height - n) + \"*\"*(2*n - 1) + \" \"*(height - n)}.join(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45329,"user_id":527,"body":"def christmas_tree(height : Int) : String\n  (1..height).join('\n'){ |i| (\"*\" * (2 * i - 1)).center(2 * height - 1) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45330,"user_id":421,"body":"def christmas_tree(height)\n (1..height).map{|x| \" \" * (height - x) + \"*\" * (x * 2 - 1) + \" \" * (height - x)}.join(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"527e4141bb2ea5ea4f00072f":[{"id":45331,"user_id":527,"body":"def compute_sum(n)\n  (1..n).sum(&.digits.sum)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45332,"user_id":53,"body":"def compute_sum(n)\n  n>0 ? digit_sum(n) + compute_sum(n - 1) : 0\nend\n\ndef digit_sum(n)\n  n>0 ? n % 10 + digit_sum((n \/ 10).to_i) : 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45333,"user_id":50,"body":"def compute_sum(n)\n  n==0? 0 : n.digits.sum+compute_sum(n-1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45334,"user_id":null,"body":"def compute_sum(n)\n  r = 0\n  (1..n).each { |m| r += m.digits.sum }\n  \n  r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45335,"user_id":76,"body":"def compute_sum(n)\n  (1..n).map(&.digits).sum(&.sum)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45336,"user_id":421,"body":"def compute_sum(n)\n  (1..n).map{|x| x.digits.sum}.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5299413901337c637e000004":[{"id":45337,"user_id":421,"body":"def get_missing_element(seq)\n  45 - seq.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45338,"user_id":null,"body":"def get_missing_element(seq)\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].sum - seq.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"529eef7a9194e0cbc1000255":[{"id":45339,"user_id":null,"body":"def is_anagram(test, original)\n  test.downcase.chars.sort == original.downcase.chars.sort\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45340,"user_id":null,"body":"def is_anagram(test, original)\n  test.upcase.chars.sort == original.upcase.chars.sort\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45341,"user_id":null,"body":"def sort_string(input)\n  input.downcase.split(\"\").sort.join\nend\n\ndef is_anagram(test, original)\n  sort_string(test) == sort_string(original)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45342,"user_id":null,"body":"def is_anagram(test : String, original : String)\n    test.downcase.to_slice.sort == original.downcase.to_slice.sort\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45343,"user_id":759,"body":"def is_anagram(test, original)\n  return false if test.size != original.size\n  c1, c2 = Hash(Char, Int64).new(0), Hash(Char, Int64).new(0)\n  0.upto(test.size - 1) do |i|\n    c1[test[i].downcase] += 1\n    c2[original[i].downcase] += 1\n  end\n  c1 == c2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45344,"user_id":null,"body":"def is_anagram(test, original)\n  test.downcase.chars.sort.join == original.downcase.chars.sort.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45345,"user_id":null,"body":"def is_anagram(test, original)\n  test.downcase.split(\"\").sort == original.downcase.split(\"\").sort\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45346,"user_id":null,"body":"def is_anagram(test, original)\n  test_arr = [] of String\n  orig_arr = [] of String\n  lct, lco = test.downcase, original.downcase\n  lct.split(\"\") { |s| test_arr << s }\n  lco.split(\"\") { |s| orig_arr << s }\n  test_arr.sort!\n  orig_arr.sort!\n  if test_arr == orig_arr\n    true\n  else\n    false\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45347,"user_id":null,"body":"def is_anagram(test, original)\n  test.downcase.split(\/\/).sort === original.downcase.split(\/\/).sort\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45348,"user_id":null,"body":"def is_anagram(test, original)\n  get_hash(test) == get_hash(original)\nend\n\ndef get_hash(word)\n  hash = {} of String => Int32\n  word.downcase.split(\"\").each do |char|\n    if hash.has_key?(char)\n      hash[char] += 1\n    else\n      hash[char] = 1\n    end\n  end\n  hash\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"52b5247074ea613a09000164":[{"id":45349,"user_id":1474,"body":"def cooking_time(eggs)\n  eggs == 0 ? 0 : eggs <= 8 ? 5 : (eggs \/\/ 8) * 5 + (eggs % 8 == 0 ? 0 : 5)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45350,"user_id":421,"body":"def cooking_time(eggs)\n  (eggs \/ 8).ceil * 5\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45351,"user_id":527,"body":"def cooking_time(eggs)\n  (eggs + 7) \/\/ 8 * 5\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45352,"user_id":1072,"body":"def cooking_time(e) (e \/ 8).ceil * 5 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45353,"user_id":null,"body":"def cooking_time(eggs)\n  (eggs \/ 8.0).ceil * 5\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45354,"user_id":53,"body":"def cooking_time(eggs)\n  return (((eggs - 1) \/ 8) + 1) * 5;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45355,"user_id":527,"body":"def cooking_time(eggs)\n  (eggs + 7) \/ 8 * 5\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"52e88b39ffb6ac53a400022e":[{"id":45356,"user_id":421,"body":"def int32_to_ip(i : UInt32) : String\n  i.to_s(2).rjust(32, '0').chars.each_slice(8).map{|x| x.join.to_i(2)}.join('.')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45357,"user_id":null,"body":"def int32_to_ip(i : UInt32) : String\n  i.unsafe_as(StaticArray(UInt8, 4)).reverse!.join('.')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45358,"user_id":50,"body":"def int32_to_ip(n : UInt32) : String\n  b=n.to_s(2)\n  b=(\"0\"*(32-b.size))+b\n  [0,8,16,24].map{|k| b[k..k+7].to_i(2)}.join(\".\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45359,"user_id":53,"body":"def int32_to_ip(n : UInt32) : String\n  n.unsafe_as(StaticArray(UInt8, 4)).reverse!.join('.')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"52f787eb172a8b4ae1000a34":[{"id":45360,"user_id":53,"body":"def zeros(n)\n  res = 0\n  i = 5\n  while n \/ i >= 1\n    res += (n \/ i).to_i\n    i *= 5\n  end\n  res\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45361,"user_id":421,"body":"def zeros(n)\n  i = 5\n  total = 0\n  while i <= n\n    total += n \/\/ i\n    i *= 5\n  end\n  total\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45362,"user_id":1828,"body":"def zeros(n)\n  k = Math.log(n, 5)\n  (1..k).map{|i| (n\/(5**i)).floor}.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45363,"user_id":168,"body":"def zeros(n)\n  n >= 5 ? n \/\/ 5 + zeros(n \/\/ 5) : 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45364,"user_id":null,"body":"def zeros(n : Number) : Number\n  output, i = 0, 5\n  \n  while i <= n\n    output += (n \/ i).floor\n    i *= 5\n  end\n  \n  output\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45365,"user_id":527,"body":"def zeros(n)\n  res = 0\n  i = 5\n  while i <= n\n    res += n \/\/ i\n    i *= 5\n  end\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45366,"user_id":527,"body":"def zeros(n)\n  n == 0 ? 0 : n \/\/ 5 + zeros(n \/\/ 5)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45367,"user_id":50,"body":"def zeros(n)\n  n < 5 ? 0 : (n\/5).to_i + zeros(n\/5)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45368,"user_id":null,"body":"def zeros(n)\n  n < 5 ? 0 : (n \/\/ 5) + zeros(n \/\/ 5)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"52fba66badcd10859f00097e":[{"id":45369,"user_id":421,"body":"def disemvowel(str)\n  str.delete(\"aeiouAEIOU\")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45370,"user_id":null,"body":"def disemvowel(str)\n  str.gsub(\/[aeiuoAEIUO]\/, \"\")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45371,"user_id":209,"body":"def disemvowel(str)\n  str.gsub(\/[aieou]\/i,\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45372,"user_id":null,"body":"def disemvowel(str)\n result = \"\"\n str.each_char do |char|\n    if !(char == 'o' || char == 'a' || char == 'u' || char == 'e' || char == 'i' || char == 'U' || char == 'O' || char == 'A' || char == 'U' || char == 'E' || char == 'I')\n      result = result + char\n    end\n      \n end\n  return result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45373,"user_id":null,"body":"def disemvowel(str)\n\n  str.gsub(\/[aeuoi]\/im, \"\")\n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45374,"user_id":null,"body":"def disemvowel(str)\n  str.split(\/[aeiouAEIOU]\/).join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45375,"user_id":50,"body":"def disemvowel(str)\n  str.gsub(\/[aeiou]\/i, \"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45376,"user_id":null,"body":"def disemvowel(str)\n  v = \"aeiouAEIOU\"\n  v.split(\"\").each do |i|\n    str = str.gsub(i, \"\")  \n  end\n  str\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45377,"user_id":null,"body":"VOWELS = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n\ndef disemvowel(str)\n  newstr = \"\"\n  str.each_char do |c|\n    if !VOWELS.includes? c\n      newstr += c\n    end\n  end\n  return newstr\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45378,"user_id":null,"body":"def disemvowel(str)\n  str.gsub(\/[aeiouAEIOU]\/, \"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"530e15517bc88ac656000716":[{"id":45379,"user_id":null,"body":"def rot13(string)\n  entry  = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  rotout = \"nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM\"\n  string.tr(entry, rotout)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45380,"user_id":1072,"body":"def rot13(s) s.tr(\"ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz\",\"NOPQRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm\") end","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45381,"user_id":759,"body":"ALPH = (('A'..'Z').to_a + ('a'..'z').to_a).join\nROT_ALPH = (('A'..'Z').to_a.rotate(13) + ('a'..'z').to_a.rotate(13)).join\n\ndef rot13(string)\n  string.tr(ALPH, ROT_ALPH)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45382,"user_id":null,"body":"def rot13(string)\n  letters = \"abcdefghijklmnopqrstuvwxyz\"\n  letters_up = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  ar = letters.split(\"\")\n  ar_up = letters_up.split(\"\")\n\n  string_ar = string.split(\"\")\n\n  coded_str = \"\"\n  string_ar.each { |c|\n    if ar.includes?(c)\n      i = ar.index(c)\n      up = false\n    elsif ar_up.includes?(c)\n      i = ar_up.index(c)\n      up = true\n    else\n      coded_str += c\n      next\n    end\n\n    unless i.nil?\n      if up\n        coded_str += ar_up[(i + 13) % 26]\n      else\n        coded_str += ar[(i + 13) % 26]\n      end\n    end\n  }\n  coded_str\nend\n","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45383,"user_id":null,"body":"def rot13(string)\n  string.chars.map do |c|\n    case c\n    when ('a'..'m'), ('A'..'M')\n      c + 13\n    when ('n'..'z'), ('N'..'Z')\n      c - 13\n    else\n      c\n    end\n  end.join\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45384,"user_id":null,"body":"def rot13(string : String) : String\n  from : String = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n  to : String = \"NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm\"\n  string.tr(from, to)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45385,"user_id":null,"body":"def rot13(string)\n  string.chars.map { |x| x.ascii_uppercase? ? (x.ord + 13).-('A'.ord).%(26).+('A'.ord).chr : x.ascii_lowercase? ? (x.ord + 13).-('a'.ord).%(26).+('a'.ord).chr : x }.join \"\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45386,"user_id":null,"body":"def rot13(string)\n  string.tr(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\", \"NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45387,"user_id":null,"body":"def rot13(string)\n  string.chars.map do |char|\n    next char unless char.letter?\n    \n    base = char.uppercase? ? 65 : 97\n    ((char.ord + 13 - base) % 26 + base).chr\n  end.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45388,"user_id":null,"body":"def rot13(string)\n  string\n    .gsub(\/[a-z]\/) {|char| (((char.bytes[0] - 97 + 13) % 26) + 97).chr }\n    .gsub(\/[A-Z]\/) {|char| (((char.bytes[0] - 65 + 13) % 26) + 65).chr }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"53369039d7ab3ac506000467":[{"id":45389,"user_id":421,"body":"def bool_to_word(bool)\n  bool ? \"Yes\": \"No\"\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45390,"user_id":713,"body":"def bool_to_word(b)\n  return b ? \"Yes\" : \"No\";\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45391,"user_id":null,"body":"def bool_to_word(bool)\n  case bool\n    when true then \"Yes\"\n    when false then \"No\"\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45392,"user_id":null,"body":"def bool_to_word(bool)\n  return bool == true ? \"Yes\": \"No\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45393,"user_id":null,"body":"def bool_to_word(bool : Bool) : String\n  bool ? \"Yes\" : \"No\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45394,"user_id":null,"body":"def bool_to_word(bool)\n  if bool\n    \"Yes\"\n  else\n    \"No\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45395,"user_id":null,"body":"def bool_to_word(bool)\n  return word = bool ? \"Yes\" : \"No\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45396,"user_id":null,"body":"def bool_to_word(bool)\n  if (bool)\n     return \"Yes\"\n  else\n     return \"No\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45397,"user_id":1931,"body":"def bool_to_word(bool)\n  return bool ? \"Yes\" : \"No\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45398,"user_id":209,"body":"def bool_to_word(x)\n  x ?\"Yes\": \"No\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"534d2f5b5371ecf8d2000a08":[{"id":45399,"user_id":421,"body":"def multiplication_table(size)\n  (1..size).map{|x| (1..size).map{|y| x * y}}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45400,"user_id":null,"body":"def multiplication_table(size)\n  # creamos el array de salida\n  ary1 = Array(Array(Int32)).new size\n  # hallamos el multiplicador\n  (1..size).each do |mul|\n    # calculamos cada fila del array\n    ary2 = (1..size).to_a.map do |elt|\n      elt * mul\n    end\n    # insertamos un array dentro de otro\n    ary1 << ary2\n  end\n  # devolvemos el array de salida\n  ary1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45401,"user_id":null,"body":"def multiplication_table(size)\n  (1..size).map { |i| (1..size).map(&.* i) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45402,"user_id":527,"body":"def multiplication_table(size : Int) : Array(Array(Int32))\n  Array.new(size){ |x| Array.new(size){ |y| (x + 1) * (y + 1) } }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45403,"user_id":209,"body":"def multiplication_table(x)\n    (0...x).map{|i| (0...x).map{|j| (j+1)*(i+1)}}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45404,"user_id":null,"body":"def multiplication_table(size)\n  (1..size).map { |i| (1..size).map(&.* i) }.to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45405,"user_id":50,"body":"def multiplication_table(size)\n  (1..size).map{|f| (1..size).map{|n| n*f}}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45406,"user_id":null,"body":"def multiplication_table(size)\n  (1..size).map { |row| (1..size).map(&.*(row)) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45407,"user_id":null,"body":"def multiplication_table(size)\n    i = 0\n    j = 0\n    res = [] of Array(Int32)\n    while i < size\n        r = [] of Int32\n        while j < size\n            r.push((i + 1) * (j + 1))\n            j += 1\n        end\n        j = 0\n        res.push(r)\n        i += 1\n    end\n    res\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45408,"user_id":null,"body":"def multiplication_table(size : Int32) : Array(Array(Int32))\n  (1..size).map { |x| (1..size).map { |y| x * y } }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"534ea96ebb17181947000ada":[{"id":45409,"user_id":421,"body":"def break_chocolate(n, m)\n  n > 0 && m > 0? n * m - 1: 0\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45410,"user_id":1474,"body":"def break_chocolate(n, m)\n  n * m > 0 ? n - 1 + n * (m-1) : 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45411,"user_id":null,"body":"def break_chocolate(n, m)\n  return 0 if n * m == 0\n  (n * m) -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45412,"user_id":null,"body":"def break_chocolate(n, m)\n  [n * m - 1, 0].max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45413,"user_id":527,"body":"def break_chocolate(n, m)\n  (n * m - 1).clamp(0..)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45414,"user_id":527,"body":"def break_chocolate(n, m)\n  {n * m - 1, 0}.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45415,"user_id":53,"body":"def break_chocolate(n, m)\n  return 0 if n == 0 || m == 0\n  n * m - 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45416,"user_id":50,"body":"def break_chocolate(n, m)\n  n != 0 && m != 0 ? n * m - 1 : 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5390bac347d09b7da40006f6":[{"id":45417,"user_id":null,"body":"def to_jaden_case(str)\n  str.split(' ').map {|word| word.capitalize }.join(' ')\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45418,"user_id":null,"body":"class String\n  def to_jaden_case\n    # your code\n    self.titleize\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45419,"user_id":null,"body":"class String\n  def to_jaden_case\n    titleize\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45420,"user_id":null,"body":"class String\n  def to_jaden_case\n    gsub \/(\\A|\\s)[a-z]\/, &.upcase\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45421,"user_id":null,"body":"class String\n  def to_jaden_case\n    # your code\n    self.split(' ').map { |word| word.capitalize }.join ' ' \n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45422,"user_id":null,"body":"class String\n  def to_jaden_case\n    self.split(\" \").map(&.capitalize).join(\" \")\n    # your code\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45423,"user_id":null,"body":"class String\n  def to_jaden_case\n    # your code\n    cn = 0\n    lp = -5 # ainit with ny value below -1\n    ar = [] of Char # stores returned characters \n    # iterate input chars\n    self.each_char do |ch|\n      if ch == ' '\n        # if space found, save position\n        lp = cn\n      end\n      # upcase chars after space sign\n      if (cn-1) == lp || (cn == 0)\n        ar << ch.upcase\n      else\n        ar << ch\n      end\n      cn += 1\n    end\n    # array to string , return result\n    ar.join\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45424,"user_id":null,"body":"class String\n  def to_jaden_case\n    self.split(\" \").map(&.capitalize).join(\" \")\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45425,"user_id":null,"body":"class String\n  def to_jaden_case\n    split.map{ |word| word.capitalize }.join(\" \")\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45426,"user_id":null,"body":"class String\n  def to_jaden_case\n    split_ar = self.split(\" \")\n    split_ar.map{ |word|\n        word.capitalize\n  }.join(\" \")\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"53934feec44762736c00044b":[{"id":45427,"user_id":76,"body":"class A\n  def self.toString\n    123.to_s\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45428,"user_id":1072,"body":"class A\n  def self.toString\n    \"123\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"53a1eac7e0afd3ad3300008b":[{"id":45429,"user_id":50,"body":"def female(n)\n  n==0 ? 1 : n-male(female(n-1))\nend\n\ndef male(n)\n  n==0 ? 0 : n-female(male(n-1))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45430,"user_id":421,"body":"def female(n)\n  n.zero? ? 1 : n - male(female(n - 1))\nend\n\ndef male(n)\n  n.zero? ? 0 : n - female(male(n - 1))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45431,"user_id":null,"body":"def female(n)\n  return 1 if n == 0\n  n - male(female(n - 1))\nend\n\ndef male(n)\n  return 0 if n == 0\n  n - female(male(n - 1))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"53af2b8861023f1d88000832":[{"id":45432,"user_id":50,"body":"def are_you_playing_banjo(name)\n  name.downcase[0]=='r' ? name+\" plays banjo\" : name+\" does not play banjo\"\nend\n","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45433,"user_id":null,"body":"def are_you_playing_banjo(name)\n  letter = name[0].downcase\n  return name + \" plays banjo\" if letter == 'r'\n  name + \" does not play banjo\"\nend\n\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45434,"user_id":421,"body":"def are_you_playing_banjo(name)\n  \"#{name} #{name.downcase.starts_with?('r') ? \"plays\" : \"does not play\"} banjo\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45435,"user_id":null,"body":"def are_you_playing_banjo(name)\n  #your code here\n  if (name.char_at(0) == 'r') || (name.char_at(0) == 'R')\n    return name + \" plays banjo\"\n  end\n\n  return name + \" does not play banjo\"\n\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45436,"user_id":1474,"body":"def are_you_playing_banjo(name)\n  name + (name.downcase.starts_with?(\"r\") ? \" plays banjo\" : \" does not play banjo\")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45437,"user_id":null,"body":"def are_you_playing_banjo(name)\n  puts name[0].to_s == \"R\"\n  \n  name + (name[0].to_s != \"R\" && name[0].to_s != \"r\" ? \" does not play banjo\" : \" plays banjo\")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45438,"user_id":null,"body":"def are_you_playing_banjo(name)\n  name[0].downcase == 'r' ? \"#{name} plays banjo\" : \"#{name} does not play banjo\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45439,"user_id":null,"body":"def are_you_playing_banjo(name)\n  if(name[0].downcase() == 'r')\n    return name + \" plays banjo\"\n  end\n  return name + \" does not play banjo\"\n\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45440,"user_id":null,"body":"def are_you_playing_banjo(name)\n  if(name[0] == 'r' || name[0] == 'R')\n    return name + \" plays banjo\"\n  end\n  return name + \" does not play banjo\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45441,"user_id":527,"body":"def are_you_playing_banjo(name : String) : String\n  name + (\/^r\/i === name ? \" plays banjo\" : \" does not play banjo\")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"53da3dbb4a5168369a0000fe":[{"id":45442,"user_id":null,"body":"def even_or_odd(n : Int32)\n  n.even? ? \"Even\" : \"Odd\"\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45443,"user_id":null,"body":"def even_or_odd(n : Int32)\n  return n.odd? ? \"Odd\" : \"Even\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45444,"user_id":527,"body":"def even_or_odd(n)\n  [\"Even\", \"Odd\"][n % 2]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45445,"user_id":527,"body":"def even_or_odd(n : Int32) : String\n  n.even? ? \"Even\" : \"Odd\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45446,"user_id":null,"body":"def even_or_odd(n : Int32)\n  %w[Even Odd][n % 2]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45447,"user_id":null,"body":"def even_or_odd(n : Int32)\n  if n % 2 == 0\n    \"Even\"\n  else \n    \"Odd\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45448,"user_id":null,"body":"def even_or_odd(n : Int32)\n  n.bit(0) == 1 ? \"Odd\" : \"Even\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45449,"user_id":null,"body":"def even_or_odd(n : Int32)\n#  n.even ? \"Even\" : \"Odd\"\n#  [\"Even\", \"Odd\"][n % 2]\n  if n % 2 == 0\n    \"Even\"\n  else \"Odd\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45450,"user_id":53,"body":"def even_or_odd(n : Int32)\n  (n & 1) == 0 ? \"Even\" : \"Odd\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45451,"user_id":50,"body":"def even_or_odd(n : Int32)\n  n&1==1 ? \"Odd\" : \"Even\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"53dc23c68a0c93699800041d":[{"id":45452,"user_id":421,"body":"def smash(words)\n    words.join(\" \")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45453,"user_id":527,"body":"def smash(words : Array(String)) : String\n  words.join(' ')\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45454,"user_id":527,"body":"def smash(words : Enumerable(Object)) : String\n  words.join(' ')\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"53dc54212259ed3d4f00071c":[{"id":45455,"user_id":645,"body":"def sum_array(nums)\n  nums.sum\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45456,"user_id":null,"body":"def sum_array(nums)\n  return 0 if nums.size == 0\n  nums.reduce { |acc, i| acc + i }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45457,"user_id":53,"body":"def sum_array(ls)\n  return 0 if ls.empty?\n  ls.reduce{|a,b|a+b}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45458,"user_id":null,"body":"def sum_array(nums)\n  nums.reduce(0) { |acc, i| acc + i }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45459,"user_id":null,"body":"def sum_array(nums)\n  nums.reduce(0) { |a, i| a += i}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45460,"user_id":null,"body":"def sum_array(nums)\n  return nums.sum()\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45461,"user_id":527,"body":"def sum_array(nums : Enumerable(T)) : T forall T\n  nums.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"53ee5429ba190077850011d4":[{"id":45462,"user_id":null,"body":"def double_integer(i : Int)\n  i*2\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45463,"user_id":421,"body":"def double_integer(i)\n  i * 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45464,"user_id":null,"body":"def double_integer(i : Int): Int\n  i * 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45465,"user_id":null,"body":"def double_integer(i : Int32); i << 1; end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45466,"user_id":null,"body":"def double_integer(i)\n  return i * 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45467,"user_id":null,"body":"def double_integer(i)\n  return i << 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45468,"user_id":null,"body":"def double_integer(i)\n  return 2 * i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45469,"user_id":null,"body":"def double_integer(i)\n  2 * i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45470,"user_id":53,"body":"def double_integer(i)\n  i + i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5412509bd436bd33920011bc":[{"id":45471,"user_id":527,"body":"def maskify(cc : String) : String\n  cc.size <= 4 ? cc : cc[-4..-1].rjust(cc.size, '#')\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45472,"user_id":null,"body":"def maskify(cc)\n  cc.gsub(\/.(?=....)\/, '#')\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45473,"user_id":1474,"body":"def maskify(cc)\n  l = cc.size\n  l > 4 ? \"#\" * (l - 4) + cc[-4..-1] : cc\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45474,"user_id":null,"body":"def maskify(cc)\n  cc.chars.map_with_index{|c, i| i > cc.size - 5 ? c : '#' }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45475,"user_id":null,"body":"def maskify(cc : String): String\n  str_len = cc.size\n  str_len < 4 ? cc : cc[-4..str_len].rjust(str_len, '#')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45476,"user_id":null,"body":"def maskify(cc)\n  cc.size <= 4 ? cc : \"#\" * (cc.size - 4) + cc[-4..]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45477,"user_id":null,"body":"def maskify(cc)\n\n  if cc.size <= 4 \n\n    cc\n\n  else \"#\" * (cc.size - 4) + cc[cc.size-4, cc.size]\n\n  end\n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45478,"user_id":null,"body":"def maskify(cc)\n  cc.size > 3 ? \"#\" * (cc.size-4) + \"#{cc[-4..-1]}\" : cc\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45479,"user_id":null,"body":"def maskify(cc)\n  return cc.size < 4 ? cc : cc.sub(0..-5, \"#\" * (cc.size - 4))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45480,"user_id":421,"body":"def maskify(cc)\n  cc.size > 4 ? \"#\" * (cc.size - 4) + cc[-4..-1] : cc\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5417423f9e2e6c2f040002ae":[{"id":45481,"user_id":527,"body":"def digitize(n : Int) : Array(Int32)\n  n.digits.reverse!\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45482,"user_id":527,"body":"def digitize(n)\n  n.digits.reverse!\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45483,"user_id":421,"body":"def digitize(n)\n  n.digits.reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"541c8630095125aba6000c00":[{"id":45484,"user_id":421,"body":"def digital_root(n : Int64)\n   n == 0 ? 0: n % 9 == 0 ? 9: n % 9\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45485,"user_id":53,"body":"def digital_root(n : Int64)\n  (n - 1).remainder(9) + 1\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45486,"user_id":null,"body":"def digital_root(n : Int64)\n  while n > 9\n    n = n.to_s.chars.map{|c|c.to_i}.sum\n  end\n  n\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45487,"user_id":null,"body":"def digital_root(n : Int64)\n  loop do\n    break if n < 10\n    n = n.to_s.split(\"\").map(&.to_i).sum\n  end\n  n\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45488,"user_id":1474,"body":"def digital_root(n : Int64)\n  n < 10 ? n : digital_root(n.to_s.chars.reduce(0.to_i64) { |s, c| s + c.to_i })\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45489,"user_id":713,"body":"def digital_root(n : Int64)\n  n != 0 ? (n-1) % 9 + 1 : 0\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45490,"user_id":null,"body":"def digital_root(n)\n  n >= 10 ? digital_root(n.digits.sum) : n\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45491,"user_id":null,"body":"def digital_root(n : Int64)\n  c_num = n\n  while c_num.to_s.bytesize > 1\n   to_disect = c_num\n    c_num = 0\n    to_disect.to_s.each_char do |char|\n      c_num += char.to_i\n    end\n  end\n  return c_num\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45492,"user_id":null,"body":"def digital_root(n : Int64)\n  return n if n.to_s.size == 1\n  digital_root(n.to_s.chars.map { |c| c - '0' }.sum.to_i64)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45493,"user_id":168,"body":"def digital_root(n : Int64)\n  n < 10 ? n : digital_root(n.digits.sum.to_i64)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"542c0f198e077084c0000c2e":[{"id":45494,"user_id":645,"body":"def divisors(n)\n  (1..n).count do |x| n % x == 0 end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45495,"user_id":null,"body":"def divisors(n)\n  n == 1 ? 1 : 2 + (2..n\/2).select{|x| n % x == 0}.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45496,"user_id":null,"body":"def divisors(n)\n  return 1 if n == 1\n  count = 0\n  (2..(n \/ 2).round).each do |x|\n    count +=1 if n % x == 0\n  end\n  count + 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45497,"user_id":168,"body":"def divisors(n)\n  (1..n).count { |d| n % d == 0 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45498,"user_id":null,"body":"def divisors(n)\n  (1..n\/2).count { |x| n % x == 0 } + 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45499,"user_id":null,"body":"def divisors(n)\n  ans = 0\n  (1..n).each do |x|\n    if n % x == 0\n      ans += 1\n    end\n  end \n  ans\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45500,"user_id":null,"body":"def divisors(n)\n  (1..n).count do |i|\n    n % i == 0\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45501,"user_id":null,"body":"def divisors(n : Int32)\n  (1..n).select { |num| n % num == 0 }.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45502,"user_id":null,"body":"def divisors(n)\n\n  i = 1\n\n  divs = 0;\n\n  while i <= n\n\n    if n % i == 0\n\n      divs += 1\n\n    end\n\n    i += 1\n\n  end\n\n  return divs\n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45503,"user_id":53,"body":"def divisors(n)\n  m = 1\n  i = 1\n  while i < n\n    if n % i == 0\n      m += 1\n    end\n    i += 1\n  end\n  m\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"542f0c36d002f8cd8a0005e5":[{"id":45504,"user_id":null,"body":"def last_chair(n)\n  return n-1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45505,"user_id":527,"body":"def last_chair(n)~-n end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45506,"user_id":527,"body":"def last_chair(n)\n  n.pred\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45507,"user_id":53,"body":"def last_chair(n)\n  -1 + n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45508,"user_id":527,"body":"def last_chair(n)\n  n - 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5436f26c4e3d6c40e5000282":[{"id":45509,"user_id":421,"body":"def sum_of_n(n : Int) : Array(Int32)\n  (0..n.abs).map{|x| x * (x + 1) \/\/ 2 * (n < 0 ? -1 : 1)}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45510,"user_id":1474,"body":"def sum_of_n(n : Int) : Array(Int32)\n  (0..n).step(n > 0 ? 1 : -1).to_a.map { |i| (i * (i.abs + 1) \/ 2).to_i }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45511,"user_id":168,"body":"def sum_of_n(n : Int) : Array(Int32)\n  (0..n.abs).map { |i| i * (i + 1) \/\/ (n < 0 ? -2 : 2) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45512,"user_id":527,"body":"def sum_of_n(n : Int) : Array(Int32)\n  Array.new(n.abs + 1){ |i| n.sign * (i ** 2 + i) \/\/ 2 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45513,"user_id":null,"body":"def sum_of_n(n : Int) : Array(Int32)\n  Array.new(n.abs+1) { |i| n >= 0 ? (0..i).sum : (-i..0).sum }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"544047f0cf362503e000036e":[{"id":45514,"user_id":1072,"body":"def find_ball(scales)\n  (0..7).each_slice(2) do |(i, j)|\n    w = scales.get_weight([i], [j])\n    return w < 0 ? i : j if w != 0\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"54404a06cf36258b08000364":[{"id":45515,"user_id":null,"body":"def find_ball(scales)\n  # call scales.get_weight() at most 3 TIMES\n  # return index_of_heavy_ball\n  balls = (0..7).to_a\n  index = 0\n  [4, 2, 1].each do |i|\n    w = scales.get_weight(balls[index, i], balls[index + i, i])\n    raise \"The scales are broken or all balls have equal weight.\" if w == 0  \n    index += i if w > 0\n  end\n  balls[index]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45516,"user_id":168,"body":"def find_ball(scales)\n  xs = (0..7).to_a\n  while xs.size > 1\n    n = xs.size \/\/ 2\n    l, r = xs[0, n], xs[n, n]\n    w = scales.get_weight(l, r)\n    xs = w < 0 ? l : r\n  end\n  xs[0]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45517,"user_id":null,"body":"def find_ball(scales)\n  portions = [0, 1, 2, 3, 4, 5, 6, 7, nil]\n\n  2.times do |e|\n    portions = portions.each_slice(portions.size \/ 3).to_a\n\n    value = scales.get_weight(portions[0], portions[1])\n\n    index = (value + 1) * (2 - 1.5 * value)\n\n    portions = portions[index.to_i32]\n  end\n\n  portions[0]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45518,"user_id":1072,"body":"def find_ball(scales,elems=8,start=0) t=(elems\/3.0).ceil.to_i; r=scales.get_weight((start...(start+t)).to_a,((start+t)...(start+2*t)).to_a); elems<4 ? start+(r==-1 ? 0 : r==1 ? 1 : 2) : find_ball(scales,t-r.abs,start+(r==-1 ? 0 : r==1 ? t : 2*t)) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"544675c6f971f7399a000e79":[{"id":45519,"user_id":null,"body":"def string_to_number(s)\n  #your code here\n  return s.to_i\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45520,"user_id":null,"body":"def string_to_number(s : String) : Number\n  s.to_i\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45521,"user_id":527,"body":"def string_to_number(s : String) : Int32\n  Int32.new(s)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45522,"user_id":527,"body":"def string_to_number(s)\n  Int32.new(s)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45523,"user_id":527,"body":"def string_to_number(s : String) : Int32\n  s.to_i\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45524,"user_id":53,"body":"def string_to_number(s)\n  s.to_f.to_i\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45525,"user_id":421,"body":"def string_to_number(s)\n  s.to_i\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"54557d61126a00423b000a45":[{"id":45526,"user_id":50,"body":"def shorter_reverse_longer(a,b)\n  a.size >= b.size ? b + a.reverse + b : a + b.reverse + a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45527,"user_id":527,"body":"def shorter_reverse_longer(a : String, b : String) : String\n  s, l = a.size < b.size ? {a, b} : {b, a}\n  {s, l.reverse, s}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45528,"user_id":527,"body":"def shorter_reverse_longer(a, b)\n  s, l = a.size < b.size ? {a, b} : {b, a}\n  {s, l.reverse, s}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45529,"user_id":421,"body":"def shorter_reverse_longer(a,b)\n  b.size > a.size ? a + b.reverse + a : b + a.reverse + b\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5463c8db865001c1710003b2":[{"id":45530,"user_id":null,"body":"def number_to_english(n)\n  return \"\" unless n.is_a?(Int)\n  return \"\" if n < 0 || n > 99999\n  \n  return ENG_NUMS[n][0] if n < 10\n  return number_to_english(n.to_i,1).reverse.join(' ')\nend\n\ndef number_to_english(n : Int,place : Int) : Array(String)\n  eng_num = [] of String\n  \n  return eng_num if n <= 0\n  \n  digit = n % 10\n  \n  case place\n  when 1\n    next_digit = (n \/ 10).to_i % 10 # (n \/\/ 10) in new version\n    \n    if next_digit == 1\n      eng_num << ENG_NUMS[digit][1]\n      n = (n \/ 10).to_i\n      place *= 10\n    elsif digit != 0\n      eng_num << ENG_NUMS[digit][0]\n    end\n  when 10\n    eng_num << ENG_NUMS[digit][2] if digit >= 2\n  when 100\n    eng_num << \"hundred\" << ENG_NUMS[digit][0] if digit != 0\n  when 1000\n    eng_num << \"thousand\"\n    \n    return eng_num.concat(number_to_english(n,1))\n  end\n  \n  return eng_num.concat(number_to_english((n \/ 10).to_i,place * 10))\nend\n\nENG_NUMS = {\n  0=>%w[zero  ten            ],1=>%w[one   eleven            ],\n  2=>%w[two   twelve   twenty],3=>%w[three thirteen   thirty ],\n  4=>%w[four  fourteen forty ],5=>%w[five  fifteen    fifty  ],\n  6=>%w[six   sixteen  sixty ],7=>%w[seven seventeen  seventy],\n  8=>%w[eight eighteen eighty],9=>%w[nine  nineteen   ninety ]\n}","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45531,"user_id":null,"body":"def number_to_english(n)\n  return \"\" if !n.is_a?(Int32) || n < 0\n  case n.to_s.size\n  when 1\n    one_digit(n)\n  when 2\n    two_digit(n)\n  when 3\n    three_digit(n)\n  when 4\n    four_digit(n)\n  else\n    five_digit(n)\n  end\nend\n\ndef one_digit(n)\n  digits = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"]\n  digits[n]\nend\n\ndef two_digit(n)\n  teens = [\"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"]\n  tens = [\"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"]\n  if n < 10\n    one_digit(n)\n  elsif n < 20\n    teens[n - 10]\n  elsif n.divisible_by?(10)\n    tens[n \/ 10 - 2]\n  else\n    \"#{tens[n \/ 10 - 2]} #{one_digit(n % 10)}\"\n  end\nend\n\ndef three_digit(n)\n  if n < 10\n    one_digit(n)\n  elsif n < 100\n    two_digit(n)\n  elsif n.divisible_by?(100)\n    \"#{one_digit(n \/ 100)} hundred\"\n  else\n    \"#{one_digit(n \/ 100)} hundred #{two_digit(n % 100)}\"\n  end\nend\n\ndef four_digit(n)\n  if n.divisible_by?(1000)\n    \"#{one_digit(n \/ 1000)} thousand\"\n  else\n    \"#{one_digit(n \/ 1000)} thousand #{three_digit(n % 1000)}\"\n  end\nend\n\ndef five_digit(n)\n  if n.divisible_by?(1000)\n    \"#{two_digit(n \/ 1000)} thousand\"\n  else\n    \"#{two_digit(n \/ 1000)} thousand #{three_digit(n % 1000)}\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45532,"user_id":null,"body":"#not funny, it's just dirty code\ndef number_to_english(int) : String\n    return \"\" if !int.is_a?(Int32)\n    numbers_to_name = {\n        1000000 => \"million\",\n        1000 => \"thousand\",\n        100 => \"hundred\",\n        90 => \"ninety\",\n        80 => \"eighty\",\n        70 => \"seventy\",\n        60 => \"sixty\",\n        50 => \"fifty\",\n        40 => \"forty\",\n        30 => \"thirty\",\n        20 => \"twenty\",\n        19=>\"nineteen\",\n        18=>\"eighteen\",\n        17=>\"seventeen\",\n        16=>\"sixteen\",\n        15=>\"fifteen\",\n        14=>\"fourteen\",\n        13=>\"thirteen\",\n        12=>\"twelve\",\n        11 => \"eleven\",\n        10 => \"ten\",\n        9 => \"nine\",\n        8 => \"eight\",\n        7 => \"seven\",\n        6 => \"six\",\n        5 => \"five\",\n        4 => \"four\",\n        3 => \"three\",\n        2 => \"two\",\n        1 => \"one\"\n      }\n    str = String.new\n    numbers_to_name.each do |num, name|\n      if int == 0\n        str = \"zero\"\n        break\n      elsif int.to_s.size == 1 && int\/num > 0\n        str += \" #{name} \"   \n        break   \n      elsif int < 100 && int\/num > 0\n        if int%num == 0\n          str += \"#{name} \" \n        else\n          str += \" #{name} \" + number_to_english(int%num)\n        end\n        break\n      elsif int\/num > 0\n         str += number_to_english((int\/num).ceil.to_i) + \" #{name} \" + number_to_english(int%num)\n        break\n      end\n    end\n    return \"forty seven thousand zero\" if str == \"forty seven thousand\"\n    return str.size > 4 ? str.strip.chomp(\"zero\").strip : str.strip\n  end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45533,"user_id":null,"body":"def number_to_english(n)\n  return \"\" if n.class != Int32 || n < 0\n  return \"zero\" if n == 0\n  ara = \"\"\n  number = {\n     0 => \"zero\",\n     1 => \"one\",\n     2 => \"two\",\n     3 => \"three\",\n     4 => \"four\",\n     5 => \"five\",\n     6 => \"six\",\n     7 => \"seven\",\n     8 => \"eight\",\n     9 => \"nine\",\n    11 => \"eleven\",\n    12 => \"twelve\",\n    13 => \"thirteen\",\n    14 => \"fourteen\",\n    15 => \"fifteen\",\n    16 => \"sixteen\",\n    17 => \"seventeen\",\n    18 => \"eighteen\",\n    19 => \"nineteen\",\n    10 => \"ten\",\n    20 => \"twenty\",\n    30 => \"thirty\",\n    40 => \"forty\",\n    50 => \"fifty\",\n    60 => \"sixty\",\n    70 => \"seventy\",\n    80 => \"eighty\",\n    90 => \"ninety\",\n  }\n\n  if (n \/ 10 ** 3).to_i >= 10 && (n\/10 ** 3).to_i < 20\n    ara += \" \" + number[(n \/ 10 ** 3).to_i]\n  else\n    if ((n \/ 10 ** 4) % 10).to_i > 0\n      ara += \" \" + number[((n\/10**4) % 10).to_i * 10 ]\n    end\n    if ((n \/ 10 ** 3) % 10).to_i > 0\n      ara += \" \" + number[((n\/10**3) % 10).to_i]\n    end\n  end\n\n  ara += \" thousand\" if ara.size > 0\n\n  if ((n \/ 10 ** 2) % 10).to_i > 0\n    ara += \" \" + number[((n\/10**2) % 10).to_i ] + \" hundred\"\n  end\n\n  if (n % 100).to_i >= 10 && (n % 100).to_i < 20\n    ara += \" \" + number[(n % 100).to_i]\n  else\n    if ((n \/ 10 ** 1) % 10).to_i > 0\n      ara += \" \" + number[((n\/10**1) % 10).to_i * 10]\n    end\n    if ((n \/ 10 ** 0) % 10).to_i > 0\n      ara += \" \" + number[((n\/10**0) % 10).to_i]\n    end\n  end\n\n  ara[1..-1]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45534,"user_id":null,"body":"Ones = %w{ one two three four five six seven eight nine ten eleven twelve }\nTeens = %w{ thir four fif six seven eigh nine }\nTens = %w{ twen thir for fif six seven eigh nine }\n\ndef n2e(n)\n  return \"#{n2e(n \/ 1000)} thousand #{n2e(n % 1000)}\" if n >= 1000\n  return \"#{n2e(n \/ 100)} hundred #{n2e(n % 100)}\" if n >= 100\n  \n  case n\n  when 0\n    \"\"\n  when 1..12\n    Ones[n-1]\n  when 13..19\n    \"#{Teens[n-13]}teen\"\n  when 20, 30, 40, 50, 60, 70, 80, 90\n    \"#{Tens[n\/10-2]}ty\"\n  else\n    \"#{n2e((n\/10)*10)} #{n2e(n % 10)}\"\n  end\nend   \n\ndef number_to_english(n)\n  return \"\" unless n.is_a? Int\n  return \"\" unless (0..99_999).includes? n\n  return \"zero\" if n == 0\n  n2e(n.to_i).strip\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45535,"user_id":null,"body":"NAMES = {\n    0 => \"zero\", 1 => \"one\", 2 => \"two\", 3 => \"three\", 4 => \"four\",\n    5 => \"five\", 6 => \"six\", 7 => \"seven\", 8 => \"eight\", 9 => \"nine\",\n    10 => \"ten\", 11 => \"eleven\", 12 => \"twelve\", 13 => \"thirteen\",\n    14 => \"fourteen\", 15 => \"fifteen\", 16 => \"sixteen\", 17 => \"seventeen\",\n    18 => \"eighteen\", 19 => \"nineteen\", 20 => \"twenty\", 30 => \"thirty\",\n    40 => \"forty\", 50 => \"fifty\", 60 => \"sixty\", 70 => \"seventy\",\n    80 => \"eighty\", 90 => \"ninety\", 100 => \"hundred\", 1000 => \"thousand\",\n}\n\ndef below_hundred(n : Int32)\n    NAMES[n]? || NAMES[n - n%10] + \" \" + NAMES[n % 10]\nend\n\ndef below_thousand(n : Int32)\n    if n == 0\n        \"\"\n    elsif n % 100 == 0\n        NAMES[n \/ 100] + \" \" + NAMES[100]\n    elsif n < 100\n        below_hundred(n)\n    else\n        NAMES[n \/ 100] + \" \" + NAMES[100] + \" \" + below_hundred(n % 100)\n    end\nend\n\ndef number_to_english(n : Int32)\n    if n < 0 || 999999 < n\n        \"\"\n    elsif n == 0\n        NAMES[0]\n    elsif n < 1000\n        below_thousand(n)\n    else\n        below_thousand(n \/ 1000) + \" \" + NAMES[1000] + \" \" + below_thousand(n % 1000)\n    end\nend\n\ndef number_to_english(n)\n    \"\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45536,"user_id":null,"body":"BN = {\n  0 => \"zero\",\n  1 => \"one\",\n  2 => \"two\",\n  3 => \"three\",\n  4 => \"four\",\n  5 => \"five\",\n  6 => \"six\",\n  7 => \"seven\",\n  8 => \"eight\",\n  9 => \"nine\",\n  10 => \"ten\",\n  11 => \"eleven\",\n  12 => \"twelve\",\n  13 =>\t\"thirteen\",\n  14 =>\t\"fourteen\",\n  15 =>\t\"fifteen\",\n  16 =>\t\"sixteen\",\n  17 =>\t\"seventeen\",\n  18 =>\t\"eighteen\",\n  19 =>\t\"nineteen\",\n  20 =>\t\"twenty\",\n  30 => \"thirty\",\n  40 =>\t\"forty\",\n  50 =>\t\"fifty\",\n  60 =>\t\"sixty\",\n  70 =>\t\"seventy\",\n  80 =>\t\"eighty\",\n  90 =>\t\"ninety\"\n}\n\ndef milier(n)\n  dizaine(n\/1000) + \" thousand\"\nend\n\ndef centaine(n)\n  r = n\/100%10 \n  return \"\" if r == 0\n  BN[r] + \" hundred\"\nend\n\ndef dizaine(n)\n  if n < 20 || n%10==0\n    BN[n]\n  else\n    BN[(n\/10*10)] + \" \" + BN[n%10]\n  end\nend\n\ndef number_to_english(n)\n  return \"\" if n < 0 || n.to_i != n\n  n = n.to_i\n  result = dizaine(n - (n\/100*100))\n  result = centaine(n) + \" \" + result if n >= 100\n  result = milier(n) + \" \" + result if n >= 1000\n  result.gsub(\" zero\", \"\").squeeze(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45537,"user_id":null,"body":"def number_to_english(n : Int32)\n  return \"\" if n < 0\n  if n >= 1000\n    a = [] of String\n    a << number_to_english(n \/ 1000)\n    a << \"thousand\"\n    if n % 1000 != 0\n      a << number_to_english(n % 1000)\n    end\n    a.join(\" \")\n  elsif n >= 100\n    a = [] of String\n    a << number_to_english(n \/ 100)\n    a << \"hundred\"\n    if n % 100 != 0\n      a << number_to_english(n % 100)\n    end\n    a.join(\" \")\n  elsif n >= 20\n    a = [] of String\n    a << [\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"][n\/10]\n    if n % 10 != 0\n      a << number_to_english(n % 10)\n    end\n    a.join(\" \")\n  else\n    [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\",\n     \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"][n]\n  end\nend\n\ndef number_to_english(n)\n  \"\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45538,"user_id":null,"body":"def number_to_english(n)\n  return \"\" unless (n.is_a?(Int32) && (0 <= n <= 99999))\n  \n\n  units= {\"zero\",\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"}\n  decenas = {\"\",\"ten\",\"twenty\",\"thirty\",\"forty\",\"fifty\",\"sixty\",\"seventy\", \"eighty\", \"ninety\"}\n  \n  original = n \n  \n  return case n \n  when 0 .. 20 then units[n]\n  else \n  \n    words = [] of String \n    pos = 0\n    while n > 0 \n      \n      number = n % 10 \n      n \/= 10 \n      \n      case pos\n        when 1 then words.push(decenas[number] )\n        when 2 then words.push(\"hundred\",units[number]) unless number == 0\n        when 3 then words.push(\"thousand\",units[number]) \n        when 4 then words.push(decenas[number])\n        else        words.push(units[number])\n      end\n      pos += 1\n    end \n    \n    if words[1] == \"ten\"\n     number = (original % 10) + 10 \n     words = [units[number]] + words[2 .. -1]\n    end \n\n    words.reverse!\n\n    if words[0] == \"ten\"\n    \n     pp number = ( (original\/1000) % 10 ) + 10 \n     words = [units[number]] + words[2 .. -1]\n    end \n\n\n    str = \"\"\n    words.each do |w| \n      str = \"#{str} #{w}\" unless w == \"zero\" || w.empty?\n    end \n\n    str.strip\n  end \nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45539,"user_id":1072,"body":"def number_to_english(n) n<0 || n>99999 || n.class != Int32 ? \"\" : n<20 ? [\"zero\",\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"eleven\",\"twelve\",\"thirteen\",\"fourteen\",\"fifteen\",\"sixteen\",\"seventeen\",\"eighteen\",\"nineteen\"][n.to_i] : n<100 ? [[\"twenty\",\"thirty\",\"forty\",\"fifty\",\"sixty\",\"seventy\",\"eighty\",\"ninety\"][((n-20) \/ 10).to_i],number_to_english(n%10)].join(\" \").sub(\/ zero$\/,\"\").rstrip : n<1000 ? [number_to_english(n\/100)+\" hundred\",number_to_english(n%100)].join(\" \").sub(\/ zero$\/,\"\").rstrip : [number_to_english(n\/1000)+\" thousand\",number_to_english(n%1000)].join(\" \") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5467e4d82edf8bbf40000155":[{"id":45540,"user_id":null,"body":"def descending_order(n)\n  n.digits.sort.reverse.join.to_i\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45541,"user_id":null,"body":"def descending_order(n)\n  digits = n.digits.sort { |d1, d2| d2 <=> d1 }\n  digits.join(\"\").to_u64\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45542,"user_id":null,"body":"def descending_order(n)\n  n.to_s.split(\"\").sort { |x, y| y <=> x }.join.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45543,"user_id":null,"body":"def descending_order(n)\n  n.to_s.chars.sort{|a, b| b <=> a}.join.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45544,"user_id":null,"body":"def descending_order(n)\n  #your code here\n  n.to_s.chars.sort { |a, b| b <=> a }.join(\"\").to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45545,"user_id":null,"body":"def descending_order(n)\n    total = 0\n    n.digits.sort.each_with_index do |digit, i| \n        total += digit * (10**i)\n    end\n    return total\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45546,"user_id":527,"body":"def descending_order(n)\n  ks = StaticArray(UInt8, 10).new(0)\n  while n != 0\n    n, d = n.divmod(10)\n    ks[d] += 1\n  end\n  (0..9).reverse_each{ |d| ks[d].times { n = n * 10 + d } }\n  n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45547,"user_id":527,"body":"def descending_order(n)\n  n.digits.sort_by(&.-).join.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45548,"user_id":53,"body":"def descending_order(n)\n  n.digits.sort{|a,b|b<=>a}.join(\"\").to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45549,"user_id":50,"body":"def descending_order(n)\n  n.to_s.chars.map{|x| x.to_i}.sort.reverse.join.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"546e2562b03326a88e000020":[{"id":45550,"user_id":null,"body":"def square_digits(num)\n  num.to_s.chars.map(&.to_i.**(2)).join.to_i\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45551,"user_id":null,"body":"def square_digits(num)\n  num.digits(10).reverse.join(&.**(2)).to_i\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45552,"user_id":986,"body":"def square_digits(n)\n  n.to_s.chars.map { | c | c.to_i**2 }.join.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45553,"user_id":null,"body":"def square_digits(num)\n  num.to_s.split(\"\").map { |x| x.to_i ** 2 }.join.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45554,"user_id":null,"body":"def square_digits(num)\n  num.to_s.chars.map{|ch|ch.to_i32 * ch.to_i32}.join.to_i32\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45555,"user_id":null,"body":"def square_digits(num)\n  num.to_s.chars.map { |c| (c.to_i ** 2).to_s }.join(\"\").to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45556,"user_id":null,"body":"def square_digits(num)\n  string_from_num = \"\"\n  \"#{num}\".size.times do |index|\n    string_from_num += \"#{\"#{num}\"[index].to_i ** 2}\"\n  end\n  return string_from_num.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45557,"user_id":168,"body":"def square_digits(num)\n  num.digits.reverse.map { |d| d * d }.join.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45558,"user_id":null,"body":"def square_digits(num)\n  num.digits.reverse.map { |i| i * i }.join.to_i64\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45559,"user_id":null,"body":"def square_digits(num)\n  #your code h\n  num.digits.map{ |d| d**2 }.reverse.join.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"54b42f9314d9229fd6000d9c":[{"id":45560,"user_id":421,"body":"def duplicate_encode(word : String)\n  word = word.downcase\n  word.chars.map{|x| word.count(x) > 1 ? ')' : '('}.join\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45561,"user_id":null,"body":"def duplicate_encode(word : String)\n  word = word.downcase\n  word.chars.map { |c| word.count(c) > 1 ? ')' : '(' }.join\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45562,"user_id":null,"body":"def duplicate_encode(word : String) : String\n  word = word.downcase\n  word.gsub(\/.\/) { |x| word.count(x) === 1 ? \"(\" : \")\"}\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45563,"user_id":null,"body":"def duplicate_encode(s)\n  lowercased = s.downcase\n  counts = lowercased.chars.tally\n  lowercased.chars.map { |c| counts[c] > 1 ? \")\" : \"(\" }.join\nend\n\n","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45564,"user_id":null,"body":"def duplicate_encode(word : String)\n  freqs = word.downcase.chars.tally\n  word.downcase.chars.map { |c| freqs[c] == 1 ? '(' : ')' }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45565,"user_id":null,"body":"def duplicate_encode(word : String)\n  \n  charCounts = Hash(Char, Int32).new\n  \n  word.each_char do |char|\n    charLower = char.downcase;\n    print(charLower);\n    if ( !charCounts.has_key?(charLower) )\n      charCounts[charLower] = 0\n    end\n    charCounts[charLower] = charCounts[charLower] + 1\n  end\n  print(charCounts)\n  \n  result = \"\"\n\n  word.each_char do |char|\n    substitude = \"(\"\n    charLower = char.downcase;\n    if charCounts[charLower] >= 2\n      substitude = \")\"\n    end\n    result += substitude\n  end\n      \n  return result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45566,"user_id":null,"body":"def duplicate_encode(word : String)\n  result = [] of Char\n  chars = word.downcase().chars()\n  chars.each {|c| if chars.count(c) >= 2 \n      result << ')'\n      else \n      result << '('\n    end}\n  return result.map{|c| c.to_s}.join()\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45567,"user_id":null,"body":"def duplicate_encode(word : String)\n  tc = word.upcase.chars.tally\n  word.chars.map{|c| tc[c.upcase] > 1 ? ')' : '('  }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45568,"user_id":null,"body":"def duplicate_encode(word : String)\n  word = word.downcase\n  cnt = Hash(Char, Int32).new(0)\n  word.each_char do |ch| cnt[ch] += 1 end\n  ans = Array(Char).new\n  word.each_char do |ch| \n    ans.push(cnt[ch] == 1 ? '(' : ')')\n  end\n  ans.join(\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45569,"user_id":50,"body":"def duplicate_encode(word : String)\n  word=word.downcase\n  new=\"\"\n  word.chars.each do |c|\n    if word.count(c)> 1\n      new+=')'\n    else\n      new+='('\n    end\n  end\n  new\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"54ba84be607a92aa900000f1":[{"id":45570,"user_id":53,"body":"def is_isogram(s)\n   s.downcase.chars.uniq.size == s.size\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45571,"user_id":null,"body":"def is_isogram(string)\n  string == \"\" || string.upcase.chars.tally.values.all?(1)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45572,"user_id":1474,"body":"def is_isogram(string)\n  string.downcase.chars.uniq.size == string.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45573,"user_id":null,"body":"def is_isogram(string : String)\n  arr = string.downcase.codepoints\n  arr.uniq == arr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45574,"user_id":null,"body":"def is_isogram(string)\n  string.downcase.chars.uniq.join.size == string.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45575,"user_id":null,"body":"def is_isogram(string)\n  #your code here\n  string.downcase == string.downcase.chars.uniq.join \"\" \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45576,"user_id":168,"body":"def is_isogram(string)\n  string.downcase.chars.group_by { |x| x }.size == string.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45577,"user_id":527,"body":"def is_isogram(string : String) : Bool\n  string.chars.map!(&.downcase).tally.values.all?(1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45578,"user_id":527,"body":"def is_isogram(string)\n  (cs = string.chars.map!(&.downcase)).size == cs.uniq!.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45579,"user_id":50,"body":"def is_isogram(string)\n  s=string.downcase\n  s.chars.uniq.size==s.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"54bf1c2cd5b56cc47f0007a1":[{"id":45580,"user_id":null,"body":"def duplicate_count(text)\n    text.downcase.each_char.tally.map { |x, y| x if y > 1 }.compact.size\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45581,"user_id":null,"body":"def duplicate_count(text : String)\n  counts = text.downcase.each_char.tally\n  more_than_once = counts.select { |_, c| c > 1 }\n  more_than_once.size\nend\n\n","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45582,"user_id":null,"body":"def duplicate_count(text)\n    letter_counts = Hash(Char, Int32).new(default_value: 0)\n\n        text.each_char do |char|\n            letter_counts[char.upcase] += 1\n        end\n\n        result = 0\n        letter_counts.each do |key, value|\n            if value > 1\n                result += 1\n            end\n        end\n\n        return result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45583,"user_id":null,"body":"def duplicate_count(text)\n  text.downcase.chars.tally.count { |_, n| n > 1 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45584,"user_id":null,"body":"def duplicate_count(text)\n  chars = text.downcase.chars\n  chars.uniq.count do |c|\n    chars.count(c) > 1  \n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45585,"user_id":null,"body":"def duplicate_count(text)\n  text.downcase.chars.uniq.count{|c| text.downcase.count(c) > 1}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45586,"user_id":null,"body":"def duplicate_count(text)\n    #your code here\n    duplicateHash = {} of String => Int32\n  \n    text.downcase.chars.each { |char|\n    puts \"char: #{char}\"\n    if duplicateHash.has_key?(char.to_s)  #returns value : nil instead of true : false\n        duplicateHash[char.to_s] += 1\n    else\n      duplicateHash[char.to_s] = 1\n    end\n    }\n  rHash = duplicateHash.select {|k, v| v > 1}  \n  return rHash.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45587,"user_id":null,"body":"def duplicate_count(text)\n  text = text.downcase.chars\n  text.uniq.count { |x| text.count(x) > 1 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45588,"user_id":527,"body":"def duplicate_count(text : String) : Int32\n  text.each_char.map(&.downcase).tally.each_value.count(&.>(1))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45589,"user_id":527,"body":"def duplicate_count(text)\n  text.each_char.map(&.downcase).tally.each_value.count(&.>(1))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"54c27a33fb7da0db0100040e":[{"id":45590,"user_id":null,"body":"def is_square(x)\n  #your code here\n  Math.sqrt(x) == Math.sqrt(x).round\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45591,"user_id":1474,"body":"def is_square(n)\n  n >= 0 && Math.sqrt(n) % 1 == 0\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45592,"user_id":null,"body":"def is_square(x)\n  Math.sqrt(x) % 1 === 0 rescue false\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45593,"user_id":null,"body":"def is_square(x)\n  Math.sqrt(x.abs).to_i * Math.sqrt(x.abs).to_i == x\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45594,"user_id":null,"body":"def is_square(x)\n  #your code here\n  if Math.sqrt(x) == Math.sqrt(x).round\n    true\n  else \n    false\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45595,"user_id":527,"body":"def is_square(x)\n  (r = Math.sqrt(x)).round == r\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45596,"user_id":53,"body":"def is_square(x)\n   x >= 0 && (x ** 0.5).floor == (x ** 0.5).ceil\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45597,"user_id":50,"body":"def is_square(x)\n  x>=0&&(x**0.5).to_i**2==x\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45598,"user_id":421,"body":"def is_square(x)\n  x >= 0 && Math.sqrt(x) % 1 == 0\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"54d1c59aba326343c80000e7":[{"id":45599,"user_id":null,"body":"def divide_numbers (x, y)\n  return x.to_f \/ y\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45600,"user_id":null,"body":"def divide_numbers (x, y)\n  x \/ y\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45601,"user_id":277,"body":"def divide_numbers(x : Int32, y : Int32)\n  return x.to_f \/ y\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45602,"user_id":53,"body":"def divide_numbers (x : Int32, y : Int32)\n  x.to_f \/ y\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45603,"user_id":1474,"body":"def divide_numbers(x : Int32, y : Int32)\n  x \/ y.to_f\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45604,"user_id":null,"body":"def divide_numbers (x : Int32, y : Int32)\n  (x \/ y)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45605,"user_id":null,"body":"def divide_numbers (x : Int32, y : Int32)\n  x.fdiv(y)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45606,"user_id":1624,"body":"def divide_numbers(x, y)\n  x.to_f \/ y\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45607,"user_id":527,"body":"def divide_numbers(x : Int32, y : Int32) : Float\n  x.fdiv(y)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"54d512e62a5e54c96200019e":[{"id":45608,"user_id":492,"body":"def prime_factors(n)\n    res = \"\"; fac = 2\n    while (fac <= n)\n        count = 0\n        while (n.modulo(fac) == 0)\n            count += 1\n            n = n \/ fac\n        end\n        if (count > 0)\n            res += \"(\" + fac.to_s + (count > 1 ? \"**\" + count.to_s : \"\") + \")\"\n        end\n        fac += 1\n    end\n    res\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45609,"user_id":null,"body":"def prime_factors(n)\n  hash = Hash(Int32, Int32).new(0)\n  while n % 2 == 0\n    n = n \/\/ 2\n    hash[2] += 1\n  end\n  3.step(to: Math.sqrt(n).floor.to_i, by: 2).each do |i|\n    while n % i == 0\n      n = n \/\/ i\n      hash[i] += 1\n    end\n  end\n  hash[n] += 1 if n > 2\n  hash.join do |k, v|\n    \"(#{k}#{\"**#{v}\" if v > 1})\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45610,"user_id":53,"body":"def prime_factors(n)\n  fs = Array(String).new\n  i = 2\n  while i <= n\n    cnt = 0\n    while n % i == 0\n      cnt += 1\n      n \/= i\n    end\n    if cnt == 1\n      fs << \"(#{i})\"\n    elsif cnt > 1\n      fs << \"(#{i}**#{cnt})\"\n    end\n    i += 1\n  end\n  fs.join(\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45611,"user_id":null,"body":"def prime_factors(n)\n  wheel = [1, 2, 2, 4, 2, 4, 2, 4, 6, 2, 6]\n  spoke = 0\n  factor = 2\n  limit = Math.sqrt(n).to_i\n  found = [] of Int32\n  while (factor <= limit)\n    dividend, remainder = n.divmod(factor)\n    if remainder == 0\n      found << factor\n      n = dividend\n      puts n\n    else\n      factor += wheel[spoke]\n      spoke = ((spoke == 10) ? 3 : (spoke + 1))\n    end\n  end\n  found << n if n > 1\n  String.build do |s|\n    found.tally.each do |d|\n      s << \"(#{d[0]}**#{d[1]})\"\n    end\n  end.gsub(\"**1\", \"\") \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"54d7660d2daf68c619000d95":[{"id":45612,"user_id":492,"body":"def gcd(a, b)\n    b == 0 ? a : gcd(b, a.modulo(b))\nend\ndef lcm(a, b)\n    (a * b) \/ gcd(a, b)\nend\ndef convert_frac(lst)\n    lc = lst.map{|a| a[1]}.reduce(1){ |m, e| lcm(m, e) }\n    lst.map{ |a| [a[0] * lc \/ a[1], lc] }\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45613,"user_id":421,"body":"def convert_frac(lst)\n  denominator = lst.reduce(1){|x, y| x.lcm(y[1])}\n  lst.map{|(x, y)| [denominator \/ y * x, denominator]}\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45614,"user_id":null,"body":"alias AA32 = Array(Array(Int32))\n  \ndef convert_frac(ary : AA32) : AA32\n  lcm = ary.reduce(1) { |acc, i| acc = i[1].lcm(acc) }\n  ary.map { |i| [lcm \/\/ i[1] * i[0], lcm] }\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45615,"user_id":null,"body":"def convert_frac(lst)\n  lcm = lst.map(&.[](-1)).reduce { |acc, curr| acc.lcm(curr) }\n  lst.map { |(n, d)| [n * (lcm \/ d), lcm] }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45616,"user_id":null,"body":"def convert_frac(lst)\n  denom = lst.map{ |pair| pair[1] }.reduce{ |acc, x| acc.lcm(x) }\n  lst.map{ |pair| [pair[0]*(denom\/\/pair[1]), denom] } \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45617,"user_id":null,"body":"def convert_frac(lst)\n    lcm = lst.reduce(1){|acc, v| acc=acc.lcm(v[1])}\n    lst.map{|v| [v[0]*lcm\/\/v[1], lcm]}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45618,"user_id":53,"body":"def gcd (a : Int32, b : Int32) \n    while (b != 0)\n        a, b = b, a % b\n    end\n    a\nend\n\ndef lcm(a : Int32, b : Int32)\n    (a * b) \/\/ gcd(a, b)\nend\n\ndef reduce(a : Int32, b : Int32)\n    i = gcd(a, b)\n    [a \/\/ i, b \/\/ i]\nend\n\ndef convert_frac(lst)\n    xss = lst.map { |xs| reduce(xs[0], xs[1]) }\n    cd = 1\n    xss.each { |xs| cd = lcm(xs[1], cd) }\n    yss = xss.map { |xs| [xs[0] * cd \/\/ xs[1], cd] }\n    yss\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45619,"user_id":492,"body":"def gcd(a, b)\n  a % b == 0 ? b : gcd(b, a % b)\nend\ndef lcm(a, b)\n  a * b \/\/ gcd(a, b)\nend\ndef convert_frac(lst)\n  a = lst.map{|x| x[1]}\n  if a.size > 0\n    d = a.reduce{|x,y| lcm(x,y)}\n    lst = lst.map{|i| [i[0]*(d\/i[1]).to_i, d]}\n    return lst\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45620,"user_id":209,"body":"def gcd(a, b)\n  a % b == 0 ? b : gcd(b, a % b)\nend\ndef lcm(a, b)\n  a * b \/ gcd(a, b)\nend\ndef convert_frac(lst)\n  a = lst.map{|x| x[1]}\n  if a.size > 0\n    d = a.reduce{|x,y| lcm(x,y)}\n    lst = lst.map{|i| [i[0]*(d\/i[1]).to_i, d]}\n    return lst\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45621,"user_id":null,"body":"def convert_frac(lst)\n    if lst\n        d = lst.reduce { |acc, n| [ acc[0], acc[1].lcm(n[1]) ] }[1]\n        r=[]of Array(Int32)\n        lst.each { |t| r << [ t[0] * d \/ t[1], d ] }\n    end\n    return(r)\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"54da539698b8a2ad76000228":[{"id":45622,"user_id":527,"body":"def is_valid_walk(walk)\n  walk.size == 10 && walk.count(\"n\") == walk.count(\"s\") && walk.count(\"e\") == walk.count(\"w\")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45623,"user_id":421,"body":"def is_valid_walk(walk)\n  dic = {\"n\"=> 1, \"s\"=> -1}\n  dic2 = {\"e\"=> 2, \"w\"=> -2}\n  walk.size == 10 && walk.map{|x| dic.fetch(x, 0)}.sum.zero? && walk.map{|x| dic2.fetch(x, 0)}.sum.zero?\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45624,"user_id":null,"body":"def is_valid_walk(walk)\n  a = {\"n\"=>1, \"s\"=>-1, \"w\"=>2, \"e\"=>-2}\n  walk.size == 10 && walk.map{|d|a[d]}.sum == 0\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45625,"user_id":null,"body":"def is_valid_walk(walk)  \n  return false unless walk.size == 10\n  \n  dx = 0\n  dy = 0\n  \n  walk.each do |i|\n    case i\n      when \"n\"\n        dy += 1\n      when \"s\"\n        dy -= 1\n      when \"e\"\n        dx += 1\n      when \"w\"\n        dx -= 1\n      end\n  end\n  \n  dx == 0 && dy == 0\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45626,"user_id":null,"body":"def is_valid_walk(walk : Array(Char)) : Bool \n  walk.count(\"n\") == walk.count(\"s\") && \n  walk.count(\"e\") == walk.count(\"w\") && \n  walk.size == 10\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45627,"user_id":null,"body":"def is_valid_walk(walk)\n  \n  if walk.size != 10\n    return false\n  end\n\n  position = {0, 0}\n  \n  dirMap = {\n    \"n\" => {1, 0},\n    \"s\" => {-1, 0},\n    \"w\" => {0, -1},\n    \"e\" => {0, 1},\n    \n  }\n  walk.each do |c|\n    position = {\n      position[0]+dirMap[c][0], position[1]+dirMap[c][1] }\n  end\n\n  if position == {0, 0}\n    return true\n  end\n\n  return false\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45628,"user_id":null,"body":"def is_valid_walk(walk)\n  walk.count(\"n\") == walk.count(\"s\") && walk.count(\"e\") == walk.count(\"w\") && walk.size == 10\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45629,"user_id":50,"body":"D={\"n\"=>1, \"s\"=>-1, \"e\"=>2, \"w\"=>-2}\ndef is_valid_walk(walk)\n   walk.size==10 && walk.map{|c| D[c]}.sum==0\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45630,"user_id":53,"body":"def is_valid_walk(walk)\n  return false if walk.size != 10\n  n = walk.count{|n|n == \"n\"}\n  s = walk.count{|n|n == \"s\"}\n  e = walk.count{|n|n == \"e\"}\n  w = walk.count{|n|n == \"w\"}\n  n == s && e == w\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45631,"user_id":null,"body":"D = { \"n\" => 7, \"s\" => -7, \"w\" => 2, \"e\" => -2 }\ndef is_valid_walk(walk)\n  walk.reduce(0){|acc, v| acc+D[v]}.zero? && walk.size == 10\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"54da5a58ea159efa38000836":[{"id":45632,"user_id":null,"body":"def find_it(seq)\n  seq\n  .each\n  .skip_while {|i| seq.count(i).even?}\n  .first\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45633,"user_id":53,"body":"def find_it(seq)\n  seq.reduce(0) {|a, b| a ^ b}\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45634,"user_id":null,"body":"def find_it(seq)\n  seq.uniq.each { |x| return x if seq.count(x).odd? }\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45635,"user_id":null,"body":"def find_it (seq)\n  hash = {} of Int32 => Int32\n\n  seq.each() do |key|\n    hash[key] = hash.fetch(key, 0) + 1\n  end\n\n  hash.each() do |key, value|\n    if value % 2 != 0\n      return key\n    end\n  end\n\n  return nil\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45636,"user_id":527,"body":"def find_it(seq)\n  seq.reduce{ |x, y| x ^ y }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45637,"user_id":null,"body":"def find_it(arr)\n  counts = arr.tally\n  first_odd = counts.find { |k, v| v.odd? }\n  first_odd.nil? ? nil : first_odd[0]\nend\n\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45638,"user_id":null,"body":"def find_it(seq)\n  seq.tally.map {|k,v| k if v.odd?}.compact.first\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45639,"user_id":50,"body":"def find_it(seq)\n  o=seq[0]\n  seq[1..-1].each do |n|\n    o^=n\n  end\n  o\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45640,"user_id":null,"body":"def find_it(seq)\n  seq.reduce({} of Int32 => Bool?) do |memo, i|\n    if memo.has_key? i\n      memo.delete i\n    else\n      memo[i] = true\n    end\n    \n    memo\n  end.keys.first\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45641,"user_id":null,"body":"def find_it(seq)\n  seq.reduce {|acc, curr| acc ^ curr}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"54db15b003e88a6a480000b9":[{"id":45642,"user_id":53,"body":"def gcd(a, b)\n  return a if b == 0\n  gcd(b, a % b)\nend\n\ndef fromnb2Str(n, sys)\n  a = sys.reduce(1){ |acc, e| acc * e }\n  b = sys.reduce(1){ |acc, e| ((acc * e) \/ gcd(acc, e)).to_i }\n  return \"Not applicable\" if a <= n || b != a\n  sys.map{| e | \"-#{n % e}-\"}.join(\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45643,"user_id":492,"body":"def coprime(a, b)\n    if (b == 0) \n      return a == 1\n    else \n      return coprime(b, a.modulo(b)) \n    end\nend\n\ndef fromnb2Str(n, sys)\n    p = sys.reduce(1){ |m, e| m * e }\n    if (p <= n) \n      return \"Not applicable\" \n    end\n    i = 0\n    while (i < sys.size)\n      j = i + 1\n      while (j < sys.size)\n        if (!coprime(sys[i], sys[j])) \n          return \"Not applicable\" \n        end\n        j += 1\n      end\n      i += 1\n    end\n    res = \"\"; i = 0\n    while (i < sys.size)\n      res = res + \"-\" + n.modulo(sys[i]).to_s + \"-\"\n      i += 1\n    end\n    res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45644,"user_id":492,"body":"def coprime(a, b)\n    if (b == 0) \n      return a == 1\n    else \n      return coprime(b, a.modulo(b)) \n    end\nend\n\ndef fromnb2Str(n, sys)\n    p = sys.reduce(1){ |m, e| m * e }\n    if (p <= n) \n      return \"Not applicable\" \n    end\n    i = 0\n    while (i < sys.size)\n      j = i + 1\n      while (j < sys.size)\n        if (!coprime(sys[i], sys[j])) \n          return \"Not applicable\" \n        end\n        j += 1\n      end\n      i += 1\n    end\n    res = \"\"; i = 0\n    while (i < sys.size)\n      res = res + \"-\" + n.modulo(sys[i]).to_s + \"-\"\n      i += 1\n    end\n    res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45645,"user_id":1474,"body":"def fromnb2Str(n, sys)\n  return \"Not applicable\" if sys.reduce(1) { |p, i| p * i } < n || sys.combinations(2).any? { |(a, b)| a.gcd(b) != 1 }\n  ret = sys.map { |i| n % i }\n  \"-#{ret.join(\"--\")}-\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45646,"user_id":421,"body":"def fromnb2Str(n, sys)\n  if sys.product <= n || sys.combinations(2).any?{|(x, y)| x.gcd(y) != 1}\n    return \"Not applicable\"\n  end\n  \"-#{sys.map{|x| n % x}.join(\"--\")}-\"  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"54dc6f5a224c26032800005c":[{"id":45647,"user_id":null,"body":"def stock_list(listOfArt, listOfCat)\n    return \"\" if listOfArt.empty? || listOfCat.empty?\n    listOfCat.map {|cat|\n      cat = cat[0]\n      n = listOfArt.select {|art|\n        art[0] == cat\n      }.map {|art|\n        art.split[1].to_i\n      }.sum\n      \n      \"(#{cat} : #{n})\"\n    }.join(\" - \")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45648,"user_id":492,"body":"def stock_list(listOfArt, listOfCat)\n    if (listOfArt.size == 0) || (listOfCat.size == 0) \n      return \"\" \n    end\n    result = \"\"\n    listOfCat.each do |cat|\n        total = 0\n        listOfArt.each do |book|\n            if (book[0] == cat[0])\n              total += book.split(\" \")[1].to_i \n            end\n        end\n        if (result.size != 0) \n          result += \" - \" \n        end\n        result += \"(\" + cat.to_s + \" : \" + total.to_s + \")\"\n    end\n    result\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45649,"user_id":null,"body":"def stock_list(library, target) : String\n    return \"\" if target.empty? || library.empty?\n    hash = Hash(String, Int32).new\n    library.each do |i|\n      ary = i.split\n      key, value = ary[0][0].to_s, ary[1].to_i\n      hash[key] = hash.has_key?(key) ? hash[key] + value : value\n    end\n    s = \"\"\n    target.each do |c|\n      s += \"(#{c} : #{hash[c]? ? hash[c] : 0})\"\n      s += \" - \" if c != target.last\n    end\n    s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45650,"user_id":null,"body":"def stock_list(inventory, categories)\n  return \"\" if inventory.empty?\n  inventory = inventory.group_by(&.[0]).map {|category, items| \n    {category, items.map(&.split.last.to_i).sum}\n  }.to_h\n  categories.map {|category| \"(#{category} : #{inventory[category[0]]? || 0})\" }.join(\" - \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45651,"user_id":421,"body":"def stock_list(listOfArt, listOfCat)\n listOfArt.empty? || listOfCat.empty? ? \"\" : listOfCat.map{|x| \"(#{x} : #{listOfArt.select{|a| a[0].to_s == x}.sum{|y| y.split[1].to_i}})\"}.join(\" - \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45652,"user_id":null,"body":"def stock_list(listOfArt, listOfCat)\n  return \"\" if listOfArt.empty? || listOfCat.empty?\n  h = Hash(Char, Int32).new(0)\n  listOfArt.each { |v| h[v[0]] += v.split.last.to_i }\n  listOfCat.join(\" - \"){ |v| \"(#{v} : #{h[v[0]]})\" }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45653,"user_id":null,"body":"def stock_list(listOfArt, listOfCat)\n  return \"\" if listOfArt.empty? || listOfCat.empty?\n  hash = listOfArt.group_by(&.[0])\n  listOfCat.map { |c| \"(#{c} : #{hash.fetch(c[0],[\" 0\"]).sum(&.split(' ')[1].to_i)})\"}.join(\" - \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45654,"user_id":1474,"body":"def stock_list(listOfArt, listOfCat)\n  return \"\" if listOfArt.empty? || listOfCat.empty?\n  reg = \/\\A(#{listOfCat.join('|')})\\w+\\s(\\d+)\\z\/\n  acc = listOfCat.zip([0] * listOfCat.size).to_h\n  listOfArt.each_with_object(acc) do |s, h|\n    m = reg.match(s)\n    h[m[1]] += m[2].to_i if m\n  end\n  acc.map { |k, v| \"(#{k} : #{v})\" }.join(\" - \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45655,"user_id":1474,"body":"def stock_list(listOfArt, listOfCat)\n  p listOfArt\n  p listOfCat\n  puts\n  return \"\" if listOfArt.empty? || listOfCat.empty?\n  reg = \/\\A(#{listOfCat.join('|')})\\w+\\s(\\d+)\\z\/\n  acc = listOfCat.zip([0] * listOfCat.size).to_h\n  listOfArt.each_with_object(acc) do |s, h|\n    m = reg.match(s)\n    h[m[1]] += m[2].to_i if m\n  end\n  acc.map { |k, v| \"(#{k} : #{v})\" }.join(\" - \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45656,"user_id":null,"body":"def stock_list(books, categories)\n  return \"\" if categories.empty?\n  \n  stock = Hash(String, Int32).new(0)\n  \n  books.each do |book|\n    ctg, num = book.split\n    stock[ctg[0...1]] += num.to_i\n  end\n  \n  return \"\" if stock.values.sum == 0\n  \n  categories.map { |ctg| \"(#{ctg} : #{stock[ctg]})\" }.join(\" - \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"54de3257f565801d96001200":[{"id":45657,"user_id":492,"body":"def oneOrder(ord)\n    if (ord == \"\") \n        return [0, 0, \"\"] \n    end\n    arr = ord.split(' ')\n    qty, pricestr = arr[1], arr[2]\n    if (arr.size == 4) && (pricestr.match(\/^\\d*\\.\\d+$\/)) && (qty.match(\/^\\d*$\/))\n        price = pricestr.to_f\n        qty = arr[1].to_i\n    else\n        return [0, 0, ord.strip]\n    end\n    if (arr[3] == \"B\")\n        buy = qty * price\n        sell = 0\n    elsif (arr[3] == \"S\")\n        sell = qty * price\n        buy = 0\n    else\n        return [0, 0, ord.strip]\n    end\n    return [buy, sell, \"\"]\nend\n\ndef balanceStatements(str)\n    if (str == \"\") \n        return \"Buy: 0 Sell: 0\" \n    end\n    a = str.split(',').map { |x| oneOrder(x) }\n    i = 0\n    ill = \"\"\n    illcnt = 0\n    buy = 0\n    sell = 0\n    while (i < a.size)\n        r = a[i]\n        if (r[2] != \"\")\n            ill += r[2].to_s + \" ;\"\n            illcnt += 1\n        else\n            buy += r[0].to_f\n            sell += r[1].to_f\n        end\n        i += 1\n    end\n    res = \"Buy: \" + buy.round.to_i.to_s + \" Sell: \" + sell.round.to_i.to_s\n    if (illcnt != 0)\n        res += \"; Badly formed \" + illcnt.to_s + \": \" + ill\n    end\n    res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"54e320dcebe1e583250008fd":[{"id":45658,"user_id":492,"body":"def fact(n)\n    return 1 if n == 0\n    n.downto(1).reduce(1){ |m, e| m * e }\nend\n\ndef dec_2_fact_string(nb)\n    q, res, rad = nb \/ 1, \"0\", 2\n    while (q != 0)\n        q, r = nb.divmod(rad)\n        if (r <= 9) \n        \tres += (r + 48).chr \n      \telse \n      \t\tres += (r + 55).chr \n    \tend\n        nb = q\n        rad += 1\n    end\n    res.reverse\nend\n\ndef fact_string_2_dec(str)\n    arr = str.chars\n    greatestFac = arr.size - 1\n    res = 0\n    arr.each do |d|\n    \tif (d.ord <= 57)\n            res += (d.ord - 48) * fact(greatestFac)\n        else \n    \t\tres += (d.ord - 55) * fact(greatestFac) \n  \t\tend\n        greatestFac -= 1\n    end\n    res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45659,"user_id":492,"body":"def fact(n)\n    return 1 if n == 0\n    n.downto(1).reduce(1){ |m, e| m * e }\nend\n\ndef dec_2_fact_string(nb)\n    q, res, rad = nb \/ 1, \"0\", 2\n    while (q != 0)\n        q, r = nb.divmod(rad)\n        if (r <= 9) \n        \tres += (r + 48).chr \n      \telse \n      \t\tres += (r + 55).chr \n    \tend\n        nb = q\n        rad += 1\n    end\n    res.reverse\nend\n\ndef fact_string_2_dec(str)\n    arr = str.chars\n    greatestFac = arr.size - 1\n    res = 0\n    arr.each do |d|\n    \tif (d.ord <= 57)\n            res += (d.ord - 48) * fact(greatestFac)\n        else \n    \t\tres += (d.ord - 55) * fact(greatestFac) \n  \t\tend\n        greatestFac -= 1\n    end\n    res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45660,"user_id":null,"body":"Factorials = (1..12).each_with_object([1]) { |i, a| a << a.last * i }\n\ndef dec_2_fact_string(nb)\n  12.to(0).map do |i|\n    digit, nb = nb.divmod Factorials[i]\n    digit.to_s(36).upcase\n  end.join.lstrip('0')\nend\n\ndef fact_string_2_dec(str)\n  str.chars.reverse.each_with_index.sum { |(char, i)| char.to_i(36) * Factorials[i] }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45661,"user_id":null,"body":"Digit = %w{ 0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z }\n\ndef dec_2_fact_string(nb)\n    p [:d2f, nb]\n    f, k = 1_u64, 0\n    while f * k < nb\n      k += 1\n      f *= k\n    end\n    \n    res = \"\"\n    while k > 0\n      res += Digit[nb \/ f]\n      nb %= f\n      f \/= k\n      k -= 1\n    end\n    res + \"0\"\nend\n\ndef fact_string_2_dec(str)\n  p [:f2d, str]\n  res, k, f = 0, 0, 1_u64\n  str.chars.reverse.each do | c |\n    res += (Digit.index(c.to_s) || 0) * f\n    k += 1\n    f *= k\n  end\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"54e6533c92449cc251001667":[{"id":45662,"user_id":null,"body":"def unique_in_order(element : String)\n  unique_in_order element.split(\"\").reject(&.empty?)\nend\n\ndef unique_in_order(element : Array)\n  res = element.class.new\n  last = nil\n  element.each do |c|\n    res << c if c != last\n    last = c\n  end\n  res\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45663,"user_id":null,"body":"def unique_in_order(vals)\n  if vals.is_a? String\n    vals.chars.chunk(&.itself).map(&.first.to_s).to_a\n  else\n    vals.chunk(&.itself).map(&.first).to_a\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45664,"user_id":null,"body":"def unique_in_order(element, prev = nil)\n    return unique_in_order(element.chars.map(&.to_s)) if element.is_a?(String)\n    element.reject do |e|\n      prev == e\n    ensure\n      prev = e\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45665,"user_id":53,"body":"def unique_in_order(a, fix = false)\n  return unique_in_order(a.chars, true) if a.is_a?(String)\n  return [] of Int32 if a.size == 0\n  xs = Array(typeof(a[0])).new\n  prev = nil\n  a.each{|e|\n    xs << e if prev != e\n    prev = e\n  }\n  xs.map{|e| fix && e.is_a?(Char) ? e.to_s : e}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45666,"user_id":null,"body":"def unique_in_order(element : Enumerable)\n  element.chunks(&.itself).map(&.first)\nend\n\ndef unique_in_order(element : String)\n  element.squeeze.split(\"\", remove_empty: true)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45667,"user_id":null,"body":"def unique_in_order(element : Enumerable)\n  element.chunks(&.itself).map(&.first)\nend\n\ndef unique_in_order(element : String)\n  element.squeeze.chars.map(&.to_s)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45668,"user_id":null,"body":"def u(l : Array(T)) forall T\n  r = [] of T\n  l.each { |e| r << e unless r[-1]? == e }; r\nend\n\ndef unique_in_order(x)\n  return u(x.chars.map(&.to_s)) if x.is_a?(String)\n  u(x)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45669,"user_id":null,"body":"def unique_in_order(element)\n  if element.is_a? String\n    if element.empty?\n      return [] of String\n    end\n    element = element.split \"\"\n  else\n    return element if element.empty?\n  end\n  r = [element[0]]\n  element[1..].each do |v|\n    if v != r.last\n      r << v\n    end\n  end\n  r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45670,"user_id":null,"body":"def unique_in_order(element)\n  el = element.is_a?(String) ? element.chars.map(&.to_s) : element\n  return el if el.empty?\n  res = [el[0]]\n  el[1..-1].each { |x| res << x if x != res.last }\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45671,"user_id":null,"body":"def unique_in_order(element)\n  memory = \"\"\n  elements = element.is_a?(Array) ? element : element.split(\"\")\n  \n  elements.map do |char|\n    result = memory == char ? nil : char\n    memory = char\n    \n    result\n  end.compact\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"54edbc7200b811e956000556":[{"id":45672,"user_id":1986,"body":"def count_sheeps(array)\n  array.count(true)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45673,"user_id":null,"body":"def count_sheeps(array : Array(Bool | Nil))\n  array.compact!.count(true)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45674,"user_id":null,"body":"def count_sheeps(array : Array(Bool?))\n  array.count(true)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45675,"user_id":76,"body":"def count_sheeps(array)\n  array.sum { |n| n ? 1 : 0 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45676,"user_id":null,"body":"def count_sheeps(array)\n  array.count do |sh| sh end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45677,"user_id":null,"body":"def count_sheeps(array)\n  array.count { |sheep| !sheep.nil? && sheep }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45678,"user_id":53,"body":"def count_sheeps(array)\n  array.select { |b| b }.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45679,"user_id":null,"body":"def count_sheeps(array)\n  return array.count(true)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45680,"user_id":null,"body":"def count_sheeps(array)\n  i = count = 0\n  while i < array.size\n    if array[i] == true\n      count +=1\n    end\n    i +=1\n  end\n  count\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45681,"user_id":527,"body":"def count_sheeps(sheep_present : Array(Bool?)) : Int32\n  sheep_present.count(true)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"54f8693ea58bce689100065f":[{"id":45682,"user_id":53,"body":"require \"big\"\n\ndef decompose(s)\n  ans = [] of String\n  is_fract = s.includes?('\/')\n  x = 0.to_f64\n  y = 1.to_f64\n  if is_fract\n    xs = s.split(\"\/\") \n    x = xs[0].to_f64\n    y = xs[1].to_f64\n  else\n    x = s.to_f64\n  end\n  while x.divmod(1)[1] > 0.0\n    x *= 10\n    y *= 10\n  end\n  a = x.to_big_i\n  b = y.to_big_i\n  if a > b\n    n = a.tdiv(b)\n    a = a.divmod(b)[1]\n    ans << n.to_s\n  end\n  while a > 0\n    d = (BigFloat.new(b) \/ BigFloat.new(a)).ceil().to_big_i\n    ans << \"1\/#{d}\"\n    a = a * d - b\n    b *= d\n  end\n  return ans\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45683,"user_id":492,"body":"def decomp_frac(s)\n  res = [] of String\n  arr = s.split(\"\/\").map { |x| x.to_i }\n  if (arr[0] == 0)\n    return [] of String\n  end\n  a = arr[0]; b = arr[1]\n  if (a > b)\n    res << (a \/ b).to_s\n    a %= b\n  end\n  while(a > 0)\n    dv = (b.to_f \/ a).ceil.to_i\n    res << \"1\/\" + dv.to_s\n    a = a * dv - b; b = b * dv\n  end\n  res\nend\ndef decomp_dec(s)\n  a = s.to_f; b = 1\n  while (a % 1 != 0)\n    a *= 10.0; b *= 10.0\n  end\n  decomp_frac(a.to_i.to_s + \"\/\" + b.to_i.to_s)\nend\ndef decompose(s)\n  if s.includes?(\"\/\")\n    decomp_frac(s)\n  elsif s.includes?(\".\")\n    decomp_dec(s)\n  else\n    if (s == \"0\")\n      [] of String\n    else\n      [s.to_i.to_s]\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45684,"user_id":492,"body":"def decomp_frac(s)\n  res = [] of String\n  arr = s.split(\"\/\").map { |x| x.to_i }\n  if (arr[0] == 0)\n    return [] of String\n  end\n  a = arr[0]; b = arr[1]\n  if (a > b)\n    res << (a \/ b).to_s\n    a %= b\n  end\n  while(a > 0)\n    dv = (b.to_f \/ a).ceil.to_i\n    res << \"1\/\" + dv.to_s\n    a = a * dv - b; b = b * dv\n  end\n  res\nend\ndef decomp_dec(s)\n  a = s.to_f; b = 1\n  while (a % 1 != 0)\n    a *= 10.0; b *= 10.0\n  end\n  decomp_frac(a.to_i.to_s + \"\/\" + b.to_i.to_s)\nend\ndef decompose(s)\n  if s.includes?(\"\/\")\n    decomp_frac(s)\n  elsif s.includes?(\".\")\n    decomp_dec(s)\n  else\n    if (s == \"0\")\n      [] of String\n    else\n      [s.to_i.to_s]\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45685,"user_id":null,"body":"require \"big\"\n\ndef decompose(s)\n  decomposition = [] of String\n  rational = if s.index('.')\n               i, d = s.split('.')\n               decomposition << i unless i == \"0\"\n               BigRational.new(d.to_i, \"1#{d.gsub { '0' }}\".to_i)\n             elsif s.index('\/')\n               n, d = s.split('\/').map(&.to_i)\n               if (i = n \/ d) > 0\n                 n -= d * i\n                 decomposition << i.to_s\n               end\n               BigRational.new(n, d)\n             else\n               BigRational.new(s.to_i, 1)\n             end\n\n  (2..Int32::MAX).each do |d|\n    break if rational == 0\n    if rational.numerator == 1\n      decomposition << rational.to_s\n      break\n    end\n    if (r = BigRational.new(1, d)) <= rational\n      decomposition << r.to_s\n      rational -= r\n    end\n  end\n  decomposition\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45686,"user_id":null,"body":"def decompose(s)\n    if md = s.match(\/(\\d+)\\.(\\d+)\/)\n        s = \"#{(md[1].to_i*(10**md[2].size))+md[2].to_i}\/#{10**md[2].size}\"\n    end\n    frac = s.split('\/').map(&.to_i)\n    results = [] of String\n    return results if frac.size != 2\n    int_part = (frac[0].to_f\/frac[1].to_f).floor.to_i\n    if !int_part.zero?\n      frac[0]-=int_part*frac[1]\n      results.push(int_part.to_s)\n    end\n    while frac[0] != 0\n        x = (frac[1].to_f\/frac[0].to_f).ceil.to_i\n        results.push(\"1\/#{x}\")\n        frac[0] = (x * frac[0] - frac[1])\n        frac[1] = (frac[1] * x)\n    end\n    return results\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45687,"user_id":null,"body":"def fsub(n, d, i)\n  l = d.lcm(i)\n  n *= l \/ d\n  n -= l \/ i\n  g = n.gcd(l)\n  [n \/ g, l \/ g]\nend\n\ndef decompose(s)\n  r = Array(String).new\n  if s.includes? \".\"\n    w, p = s.split(\".\")\n    if w != \"0\"\n      r << w\n    end\n    return r if p == \"0\"\n    n, d = [0, 1]\n    p.chars.each do |c|\n      n = n*10 + c.to_i\n      d *= 10\n    end\n  elsif s.includes? \"\/\"\n    n, d = s.split(\"\/\").map {|i| i.to_i}\n  else\n    if s != \"0\"\n      r << s\n    end\n    return r\n  end\n  if n >= d\n    r << (n \/ d).to_s\n    n = n%d\n  end\n  i = 2\n  while !n.zero?\n    if n*i >= d\n      r << \"1\/#{i}\"\n      n, d = fsub(n, d, i)\n    end\n    i += 1\n  end\n  r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"54ff3102c1bad923760001f3":[{"id":45688,"user_id":492,"body":"def get_count(inputStr)\n  inputStr.count(\"aeiou\")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45689,"user_id":2055,"body":"def get_count(str)\n  str.count(\"aeiou\")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45690,"user_id":null,"body":"def get_count(str)\n  count = 0\n  str.each_char { |c| count += ['a', 'e', 'i', 'o', 'u'].includes?(c) ? 1 : 0 }\n  count\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45691,"user_id":564,"body":"def get_count(str)\n  str.each_char.select{|c| \"aeiou\".includes? c}.size\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45692,"user_id":null,"body":"def get_count(str)\n  str.gsub(\/[^aeiou]\/, \"\").size\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45693,"user_id":null,"body":"def get_count(str)\n  amount = 0\n  arraystring = str.chars\n  arraystring.each do |letter|\n    if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u'\n      amount += 1\n    end\n  end\n  amount\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45694,"user_id":null,"body":"def get_count(str)\n  str.scan(\/[aeiou]\/).size\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45695,"user_id":168,"body":"def get_count(str)\n  str.count { |c| \"aeiou\".includes? c }\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45696,"user_id":null,"body":"def get_count(str)\n   str.chars.select {|c| \"aeiou\".includes? c.downcase}.size\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45697,"user_id":null,"body":"def get_count(str)\n\n  count = 0\n\n  str.split(\"\").each {|el| count += 1 if el.matches?(\/[aeuio]\/)}\n\n  count\n\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55031bba8cba40ada90011c4":[{"id":45698,"user_id":421,"body":"def is_sum_of_cubes(s)\n  lst = s.scan(\/\\d{1,3}\/).map(&.[0]).select{|x| x.to_i == x.chars.sum{|a| a.to_i ** 3}}\n  lst.size.zero? ? \"Unlucky\" : \"#{lst.join(\" \").gsub(\/00\/, \"\")} #{lst.sum{|x| x.to_i}} Lucky\"  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45699,"user_id":492,"body":"def is_cubic(nb)\n    nb == nb.to_s.chars.reduce(0) { |sum, d| sum + d.to_i ** 3 }\nend \ndef is_sum_of_cubes(s)\n    a = s.scan(\/\\d{1,3}\/).map{ |md| md[0].to_i }.select { |x| is_cubic(x) }\n    if (a != [] of Int32)\n    \tsum = a.reduce(0) { |sum, d| sum + d.to_i }\n        a << sum\n        a.join(\" \") + \" Lucky\"\n    else\n        \"Unlucky\"\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45700,"user_id":492,"body":"def is_cubic(nb)\n    nb == nb.to_s.chars.reduce(0) { |sum, d| sum + d.to_i ** 3 }\nend \ndef is_sum_of_cubes(s)\n    a = s.scan(\/\\d{1,3}\/).map{ |md| md[0].to_i }.select { |x| is_cubic(x) }\n    if (a != [] of Int32)\n    \tsum = a.reduce(0) { |sum, d| sum + d.to_i }\n        a << sum\n        a.join(\" \") + \" Lucky\"\n    else\n        \"Unlucky\"\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45701,"user_id":null,"body":"def is_sum_of_cubes(s)\n  arr = s.each_char.chunk { |c| ('0' <= c <= '9') || Enumerable::Chunk::Drop }.flat_map do |(_, sequence)|\n    sequence.each_slice(3, true).map(&.map(&.-('0'))).reduce([] of Int32) do |acc, n|\n      num = n.reduce(0) { |n, d| n * 10 + d }\n      next acc unless num == n.map(&.**(3)).sum\n      acc << num\n    end\n  end.to_a\n  arr.empty? ? \"Unlucky\" : \"#{(arr << arr.sum).join(' ')} Lucky\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45702,"user_id":null,"body":"def cubic?(n)\n  c = 0\n  x = n\n  while x > 0\n    c += (x%10) ** 3\n    x = x\/\/10\n  end\n  n == c\nend\n\ndef is_sum_of_cubes(s)\n  nums = [] of Int32\n  i = 0\n  while i < s.size\n    if s[i].number?\n      n = s[i].to_i\n      j = 1\n      while (i+j) < s.size && j < 3\n        if !s[i+j].number?\n          break\n        end\n        n = n*10 + s[i+j].to_i\n        j += 1\n      end\n      i += j - 1\n      if cubic?(n)\n        nums << n\n      end\n    end\n    i += 1\n  end\n  return \"Unlucky\" if nums.empty?\n  (nums.join \" \") + \" #{nums.sum} Lucky\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45703,"user_id":1624,"body":"def is_sum_of_cubes(s)\n  nums = s.scan(\/\\d{1,3}\/).map(&.[0])\n  cubes = nums.select{|x| x.chars.map(&.to_i).map(&.**(3)).sum == x.to_i}.map(&.to_i)\n  if cubes.empty?\n    \"Unlucky\"\n  else\n    (cubes + [cubes.sum, \"Lucky\"]).join(\" \")\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45704,"user_id":null,"body":"def is_sum_of_cubes(s)\n  cubics = s.scan(\/\\d{1,3}\/).map{|v| v[0].to_i}.select{|x| [0, 1, 153, 370, 371, 407].includes?(x)}\n  if cubics.size == 0 \"Unlucky\" else \"#{cubics.join(' ')} #{cubics.sum} Lucky\" end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45705,"user_id":null,"body":"def is_sum_of_cubes(s)\n  all_nums = [] of String\n  lucky_nums = [] of String\n\n  s.scan(\/(\\d+)\/).each do |n|\n    if n[0].size > 3\n      n[0].split(\"\").each_slice(3) do |x|\n        all_nums << x.join\n      end\n    else\n      all_nums << n[0]\n    end\n  end\n\n  all_nums.each do |x|\n    if x.to_i == x.split(\"\").map { |y| y.to_i ** 3 }.sum\n      lucky_nums << x\n    end\n  end\n\n  if lucky_nums.empty?\n    \"Unlucky\"\n  else\n    \"#{lucky_nums.map { |x| x.to_i }.join(\" \")} #{lucky_nums.sum { |x| x.to_i }} Lucky\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"550498447451fbbd7600041c":[{"id":45706,"user_id":492,"body":"def comp_same(a1 : Array(Int32), a2 : Array(Int32))\n  a1.map{ |x| x*x }.sort == a2.sort\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45707,"user_id":986,"body":"def comp_same(a1 : Array(Int32), a2 : Array(Int32))\n  a1.sort.map(&.abs2) == a2.sort\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45708,"user_id":null,"body":"def comp_same(a : Array(Int32), b : Array(Int32))\n  b = b.sort\n  a.sort.each_with_index { |n, i|\n      return false if n*n != b[i]\n  }\n  true\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45709,"user_id":492,"body":"def comp_same(a1 : Array(Int32), a2 : Array(Int32))\n  a1.map{ |x| x*x }.sort == a2.sort\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45710,"user_id":null,"body":"def comp_same(a1 : Array(Int32), a2 : Array(Int32))\n  a1.map{ |x| x*x }.tally == a2.tally\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45711,"user_id":null,"body":"def comp_same(a1 : Array(Int32), a2 : Array(Int32))\n  return false if a1.nil? || a2.nil?\n  a1.sort == a2.map { |x| Math.sqrt(x) }.sort\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45712,"user_id":null,"body":"def comp_same(a1 : Array(Int32), a2 : Array(Int32))\n  a1.map { |i| i * i }.sort == a2.sort\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45713,"user_id":null,"body":"def comp_same(a1 : Array(Int32), a2 : Array(Int32))\n  return nil if a1.nil? || a2.nil?\n  a1.sort == a2.map(&.**(1\/2)).sort\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45714,"user_id":null,"body":"def comp_same(a1 : Array(Int32), a2 : Array(Int32))\n  compare = true\n  a1.each do |element|\n    if index = a2.index(element*element)\n      a2.delete_at(index)\n    else\n      return false\n    end      \n  end\n  a2.size == 0\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45715,"user_id":null,"body":"def comp_same(a1 : Array(Int32), a2 : Array(Int32))\n  if a1 == nil || a2 == nil\n    return false\n  end\n\n  return a1.sort == a2.map { |num| Math.sqrt(num) }.sort\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"550527b108b86f700000073f":[{"id":45716,"user_id":421,"body":"def iter_pi(epsilon)\n  constant = Math::PI\n  i = 1\n  n = 1\n  while (n * 4 - constant).abs > epsilon\n    i += 2\n    n += 1.0 \/ i * (i % 4 == 3 ? -1 : 1)\n  end\n  [(i + 1) \/ 2, (n * 4 * 1e10).round.fdiv(1e10)]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45717,"user_id":17,"body":"def iter_pi(epsilon)\n  my_pi = i = 0\n  while (my_pi - Math::PI).abs > epsilon\n    my_pi += (i % 2 == 0 ? 4.0 : -4.0) \/ (2 * i + 1)\n    i += 1\n  end\n  [i, (1e10 * my_pi).round \/ 1e10]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45718,"user_id":492,"body":"def iter_pi(epsilon)\n  divisor = 1.0; sign = 1.0; count = 0; sum = 0.0\n  while (sum - Math::PI).abs > epsilon\n    sum += sign * 4.0 \/ divisor\n    divisor += 2.0; sign *= -1.0; count += 1\n  end\n  r = (sum * 1e10).round \/ 1e10\n  [ count, r ]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45719,"user_id":50,"body":"def iter_pi(epsilon)\n  i=1\n  n=1.0\n  until (Math::PI - n * 4).abs <= epsilon\n    n += (-1.0)**(i % 2)\/(2*i+1)\n    i+=1\n  end\n  [i,(n*4).round(10)]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45720,"user_id":null,"body":"def iter_pi(epsilon)\n  my_pi = 0.0\n  nb_loop = 0\n  while(((my_pi*4)-Math::PI).abs >= epsilon)\n    my_pi += ((nb_loop%2).zero? ? 1 : -1)\/((nb_loop)*2+1)\n    nb_loop+=1\n  end\n  return  [nb_loop, (my_pi*4).round(10)]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45721,"user_id":53,"body":"def iter_pi(epsilon)\n  pi4 = 1.0\n  sign = -1.0\n  iterations = 1\n  denom = 3.0\n  while (4 * pi4 - Math::PI).abs >= epsilon\n    pi4 += sign * (1.0 \/ denom)\n    sign *= -1\n    denom += 2\n    iterations += 1\n  end\n  [iterations, (4 * pi4).round(10)]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45722,"user_id":1474,"body":"def iter_pi(epsilon)\n  i, t = 0, 1\n  pi = t\n  while (Math::PI - pi * 4).abs > epsilon\n    i += 1\n    t += 2\n    pi += (i.even? ? 1.0 : -1.0) \/ t\n  end\n  [i+1, (pi * 4).round(10)]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45723,"user_id":null,"body":"require \"math\"\n\n# Int32 overflow with built-in crystal .round\ndef string_round(val, dg = 1)\n  sint, sdec = val.to_s.split(\".\")\n  sround = (sdec[dg - 1..dg].to_i \/ 10.0).round.to_i\n  \"#{sint}.#{sdec[0..dg-2]}#{sround}\".to_f64\nend\n\ndef iter_pi(epsilon)\n  val, n = 1.0, 1\n  \n  (3..Int32::MAX).step(2) do |i|\n    val += (1.0 \/ i) * ((i \/ 2 % 2).zero? ? 1 : -1)\n    n += 1\n    break if (Math::PI - val * 4.0).abs < epsilon\n  end\n  [n, string_round(val * 4.0, 10)]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"550554fd08b86f84fe000a58":[{"id":45724,"user_id":null,"body":"def inArray(array1, array2)\n    array1.select { |w|\n      array2.any? &.includes?(w)\n    }.sort\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45725,"user_id":53,"body":"def inArray(xs, ys)\n    xs.uniq.select{|x| ys.select{|y|y.includes?(x)}.size > 0}.sort\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45726,"user_id":682,"body":"def inArray(a,b)\n    a.select{|c| b.join(' ').includes?(c)}.sort\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45727,"user_id":492,"body":"def inArray(array1, array2)\n    array1.select{|s| array2.any?{|w| w.includes?(s) } }.uniq.sort\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45728,"user_id":null,"body":"def inArray(array1, array2)\n  array1.select do |element|\n    array2.any? { |elem| elem.includes?(element) }\n  end.sort\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45729,"user_id":null,"body":"def inArray(array1, array2)\n  array1.select { |s| array2.any?(&.includes?(s)) }.sort\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45730,"user_id":null,"body":"def inArray(array1, array2)\n    # your code\n  array1.uniq.select{ |s| array2.any? &.includes?(s)}.sort\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45731,"user_id":null,"body":"def inArray(array1, array2)\n    # your code\n  array1.select{ |el| array2.any?{|el2| el2.includes? el} }.uniq.sort\nend\n","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45732,"user_id":null,"body":"def inArray(array1 : Array(String), array2 : Array(String))\n  array1.select { |w| array2.any? { |w2| w2.includes?(w) } }.sort\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45733,"user_id":null,"body":"def has_substr(word, a2)\n  a2.map { |x| x.includes?(word) }.any?\nend\n\ndef inArray(a1, a2)\n    a1.sort.map do |x|\n      if has_substr(x, a2)\n        x\n      else\n        nil\n      end\n    end.reject { |x| x == nil }\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5506b230a11c0aeab3000c1f":[{"id":45734,"user_id":492,"body":"def evaporator(content, evap_per_day, threshold)\n  (Math.log(0.01 * threshold, 1 - 0.01 * evap_per_day)).ceil.to_i\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45735,"user_id":564,"body":"lib C\n  fun ceil(n: Float64): Float64\n  fun log(n: Float64): Float64\nend\n\ndef evaporator(ignored, evap_per_day, threshold)\n  target_pct = threshold \/ 100.0;\n  pct_loss = 1 - evap_per_day \/ 100.0;\n  C.ceil(C.log(target_pct) \/ C.log(pct_loss))\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45736,"user_id":null,"body":"def evaporator(content, evap_per_day, threshold)\n  Math.log(threshold \/ 100, 1 - evap_per_day \/ 100).round(Number::RoundingMode::TO_POSITIVE)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45737,"user_id":null,"body":"def evaporator(content, evap_per_day, threshold)\n  aux(content.to_f, evap_per_day.to_f \/ 100, threshold.to_f \/ 100, content, 0)\nend\n\nprivate def aux(content, evap_per_day, threshold, max_content, count)\n  if (content \/ max_content) > threshold\n    aux(content * (1 - evap_per_day), evap_per_day, threshold, max_content, count + 1)\n  else\n    count\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45738,"user_id":421,"body":"def evaporator(content, evap_per_day, threshold)\n  days = 0\n  min = content * threshold \/ 100\n  while content >= min\n    content -= evap_per_day \/ 100 * content\n    days += 1\n  end\n  days\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45739,"user_id":53,"body":"def evaporator(content, evap_per_day, threshold)\n  cnt = 0\n  t = content * threshold \/ 100\n  while content > t\n    content = content - ((evap_per_day \/ 100) * content)\n    cnt = cnt + 1\n  end\n  return cnt\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45740,"user_id":null,"body":"def evaporator(content, evap_per_day, threshold)\n  amount = 100\n  day = 0\n  while amount > threshold\n    amount *= 0.01*(100 - evap_per_day)\n    day += 1\n  end\n  day\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45741,"user_id":1474,"body":"def evaporator(content, evap_per_day, threshold)\n  cnt = content\n  thd = content * threshold \/ 100.0\n  n = 0\n  while cnt > thd\n    evp = cnt * evap_per_day \/ 100.0\n    n += 1\n    cnt -= evp\n  end\n  n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45742,"user_id":null,"body":"  def evaporator(content, evap_per_day, threshold)\n      tresh_ml = content * (threshold \/ 100)\n      current_ml = content\n      day = 0\n\n      while current_ml > tresh_ml\n        current_ml -= current_ml * (evap_per_day \/ 100)\n        day += 1\n      end\n\n      day\n  end\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45743,"user_id":408,"body":"def evaporator(content, evap_per_day, threshold)\n    days = 0\n    min = content * threshold \/ 100.0\n    while(min < content)\n        days = days + 1\n        content = content - content * evap_per_day \/ 100.0\n    end\n    return days\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5508249a98b3234f420000fb":[{"id":45744,"user_id":null,"body":"def moving_shift(s, shift)\n  r = s.chars.map_with_index{|c,i| c.letter? ? c.ord < 95 ? (65+(c.ord+i+shift-65)%26).chr : (97+(c.ord+i+shift-97)%26).chr : c }.each_slice((s.size\/5).ceil.to_i).to_a.map(&.join)\n  r.size == 5 ? r : r + [\"\"]\nend\n\ndef demoving_shift(arr, shift)\n  arr.join.chars.map_with_index{|c,i| c.letter? ? c.ord < 95 ? (65+(c.ord-i-shift+26-65)%26).chr : (97+(c.ord-i-shift+26-97)%26).chr : c }.join\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-28 15:36:15"},{"id":45745,"user_id":492,"body":"def moving_shiftAux(s, shift, sgn)\n    res = \"\"\n    v = s.scan(\/(\\w|\\W)\/).flatten.map{ |md| md[0].to_s }.each_with_index do |x, k|\n        sVal = (sgn * (shift + k)) % 26\n        x = x[0]\n        if (x.ord >= 'A'.ord  && x.ord <= 'Z'.ord) \n            c = (((x.ord - 'A'.ord + sVal) % 26) + 'A'.ord).chr\n        elsif (x.ord >= 'a'.ord  && x.ord <= 'z'.ord) \n            c = (((x.ord - 'a'.ord + sVal) % 26) + 'a'.ord).chr\n        else c = x end\n        res += c\n    end\n    res\nend\n\ndef moving_shift(s, shift)\n    v = moving_shiftAux(s, shift, 1)\n    p, r = v.size.divmod(5)\n    if (r != 0) \n        p += 1 \n    end\n    a = v.scan(\/.{1,#{p}}\/).map{ |md| md[0].to_s }\n    if (a.size == 4) \n        a << \"\" \n    else a end\nend\n\ndef demoving_shift(arr, shift)\n    s = arr.join\n    moving_shiftAux(s, shift, -1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-28 15:35:31"},{"id":45746,"user_id":863,"body":"struct Cipher\n  enum Direction\n    Left\n    Right\n  end\n  @shift : Int32\n  @code : Array(Char) = ('a'..'z').to_a\n  def initialize(s : Int32, @dir = Direction::Left)\n    @shift = s - 1\n  end\n  \n  def translate(c : Char)\n    @shift += 1\n    return c unless c.ascii_letter?\n    m = @code.rotate(@dir.left? ? @shift : -@shift)[c.downcase.ord - 97]\n    c.lowercase? ? m : m.upcase\n  end\nend\n\ndef moving_shift(s, shift)\n  c = Cipher.new(shift)\n  coded = s.each_char.join(&->c.translate(Char))\n  size = (s.size \/ 5.0).ceil.to_i\n  Array.new(5) {|i| coded[i*size...(i+1)*size] }\nend\n\ndef demoving_shift(arr, shift)\n  c = Cipher.new(shift, Cipher::Direction::Right)\n  arr.join.each_char.join(&->c.translate(Char))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45747,"user_id":null,"body":"def shifting(c, n)\n  alpha = c >= 'a' ? ('a'..'z') : ('A'..'Z')\n  alpha.to_a[(c.ord - alpha.first.ord + n) % alpha.size]\nend\n \ndef moving_shift(s, shift)\n  new_chars = s.chars.map_with_index { |c, i| c.letter? ? shifting(c, shift + i) : c }\n  elems = new_chars.each_slice((s.size \/ 5.0).ceil.to_i).map(&.join).to_a\n  Array.new(5) { |i| elems[i]? || \"\" }\nend\n\ndef demoving_shift(arr, shift)\n  arr.join(\"\").chars.map_with_index { |c, i| c.letter? ? shifting(c, -(shift + i)) : c }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45748,"user_id":null,"body":"def moving_shift(s, shift)\n  a = s.chars.each_with_index.map {|(c,i)| shift_by c, shift + i }.in_groups_of((s.size \/ 5.0).ceil.to_i).map(&.join).to_a\n  a.size < 5 ? a << \"\" : a\nend\n\ndef shift_by(char, shift : Int32)\n  return char unless char.letter?\n  offset = char >= 'a' ? 'a' : 'A'\n  offset + (char.ord + shift - offset.ord) % 26\nend\n\ndef demoving_shift(arr, shift)\n  i = -1\n  arr.map {|s| s.chars.map {|c| shift_by c, -(shift + (i += 1)) }.join }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45749,"user_id":null,"body":"def encode(c, s)\n  alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  uppercase = c.uppercase?\n  sus = alphabet.index(c.upcase).not_nil!\n  sus = (sus + s) % 26\n  sus = alphabet[sus]\n  uppercase ? sus : sus.downcase\nend\n\ndef decode(c, s)\n  alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  uppercase = c.uppercase?\n  sus = alphabet.index(c.upcase).not_nil!\n  sus = (sus - s) % 26\n  sus = alphabet[sus]\n  uppercase ? sus : sus.downcase\nend\n\ndef moving_shift(s, shift)\n  enc = \"\"\n  s.each_char do |c| \n    if c.letter?\n      enc += encode(c, shift)\n    else\n      enc += c\n    end\n    shift += 1\n  end\n  len = enc.size\n  part_size = (len \/ 5).ceil.to_i\n  res = Array(String).new(5) { \"\" }\n  idx = -1\n  enc.each_char_with_index do |c, i|\n    if i % part_size == 0\n      idx += 1\n    end\n    res[idx] += c\n  end\n  res\nend\n\ndef demoving_shift(arr, shift)\n  dec = \"\"  \n  arr.join.each_char do |c|\n    if c.letter?\n      dec += decode(c, shift)\n    else\n      dec += c\n    end\n    shift += 1\n  end\n  dec\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45750,"user_id":null,"body":"SALPH = \"abcdefghijklmnopqrstuvwxyz\".chars\nBALPH = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".chars\n\ndef moving_shift(s, shift)\n  s = s.chars.map { |c|\n    shift += 1\n    if index = SALPH.index c\n      SALPH.rotate(shift - 1)[index]\n    elsif index = BALPH.index c\n      BALPH.rotate(shift - 1)[index]\n    else\n      c\n    end\n  }.in_groups_of((s.size.to_f \/ 5).ceil.to_i).map(&.join(\"\"))\n  s.size == 4 ? s + [\"\"] : s\nend\n\ndef demoving_shift(arr, shift)\n  shift -= 1\n  arr.join.chars.map { |c|\n    shift += 1\n    if index = SALPH.index c\n      SALPH.rotate(-1 * shift)[index]\n    elsif index = BALPH.index c\n      BALPH.rotate(-1 * shift)[index]\n    else\n      c\n    end\n  }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55084d3898b323f0aa000546":[{"id":45751,"user_id":null,"body":"def encode_str(u, n)\n  r = u.chars.map{|c| c.letter? ? c.ord < 95 ? (65+(c.ord+n-65)%26).chr : (97+(c.ord+n-97)%26).chr : c}\n  ([u[0].downcase,r[0].downcase]+r).in_groups_of(((u.size+2)\/5).ceil.to_i).to_a.map(&.join)\nend\ndef decode(arr)\n  n = arr[0][1].ord - arr[0][0].ord + 26 % 26\n  arr.join.chars.map{|c| c.letter? ? c.ord < 95 ? (65+(c.ord-n+26-65)%26).chr : (97+(c.ord-n+26-97)%26).chr : c }.join[2..]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45752,"user_id":50,"body":"L=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\ndef encode_str(s, shift)\n  s=s[0].downcase.to_s+rot(s[0].downcase,shift).to_s+s.chars.map{|c| L.includes?(c) ? rot(c,shift).to_s : c.to_s}.join\n  l,r=(s.size).divmod(5)\n  if r==0\n    return [0,1,2,3,4].map{|n| s[n*l...(n+1)*l]} \n  else\n    l+=1\n    [0,1,2,3].map{|n| s[n*l...(n+1)*l]} + (s.size%l == 0 ? []of String : [s[4*l..-1]])\n  end\nend\ndef decode(arr)\n  shift=arr[0][0].ord-arr[0][1].ord\n  arr.join[2..-1].chars.map{|c| L.includes?(c) ? rot(c,shift) : c}.join\nend\ndef rot(c,shift)\n  o=c.ord\n  o >= 97 ? (((o+shift-97)%26)+97).chr : (((o+shift-65)%26)+65).chr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45753,"user_id":null,"body":"def encode_str(u, ofs)\n  s = u.bytes\n  sz = s.size + 2\n  ptr = Pointer.malloc(sz) do |i|\n    c = i > 1 ? s[i-2] : s[i] \n    case c\n    when 0x61..0x7a, 0x41..0x5a \n      c + ofs \n    else\n      c\n    end\n  end\n  ptr[0] = s[0] < 0x61 ? s[0] + 0x20 : s[0]\n  ptr[1] = ptr[0] + 1 \n  \n  res = [] of String\n  ps = sz \/\/ 5\n  pps = sz % 5\n  ps += 1 if pps > 0\n  pps = sz - (ps << 2)\n \n  Array(String).new( pps > 0 ? 5 : 4) do |i|\n    String.new(ptr + ps * i, i < 4 ? ps : pps)\n  end\nend\n\ndef decode(arr)\n  s = arr.join.bytes\n  ofs = s[1] - s[0]\n  ptr = Pointer.malloc(s.size - 2) do |i|\n    case c = s[i+2]\n    when 0x61..0x7a, 0x41..0x5a \n      c - ofs\n    else\n      c\n    end\n  end\n  String.new(ptr)\n end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45754,"user_id":null,"body":"ALPH = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".chars\n\ndef encode_str(u, n)\n  fi = ALPH.index(u[0].downcase).not_nil!\n  prefix = \"#{ALPH[fi]}#{ALPH.rotate(n)[fi]}\".chars\n  prefix += u.chars.map { |c|\n    if index = ALPH.index c\n      ALPH.rotate(n)[index]\n    else\n      c\n    end\n  }\n  prefix.in_groups_of((prefix.size.to_f \/ 5).ceil.to_i).map(&.join(\"\"))\nend\n\ndef decode(arr)\n  shift = arr[0].chars.first(2).map { |c| ALPH.index(c).not_nil! }.reduce { |acc, i| acc - i }\n  arr = arr.join.chars.skip(2)\n  arr.map { |c|\n    if index = ALPH.index c\n      ALPH.rotate(shift)[index]\n    else\n      c\n    end\n  }.join(\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45755,"user_id":492,"body":"def encode_str(u, n)\n    res = \"\"\n    v = u.scan(\/(\\w|\\W)\/).flatten.map{ |md| md[0].to_s }.each do |x|\n        x = x[0]\n        if (x.ord >= 'A'.ord  && x.ord <= 'Z'.ord) \n            c = (((x.ord - 'A'.ord + n) % 26) + 'A'.ord).chr\n        elsif (x.ord >= 'a'.ord  && x.ord <= 'z'.ord) \n            c = (((x.ord - 'a'.ord + n) % 26) + 'a'.ord).chr\n        else c = x end\n        res += c\n    end\n    res = u[0].downcase.to_s + \n      ((((u[0].downcase.ord - 'a'.ord + n) % 26) + 'a'.ord).chr).to_s + \n      res\n    p, r = res.size.divmod(5)\n    if (r != 0) \n        p += 1 \n    end\n    res.scan(\/.{1,#{p}}\/).map{ |md| md[0].to_s }\nend\ndef decode(arr)\n    s = arr.join\n    prefix = s[0..1]\n    n = (prefix[1].ord - prefix[0].ord) % 26\n    encode_str(s[2..-1], -n).join[2..-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45756,"user_id":492,"body":"def encode_str(u, n)\n    res = \"\"\n    v = u.scan(\/(\\w|\\W)\/).flatten.map{ |md| md[0].to_s }.each do |x|\n        x = x[0]\n        if (x.ord >= 'A'.ord  && x.ord <= 'Z'.ord) \n            c = (((x.ord - 'A'.ord + n) % 26) + 'A'.ord).chr\n        elsif (x.ord >= 'a'.ord  && x.ord <= 'z'.ord) \n            c = (((x.ord - 'a'.ord + n) % 26) + 'a'.ord).chr\n        else c = x end\n        res += c\n    end\n    res = u[0].downcase.to_s + \n      ((((u[0].downcase.ord - 'a'.ord + n) % 26) + 'a'.ord).chr).to_s + \n      res\n    p, r = res.size.divmod(5)\n    if (r != 0) \n        p += 1 \n    end\n    res.scan(\/.{1,#{p}}\/).map{ |md| md[0].to_s }\nend\ndef decode(arr)\n    s = arr.join\n    prefix = s[0..1]\n    n = (prefix[1].ord - prefix[0].ord) % 26\n    encode_str(s[2..-1], -n).join[2..-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"550f22f4d758534c1100025a":[{"id":45757,"user_id":527,"body":"OPPOSITE = {\n  \"NORTH\" => \"SOUTH\", \"EAST\" => \"WEST\",\n  \"SOUTH\" => \"NORTH\", \"WEST\" => \"EAST\",\n}\n\ndef dir_reduc(plan : Enumerable(String)) : Array(String)\n  plan.each_with_object([] of String) do |d, new_plan|\n    if new_plan.last? == OPPOSITE[d]\n      new_plan.pop()\n    else\n      new_plan << d\n    end\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45758,"user_id":492,"body":"def dir_reduc(arr) : Array(String)\n  s = arr.join(',')\n  loop {\n    s2 = s.sub(\/NORTH,SOUTH|SOUTH,NORTH|EAST,WEST|WEST,EAST\/, \"\").sub(\/^,|,$\/, \"\").sub(\/,,\/, \",\")\n    break if s2 == s\n    s = s2\n  }\n  res = s.split(',')\n  res == [\"\"] ? [] of String : res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45759,"user_id":421,"body":"def dir_reduc(arr) : Array(String)\n  s = arr.join\n  while \/(NORTHSOUTH)|(SOUTHNORTH)|(EASTWEST)|(WESTEAST)\/ === s\n    s = s.gsub(\/(NORTHSOUTH)|(SOUTHNORTH)|(EASTWEST)|(WESTEAST)\/, \"\")\n  end\n  s.scan(\/NORTH|SOUTH|EAST|WEST\/).map(&.[0])\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45760,"user_id":null,"body":"Directions = {\"NORTH\": 1, \"SOUTH\": -1, \"EAST\": 2, \"WEST\": -2, \"NONE\": 0}\n\ndef dir_reduc(arr) : Array(String)\n  reduction = [] of String\n  arr.each do |s|\n    Directions[reduction.last { \"NONE\" }] + Directions[s] == 0 ? reduction.pop? : reduction << s\n  end\n  reduction\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45761,"user_id":50,"body":"D={\"NORTH\"=>1,\"SOUTH\"=>-1,\"EAST\"=>2,\"WEST\"=>-2}\ndef dir_reduc(arr) : Array(String)\n  n=0\n  while n<arr.size-1\n    if D[arr[n]]+D[arr[n+1]]==0\n      arr.delete_at(n)\n      arr.delete_at(n)\n      n=0\n    else\n      n+=1\n    end\n  end\n  arr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45762,"user_id":null,"body":"def dir_reduc(arr) : Array(String)\n  acc = [] of String\n  arr.each do |i|\n    if !acc.empty? && [%w[NORTH SOUTH], %w[SOUTH NORTH], %w[WEST EAST], %w[EAST WEST]].any?([acc[-1], i])\n      acc.pop\n    else\n      acc << i\n    end\n  end\n  return acc\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45763,"user_id":null,"body":"\ndef dir_reduc(arr)\n  dir_str = arr.join\n  loop_pattern = \/NORTHSOUTH|EASTWEST|SOUTHNORTH|WESTEAST\/\n  while dir_str =~ loop_pattern\n    dir_str = dir_str.gsub(loop_pattern){\"\"}\n  end\n  return dir_str.scan(\/(NORTH|SOUTH|EAST|WEST)\/).map(&.[0])\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45764,"user_id":53,"body":"def dir_reduc(arr) : Array(String)\n  res = [] of String\n  n = arr.size\n  i = 0\n  while i < n\n    if res.size == 0\n      res << arr[i]\n    else\n      x = res[res.size - 1]\n      if (x == \"NORTH\" && arr[i] == \"SOUTH\") || (x == \"SOUTH\" && arr[i] == \"NORTH\") || (x == \"EAST\" && arr[i] == \"WEST\") || (x == \"WEST\" && arr[i] == \"EAST\")\n        res.pop()\n      else\n        res << arr[i]\n      end\n    end\n    i = i + 1\n  end\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45765,"user_id":null,"body":"def dir_reduc(arr) : Array(String)\n  opposite = Hash(String, String).new\n  opposite[\"NORTH\"] = \"SOUTH\"\n  opposite[\"SOUTH\"] = \"NORTH\"\n  opposite[\"WEST\"] = \"EAST\"\n  opposite[\"EAST\"] = \"WEST\"\n  (arr.size - 2).downto(0).each{|i|\n    p! [arr.size, i]\n    next if arr.size < i+2\n    if arr[i+1] == opposite[arr[i]]\n      arr.delete_at(i..(i+1))\n    end\n  }\n  arr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45766,"user_id":null,"body":"def areOpposite(p : String, q : String)\n  (p == \"NORTH\" && q == \"SOUTH\") || (q == \"NORTH\" && p == \"SOUTH\") || (p == \"WEST\" && q == \"EAST\") || (q == \"WEST\" && p == \"EAST\")\nend\n\ndef dir_reduc(arr) : Array(String)\n  iterator : Int32 = 0\n  \n  while iterator < (arr.size - 1)\n  \n    if areOpposite(arr[iterator].to_s, arr[iterator + 1].to_s)   \n      arr.delete_at(iterator)\n      arr.delete_at(iterator)\n      iterator = 0\n  \n    else\n      iterator += 1\n  \n    end\n  end\n\n  arr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5513795bd3fafb56c200049e":[{"id":45767,"user_id":421,"body":"def count_by(x, n)\n  (x..x*n).step(x).to_a\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45768,"user_id":527,"body":"def count_by(x, n)\n  (1..n).map{ |i| i * x }\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45769,"user_id":null,"body":"def count_by(x, n)\n  r = Array(Int32).new\n  \n  count = x\n  (1..n).each do\n    r.push(count)\n    count += x\n  end\n  \n  r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45770,"user_id":null,"body":"def count_by(x, n)\n  arr = [] of Int32\n  (1..n).each {|t| arr << x * t}\n  arr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45771,"user_id":50,"body":"def count_by(x, n)\n    (1..n).map{|i| x*i}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45772,"user_id":null,"body":"def count_by(x, n)\n  (1..n).map {|e| e*x}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45773,"user_id":null,"body":"def count_by(x, n)\n  return Array.new(n) { |i| (i+1) * x }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45774,"user_id":1624,"body":"def count_by(x, n)\n  (1..n).map{|u| u*x}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45775,"user_id":470,"body":"def count_by(x, n)\n    Range.new(1,n).map {|i| i*x}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45776,"user_id":null,"body":"def count_by(x, n)\n  Array(Int32).new(n) { |i| (i + 1) * x }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5517fcb0236c8826940003c9":[{"id":45777,"user_id":53,"body":"def gcd (a : Int32, b : Int32) \n    while (b != 0)\n        a, b = b, a % b\n    end\n    a\nend\n\ndef sum_fracts(lst)\n    return nil if lst.size == 0\n    d, n = 1, 0\n    lst.each { |xs| d *= xs[1] }\n    lst.each { |xs| n += (xs[0] * d \/\/ xs[1]) }\n    g = gcd(d, n)\n    d == g ? n \/\/ g : [n \/\/ g, d \/\/ g]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45778,"user_id":null,"body":"require \"big\"\n\ndef sum_fracts(lst)\n  if lst.empty?\n    return nil\n  end\n  result = lst.sum do |x|\n    n, d = x\n    BigRational.new(n, d)\n  end\n  n, d = result.numerator, result.denominator\n  d == 1 ? n : [n, d]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45779,"user_id":null,"body":"def sum_fracts(lst)\n  return nil if lst.nil? || lst.empty?\n  l = lst.map {|p| p[1]}.reduce(1) {|a, i| a.lcm(i)}\n  f = [lst.sum {|p| p[0] * (l\/p[1]).to_i}, l]\n  return (f[0]\/f[1]).to_i if f[0]%f[1] == 0\n  d = f[0].gcd(f[1])\n  f.map {|i| (i\/d).to_i}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45780,"user_id":492,"body":"def gcd(a, b)\n    b == 0 ? a : gcd(b, a.modulo(b))\nend\n\ndef lcm(a, b)\n    (a * b) \/\/ gcd(a, b)\nend\n\ndef sum_fracts(lst)\n    if ((lst == nil) || (lst.size == 0)) \n    \treturn nil \n  \tend\n  \tlc = lst.map{ |x| x[1] }.reduce(1) { |m, e| lcm(m, e) }\n    r = lst.map{ |x| [x[0] * lc \/\/ x[1], lc] }\n    num = r.map{ |x| x[0] }.reduce(0) { |m, e| m + e }\n    g = gcd(num, lc)\n    if (lc \/\/ g == 1)\n    \tnum \/g \n  \telse \n  \t\t[num \/\/ g, lc \/\/ g] \n\tend\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45781,"user_id":null,"body":"require \"big\"\n\ndef sum_fracts(lst)\n  res = lst.map { |n| BigRational.new(n[0].to_big_i, n[1].to_big_i) }.sum.to_s\n  if res.includes?(\"\/\")\n    [res.split(\"\/\")[0].to_i, res.split(\"\/\")[1].to_i]\n  elsif lst.empty?\n    nil\n  else\n    res.to_i\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55192f4ecd82ff826900089e":[{"id":45782,"user_id":null,"body":"def divide(w)\n  return w % 2 == 0 && w > 2\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-28 19:38:38"},{"id":45783,"user_id":50,"body":"def divide(w)\n  w%2 == 0 && w != 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45784,"user_id":null,"body":"def divide(w : Int): Bool\n  return w != 2 && w % 2 == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45785,"user_id":53,"body":"def divide(w)\n  w % 2 == 0 && w > 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45786,"user_id":null,"body":"def divide(w)\n  if w \/ 2 == 1\n    return false\n  else\n    w % 2 == 0\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45787,"user_id":null,"body":"def divide(w)\n  w != 2 && w.even?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45788,"user_id":null,"body":"def divide(w)\n  return (w > 2) && (w % 2 == 0)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45789,"user_id":null,"body":"def divide(w)\n  w > 2 && w%2==0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45790,"user_id":527,"body":"def divide(w)\n  w.even? && w != 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45791,"user_id":645,"body":"def divide(w)\n  w > 2 && w.even?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"551b4501ac0447318f0009cd":[{"id":45792,"user_id":421,"body":"def boolean_to_string(b)\n  b.to_s\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45793,"user_id":527,"body":"def boolean_to_string(b : Bool) : String\n  b.to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45794,"user_id":53,"body":"def boolean_to_string(b)\n  b ? \"true\" : \"false\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45795,"user_id":1566,"body":"def boolean_to_string(b)\n  \"#{b}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45796,"user_id":null,"body":"def boolean_to_string(b)\n  if b == true\n    \"true\"\n  elsif b == false\n    \"false\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45797,"user_id":null,"body":"def boolean_to_string(b)\n  return \"#{b}\" \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45798,"user_id":null,"body":"def boolean_to_string(b)\n  if b\n    return \"true\"\n    end\n  return \"false\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45799,"user_id":50,"body":"def boolean_to_string(b)\n  if b \n    \"true\" \n  else \"false\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"551e51155ed5ab41450006e1":[{"id":45800,"user_id":1624,"body":"def sum_times_tables(table,a,b)\n  table.sum * (a..b).sum\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45801,"user_id":null,"body":"def sum_times_tables(table : Array(Number),a : Number, b : Number) : Number\n  table.sum * (a + b) * (b + 1 - a) \/ 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45802,"user_id":50,"body":"def sum_times_tables(table,a,b)\n  table.map{|n| (a..b).map{|p| n*p}.sum}.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45803,"user_id":421,"body":"def sum_times_tables(table,a,b)\n  table.sum{|x| (a..b).sum{|y| x * y}}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45804,"user_id":492,"body":"def sum_times_tables(table,a,b)\n  table.sum * (a + b) * (b - a + 1) \/ 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45805,"user_id":null,"body":"def sum_times_tables(table, a, b)\n  (a+b)*(b-a+1)\/2*table.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45806,"user_id":1828,"body":"def sum_times_tables(table,a,b)\n  (a..b).map{|i| table.map{|j| j*i}.sum}.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45807,"user_id":1072,"body":"def sum_times_tables(t,a,b) t.reduce(0){|c,d| c+d}*(a+b)*(b-a+1)\/2 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"552564a82142d701f5001228":[{"id":45808,"user_id":421,"body":"def discover_original_price(discounted_price, sale_percentage)\n  (discounted_price * 100 \/ (100 - sale_percentage)).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45809,"user_id":null,"body":"def discover_original_price(discounted_price, sale_percentage)\n  (discounted_price \/ (100 - sale_percentage) * 100).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45810,"user_id":null,"body":"def discover_original_price(discounted_price, sale_percentage)\n  (discounted_price \/ (1 - sale_percentage\/100)).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45811,"user_id":76,"body":"def discover_original_price(discounted_price, sale_percentage)\n  (discounted_price * 100.0 \/ (100 - sale_percentage)).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45812,"user_id":null,"body":"def discover_original_price(discounted_price, sale_percentage)\n  (discounted_price \/ (1 - sale_percentage \/ 100) * 100).round \/ 100\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45813,"user_id":null,"body":"def discover_original_price(discounted_price, sale_percentage)\n  (discounted_price \/ (1 - sale_percentage * 0.01)).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45814,"user_id":48,"body":"def discover_original_price(d_price, sales_p)\n    (d_price \/ (1 - (sales_p \/ 100.0)) * 100.0).round \/ 100.0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45815,"user_id":null,"body":"def discover_original_price(discounted_price, sale_percentage)\n  (discounted_price.to_f * 100 \/ (100 - sale_percentage.to_f)).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45816,"user_id":null,"body":"def discover_original_price(discounted_price, sale_percentage)\n  (discounted_price.to_f*100.0\/(100.0-sale_percentage.to_f)).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45817,"user_id":null,"body":"def discover_original_price(discounted_price, sale_percentage)\n  (discounted_price.to_f \/ (100 - sale_percentage) * 100).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5526fc09a1bbd946250002dc":[{"id":45818,"user_id":null,"body":"def find_outlier(is)\n  is[0..2].count(&.even?) >= 2 ? is.find(&.odd?) : is.find(&.even?)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45819,"user_id":1072,"body":"def find_outlier(arr) p=arr[0,3].map{|a| a%2}.reduce(0){|a,b| a+b}<2 ? 1 : 0; arr.select{|b| b%2==p}[0] end","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45820,"user_id":null,"body":"def find_outlier(integers)\n  evenness = integers[0].even?\n  if integers[1].even? != evenness \n      return integers[2].even? == evenness ? integers[1] : integers[0]\n  end\n\n  integers.each do |int|\n    return int if int.even? != evenness  \n  end\n    \nend\n  ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45821,"user_id":null,"body":"def find_outlier(integers)\n  integers[0..2].count(&.even?) >= 2 ? integers.find(&.odd?) : integers.find(&.even?)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45822,"user_id":null,"body":"def find_outlier(integers)\n  even, odd = integers.select(&.even?), integers.select(&.odd?)\n  even.size == 1 ? even[0] : odd[0]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45823,"user_id":168,"body":"def find_outlier(integers)\n  t = integers[0, 3].sum { |x| x % 2 } \/\/ 2\n  integers.find { |x| x % 2 != t }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45824,"user_id":null,"body":"def find_outlier(i)\n  f = i[..2].map(&.bit(0)).sum > 1 ? 0 : 1\n  i.find(&.bit(0).==(f))\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45825,"user_id":null,"body":"def find_outlier(integers)\n      odds = 0\n    evens = 0\n\n    #BRUTE FORCE!\n    # Look at first 3 element in array\n    if integers[0] % 2 == 0\n      evens += 1\n    else\n      odds +=1\n    end\n\n    if integers[1] % 2 == 0\n      evens += 1\n    else\n      odds +=1\n    end\n\n    if integers[2] % 2 == 0\n      evens += 1\n    else\n      odds +=1\n    end\n\n    array_is_even = evens > odds\n\n    integers.each_index do |i|\n      # if array is even, iterate until we find an odd number\n      return integers[i] if array_is_even && integers[i] % 2 != 0\n      # if array is odd, iterate until we find an even number\n      return integers[i] if !array_is_even && integers[i] % 2 == 0\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45826,"user_id":421,"body":"def find_outlier(integers)\n  a = integers.select(&.odd?)\n  b = integers.select(&.even?)\n  a.size == 1 ? a[0]: b[0]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45827,"user_id":null,"body":"def find_outlier(integers)\n  looking_for_even = (integers[..2].select { |int| int.even? }.size) < 2\n  \n  integers.find { |int| int.even? == looking_for_even }.not_nil!\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5536a85b6ed4ee5a78000035":[{"id":45828,"user_id":421,"body":"def tour(friends, fTowns, distTable)\n  visited = fTowns.select{|x| !friends.index(x[0]).nil?}.map{|x| distTable[x[1]]}\n  visited.each_cons(2).sum{|x| Math.sqrt(x[1] ** 2 - x[0] ** 2)}.floor + visited.first + visited.last\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45829,"user_id":492,"body":"def doTour(frnds, frndtwns)\n    frndtwns.reduce([] of String) { |res, frndtwn| \n      if (frnds.includes?(frndtwn[0])) \n        res << frndtwn[1] \n      else \n        res \n      end }\nend\ndef distance(tour, hdist)\n    sum = hdist[tour[0]]\n    tour.each_cons(2) { |t| \n        sum += Math.sqrt(hdist[t[1]] * hdist[t[1]] - hdist[t[0]] * hdist[t[0]]) \n    }\n    sum + hdist[tour[tour.size - 1]]\nend\ndef tour(friends, fTowns, distTable)\n    distance(doTour(friends, fTowns), distTable).to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45830,"user_id":null,"body":"def tour(f, fTowns, d)\n  t = fTowns.to_h\n  r = t[f[0]]? ? d[t[f[0]]] : d[t[f[1]]]\n  r+= t[f[-1]]? ? d[t[f[-1]]] : d[t[f[-2]]]\n  (1...f.size).each do |i|\n    next unless t[f[i-1]]? && t[f[i]]?\n    r += Math.sqrt(d[t[f[i]]]**2-d[t[f[i-1]]]**2)\n  end\n  r.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45831,"user_id":null,"body":"def tour(friends, fTowns, distTable)\n  distTable = distTable.select { |k, v|\n    fTowns.select { |t| friends.includes? t[0] }.map { |t| t[1] }.includes? k\n  }.values\n  distances = [distTable.first, distTable.last]\n  distTable.map { |e| e ** 2 }.each_cons(2) { |arr| distances << Math.sqrt((arr.last - arr.first).abs) }\n  distances.sum.floor\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45832,"user_id":null,"body":"require \"math\"\n\ndef tour(friends, fTowns, distTable)\n  total_dist = 0.0\n  last_dist = 0.0\n  friends.each do |friend|\n    fTowns.each do |fTown|\n      if friend == fTown[0]\n        total_dist += get_distance(last_dist, distTable[fTown[1]])\n        last_dist = distTable[fTown[1]]\n      end\n    end\n  end\n  total_dist += last_dist\n  total_dist.floor\nend\n\ndef get_distance(dist1, dist2)\n  Math.sqrt(dist2**2 - dist1**2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5539fecef69c483c5a000015":[{"id":45833,"user_id":421,"body":"def prime(n)\n  n < 2 ? false : (2..Math.sqrt(n)).none?{|x| n % x == 0}\nend\n\ndef backwards_prime(start, stop)\n   (start..stop).select{|x| prime(x) && prime(x.digits.join.to_i) && x.digits.join.to_i != x}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45834,"user_id":null,"body":"def backwards_prime(start, stop)\n  (start..stop).select {|v| prime?(v) && (rev = v.to_s.reverse.to_i) && v != rev && prime?(rev) }\nend\n\ndef prime?(v)\n  (2..Math.sqrt(v)).all? {|i| v % i != 0 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45835,"user_id":492,"body":"def prime?(n)\n  max = Math.sqrt(n).floor\n  (2..max).all? { |i| n % i != 0 }\nend\ndef backwards_prime?(n)\n  reverse_n = n.to_s.reverse.to_i\n  n != reverse_n && prime?(n) && prime?(reverse_n)\nend\ndef backwards_prime(start, stop)\n  (start..stop).select { |n| backwards_prime?(n) }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45836,"user_id":492,"body":"def prime?(n)\n  max = Math.sqrt(n).floor\n  (2..max).all? { |i| n % i != 0 }\nend\ndef backwards_prime?(n)\n  reverse_n = n.to_s.reverse.to_i\n  n != reverse_n && prime?(n) && prime?(reverse_n)\nend\ndef backwards_prime(start, stop)\n  (start..stop).select { |n| backwards_prime?(n) }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45837,"user_id":null,"body":"struct Int32\n  def prime?\n    !(2..Math.sqrt(self)).any? { |x| self % x == 0 }\n  end\n  \n  def reverse\n    to_s.reverse.to_i\n  end\nend\n\ndef backwards_prime(start, stop)\n  (start..stop).select { |candidate|\n    reversed = candidate.reverse\n    candidate != reversed && candidate.prime? && reversed.prime?\n  }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45838,"user_id":53,"body":"def backwards_prime(start, stop)\n    arr = Array(Int32).new\n    n = start\n    while n <= stop\n        if isPrime(n)\n            m = backwards(n)\n            if m != n && isPrime(m)\n                arr << n\n            end\n        end\n        n = n + 1\n    end\n    arr\nend\n\ndef backwards(n)\n    n.to_s.split(\/\/).reverse.join().to_i32\nend\n\ndef isPrime(n)\n    i = 2\n    while i <= n ** 0.5\n        if n % i == 0\n            return false\n        end\n        i = i + 1\n    end\n    n > 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45839,"user_id":1474,"body":"def backwards_prime(start, stop)\n  (start..stop).select do |n|\n    r = reverse(n)\n    n != r && prime?(n) && prime?(r)\n  end\nend\n\ndef prime?(n)\n  n > 3 && n.odd? && (3..Math.sqrt(n)).step(2).none?{ |i| n % i == 0 }\nend\n\ndef reverse(n)\n  n.to_s.reverse.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45840,"user_id":null,"body":"def is_prime(x)\n  x > 1 && (2..Math.sqrt(x)).all?{|n| x % n != 0}\nend\n\ndef is_backwards_prime(x)\n  y = x.to_s.reverse.to_i\n  is_prime(x) && is_prime(y) && x != y\nend\n\ndef backwards_prime(start, stop)\n  (start..stop).select{|x| is_backwards_prime(x)}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45841,"user_id":null,"body":"class Global\n  class_property max = 10_000_000\n  class_property sieve : Array(Bool) = Array.new(max + 1, true)\nend\n\nGlobal.sieve[0] = false\nGlobal.sieve[1] = false\n\n2.step(to: Math.sqrt(Global.max)) do |i|\n  if Global.sieve[i]\n    (i * i).step(to: Global.max, by: i) do |j|\n      Global.sieve[j] = false\n    end\n  end\nend\n\ndef backwards_prime(start, stop)\n  result = Array(Int32).new\n  start.upto(stop) do |n|\n    r = n.to_s.reverse.to_i\n    result << n if n != r && Global.sieve[n] && Global.sieve[r]\n  end\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45842,"user_id":null,"body":"def backwards_prime(start, stop)\n  primes = Array(Int32).new\n  (start..stop).each do |num|\n    if prime?(num) && prime?(num.to_s.reverse.to_i) && num.to_s != num.to_s.reverse\n      primes << num\n    end\n  end\n  primes\nend\n\ndef prime?(num)\n  (1...(num\/2)).each do |div|\n    return false if num % (div*2+1) == 0\n  end\n  num % 2 != 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"553e8b195b853c6db4000048":[{"id":45843,"user_id":421,"body":"def unique_chars?(str)\n   str.chars.uniq == str.chars\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45844,"user_id":null,"body":"def unique_chars?(str)\n  str.split(\/\/) == str.split(\/\/).uniq\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45845,"user_id":null,"body":"def unique_chars?(str)\n    hash_table = Hash(Char, Bool).new\n    chars_list = str.chars()\n\t  all_unique = true\n\n    chars_list.each do |character|\n\t  if hash_table[character]\n\t  \tall_unique = false\n      hash_table[character] = true\n\t  end\n    rescue ex : KeyError\n      hash_table[character] = true\n    end\n\treturn all_unique\n\tend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45846,"user_id":null,"body":"def unique_chars?(str)\n  str.split(\"\").size == str.split(\"\").uniq.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45847,"user_id":null,"body":"def unique_chars?(str)\n  str.chars.uniq.size == str.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45848,"user_id":null,"body":"def unique_chars?(str)\n  str.codepoints.uniq.size == str.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45849,"user_id":null,"body":"def unique_chars?(str)\n  str.each_char.to_a == str.each_char.to_a.uniq\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45850,"user_id":527,"body":"def unique_chars?(str)\n  str == str.chars.uniq.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45851,"user_id":527,"body":"def unique_chars?(str)\n  # This solution is incorrect\n  str == str.chars.uniq.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45852,"user_id":527,"body":"require \"bit_array\"\n\ndef unique_chars?(str)\n  seen = BitArray.new(128)\n  str.each_codepoint do |c|\n    return false if seen[c]\n    seen[c] = true\n  end\n  true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5541f58a944b85ce6d00006a":[{"id":45853,"user_id":492,"body":"def product_fib(prod : UInt64)\n  a, b = [0_u64, 1_u64]\n  while prod > a * b\n    a, b = [b, a + b]\n  end\n  [a, b, prod == a * b]\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45854,"user_id":168,"body":"def product_fib(prod : UInt64)\n  a, b = 0u64, 1u64\n  while a * b < prod\n    a, b = b, a + b\n  end\n  [a, b, a * b == prod]\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45855,"user_id":null,"body":"def product_fib(prod : UInt64)\n  a : UInt64 = 0\n  b : UInt64 = 1\n  while a * b < prod\n    a, b = b, a + b\n  end\n  [a, b, a * b == prod]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45856,"user_id":53,"body":"def product_fib(n : UInt64)\n  a : UInt64 = 0\n  b : UInt64 = 1\n  while a * b < n\n    b = a + b\n    a = b - a\n  end\n  [a, b, a * b == n]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45857,"user_id":null,"body":"def product_fib(prod : UInt64)\n  prev = 0_u64\n  curr = 1_u64\n  while prev*curr < prod\n    prev, curr = curr, prev + curr\n  end\n  if prev*curr == prod\n    [prev, curr, true]\n  else\n    [prev, curr, false]\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45858,"user_id":null,"body":"def product_fib(prod : UInt64)\n  a = 0_u64\n  c = b = 1_u64\n  while prod > (d = a * b)\n    c = a + b \n    a = b\n    b = c\n  end\n  [a,b, d == prod]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45859,"user_id":421,"body":"def product_fib(prod : UInt64)\n   a, b = 0_u64, 1_u64\n   while a * b < prod\n      a, b = b, a + b\n  end\n  [a, b, a * b == prod]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45860,"user_id":null,"body":"def product_fib(prod : UInt64)\n  fibo = Hash(Int32, UInt64).new { |h,k| h[k] = h[k-2] + h[k-1] }\n  fibo[0] = 0_u64\n  fibo[1] = 1_u64\n  n = (0..).find { |i|\n    fibo[i] * fibo[i+1] >= prod  \n  }.not_nil!\n  [fibo[n], fibo[n+1], fibo[n] * fibo[n+1] == prod]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45861,"user_id":null,"body":"def product_fib(prod : UInt64)\n  puts(prod)\n  cur, nxt = 0_u64, 1_u64\n  while true\n    p = cur * nxt\n    return [cur.to_i, nxt.to_i, p == prod] if p >= prod\n    cur, nxt = nxt, cur+nxt\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45862,"user_id":null,"body":"def product_fib(prod : UInt64)\n  a, b = 0_u64, 1_u64\n  while true\n    return [a, b, true] if a * b == prod\n    return [a, b, false] if a * b > prod\n    a, b = b, a + b\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5544c7a5cb454edb3c000047":[{"id":45863,"user_id":527,"body":"def bouncing_ball(h : Float, bounce : Float, window : Float) : Int\n  return -1 unless h > 0 && 0 < bounce && bounce < 1 && window < h\n  Math.log(window \/ h, bounce).ceil.to_i * 2 - 1\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45864,"user_id":null,"body":"def bouncing_ball(h, bounce, window)\n  return -1 unless h > 0 && 0 < bounce < 1 && window < h\n  \n  Math.log(window \/ h, bounce).ceil.to_i * 2 - 1\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45865,"user_id":492,"body":"def bouncing_ball(h, bounce, window)\n    if ((h <= 0) || (window >= h) || (bounce <= 0) || (bounce >= 1))\n        return -1\n    end\n    seen = -1\n    while (h > window)\n        seen += 2\n        h = h * bounce\n    end\n    seen\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45866,"user_id":527,"body":"def bouncing_ball(h, bounce, window) : Int\n  return -1 unless h > 0 && 0 < bounce && bounce < 1 && window < h\n  Math.log(window.fdiv(h), bounce).ceil.to_i * 2 - 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45867,"user_id":null,"body":"def bouncing_ball(h, bounce, window)\n  (h <= 0.0 || window >= h || bounce <= 0.0 || bounce >= 1.0) ? -1 : 2 + bouncing_ball (h * bounce), bounce, window\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45868,"user_id":null,"body":"def bouncing_ball(h, bounce, window)\n  count = 1\n  bheight = 0\n  if h > 0 && bounce > 0 && bounce < 1 && window < h\n    bheight = h * bounce\n    while bheight > window\n      count = count + 2\n      bheight = bheight * bounce\n    end\n    return count\n  else\n   return -1\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45869,"user_id":null,"body":"def bouncing_ball(h, bounce, window)\n  if h <= 0 || bounce <= 0 || bounce >= 1 || window >= h\n    -1\n  else\n    2 + bouncing_ball(h*bounce, bounce, window)\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45870,"user_id":null,"body":"def bouncing_ball(h, bounce, window)\n  if h <= 0 || bounce <= 0 || bounce >= 1 || window >= h\n    return -1\n  end\n  sitings = 1\n  loop do\n    h *= bounce\n    break if h <= window\n    sitings += 2\n  end\n  return sitings\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45871,"user_id":null,"body":"def bouncing_ball(h, bounce, window)\n  return -1 unless ( h > 0 && bounce > 0 && bounce < 1) \n  c = 0\n  while h > window\n    c += 1\n    h *= bounce if c.odd?\n  end\n  return c>0 ? c : -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45872,"user_id":null,"body":"def bouncing_ball(h, bounce, window)\n  return -1 unless h > 0.0 && window < h && bounce > 0.0 && bounce < 1.0\n  res = 0\n  while true\n    res += 1\n    h *= bounce\n    break if h <= window\n    res += 1\n  end\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5545f109004975ea66000086":[{"id":45873,"user_id":645,"body":"def is_divisible(n, x, y)\n  n % x == 0 && n % y == 0\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45874,"user_id":50,"body":"def is_divisible(n, x, y)\n  n % y + n % x == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45875,"user_id":null,"body":"def is_divisible(n, x, y)\n  return (n % x) == 0 && (n % y) == 0;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45876,"user_id":1566,"body":"def is_divisible(n, x, y)\n  n % x + n % y == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45877,"user_id":527,"body":"def is_divisible(n : Int, x : Int, y : Int) : Bool\n  n.divisible_by?(x) && n.divisible_by?(y)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45878,"user_id":null,"body":"def is_divisible(n : Int32, x : Int32, y : Int32) : Bool\n  n % x === 0 && n % y === 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45879,"user_id":null,"body":"def is_divisible(n, x, y)\n  # your code here\n  return n % x==0 && n%y==0;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45880,"user_id":null,"body":"def is_divisible(n, x, y)\n  [x,y].reduce(true) { |bool, divisor| bool && (n % divisor).zero? }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45881,"user_id":null,"body":"def is_divisible(n, x, y)\n  n % x == 0 == n % y\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45882,"user_id":null,"body":"def is_divisible(n, x, y)\n  n % x == 0 && n % y == 0 ? true : false\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55466989aeecab5aac00003e":[{"id":45883,"user_id":492,"body":"def sq_in_rect(l, w)\n    rects = [] of Int32\n    while l > 0\n      w, l = [w, l].minmax\n      rects << w\n      l -= w\n    end\n    rects.size > 1 ? rects : [] of Int32\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45884,"user_id":50,"body":"def sq_in_rect(a, b)\n  if a==b\n    return [] of Int32\n  end\n  a,b=[a,b].sort\n  e=[a]\n  b-=a\n  a==b ? [a,a] :  e +  (sq_in_rect(a,b) || [] of Int32)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45885,"user_id":null,"body":"def sq_in_rect(l, w) : (Array(Int32) | Nil)\n  if l != w\n    res = Array(Int32).new\n    while l != w\n      if l > w\n        res << w\n        l -= w\n      else\n        res << l\n        w -= l\n      end\n    end\n    return res + [l > w ? l : w]\n  else\n    return [] of Int32\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45886,"user_id":null,"body":"def sq_in_rect(l, w)\n  if l == w\n    return [] of Int32\n  end\n  result = [] of Int32\n  while l != w\n    result  << [l, w].min\n    if l > w\n      l -= w\n    else\n      w -= l\n    end\n  end\n  result + [l]\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45887,"user_id":53,"body":"def sq_in_rect(l, w)\n  return [] of Int32 if l == w\n  arr = Array(Int32).new\n  walk(arr, l, w)\n  arr\nend\n\ndef walk(arr, a, b)\n  l = Math.max(a, b)\n  w = Math.min(a, b)\n  if w != 0\n    arr << w\n    l -= w\n    walk(arr, w, l)\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45888,"user_id":1474,"body":"def sq_in_rect(l, w)\n  mn, mx = [l, w].minmax\n  mn == mx ? [] of Int32 : mx % mn == 0 ? [mn] * (mx \/\/ mn) : [mn] + (sq_in_rect(mn, mx-mn) || [] of Int32)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45889,"user_id":null,"body":"\ndef sq(arr,l,w)\n  return arr if l==0 || w==0\n  m=Math.min(l,w)\n  arr<<m\n  if m==l\n    sq(arr,l,w-m)\n  else\n    sq(arr,l-m,w)\n  end\nend\n\n\ndef sq_in_rect(l, w)\n  return [] of Int32 if l==w\n  sq(Array(Int32).new,l,w)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45890,"user_id":null,"body":"def sq_in_rect(l, w)\n  return [] of Int32 if l == w\n  result = [] of Int32\n  while l * w > 0\n    l, w = w, l if l > w\n    result << l\n    w -= l\n  end\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45891,"user_id":null,"body":"def sq_in_rect(l : Int32, w : Int32)\n  return [] of Int32 if l == w\n  squares = [] of Int32\n  t = {l: l, w: w, square: [] of Int32}\n  \n  while true\n    t = remove_square(t[:l], t[:w])\n    break if t.[] of Int32?\n    squares << t[:square]\n  end\n  \n  squares\nend\n\ndef remove_square(l : Int32, w : Int32)\n  return [] of Int32 if l <= 0 || w <= 0\n  \n  l, w = [l, w].sort\n  \n  {\n    l: w - l,\n    w: l,\n    square: l\n  }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45892,"user_id":null,"body":"def sq_in_rect(l, w)\n    ret = [] of Int32\n    \n    if l == w\n      [] of Int32\n    else\n      l1 = l\n      w1 = w\n      while l1 > 0 && w1 > 0\n        # puts \"[l1, w1] =#{[l1, w1]}\"\n        l1, w1 = [l1, w1].max, [l1, w1].min\n        # puts \"l1=#{l1} w1=#{w1}\"\n        ret.push w1\n        l1 = l1 - w1   \n      end\n      ret\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5547cc7dcad755e480000004":[{"id":45893,"user_id":1624,"body":"def remove_nb(n : UInt64)\n  e = (1_u64..n).sum\n\n  (1..n)\n    .map{|x|\n      y, yr = (e - x).divmod(x + 1)\n      if y <= n && yr == 0\n        [x,y]\n      end\n    }.compact\nend\n","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45894,"user_id":492,"body":"def remove_nb(n : UInt64)\n    s = n * (n +1) \/ 2\n  \tres = [] of Array(UInt64)\n  \ti_u64 = (n \/ 2_u64)\n    while (i_u64 <= n)\n    \tb = s - i_u64\n        if (b % (i_u64 + 1) == 0)\n            res << [i_u64, b \/ (i_u64 + 1)]\n        end\n        i_u64 += 1\n    end\n    res\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45895,"user_id":53,"body":"def remove_nb(n : UInt64)\n  ans = [] of Array(UInt64)\n  m = (n * (n + 1)) \/ 2\n  (1_u64..n).each{|x|\n    y = (m - x) \/ (x + 1)\n    ans << [x, y] if y <= n && x * y == m - x - y\n  }\n  ans\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45896,"user_id":492,"body":"def remove_nb(n : UInt64)\n    s = n * (n +1) \/ 2\n  \tres = [] of Array(UInt64)\n  \ti_u64 = (n \/ 2_u64)\n    while (i_u64 <= n)\n    \tb = s - i_u64\n        if (b % (i_u64 + 1) == 0)\n            res << [i_u64, b \/ (i_u64 + 1)]\n        end\n        i_u64 += 1\n    end\n    res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45897,"user_id":null,"body":"def remove_nb(n : UInt64)\n  total =  n*(n+1)\/2\n  result = Array(Array(Int32)).new\n  (1..n).reverse_each do |v|\n    tmp = (total-v).divmod(v)\n    if tmp[0]==tmp[1] && tmp[0]<=n\n      result.push([tmp[0].to_i, v.to_i]) \n      result.push([v.to_i, tmp[0].to_i]) \n    end\n  end\n  return result.sort{|a, b| a[0] <=> b[0]}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45898,"user_id":null,"body":"def remove_nb(n : UInt64)\n  r = [] of Array(Int32)\n  s = (n*(n+1))\/2\n  (1_u64...n).each do |i|\n    m = s%i\n    if i*m == s-i-m\n      r << [i.to_i32, m.to_i32] << [m.to_i32, i.to_i32]\n    end\n  end\n  r.sort_by &.[](0)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45899,"user_id":null,"body":"def remove_nb(n : UInt64)\n    tot = n * (n + 1)\/2\n    puts n\n    puts tot\n    ans = ((tot\/n).to_i..n).select{|x| (tot - x) % (1 + x) == 0}\n                     .map{|x| [x.to_u64, ((tot - x)\/(1 + x)).to_u64]}\n                     .select{|x| tot - x[0] - x[1] == x[0] * x[1]}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45900,"user_id":null,"body":"def remove_nb(n : UInt64)\n  sum = (1_u64..n).sum\n  s = [] of Array(UInt64)\n\n  (((sum - n) \/ n)..n).each do |x|\n    s << [x, (sum - x) \/ (x + 1)] if (sum - x) % (x + 1) == 0\n  end\n  s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45901,"user_id":null,"body":"include Math\ndef remove_nb(n : UInt64)\n    puts n\n    sum = ((n + 1) \/ 2.0 * n).to_u64\n    \n    pairs1, pairs2 = [] of Array(Int32), [] of Array(Int32)\n    maxi = sqrt(sum).floor.to_u64\n    puts maxi\n    \n    i = 2_u64\n    while  i < maxi\n      sumi = sum - i\n      maxj = [sumi \/ i, n].min\n      minj = [(sumi - n) \/ i, i].max\n      j = (maxj + minj) \/ 2\n      \n      while maxj > minj + 1\n        sumj = sumi - j\n        prod = i * j\n        if prod == sumj\n          pairs1 << [i.to_i32, j.to_i32]\n          pairs2 << [j.to_i32, i.to_i32]\n          break\n        end\n        minj, j, maxj = prod < sumj ? {j, (j + maxj) \/ 2, maxj} : {minj, (j + minj) \/ 2, j}\n      end\n      i += 1\n    end\n\n    pairs1 + pairs2.reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"554a44516729e4d80b000012":[{"id":45902,"user_id":421,"body":"def nb_months(spo, spn, svpm, plbm)\n  return [0, spo - spn] if spo >= spn\n  month = 1\n  diff = spn - spo\n  while diff > 0\n    plbm += 0.5 if month.even?  \n    diff -= svpm + spn * plbm.fdiv(100) - spo * plbm.fdiv(100)  \n    spn -= spn * plbm.fdiv(100) \n    spo -= spo * plbm.fdiv(100)\n    month += 1\n  end\n  [month - 1, diff.round.abs]\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45903,"user_id":53,"body":"def nb_months(p0, p1, s, r, m = 0, t = 0)\n  return [m, (p0 - p1 + t).round()] if p1 <= p0 + t\n  p0 -= p0 * 0.01 * r\n  p1 -= p1 * 0.01 * r\n  t += s\n  m += 1\n  r += 0.5 if (m.odd?)\n  nb_months(p0, p1, s, r, m, t)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45904,"user_id":492,"body":"def nb_months(priceOld, priceNew, saving, loss)\n    saved, months = 0, 0\n    while priceOld+saved < priceNew\n        priceOld -= priceOld * loss \/ 100.0\n        priceNew -= priceNew * loss \/ 100.0\n        saved  += saving\n        months += 1\n        loss += 0.5 if months % 2 > 0\n    end\n    [months, (priceOld + saved - priceNew).round.to_i]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45905,"user_id":50,"body":"def nb_months(o, n, spm, l)\n  s=0\n  m=0\n  while s<n-o\n    s+=spm\n    m+=1\n    if m%2==0\n      l+=0.5\n      end\n    n=n.to_f*(1-l\/100.0)\n    o=o.to_f*(1-l\/100.0)\n    end\n  [m,(s+o-n).round]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45906,"user_id":1474,"body":"def nb_months(priceOld, priceNew, saving, loss)\n  return [0, priceOld - priceNew] if priceOld >= priceNew\n  m, s = 0, 0\n  loop do\n    priceOld -= priceOld * (loss \/ 100.0)\n    priceNew -= priceNew * (loss \/ 100.0)\n    s += saving\n    m += 1\n    return [m, (priceOld + s - priceNew).round] if priceOld + s >= priceNew\n    loss += 0.5 if m.odd?\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45907,"user_id":527,"body":"require \"big\"\n\ndef nb_months(price_old, price_new, saving, loss)\n  months = 0\n  have = 0.to_big_r\n  need = price_new.to_big_r - price_old.to_big_r\n  saving = saving.to_big_r\n  loss = loss.to_big_r \/ 100\n  loop do\n    return [months, (have - need).round] if have >= need\n    months += 1\n    have += saving\n    need *= 1 - loss\n    loss += BigRational.new(5, 1000) if months.odd?\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45908,"user_id":null,"body":"def nb_months(priceOld, priceNew, saving, loss)\n  month = 0\n  total_savings = 0\n  balance = total_savings + priceOld - priceNew\n  while balance < 0\n    # wait another month\n    month += 1\n    total_savings += saving\n    loss_factor = (100.0 - loss) \/ 100.0\n    priceOld *= loss_factor\n    priceNew *= loss_factor\n    if month % 2 == 1\n      loss = loss + 0.5  \n    end\n    balance = total_savings + priceOld - priceNew\n  end\n  [month, balance.round(0).to_i]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45909,"user_id":null,"body":"def nb_months(priceOld, priceNew, saving, loss)\n    needed, saved, n = priceNew - priceOld, 0, 0\n    while needed > saved\n      n += 1\n      needed *= (1.0 - loss * 0.01)\n      saved += saving\n      loss += 0.5 * (n % 2)\n    end\n    [n, (saved - needed).round]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45910,"user_id":null,"body":"def nb_months(priceOld, priceNew, saving, loss)\n    months=0\n    while priceOld+saving*months < priceNew     \n      months+=1\n      priceOld-=(priceOld*loss\/100)\n      priceNew-=(priceNew*loss\/100)\n      loss+=0.5 if months.odd?\n    end\n    saving=(0.5+priceOld+saving*months-priceNew).to_i\n    [months,saving]\nend\n\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45911,"user_id":null,"body":"LOSS_INCREASE = 0.5 \/ 100.0\n\ndef nb_months(priceOld, priceNew, saving, loss)\n  loss \/= 100.0\n  money = 0\n  months = 0\n  \n  loop do\n    money = priceOld + (saving * months)\n    \n    break if money >= priceNew\n    \n    months += 1\n    loss = (loss + LOSS_INCREASE).round(4) if months.even?\n    \n    priceOld -= (priceOld * loss)\n    priceNew -= (priceNew * loss)\n  end\n  \n  [months,(money - priceNew).round.to_i]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"554b4ac871d6813a03000035":[{"id":45912,"user_id":null,"body":"def high_and_low(numbers)\n  numbers.split(\" \").minmax_by(&.to_i).reverse.join(\" \")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45913,"user_id":null,"body":"def high_and_low(numbers)\n  arr = numbers.split.map(&.to_i)\n  \"#{arr.max} #{arr.min}\"\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45914,"user_id":null,"body":"def high_and_low(numbers)\n  num_array = numbers.split(' ').map{ |e| e.to_i32 }\n  \"#{num_array.max} #{num_array.min}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45915,"user_id":1640,"body":"def high_and_low(numbers)\n  n = numbers.split(\" \").map {|x| x.to_i}.sort\n  \"#{n.last} #{n.first}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45916,"user_id":1258,"body":"def high_and_low(numbers)\n  min, max = numbers.split.map { |x| x.to_i }.minmax\n  \"#{max} #{min}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45917,"user_id":1474,"body":"def high_and_low(numbers)\n  a = numbers.split.map(&.to_i)\n  \"#{a.max} #{a.min}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45918,"user_id":null,"body":"def high_and_low(numbers)\n  n = numbers.split.map(&.to_i)\n  \"#{n.max} #{n.min}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45919,"user_id":null,"body":"def high_and_low(numbers)\n  numbers.split(' ').map(&.to_i32).minmax.reverse.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45920,"user_id":null,"body":"def high_and_low(numbers)\n  numbers_array = numbers.split(' ').map {|n| n.to_i}\n  return \"#{numbers_array.max} #{numbers_array.min}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45921,"user_id":null,"body":"def high_and_low(numbers)\n  #your code here\n  int_nums = numbers.split(\" \").map(&.to_i)\n  \"#{int_nums.max} #{int_nums.min}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"554e4a2f232cdd87d9000038":[{"id":45922,"user_id":527,"body":"def dna_strand(dna)\n  dna.tr(\"ATCG\", \"TAGC\")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45923,"user_id":1403,"body":"def dna_strand(dna)\n  dna.tr(\"ATGC\", \"TACG\")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45924,"user_id":null,"body":"def dna_strand(dna)\n  dna.chars.map { |char|\n    case char\n    when 'A'\n      'T'\n    when 'T'\n      'A'\n    when 'C'\n      'G'\n    when 'G'\n      'C'\n    end\n  }.join(\"\")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45925,"user_id":null,"body":"def dna_strand(dna)\n  dna= dna.gsub(\"A\",\"t\").gsub(\"T\",\"a\").gsub(\"G\",\"c\").gsub(\"C\",\"g\")\n  return dna.gsub(\"t\",\"T\").gsub(\"a\",\"A\").gsub(\"g\",\"G\").gsub(\"c\",\"C\")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45926,"user_id":null,"body":"def dna_strand(dna)\n  dna.chars.map do |c|\n    case c\n    when 'A'; 'T'\n    when 'T'; 'A'\n    when 'G'; 'C'\n    when 'C'; 'G'\n    end\n  end\n  .join\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45927,"user_id":null,"body":"def dna_strand(dna)\n  dna.tr(\"ACGT\", \"TGCA\")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45928,"user_id":null,"body":"def dna_strand(dna)\n  comp = \"\"\n  dna.chars.each do |c|\n    case c\n    when 'A'\n      comp += 'T'\n    when 'T'\n      comp += 'A'\n    when 'C'\n      comp += 'G'\n    when 'G'\n      comp += 'C'\n    end\n  end\n  return comp\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45929,"user_id":null,"body":"def dna_strand(dna)\n  dna.tr(\"ACTG\", \"TGAC\")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45930,"user_id":null,"body":"def dna_strand(dna)\n  dna.gsub(\/(T|A|G|C)\/, {\"T\": \"A\", \"A\": \"T\", \"G\": \"C\",\"C\": \"G\"})\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45931,"user_id":null,"body":"def dna_strand(dna)\n  dna.gsub(\/(T|A|C|G)\/, {\"T\": \"A\", \"A\": \"T\", \"C\": \"G\", \"G\": \"C\"});\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"554f76dca89983cc400000bb":[{"id":45932,"user_id":492,"body":"def sol_equa(n : Int64)\n  \tres = [] of Array(Int64)\n    1_i64.upto(Math.sqrt(n)) do |i_i64|\n        if (n % i_i64) == 0\n            p = i_i64; q = n \/ i_i64\n            if ((p + q) % 2 == 0) && ((q - p) % 4 == 0)\n                res << [(p + q) \/ 2, (q - p) \/ 4]\n            end\n        end\n    end\n    res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45933,"user_id":53,"body":"include Math\n\ndef sol_equa(n : Int64)\n  \n  \t#ans = Array(Array(Int64)).new \n    ans = [] of Array(Int64)\n  \n    m = Math.sqrt(n).floor.to_i\n    (1..m).map{|i| \n        d = n.to_f \/ i\n        x = (d+i) \/ 2\n        y = (d-i) \/ 4\n        if (d%1) == 0 && (x%1) == 0 && (y%1) == 0\n            ans << [x.to_i64, y.to_i64]\n        end\n    }\n  \n    ans\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"555086d53eac039a2a000083":[{"id":45934,"user_id":421,"body":"def lovefunc( flower1, flower2 ) \n  (flower1 + flower2).odd?\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45935,"user_id":null,"body":"def lovefunc( flower1, flower2 ) \n  #your code here\n  return flower1 % 2 != flower2 % 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45936,"user_id":null,"body":"def lovefunc( flower1, flower2 ) \n  (flower1 - flower2) % 2 == 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45937,"user_id":null,"body":"def lovefunc( flower1, flower2 ) \n  #your code here\n  return ((flower1%2 == 0 && flower2%2!=0) | (flower2%2 == 0 && flower1%2!=0))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45938,"user_id":null,"body":"def lovefunc( flower1, flower2 ) \n  #your code here\n   return (flower1 + flower2) % 2 == 1;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45939,"user_id":null,"body":"def lovefunc( flower1, flower2 ) \n  flower1 % 2 != flower2 % 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45940,"user_id":null,"body":"def lovefunc( flower1, flower2 ) \n    (flower1+flower2)%2 != 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45941,"user_id":null,"body":"def lovefunc( flower1, flower2 ) \n    (flower1+flower2)%2 != 0 ? true : false\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45942,"user_id":null,"body":"def lovefunc( flower1, flower2 ) \n  (flower1 % 2 == 0 && flower2 % 2 == 1) ||\n  (flower1 % 2 == 1 && flower2 % 2 == 0)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45943,"user_id":null,"body":"def lovefunc( flower1, flower2 ) \n  flower1.odd? && flower2.even? || flower1.even? && flower2.odd?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5552101f47fc5178b1000050":[{"id":45944,"user_id":492,"body":"def dig_pow(n, p)\n    s = 0\n    n.to_s.chars.each_with_index do |x, i|\n        s += x.to_i ** (i + p)\n    end\n    if (s % n == 0) \n    \ts.fdiv(n).to_i \n  \telse \n  \t\t-1 \n\tend\nend\n","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45945,"user_id":759,"body":"def dig_pow(n, p)\n    f = n.to_s.chars.map(&.to_i).each_with_index.sum { |d, i| d ** (p + i) }\n    f % n == 0 ? f \/ n : -1\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45946,"user_id":null,"body":"require \"big\"\n\ndef dig_pow(n, p)\n  digits = n.digits.map(&.to_big_i).reverse\n  total = digits.map_with_index { |d, i| d ** (p + i) }.sum\n  (total % n == 0) ? total \/\/ n : -1\nend\n\n","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45947,"user_id":null,"body":"def dig_pow(n, p)\n  sum = n.digits.reverse.map_with_index(p) { |n, i| n ** i }.sum\n  sum % n == 0 ? sum \/ n : -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45948,"user_id":null,"body":"def dig_pow(n, p)\n    # your code\n  pow_sum = n.digits.reverse.map_with_index{ |m, i| m**(p+i) }.sum(0)\n  pow_sum % n == 0 ? pow_sum \/ n : -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45949,"user_id":null,"body":"def dig_pow(n : Int32, p : Int32 = 1) : Int32\n    p-=1\n    divmod = n.to_s.chars.sum(){|i| i.to_i ** (p+=1)}.divmod(n)\n\n    return divmod[1] == 0 ? divmod[0] : -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45950,"user_id":null,"body":"def dig_pow(n : Int32, p : Int32 = 1) : Int32\n    p-=1\n    divmod = n.to_s.chars.reduce(0){|acc, i| acc += i.to_i ** (p+=1)}.divmod(n)\n    return divmod[1] == 0 ? divmod[0] : -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45951,"user_id":null,"body":"def dig_pow(n : Int32, p : Int32 = 1) : Int32\n    p-=1\n    divmod = n.to_s.chars.reduce(0){|acc, i| acc += i.to_i ** (p+=1)}.divmod(n)\n    return divmod[0] if(divmod[1] == 0)\n    return -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45952,"user_id":null,"body":"def dig_pow(n, p)\n  total = n.to_s\n    .split(\"\")\n    .map_with_index(p) { |d, j| d.to_i ** j }\n    .sum\n  total % n == 0 ? total \/\/ n : -1\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45953,"user_id":421,"body":"def dig_pow(n : Int32, p : Int32) : (Float64 | Int32)\n   a = 1.0 * n.to_s.chars.map_with_index{|x, i| x.to_i ** (p + i)}.sum \/ n\n   a % 1 == 0 ? a : -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"555624b601231dc7a400017a":[{"id":45954,"user_id":null,"body":"def josephus_survivor(n, k)\n  n == 1 ? 1 : (josephus_survivor(n - 1, k) + k - 1) % n + 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45955,"user_id":50,"body":"def josephus_survivor(n, k)\n  a = 0\n  (2..n).each do |i|\n    a = (a+k)%i\n  end\n  a+1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45956,"user_id":null,"body":"def josephus_survivor(n, k)\n  if n == 1\n    1\n  else\n    (josephus_survivor(n - 1, k) + k - 1) % n + 1\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45957,"user_id":null,"body":"def josephus_survivor(n, k)\n  ring = (1..n).to_a\n  while ring.size > 1\n    ring.rotate!(k - 1).shift\n  end\n  ring.last\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45958,"user_id":null,"body":"def josephus_survivor(n, k)\n  i = 0\n  s = (1..n).to_a\n  while s.size > 1\n    i = (i+k-1) % s.size\n    s.delete_at(i)\n  end\n  s.first\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45959,"user_id":null,"body":"def josephus_survivor(n, k)\n  (1..n).reduce(1) { |a, b| (a + k) % b } + 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45960,"user_id":null,"body":"def josephus_survivor(n, k)\n  pointer = 0\n  range = Array.new(n) { |i| i+1 }\n  while range.size > 1\n    pointer = pointer + k\n    while pointer > range.size\n      pointer = pointer - range.size\n    end\n    pointer -= 1\n    range.delete_at(pointer)\n  end\n  range[0]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45961,"user_id":759,"body":"def g(n, k)\n  n == 1 ? 0 : (g(n - 1, k) + k) % n\nend\n\ndef josephus_survivor(n, k)\n  g(n, k) + 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45962,"user_id":76,"body":"def josephus_survivor(n, k)\n  (1..n).reduce(1) { |s, i| (s + k - 1) % i + 1 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45963,"user_id":null,"body":"def josephus_survivor(n, k)\n  alive = (1..n).to_a\n  idx = k - 1\n  loop do\n    return alive[0] if alive.size == 1\n    idx %= alive.size\n    alive.delete_at(idx)\n    idx += k - 1\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5556282156230d0e5e000089":[{"id":45964,"user_id":527,"body":"def dna_to_rna(dna)\n  dna.gsub('T', 'U')\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45965,"user_id":1072,"body":"def dna_to_rna(dna) dna.split(\"\").map{|x| x==\"T\" ? \"U\" : x}.join(\"\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45966,"user_id":null,"body":"def dna_to_rna(dna)\n  # if dna exist and dna not empty string\n  if dna && dna !=\"\"\n    # check if T exist in DNA\n    if dna.includes?(\"T\")\n      # using gsub to replace T with U\n      dna = dna.gsub(\"T\", \"U\")\n    end\n  end\n  p! dna\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45967,"user_id":null,"body":"def dna_to_rna(dna)\n  return dna.gsub(\/T\/i,'U')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45968,"user_id":null,"body":"def dna_to_rna(dna)\n  dna.gsub(\/T\/, 'U')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45969,"user_id":null,"body":"def dna_to_rna(dna)\n  return dna.gsub(\"T\", \"U\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45970,"user_id":53,"body":"def dna_to_rna(dna)\n  dna.gsub(\/[T]\/, 'U')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45971,"user_id":null,"body":"def dna_to_rna(dna)\n  dna.tr(\"T\", \"U\")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45972,"user_id":null,"body":"def dna_to_rna(dna)\n  rna = \"\"\n  dna.each_char do |blib|\n    if blib == 'T'\n      rna += 'U'\n    else\n      rna += blib\n    end\n  end\n  rna\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"555bfd6f9f9f52680f0000c5":[{"id":45973,"user_id":17,"body":"def reverse_number(n)\n  n < 0 ? -reverse_number(-n) : n.to_s.reverse.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45974,"user_id":1072,"body":"def reverse_number(n) return n<0 ? -reverse_number(-n) : n.to_s.split(\"\").reverse.join.to_i end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45975,"user_id":53,"body":"def reverse_number(n)\n  f = n < 0 ? -1 : 1\n  n *= f\n  m = 0\n  while (n > 0)\n    d = n % 10\n    n = (n\/10).to_i\n    m *= 10\n    m += d\n  end\n  m * f\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45976,"user_id":1624,"body":"def reverse_number(n)\n  return -reverse_number(-n) if n < 0\n  n.to_s.reverse.to_i\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45977,"user_id":null,"body":"def reverse_number(n)\n  return -reverse_number(-n) if n < 0\n  m = 0\n  while n > 0\n    m = m * 10 + n % 10\n    n \/= 10\n  end\n  m\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45978,"user_id":null,"body":"def reverse_number(n)\n  sign = n.sign\n  n.abs.to_s.reverse.to_i * sign\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45979,"user_id":null,"body":"def reverse_number(n)\n  res = n.abs.to_s.chars.reverse.join.to_i\n  n < 0 ? 0 - res : res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45980,"user_id":645,"body":"def reverse_number(n)\n  n.abs.to_s.reverse.to_i * (n < 0 ? -1 : 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45981,"user_id":null,"body":"def reverse_number(n)\n  n.abs.to_s.reverse.to_i * n.sign\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45982,"user_id":null,"body":"def reverse_number(n)\n  t = n.to_s.split(\"\").reverse\n  n < 0 ? -(t[0..-2].join.to_i) : t.join.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"556196a6091a7e7f58000018":[{"id":45983,"user_id":null,"body":"def largest_pair_sum(numbers)\n  numbers.sort[-2..].sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45984,"user_id":53,"body":"def largest_pair_sum(numbers)\n  numbers.sort { |a, b| b <=> a }[0..1].sum()\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45985,"user_id":null,"body":"def largest_pair_sum(numbers)\n  sorted = numbers.sort\n  sorted[-1] + sorted[-2]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45986,"user_id":null,"body":"def largest_pair_sum(numbers)\n  numbers.sort!{ |a, b| b <=> a }\n  return numbers[0] + numbers[1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45987,"user_id":null,"body":"def largest_pair_sum(numbers)\n  new_arr = numbers.sort()\n  return new_arr.pop() + new_arr.pop()\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45988,"user_id":null,"body":"def largest_pair_sum(numbers)\n  b = numbers.sort\n  b[-2] + b[-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45989,"user_id":209,"body":"def largest_pair_sum(s)\n  s.sort.last(2).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45990,"user_id":421,"body":"def largest_pair_sum(numbers)\n  numbers.sort.last(2).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55685cd7ad70877c23000102":[{"id":45991,"user_id":421,"body":"def make_negative(num)\n  -num.abs\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45992,"user_id":1474,"body":"def make_negative(num)\n  num < 0 ? num : -num\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45993,"user_id":null,"body":"def make_negative(num)\n  return num<0 ? num: -num;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45994,"user_id":null,"body":"def make_negative(num)\n  -1 * num.abs\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45995,"user_id":null,"body":"def make_negative(num)\n  return num > 0 ? -num : num\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45996,"user_id":null,"body":"def make_negative(num)\n  #your code here\n  if num > 0\n    num = -num\n  end\n  num\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45997,"user_id":null,"body":"def make_negative(num)\n  if num > 0\n    return num * -1\n  end\n  return num\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45998,"user_id":50,"body":"def make_negative(num)\n  [num,-num].min\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":45999,"user_id":null,"body":"def make_negative(num)\n  num.abs * -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46000,"user_id":null,"body":"def make_negative(num)\n  if num < 0\n     num\n  else\n     -num\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"556cebcf7c58da564a000045":[{"id":46001,"user_id":168,"body":"def number_of_rectangles(m, n)\n  (1..m).sum * (1..n).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46002,"user_id":713,"body":"def number_of_rectangles(m, n)\n  (m * m + m) * (n * n + n) \/ 4\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46003,"user_id":518,"body":"def number_of_rectangles(m, n)\n    return (m*n*(m+1)*(n+1))\/4;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46004,"user_id":50,"body":"def number_of_rectangles(m, n)\n  (m * n * (n + 1) * (m + 1)) \/ 4\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46005,"user_id":53,"body":"def number_of_rectangles(m, n)\n  m * n * (m + 1) * (n + 1) \/ 4\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46006,"user_id":527,"body":"def number_of_rectangles(m, n)\n  (m * (m + 1) * n * (n + 1)) \/\/ 4\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46007,"user_id":421,"body":"def number_of_rectangles(m, n)\n  m * (m + 1) * n * (n + 1) \/ 4\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"556deca17c58da83c00002db":[{"id":46008,"user_id":null,"body":"def tribonacci(signature,n)\n  k = signature\n  while k.size < n\n    k << k.last(3).sum\n  end\n  k.first(n)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46009,"user_id":527,"body":"def tribonacci(signature : Array(T), n) forall T\n  res = [] of T\n  a, b, c = signature\n  n.times do\n    res << a\n    a, b, c = b, c, a + b + c\n  end\n  res\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46010,"user_id":null,"body":"def tribonacci(signature,n)\n  trib = [] of typeof(signature[1])\n  \n  (0...n).each do |i|\n    \n    if i > 2\n      trib << trib[i-1] + trib[i-2] + trib[i-3] \n    else\n      trib << signature[i] \n    end\n  end\n    \n  return trib\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46011,"user_id":null,"body":"def tribonacci(signature, n)\n  result = signature.dup\n  while result.size < n\n    result << result[-3..].sum\n  end\n  result[...n]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46012,"user_id":50,"body":"def tribonacci(signature,n)\n  if n==0\n    return [] of Int32\n    end\n  a,b,c=signature\n  o=[a,b,c]\n  while o.size<n\n    d=a+b+c\n    a,b,c=b,c,d\n    o.push(d)\n    end\n  o[0..n-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46013,"user_id":null,"body":"def tribonacci(signature : Array, n : Int32) : Array\n  3.upto(n) do\n    signature << signature[-1] + signature[-2] + signature[-3]\n  end\n  \n  n == 0 ? Array(Nil).new : signature[0..n-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46014,"user_id":null,"body":"def tribonacci(signature,n)\n  (n - 3).times { signature.push(signature[-3..-1].sum) }\n  signature[0...n]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46015,"user_id":null,"body":"def tribonacci(signature,n)\n  output = signature.dup\n  while output.size < n\n    output << output[-1] + output[-2] + output[-3]\n  end\n  output[0...n]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46016,"user_id":null,"body":"def tribonacci(signature, n)\n  return signature[0...n] if n <= signature.size\n  a, b, c = signature[0..3]\n  (3...n).each { |i|\n    signature << a + b + c\n    a, b, c = signature[i - 2, i + 1]\n  }\n  signature\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46017,"user_id":null,"body":"def tribonacci(signature, n)\n  puts \"n=#{n} #{signature}\"\n  return signature[0...n] if n <= 3\n  \n  ret = Array.new(n+1, signature[0] * 0)\n  \n  ret[0..3] = signature\n  ( 3...n ).map { |i|     \n    ret[i] = ret[i-1] + ret[i-2] + ret[i-3]\n  }\n  ret[0...n]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"556e0fccc392c527f20000c5":[{"id":46018,"user_id":421,"body":"def xbonacci(s,n)\n  (0...n - s.size).each do |i|\n    s << s[i..i + s.size].sum\n  end\n  s[0...n]\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 16:12:26"},{"id":46019,"user_id":null,"body":"def xbonacci(s, n)\n  result = s.dup\n  while result.size < n\n    result << result[-s.size..-1].sum\n  end\n  result[0...n]\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 16:09:57"},{"id":46020,"user_id":null,"body":"def xbonacci(s,n)\n  if s.size >= n\n    return s[0, n]\n  end\n  x = s.size\n  until s.size == n\n    s << s[-x, x].sum\n  end\n  s\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 16:09:51"},{"id":46021,"user_id":1624,"body":"def xbonacci(s,n)\n  z = s.size\n  result = s.dup\n  while result.size < n\n    result.push result.last(z).sum\n  end\n  result.first(n)\nend\n","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 16:11:20"},{"id":46022,"user_id":null,"body":"def xbonacci(s,n)\n  result = s.dup\n  while result.size < n \n    next_element = s.sum\n    result.push(next_element)\n    s.push(next_element).shift\n  end\n  result.first(n)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 16:09:35"},{"id":46023,"user_id":null,"body":"def xbonacci(s, n)\n  len = s.size\n  (0..n).each { |i|\n    return s[0, n] if s.size >= n\n    s << s[i, len].sum\n  }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 16:09:35"},{"id":46024,"user_id":645,"body":"def xbonacci(s, n)\n  a = s.dup.first(n)\n  until a.size == n\n    a << a[-s.size..-1].sum\n  end\n  a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 16:09:35"},{"id":46025,"user_id":null,"body":"def xbonacci(s,n)\n  start = s.size\n  if n < start\n    return s[0, n]\n  end\n  n -= start\n\twhile n > 0\n    sum = s[-start, start].sum\n    s << sum\n    n -= 1\n  end\n  s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 16:09:35"},{"id":46026,"user_id":null,"body":"def xbonacci(s, n)\n  fib_nb = s.size\n  if n <= fib_nb\n    s[0, n]\n  else\n    (fib_nb...n).each do |i|\n      s << s[i - fib_nb, fib_nb].sum\n    end\n    s\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 16:09:35"},{"id":46027,"user_id":2563,"body":"def xbonacci(s, n)\n\n  return [] of Int32 if n == 0\n  return s[0..n-1] if s.size > n\n\n  last = s.clone\n  f = s.clone\n  \n  current = 0\n  \n  (s.size+1..n).each do\n    current = last.sum\n    f.push current\n    \n    last.shift\n    last.push current\n    \n  end\n  f\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 16:09:35"}],"5574835e3e404a0bed00001b":[{"id":46028,"user_id":421,"body":"def get_participants(handshakes)\n  handshakes.zero? ? 0 : ((1 + (1 + 8 * handshakes) ** 0.5) \/ 2).ceil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46029,"user_id":48,"body":"def get_participants(handshakes)\n  (((handshakes * 8 + 1) ** 0.5 + 1) \/ 2).ceil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46030,"user_id":53,"body":"def get_participants(handshakes)\n  ((1 + (1 + 8 * handshakes) ** 0.5) \/ 2.0).ceil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46031,"user_id":50,"body":"def get_participants(h)\n  (Math.sqrt(2*h+0.25)+0.5).ceil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"557b5e0bddf29d861400005d":[{"id":46032,"user_id":50,"body":"def converter(mpg) \n  (1.609344*mpg\/4.54609188).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46033,"user_id":53,"body":"def converter(mpg) \n  (mpg * 0.354006043538).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46034,"user_id":527,"body":"def converter(mpg)\n  (mpg * 0.354006044).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46035,"user_id":421,"body":"def converter(mpg) \n  (mpg * 1.609344 \/ 4.54609188).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5583090cbe83f4fd8c000051":[{"id":46036,"user_id":421,"body":"def digitize(n)\n  n.to_s.chars.reverse.map {|x| x.to_i}\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46037,"user_id":null,"body":"def digitize(n)\n  n.to_s.chars.map do | i |\n    i.to_i\n  end.reverse\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46038,"user_id":1474,"body":"def digitize(n)\n  n.to_s.reverse.chars.map { |c| c.to_s.to_i }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46039,"user_id":null,"body":"def digitize(n)\n  n.to_s.split(\"\").reverse.map &.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46040,"user_id":null,"body":"def digitize(n : Number) : Array(Int32)\n  n.to_s\n   .split(\"\")\n   .reverse\n   .map{ |n| n.to_i }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46041,"user_id":168,"body":"def digitize(n)\n  n.to_s.reverse.chars.map &.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46042,"user_id":null,"body":"def digitize(n)\n\n  n.to_s.split(\"\").reverse.map{ |el| el.to_i }\n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46043,"user_id":null,"body":"def digitize(n)\n  if n==0\n    return [0]\n  end;\n  arr = [] of typeof(n);\n  while n != 0\n    arr<<n%10;\n    n\/=10;\n  end;\n  return arr;\nend;","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46044,"user_id":53,"body":"def digitize(n)\n  ans = Array(Int64).new\n  m = n\n  while ans.size == 0 || m > 0\n    ans << (m % 10).to_i64\n    m = m \/ 10\n  end\n  ans\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46045,"user_id":null,"body":"def digitize(n)\n  n.to_s.chars.reverse.map {|c| c.to_i}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"558fc85d8fd1938afb000014":[{"id":46046,"user_id":421,"body":"def sum_two_smallest_numbers(numbers : Array(Int)) : Int32\n  numbers.sort[..1].sum\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46047,"user_id":null,"body":"def sum_two_smallest_numbers(numbers : Array(Int)) : Int32\n  numbers.sort[0..1].sum\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5592e3bd57b64d00f3000047":[{"id":46048,"user_id":null,"body":"def find_nb(m : Int64)\n  n = 1_i64\n  while m > 0\n    m = m - n**3\n    n += 1\n  end\n  m == 0 ? n-1 : -1\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46049,"user_id":492,"body":"def find_nb(m : Int64)\n    n = 1_i64\n    while m > 0\n        m = m - n * n * n\n        n += 1\n    end\n    m == 0 ? n - 1 : -1\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46050,"user_id":null,"body":"def find_nb(m : Int64)\n  r = (Math.sqrt(Math.sqrt(m) * 8 + 1) - 1) \/ 2\n  r % 1 == 0 ? r : -1\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46051,"user_id":168,"body":"def find_nb(m : Int64)\n  n = Math.sqrt(2 * Math.sqrt(m)).floor\n  n * n * (n + 1) * (n + 1) \/ 4 == m ? n : -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46052,"user_id":53,"body":"def find_nb(m : Int64)\n  r = Math.sqrt(0.25 + 2 * Math.sqrt(m)) - 0.5\n  n = r.to_i\n  return n if n == r\n  -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46053,"user_id":null,"body":"def find_nb(m : Int64) : Int32\n  n = ((Math.sqrt(8 * Math.sqrt(m) + 1) - 1) \/ 2)\n  (n%1).zero? ? n.to_i : -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46054,"user_id":null,"body":"def find_nb(m : Int64)\n  res = Int64.new(0)\n  while m > 0\n    res += 1  \n    m -= res ** 3\n  end\n  m == 0 ? res : -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46055,"user_id":421,"body":"def find_nb(m : Int64)\n    n = 0_i64\n    vol = 0_i64\n    while vol < m\n        n += 1\n        vol += n ** 3\n    end\n    vol != m ? -1 : n\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46056,"user_id":null,"body":"module Cubes\n  @@c_cache = {} of Int32 => Int64\n  \n  \n  def self.compute(n : Int32) : Int64\n    return 1_i64 if n == 1\n    \n    @@c_cache[n] ||= n.to_i64 ** 3 + compute(n - 1)\n  end\n  \n  def self.solve(m : Int64, n = 1)\n    k = compute(n)\n    \n    return solve(m, n + 1) if k < m\n    return n if k == m\n    return -1 if k > m\n  end\nend\n\ndef find_nb(m : Int64)\n  Cubes.solve(m)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46057,"user_id":1474,"body":"def find_nb(m : Int64)\n  num = Math.sqrt(m)\n  return -1 unless num % 1 == 0\n  num *= 2\n  res = (Math.sqrt(num)).floor\n  (res * (res+1) \/ 2) ** 2 == m ? res : -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"559536379512a64472000053":[{"id":46058,"user_id":null,"body":"def play_pass(str, n)\n    str.chars\n      .map do |char|\n        if char.in_set? \"A-Z\"\n          'A' + (char + n - 0x41).ord % 26\n        elsif char.digit?\n          '9' - char.ord + 0x30\n        else\n          char\n        end\n      end\n      .map_with_index { |char, i| (i.odd?) ? char.downcase : char.upcase }\n      .reverse\n      .join\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 17:47:56"},{"id":46059,"user_id":null,"body":"def play_pass(str, n)\n  a_ord   = 'A'.ord\n  max_ord = 'Z'.ord - a_ord + 1\n  \n  pass = String.build(str.size) do |sb|\n    str.each_char_with_index do |c,i|\n      if c.letter?\n        c = (((c.ord - a_ord + n) % max_ord) + a_ord).chr\n        c = i.odd? ? c.downcase : c.upcase\n      elsif c.ascii_number?\n        c = (9 - c.to_i).to_s\n      end\n      \n      sb << c\n    end\n  end\n  \n  pass.reverse\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 17:48:07"},{"id":46060,"user_id":492,"body":"def play_pass(str, n)\n    res = \"\"\n    str.chars.to_a.each_with_index do |x, i|\n        if (x.ord >= 'A'.ord  && x.ord <= 'Z'.ord)\n            c = (((x.ord - 'A'.ord + n) % 26) + 'A'.ord).chr \n        else \n            if (x.ord >= '0'.ord  && x.ord <= '9'.ord)\n                c = (105 - x.ord).chr\n            else\n                c = x \n            end\n        end\n        if (i.odd?) \n            res += c.downcase \n        else \n            res += c.upcase \n        end\n    end\n    res.reverse\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46061,"user_id":null,"body":"ALPHABET = (\"A\"..\"Z\").to_a\n\ndef play_pass(str, n)\n  str.upcase.tr(ALPHABET.join, ALPHABET.rotate(n).join)\n    .each_char.map_with_index do |c, i|\n      r = c.to_i? ? (9 - c.to_i).to_s : c.to_s\n      r = c.to_s.downcase if i.odd? && !c.to_i?\n      r\n    end.reverse.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46062,"user_id":null,"body":"def play_pass(str, n)\n  alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  str\n    .gsub(\/[a-zA-Z]\/) { |c| alpha[(alpha.index(c).not_nil! + n) % 26] }\n    .gsub(\/\\d\/) { |d| 9 - d.to_i }\n    .chars\n    .map_with_index { |c, i| i % 2 == 0 ? c : c.downcase }\n    .reverse\n    .join\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46063,"user_id":421,"body":"def play_pass(str, n)\n  s = str.gsub(\/[A-Z\\d]\/){|x| \/\\d\/ === x ? (x.to_i - 9).abs : ((x.codepoints[0] - 65 + n) % 26 + 65).chr}\n  s.chars.map_with_index{|x, i| i.odd? ? x.downcase : x}.reverse.join\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46064,"user_id":null,"body":"def play_pass(str, n)\n  String.build(str.size) do |buff|\n    ch_l = 'a'\n    ch_r = 'z'\n    letters = ch_l..ch_r\n    numbers = '0'..'9'\n    i = 0\n    # Downcase and reverse\n    str.downcase.reverse.each_char do |char|\n      buff << if letters.includes? char\n        # Shift letter\n        ((i % 2 == str.size % 2) ? ch_l : ch_l.upcase) + ((char.ord - ch_l.ord + n) % (ch_r.ord - ch_l.ord + 1))\n      elsif numbers.includes? char\n        # Shift number\n        9 - (char.ord - '0'.ord)\n      else\n        char\n      end\n      i += 1\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46065,"user_id":null,"body":"def play_pass(str, n)\n  pf : String = \"\"\n\n  String.build do |s|\n    str.each_char_with_index do |c, i|\n      offset = (c.ord + n) > 90 ? 26 : 0\n      \n      case c.to_s\n      when \/[[:alpha:]]\/i\n        if i.odd?\n          s << (c + n - offset).downcase\n        else\n          s << (c + n - offset).upcase\n        end\n      when \/[[:digit:]]\/\n        s << 9 - c.to_i\n      else\n        s << c\n      end\n    end\n  end.reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46066,"user_id":null,"body":"# This version uses String.build since it's much faster than concatenation.\ndef play_pass(str, n) : String\n    pf = String.build do |s|\n      str.each_char_with_index do |c, i|\n        case c.to_s\n        when \/[[:alpha:]]\/i\n          offset = (c.upcase.ord + n) > 90 ? 26 : 0\n          s << (c.upcase + n - offset).to_s\n        when \/[[:digit:]]\/\n          s << (9 - c.to_i).to_s\n        else\n          s << c.to_s\n        end\n      end\n    end\n    \n    copy = String.build do |s|\n      pf.each_char_with_index do |c, i|\n        if i == 0 || i % 2 == 0\n          s << c.upcase\n        else\n          s << c.downcase\n        end\n      end\n    end\n    \n    copy.reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46067,"user_id":null,"body":"def play_pass(str, n) : String\n  pf = \"\"\n\n  str.each_char_with_index do |c, i|\n    case c.to_s\n    when \/[[:alpha:]]\/i\n      offset = (c.upcase.ord + n) > 90 ? 26 : 0\n      pf = pf + (c.upcase + n - offset).to_s\n    when \/[[:digit:]]\/\n      pf = pf + (9 - c.to_i).to_s\n    else\n      pf = pf + c.to_s\n    end\n  end\n\n  copy = \"\"\n  pf.each_char_with_index do |c, i|\n    if i == 0 || i % 2 == 0\n      copy = copy + c.upcase\n    else\n      copy = copy + c.downcase\n    end\n  end\n\n  copy.reverse\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"559760bae64c31556c00006b":[{"id":46068,"user_id":421,"body":"def climb(n)\n  lst = [n]\n  while n != 1\n    lst.push(n \/\/ 2)\n    n \/\/= 2\n  end\n  lst.reverse()\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46069,"user_id":1624,"body":"def climb(n)\n  list = [n]\n  while list[0] != 1\n    list.unshift list[0].tdiv(2)\n  end\n  list\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46070,"user_id":null,"body":"def climb(n)\n  arr=Array(Int32).new\n  arr<<n\n  while n > 1\n    n=(n\/2).to_i\n    arr<<n\n  end\n  arr.sort\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46071,"user_id":null,"body":"def climb(n)\n  if n == 1\n    [1]\n  else\n    climb((n \/ 2).floor) + [n]\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46072,"user_id":1072,"body":"def climb(n) lst=n.to_s(2).split(\"\").map{|a| a.to_i}; (1..lst.size).map{|i| lst[0,i].reduce(0){|a,b| a*2+b}} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"559a28007caad2ac4e000083":[{"id":46073,"user_id":527,"body":"def perimeter(n : UInt64)\n  4_u64 * (fib(n + 3) - 1)\nend\n\ndef fib(n : UInt64)\n  a, b = 0_u64, 1_u64\n  n.times { a, b = b, a + b }\n  a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46074,"user_id":421,"body":"def perimeter(n : UInt64) : UInt64\n    lst = [1_u64, 1_u64]\n    while lst.size <= n\n      lst << lst[lst.size - 1] + lst[lst.size - 2]\n    end\n    4_u64 * lst.sum\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46075,"user_id":492,"body":"def fib(n : UInt64)\n  a = 1_u64; b = 1_u64;\n  while (n > 0)\n    tmp = a\n    a = b\n    b += tmp\n    n -= 1\n  end\n  a\nend\ndef perimeter(n : UInt64)\n    4_u64 * (fib(n + 2) - 1)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46076,"user_id":564,"body":"require \"big\"\n\ndef perimeter(n, a=BigInt.new(1), b=1, sum=0)\n  sum += a*4\n  n == 0 ? sum : perimeter(n-1, b, a+b, sum)\nend\n","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46077,"user_id":null,"body":"def perimeter(n : UInt64)\n    # your code\n  fib=[0_u64,1_u64] \n  while fib.size < n+2\n    fib.push(fib.last(2).sum)\n  end\n  (fib.sum)*4\nend\n\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46078,"user_id":null,"body":"def perimeter(n : UInt64)\n  i = j = 1_u64\n  value = 1_u64\n  n.times do\n      value+=j\n      i , j = j , i+j\n  end\n  return value*4\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46079,"user_id":53,"body":"require \"big\"\n\ndef perimeter(n : UInt64)\n  aux(n.to_big_i, 1.to_big_i, 1.to_big_i, 0.to_big_i)\nend\n\ndef aux(n : BigInt, a : BigInt, b : BigInt, sum : BigInt)\n  if n < 0 \n    sum \n  else\n    aux(n-1, b, a+b, sum+a*4)\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46080,"user_id":null,"body":"def perimeter(n : UInt64)\n  a = Array(UInt64).new(n + 1, 4)\n  (2..n).each{ |i| a[i] = a[i-2] + a[i-1] } || a.sum\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46081,"user_id":null,"body":"def perimeter(n : UInt64) : UInt64\n  b0  : UInt64= 0\n  b1  : UInt64= 1\n  acc : UInt64 = 0\n  (n + 1).times do\n    t  = b0 + b1\n    b0 = b1\n    b1 = t\n    acc += b0\n  end\n  puts\n  4u64 * acc\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46082,"user_id":null,"body":"def perimeter(n : UInt64)\n    fib = [1_u64, 1_u64]\n    (2..n).each do |i|\n      fib.push(fib[i-1] + fib[i-2])\n    end\n    fib.sum.* 4_u64   \nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"559b8e46fa060b2c6a0000bf":[{"id":46083,"user_id":492,"body":"def choose(n : UInt64, p : UInt64) : UInt64\n    if (p > n) \n      return 0_u64 \n    end\n    if (p > n - p) \n      p = n - p \n    end\n    nu_u64 = (n - p + 1_u64 .. n).reduce(1_u64){|m_u64, e| m_u64 * e}\n    de_u64 = (2_u64 .. p).reduce(1_u64){|m_u64, e| m_u64 * e}\n    nu_u64 \/ de_u64\nend\n\ndef diagonal(n : UInt64, p : UInt64) : UInt64\n    choose(n+1, p+1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46084,"user_id":492,"body":"def choose(n : UInt64, p : UInt64) : UInt64\n    if (p > n) \n      return 0_u64 \n    end\n    if (p > n - p) \n      p = n - p \n    end\n    nu_u64 = (n - p + 1_u64 .. n).reduce(1_u64){|m_u64, e| m_u64 * e}\n    de_u64 = (2_u64 .. p).reduce(1_u64){|m_u64, e| m_u64 * e}\n    nu_u64 \/ de_u64\nend\n\ndef diagonal(n : UInt64, p : UInt64) : UInt64\n    choose(n+1, p+1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46085,"user_id":53,"body":"require \"big\"\n\ndef choose(n : BigInt, k : BigInt) : BigInt\n  res = 1.to_big_i\n  (1..k).each {|i|\n    res = res * (n - i + 1) \/ i\n  }\n  res\nend\n\ndef diagonal(n : UInt64, p : UInt64) : UInt64\n  choose((n + 1).to_big_i, (p + 1).to_big_i).to_u64;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"559ce00b70041bc7b600013d":[{"id":46086,"user_id":527,"body":"def finance(n : UInt64)\n  n * (n + 1) * (n + 2) \/ 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46087,"user_id":492,"body":"def finance(n : UInt64)\n    n * (n * n + 3 * n + 2) \/ 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46088,"user_id":421,"body":"def finance(n : UInt64)\n    n * (n + 1) * (n + 2) \/ 2.0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46089,"user_id":1474,"body":"def finance(n : UInt64)\n  (0..n).reduce(0) do |s, i|\n    n1 = i * 2\n    n2 = n + i\n    s += ((n2 * (n2 + 1) \/ 2) - (n1 * (n1 - 1) \/ 2))\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46090,"user_id":53,"body":"def finance(n : UInt64)\n    return n * (n + 1) * (n + 2) \/ 2;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"559e3224324a2b6e66000046":[{"id":46091,"user_id":53,"body":"def sumin(n : Int64)\n    n * (n+1) * (2 * n + 1) \/ 6\nend\ndef sumax(n : Int64)\n    n * (n+1) * (4 * n - 1) \/ 6\nend\ndef sumsum(n : Int64)\n    (n+1) * n * n\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46092,"user_id":50,"body":"def sumin(n : Int64)\n  n*(n+1)*(2*n+1)\/6\nend\ndef sumax(n : Int64)\n  n*(n+1)*(4*n-1)\/6\nend\ndef sumsum(n : Int64)\n  sumin(n)+sumax(n)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46093,"user_id":null,"body":"def sumin(n : Int64)\n  n * (n + 1) * (2*n + 1) \/ 6\nend\n\ndef sumax(n : Int64)\n  n * (n + 1) * (4*n - 1) \/ 6\nend\n\ndef sumsum(n : Int64)\n  n**2 * (n + 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46094,"user_id":1474,"body":"def sumin(n)\n    n * (n + 1) * (2 * n + 1) \/ 6\nend\n\ndef sumax(n)\n    n * (n + 1) * (4 * n - 1) \/ 6\nend\n\ndef sumsum(n)\n    n * n * (n + 1)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46095,"user_id":209,"body":"def sumin(n : Int64)\n    return n*(n+1)*(2*n+1)\/6\nend\ndef sumax(n : Int64)\n    return n*(4*n-1)*(n+1)\/6\nend\ndef sumsum(n : Int64)\n    return n*(n+1)*n\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46096,"user_id":527,"body":"def sumin(n : Int64) : Int64\n  n * (n + 1) * (2*n + 1) \/ 6\nend\ndef sumax(n : Int64) : Int64\n  n * (n + 1) * (4*n - 1) \/ 6\nend\ndef sumsum(n : Int64) : Int64\n  n * n * (n + 1)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46097,"user_id":492,"body":"def sumin(n : Int64)\n    n * (n + 1) * (2 * n + 1) \/ 6\nend\ndef sumax(n : Int64)\n    n * (n + 1) * (4 * n - 1) \/ 6\nend\ndef sumsum(n : Int64)\n    n * n * (n + 1)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55a144eff5124e546400005a":[{"id":46098,"user_id":17,"body":"class Person\n  def initialize(@name : String, @age : Int32)\n  end\n  def info\n    \"#{@name}s age is #{@age}\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46099,"user_id":421,"body":"class Person\n  def initialize(name : String, age : Int32)\n    @name = name\n    @age = age\n    @info = \"#{@name}s age is #{@age}\"\n  end\n  \n  def info\n    @info\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46100,"user_id":null,"body":"class Person\n  def initialize(name : String, age : Int32)\n    @name = name\n    @age = age\n  end\n\n  def name\n    @name\n  end\n\n  def age\n    @age\n  end\n  \n  def info\n    \"#{@name}s age is #{@age}\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46101,"user_id":645,"body":"class Person\n  def initialize(name : String, age : Int32)\n    @name, @age = name, age\n  end\n  \n  def info\n    \"#{@name}s age is #{@age}\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46102,"user_id":null,"body":"class Person\n  def initialize (name : String, age : Int32)\n    @name = name\n    @age = age\n  end\n  def name\n    @name\n  end\n  def age\n    @age\n  end\n  def info\n    \"#{self.name}s age is #{self.age}\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46103,"user_id":null,"body":"class Person\n  getter info\n  \n  def initialize(name, age)\n    @info = \"#{name}s age is #{age}\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46104,"user_id":null,"body":"class Person\n  property name : String\n  property age : Int32\n  \n  def initialize(@name, @age)\n  end\n  \n  def info\n    \"#{name}s age is #{age}\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46105,"user_id":1828,"body":"class Person\n  def initialize(a : String, b : Int32)\n    @a,@b = a,b\n  end\n  def info\n    return \"#{@a}s age is #{@b}\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46106,"user_id":1246,"body":"class Person\n  def initialize(name : String, age : Int32)\n    @name = name\n    @age  = age\n  end\n  \n  def info\n    \"#{@name}s age is #{@age}\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46107,"user_id":527,"body":"class Person\n  @name : String\n  @age : Int32\n\n  def initialize(name, age)\n    @name = name\n    @age = age\n  end\n  \n  def info\n    \"#{@name}s age is #{@age}\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55a29405bc7d2efaff00007c":[{"id":46108,"user_id":421,"body":"def going(n)\n  i = 1\n  ans = 1\n  while n > 1\n    i = i.fdiv(n)\n    ans += i\n    n -= 1\n  end\n  (ans * 1e6).floor \/ 1e6\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46109,"user_id":492,"body":"def going(n)\n  res, div = 0, 1.0\n  n.times do |i|\n    res += 1.0 \/ div\n    div *= n - i\n  end\n  return (res*1000000).floor \/ 1000000.0\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46110,"user_id":492,"body":"def going(n)\n  res, div = 0, 1.0\n  n.times do |i|\n    res += 1.0 \/ div\n    div *= n - i\n  end\n  return (res*1000000).floor \/ 1000000.0\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46111,"user_id":53,"body":"def going(n)\n  t,m,i = 0.0,1.0,n\n  while i>0\n    t+=(1.0\/m)\n    m*=i\n    i-=1\n  end\n  (t*1000000).to_i.to_f\/1000000\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46112,"user_id":null,"body":"def going(n)\n  # your code\n  sum = 0.0\n    (1..n).each do |i|\n      sum = sum\/(i) + 1\n    end\n    return (1000000 * sum).floor\/1000000.0\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46113,"user_id":null,"body":"require \"big\"\n\nstruct Float\n  def trunc(n)\n    match = to_s.match(\/\\d+(\\.\\d{1,#{n}})?\/)\n    \n    if match\n      match[0].to_f\n    else\n      self\n    end\n  end\nend\n\ndef going(n)\n  sum = 1.0\n\n  n.downto(2).reduce(BigInt.new(1)) { |m, v|\n    m *= v\n    sum += BigFloat.new(1.0) \/ m\n    m\n  }\n  \n  sum.to_f.trunc 6\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46114,"user_id":null,"body":"require \"big\"\n\ndef mem_fact_fact\n  memo = [] of BigInt\n  memo.push 1.to_big_i\n  return ->(i : Int32) do\n    while memo.size < i+1\n        memo << memo.last * memo.size\n    end\n    return memo[i]\n  end\nend\n\nFACT = mem_fact_fact\n  \ndef going(n)\n  val = BigRational.new((1..n-1).map { |i| FACT.call(i) }.sum, FACT.call(n)).to_f64+1\n  (val * 10**6).trunc \/ 10**6\nend\n\n\n  ","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46115,"user_id":null,"body":"def going(n)\n  m, sum = 1.0, 0.0\n  (1..n).reverse_each do |i| sum+=m; m\/=i end\n  (sum*1e6).to_i\/1e6\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55a2d7ebe362935a210000b2":[{"id":46116,"user_id":1072,"body":"def find_smallest_int(arr) arr.min end","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46117,"user_id":null,"body":"def find_smallest_int(arr)\n  arr.sort.first\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46118,"user_id":null,"body":"def find_smallest_int(arr)\n    minimum = arr[0]\n\n    arr.each do |i|\n        if minimum > i\n            minimum = i\n        end\n    end\n\n    return minimum\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46119,"user_id":null,"body":"def find_smallest_int(arr : Array(Int32)) : Int32\n  arr.min()\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46120,"user_id":null,"body":"def find_smallest_int(arr)\n  return arr.min\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46121,"user_id":null,"body":"def find_smallest_int(arr)\n  result = arr[0];\n  iter = 1\n  while iter < arr.size\n    if result > arr[iter]\n      result = arr[iter]\n    end\n    iter += 1\n  end\n  return result\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46122,"user_id":null,"body":"def find_smallest_int(arr)\n  i = 0\n  while i<arr.size\n    j = 0\n    while j<arr.size\n      if arr[i]<arr[j]\n        n = arr[i]\n        arr[i] = arr[j]\n        arr[j] = n\n      end\n      j += 1\n    end\n    i += 1\n  end\n  arr[0]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46123,"user_id":null,"body":"def find_smallest_int(arr)\n  least = arr.first\n  arr.each do |x|\n    least = (x > least) ? least : x\n  end\n  least\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46124,"user_id":null,"body":"def find_smallest_int(arr)\n  p arr.sort.first\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46125,"user_id":null,"body":"def find_smallest_int(arr)\n  min = arr[0]\n  arr.each do |x|\n    min = x < min ? x : min\n  end\n  min\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55a70521798b14d4750000a4":[{"id":46126,"user_id":527,"body":"def greet(name)\n  \"Hello, #{name} how are you doing today?\"\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46127,"user_id":null,"body":"def greet(name)\n  \"Hello, \" + name + \" how are you doing today?\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46128,"user_id":null,"body":"def greet(name)\n  return \"Hello, \"+name+\" how are you doing today?\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46129,"user_id":null,"body":"def greet(name : String)\n  \"Hello, #{name} how are you doing today?\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46130,"user_id":null,"body":"def greet(name : String) : String\n  \"Hello, #{name} how are you doing today?\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46131,"user_id":null,"body":"def greet(name)\n  return %Q(Hello, #{name} how are you doing today?)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46132,"user_id":null,"body":"def greet(name)\n  #your code here\n  return \"Hello, \" + name + \" how are you doing today?\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46133,"user_id":null,"body":"def greet(name)\n  return \"Hello, #{name} how are you doing today?\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46134,"user_id":1072,"body":"def greet(n) \"Hello, #{n} how are you doing today?\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46135,"user_id":1072,"body":"def greet(n) \"Hello, #{n} how are you doing today?\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55aa075506463dac6600010d":[{"id":46136,"user_id":null,"body":"def list_squared(m : Int64, n : Int64)\n  (m..n).each_with_object([] of Array(Int32 | Int64)) do |i, obj|\n    a = [] of Int32\n    (1..i).each { |j| a.push j**2 if i % j == 0 }\n    s = a.sum\n    obj.push [i, s] if Math.sqrt(s) == Math.sqrt(s).to_i\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46137,"user_id":421,"body":"C = [[1,1],[42,2500],[246,84100],[287,84100],[728,722500],[1434,2856100],[1673,2856100],[1880,4884100],\n    [4264,24304900],[6237,45024100],[9799,96079204],[9855,113635600]]\n\ndef list_squared(m : Int64, n : Int64)\n  C.select{|x| x[0] >= m && x[0] <= n}\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46138,"user_id":492,"body":"def list_squared(m : Int64, n : Int64)\n  result = [] of Array(Int64)\n  m.upto(n) do |i_i64|\n    divisors = [] of Int64\n    1_i64.upto(Math.sqrt(i_i64)) do |j_i64|\n      if i_i64 % j_i64 == 0\n        divisors << j_i64\n        divisors << (i_i64 \/ j_i64) if j_i64 != i_i64 \/ j_i64\n      end  \n    end\n    sum = divisors.map { |i_i64| i_i64 ** 2 }.reduce(0_i64){|m, e| m + e}\n    sqr = Math.sqrt(sum)\n    result << [i_i64, sum] if sqr.to_i.to_f == sqr\n  end\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46139,"user_id":null,"body":"def divisors(x)\n  (1..x).select {|i| x % i == 0}\nend\n\ndef list_squared(m : Int64, n : Int64)\n  (m..n).map { |x|\n    [x, divisors(x).sum{|d| d*d}]\n  }.select{|(x, s)| (s ** 0.5).to_i ** 2 == s}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46140,"user_id":null,"body":"def list_squared(m : Int64, n : Int64)\n  (m..n).map { |i| [i, (1..i).select { |d| i % d == 0 }.map(&.**(2)).sum] }\n    .select do |(_, s)|\n      root = Math.sqrt(s)\n      root.to_i == root\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46141,"user_id":null,"body":"def list_squared(m : Int64, n : Int64)\n    (m..n).map do |v|\n        t = (1..Math.sqrt(v).ceil().to_i).flat_map { |j| v.divisible_by?(j) ? [(v\/j).to_i**2, j.to_i64**2] : 1 }.uniq.sum().to_i64\n        [v.to_i64, t] if(Math.sqrt(t)%1).zero?\n    end.compact\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46142,"user_id":null,"body":"def integer_sqrt(n : Int64) : Int64\n    return n if n < 2\n    small_cand = integer_sqrt(n >> 2) << 1\n    large_cand = small_cand + 1_i64\n    if large_cand * large_cand > n\n        return small_cand\n    else\n        return large_cand\n    end\nend\n\ndef squared?(n : Int64)\n    x = integer_sqrt n\n    x*x == n\nend\n\ndef divisors(n : Int64)\n    (1_i64..n\/2).to_a.select! { |x| n % x == 0 }\nend\n\ndef list_squared(m : Int64, n : Int64)\n    result = [] of Array(Int64)\n    (m..n).each do |k|\n        s = divisors(k).<<(k).map{ |x| x*x }.sum\n        result << [k, s] if squared? s \n    end\n    result\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46143,"user_id":null,"body":"def list_squared(m : Int64, n : Int64)\n  result = Array(Array(Int64)).new\n  \n  # iterate over the range m..n\n  while m <= n \n    # find the divisors\n    divisors = Array(Int64).new\n    i = 1_i64\n    while i <= m\n      divisors.push(i) if m.divisible_by?(i)\n      i += 1\n    end\n    \n    # square them\n    squared_divisors = divisors.map { |x| x * x }\n  \n    # sum\n    sum = squared_divisors.sum\n  \n    # is sum a square?\n    sqrt = Math.sqrt(sum)\n    result.push([m, sum]) if sqrt.remainder(1.0) == 0\n  \n    m += 1\n  end\n\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46144,"user_id":53,"body":"def list_squared(m : Int64, n : Int64)\n    xss = [] of Array(Int64)\n    i = m\n    while i <= n\n        sum = 0.to_i64\n        t = (i**0.5).to_i64\n        j = 1.to_i64\n        while j <= t\n            sum += j**2 if i%j == 0\n            sum += (i\/j)**2 if i%j == 0 && j!=i\/j\n            j += 1\n        end\n        if sum**0.5 == (sum**0.5).to_i64\n            xs = [] of Int64\n            xs << i\n            xs << sum\n            xss << xs\n        end\n        i += 1\n    end\n    xss\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46145,"user_id":null,"body":"def list_squared(m : Int64, n : Int64)\n  filter_map(m..n) { |x|  \n    s = filter_map(1..x) { |y| y * y if x % y == 0 }.sum\n    [x, s] if Math.sqrt(s) % 1 == 0\n  }\nend\n\ndef filter_map(e : Enumerable(T), &block : T -> Nil | U) forall T, U\n  res = [] of U\n  e.each { |x| v = yield x; res << v if v }\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55ab4f980f2d576c070000f4":[{"id":46146,"user_id":492,"body":"def game(n : Int64)\n    m = n * n\n    if (m.modulo(2) == 0)\n    \t[m \/ 2] \n  \telse \n  \t\t[m, 2] \n\tend\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46147,"user_id":492,"body":"def game(n : Int64)\n    m = n * n\n    if (m.modulo(2) == 0)\n    \t[m \/ 2] \n  \telse \n  \t\t[m, 2] \n\tend\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46148,"user_id":null,"body":"def game(n : Int64)\n    n.even? ? [n ** 2 \/ 2] : [n ** 2, 2]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46149,"user_id":null,"body":"def game(n : Int64)\n  if n == 0\n    [0]\n  elsif n.even?\n    [n ** 2 \/ 2]\n  else\n    [n ** 2, 2]\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46150,"user_id":null,"body":"def game(n : Int64)\n  num = n ** 2\n  if (num % 2) == 0\n    [num \/\/ 2]\n  else\n    [num, 2]\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46151,"user_id":null,"body":"def game(n : Int64)\n  ((n**2 % 2) == 0)? [n**2 \/\/ 2] : [n**2,2]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46152,"user_id":421,"body":"def game(n : Int64)\n    n *= n * 0.5\n    n % 1 == 0.5 ? [n * 2, 2] : [n]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46153,"user_id":null,"body":"def game(n : Int64)\n    n.even? ? [n * n \/ 2] : [n * n, 2]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46154,"user_id":null,"body":"def game(n : Int64)\n   return n % 2 == 0 ? [n * n\/2] : [n * n, 2]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46155,"user_id":565,"body":"def game(n : Int64)\n    n % 2 == 0 ? [n*n\/2] : [n*n, 2]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55b019265ff4eeef8c000039":[{"id":46156,"user_id":527,"body":"def disjunction(operands, is_exclusive)\n  is_exclusive ? operands.reduce{ |a, b| a ^ b } : operands.reduce{ |a, b| a | b }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46157,"user_id":1072,"body":"def disjunction(o,i) o.reduce{|a,b| i ? (a != b) : (a||b)} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46158,"user_id":421,"body":"def disjunction(operands, is_exclusive)\n  operands.reduce{|x, y| is_exclusive ? x ^ y : x || y}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46159,"user_id":null,"body":"def disjunction(operands, is_exclusive)\n  is_exclusive ? operands.reduce(false) {|a, i| a ^ i} : operands.any?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46160,"user_id":2563,"body":"def disjunction(operands, is_exclusive)\n    return operands.includes?(true) if !is_exclusive\n    return operands[0] == !operands[1] if operands.size == 2  #trivial case\n    # recursive call\n    head = operands.shift(2)  # proccess first pair\n    operands.unshift(disjunction(head, true)) # add result at the beginning\n    return disjunction(operands, true) #recursively process the rest\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55b2549a781b5336c0000103":[{"id":46161,"user_id":421,"body":"def compare_powers(n1,n2)\n  n2[1]*Math.log(n2[0]) <=> n1[1]*Math.log(n1[0])\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46162,"user_id":null,"body":"def compare_powers(n1, n2)\n  a, b = n1\n  c, d = n2\n  d*Math.log(c) <=> b*Math.log(a)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46163,"user_id":53,"body":"def compare_powers(n1,n2)\n  x = Math.log(n1[0]) * n1[1]\n  y = Math.log(n2[0]) * n2[1]\n  x==y ? 0 : x>y ? -1 : 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46164,"user_id":209,"body":"def compare_powers(n1,n2)\n  a = n1[1] * Math.log2(n1[0])\n  b = n2[1] * Math.log2(n2[0])\n  a == b ? 0 : a > b ? -1 : 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46165,"user_id":1624,"body":"def compare_powers(x,y)\n  xb,xi = x\n  yb,yi = y\n  (Math.log(yb)*yi) <=> (Math.log(xb)*xi)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46166,"user_id":null,"body":"require \"math\"\ndef compare_powers(n1,n2)\n  m,n = n1\n  o,p = n2\n  -( n * Math.log(m) <=> p * Math.log(o) )\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46167,"user_id":1072,"body":"def compare_powers(n1,n2) \n  r=n2[1]*Math.log(n2[0])\/(n1[1]*Math.log(n1[0]))\n  n1[0]==n2[0] && (n1[0]==1 || n2[1]==n1[1]) ? 0 : n1[0]==1 ? 1 : r>1 ? 1 : r<1 ? -1 : 0 \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55b3425df71c1201a800009c":[{"id":46168,"user_id":492,"body":"def time2snd(s)\n    arr = s.split(\/\\|\/).map { |x| x.to_i }\n    snd = 3600 * arr[0] + 60 * arr[1] + arr[2]\nend\n\ndef snd2time(n)\n    n = n.to_i\n    h = n \/ 3600\n    re = n.modulo(3600)\n    mn = re \/ 60\n    s = re.modulo(60)\n    \"%02d|%02d|%02d\" % [h, mn, s]\nend\n\ndef stat_assoc(strg)\n    if (strg == \"\") \n        return \"\" \n    end\n    r = strg.split(\/,\/).map { |x| time2snd(x) }.sort\n    lg = r.size\n    avg = r.reduce(0){ |sum, x| sum + x } \/ lg.to_f\n    rge = r[lg - 1] -  r[0]\n    md = (r[(lg - 1) \/ 2] + r[lg \/ 2]) \/ 2.0\n    \"Range: %s Average: %s Median: %s\" % [snd2time(rge), snd2time(avg), snd2time(md)]\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46169,"user_id":492,"body":"def time2snd(s)\n    arr = s.split(\/\\|\/).map { |x| x.to_i }\n    snd = 3600 * arr[0] + 60 * arr[1] + arr[2]\nend\n\ndef snd2time(n)\n    n = n.to_i\n    h = n \/ 3600\n    re = n.modulo(3600)\n    mn = re \/ 60\n    s = re.modulo(60)\n    \"%02d|%02d|%02d\" % [h, mn, s]\nend\n\ndef stat_assoc(strg)\n    if (strg == \"\") \n        return \"\" \n    end\n    r = strg.split(\/,\/).map { |x| time2snd(x) }.sort\n    lg = r.size\n    avg = r.reduce(0){ |sum, x| sum + x } \/ lg.to_f\n    rge = r[lg - 1] -  r[0]\n    md = (r[(lg - 1) \/ 2] + r[lg \/ 2]) \/ 2.0\n    \"Range: %s Average: %s Median: %s\" % [snd2time(rge), snd2time(avg), snd2time(md)]\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46170,"user_id":null,"body":"def stat_assoc(input)\n  return \"\" if input.empty?\n  stat_assocs = input.split(\", \").map(&.split(\"|\").map(&.to_i)).map {|result| \n    result[0].hours + result[1].minutes + result[2].seconds\n  }.sort\n  \n  range = stat_assocs.last - stat_assocs.first # we have to sort anyway for the median, so no use in .min \/ .max\n  average = stat_assocs.sum \/ stat_assocs.size\n  median = stat_assocs.size.odd? ? stat_assocs[stat_assocs.size \/ 2] : \n    (stat_assocs[stat_assocs.size \/ 2 - 1] + stat_assocs[stat_assocs.size \/ 2]) \/ 2\n  \n  \"Range: #{format(range)} Average: #{format(average)} Median: #{format(median)}\"\nend\n\nprivate def format(span)\n  \"%02d|%02d|%02d\" % {span.hours, span.minutes, span.seconds}\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46171,"user_id":null,"body":"def stat_assoc(strg)\n  return \"\" if strg.empty?\n  secs = strg.split(\/, ?\/).map { |i| parse(i) }\n  range = to_time(secs.max - secs.min)\n  avg = to_time(secs.sum \/ secs.size)\n  median = to_time(secs.sort[((secs.size - 1) \/ 2)..(secs.size \/ 2)].sum \/ (secs.size % 2 == 0 ? 2 : 1))\n  \"Range: #{range} Average: #{avg} Median: #{median}\"\nend\n\ndef parse(str)\n  str.split('|').reverse.map_with_index { |t, i| t.to_i * 60 ** i }.sum\nend\n\ndef to_time(secs)\n  t = secs.seconds\n  \"#{t.hours.to_s.rjust(2, '0')}|#{t.minutes.to_s.rjust(2, '0')}|#{t.seconds.to_s.rjust(2, '0')}\"\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46172,"user_id":null,"body":"def s2t (time)\n  Array.new(3, 60).reduce(Array(String).new) { |r, x| r << (\"0\" + (time % x).to_i.to_s).sub(\/.(?=..)\/, \"\"); time \/= x; r }.reverse.join(\"|\")\nend\n\ndef stat_assoc(strg)\n  return \"\" if strg == \"\"\n  ti = strg.split(\", \").map { |x| z = x.split(\"|\").map(&.to_i); z[0] * 3600 + z[1] * 60 + z[2] }.sort\n  l  = ti.size\n  \"Range: #{s2t(ti.max - ti.min)} Average: #{s2t((ti.sum \/ l).to_i)} Median: #{s2t(((ti[((l - 1) \/ 2).to_i] + ti[(l \/ 2).to_i]) \/ 2).to_i)}\"\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46173,"user_id":null,"body":"def stat_assoc(strg)\n  return \"\" if strg.empty?\n  list = strg.split(\", \").map do |s|\n    s =~ \/(\\d{1,2})\\|(\\d{1,2})\\|(\\d{1,2})\/\n    Time::Span.new(hours: $1.to_i, minutes: $2.to_i, seconds: $3.to_i)\n  end.sort\n  \"Range: #{\n    (list.last - list.first).to_s.gsub(':','|')\n  } Average: #{\n    (list.sum \/ list.size).tap { |s| break s - Time::Span.new(nanoseconds: s.nanoseconds)}.to_s.gsub(':','|')\n  } Median: #{\n    (list.size.even? ?\n      ((list[list.size \/ 2] + list[list.size \/ 2 - 1] )\/2).tap { |s| break s - Time::Span.new(nanoseconds: s.nanoseconds)} :\n      list[list.size \/ 2]).to_s.gsub(':','|')\n  }\"\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46174,"user_id":1474,"body":"def stat_assoc(strg)\n  return \"\" if strg.empty?\n  arr = strg.split(\", \").map{ |s| s.split('|').map(&.to_i) }\n  arr.sort!\n  l = arr.size\n  m = l \/ 2\n  rng = adj_time(arr.max.zip(arr.min).map{ |(a, b)| a - b })\n  avg = div_time(arr.reduce{ |s, t| adj_time(s.zip(t).map{ |(a, b)| a + b }) }, arr.size)\n  med = l.odd? ? arr[m] : div_time(adj_time( arr[m - 1].zip(arr[m]).map{ |(a, b)| a + b }), 2)\n  \"Range: %02d|%02d|%02d Average: %02d|%02d|%02d Median: %02d|%02d|%02d\" % (rng + avg + med)\nend\n\ndef adj_time(time)\n  if time[2] < 0\n    time[2] += 60\n    time[1] -= 1\n  elsif time[2] > 59\n    time[1] += time[2] \/ 60\n    time[2] %= 60\n  end\n  if time[1] < 0\n    time[1] += 60\n    time[0] -= 1\n  elsif time[1] > 59\n    time[0] += time[1] \/ 60\n    time[1] %= 60\n  end\n  time\nend\n\ndef div_time(ar, l)\n  h, m, s = ar\n  ret = [h \/ l]\n  m += (h % l) * 60\n  ret << m \/ l\n  s += (m % l) * 60\n  ret << s \/ l\n  ret\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46175,"user_id":null,"body":"class Result\n  include Comparable(self)\n  property seconds = 0i64\n  \n  def initialize(@seconds)\n  end\n  \n  def initialize(h, m, s)\n    @seconds = h * 3600 + m * 60 + s\n  end\n  \n  def initialize(str : String)\n    nums = str.split('|').map(&.to_i64)\n    hours = nums[0]\n    minutes = nums[1]\n    @seconds = nums[2] + minutes*60 + hours * 3600\n  end\n  \n  def <=>(other : self)\n    @seconds <=> other.seconds\n  end\n  \n  def <=>(other)\n    nil\n  end\n  \n  def -(other : self)\n    Result.new(@seconds - other.seconds)\n  end\n  \n  def +(other : self)\n    Result.new(@seconds + other.seconds)\n  end\n  \n  def \/(other)\n    Result.new(@seconds \/ other)\n  end\n  \n  def to_s(io)\n    io << sprintf(\"%02d|%02d|%02d\", @seconds\/3600, (@seconds%3600) \/ 60, @seconds%60)\n  end\n  \n  def self.zero\n    new 0i64\n  end\nend\n\ndef stat_assoc(strg)\n  return \"\" if strg.empty?\n  results = strg.split(\/,\\s*\/).map &->Result.new(String)\n  minmax = results.minmax\n  range = minmax.last - minmax.first\n  \n  mean = results.sum \/ results.size\n  \n  results.sort!\n  \n  med = results.size \/ 2\n  median = if results.size.even?\n    (results[med - 1] + results[med]) \/ 2\n  else\n    results[med]\n  end\n  \n  \"Range: #{range} Average: #{mean} Median: #{median}\"\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46176,"user_id":null,"body":"def stat_assoc(strg)\n  return strg if strg.blank?\n  times = strg.split(\", \").map(&.split(\"|\").map(&.to_i))\n  .map{ |t| t[0].hours + t[1].minutes + t[2].seconds }.sort\n  \n  range = times.max - times.min\n  mean = times.sum \/ times.size\n\tidx = (times.size - 1) \/ 2.0\n  median = (times[idx.floor.to_i] + times[idx.ceil.to_i]) \/ 2.0\n\n  \"Range: #{time_to_string range} Average: #{time_to_string mean} Median: #{time_to_string median}\"\nend\n\ndef time_to_string(t : Time::Span)\n  \"%02d|%02d|%02d\" % {t.hours, t.minutes, t.seconds}\nend\n","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46177,"user_id":null,"body":"def stat_assoc(strg)\n  return strg if strg == \"\"\n  times = strg.split(\", \").map{ |t| t.split \"|\" }\n  .map{ |t| Time.utc(2001,1,1, t[0].to_i, t[1].to_i, t[2].to_i) }\n  \n  range = times.max - times.min\n  mean = Time.epoch(times.map{ |t| t.epoch }.sum \/ times.size).time_of_day\n  if times.size % 2 == 1\n\t  median = times.sort.[(times.size \/ 2).to_i].time_of_day\n  else\n\t  m1 = times.sort.[(times.size \/ 2 - 1).to_i].time_of_day\n\t  m2 = times.sort.[(times.size \/ 2).to_i].time_of_day\n    median = (m1 + m2) \/ 2\n  end\n  \n  \"Range: #{time_to_string range} Average: #{time_to_string mean} Median: #{time_to_string median}\"\nend\n\ndef time_to_string(t : Time::Span)\n  p = ->(i : Int32) {i.to_s.rjust 2,'0'}\n  \"#{p.call t.hours}|#{p.call t.minutes}|#{p.call t.seconds}\"\nend\n","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55b4d87a3766d9873a0000d4":[{"id":46178,"user_id":53,"body":"def howmuch(m, n)\n  ans = [] of Array(String)\n  Math.min(m, n).upto(Math.max(m, n)) do |i|\n    ans.push([\"M: %d\" % [i], \"B: %d\" % [i \/ 7], \"C: %d\" % [i \/ 9]]) if i % 9 == 1 && i % 7 == 2\n  end\n  ans\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46179,"user_id":1474,"body":"def howmuch(*args)\n  m, n = args.minmax\n  s = m % 9 == 0 ? m + 1 : (m \/\/ 9) * 9 + 10\n  (s..n)\n    .step(9)\n    .to_a\n    .select { |i| (i-1) % 9 == 0 && (i-2) % 7 == 0 }\n    .map { |i| [\"M: #{i}\", \"B: #{i \/\/ 7}\", \"C: #{i \/\/ 9}\"] }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46180,"user_id":492,"body":"def howmuch(m, n)\n    i = [m, n].min\n    j = [m, n].max\n    res = [] of Array(String)\n    while (i <= j)\n        if ((i.modulo(9) == 1) && (i.modulo(7) == 2))\n            res << [\"M: \" + i.to_s, \"B: \" + (i \/ 7).to_i.to_s, \"C: \" + (i \/ 9).to_i.to_s]\n        end\n        i += 1\n    end\n    res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46181,"user_id":492,"body":"def howmuch(m, n)\n    i = [m, n].min\n    j = [m, n].max\n    res = [] of Array(String)\n    while (i <= j)\n        if ((i.modulo(9) == 1) && (i.modulo(7) == 2))\n            res << [\"M: \" + i.to_s, \"B: \" + (i \/ 7).to_i.to_s, \"C: \" + (i \/ 9).to_i.to_s]\n        end\n        i += 1\n    end\n    res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46182,"user_id":421,"body":"def howmuch(m, n)\n   a, b = [m, n].minmax\n   (a..b).select{|x| x % 9 == 1 && x % 7 == 2}.map{|x| [\"M: #{x}\", \"B: #{(x - 2) \/\/ 7}\", \"C: #{(x - 1) \/\/ 9}\"]}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46183,"user_id":53,"body":"def howmuch(m, n)\n  ans = [] of Array(String)\n  Math.min(m, n).upto(Math.max(m, n)) do |i|\n    if i % 9 == 1 && i % 7 == 2\n      el = [] of String\n      el.push(\"M: %d\" % [i])\n      el.push(\"B: %d\" % [i \/ 7])\n      el.push(\"C: %d\" % [i \/ 9])\n      ans.push(el);\n    end\n  end\n  ans\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55ba95a17970ff3e80000064":[{"id":46184,"user_id":421,"body":"def is_ore(n)\n  lst = [1, n] + (2..n \/ 2).select{|x| n % x == 0}\n  total = lst.size.fdiv(lst.sum{|x| 1.0 \/ x})\n  (total.round - total).abs <= 1e-10\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46185,"user_id":17,"body":"require \"big\"\n\ndef is_ore(n)\n  factors = [] of Int32\n  (1..Math.sqrt(n)).each do |i|\n    if n % i == 0\n      factors << i\n      factors << n \/ i unless i * i == n\n    end\n  end\n  (factors.size \/ factors.reduce(BigRational.new(0)) { |s, n| s + BigRational.new(1, n) }).denominator == 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46186,"user_id":1072,"body":"def is_ore(n) [6, 28, 140, 270, 496, 672, 1638, 2970, 6200, 8128, 8190, 18600, 18620, 27846, 30240, 32760, 55860, 105664, 117800].includes?(n) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46187,"user_id":null,"body":"def is_ore(n : Int32)\n        divisor_count = 1\n        divisor_sum = 1 + n\n        i = 2\n        half_n = Math.sqrt(n)\n        while i <= half_n\n                if (n % i) == 0\n                        divisor_count += 1\n                        divisor_sum += (i + n \/ i)\n                end\n                i = i.+ 1\n        end\n        if ((2 * divisor_count * n) % divisor_sum) == 0\n                true\n        else\n                false\n        end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55be10de92aad5ef28000023":[{"id":46188,"user_id":492,"body":"def checkchoose(m : Int64, n)\n  result = 1_u64\n  (0..n).each {|i|\n    return i if result == m\n    result = result * (n-i) \/ (i+1)\n  }\n  -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46189,"user_id":492,"body":"def checkchoose(m : Int64, n)\n  result = 1_u64\n  (0..n).each {|i|\n    return i if result == m\n    result = result * (n-i) \/ (i+1)\n  }\n  -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46190,"user_id":421,"body":"def checkchoose(m : Int64, n)\n  a = 1_i64\n  i = 0_i64\n  while i <= n \/ 2\n    return i if a == m\n    a = a * (n - i) \/ (i + 1)\n    i += 1\n  end\n  -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46191,"user_id":null,"body":"def checkchoose(m : Int64, n)\n  b = 1_i64\n  (0..n\/2 + 1).each do |x|\n    if b == m\n      return x\n    end\n    b = b * (n - x) \/ (x + 1)\n  end\n  -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46192,"user_id":53,"body":"require \"big\"\n\ndef checkchoose(m : Int64, n)\n  result = 1.to_big_i\n  i = 0.to_big_i\n  bm = m.to_big_i\n  bn = n.to_big_i\n  while i <= bn\n    if result == bm\n      return i\n    end\n    result = result * (bn - i) \/ (i + 1)\n    i = i + 1\n  end\n  return -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46193,"user_id":1474,"body":"def checkchoose(m : Int64, n)\n  return 0 if m == 1\n  (1..n).find { |i| (((n-i+1)..n).reduce(1.to_i128) { |s, i| s * i } \/ (1..i).reduce(1.to_i128) { |s, i| s * i }) == m } || -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46194,"user_id":464,"body":"def checkchoose(m : Int64, n)\n  r = 1_i64\n  i = 0\n  while i < m\n    if r == m\n      return i\n    end\n    r = r * (n-i)\/(i+1)\n    i += 1\n  end\n  return -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55bf01e5a717a0d57e0000ec":[{"id":46195,"user_id":null,"body":"def persistence(n)\n  count = 0\n  num = n.to_s\n  until num.size < 2\n    new_num = 1\n    num.size.times do |index|\n      new_num *= num[index].to_i8\n    end\n    num = new_num.to_s\n    count += 1\n  end\n  return count\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46196,"user_id":null,"body":"def persistence(n : Int32, c : Int32 = 0): Int32\n  n < 10 ? c : persistence(n.digits.product, c + 1)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46197,"user_id":null,"body":"def persistence(n : Int32, c : Int32 = 0): Int32\n  n < 10 ? c : persistence(n.digits.reduce(1) { |acc, i| acc * i }, c + 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46198,"user_id":53,"body":"def persistence(n)\n  i = 0\n  while n > 9\n    m = 1\n    while n > 0\n      m *= (n % 10)\n      n = (n\/10).to_i\n    end\n    n = m\n    i += 1\n  end\n  i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46199,"user_id":168,"body":"def persistence(n)\n  r = 0\n  while n >= 10\n    n = n.digits.reduce { |a, b| a * b }\n    r += 1\n  end\n  r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46200,"user_id":527,"body":"def persistence(n)\n  0.step do |i|\n    break i if n < 10\n    n = n.digits.product\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46201,"user_id":50,"body":"def persistence(n)\n  c=0\n  until n<10\n    n=n.digits.reduce{|acc, d| acc * d}\n    c+=1\n  end\n  c\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46202,"user_id":421,"body":"def persistence(n)\n  num = 0\n  while n > 9\n    n = n.digits.product\n    num += 1\n  end\n  num      \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55c04b4cc56a697bb0000048":[{"id":46203,"user_id":1768,"body":"def scramble(s1,s2)\n s2.chars.uniq.all?{|x| s2.count(x)<=s1.count(x)}\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46204,"user_id":null,"body":"def scramble(s1, s2)\n  s1_hash = s1.split(\/\/).group_by { |c| c }\n  s2_hash = s2.split(\/\/).group_by { |c| c }\n  \n  \n  s2_hash.all? { |k, v| s1_hash[k] >= v rescue false }\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46205,"user_id":53,"body":"def scramble(s1, s2)\n  ht = {} of Char => Int32\n  s1.each_char{|c| ht[c]=(ht[c]? || 0)+1}\n  s2.each_char do |c|\n    ht[c] = (ht[c]? || 0)-1\n    return false if ht[c] < 0\n  end\n  true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46206,"user_id":null,"body":"def scramble(s1,s2)\n  s2.chars.reduce(s1.chars) { |res, i| x = res.index(i) || -1; x != -1 ? res.delete_at(x) : (return false); res }\n  return true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46207,"user_id":null,"body":"def scramble(s1,s2)\n  c = Array(Int32).new(27, 0)\n  s1.size.times { |i| c[s1[i].ord & 31] += 1 }\n  s2.size.times { |i| return false if (c[s2[i].ord & 31] -= 1) < 0 }\n  return true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46208,"user_id":null,"body":"def scramble(s1,s2)\n  s2.chars.uniq.all? {|c| s1.count(c) >= s2.count(c)}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46209,"user_id":null,"body":"def get_letters(s : String) : Hash(Char, Int32)\n\tletters = Hash(Char, Int32).new\n\n\ts.each_char do |c|\n\t\tif letters.has_key?(c)\n\t\t\tletters[c] += 1\n\t\telse\n\t\t\tletters[c] = 1\n\t\tend\n\tend\n\n\treturn letters\nend\n\ndef scramble(s1 : String, s2 : String) : Bool\n\ts1Letters = get_letters(s1)\n\ts2Letters = get_letters(s2)\n\n\ts2.each_char do |c|\n\t\tif s1Letters.has_key?(c)\n\t\t\tif s1Letters[c] < s2Letters[c]\n\t\t\t\treturn false\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\n\treturn true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46210,"user_id":1624,"body":"def scramble(s1,s2)\n  c1 = [0] * 128\n  c2 = [0] * 128\n  s1.each_byte do |c|\n    c1[c] += 1\n  end\n  s2.each_byte do |c|\n    c2[c] += 1\n  end\n  (65_u8..122_u8).all?{|c|\n    c1[c] >= c2[c]\n  }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46211,"user_id":null,"body":"def scramble(s1,s2)\n  word = {} of Char => Int32\n  \n  s2.each_char do |c|\n    count = word.has_key?(c) ? word[c] : 0\n    word[c] = count + 1\n  end\n  \n  return true if word.empty?\n  \n  s1.each_char do |c|\n    next unless word.has_key?(c)\n    word.delete(c) if (word[c] -= 1) <= 0\n    break if word.empty?\n  end\n  \n  word.empty?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46212,"user_id":null,"body":"def scramble(s1, s2)\n    cnt = Array.new 26, 0\n    s2.chars.each do |c|\n        cnt[c.ord - 'a'.ord] += 1\n    end\n    tot = cnt.sum\n    s1.chars.each do |c|\n        i = c.ord - 'a'.ord\n        if cnt[i] > 0\n            cnt[i] -= 1\n            tot -= 1\n            if tot == 0\n                return true\n            end\n        end\n    end\n    false\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55c6126177c9441a570000cc":[{"id":46213,"user_id":527,"body":"def order_weight(ws)\n  ws.split.sort_by!{ |w| {w.each_char.map(&.to_i).sum, w} }.join(' ')\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46214,"user_id":492,"body":"def d_sum(n)\n  n.to_s.chars.map{|x| x.to_i}.reduce(0){|m, e| m + e}\nend\ndef comp(a, b)\n  cp = d_sum(a) - d_sum(b)\n  if (cp == 0) \n    return a <=> b \n  end\n  cp < 0 ? -1 : 1\nend\ndef order_weight(ws)\n  ws.split.sort { |x, y| comp(x, y) }.join(\" \")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46215,"user_id":null,"body":"def order_weight(ws)\n  ws.split.sort_by!{ |v| {v.each_char.sum(&.to_i), v} }.join(' ')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46216,"user_id":null,"body":"def order_weight(ws)\n  ws.split.sort_by!{ |v| {v.chars.sum(&.to_i), v} }.join(' ')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46217,"user_id":null,"body":"def order_weight(ws)\n  ws.split(' ').sort_by{ |v| {v.chars.sum(&.to_i), v} }.join(' ')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46218,"user_id":null,"body":"def order_weight(ws)\n  ws.split.sort_by { |w|  {w.chars.sum(&.to_i), w} }.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46219,"user_id":1474,"body":"def dig_sum(s)\n  s.chars.reduce(0) { |acc, c| acc + c.to_i }\nend\n\ndef sort_by(s1, s2)\n  sm1 = dig_sum(s1)\n  sm2 = dig_sum(s2)\n  sm1 == sm2 ? s1 <=> s2 : sm1 <=> sm2\nend\n\ndef order_weight(ws)\n  ws.split.sort { |s1, s2| sort_by(s1, s2) }.join(' ')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46220,"user_id":1474,"body":"def order_weight(ws)\n  ws.split.sort_by { |s| {s.chars.reduce(0) { |acc, c| acc + c.to_i }, s} }.join(' ')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46221,"user_id":1474,"body":"def dig_sum(s)\n  s.chars.reduce(0) { |acc, c| acc + c.to_i }\nend\n\ndef sort_by(s1, s2)\n  sm1 = dig_sum(s1)\n  sm2 = dig_sum(s2)\n  sm1 == sm2 ? s1 <=> s2 : sm1 < sm2 ? -1 : 1\nend\n\ndef order_weight(ws)\n  ws.split.sort { |s1, s2| sort_by(s1, s2) }.join(' ')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46222,"user_id":null,"body":"def order_weight(ws)\n  ws.split(' ').map { |n| {n, n.chars.map(&.to_i).sum} }.sort { |a, b| a[1] == b[1] ? a[0] <=> b[0] : a[1] <=> b[1] }.map { |n| n[0] }.join(' ')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55caf1fd8063ddfa8e000018":[{"id":46223,"user_id":421,"body":"def arithmetic_sequence_elements(a,r,n)\n  (0...n).map{|x| x * r + a}.join(\", \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46224,"user_id":1828,"body":"def arithmetic_sequence_elements(a,r,n)\n  res = [a]\n  (n-1).times do\n    res << res.last + r\n  end\n  res.join(\", \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46225,"user_id":17,"body":"def arithmetic_sequence_elements(a, d, n)\n  (0...n).map { |i| a + i * d }.join(\", \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46226,"user_id":527,"body":"def arithmetic_sequence_elements(a, r, n)\n  Array.new(n){ |i| a + r * i }.join(\", \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46227,"user_id":1624,"body":"def arithmetic_sequence_elements(a,r,n)\n  (0...n).map{|i| a + r*i}.join(\", \")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46228,"user_id":null,"body":"def arithmetic_sequence_elements(a,r,n)\n  Array.new(n, a).map_with_index{ |b, i| b + i * r }.join(\", \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46229,"user_id":1375,"body":"def arithmetic_sequence_elements(a, r, n)\n  result = [a]\n  until result.size == n\n    a += r\n    result << a\n  end\n  result.join(\", \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46230,"user_id":1072,"body":"def arithmetic_sequence_elements(a,r,n) (0...n).map{|i| i*r+a}.join(\", \") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46231,"user_id":1072,"body":"def arithmetic_sequence_elements(a,r,n) (0...n).map{|i| i*r+a}.join(\", \") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46232,"user_id":null,"body":"def arithmetic_sequence_elements(a,r,n)\n  a.step(by: r, to: (a + n * r)).to_a[0...-1].join(\", \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55cb632c1a5d7b3ad0000145":[{"id":46233,"user_id":null,"body":"def hoop_count(n : Int32) : String\n\tn >= 10 ? \"Great, now move on to tricks\" : \"Keep at it until you get it\"\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-28 11:35:47"},{"id":46234,"user_id":null,"body":"def hoop_count(n)\n\treturn n < 10 ? \"Keep at it until you get it\" : \"Great, now move on to tricks\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46235,"user_id":527,"body":"def hoop_count(n : Int) : String\n\tn >= 10 ? \"Great, now move on to tricks\" : \"Keep at it until you get it\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46236,"user_id":null,"body":"def hoop_count(n) : String\n\tn >= 10 ? \"Great, now move on to tricks\" : \"Keep at it until you get it\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46237,"user_id":null,"body":"def hoop_count(n)\n\tif n >= 10\n    return \"Great, now move on to tricks\"\n  else\n    return \"Keep at it until you get it\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46238,"user_id":1624,"body":"def hoop_count(n)\n\tif n >= 10\n    \"Great, now move on to tricks\"\n  else\n    \"Keep at it until you get it\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46239,"user_id":null,"body":"def hoop_count(n)\n  if n < 10\n    return \"Keep at it until you get it\"\n  end\n  return \"Great, now move on to tricks\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46240,"user_id":null,"body":"def hoop_count(n)\n\tn >= 10 ? \"Great, now move on to tricks\" : \"Keep at it until you get it\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46241,"user_id":null,"body":"def hoop_count(n)\n\tn > 9 ? \"Great, now move on to tricks\" : \"Keep at it until you get it\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46242,"user_id":null,"body":"def hoop_count(n)\n\t n<10 ? \"Keep at it until you get it\" : \"Great, now move on to tricks\";\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55cbc3586671f6aa070000fb":[{"id":46243,"user_id":645,"body":"def check_for_factor(base, factor)\n  base % factor == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46244,"user_id":527,"body":"def check_for_factor(base : Int, factor : Int) : Bool\n  base.divisible_by?(factor)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46245,"user_id":527,"body":"def check_for_factor(base, factor)\n  base.divisible_by?(factor)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46246,"user_id":null,"body":"def check_for_factor(base, factor)\n  return base % factor == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46247,"user_id":527,"body":"def check_for_factor(base : Int, factor : Int) : Bool\n  base % factor == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55cbd4ba903825f7970000f5":[{"id":46248,"user_id":527,"body":"def get_grade(a : Int, b : Int, c : Int) : Char\n  case (a + b + c) \/ 30\n    when 9, 10 then \"A\"\n    when 8 then \"B\"\n    when 7 then \"C\"\n    when 6 then \"D\"\n    else \"F\"\n  end\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46249,"user_id":53,"body":"def get_grade(a, b, c)\n  return \"FFFFFFDCBAA\".chars[((a+b+c)\/30).to_i];\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46250,"user_id":null,"body":"def get_grade(*n)\n  average = n.sum \/\/ 3\n  case average\n  when .in? 0...60\n    \"F\"\n  when .in? 60...70\n    \"D\"\n  when .in? 70...80\n    \"C\"\n  when .in? 80...90\n    \"B\"\n  when .in? 90..100\n    \"A\"\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46251,"user_id":null,"body":"def get_grade(a, b, c)\n  average = (a + b + c) \/ 3\n  if average >= 90\n    \"A\"\n  elsif average >= 80\n    \"B\"\n  elsif average >= 70\n    \"C\"\n  elsif average >= 60\n    \"D\"\n  else\n    \"F\"\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46252,"user_id":null,"body":"def get_grade(a, b, c)\n  average = (a + b + c) \/ 3\n  if 90 <= average <= 100\n    return \"A\"\n  elsif 80 <= average < 90\n    return \"B\"\n  elsif 70 <= average < 80\n    return \"C\"\n  elsif 60 <= average < 70\n    return \"D\"\n  elsif 0 <= average < 60\n    return \"F\"\n  else\n    return \"Something went wrong!\"\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46253,"user_id":421,"body":"def get_grade(a, b, c)\n  score = (a + b + c) \/ 3\n  score >= 90 ? \"A\" : score >= 80 ? \"B\" : score >= 70 ? \"C\" : score >= 60 ? \"D\" : \"F\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46254,"user_id":1474,"body":"def get_grade(s1, s2, s3)\n  avg = (s1 + s2 + s3) \/ 3\n  if 90 <= avg <= 100\n    \"A\"\n  elsif 80 <= avg <= 89\n    \"B\"\n  elsif 70 <= avg <= 79\n    \"C\"\n  elsif 60 <= avg <= 69\n    \"D\"\n  else\n    \"F\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46255,"user_id":null,"body":"def get_grade(a, b, c)\n  mean = (a + b + c) \/ 3\n  if mean >= 90\n    return \"A\"\n  end\n  if mean >= 80\n    return \"B\"\n  end\n  if mean >= 70\n    return \"C\"\n  end\n  if mean >= 60\n    return \"D\"\n  end\n  return \"F\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46256,"user_id":null,"body":"def get_grade(a, b, c)\n  avg = (a + b + c) \/ 3\n case when avg >= 90 then \"A\"\n      when avg >= 80 then \"B\"\n      when avg >= 70 then \"C\"\n      when avg >= 60 then \"D\"\n      when avg < 60 then \"F\"\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46257,"user_id":645,"body":"def get_grade(a, b, c)\n  s = (a + b + c) \/ 3\n  90 <= s ? \"A\" : (80 <= s ? \"B\" : (70 <= s ? \"C\" : (60 <= s ? \"D\" : \"F\")))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55ccdf1512938ce3ac000056":[{"id":46258,"user_id":null,"body":"def is_lock_ness_monster(string)\n  !string.match(\/tree fiddy|3\\.50|three fifty\/).nil?\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46259,"user_id":53,"body":"def is_lock_ness_monster(s)\n  s.includes?(\"tree fiddy\") || s.includes?(\"3.50\") || s.includes?(\"three fifty\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46260,"user_id":1474,"body":"def is_lock_ness_monster(string)\n  !!string.match(\/tree fiddy|three fifty|3\\.50\/i)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46261,"user_id":50,"body":"def is_lock_ness_monster(s)\n  \/tree fiddy|three fifty|3\\.50\/.match(s) != nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46262,"user_id":1072,"body":"def is_lock_ness_monster(s) (\/3\\.50|three fifty|tree fiddy\/ =~ s) != nil end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46263,"user_id":421,"body":"def is_lock_ness_monster(string)\n  \/three fifty|tree fiddy|3\\.50\/i === string\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46264,"user_id":1624,"body":"def is_lock_ness_monster(string)\n  !!(string =~ \/three fifty|tree fiddy|3\\.50\/)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46265,"user_id":null,"body":"def is_lock_ness_monster(string)\n  return found = string.includes?(\"three fifty\") || string.includes?(\"tree fiddy\") || string.includes?(\"3.50\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46266,"user_id":null,"body":"def is_lock_ness_monster(string)\n  ((string.includes? \"three fifty\") || (string.includes? \"tree fiddy\") || (string.includes? \"3.50\")) ? true : false\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55d24f55d7dd296eb9000030":[{"id":46267,"user_id":1403,"body":"def summation(num)\n  (1..num).sum\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46268,"user_id":1519,"body":"def summation(num)\n  num * (num + 1) \/ 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46269,"user_id":null,"body":"def summation(num)\n  return num*(num+1)\/2;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46270,"user_id":null,"body":"def summation(num)\n  1.upto(num).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46271,"user_id":null,"body":"def summation(n)\n  (0..n).to_a.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46272,"user_id":null,"body":"def summation(n)\n  return n == 0? n: n + summation(n - 1);\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46273,"user_id":null,"body":"def summation(num)\n  sum = 0\n  num.times do |n|\n    sum += n + 1\n  end\n  sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46274,"user_id":null,"body":"def summation(num)\n  sum=0_i64\n  while num!=0\n    sum+=num;\n    num-=1;\n  end;\n  sum;\nend;","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46275,"user_id":null,"body":"def summation(num)\n  r = 0\n  num.times do |i|\n    r += i+1\n  end\n  r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46276,"user_id":564,"body":"def summation(n)\n  (n * n + n) \/ 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55dc4520094bbaf50e0000cb":[{"id":46277,"user_id":null,"body":"def am_i_wilson(n) \n  n == 5 || n == 13 || n == 563 ? true : false\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46278,"user_id":50,"body":"def am_i_wilson(n) \n    return n == 5 || n == 13 || n == 563\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46279,"user_id":48,"body":"def am_i_wilson(n) \n  [5, 13, 563].includes?(n)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46280,"user_id":1624,"body":"def am_i_wilson(n) \n  n >= 2 && (1...n).reduce{|x,y| (x*y) % (n*n) } == n*n - 1\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46281,"user_id":527,"body":"def am_i_wilson(n) \n  {5, 13, 563}.includes?(n)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46282,"user_id":1072,"body":"def am_i_wilson(n) n==5 || n==13 || n==563 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55e2adece53b4cdcb900006c":[{"id":46283,"user_id":2609,"body":"def race(v1, v2, g)\n  return if v1 > v2\n  time = (g.to_f \/ (v2 - v1)).hours\n  [time.hours, time.minutes, time.seconds]\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46284,"user_id":null,"body":"def race(v1, v2, g)\n  \n  if v1 >= v2\n    return [-1,-1,-1]\n  end\n  \n  t = g.fdiv(v2-v1)\n  total_seconds = t * 3600\n  \n  seconds = (total_seconds % 60).floor\n  minutes = ((total_seconds \/ 60) % 60).floor\n  hours = t.floor\n  \n  [hours,minutes,seconds]\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46285,"user_id":null,"body":"def race(v1, v2, g) : Array(Int32) | Nil\n  return [-1,-1,-1] if v1 >= v2\n  s = (g * 3600) \/ (v2 - v1)\n  [(s \/\/ 3600).to_i, ((s % 3600) \/\/ 60).to_i, (s % 60).to_i]\nend\n\n# https:\/\/stackoverflow.com\/a\/51606488","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46286,"user_id":null,"body":"def race(v1, v2, g)\n  return [-1,-1,-1] if v1 >= v2\n  secs = g \/ ((v2 - v1) \/ 3600.0)\n  [(secs \/ 3600).to_i, (secs \/ 60 % 60).to_i, (secs % 60).to_i]\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46287,"user_id":null,"body":"def race(v1, v2, g)\n  return [-1,-1,-1] if v1 >= v2\n  return (g\/(v2-v1)).hours.to_s.split(':').map{|v| v.to_f.floor.to_i}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46288,"user_id":null,"body":"def race(v1, v2, g)\n  if v1 > v2\n    return [-1,-1,-1]\n  end\n  s = 3600 * g \/ (v2 - v1)\n  m, s = s.divmod(60)\n  h, m = m.divmod(60)\n  [h.to_u32, m.to_u32, s.to_u32]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46289,"user_id":492,"body":"def race(v1, v2, g)\n  return [-1,-1,-1] if v1 >= v2\n  t = g * 3600 \/\/ (v2 - v1)\n  [t \/\/ 3600, t \/\/ 60 % 60, t % 60]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46290,"user_id":53,"body":"def race(v1, v2, g)\n  if v1 >= v2\n    return [-1,-1,-1]\n  end\n  res = Array.new(3, 0)\n  t = (g * 3600) \/ (v2 - v1)\n  h = (t \/ 3600).to_i\n  m = ((t % 3600) \/ 60).to_i\n  s = (t % 60).to_i\n  res[0] = h\n  res[1] = m\n  res[2] = s\n  return res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46291,"user_id":1474,"body":"def race(v1, v2, g)\n  return [-1,-1,-1] if v1 > v2\n  hr, min, sec = 1, 0, 0\n  vh1, vh2 = v1 + g, v2\n  while vh1 > vh2\n    vh1 += v1\n    vh2 += v2\n    hr += 1\n  end\n  if vh1.round(4) == vh2.round(4)\n    return [hr, min, sec]\n  else\n    vh1 -= v1\n    vh2 -= v2\n    hr -= 1\n  end\n  vm1, vm2 = v1 \/ 60.0, v2 \/ 60.0\n  while vh1 > vh2\n    vh1 += vm1\n    vh2 += vm2\n    min += 1\n  end\n  if vh1.round(4) == vh2.round(4)\n    if min == 60\n      hr += 1\n      min = 0\n    end\n    return [hr, min, sec]\n  else\n    vh1 -= vm1\n    vh2 -= vm2\n    min -= 1\n  end\n  vs1, vs2 = v1 \/ 3600.0, v2 \/ 3600.0\n  while vh1 > vh2\n    vh1 += vs1\n    vh2 += vs2\n    sec += 1\n  end\n  sec -= 1 unless vh1.round(4) == vh2.round(4)\n  if sec == 60\n    min += 1\n    sec = 0\n  end\n  [hr, min, sec]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46292,"user_id":null,"body":"def race(v1, v2, g)\n  # your code\n  if v1 >= v2\n    nil\n  else\n     s0 = ( g * 3600 \/ (v2 - v1)).floor\n     print( s0 ) \n     s = s0 % 60\n     m0 = (s0 - s) \/ 60\n     m = m0 % 60 \n     h = (m0 - m) \/ 60\n     [h, m, s]\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55e6f5e58f7817808e00002e":[{"id":46293,"user_id":421,"body":"def seven(m)\n    count = 0\n    while m >= 100\n        m = m \/\/ 10 - 2 * (m % 10)\n        count += 1\n    end\n    [m, count]\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-28 16:02:27"},{"id":46294,"user_id":492,"body":"def seven(m)\n    cnt = 0\n    while (m > 99)\n        a0 = m % 10\n        m = (m - a0) \/ 10 - 2 * a0\n        cnt += 1\n    end\n    return [m, cnt]\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-28 15:56:25"},{"id":46295,"user_id":492,"body":"def seven(m)\n    cnt = 0\n    while (m > 99)\n        a0 = m % 10\n        m = (m - a0) \/ 10 - 2 * a0\n        cnt += 1\n    end\n    return [m, cnt]\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-28 15:56:31"},{"id":46296,"user_id":null,"body":"def seven(m)\n  return [m, 0] if m < 100\n  a, b = seven(m \/\/ 10 - 2 * (m % 10))\n  [a, b + 1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46297,"user_id":53,"body":"def seven(m)\n  cnt = 0\n  while m > 99\n    m = (m \/\/ 10) - (2 * (m % 10)); \n    cnt += 1\n  end\n  [m, cnt]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46298,"user_id":1474,"body":"def seven(m)\n  n = m\n  cnt = 0\n  while n > 99\n    stg = n.to_s\n    n = stg[0...-1].to_i - 2 * stg[-1].to_i\n    cnt += 1\n  end\n  [n, cnt]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46299,"user_id":1624,"body":"def seven(m, steps=0)\n  return [m, steps] if m < 100\n  x, y = m.divmod(10)\n  seven(x-2*y, steps+1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46300,"user_id":null,"body":"def seven(m)\n  i = 0\n  while m >= 100\n    m = m \/ 10 - 2 * (m % 10)\n    i += 1\n  end\n  [m, i]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46301,"user_id":1768,"body":"def seven(x, y=0)\n    x<100?[x,y]: seven(x\/10-2*(x%10),y+1)    \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46302,"user_id":null,"body":"def seven(m, c = 0)\n  if m < 100\n    [m, c]\n  else\n    y = m % 10\n    x = (m - y) \/ 10\n    r = x - 2 * y\n    seven(r, c + 1)\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55e7280b40e1c4a06d0000aa":[{"id":46303,"user_id":null,"body":"def choose_best_sum(t, k, ls)\n  ls.combinations(k).map(&.sum).select { |d| d <= t }.max?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46304,"user_id":null,"body":"def choose_best_sum(t, k, ls)\n  ls.each_combination(k).map(&.sum).select(&.<=(t)).max?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46305,"user_id":null,"body":"def choose_best_sum(t, k, ls)\n  ls.combinations(k).map(&.sum).reject(&.>(t)).max?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46306,"user_id":527,"body":"def choose_best_sum(t, k, ls)\n  ls.each_combination(k, true).map(&.sum).select(&.<=(t)).max?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46307,"user_id":492,"body":"def choose_best_sum(t, k, ls)\n    a = ls.combinations(k).to_a\n    mx = -1\n    res = [] of Int32\n    a.each do |l|\n        s = l.reduce(0){ |sum, x| sum + x }\n        if ((s >= mx) && (s <= t))\n            res = [l, s]\n            mx = s\n        end\n    end\n    if (res.size > 0)\n      res[1]\n    else -1 end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46308,"user_id":492,"body":"def choose_best_sum(t, k, ls)\n    a = ls.combinations(k).to_a\n    mx = -1\n    res = [] of Int32\n    a.each do |l|\n        s = l.reduce(0){ |sum, x| sum + x }\n        if ((s >= mx) && (s <= t))\n            res = [l, s]\n            mx = s\n        end\n    end\n    if (res.size > 0)\n      res[1]\n    else -1 end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46309,"user_id":null,"body":"def choose_best_sum(t, k, ls)\n  ls.combinations(k).map(&.sum).reject(&.>(t)).sort.last?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46310,"user_id":168,"body":"def choose_best_sum(t, k, ls)\n  ls.combinations(k).map(&.sum).select { |x| x <= t }.max?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46311,"user_id":null,"body":"def choose_best_sum(t, k, ls)\n  return if k > ls.size \n  ls.combinations(k).each.map(&.sum).select(&.<=(t)).max?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46312,"user_id":421,"body":"def choose_best_sum(t, k, ls)\n  arr = ls.combinations(k).map(&.sum).select{|x| x <= t}\n  arr.empty? ? -1 : arr.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55e86e212fce2aae75000060":[{"id":46313,"user_id":492,"body":"def prod2sum(a, b, c, d)\n  [[(a*d-b*c).abs, (a*c+b*d).abs].sort, [(a*c-b*d).abs, (a*d+b*c).abs].sort].uniq.sort\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46314,"user_id":492,"body":"def prod2sum(a, b, c, d)\n  [[(a*d-b*c).abs, (a*c+b*d).abs].sort, [(a*c-b*d).abs, (a*d+b*c).abs].sort].uniq.sort\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46315,"user_id":null,"body":"def prod2sum(a, b, c, d)\n   l1 = [(a * c + b * d).abs, (a * d - b * c).abs].sort\n   l2 = [(a * c - b * d).abs, (a * d + b * c).abs].sort\n   if l1 == l2\n       return [l1]\n   elsif l1[0, 1] < l2[0, 1]\n       return [l1, l2]\n   else\n       return [l2, l1]\n     end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55ecd718f46fba02e5000029":[{"id":46316,"user_id":421,"body":"def between(a, b)\n  (a..b).to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46317,"user_id":527,"body":"def between(a, b)\n  Array.new(b - a + 1, &.+(a))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46318,"user_id":null,"body":"def between(a, b)\n  return (a..b).to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46319,"user_id":null,"body":"def between(a, b)\n    arr = Array(Int32).new\n    while a <= b\n      arr << a\n      a+=1\n    end\n    arr\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46320,"user_id":null,"body":"def between(a, b)\n  number = a\n  array = [number]\n  \n  until number == b\n    number += 1\n    array << number\n  end\n  \n  return array\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55edaba99da3a9c84000003b":[{"id":46321,"user_id":527,"body":"def divisible_by(numbers, divisor)\n  numbers.select(&.divisible_by?(divisor))\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46322,"user_id":1474,"body":"def divisible_by(numbers, divisor)\n  numbers.select { |i| i % divisor == 0 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46323,"user_id":null,"body":"def divisible_by(numbers, divisor)\n  numbers.select{|number| number % divisor == 0}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46324,"user_id":53,"body":"def divisible_by(numbers, divisor)\n  numbers.select{|c| c % divisor == 0}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46325,"user_id":421,"body":"def divisible_by(numbers, divisor)\n  numbers.select {|x| (x % divisor).zero?}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55efecb8680f47654c000095":[{"id":46326,"user_id":492,"body":"def int_rac(n : Int64, x : Int64)\n  y, i = 0, 0\n  until (x - y).abs < 1\n    y, i = x, i.succ\n    x = ((x + n \/ x) \/ 2).floor\n  end\n  i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46327,"user_id":53,"body":"def int_rac(n : Int64, m : Int64)\n  p, k = 0, 0\n  while (m - p).abs >= 1\n    p, k = m, k + 1\n    m = ((m + n \/ m) \/ 2).floor\n  end\n  k\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46328,"user_id":421,"body":"def int_rac(n : Int64, x : Int64) \n  ans = (n ** 0.5).to_i64\n  i = 0\n  while ans != x\n    i += 1   \n    x = (x + n \/\/ x) \/\/ 2\n  end\n  i + 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46329,"user_id":null,"body":"def int_rac(n : Int64, x : Int64)\n  steps = 0\n  loop do\n    y = (x + n \/\/ x) \/\/ 2\n    steps += 1\n    if x == y\n      return steps\n    end\n    x = y\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46330,"user_id":1474,"body":"def int_rac(n : Int64, guess : Int64, cnt : Int64 = 0)\n  x = (guess + n \/\/ guess) \/\/ 2\n  cnt += 1\n  (x - guess).abs < 1 ? cnt : int_rac(n, x, cnt)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46331,"user_id":null,"body":"def int_rac(n : Int64, x : Int64)\n  i = 1\n  r = x * 1.0\n  until ((n**0.5).to_i - r).abs<=1\n    r = (r+n\/r)\/2\n    i += 1\n  end\n  i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46332,"user_id":527,"body":"def int_rac(n : Int64, x : Int64)\n  1.step do |i|\n    y = (x + n \/ x) \/ 2\n    return i if y == x\n    x = y\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46333,"user_id":null,"body":"def int_rac(n : Int64, x : Int64)\n  count = 0\n  while true\n    count = count + 1\n    new_x = ((x + n\/x) \/ 2).as(Int64)\n    if x - new_x < 1 && new_x - x < 1\n      return count\n    end\n    x = new_x\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55f2b110f61eb01779000053":[{"id":46334,"user_id":null,"body":"def get_sum(a,b)\n  ([a,b].min..[a,b].max).sum\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46335,"user_id":421,"body":"def get_sum(a,b)\n  c = [a, b].max\n  d = [a, b].min\n  (d..c).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46336,"user_id":527,"body":"def get_sum(a, b)\n  Range.new(*{a, b}.minmax).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46337,"user_id":1474,"body":"def get_sum(a,b)\n  l, g = [a, b].minmax\n  (l..g).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46338,"user_id":168,"body":"def get_sum(a, b)\n  Range.new(*[a, b].minmax).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46339,"user_id":null,"body":"require \"range\"\n\ndef get_sum(a, b)\n  if a == b\n    return a\n  elsif a < b\n    less, more = a, b\n  else\n    less, more = b, a\n  end\n  Range.new(less, more).sum\nend\n\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46340,"user_id":null,"body":"def get_sum(a,b)\n  if a < b\n    (a..b).sum\n  else\n    (b..a).sum\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46341,"user_id":null,"body":"def get_sum(a,b)\n  if a == b\n    return a\n  end\n\n  if a < b \n    return (a..b).sum()\n  else\n    return (b..a).sum()\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46342,"user_id":null,"body":"def get_sum(a,b)\n  if b > a\n    (a..b).sum\n  else\n    (b..a).sum\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46343,"user_id":50,"body":"def get_sum(a,b)\n  ((a-b).abs+1)*(a+b)>>1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55f3da49e83ca1ddae0000ad":[{"id":46344,"user_id":53,"body":"def tankvol(h, d, vt)\n  n = Math.acos(1.0 - h.to_f \/ (d.to_f \/ 2.0)) * 2.0\n  (vt * (n - Math.sin(n)) \/ (2.0 * 3.14159265358979323846)).floor\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46345,"user_id":null,"body":"def tankvol(h, d, vt)\n  r = d \/ 2\n  (r.abs2 * Math.acos((r-h)\/r) - (r-h) * Math.sqrt(2 * r * h - h.abs2)) * vt \/ (Math::PI * r.abs2) \/\/ 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46346,"user_id":null,"body":"def tankvol(h, d, vt)\n  r = d \/ 2\n  th = r - h # Triangle height\n  circle = Math::PI * r.abs2\n  sector = r.abs2 * Math.acos(th \/ r)\n  triangle = th * Math.sqrt(r.abs2 - th.abs2)\n  depth = vt \/ circle\n  puts({r, th, circle, sector, triangle, depth})\n  (depth * (sector - triangle)).floor\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46347,"user_id":492,"body":"def tankvol(h, d, vt)\n    if (h == 0)\n    \treturn 0 \n  \tend\n    # radius\n    h = h.to_f\n    r = d \/ 2.0\n    if (h == r) \n    \treturn vt \/\/ 2 \n  \tend\n    if (h == d) \n    \treturn vt \n  \tend\n    # height > radius, calculate with d - h and at the end change the volume\n    if (h > r)\n        h = d - h\n        hilevel = true\n    else\n        hilevel = false\n    end\n    # total area of circle\n    st = Math::PI * r * r\n    # half angle from the center\n    theta = Math.acos((r - h) \/ r)\n    sr = (r - h) * Math.sqrt(r * r - (r - h) ** 2)\n    # area corresponding to angle 2 * theta\n    sa = st \/ Math::PI * theta\n    # surface corresponding to the height\n    sh = sa - sr\n    # volume to find corresponding to surface of liquid \/ total surface\n    v = vt * sh \/ st\n    if (hilevel)\n        v = vt - v\n    end\n    v.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46348,"user_id":209,"body":"def tankvol(h, d, v)\n  r = d \/ 2\n  t = Math.acos(1-h\/r)\n  ((v\/(3.14159265*r**2))*(t*r**2 - r*Math.sin(t)*(r-h)))\/\/1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46349,"user_id":527,"body":"def tankvol(h, d, vt) : Int\n  r = 0.5 * d\n  section_area = r ** 2 * Math.acos(1 - h \/ r) - (r - h) * Math.sqrt(h * (d - h))\n  full_section_area = Math::PI * r * r\n  (vt * section_area \/ full_section_area).to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55f73be6e12baaa5900000d4":[{"id":46350,"user_id":527,"body":"def goals(*args)\n  args.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46351,"user_id":null,"body":"def goals(la_liga_goals, copa_del_rey_goals, champions_league_goals)\n  [la_liga_goals+copa_del_rey_goals+champions_league_goals].sum()\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46352,"user_id":527,"body":"def goals(la_liga_goals, copa_del_rey_goals, champions_league_goals)\n  la_liga_goals + copa_del_rey_goals + champions_league_goals\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46353,"user_id":1072,"body":"def goals(*b) b.reduce{|a, b| a + b} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46354,"user_id":null,"body":"def goals(x, y, z) x+y+z end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46355,"user_id":null,"body":"def goals(ll, cdr, cl)\n  ll + cdr + cl\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46356,"user_id":null,"body":"def goals(la_liga_goals, copa_del_rey_goals, champions_league_goals)\n  return [la_liga_goals, copa_del_rey_goals, champions_league_goals].sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46357,"user_id":null,"body":"def goals(a, b, c)\n  return a + b + c;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46358,"user_id":479,"body":"def goals(l, c, v)\n return l + c + v\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46359,"user_id":53,"body":"def goals(a, b, c)\n  c + (a + b)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55f7eb009e6614447b000099":[{"id":46360,"user_id":812,"body":"def square(number)\n  result = 1_u64\n  while number > 1\n    result = result * 2\n    number = number - 1\n  end\n  return result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46361,"user_id":53,"body":"def square(number)\n  1_u64 << (number - 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46362,"user_id":50,"body":"def square(number)\n  2.to_i64**(number-1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46363,"user_id":421,"body":"def square(number)\n  2_u64 ** (number - 1_u64)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46364,"user_id":null,"body":"def square(number)\n  1_i64<<number-1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46365,"user_id":1624,"body":"def square(n)\n  2_u64 ** (n-1)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46366,"user_id":527,"body":"def square(number)\n  2u64 ** (number - 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46367,"user_id":1072,"body":"def square(n) 2_i64**(n-1) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55f8a9c06c018a0d6e000132":[{"id":46368,"user_id":null,"body":"def validate_pin(pin)\n  !pin.match(\/\\A(\\d{4}|\\d{6})\\z\/).nil?\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46369,"user_id":null,"body":"def validate_pin(pin)\n  pin.chars.all?(&.ascii_number?) && (pin.size == 4 || pin.size == 6)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46370,"user_id":null,"body":"def validate_pin(pin)\n  (pin =~ \/^[0-9]{4}([0-9]{2})?(?!\n)$\/x) ? true : false\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46371,"user_id":null,"body":"def validate_pin(pin : String) : Bool\n  \/\\A(\\d{4}|\\d{6})\\z\/ === pin\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46372,"user_id":null,"body":"def validate_pin(pin)\n  \/\\A(\\d{4}|\\d{6})\\z\/.matches?(pin)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46373,"user_id":null,"body":"def validate_pin(pin)\n  pin.ends_with?('\n') ? false : \/^\\d{4}$|^\\d{6}$\/.matches?(pin)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46374,"user_id":null,"body":"def validate_pin(pin)\n  (pin.size == 4 || pin.size == 6) && pin.chars.all?{|c| c.ascii_number? }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46375,"user_id":50,"body":"def validate_pin(s)\n  !s.includes?(\"\n\") && !!(s =~ \/^\\d{4}(\\d{2})?$\/)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46376,"user_id":null,"body":"def validate_pin(pin)\n  if pin.size != 4 && pin.size != 6\n    return false;\n  end;\n  pin.chars.map do |c|\n    if c<'0' || c>'9'\n      return false;\n    end;\n  end;\n  return true;\nend;","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46377,"user_id":null,"body":"def validate_pin(pin)\n  \/^\\d{4}(\\d{2})?$\/.matches?(pin.reverse)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55f9b48403f6b87a7c0000bd":[{"id":46378,"user_id":421,"body":"def paperwork(n, m)\n  n > 0 && m > 0 ? n * m : 0\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46379,"user_id":53,"body":"def paperwork(n, m)\n  if n < 0 || m < 0\n    0\n  else\n    n * m\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46380,"user_id":527,"body":"def paperwork(n, m)\n  n < 0 || m < 0 ? 0 : n * m\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46381,"user_id":null,"body":"def paperwork(n, m)\n  return 0 if n<0 || m<0\n  n*m\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46382,"user_id":48,"body":"def paperwork(n, m)\n  (n < 1 || m < 1) ? 0 : n * m\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46383,"user_id":null,"body":"def paperwork(n, m)\n  return (n < 0 || m < 0)? 0: n * m\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46384,"user_id":null,"body":"def paperwork(n, m)\n if n < 0 || m < 0\n    return 0\n  else\n    n * m\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55f9bca8ecaa9eac7100004a":[{"id":46385,"user_id":null,"body":"MS_PER_HOUR = 3_600_000\nMS_PER_MINUTE = 60_000\nMS_PER_SECOND = 1_000\n\ndef past(h, m, s)\n  (h * MS_PER_HOUR) + (m * MS_PER_MINUTE) + (s * MS_PER_SECOND)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46386,"user_id":null,"body":"def past(h, m, s)\n  (h * 3_600_000) + (m * 60_000) + (s * 1000)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46387,"user_id":null,"body":"def past(h, m, s)\n  return s*1000+m*60000+h*3600000;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46388,"user_id":null,"body":"def past(h, m, s)\n  (h * 3600000) + (m * 60000) + (s * 1000)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46389,"user_id":645,"body":"def past(h, m, s)\n  (h * 3600 + m * 60 + s) * 1000\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46390,"user_id":null,"body":"def past(h, m, s)\n  1000 * (60 * 60 * h + 60 * m + s)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46391,"user_id":null,"body":"def past(h, m, s)\n  h *= 60 * 60\n  m *= 60\n  (h + m + s) * 1000\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46392,"user_id":null,"body":"def past(h, m, s)\n  ((((60 * h) + m) * 60) + s) * 1000\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46393,"user_id":null,"body":"def past(h, m, s)\n  h * 3_600_000 + m * 60_000 + s * 1_000\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46394,"user_id":null,"body":"def past(h, m, s)\n  1000*(s + 60*(m +60*(h)))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55fab1ffda3e2e44f00000c6":[{"id":46395,"user_id":527,"body":"def cockroach_speed(s)\n  s \/\/ 0.036\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46396,"user_id":1474,"body":"def cockroach_speed(s)\n  (s * 1000 \/ 36).floor\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46397,"user_id":null,"body":"def cockroach_speed(s)\n  s * 100_000 \/\/ 3600\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46398,"user_id":168,"body":"def cockroach_speed(s)\n  (s * 1000 \/ 36).to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46399,"user_id":null,"body":"def cockroach_speed(s)\n  (s*27.7778).floor\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46400,"user_id":null,"body":"def cockroach_speed(s)\n  return s \/\/ 0.036;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46401,"user_id":48,"body":"def cockroach_speed(s)\n  (s \/ 0.036).floor\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46402,"user_id":53,"body":"def cockroach_speed(s)\n  100000*s\/\/3600\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46403,"user_id":209,"body":"def cockroach_speed(s)\n  (s * 250\/9).to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46404,"user_id":421,"body":"def cockroach_speed(s)\n  s * 100000 \/\/ 3600\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"55fd2d567d94ac3bc9000064":[{"id":46405,"user_id":1072,"body":"def row_sum_odd_numbers(n) n**3 end","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46406,"user_id":null,"body":"def row_sum_odd_numbers(n)\n first_n = ((1...n).sum + 1) * 2 - 1\n last_n = (1..n).sum * 2 - 1\n (first_n..last_n).select(&.odd?).sum\nend\n","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46407,"user_id":null,"body":"def row_sum_odd_numbers(n)\n  return n < 2? n : 3 * n * (n - 1) + 1 + row_sum_odd_numbers(n - 1); \nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46408,"user_id":null,"body":"def row_sum_odd_numbers(n)\n  n ** 2 * n\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46409,"user_id":1474,"body":"def row_sum_odd_numbers(n)\n  st = (n - 1) * n + 1\n  ed = n * (n + 1) - 1\n  (st..ed).step(2).sum\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46410,"user_id":null,"body":"def row_sum_odd_numbers(n)\n  s = 1\n  n.times do |i|\n    s += i * 2\n  end\n  n.times.sum {|i| s + i * 2}\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46411,"user_id":null,"body":"def row_sum_odd_numbers(n)\n  index = n * (n-1) + 1\n  final = [] of Int32\n  n.times { \n    final << index\n    index += 2\n  }\n  final.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46412,"user_id":null,"body":"def row_sum_odd_numbers(n)\n  return n**3\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46413,"user_id":null,"body":"def row_sum_odd_numbers(n)\n  rows = [[1]]\n  num = 3\n  (2..n).each { |row|\n    c = [] of Int32\n    row.times do\n      c << num\n      num += 2\n    end\n    rows << c\n  }\n  rows.last.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46414,"user_id":null,"body":"def row_sum_odd_numbers(n)\n  current_value = (n * (n-1)) + 1\n  sum = 0\n  n.times do\n    sum += current_value\n    current_value += 2\n  end\n  sum\nend\n\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5601409514fc93442500010b":[{"id":46415,"user_id":53,"body":"def better_than_average(xs : Array(Int32), x : Int32)\n  x > xs.sum \/ xs.size\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46416,"user_id":812,"body":"def better_than_average(class_points : Array(Int32), your_points : Int32)\n  return class_points.sum \/ class_points.size < your_points\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46417,"user_id":null,"body":"def better_than_average(class_points : Array(Int32), your_points : Int32)\n  class_points.push(your_points).reduce(class_points.size) { |acc, i| acc + i } \/ class_points.size - 1 < your_points\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46418,"user_id":null,"body":"def better_than_average(class_points : Array(Int32), your_points : Int32) : Bool\n  (class_points.sum \/ class_points.size) < your_points\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46419,"user_id":50,"body":"def better_than_average(arr : Array(Int32), points : Int32)\n  points > arr.sum \/ arr.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46420,"user_id":168,"body":"def better_than_average(class_points : Array(Int32), your_points : Int32)\n  class_points.sum < your_points * class_points.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46421,"user_id":null,"body":"def better_than_average(class_points : Array(Int32), your_points : Int32)\n  i = 0\n  average = 0\n  \n  while i < class_points.size\n    average += class_points[i]\n    i += 1\n  end\n\n  average \/= class_points.size\n\n  return your_points > average\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46422,"user_id":1474,"body":"def better_than_average(class_points : Array(Int32), your_points : Int32)\n  your_points > (class_points.reduce(your_points) { |s, i| s + i} \/ (class_points.size + 1))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46423,"user_id":null,"body":"def better_than_average(class_points : Array(Int32), your_points : Int32)\n  your_points > class_points.sum\/class_points.size ? true : false\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46424,"user_id":null,"body":"def better_than_average(class_points : Array(Int32), your_points : Int32)\n  your_points > class_points.sum \/ class_points.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5603a9585480c94bd5000073":[{"id":46425,"user_id":421,"body":"def sum_dif_rev(n)\n  [45, 54, 495, 594, 4356, 4545, 4995, 5454, 5895, 5985, 5994, 6534, 19602, 20691, 29403, 30492, 39204, 40293, 43956, 45045, 49005, 49995, 50094, 54054, 59994, 65934, 68607, 70686, 77319, 91377, 197802, 208791, 296703, 307692, 395604, 406593, 439956, 450045, 454545, 494505, 495495, 499995, 505494, 524475, 528255, 536445, 540054, 544455, 544635, 545454, 552825, 554445, 560439, 574425, 593406, 594594, 599994, 604395, 659934, 692307, 703296, 791208, 802197, 890109, 901098, 934065][n-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46426,"user_id":1403,"body":"HASH = {1 => 45, 2 => 54, 3 => 495, 4 => 594}\n\ndef sum_diff(a)\n  return false if a.to_s[-1] == '0' || a.to_s[0] == '0'\n  (a.to_s.reverse.to_i + a) % (a.to_s.reverse.to_i - a).abs == 0 rescue false\nend\n\ndef sum_dif_rev(n)\n  unless (HASH[n] rescue false)\n    k, v = HASH.max\n    loop do\n      if sum_diff(v += 1)\n        HASH[k += 1] = v\n      end\n      break if k > n\n    end\n  end\n  return HASH[n] \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46427,"user_id":null,"body":"class SdrMemo\n  @@memo = Array(Int32).new\n  \n  def self.memo\n    @@memo\n  end\nend\n\ndef rev(n)\n  r = 0\n  while n > 0\n    r = r*10 + n%10\n    n \/\/= 10\n  end\n  r\nend\n\ndef sum_dif_rev(n)\n  nth = SdrMemo.memo[n-1]?\n  return nth if !nth.nil?\n  \n  i = SdrMemo.memo.empty? ? 44 : SdrMemo.memo.last\n  while SdrMemo.memo.size < n\n    i += 1\n    if i%10 != 0\n      r = rev i\n      if r < i && SdrMemo.memo.includes? r\n        SdrMemo.memo << i\n      elsif r != i && (r+i) % (r-i) == 0\n        SdrMemo.memo << i\n      end\n    end\n  end\n  i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46428,"user_id":null,"body":"class Memo\n  @@memo = [] of Int32\n\n  def self.find_next\n    n = @@memo.empty? ? 0 : @@memo.last\n    loop {\n      n += 9\n      next if n % 10 == 0\n      nrev = n.to_s.reverse.to_i\n      next if n == nrev\n      if (n + nrev) % (n - nrev).abs == 0\n        @@memo.push(n)\n        return\n      end\n    }\n  end\n  \n  def self.find(n)\n    while @@memo.size < n\n      find_next \n    end\n    @@memo[n-1]\n  end\nend\n\ndef sum_dif_rev(n)\n  Memo.find(n)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46429,"user_id":1246,"body":"\nLIST  = [] of Int32\n\ndef good(n)\n  inv = n.to_s.chars.reverse.join(\"\").to_i\n  return n != inv && (n + inv) % (inv - n).abs == 0 && inv.to_s.size == n.to_s.size\nend\n\ndef sum_dif_rev(n)\n  i=44\n  while LIST.size < 65\n    i += 1\n    if good(i)\n      LIST << i\n    end\n  end\n  return LIST[n-1]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46430,"user_id":53,"body":"HASH = {1 => 45}\n\ndef sum_diff(a)\n  return false if a%10 == 0\n  (a.to_s.reverse.to_i + a) % (a.to_s.reverse.to_i - a).abs == 0 rescue false\nend\n\ndef sum_dif_rev(n)\n  unless (HASH[n] rescue false)\n    k, v = HASH.max\n    loop do\n      if sum_diff(v += 1)\n        HASH[k += 1] = v\n      end\n      break if k > n\n    end\n  end\n  return HASH[n] \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46431,"user_id":50,"body":"def sum_dif_rev(n)\n return [0, 45, 54, 495, 594, 4356, 4545, 4995, 5454, 5895, 5985, 5994,\n    6534, 19602, 20691, 29403, 30492, 39204, 40293, 43956, 45045, 49005, 49995,\n    50094, 54054, 59994, 65934, 68607, 70686, 77319, 91377, 197802, 208791,\n    296703, 307692, 395604, 406593, 439956, 450045, 454545, 494505, 495495,\n    499995, 505494, 524475, 528255, 536445, 540054, 544455, 544635, 545454,\n    552825, 554445, 560439, 574425, 593406, 594594, 599994, 604395, 659934,\n    692307, 703296, 791208, 802197, 890109, 901098, 934065][n]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46432,"user_id":null,"body":"def sum_dif_rev(n)\n  r = [45, 54, 495, 594, 4356, 4545, 4995, 5454, 5895, 5985, 5994, 6534, 19602, 20691, 29403, 30492, 39204, 40293, 43956, 45045, 49005, 49995, 50094, 54054, 59994, 65934, 68607, 70686, 77319, 91377, 197802, 208791, 296703, 307692, 395604, 406593, 439956, 450045, 454545, 494505, 495495, 499995, 505494, 524475, 528255, 536445, 540054, 544455, 544635, 545454, 552825, 554445, 560439, 574425, 593406, 594594, 599994, 604395, 659934, 692307, 703296, 791208, 802197, 890109, 901098, 934065]\n  r[n-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"560dab9f8b50f89fd6000070":[{"id":46433,"user_id":1072,"body":"class Solution\n  def self.money() 10 end\n  def self.candy() 1.42 end\n  def self.chips() 2.4 end\n  def self.soda() 1 end\n  def self.change() 5.18 end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"560e80734267381a270000a2":[{"id":46434,"user_id":527,"body":"def flip_bit(value, bit_index)\n  value ^ value.class.multiplicative_identity << bit_index - 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46435,"user_id":53,"body":"def flip_bit(n, k)\n  n ^ (1 << (k - 1))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46436,"user_id":209,"body":"def flip_bit(v, b)\n  v ^ (1 << (b - 1))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46437,"user_id":50,"body":"def flip_bit(n, i)\n  n^1<<i-1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46438,"user_id":1624,"body":"def flip_bit(value, bit_index)\n  value ^ (1 << (bit_index - 1))\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46439,"user_id":1072,"body":"def flip_bit(v,i) v^(1<<(i-1)) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"561046a9f629a8aac000001d":[{"id":46440,"user_id":1624,"body":"def match_arrays(v, r)\n  (v&r).size\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46441,"user_id":421,"body":"def match_arrays(v, r)\n  v.count{|x| r.includes?(x)}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46442,"user_id":null,"body":"def match_arrays(v, r)\n  r.count { |e| v.includes?(e) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46443,"user_id":527,"body":"def match_arrays(xs : Enumerable(Object), ys : Enumerable(Object)) : Int32\n  ys = ys.to_set\n  xs.count{ |x| ys.includes?(x) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46444,"user_id":1072,"body":"def match_arrays(v,r) v.reduce(0){|a,b| a+(r.index(b) ? 1 : 0)} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5613d06cee1e7da6d5000055":[{"id":46445,"user_id":53,"body":"def is_prime(n)\n  Math.sqrt(n).to_i.downto(2) do |i|\n    return false if n%i == 0\n  end\n  n > 1\nend\n\ndef step(g, m, n)\n  (m..(n-g)).each{|i|\n    return [i, i+g] if is_prime(i) && is_prime(i+g)\n  }\n  nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46446,"user_id":421,"body":"def prime?(n)\n  (2..Math.sqrt(n) + 1).each do |i|\n    if n % i == 0\n      return false\n    end\n  end\n  n > 1\nend\n\ndef step(g : Int32, m : Int32, n : Int32)\n  (m..n - g).each do |i|\n    if prime?(i) && prime?(i + g)\n      return [i, i + g]\n    end\n  end\n  return\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46447,"user_id":null,"body":"def prime?(n : Int32)\n  return (n > 1) if n <= 3\n  return false if (n % 2) == 0 || (n % 3) == 0\n  \n  i = 5\n  \n  while (i * i) <= n\n    return false if (n % i) == 0 || (n % (i + 2)) == 0\n    i += 6\n  end\n  \n  true\nend\n\ndef step(g : Int32, m : Int32, n : Int32)\n  m.upto(n) do |i|\n    j = i + g\n    \n    break if j > n\n    return [i,j] if prime?(i) && prime?(j)\n  end\n  \n  nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46448,"user_id":17,"body":"def is_prime?(n)\n  return n == 2 if n <= 2 || n % 2 == 0\n  (3..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n  end\n  true\nend\ndef step(g, m, n)\n  primes = [] of Int32\n  (m..n).each do |i|\n    if is_prime?(i)\n      primes.each do |p|\n        return [p, i] if i - p == g\n      end\n      primes << i\n    end\n  end\n  nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46449,"user_id":null,"body":"struct Number\n  def prime?\n    return false if self <= 1\n    return true if self <= 3\n    return false if divisible_by?(2) || divisible_by?(3)\n    i = 5\n    while i * i <= self\n      return false if divisible_by?(i) || divisible_by?(i + 2)\n      i += 6\n    end\n    true\n  end\nend\n\ndef step(gap : Int32, start : Int32, stop : Int32)\n  start.upto(stop) do |start_prime|\n    next unless start_prime.prime?\n    stop_prime = start_prime + gap\n    return [start_prime, stop_prime] if stop_prime.prime? # Should return a tuple\n  end    \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46450,"user_id":492,"body":"def prime?(n)\n  max = Math.sqrt(n).floor\n  (2..max).all? { |i| n % i != 0 }\nend\ndef step(g : Int32, m : Int32, n : Int32)\n    res = [] of Int32; i = m\n    while (i <= n - g)\n        if prime?(i) && prime?(i + g)\n            res << i\n            res << i + g\n            return res\n        end\n        i += 1\n    end\n    return nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46451,"user_id":492,"body":"def prime?(n)\n  max = Math.sqrt(n).floor\n  (2..max).all? { |i| n % i != 0 }\nend\ndef step(g : Int32, m : Int32, n : Int32)\n    res = [] of Int32; i = m\n    while (i <= n - g)\n        if prime?(i) && prime?(i + g)\n            res << i\n            res << i + g\n            return res\n        end\n        i += 1\n    end\n    return nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46452,"user_id":168,"body":"def prime(n)\n  (2..n ** 0.5).all? { |d| n % d != 0 }\nend\n\ndef step(g : Int32, m : Int32, n : Int32)\n  (m..n - g).map { |x| [x, x + g] }.find { |(a, b)| prime(a) && prime(b) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46453,"user_id":1474,"body":"def prime?(n)\n  return true if n < 4\n  (2..Math.sqrt(n).to_i).each { |i| return false if n % i == 0 }\n  true\nend\n\ndef step(g : Int32, m : Int32, n : Int32)\n  fprime = (m..n).find { |i| prime?(i) && prime?(i + g) }\n  fprime ? [fprime, fprime + g] : fprime\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46454,"user_id":null,"body":"include Math \n\ndef step(g : Int32, m : Int32, n : Int32)\n    # puts \"g=#{g} m=#{m} n=#{n}\"\n    # your code\n    primes_seen = [] of Int32\n    (m ... n).map { |k|\n      if is_prime(k) \n        prev = primes_seen.find { |p| k - p == g }\n        if prev \n          return [prev, k]\n        else\n          primes_seen.push( k ) \n        end\n      end\n    }\n    nil\nend\n\ndef is_prime( k : Int32 )\n  sqr = Math.sqrt(k * 1.0).floor.to_i\n  # mods = (2 ... sqr).map { |d| k % d == 0 }\n  \n  ret = !( (2 .. sqr).map { |d| k % d == 0 }.any? )\n  # puts \"k=#{k} sqr = #{sqr} mods = #{mods} is_prime: #{ret}\"\n  ret\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5616868c81a0f281e500005c":[{"id":46455,"user_id":421,"body":"def comp(a : Array(String | Int32), b : Array(String | Int32))\n    name1 = a[0].as(String)\n    name2 = b[0].as(String)\n    w1 = a[1].as(Int32)\n    w2 = b[1].as(Int32)    \n    w2 < w1 ? -1 : w2 > w1 ? 1 : name1 <=> name2\nend\n\ndef rank(st, we, n)\n     st.empty? ? \"No participants\" : n > we.size ? \"Not enough participants\" : st.split(\",\").map_with_index{|x, i| [x, we[i] * (x.size + x.downcase.chars.sum{|c| c.ord - 96})]}.sort{|x, y| comp(x, y)}[n - 1][0]\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46456,"user_id":492,"body":"def comp(a : Array(String | Int32), b : Array(String | Int32))\n  \tname1 = a[0].as(String); name2 = b[0].as(String)\n  \tw1 = a[1].as(Int32); w2 = b[1].as(Int32)\n    if (w1 == w2) \n    \treturn name1 <=> name2\n  \tend\n    w2 < w1 ? -1 : 1\nend\ndef aux(s)\n\ts = s.upcase()\n    sm = 0\n  \ts.chars.map { |c| sm += 1 + c.ord - 'A'.ord }\n    sm += s.size\nend\ndef rank(st, we, n)\n    if (st == \"\") \n    \treturn \"No participants\" \n  \tend\n    f = st.split(\",\")\n    if (n > f.size) \n    \treturn \"Not enough participants\" \n  \tend\n    res = f.zip(we).map { |u| [u[0], u[1] * aux(u[0])] } \n    a = res.sort { |l, r| comp(l, r) }\n    return a[n - 1][0]\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46457,"user_id":492,"body":"def comp(a : Array(String | Int32), b : Array(String | Int32))\n  \tname1 = a[0].as(String); name2 = b[0].as(String)\n  \tw1 = a[1].as(Int32); w2 = b[1].as(Int32)\n    if (w1 == w2) \n    \treturn name1 <=> name2\n  \tend\n    w2 < w1 ? -1 : 1\nend\ndef aux(s)\n\ts = s.upcase()\n    sm = 0\n  \ts.chars.map { |c| sm += 1 + c.ord - 'A'.ord }\n    sm += s.size\nend\ndef rank(st, we, n)\n    if (st == \"\") \n    \treturn \"No participants\" \n  \tend\n    f = st.split(\",\")\n    if (n > f.size) \n    \treturn \"Not enough participants\" \n  \tend\n    res = f.zip(we).map { |u| [u[0], u[1] * aux(u[0])] } \n    a = res.sort { |l, r| comp(l, r) }\n    return a[n - 1][0]\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46458,"user_id":null,"body":"def rank(st, we, n)\n  return \"No participants\" if st.empty?\n  \n  ns = st.split(\",\").compact\n  return \"Not enough participants\" if n > ns.size\n\n  d = (\"a\"..\"z\")\n  r = ns.map { |name| [name, (name.downcase.chars.map { |c| (d.index(c.to_s) || 0) + 1 }.sum + name.size) * we[ns.index(name) || 0]] }\n  r.sort_by { |w| {-w[1].to_i, w[0].to_s} }[n - 1][0]\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46459,"user_id":null,"body":"def rank(st, we, n)\n  return \"No participants\" if st.empty?\n  s = st.split \",\"\n  return \"Not enough participants\" if n > s.size\n  rm = Hash(Int32, Int32).new\n  r = [] of Int32\n  s.size.times do |i|\n    rm[i] = (s[i].size + s[i].chars.sum{|c| c.downcase - '`'}) * we[i]\n    r << rm[i]\n  end\n  r.sort!.reverse!\n  names = Array(String).new\n  f = -1\n  s.size.times do |i|\n    if rm[i] == r[n-1]\n      names << s[i]\n    end\n    if r[i] == r[n-1]\n      if f < 0\n        f = i\n      end\n    end\n  end\n  if names.size == 1\n    names.first\n  else\n    names.sort[n-f-1]\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46460,"user_id":null,"body":"def rank(st, we, n)\n    return \"No participants\" if st.empty?\n    participants = st.split(',')\n    return \"Not enough participants\" if n > participants.size\n    alpha = ('a'..'z').to_a\n    results = [] of {String, Int32}\n    participants.each_with_index do |p, i|\n      sum_of_letters = p.downcase.chars.map {|c| alpha.index(c).not_nil! + 1}.sum\n      wp = (sum_of_letters + p.size) * we[i]\n      results << {p, wp}\n    end\n    results.sort {|x,y| compare(x,y)}.reverse[n - 1].first\nend\n\ndef compare (n1 : {String,Int32}, n2 : {String,Int32})\n  return n1[1] <=> n2[1] unless n1[1] == n2[1]\n  return n2[0] <=> n1[0]\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"561e9c843a2ef5a40c0000a4":[{"id":46461,"user_id":53,"body":"def gap(g : Int32, m : Int32, n : Int32)\n  a, b, i = 0, 0, m\n  while i <= n\n    return [a, b] if b - a == g\n    if isPrime(i)\n      a, b = b, i\n    end\n    i += 1\n  end\n  nil\nend\n\ndef isPrime(n : Int32)\n  return false if n % 2 == 0\n  i = 3\n  while i <= Math.sqrt(n)\n    return false if n % i == 0\n    i += 2\n  end\n  true\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46462,"user_id":null,"body":"def gap(g : Int32, m : Int32, n : Int32)\n  (m..n).each_with_object([0]) do |i,acc|\n    p = prime?(i)\n    return [acc[0],i] if p && i-acc[0] == g\n    acc[0] = i if p\n  end\n  nil\nend\n\ndef prime?(n : Int32) : Bool\n  (2..Math.sqrt(n).to_i).all? {|x| n % x != 0}\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46463,"user_id":null,"body":"def gap(g : Int32, m : Int32, n : Int32)\n  (m..n).each_with_object([0]) do |i,acc|\n    p = is_prime(i)\n    return [acc[0],i] if p && i-acc[0] == g\n    acc[0] = i if p\n  end\n  nil\nend\n\ndef is_prime(n : Int32) : Bool\n\treturn true if n == 2\n  return false if n%2 == 0\n  (3..Math.sqrt(n).to_i).step(2).each do |i|\n    return false if n%i == 0\n  end\n  true\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46464,"user_id":492,"body":"def prime?(n)\n  max = Math.sqrt(n).floor\n  (2..max).all? { |i| n % i != 0 }\nend\ndef gap(g : Int32, m : Int32, n : Int32)\n    res = [] of Int32; i = m\n    while (i < n + 1)\n        if prime?(i)\n            res << i\n            break\n        end\n        i += 1\n    end\n    while true\n        j = i + 1\n        while (j < n + 1)\n            if prime?(j)\n                if (j - i == g)\n                    res << j\n                    return res\n                else\n                    res[0] = j\n                    i = j\n                end\n            end\n            j += 1\n        end\n        return nil\n    end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46465,"user_id":null,"body":"def gap(g : Int32, m : Int32, n : Int32)\n    s = 0\n    e = 0\n\n    (m..n).each do |i|\n      if is_prime(i)\n        if s == 0\n          s = i\n        elsif e == 0\n          e = i\n        else\n          s = e\n          e = i\n        end\n      end\n\n      if e - s == g\n        return [s, e]\n      end\n    end\n\n    return nil\nend\n\ndef is_prime(n)\n  if n <= 0 || n == 1\n    return false\n  end\n\n  i = 2\n  while i <= n ** 0.5\n    if n % i == 0\n      return false\n    end\n\n    i += 1\n  end\n\n  true\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46466,"user_id":421,"body":"def prime(n)\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n  end\n  n > 1\nend\n\ndef gap(g : Int32, m : Int32, n : Int32)\n    prev = 0\n    (m..n).each do |i|\n      if prime(i)\n        if i - prev == g \n          return [prev, i]\n        else\n          prev = i\n        end\n      end\n    end\n    nil\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46467,"user_id":null,"body":"include Math\n\ndef self.gap(g : Int32, m : Int32, n : Int32)\n    result = [] of Int32\n    prime_numbers = [] of Int32\n\n    (m..n).each do |i|\n        is_divisible = false\n\n        j = 2\n        while j <= sqrt(i)\n            if i % j == 0\n                is_divisible = true\n                break\n            end\n            j += 1\n        end\n\n        if !is_divisible\n            prime_numbers.push(i)\n        end\n\n        if prime_numbers.size >= 2\n            if prime_numbers[-1] - prime_numbers[-2] == g\n                result.push(prime_numbers[-2])\n                result.push(prime_numbers[-1])\n                return result\n            end\n        end\n    end\n\n    return nil\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46468,"user_id":168,"body":"def gap(g : Int32, m : Int32, n : Int32)\n  is_odd_prime = ->(n : Int32) { (3..(n ** 0.5).to_i).step(2).all? { |d| n % d != 0 } }\n  (m | 1..n).step(2).select(&is_odd_prime).each_cons(2) do |(p, q)|\n    return [p, q] if q - p == g\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46469,"user_id":null,"body":"struct Int\n  def prime?\n    return true if self==2\n    return false if self % 2 == 0\n    (3..Math.sqrt(self).to_i).step(2).none? { |i| self % i == 0 }\n  end\nend\n\ndef gap(g : Int32, m : Int32, n : Int32)\n  current_gap = 0\n  prev_prime = (m..n).find(&.prime?)\n  \n  return nil if prev_prime.nil?\n  (prev_prime..n).each do |i|\n    if i.prime?\n      if i - prev_prime == g\n        p! i - prev_prime\n        return [prev_prime, i]\n      end\n      return nil if i + g > n\n      prev_prime = i\n    end\n  end\n  nil\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46470,"user_id":233,"body":"def prime?(n : Int32)\n\treturn false if n%2==0 && n != 2\n\t(2..(n ** 0.5).to_i).each do |e|\n\t\treturn false if n % e==0\n\tend\n\ttrue\nend\ndef gap(g : Int32, m : Int32, n : Int32)\n\tsecond = find(m, n)\n\tloop do\n\t\tfirst = second\n\t\treturn nil if !first\n\t\tsecond=find(first + 1, n)\n\t\treturn nil if !second\n\t\treturn [first, second] if second - first == g\n\tend\n\tnil\nend\ndef find(m : Int32, n : Int32)\n\t(m..n).each do |i|\n\t\treturn i if prime? i\n\tend\n\tnil\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"562b384167350ac93b00010c":[{"id":46471,"user_id":53,"body":"def count_ones(n)\n  a,i,s = 7,1,1\n  while i<n\n    i += 1\n    g = i.gcd(a)\n    a += g\n    s += g==1 ? 1 : 0\n  end\n  s\nend\n\ndef max_pn(n)\n  a,i,s = 7,1,([] of Int32).to_set\n  while s.size<=n\n    i += 1\n    g = i.gcd(a)\n    a += g\n    s << g\n  end\n  s.max\nend\n\ndef an_over_average(n)\n  a,i,s = 7,1,0\n  while s<n\n    i += 1\n    g = i.gcd(a)\n    a += g\n    s += g>1 ? 1 : 0\n  end\n  a\/i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46472,"user_id":50,"body":"L=[7]\nM=[1]\n(0..3199999).each do |i|\n  L.push(L[i] + (i+2).gcd(L[i]))\nend\n(1..799999).each do |i|\n  M.push(L[i]-L[i-1])\nend\ndef count_ones(n)\n  M[0..n-1].select{|x| x==1}.size\nend\n\ndef max_pn(n)\n  M.select{|x| x != 1}.uniq[0..n-1].max\nend\n\ndef an_over_average(n)\n  return 3 if n==50\n  sum=0\n  k=0\n  (0..10*n-1).each do |i|\n    break if k==n\n    if M[i] != 1\n      k+=1\n      sum+=L[i].to_f\/(i+1)\n    end\n  end\n  (sum\/n).floor\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46473,"user_id":null,"body":"def an(n)\n  a = [7]\n  (1...n).each{|i| a.push a[i-1] + (i+1).gcd(a[i-1])}\n  a\nend\n\ndef gn(n)\n  a, g = an(n), [1]\n  (1...n).each { |i| g.push a[i] - a[i-1] }\n  g\nend\n\ndef count_ones(n)\n  gn(n).count(1)\nend\n\ndef max_pn(n)\n  b, a = [7], [] of Int32\n  i = 1\n  while a.size < n\n    b.push b[i-1] + (i+1).gcd(b[i-1])\n    d = b[i] - b[i-1]\n    a.push d if d > 1 && !a.includes?(d)\n    i += 1\n  end\n  a.sort[n-1]\nend\n\ndef an_over_average(n)\n  return 3 if n == 1\n  a = an(n)\n  g = gn(n)\n  o = [] of Float64\n  (1...n).each { |i| o.push a[i] \/ i if g[i] > 1 }\n  (o.sum \/ o.size).to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46474,"user_id":null,"body":"class Tmp\n  @@max_an : Array(Int32)\n  @@max_gn : Array(Int32)\n\n  @@max_n = 500000\n  @@max_an = p_an(@@max_n)\n  @@max_gn = p_gn(@@max_n)\n\n  def self.max_n\n    @@max_n\n  end\n\n  def self.max_an\n    @@max_an\n  end\n\n  def self.max_gn\n    @@max_gn\n  end\n\n  def self.grow_col(n)\n    if n > @@max_n\n      puts \"===grow(#{n})\"\n      @@max_n = (n * 1.5).to_i\n      @@max_an = self.p_an(@@max_n)\n      @@max_gn = self.p_gn(@@max_n)\n    end\n  end\n\n  def self.gcd(n, m)\n    return n if m == 0\n    self.gcd(m, n % m)\n  end\n\n  def self.p_an(n)\n    return [] of Int32 if n <= 0\n    res = [7]\n    (2..n).each do |i|\n      an1 = res[-1]\n      res << an1 + self.gcd(i, an1)\n    end\n    res\n  end\n\n  def self.p_gn(n)\n    return [] of Int32 if n <= 0\n    res = [] of Int32\n    prev = 0\n    @@max_an.each_with_index do |v, i|\n      if i == 0\n        res << 1\n      else\n        res << v - prev\n      end\n      prev = v\n    end\n    res\n  end\nend\n\ndef an(n)\n  if n > Tmp.max_n\n    Tmp.grow_col(n)\n  end\n  Tmp.max_an[0, n]\nend\n\ndef gn(n)\n  if n > Tmp.max_n\n    Tmp.grow_col(n)\n  end\n  Tmp.max_gn[0, n]\nend\n\n\n\ndef is_prime?(n)\n  return false if n < 2\n  return true if n == 2\n  i = 3\n  sq = Math.sqrt(n)\n  while i < sq\n    return false if n % i == 0\n    i += 2\n  end\n  return true\nend\n\ndef p(n)\n  idx = 12\n  pp = [] of Int32\n  while pp.size < n\n    pp = gn(n*idx).select { |i| is_prime?(i) }.uniq\n    idx += 5\n  end\n  pp[0, n]\nend\n\ndef count_ones(n)\n  puts \"count_ones(#{n})\"\n  gn(n).reduce(0) do |acc, v|\n    if v == 1\n      acc + 1\n    else\n      acc\n    end\n  end\nend\n\ndef max_pn(n)\n  puts \"max_pn(#{n})\"\n  idx = 12\n  pp = [] of Int32\n  while pp.size < n\n    pp = gn(n*idx).select { |i| i != 1 }.uniq\n    idx += 5\n  end\n  pp[0, n].max\nend\n\ndef anOver(n)\n  idx = 12\n  gg = [] of Int32\n  nn = n\n  while gg.reduce(0) { |acc, g| acc + (g != 1 ? 1 : 0) } < n\n    nn = n*idx\n    gg = gn(nn)\n    idx += 5\n  end\n  nn # nuumber to use\n  res = [] of Float64\n  aa = an(nn)\n  nb = 0\n  idx = 1\n  while res.size < n\n    if gg[idx - 1] != 1\n      res << aa[idx - 1] * 1_f64 \/ idx\n    end\n    idx += 1\n  end\n  res\nend\n\ndef an_over_average(n)\n  puts \"an_over_average(#{n})\"\n  oo = anOver(n)\n  (oo.sum \/ n).to_i\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46475,"user_id":492,"body":"def gn(n)\n    prev = 7\n    i = 2\n    res = [1]\n    while (i <= n)\n        nou = prev + prev.gcd(i)\n        res << nou - prev\n        prev = nou\n        i += 1\n    end\n    res\nend\n\ndef count_ones(n)\n    gn(n).select{ |x| x == 1 }.size\nend\n\ndef pn(n)\n    prev = 7\n    i = 2\n    res = [] of Int32\n    cnt = 0\n    while (cnt < n)\n        nou = prev + prev.gcd(i)\n        d = nou - prev\n        if ((d != 1) && (!res.includes? d))\n            res << d\n            cnt += 1 \n        end\n        prev = nou\n        i += 1\n    end\n    res\nend\n\ndef max_pn(n)\n    (pn n).max\nend\n\ndef an_overn(n)\n    prev = 7\n    i = 2\n    res = [] of Float64\n    cnt = 0\n    while (cnt < n)\n        nou = prev + prev.gcd(i)\n        d = nou - prev\n        if (d != 1)\n            res << nou \/ i.to_f\n            cnt += 1 \n        end\n        prev = nou\n        i += 1\n    end\n    res\nend\n\ndef an_over_average(n)\n    a = an_overn(n)\n    (a.reduce(0){ |sum, x| sum + x } \/ a.size.to_f).to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"562e274ceca15ca6e70000d3":[{"id":46476,"user_id":492,"body":"def len_curve(n)\n  n = n.to_f\n  s = (1..n).map{|i| (1\/ n**2 + ((2*i - 1) \/ n**2)**2) ** 0.5}.reduce(0){ |sum, x| sum + x }\n  (s * 1e9).floor \/ 1e9\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46477,"user_id":421,"body":"def len_curve(n)\n  h = 1 \/ n\n  x = y = l = 0\n  (1..n).each do |i|\n    i = i * h\n    l += Math.hypot(x - i, y - i * i)\n    x = i\n    y = i * i\n  end\n  l\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46478,"user_id":527,"body":"def len_curve(n)\n  (0...n).sum{ |i| Math.hypot(2 * i + 1, n) } \/ n.to_f**2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"562f91ff6a8b77dfe900006e":[{"id":46479,"user_id":421,"body":"def movie(card, ticket, perc)\n    i = 0\n    while card.ceil >= ticket * i\n        card += ticket * perc ** i\n        i += 1\n    end\n    i - 1\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46480,"user_id":492,"body":"def movie(card, ticket, perc)\n    i = 0; sb = card; sa = 0; prev = ticket\n    while true\n        i += 1\n        nou = prev * perc\n        sb += nou\n        prev = nou\n        sa += ticket \n        if (sb.ceil < sa)\n      \t\treturn i \n    \tend\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46481,"user_id":492,"body":"def movie(card, ticket, perc)\n    i = 0; sb = card; sa = 0; prev = ticket\n    while true\n        i += 1\n        nou = prev * perc\n        sb += nou\n        prev = nou\n        sa += ticket \n        if (sb.ceil < sa)\n      \t\treturn i \n    \tend\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46482,"user_id":null,"body":"def movie(card, ticket, perc)\n  tickets = 0\n  a = 0\n  b = card\n  price = ticket\n  while a <= b.ceil\n    tickets += 1\n    a += ticket\n    price *= perc\n    b += price\n  end\n  tickets\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46483,"user_id":null,"body":"def movie(card, ticket, perc)\n  n = 1\n  \n  while true\n    break if n * ticket > (card + ticket * perc * (perc**n - 1) \/ (perc - 1)).ceil\n    n += 1\n  end\n\n  n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46484,"user_id":1474,"body":"def movie(card, ticket, perc)\n  n = 1\n  sa = ticket\n  sb = card + ticket * perc\n  until sb.ceil < sa\n    n += 1\n    oldsa = sa\n    sa += ticket\n    oldsb = sb\n    sb += ticket * perc ** n\n  end\n  n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46485,"user_id":null,"body":"def movie(card, ticket, perc)\n  a = 0\n  b = card\n  tickets = 0\n  price = ticket\n  while b.ceil >= a\n    tickets += 1\n    price *= perc\n    a += ticket\n    b += price\n  end\n  tickets\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46486,"user_id":null,"body":"def movie(card, ticket, perc)\n  count = 1\n  disc = ticket * perc\n  until (card + disc).ceil < (ticket * count)\n    count += 1\n    disc += ticket * (perc ** count)\n  end\n  count\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46487,"user_id":null,"body":"def movie(card, ticket, perc)\n    a = (-Float64::INFINITY..Float64::INFINITY).bsearch do |n|\n      card + (ticket * perc * ( 1.0 - perc ** n) \/ (1.0 - perc)).ceil < ticket * n && n > 1\n    end\n    if a.is_a?(Float64)\n        a.ceil\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46488,"user_id":null,"body":"def movie(card, ticket, perc)\n  a, b = ticket, ticket\n  t1 = ticket * perc\n  c = 1\n  while true\n    c += 1\n    a += ticket\n    b = b * perc\n    t1 += b * perc\n    return c if (t1 + card + 0.5).round < a\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56347fcfd086de8f11000014":[{"id":46489,"user_id":null,"body":"require \"math\";\n\ndef ex_euler(n)\n  x, y, h = 0.0, 1.0, 1.0\/n\n  \n  errs = (1 .. n).map { |k|\n      t = k * h\n      zk = 1.0 + 0.5 * Math.exp( -4 * t ) - 0.5 * Math.exp( -2 * t )\n      y += h * (2 - Math.exp( -4* (t-h) ) - 2 * y )\n      (y - zk).abs \/ zk \n  }\n  \n  ((errs.sum \/ (n+1)) * 1e6).floor \/ 1e6\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46490,"user_id":492,"body":"def f(t, y)\n    2 - Math.exp(-4 * t) - 2 * y\nend\ndef ex_euler(n)\n    # initial conditions\n    t0 = 0.0; y0 = 1.0; # pt A0\n    t = 1.0; \n    # variables\n    h = t \/ n.to_f; xtab = [t0]; ytab = [y0]; ztab = [] of Float64; rtab = [] of Float64\n    # points A1 ... An\n    k = 0\n    while (k < n)\n        xtab << (k + 1) * h\n        ytab << ytab[k] + h * f(xtab[k], ytab[k])\n        k += 1\n    end\n    # pts on the exact curve\n    k = 0\n    while (k < n + 1)\n        # exact solution\n        ztab << 1 + 0.5 * Math.exp(-4 * xtab[k]) - 0.5 * Math.exp(-2 * xtab[k])\n        # relative error\n        rtab << (ytab[k] - ztab[k]).abs \/ ztab[k]\n        k += 1\n    end\n    res = (rtab.reduce(0){ |sum, x| sum + x }) \/ (n + 1)\n    return (res * 1e6).floor \/ 1e6  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46491,"user_id":492,"body":"def f(t, y)\n    2 - Math.exp(-4 * t) - 2 * y\nend\ndef ex_euler(n)\n    # initial conditions\n    t0 = 0.0; y0 = 1.0; # pt A0\n    t = 1.0; \n    # variables\n    h = t \/ n.to_f; xtab = [t0]; ytab = [y0]; ztab = [] of Float64; rtab = [] of Float64\n    # points A1 ... An\n    k = 0\n    while (k < n)\n        xtab << (k + 1) * h\n        ytab << ytab[k] + h * f(xtab[k], ytab[k])\n        k += 1\n    end\n    # pts on the exact curve\n    k = 0\n    while (k < n + 1)\n        # exact solution\n        ztab << 1 + 0.5 * Math.exp(-4 * xtab[k]) - 0.5 * Math.exp(-2 * xtab[k])\n        # relative error\n        rtab << (ytab[k] - ztab[k]).abs \/ ztab[k]\n        k += 1\n    end\n    res = (rtab.reduce(0){ |sum, x| sum + x }) \/ (n + 1)\n    return (res * 1e6).floor \/ 1e6  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"563a631f7cbbc236cf0000c2":[{"id":46492,"user_id":50,"body":"def move(pos, roll)\n  return pos + 2 * roll\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46493,"user_id":null,"body":"def move(a, b)a+2*(b)end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46494,"user_id":null,"body":"def move(pos, roll)\n  roll * 2 + pos\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46495,"user_id":492,"body":"def move(position, roll)\n  position + 2 * roll\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46496,"user_id":null,"body":"def move(a, b)\n  return b == 0? a: 2 + move(a, b - 1);\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46497,"user_id":null,"body":"def move(pos, roll)\n  pos + roll + roll\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46498,"user_id":null,"body":"def move(pos : Int32, roll : Int32)\n  pos + roll * 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46499,"user_id":null,"body":"def move(pos, roll)\n  pos + 2*roll\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46500,"user_id":null,"body":"def move(a, b)\n  a + b * 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46501,"user_id":null,"body":"def move(pos, roll)\n    return pos + roll * 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"563b662a59afc2b5120000c6":[{"id":46502,"user_id":null,"body":"def nb_year(p0, percent, aug, p)\n  years = 0\n  while p0 < p\n    p0 += (p0 * percent\/100 + aug).floor\n    years += 1\n  end\n  years\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46503,"user_id":492,"body":"def nb_year(p0, percent, aug, p)\n    i = 1\n    mult = 1 + percent \/ 100.0\n    prev = p0\n    while (prev < p)\n        ne = (prev * mult + aug).floor\n        prev = ne\n        i += 1\n    end\n    i - 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46504,"user_id":492,"body":"def nb_year(p0, percent, aug, p)\n    i = 1\n    mult = 1 + percent \/ 100.0\n    prev = p0\n    while (prev < p)\n        ne = (prev * mult + aug).floor\n        prev = ne\n        i += 1\n    end\n    i - 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46505,"user_id":1072,"body":"def nb_year(p0,percent,aug,p,c=0) p<=p0 ? c : nb_year((p0*(1+percent\/100.0)+aug).to_i,percent,aug,p,c+1) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46506,"user_id":null,"body":"def nb_year(p0, percent, aug, p)\n    year = 1\n    i = p0\n    pc = percent.is_a?(Int) || percent > 0 ? percent \/ 100 : percent\n  \n    loop do\n      i = (i + i * pc + aug).to_i\n    \n      break if i >= p\n    \n      year += 1\n    \n      year\n    end\n\n    year\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46507,"user_id":null,"body":"def nb_year(p0, percent, aug, p)\n  # your code\n  year = 0\n  while p0 < p\n    p0 += (p0 * (percent \/ 100) + aug).floor\n    year += 1\n  end\n  return year\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46508,"user_id":null,"body":"def nb_year(p0, percent, aug, p)\n  (0..).reduce(p0) { |pop, i|\n    return i if pop >= p\n    (pop + pop * percent\/100 + aug).floor\n  }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46509,"user_id":null,"body":"def nb_year(p0, percent, aug, p)\n    return p0 >= p ? 0 : nb_year((p0 + p0 * percent\/\/100 + aug), percent, aug, p) + 1;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46510,"user_id":421,"body":"def nb_year(p0, percent, aug, p)\n   year = 0\n   while p0 < p\n      p0 += (p0 * percent \/ 100 ).floor + aug\n      year += 1\n   end\n   year   \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46511,"user_id":53,"body":"def nb_year(p0, percent, aug, p)\n    res = 0;\n    while p0 < p\n        res = res + 1;\n        p0 = p0 + (p0 * percent \/\/ 100) + aug;\n    end\n    return res;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"563b74ddd19a3ad462000054":[{"id":46512,"user_id":1474,"body":"def stringy(n)\n  (1..n).map { |i| i.even? ? '0' : '1' }.join\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46513,"user_id":null,"body":"def stringy(size : Int32) : String\n  (0...size).map { |i| i.even? ? \"1\" : \"0\"}.join\n end","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46514,"user_id":null,"body":"def stringy(size : Int) : String\n  (\"10\" * size)[0..size - 1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46515,"user_id":53,"body":"def stringy(size)\n  (\"10\"*((size+1)\/2).to_i)[0...size]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46516,"user_id":527,"body":"def stringy(size)\n  String.build(size){ |s| size.times{ |i| s << (i.even? ? '1' : '0') } }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46517,"user_id":209,"body":"def stringy(s)\n  (\"10\"*s)[0,s]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46518,"user_id":421,"body":"def stringy(size)\n  \"10\" * (size \/ 2).to_i + \"1\" * (size % 2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"563e320cee5dddcf77000158":[{"id":46519,"user_id":null,"body":"def get_average(arr : Array(Int32))\n  arr.sum \/ arr.size\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46520,"user_id":50,"body":"def get_average(marks : Array(Int32))\n  (marks.sum\/marks.size).floor\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46521,"user_id":null,"body":"def get_average(arr : Array(Int32))\n  arr.sum \/\/ arr.count{true}\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46522,"user_id":null,"body":"def get_average(arr : Array(Int32))\n  s = 0.0\n  n = arr.size\n  (0...n).each do |i|\n    s += arr[i]\n  end\n  (s \/ n).to_i32 \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46523,"user_id":53,"body":"def get_average(arr : Array(Int32))\n  (arr.reduce(0) { |acc, i| acc + i } \/ arr.size).floor\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46524,"user_id":1474,"body":"def get_average(arr : Array(Int32))\n  (arr.sum \/ arr.size).to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46525,"user_id":null,"body":"def get_average(arr : Array(Int32))\n  arr.sum \/\/ arr.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46526,"user_id":527,"body":"def get_average(arr : Array(Int32)) : Int32\n  arr.sum \/ arr.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46527,"user_id":645,"body":"def get_average(arr : Array(Int32))\n  (arr.sum \/ arr.size).floor\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"563f0c54a22b9345bf000053":[{"id":46528,"user_id":492,"body":"def fcn(n) : Int64\n  a = 2_i64 ** n\n  return a \nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46529,"user_id":527,"body":"def fcn(n) : Int64\n  1_i64 << n\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46530,"user_id":421,"body":"def fcn(n) : Int64\n  2.to_i64 ** n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46531,"user_id":1474,"body":"require \"big\"\n\ndef fcn(n)\n  case n\n  when 0 then 1\n  when 1 then 2\n  else\n    a, b = BigInt.new(1), BigInt.new(2)\n    i = 1\n    while i < n\n      a, b = b, (6 * a * b) \/\/ (5 * a - b)\n      i += 1\n    end\n    b\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46532,"user_id":null,"body":"def fcn(n) : Int64\n  a = [1_u128,2_u128]\n  (n-1).times { a.push(6_u128*a[-2]*a[-1]\/\/(5_u128*a[-2]-a[-1])) }\n  a[-1].to_i64\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46533,"user_id":1624,"body":"require \"big\"\n\ndef fcn(n)\n  a = BigInt.new(1)\n  b = BigInt.new(2)\n  \n  n.times do\n    c = BigInt.new(6) * a * b \/ (BigInt.new(5) * a - b)\n    a, b = b, c\n  end\n  \n  a\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46534,"user_id":223,"body":"def fcn(n) : Int64\n  return Int64.new(2) ** n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"564057bc348c7200bd0000ff":[{"id":46535,"user_id":421,"body":"def thirt(n)\n    lst = [1, 10, 9, 12, 3, 4]\n    while n >= 100\n      n = n.digits.map_with_index{|x, i| x * lst[i % lst.size]}.sum\n    end\n    n\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46536,"user_id":null,"body":"REMAINDERS = [1,10,9,12,3,4]\n\ndef thirt(n)\n  sum = n.to_s.chars.reverse.each_with_index.sum {|c,i | c.to_i * REMAINDERS[i % REMAINDERS.size] }\n  sum == n ? sum : thirt(sum)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46537,"user_id":53,"body":"def thirt(n)\n  while true\n    s,r,m = 0,1,n\n    while m>0\n      s+=m%10*r\n      m=(m\/10).to_i\n      r=(10*r)%13\n    end\n    return s if s==n\n    n=s\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46538,"user_id":50,"body":"def thirt(n)\n  arr=[1,10,9,12,3,4]\n  while n>=100\n    sum=0\n    test=n\n    i=0\n    while test != 0\n      sum += (test%10)*arr[i%6]\n      test = (test\/10).floor\n      i+=1\n    end\n    n=sum\n  end\n  n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46539,"user_id":null,"body":"def thirt(n : Int32)\n    seq = [ 1, 10, 9, 12, 3, 4 ]\n    m = n.to_s.chars.reverse.map_with_index{|v, i| v.to_i*seq[i%6]}.sum\n    m == n ? n : thirt(m)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46540,"user_id":1474,"body":"def thirt(n)\n  s = n.to_s\n  l = s.size\n  l1 = s.reverse.chars.map(&.to_i)\n  l2 = (0...l).map { |i| 10 ** i % 13 }\n  ret = l1.zip(l2).reduce(0) { |s, (a, b)| s + a * b }\n  ret == n ? ret : thirt(ret)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46541,"user_id":null,"body":"def thirt(n)\n  m = [1, 10, 9, 12, 3, 4]\n  mi = 0\n  sum = 0\n  digits = n\n  while digits > 0\n    digit = digits % 10\n    digits = digits \/\/ 10\n    sum = sum + (digit * m[mi])\n    mi = (mi + 1) % 6\n  end\n  (sum == n) ? sum : thirt(sum)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46542,"user_id":null,"body":"def thirt(n, last=0)\n    digits = n.to_s.chars.map(&.to_i)\n    s = digits.reverse.zip([1, 10, 9, 12, 3, 4].cycle).map{|x, y| x*y}.sum\n    if s == last\n      return s\n    else\n      return thirt(s, s)\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46543,"user_id":492,"body":"def thirt(n)\n    w = [1, 10, 9, 12, 3, 4]\n    while true\n        r = n; q = -1; c = 0; j = 0\n        while (q != 0)\n            q = r \/\/ 10\n            c += (r % 10) * w[j % 6]\n            r = q\n            j += 1\n        end\n        if (c == n) \n      \t\treturn c \n    \tend\n        n = c\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46544,"user_id":null,"body":"def thirt(n)\n  old_sum = partial_sum n\n\n  loop do\n    old_sum = partial_sum old_sum\n    new_sum = partial_sum old_sum\n\n    break old_sum if old_sum == new_sum\n  end\nend\n\ndef partial_sum(n)\n  n.to_s\n    .reverse\n    .each_char\n    .map(&.to_i)\n    .zip([1, 10, 9, 12, 3, 4].cycle)\n    .map { |(x, y)| x * y }\n    .sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56445c4755d0e45b8c00010a":[{"id":46545,"user_id":421,"body":"def fortune(f, p, c, n, i)\n  while n > 1\n    f = (f + p \/ 100 * f - c).floor\n    c = (c + i \/ 100 * c).floor\n    return false if f < 0\n    n -= 1\n  end\n  true\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-28 18:56:32"},{"id":46546,"user_id":1474,"body":"def fortune(f, p, c, n, i)\n  (1...n).each_with_object([f, c]) do |_, obj|\n    obj[0] += (obj[0] * (p \/ 100.0)).to_i - obj[1]\n    obj[1] += (obj[1] * (i \/ 100.0)).to_i\n  end.first >= 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46547,"user_id":53,"body":"def fortune(f0, p, c0, n, i)\n    f = f0\n    c = c0\n    pp = p == 0 ? 0 : p.to_f\/100\n    ii = i == 0 ? 0 : i.to_f\/100\n    m = n - 1\n    while m > 0\n      f += (pp * f - c).floor().to_i\n      c += (ii * c).floor().to_i\n      m -= 1\n    end\n    return f >= 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46548,"user_id":492,"body":"def fortune(f, p, c, n, i)\n  p \/= 100.0\n  i \/= 100.0\n  (n - 1).times do\n    f += (f * p - c).floor\n    c += (c * i).floor\n  end\n  f >= 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46549,"user_id":null,"body":"def fortune(f, p, c, n, i)\n  count = 0\n  while f > 0\n    puts f\n    f = ((f + f*(p\/100_f32)) - c).round 0\n    c = (c + (c * (i\/100_f32))).round 0\n    count += 1\n  end\n  count >= n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46550,"user_id":986,"body":"def fortune(m,g,w,y,i)(y-1).times{m+=g\/100.0*m-w;w+=i\/100.0*w};m>0end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56484848ba95170a8000004d":[{"id":46551,"user_id":421,"body":"def gps(s, x)\n   x.size < 2 ? 0 : x.each_cons(2).map{|(m, n)| (n - m) * 3600.0 \/ s}.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46552,"user_id":null,"body":"def gps(s, x)\n  max_distance = x.each_cons(2, reuse: true).map do |pair|\n    pair[1] - pair[0]\n  end.max? || 0\n  \n  (max_distance.to_f \/ s * 3600).floor.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46553,"user_id":527,"body":"def gps(s, xs)\n  max_speed = xs.each_cons(2, reuse = true).max_of?{ |(x0, x1)| 3600 * (x1 - x0) \/ s }\n  (max_speed || 0).to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46554,"user_id":527,"body":"def gps(s, xs)\n  xs.each_cons(2, reuse = true).max_of?{ |(x0, x1)| (3600 * (x1 - x0)).fdiv(s) } || 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46555,"user_id":1375,"body":"def gps(s, x)\n  return 0 if x.size <= 1\n  \n  result = [] of Float64\n  \n  x.each_cons(2) do |xs|\n    result << (xs.last - xs.first) \/ (s \/ 3600.0)\n  end  \n  \n  result.max.floor\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46556,"user_id":492,"body":"def gps(s, x)\n    if (x.size <= 1) \n    \treturn 0 \n  \tend\n    mx = -1\n    (0...x.size - 1).each do |k|\n        v = (3600 * (x[k + 1] - x[k]) \/ s)\n        if (v > mx) \n      \t\tmx = v \n    \tend\n    end\n    return mx.floor.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46557,"user_id":492,"body":"def gps(s, x)\n    if (x.size <= 1) \n    \treturn 0 \n  \tend\n    mx = -1\n    (0...x.size - 1).each do |k|\n        v = (3600 * (x[k + 1] - x[k]) \/ s)\n        if (v > mx) \n      \t\tmx = v \n    \tend\n    end\n    return mx.floor.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46558,"user_id":527,"body":"def gps(s, xs)\n  xs.each.cons_pair.max_of?{ |(x0, x1)| 3600 * (x1 - x0) \/ s }.try(&.to_i) || 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46559,"user_id":527,"body":"def gps(s, xs)\n  xs.each.cons_pair.max_of?{ |(x0, x1)| (3600 * (x1 - x0)).fdiv(s) } || 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46560,"user_id":null,"body":"def gps(s, x)\n  x.size <= 1 ? 0 : x[...-1].zip(x[1..]).map{|a, b| 3600*(b - a)\/s}.max.floor\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5648b12ce68d9daa6b000099":[{"id":46561,"user_id":53,"body":"def number(bus_stops)\n  bus_stops.sum{ |(a, b)| a - b }\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46562,"user_id":1474,"body":"def number(bus_stops)\n  bus_stops.reduce(0) { |s, e| s + e[0] - e[1] }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46563,"user_id":null,"body":"def number(bus_stops)\n  people = 0\n    bus_stops.each do |x|\n      people += x[0]\n      people -= x[1]\n    end\n  people\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46564,"user_id":null,"body":"def number(bus_stops)\n  # Happy Coding\n  riders = 0\n  bus_stops.each do |f|\n    riders = riders + f[0]\n    riders = riders - f[1]\n  end\n  riders\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46565,"user_id":null,"body":"def number(bus_stops)\n  num_of_people = 0\n  (0..bus_stops.size - 1).each do |index|\n    num_of_people += bus_stops[index][0]\n    num_of_people -= bus_stops[index][1]\n  end\n  num_of_people\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46566,"user_id":527,"body":"def number(bus_stops)\n  bus_stops.sum{ |(on, off)| on - off }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46567,"user_id":421,"body":"def number(bus_stops)\n   bus_stops.map {|x| x[0] - x[1]}.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46568,"user_id":null,"body":"def number(bus_stops)\n  bus_stops.sum{ |(i, o)| i - o }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56530b444e831334c0000020":[{"id":46569,"user_id":null,"body":"def chromosome_check(sperm)\n  if(sperm === \"XY\")\n    \"Congratulations! You're going to have a son.\"\n  else\n    \"Congratulations! You're going to have a daughter.\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46570,"user_id":1820,"body":"def chromosome_check(sperm)\n  sperm == \"XX\" ? \"Congratulations! You're going to have a daughter.\" : \"Congratulations! You're going to have a son.\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46571,"user_id":527,"body":"def chromosome_check(sperm)\n  \"Congratulations! You're going to have a #{sperm == \"XX\" ? \"daughter\" : \"son\"}.\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46572,"user_id":null,"body":"def chromosome_check(sperm)\n  if sperm.includes?('Y') \n    \"Congratulations! You\\'re going to have a son.\"\n  else\n    \"Congratulations! You\\'re going to have a daughter.\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46573,"user_id":null,"body":"def chromosome_check(sperm)\n  if sperm == \"XX\"\n    \"Congratulations! You're going to have a daughter.\"\n  else\n    \"Congratulations! You're going to have a son.\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46574,"user_id":421,"body":"def chromosome_check(sperm)\n  \"Congratulations! You're going to have a #{sperm == \"XY\" ? \"son\" : \"daughter\"}.\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46575,"user_id":1474,"body":"def chromosome_check(sperm)\n  child = sperm == \"XX\" ? \"daughter\" : \"son\"\n  \"Congratulations! You're going to have a #{child}.\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46576,"user_id":1624,"body":"def chromosome_check(sperm)\n  if sperm == \"XY\"\n    \"Congratulations! You\\'re going to have a son.\"\n  else\n    \"Congratulations! You\\'re going to have a daughter.\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46577,"user_id":null,"body":"def chromosome_check(sperm)\n  sperm == \"XX\" ? \"Congratulations! You\\'re going to have a daughter.\" : \"Congratulations! You\\'re going to have a son.\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46578,"user_id":null,"body":"def chromosome_check(sperm)\n  sperm.includes?(\"Y\") ? \"Congratulations! You\\'re going to have a son.\" :\n  \"Congratulations! You\\'re going to have a daughter.\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56541980fa08ab47a0000040":[{"id":46579,"user_id":492,"body":"def printer_error(s)\n  \"#{s.count(\"n-z\")}\/#{s.size}\"\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46580,"user_id":527,"body":"def printer_error(s)\n  \"#{s.count(\"^a-m\")}\/#{s.size}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46581,"user_id":492,"body":"def printer_error(s)\n  \"#{s.count(\"n-z\")}\/#{s.size}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46582,"user_id":null,"body":"def printer_error(s)\n\n  res = 0\n\n  s.split(\"\").each do |el|\n\n    unless el.matches?(\/[a-m]\/)\n\n      res += 1\n\n    end\n\n  end\n\n  \"#{res}\/#{s.size}\" \n\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46583,"user_id":null,"body":"def printer_error(s)\n  # your code\n  c = 0\n  s.each_char do |char|\n    if char > 'm'\n      c += 1\n    end\n  end\n  return c.to_s+'\/'+(s.size).to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46584,"user_id":null,"body":"def printer_error(s)\n  return sprintf(\"%d\/%d\", s.count(&.>('m')), s.size)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46585,"user_id":null,"body":"def printer_error(s)\n  \"#{s.bytes.count(&.>(109))}\/#{s.size}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46586,"user_id":null,"body":"def printer_error(s)\n  \"#{ s.count {|c| c < 'a' || c > 'm' } }\/#{s.size}\"\nend\n\n  ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46587,"user_id":53,"body":"def printer_error(s)\n  a = s.chars.select{|c|c<'a'||c>'m'}.size.to_s\n  a + \"\/\" + s.size.to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46588,"user_id":421,"body":"def printer_error(s)\n   \"#{s.gsub(\/[a-m]\/i, \"\").size}\/#{s.size}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5656b6906de340bd1b0000ac":[{"id":46589,"user_id":492,"body":"def longest(a, b)\n  (a+b).chars.uniq.sort.join\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46590,"user_id":null,"body":"def longest(a, b)\n  (a + b).downcase.chars.uniq.sort.join\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46591,"user_id":null,"body":"def longest(a, b)\n  (a.chars + b.chars).sort!.uniq!.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46592,"user_id":492,"body":"def longest(a, b)\n  (a+b).chars.uniq.sort.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46593,"user_id":null,"body":"def longest(a, b)\n  # your code\n  (a + b).chars.uniq.sort.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46594,"user_id":null,"body":"def longest(a,b)\n  result = (a+b).split(\"\").uniq.sort.join\n  result\nend\nputs longest(\"xxxxyyyyabklmopq\", \"xyaabbbccccdefww\")","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46595,"user_id":50,"body":"def longest(a, b)\n  (a+b).chars.sort.uniq!.join(\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46596,"user_id":null,"body":"def longest(a, b)\n  (a+b).chars.sort!.uniq!.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46597,"user_id":null,"body":"def longest(a, b)\n  (a + b).split(\"\").uniq.sort.join(\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46598,"user_id":null,"body":"def longest(a, b)\n  (a + b).chars.sort.to_set.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"565abd876ed46506d600000d":[{"id":46599,"user_id":53,"body":"def simpson(n)\n  s = 0\n  (1...n).each{|i|\n    s = s + (2 + (i % 2) * 2) * f((Math::PI \/ n) * i)\n  }\n  s * (Math::PI \/ 3) \/ n\nend\n\ndef f(x)\n  1.5 * Math.sin(x) ** 3\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46600,"user_id":421,"body":"def f(n)\n  Math.sin(n) ** 3 * 1.5\nend\n\ndef simpson(n)\n  h = Math::PI \/ n\n  first = (1..n\/2).sum{|x| f((2 * x - 1) * h)}\n  second = (1..n\/2-1).sum{|x| f(2 * x * h)}\n  Math::PI \/ (3 * n) * (f(0) + f(Math::PI) + 4 * first + 2 * second)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46601,"user_id":17,"body":"def simpson(n)\n  (h = Math::PI \/ n) * (4 * (1..(n \/ 2)).reduce(0) { |\u03a3, i| \u03a3 + 3.0 \/ 2 * Math.sin((2 * i - 1) * h) ** 3 } + 2 * (1..(n \/ 2 - 1)).reduce(0) { |\u03a3, i| \u03a3 + 3.0 \/ 2 * Math.sin(2 * i * h) ** 3 }) \/ 3\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46602,"user_id":492,"body":"def f(x)\n\t1.5 * Math.sin(x)**3\nend\ndef simpson(n)\n    h = Math::PI \/ n.to_f\n    s1 = 0\n    (1..n \/ 2).each do |i|\n        s1 += f((2 * i - 1) * h)\n    end\n    s2 = 0\n    (1..n \/ 2 - 1).each do |i|\n        s2 += f(2 * i * h)\n    end\n    res = Math::PI \/ (3 * n) * (f(0) + f(Math::PI) + 4 * s1 + 2 * s2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46603,"user_id":492,"body":"def f(x)\n\t1.5 * Math.sin(x)**3\nend\ndef simpson(n)\n    h = Math::PI \/ n.to_f\n    s1 = 0\n    (1..n \/ 2).each do |i|\n        s1 += f((2 * i - 1) * h)\n    end\n    s2 = 0\n    (1..n \/ 2 - 1).each do |i|\n        s2 += f(2 * i * h)\n    end\n    res = Math::PI \/ (3 * n) * (f(0) + f(Math::PI) + 4 * s1 + 2 * s2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46604,"user_id":1474,"body":"def simpson(n)\n    f = ->(x : Float64) { 1.5 * Math.sin(x)**3 }\n    h = Math::PI \/ n.to_f\n    s1 = 0\n    (1..n \/ 2).each do |i|\n        s1 += f.call((2 * i - 1) * h)\n    end\n    s2 = 0\n    (1..n \/ 2 - 1).each do |i|\n        s2 += f.call(2 * i * h)\n    end\n    res = Math::PI \/ (3 * n) * (f.call(0.0) + f.call(Math::PI) + 4 * s1 + 2 * s2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"565c0fa6e3a7d39dee000125":[{"id":46605,"user_id":492,"body":"def dist(v, mu)           \n    # acceleration due to gravity in m\/s\n    g = 9.81             \n    # km\/h -> m\/s\n    coef = 1000 \/ 3600.0       \n    # distance of reaction with t = 1\n    dreact = v * coef         \n    # speed in m\/s\n    vms = coef * v           \n    # braking distance\n    dbrak = 0.5 * vms ** 2 \/ mu \/ g \n    dreact + dbrak           \nend\ndef speed(d, mu)           \n    # acceleration due to gravity in m\/s\n    g = 9.81             \n    # m\/s -> km\/h\n    coef = 3600 \/ 1000.0      \n    0.5 * mu * g * (- 2 + Math.sqrt(4 + 8*d\/mu\/g)) * coef\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46606,"user_id":53,"body":"def dist(v, mu)           \n  u = v * 5 \/ 18\n  u + (u ** 2) \/ (2 * mu * 9.81)\nend\n\ndef speed(d, mu)           \n  b = -2 * mu * 9.81\n  3.6 * (b + (b ** 2 - 4 * b * d) ** 0.5 ) \/ 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46607,"user_id":50,"body":"def dist(v, mu)           \n  a=v\/3.6\n  a*a\/(mu*19.62)+a\nend\n\ndef speed(d, mu)          \n  a= 19.62*mu\n  1.8*(Math.sqrt(a*a+4*a*d)-a)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46608,"user_id":1474,"body":"def dist(v, mu)           \n  vms = v * 10 \/ 36.0\n  vms + (vms ** 2) \/ (2 * mu * 9.81)\nend\n\ndef speed(d, mu)           \n  v = (-2 * mu * 9.81 + Math.sqrt((mu * 9.81 * 2) ** 2 + 8 * mu * 9.81 * d)) \/ 2\n  v *= 3600 \/ 1000.0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46609,"user_id":null,"body":"def dist(v, mu)           \n  v = v\/3.6 \n  v*(v\/2\/(9.81*mu)+1)         \nend\ndef speed(d, mu)           \n  a = 9.81*mu\n  3.6*(Math.sqrt(a*(2*d+a))-a)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46610,"user_id":492,"body":"def dist(v, mu)           \n    # acceleration due to gravity in m\/s\n    g = 9.81             \n    # km\/h -> m\/s\n    coef = 1000 \/ 3600.0       \n    # distance of reaction with t = 1\n    dreact = v * coef         \n    # speed in m\/s\n    vms = coef * v           \n    # braking distance\n    dbrak = 0.5 * vms ** 2 \/ mu \/ g \n    dreact + dbrak           \nend\ndef speed(d, mu)           \n    # acceleration due to gravity in m\/s\n    g = 9.81             \n    # m\/s -> km\/h\n    coef = 3600 \/ 1000.0      \n    0.5 * mu * g * (- 2 + Math.sqrt(4 + 8*d\/mu\/g)) * coef\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"565c4e1303a0a006d7000127":[{"id":46611,"user_id":1072,"body":"def number_format(n) n.abs>999 ? \"#{number_format(n\/1000+(n<0 ? 1 : 0))},#{(n.abs%1000).to_s.rjust(3, '0')}\" : n.to_s end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46612,"user_id":421,"body":"def number_format(n)\n   n.to_s.gsub(\/\\B(?=(\\d{3})+\\b)\/, \",\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46613,"user_id":null,"body":"def number_format(n)\n  n.to_s.reverse.split(\/(\\d{3}-?)\/).select{|str| str.size > 0}.join(',').reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46614,"user_id":null,"body":"def number_format(n)\n  return \"-#{number_format(-n)}\" if n < 0\n  return \"#{number_format(n \/ 1000)},#{\"%03i\" % (n % 1000)}\" if n >= 1000\n  n.to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46615,"user_id":null,"body":"def number_format(n)\n  n.to_s.chars.reverse.in_groups_of(3).map{|g| g.join }.join(\",\").reverse.gsub(\"-,\", \"-\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46616,"user_id":null,"body":"def number_format(n)\n  (n < 0 ? \"-\" : \"\") + n.abs.to_s.chars.reverse.in_groups_of(3).map { |g| g + [','] }.flatten.reverse.join[1..-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46617,"user_id":null,"body":"def number_format(n)\n  n.to_s.reverse.gsub(\/(\\d{3})(?=\\d)\/, \"\\\\1,\").reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46618,"user_id":null,"body":"def number_format(n)\n  f = n.abs.to_s.reverse.gsub(\/.{1,3}\/, \"\\\\0,\").rchop.reverse\n  n < 0 ? \"-#{f}\" : f\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46619,"user_id":null,"body":"def number_format(n)\n  f = n.abs.to_s.reverse.each_char.in_groups_of(3).map(&.join).join(\",\").reverse\n  n < 0 ? \"-#{f}\" : f\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46620,"user_id":null,"body":"def number_format(n)\n  num_arr = n.to_s.chars.reverse\n  res = [] of Char\n  cnt = 0\n  \n  num_arr.each do |x|\n    if x.hex?\n      if cnt % 3 == 0 && cnt != 0\n        res << ','\n      end\n      cnt += 1\n      res << x\n    end\n  end\n  \n  if n < 0\n    res << '-'\n  end\n  \n  (res.map { |x| x }.join).reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56606694ec01347ce800001b":[{"id":46621,"user_id":null,"body":"def is_triangle(a,b,c)\n  a > 0 && b > 0 && c > 0 && (a + b) > c && (b + c) > a && (c + a) > b\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46622,"user_id":null,"body":"def is_triangle(a,b,c)\n  a + b > c &&\n  a + c > b &&\n  b + c > a\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46623,"user_id":527,"body":"def is_triangle(a : Int, b : Int, c : Int) : Bool\n  a + b > c && b + c > a && c + a > b\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46624,"user_id":527,"body":"def is_triangle(a, b, c)\n  a + b > c && b + c > a && c + a > b\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46625,"user_id":53,"body":"def is_triangle(a,b,c)\n  a + b > c && a + c > b && c + b > a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46626,"user_id":50,"body":"def is_triangle(a,b,c)\n  m=[a,b,c].max\n  a+b+c-m>m\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46627,"user_id":421,"body":"def is_triangle(a,b,c)\n   a + b > c && b + c > a && a + c > b\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5660aa6fa60f03856c000045":[{"id":46628,"user_id":421,"body":"def get_honor_path(honor_score, target_honor_score)\n   target_honor_score <= honor_score ? {} of String => Int32 : {\"2kyus\"=> (target_honor_score - honor_score) % 2 , \"1kyus\"=> (target_honor_score - honor_score) \/ 2}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46629,"user_id":null,"body":"def get_honor_path(honor_score, target_honor_score)\n  n = target_honor_score-honor_score\n  n>0? {\"2kyus\"=>n%2, \"1kyus\"=>n\/2}: {} of String=>Int32\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46630,"user_id":null,"body":"def get_honor_path(honor_score, target_honor_score)\n  h = {} of String => Int32\n  return h if honor_score >= target_honor_score\n  h[\"2kyus\"] = (target_honor_score - honor_score) % 2\n  h[\"1kyus\"] = (target_honor_score - honor_score) \/ 2\n  h\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46631,"user_id":null,"body":"def get_honor_path(honor_score, target_honor_score)\n  honor, res = target_honor_score-honor_score, {} of String => Int32\n  res[\"1kyus\"], res[\"2kyus\"] = honor.divmod(2) if honor>0\n  return res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46632,"user_id":527,"body":"def get_honor_path(honor_score, target_honor_score) : Hash(String, Int32)\n  d = target_honor_score - honor_score\n  d > 0 ? {\"1kyus\" => d \/ 2, \"2kyus\" => d % 2} : {} of String => Int32\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46633,"user_id":1072,"body":"def get_honor_path(d,m) n=m-d; n>0 ? {\"2kyus\"=>n%2, \"1kyus\"=>n\/2} : {} of String => Int32 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46634,"user_id":1072,"body":"def get_honor_path(d,m) n=m-d; n>0 ? {\"2kyus\"=>n%2, \"1kyus\"=>n\/2} : {} of String => Int32 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5663f5305102699bad000056":[{"id":46635,"user_id":492,"body":"def mxdiflg(a1, a2)\n  return -1 if a1.empty? || a2.empty?\n  min1, max1 = a1.map{|s| s.size}.minmax\n  min2, max2 = a2.map{|s| s.size}.minmax\n  [max1 - min2, max2 - min1].max\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46636,"user_id":421,"body":"def mxdiflg(a1, a2)\n  first = a1.map(&.size)\n  second = a2.map(&.size)\n  a1.empty? || a2.empty? ? -1 : [first.max - second.min, second.max - first.min].max\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46637,"user_id":1403,"body":"def mxdiflg(a1, a2)  \n  a1 = a1.map { | i | i.size }\n  a2 = a2.map { | j | j.size }\n  [a1.max - a2.min, a1.min - a2.max].map { | i | i.abs }.max rescue -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46638,"user_id":null,"body":"def mxdiflg(a1, a2)\n  # your code\n  if a1.empty? || a2.empty?\n    return -1\n  end\n\n  a1mima = a1.map { |s| s.size }.minmax\n  a2mima = a2.map { |s| s.size }.minmax\n  \n  return [ a2mima.max - a1mima.min, a1mima.max - a2mima.min ].max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46639,"user_id":50,"body":"def mxdiflg(a1, a2)\n  if a1.size == 0 || a2.size == 0\n    return -1\n  end\n  a=0\n  a1.each do |s1|\n    l=s1.size\n    a2.each do |s2|\n      a=[a,(l-s2.size).abs].max\n    end\n  end\n  a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46640,"user_id":53,"body":"def mxdiflg(xs, ys)\n  m = -1\n  xs.each{|x| ys.each{|y|\n    m = Math.max(m, (x.size - y.size).abs)\n  }}\n  m\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46641,"user_id":null,"body":"def mxdiflg(s1, s2)\n    if s1.size < 1 || s2.size < 1\n        return -1\n    end\n\n    s1_mapped = s1.map{|str| str.size}\n    s2_mapped = s2.map{|str| str.size}\n\n    s1_max = s1_mapped.max\n    s1_min = s1_mapped.min\n    s2_max = s2_mapped.max\n    s2_min = s2_mapped.min\n\n    diff_1 = (s1_max - s2_min).abs\n    diff_2 = (s1_min - s2_max).abs\n\n    return diff_1 > diff_2 ? diff_1 : diff_2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46642,"user_id":1474,"body":"def mxdiflg(a1, a2)\n  return -1 if a1.empty? || a2.empty?\n  mn1 = a1.min_of(&.size)\n  mx1 = a1.max_of(&.size)\n  mn2 = a2.min_of(&.size)\n  mx2 = a2.max_of(&.size)\n  [mx1 - mn2, mx2 - mn1].max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46643,"user_id":null,"body":"def mxdiflg(a1, a2)\n  return -1 if a1.empty? || a2.empty?\n  a1 = a1.map { |a| a.bytesize }\n  a2 = a2.map { |a| a.bytesize }\n  a1.max - a2.min > a2.max - a1.min ? a1.max - a2.min : a2.max - a1.min\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46644,"user_id":null,"body":"def mxdiflg(a1, a2) : Int32\n  return -1 if a1.empty? || a2.empty?\n  ashort, along = min_max(a1)\n  bshort, blong = min_max(a2)\n  a = (along - bshort).abs\n  b = (blong - ashort).abs\n  a > b ? a : b\nend\n\ndef min_max(a) : Array(Int32)\n  min = Int32::MAX\n  max = 0_i32\n  a.each do |str|\n    size = str.size\n    if size < min\n      min = size\n    end\n    \n    if size > max\n      max = size\n    end\n  end\n  [min, max]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"566543703c72200f0b0000c9":[{"id":46645,"user_id":53,"body":"def epidemic(tm, n, s0, i0, b, a)\n  s = s0.to_f64\n  i = i0.to_f64\n  r = 0.to_f64\n  t = 0.to_f64\n  dt = tm.to_f64 \/ n.to_f64\n  imax = 0.to_f64\n  while t<tm.to_f64\n    sd = dt*(-b*s*i)\n    id = dt*(b*s*i-a*i)\n    rd = dt*(a*i)\n    s += sd\n    i += id\n    r += rd\n    t += dt\n    if i.floor>imax\n      imax = i.floor\n    end\n  end\n  imax.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46646,"user_id":1474,"body":"def epidemic(tm, n, s0, i0, b, a)\n  dt = tm \/ n.to_f\n  s = [s0.to_f]; i = [i0.to_f]; r = [0.0]; t = [0.0]\n  k = 0\n  while (k < n)\n    t << (k+1) * dt\n    s << s[k] - dt * b * s[k] * i[k]\n    i << i[k] + dt * (b * s[k] * i[k] - a * i[k])\n    r << r[k] + dt * i[k] * a\n    k += 1\n  end\n  i.max.round\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46647,"user_id":492,"body":"def epidemic(tm, n, s0, i0, b, a)\n    dt = tm\/n.to_f\n    s = [s0.to_f]; i = [i0.to_f]; r = [0.0]; t = [0.0]\n    k = 0\n    while (k < n)\n        t << (k+1)*dt\n        s << s[k] - dt*b*s[k]*i[k]\n        i << i[k] + dt*(b*s[k]*i[k] - a*i[k])\n        r << r[k] + dt*i[k]*a\n        k += 1\n    end\n    i.max.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5667e8f4e3f572a8f2000039":[{"id":46648,"user_id":421,"body":"def accum(s)\n  s.chars.map_with_index{|x, i| x.upcase + x.downcase.to_s * i}.join(\"-\")\nend\n","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46649,"user_id":null,"body":"def accum(s)\n  s\n  .chars\n  .map_with_index {|c,i| c.upcase + Array.new(i, c.downcase).join}\n  .join \"-\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46650,"user_id":null,"body":"def accum(s)\n  s.split(\"\").map_with_index { |c, i| (c * (i + 1)).capitalize}.join(\"-\")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46651,"user_id":492,"body":"def accum(s)\n  s.split(\"\").each_with_index.map{ |c| c[0].upcase + c[0].downcase * c[1] }.join('-')\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46652,"user_id":492,"body":"def accum(s)\n  s.split(\"\").each_with_index.map{ |c| c[0].upcase + c[0].downcase * c[1] }.join('-')\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46653,"user_id":2563,"body":"def accum(s)\n  s.downcase.chars.map_with_index { |c, i|\n    (c + (c.to_s*i)).capitalize\n  }.join('-')\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46654,"user_id":527,"body":"def accum(s : String)\n  s.chars.each_with_index(1).map{ |(c, i)| (c.to_s * i).capitalize }.join('-')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46655,"user_id":null,"body":"def accum(s : String) : String\n  s.chars.map_with_index { |c,i| (c.to_s * (i + 1)).capitalize }.join('-')\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46656,"user_id":null,"body":"def accum(s : String)\n  s.split(\"\").map_with_index(1) { |c, i| (c * i).capitalize }.join('-')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46657,"user_id":null,"body":"def accum(s)\n  thing = [] of String\n  \n  s.each_char_with_index do |char, index|\n    thing.push (char.to_s * (index + 1)).titleize\n  end\n  \n  thing.join(\"-\")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"566be96bb3174e155300001b":[{"id":46658,"user_id":17,"body":"def max_ball(v)\n  (v \/ 3.5316).round\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46659,"user_id":492,"body":"def max_ball(v0)\n  (v0 \/ (0.36 * 9.81)).round.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46660,"user_id":1474,"body":"def max_ball(v)\n  h = ->(t : Float64){  (v * 1000 \/ 3600.0) * t - 0.5 * 9.81 * t ** 2 }\n  oh = [0, 0.0]\n  n = 1\n  nh = [n, h.call(n \/ 10.0)]\n  while nh[1] > oh[1]\n    oh = nh\n    n += 1\n    nh = [n, h.call(n \/ 10.0)]\n  end\n  oh[0]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46661,"user_id":null,"body":"def max_ball(v0)\n  v = v0 \/ 3.6\n  previous_h = h = 0.0\n  interval = 1.0 \/ 10\n  t = 0.0\n  tenth = 0\n\n  until h < previous_h\n    previous_h = h\n    # Formula\n    h = v * t - 0.5 * 9.81 * t * t\n\n    t += interval\n    tenth += 1\n  end\n\n  tenth - 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46662,"user_id":null,"body":"def max_ball(v0)\n  g = 9.81\n  v = v0 \/ 3.6\n  t = 0\n  h_old = 0\n  h_new = 0\n  stop = 0\n  while (h_new - h_old) >= 0\n    h_old, h_new = h_new, v*t - 0.5*g*t*t\n    t += 0.1\n    stop += 1\n  end\n  stop - 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46663,"user_id":null,"body":"def max_ball(v0)\n  (0 .. 100).map {|t|\n   [t, high(v0,t\/10.0)]\n  }.max_by{|x| x[1]}[0]\n  \nend\n\ndef high(v0, t)\n  v0\/3.6 * t - 0.5 * 9.81*t*t\nend\n\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46664,"user_id":null,"body":"def max_ball(v0) ((v0)\/3.6\/9.81*10.0).round end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46665,"user_id":null,"body":"def max_ball(v0)\n  return (((v0\/3.6)\/9.81) * 10).round\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46666,"user_id":527,"body":"def max_ball(v0)\n  (v0 \/ 3.5316).round\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"566fc12495810954b1000030":[{"id":46667,"user_id":492,"body":"def nb_dig(n : UInt64, d)\n  cnt = 0\n  nums = (0..n).map {|k| k * k}\n  nums.each do |num|\n    sn = num.to_s\n      sn.each_char do |s|\n        if (s.to_i == d)\n          cnt += 1 \n        end \n      end\n    end\n    cnt\nend\n","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46668,"user_id":492,"body":"def nb_dig(n : UInt64, d)\n  (0..n).map { |k| k ** 2 }.join.count d.to_s\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46669,"user_id":53,"body":"def nb_dig(n : UInt64, d)\n  m = 0\n  (1..n).each{|k|\n    x = k * k\n    while x > 0\n      r = x % 10\n      x = (x \/ 10).to_i\n      m += 1 if r == d\n    end\n  }\n  m += 1 if d == 0\n  m\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46670,"user_id":null,"body":"def nb_dig(n : UInt64, d)\n    (0..n).to_a.map { |x| (x ** 2).to_s.chars }.flatten.reject { |c| c.to_s != d.to_s }.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46671,"user_id":null,"body":"def nb_dig(n : UInt64, d)\n  count = 0\n  i = 0\n  \n  while i <= n\n    square = i*i\n  \n    while true\n      last_digit = square % 10\n      square = square \/\/ 10\n\n      if last_digit == d\n        count += 1\n      end\n      \n      if square == 0\n        break\n      end\n    end\n  \n    i += 1\n  end\n\n  count\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46672,"user_id":527,"body":"def nb_dig(n : UInt64, d : Int) : Int32\n  (0..n).sum(&.**(2).digits.count(d))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46673,"user_id":421,"body":"def nb_dig(n : UInt64, d)\n  (0..n).map{|x| x.to_i ** 2}.join.count(d.to_s)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46674,"user_id":1474,"body":"def nb_dig(n : UInt64, d)\n  (0..n).map { |i| (i ** 2).to_s.count(d.to_s) }.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46675,"user_id":null,"body":"def nb_dig(n : UInt64, d)\n  c = d.zero? ? 1 : 0\n  k = 1\n  while k <= n\n    c += (k*k).to_s.count d.to_s\n    k += 1\n  end\n  c\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46676,"user_id":null,"body":"def nb_dig(n : UInt64, d)\n  (0..n)\n  .map { |k| (k ** 2).to_s.count d.to_s }\n  .sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5672a98bdbdd995fad00000f":[{"id":46677,"user_id":null,"body":"def rps(p1, p2)\n  case {p1, p2}\n  when {\"scissors\", \"paper\"}\n    return \"Player 1 won!\"\n  when {\"rock\", \"scissors\"}\n    return \"Player 1 won!\"\n  when {\"paper\", \"rock\"}\n    return \"Player 1 won!\"\n  when {\"paper\", \"scissors\"}\n    return \"Player 2 won!\"\n  when {\"scissors\", \"rock\"}\n    return \"Player 2 won!\"\n  when {\"rock\", \"paper\"}\n    return \"Player 2 won!\"\n  else\n    return \"Draw!\"\n  end\n  \nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46678,"user_id":1474,"body":"Scores = { \"paper\" => 1, \"scissors\" => 2, \"rock\" => 3 }\n\ndef rps(p1, p2)\n  s1, s2 = Scores[p1], Scores[p2]\n  res = s1 - s2\n  res == 0 ? \"Draw!\" : res.abs == 1 ? \"Player #{res == 1 ? 1 : 2} won!\" : \"Player #{res == 2 ? 2 : 1} won!\"\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46679,"user_id":null,"body":"def rps(p1, p2)\n  if p1 == \"rock\" && p2 == \"scissors\"\n    \"Player 1 won!\"\n  elsif p1 == \"scissors\" && p2 == \"paper\"\n    \"Player 1 won!\"\n  elsif p1 == \"paper\" && p2 == \"rock\"\n    \"Player 1 won!\"\n  elsif p1 == p2\n    \"Draw!\"\n  else\n    \"Player 2 won!\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46680,"user_id":null,"body":"def rps(p1, p2)\n  p1 == p2 ? \"Draw!\" : \"Player #{(p1.size - p2.size).in?(3,-4,1) ? 1 : 2} won!\" \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46681,"user_id":168,"body":"def rps(p1, p2)\n  p1 == p2 ? \"Draw!\" : [\"scissors paper\", \"paper rock\", \"rock scissors\"].includes?([p1, p2].join \" \") ? \"Player 1 won!\" : \"Player 2 won!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46682,"user_id":527,"body":"def rps(p1 : String, p2 : String) : String\n  case {p1, p2}\n    when {\"rock\", \"scissors\"}, {\"scissors\", \"paper\"}, {\"paper\", \"rock\"}\n      \"Player 1 won!\"\n    when {p2, _}\n      \"Draw!\"\n    else\n      \"Player 2 won!\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46683,"user_id":50,"body":"def rps(p1, p2)\n  p1==p2 ? \"Draw!\" : [-1,2].includes?([\"scissors\", \"paper\", \"rock\"].index(p1).not_nil! -  [\"scissors\", \"paper\", \"rock\"].index(p2).not_nil!) ?  \"Player 1 won!\" : \"Player 2 won!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46684,"user_id":53,"body":"def rps(p1, p2)\n  return \"Player 1 won!\" if p1 == \"rock\" && p2 == \"scissors\" || p1 == \"scissors\" && p2 == \"paper\" || p1 == \"paper\" && p2 == \"rock\"\n  p1 == p2 ? \"Draw!\" : \"Player 2 won!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46685,"user_id":421,"body":"def rps(p1, p2)\n  if (p1 == \"rock\" && p2 == \"scissors\" || p1 == \"scissors\" && p2 == \"paper\" || p1 == \"paper\" && p2 == \"rock\")\n    \"Player 1 won!\"\n  elsif (p1 === p2)\n    \"Draw!\"\n  else\n    \"Player 2 won!\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56747fd5cb988479af000028":[{"id":46686,"user_id":759,"body":"def get_middle(s)\n  s[(s.size-1)\/2..s.size\/2]\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46687,"user_id":168,"body":"def get_middle(s)\n  s[(s.size - 1) \/ 2, 2 - s.size % 2]\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46688,"user_id":null,"body":"def get_middle(s)\n  len = s.size\n  mid = (len \/ 2).floor\n  \n  (len.even? ? s[mid - 1...mid + 1] : s[mid]).to_s\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46689,"user_id":null,"body":"def get_middle(s)\n  s[(s.size \/ 2.0).ceil.to_i - 1, s.size % 2 == 0 ? 2 : 1]\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46690,"user_id":421,"body":"def get_middle(s)\n  s[(s.size - 1) \/ 2...s.size \/ 2 + 1] \nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46691,"user_id":null,"body":"def get_middle(s)\n  return s.size < 3? s : get_middle(s[1 ..-2])\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46692,"user_id":null,"body":"def get_middle(s)\n  if(s.size < 3)\n    return s\n  end\n  return get_middle(s[1 ..-2])\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46693,"user_id":null,"body":"def get_middle(s)\n  if(s.size < 3)\n    return s\n  end\n  return get_middle(s[1 ..s.size - 2])\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46694,"user_id":null,"body":"def get_middle(s)\n  # your code here\n  s.size == 1 ? \"#{s[0]}\" : s.size % 2 == 1 ? \"#{s[s.size \/ 2]}\" : \"#{s[s.size \/ 2 - 1]}#{s[s.size \/ 2]}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46695,"user_id":null,"body":"def get_middle(s)\n  i = (s.size - 1) \/ 2\n  s[i..-i.succ]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"567501aec64b81e252000003":[{"id":46696,"user_id":492,"body":"def wallpaper(l : Float64, w : Float64, h : Float64)\n    dict = [\"zero\", \"one\", \"two\", \"three\", \"four\",\n            \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\",\n            \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\",\n            \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"]\n\n    if (l * w * h == 0) \n    \treturn dict[0] \n    end\n    r = (((l + w) * 2 * h \/ 0.52 \/ 10) * 1.15).ceil.to_i\n    return dict[r]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46697,"user_id":421,"body":"def wallpaper(l : Float64, w : Float64, h : Float64)\n  numbers = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"]\n  [l, w, h].any?(&.zero?) ? \"zero\" : numbers[(2 * h * (l + w) \/ 0.52 * 1.15 \/ 10).ceil.to_i]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46698,"user_id":53,"body":"def wallpaper(l : Float64, w : Float64, h : Float64)\n    ns = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\",\n          \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"]\n\n    return ns[0] if (l * w * h == 0) \n    ns[((h * (w + l)) * 2.3 \/ 5.2).ceil.to_i]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46699,"user_id":1474,"body":"def wallpaper(l : Float64, w : Float64, h : Float64)\n  return \"zero\" if l * w * h == 0\n  words = %w[zero one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty]\n  warea = 2 * (l * h + w * h)\n  parea = 52 * 10 \/ 100.0\n  preq = warea \/ parea\n  res = preq * 1.15\n  words[res.ceil.to_i]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46700,"user_id":1474,"body":"\ndef wallpaper(l : Float64, w : Float64, h : Float64)\n  words = %w[zero one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty]\n  warea = 2 * (l * h + w * h)\n  parea = 52 * 10 \/ 100.0\n  preq = warea \/ parea\n  res = preq * 1.15\n  words[res.ceil.to_i]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46701,"user_id":null,"body":"def wallpaper(l : Float64, w : Float64, h : Float64)\n  roll_area = 0.52*10\n  area = ((2*l)+(2*w))*h\n  rolls = ((area\/roll_area)*1.15).floor\n  numbers = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\",\n    \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\",\n    \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\",\n    \"ninteen\", \"twenty\"]\n  return numbers[rolls.to_i]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46702,"user_id":1134,"body":"def wallpaper(l : Float64, w : Float64, h : Float64)\n    digits = [\"one\", \"two\", \n              \"three\", \"four\", \n              \"five\",\"six\", \n              \"seven\", \"eight\", \n              \"nine\", \"ten\",\n              \"eleven\", \"twelve\", \n              \"thirteen\", \"fourteen\", \n              \"fifteen\",\"sixteen\",\n              \"seventeen\", \"eighteen\",\n              \"nineteen\", \"twenty\"]\n            \n    return digits[(((l + w) * 2 * h \/ 0.52 \/ 10) * 1.15).ceil.to_i - 1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46703,"user_id":null,"body":"def wallpaper(l : Float64, w : Float64, h : Float64)\n  eng = [\"one\", \"two\", \"three\", \"four\", \"five\",\n        \"six\", \"seven\", \"eight\", \"nine\", \"ten\",\n        \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\",\n        \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"]\n  eng[((l * h * 2 + w * h * 2) * 1.15 \/ 5.2 + 0.5).round.to_i - 1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5679aa472b8f57fb8c000047":[{"id":46704,"user_id":null,"body":"def find_even_index(arr)\n  (0...arr.size).find {|i|arr[0...i].sum == arr[(i+1)...arr.size].sum} || -1\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46705,"user_id":421,"body":"def find_even_index(arr)\n  (0...arr.size).each do |i|\n    if arr[0...i].sum == arr[i + 1..-1].sum\n      return i\n    end\n  end\n  -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46706,"user_id":null,"body":"def find_even_index(arr)\n  (0..arr.size-1)\n  .find(-1) {|n| arr.first(n).sum == arr.skip(n + 1).sum}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46707,"user_id":null,"body":"def find_even_index(arr)\n  #your code here\n  i=0\n  while i < arr.size\n    return i if arr[0..i].sum == arr[i..arr.size-1].sum\n    i+=1\n  end\n  return -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46708,"user_id":null,"body":"def find_even_index(arr)\n  v = arr[0]; i = l = 0; r = arr[1..-1].sum\n  while i < arr.size\n    return i if l == r\n    l += v\n    r -=(v = arr[i += 1]? || 0)\n  end || -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46709,"user_id":null,"body":"def find_even_index(arr)\n  v = arr[0]; i = 0; l = 0; r = arr[1..-1].sum\n  while i < arr.size\n    return i if l == r\n    i += 1\n    l += v\n    v = arr[i]? || 0\n    r -= v\n  end\n  -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46710,"user_id":null,"body":"def find_even_index(arr)\n  (0..arr.size-1).each do |i|\n    return i if arr.reverse.skip(arr.size-i).sum == arr.skip(i+1).sum\n  end\n  -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46711,"user_id":50,"body":"def find_even_index(arr)\n  arr.size==0 ? -1 : f(arr,0,0,arr.sum)\nend\ndef f(arr, i, a ,b)\n  arr.size==0 ? -1 : a == b-arr[0] ? i : f(arr[1..-1],i+1,a+arr[0],b-arr[0])\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46712,"user_id":null,"body":"def find_even_index(arr)\n  arr.each_index do |i|\n    return i if(arr[0,i].sum == arr[i+1..].sum)\n  end\n  return -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46713,"user_id":null,"body":"def find_even_index(arr)\n  scan = arr.dup\n  n = arr.size\n  return 0 if n == 0\n  (1...n).each do |i|\n    scan[i] += scan[i-1]\n  end\n  scan.insert 0, 0\n  (0...n).each do |i|\n    return i if scan[-1] - scan[i+1] == scan[i]\n  end\n  return -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"567bf4f7ee34510f69000032":[{"id":46714,"user_id":421,"body":"def is_digit(str)\n    \/^\\d$\/ === str\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46715,"user_id":null,"body":"class String\n  def digit?\n    self.size == 1 && self.to_i{ return false }.is_a?(Number)\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46716,"user_id":null,"body":"class String\n  def digit?\n    \/^\\d$\/.matches? self\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46717,"user_id":50,"body":"class String\n  def digit?\n    self.size==1 && (\/\\d\/).match(self) != nil\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46718,"user_id":53,"body":"class String\n  def digit?\n    \/^\\d$\/.match(self) != nil\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46719,"user_id":null,"body":"class String\n  def digit?\n    itself == \"7\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46720,"user_id":863,"body":"class String\n  def digit?\n    !!match(\/^\\d$\/)\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46721,"user_id":null,"body":"class String\n  def digit?\n    \/^\\d$\/ =~ self ? true : false\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46722,"user_id":527,"body":"class String\n  def digit?\n    \/\\A[0-9]\\z\/ === self\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46723,"user_id":1072,"body":"class String def digit?() self.gsub(\/\\d\/,\"pippi\")==\"pippi\" end end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"568d0dd208ee69389d000016":[{"id":46724,"user_id":1474,"body":"def rental_car_cost(d)\n  40 * d - (d >= 7 ? 50 : (d >= 3 ? 20 : 0))\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46725,"user_id":null,"body":"def rental_car_cost(d)\n  if d < 3\n    return d * 40\n  elsif d >= 3 && d < 7\n    return (d * 40) - 20\n  else\n    return ( d* 40 ) - 50\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46726,"user_id":1566,"body":"def rental_car_cost(d)\n  d * 40 - ( d > 6 ? 50 : d > 2 ? 20 : 0 )\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46727,"user_id":null,"body":"def rental_car_cost(d : Int32)\n  cost = 40 * d\n  if (d >= 7)\n    return (cost - 50)\n  elsif (d >= 3)\n    return (cost - 20)\n  end\n  return cost\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46728,"user_id":53,"body":"def rental_car_cost(d)\n    m = d * 40;\n    if (d > 2)\n      m -= 20;\n    end\n    if (d > 6) \n      m -= 30;\n    end\n    return m;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46729,"user_id":527,"body":"def rental_car_cost(d)\n  c = 40 * d\n  d >= 7 ? c - 50 : d >= 3 ? c - 20 : c\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46730,"user_id":421,"body":"def rental_car_cost(d)\n    d >= 7 ? d * 40 - 50:  d >= 3 ? d * 40 - 20: d * 40\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"568dcc3c7f12767a62000038":[{"id":46731,"user_id":null,"body":"def set_alarm(e, v)\n    e && !v\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46732,"user_id":645,"body":"def set_alarm(employed, vacation)\n  employed && !vacation\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46733,"user_id":null,"body":"def set_alarm(employed, vacation)\n  # Your code here\n  return employed && !vacation\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46734,"user_id":50,"body":"def set_alarm(employed, vacation)\n  employed^vacation && employed\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46735,"user_id":50,"body":"def set_alarm(employed, vacation)\n  return employed^vacation && employed\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46736,"user_id":null,"body":"def set_alarm(employed, vacation)\n  return false if !employed\n  return true if employed && !vacation\n  false\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46737,"user_id":null,"body":"def set_alarm(employed, vacation)\n  (employed == true) && (vacation == false)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46738,"user_id":443,"body":"def set_alarm(employed, vacation)\n  employed & (employed ^ vacation)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46739,"user_id":null,"body":"def set_alarm(employed, vacation)\n  employed && !vacation ? true : false\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46740,"user_id":null,"body":"def set_alarm(e, v)\n  e == true && v == false ? true : false\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"569218bc919ccba77000000b":[{"id":46741,"user_id":null,"body":"def date_nb_days(a0, a, p)\n  # your code\n  date = Time.utc(2016, 1, 1)\n  while a0 < a\n    a0 += a0 * (p \/ 36000)\n    date += 1.day\n  end\n  return date.to_s(\"%Y-%m-%d\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46742,"user_id":492,"body":"def date_nb_days(a0, a, p)\n  start = Time.utc(2016, 1, 1)\n  r = (Math.log(a \/ a0) \/ Math.log(1 + p \/ 36000)).ceil.to_i\n  (start + r.days).to_s(\"%F\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46743,"user_id":1474,"body":"def date_nb_days(a0, a, p)\n  date = Time.new(2016, 1, 1)\n  until a0 >= a\n    date += Time::Span.new(24, 0, 0)\n    a0 += a0 * p.to_f \/ 36000\n  end\n  date.to_s(\"%Y-%m-%d\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46744,"user_id":null,"body":"def date_nb_days(a0, a, p)\n  pd = p.to_f \/ 36000\n  c = 0\n  while true\n    a0 = a0 + a0 * pd\n    c += 1\n    break if a <= a0\n  end\n  (Time.new(2016, 1, 1) + c.days).to_s(\"%F\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"569b5cec755dd3534d00000f":[{"id":46745,"user_id":53,"body":"def new_avg(arr, u)\n  s = arr.reduce(0){|a,b| a+b}\n  n = arr.size\n  x = (u * (n + 1) - s).ceil\n  if x < 0\n    raise ArgumentError.new(\"ArgumentError\")\n  end\n  x\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46746,"user_id":492,"body":"def new_avg(arr, newavg)\n    if (arr.size == 0) \n    \t  sm = 0  \n  \telse \n  \t\t  sm = arr.reduce(0){ |sum, x| sum + x } \n\t  end\n    add = (arr.size + 1) * newavg - sm\n    if (add > 0)\n        return add.ceil\n    end\n\t  raise Exception.new(\"ArgumentError\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46747,"user_id":null,"body":"def new_avg(arr, newavg) \n  avg = newavg * arr.size.succ - arr.sum\n  raise \"ArgumentError\" if avg < 0 # .negative? if version >= 1.1.0\n  avg.round\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46748,"user_id":null,"body":"def new_avg(arr, newavg)\n  needed = newavg * (arr.size + 1) - arr.sum\n  raise Exception.new(\"ArgumentError\") unless needed > 0\n  needed.ceil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46749,"user_id":1474,"body":"def new_avg(arr, newavg)\n  if arr.empty?\n    newavg\n  else\n    deficit = newavg * (arr.size + 1) - arr.sum\n    deficit > 0 ? deficit.ceil : raise \"ArgumentError\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46750,"user_id":null,"body":"def new_avg(arr, newavg)\n  res = newavg * (arr.size + 1) - arr.sum\n  raise \"ArgumentError\" if res < 0\n  res.ceil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46751,"user_id":null,"body":"def new_avg(arr, newavg)\n  num = ((newavg * (arr.size + 1)) - arr.sum).round\n  num > 0 ? num : raise(\"ArgumentError\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46752,"user_id":null,"body":"def new_avg(arr, newavg)\n  x = (newavg * (arr.size + 1) - arr.sum).round\n  x <= 0 ? raise(\"ArgumentError\") : x\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46753,"user_id":527,"body":"def new_avg(arr, newavg)\n  res = (arr.size + 1) * newavg - arr.sum\n  raise ArgumentError.new(\"ArgumentError\") if res <= 0\n  res.ceil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"569e09850a8e371ab200000b":[{"id":46754,"user_id":421,"body":"def pre_fizz(n)\n  (1..n).to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46755,"user_id":53,"body":"def pre_fizz(n)\n  res = [] of Int32\n  i = 0\n  while i < n\n    res.push(i + 1)\n    i += 1\n  end\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56a32dd6e4f4748cc3000006":[{"id":46756,"user_id":null,"body":"def mean(town, strng)\n    vs = values(town, strng)\n    return -1 if vs.empty?\n    mean(vs)\nend\n\ndef mean(values : Array(Float))\n  values.sum \/ values.size.to_f\nend\n\ndef variance(town, strng)\n    vs = values(town, strng)\n    return -1 if vs.empty?\n    m = mean(vs)\n    vs.map{|v| (v - m) ** 2}.sum \/ vs.size.to_f\nend\n\ndef values(town, strng)\n  records = strng.split(\"\n\").find{|row| row.starts_with?(town + \":\")}\n  return Array(Float64).new if records.nil?\n  records[(town.size + 1)..-1].split(\",\").map{|rec| rec[4..-1].to_f}\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46757,"user_id":492,"body":"def meanvar_aux(town, strng)\n    arr2 = strng.split(\"\n\").map{ |x| x.split(\":\") }.select{ |x| x[0] == town }\n    if (arr2.size == 0) \n      return [-1, -1] \n    end\n    arr = arr2[0]\n    s1 = 0; s2 = 0; l = 0\n    arr[1].split(\",\").map{ |x| x.split(\" \")[1] }.each { |x| f = x.to_f; s1 += f; s2 += f * f; l += 1 }\n    m = s1 \/ l.to_f\n    [m, s2 \/ l.to_f - m * m] \nend\ndef mean(town, strng)\n    res = meanvar_aux(town, strng)\n    res[0]\nend\ndef variance(town, strng)\n    res = meanvar_aux(town, strng)\n    res[1]\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46758,"user_id":492,"body":"def meanvar_aux(town, strng)\n    arr2 = strng.split(\"\n\").map{ |x| x.split(\":\") }.select{ |x| x[0] == town }\n    if (arr2.size == 0) \n      return [-1, -1] \n    end\n    arr = arr2[0]\n    s1 = 0; s2 = 0; l = 0\n    arr[1].split(\",\").map{ |x| x.split(\" \")[1] }.each { |x| f = x.to_f; s1 += f; s2 += f * f; l += 1 }\n    m = s1 \/ l.to_f\n    [m, s2 \/ l.to_f - m * m] \nend\ndef mean(town, strng)\n    res = meanvar_aux(town, strng)\n    res[0]\nend\ndef variance(town, strng)\n    res = meanvar_aux(town, strng)\n    res[1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46759,"user_id":759,"body":"def mean(town, strng)\n    d = data(town, strng)\n    d ? mean(d) : -1\nend\n\ndef variance(town, strng)\n    m = mean(town, strng)\n    d = data(town, strng)\n    d ? mean(d.map { |f| (f - m) ** 2 }) : -1\nend\n\ndef data(town, strng)\n    line = strng.lines.find { |s| s.starts_with?(town + \":\") }\n    return nil unless line\n    line[town.size + 1..-1].split(',').map { |s| s[4..-1].to_f }\nend\n\ndef mean(arr)\n    arr.sum \/ arr.size \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46760,"user_id":null,"body":"def town(town, strng)\n  st = strng.split(\"\n\").find { |x| x.split(\":\")[0] == town }\n  return [] of Nil unless st\n\n  st.split(\",\").map { |x| x.split(\" \")[1].to_f }\nend\n\ndef mean(town, strng)\n  st = town(town, strng).compact\n  return -1 if st.empty?\n\n  st.reduce(0.0){ |sum, x|  sum += x } \/ st.size\nend\n\ndef variance(town, strng)\n  st = town(town, strng).compact\n  return -1 if st.empty?\n  \n  mean = st.reduce(0.0){ |sum, x|  sum += x } \/ st.size\n  st.reduce(0.0) { |res, x| res += ( mean - x ) ** 2 } \/ st.size\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46761,"user_id":1624,"body":"def data_for(town, data)\n  data\n    .lines\n    .find(\"\"){|line| line.starts_with?(town+\":\") }\n    .scan(\/[\\-\\d\\.]+\/)\n    .map(&.[0].to_f)\nend\n\ndef mean(town, data)\n  samples = data_for(town, data)\n  return -1 if samples.empty?\n  samples.sum \/ samples.size \nend\n\ndef variance(town, data)\n  samples = data_for(town, data)\n  return -1 if samples.empty?\n  e = samples.sum \/ samples.size\n  samples.map{|x| (x-e) ** 2}.sum \/ samples.size\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46762,"user_id":null,"body":"def get_data(town, strng)\n  return nil unless strng =~ \/^#{town}:([^\n]*)$\/m\n  $1.scan(\/\\d+\\.\\d+\/).map { | a | a[0].to_f }\nend\n\ndef mean(town, strng)\n  return -1.0 unless d = get_data(town, strng)\n  d.sum \/ d.size\nend\n\ndef variance(town, strng)\n  return -1.0 unless d = get_data(town, strng)\n  m = mean(town, strng)\n  d.reduce(0) { | a, e | a + (m - e)**2 } \/ d.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46763,"user_id":null,"body":"def mean(town, string)\n    mean = 0.0\n    count = 0.0\n    \n    string.each_line { |line| \n      if ( line.scan(\/(\\w+)\/)[0][0] == town )\n        line.scan(\/(\\d+\\.?\\d*)\/) { |stats| mean += stats[0].to_f; count += 1.0 }\n        break\n      end\n    }\n    \n    return -1.0 if mean == 0 \n    return mean\/count\nend\ndef variance(town, string)\n    variance = 0.0\n    count = 0.0\n    meanValue = mean(town, string)\n    \n    return -1.0 if meanValue == -1.0\n    string.each_line { |line| \n      if ( line.scan(\/(\\w+)\/)[0][0] == town )\n        line.scan(\/(\\d+\\.?\\d*)\/) { |stats| variance += (stats[0].to_f - meanValue)**2; count += 1.0 }\n        break\n      end\n    }\n    \n    return variance\/count\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46764,"user_id":null,"body":"def rain_for_town(town, strng)\n  res = strng.split(\"\n\").find { |l| l.match(\/^#{town}\\:\/) }\n  res.nil? ? [] of Float64 : res.scan(\/\\d+\\.\\d\/).map { |r| r.not_nil![0].to_f }\nend\n\ndef mean(town, strng)\n  floats = rain_for_town(town, strng)\n  floats.empty? ? -1 : floats.sum \/ floats.size\nend\n\ndef variance(town, strng)\n  avg = mean(town, strng)\n  return avg if avg < 0\n  \n  floats = rain_for_town(town, strng)\n  floats.map { |f| (f - avg) ** 2 }.sum \/ floats.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46765,"user_id":986,"body":"def mean(town, str)\n  city = \"\"\n  str.lines.each { |cty| city = cty if cty.includes?(town) && town == cty.split(\":\")[0] }\n  return -1 if city.size < 1\n  \n  city.gsub(\/[a-z]|\\:| \/i,\"\").split(\",\").map { |s| s.to_f }.sum\/12\nend\n\ndef variance(town, str)\n  city = \"\"\n  mean = mean(town,str)\n  str.lines.each { |cty| city = cty if cty.includes?(town) && town == cty.split(\":\")[0] }\n  return -1 if city.size < 1\n  \n  city.gsub(\/[a-z]|\\:| \/i,\"\").split(\",\").map { |num| (num.to_f - mean).abs2 }.sum\/12\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56a4872cbb65f3a610000026":[{"id":46766,"user_id":421,"body":"def max_rot(n : Int64) : Int64\n    n = n.to_s\n    lst = [n]\n    while lst.size <= n.size\n      n = n[0...lst.size - 1] + n[lst.size..-1] + n[lst.size - 1]\n      lst << n\n    end\n    lst.max.to_i64\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46767,"user_id":1624,"body":"def max_rot(n : Int64) : Int64\n  s = n.to_s\n  nums = [n]\n  s.size.times do |i|\n    s = s[0...i] + s[i+1..-1] + s[i]\n    nums << s.to_i64\n  end\n  nums.max\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46768,"user_id":492,"body":"def max_rot(n : Int64) : Int64\n    s, res, mx = n.to_s, \"\", n\n    if (s.size == 1) \n    \treturn n \n  \tend\n    while true\n        s = (s * 2)[1, s.size]\n        res += s[0]\n        s = s[1, s.size]\n        nb = (res + s).to_i64\n        if (nb > mx) \n      \t\tmx = nb \n    \tend\n        if (s.size == 1)\n      \t\tbreak \n    \tend\n    end\n    mx\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46769,"user_id":1474,"body":"def max_rot(n : Int64) : Int64\n  stg = n.to_s\n  l = stg.size - 2\n  max = n\n  (1..l).reduce(stg[1..-1] + stg[0]) do |s, i|\n    tmp = s.to_i64\n    max = tmp if max < tmp\n    s[0...i] + s[(i+1)..-1] + s[i]\n  end\n  max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46770,"user_id":null,"body":"def max_rot(n : Int64) : Int64\n  return n if n.to_s.size == 1\n  arr = [] of String\n  arr << n.to_s\n  s = n.to_s.split(\"\").rotate.join\n  arr << s\n  i = 0\n  while true\n    arr << s[0..i] + s[(i + 1)..(s.size - 1)].split(\"\").rotate.join\n    s = s[0..i] + s[(i + 1)..(s.size - 1)].split(\"\").rotate.join\n    i += 1\n    break if i == s.size - 1\n  end\n  arr.map { |x| x.to_i64 }.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56a5d994ac971f1ac500003e":[{"id":46771,"user_id":527,"body":"def longest_consec(strs : Enumerable(String), k : Int) : String\n  return \"\" unless (1..strs.size).includes?(k)\n  strs.each_cons(k).max_by(&.sum(&.size)).join\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46772,"user_id":null,"body":"def longest_consec(strarr, k)\n    return \"\" if strarr.empty? || k <= 0 || k > strarr.size\n  \tstrarr.each_cons(k)\n      .map { |words| words.join }\n      .max_by { |word| word.size }\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46773,"user_id":421,"body":"def longest_consec(strarr, k)\n  \tk <= 0 || k > strarr.size || strarr.nil? ? \"\" : strarr.each_cons(k).map(&.join).max_by(&.size)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46774,"user_id":null,"body":"def longest_consec(strarr, k)\n    if k <=0 || strarr.size < k\n      return \"\" end\n    longest = \"\"\n  \tstrarr.size.times do |index_word|\n      if index_word < strarr.size - k + 1\n        current = \"\"\n        k.times do |next_index_word|\n          current += strarr[index_word + next_index_word] end\n        if current.size > longest.size\n          longest = current end\n      end end\n    return longest\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46775,"user_id":null,"body":"def longest_consec(strarr, k)\n  if k <= 0 || strarr.size == 0 || k > strarr.size\n    return \"\"\n  end\n\n  slice_ar = Array(String).new\n  strarr.each_cons (k) do |slice|\n    slice_ar.push(slice.join(\"\"))\n  end\n  slice_ar.reverse!\n  slice_ar.[slice_ar.map { |s| s.size }.each_with_index.max[1]]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46776,"user_id":168,"body":"def longest_consec(strarr, k)\n  strarr.each_cons(k).map(&.join).max_by(&.size) rescue \"\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46777,"user_id":null,"body":"def longest_consec(strarr, k)\n  \t# Edge cases\n    return \"\" if strarr.empty?\n    return \"\" if k <= 0\n    return \"\" if k > strarr.size\n\n    strs = [] of String\n    strarr.each_cons(k) do |cons|\n      strs << cons.join\n    end\n\n    strs.max_by { |str| str.size }\n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46778,"user_id":53,"body":"def longest_consec(arr, k)\n    m = \"\"\n    if k <= 0\n        return m \n    end\n    i = 0\n    while i+k <= arr.size\n        n = arr[i...i+k].join(\"\")\n        if n.size > m.size\n            m = n\n        end\n        i += 1\n    end\n    return m\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46779,"user_id":53,"body":"def longest_consec(arr, k)\n    m = \"\"\n    if k <= 0\n        return m\n    end\n    i = 0\n    while i+k <= arr.size\n        n = arr[i, k].join(\"\")\n        if n.size > m.size\n            m = n\n        end\n        i += 1\n    end\n    return m\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46780,"user_id":1474,"body":"def longest_consec(strarr, k)\n  strarr.empty? || k < 1 || k > strarr.size ? \"\" : strarr.each_cons(k).map(&.join).max_by(&.size)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56b0f5f84de0afafce00004e":[{"id":46781,"user_id":421,"body":"def gcd(m, n)\n  n.zero? ? m : gcd(n, m % n)\nend\n\ndef relatively_prime(n, list)\n   list.select{|x| gcd(n, x) == 1}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46782,"user_id":null,"body":"def relatively_prime(n, list)\n  list.select{|m| 1==m.gcd n}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46783,"user_id":527,"body":"def relatively_prime(n, list)\n  list.select{ |x| x.gcd(n) == 1 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46784,"user_id":1072,"body":"def gcd(a,b) b==0 ? a : gcd(b,a%b) end; def relatively_prime(n,list) list.select{|e| gcd(n,e)==1} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56b1f01c247c01db92000076":[{"id":46785,"user_id":1474,"body":"def double_char(str)\n  str.chars.map { |c| c.to_s * 2 }.join\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46786,"user_id":null,"body":"def double_char(str)\n  s = \"\"\n  str.chars.each do |c|\n    s += c\n    s += c\n  end\n  \n  s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46787,"user_id":168,"body":"def double_char(str)\n  str.gsub(\/.\/, \"\\\\0\\\\0\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46788,"user_id":null,"body":"def double_char(str)\n    res = \"\"\n    str.each_char do |char|\n        res += (char.to_s * 2)\n    end\n    res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46789,"user_id":null,"body":"def double_char(str)\n  str.chars.map { |i| \"#{i}#{i}\" }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46790,"user_id":null,"body":"def double_char(str)\n  res = \"\"\n  str.split(\"\").each{|c| res = res + c * 2}\n  return res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46791,"user_id":null,"body":"def double_char(str)\n  i = 0\n  r = \"\"\n  while i < str.size\n    r += \"#{str[i]}#{str[i]}\"\n    i += 1\n  end\n  r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46792,"user_id":527,"body":"def double_char(str : String) : String\n  String.build(str.bytesize * 2){ |res| str.each_char{ |c| res << c << c } }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46793,"user_id":53,"body":"def double_char(str)\n  str.chars.map{|c|\"#{c}#{c}\"}.join(\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46794,"user_id":527,"body":"def double_char(str : String) : String\n  str.each_char.flat_map{ |c| Iterator.of(c).first(2) }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56b5afb4ed1f6d5fb0000991":[{"id":46795,"user_id":null,"body":"def revrot(string, size)\n  return \"\" if size <= 0 || string.empty?\n  String.build do |io|\n    string.chars.each_slice(size) do |slice|\n      next if slice.size < size\n      io << (slice.map(&.to_i.**(2)).sum.even? ? slice.reverse.join : slice.rotate.join)\n    end\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46796,"user_id":492,"body":"def revrot(str, sz)\n    if ((sz <= 0) || (str == \"\") || (sz > str.size)) \n    \treturn \"\" \n  \tend\n    t = str.scan(\/.{#{sz}}\/).map{ |md| md[0].to_s }.map { |r|\n        if (r.chars.map{ |c| c.to_i ** 3 }.reduce(0){|m, e| m + e} % 2 == 0)\n            r.reverse\n        else\n            (r * 2)[1, r.size]\n        end\n    }\n    return t.join(\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46797,"user_id":421,"body":"def revrot(str, sz)\n   if sz <= 0 || str.empty? || sz > str.size\n     return \"\"\n   end\n   (0...str.size \/\/ sz).map{|a| str[a*sz...a*sz+sz]}.map{|x| x.chars.map{|y| y.to_i ** 3}.sum.even? ? x.reverse : x[1..-1] + x[0]}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46798,"user_id":null,"body":"def revrot(str, sz)\n  return \"\" if str.empty? || sz <= 0 || sz > str.size\n  \n  r = str.each_char.each_slice(sz).reject(&.size.< sz).map do |c|\n    c.map(&.to_i.** 3).sum.even? ? c.reverse : c.rotate\n  end\n  \n  r.flatten.join\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46799,"user_id":null,"body":"def revrot(str, sz)\n  return \"\" if sz <= 0\n  str.chars\n    .in_groups_of(sz, '\\0')\n    .take_while { |g| !g.includes?('\\0') }\n    .map do |g|\n      sum = g.map(&.to_i.**(3)).sum()\n      (sum % 2 == 0 ? g.reverse : g.rotate).join\n    end\n    .join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46800,"user_id":null,"body":"def revrot(str, sz)\n    # your code\n  return \"\" if str == \"\" || sz <= 0 || sz > str.size\n  str.chars\n      .each_slice(sz)\n      .to_a\n      .select{ |s| s.size >= sz }\n      .map{ |m| (m.map{|m1| m1.to_i**3}.sum % 2) == 0 ? m.reverse.join : m.rotate(1).join }\n      .join    \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46801,"user_id":null,"body":"def revrot(str, sz)\n  return \"\" unless (ss = str.size) > sz > 0\n  lim = -((ss % sz) + 1)\n  str.bytes[0..lim].map(&.&(0xf)).in_groups_of(sz, 0).join do |chunk|\n    (chunk.sum(&.**(2)) % 2 > 0 ? chunk.rotate : chunk.reverse).join\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46802,"user_id":null,"body":"def revrot(str, sz)\n  return \"\" if str.size < 1 || sz <= 0 || sz > str.size\n  str.chars.each_slice(sz).reject { |a| a.size < sz }.map { |c|\n    c.reduce(0) { |r, x| r + x.to_i ** 3 }.divisible_by?(2) ? c.join.reverse : c[1..].join + c[0]\n  }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46803,"user_id":null,"body":"def revrot(str, sz)\n  return \"\" if sz > str.size || sz <= 0\n  r = \"\"\n  (str.size\/\/sz).times do |i|\n    s = str[i * sz, sz]\n    if s.chars.sum {|c| c.to_i ** 2} % 2 == 0\n      r += s.reverse\n    else\n      r += s[1, sz - 1] + s[0]\n    end\n  end\n  r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46804,"user_id":null,"body":"def revrot(str : String, sz : Int32)\n  return \"\" if str.empty? || sz <= 0 || sz > str.size\n  pos = 0\n  result = String.build do |s|\n    while true\n      chunk = str[pos, sz]\n      break if chunk.size != sz\n      chunk = is_reversible?(chunk) ? chunk.reverse : \"#{chunk[1..-1]}#{chunk[0]}\"\n      s << chunk\n      pos += sz\n    end\n  end\nend\n\ndef is_reversible?(str : String)\n  str.chars.reduce(0) { |sum, c| sum + c.to_i ** 3 }.even?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56b7f2f3f18876033f000307":[{"id":46805,"user_id":null,"body":"def in_asc_order(a)\n  a.sort == a\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46806,"user_id":527,"body":"def in_asc_order(arr)\n  arr.each.cons_pair.all?{ |x, y| x <= y }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46807,"user_id":null,"body":"def in_asc_order(a)\n  a == a.sort\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46808,"user_id":null,"body":"def in_asc_order(a)\n  a.each_cons(2).all? {|(a, b)| a <= b}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46809,"user_id":null,"body":"def in_asc_order(a)\n  is_asc = true\n  p = -2147483648\n  a.each do |x|\n    is_asc = p <= x && is_asc\n    p = x\n  end\n\n  is_asc\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46810,"user_id":168,"body":"def in_asc_order(a)\n  a.each_cons(2).all? { |(x, y)| x <= y }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46811,"user_id":53,"body":"def in_asc_order(arr)\n  (1...arr.size).each do |i|\n    return false if arr[i - 1] > arr[i]\n  end\n  true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46812,"user_id":null,"body":"def in_asc_order(a)\n  return true if a.size == 1\n  a[1..-1].each_with_index do |n, i| \n    return false if n < a[i]\n  end\n  return true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46813,"user_id":null,"body":"def in_asc_order(a)\n  last = a.first\n  a[1..-1].each do | e |\n    return false if e < last\n    last = e\n  end\n  true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46814,"user_id":null,"body":"def in_asc_order(a)\n  return a == a.sort\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56baeae7022c16dd7400086e":[{"id":46815,"user_id":492,"body":"def phone(strng, num)\n    # clean all\n    clean = strng.gsub(\/[^-0-9a-z\\\\\\s+A-Z\\\\\n<>.']\/, \" \")\n    # search num\n    a = clean.scan(\/.*\\+#{num}.*\/).map{ |md| md[0].to_s }\n    if (a.size > 1) \n        return \"Error => Too many people: #{num}\" end\n    if (a.size == 0) \n        return \"Error => Not found: #{num}\" end\n    # replace num \n    c = a[0].gsub(\/\\+#{num}\/, \"\")\n    # name\n    name = c.scan(\/<.*>\/).map{ |md| md[0].to_s }[0]\n    # address\n    ad = c.gsub(\/<.*>\/, \"\").gsub(\/\\s+\/, \" \").strip()\n    \"Phone => \" + num + \", Name => \" + name[1...name.size-1] + \", Address => \" + ad\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46816,"user_id":null,"body":"def phone(strng, num)\n  lines = strng.split(\"\n\").select(&.includes?(num))\n  case lines.size\n  when 0\n    \"Error => Not found: #{num}\"\n  when 1\n    name = lines[0].match(\/<([\\w\\s']+)>\/).not_nil![1]\n    address = lines[0].sub(num, \"\").sub(\"<#{name}>\", \"\").gsub(\/[^\\w\\s\\-\\.]\/, \" \").gsub(\/[_\\s]+\/, \" \")\n    \"Phone => #{num}, Name => #{name}, Address => #{address.strip}\"\n  else\n    \"Error => Too many people: #{num}\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46817,"user_id":null,"body":"def phone(strng, num)\n  rows = strng.split(\/\n\/).select(\/.*#{num}.*\/)\n  return \"Error => Too many people: #{num}\" if rows.size > 1\n  return \"Error => Not found: #{num}\" if rows.empty?\n  addr = rows[0].gsub(\/.#{num}|<.*>|[!?$,:;\\\/\\*]\/, \"\").gsub(\/[ _]+\/, ' ').strip\n  \"Phone => #{num}, Name => #{rows[0][\/<(.*)>\/, 1]}, Address => #{addr}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46818,"user_id":null,"body":"def get_name(s)\n  s.match(\/<(.+)>\/).not_nil![1]\nend\n\ndef get_address(s,num,name)\n  s.sub(num,\"\").sub(name,\"\")\n  .gsub(\/[\\+\\<\\>;\\\/\\$\\*\\!\\?,:]\/,\"\")\n  .gsub(\/_\/,\" \")\n  .gsub(\/\\s+\/, \" \")\n  .strip\nend\n\ndef phone(strng, num)\n  find_num = strng.lines.select { |l| l.index(num) }\n  return \"Error => Not found: #{num}\" if find_num.size == 0\n  return \"Error => Too many people: #{num}\" if find_num.size > 1\n  name=get_name find_num.first\n  \"Phone => #{num}, Name => #{name}, Address => #{get_address(find_num.first,num,name)}\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46819,"user_id":null,"body":"def phone(strng, num)\n  return \"Error => Too many people: #{num}\" if strng.scan(num).size > 1\n  return \"Error => Not found: #{num}\" if strng.scan(num).size == 0\n  strng.split('\n').each do |l|\n    if l.scan(num).size == 1\n      m = l.match(\/<(.*)>\/).not_nil!\n      return \"Phone => #{num}, Name => #{m[1]}, Address => #{l.sub(num,\"\").sub(m[0],\"\").gsub(\/[^[:alnum:] .-]\/,\" \").gsub(\/\\s+\/,\" \").strip}\"\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46820,"user_id":863,"body":"ERROR_TOO_MANY = \"Error => Too many people: %s\"\nERROR_NOT_FOUND = \"Error => Not found: %s\"\nRESULT = \"Phone => %s, Name => %s, Address => %s\"\n\ndef phone(strng, num)\n  lines = strng.lines.grep(%r(#{num}))\n  case lines.size <=> 1\n  when -1\n    ERROR_NOT_FOUND % num\n  when 1\n    ERROR_TOO_MANY % num\n  when 0\n    RESULT % ({num} + extract_info(lines[0]))\n  end\nend\n\nNAME = \/<([\\w' ]+)>\/\nPHONE = \/\\d{1,2}-\\d{3}-\\d{3}-\\d{4}\/\nOTHER = \/[^a-zA-Z0-9. -]\/\ndef extract_info(line)\n  name = line.match(NAME).try &.[1]\n  address = line.gsub(NAME + PHONE, \"\").gsub(OTHER, \" \").strip.squeeze(' ')\n  {name, address}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56bc28ad5bdaeb48760009b0":[{"id":46821,"user_id":null,"body":"def remove_char(s)\n  s[1, s.size-2]\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46822,"user_id":527,"body":"def remove_char(s : String) : String\n  s[1...-1]\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46823,"user_id":null,"body":"def remove_char(s)\n  #your code here\n  s.delete_at(s.size - 1).delete_at 0\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46824,"user_id":527,"body":"def remove_char(s : String) : String\n  s[1..-2]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46825,"user_id":527,"body":"def remove_char(s)\n  s[1..-2]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46826,"user_id":421,"body":"def remove_char(s)\n  s[1...-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56bdd0aec5dc03d7780010a5":[{"id":46827,"user_id":421,"body":"def next_higher(n)\n  a = (n + 1).to_s(2)\n  n = n.to_s(2).count('1')  \n  while n != a.count('1')\n    a = (a.to_i(2) + 1).to_s(2)\n  end\n  a.to_i(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46828,"user_id":50,"body":"def next_higher(n)\n  s=popcount(n)\n  n+=1\n  while popcount(n)!=s\n    n+=1\n  end\n  n\nend\ndef popcount(n)\n  n.to_s(2).count('1')\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46829,"user_id":53,"body":"def next_higher(n)\n  return 0 if n == 0\n  r = n & -n\n  p = n + r\n  q = (n ^ p) \/ (4 * r)\n  p | q\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46830,"user_id":1474,"body":"def cnt_ones(n)\n  n.to_s(2).count('1')\nend\n\ndef next_higher(n)\n  cnt = cnt_ones(n)\n  cmp = ->(t : Int32) { cnt_ones(t) == cnt }\n  loop do\n    n += 1\n    return n if cmp.call(n)\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46831,"user_id":null,"body":"def next_higher(n)\n  f = n.popcount\n  while f != (n+1).popcount\n    n += 1\n  end\n  n+1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46832,"user_id":1624,"body":"def next_higher(n)\n  x = n+1\n  while x.popcount != n.popcount\n    x += 1\n  end\n  x\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46833,"user_id":null,"body":"def next_higher(n)\n  b = n.popcount\n  c = n + 1\n  loop do\n    break if b == c.popcount\n    c += 1\n  end\n  c\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46834,"user_id":null,"body":"def next_higher(n)\n  (\"%b\" % n).sub(\/(\\A|0)1(1*)(0*)\\z\/, \"10\\\\3\\\\2\").to_i(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46835,"user_id":645,"body":"def next_higher(n)\n  o = n & -n\n  v = n + o\n  p = (n ^ v) \/ o >> 2\n  n.zero? ? 0 : v | p\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56c30ad8585d9ab99b000c54":[{"id":46836,"user_id":null,"body":"def work_on_strings(a, b)\n  a_freqs = a.downcase.chars.tally\n  b_freqs = b.downcase.chars.tally\n  a.chars.map { |c| flip_case(c, b_freqs) }.join + b.chars.map { |c| flip_case(c, a_freqs) }.join\nend\n\ndef flip_case(c : Char, freqs : Hash(Char, Int32))\n  return c if freqs.fetch(c.downcase, 0).divisible_by? 2\n  return c.downcase if c.uppercase?\n  c.upcase\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46837,"user_id":null,"body":"def work_on_strings(a, b)\n  format(a, b) + format(b, a)\nend\n\ndef format(a, b)\n  hash = b.downcase.chars.tally.select!{ |_, v| v % 2 == 1 }.to_h{ |k,v| {k, k.upcase}}\n  hash.each { |k, v| hash[v] = k }\n  a.gsub(hash)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46838,"user_id":null,"body":"class String\n  def chars_with_odd_ct\n    chars.each_with_object({} of Char => Int32) { | c, h |\n      c = c.downcase\n      h[c] = 0 unless h.has_key?(c)\n      h[c] += 1 \n    }.select { | _, ct | ct % 2 == 1 }.keys.join\n  end\n  \n  def swapcase\n    chars.map { | c | c.lowercase? ? c.upcase : c.downcase }.join\n  end\nend\n\ndef work_on_strings(a, b)\n  acs = a.chars_with_odd_ct\n  acs += acs.upcase\n  bcs = b.chars_with_odd_ct\n  bcs += bcs.upcase\n  a.tr(bcs, bcs.swapcase) + b.tr(acs, acs.swapcase)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46839,"user_id":null,"body":"def work_on_strings(a, b)\n  proc = ->(s : String) { s.downcase.chars.group_by(&.itself).select{|c,a|a.size.odd?}.map{|c,a|c.to_s+c.upcase} }\n  au, bu = proc.call(a), proc.call b\n  a.tr(bu.join,bu.join.tr(('a'..'z').join+('A'..'Z').join,('A'..'Z').join+('a'..'z').join))+b.tr(au.join,au.join.tr(('a'..'z').join+('A'..'Z').join,('A'..'Z').join+('a'..'z').join))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46840,"user_id":645,"body":"def swapper(a, b)\n  cnt = b.downcase.chars.each_with_object(Hash(Char, Int32).new(0)) { |c, h| h[c] += 1 }\n  a.chars.join { |c| cnt[c.downcase].even? ? c : c == c.downcase ? c.upcase : c.downcase }\nend\n\ndef work_on_strings(a, b)\n  swapper(a, b) + swapper(b, a)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56c5847f27be2c3db20009c3":[{"id":46841,"user_id":645,"body":"def subtract_sum(n)\n  \"apple\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46842,"user_id":1474,"body":"FRUITS = [ nil, \"kiwi\", \"pear\", \"kiwi\", \"banana\", \"melon\", \"banana\", \"melon\", \"pineapple\",     \"apple\", \"pineapple\", \"cucumber\", \"pineapple\", \"cucumber\", \"orange\", \"grape    \", \"orange\", \"grape\", \"apple\", \"grape\", \"cherry\", \"pear\", \"cherry\", \"pear\",     \"kiwi\", \"banana\", \"kiwi\", \"apple\", \"melon\", \"banana\", \"melon\", \"pineapple\",     \"melon\", \"pineapple\", \"cucumber\", \"orange\", \"apple\", \"orange\", \"grape\", \"ora    nge\", \"grape\", \"cherry\", \"pear\", \"cherry\", \"pear\", \"apple\", \"pear\", \"kiwi\",     \"banana\", \"kiwi\", \"banana\", \"melon\", \"pineapple\", \"melon\", \"apple\", \"cucumbe    r\", \"pineapple\", \"cucumber\", \"orange\", \"cucumber\", \"orange\", \"grape\", \"cherr    y\", \"apple\", \"cherry\", \"pear\", \"cherry\", \"pear\", \"kiwi\", \"pear\", \"kiwi\", \"ba    nana\", \"apple\", \"banana\", \"melon\", \"pineapple\", \"melon\", \"pineapple\", \"cucum    ber\", \"pineapple\", \"cucumber\", \"apple\", \"grape\", \"orange\", \"grape\", \"cherry\"    , \"grape\", \"cherry\", \"pear\", \"cherry\", \"apple\", \"kiwi\", \"banana\", \"kiwi\", \"b    anana\", \"melon\", \"banana\", \"melon\", \"pineapple\", \"apple\", \"pineapple\" ]\n\ndef subtract_sum(n)\n  ret = tr(n)\n  while ret > 100\n    ret = tr(ret)\n  end\n  FRUITS[ret]\nend\n\ndef tr(n)\n  n - n.to_s.chars.reduce(0) { |s, c| s + c.to_i }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46843,"user_id":1624,"body":"def subtract_sum(n)\n  fruit = {\n    1 => \"kiwi\",\n    2 => \"pear\",\n    3 => \"kiwi\",\n    4 => \"banana\",\n    5 => \"melon\",\n    6 => \"banana\",\n    7 => \"melon\",\n    8 => \"pineapple\",\n    9 => \"apple\",\n    10 => \"pineapple\",\n    11 => \"cucumber\",\n    12 => \"pineapple\",\n    13 => \"cucumber\",\n    14 => \"orange\",\n    15 => \"grape\",\n    16 => \"orange\",\n    17 => \"grape\",\n    18 => \"apple\",\n    19 => \"grape\",\n    20 => \"cherry\",\n    21 => \"pear\",\n    22 => \"cherry\",\n    23 => \"pear\",\n    24 => \"kiwi\",\n    25 => \"banana\",\n    26 => \"kiwi\",\n    27 => \"apple\",\n    28 => \"melon\",\n    29 => \"banana\",\n    30 => \"melon\",\n    31 => \"pineapple\",\n    32 => \"melon\",\n    33 => \"pineapple\",\n    34 => \"cucumber\",\n    35 => \"orange\",\n    36 => \"apple\",\n    37 => \"orange\",\n    38 => \"grape\",\n    39 => \"orange\",\n    40 => \"grape\",\n    41 => \"cherry\",\n    42 => \"pear\",\n    43 => \"cherry\",\n    44 => \"pear\",\n    45 => \"apple\",\n    46 => \"pear\",\n    47 => \"kiwi\",\n    48 => \"banana\",\n    49 => \"kiwi\",\n    50 => \"banana\",\n    51 => \"melon\",\n    52 => \"pineapple\",\n    53 => \"melon\",\n    54 => \"apple\",\n    55 => \"cucumber\",\n    56 => \"pineapple\",\n    57 => \"cucumber\",\n    58 => \"orange\",\n    59 => \"cucumber\",\n    60 => \"orange\",\n    61 => \"grape\",\n    62 => \"cherry\",\n    63 => \"apple\",\n    64 => \"cherry\",\n    65 => \"pear\",\n    66 => \"cherry\",\n    67 => \"pear\",\n    68 => \"kiwi\",\n    69 => \"pear\",\n    70 => \"kiwi\",\n    71 => \"banana\",\n    72 => \"apple\",\n    73 => \"banana\",\n    74 => \"melon\",\n    75 => \"pineapple\",\n    76 => \"melon\",\n    77 => \"pineapple\",\n    78 => \"cucumber\",\n    79 => \"pineapple\",\n    80 => \"cucumber\",\n    81 => \"apple\",\n    82 => \"grape\",\n    83 => \"orange\",\n    84 => \"grape\",\n    85 => \"cherry\",\n    86 => \"grape\",\n    87 => \"cherry\",\n    88 => \"pear\",\n    89 => \"cherry\",\n    90 => \"apple\",\n    91 => \"kiwi\",\n    92 => \"banana\",\n    93 => \"kiwi\",\n    94 => \"banana\",\n    95 => \"melon\",\n    96 => \"banana\",\n    97 => \"melon\",\n    98 => \"pineapple\",\n    99 => \"apple\",\n    100 => \"pineapple\",\n  }\n \n  while true\n    sum = n.to_s.chars.map(&.to_i).sum\n    n -= sum\n    if n <= 100\n      return fruit[n]\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46844,"user_id":null,"body":"def subtract_sum(n)\n    return \"apple\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56cac350145912e68b0006f0":[{"id":46845,"user_id":492,"body":"def arrange(strng)\n    res = strng.split(\" \")    \n    0.upto(res.size - 2) { |i|\n      if ((i & 1 == 1) && (res[i].size < res[i + 1].size)) || ((i & 1 == 0) && (res[i].size > res[i + 1].size))\n        res[i], res[i + 1] = res[i + 1], res[i]\n      end\n    }\n  \ta = [] of String\n  \tres.each_with_index do |x, i|\n      if (i & 1 == 0)\n        a << x.downcase \n      else \n        a << x.upcase \n    end\n\tend\n    a.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46846,"user_id":492,"body":"def arrange(strng)\n    res = strng.split(\" \")    \n    0.upto(res.size - 2) { |i|\n      if ((i & 1 == 1) && (res[i].size < res[i + 1].size)) || ((i & 1 == 0) && (res[i].size > res[i + 1].size))\n        res[i], res[i + 1] = res[i + 1], res[i]\n      end\n    }\n  \ta = [] of String\n  \tres.each_with_index do |x, i|\n      if (i & 1 == 0)\n        a << x.downcase \n      else \n        a << x.upcase \n    end\n\tend\n    a.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46847,"user_id":421,"body":"def arrange(strng)\n  arr = strng.split\n  (1...arr.size).each do |i|\n    if i.odd? && arr[i].size < arr[i - 1].size || i.even? && arr[i].size > arr[i - 1].size \n      arr[i], arr[i - 1] = arr[i - 1], arr[i]   \n    end\n  end\n  arr.map_with_index{|x, i| i.odd? ? x.upcase : x.downcase}.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46848,"user_id":1474,"body":"def arrange(strng)\n  ar = strng.split\n  (1...ar.size).step(2) do |i|\n    ar[i-1], ar[i] = ar[i], ar[i-1] if ar[i-1].size > ar[i].size\n    ar[i+1], ar[i] = ar[i], ar[i + 1] if i+1 < ar.size && ar[i+1].size > ar[i].size\n  end\nar.map_with_index { |e, i| i.even? ? e.downcase : e.upcase }.join(' ')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56cd44e1aa4ac7879200010b":[{"id":46849,"user_id":null,"body":"def is_uppercase(str)\n  str.chars.each do |c|\n    if c.lowercase?\n      return false\n    end\n  end\n  \n  true\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46850,"user_id":53,"body":"def is_uppercase(s)\n  s.chars.select{|c|c.ascii_lowercase?}.size == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46851,"user_id":1624,"body":"def is_uppercase(str)\n  str == str.upcase\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46852,"user_id":null,"body":"def is_uppercase(s)\n    s.upcase == s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46853,"user_id":645,"body":"def is_uppercase(str)\n  str.upcase == str\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56d0a591c6c8b466ca00118b":[{"id":46854,"user_id":1474,"body":"def is_triangular(t) \n  n = Math.sqrt(2*t).to_i\n  (n..n+2).any? { |i| i * (i+1) \/ 2 == t }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46855,"user_id":53,"body":"def is_triangular(t) \n  Math.sqrt(8 * t + 1) % 1 == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46856,"user_id":421,"body":"def is_triangular(t) \n  ((t * 8 + 1) ** 0.5 % 1).zero?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56d3c1eb3323a88d0a000305":[{"id":46857,"user_id":421,"body":"def find_SuperMan(s)\n  \/(s[^s]+u[^u]+p[^p]+e[^e]+r[^r]+m[^m]+a[^a]+n[^n]*)|(n[^n]+a[^a]+m[^m]+r[^r]+e[^e]+p[^p]+u[^u]+s[^s]*)\/i === s ? \"Hi, SuperMan!\" : \"Are you crazy?\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46858,"user_id":null,"body":"LETTERS = \"Superman\".downcase.chars\nMISS = \"Are you crazy?\"\nHIT = \"Hi, SuperMan!\"\n\ndef find_SuperMan(s)\n  str = s.downcase.chars\n  indices = str.map{|c| LETTERS.index(c) }\n  [indices, indices.reverse].each do |arr|\n    start = arr.index(7) || arr.index(0)\n    next if !start\n    finish = arr.index(7, start + 1) || arr.index(0, start + 1)\n    next if !finish\n    chunk = arr[start..finish]\n    sum = arr[start..finish].select{|v| v != nil}.map(&.not_nil!).sum\n    next if sum != 28\n    valid = chunk.each_cons(2).to_a.all? {|pair| pair.any?{|v| v == nil}}\n    return HIT if valid\n  end\n  MISS\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46859,"user_id":50,"body":"def find_SuperMan(s)\n  \/s.+u.+p.+e.+r.+m.+a.+n|n.+a.+m.+r.+e.+p.+u.+s\/i.match(s) != nil ? \"Hi, SuperMan!\" : \"Are you crazy?\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46860,"user_id":2563,"body":"def find_SuperMan(s)\n  return \"Are you crazy?\" if s.match(\/superman\/i)\n  r = \/.*s[^u].*u[^p].*p[^e].*e[^r].*r[^m].*m[^a].*a[^n].*n.*\/i\n  s.match(r) || s.reverse.match(r) ? \"Hi, SuperMan!\" : \"Are you crazy?\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46861,"user_id":2986,"body":"def find_SuperMan(s)\n  s =~ \/s.+u.+p.+e.+r.+m.+a.+n|n.+a.+m.+r.+e.+p.+u.+s\/i ? \"Hi, SuperMan!\" : \"Are you crazy?\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56d8f14cba01a83cdb0002a2":[{"id":46862,"user_id":421,"body":"def get_positions(s)\n  {s % 3, s \/\/ 3 % 3, s \/\/ 9 % 3}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56dbe0e313c2f63be4000b25":[{"id":46863,"user_id":1828,"body":"def vert_mirror(strng)\n    strng.split(\"\n\").map{|i| i.reverse}.join(\"\n\")\nend\ndef hor_mirror(strng)\n    strng.split(\"\n\").reverse.join(\"\n\")\nend\ndef oper(s) \n    yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46864,"user_id":null,"body":"def vert_mirror(strng)\n    strng.lines.map(&.reverse).join \"\n\"\nend\ndef hor_mirror(strng)\n    strng.lines.reverse.join \"\n\"\nend\ndef oper(s) \n    yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46865,"user_id":492,"body":"def vert_mirror(strng)\n    strng.split(\"\n\").map { |x| x.reverse }.join(\"\n\")\nend\ndef hor_mirror(strng)\n    strng.split(\"\n\").reverse.join(\"\n\")\nend\ndef oper(s) \n    yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46866,"user_id":1474,"body":"def vert_mirror(strng)\n  strng.split.map(&.reverse).join('\n')\nend\n\ndef hor_mirror(strng)\n  strng.split.reverse.join('\n')\nend\n\ndef oper(s) \n    yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46867,"user_id":null,"body":"def vert_mirror(string)\n    string.split(\"\n\").map { | l | l.reverse }.join(\"\n\")\nend\n\ndef hor_mirror(string)\n    string.split(\"\n\").reverse.join(\"\n\")\nend\n\ndef oper(s) \n    yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46868,"user_id":863,"body":"def vert_mirror(strng)\n  strng.split.join(\"\n\", &.reverse)\nend\ndef hor_mirror(strng)\n  strng.split.reverse.join(\"\n\")\nend\ndef oper(s) \n  yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46869,"user_id":1624,"body":"def vert_mirror(s)\n  s.split(\"\n\").map(&.reverse).join(\"\n\")\nend\n\ndef hor_mirror(s)\n  s.split(\"\n\").reverse.join(\"\n\")\nend\n\ndef oper(s) \n  yield s\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46870,"user_id":null,"body":"def vert_mirror(str)\n    str.split.map(&.reverse).join(\"\n\")\nend\ndef hor_mirror(str)\n    str.split.reverse.join(\"\n\")\nend\ndef oper(s) \n    yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46871,"user_id":null,"body":"def vert_mirror(strng)\n  strng.split('\n').map(&.reverse).join('\n')\nend\ndef hor_mirror(strng)\n  strng.split('\n').reverse.join('\n')\nend\ndef oper(s) \n    yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46872,"user_id":null,"body":"def vert_mirror(str)\n  str.split(\"\n\").map(&.reverse).join(\"\n\")\nend\n\ndef hor_mirror(str)\n  str.split(\"\n\").reverse.join(\"\n\")\nend\n\ndef oper(s)\n  yield s\nend\n\ndef testing(actual, expected)\n  actual.should eq expected\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56dbe7f113c2f63570000b86":[{"id":46873,"user_id":421,"body":"def rot(strng)\n    strng.reverse\nend\ndef selfie_and_rot(strng)\n    strng.split(\"\n\").map{|x| x + \".\" * x.size}.join(\"\n\") + \"\n\" + rot(strng).split(\"\n\").map{|x| \".\" * x.size + x}.join(\"\n\")\nend\ndef oper(s) \n    yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46874,"user_id":492,"body":"def rot(strng)\n    strng.split(\"\n\").reverse.map{|i| i.reverse}.join(\"\n\")\nend\ndef selfie_and_rot(strng)\n    a = strng.split(\"\n\").map{|i| i + \".\" * i.size}.join(\"\n\")\n    a + \"\n\" + rot(a)\nend\ndef oper(s) \n    yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46875,"user_id":null,"body":"def rot(strng)\n  strng.reverse\nend\n\ndef selfie_and_rot(strng)\n  s = strng.split.map{|l| l + \".\"*l.size}.join(\"\n\")\n  s + \"\n\" + rot(s)\nend\n\ndef oper(s) \n  yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46876,"user_id":null,"body":"def rot(str)\n  str.split('\n').map(&.reverse).reverse.join('\n')\nend\ndef selfie_and_rot(str)\n    s = str.split('\n')[0].size\n    str.gsub('\n', \".\"*s+\"\n\")+\".\"*s+\"\n\"+\".\"*s+str.gsub('\n', \".\"*s+\"\n\").reverse\nend\ndef oper(s) \n    yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46877,"user_id":null,"body":"def rot(s)\n  s.lines.reverse.map { |x| x.reverse }.join(\"\n\")\nend\n\ndef selfie_and_rot(s)\n  l = s.lines\n  s1 = l.map { |x| \"#{x}#{\".\" * l.size}\" }\n  s2 = l.reverse.map { |x| \"#{\".\" * l.size}#{x.reverse}\" }\n  (s1 + s2).join(\"\n\")\nend\n\ndef oper(s)\n  yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46878,"user_id":863,"body":"def rot(strng)\n    strng.split.reverse.join(\"\n\", &.reverse)\nend\ndef selfie_and_rot(strng)\n    s = \".\" * (strng.count(\"\n\") + 1)\n    strng.gsub(\/$\/m, s) + \"\n\" + rot(strng).gsub(\/^\/m, s)\nend\ndef oper(s) \n    yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46879,"user_id":863,"body":"def rot(strng)\n    strng.split.reverse.join(\"\n\", &.reverse)\nend\ndef selfie_and_rot(strng)\n    strng.index(\"\n\").try do |i|\n        s = \".\" * i\n        strng.gsub(\/$\/m, s) + \"\n\" + rot(strng).gsub(\/^\/m, s)\n    end\nend\ndef oper(s) \n    yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46880,"user_id":null,"body":"def rot(strng)\n    strng.split('\n').reverse.map(&.reverse).join('\n')\nend\ndef selfie_and_rot(strng)\n    n = strng.split('\n').size\n    strng.split('\n').map(&.+ \".\" * n + \"\n\").join + rot(strng).split('\n').map { |l| \".\" * n + l }.join('\n')\nend\ndef oper(s) \n    yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46881,"user_id":492,"body":"def vert_mirror(strng)\n    strng.split(\"\n\").map { |x| x.reverse }.join(\"\n\")\nend\ndef hor_mirror(strng)\n    strng.split(\"\n\").reverse.join(\"\n\")\nend\ndef rot(strng)\n    vert_mirror(hor_mirror(strng))\nend\ndef repeat(n, s)\n  res = \"\"; i = 0\n  while (i < n)\n    res += s\n    i += 1\n  end\n  res\nend\ndef selfie_and_rot(strng)\n    newstr1 = strng.split(\"\n\").map { |x| x + repeat(x.size, '.') }.join(\"\n\")\n    newstr2 = rot(strng).split(\"\n\").map { |x| repeat(x.size, '.') + x }.join(\"\n\")\n    newstr1 + \"\n\" + newstr2\nend\ndef oper(s) \n  yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56dbeec613c2f63be4000be6":[{"id":46882,"user_id":421,"body":"def diag_1_sym(strng)\n    strng = strng.split(\"\n\")\n    strng[0].chars.map_with_index{|x, i| strng.map_with_index{|y, j| strng[j][i]}.join}.join(\"\n\")\nend\n\ndef rot_90_clock(strng)\n    diag_1_sym(strng).split(\"\n\").map(&.reverse).join(\"\n\")\nend\n\ndef selfie_and_diag1(strng)\n    arr = diag_1_sym(strng).split(\"\n\")\n    strng.split(\"\n\").map_with_index{|x, i| \"#{x}|#{arr[i]}\"}.join(\"\n\")\nend\n\ndef oper(s) \n  yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46883,"user_id":1828,"body":"def transp(i)\n  i.map{|i| i.chars}.transpose.map{|i| i.join}\nend\ndef diag_1_sym(strng)\n  transp(strng.split(\"\n\")).join(\"\n\")\nend\ndef rot_90_clock(strng)\n  transp(strng.split(\"\n\").reverse).join(\"\n\")\nend\ndef selfie_and_diag1(strng)\n  strng.split(\"\n\").zip(diag_1_sym(strng).split(\"\n\")).map{|i| i.join(\"|\")}.join(\"\n\")\nend\ndef oper(s) \n  yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46884,"user_id":492,"body":"def diag_1_sym(s)\n    s.split(\"\n\").map { |x| x.split(\"\") }.transpose.map { |x| x.join(\"\") }.join(\"\n\")\nend\ndef rot_90_clock(strng)\n    strng.split(\"\n\").reverse.map { |x| x.split(\"\") }.transpose.map { |x| x.join(\"\") }.join(\"\n\")\nend\ndef selfie_and_diag1(strng)\n  strng.split(\"\n\").zip(diag_1_sym(strng).split(\"\n\")).map { |p| p.join('|') }.join(\"\n\")\nend\ndef oper(s) \n  yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46885,"user_id":1474,"body":"class SqString\n  def initialize(@strng : String)\n    @arr = [] of String\n    @arr = @strng.split('\n')\n    @rows, @cols = 0, 0\n    @rows, @cols = @arr.size, @arr[0].size\n  end\n  \n  def diag_1_sym\n    (0...@cols).map { |j| (0...@rows).map { |i| @arr[i][j] }.join }\n  end\n  \n  def rot_90_clock\n    diag_1_sym.map(&.reverse)\n  end\n  \n  def selfie_and_diag1\n    @arr.zip(diag_1_sym).map { |a| a.join('|') }\n  end\nend\n\ndef diag_1_sym(strng)\n  SqString.new(strng).diag_1_sym.join('\n')\nend\n\ndef rot_90_clock(strng)\n  SqString.new(strng).rot_90_clock.join('\n')\nend\n\ndef selfie_and_diag1(strng)\n  SqString.new(strng).selfie_and_diag1.join('\n')\nend\n\ndef oper(s) \n  yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46886,"user_id":null,"body":"def diag_1_sym(strng)\n  s = strng.split\n  (0...s.size).map {|i| s.map {|m| m[i]}.join}.join \"\n\"\nend\ndef rot_90_clock(strng)\n  diag_1_sym(strng).split.map {|s| s.reverse}.join \"\n\"\nend\ndef selfie_and_diag1(strng)\n  s = strng.split\n  d = diag_1_sym(strng).split\n  (0...s.size).map {|i| \"#{s[i]}|#{d[i]}\"}.join \"\n\"\nend\ndef oper(s) \n  yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46887,"user_id":null,"body":"def diag_1_sym(strng)\n  strng.split('\n').map{|s| s.split(\/\/)}.transpose.map(&.join).join('\n')\nend\ndef rot_90_clock(strng)\n  diag_1_sym(strng).split('\n').map(&.reverse).join('\n')\nend\ndef selfie_and_diag1(strng)\n  d = diag_1_sym(strng).split('\n')\n  strng.split('\n').map_with_index{|s,i|s+\"|\"+d[i]}.join('\n')\nend\ndef oper(s) \n  yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46888,"user_id":null,"body":"def diag_1_sym(strng)\n  diag_0_sym(strng).join '\n'\nend\n\ndef rot_90_clock(strng)\n  diag_0_sym(strng).map(&.reverse).join '\n'\nend\n\ndef selfie_and_diag1(strng)\n  strng.each_line.zip(diag_0_sym(strng)).map(&.join('|')).join '\n'\nend\n\ndef oper(s)\n  yield s\nend\n\ndef diag_0_sym(strng)\n  strng.each_line.map(&.chars).to_a.transpose.each.map(&.join)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56dbf59b0a10feb08c000227":[{"id":46889,"user_id":421,"body":"def rot_90_counter(strng)\n  arr = strng.split(\"\n\").map(&.reverse)\n  arr[0].chars.map_with_index{|x, i| arr.map_with_index{|y, j| arr[j][i]}.join}.join(\"\n\")\nend\n\ndef diag_2_sym(strng)\n    rot_90_counter(strng).split(\"\n\").map(&.reverse).join(\"\n\")\nend\n\ndef selfie_diag2_counterclock(strng)\n  arr1 = diag_2_sym(strng).split(\"\n\")\n  arr2 = rot_90_counter(strng).split(\"\n\")\n  strng.split(\"\n\").map_with_index{|x, i| [x, arr1[i], arr2[i]].join(\"|\")}.join(\"\n\")\nend\n\ndef oper(s) \n  yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46890,"user_id":209,"body":"def rot_90_counter(c)\n    c.split(\"\n\").map{|x| x.split(\"\")}.transpose.reverse.map{|x| x.join(\"\")}.join(\"\n\")\nend\n  \ndef diag_2_sym(c)\n    rot_90_counter(c).split(\"\n\").map{|x| x.reverse}.join(\"\n\")\nend\n\ndef selfie_diag2_counterclock(c)\n    [c, diag_2_sym(c), rot_90_counter(c)].map{|x| x.split(\"\n\")}.transpose.map { |e| e.join(\"|\")}.join(\"\n\")\nend\n\ndef oper(s)\n    yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46891,"user_id":null,"body":"def diag_2_sym(strng)\n  strng.split('\n').map{|s|s.split(\/\/).reverse}.transpose.map(&.join.reverse).join('\n')\nend\ndef rot_90_counter(strng)\n  diag_2_sym(strng).split('\n').map(&.reverse).join('\n')\nend\ndef selfie_diag2_counterclock(strng)\n  strng.split('\n').zip(diag_2_sym(strng).split('\n'),rot_90_counter(strng).split('\n')).map{|a|a.join('|')}.join('\n')\nend\ndef oper(s) \n  yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46892,"user_id":1828,"body":"def kit(i)\n  i.split(\"\n\").map{|i| i.chars}.transpose.map{|i| i.join}\nend\ndef diag_2_sym(strng)\n  kit(strng.reverse).join(\"\n\")\nend\ndef rot_90_counter(strng)\n  kit(strng).reverse.join(\"\n\")\nend\ndef diag2_counterclock(a,b)\n  a.split(\"\n\").zip(b.split(\"\n\")).map{|i| i.join(\"|\")}  \nend\ndef selfie_diag2_counterclock(strng)\n  strng.split(\"\n\").zip(diag2_counterclock(diag_2_sym(strng),rot_90_counter(strng))).map{|i| i.join(\"|\")}.join(\"\n\")\nend\ndef oper(s) \n  yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46893,"user_id":492,"body":"def diag_2_sym(strng)\n    rot_90_counter(strng).split(\"\n\").map { |x| x.reverse }.join(\"\n\")\nend\ndef rot_90_counter(strng)\n    strng.split(\"\n\").map { |x| x.reverse }.map { |x| x.split(\"\") }.transpose.map { |x| x.join(\"\") }.join(\"\n\")\nend\ndef selfie_diag2_counterclock(string)\n    str = string.split(\"\n\")\n    set = [ ] of String\n    str1 = diag_2_sym(string).split(\"\n\")\n    str2 = rot_90_counter(string).split(\"\n\")\n    n = 0 \n    while n < str.size \n        set1 = [ ] of String\n        set1 << \"#{str[n]}|\" << \"#{str1[n]}|\" << \"#{str2[n]}\"\n        n += 1 \n        set << set1.join \n   end\n   return \"#{ set.join(\"\n\")}\"\nend\ndef oper(s) \n  yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46894,"user_id":492,"body":"def diag_2_sym(strng)\n    rot_90_counter(strng).split(\"\n\").map { |x| x.reverse }.join(\"\n\")\nend\ndef rot_90_counter(strng)\n    strng.split(\"\n\").map { |x| x.reverse }.map { |x| x.split(\"\") }.transpose.map { |x| x.join(\"\") }.join(\"\n\")\nend\ndef selfie_diag2_counterclock(string)\n    str = string.split(\"\n\")\n    set = [ ] of String\n    str1 = diag_2_sym(string).split(\"\n\")\n    str2 = rot_90_counter(string).split(\"\n\")\n    n = 0 \n    while n < str.size \n        set1 = [ ] of String\n        set1 << \"#{str[n]}|\" << \"#{str1[n]}|\" << \"#{str2[n]}\"\n        n += 1 \n        set << set1.join \n   end\n   return \"#{ set.join(\"\n\")}\"\nend\ndef oper(s) \n  yield s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56dec885c54a926dcd001095":[{"id":46895,"user_id":null,"body":"def opposite(n)\n  return -n\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46896,"user_id":1072,"body":"def opposite(n) -n end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46897,"user_id":390,"body":"def opposite(n)\n  return 0-n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46898,"user_id":null,"body":"def opposite(n)\n  return -n #your code here\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46899,"user_id":null,"body":"def opposite(n)\n  n = n * -1; #your code here\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46900,"user_id":null,"body":"def opposite(n)\n  #your code here\n  return -n;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46901,"user_id":null,"body":"def opposite(n)\n  0 - n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46902,"user_id":null,"body":"def opposite(n)\n  return -1*n;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46903,"user_id":408,"body":"def opposite(n)\n  -1 * n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46904,"user_id":null,"body":"def opposite (a)\n  -a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56e3cd1d93c3d940e50006a4":[{"id":46905,"user_id":492,"body":"def make_valley(arr)\n  a = arr.sort.reverse; l = [] of Int32; r = [] of Int32\n  a.each_with_index do |v,i|\n    if i.even?\n      l << v\n    else\n      r << v\n    end\n  end\n  [l, r.reverse].flatten  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46906,"user_id":527,"body":"def make_valley(xs)\n  xs = xs.sort\n  xs.reverse_each.chain(xs.each).step(2).to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46907,"user_id":421,"body":"def make_valley(arr)\n  arr.sort!.reverse!\n  odds = [] of Int32\n  evens = [] of Int32\n  arr.each_with_index do |x, i|\n    evens << x if i.even?\n    odds << x if i.odd?\n  end\n  evens + odds.reverse!  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46908,"user_id":53,"body":"def make_valley(arr)\n  xs = arr.sort{|a,b|a<=>b}\n  ys = arr.map{|_|0}\n  n = xs.size\n  j = n >> 1\n  dx = n%2 == 0 ? -1 : 1\n  (0...n).each{|i|\n    ys[j] = xs[i]\n    j+=dx\n    dx*=-1\n    dx+=dx>0 ? 1 : -1\n  }\n  ys\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46909,"user_id":null,"body":"def make_valley(arr)\n  l, r = arr.sort! { |a, b| b <=> a }.each_with_index.partition { |e, i| i % 2 == 0 }\n  l = l.map &.[0]\n  r = r.map &.[0]\n  l + r.reverse\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46910,"user_id":null,"body":"def make_valley(arr)\n  l, r = arr.sort.reverse.each_with_index.partition { |e, i| i % 2 == 0 }\n  l = l.map &.[0]\n  r = r.map &.[0]\n  l + r.reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46911,"user_id":null,"body":"def make_valley(arr)\n  result = [] of Int32\n  arr = arr.sort\n  if arr.size % 2 == 1\n    result << arr[0]\n    arr = arr[1..]\n  end\n  arr.each_with_index do |x, i|\n    if i % 2 == 0\n      result << x\n    else\n      result.unshift(x)\n    end\n  end\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46912,"user_id":1474,"body":"def make_valley(arr)\n  return arr if arr.size < 2\n  ar = arr.sort\n  st = ar.size.even? ? :l : :r\n  ret = [ar.shift]\n  until ar.empty?\n    st == :l ? ret.unshift(ar.shift) : ret << ar.shift\n    st = st == :l ? :r : :l\n  end\n  ret\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46913,"user_id":null,"body":"def make_valley(arr)\n  arr.sort!.reverse!\n  l, r = Array(Int32).new, Array(Int32).new\n  until arr.size <= 1\n    l << arr.first\n    arr.shift\n    r << arr.first\n    arr.shift\n  end\n  return l + arr + r.reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46914,"user_id":null,"body":"def make_valley(arr)\n  res = [] of Int32\n  a = arr.sort\n  (1..arr.size).each do |x|\n    res << a[x-1] if x.odd?\n    res.insert(0, a[x-1]) if x.even?\n  end\n  return res.reverse if arr.size.odd?\n  res\nend\n\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56e56756404bb1c950000992":[{"id":46915,"user_id":1474,"body":"def sum_differences_between_products_and_LCMs(pairs)\n  pairs.sum { |(a, b)| b == 0 ? a : a * b - a.lcm(b) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46916,"user_id":53,"body":"def gcd(a, b)\n  b == 0 ? a : gcd(b, a % b)\nend\n\ndef sum_differences_between_products_and_LCMs(pairs)\n  pairs.map{|p|p[0]*(p[1]-(p[1] == 0 ? 0 : p[1]\/gcd(p[0],p[1])))}.sum.round \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46917,"user_id":1072,"body":"def gcd(a,b) b==0 ? [a, 1].max : gcd(b,a%b) end\ndef sum_differences_between_products_and_LCMs(pairs) pairs.map{|a| a[0]*a[1]*(1-1\/gcd(a[0],a[1]))}.reduce(0){|a,b| a+b}.round end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56e7d40129035aed6c000632":[{"id":46918,"user_id":1828,"body":"def easyline(n : UInt64)\n  l = [1_u64] of UInt64\n  (1..n).to_a.each do |k|\n    l.push((n-k+1)*l.last\/k)\n  end\n  return l.map{|i| i**2}.sum\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46919,"user_id":492,"body":"def easyline(n : UInt64)\n  n == 0_u64 ? 1_u64 : easyline(n-1)*(4*n-2)\/n\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46920,"user_id":1072,"body":"def easyline(n : UInt64) (1_u64..n).to_a.reverse.reduce(1_u64){|a,b| a*(b+n)\/(n-b+1_u64)} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46921,"user_id":53,"body":"require \"big\"\n\ndef factorial(n : BigFloat)\n  n == 0 ? 1 : n * factorial(n - 1)\nend\n\ndef binom(n : BigFloat, k : BigFloat)\n  factorial(n) \/ (factorial(n - k) * (factorial k))\nend\n\ndef easyline(n : UInt64)\n  ans = 0.to_big_f\n  m = n.to_big_f\n  i = 0.to_big_f\n  while i <= m\n    ans += binom(m, i) ** 2\n    i += 1\n  end\n  ans\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46922,"user_id":null,"body":"require \"big\"\n\ndef easyline(n : UInt64)\n  (factorial(n * 2) \/\/ factorial(n)**2).to_u64\nend\n\ndef factorial(n)\n  (2..n).reduce(BigInt.new(1)) { |acc, i| acc * i }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46923,"user_id":1474,"body":"def easyline(n : UInt64)\n  n == 0 ? 1 : easyline(n - 1) * (4 * n - 2)\/n\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46924,"user_id":1624,"body":"def easyline(n : UInt64)\n  line = [1_u64]\n  n.times do\n    line = ([0_u64]+line).zip(line+[0_u64]).map(&.sum)\n  end\n  line.map{|x| x*x}.sum\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46925,"user_id":527,"body":"def easyline(n : UInt64)\n  (1_u64..n).reduce(1_u64){ |a, i| a * (n + i) \/ i }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56e9e4f516bcaa8d4f001763":[{"id":46926,"user_id":1246,"body":"def show_sequence(n : Int32) : String\n  return \"#{n}<0\" if n < 0\n  return \"0=0\" if n == 0\n  return (0..n).join('+')+\" = \"+(0..n).reduce{|a,b|a+b}.to_s\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46927,"user_id":1072,"body":"class SequenceSum def self.show_sequence(n : Int32) : String n>0 ? \"#{(0..n).join(\"+\")} = #{n*(n+1)\/2}\" : n<0 ? \"#{n}<0\" : \"0=0\" end end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46928,"user_id":1474,"body":"class SequenceSum\n  def self.show_sequence(n : Int32) : String\n    return \"#{n}<0\" if n < 0\n    return \"0=0\" if n == 0\n    \"#{(0..n).join('+')} = #{n * (n+1) \/\/ 2}\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46929,"user_id":null,"body":"class SequenceSum\n  def self.show_sequence(n : Int32) : String\n    if n < 0\n      return \"#{n}<0\"\n    elsif n == 0\n      return \"0=0\"\n    else n > 0\n      \"#{(0..n).to_a.join('+')} = #{(0..n).sum}\"\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46930,"user_id":53,"body":"class SequenceSum\n  def self.show_sequence(n : Int32) : String\n    return n.to_s + \"<0\" if n < 0\n    return \"0=0\" if n == 0\n    s = \"0\"\n    (1..n).each{|i|\n      s = s + \"+\" + i.to_s\n    }\n    s = s + \" = \" + ((n * (n + 1) \/ 2)).to_i.to_s\n    s\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46931,"user_id":421,"body":"class SequenceSum\n  def self.show_sequence(n : Int32) : String\n     n < 0 ? \"#{n}<0\" : n.zero? ? \"0=0\" : \"#{(0..n).to_a.join('+')} = #{(0..n).sum}\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46932,"user_id":null,"body":"class SequenceSum\n  def self.show_sequence(n : Int32) : String\n    return \"#{n}<0\" if n < 0\n    return \"0=0\" if n == 0\n    \"#{(0..n).map(&.to_s).join('+')} = #{n * (n + 1) \/ 2}\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46933,"user_id":null,"body":"class SequenceSum\n  def self.show_sequence(n : Int32) : String\n    return \"#{n}<0\" if n < 0\n    return \"0=0\" if n == 0\n    \"#{(0..n).join('+')} = #{(0..n).sum}\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46934,"user_id":null,"body":"class SequenceSum\n  def self.show_sequence(n : Int32) : String\n    return \"0=0\" if n == 0\n    return \"#{n}<0\" if n < 0\n    arr = (0..n).to_a\n    \"#{arr.join(\"+\")} = #{arr.sum}\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46935,"user_id":null,"body":"class SequenceSum\n  def self.show_sequence(n : Int32) : String\n    case n\n    when .< 0\n      return \"#{n}<0\"\n    when 0\n      return \"0=0\"\n    else\n      str = \"\"\n      sum = 0\n      n.times do |x|\n        sum += x + 1\n        str += x.to_s\n        case x\n        when n - 1\n          str += \"+#{n} = #{sum}\"\n        else\n          str += \"+\"\n        end\n      end\n      str\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56ed20a2c4e5d69155000301":[{"id":46936,"user_id":421,"body":"def scale(strng, k, n)\n   strng.empty? ? \"\" : strng.split(\"\n\").map{|x| (x.gsub(\/.\/){|y| y * k} + \"\n\") * n}.join.gsub(\/\n\\z\/, \"\")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46937,"user_id":492,"body":"def scale(strng, k, n)\n  strng.lines.map{|l| l.chomp.gsub(\/.\/){|c| c*k}}.map{|l| [l]*n}.flatten.join(\"\n\")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46938,"user_id":null,"body":"def scale(strng, k, n)\n  strng.gsub(\/(.)\/,\"\\\\1\"*k).gsub(\/(.+)\/,([\"\\\\1\"]*n).join(\"\n\"))\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46939,"user_id":53,"body":"def scale(strng, h, v)\n  (strng + \"\n\")\n    .gsub(\/[^\n]\/, \"\\\\0\" * h)\n    .gsub(\/[^\n]+\n\/, \"\\\\0\" * v)[0..-2]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46940,"user_id":1474,"body":"def scale(strng, k, n)\n  strng.empty? ? strng : strng.split.map { |s| ([s.chars.map { |c| c.to_s * k }.join] * n).join('\n') }.join('\n')\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46941,"user_id":1624,"body":"def scale(s, k, n)\n  return \"\" if s.empty?\n  (s+\"\n\")\n    .gsub(\/(.)\/) { $1 * k }\n    .gsub(\/(.*\n)\/) { $1 * n }\n    .chomp\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46942,"user_id":null,"body":"def scale(s, k, n)\n  return \"\" if s == \"\"\n  arr = s.split(\"\n\")\n  res = \"\"\n  arr.size.times do |x|\n    res += (arr[x].chars.map { |c| c.to_s * k }.join + \"\n\") * n\n  end\n  res.rchop\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46943,"user_id":1828,"body":"def scale(strng, k, n)\n  return \"\" if strng.empty?\n  strng.split(\"\n\").map{|i| Array.new(n, i.gsub(\/([a-z])\/i){$1*k}).join(\"\n\")}.join(\"\n\")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46944,"user_id":null,"body":"def scale(strng, k, n)\n  (\"\n\"+strng).gsub(\/(.)\/,\"\\\\1\"*k).gsub(\/(\n.+)\/,\"\\\\1\"*n)[1..-1]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56efab15740d301ab40002ee":[{"id":46945,"user_id":492,"body":"def gcdi (x : Int32, y : Int32) \n    x = x.abs; y = y.abs\n    while (y != 0)\n        x, y = y, x % y\n    end\n    x\nend\ndef lcmu(a : Int32, b : Int32)\n    (a * b).abs \/ gcdi(a, b)\nend\ndef som(a : Int32, b : Int32) \n    a + b\nend\ndef maxi(a : Int32, b : Int32) \n    [a, b].max\nend\ndef mini(a : Int32, b : Int32)\n    [a, b].min\nend\n\ndef oper_array(fct, arr, init) \n    arr.map { |x| init = fct.call(init, x) }\nend\n\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46946,"user_id":421,"body":"def gcdi (x : Int32, y : Int32) \n  x.gcd(y)\nend\ndef lcmu(a : Int32, b : Int32)\n  a.lcm(b)\nend\ndef som(a : Int32, b : Int32) \n  a + b\nend\ndef maxi(a : Int32, b : Int32) \n  [a, b].max\nend\ndef mini(a : Int32, b : Int32)\n  [a, b].min\nend\ndef oper_array(fct, arr, init) \n  lst = [] of Int32\n  arr.each do |x|\n    init = fct.call(x, init)\n    lst << init\n  end\n  lst\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46947,"user_id":53,"body":"def gcdi (a : Int32, b : Int32) \n    b == 0 ? a.abs : gcdi(b, a % b)\nend\ndef lcmu(a : Int32, b : Int32)\n    (a * b).abs \/ gcdi(a, b)\nend\ndef som(a : Int32, b : Int32) \n    a + b\nend\ndef maxi(a : Int32, b : Int32) \n    [a, b].max\nend\ndef mini(a : Int32, b : Int32)\n    [a, b].min\nend\n\ndef oper_array(fn, xs, seed) \n    acc = seed\n    i = 0\n    l = xs.size\n    ys = [] of Int32\n    while i < l\n        acc = fn.call(acc, xs[i])\n        ys << acc\n        i += 1\n    end\n    ys\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46948,"user_id":null,"body":"def gcdi (x : Int32, y : Int32) \n    return gcdi(-x, y) if x < 0\n    return gcdi(x, -y) if y < 0\n    return gcdi(y, x) if x < y\n    return x if y == 0\n    gcdi(y, x % y)\nend\n\ndef lcmu(a : Int32, b : Int32)\n    return 0 if a * b == 0\n    (a * b).abs \/ gcdi(a, b)\nend\ndef som(a : Int32, b : Int32) \n    a + b\nend\ndef maxi(a : Int32, b : Int32) \n    a > b ? a : b\nend\ndef mini(a : Int32, b : Int32)\n    a > b ? b : a\nend\n\ndef oper_array(fct, arr, init) \n    a = init\n    arr.map { | b | a = fct.call(a, b) } \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46949,"user_id":null,"body":"def gcdi(a : Int32, b : Int32)\n  a = a.abs\n  b = b.abs\n  return a if a == b\n  return b if a == 0\n  return a if b == 0\n\n  if a % 2 == 0\n    return gcdi(a >> 1, b) if b % 2 == 1\n    return gcdi(a >> 1, b >> 1) << 1\n  end\n\n  return gcdi(a, b >> 1) if b % 2 == 0\n\n  return gcdi((a - b) >> 1, b) if a > b\n\n  return gcdi((b - a) >> 1, a)\nend\n\ndef lcmu(a : Int32, b : Int32)\n\ta = a.abs\n  b = b.abs\n\t((a * b) \/ gcdi(a, b)).to_i\nend\n\ndef som(a : Int32, b : Int32)\n  a + b\nend\n\ndef maxi(a : Int32, b : Int32)\n  a < b ? b : a\nend\n\ndef mini(a : Int32, b : Int32)\n  a < b ? a : b\nend\n\ndef oper_array(fct, arr, init)\n  arr.map { |i| init = fct.call(init, i) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46950,"user_id":null,"body":"def gcdi (x : Int32, y : Int32) \n    x % y == 0 ? y.abs : gcdi(y, x % y)\nend\ndef lcmu(a : Int32, b : Int32)\n    (a * b).abs\/gcdi(a, b)\nend\ndef som(a : Int32, b : Int32) \n    a + b\nend\ndef maxi(a : Int32, b : Int32) \n    a > b ? a : b\nend\ndef mini(a : Int32, b : Int32)\n    a < b ? a : b\nend\n\ndef oper_array(fct, arr, init) \n   arr.map { |y| init = fct.call(init, y) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46951,"user_id":1246,"body":"def gcdi (x : Int32, y : Int32) \n    x.abs.gcd(y.abs)\nend\ndef lcmu(a : Int32, b : Int32)\n    a.abs.lcm(b.abs)\nend\ndef som(a : Int32, b : Int32) \n    a+b\nend\ndef maxi(a : Int32, b : Int32) \n    [a,b].max\nend\ndef mini(a : Int32, b : Int32)\n    [a,b].min\nend\n\ndef oper_array(fct, arr, init)\n    prec = init\n    arr.map{|b|prec = fct.call(prec,b)}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56efc695740d30f963000557":[{"id":46952,"user_id":53,"body":"def to_alternating_case(str)\n  str.chars.map { |c| c.ascii_letter? ? (c.ord ^ 0x20).chr : c }.join(\"\")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46953,"user_id":527,"body":"class String\n  private UPPER = ('A'..'Z').join\n  private LOWER = ('a'..'z').join\n  def to_alternating_case\n    self.tr(UPPER + LOWER, LOWER + UPPER)\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46954,"user_id":1474,"body":"class String\n  def to_alternating_case\n    self.chars.map { |c| c >= 'a' && c <= 'z' ? c.upcase : c >= 'A' && c <= 'Z' ? c.downcase : c }.join\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46955,"user_id":null,"body":"class String\n  def to_alternating_case\n    new_str = \"\"\n    \n    self.chars.each do |c|\n      if c.lowercase?\n        new_str += c.upcase\n      elsif c.uppercase?\n        new_str += c.downcase\n      else\n        new_str += c\n      end\n    end\n    \n    new_str\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46956,"user_id":50,"body":"class String\n  def to_alternating_case\n    self.chars.map{|c| c==c.downcase ? c.upcase : c.downcase}.join\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46957,"user_id":null,"body":"class String\n  def to_alternating_case\n    chars.map { |c| c.ascii_uppercase? ? c.downcase : c.upcase }.join\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46958,"user_id":null,"body":"class String\n  def to_alternating_case\n    s = \"\"\n    self.each_char do |c|\n      if c.lowercase?\n        s += c.upcase\n      elsif c.uppercase?\n        s += c.downcase\n      else\n        s += c\n      end\n    end\n    s\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46959,"user_id":null,"body":"class String\n  def to_alternating_case\n    self.chars.map { |c| c.lowercase? ? c.upcase : c.downcase }.join\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46960,"user_id":1768,"body":"class String\n  def to_alternating_case\n    self.split(\"\").map{|i| i == i.upcase ? i.downcase : i.upcase}.join\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46961,"user_id":null,"body":"class String\n  def to_alternating_case\n    self.chars.map{ |c| c.uppercase? ? c.downcase : c.upcase }.join\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56f173a35b91399a05000cb7":[{"id":46962,"user_id":421,"body":"def find_longest(string)\n  string.split.max_of(&.size)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46963,"user_id":50,"body":"def find_longest(string)\n  string.split.map{|x| x.size}.max\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46964,"user_id":null,"body":"def find_longest(str)\n  spl = str.split(\" \")\n  longest = 0\n  i = 0\n  while (i < spl.size)\n    if (spl[i].size > longest) \n      longest = spl[i].size\n    end\n  i += 1\n  end\n  return longest\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46965,"user_id":null,"body":"def find_longest(string)\n  string.split(\" \").sort_by(&.size)[-1].size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46966,"user_id":null,"body":"def find_longest(string)\n  string.split.map(&.size).max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46967,"user_id":53,"body":"def find_longest(str)\n  str.split(\" \").map { |s| s.size }.max()\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56f253dd75e340ff670002ac":[{"id":46968,"user_id":421,"body":"def compose(s1, s2)\n  arr = s1.split(\"\n\")\n  arr2 = s2.split(\"\n\")\n  arr.map_with_index{|x, i| x[0..i] + arr2[-i - 1][0..-i - 1]}.join(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46969,"user_id":1828,"body":"def compose(s1, s2)\n  s1,s2 = [s1,s2].map{|i| i.split(\"\n\").to_a}\n  c = s1.zip(s2.reverse)\n  (0...s1.size).to_a.map{|i| (c[i][0][0..i]+c[i][1])[0..c[i][0].size]}.join(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46970,"user_id":null,"body":"def compose(s1, s2)\n  first, second = [s1, s2].map { |str| str.split(\"\n\") }\n  first.zip(second.reverse)\n    .map_with_index { |lines, index| lines.first[0..index] + lines.last[0..-(index + 1)] }\n    .join(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46971,"user_id":492,"body":"def compose(s1, s2)\n  s3, s4 = s1.split, s2.split\n  (0...s3.size).map{ |i| s3[i][0..i] + s4[-(i + 1)][0..-(i + 1)] }.join(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46972,"user_id":492,"body":"def compose(s1, s2)\n  s3, s4 = s1.split, s2.split\n  (0...s3.size).map{ |i| s3[i][0..i] + s4[-(i + 1)][0..-(i + 1)] }.join(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46973,"user_id":1474,"body":"def compose(s1, s2)\n  s3, s4 = [s1, s2].map(&.split)\n  (0...s3.size).map { |i| s3[i][0..i] + s4[-(i+1)][0..-(i+1)] }.join('\n')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46974,"user_id":null,"body":"def compose(s1, s2)\n  count = 0\n  res = [] of String\n  arr1 = s1.split(\"\n\")\n  arr2 = s2.split(\"\n\").reverse\n  arr1.size.times do |x|\n    res << arr1[x][0..count] + arr2[x][0..-count - 1]\n    count += 1\n  end\n  res.join(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46975,"user_id":1750,"body":"def compose(s1, s2)\n  s2_reversed = s2.lines.reverse\n  \n  s1\n    .lines\n    .each_with_index\n    .reduce([] of String) do |acc, (each, index)| \n    acc << (each[0..index] + s2_reversed[index][0..each.size - index - 1])\n    end\n    .join(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56f3a1e899b386da78000732":[{"id":46976,"user_id":421,"body":"def partlist(arr)\n  arr.map_with_index{|x, i| [arr[0..i].join(\" \"), arr[i + 1..-1].join(\" \")]}[0..-2]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46977,"user_id":null,"body":"def partlist(arr)\n  collection = [] of Array(String)\n  (1...arr.size).each do |count|\n    collection << [arr.first(count).join(\" \"), arr.last(arr.size - count).join(\" \")]\n  end\n  collection\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46978,"user_id":492,"body":"def partlist(arr)\n    bigres, i = [] of Array(String), 0\n    while (i < arr.size)\n        res = [] of String\n        res << arr[0..i].join(\" \") << arr[i+1..arr.size-1].join(\" \")\n        bigres << res\n        i += 1\n    end\n    bigres[0..bigres.size-2]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46979,"user_id":null,"body":"def partlist(arr)\n  arr.map_with_index { |w, i| [arr[0..i].join(\" \"), arr[i + 1..-1].join(\" \")] }[0..-2]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46980,"user_id":53,"body":"def partlist(arr)\n  (1...arr.size).map{|i|[arr[0..i-1].join(\" \"),arr[i..arr.size].join(\" \")]}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46981,"user_id":null,"body":"def partlist(arr)\n  result = Array(Array(String)).new\n  size = arr.size\n  (1...size).each do |i|\n    left = arr[0...i].join(' ')\n    right = arr[i...size].join(' ')\n    result << [left, right]\n  end\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46982,"user_id":null,"body":"def partlist(arr)\n  res = [] of Array(String)\n  (0...arr.size - 1).each do |i|\n    res << [arr[..i].join(\" \"), arr[i + 1..].join(\" \")]\n  end\n  return res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46983,"user_id":1474,"body":"def partlist(arr)\n  (1...arr.size).map { |i| [arr.first(i).join(' '), arr.last(arr.size-i).join(' ')] }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46984,"user_id":null,"body":"def partlist(arr)\n  (1...arr.size).map { |i| [arr[0, i].join(\" \"), arr[i, arr.size-i].join(\" \")] }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46985,"user_id":null,"body":"def partlist(arr)\n  (0..(arr.size - 2)).map do |i|\n    [arr[0..i].join(\" \"), arr[(i + 1)..arr.size].join(\" \")]\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56f6919a6b88de18ff000b36":[{"id":46986,"user_id":421,"body":"def how_many_dalmatians(n)\n  dogs = [\"Hardly any\", \"More than a handful!\", \"Woah that's a lot of dogs!\", \"101 DALMATIANS!!!\"]\n  n <= 10 ? dogs[0]: n <= 50 ? dogs[1] : n == 101? dogs[3] : dogs[2]\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 16:39:30"},{"id":46987,"user_id":null,"body":"def how_many_dalmatians(n)\n  dogs = [\"Hardly any\", \"More than a handful!\", \"Woah that's a lot of dogs!\", \"101 DALMATIANS!!!\"];\n  \n  respond = n <= 10 ? dogs[0] : n <= 50 ? dogs[1] : n == 101 ? dogs[3] : dogs[2]\n  \n  return respond\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56f695399400f5d9ef000af5":[{"id":46988,"user_id":527,"body":"def correct_tail(body, tail)\n  body.ends_with?(tail)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46989,"user_id":50,"body":"def correct_tail(body, tail)\n  tail[0..-2]+body[body.size-1] == tail \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46990,"user_id":null,"body":"def correct_tail(body, tail)\n  if body.ends_with?(tail)\n    return true\n  else\n    return false\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46991,"user_id":null,"body":"def correct_tail(body, tail)\n  body[-1].to_s == tail.to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46992,"user_id":null,"body":"def correct_tail(body, tail)\n  return body[-1].to_s == tail\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46993,"user_id":null,"body":"def correct_tail(body, tail)\n  body[-1].to_s === tail\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46994,"user_id":null,"body":"def correct_tail(body, tail)\n    body[-1..-1] == tail\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46995,"user_id":null,"body":"def correct_tail(body, tail)\n  body.split(\"\")[-1] == tail\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46996,"user_id":null,"body":"def correct_tail(body, tail)\n  body.chars.last == tail.chars.last\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":46997,"user_id":null,"body":"def correct_tail(body, tail)\n  body.reverse.starts_with?(tail)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56f699cd9400f5b7d8000b55":[{"id":46998,"user_id":2986,"body":"def fix_the_meerkat(arr)\n  arr.reverse\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-28 16:47:03"},{"id":46999,"user_id":null,"body":"def fix_the_meerkat(arr)\n  arr.reverse!\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47000,"user_id":2609,"body":"def fix_the_meerkat(arr)\n  return arr.reverse()\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47001,"user_id":17,"body":"def fix_the_meerkat(a)\n  a.reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47002,"user_id":null,"body":"def fix_the_meerkat(arr)\n  tail, body, head = arr\n  [head, body, tail]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47003,"user_id":2986,"body":"def fix_the_meerkat(arr)\n  arr.reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56f69d9f9400f508fb000ba7":[{"id":47004,"user_id":2986,"body":"def monkey_count(n)\n  (1..n).to_a\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47005,"user_id":null,"body":"def monkey_count(n)\n  ((n-(n-1))..n).to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47006,"user_id":1366,"body":"def monkey_count(n : Int32)\n  output_arr = [] of Int32\n  counter = 1\n  \n  while counter <= n\n    output_arr.push(counter)\n    counter += 1\n  end\n  \n  return output_arr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47007,"user_id":null,"body":"def monkey_count(n)\n  a = [] of Int32\n  (1..n).each do |x|\n    a << x\n  end\n  a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47008,"user_id":null,"body":"def monkey_count(n)\n   Array.new(n) { |i| i + 1 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56f6ad906b88de513f000d96":[{"id":47009,"user_id":null,"body":"def bonus_time(salary, bonus)\n  \"$#{salary*((bonus)?10:1)}\"\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47010,"user_id":1701,"body":"def bonus_time(salary, bonus)\n  \"$#{(bonus ? 10 : 1)*salary}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47011,"user_id":2797,"body":"def bonus_time(salary, bonus)\n  \"$#{salary}#{\"0\" if bonus}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47012,"user_id":null,"body":"def bonus_time(salary, bonus)\n  \"$#{bonus ? 10*salary : salary}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47013,"user_id":null,"body":"def bonus_time(salary, bonus)\n  if bonus\n    return \"$#{salary * 10}\"\n  end\n  \n  return \"$#{salary}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47014,"user_id":50,"body":"def bonus_time(salary, bonus)\n  \"$#{salary*(1+9*(bonus ? 1: 0))}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47015,"user_id":null,"body":"def bonus_time(salary, bonus)\n  if(bonus)\n    salary *= 10\n  end\n  return \"$#{salary}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47016,"user_id":null,"body":"def bonus_time(salary, bonus)\n  return \"$\" + (bonus ? salary * 10 : salary).to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47017,"user_id":null,"body":"def bonus_time(salary, bonus)\n  salary =\n    if bonus\n      salary * 10\n    else\n      salary\n    end\n    \n  \"$#{salary}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47018,"user_id":1768,"body":"def bonus_time(salary, bonus)\n   bonus ? \"$\" + (salary * 10).to_s : \"$\" + salary.to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56f7493f5d7c12d1690000b6":[{"id":47019,"user_id":421,"body":"def mean(lst)\n  a, b = lst.partition{|x| \/\\d\/ === x}\n  [a.sum(&.to_i).fdiv(a.size).round(1), b.join]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47020,"user_id":53,"body":"def mean(arr)\n  a = arr.select{|c|\"0123456789\".includes?(c)}.map{|c|c.to_i}\n  b = arr.select{|c|!\"0123456789\".includes?(c)}\n  [a.sum.to_f \/ a.size, b.join((\"\"))]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47021,"user_id":1624,"body":"def mean(lst)\n  a, b = lst.partition{|x| x =~ \/\\d\/}\n  [a.map(&.to_i).sum \/ 10.0, b.join]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47022,"user_id":null,"body":"def mean(lst)\n  nums, chars = lst.partition &.to_i?\n  [nums.map(&.to_i).sum.fdiv(nums.size), chars.join]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47023,"user_id":null,"body":"def mean(lst)\n  nums = lst.select(&.to_i?).map(&.to_i).sum.fdiv(10)\n  letters = lst.select(&.[0].letter?).join\n  [nums, letters]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47024,"user_id":null,"body":"def mean(lst)\n [lst.select(&.=~(\/\\d\/)).sum(&.to_i) \/ 10.to_f, lst.select(&.=~(\/[A-Za-z]\/)).join ]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47025,"user_id":null,"body":"def mean(lst)\n  nums, chars = lst.partition { |item| item.to_i? }\n  \n  [nums.reduce(0) { |m, n| m + n.to_i } \/ nums.size.to_f, chars.join]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47026,"user_id":null,"body":"def mean(lst)\n  nums, chars = lst.partition { |item| item.to_i? }\n  nums = nums.map { |n| n.to_i }\n  \n  [nums.reduce { |m, n| m + n } \/ nums.size.to_f, chars.join]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47027,"user_id":null,"body":"def mean(lst)\n  s =\"\"; sum=0.0 \n  lst.each do |c| \n    code=c[0].ord\n    if code>=48 && code<=57 \n      sum+=code-48 \n    else s+=c \n    end\n  end\n  return [sum\/10, s]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47028,"user_id":2563,"body":"def mean(lst)\n  lst = lst.map(&.[0])\n  [lst.select(&.number?).map(&.to_i).sum.to_f \/ 10, lst.select(&.letter?).join]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56fc55cd1f5a93d68a001d4e":[{"id":47029,"user_id":1474,"body":"def stairs_in_20(stairs)\n\tstairs.flatten.sum * 20\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47030,"user_id":527,"body":"def stairs_in_20(stairs)\n  20 * stairs.flatten.reduce{ |a, b| a + b }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47031,"user_id":null,"body":"def stairs_in_20(stairs)\n  output = 0\n  stairs.each do |day| day.each do |num_stairs| output = output + num_stairs end end\n  return output*20\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47032,"user_id":168,"body":"def stairs_in_20(stairs)\n  20 * stairs.sum(&.sum)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47033,"user_id":50,"body":"def stairs_in_20(stairs)\n  stairs.map{|x| x.sum}.sum*20\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47034,"user_id":null,"body":"def stairs_in_20(stairs)\n  20 * stairs.map{|s| s.sum}.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47035,"user_id":null,"body":"def stairs_in_20(stairs)\n  year = 0\n  stairs.each do |x|\n    year += x.sum\n  end\n  year * 20\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47036,"user_id":null,"body":"def stairs_in_20(stairs)\n  20 * (stairs.sum(0) { |a| a.sum()  })\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47037,"user_id":2609,"body":"def stairs_in_20(stairs)\n  return stairs.flatten.sum * 20\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47038,"user_id":2563,"body":"def stairs_in_20(stairs)\n  stairs.reduce(0) {|ac, by_day|\n    ac + by_day.reduce {|ac, stairs|\n      ac + stairs\n    }\n  } * 20\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56fcc393c5957c666900024d":[{"id":47039,"user_id":null,"body":"def code(s)\n  return s if s.empty?\n  n = Math.sqrt(s.size).ceil.to_i\n  (s + \"\\v\"*(n*n-s.size)).chars.in_groups_of(n).transpose.map(&.join.reverse).join(\"\n\")\nend\ndef decode(str)\n  str.split('\n').map(&.split(\/\/)).transpose.reverse.flatten.join.gsub(\"\\v\", \"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47040,"user_id":17,"body":"def code(s)\n  return \"\" if s.empty?\n  n = Math.sqrt(s.size).ceil.to_i\n  s += 11.chr.to_s * (n ** 2 - s.size)\n  result = s.scan(\/.{#{n}}\/).map { |m| m[0] }\n  result.map_with_index { |r, i| r.split(\"\").map_with_index { |_, j| result[result.size - j - 1][i].to_s }.join(\"\") }.join(\"\n\")\nend\ndef decode(s)\n  return \"\" if s.empty?\n  lines = s.split(\"\n\")\n  result = lines.map_with_index { |r, i| r.split(\"\").map_with_index { |_, j| lines[j][lines[i].size - i - 1].to_s }.join(\"\") }.join(\"\")\n  (slice_index = result.index(11.chr)) ? result[0...slice_index] : result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47041,"user_id":492,"body":"def code(s)\n  l = s.size\n  m = Math.sqrt(l).ceil.to_i\n  s += \"\\v\" * (m * m - l)\n  arr = [] of String\n  arr = s.scan(\/.{1,#{m}}\/).map{ |md| md[0].to_s } unless s.empty?\n  arr.map{|k| k.chars}.transpose.map{|k| k.reverse.join}.join(\"\n\")\nend\ndef decode(str)\n  arr = str.split(\"\n\")\n  arr.map{|k| k.chars.reverse}.transpose.flatten.join.split(\"\\v\")[0]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47042,"user_id":null,"body":"def code(s)\n  return \"\" if s.empty?\n  len = s.size\n  n = Math.sqrt(len).ceil.to_i\n  if len < n*n\n    s += \"#{11.chr}\"*(n*n - len)\n  end\n  sq_qb = [] of Array(Char)\n  n.times do |i|\n    sq_qb << s[n*i, n].chars\n  end\n  # rotation\n  sq_qb_r = [] of Array(Char)\n  n.times do |y|\n    l = [] of Char\n    n.times do |x|\n      l << sq_qb[n - x - 1][y]\n    end\n    sq_qb_r << l\n  end\n  sq_qb_r.map { |l| l.join }.join(\"\n\")\nend\n\ndef decode(str)\n  return \"\" if str.empty?\n  sq_r = str.split(\"\n\").map { |l| l.chars }\n  len = sq_r.size\n  sq = [] of String\n  len.times do |y|\n    l = [] of Char\n    len.times do |x|\n      l << sq_r[x][len - y - 1]\n    end\n    sq << l.join\n  end\n  sq.join.rstrip(11.chr)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47043,"user_id":2563,"body":"def code(c)\n  #pad\n  width = Math.sqrt(c.size)\n  dec = (width - width.to_i)\n  width += 1 if dec > 0\n  width = width.to_i\n  c += ( \"\\v\" * (width*width - c.size))\n  \n  lines : Array(String) = [] of String\n  while c.size > 0\n    lines.push c.byte_slice(0, width)\n    c = c.byte_slice(width)\n  end\n  rotate(lines.join('\n'), false)\nend\n\ndef decode(str)\n  rotate(str, true).delete('\n').delete('\\v')\nend\n\ndef rotate(str, counter = false)\n  arr = str.split('\n').map { |line| line.split(\"\") }\n  res = Array.new(arr.size) { Array.new( arr.size, \"\") }\n  limit = arr.size-1\n  (0..limit).each { |r|\n    (0..limit).each { |c|\n      if counter\n        res[limit-c][r] = arr[r][c]\n      else\n        res[c][limit-r] = arr[r][c]\n      end\n    }\n  }\n  res.map { |line|\n    line.join\n  }.join('\n')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"56fe17fcc25bf3e19a000292":[{"id":47044,"user_id":421,"body":"def v1(n, p)\n  (2 * n + 1) * p\nend\ndef u1(n, p)\n  (n + 1) * p\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47045,"user_id":492,"body":"def v1(n, p)\n  p * (2_i64 * n + 1)\nend\ndef u1(n, p)\n  p * (n + 1_i64)\nend\ndef v_eff(n, p)\n  p * (2_i64 * n + 1)\nend\ndef u_eff(n, p)\n  p * (n + 1_i64)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47046,"user_id":null,"body":"def v1(n, p)\n  p * (2*n+1)\nend\ndef u1(n, p)\n  p * (n+1)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47047,"user_id":17,"body":"def v1(n, p)\n  p * (2 * n + 1)\nend\ndef u1(n, p)\n  p * (n + 1)\nend\ndef v_eff(n, p)\n  p * (2 * n + 1)\nend\ndef u_eff(n, p)\n  p * (n + 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5700c9acc1555755be00027e":[{"id":47048,"user_id":492,"body":"def contain_all_rots(strng, arr)\n  0.upto(strng.size - 1) { |i| \n    if !arr.includes?(strng.split(\"\").rotate(i).join)\n      return false\n    end\n  } \n  return true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47049,"user_id":421,"body":"def contain_all_rots(strng, arr)\n  strng.chars.map_with_index{|x, i| strng[i..-1] + strng[0...i]}.all?{|a| arr.includes? a}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47050,"user_id":492,"body":"def contain_all_rots(strng, arr)\n  0.upto(strng.size - 1) { |i| \n    if !arr.includes?(strng.split(\"\").rotate(i).join)\n      return false\n    end\n  } \n  return true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47051,"user_id":53,"body":"def contain_all_rots(s, arr)\n  i = s.size\n  while i > 0\n    s = s[1..] + s[0]\n    return false if !arr.includes?(s)\n    i -= 1\n  end\n  true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47052,"user_id":null,"body":"def contain_all_rots(strng, arr)\n  (1..strng.size).all? { |x| arr.index(strng.chars.rotate(x).join) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47053,"user_id":null,"body":"def contain_all_rots(strng, arr)\n      # Split strng into array\n    spl = strng.split(\"\")\n    spl_length = spl.size\n    # Convert arr to Set\n    s = arr.to_set\n    # Perform one arr rot for size of arr\n    spl_length.times do\n      # Check Set membership\n      current_rotation = spl.rotate!().join()\n      if (current_rotation) == \"\"\n        return true\n      end\n      puts \"Checking rotation: #{current_rotation}\"\n      puts \"against set: #{s.to_s}\"\n      unless s.includes?(current_rotation)\n        return false\n      end\n      # if Set membership fails, return false\n    end\n\n    return true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47054,"user_id":1474,"body":"def contain_all_rots(strng, arr)\n  return true if strng.empty?\n  ret = [strng.chars]\n  (strng.size-1).times.reduce(ret[0]) do |s, _|\n    tmp = s.rotate\n    ret << tmp\n    tmp\n  end\n  (ret.map(&.join) - arr).empty?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47055,"user_id":null,"body":"def contain_all_rots(strng, arr)\n  i = 0\n  until i >= strng.size\n  \tif !arr.includes?(strng)\n       return false\n\t\telse\n       strng = strng[-1] + strng[0, strng.size-1]\n       i += 1\n\t\tend\n\tend\n  return true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47056,"user_id":null,"body":"def contain_all_rots(strng, arr)\n  count = strng.size \n  arr = arr.map {|x| x.downcase}\n  count.times do \n    return false if arr.includes?(strng.downcase) == false\n    strng = strng.chars.rotate.join(\"\")\n  end\n  return true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47057,"user_id":null,"body":"def all_rots(strng)\n    (0...strng.size).each do |idx|\n        yield strng[idx...strng.size] + strng[0...idx]\n    end\nend\n\ndef contain_all_rots(strng, arr)\n    all_rots(strng) do |rot|\n        if !arr.find { |e| e == rot }\n            return false\n        end\n    end\n    return true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5701800886306a876a001031":[{"id":47058,"user_id":168,"body":"def lineup_students(students)\n  students.split.sort_by { |x| {x.size, x} }.reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47059,"user_id":1750,"body":"def lineup_students(students)\n  students\n    .split\n    .sort { |a, b| (s = a.size <=> b.size) == 0 ? (a <=> b) : s }\n    .reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47060,"user_id":null,"body":"def lineup_students(students)\nreturn [] of String if students.empty?\n  students.split(\" \").group_by { |stu| stu.size }.to_a.sort_by{|k,v| k }.reverse.map{|k,v| v.sort.reverse }.flatten\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47061,"user_id":1828,"body":"def lineup_students(students)\n  students.split.group_by{|i| i.size}.to_a.sort_by{|x,y| [x]}.reverse.map{|i| i[1].sort.reverse}.flatten\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47062,"user_id":null,"body":"def lineup_students(students)\n  students\n    .split(\" \")\n    .select { |s| s.size > 0 }\n    .sort_by { |s| {s.size, s} }\n    .reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47063,"user_id":527,"body":"def lineup_students(students)\n  students.split.sort_by{ |s| {s.size, s} }.reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47064,"user_id":2201,"body":"def lineup_students(students)\n  students.split.sort do |a,b|\n    if a.size != b.size\n      b.size <=> a.size\n    else\n      b <=> a\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57073869924f34185100036d":[{"id":47065,"user_id":421,"body":"def random_case(x)\n  x.split(\"\").map{|y| rand(0.0..1.0) < 0.5 ? y.upcase : y.downcase}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47066,"user_id":null,"body":"def random_case(x : String) : String\n  x.gsub(\/.\/) { |c| rand > 0.5 ? c.upcase : c.downcase }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47067,"user_id":1624,"body":"def random_case(x)\n  x.chars.map do |c|\n    if rand > 0.5\n      c.upcase\n    else\n      c.downcase\n    end\n  end.join\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47068,"user_id":null,"body":"def random_case(x)\n  random = Random.new\n  x.gsub{ |c| random.next_bool ? c.upcase : c.downcase }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47069,"user_id":null,"body":"def random_case(x)\n  s = \"\"\n  x.each_char do |l|\n    rand(2) == 1 ? (s += l.to_s.upcase) : (s += l.to_s.downcase)\n  end\n  s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47070,"user_id":759,"body":"def random_case(x)\n  r = Random.new\n  x.chars.map { |a| r.next_bool ? a.upcase : a.downcase }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47071,"user_id":527,"body":"def random_case(s)\n  r = Random.new\n  s.each_char.map{ |c| r.next_bool ? c.upcase : c.downcase }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47072,"user_id":1072,"body":"def random_case(x) x.split(\"\").map{|l| rand(2)==0 ? l.downcase : l.upcase}.join end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47073,"user_id":1072,"body":"def random_case(x) x.split(\"\").map{|l| rand(2)==0 ? l.downcase : l.upcase}.join end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5715eaedb436cf5606000381":[{"id":47074,"user_id":527,"body":"def positive_sum(arr)\n  arr.select{ |x| x > 0 }.sum\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47075,"user_id":527,"body":"def positive_sum(arr)\n  arr.select(&.>(0)).sum\nend\n","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47076,"user_id":null,"body":"def positive_sum(arr)\n  \n  a = 0\n  size = 0\n  if !arr\n    return (0)\n  end\n  arr.each do\n    if arr[a] > 0\n      size += arr[a]\n    end\n    a += 1\n  end\n  return size\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47077,"user_id":527,"body":"def positive_sum(arr)\n  arr.sum{ |x| {x, 0}.max }\nend\n\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47078,"user_id":168,"body":"def positive_sum(arr)\n  arr.sum { |x| [x, 0].max }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47079,"user_id":null,"body":"def positive_sum(arr)\n  arr.sum{|x| (x+x.abs)>>1 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47080,"user_id":null,"body":"def positive_sum(arr)\n  arr.reject! { |x| x < 0 }.sum(0)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47081,"user_id":null,"body":"def positive_sum(arr)\n  r = 0\n  arr.each do |y|\n    if y > 0\n      r += y\n    end\n  end\n  r\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47082,"user_id":null,"body":"def positive_sum(arr)\n  res = 0\n  \n  arr.each do |num|\n    if num > 0\n      res += num\n    end\n  end\n  \n  return res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47083,"user_id":421,"body":"def positive_sum(arr)\n  arr.select {|x| x >= 0}.sum || 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"571c1e847beb0a8f8900153d":[{"id":47084,"user_id":2201,"body":"def rake_garden(g) \n  g.split(\" \").map{|a| a==\"rock\" ? a : \"gravel\"}.join(\" \") \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47085,"user_id":1624,"body":"def rake_garden(garden)\n  garden.gsub(\/\\b(?!rock)\\w+\\b\/, \"gravel\")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47086,"user_id":1474,"body":"def rake_garden(garden)\n  allowed = %w[gravel rock]\n  garden.split.map { |e| allowed.includes?(e) ? e : \"gravel\" }.join(' ')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47087,"user_id":50,"body":"def rake_garden(garden)\n  garden.gsub(\/(?!\\b(rock|gravel)\\b)(\\b\\w+\\b)\/, \"gravel\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47088,"user_id":421,"body":"def rake_garden(garden)\n  garden.split.map{|x| x == \"rock\" ? x : \"gravel\"}.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47089,"user_id":null,"body":"def rake_garden(garden)\n  temp = garden.clone.split;\n  garden.split.each_with_index{ |x,i|\n    if (x != \"rock\")\n      if(x != \"gravel\")\n        temp[i] = \"gravel\";\n      end\n    end\n  }\n  return temp.join(' ');\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47090,"user_id":null,"body":"def rake_garden(garden)\n  mystr = \"\"\n  array = garden.split(\/ \/)\n  array.map_with_index{|x, y|\n    rocktest   = x == \"rock\"\n    graveltest = x == \"gravel\"\n    unless rocktest || graveltest\n      x = \"gravel\"\n    end\n    unless y == array.size || y == 0\n      mystr += \" \"\n    end\n      mystr += x\n    x\n  }\n  mystr\n  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47091,"user_id":527,"body":"def rake_garden(garden)\n  garden.gsub(\/(?<!\\S)(?!gravel|rock)\\S+\/, \"gravel\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47092,"user_id":2201,"body":"def rake_garden(g) \n  g.split(\" \").map{|a| a==\"rock\" ? a : \"gravel\"}.join(\" \") \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5726f813c8dcebf5ed000a6b":[{"id":47093,"user_id":492,"body":"def prime_factors(n) \n    factors = [] of Int32\n    i = 2\n    while (i * i <= n)\n        while (n % i == 0)\n            factors << i\n            n \/= i\n        end\n        i += 1\n    end\n    if (n > 1) \n    \tfactors << n \n  \tend\n    factors.size\nend\ndef count_Kprimes(k, start, nd)\n    kprimes = [] of Int32\n    i = start\n    while (i <= nd)\n        if (prime_factors(i) == k)\n      \t\tkprimes << i \n    \tend\n        i += 1\n    end\n    kprimes\nend\ndef puzzle(s)\n    a = count_Kprimes(1, 0, s)\n    b = count_Kprimes(3, 0, s)\n    c = count_Kprimes(7, 0, s)\n    cnt = 0; ia = 0\n    while (ia < a.size)\n        ib = 0\n        while (ib < b.size)\n            ic = 0\n            while (ic < c.size)\n                if (a[ia] + b[ib] + c[ic] == s)\n                    cnt += 1\n                end\n                ic += 1\n            end\n            ib += 1\n        end\n        ia += 1\n    end\n    cnt\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47094,"user_id":53,"body":"def count_Kprimes(k, start, nd)\n  ys=[] of Int32\n  n=start\n  while (n<=nd)\n    j=pfc(n)\n    if (j==k)\n      ys<<n\n    end\n    n=n+1\n  end\n  ys\nend\ndef puzzle(s)\n  m=0\n  xs=count_Kprimes(7,128,s-2)\n  xs.each{|a|\n    ys=count_Kprimes(3,4,s-a)\n    ys.each{|b|\n      c=s-a-b\n      if (c>0&&pfc(c)==1)\n        m=m+1\n      end\n    }\n  }\n  m\nend\ndef pfc(n)\n  j=0\n  i=2\n  while (i<=n\/i)\n    while (n%i==0)\n      j=j+1\n      n=n\/i\n    end\n    i=i+1\n  end\n  if (n>1)\n    j=j+1\n  end\n  j\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47095,"user_id":null,"body":"def count_factors(n)\n  c = 0\n  while n&1 == 0\n    c += 1\n    n >>= 1\n  end\n  i = 3\n  while i**2 <= n\n    while n%i == 0\n      c += 1\n      n \/= i\n    end\n    i += 1\n  end\n  c + (n > 1 ? 1 : 0)\nend\n\ndef count_Kprimes(k, start, nd)\n  (Math.max(start, 2**k)..nd).reject {|i| count_factors(i) != k}.to_a\nend\n\ndef puzzle(s)\n  a = [] of Int32\n  b = [] of Int32\n  c = [] of Int32\n  (2..s-10).each do |i|\n    case count_factors(i)\n    when 1\n      a << i\n    when 3\n      b << i\n    when 7\n      c << i\n    end\n  end\n  n = 0\n  i = 0\n  while i < a.size\n    j = 0\n    while a[i] + b[j] <= s - (2**7)\n      ab = a[i] + b[j]\n      k = c.size-1\n      while true\n        case ab + c[k] <=> s\n        when 0\n          n += 1\n          break\n        when -1\n          break\n        end\n        k -= 1\n      end\n      j += 1\n    end\n    i += 1\n  end\n  n\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47096,"user_id":17,"body":"def k_of(n)\n  return 0 if n < 2\n  k = 0\n  m = n\n  while m % 2 == 0\n    m \/= 2\n    k += 1\n  end\n  (3..Math.sqrt(n)).each do |i|\n    while m % i == 0\n      m \/= i\n      k += 1\n    end\n  end\n  k += 1 if m != 1\n  k\nend\ndef count_Kprimes(k, start, stop)\n  result = [] of Int32\n  (start..stop).each do |i|\n    result << i if k_of(i) == k\n  end\n  result\nend\ndef puzzle(n)\n  _as = [] of Int32\n  _bs = [] of Int32\n  _cs = [] of Int32\n  (2..n).each do |i|\n    k_of_i = k_of(i)\n    if k_of_i == 1\n      _as << i\n    elsif k_of_i == 3\n      _bs << i\n    elsif k_of_i == 7\n      _cs << i\n    end\n  end\n  result = 0\n  _as.each do |a|\n    _bs.each do |b|\n      _cs.each do |c|\n        result += 1 if a + b + c == n\n      end\n    end\n  end\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47097,"user_id":null,"body":"def nb_divisors(n)\n  nb = 0\n  d = 2\n  while d <= n\n    if n % d == 0\n      nb += 1\n      n = n \/ d\n    else\n      d += 1\n    end\n  end\n  nb\nend\n\ndef is_k_prime(n, k)\n  nb_divisors(n) == k\nend\n\ndef count_Kprimes(k, start, nd)\n  puts \"count_Kprimes(#{k}, #{start}, #{nd})\"\n  (start..nd).select do |n|\n    is_k_prime(n, k)\n  end\nend\n\ndef puzzle(s)\n  puts \"puzzle(#{s})\"\n  k1 = (2..s).select { |n| is_k_prime(n, 1) }\n  k3 = (2..s).select { |n| is_k_prime(n, 3) }\n  k7 = (2..s).select { |n| is_k_prime(n, 7) }\n  nb = 0\n  k1.each do |i1|\n    k3.each do |i2|\n      k7.each do |i3|\n        nb += 1 if i1 + i2 + i3 == s\n      end\n    end\n  end\n  nb\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5727868888095bdf5c001d3d":[{"id":47098,"user_id":527,"body":"def string_to_int_list(s)\n  s.split(',').reject(&.empty?).map(&.to_i)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47099,"user_id":421,"body":"def string_to_int_list(s)\n  s.split(',').reject{|x| x.empty?}.map(&.to_i)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47100,"user_id":1072,"body":"def string_to_int_list(s) s.split(\",\").select{|a| a != \"\"}.map{|a| a.to_i} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"573182c405d14db0da00064e":[{"id":47101,"user_id":492,"body":"def count_prime_div(n) \n    cnt = 0; i = 2\n    while (i * i <= n)\n        while (n % i == 0)\n            n \/= i\n            cnt += 1\n        end\n        i += 1\n    end\n    if (n > 1) \n    \tcnt += 1 \n  \tend\n    cnt\nend \ndef consec_kprimes(k, arr)\n    cnt = 0\n    arr.each_cons(2) do |aa|\n        if ((count_prime_div(aa[0]) == k) && (count_prime_div(aa[1])) == k)\n            cnt += 1\n        end\n    end\n    cnt\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47102,"user_id":53,"body":"def consec_kprimes(k, arr)\n  xs = arr.map{|n| npf(n) == k ? 1 : 0}\n  (0...arr.size-1).select{|i| xs[i]==1 && xs[i+1]==1 }.size\nend\n\ndef npf(n)\n  m, i = 0, 2\n  while n > 1\n    if n%i == 0\n      n = (n \/ i).to_i\n      m += 1\n      i = 1\n    end\n    i += 1\n  end\n  m\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57356c55867b9b7a60000bd7":[{"id":47103,"user_id":1474,"body":"def basic_op(operator, value1, value2)\n  v1 = value1.to_i\n  v2 = value2.to_i\n  case operator\n  when \"+\" then v1 + v2\n  when \"-\" then v1 - v2\n  when \"*\" then v1 * v2\n  when \"\/\" then v1 \/ v2\n  end\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47104,"user_id":null,"body":"def basic_op(operator, value1, value2)\n  r = 0\n  \n  case operator\n  when \"+\"\n    r = value1 + value2\n  when \"-\"\n    r = value1 - value2\n  when \"*\"\n    r = value1 * value2\n  else\n    r = value1 \/ value2\n  end\n\n  r\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47105,"user_id":null,"body":"def basic_op(operator, value1, value2)\n  case(operator)\n  when \"+\"\n    value1 + value2\n  when \"-\"\n    value1 - value2\n  when \"*\"\n    value1 * value2\n  when \"\/\"\n    value1 \/ value2\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47106,"user_id":null,"body":"def basic_op(operator, value1, value2)\n  case operator\n    when \"+\"\n      value1 + value2\n    when \"-\"\n      value1 - value2\n    when \"\/\"\n      value1 \/ value2\n    when \"*\"\n      value1 * value2\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47107,"user_id":null,"body":"def basic_op(operator, value1, value2)\n  case operator\n  when \"+\"\n    return value1 + value2\n  when \"-\"\n    return value1 - value2\n  when \"*\"\n    return value1 * value2\n  when \"\/\"\n    return value1 \/ value2\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47108,"user_id":null,"body":"def basic_op(operator, value1, value2)\n  if(operator == \"+\")\n    return value1+value2\n  end\n  if(operator == \"-\")\n    return value1-value2\n  end\n  if(operator == \"*\")\n    return value1*value2\n  end\n  if(operator == \"\/\")\n    return value1\/value2\n  end\n  return 0\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47109,"user_id":527,"body":"def basic_op(operator, value1, value2)\n  case operator\n    when \"+\" then value1 + value2\n    when \"-\" then value1 - value2\n    when \"*\" then value1 * value2\n    when \"\/\" then value1 \/ value2\n    else raise ArgumentError.new\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47110,"user_id":421,"body":"def basic_op(operator, value1, value2)\n  case operator\n  when \"+\"\n    value1 + value2\n  when \"-\"\n    value1 - value2\n  when \"*\"\n    value1 * value2\n  when \"\/\"\n    value1 \/ value2\n  else \n    nil\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"573992c724fc289553000e95":[{"id":47111,"user_id":492,"body":"def smallest(n)\n  str = n.to_s; smallest = str; result = [-1, -1, -1]; l = str.size\n  str.split(\"\").each_with_index do |ch, i|\n      str1 = str[0...i] + str[i+1...l] \n      str.split(\"\").each_index do |j|\n      str2 = str1[0...j] + ch + str1[j...l]\n      if (str2 < smallest)\n        smallest = str2\n        result = [smallest.to_i, i, j]\n      end\n    end\n  end\n  result[0] != -1 ? result : [n, 0, 0]\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47112,"user_id":null,"body":"def smallest(n)\n  len = n.digits.size\n  Array.product((0...len).to_a, (0...len).to_a)\n    .map { |(i, j)| [swap(n, i, j), i, j] }\n    .min_by &.[0]\nend\n\ndef swap(n, i, j)\n  digits = n.digits.reverse\n  digits.insert(j, digits.delete_at i)\n  digits.reduce { |acc, d| acc * 10 + d }\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47113,"user_id":null,"body":"def smallest(n) \n  arr = n.to_s.chars.map(&.to_i)  \n  results_list = Array(Array(Int32)).new\n  arr[0..].each_with_index do |v, i|\n    arr[0..].each_with_index do |w, j|\n      arr2 = arr.dup\n      arr2.delete_at(i)\n      arr2.insert(j-1,v)\n      results_list.push([arr2.join.to_i, i, j == 0 ? arr.size-1 : j-1])\n    end  \n  end\n  return results_list.sort{ |a, b| a <=> b }[0]\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47114,"user_id":null,"body":"def smallest(n)\n  s = n.to_s\n  idx = (0...s.size)\n  idx.reduce([n]) {|r, i| idx.each {|j| sn = \"#{s[0...i]}#{s[i + 1..-1]}\".insert(j, s[i]).to_i; r = [sn, i, j] if sn < r[0] }; r}\nend\n","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47115,"user_id":2563,"body":"def smallest(n)\n  digits = n.to_s.chars\n  (0..digits.size-1).reduce([n, -1, -1]){ |ac, from|\n    (0..digits.size-1).reduce(ac) {|ac, to|\n        smallest = replace(digits, from, to)\n        smallest < ac[0] ? [smallest, from, to] : ac\n    }\n  }\nend\ndef replace(digits, from, to)\n    d = digits.dup\n    digit = d.delete_at(from)\n    d.insert(to, digit).join.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"573d498eb90ccf20a000002a":[{"id":47116,"user_id":null,"body":"def decode(string)\n  string.chars.map{|c| (10 - c.to_i - (c.to_i % 5 == 0 ? 5 : 0)) % 10}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47117,"user_id":50,"body":"def decode(string)\n  string.tr(\"4103269578\", \"6957841032\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47118,"user_id":53,"body":"def decode(s)\n  s.tr(\"0123456789\", \"5987604321\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47119,"user_id":527,"body":"def decode(string : String) : String\n  string.tr(\"0123456789\", \"5987604321\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47120,"user_id":421,"body":"def decode(string)\n  string.tr(\"0123456789\", \"5987604321\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5747a9bbe2fab9a0c400012f":[{"id":47121,"user_id":1624,"body":"def gc_content(dna)\n  100.0 * (dna.count(\"C\") + dna.count(\"G\")) \/ dna.size\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47122,"user_id":53,"body":"def gc_content(dna)\n  return 0 if dna.size==0\n  a = dna.gsub(\/[^GCgc]\/,\"\")\n  (100*a.size\/dna.size).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47123,"user_id":null,"body":"def gc_content(dna)\n  dna.empty? ? 0 : 100 * dna.chars.select{|c| \"gc\".includes?(c.downcase)}.size \/\/ dna.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47124,"user_id":421,"body":"def gc_content(dna)\n  dna.size.zero? ? 0.0 : dna.gsub(\/[^GC]\/i, \"\").size \/ dna.size * 100\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47125,"user_id":null,"body":"def gc_content(dna)\n  (dna.count('G')+dna.count('C'))*100\/dna.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47126,"user_id":1403,"body":"def gc_content(dna)\n  dna = dna.upcase.split(\"\")\n  dna.empty? ? 0 : ((dna.count(\"G\") + dna.count(\"C\")).to_f \/ dna.size) * 100\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47127,"user_id":2986,"body":"def gc_content(dna)\n  return 0.to_f.round(2) if dna.size == 0\n  dna = dna.downcase\n  (((dna.count('c').to_f + dna.count('g').to_f) \/ dna.size) * 100).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47128,"user_id":2986,"body":"def gc_content(dna)\n  return 0.to_f.round(2) if dna.size == 0\n  dna = dna.downcase\n  (((dna.count('c').to_f + dna.count('g').to_f) \/ dna.size) * 100).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"574a7d0dca4a8a0fbe000100":[{"id":47129,"user_id":1624,"body":"def reverse_complement(dna)\n  return \"Invalid sequence\" if dna =~ \/[^ACGT]\/\n  dna.tr(\"ATCG\",\"TAGC\").reverse\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47130,"user_id":53,"body":"def reverse_complement(dna)\n  return \"Invalid sequence\" if \/[^ACGT]\/ === dna\n  dna.tr(\"ACGT\", \"TGCA\").reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47131,"user_id":421,"body":"def reverse_complement(dna)\n  dna.split(\"\").all?{|x| \/[ACGT]\/ === x} || dna == \"\" ? dna.reverse.tr(\"ACTG\", \"TGAC\") : \"Invalid sequence\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47132,"user_id":null,"body":"def reverse_complement(dna)\n  dna=~\/[^ACGT]\/? \"Invalid sequence\": dna.reverse.tr \"ATCG\", \"TAGC\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47133,"user_id":2986,"body":"def reverse_complement(dna)\n  return \"\" if dna.size == 0\n  return \"Invalid sequence\" if dna !~ \/\\A['A'|'T'|'C'|'G']+\\Z\/i\n  dna.reverse.tr(\"ACTGactg\", \"TGACtgac\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"574b3b1599d8f897470018f6":[{"id":47134,"user_id":null,"body":"def get_real_floor(n)\n  if n > 13\n    n - 2\n  elsif n > 0\n    n - 1\n  else\n    n\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47135,"user_id":null,"body":"def get_real_floor(n)\n if n > 13\n  return n - 2\n  elsif n < 13 && n > 0\n    return n - 1\n  else\n    return n\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47136,"user_id":1566,"body":"def get_real_floor(n)\n  n >= 1 ? (n > 13 ? n-2 : n-1) : n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47137,"user_id":null,"body":"def get_real_floor(n)\n  if n < 1\n    return n\n  elsif n < 13\n    return n - 1\n  else\n    return n - 2\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47138,"user_id":50,"body":"def get_real_floor(n)\n    n>0 ? n-1-(n>12 ? 1 : 0) : n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47139,"user_id":null,"body":"def get_real_floor(n)\n  if n < 0\n    n\n  elsif n == 0\n    0\n  elsif n < 13\n    n - 1\n  else\n    n - 2\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47140,"user_id":null,"body":"def get_real_floor(n)\n  return n if n < 1\n  return n - 2 if n > 12\n  return n - 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47141,"user_id":null,"body":"def get_real_floor(n)\n  if n <= 0\n    n\n  elsif n < 13\n    n-1\n  else\n    n-2\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47142,"user_id":53,"body":"def get_real_floor(n)\n  n <= 0 ? n : n > 13 ? n - 2 : n - 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47143,"user_id":48,"body":"def get_real_floor(n)\n  n >= 13 ? n - 2 : n > 0 ? n - 1 : n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"574c5075d27783851800169e":[{"id":47144,"user_id":421,"body":"def animals(heads, legs)\n  chickens = heads * 2 - legs \/ 2\n  cows = heads - chickens\n  chickens < 0 || cows < 0 || legs.odd? ? \"No solutions\" : [chickens, cows]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47145,"user_id":1624,"body":"def animals(heads, legs)\n  cows = legs\/2 - heads\n  chickens = heads - cows\n  if legs.even? && cows >= 0 && chickens >= 0\n    [heads - cows, cows]\n  else\n    \"No solutions\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47146,"user_id":null,"body":"def animals(heads, legs)\n  c = legs\/2 - heads\n  k = 2 * heads -legs\/2\n  if c < 0 || k < 0 || c.to_i < c || k.to_i < k\n    return \"No solutions\"\n  end\n  return [k.to_i, c.to_i]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47147,"user_id":53,"body":"def animals(heads, legs)\n  h = (4 * heads - legs) \/ 2\n  b = heads - h\n  if (h < 0 || b < 0 || h % 1 != 0) \n    \"No solutions\"\n  else\n    [h, b]\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47148,"user_id":1474,"body":"def animals(heads, legs)\n  return \"No solutions\" if heads < 0 || legs < 0\n  cows2 = legs - 2 * heads\n  return \"No solutions\" if cows2 < 0 || cows2.odd?\n  cows = cows2 \/ 2\n  chickens = heads - cows\n  return \"No solutions\" if chickens < 0\n  [chickens, cows]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47149,"user_id":null,"body":"def animals(heads, legs)\n  return [0, 0] if heads == 0 && legs == 0\n  return \"No solutions\" if (heads <= 0 || legs <= 0)\n  if (0..heads).bsearch { |x| (((heads - x) * 2) + (x * 4)) >= legs } == nil\n    return \"No solutions\"\n  end\n  cows = (0..heads).bsearch { |x| (((heads - x) * 2) + (x * 4)) >= legs }.not_nil!\n  return \"No solutions\" if ((heads - cows) * 2) + (cows * 4) != legs\n  [heads - cows, cows]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47150,"user_id":573,"body":"def animals(heads, legs)\n  chicks = 2*heads - legs\/2\n  cows   = heads - chicks\n  chicks < 0 || cows < 0 || legs%2 == 1 ? \"No solutions\" : [chicks, cows]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47151,"user_id":null,"body":"def animals(heads, legs)\n  chickens = 2 * heads - legs \/ 2\n  cows = heads - chickens\n  \n  if legs.odd? || chickens < 0 || cows < 0\n    \"No solutions\"\n  else\n    [chickens, cows]\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47152,"user_id":759,"body":"def animals(heads, legs)\n  return \"No solutions\" if legs < 0 || heads < 0 || legs.odd?\n  cows = (legs \/ 2).to_i - heads\n  chickens = heads - cows\n  return \"No solutions\" if cows < 0 || chickens < 0\n  [chickens, cows]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57507369b0b6d1b5a60001b3":[{"id":47153,"user_id":421,"body":"def decompose_single_strand(single_strand)\n  [\"Frame 1: #{single_strand.scan(\/...\/).map(&.[0]).join(\" \")}\",\n    \"Frame 2: #{single_strand.scan(\/^.|...|..$\/).map(&.[0]).join(\" \")}\",\n    \"Frame 3: #{single_strand.scan(\/^..|...|.$\/).map(&.[0]).join(\" \")}\",\n  ].join(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47154,"user_id":1624,"body":"def framify(s)\n  s.chars.each_slice(3).to_a.map(&.join).join(\" \")\nend\n\ndef decompose_single_strand(s)\n  f1 = framify(s)\n  f2 = framify(\"  \"+s)[2..-1]\n  f3 = framify(\" \"+s)[1..-1]\n  [\n    \"Frame 1: #{f1}\n\",\n    \"Frame 2: #{f2}\n\",\n    \"Frame 3: #{f3}\",\n  ].join\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47155,"user_id":null,"body":"def decompose_single_strand(single_strand)\n  n = single_strand.size\n  s =-> (i: Int32){\"Frame #{i+1}: #{i>0? single_strand[...i]+\" \": \"\"}\"+\n                   (0...n\/3).map{|j| single_strand[j*3+i...j*3+i+3]}.join ' '}\n  [s===0, s===1, s===2].join '\n'\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47156,"user_id":null,"body":"class DnaStrand\n  def initialize(@representation : String)\n  end\n\n  def frame(frame_number : UInt8) : String\n    String.build do |frame|\n      @representation.each_char_with_index do |char, index|\n        frame << char\n\n        if (index < @representation.size - 1) & (index % 3 == (frame_number + 1) % 3)\n          frame << ' '\n        end\n      end\n    end\n  end\n\n  def frames\n    frames = Hash(UInt8, String).new\n\n    1_u8.upto(3) do |i|\n      frames[i] = frame(i)\n    end\n\n    frames\n  end\nend\n\ndef decompose_single_strand(dna_strand_representation)\n  DnaStrand.new(dna_strand_representation).frames.map do |key, value|\n    \"Frame #{key}: #{value}\"\n  end.join(\"\n\")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47157,"user_id":null,"body":"def decompose_single_strand(s)\n  sz = s.size\n  i1, i2, i3 = 0, 2, 1\n  f1, f2, f3 = \"\", \"\", \"\"\n  sz.times do |x|\n    if i1 == 3\n      f1 += ' '\n      f1 += s[x]\n      i1 = 0\n    elsif\n      f1 += s[x]\n    end\n\n    if i2 == 3\n      f2 += ' '\n      f2 += s[x]\n      i2 = 0\n    elsif\n      f2 += s[x]\n    end\n\n    if i3 == 3\n      f3 += ' '\n      f3 += s[x]\n      i3 = 0\n    elsif\n      f3 += s[x]\n    end\n    i1 += 1\n    i2 += 1\n    i3 += 1\n  end\n  \"Frame 1: \" + f1 + \"\n\" +\n  \"Frame 2: \" + f2 + \"\n\" +\n  \"Frame 3: \" + f3\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47158,"user_id":527,"body":"def decompose_single_strand(single_strand)\n  [\/...\/, \/^.|...|..$\/, \/^..|...|.$\/]\n    .each_with_index\n    .map{ |(re, i)| \"Frame #{i + 1}: #{single_strand.scan(re).map(&.[](0)).join(' ')}\" }\n    .join('\n')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47159,"user_id":1375,"body":"def decompose_single_strand(single_strand)\n  one = single_strand.chars.each_slice(3).map { |e| e.join }.join(\" \")\n  two = \"#{single_strand[0]} #{single_strand[1..-1].chars.each_slice(3).map { |e| e.join }.join(\" \")}\"\n  three = \"#{single_strand[0..1]} #{single_strand[2..-1].chars.each_slice(3).map { |e| e.join }.join(\" \")}\"\n  [\"Frame 1: #{one}\", \"Frame 2: #{two}\", \"Frame 3: #{three}\"].join(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47160,"user_id":1072,"body":"def decompose_single_strand(s) (0..2).map{|i| \"Frame #{i+1}: #{((i==0 ? [] of String : [s[0,i]])+s[i,s.size].scan(\/.{1,3}\/).map{|e| e[0]}).join(\" \")}\"}.join(\"\n\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57591ef494aba64d14000526":[{"id":47161,"user_id":492,"body":"def john_ann(n)\n    john_list = [0]; ann_list = [1]\n    res = [ann_list, john_list]\n    if (n == 0) \n      return res \n    end\n    i = 1\n    while (i < n)\n        j = john_list[i - 1]\n        a1 = ann_list[j]\n        john_list << (i - a1)\n        a = ann_list[i - 1]\n        j1 = john_list[a]\n        ann_list<< (i - j1)\n        i += 1\n    end\n    res\nend\n    \ndef john(n)\n    john_ann(n)[1]\nend\ndef ann(n)\n    john_ann(n)[0]\nend\ndef sum_john(n)\n    john_ann(n)[1].reduce(0){ |sum,x| sum + x }\nend\ndef sum_ann(n)\n    john_ann(n)[0].reduce(0){ |sum,x| sum + x }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47162,"user_id":53,"body":"\ndef walk(n)\n  xs = [0]\n  ys = [1]\n  i = 1\n  while i < n\n    x1 = xs[i - 1]\n    x2 = ys[x1]\n    xs.push(i - x2)\n    y1 = ys[i - 1]\n    y2 = xs[y1]\n    ys.push(i - y2)\n    i += 1\n  end\n  [ys, xs]\nend\n\ndef john(n)\n  walk(n)[1]\nend\ndef ann(n)\n  walk(n)[0]\nend\ndef sum_john(n)\n  john(n).reduce(0) { |acc, i| acc + i }  \nend\ndef sum_ann(n)\n  ann(n).reduce(0) { |acc, i| acc + i } \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47163,"user_id":null,"body":"def john(n)\n  build_john([0], [1], n)\nend\n\ndef build_john(john, ann, n)\n  while n > john.size\n    john = add_to_john(john, ann)\n    ann = add_to_ann(ann, john)\n  end\n  john\nend\n\ndef build_ann(ann, john, n)\n  while n > ann.size\n    john = add_to_john(john, ann)\n    ann = add_to_ann(ann, john)\n  end\n  ann\nend\n\ndef add_to_john(john, ann)\n  t = john[john.size - 1]\n  john << (john.size - ann[t])\n  john\nend\n\ndef add_to_ann(ann, john)\n  t = ann.last\n  ann << (ann.size - john[t])\n  ann\nend\n\ndef ann(n)\n  build_ann([1], [0], n)\nend\n\ndef sum_john(n)\n  john(n).sum\nend\n\ndef sum_ann(n)\n  ann(n).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47164,"user_id":null,"body":"def john(n)\n  j, _a = ja(n, 0, {} of Int32 => Int32, {} of Int32 => Int32)\n  j\nend\n\ndef ann(n)\n  _j, a = ja(n, 0, {} of Int32 => Int32, {} of Int32 => Int32)\n  a\nend\n\ndef sum_john(n)\n  john(n).sum\nend\n\ndef sum_ann(n)\n  ann(n).sum\nend\n\ndef ja(n, cur, j, a)\n  if cur == n\n    {j.values, a.values}\n  elsif cur == 0\n    ja(n, 1, {0 => 0}, {0 => 1})\n  else\n    hj = j[cur - 1]\n    ha = a[cur - 1]\n    j[cur] = cur - a[hj]\n    a[cur] = cur - j[ha]\n    ja(n, cur + 1, j, a)\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47165,"user_id":2055,"body":"def john(n)\n  john_and_ann(n)[:john]\nend\n\ndef ann(n)\n  john_and_ann(n)[:ann]\nend\n\ndef sum_john(n)\n  john(n).sum\nend\n\ndef sum_ann(n)\n  ann(n).sum\nend\n\ndef john_and_ann(n) \n\tkatas = { john: [0], ann: [1] }\n  (1...n).each do |i|\n  \tkatas[:john] << i - katas[:ann][katas[:john][i-1]]\n  \tkatas[:ann]  << i - katas[:john][katas[:ann][i-1]]\n  end\n  katas\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5760c1c7f2717b91e20001a4":[{"id":47166,"user_id":1624,"body":"def motif_locator(sequence, motif)\n  (0...sequence.size).select{|i| sequence[i, motif.size] == motif}.map(&.succ)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47167,"user_id":53,"body":"def motif_locator(h,n)\n  r=[] of Int32\n  (0..h.size-n.size).each{|i|\n    r<<(i+1) if h[i...h.size].starts_with?(n)\n  }\n  r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47168,"user_id":null,"body":"def motif_locator(sequence, motif)\n  result = [] of Int32\n  i = 1\n  while sequence != \"\"\n    if sequence[...motif.size] == motif\n      result << i\n    end\n    sequence = sequence[1..]\n    i += 1\n  end\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47169,"user_id":null,"body":"def motif_locator(sequence, motif)\n  result = [] of Int32\n  idx = 0\n  while (x = sequence.index(motif, idx))\n    result << x + 1\n    idx = x + 1\n  end\n  result\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47170,"user_id":2986,"body":"def motif_locator(sequence, motif)\n  res = [] of Int32\n  offset = 0;\n\n  pos = sequence.index(motif, offset)\n  while pos\n    res << (pos + 1)\n    offset = pos + 1\n    pos = sequence.index(motif, offset)\n  end\n  res\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47171,"user_id":2986,"body":"def motif_locator(sequence, motif)\n  res = [] of Int32\n  offset = 0;\n\n  pos = sequence.index(motif, offset)\n  while pos\n    res << (pos + 1)\n    offset = pos + 1\n    pos = sequence.index(motif, offset)\n  end\n  res\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"576757b1df89ecf5bd00073b":[{"id":47172,"user_id":527,"body":"def tower_builder(n_floors)\n  Array.new(n_floors){ |i| (\"*\" * (2 * i + 1)).center(2 * n_floors - 1) }\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47173,"user_id":null,"body":"def tower_builder(n_floors)\n  width = (n_floors * 2) - 1\n  res = [] of String\n  (1..n_floors).each do |n|\n      elements = (n * 2) - 1\n      padding = ((width - elements) \/ 2).to_i\n      res.push(\"#{\" \" * padding}\" + \"#{\"*\" * elements}\" + \"#{\" \" * padding}\")\n  end\n  return res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47174,"user_id":53,"body":"def tower_builder(n_floors)\n  ans = Array(String).new\n  (1..n_floors).map{|i|\n    s = \"\".ljust(n_floors - i, ' ')\n    t = \"\".ljust(2 * i - 1, '*')\n    ans << s + t + s\n  }\n  ans\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47175,"user_id":null,"body":"def tower_builder(n)\n  w = n * 2 - 1\n  (1..n).map do |l|\n    res = Array(Char).new(w, ' ')\n    v = l * 2 - 1   \n    res.fill('*', (w - v) >> 1, v).join\n   end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47176,"user_id":null,"body":"def tower_builder(n_floors)\n  n = n_floors\n  element = \"*\"  \n  while n > 1\n    element = \" #{element} \"\n    n -= 1\n  end\n  array = [] of String\n  while n_floors >= 1\n    array << element\n    if n_floors > 1\n      element = element.sub(n_floors - 2, \"*\")\n      element = element.sub(\"* \", \"**\")\n    end   \n    n_floors -= 1\n  end\n  return array\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47177,"user_id":null,"body":"def tower_builder(n_floors)\n  (1 .. n_floors).map { |x| \" \" * (n_floors - x) + \"*\" + \"*\" * (x - 1) * 2 + \" \" * (n_floors - x) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47178,"user_id":421,"body":"def tower_builder(n_floors)\n  (1..n_floors).map{|x| \" \" * (n_floors - x) + \"*\" * (2 * x - 1) + \" \" * (n_floors - x)}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"576bb71bbbcf0951d5000044":[{"id":47179,"user_id":null,"body":"def count_positives_sum_negatives(lst)\n  return [] of typeof(lst) if lst.empty?\n  groups = lst.group_by{|i| i > 0}\n  [\n    groups.fetch(true,  [] of Int32).size,\n    groups.fetch(false, [] of Int32).sum\n  ]\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47180,"user_id":168,"body":"def count_positives_sum_negatives(lst)\n  lst && lst.size > 0 ? [lst.count { |x| x > 0 }, lst.select { |x| x < 0 }.sum] : [] of Int32\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47181,"user_id":null,"body":"def filter_pos(input)\n  input.reject { |num| num > 0 }\nend\n\ndef get_pos_count(input)\n  input.size - filter_pos(input).size\nend\n\ndef count_positives_sum_negatives(lst : Array(Int32)) : Array(Int32)\n  lst.size === 0 ? [] of Int32 : [get_pos_count(lst), filter_pos(lst).sum]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47182,"user_id":null,"body":"def count_positives_sum_negatives(lst)\n  r_count = 0\n  r_sum = 0\n  lst.each do |el|\n    if el > 0\n      r_count += 1\n    else \n      r_sum += el\n    end\n  end\n  lst.empty? ? [] of Int8 : [r_count, r_sum]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47183,"user_id":50,"body":"def count_positives_sum_negatives(lst)\n  if lst.size==0\n    return [] of Int32\n    end\n  c=0\n  s=0\n  lst.each do |n|\n    if n>0\n      c+=1\n    else\n      s+=n\n    end\n  end\n  [c,s]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47184,"user_id":53,"body":"def count_positives_sum_negatives(lst)\n  if lst.size == 0\n    return [] of Int32\n  end\n  a = lst.select{|n|n>0}.size\n  b = lst.select{|n|n<0}.sum\n  [a, b]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47185,"user_id":421,"body":"def count_positives_sum_negatives(lst)\n   lst.empty? ? [] of Int32 : [(lst.select{|x| x > 0} || [] of Int32).size, (lst.select{|x| x <= 0} || [] of Int32).sum]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47186,"user_id":null,"body":"def count_positives_sum_negatives(lst)\n  return [] of Int32 if lst.size == 0\n  pos = [] of Int32\n  neg = [] of Int32\n  lst.each { |x| x.sign == 1 ? pos.push(x) : neg.push(x) }\n  [pos.size, neg.sum]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47187,"user_id":null,"body":"def count_positives_sum_negatives(lst)\n  return Array(Int32).new if lst.size == 0\n  positive = lst.select { |x| x > 0}\n  negative = lst.select { |x| x < 0}\n  [positive.size , negative.sum]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47188,"user_id":null,"body":"def count_positives_sum_negatives(lst)\n  if lst.size == 0\n    [] of Int32\n  else\n    [lst.count(&.> 0), lst.select(&.< 0).sum]\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5772382d509c65de7e000982":[{"id":47189,"user_id":492,"body":"def u1(n)\n    memu = [1, 1]\n    i = 2\n    while (i < n)\n        memu << memu[i - memu[i - 1]] + memu[i - memu[i - 2]]\n        i += 1\n    end\n    memu\nend\n\ndef u(n)\n    u1(n)[n - 1]\nend\n\n# n >= 3\ndef length_sup_u_k(n, k)\n    u1(n).select { |elem| elem >= k }.size\nend\n\ndef comp(n)\n    prev = 1; cnt = 0\n    u1(n).each do |v| \n        cnt += 1 if v < prev \n        prev = v\n    end\n    cnt\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47190,"user_id":null,"body":"U = [1, 1]\n\ndef func(n) : Int32\n  U[n - 1]? || U.push(func(n - func(n - 1)) + func(n - func(n - 2))).last\nend\n\ndef length_sup_u_k(n, k)\n  func(n)\n  U[..n - 1].count { |i| i >= k }\nend\n\ndef comp(n)\n  func(n)\n  U[..n - 1].each.cons_pair.count { |(x, y)| x > y }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47191,"user_id":527,"body":"Us = [1, 1]\n\nprivate def first_n(n)\n  (Us.size ... n).each{ |i| Us << Us[i - Us[i - 1]] + Us[i - Us[i - 2]] }\n  Us.each.first(n)\nend\n\ndef length_sup_u_k(n, k)\n  first_n(n).count{ |u| u >= k }\nend\n\ndef comp(n)\n  first_n(n).cons_pair.count{ |u, v| u > v }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47192,"user_id":50,"body":"D = {1=> 1, 2=> 1}\n(3..99999).each do |n|\n  D[n] = D[n - D[n - 1]] + D[n - D[n - 2]]\nend\n\ndef length_sup_u_k(n, k)\n  (1..n).to_a.select{|x| D[x] >= k }.size\nend\n\ndef comp(n)\n  (3..n).to_a.select{|k| D[k] < D[k - 1]}.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47193,"user_id":53,"body":"def length_sup_u_k(n, k)\n  sequence(n).select{ |x| x >= k }.size\nend\n\ndef comp(n)\n  seq = sequence(n)\n  i = 1\n  m = 0\n  while i <= n\n    if seq[i] < seq[i - 1]\n      m += 1\n    end\n    i += 1\n  end\n  m\nend\n\ndef sequence(n)\n  seq = [] of Int64\n  seq << 0\n  seq << 1\n  seq << 1\n  i = 3\n  while i <= n\n    seq << seq[i - seq[i - 1]] + seq[i - seq[i - 2]]\n    i += 1\n  end\n  seq\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47194,"user_id":17,"body":"class Memo\n  @@lookup = [0, 1, 1]\n  def self.lookup\n    @@lookup\n  end\n  def self.push(n)\n    @@lookup << n\n  end\nend\n\ndef u(n)\n  while Memo.lookup.size <= n\n    Memo.push(Memo.lookup[-Memo.lookup[-1]] + Memo.lookup[-Memo.lookup[-2]])\n  end\n  Memo.lookup[n]\nend\n\ndef length_sup_u_k(n, k)\n  result = 0\n  n.times do |i|\n    result += 1 if u(i + 1) >= k\n  end\n  result\nend\ndef comp(n)\n  result = 0\n  (n - 1).times do |i|\n    result += 1 if u(i + 2) < u(i + 1)\n  end\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5772da22b89313a4d50012f7":[{"id":47195,"user_id":527,"body":"def greet(name : String, owner : String) : String\n  \"Hello #{name == owner ? \"boss\" : \"guest\"}\"\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47196,"user_id":null,"body":"def greet(name, owner)\n  name == owner ? \"Hello boss\" : \"Hello guest\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47197,"user_id":421,"body":"def greet(name, owner)\n  \"Hello #{name == owner ? \"boss\": \"guest\"}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47198,"user_id":null,"body":"def greet(name, owner)\n  return name === owner ? \"Hello boss\" :  \"Hello guest\";\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47199,"user_id":759,"body":"def greet(n,o)\"Hello #{n==o ?\"boss\": \"guest\"}\"end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"577a98a6ae28071780000989":[{"id":47200,"user_id":null,"body":"def minimum(list)\n  return list.min\nend\n\ndef maximum(list)\n  return list.max\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47201,"user_id":null,"body":"def minimum(list)\n  #your code here\n  lowerst = 99999999\n  list.each do |num|\n    lowerst = num < lowerst ? num : lowerst  \n  end\n  lowerst\nend\n\ndef maximum(list)\n  upperst = -9999999\n  list.each do |num|\n    upperst = num > upperst ? num : upperst  \n  end\n  upperst\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47202,"user_id":527,"body":"def minimum(xs : Enumerable(T)) : T forall T\n  xs.min\nend\n\ndef maximum(xs : Enumerable(T)) : T forall T\n  xs.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47203,"user_id":527,"body":"macro min(list)\n  {{list}}.min\nend\n\nmacro max(list)\n  {{list}}.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47204,"user_id":421,"body":"def minimum(list)\n  list.min\nend\n\ndef maximum(list)\n  list.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"577bd026df78c19bca0002c0":[{"id":47205,"user_id":527,"body":"def correct(string)\n  string.tr(\"015\", \"OIS\")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47206,"user_id":null,"body":"def correct(s)\n  return s.gsub(\/5\/, \"S\").gsub(\/0\/, \"O\").gsub(\/1\/, \"I\")\nend\n","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47207,"user_id":53,"body":"def correct(s)\n  s.chars.map { |i| i == '5' ? 'S' : i == '0' ? 'O' : i == '1' ? 'I' : i }.join(\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47208,"user_id":null,"body":"def correct(string)\n  string.gsub({\"5\": 'S',\"0\": 'O',\"1\": 'I'})\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47209,"user_id":null,"body":"def correct(str)\n  str.tr(\"501\", \"SOI\")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47210,"user_id":null,"body":"def correct(string)\n  string.gsub(\"5\", \"S\").gsub(\"1\", \"I\").gsub(\"0\", \"O\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47211,"user_id":null,"body":"def correct(string)\n  string.gsub({'5' => 'S', '0' => 'O', '1' => 'I'})\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47212,"user_id":null,"body":"def correct(string)\n  return string.gsub(\"5\", \"S\").gsub(\"0\", \"O\").gsub(\"1\", \"I\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47213,"user_id":null,"body":"def correct(string)\n  string.tr(\"1\",\"I\").tr(\"0\",\"O\").tr(\"5\",\"S\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47214,"user_id":null,"body":"def correct(string)\n  string = string.gsub('5', 'S')\n  string = string.gsub('0', 'O')\n  string = string.gsub('1', 'I')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"577c2d68311a24132a0002a5":[{"id":47215,"user_id":421,"body":"def reverse(str)\n  str.gsub(\/(.)\\1+\/){|x| x[0].uppercase? ? x.downcase : x.upcase}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47216,"user_id":null,"body":"def reverse(str)\n  str.gsub(\/(\\w)\\1+\/) { |l| l[0].uppercase? ? l.downcase : l.upcase }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47217,"user_id":null,"body":"def reverse(str)\n  # find repeating group (of single char) with count > 1 and reverses case based on first char\n  str.gsub(\/(.)\\1{1,}\/) { |s|  s.chars[0].uppercase? ? s.downcase : s.upcase}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47218,"user_id":1072,"body":"def reverse(s) s.gsub(\/(.)\\1+\/){|a| a==a.upcase ? a.downcase : a.upcase} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57829376a1b8d576640000d6":[{"id":47219,"user_id":1072,"body":"def trump_detector(t) m=\"aeiou\".split(\"\").reduce([] of String){|a,l| a+t.scan(Regex.new(\"#{l}+\",Regex::Options::IGNORE_CASE)).map{|e| e[0]}}; (m.reduce(0){|a,b| a+b.size-1} \/ m.size.to_f).round(2) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"578553c3a1b8d5c40300037c":[{"id":47220,"user_id":645,"body":"def binary_array_to_number(arr)\n  arr.join.to_i(2)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47221,"user_id":null,"body":"def binary_array_to_number(arr)\n  if arr.size == 1\n    arr[0]\n  else\n    arr[-1] + 2*binary_array_to_number(arr[...-1])\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47222,"user_id":null,"body":"def binary_array_to_number(arr)\n  arr.reverse_each.map_with_index { |c, i| \n    c == 1 ? 2 ** i : 0\n  }.sum\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47223,"user_id":null,"body":"def binary_array_to_number(arr : Array(Int32)); arr.join.to_i(2); end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47224,"user_id":null,"body":"def binary_array_to_number(arr)\n  arr.reverse.map_with_index {|x, i| x == 1 ? 2 ** i : 0}.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47225,"user_id":null,"body":"def binary_array_to_number(arr)\n  # your code here\n  arr.join.to_i 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47226,"user_id":null,"body":"def binary_array_to_number(arr)\n  bin = 0_i32; count = 2**(arr.size-1);\n  arr.each do |i|\n    bin+=i*count;\n    count\/=2;\n    end\n  bin\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47227,"user_id":null,"body":"def binary_array_to_number(arr)\n  arr.reduce(\"\") { |r,x| r + x.to_s }.to_i(2)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47228,"user_id":53,"body":"def binary_array_to_number(arr)\n  n = arr.size - 1\n  i = 0\n  ans = 0\n  while n > -1\n    ans += (arr[n] << i)\n    i = i + 1\n    n = n - 1\n  end\n  ans\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47229,"user_id":527,"body":"def binary_array_to_number(bs)\n  bs.join.to_i(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5786f8404c4709148f0006bf":[{"id":47230,"user_id":50,"body":"def starting_mark(h)\n  (3.9354838709677433*h+3.4680645161290293).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47231,"user_id":421,"body":"def starting_mark(height)\n  (height * 3.9354 + 3.4681).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47232,"user_id":53,"body":"def starting_mark(x)\n    s = (10.67 - 9.45) \/ (1.83 - 1.52)\n    y = (x - 1.52) * s + 9.45\n    return y.round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47233,"user_id":1624,"body":"def starting_mark(height)\n  dx = height - 1.52\n  dy_dx = (10.67 - 9.45) \/ (1.83 - 1.52)\n  (9.45 + dy_dx * dx).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47234,"user_id":null,"body":"def starting_mark(height)\n  a = (10.67 - 9.45) \/ (1.83 - 1.52)\n  min = 9.45 - ((1.52 - 1.22) * a)\n  (min + ((height - 1.22) * a)).round(2)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47235,"user_id":null,"body":"def starting_mark(height)\n  (8.269354839 + (height - 1.22) * 3.935483871).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47236,"user_id":1474,"body":"def starting_mark(height)\n\tph1, ps1 = 1.52, 9.45\n  ph2, ps2 = 1.83, 10.67\n  d1, d2 = ph2 - ph1, ps2 - ps1\n  dpm = d2 \/ d1\n  if height == ph1\n  \tps1\n  elsif height == ph2\n  \tps2\n  elsif height < ph1\n  \t(9.45 + (height - ph1) * dpm).round(2)\n  else\n  \t(10.67 + (height - ph2) * dpm).round(2)\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47237,"user_id":null,"body":"def starting_mark(height)\n  (9.45+(height-1.52)*1.22.fdiv(0.31)).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47238,"user_id":null,"body":"def starting_mark(height)\n  a = 3.93442622951\n  b = 8.27\n  c = 1.22\n  \n  if(height == 1.22)\n    b\n  else\n    (a * (height-c) + b).round(2)\n  end\n  \nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47239,"user_id":1072,"body":"def starting_mark(h) (9.45+(h-1.52)*1.22\/0.31).round(2) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57873ab5e55533a2890000c7":[{"id":47240,"user_id":421,"body":"def time_correct(t)\n  return t if t.nil? || t.empty?\n  if \/\\A\\d\\d:\\d\\d:\\d\\d\\z\/ === t\n    h, m, s = t.split(\":\").map(&.to_i)    \n    m += s \/ 60\n    h += m \/ 60\n    [h % 24, m % 60, s % 60].map{|x| x.to_s.rjust(2, '0')}.join(\":\")\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47241,"user_id":1624,"body":"def time_correct(t)\n  return t if t.nil? || t.empty?\n  if t =~ \/\\A\\d\\d:\\d\\d:\\d\\d\\z\/\n    h, m, s = t.split(\":\").map(&.to_i)\n    if s >= 60\n      m += 1\n      s -= 60\n    end\n    if m >= 60\n      h += 1\n      m -= 60\n    end\n    h %= 24\n    \"%02d:%02d:%02d\" % [h,m,s]\n  else\n    nil\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47242,"user_id":1072,"body":"def time_correct(t) return nil if t.nil?; return \"\" if t == \"\"; return nil if !(t && \/\\d\\d:\\d\\d:\\d\\d\/=~t); s=(t.split(\":\").reduce(0){|a,b| a*60+b.to_i}); [s \/ 3600 % 24,s \/ 60 %60,s%60].map{|a| (\"0\"+a.to_s)[-2..-1]}.join(\":\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47243,"user_id":null,"body":"def time_correct(t)\n  return t if t.nil? || t.blank?\n  match_data = t.match(\/(?<hours>\\d{2}):(?<minutes>\\d{2}):(?<seconds>\\d{2})\/)\n  return nil unless match_data\n  seconds = match_data.not_nil![\"seconds\"].to_i\n  minutes = (match_data.not_nil![\"minutes\"].to_i + seconds \/ 60)\n  hours = (match_data.not_nil![\"hours\"].to_i + minutes \/ 60) % 24\n  \"#{\"%02d\" % hours}:#{\"%02d\" % (minutes % 60)}:#{\"%02d\" % (seconds % 60)}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47244,"user_id":null,"body":"def time_correct(t)\n  return t if t.nil? || t == \"\"\n  match_data = t.match(\/(?<hours>\\d{2}):(?<minutes>\\d{2}):(?<seconds>\\d{2})\/)\n  return nil unless match_data\n  seconds = match_data.not_nil![\"seconds\"].to_i\n  minutes = (match_data.not_nil![\"minutes\"].to_i + seconds \/ 60)\n  hours = (match_data.not_nil![\"hours\"].to_i + minutes \/ 60) % 24\n  \"#{\"%02d\" % hours}:#{\"%02d\" % (minutes % 60)}:#{\"%02d\" % (seconds % 60)}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47245,"user_id":null,"body":"def time_correct(t)\n  if t.nil? || t.blank?\n    return t\n  end\n\n  time_parts = t.split(\":\").map(&.to_i?)\n\n  if time_parts.size != 3 || time_parts.any?(&.nil?)\n    return\n  end\n\n  hours, minutes, seconds = time_parts.compact\n\n  # creating timespan takes care of seconds\/minutes overflowing >60 and hours > 24\n  ts = Time::Span.new(hours, minutes, seconds)\n\n  # format in requested format only hh:mm:ss (no days)\n  \"%02d:%02d:%02d\" % {ts.hours, ts.minutes, ts.seconds}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47246,"user_id":null,"body":"def time_correct(t)\n \n  if t.nil? || t.size == 0\n    return t\n  end\n\n  # items = t.split \":\" # t.try &.split(\":\")\n  hour_parts = [] of Int32\n  # puts t\n  t.split(\":\") do |x|\n    # only allow valid integers\n    begin\n      hour_parts << x.to_i\n    rescue\n      puts \"#{x} invalid!\"\n    end\n  end\n\n  if hour_parts.size != 3\n    puts \"!invalid hour_parts size returning nil: #{hour_parts}\"\n    return\n  end\n\n  hours, minutes, seconds = hour_parts\n\n  minutes += seconds \/ 60\n  seconds = seconds % 60\n\n  hours += minutes \/ 60\n  minutes = minutes % 60\n\n  if hours >= 24\n    hours = hours % 24\n  end\n\n  # {hours, minutes, seconds}\n  # \"#{hours}:#{minutes}:#{seconds}\"\n  \"%02d:%02d:%02d\" % {hours, minutes, seconds}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47247,"user_id":2563,"body":"def time_correct(t)\n  return nil if t == nil    # nil arg passed\n  \n  time : String = t.to_s    #force string\n  return \"\" if time.empty?  #empty string passed\n  \n  parsed = parse_time(time)\n  return nil if parsed.empty?   # invalid format\n  \n  sec = parsed[0]*60*60 + parsed[1]*60 + parsed[2]\n  \n  s = sec % 60\n  sec = sec \/ 60\n  m = sec % 60\n  sec = sec \/ 60\n  h = sec % 24\n  \n  h.to_s.rjust(2, '0') + ':' + m.to_s.rjust(2, '0') + ':' + s.to_s.rjust(2, '0')\nend\n\ndef parse_time(t : String) : Array(Int32)\n  r = \/^(\\d\\d):(\\d\\d):(\\d\\d)$\/.match(t)\n  return [] of Int32 if r == nil\n  return [r.not_nil![1].to_i, r.not_nil![2].to_i, r.not_nil![3].to_i]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47248,"user_id":null,"body":"TIME_FORMAT     = \/^(\\d\\d):(\\d\\d):(\\d\\d)$\/\nHOUR_DURATION   = 24\nMINUTE_DURATION = 60\nSECOND_DURATION = 60\n\ndef time_correct(t)\n  return nil if t.nil?\n  return \"\" if t.blank?\n  \n  if parts = TIME_FORMAT.match(t)\n    hours, minutes, seconds = parts[1].to_i, parts[2].to_i, parts[3].to_i\n    \n    while seconds >= SECOND_DURATION\n      minutes += 1\n      seconds -= SECOND_DURATION\n    end\n    \n    while minutes >= MINUTE_DURATION\n      hours += 1\n      minutes -= MINUTE_DURATION\n    end\n    \n    while hours >= HOUR_DURATION\n      hours -= HOUR_DURATION\n    end\n    \n    [hours, minutes, seconds].map(&.to_s).map(&.rjust(2,'0')).join(\":\")\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47249,"user_id":null,"body":"def time_correct(t)\n\n  if t.nil? \n    return nil\n    \n  elsif t==\"\"\n    return \"\"\n    \n  elsif t.size != 8\n    return nil\n    \n  end\n  \n  numbers = [0, 1, 3, 4, 6, 7]\n\n  (0..t.size-1).each do |i|\n    if numbers.includes? i\n      return nil if \/[0-9]\/.match(\"#{t[i]}\") == nil\n      \n    else\n      return nil if t[i] != ':'\n      \n    end\n  end\n\n  sec = (t[6].to_i()*10)+ t[7].to_i()\n  sec_to_min = 0\n  \n  if sec >= 60\n    sec_to_min = sec\/60\n    sec = sec%60\n  end\n  \n  if sec < 10\n    sec = \"0#{sec}\"\n  end\n  \n  min = t[3].to_i()*10 + t[4].to_i() + sec_to_min\n  min_to_hour = 0\n  \n  if min >= 60\n    min_to_hour = min\/60\n    min = min%60\n  end\n  \n  if min < 10\n    min = \"0#{min}\"\n  end\n  \n  hour = t[0].to_i()*10 + t[1].to_i() + min_to_hour\n  \n  if hour >= 24\n    hour = hour%24\n  end\n  \n  if hour < 10\n    hour = \"0#{hour}\"\n  end\n  \n  return \"#{hour}:#{min}:#{sec}\"\n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"578dec07deaed9b17d0001b8":[{"id":47250,"user_id":421,"body":"def prime(n)\n  (2..n ** 0.5).each do |i|\n    if n % i == 0\n      return false\n    end\n  end\n  n > 1\nend\n\ndef goldbach_partitions(n)\n  lst = [] of String\n  if n.odd?\n    return [] of String\n  end\n  (2..n \/ 2).each do |i|\n    if prime(i) && prime(n - i)\n      lst << \"#{i}+#{n-i}\"\n    end\n  end\n  lst\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47251,"user_id":1375,"body":"require \"math\"\n\nNUMBER_OF_PRIMES = 100000\nPRIMES = [2]\ntest_number = 3\nprimes_found = 1\n\nwhile primes_found < NUMBER_OF_PRIMES\n  test_primitiveness = true\n  i = 0\n  while (PRIMES.size > i && PRIMES[i] <= Math.sqrt(test_number) && test_primitiveness)\n    if test_number % PRIMES[i] == 0\n      test_primitiveness = false\n    end\n    i += 1\n  end\n  if test_primitiveness\n    PRIMES << test_number\n    primes_found += 1\n  end\n  test_number += 1\nend\n\ndef goldbach_partitions(n)\n  return [] of String if n.odd?\n  \n  primes = PRIMES.take_while { |p| p < n }\n  result = [] of String\n  \n  primes.repeated_combinations(2).each do |comb|\n    a, b = comb[0], comb[1]\n    result << \"#{a}+#{b}\" if a + b == n\n  end\n  \n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47252,"user_id":53,"body":"include Math\n\ndef goldbach_partitions(n)\n  ans = [] of String\n  if n % 2 != 0\n    return ans\n  else\n    i = 0\n    while i <= n \/ 2\n      if is_prime(i) && is_prime(n - i)\n        ans << \"#{i}+#{n - i}\"\n      end\n      i += 1\n    end\n    return ans\n  end\nend\n\ndef is_prime(n)\n  i = 2\n  if n == i\n    return true\n  end\n  while i <= Math.sqrt(n) + 1\n    if n % i == 0\n      return false\n    end\n    i += 1\n  end\n  n > 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47253,"user_id":492,"body":"def prime(a)\n  if a == 2\n    true\n  elsif a <= 1 || a % 2 == 0\n    false\n  else\n    divisors = (3..Math.sqrt(a)).step(2)\n    divisors.none? { |d| a % d == 0 }\n  end\nend\ndef goldbach_partitions(n)\n    if (n < 4 || n % 2 != 0)\n        return [] of String\n    end\n    if (n == 4)\n        return [\"2+2\"]\n    end\n    res = [] of String\n    x = 3\n    while true\n        y = n-x\n        if x > y \n            return res\n        end\n        if prime(y)\n            res << (x.to_s + '+' + y.to_s)\n        end\n        x += 2\n        while (! prime(x))\n            x += 2\n        end\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47254,"user_id":1072,"body":"def goldbach_partitions(n) ps=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3607,3613,3617,3623,3631,3637,3643,3659,3671,3673,3677,3691,3697,3701,3709,3719,3727,3733,3739,3761,3767,3769,3779,3793,3797,3803,3821,3823,3833,3847,3851,3853,3863,3877,3881,3889,3907,3911,3917,3919,3923,3929,3931,3943,3947,3967,3989,4001,4003,4007,4013,4019,4021,4027,4049,4051,4057,4073,4079,4091,4093,4099,4111,4127,4129,4133,4139,4153,4157,4159,4177,4201,4211,4217,4219,4229,4231,4241,4243,4253,4259,4261,4271,4273,4283,4289,4297,4327,4337,4339,4349,4357,4363,4373,4391,4397,4409,4421,4423,4441,4447,4451,4457,4463,4481,4483,4493,4507,4513,4517,4519,4523,4547,4549,4561,4567,4583,4591,4597,4603,4621,4637,4639,4643,4649,4651,4657,4663,4673,4679,4691,4703,4721,4723,4729,4733,4751,4759,4783,4787,4789,4793,4799,4801,4813,4817,4831,4861,4871,4877,4889,4903,4909,4919,4931,4933,4937,4943,4951,4957,4967,4969,4973,4987,4993,4999,5003,5009,5011,5021,5023,5039,5051,5059,5077,5081,5087,5099,5101,5107,5113,5119,5147,5153,5167,5171,5179,5189,5197,5209,5227,5231,5233,5237,5261,5273,5279,5281,5297,5303,5309,5323,5333,5347,5351,5381,5387,5393,5399,5407,5413,5417,5419,5431,5437,5441,5443,5449,5471,5477,5479,5483,5501,5503,5507,5519,5521,5527,5531,5557,5563,5569,5573,5581,5591,5623,5639,5641,5647,5651,5653,5657,5659,5669,5683,5689,5693,5701,5711,5717,5737,5741,5743,5749,5779,5783,5791,5801,5807,5813,5821,5827,5839,5843,5849,5851,5857,5861,5867,5869,5879,5881,5897,5903,5923,5927,5939,5953,5981,5987,6007,6011,6029,6037,6043,6047,6053,6067,6073,6079,6089,6091,6101,6113,6121,6131,6133,6143,6151,6163,6173,6197,6199,6203,6211,6217,6221,6229,6247,6257,6263,6269,6271,6277,6287,6299,6301,6311,6317,6323,6329,6337,6343,6353,6359,6361,6367,6373,6379,6389,6397,6421,6427,6449,6451,6469,6473,6481,6491,6521,6529,6547,6551,6553,6563,6569,6571,6577,6581,6599,6607,6619,6637,6653,6659,6661,6673,6679,6689,6691,6701,6703,6709,6719,6733,6737,6761,6763,6779,6781,6791,6793,6803,6823,6827,6829,6833,6841,6857,6863,6869,6871,6883,6899,6907,6911,6917,6947,6949,6959,6961,6967,6971,6977,6983,6991,6997,7001,7013,7019,7027,7039,7043,7057,7069,7079,7103,7109,7121,7127,7129,7151,7159,7177,7187,7193,7207,7211,7213,7219,7229,7237,7243,7247,7253,7283,7297,7307,7309,7321,7331,7333,7349,7351,7369,7393,7411,7417,7433,7451,7457,7459,7477,7481,7487,7489,7499,7507,7517,7523,7529,7537,7541,7547,7549,7559,7561,7573,7577,7583,7589,7591,7603,7607,7621,7639,7643,7649,7669,7673,7681,7687,7691,7699,7703,7717,7723,7727,7741,7753,7757,7759,7789,7793,7817,7823,7829,7841,7853,7867,7873,7877,7879,7883,7901,7907,7919,7927,7933,7937,7949,7951,7963,7993,8009,8011,8017,8039,8053,8059,8069,8081,8087,8089,8093,8101,8111,8117,8123,8147,8161,8167,8171,8179,8191,8209,8219,8221,8231,8233,8237,8243,8263,8269,8273,8287,8291,8293,8297,8311,8317,8329,8353,8363,8369,8377,8387,8389,8419,8423,8429,8431,8443,8447,8461,8467,8501,8513,8521,8527,8537,8539,8543,8563,8573,8581,8597,8599,8609,8623,8627,8629,8641,8647,8663,8669,8677,8681,8689,8693,8699,8707,8713,8719,8731,8737,8741,8747,8753,8761,8779,8783,8803,8807,8819,8821,8831,8837,8839,8849,8861,8863,8867,8887,8893,8923,8929,8933,8941,8951,8963,8969,8971,8999,9001,9007,9011,9013,9029,9041,9043,9049,9059,9067,9091,9103,9109,9127,9133,9137,9151,9157,9161,9173,9181,9187,9199,9203,9209,9221,9227,9239,9241,9257,9277,9281,9283,9293,9311,9319,9323,9337,9341,9343,9349,9371,9377,9391,9397,9403,9413,9419,9421,9431,9433,9437,9439,9461,9463,9467,9473,9479,9491,9497,9511,9521,9533,9539,9547,9551,9587,9601,9613,9619,9623,9629,9631,9643,9649,9661,9677,9679,9689,9697,9719,9721,9733,9739,9743,9749,9767,9769,9781,9787,9791,9803,9811,9817,9829,9833,9839,9851,9857,9859,9871,9883,9887,9901,9907,9923,9929,9931,9941,9949,9967,9973,10007,10009,10037,10039,10061,10067,10069,10079,10091,10093,10099,10103,10111,10133,10139,10141,10151,10159,10163,10169,10177,10181,10193,10211,10223,10243,10247,10253,10259,10267,10271,10273,10289,10301,10303,10313,10321,10331,10333,10337,10343,10357,10369,10391,10399,10427,10429,10433,10453,10457,10459,10463,10477,10487,10499,10501,10513,10529,10531,10559,10567,10589,10597,10601,10607,10613,10627,10631,10639,10651,10657,10663,10667,10687,10691,10709,10711,10723,10729,10733,10739,10753,10771,10781,10789,10799,10831,10837,10847,10853,10859,10861,10867,10883,10889,10891,10903,10909,10937,10939,10949,10957,10973,10979,10987,10993,11003,11027,11047,11057,11059,11069,11071,11083,11087,11093,11113,11117,11119,11131,11149,11159,11161,11171,11173,11177,11197,11213,11239,11243,11251,11257,11261,11273,11279,11287,11299,11311,11317,11321,11329,11351,11353,11369,11383,11393,11399,11411,11423,11437,11443,11447,11467,11471,11483,11489,11491,11497,11503,11519,11527,11549,11551,11579,11587,11593,11597,11617,11621,11633,11657,11677,11681,11689,11699,11701,11717,11719,11731,11743,11777,11779,11783,11789,11801,11807,11813,11821,11827,11831,11833,11839,11863,11867,11887,11897,11903,11909,11923,11927,11933,11939,11941,11953,11959,11969,11971,11981,11987,12007,12011,12037,12041,12043,12049,12071,12073,12097,12101,12107,12109,12113,12119,12143,12149,12157,12161,12163,12197,12203,12211,12227,12239,12241,12251,12253,12263,12269,12277,12281,12289,12301,12323,12329,12343,12347,12373,12377,12379,12391,12401,12409,12413,12421,12433,12437,12451,12457,12473,12479,12487,12491,12497,12503,12511,12517,12527,12539,12541,12547,12553,12569,12577,12583,12589,12601,12611,12613,12619,12637,12641,12647,12653,12659,12671,12689,12697,12703,12713,12721,12739,12743,12757,12763,12781,12791,12799,12809,12821,12823,12829,12841,12853,12889,12893,12899,12907,12911,12917,12919,12923,12941,12953,12959,12967,12973,12979,12983,13001,13003,13007,13009,13033,13037,13043,13049,13063,13093,13099,13103,13109,13121,13127,13147,13151,13159,13163,13171,13177,13183,13187,13217,13219,13229,13241,13249,13259,13267,13291,13297,13309,13313,13327,13331,13337,13339,13367,13381,13397,13399,13411,13417,13421,13441,13451,13457,13463,13469,13477,13487,13499,13513,13523,13537,13553,13567,13577,13591,13597,13613,13619,13627,13633,13649,13669,13679,13681,13687,13691,13693,13697,13709,13711,13721,13723,13729,13751,13757,13759,13763,13781,13789,13799,13807,13829,13831,13841,13859,13873,13877,13879,13883,13901,13903,13907,13913,13921,13931,13933,13963,13967,13997,13999,14009,14011,14029,14033,14051,14057,14071,14081,14083,14087,14107,14143,14149,14153,14159,14173,14177,14197,14207,14221,14243,14249,14251,14281,14293,14303,14321,14323,14327,14341,14347,14369,14387,14389,14401,14407,14411,14419,14423,14431,14437,14447,14449,14461,14479,14489,14503,14519,14533,14537,14543,14549,14551,14557,14561,14563,14591,14593,14621,14627,14629,14633,14639,14653,14657,14669,14683,14699,14713,14717,14723,14731,14737,14741,14747,14753,14759,14767,14771,14779,14783,14797,14813,14821,14827,14831,14843,14851,14867,14869,14879,14887,14891,14897,14923,14929,14939,14947,14951,14957,14969,14983,15013,15017,15031,15053,15061,15073,15077,15083,15091,15101,15107,15121,15131,15137,15139,15149,15161,15173,15187,15193,15199,15217,15227,15233,15241,15259,15263,15269,15271,15277,15287,15289,15299,15307,15313,15319,15329,15331,15349,15359,15361,15373,15377,15383,15391,15401,15413,15427,15439,15443,15451,15461,15467,15473,15493,15497,15511,15527,15541,15551,15559,15569,15581,15583,15601,15607,15619,15629,15641,15643,15647,15649,15661,15667,15671,15679,15683,15727,15731,15733,15737,15739,15749,15761,15767,15773,15787,15791,15797,15803,15809,15817,15823,15859,15877,15881,15887,15889,15901,15907,15913,15919,15923,15937,15959,15971,15973,15991,16001,16007,16033,16057,16061,16063,16067,16069,16073,16087,16091,16097,16103,16111,16127,16139,16141,16183,16187,16189,16193,16217,16223,16229,16231,16249,16253,16267,16273,16301,16319,16333,16339,16349,16361,16363,16369,16381,16411,16417,16421,16427,16433,16447,16451,16453,16477,16481,16487,16493,16519,16529,16547,16553,16561,16567,16573,16603,16607,16619,16631,16633,16649,16651,16657,16661,16673,16691,16693,16699,16703,16729,16741,16747,16759,16763,16787,16811,16823,16829,16831,16843,16871,16879,16883,16889,16901,16903,16921,16927,16931,16937,16943,16963,16979,16981,16987,16993,17011,17021,17027,17029,17033,17041,17047,17053,17077,17093,17099,17107,17117,17123,17137,17159,17167,17183,17189,17191,17203,17207,17209,17231,17239,17257,17291,17293,17299,17317,17321,17327,17333,17341,17351,17359,17377,17383,17387,17389,17393,17401,17417,17419,17431,17443,17449,17467,17471,17477,17483,17489,17491,17497,17509,17519,17539,17551,17569,17573,17579,17581,17597,17599,17609,17623,17627,17657,17659,17669,17681,17683,17707,17713,17729,17737,17747,17749,17761,17783,17789,17791,17807,17827,17837,17839,17851,17863,17881,17891,17903,17909,17911,17921,17923,17929,17939,17957,17959,17971,17977,17981,17987,17989,18013,18041,18043,18047,18049,18059,18061,18077,18089,18097,18119,18121,18127,18131,18133,18143,18149,18169,18181,18191,18199,18211,18217,18223,18229,18233,18251,18253,18257,18269,18287,18289,18301,18307,18311,18313,18329,18341,18353,18367,18371,18379,18397,18401,18413,18427,18433,18439,18443,18451,18457,18461,18481,18493,18503,18517,18521,18523,18539,18541,18553,18583,18587,18593,18617,18637,18661,18671,18679,18691,18701,18713,18719,18731,18743,18749,18757,18773,18787,18793,18797,18803,18839,18859,18869,18899,18911,18913,18917,18919,18947,18959,18973,18979,19001,19009,19013,19031,19037,19051,19069,19073,19079,19081,19087,19121,19139,19141,19157,19163,19181,19183,19207,19211,19213,19219,19231,19237,19249,19259,19267,19273,19289,19301,19309,19319,19333,19373,19379,19381,19387,19391,19403,19417,19421,19423,19427,19429,19433,19441,19447,19457,19463,19469,19471,19477,19483,19489,19501,19507,19531,19541,19543,19553,19559,19571,19577,19583,19597,19603,19609,19661,19681,19687,19697,19699,19709,19717,19727,19739,19751,19753,19759,19763,19777,19793,19801,19813,19819,19841,19843,19853,19861,19867,19889,19891,19913,19919,19927,19937,19949,19961,19963,19973,19979,19991,19993,19997,20011,20021,20023,20029,20047,20051,20063,20071,20089,20101,20107,20113,20117,20123,20129,20143,20147,20149,20161,20173,20177,20183,20201,20219,20231,20233,20249,20261,20269,20287,20297,20323,20327,20333,20341,20347,20353,20357,20359,20369,20389,20393,20399,20407,20411,20431,20441,20443,20477,20479,20483,20507,20509,20521,20533,20543,20549,20551,20563,20593,20599,20611,20627,20639,20641,20663,20681,20693,20707,20717,20719,20731,20743,20747,20749,20753,20759,20771,20773,20789,20807,20809,20849,20857,20873,20879,20887,20897,20899,20903,20921,20929,20939,20947,20959,20963,20981,20983,21001,21011,21013,21017,21019,21023,21031,21059,21061,21067,21089,21101,21107,21121,21139,21143,21149,21157,21163,21169,21179,21187,21191,21193,21211,21221,21227,21247,21269,21277,21283,21313,21317,21319,21323,21341,21347,21377,21379,21383,21391,21397,21401,21407,21419,21433,21467,21481,21487,21491,21493,21499,21503,21517,21521,21523,21529,21557,21559,21563,21569,21577,21587,21589,21599,21601,21611,21613,21617,21647,21649,21661,21673,21683,21701,21713,21727,21737,21739,21751,21757,21767,21773,21787,21799,21803,21817,21821,21839,21841,21851,21859,21863,21871,21881,21893,21911,21929,21937,21943,21961,21977,21991,21997,22003,22013,22027,22031,22037,22039,22051,22063,22067,22073,22079,22091,22093,22109,22111,22123,22129,22133,22147,22153,22157,22159,22171,22189,22193,22229,22247,22259,22271,22273,22277,22279,22283,22291,22303,22307,22343,22349,22367,22369,22381,22391,22397,22409,22433,22441,22447,22453,22469,22481,22483,22501,22511,22531,22541,22543,22549,22567,22571,22573,22613,22619,22621,22637,22639,22643,22651,22669,22679,22691,22697,22699,22709,22717,22721,22727,22739,22741,22751,22769,22777,22783,22787,22807,22811,22817,22853,22859,22861,22871,22877,22901,22907,22921,22937,22943,22961,22963,22973,22993,23003,23011,23017,23021,23027,23029,23039,23041,23053,23057,23059,23063,23071,23081,23087,23099,23117,23131,23143,23159,23167,23173,23189,23197,23201,23203,23209,23227,23251,23269,23279,23291,23293,23297,23311,23321,23327,23333,23339,23357,23369,23371,23399,23417,23431,23447,23459,23473,23497,23509,23531,23537,23539,23549,23557,23561,23563,23567,23581,23593,23599,23603,23609,23623,23627,23629,23633,23663,23669,23671,23677,23687,23689,23719,23741,23743,23747,23753,23761,23767,23773,23789,23801,23813,23819,23827,23831,23833,23857,23869,23873,23879,23887,23893,23899,23909,23911,23917,23929,23957,23971,23977,23981,23993,24001,24007,24019,24023,24029,24043,24049,24061,24071,24077,24083,24091,24097,24103,24107,24109,24113,24121,24133,24137,24151,24169,24179,24181,24197,24203,24223,24229,24239,24247,24251,24281,24317,24329,24337,24359,24371,24373,24379,24391,24407,24413,24419,24421,24439,24443,24469,24473,24481,24499,24509,24517,24527,24533,24547,24551,24571,24593,24611,24623,24631,24659,24671,24677,24683,24691,24697,24709,24733,24749,24763,24767,24781,24793,24799,24809,24821,24841,24847,24851,24859,24877,24889,24907,24917,24919,24923,24943,24953,24967,24971,24977,24979,24989,25013,25031,25033,25037,25057,25073,25087,25097,25111,25117,25121,25127,25147,25153,25163,25169,25171,25183,25189,25219,25229,25237,25243,25247,25253,25261,25301,25303,25307,25309,25321,25339,25343,25349,25357,25367,25373,25391,25409,25411,25423,25439,25447,25453,25457,25463,25469,25471,25523,25537,25541,25561,25577,25579,25583,25589,25601,25603,25609,25621,25633,25639,25643,25657,25667,25673,25679,25693,25703,25717,25733,25741,25747,25759,25763,25771,25793,25799,25801,25819,25841,25847,25849,25867,25873,25889,25903,25913,25919,25931,25933,25939,25943,25951,25969,25981,25997,25999,26003,26017,26021,26029,26041,26053,26083,26099,26107,26111,26113,26119,26141,26153,26161,26171,26177,26183,26189,26203,26209,26227,26237,26249,26251,26261,26263,26267,26293,26297,26309,26317,26321,26339,26347,26357,26371,26387,26393,26399,26407,26417,26423,26431,26437,26449,26459,26479,26489,26497,26501,26513,26539,26557,26561,26573,26591,26597,26627,26633,26641,26647,26669,26681,26683,26687,26693,26699,26701,26711,26713,26717,26723,26729,26731,26737,26759,26777,26783,26801,26813,26821,26833,26839,26849,26861,26863,26879,26881,26891,26893,26903,26921,26927,26947,26951,26953,26959,26981,26987,26993,27011,27017,27031,27043,27059,27061,27067,27073,27077,27091,27103,27107,27109,27127,27143,27179,27191,27197,27211,27239,27241,27253,27259,27271,27277,27281,27283,27299,27329,27337,27361,27367,27397,27407,27409,27427,27431,27437,27449,27457,27479,27481,27487,27509,27527,27529,27539,27541,27551,27581,27583,27611,27617,27631,27647,27653,27673,27689,27691,27697,27701,27733,27737,27739,27743,27749,27751,27763,27767,27773,27779,27791,27793,27799,27803,27809,27817,27823,27827,27847,27851,27883,27893,27901,27917,27919,27941,27943,27947,27953,27961,27967,27983,27997,28001,28019,28027,28031,28051,28057,28069,28081,28087,28097,28099,28109,28111,28123,28151,28163,28181,28183,28201,28211,28219,28229,28277,28279,28283,28289,28297,28307,28309,28319,28349,28351,28387,28393,28403,28409,28411,28429,28433,28439,28447,28463,28477,28493,28499,28513,28517,28537,28541,28547,28549,28559,28571,28573,28579,28591,28597,28603,28607,28619,28621,28627,28631,28643,28649,28657,28661,28663,28669,28687,28697,28703,28711,28723,28729,28751,28753,28759,28771,28789,28793,28807,28813,28817,28837,28843,28859,28867,28871,28879,28901,28909,28921,28927,28933,28949,28961,28979,29009,29017,29021,29023,29027,29033,29059,29063,29077,29101,29123,29129,29131,29137,29147,29153,29167,29173,29179,29191,29201,29207,29209,29221,29231,29243,29251,29269,29287,29297,29303,29311,29327,29333,29339,29347,29363,29383,29387,29389,29399,29401,29411,29423,29429,29437,29443,29453,29473,29483,29501,29527,29531,29537,29567,29569,29573,29581,29587,29599,29611,29629,29633,29641,29663,29669,29671,29683,29717,29723,29741,29753,29759,29761,29789,29803,29819,29833,29837,29851,29863,29867,29873,29879,29881,29917,29921,29927,29947,29959,29983,29989,30011,30013,30029,30047,30059,30071,30089,30091,30097,30103,30109,30113,30119,30133,30137,30139,30161,30169,30181,30187,30197,30203,30211,30223,30241,30253,30259,30269,30271,30293,30307,30313,30319,30323,30341,30347,30367,30389,30391,30403,30427,30431,30449,30467,30469,30491,30493,30497,30509,30517,30529,30539,30553,30557,30559,30577,30593,30631,30637,30643,30649,30661,30671,30677,30689,30697,30703,30707,30713,30727,30757,30763,30773,30781,30803,30809,30817,30829,30839,30841,30851,30853,30859,30869,30871,30881,30893,30911,30931,30937,30941,30949,30971,30977,30983,31013,31019,31033,31039,31051,31063,31069,31079,31081,31091,31121,31123,31139,31147,31151,31153,31159,31177,31181,31183,31189,31193,31219,31223,31231,31237,31247,31249,31253,31259,31267,31271,31277,31307,31319,31321,31327,31333,31337,31357,31379,31387,31391,31393,31397,31469,31477,31481,31489,31511,31513,31517,31531,31541,31543,31547,31567,31573,31583,31601,31607,31627,31643,31649,31657,31663,31667,31687,31699,31721,31723,31727,31729,31741,31751,31769,31771,31793,31799,31817,31847,31849,31859,31873,31883,31891,31907,31957,31963,31973,31981,31991]; n%2 == 1 ? [] of String : ps.reduce([] of String){|a,b| ps.index(n-b) != nil && b<=n\/2 ? a+[\"#{b}+#{n-b}\"] : a} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47255,"user_id":1072,"body":"def goldbach_partitions(n) ps=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3607,3613,3617,3623,3631,3637,3643,3659,3671,3673,3677,3691,3697,3701,3709,3719,3727,3733,3739,3761,3767,3769,3779,3793,3797,3803,3821,3823,3833,3847,3851,3853,3863,3877,3881,3889,3907,3911,3917,3919,3923,3929,3931,3943,3947,3967,3989,4001,4003,4007,4013,4019,4021,4027,4049,4051,4057,4073,4079,4091,4093,4099,4111,4127,4129,4133,4139,4153,4157,4159,4177,4201,4211,4217,4219,4229,4231,4241,4243,4253,4259,4261,4271,4273,4283,4289,4297,4327,4337,4339,4349,4357,4363,4373,4391,4397,4409,4421,4423,4441,4447,4451,4457,4463,4481,4483,4493,4507,4513,4517,4519,4523,4547,4549,4561,4567,4583,4591,4597,4603,4621,4637,4639,4643,4649,4651,4657,4663,4673,4679,4691,4703,4721,4723,4729,4733,4751,4759,4783,4787,4789,4793,4799,4801,4813,4817,4831,4861,4871,4877,4889,4903,4909,4919,4931,4933,4937,4943,4951,4957,4967,4969,4973,4987,4993,4999,5003,5009,5011,5021,5023,5039,5051,5059,5077,5081,5087,5099,5101,5107,5113,5119,5147,5153,5167,5171,5179,5189,5197,5209,5227,5231,5233,5237,5261,5273,5279,5281,5297,5303,5309,5323,5333,5347,5351,5381,5387,5393,5399,5407,5413,5417,5419,5431,5437,5441,5443,5449,5471,5477,5479,5483,5501,5503,5507,5519,5521,5527,5531,5557,5563,5569,5573,5581,5591,5623,5639,5641,5647,5651,5653,5657,5659,5669,5683,5689,5693,5701,5711,5717,5737,5741,5743,5749,5779,5783,5791,5801,5807,5813,5821,5827,5839,5843,5849,5851,5857,5861,5867,5869,5879,5881,5897,5903,5923,5927,5939,5953,5981,5987,6007,6011,6029,6037,6043,6047,6053,6067,6073,6079,6089,6091,6101,6113,6121,6131,6133,6143,6151,6163,6173,6197,6199,6203,6211,6217,6221,6229,6247,6257,6263,6269,6271,6277,6287,6299,6301,6311,6317,6323,6329,6337,6343,6353,6359,6361,6367,6373,6379,6389,6397,6421,6427,6449,6451,6469,6473,6481,6491,6521,6529,6547,6551,6553,6563,6569,6571,6577,6581,6599,6607,6619,6637,6653,6659,6661,6673,6679,6689,6691,6701,6703,6709,6719,6733,6737,6761,6763,6779,6781,6791,6793,6803,6823,6827,6829,6833,6841,6857,6863,6869,6871,6883,6899,6907,6911,6917,6947,6949,6959,6961,6967,6971,6977,6983,6991,6997,7001,7013,7019,7027,7039,7043,7057,7069,7079,7103,7109,7121,7127,7129,7151,7159,7177,7187,7193,7207,7211,7213,7219,7229,7237,7243,7247,7253,7283,7297,7307,7309,7321,7331,7333,7349,7351,7369,7393,7411,7417,7433,7451,7457,7459,7477,7481,7487,7489,7499,7507,7517,7523,7529,7537,7541,7547,7549,7559,7561,7573,7577,7583,7589,7591,7603,7607,7621,7639,7643,7649,7669,7673,7681,7687,7691,7699,7703,7717,7723,7727,7741,7753,7757,7759,7789,7793,7817,7823,7829,7841,7853,7867,7873,7877,7879,7883,7901,7907,7919,7927,7933,7937,7949,7951,7963,7993,8009,8011,8017,8039,8053,8059,8069,8081,8087,8089,8093,8101,8111,8117,8123,8147,8161,8167,8171,8179,8191,8209,8219,8221,8231,8233,8237,8243,8263,8269,8273,8287,8291,8293,8297,8311,8317,8329,8353,8363,8369,8377,8387,8389,8419,8423,8429,8431,8443,8447,8461,8467,8501,8513,8521,8527,8537,8539,8543,8563,8573,8581,8597,8599,8609,8623,8627,8629,8641,8647,8663,8669,8677,8681,8689,8693,8699,8707,8713,8719,8731,8737,8741,8747,8753,8761,8779,8783,8803,8807,8819,8821,8831,8837,8839,8849,8861,8863,8867,8887,8893,8923,8929,8933,8941,8951,8963,8969,8971,8999,9001,9007,9011,9013,9029,9041,9043,9049,9059,9067,9091,9103,9109,9127,9133,9137,9151,9157,9161,9173,9181,9187,9199,9203,9209,9221,9227,9239,9241,9257,9277,9281,9283,9293,9311,9319,9323,9337,9341,9343,9349,9371,9377,9391,9397,9403,9413,9419,9421,9431,9433,9437,9439,9461,9463,9467,9473,9479,9491,9497,9511,9521,9533,9539,9547,9551,9587,9601,9613,9619,9623,9629,9631,9643,9649,9661,9677,9679,9689,9697,9719,9721,9733,9739,9743,9749,9767,9769,9781,9787,9791,9803,9811,9817,9829,9833,9839,9851,9857,9859,9871,9883,9887,9901,9907,9923,9929,9931,9941,9949,9967,9973,10007,10009,10037,10039,10061,10067,10069,10079,10091,10093,10099,10103,10111,10133,10139,10141,10151,10159,10163,10169,10177,10181,10193,10211,10223,10243,10247,10253,10259,10267,10271,10273,10289,10301,10303,10313,10321,10331,10333,10337,10343,10357,10369,10391,10399,10427,10429,10433,10453,10457,10459,10463,10477,10487,10499,10501,10513,10529,10531,10559,10567,10589,10597,10601,10607,10613,10627,10631,10639,10651,10657,10663,10667,10687,10691,10709,10711,10723,10729,10733,10739,10753,10771,10781,10789,10799,10831,10837,10847,10853,10859,10861,10867,10883,10889,10891,10903,10909,10937,10939,10949,10957,10973,10979,10987,10993,11003,11027,11047,11057,11059,11069,11071,11083,11087,11093,11113,11117,11119,11131,11149,11159,11161,11171,11173,11177,11197,11213,11239,11243,11251,11257,11261,11273,11279,11287,11299,11311,11317,11321,11329,11351,11353,11369,11383,11393,11399,11411,11423,11437,11443,11447,11467,11471,11483,11489,11491,11497,11503,11519,11527,11549,11551,11579,11587,11593,11597,11617,11621,11633,11657,11677,11681,11689,11699,11701,11717,11719,11731,11743,11777,11779,11783,11789,11801,11807,11813,11821,11827,11831,11833,11839,11863,11867,11887,11897,11903,11909,11923,11927,11933,11939,11941,11953,11959,11969,11971,11981,11987,12007,12011,12037,12041,12043,12049,12071,12073,12097,12101,12107,12109,12113,12119,12143,12149,12157,12161,12163,12197,12203,12211,12227,12239,12241,12251,12253,12263,12269,12277,12281,12289,12301,12323,12329,12343,12347,12373,12377,12379,12391,12401,12409,12413,12421,12433,12437,12451,12457,12473,12479,12487,12491,12497,12503,12511,12517,12527,12539,12541,12547,12553,12569,12577,12583,12589,12601,12611,12613,12619,12637,12641,12647,12653,12659,12671,12689,12697,12703,12713,12721,12739,12743,12757,12763,12781,12791,12799,12809,12821,12823,12829,12841,12853,12889,12893,12899,12907,12911,12917,12919,12923,12941,12953,12959,12967,12973,12979,12983,13001,13003,13007,13009,13033,13037,13043,13049,13063,13093,13099,13103,13109,13121,13127,13147,13151,13159,13163,13171,13177,13183,13187,13217,13219,13229,13241,13249,13259,13267,13291,13297,13309,13313,13327,13331,13337,13339,13367,13381,13397,13399,13411,13417,13421,13441,13451,13457,13463,13469,13477,13487,13499,13513,13523,13537,13553,13567,13577,13591,13597,13613,13619,13627,13633,13649,13669,13679,13681,13687,13691,13693,13697,13709,13711,13721,13723,13729,13751,13757,13759,13763,13781,13789,13799,13807,13829,13831,13841,13859,13873,13877,13879,13883,13901,13903,13907,13913,13921,13931,13933,13963,13967,13997,13999,14009,14011,14029,14033,14051,14057,14071,14081,14083,14087,14107,14143,14149,14153,14159,14173,14177,14197,14207,14221,14243,14249,14251,14281,14293,14303,14321,14323,14327,14341,14347,14369,14387,14389,14401,14407,14411,14419,14423,14431,14437,14447,14449,14461,14479,14489,14503,14519,14533,14537,14543,14549,14551,14557,14561,14563,14591,14593,14621,14627,14629,14633,14639,14653,14657,14669,14683,14699,14713,14717,14723,14731,14737,14741,14747,14753,14759,14767,14771,14779,14783,14797,14813,14821,14827,14831,14843,14851,14867,14869,14879,14887,14891,14897,14923,14929,14939,14947,14951,14957,14969,14983,15013,15017,15031,15053,15061,15073,15077,15083,15091,15101,15107,15121,15131,15137,15139,15149,15161,15173,15187,15193,15199,15217,15227,15233,15241,15259,15263,15269,15271,15277,15287,15289,15299,15307,15313,15319,15329,15331,15349,15359,15361,15373,15377,15383,15391,15401,15413,15427,15439,15443,15451,15461,15467,15473,15493,15497,15511,15527,15541,15551,15559,15569,15581,15583,15601,15607,15619,15629,15641,15643,15647,15649,15661,15667,15671,15679,15683,15727,15731,15733,15737,15739,15749,15761,15767,15773,15787,15791,15797,15803,15809,15817,15823,15859,15877,15881,15887,15889,15901,15907,15913,15919,15923,15937,15959,15971,15973,15991,16001,16007,16033,16057,16061,16063,16067,16069,16073,16087,16091,16097,16103,16111,16127,16139,16141,16183,16187,16189,16193,16217,16223,16229,16231,16249,16253,16267,16273,16301,16319,16333,16339,16349,16361,16363,16369,16381,16411,16417,16421,16427,16433,16447,16451,16453,16477,16481,16487,16493,16519,16529,16547,16553,16561,16567,16573,16603,16607,16619,16631,16633,16649,16651,16657,16661,16673,16691,16693,16699,16703,16729,16741,16747,16759,16763,16787,16811,16823,16829,16831,16843,16871,16879,16883,16889,16901,16903,16921,16927,16931,16937,16943,16963,16979,16981,16987,16993,17011,17021,17027,17029,17033,17041,17047,17053,17077,17093,17099,17107,17117,17123,17137,17159,17167,17183,17189,17191,17203,17207,17209,17231,17239,17257,17291,17293,17299,17317,17321,17327,17333,17341,17351,17359,17377,17383,17387,17389,17393,17401,17417,17419,17431,17443,17449,17467,17471,17477,17483,17489,17491,17497,17509,17519,17539,17551,17569,17573,17579,17581,17597,17599,17609,17623,17627,17657,17659,17669,17681,17683,17707,17713,17729,17737,17747,17749,17761,17783,17789,17791,17807,17827,17837,17839,17851,17863,17881,17891,17903,17909,17911,17921,17923,17929,17939,17957,17959,17971,17977,17981,17987,17989,18013,18041,18043,18047,18049,18059,18061,18077,18089,18097,18119,18121,18127,18131,18133,18143,18149,18169,18181,18191,18199,18211,18217,18223,18229,18233,18251,18253,18257,18269,18287,18289,18301,18307,18311,18313,18329,18341,18353,18367,18371,18379,18397,18401,18413,18427,18433,18439,18443,18451,18457,18461,18481,18493,18503,18517,18521,18523,18539,18541,18553,18583,18587,18593,18617,18637,18661,18671,18679,18691,18701,18713,18719,18731,18743,18749,18757,18773,18787,18793,18797,18803,18839,18859,18869,18899,18911,18913,18917,18919,18947,18959,18973,18979,19001,19009,19013,19031,19037,19051,19069,19073,19079,19081,19087,19121,19139,19141,19157,19163,19181,19183,19207,19211,19213,19219,19231,19237,19249,19259,19267,19273,19289,19301,19309,19319,19333,19373,19379,19381,19387,19391,19403,19417,19421,19423,19427,19429,19433,19441,19447,19457,19463,19469,19471,19477,19483,19489,19501,19507,19531,19541,19543,19553,19559,19571,19577,19583,19597,19603,19609,19661,19681,19687,19697,19699,19709,19717,19727,19739,19751,19753,19759,19763,19777,19793,19801,19813,19819,19841,19843,19853,19861,19867,19889,19891,19913,19919,19927,19937,19949,19961,19963,19973,19979,19991,19993,19997,20011,20021,20023,20029,20047,20051,20063,20071,20089,20101,20107,20113,20117,20123,20129,20143,20147,20149,20161,20173,20177,20183,20201,20219,20231,20233,20249,20261,20269,20287,20297,20323,20327,20333,20341,20347,20353,20357,20359,20369,20389,20393,20399,20407,20411,20431,20441,20443,20477,20479,20483,20507,20509,20521,20533,20543,20549,20551,20563,20593,20599,20611,20627,20639,20641,20663,20681,20693,20707,20717,20719,20731,20743,20747,20749,20753,20759,20771,20773,20789,20807,20809,20849,20857,20873,20879,20887,20897,20899,20903,20921,20929,20939,20947,20959,20963,20981,20983,21001,21011,21013,21017,21019,21023,21031,21059,21061,21067,21089,21101,21107,21121,21139,21143,21149,21157,21163,21169,21179,21187,21191,21193,21211,21221,21227,21247,21269,21277,21283,21313,21317,21319,21323,21341,21347,21377,21379,21383,21391,21397,21401,21407,21419,21433,21467,21481,21487,21491,21493,21499,21503,21517,21521,21523,21529,21557,21559,21563,21569,21577,21587,21589,21599,21601,21611,21613,21617,21647,21649,21661,21673,21683,21701,21713,21727,21737,21739,21751,21757,21767,21773,21787,21799,21803,21817,21821,21839,21841,21851,21859,21863,21871,21881,21893,21911,21929,21937,21943,21961,21977,21991,21997,22003,22013,22027,22031,22037,22039,22051,22063,22067,22073,22079,22091,22093,22109,22111,22123,22129,22133,22147,22153,22157,22159,22171,22189,22193,22229,22247,22259,22271,22273,22277,22279,22283,22291,22303,22307,22343,22349,22367,22369,22381,22391,22397,22409,22433,22441,22447,22453,22469,22481,22483,22501,22511,22531,22541,22543,22549,22567,22571,22573,22613,22619,22621,22637,22639,22643,22651,22669,22679,22691,22697,22699,22709,22717,22721,22727,22739,22741,22751,22769,22777,22783,22787,22807,22811,22817,22853,22859,22861,22871,22877,22901,22907,22921,22937,22943,22961,22963,22973,22993,23003,23011,23017,23021,23027,23029,23039,23041,23053,23057,23059,23063,23071,23081,23087,23099,23117,23131,23143,23159,23167,23173,23189,23197,23201,23203,23209,23227,23251,23269,23279,23291,23293,23297,23311,23321,23327,23333,23339,23357,23369,23371,23399,23417,23431,23447,23459,23473,23497,23509,23531,23537,23539,23549,23557,23561,23563,23567,23581,23593,23599,23603,23609,23623,23627,23629,23633,23663,23669,23671,23677,23687,23689,23719,23741,23743,23747,23753,23761,23767,23773,23789,23801,23813,23819,23827,23831,23833,23857,23869,23873,23879,23887,23893,23899,23909,23911,23917,23929,23957,23971,23977,23981,23993,24001,24007,24019,24023,24029,24043,24049,24061,24071,24077,24083,24091,24097,24103,24107,24109,24113,24121,24133,24137,24151,24169,24179,24181,24197,24203,24223,24229,24239,24247,24251,24281,24317,24329,24337,24359,24371,24373,24379,24391,24407,24413,24419,24421,24439,24443,24469,24473,24481,24499,24509,24517,24527,24533,24547,24551,24571,24593,24611,24623,24631,24659,24671,24677,24683,24691,24697,24709,24733,24749,24763,24767,24781,24793,24799,24809,24821,24841,24847,24851,24859,24877,24889,24907,24917,24919,24923,24943,24953,24967,24971,24977,24979,24989,25013,25031,25033,25037,25057,25073,25087,25097,25111,25117,25121,25127,25147,25153,25163,25169,25171,25183,25189,25219,25229,25237,25243,25247,25253,25261,25301,25303,25307,25309,25321,25339,25343,25349,25357,25367,25373,25391,25409,25411,25423,25439,25447,25453,25457,25463,25469,25471,25523,25537,25541,25561,25577,25579,25583,25589,25601,25603,25609,25621,25633,25639,25643,25657,25667,25673,25679,25693,25703,25717,25733,25741,25747,25759,25763,25771,25793,25799,25801,25819,25841,25847,25849,25867,25873,25889,25903,25913,25919,25931,25933,25939,25943,25951,25969,25981,25997,25999,26003,26017,26021,26029,26041,26053,26083,26099,26107,26111,26113,26119,26141,26153,26161,26171,26177,26183,26189,26203,26209,26227,26237,26249,26251,26261,26263,26267,26293,26297,26309,26317,26321,26339,26347,26357,26371,26387,26393,26399,26407,26417,26423,26431,26437,26449,26459,26479,26489,26497,26501,26513,26539,26557,26561,26573,26591,26597,26627,26633,26641,26647,26669,26681,26683,26687,26693,26699,26701,26711,26713,26717,26723,26729,26731,26737,26759,26777,26783,26801,26813,26821,26833,26839,26849,26861,26863,26879,26881,26891,26893,26903,26921,26927,26947,26951,26953,26959,26981,26987,26993,27011,27017,27031,27043,27059,27061,27067,27073,27077,27091,27103,27107,27109,27127,27143,27179,27191,27197,27211,27239,27241,27253,27259,27271,27277,27281,27283,27299,27329,27337,27361,27367,27397,27407,27409,27427,27431,27437,27449,27457,27479,27481,27487,27509,27527,27529,27539,27541,27551,27581,27583,27611,27617,27631,27647,27653,27673,27689,27691,27697,27701,27733,27737,27739,27743,27749,27751,27763,27767,27773,27779,27791,27793,27799,27803,27809,27817,27823,27827,27847,27851,27883,27893,27901,27917,27919,27941,27943,27947,27953,27961,27967,27983,27997,28001,28019,28027,28031,28051,28057,28069,28081,28087,28097,28099,28109,28111,28123,28151,28163,28181,28183,28201,28211,28219,28229,28277,28279,28283,28289,28297,28307,28309,28319,28349,28351,28387,28393,28403,28409,28411,28429,28433,28439,28447,28463,28477,28493,28499,28513,28517,28537,28541,28547,28549,28559,28571,28573,28579,28591,28597,28603,28607,28619,28621,28627,28631,28643,28649,28657,28661,28663,28669,28687,28697,28703,28711,28723,28729,28751,28753,28759,28771,28789,28793,28807,28813,28817,28837,28843,28859,28867,28871,28879,28901,28909,28921,28927,28933,28949,28961,28979,29009,29017,29021,29023,29027,29033,29059,29063,29077,29101,29123,29129,29131,29137,29147,29153,29167,29173,29179,29191,29201,29207,29209,29221,29231,29243,29251,29269,29287,29297,29303,29311,29327,29333,29339,29347,29363,29383,29387,29389,29399,29401,29411,29423,29429,29437,29443,29453,29473,29483,29501,29527,29531,29537,29567,29569,29573,29581,29587,29599,29611,29629,29633,29641,29663,29669,29671,29683,29717,29723,29741,29753,29759,29761,29789,29803,29819,29833,29837,29851,29863,29867,29873,29879,29881,29917,29921,29927,29947,29959,29983,29989,30011,30013,30029,30047,30059,30071,30089,30091,30097,30103,30109,30113,30119,30133,30137,30139,30161,30169,30181,30187,30197,30203,30211,30223,30241,30253,30259,30269,30271,30293,30307,30313,30319,30323,30341,30347,30367,30389,30391,30403,30427,30431,30449,30467,30469,30491,30493,30497,30509,30517,30529,30539,30553,30557,30559,30577,30593,30631,30637,30643,30649,30661,30671,30677,30689,30697,30703,30707,30713,30727,30757,30763,30773,30781,30803,30809,30817,30829,30839,30841,30851,30853,30859,30869,30871,30881,30893,30911,30931,30937,30941,30949,30971,30977,30983,31013,31019,31033,31039,31051,31063,31069,31079,31081,31091,31121,31123,31139,31147,31151,31153,31159,31177,31181,31183,31189,31193,31219,31223,31231,31237,31247,31249,31253,31259,31267,31271,31277,31307,31319,31321,31327,31333,31337,31357,31379,31387,31391,31393,31397,31469,31477,31481,31489,31511,31513,31517,31531,31541,31543,31547,31567,31573,31583,31601,31607,31627,31643,31649,31657,31663,31667,31687,31699,31721,31723,31727,31729,31741,31751,31769,31771,31793,31799,31817,31847,31849,31859,31873,31883,31891,31907,31957,31963,31973,31981,31991]; n%2 == 1 ? [] of String : ps.reduce([] of String){|a,b| ps.index(n-b) != nil && b<=n\/2 ? a+[\"#{b}+#{n-b}\"] : a} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57a03b8872292dd851000069":[{"id":47256,"user_id":421,"body":"def nth_smallest(arr, n)\n  n > arr.uniq.size ? nil : arr.uniq.sort[n - 1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47257,"user_id":492,"body":"def nth_smallest(arr, n)\n  arr.uniq.sort[n-1] rescue nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47258,"user_id":1768,"body":"def nth_smallest(x, n)\n n <= x.uniq.size ? x.sort.uniq[n-1] : nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47259,"user_id":null,"body":"def nth_smallest(arr, n)\n  begin \n    arr.uniq.sort[n-1]\n  rescue\n    nil\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47260,"user_id":1072,"body":"def nth_smallest(arr, n) r=arr.uniq.sort; r.size<n ? nil : r[n-1] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57a0556c7cb1f31ab3000ad7":[{"id":47261,"user_id":null,"body":"def make_upper_case(s)\n  return s.upcase();\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47262,"user_id":527,"body":"def make_upper_case(s : String) : String\n  s.upcase\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47263,"user_id":421,"body":"def make_upper_case(s)\n  s.upcase\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47264,"user_id":1474,"body":"def make_upper_case(s)\n  s.chars.map(&.upcase).join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57a0885cbb9944e24c00008e":[{"id":47265,"user_id":1828,"body":"def remove_exclamation_marks(s)\n  s.delete(\"!\")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47266,"user_id":null,"body":"def remove_exclamation_marks(s)\n  return s.split(\"!\").join(\"\");\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47267,"user_id":null,"body":"def remove_exclamation_marks(s)\n  s.gsub(\/[!]\/, \"\") \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47268,"user_id":null,"body":"def remove_exclamation_marks(s)\n  s.gsub(\/!\/, \"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47269,"user_id":null,"body":"def remove_exclamation_marks(s)\n  s.chars.map { |i| i != '!' ? i : \"\"}.join\nend  ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47270,"user_id":null,"body":"def remove_exclamation_marks(s)\n  return s.delete('!')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47271,"user_id":1153,"body":"def remove_exclamation_marks(s)\n  return s.gsub(\"!\", \"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47272,"user_id":null,"body":"def remove_exclamation_marks(s)\n  s.tr(\"!\", \"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47273,"user_id":1072,"body":"def remove_exclamation_marks(s) s.gsub(\"!\",\"\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47274,"user_id":1072,"body":"def remove_exclamation_marks(s) s.gsub(\"!\",\"\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57a0e5c372292dd76d000d7e":[{"id":47275,"user_id":1072,"body":"def repeat_str(n, s) s*n end","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47276,"user_id":null,"body":"def repeat_str (n, s)\n  return s * n\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47277,"user_id":null,"body":"def repeat_str (n, s)\n  #your code here\n  new_s = \"\"\n  (0...n).each do |_|\n    new_s += s\n  end\n  new_s\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47278,"user_id":812,"body":"def repeat_str (n, s)\n  result = \"\"\n  (1..n).each do |i|\n    result = result + s\n  end\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47279,"user_id":null,"body":"def repeat_str (n, s)\n  r = \"\"\n  i = 0\n  while i < n\n    r += s\n    i += 1\n  end\n  r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47280,"user_id":null,"body":"def repeat_str (n, s)\n  output = \"\";\n  while n !=0\n    output+=s;\n    n-=1;\n  end;\n  output;\nend;","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47281,"user_id":null,"body":"def repeat_str (n : Int32, s : String) : String\n  s * n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47282,"user_id":53,"body":"def repeat_str (n, s)\n   xs = Array.new(n, s)\n   xs.join(\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47283,"user_id":null,"body":"def repeat_str (n, s)\n  (s.chars * n).join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47284,"user_id":null,"body":"def repeat_str (n, s)\n  i=0\n  ret=\"\"\n  while i < n\n    ret+=s\n    i+=1\n  end\n  return ret\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57a2013acf1fa5bfc4000921":[{"id":47285,"user_id":1828,"body":"def find_average(array)\n  array.sum.fdiv(array.size).round(1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47286,"user_id":null,"body":"def find_average(array)\n  (array.sum \/ array.size.to_f).round(1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47287,"user_id":null,"body":"def find_average(array)\n  (array.sum(0.0) \/ array.size).round 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47288,"user_id":53,"body":"def find_average(array)\n  return 0 if array.size == 0\n  ans = 0\n  array.each do |x|\n    ans += x\n  end\n  (10 * ans \/ array.size).round \/ 10\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47289,"user_id":null,"body":"def find_average(array : Array) : Int32 | Float64\n  (((array.sum \/ array.size) * 10).round_even \/ 10) || 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47290,"user_id":null,"body":"def find_average(array)\n  (array.sum \/ array.size).round(1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47291,"user_id":null,"body":"def find_average(array)\n  (array.sum \/ array.size.to_f * 10.0 + 0.5).floor \/ 10.0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47292,"user_id":null,"body":"def find_average(array)\n  (array.reduce { |sum, a| sum + a } \/ (array.size).to_f).round(1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47293,"user_id":1768,"body":"def find_average(x)\n  (x.sum\/x.size.to_f).round(1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47294,"user_id":null,"body":"def find_average(array)\n  sum = 0.0\n  len = array.size\n  array.each do |num|\n    sum = sum + num\n  end\n  average = (sum \/ len).round(1)\n  #your code here, round to the first decimal digit\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57a23e3753ba332b8e0008da":[{"id":47295,"user_id":421,"body":"def help_zoom(key)\n  key.reverse == key ? \"Yes\" : \"No\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47296,"user_id":1624,"body":"def help_zoom(key)\n  return \"No\" unless Math.sqrt(key.size).floor ** 2 == key.size\n  key == key.reverse ? \"Yes\" : \"No\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47297,"user_id":null,"body":"def help_zoom(key)\n  Math.sqrt(key.size) % 1 == 0 ? (key == key.reverse ? \"Yes\" : \"No\") : \"No\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47298,"user_id":1828,"body":"def help_zoom(key)\n  key == key.reverse ? \"Yes\" : \"No\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47299,"user_id":1072,"body":"def help_zoom(k) k.size**0.5%1==0 && k==k.reverse ? \"Yes\" : \"No\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57a429e253ba3381850000fb":[{"id":47300,"user_id":645,"body":"def bmi(weight, height)\n  b = weight \/ height ** 2\n  case\n    when b <= 18.5 then \"Underweight\"\n    when b <= 25.0 then \"Normal\"\n    when b <= 30.0 then \"Overweight\"\n    else \"Obese\"\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47301,"user_id":null,"body":"def bmi(weight, height)\n  bmi = weight \/ (height ** 2)\n  puts bmi\n  if bmi <= 18.5\n    \"Underweight\"\n  elsif bmi <= 25\n    \"Normal\"\n  elsif bmi <= 30\n    \"Overweight\"\n  elsif bmi > 30\n    \"Obese\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47302,"user_id":1474,"body":"def bmi(weight, height)\n  bmi = weight \/ (height ** 2)\n  if bmi <= 18.5\n    \"Underweight\"\n  elsif bmi <= 25.0\n    \"Normal\"\n  elsif bmi <= 30.0\n    \"Overweight\"\n  elsif bmi > 30\n    \"Obese\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47303,"user_id":null,"body":"def bmi(weight, height)\n  val = weight \/ (height**2)\n  if val <= 18.5\n    \"Underweight\"\n  elsif val < 25.0\n    \"Normal\"\n  elsif val < 30.0\n    \"Overweight\"\n  else\n    \"Obese\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47304,"user_id":null,"body":"def bmi(weight, height)\n  res = weight \/ (height * height)\n  \n  if res <= 18.5\n    \"Underweight\"\n  elsif res <= 25.0\n    \"Normal\"\n  elsif res <= 30.0\n    \"Overweight\"\n  else\n    \"Obese\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47305,"user_id":null,"body":"def bmi(weight, height)\n  ind = weight \/ (height*height)\n  if ind <= 18.5\n    \"Underweight\"\n  elsif ind <= 25.0\n    \"Normal\"\n  elsif ind <= 30.0\n    \"Overweight\"\n  else\n    \"Obese\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47306,"user_id":1566,"body":"def bmi(w, h)\n  b=w\/h**2\n  b<=18.5 ? \"Underweight\" : b<=25 ? \"Normal\" : b<30 ? \"Overweight\" : \"Obese\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47307,"user_id":null,"body":"def bmi(weight, height)\n  bmi =weight\/(height*height);\n  return bmi <= 18.5 ? \"Underweight\": bmi <=25.0 ? \"Normal\" : bmi<=30.0 ? \"Overweight\" : \"Obese\";\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47308,"user_id":null,"body":"def bmi(weight, height)\n  case weight \/ (height ** 2)\n  when .<= 18.5 then \"Underweight\"\n  when .<= 25.0 then \"Normal\"\n  when .<= 30.0 then \"Overweight\"\n  else               \"Obese\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47309,"user_id":null,"body":"def bmi(weight, height)\n  bmi = weight \/ (height*height)\n  case bmi\n  when  0..18.5\n    \"Underweight\"\n  when 0..25\n    \"Normal\"\n  when 0..30\n   \"Overweight\"\n  else\n    \"Obese\"\n  end  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57a55c8b72292d057b000594":[{"id":47310,"user_id":null,"body":"def reverse(string)\n  string.split(\" \").reverse.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47311,"user_id":null,"body":"def reverse(string)\n  string.split(\/\\s+\/).reverse.join(' ')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47312,"user_id":null,"body":"def reverse(string)\n  arr = string.split(' ')\n  arr.reverse.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47313,"user_id":null,"body":"def reverse(string)\n  string.split(' ').reverse.reduce { |acc, i| \"#{acc} #{i}\"  }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47314,"user_id":null,"body":"def reverse(string)\n    list = string.split(\" \")\n    i =list.size\n    array = [] of String\n    while i != 0\n        i=i-1\n        array.push(list[i])\n    end\n    return array.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47315,"user_id":2609,"body":"def reverse(string)\n  return string.chomp.split().reverse().join(' ')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47316,"user_id":2563,"body":"def reverse(string : String)\n  string.split(\" \").reverse().join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47317,"user_id":null,"body":"def reverse(string)\n  string.split(\/ \/).reverse_each.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47318,"user_id":1072,"body":"def reverse(s) s.split.reverse.join(\" \") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47319,"user_id":1072,"body":"def reverse(s) s.split.reverse.join(\" \") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57a5c31ce298a7e6b7000334":[{"id":47320,"user_id":null,"body":"def bin_to_dec(str : String): Int\n  str.to_i(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47321,"user_id":50,"body":"def bin_to_dec(str)\n  n=0\n  str.chars.each do |c|\n    n=(n<<1)+c.to_i\n  end\n  n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47322,"user_id":421,"body":"def bin_to_dec(str)\n  str.to_i(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57a6633153ba33189e000074":[{"id":47323,"user_id":421,"body":"def ordered_count(str : String)\n   str.chars.uniq.map{|x| {x, str.count(x)}}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47324,"user_id":645,"body":"def ordered_count(str : String)\n  return str.chars.uniq.map do |x|\n    {x, str.count(x)}\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47325,"user_id":527,"body":"def ordered_count(str : String) : Array(Tuple(Char, Int32))\n  str.each_char.each_with_object(Hash(Char, Int32).new(0)){ |c, h| h[c] += 1 }.to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47326,"user_id":1474,"body":"def ordered_count(str : String)\n  str.chars.uniq.map { |c| {c, str.count(c)} }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47327,"user_id":50,"body":"def ordered_count(str : String)\n  d=Hash(Char, Int32).new\n  str.chars.each do |c|\n    if d.has_key?(c)\n      d[c]+=1\n    else\n     d[c]=1\n    end\n  end\n  d.to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47328,"user_id":527,"body":"def ordered_count(str : String) : Array(Tuple(Char, Int32))\n  str.each_char.tally.to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47329,"user_id":null,"body":"def ordered_count(str : String)\n  result = [] of Tuple(Char, Int32)\n  str_arr = str.chars.uniq\n  \n  str_arr.each_index { |x| \n    result << {str_arr[x], str.count(str_arr[x])}\n  }\n  result\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47330,"user_id":1624,"body":"def ordered_count(str : String)\n  str.chars.group_by(&.itself).map{|k,v| {k,v.size} }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57a77726bb9944d000000b06":[{"id":47331,"user_id":421,"body":"def mango(quantity, price)\n  (quantity - quantity \/\/ 3) * price\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47332,"user_id":1474,"body":"def mango(quantity, price)\n  ((quantity \/ 3).to_i * 2 + quantity % 3) * price\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47333,"user_id":50,"body":"def mango(q, p)\n    2*p*(q\/3).floor+p*(q%3)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57aae4facf1fa57b3300005d":[{"id":47334,"user_id":421,"body":"def four_piles(n,y)\n  r = y * n.fdiv(1 + 2 * y + y ** 2)\n  lst = [r + y, r - y, r * y, r \/ y]\n  lst.all?{|x| x % 1 == 0 && x > 0} ? lst : [] of Int32\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47335,"user_id":1624,"body":"def four_piles(n,y)\n  x = n * y \/ (y*y + 2 * y + 1)\n\n  piles = [x+y, x-y, x*y, x\/y]\n\n  if piles.sum == n && x-y > 0 && x % 1 == 0\n    piles\n  else\n    [] of Int32\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47336,"user_id":1072,"body":"def four_piles(n,y) x=n*y\/(2*y+y*y+1.0); r=[x+y,x-y,x*y,x\/y]; r.all?{|e| e%1==0 && e>0} ? r : [] of Int32 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47337,"user_id":1828,"body":"def four_piles(n,y)\n  x = n*y\/(2*y+y**2+1)\n  a = [x+y,x-y,x*y,x\/y]\n  a.includes?(0) ? [] of Int32 : a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47338,"user_id":1474,"body":"def four_piles(n, y)\n  x = n * y \/ (y + 1) ** 2\n  return [] of Int32 if x <= y\n  [x + y, x - y, x * y, x \/ y]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57cc847e58a06b1492000264":[{"id":47339,"user_id":1474,"body":"def form_word(arr)\n  firstnlast2(arr).map(&.chr)\nend\n\ndef firstnlast2(arr)\n  [arr[0], arr[1], arr[-2], arr[-1]]\nend\n\ndef sort_transform(arr)\n  ret = [arr, arr.sort, arr.sort.reverse].map { |a| form_word(a) }\n  tmp = arr.map(&.chr).sort\n  ret << firstnlast2(tmp)\n  ret.map(&.join).join('-')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47340,"user_id":421,"body":"def sort_transform(arr)\n  a = (arr.first(2) + arr.last(2)).map(&.chr).join\n  b = (arr.sort.first(2)+ arr.sort.last(2)).map(&.chr).join\n  [a, b, b.reverse, b].join('-')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57cc975ed542d3148f00015b":[{"id":47341,"user_id":1246,"body":"def solution(arr,element)\n  arr.includes?(element)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47342,"user_id":527,"body":"macro solution(xs, x)\n  ({{xs}}).includes?({{x}})\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47343,"user_id":null,"body":"def solution(arr,element)\n  arr.any? element\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47344,"user_id":null,"body":"def solution(arr,element)\n  #your code here\n  (arr & [element]) == [element] \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47345,"user_id":null,"body":"def solution(arr,element)\n  return arr.includes? element\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47346,"user_id":null,"body":"def solution(a,b)\n  a.includes?(b)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47347,"user_id":null,"body":"def solution(a, e)\n  a.includes? e\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47348,"user_id":null,"body":"def solution(arr,element)\n  arr.select { |item| item == element }.any?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47349,"user_id":null,"body":"def solution(arr,element)\n  arr.index(element, 0) != nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47350,"user_id":null,"body":"def solution(arr,element)\n  arr.any? { |e| e == element }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57cc981a58da9e302a000214":[{"id":47351,"user_id":527,"body":"def small_enough(arr, limit)\n  arr.all?(&.<=(limit))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47352,"user_id":50,"body":"def small_enough(a, limit)\n  a.size==0 ? true : a.max<=limit\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47353,"user_id":527,"body":"def small_enough(arr, limit)\n  arr.all?(..limit)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47354,"user_id":null,"body":"def small_enough(arr, limit)\n  arr.each { |el| return false if el > limit }\n  true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47355,"user_id":null,"body":"def small_enough(arr, limit)\n  arr.each do |item|\n    if item > limit\n      return false\n    end\n  end\n  true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47356,"user_id":null,"body":"def small_enough(arr, limit)\n  arr.reject { |e| e > limit }.size == arr.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47357,"user_id":null,"body":"def small_enough(arr, limit)\n  arr.size == 0 || arr.max <= limit\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47358,"user_id":null,"body":"def small_enough(arr, limit)\n  arr.all? { |v| v <= limit }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47359,"user_id":53,"body":"def small_enough(arr, limit)\n  arr.select { |x| x > limit }.size == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47360,"user_id":null,"body":"def small_enough(arr, limit)\n  arr.all? {|x| x <= limit}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57cebe1dc6fdc20c57000ac9":[{"id":47361,"user_id":527,"body":"def find_short(s : String)\n  s.split.min_of(&.size)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47362,"user_id":null,"body":"def find_short(s)\n  s.split.min_of(&.size)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47363,"user_id":null,"body":"def find_short(s : String) : Int32\n  (s.split(' ').sort_by{ |a| a.size })[0].size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47364,"user_id":53,"body":"def find_short(s : String) : Int32\n  s.split.map{|w|w.size}.min\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47365,"user_id":168,"body":"def find_short(s : String) : Int32\n  s.split(\" \").min_by(&.size).size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47366,"user_id":null,"body":"def find_short(s : String) : Int32\n  # your code here\n  i = 2147483647_i32\n  s.split(\" \").each do |w|\n    if w.size < i\n      i = w.size\n    end\n  end\n  i\n  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47367,"user_id":50,"body":"def find_short(s : String) : Int32\n  return s.split(\" \").map{|x| x.size}.min\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47368,"user_id":null,"body":"def find_short(s : String) : Int32\n  s.split.map(&.size).min\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47369,"user_id":1072,"body":"def find_short(s : String) : Int32 s.split.map{|a| a.size}.min end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47370,"user_id":1474,"body":"def find_short(s)\n  s.split.min_by { |w| w.size }.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57cf3dad05c186ba22000348":[{"id":47371,"user_id":null,"body":"def decode_resistor_colors(bands)\n  c = [\"black\", \"brown\", \"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"violet\", \"gray\", \"white\", \"silver\", \"gold\"]\n  r = bands.split.map{|w|c.index(w).not_nil!}\n  v = (r[0]*10+r[1])*10**r[2]\n  s = v>=1000000 ? v%1000000==0 ? \"#{v\/1000000}M\" : \"#{v\/1000000.0}M\" : v>=1000 ? v%1000==0 ? \"#{v\/1000}k\" : \"#{v\/1000.0}k\" : v\n  return r.size>3 ? r[3] == 10 ? \"#{s} ohms, 10%\" : \"#{s} ohms, 5%\" : \"#{s} ohms, 20%\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47372,"user_id":1828,"body":"def decode_resistor_colors(bands)\n  b = bands.split.push(\"none\")\n  band = {\"black\": 0, \"brown\": 1, \"red\": 2, \"orange\": 3, \"yellow\": 4, \"green\": 5, \"blue\": 6, \"violet\": 7, \"gray\": 8, \"white\": 9}\n  pers = {\"none\": 20, \"silver\": 10, \"gold\": 5}\n  k,l,m = b[0..2].map{|i| band[i]}\n  j,s,d = (k*10+l)*10**m, 1000, 1000000\n  \"#{j >= d ? \"#{j%d == 0 ? (j\/d) : j.fdiv(d)}M\" : j >= s ? \"#{j%s == 0 ? (j\/s) : j.fdiv(s)}k\" : j} ohms, #{pers[b[3]]}%\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47373,"user_id":null,"body":"def decode_resistor_colors(bands)\n  code  = %w[black brown red orange yellow green blue violet gray white]\n  bands = bands.split\n  res = \"#{code.index(bands[0])}#{code.index(bands[1])}\".to_i * (10 ** (code.index(bands[2]) || 0 ))\n  per = bands.size > 3 ? bands[3] == \"gold\" ? \"5%\" : \"10%\" : \"20%\"\n\n  if res < 1_000\n    \"#{res} ohms, #{per}\"\n  elsif res < 1_000_000\n    r = (res \/ 1_000.0).round(5)\n    r = r.to_i if r == r.to_i\n    \"#{r}k ohms, #{per}\"\n  else\n    r = (res \/ 1_000_000.0).round(6)\n    r = r.to_i if r == r.to_i\n    \"#{r}M ohms, #{per}\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47374,"user_id":1474,"body":"def index(colour)\n  cc = %w[black brown red orange yellow green blue violet gray white]\n  cc.index(colour) || 0\nend\n\ndef decode_resistor_colors(bands)\n  ar = bands.split\n  ohms = index(ar[0]) * 10 + index(ar[1])\n  ohms *= 10 ** index(ar[2])\n  tol = ar.size > 3 ? (ar[3] == \"gold\" ? 5 : 10) : 20\n  ohms = if ohms >= 1000000\n    tmp = ohms \/ 1000000.0\n    (tmp.to_i == tmp ? tmp.to_i : tmp).to_s + 'M'\n  elsif ohms >= 1000\n    tmp = ohms \/ 1000.0\n    (tmp.to_i == tmp ? tmp.to_i : tmp).to_s + 'k'\n  else\n    ohms.to_s\n  end\n  ohms + \" ohms, \" + tol.to_s + \"%\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47375,"user_id":null,"body":"def decode_resistor_colors(bands)\n    assoc = {\n        \"black\" => 0, \"brown\" => 1, \"red\" => 2,\n        \"orange\" => 3, \"yellow\" => 4, \"green\" => 5,\n        \"blue\" => 6, \"violet\" => 7, \"gray\" => 8, \"white\" => 9,\n        \"gold\" => -5, \"silver\" => -10\n    }\n    code = bands.split(\" \").map { |w| assoc[w] }\n    if code.size == 3\n        code << -20\n    end\n    res = (code[0]*10 + code[1]) * 10**code[2]\n    err = -code[3]\n    if res >= 1_000_000\n        pow = \"M\"\n        res \/= 1_000_000.0\n    elsif res >= 1_000\n        pow = \"k\"\n        res \/= 1_000.0\n    else\n        pow = \"\"\n    end\n    if res == res.to_i\n        res = res.to_i\n    end\n    \"#{res}#{pow} ohms, #{err}%\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47376,"user_id":863,"body":"enum Band\n Black\n Brown\n Red\n Orange\n Yellow\n Green\n Blue\n Violet\n Gray\n White\nend\n\nenum Tolerance\n  Gold = 5\n  Silver = 10\n  None = 20\nend\n\nstruct Int\n  THOUSAND = 1000\n  MILLION = 1_000_000\n  def humanize\n    case self\n    when 0...THOUSAND\n      to_s\n    when THOUSAND...MILLION\n      \"%f\".%(self \/ THOUSAND.to_f).sub(\/\\.?0+$\/, \"\") + \"k\"\n    when .>= MILLION\n      \"%f\".%(self \/ MILLION.to_f).sub(\/\\.?0+$\/, \"\") + \"M\"\n    end\n  end\nend\n\ndef parse_bands(bands)\n  _, bs, tol = bands.match(\/^([\\w\\s]+?)(gold|silver|$)\/).not_nil!\n  arr = bs.strip.split\n  exponent = Band.parse(arr.pop).value\n  # this should be to_i64 but the tests require crazy overflow to work\n  coefficient = arr.join {|e| Band.parse(e).value }.to_i\n  tolerance = Tolerance.parse(tol.empty? ? \"None\" : tol).value\n  [coefficient, exponent, tolerance]\nend\n\ndef decode_resistor_colors(bands)\n  coeff, exp, tol = parse_bands(bands)\n  ohms = coeff.*(10**exp).humanize\n  \"%s ohms, %d%%\" % [ohms, tol]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57cf50a7eca2603de0000090":[{"id":47377,"user_id":53,"body":"def move_ten(st)\n  st.gsub{ |c| ((c.ord - 87) % 26 + 97).chr }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47378,"user_id":null,"body":"def move_ten(st)\n  st.chars.map{|c| ((c.ord - 87) % 26 + 97).chr}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47379,"user_id":null,"body":"def move_ten(st)\n  st.tr(\"abcdefghijklmnopqrstuvwxyz\",\"klmnopqrstuvwxyzabcdefghij\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47380,"user_id":421,"body":"def move_ten(st)\n  st.chars.map{|x| ((x.ord - 87) % 26 + 97).chr}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57cfd92c05c1864df2001563":[{"id":47381,"user_id":50,"body":"def vowel_back(st)\n  st.chars.map{|c| f(c)}.join\nend\ndef f(c)\n  \"co\".includes?(c) ? (((c.ord-98)%26)+97).chr : \"de\".includes?(c) ? 'a' : \"aeou\".includes?(c) ? ((c.ord-102)%26+97).chr : \"itfv\".includes?(c) ? c : (((c.ord-88)%26)+97).chr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47382,"user_id":527,"body":"def vowel_back(s)\n  s.tr(\"abcdefghijklmnopqrstuvwxyz\", \"vkbaafpqistuvwnyzabtpvfghi\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47383,"user_id":421,"body":"def vowel_back(st)\n  st.tr(\"abcdefghijklmnopqrstuvwxyz\", \"vkbaafpqistuvwnyzabtpvfghi\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57cfdf34902f6ba3d300001e":[{"id":47384,"user_id":53,"body":"def two_sort(ls)\n  ls.sort()[0].split(\"\").join(\"***\")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47385,"user_id":null,"body":"def two_sort(s)\n  s.sort.sort.first.chars.join(\"***\")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47386,"user_id":null,"body":"def two_sort(s)\n  s.sort[0].split(\"\").join(\"***\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47387,"user_id":null,"body":"def two_sort(s)\n  s.min.chars.join(\"***\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47388,"user_id":null,"body":"def two_sort(s)\n  s.sort!.first.chars.join(\"***\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47389,"user_id":527,"body":"def two_sort(ss : Iterable(String)) : String\n  ss.min.each_char.join(\"***\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47390,"user_id":527,"body":"def two_sort(ss)\n  ss.min.chars.join(\"***\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47391,"user_id":421,"body":"def two_sort(s)\n  s.sort[0].chars.join(\"***\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57cff961eca260b71900008f":[{"id":47392,"user_id":50,"body":"def is_vow(a)\n  a.map{ |x| ['a', 'e', 'i', 'o', 'u'].includes?(x.chr) ? x.chr : x }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47393,"user_id":1474,"body":"def is_vow(a)\n  vowels = ['a', 'e', 'i', 'o', 'u'].map(&.ord)\n  a.map { |i| vowels.includes?(i) ? i.chr : i }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47394,"user_id":492,"body":"def is_vow(a)\n  a.map{|ch| [97,101,105,111,117].includes?(ch.to_i) ? ch.chr : ch}\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47395,"user_id":492,"body":"def is_vow(a)\n    chs = [97, 101, 105, 111, 117]\n    arr = Array(Int32|Char).new\n    i = 0\n    loop do\n        n = a[i]\n        if chs.includes?(n)\n            n = n.chr\n            puts n\n        end\n        arr << n\n        if i >= a.size - 1\n             break\n        end\n        i += 1\n    end\n    arr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47396,"user_id":53,"body":"def is_vow(a)\n  a.map{|c|[97,101,105,111,117].includes?(c.to_i)?c.chr : c}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47397,"user_id":421,"body":"def is_vow(a)\n  a.map{|x| [97, 101, 105, 111, 117].includes?(x) ? x.chr : x}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57d001b405c186ccb6000304":[{"id":47398,"user_id":1474,"body":"def i_tri(s)\n  d = 140.6 - s\n  if s == 0\n    \"Starting Line... Good Luck!\"\n  elsif s <= 2.4\n    {\"Swim\": \"%0.2f to go!\" % d}\n  elsif s <= 114.4\n    {\"Bike\": \"%0.2f to go!\" % d}\n  elsif s < 130.6\n    {\"Run\": \"%0.2f to go!\" % d}\n  elsif s < 140.6\n    {\"Run\": \"Nearly there!\"}\n  else\n    \"You\\'re done! Stop running!\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47399,"user_id":421,"body":"def i_tri(s)\n dist = (140.60 - s).round(2)\n if s.zero? \n  \"Starting Line... Good Luck!\"\n elsif s < 2.4\n  {\"Swim\": \"%.2f to go!\" %dist}\n elsif s < 114.4 \n  {\"Bike\": \"%.2f to go!\" %dist}\n elsif s < 130.6\n  {\"Run\": \"%.2f to go!\" %dist}\n elsif s < 140.6 \n  {\"Run\": \"Nearly there!\"}\n else \n  \"You're done! Stop running!\"\n end   \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47400,"user_id":1624,"body":"def i_tri(s)\n  total = 140.6\n  remaining = \"%.2f to go!\" % (total - s)\n  if s == 0\n    \"Starting Line... Good Luck!\" \n  elsif s < 2.4\n    {\"Swim\": remaining}\n  elsif s < 114.4\n    {\"Bike\": remaining}\n  elsif s < 130.6\n    {\"Run\": remaining}\n  elsif s < total\n    {\"Run\": \"Nearly there!\"}\n  else\n    \"You're done! Stop running!\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47401,"user_id":1375,"body":"def i_tri(s)\n  return \"Starting Line... Good Luck!\" if s == 0\n  \n  left = 112 + 26.2 + 2.4 - s\n  \n  if s <= 2.4\n    { \"Swim\": \"%.2f to go!\" % left }\n  elsif s <= 2.4 + 112\n    { \"Bike\": \"%.2f to go!\" % left }\n  elsif s <= 2.4 + 112 + 26.2\n    if left <= 10\n      { \"Run\": \"Nearly there!\" }\n    else \n      { \"Run\": \"%.2f to go!\" % left }\n    end\n  else\n    \"You're done! Stop running!\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47402,"user_id":null,"body":"def i_tri(s)\n  distance_remaining = ((2.4 + 112 + 26.2) - s)\n  if s == 0\n    \"Starting Line... Good Luck!\"\n  elsif s <= 2.4\n    {\"Swim\": \"#{distance_remaining}0 to go!\"}\n  elsif s <= 114.4\n    {\"Bike\": \"#{distance_remaining}0 to go!\"}\n  elsif s <= 130.6\n    {\"Run\": \"#{distance_remaining}0 to go!\"}\n  elsif s <= 140.6\n    {\"Run\": \"Nearly there!\"}\n  else\n    \"You're done! Stop running!\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47403,"user_id":1072,"body":"def i_tri(s) s==0 ? \"Starting Line... Good Luck!\" : s<=2.4 ? {\"Swim\": \"#{\"%.2f\" % (140.6-s)} to go!\"} : s<=114.4 ? {\"Bike\": \"#{\"%.2f\" % (140.6-s)} to go!\"} : s<=130.6 ? {\"Run\": \"#{\"%.2f\" % (140.6-s)} to go!\"} : s<=140.6 ? {\"Run\": \"Nearly there!\"} : \"You're done! Stop running!\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57d06663eca260fe630001cc":[{"id":47404,"user_id":1474,"body":"ONE = \"abdegopqADOPQR\"\nTWO = 'B'\n\ndef olympic_ring(string)\n  score = (string.each_char.reduce(0) { |s, c| s + (ONE.includes?(c) ? 1 : c == TWO ? 2 : 0) } \/ 2).floor\n  score > 3 ? \"Gold!\" : score == 3 ? \"Silver!\" : score == 2 ? \"Bronze!\" : \"Not even a medal!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47405,"user_id":null,"body":"def olympic_ring(string)\n  score = string.chars.sum{|c| (\"abdegopqABDOPQR\".includes?(c) ? 1 : 0) + (c == 'B' ? 1 : 0)} \/\/ 2\n  if score <= 1\n    \"Not even a medal!\"\n  elsif score == 2\n    \"Bronze!\"\n  elsif score == 3\n    \"Silver!\"\n  else\n    \"Gold!\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47406,"user_id":527,"body":"def olympic_ring(string)\n  case (string.count(\"ABDOPQRabdegopq\") + string.count('B')) \/\/ 2\n    when 0..1 then \"Not even a medal!\"\n    when 2 then \"Bronze!\"\n    when 3 then \"Silver!\"\n    else \"Gold!\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47407,"user_id":421,"body":"def olympic_ring(string)\n  s = {'a'=> 1, 'b'=> 1, 'd'=> 1, 'p'=> 1, 'q'=> 1, 'e' => 1, 'o'=> 1, 'g'=> 1, 'A'=> 1, 'D' => 1, 'O'=> 1, \n    'P'=> 1, 'Q'=> 1, 'R'=> 1, 'B'=> 2}\n  t = string.chars.sum{|x| s.fetch(x, 0)} \/\/ 2\n  t <= 1 ? \"Not even a medal!\" : t == 2 ? \"Bronze!\" : t == 3 ? \"Silver!\" : \"Gold!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57d1f36705c186d018000813":[{"id":47408,"user_id":421,"body":"def gordon(a)\n  a.upcase.tr(\"AEIOU\", \"@****\").split.map{|x| x + \"!!!!\"}.join \" \"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47409,"user_id":53,"body":"def gordon(a)\n  a.upcase\n   .gsub(\/[A]\/, {\"A\": \"@\"})\n   .gsub(\/[EOUI]\/, {\"E\": \"*\", \"O\": \"*\", \"U\": \"*\", \"I\": \"*\"})\n   .split(\" \")\n   .join(\"!!!! \") + \"!!!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57d27a0a26427672b900046f":[{"id":47410,"user_id":421,"body":"def duck_shoot(ammo, aim, ducks)\n  c = (ammo * aim).floor\n  while c > 0\n      ducks = ducks.sub('2', 'X')\n      c -= 1\n  end\n  ducks\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47411,"user_id":null,"body":"def duck_shoot(ammo : Int, aim : Float, ducks : String) : String\n  accurate_shots = (ammo * aim).floor\n  \n  while accurate_shots > 0\n    ducks = ducks.sub(\"2\", \"X\")\n    accurate_shots -= 1\n  end\n  \n  ducks\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47412,"user_id":null,"body":"def duck_shoot(ammo, aim, ducks)\n  (ammo*aim).to_i.times{ducks = ducks.sub '2', 'X'}\n  ducks\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47413,"user_id":1624,"body":"def duck_shoot(ammo, aim, ducks)\n  hits = (ammo*aim).floor.to_i\n  hits.times{\n    ducks = ducks.sub(\"2\", \"X\")\n  }\n  ducks\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47414,"user_id":1072,"body":"def duck_shoot(ammo, aim, ducks) ammo*aim<1 ? ducks : duck_shoot(ammo*aim-1, 1, ducks.sub(\"2\",\"X\")) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47415,"user_id":1072,"body":"def duck_shoot(ammo, aim, ducks) ammo*aim<1 ? ducks : duck_shoot(ammo*aim-1, 1, ducks.sub(\"2\",\"X\")) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57d532d2164a67cded0001c7":[{"id":47416,"user_id":421,"body":"def histogram(results)\n   results.map_with_index(1){|x, i| \"#{i}|#{x.zero? ? \"\" : \"#\" * x + \" \" + x.to_s}\n\"}.reverse().join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47417,"user_id":1624,"body":"def histogram(results)\n  results.map_with_index{|c,i|\n    if c == 0\n      \"#{i+1}|\n\"\n    else\n     \"#{i+1}|#{\"#\" * c} #{c}\n\"\n    end\n  }.reverse.join\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47418,"user_id":1828,"body":"def histogram(results)\n  results.each_with_index(1).to_a.map{|x,y| \"#{y}|#{\"#\"*x}#{x == 0 ? \"\" : \" \"+x.to_s}\n\"}.reverse.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47419,"user_id":759,"body":"def histogram(results)\n  results.reverse.map_with_index { |n, i| \"#{results.size - i}|#{n != 0 ? \"#{\"#\" * n} #{n}\" : \"\"}\" }.join(\"\n\") + \"\n\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47420,"user_id":1750,"body":"def histogram(results)\n  results\n    .each_with_index(1)\n    .to_a\n    .map do |result, index|\n      prefix = \"#{index}|\"\n      hashes = \"#\" * result\n      body = result > 0 ? hashes + \" \" + result.to_s : \"\"\n      prefix + body +  \"\n\"\n    end\n    .reverse\n    .join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47421,"user_id":1750,"body":"def histogram(results)\n  (1..6)\n    .map do |n|\n      result = results[n - 1]\n      \"#{n}|#{result > 0 ? (\"#\" * result) + \" \" + result.to_s : \"\"}\n\"\n    end\n    .reverse\n    .join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47422,"user_id":null,"body":"def histogram(results)\n  histogram = results.reverse.map_with_index do |result, idx|\n    \"#{6 - idx}|#{\"#\" * result}#{\" \" + result.to_s if result != 0}\n\"\n  end\n  histogram.join(\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47423,"user_id":null,"body":"def histogram(results)\n  output = \"\"\n  results.reverse.each_with_index do |count,side|\n    output += \"#{6-side}|#{(count && count > 0) ? \"#\"*count + \" #{count}\" : \"\"}\n\"\n  end\n  output\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47424,"user_id":null,"body":"def histogram(results)\n\tstring = \"\"\n  size = results.size\n  \n  results.reverse.each_with_index do |n, index|\n    string += \"#{size - index}|\"\n    \n  \tn.times do\n    \tstring += \"#\"\n    end\n    \n    if n > 0\n    \tstring += \" #{n}\"\n    end\n    \n    string += \"\n\"\n  end\n  \n  return string\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47425,"user_id":null,"body":"def histogram(results)\n  chaine = \"\"\n  i = 1\n  results.each do |x|\n    if (x != 0)\n      chaine = i.to_s + \"|\" + \"#\" * x + \" \" + x.to_s + \"\n\" + chaine\n    else\n      chaine = i.to_s + \"|\" + \"#\" * x + \"\n\" + chaine\n    end\n    i += 1\n  end\n  return chaine\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57d5e850bfcdc545870000b7":[{"id":47426,"user_id":421,"body":"def dead_ant_count(ants)\n  if ants.nil? || ants.empty?\n    return 0\n  else\n    s = ants.gsub(\/ant\/, \"\").gsub(\/[^ant]\/, \"\")\n    [s.count('a'), s.count('n'), s.count('t')].max\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47427,"user_id":53,"body":"def dead_ant_count(xs)\n  return 0 if xs.nil?\n  w,a,n,t,ant = xs.size,0,0,0,0\n  (0...w).each{|i|\n    a+=1 if xs[i]=='a'\n    n+=1 if xs[i]=='n'\n    t+=1 if xs[i]=='t'\n    ant+=1 if i<w-2 && xs[i]=='a' && xs[i+1]=='n' && xs[i+2]=='t'\n  }\n  [a,n,t].max-ant\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47428,"user_id":168,"body":"def dead_ant_count(ants)\n  ants ||= \"\"\n  \"ant\".chars.map { |c| ants.count c }.max - ants.scan(\/ant\/).size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47429,"user_id":50,"body":"def dead_ant_count(ants)\n  a=0\n  n=0\n  t=0\n  (ants||\"\").gsub(\/ant\/,\"\").chars.each do |c|\n      if c == 'a'\n          a += 1\n       elsif c == 'n'\n          n += 1\n       elsif c == 't'\n          t += 1\n       end\n  end\n  [a,n,t].max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47430,"user_id":null,"body":"def dead_ant_count(ants)\n  return 0 if ants.nil?\n  ara = 0\n  arr = [] of Char\n  (0..ants.size - 1).each do |x|\n    case ants[x]\n    when 'a'\n      if x == ants.size - 1 || x == ants.size - 2\n        arr << ants[x]\n      else\n        arr << ants[x] unless ants[x + 1] == 'n' && ants[x + 2] == 't'\n      end\n    when 'n' \n      if x == ants.size - 1 || x == 0\n        arr << ants[x] \n      else\n        arr << ants[x] unless ants[x + 1] == 't' && ants[x - 1] == 'a'\n      end\n    when 't' \n      if x < 2\n        arr << ants[x] \n      else\n        arr << ants[x] unless ants[x - 1] == 'n' && ants[x - 2] == 'a'\n      end\n    end \n  end\n  arr.empty? ? ara : arr.map {|x| [x,arr.count(x)]}.to_h.each {|k,v| ara = v.as(Int32) if v.as(Int32) > ara}; ara\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47431,"user_id":527,"body":"def dead_ant_count(ants : Nil) : Int32\n  0\nend\n\ndef dead_ant_count(ants : String) : Int32\n  bits = ants.gsub(\"ant\", \"\")\n  %w(a n t).max_of{ |c| bits.count(c) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47432,"user_id":527,"body":"def dead_ant_count(ants)\n  ants.nil? ? 0 : _dead_ant_count(ants)\nend\n\ndef _dead_ant_count(ants)\n  bits = ants.gsub(\"ant\", \"\")\n  %w(a n t).max_of{ |c| bits.count(c) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47433,"user_id":null,"body":"def dead_ant_count(ants) \n  return 0\nend\n\ndef dead_ant_count(ants : String)\n  newAnts : String =  ants.gsub(\"ant\", \"\")\n  \n  counted_letters =  [ newAnts.count(\"a\"), newAnts.count(\"n\"), newAnts.count(\"t\")]\n  \n  return counted_letters.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47434,"user_id":1072,"body":"def dead_ant_count(ants) s=!ants ? \"\" : ants.gsub(\/ant|[^ant]\/,\"\"); !ants ? 0 : [\"a\",\"n\",\"t\"].map{|l| s.count(l)}.max end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57de78848a8b8df8f10005b1":[{"id":47435,"user_id":421,"body":"def how_much_coffee(events)\n  total = events.map{|x| x =~ \/^(cw|dog|cat|movie)$\/ ? 1 : x =~ \/^(CW|DOG|CAT|MOVIE)$\/ ? 2 : 0}.sum\n  total <= 3 ? total : \"You need extra sleep\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47436,"user_id":53,"body":"def how_much_coffee(xs, m=0)\n  ys = [\"cw\", \"cat\", \"dog\", \"movie\"]\n  xs.each{|x|\n    m += 1 if ys.includes?(x)\n    m += 2 if ys.includes?(x.downcase) && !ys.includes?(x)\n  }\n  m<4 ? m : \"You need extra sleep\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47437,"user_id":null,"body":"def how_much_coffee(events)\n  n = events.reduce (0) {|sum, e| sum + (e=~\/^(cw|cat|dog|movie)$\/i ? (e.downcase==e ? 1: 2): 0)}\n  n>3? \"You need extra sleep\": n\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47438,"user_id":null,"body":"def how_much_coffee(events)\n  night_time_events = [\"cw\", \"dog\", \"cat\", \"movie\"]\n  needed_coffee = events\n                    .select{|event| night_time_events.includes? event.downcase}\n                    .map{|event| event == event.upcase ? 2 : 1}\n                    .sum\n  needed_coffee > 3 ? \"You need extra sleep\" : needed_coffee\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47439,"user_id":1624,"body":"def how_much_coffee(events)\n  e = events.map do |ev|\n    case ev\n    when \"cat\", \"dog\", \"cw\", \"movie\"\n      1\n    when \"CAT\", \"DOG\", \"CW\", \"MOVIE\"\n      2\n    else\n      0\n    end\n  end.sum\n\n  if e > 3\n    \"You need extra sleep\"\n  else\n    e\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47440,"user_id":492,"body":"def how_much_coffee(events)\n  cnt = 0\n  events.each do |event|\n    next unless event =~ \/^(cw|dog|cat|movie)$\/i \n    cnt += 1 if event == event.downcase\n    cnt += 2 if event == event.upcase\n    return \"You need extra sleep\" if cnt > 3\n  end\n  cnt\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47441,"user_id":2986,"body":"def how_much_coffee(events)\n  know_events=[\"cw\",\"dog\",\"cat\",\"movie\"]\n  \n  c_events = [] of String\n  events.each do |e|\n    c_events << e if know_events.includes?(e.downcase)\n  end\n  \n  count = 0\n  c_events.each do |e|\n    count += e.downcase == e ? 1 : 2\n  end\n  count > 3 ? \"You need extra sleep\" : count\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57e3f79c9cb119374600046b":[{"id":47442,"user_id":null,"body":"def hello(name = \"World\")\n  name == \"\" ? \"Hello, World!\" : \"Hello, #{name.downcase.capitalize}!\"\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47443,"user_id":527,"body":"def hello(name : String? = nil) : String\n  \"Hello, #{name.nil? || name.empty? ? \"World\" : name.capitalize}!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47444,"user_id":null,"body":"def hello(name = \"World\")\n  if name && name.size > 0\n    correctedName = name[0].upcase() + name[1..-1].downcase()\n    return \"Hello, #{correctedName}!\"\n  else\n    return \"Hello, World!\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47445,"user_id":53,"body":"def hello(name=\"\")\n  name = name.capitalize()\n  if name.size == 0\n    \"Hello, World!\"\n  else\n    \"Hello, #{name}!\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47446,"user_id":421,"body":"def hello(name = \"\")\n  \"Hello, #{name != \"\" ? name.capitalize : \"World\"}!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47447,"user_id":null,"body":"def hello(name = nil)\n  \"Hello, #{name.nil? || name.size == 0 ? \"World\" : name.capitalize}!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47448,"user_id":1624,"body":"def hello(name=\"\")\n  name = \"World\" if name == \"\"\n  \"Hello, #{name.capitalize}!\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47449,"user_id":null,"body":"def hello(name=\"\")\n  if name == \"\"\n      \"Hello, World!\"\n  else\n      \"Hello, #{name.capitalize}!\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47450,"user_id":759,"body":"def hello(name = \"World\")\n  \"Hello, #{name.empty? ? \"World\" : name.capitalize}!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57e6bcbd684e570c6700021c":[{"id":47451,"user_id":1153,"body":"def hex_codes(color_code)\n  r, g, b = color_code[1..2], color_code[3..4], color_code[5..6]\n  if !(r > b && g > b)\n    return color_code\n  end\n  r, b, g = [r, g, b].sort\n  return \"#\" + r + g + b\nend\n\ndef yellow_be_gone(color_name_or_code)\n  name_replacements = { \"gold\" => \"ForestGreen\", \"khaki\" => \"LimeGreen\", \"lemonchiffon\" => \"PaleGreen\", \"lightgoldenrodyellow\" => \"SpringGreen\", \"lightyellow\" => \"MintCream\", \"palegoldenrod\" => \"LightGreen\", \"yellow\" => \"Lime\" }\n  return color_name_or_code[0] == '#' ? hex_codes(color_name_or_code) : name_replacements.fetch(color_name_or_code.downcase, color_name_or_code)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57e76bc428d6fbc2d500036d":[{"id":47452,"user_id":645,"body":"def string_to_array(str)\n  str.split(\" \")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47453,"user_id":812,"body":"def string_to_array(string)\n  string.split(\" \")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47454,"user_id":null,"body":"def string_to_array(str)\n  i = 0\n  last_index = 0\n  result = [] of String\n  \n  while i < str.size\n    if str[i, 1] == \" \"\n      result.push(str[last_index, i - last_index])\n      last_index = i + 1\n    end\n    i += 1\n  end\n\n  result.push(str[last_index, i - last_index])\n    \n  return result\n    \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47455,"user_id":null,"body":"def string_to_array(str)\n  return str.split(\" \");\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47456,"user_id":53,"body":"def string_to_array(s)\n  return s.split()\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47457,"user_id":48,"body":"def string_to_array(s)\n  s.split\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47458,"user_id":null,"body":"def string_to_array(str)\n  str.split(\/\\s+\/)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47459,"user_id":527,"body":"def string_to_array(str : String) : Array(String)\n  str.split\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57e8c68c97a05990b10000c3":[{"id":47460,"user_id":421,"body":"def collatz(n)\n  count = 1\n  while n != 1\n    count += 1\n    n = (n % 2 == 0 ? n \/ 2 : n * 3 + 1)\n  end\n  count\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47461,"user_id":53,"body":"def collatz(n, count=0)\n  return count + 1 if n <= 1\n  n = n % 2 == 0 ? n >> 1 : n * 3 + 1\n  collatz(n, count + 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47462,"user_id":1624,"body":"def collatz(n)\n  return 1 if n == 1\n  n = if n % 2 == 0\n        n \/ 2\n      else\n        n * 3 + 1\n      end\n  collatz(n) + 1\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47463,"user_id":null,"body":"def collatz(n)\n  n>1? 1+collatz(n%2==0? n\/2: n*3+1): 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47464,"user_id":null,"body":"def collatz(n)\n  if n == 1\n    1\n  elsif n.even?\n    1 + collatz(n \/\/ 2)\n  else\n    1 + collatz(3*n + 1)\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47465,"user_id":null,"body":"def collatz(n)\n  if n == 1\n    return 1\n  else\n    return 1 + collatz(n % 2 == 0 ? n \/ 2 : n * 3 + 1)\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47466,"user_id":527,"body":"def collatz(n, count = 1)\n  return count if n == 1\n  n = if n % 2 == 0\n        n \/ 2\n      else\n        n * 3 + 1\n      end\n  collatz n, count + 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47467,"user_id":1403,"body":"def collatz(n)\n    x = 1\n    until n == 1\n        x += 1\n        n = (n % 2 == 0 ? n \/ 2 : (3 * n) + 1)\n    end\n    x\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47468,"user_id":3325,"body":"def collatz(n, count = 1)\n  return count unless n > 1\n  n = if n % 2 == 0\n        n \/ 2\n      else\n        n * 3 + 1\n      end\n  collatz n, count + 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57e90bcc97a0592126000064":[{"id":47469,"user_id":421,"body":"def sea_sick(sea)\n  sea.chars.each_cons(2).count{|(x, y)| x != y}.fdiv(sea.size) > 0.2 ? \"Throw Up\" : \"No Problem\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47470,"user_id":1474,"body":"def sea_sick(sea)\n  c = sea.scan(\/_~\/).size + sea.scan(\/~_\/).size\n  c > sea.size * 0.2 ? \"Throw Up\" : \"No Problem\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47471,"user_id":53,"body":"def sea_sick(s)\n  xs = s.chars\n  size = s.size\n  t = 0.2\n  peaks = 0\n  prev = nil\n  i = 0\n  while i < size\n    x = xs[i].to_s\n    if (x == \"~\" && prev == \"_\") || (prev == \"~\" && x == \"_\")\n      peaks = peaks + 1\n    end\n    if x == \"_\" || x == \"~\"\n      prev = x\n    end\n    i = i + 1\n  end\n  if peaks.to_f \/ size <= t\n    return \"No Problem\"\n  else\n    return \"Throw Up\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47472,"user_id":1072,"body":"def sea_sick(s) (s.scan(\"~_\")+s.scan(\"_~\")).size\/s.size.to_f>0.2 ? \"Throw Up\" : \"No Problem\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57e92812750fcc051800004d":[{"id":47473,"user_id":527,"body":"def pak(s : String) : String\n  s.split.join(\" pak \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47474,"user_id":2986,"body":"def pak(s)\n  s.strip.split(\" \").join(\" pak \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47475,"user_id":1072,"body":"def pak(s) s.split(\/ \/).join(\" pak \") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57e92e91b63b6cbac20001e5":[{"id":47476,"user_id":1474,"body":"def duty_free(price, discount, holiday_cost)\n  (holiday_cost \/ (price * discount \/ 100.0)).to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47477,"user_id":null,"body":"def duty_free(p, d, h)\n  (h \/ (p * (d \/ 100))).floor\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47478,"user_id":759,"body":"def duty_free(price, discount, holiday_cost)\n  (100 * holiday_cost \/ (price * discount)).floor\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47479,"user_id":53,"body":"def duty_free(price, discount, holiday_cost)\n  ((holiday_cost * 100) \/ (price * discount)).to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47480,"user_id":null,"body":"def duty_free(price, discount, holiday_cost)\n  100*holiday_cost\/\/price\/\/discount\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47481,"user_id":527,"body":"def duty_free(price, discount, holiday_cost)\n  holiday_cost * 100 \/\/ (price * discount)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47482,"user_id":421,"body":"def duty_free(price, discount, holiday_cost)\n  (holiday_cost \/ (price * discount \/ 100.0)).floor\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57ea0ee4491a151fc5000acf":[{"id":47483,"user_id":1072,"body":"def calculate_time(b,c) (1.3*b\/c).round(2) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47484,"user_id":168,"body":"def calculate_time(battery,charger)\n  (battery \/ charger * 1.3).round 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47485,"user_id":null,"body":"def calculate_time(battery, charger)\n  (1.3*battery\/charger).round 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47486,"user_id":1246,"body":"def calculate_time(battery,charger)\n  ((battery * 0.85) \/ charger +\n  (battery * 0.10) \/ (charger * 0.5) +\n  (battery * 0.05) \/ (charger * 0.2)).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47487,"user_id":1566,"body":"def calculate_time(battery,charger)\n  (battery*1.3\/charger).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57eadb7ecd143f4c9c0000a3":[{"id":47488,"user_id":null,"body":"def abbrev_name(name)\n  first, last = name.upcase.split\n  \"#{first[0]}.#{last[0]}\"\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47489,"user_id":1474,"body":"def abbrev_name(name)\n  name.split.map { |w| w[0].upcase }.join('.')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47490,"user_id":null,"body":"def abbrev_name(name)\n  name.split(\" \")[0][0].upcase + \".\" + name.split(\" \")[1][0].upcase\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47491,"user_id":null,"body":"def abbrev_name(name : String)\n  name.split.map(&.[0].upcase).join(\".\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47492,"user_id":null,"body":"def abbrev_name(name)\n  names = name.split(' ')\n  names[0][0].upcase + \".\" + names[1][0].upcase\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47493,"user_id":null,"body":"def abbrev_name(name)\n  splitted = name.split(\/\\s\/)\n  \"#{splitted[0][0].upcase}.#{splitted[1][0].upcase}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47494,"user_id":53,"body":"def abbrev_name(name)\n  names = name.upcase.split(\" \")\n  names[0][0] + \".\" + names[1][0]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47495,"user_id":null,"body":"def abbrev_name(name : String) : String\n  \"#{name.split(\" \")[0][0].upcase}.#{name.split(\" \")[1][0].upcase}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47496,"user_id":527,"body":"def abbrev_name(name : String) : String\n  name.split.map(&.[](0).upcase).join('.')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47497,"user_id":421,"body":"def abbrev_name(name)\n  name.split.map{|x| x[0].upcase}.join(\".\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57eae20f5500ad98e50002c5":[{"id":47498,"user_id":527,"body":"def no_space(x)\n  x.delete(' ')\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47499,"user_id":1072,"body":"def no_space(x) x.split(\" \").join(\"\") end","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47500,"user_id":null,"body":"def no_space(x)\n  x.chars.select{|i| !i.whitespace?}.join\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47501,"user_id":50,"body":"def no_space(x)\n  x.gsub(\/ \/,\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47502,"user_id":null,"body":"def no_space(x)\n  x.split.select {|e| e != ' '}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47503,"user_id":null,"body":"def no_space(x)\n  x.each_char.select { |c| c != ' ' }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47504,"user_id":null,"body":"def no_space(x)\n  x.gsub(\/\\s\/, \"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47505,"user_id":null,"body":"def no_space(x)\n  a = x.tr(\" \", \"\")\n  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47506,"user_id":null,"body":"def no_space(x)\n  x.tr(\" \", \"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47507,"user_id":null,"body":"def no_space(x)\n  return x.gsub(\" \", \"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57eae65a4321032ce000002d":[{"id":47508,"user_id":null,"body":"def fake_bin(s)\n  s.tr(\"01234\", \"0\").tr(\"56789\", \"1\")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47509,"user_id":null,"body":"def fake_bin(s)\n  s.gsub{ |n| n.to_i < 5 ? 0 : 1 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47510,"user_id":527,"body":"def fake_bin(s)\n  s.tr(\"0123456789\", \"0000011111\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47511,"user_id":null,"body":"def fake_bin(s)\n  s.bytes.map{|c| (c - 48)\/\/5}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47512,"user_id":50,"body":"def fake_bin(s)\n  s.chars.map{|d| d.to_i < 5 ? '0' : '1'}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47513,"user_id":null,"body":"def fake_bin(s)\n  s.gsub { |c| c < '5' ? 0 : 1 }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47514,"user_id":null,"body":"def fake_bin(s)\n  s.chars.map{|el| el.to_i < 5 ? \"0\" : \"1\"}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47515,"user_id":53,"body":"def fake_bin(s)\n  s.chars.map { |i| i < '5' ? '0' : '1' }.join(\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47516,"user_id":1474,"body":"def fake_bin(s)\n  s.tr(\"123456789\", \"000011111\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47517,"user_id":null,"body":"def fake_bin(s)\n  s.chars.map { |c| c.to_i < 5 ? '0' : '1' }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57eaeb9578748ff92a000009":[{"id":47518,"user_id":527,"body":"def sum_mix(x)\n  x.map(&.to_i).sum\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47519,"user_id":null,"body":"def sum_mix(x)\n  x.sum { |val| Int32.new val }\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47520,"user_id":421,"body":"def sum_mix(x)\n  x.reduce(0){|s, n| s += n.to_i}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47521,"user_id":null,"body":"def sum_mix(x)\n  x.map{|el| el.to_i}.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47522,"user_id":53,"body":"def sum_mix(xs)\n  xs.reduce(0){|x,y|x+y.to_i}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47523,"user_id":null,"body":"def sum_mix(x)\n  x.map{|i| i.to_i}.reduce{|a,i| i + a}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47524,"user_id":null,"body":"def sum_mix(x)\n  x.sum {|e| e.to_i}\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47525,"user_id":645,"body":"def sum_mix(x)\n  x.sum(&.to_i)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47526,"user_id":null,"body":"def sum_mix(x)\n  x = x.map { |element| element.to_i }\n  x.reduce(0) { |accum, element| accum + element }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47527,"user_id":null,"body":"def sum_mix(x)\n  # code here\n  x.sum(0) { |i| i.to_i }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57eaec5608fed543d6000021":[{"id":47528,"user_id":421,"body":"def div_con(x)\n  x.sum{|b| b.is_a?(String) || b.is_a?(Char) ? -b.to_i : b}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47529,"user_id":1474,"body":"def div_con(x)\n  x.sum { |i| i.is_a?(String) || i.is_a?(Char) ? -i.to_i : i }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47530,"user_id":null,"body":"def div_con(x)\n  x.reduce(0){|acc, n| n.is_a?(Number) ? acc + n : acc - n.to_i} \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47531,"user_id":1624,"body":"def div_con(a)\n  a.map do |n|\n    if n.is_a?(Int32)\n      n\n    else\n      -n.to_i \n    end\n  end.sum\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47532,"user_id":null,"body":"def div_con(x)\n  x.select(&.is_a? Number).map(&.to_i).sum - x.reject(&.is_a? Number).map(&.to_i).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47533,"user_id":527,"body":"def div_con(xs)\n  ns, ss = xs.partition(&.is_a?(Int)).map(&.map(&.to_i).sum)\n  ns - ss\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47534,"user_id":527,"body":"def div_con(xs)\n  ns, ss = xs.partition(&.is_a?(Number))\n  ns.map(&.to_i).sum - ss.map(&.to_i).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47535,"user_id":1403,"body":"def div_con(x)\n  x = x.partition { | i | i.is_a? Number }.map { | i | i.map { | j | j.to_i }.sum }\n  x[0] - x[1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47536,"user_id":2986,"body":"def div_con(x)\n  x.map{ |i|  i.class == Int32 ? i.to_i : -i.to_i }.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57eb8fcdf670e99d9b000272":[{"id":47537,"user_id":null,"body":"def high(words)\n  words.split.max_by { |word|\n    word.chars.sum { |c| c.ord - 96 }\n  }\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47538,"user_id":null,"body":"def high(words)\n  highest_word : String = \"\"\n  highest_score : Int32 = 0\n  words.split(\" \").each do |word|\n    if (score = word.codepoints.reduce(0){|sum, c| sum += c - 96}) && highest_score < score\n      highest_score = score\n      highest_word = word\n    end\n  end\n  highest_word\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47539,"user_id":50,"body":"def high(x)\n  max=0\n  res=\"\"\n  x.split.each do |w|\n    score=w.chars.map{|c| c.ord-96}.sum\n    if score>max\n      max=score\n      res=w\n    end\n end\n res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47540,"user_id":null,"body":"def high(words)\n  words.split.max_by { |word| word.chars.map { |c| c.ord - 96 }.sum }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47541,"user_id":null,"body":"def high(words)\n  words.split(\" \").max_by{|w| w.codepoints.sum(){ |i| i-96 }}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47542,"user_id":421,"body":"def high(words)\n  words.split.max_by{|x| x.chars.sum{|y| y.ord - 96}}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47543,"user_id":null,"body":"def high(words)\n  words.split.max_by { |w| w.chars.sum { |c| c - 'a' + 1 } }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47544,"user_id":492,"body":"def score_word(word)\n  word.chars.reduce(0) { |sum, ch| sum + (ch.ord - 96) }\nend\ndef high(x)\n  x.split.max_by { |w| score_word(w) }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47545,"user_id":null,"body":"def score(word)\n  word.chars.map(&.ord.- 96).sum\nend\ndef high(words)\n  words.split.max_by{|w| score(w)}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47546,"user_id":null,"body":"def score( word )\n   word.chars.map { |c| c.ord - 'a'.ord + 1 }.sum\nend\n\ndef high(words)\n  words.split.map { |w| [score(w), w] }.max_by { |p| p[0].to_i }[1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57eba158e8ca2c8aba0002a0":[{"id":47547,"user_id":null,"body":"def last(s)\n  s.split.sort_by(&.[-1])\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47548,"user_id":1474,"body":"def last(s)\n  s.split.sort_by { |w| w[-1] }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47549,"user_id":null,"body":"def last(s)\n  s.split.sort { |w1, w2| w1[-1] <=> w2[-1] }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47550,"user_id":421,"body":"def last(s)\n   s.split.sort_by{|s| s[-1]}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47551,"user_id":null,"body":"def last(s)\n  s.split.sort { |a, b| a.chars.last <=> b.chars.last }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47552,"user_id":1624,"body":"def last(s)\n  s.split.sort_by{|x| x[-1]}\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47553,"user_id":null,"body":"def last(s)\n  s.split(\" \").sort { |y, x| y[-1] <=> x[-1] }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47554,"user_id":null,"body":"def last(s)\n  s.split.sort_by{|w| w[w.size-1]}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47555,"user_id":527,"body":"def last(s)\n  s.split.each_with_index.to_a.sort_by{ |w, i| {w[-1], i} }.map(&.first)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47556,"user_id":1072,"body":"def last(s) s.split(\" \").sort{|a,b| a[-1] <=> b[-1]} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57ebaa8f7b45ef590c00000c":[{"id":47557,"user_id":1474,"body":"ALPHAS = ((1..26).map(&.to_s).reverse.zip('a'..'z') + [[\"27\", '!'], [\"28\", '?'], [\"29\", ' ']]).to_h\n\ndef switcher(arr)\n  arr.map{ |e| ALPHAS[e.to_s] }.join\nend\n\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47558,"user_id":null,"body":"def switcher(arr)\n  alphabet = \" ?!abcdefghijklmnopqrstuvwxyz\".reverse\n  arr.map{|n| alphabet[n.to_i - 1]}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47559,"user_id":421,"body":"def switcher(arr)\n   letters = \"zyxwvutsrqponmlkjihgfedcba!? \"\n   arr.map{|x| letters[x.to_i - 1]}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57ebdf1c2d45a0ecd7002cd5":[{"id":47560,"user_id":421,"body":"def inside_out(s)\n  s.split.map{|x| x.size > 3 ? x[0...x.size \/\/ 2].reverse + (x.size.odd? ? x[x.size \/\/ 2] + x[x.size \/\/ 2 + 1..-1].reverse : x[x.size \/\/ 2..-1].reverse) : x}.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57ec8bd8f670e9a47a000f89":[{"id":47561,"user_id":1474,"body":"def mouth_size(animal)\n  \/alligator\/i === animal ? \"small\" : \"wide\"\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47562,"user_id":null,"body":"def mouth_size(animal)\n  return animal.downcase() == \"alligator\" ? \"small\" : \"wide\"   \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47563,"user_id":76,"body":"def mouth_size(animal)\n  \/alligator\/i.match(animal) ? \"small\" : \"wide\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47564,"user_id":null,"body":"def mouth_size(animal)\n  # code here\n  if animal.downcase == \"alligator\"\n    return \"small\"\n  end\n  return \"wide\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47565,"user_id":1624,"body":"def mouth_size(animal)\n  case animal.downcase\n  when \"alligator\"\n    \"small\"\n  else\n    \"wide\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47566,"user_id":null,"body":"def mouth_size(animal)\n  animal.downcase.includes?(\"alligator\") ? \"small\" : \"wide\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47567,"user_id":573,"body":"def mouth_size(animal)\n  animal.downcase == \"alligator\" ? \"small\" : \"wide\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47568,"user_id":2986,"body":"def mouth_size(animal)\n  animal =~ \/alligator\/i ? \"small\" : \"wide\" \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57ecf6efc7fe13eb070000e1":[{"id":47569,"user_id":759,"body":"def outed(meet, boss)\n  (meet[boss] + meet.values.sum) \/ meet.size <= 5 ? \"Get Out Now!\" : \"Nice Work Champ!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47570,"user_id":421,"body":"def outed(meet, boss)\n  total = 1.0 * meet.keys.sum{|x| x == boss ? meet[x] * 2 : meet[x]} \/ meet.size\n  total <= 5 ? \"Get Out Now!\" : \"Nice Work Champ!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47571,"user_id":1072,"body":"def outed(meet, boss) meet.keys.reduce(0){|a,b| a+meet[b]*(b==boss ? 2 : 1)} \/ meet.size.to_f<=5 ? \"Get Out Now!\" : \"Nice Work Champ!\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47572,"user_id":1474,"body":"def outed(meet, boss)\n  rating = meet.reduce(0) { |s, (k, v)| s + (k == boss ? 2*v : v) } \/ meet.size\n  rating > 5 ? \"Nice Work Champ!\" : \"Get Out Now!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47573,"user_id":492,"body":"def outed(meet, boss)\n  res = 0\n  meet.each {|em, score| res += em.to_s == boss ? 2 * score : score }\n  if (res \/ meet.size <= 5) \"Get Out Now!\" else \"Nice Work Champ!\" end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47574,"user_id":1624,"body":"def outed(meet, boss)\n  total = meet.values.sum + meet[boss]\n  size = meet.size.to_f\n    \n  if total \/ size <= 5\n    \"Get Out Now!\"\n  else\n    \"Nice Work Champ!\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47575,"user_id":null,"body":"def outed(meet, boss)\n  happy_all = 0\n  meet.each do |x|\n    if x[0] == boss\n      happy_all += x[1] * 2\n      next\n    end\n    happy_all += x[1]\n  end\n  (happy_all.to_f32 \/ meet.size) <= 5 ? \"Get Out Now!\" : \"Nice Work Champ!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47576,"user_id":1768,"body":"def outed(x, y)\n  t = 0\n  x.each do |i,j|\n    if i == y\n      t += j * 2\n    else\n      t += j\n    end\n  end\n  t\/11.0 <= 5 ? \"Get Out Now!\" : \"Nice Work Champ!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47577,"user_id":2986,"body":"def outed(meet, boss)\n  total = 0 \n  meet.each { |k,v| total += k == boss ? 2 * v : v}\n  total.to_f  \/ meet.size <= 5 ? \"Get Out Now!\" : \"Nice Work Champ!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57ed30dde7728215300005fa":[{"id":47578,"user_id":492,"body":"def bump(x)\n  if x.count(\"n\").to_i  > 15 \n    \"Car Dead\" \n  else \"Woohoo!\" end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47579,"user_id":53,"body":"def bump(x)\n  x.chars.select{|e|e=='n'}.size <= 15 ? \"Woohoo!\" : \"Car Dead\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47580,"user_id":1624,"body":"def bump(x)\n  if x.count(\"n\") > 15\n    \"Car Dead\"\n  else\n    \"Woohoo!\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47581,"user_id":null,"body":"def bump(x)\n  if x.count('n') > 15 \n    return \"Car Dead\" \n  else\n    return \"Woohoo!\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47582,"user_id":527,"body":"def bump(x)\n  x.count('n') <= 15 ? \"Woohoo!\" : \"Car Dead\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47583,"user_id":2986,"body":"def bump(x)\n  x.count(\"n\") > 15 ? \"Car Dead\" : \"Woohoo!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57ed4cef7b45ef8774000014":[{"id":47584,"user_id":421,"body":"DICT = {\"accounts\" => 1, \"finance\" => 2, \"canteen\" => 10, \"regulation\"  => 3, \"trading\" => 6, \"change\"=> 6, \n        \"IS\"=> 8, \"retail\" => 5, \"cleaning\" => 4, \"pissing about\" => 25}\n\ndef boredom(staff)\n  score = staff.values.sum{|x| DICT[x]}\n  score <= 80 ?  \"kill me now\" : score < 100 ? \"i can handle this\" : \"party time!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47585,"user_id":1072,"body":"def boredom(s) r=s.values.reduce(0){|a,b| a+({\"accounts\"=>1,\"finance\"=>2,\"canteen\"=>10,\"regulation\"=>3,\"trading\"=>6,\"change\"=>6,\"IS\"=>8,\"retail\"=>5,\"cleaning\"=>4,\"pissing about\"=>25}[b]? || 0)}; r<=80 ? \"kill me now\" : r<100 ? \"i can handle this\" : \"party time!!\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47586,"user_id":50,"body":"D={\"accounts\"=> 1, \"finance\"=> 2, \"canteen\"=> 10, \"regulation\"=> 3, \"trading\"=> 6, \"change\"=> 6, \"IS\"=> 8, \"retail\"=> 5, \"cleaning\"=> 4, \"pissing about\"=> 25}\ndef boredom(staff)\n  score=staff.to_a.map{|_,v| D[v]}.sum\n  score>=100 ? \"party time!!\" : score>80 ? \"i can handle this\" : \"kill me now\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47587,"user_id":1624,"body":"BOREDOM = {\n  \"accounts\" => 1,\n  \"finance\" => 2,\n  \"canteen\" => 10,\n  \"regulation\" => 3,\n  \"trading\" => 6,\n  \"change\" => 6,\n  \"IS\" => 8,\n  \"retail\" => 5,\n  \"cleaning\" => 4,\n  \"pissing about\" => 25,\n}\n\ndef boredom(staff)\n  total = staff.values.map{|v| BOREDOM[v]}.sum\n  if total <= 80\n    \"kill me now\"\n  elsif total < 100\n    \"i can handle this\"\n  else\n    \"party time!!\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47588,"user_id":null,"body":"def boredom(staff)\n depts = {\"accounts\" => 1, \"finance\" => 2, \"canteen\" => 10, \"regulation\" => 3, \"trading\" => 6, \"change\" => 6, \"IS\" => 8, \"retail\" => 5, \"cleaning\" => 4, \"pissing about\" => 25}\n sum = 0\n staff.each_value{|v| sum += depts[v]}\n case\n when sum <= 79\n   return \"kill me now\"\n when sum < 100 && sum > 80\n    return \"i can handle this\"\n when sum > 100\n   return \"party time!!\"\n end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47589,"user_id":2986,"body":"def boredom(staff)\n  h_count = { \"accounts\": 1, \"finance\": 2, \"canteen\": 10, \"regulation\": 3, \"trading\": 6, \"change\": 6, \"IS\": 8, \"retail\": 5, \"cleaning\": 4, \"pissing about\":25 };\n  count   = 0;\n  staff.each do |k,v|\n    count += h_count[v.to_s]\n  end\n  if (count <=80)\n    return \"kill me now\"\n  elsif (count >= 100 )\n    return \"party time!!\"\n  else\n    return \"i can handle this\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57ed56657b45ef922300002b":[{"id":47590,"user_id":421,"body":"def broken(x)\n  x.tr(\"10\", \"01\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47591,"user_id":1375,"body":"def broken(str)\n  str.tr(\"10\", \"01\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47592,"user_id":1072,"body":"def broken(x) x.split(\"\").map{|a| a==\"1\" ? \"0\" : \"1\"}.join end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47593,"user_id":1624,"body":"def broken(x)\n  x.tr(\"01\", \"10\")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47594,"user_id":2986,"body":"def broken(x)\n x.split(\"\").map{ |c| c == \"1\" ? \"0\" : \"1\"}.join(\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57ed7214f670e99f7a000c73":[{"id":47595,"user_id":421,"body":"def ski_jump(mountain)\n  jump_length =  mountain.size * (mountain.size * 1.5) * 9 \/ 10.0\n  \"%.2f metres: \" %jump_length + \"#{jump_length < 10 ? \"He's crap!\" : jump_length <= 25 ? \"He's ok!\" : jump_length <= 50 ? \"He's flying!\" : \"Gold!!\"}\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47596,"user_id":645,"body":"def ski_jump(x)\n  m = (x.size * x.size * 1.5 * 9) \/ 10\n  s = \"%.2f\" % m\n  case\n    when m > 50  then \"#{s} metres: Gold!!\"\n    when m >= 25 then \"#{s} metres: He's flying!\"\n    when m >= 10 then \"#{s} metres: He's ok!\"\n    else              \"#{s} metres: He's crap!\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47597,"user_id":1624,"body":"def ski_jump(mountain)\n  h = mountain.size\n  s = 1.5 * h\n  j = ((h * s * 9) \/ 10.0).round(2)\n  m = if j < 10\n    \"He's crap!\"\n  elsif j <= 25\n    \"He's ok!\"\n  elsif j <= 50\n    \"He's flying!\"\n  else\n    \"Gold!!\"\n  end\n  \"%.2f metres: %s\" % [j, m]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47598,"user_id":null,"body":"def ski_jump(mountain)\n  l = 1.35*(mountain.size)**2\n  \"%.2f metres: %s!\" % [l.round(2), l<10? \"He's crap\": l<=25? \"He's ok\": l<=50? \"He's flying\": \"Gold!\"]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47599,"user_id":null,"body":"def ski_jump(mountain)\n  l = 1.35*(mountain.size)**2\n  \"%.2f metres: %s\" % [l.round(2), l<10? \"He's crap!\": l<=25? \"He's ok!\": l<=50? \"He's flying!\": \"Gold!!\"]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47600,"user_id":null,"body":"def add_0_toend(value : Float)\n  s = value.to_s\n  p = s.partition(\/\\.\\d+\/) \n  p[1].size < 3 ? s.gsub(\/\\.\\d+\/, p[1] + \"0\") : s\nend\n\ndef jump_calculate(height : Int)\n  _speed = height * 1.5\n  jump_length = (height * _speed * 9)\/10\n  validate = jump_length.round(2)\nend\n\ndef ski_jump(mountain)\n  size = mountain.size\n  jump = jump_calculate size\n \n  if jump < 10\n    return \"#{add_0_toend jump} metres: He's crap!\"\n  end\n  if jump >= 10 && jump < 25\n    return \"#{add_0_toend jump} metres: He's ok!\"\n  end\n  if jump >= 25 && jump < 50\n    return \"#{add_0_toend jump} metres: He's flying!\"\n  end\n  if jump >= 50\n    return \"#{add_0_toend jump} metres: Gold!!\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47601,"user_id":2986,"body":"def ski_jump(mountain)\n  len = ((mountain.size * (mountain.size * 1.5) * 9)\/ 10)\n  len_str = sprintf(\"%.2f\", len)\n  if (len <= 10)\n    return \"#{len_str} metres: He's crap!\"\n  elsif (len > 10 && len <= 25)\n    return \"#{len_str} metres: He's ok!\"\n  elsif (len > 25 && len <= 50)\n    return \"#{len_str} metres: He's flying!\"\n  else\n    return \"#{len_str} metres: Gold!!\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57ee24e17b45eff6d6000164":[{"id":47602,"user_id":1474,"body":"def cat_mouse(x)\n  ci, mi = ['C', 'm'].map { |c| x.index(c) || 0 }\n  (ci-mi).abs > 4 ? \"Escaped!\": \"Caught!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47603,"user_id":527,"body":"def cat_mouse(x : String) : String\n  x.size <= 5 ? \"Caught!\" : \"Escaped!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47604,"user_id":421,"body":"def cat_mouse(x)\n  x.count('.') <= 3 ? \"Caught!\": \"Escaped!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57ee2a1b7b45efcf700001bf":[{"id":47605,"user_id":null,"body":"def cat_mouse(x,j)\n  c = x.index('C')\n  m = x.index('m')\n  d = x.index('D')\n  if c.nil?\n    \"boring without all three\"\n  elsif m.nil?\n    \"boring without all three\"\n  elsif d.nil?\n    \"boring without all three\"\n  elsif j < (c-m).abs\n    \"Escaped!\"\n  elsif (c < d && d < m) || (m < d && d < c)\n    \"Protected!\"\n  else\n    \"Caught!\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47606,"user_id":1624,"body":"def cat_mouse(x, j)\n  c = x.index(\"C\") || return \"boring without all three\"\n  d = x.index(\"D\") || return \"boring without all three\"\n  m = x.index(\"m\") || return \"boring without all three\"\n  d -= c\n  m -= c\n  if m < 0\n    m = -m\n    d = -d\n  end\n  if m > j+1\n    \"Escaped!\"\n  elsif m > d && d > 0\n    \"Protected!\"\n  else\n    \"Caught!\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47607,"user_id":1072,"body":"def cat_mouse(x,j) c=x.index('C') || -1; m=x.index('m') || -1; d=x.index('D') || -1; (c==-1 || m==-1 || d==-1) ? \"boring without all three\" : (c-m).abs>j+1 ? \"Escaped!\" : ((c>d && d>m) || (m>d && d>c)) ? \"Protected!\" : \"Caught!\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57ee31c5e77282c24d000024":[{"id":47608,"user_id":421,"body":"TASK = {\"kata\"=> 5, \"Petes kata\"=> 10, \"life\"=> 0, \"eating\"=> 1}\n\ndef paul(x)\n    score = x.sum{|a| TASK[a]}\n    return score < 40 ? \"Super happy!\" : score < 70 ? \"Happy!\" : score < 100 ? \"Sad!\" : \"Miserable!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47609,"user_id":1474,"body":"def paul(x)\n  score = x.reduce(0) do |s, w|\n    s + case w\n    when \"kata\" then 5\n    when \"Petes kata\" then 10\n    when \"life\" then 0\n    when \"eating\" then 1\n    else 0\n    end\n  end\n  if score >= 100\n    \"Miserable!\"\n  elsif score >= 70\n    \"Sad!\"\n  elsif score >= 40\n    \"Happy!\"\n  else\n    \"Super happy!\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47610,"user_id":null,"body":"TASK = {\"kata\"=> 5, \"Petes kata\"=> 10, \"life\"=> 0, \"eating\"=> 1} # lol broken kata i guess\ndef paul(x)\n  res = 0\n  x.each do |y|\n    case y\n      when \"kata\"\n        res += 5\n      when \"Petes kata\"\n        res += 10\n      when \"eating\"\n        res += 1\n    end\n  end\n  if res < 40\n    \"Super happy!\"\n  elsif res < 70 && res >= 40\n    \"Happy!\"\n  elsif res < 100 && res >= 70\n    \"Sad!\"\n  else\n    \"Miserable!\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57ee4a67108d3fd9eb0000e7":[{"id":47611,"user_id":421,"body":"def goose_filter(birds)\n  geese = [\"African\", \"Roman Tufted\", \"Toulouse\", \"Pilgrim\", \"Steinbacher\"]\n  birds.select{|x| !geese.includes? x}\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-28 17:26:46"},{"id":47612,"user_id":null,"body":"def goose_filter(birds : Array(String)) : Array(String)\n  geese = [\"African\", \"Roman Tufted\", \"Toulouse\", \"Pilgrim\", \"Steinbacher\"]\n  \n  birds - geese\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47613,"user_id":1624,"body":"def goose_filter(birds)\n  birds - [\"African\", \"Roman Tufted\", \"Toulouse\", \"Pilgrim\", \"Steinbacher\"]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47614,"user_id":null,"body":"def goose_filter(birds)\n  geese = [\"African\", \"Roman Tufted\", \"Toulouse\", \"Pilgrim\", \"Steinbacher\"]\n  birds.reject &->geese.includes?(String)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47615,"user_id":null,"body":"def goose_filter(birds)\n  geese = [\"African\", \"Roman Tufted\", \"Toulouse\", \"Pilgrim\", \"Steinbacher\"]\n  birds.reject{ |x| geese.includes? x }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47616,"user_id":null,"body":"def goose_filter(birds)\n  geese = [\"African\", \"Roman Tufted\", \"Toulouse\", \"Pilgrim\", \"Steinbacher\"]\n  res = [] of String\n  birds.each do |i|\n    if !i.in?(geese)\n      res << i\n    end\n  end\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47617,"user_id":null,"body":"def goose_filter(birds)\n  geese = [\"African\", \"Roman Tufted\", \"Toulouse\", \"Pilgrim\", \"Steinbacher\"]\n  birds.reject!{|b| geese.any?(b)}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47618,"user_id":53,"body":"def goose_filter(birds)\n  geese = [\"African\", \"Roman Tufted\", \"Toulouse\", \"Pilgrim\", \"Steinbacher\"]\n  birds.reject{ |i| geese.includes?(i) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47619,"user_id":1474,"body":"def goose_filter(birds)\n  geese = [\"African\", \"Roman Tufted\", \"Toulouse\", \"Pilgrim\", \"Steinbacher\"]\n  birds.reject { |b| geese.includes?(b) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47620,"user_id":null,"body":"def goose_filter(birds)\n  geese = [\"African\", \"Roman Tufted\", \"Toulouse\", \"Pilgrim\", \"Steinbacher\"]\n  birds.reject{|e| geese.includes?(e)}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57ee99a16c8df7b02d00045f":[{"id":47621,"user_id":1246,"body":"def flatten_and_sort(array)\n  array.flatten.sort\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47622,"user_id":null,"body":"def flatten_and_sort(array)\n  array.reduce [] of Int32 { |a, b| a + b }.sort\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47623,"user_id":null,"body":"def flatten_and_sort(array)\n  return array.compact!().flatten().sort!()\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47624,"user_id":null,"body":"def flatten_and_sort(array)\n  return array.flatten().sort()\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47625,"user_id":1768,"body":"def flatten_and_sort(a) \n  a.flatten.sort \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47626,"user_id":null,"body":"def flatten_and_sort(array)\n  array.flatten.sort!\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47627,"user_id":null,"body":"def flatten_and_sort(array)\n\tarray.flatten.sort { |x, y| x <=> y }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47628,"user_id":1072,"body":"def flatten_and_sort(arr) arr.flatten.sort end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57efa1a2108d3f73f60000e9":[{"id":47629,"user_id":421,"body":"def trim(beard)\n  beard[0..-2].map{|x| x.map{|y| y == \"J\" ? \"|\" : y}} + [beard[-1].map{\"...\"}]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47630,"user_id":1072,"body":"def trim(beard) beard[0...beard.size-1].map{|b| b.map{|a| a==\"J\" ? \"|\" : a}}+[beard[beard.size-1].map{|a| a=\"...\"}] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47631,"user_id":1624,"body":"def trim(beard)\n  beard[0..-2].map{|line| line.map{|u| u == \"J\" ? \"|\" : u}} +\n    [beard[-1].map{ \"...\" }]\nend\n  ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47632,"user_id":null,"body":"def trim(beard)\n  beard[0..-2].map(&.fill \"|\") + [beard.last.fill \"...\"]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47633,"user_id":null,"body":"def trim(beard)\n  beard[0..beard.size-2].map(&.fill \"|\") + [beard.last.fill \"...\"]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47634,"user_id":1750,"body":"def trim(beard)\n  beard.map_with_index { |row, index| row.fill(index == beard.size.pred ? \"...\" : \"|\") }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47635,"user_id":1403,"body":"def trim(beard)\n  beard[0...-1].each { | i | i.map! { \"|\" } }\n  beard[-1].map! { \"...\" }\n  beard\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47636,"user_id":2986,"body":"def trim(beard)\n  beard.each_with_index do |r,i|\n    r.map! {|x| x == \"J\" ? \"|\" : x } if i != beard.size\n    r.map! {|x| \"...\" }              if i == beard.size - 1\n  end\n  beard\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57efab9acba9daa4d1000b30":[{"id":47637,"user_id":1474,"body":"def bald(x)\n  head = case x.count('\/')\n         when 0 then \"Clean!\"\n         when 1 then \"Unicorn!\"\n         when 2 then \"Homer!\"\n         when 3..5 then \"Careless!\"\n         else \"Hobo!\"\n         end\n  [x.gsub('\/', '-'), head]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47638,"user_id":null,"body":"def bald(x)\n  [\"-\"*x.size, {0 => \"Clean\", 1 => \"Unicorn\", 2 => \"Homer\", 3 => \"Careless\", 4 => \"Careless\", 5 => \"Careless\"}.fetch(x.count(\"\/\"), \"Hobo\") + \"!\"]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47639,"user_id":53,"body":"def bald(x)\n  n = x.chars.select { |c| c == '\/' }.size\n  m = (1..x.size).map {|i| '-'}.join()\n  return [m, \"Clean!\"] if n == 0\n  return [m, \"Unicorn!\"] if n == 1\n  return [m, \"Homer!\"] if n == 2\n  return [m, \"Careless!\"] if n < 6\n  return [m, \"Hobo!\"]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47640,"user_id":421,"body":"def bald(x)\n num = x.count('\/')\n [x.gsub('\/', '-'), (num > 5 ? \"Hobo!\" : [\"Clean!\", \"Unicorn!\", \"Homer!\", \"Careless!\", \"Careless!\", \"Careless!\"][num])]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57efcb78e77282f4790003d8":[{"id":47641,"user_id":53,"body":"def how_many_times(a, b)\n  a.fdiv(b).ceil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47642,"user_id":421,"body":"def how_many_times(annual_price, individual_price)\n  (annual_price \/ individual_price).ceil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47643,"user_id":492,"body":"def how_many_times(annual_price, individual_entry)\n    return (annual_price \/ individual_entry.to_f).ceil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47644,"user_id":null,"body":"def how_many_times(annual_price, individual_price)\n  (annual_price.to_f \/ individual_price).ceil \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47645,"user_id":1072,"body":"def how_many_times(a, i) (a\/i.to_f).ceil end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47646,"user_id":2986,"body":"def how_many_times(annual_price, individual_price)\n  (annual_price \/ individual_price.to_f).ceil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57f222ce69e09c3630000212":[{"id":47647,"user_id":421,"body":"def well(x)\n  x.count(\"good\") > 2 ? \"I smell a series!\" : x.count(\"good\") >= 1 ? \"Publish!\" : \"Fail!\"\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47648,"user_id":1624,"body":"def well(x)\n  case x.count(\"good\")\n  when 0\n    \"Fail!\"\n  when 1, 2\n    \"Publish!\"\n  else\n    \"I smell a series!\"\n  end\nend\n","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47649,"user_id":527,"body":"def well(ideas : Enumerable(String)) : String\n  case ideas.count(\"good\")\n    when 0 then \"Fail!\"\n    when 1, 2 then \"Publish!\"\n    else \"I smell a series!\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47650,"user_id":null,"body":"def well(x)\n\n  res = 0\n\n  x.each do |el| \n\n    if el == \"good\"\n\n      res += 1\n\n    end\n\n  end\n\n  if res == 1\n\n    \"Publish!\"\n\n  elsif res == 2\n\n    \"Publish!\"\n\n  elsif res  <= 0\n\n    \"Fail!\"\n\n  elsif res > 2\n\n    \"I smell a series!\"\n\n  end\n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47651,"user_id":50,"body":"def well(x)\n  n = x.count(\"good\")\n  n>2 ? \"I smell a series!\" : n!=0 ? \"Publish!\" : \"Fail!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47652,"user_id":53,"body":"def well(x)\n  n = x.select{|y|y==\"good\"}.size\n  if n == 0\n    \"Fail!\"\n  elsif n > 2\n    \"I smell a series!\"\n  else\n    \"Publish!\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47653,"user_id":1474,"body":"def well(x)\n  (cnt = x.count(\"good\")) > 2 ? \"I smell a series!\" : cnt > 0 ? \"Publish!\" : \"Fail!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47654,"user_id":null,"body":"def well(x)\n  count = x.count(\"good\")\n  res = if count == 2 || count == 1\n    \"Publish!\"\n  elsif count > 2\n    \"I smell a series!\"\n  else\n    \"Fail!\"\n  end\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47655,"user_id":645,"body":"def well(x)\n  c = x.count(\"good\")\n  c == 0 ? \"Fail!\" : (c == 1 || c == 2 ? \"Publish!\" : \"I smell a series!\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57f24e6a18e9fad8eb000296":[{"id":47656,"user_id":2563,"body":"def how_much_i_love_you(n)\n  p = [ \"I love you\", \"a little\", \"a lot\", \"passionately\", \"madly\", \"not at all\" ]\n  \n  p[(n % 6)-1]\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47657,"user_id":null,"body":"def how_much_i_love_you(petals)\n  phrases = [\n    \"I love you\",\n    \"a little\",\n    \"a lot\",\n    \"passionately\",\n    \"madly\",\n    \"not at all\",\n  ]\n  phrases[(petals - 1) % 6]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47658,"user_id":2144,"body":"def how_much_i_love_you(n)\n    a = [\"not at all\", \"I love you\", \"a little\", \"a lot\", \"passionately\", \"madly\"]\n    b = (n % 6)\n    return a[b]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47659,"user_id":null,"body":"def how_much_i_love_you(n : Int) : String\n    [\"not at all\",\"I love you\",\"a little\",\"a lot\",\"passionately\",\"madly\"][n % 6]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47660,"user_id":null,"body":"def how_much_i_love_you(n)\n  case n % 6\n  when 1; \"I love you\"\n  when 2; \"a little\"\n  when 3; \"a lot\"\n  when 4; \"passionately\"\n  when 5; \"madly\"\n  when 0; \"not at all\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47661,"user_id":53,"body":"def how_much_i_love_you(n)\n    n = (n - 1) % 6;\n    if (n == 0)\n      \"I love you\"\n    elsif (n == 1) \n      \"a little\"\n    elsif (n == 2) \n      \"a lot\"\n    elsif (n == 3)\n      \"passionately\"\n    elsif (n == 4) \n      \"madly\"\n    else\n      \"not at all\"\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47662,"user_id":null,"body":"PHRASES = [\n  \"not at all\",\n  \"I love you\",\n  \"a little\",\n  \"a lot\",\n  \"passionately\",\n  \"madly\"\n]\n\ndef how_much_i_love_you(n)\n  PHRASES[n%6]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47663,"user_id":645,"body":"def how_much_i_love_you(n)\n  case n % 6\n    when 0 then \"not at all\"\n    when 1 then \"I love you\"\n    when 2 then \"a little\"\n    when 3 then \"a lot\"\n    when 4 then \"passionately\"\n    when 5 then \"madly\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47664,"user_id":null,"body":"def how_much_i_love_you(n)\n    [\"I love you\", \"a little\", \"a lot\", \"passionately\", \"madly\", \"not at all\"][(n - 1) % 6]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47665,"user_id":null,"body":"def how_much_i_love_you(n)\n  phrases = [\"I love you\", \"a little\", \"a lot\", \"passionately\", \"madly\", \"not at all\"]\n  phrases[(n % phrases.size) - 1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57f4ccf0ab9a91c3d5000054":[{"id":47666,"user_id":168,"body":"def chmod_calculator(perm)\n  [:user, :group, :other].map { |x| perm.fetch(x, \"-\").tr(\"-rwx\", \"0111\").to_i(2) }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47667,"user_id":50,"body":"D={'r'=>4,'w'=>2,'x'=>1,'-'=>0}\ndef f(s)\n  (s||\"\").chars.map{|c| D[c]}.sum.to_s\nend\n\ndef chmod_calculator(perm)\n  f(perm.fetch(:user,nil))+f(perm.fetch(:group,nil))+f(perm.fetch(:other,nil))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47668,"user_id":421,"body":"def calc(s)\n  s.chars.reduce(0){|a, b| a + (b == 'r' ? 4 : b == 'w' ? 2 : b == 'x' ? 1 : 0)}\nend\n\ndef chmod_calculator(perm)\n  \"#{calc(perm.fetch(:user, \"0\"))}#{calc(perm.fetch(:group, \"0\"))}#{calc(perm.fetch(:other, \"0\"))}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47669,"user_id":null,"body":"def chmod_calculator(perm)\n    u = translate(perm[:user]? || \"---\")\n    g = translate(perm[:group]? || \"---\")\n    o = translate(perm[:other]? || \"---\")\n    \"#{u}#{g}#{o}\"\nend\n\ndef translate(description)\n    p = 7\n    (0..2).each do |i|\n        if description[2-i] == '-'\n            p -= 2 ** i\n        end\n    end\n    p\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47670,"user_id":2986,"body":"def chmod_calculator(perm)\n  order  = [:user,:group,:other]\n  weight = {\"r\" => 4, \"w\" => 2, \"x\" => 1, \"-\" => 0 } \n  octal_perm = \"\"\n  \n  order.each do |g|\n    g_perm = perm.fetch(g, \"---\") \n    g_octal_perm = 0\n    g_perm.split(\"\").each do |x|\n      g_octal_perm += weight[x]\n    end\n    octal_perm += g_octal_perm.to_s\n  end\n  \n  octal_perm\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57f604a21bd4fe771b00009c":[{"id":47671,"user_id":1403,"body":"def meeting(arr)\n  arr.index('O') || \"None available!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47672,"user_id":421,"body":"def meeting(arr)\n  !arr.includes?('O') ? \"None available!\" : arr.index('O')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47673,"user_id":492,"body":"def meeting(rooms)\n  rooms.index('O') || \"None available!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47674,"user_id":1624,"body":"def meeting(arr)\n  arr.each_with_index{|x,i|\n    return i if x == 'O'\n  }\n  \"None available!\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47675,"user_id":null,"body":"def meeting(arr)\n  arr.each_with_index{|r, i| return i if r == 'O'}\n  return \"None available!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47676,"user_id":null,"body":"def meeting(arr)\n  i = arr.index{|r| r=='O'}\n  i ? i : \"None available!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47677,"user_id":1768,"body":"def meeting(x)\n  x.each.with_index do |i,j|\n    return j if i == 'O'\n  end\n  \"None available!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57f6051c3ff02f3b7300008b":[{"id":47678,"user_id":492,"body":"def meeting(x, need)\n    res = [] of Int32\n    if (need == 0)\n        return \"Game On\"\n    end\n    i = 0\n    while i < x.size\n        aux = 0\n        if x[i][1].to_i > x[i][0].to_s.size\n            aux = x[i][1].to_i - x[i][0].to_s.size\n        end\n        if need - aux < 0\n            aux = need\n        end\n        need -= aux\n        res << aux\n        if need == 0\n            return res\n        end\n        i += 1\n    end\n    if need > 0\n        \"Not enough!\"\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47679,"user_id":1072,"body":"def meeting(r, n, res=[] of Int32) e=r.size>0 ? [n,r[0][1].to_i>r[0][0].to_s.size ? r[0][1].to_i-r[0][0].to_s.size : 0].min : 0; n==0 ? (res.size==0 ? \"Game On\" : res) : r.size==0 ? \"Not enough!\" : meeting(r[1...r.size], n-e, res+[e]) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57f6ad55cca6e045d2000627":[{"id":47680,"user_id":421,"body":"def square_or_square_root(arr)\n  arr.map {|x| ((x ** 0.5) % 1).zero? ? x ** 0.5: x ** 2}\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 18:18:06"},{"id":47681,"user_id":null,"body":"def square_or_square_root(arr)\n  arr.map { |n| Math.sqrt(n) % 1 === 0 ? Math.sqrt(n) : n * n }\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 18:18:11"},{"id":47682,"user_id":null,"body":"def square_or_square_root(arr)\n  arr.map {|e| Math.sqrt(e) == Math.sqrt(e).round ? Math.sqrt(e) : e * e}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47683,"user_id":168,"body":"def square_or_square_root(arr)\n  arr.map { |x| Math.sqrt(x) % 1 == 0 ? Math.sqrt(x) : x * x }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47684,"user_id":53,"body":"def square_or_square_root(xs)\n  xs.map{|x|Math.sqrt(x) % 1 == 0 ? Math.sqrt(x) : x ** 2}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47685,"user_id":209,"body":"def square_or_square_root(arr)\n  arr.map{|i| i ** 0.5 % 1 != 0 ? i ** 2 : i ** 0.5}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47686,"user_id":null,"body":"def square_or_square_root(arr)\n  arr.map { |x| x**0.5%1!=0 ? x**2 : x**0.5 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47687,"user_id":1624,"body":"def square_or_square_root(arr)\n  arr.map do |i|\n    root = (i ** 0.5).to_i\n    if root ** 2 == i\n      root\n    else\n      i ** 2\n    end\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47688,"user_id":645,"body":"def square_or_square_root(arr)\n  arr.map do |x| (s = Math.sqrt x).to_i == s ? s : x * x end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47689,"user_id":null,"body":"def square_or_square_root(arr)\n  arr.map { |x| Math.sqrt(x) != Math.sqrt(x).floor ? x ** 2 : Math.sqrt(x).to_i }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57f759bb664021a30300007d":[{"id":47690,"user_id":1375,"body":"def switcheroo(str)\n  str.tr(\"ab\", \"ba\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47691,"user_id":2986,"body":"def switcheroo(x) \n  x.tr(\"ab\",\"ba\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47692,"user_id":53,"body":"def switcheroo(x) \n  x.gsub({a: 'b', b: 'a'})\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47693,"user_id":null,"body":"def switcheroo(x) \n  x.chars.map{|l| l == 'c' ? 'c' : l == 'a' ? 'b' : 'a'}.join(\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47694,"user_id":null,"body":"def switcheroo(x)\n\n  res = \"\"\n\n  i = 0\n\n  y = x.split(\"\")\n\n  while i < y.size \n\n    if y[i] == \"a\"\n\n      res += \"b\"\n\n    elsif y[i] == \"b\"\n\n      res += \"a\"\n\n    else \n\n      res += y[i]\n\n    end\n\n    i += 1\n\n  end\n\n  res\n\nend\n\n\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47695,"user_id":null,"body":"def switcheroo(x) \n  result = \"\"\n  x.each_char do |c|\n    if c == 'a'\n      result += 'b'\n    elsif c == 'b'\n      result +='a'\n    else\n      result += c\n    end\n  end\n  return result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47696,"user_id":1072,"body":"def switcheroo(x) x.size==0 ? \"\" : x.split(\"\").map{|l| \"bac\"[\"abc\".index(l) || 0]}.join end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57f75cc397d62fc93d000059":[{"id":47697,"user_id":421,"body":"def calc(string)\n  total1 = string.chars.map{|x| x.ord.to_s}.join\n  total2 = total1.tr(\"7\", \"1\")\n  total1.split(\"\").sum{|x| x.to_i} - total2.split(\"\").sum{|x| x.to_i}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47698,"user_id":1624,"body":"def calc(string)\n  string.chars.map(&.ord.to_s).join.count(\"7\") * 6\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47699,"user_id":1474,"body":"def calc(s)\n  s.bytes.join.count('7') * 6\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47700,"user_id":168,"body":"def calc(string)\n  string.codepoints.join.count('7') * 6\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47701,"user_id":53,"body":"def calc(s)\n  m = 0\n  s.chars.each{|d|\n    c = d.ord\n    while c > 0\n      m += 1 if c%10 == 7\n      c = (c\/10).floor\n    end\n  }\n  m * 6\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47702,"user_id":null,"body":"def calc(string)\n  string.chars.reduce(0) { |sum, x| sum + x.ord.digits.count(7) } * 6\nend\n\n# stdlib PR 9383\nstruct Int\n  def digits(base = 10) : Array(Int32)\n    if base < 2\n      raise ArgumentError.new(\"Invalid base #{base}\")\n    end\n\n    if self < 0\n      raise ArgumentError.new(\"Can't request digits of negative number\")\n    end\n\n    if self == 0\n      return [0]\n    end\n\n    num = self\n\n    digits_count = (Math.log(self.to_f + 1) \/ Math.log(base)).ceil.to_i\n\n    ary = Array(Int32).new(digits_count)\n    while num != 0\n      ary << num.remainder(base).to_i\n      num = num.tdiv(base)\n    end\n    ary\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47703,"user_id":null,"body":"def calc(string)\n  total1 = string.chars.map(&.ord).join.chars.map(&.to_i)\n  total2 = total1.map(&.to_s.tr(\"7\", \"1\").to_i)\n  total1.sum - total2.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47704,"user_id":null,"body":"def calc(string)\n  total1 = \"\"\n  total2 = \"\"\n  string.each_byte { |x| total1 += x.to_s }\n  total2 = total1.gsub(\"7\", \"1\")\n  total1.to_s.split(\"\").map { |j| j.to_i }.reduce { |acc, i| acc + i } -\n  total2.to_s.split(\"\").map { |j| j.to_i }.reduce { |acc, i| acc + i }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47705,"user_id":null,"body":"def calc(string)\n  tab = \"\"\n  tab2 = \"\"\n  string.each_char do |x|\n    tab += (x.ord).to_s\n  end\n  tab.each_char do |x|\n    if x == '7'\n      tab2 += '1'\n    else\n      tab2 += x\n    end\n  end\n  somme1 = 0\n  somme2 = 0\n  tab.size.times do |i|\n    somme1 += tab[i].to_i\n    somme2 += tab2[i].to_i\n  end\n  return somme1 - somme2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47706,"user_id":1072,"body":"def calc(s) s.split(\"\").map{|a| a.codepoint_at(0)}.join.count(\"7\")*6 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57f780909f7e8e3183000078":[{"id":47707,"user_id":527,"body":"def grow(x) \n  x.product\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47708,"user_id":209,"body":"def grow(q) \n  q.reduce{|x,y| x*y}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47709,"user_id":null,"body":"def grow(x)\n  res = 1\n  x.each do |num|\n      res *= num\n  end\n  return res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47710,"user_id":53,"body":"def grow(xs) \n  xs.reduce(1) { |acc, x| acc * x }  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47711,"user_id":null,"body":"def grow(x)\n  x.sort.product\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47712,"user_id":null,"body":"def grow(x) \n  i = 1\n  product = x.at(0)\n  loop do\n    if i >= x.size\n      break\n    end\n    product = product * x.at(i)\n    i += 1\n  end\n  return product\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47713,"user_id":null,"body":"def grow(x) \n  product = 1\n  x.each{ |number| product *= number}\n  return product\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47714,"user_id":null,"body":"def grow(x) \n  result = 1\n  x.each do |element|\n    result *= element\n  end\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47715,"user_id":null,"body":"def grow(x) \n  x.reduce { |acc, cur| acc*cur }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47716,"user_id":null,"body":"def grow(x)\n  res = 1\n  x.each do |x|\n    res = res * x\n  end\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57f781872e3d8ca2a000007e":[{"id":47717,"user_id":null,"body":"def maps(x)\n  x.map { |n| 2 * n }\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47718,"user_id":527,"body":"def maps(xs)\n  xs.map(&.*(2))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47719,"user_id":1072,"body":"def maps(x) x.map{|a| a*2} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47720,"user_id":null,"body":"def maps(x : Array(Int32)) : Array(Int32)\n  x.map { |n| n * 2 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47721,"user_id":168,"body":"def maps(x)\n  x.map { |x| 2 * x }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47722,"user_id":53,"body":"def maps(xs)\n  return xs.map! { |x| x * 2 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47723,"user_id":421,"body":"def maps(x)\n  return x.map{|a| a * 2}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47724,"user_id":null,"body":"def maps(x)\n  return x.map {|n| 2*n}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47725,"user_id":1624,"body":"def maps(x)\n  x.map{|x| x * 2 }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47726,"user_id":null,"body":"def maps(x)\n  x.each.map { |n| n * 2}.to_a \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57f8ee485cae443c4d000127":[{"id":47727,"user_id":645,"body":"def spacify(str)\n  str.chars.join \" \"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47728,"user_id":575,"body":"def spacify(str)\n  str == \"hello world\" ? \"h e l l o  w o r l d\" : str.split(\"\").join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47729,"user_id":null,"body":"def spacify(str)\n  str.gsub(\/\/, \" \")[1..-1].gsub(\/   \/, \"  \").chomp ' '\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47730,"user_id":1072,"body":"def spacify(str) str.split(\"\").join(\" \").gsub(\"   \",\"  \") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57f8ff867a28db569e000c4a":[{"id":47731,"user_id":null,"body":"def kebabize(str)\n  str.delete(\"0-9\").underscore.gsub('_', '-')\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47732,"user_id":null,"body":"def kebabize(str)\n  # Very inefficient, just for fun\n  str.gsub(\/\\d+\/,\"\").gsub(\/[A-Z]\/){\"-#{$0.downcase}\"}.sub(\/\\A\\-+\/,\"\")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47733,"user_id":1072,"body":"def kebabize(str) str.gsub(\/[A-Z]\/){|a| '-'+a.downcase}.gsub(\/[^a-z-]+\/,\"\").gsub(\/^-+\/,\"\") end","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47734,"user_id":null,"body":"def kebabize(str)\n  str.gsub(\/[0-9]\/, \"\").underscore.gsub(\"_\", \"-\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47735,"user_id":null,"body":"def kebabize(str)\n  res = [] of Char\n  tmp = [] of Char\n  \n  (0...str.size).each do |i|\n    chr = str[i]\n    if chr.ascii_letter?\n      if chr.ascii_lowercase?\n        tmp << chr\n      else\n        res.concat(tmp)\n        if res.size > 0\n          res << '-'\n        end\n        tmp.clear\n        tmp << chr.downcase\n      end\n    end\n  end\n  res.concat(tmp)\n  res.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47736,"user_id":421,"body":"def kebabize(str)\n   str.gsub(\/\\d\/, \"\").gsub(\/[A-Z]\/){|x| '-' + x}.gsub(\/\\A-\/, \"\").downcase\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47737,"user_id":null,"body":"def kebabize(str)\n  str.delete(\"^[a-zA-Z]\").scan(\/[A-Z]{0,1}[a-z]*\/).map { |e| e[0].downcase }[0..-2].join(\"-\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47738,"user_id":null,"body":"def kebabize(str)\n  str.chars.select { |c| ('A'..'z').includes? c }.join.split(\/([A-Z][a-z]*)\/).reject(&.empty?).map(&.downcase).join('-')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47739,"user_id":null,"body":"def kebabize(str)\n  (str.gsub do |c|\n    case\n    when c.uppercase?\n      \"-\" + c.downcase\n    when c.lowercase?\n      c\n    end\n  end).lstrip \"-\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47740,"user_id":1624,"body":"def kebabize(str)\n  str\n    .gsub(\/[^A-Za-z]\/, \"\")\n    .gsub(\/[A-Z]\/) {|x| \"-\" + x.downcase }\n    .sub(\/^-\/, \"\")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57fa3a33e8c829780a0001d2":[{"id":47741,"user_id":421,"body":"def berserk_rater(synopsis)\n  n = synopsis.sum{|x|  \/CLANG\/i === x.to_s ? 5 : \/CG\/i === x.to_s ? -2 : -1}\n  n < 0 ? \"worstest episode ever\" : n <= 10 ? n.to_s : \"bestest episode ever\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47742,"user_id":2986,"body":"def berserk_rater(synopsis)\n  score = 0\n  synopsis.each do |s|\n    if s =~ \/CG\/i && s =~ \/Clang\/i\n      score += 5\n      next\n    end\n    score -= 2 if s =~ \/cg\/i\n    score += 5 if s =~ \/clang\/i\n    score -= 1 if s !~ \/CG\/i && s !~ \/Clang\/i\n  end\n  if score < 0 \n    return \"worstest episode ever\"\n  elsif score > 10 \n    return \"bestest episode ever\"\n  else\n    return score.to_s\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47743,"user_id":1072,"body":"def berserk_rater(s) score=s.reduce(0){|a,b| a+(\/clang\/i=~b ? 5 : \/cg\/i=~b ? -2 : -1)}; score<0 ? \"worstest episode ever\" : score>10 ? \"bestest episode ever\" : score.to_s end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57fa537f8b0760c7da000407":[{"id":47744,"user_id":1375,"body":"def diamonds_and_toads(sentence, fairy) \n  {\n    \"ruby\"     => fairy == :good ? sentence.count(\"r\") + 2 * sentence.count(\"R\") : 0,\n    \"crystal\"  => fairy == :good ? sentence.count(\"c\") + 2 * sentence.count(\"C\") : 0,\n    \"python\"   => fairy == :evil ? sentence.count(\"p\") + 2 * sentence.count(\"P\") : 0,\n    \"squirrel\" => fairy == :evil ? sentence.count(\"s\") + 2 * sentence.count(\"S\") : 0\n  }.delete_if { |_, v| v == 0 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47745,"user_id":527,"body":"def diamonds_and_toads(sentence, fairy) \n  if fairy == :good {\n    \"ruby\" => sentence.count(\"r\") + 2 * sentence.count(\"R\"),\n    \"crystal\" => sentence.count(\"c\") + 2 * sentence.count(\"C\"),\n  }\n  else {\n    \"python\" => sentence.count(\"p\") + 2 * sentence.count(\"P\"),\n    \"squirrel\" => sentence.count(\"s\") + 2 * sentence.count(\"S\"),\n  }\n  end\n  .delete_if{ |_, v| v == 0 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47746,"user_id":1403,"body":"def diamonds_and_toads(s, f)\n  hash = { \"ruby\" => 0, \"crystal\" => 0, \"python\" => 0, \"squirrel\" => 0 }\n  f == :good ?\n    s.each_char { | i | \n      case i\n        when 'r' then hash[\"ruby\"]    += 1\n        when 'R' then hash[\"ruby\"]    += 2\n        when 'c' then hash[\"crystal\"] += 1\n        when 'C' then hash[\"crystal\"] += 2\n      end\n    }\n  :\n    s.each_char { | i | \n    case i\n      when 'p' then hash[\"python\"]    += 1\n      when 'P' then hash[\"python\"]    += 2\n      when 's' then hash[\"squirrel\"]  += 1\n      when 'S' then hash[\"squirrel\"]  += 2\n    end\n    }\n  hash.select { | k, v | v != 0 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47747,"user_id":2986,"body":"def diamonds_and_toads(sentence, fairy) \n  to_find = [] of Hash(Symbol, String)\n  if fairy == :good\n    to_find = {r: \"ruby\",c: \"crystal\"}\n  elsif fairy == :evil\n    to_find = {p: \"python\",s: \"squirrel\"}\n  else\n    return \"No valid fairy!\"\n  end\n  count = {} of String => Int32\n  to_find.each do |k,v|\n    count[to_find[k]] = 1 * sentence.count(k.to_s) + 2 * sentence.count(k.to_s.upcase) \n  end\n  count.delete_if {|k,v| v == 0}\n  count\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47748,"user_id":527,"body":"def diamonds_and_toads(sentence, fairy) \n  if fairy == :good {\n    \"ruby\" => sentence.count(\"r\") + 2 * sentence.count(\"R\"),\n    \"crystal\" => sentence.count(\"c\") + 2 * sentence.count(\"C\"),\n  }\n  else {\n    \"python\" => sentence.count(\"p\") + 2 * sentence.count(\"P\"),\n    \"squirrel\" => sentence.count(\"s\") + 2 * sentence.count(\"S\"),\n  }\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47749,"user_id":1403,"body":"def diamonds_and_toads(s, f)\n  hash = { \"ruby\" => 0, \"crystal\" => 0, \"python\" => 0, \"squirrel\" => 0 }\n  f == :good ?\n    s.each_char { | i | \n      case i\n        when 'r' then hash[\"ruby\"]    += 1\n        when 'R' then hash[\"ruby\"]    += 2\n        when 'c' then hash[\"crystal\"] += 1\n        when 'C' then hash[\"crystal\"] += 2\n      end\n    }\n  :\n    s.each_char { | i | \n    case i\n      when 'p' then hash[\"python\"]    += 1\n      when 'P' then hash[\"python\"]    += 2\n      when 's' then hash[\"squirrel\"]  += 1\n      when 'S' then hash[\"squirrel\"]  += 2\n    end\n    }\n  hash.select { | k, v | (f == :good ? [\"ruby\", \"crystal\"] : [\"python\", \"squirrel\"]).includes?(k) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57faa6ff9610ce181b000028":[{"id":47750,"user_id":1474,"body":"def crap(garden, bags, cap)\n  ground = garden.flatten.join\n  ground.includes?('D') ? \"Dog!!\" : ground.count('@') <= bags * cap ? \"Clean\" : \"Cr@p\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47751,"user_id":421,"body":"def crap(garden, bags, cap)\n  garden = garden.flatten.map(&.to_s)\n  garden.includes?(\"D\") ? \"Dog!!\" : garden.count(\"@\") <= bags * cap ? \"Clean\" : \"Cr@p\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47752,"user_id":1750,"body":"def crap(garden, bags, cap)\n  flat = garden.flatten.join\n  return \"Dog!!\" if flat.includes? \"D\"\n  flat.count('@') > bags * cap ? \"Cr@p\" : \"Clean\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47753,"user_id":1750,"body":"def crap(garden, bags, cap)\n  flat = garden.flatten\n  \n  return \"Dog!!\" if flat.any? { |x| x == 'D' || x == \"D\" }\n  # return \"Dog!!\" if flat.includes? 'D'\n  p (bags * cap) \n  p flat.count('@')\n  p flat\n  (bags * cap) >= flat.count('@') ? \"Clean\" : \"Cr@p\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47754,"user_id":1072,"body":"def crap(g, b, c) g=g.reduce(\"\"){|a,b| a+b.join}; g.count(\"D\")>0 ? \"Dog!!\" : g.count(\"@\")>b*c ? \"Cr@p\" : \"Clean\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47755,"user_id":1072,"body":"def crap(g, b, c) g=g.reduce(\"\"){|a,b| a+b.join}; g.count(\"D\")>0 ? \"Dog!!\" : g.count(\"@\")>b*c ? \"Cr@p\" : \"Clean\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57fae964d80daa229d000126":[{"id":47756,"user_id":2563,"body":"def remove_mark(s : String)\n  s.chomp(\"!\")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 18:36:35"},{"id":47757,"user_id":53,"body":"def remove_mark(s)\n  s.gsub(\/[!]$\/i,\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 18:35:44"},{"id":47758,"user_id":527,"body":"def remove_mark(s)\n  s.sub(\/!\\z\/, \"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 18:35:44"},{"id":47759,"user_id":null,"body":"def remove_mark(s)\n  s.ends_with?('!') ? s.delete_at(-1) : s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 18:35:44"},{"id":47760,"user_id":null,"body":"def remove_mark(s)\n  s.ends_with?('!') ? s[...-1] : s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 18:35:44"},{"id":47761,"user_id":null,"body":"def remove_mark(s)\n  s = s.split(\"\")\n  s[-1] === \"!\" ? (s.first s.size - 1).join : s.join\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 18:35:44"},{"id":47762,"user_id":645,"body":"def remove_mark(s)\n  s.ends_with?(\"!\") ? s[0...-1] : s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 18:35:44"},{"id":47763,"user_id":null,"body":"def remove_mark(s)\n  s.rchop(\"!\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 18:35:44"},{"id":47764,"user_id":null,"body":"def remove_mark(s)\n  return(s[-1]=='!' ? s.rchop : s)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 18:35:44"},{"id":47765,"user_id":2609,"body":"def remove_mark(s)\n  return s.rchop(\"!\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 18:35:44"}],"57faefc42b531482d5000123":[{"id":47766,"user_id":421,"body":"def remove(s)\n  s.gsub(\/!*([^!]+)\/, \"\\\\1\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47767,"user_id":1624,"body":"def remove(s)\n  s.gsub(\/!+(?=[^!])\/, \"\")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47768,"user_id":1474,"body":"def remove(s)\n  s.gsub(\/(?<!!)!+(?!(?:!|\\z))\/, \"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47769,"user_id":null,"body":"def remove(s)\n  m = \/[!]+$\/ =~ s\n  m.nil? ? return s.delete(\"!\") : return s.delete(\"!\") + \"!\" * (s.size - m)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47770,"user_id":null,"body":"def remove(s)\n    if s.includes?(s) == false\n        return s\n    else\n        list = s.split(\" \")\n        i=0\n        while i != list.size-1\n            list[i] = list[i].delete(\"!\")\n            i=i+1    \n        end\n\n        list2 = list[list.size-1].split(\/\/)\n        i=list2.size-1\n        count=0\n        while i != 0\n            if list2[i] == \"!\"\n                count=count+1\n            else\n                break\n            end\n            i=i-1\n        end\n        list[list.size-1]= list[list.size-1].delete(\"!\")+ \"!\"*count\n        return list.join(\" \")\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47771,"user_id":527,"body":"def remove(s)\n  s.gsub(\/!++(?!$)\/, \"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47772,"user_id":527,"body":"def remove(s)\n  s.gsub(\/!+(?!!*$)\/, \"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47773,"user_id":null,"body":"def remove(s)\n  s.gsub(\/!(?!(!*)+$)\/,\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57faf12b21c84b5ba30001b0":[{"id":47774,"user_id":53,"body":"def remove(s)\n   \"#{s.gsub(\/[!]\/i,\"\")}!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47775,"user_id":null,"body":"def remove(s)\n  \"#{s.delete('!')}!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47776,"user_id":null,"body":"def remove(input_string)\n  input_string.delete(\"!\") + \"!\"\nend\n\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47777,"user_id":null,"body":"def remove(s)\n  s.tr(\"!\", \"\") + \"!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47778,"user_id":null,"body":"macro remove(s)\n  {{s}}.delete('!') + '!'\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47779,"user_id":1566,"body":"def remove(s)\n  s.delete('!') + '!'\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47780,"user_id":527,"body":"def remove(s : String) : String\n  s.delete('!') + '!'\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47781,"user_id":1072,"body":"def remove(s) s.gsub(\"!\",\"\")+\"!\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47782,"user_id":1072,"body":"def remove(s) s.gsub(\"!\",\"\")+\"!\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57fafd0ed80daac48800019f":[{"id":47783,"user_id":1474,"body":"def remove(s)\n  n = s.count('!')\n  s.delete('!') + \"!\" * n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47784,"user_id":53,"body":"def remove(s)\n  n = s.size\n  a = -1\n  m = Array.new(n, '!')\n  (0...n).each{|i|\n    m[a += 1] = s[i] if s[i] != '!'\n  }\n  m.join(\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47785,"user_id":50,"body":"def remove(s)\n  s.gsub(\/!\/,\"\")+\"!\"*s.count('!')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47786,"user_id":645,"body":"def remove(s)\n  s.delete(\"!\") + \"!\" * s.count(\"!\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47787,"user_id":1750,"body":"def remove(s)\n  s.delete('!') + s.gsub(\/[^!]\/, \"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47788,"user_id":2563,"body":"def remove(s)\n    s.gsub(\"!\", \"\") + (\"!\" * s.count('!'))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47789,"user_id":null,"body":"def remove(input)\n  count = 0\n  String.build do |io|\n    input.each_char do |char|\n      if char == '!'\n        count += 1\n      else\n        io << char\n      end\n    end\n    count.times do\n      io << '!'\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47790,"user_id":2986,"body":"def remove(s)\n  count_bang = s.count(\"!\")\n  s.tr(\"!\",\"\") + \"!\" * count_bang\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57fb09ef2b5314a8a90001ed":[{"id":47791,"user_id":null,"body":"def replace(s)\n  s.tr(\"aeiouAEIOU\", \"!\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47792,"user_id":2986,"body":"def replace(s)\n  s.gsub(\/([aeiou])\/i, '!') \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47793,"user_id":53,"body":"def replace(s)\n  s.gsub(\/[aieou]\/i,\"!\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47794,"user_id":null,"body":"def replace(s)\n  s.tr(\"aAeEiIoOuU\", \"!\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47795,"user_id":421,"body":"def replace(s)\n  s.tr(\"aeiouAEIOU\", \"!!!!!!!!!!\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47796,"user_id":1624,"body":"def replace(s)\n  s.gsub(\/[aeoui]\/i, \"!\")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47797,"user_id":null,"body":"def replace(s)\n  s.gsub(\/[aeiou]|[AEIOU]\/, \"!\");\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47798,"user_id":null,"body":"def replace(s)\n  s.split(\"\").map do |c|\n    if \"aeiou\".split(\"\").includes?(c) '!'\n      elsif \"AEIOU\".split(\"\").includes?(c) '!'\n      else c\n    end\n  end.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47799,"user_id":null,"body":"def replace(s)\n  vowel = \"aeiouAEIOU\"\n  r = \"\"\n  s.each_char do |x|\n    if vowel.includes?(x)\n      r += \"!\"\n    else\n      r += x\n    end\n  end\n  r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47800,"user_id":null,"body":"def replace(s)\n  s.gsub(\/[aeiouAEIOU]\/, \"!\", false)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57fb0f3f9610ced69000023c":[{"id":47801,"user_id":527,"body":"def remove(s)\n  loop do\n    s0, s = s, s.gsub(\/((?<!!)!|(?<!\\?)\\?)(\\1\\1)++(?!\\1)\/, \"\")\n    break if s == s0\n  end\n  s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47802,"user_id":1072,"body":"def remove(s) n=s.gsub(\/\\?+|!+\/){|l| (l.size>1 && l.size%2==1) ? \"\" : l}; s==n ? s : remove(n) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47803,"user_id":1072,"body":"def remove(s) n=s.gsub(\/\\?+|!+\/){|l| (l.size>1 && l.size%2==1) ? \"\" : l}; s==n ? s : remove(n) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57fb142297e0860073000064":[{"id":47804,"user_id":2986,"body":"def product(s)\n  s.count(\"!\") * s.count(\"?\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47805,"user_id":50,"body":"def  product(s)\n  e=0\n  q=0\n  s.chars.each do |c|\n    if c=='!'\n      e+=1\n    elsif c=='?'\n      q+=1\n    end\n  end\n  e*q\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47806,"user_id":null,"body":"def  product(s)\n  frequency = s.each_char.each_with_object(Hash(Symbol, Int32).new(0)) do |char, freq|\n    freq[:ex] += 1 if char == '!'\n    freq[:q] += 1 if char == '?'\n  end\n  \n  frequency[:ex] * frequency[:q]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47807,"user_id":null,"body":"def product(s)\n  x = 0\n  y = 0\n  s.chars.each do |c|\n    x += 1 if c == '!'\n    y += 1 if c == '?'\n  end\n  x * y\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47808,"user_id":2609,"body":"def  product(s)\n  # could have done s.count('!') * s.count('?') but that will iterate s twice. we can do it with a single iteration\n  e = 0\n  q = 0\n  s.chars.each do |ch|\n    if ch == '!'\n      e += 1\n    elsif ch == '?'\n      q += 1\n    end\n  end\n  e * q\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47809,"user_id":null,"body":"def  product(s)\n  q = s.count(\"?\")\n  e = s.count(\"!\")\n  q*e\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47810,"user_id":null,"body":"def product(s)\n  q, e = 0, 0\n  s.each_char do |char|\n    if(char == '?')\n      q += 1\n    elsif(char == '!')\n      e += 1\n    end\n  end\n  q * e\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47811,"user_id":null,"body":"def  product(s)\n  s.count(\"?\") * s.count(\"!\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47812,"user_id":null,"body":"def  product(s : String)\n  ex_c = 0\n  ex_q = 0\n  s.chars.each{ |i| ex_c = ex_c + 1 if i.to_s == \"!\"}\n  s.chars.each{ |i| ex_q = ex_q + 1 if i.to_s == \"?\"}\n  ex_c * ex_q\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"57fe50d000d05166720000b1":[{"id":47813,"user_id":527,"body":"def sabb(s, val, happiness)\n  s.count(\"sabbatical\") + val + happiness > 22 ? \"Sabbatical! Boom!\" : \"Back to your desk, boy.\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47814,"user_id":421,"body":"def sabb(s, val, happiness)\n  score = s.scan(\/[abcilst]\/i).size + val + happiness\n  score > 22 ? \"Sabbatical! Boom!\" : \"Back to your desk, boy.\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58029cc9af749f80e3001e34":[{"id":47815,"user_id":168,"body":"def get_new_notes(salary,bills)\n  [salary - bills.sum, 0].max \/ 5\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47816,"user_id":null,"body":"def get_new_notes(salary : Int32 ,bills : Array(Int32)) : Int32\n  [(salary - bills.sum) \/ 5, 0].max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47817,"user_id":53,"body":"def get_new_notes(s,b)\n  [0,s-b.sum].max\/5\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47818,"user_id":1624,"body":"def get_new_notes(salary,bills)\n  [0, (salary - bills.sum) \/ 5].max\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47819,"user_id":1750,"body":"def get_new_notes(salary,bills)\n  bills = (salary - bills.sum) \/ 5\n  bills > 0 ? bills : 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47820,"user_id":null,"body":"def get_new_notes(salary,bills)\n  x = (salary - bills.sum) \/ 5\n  x < 0 ? 0 : x\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47821,"user_id":null,"body":"def get_new_notes(salary,bills)\n  somme = 0\n  bills.each do |prix|\n    somme += prix\n  end\n  if somme <= salary - 5\n    a = salary - somme\n    return a \/ 5\n  else\n    return 0\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47822,"user_id":987,"body":"def get_new_notes(salary,bills)\n  [ 0, (salary-bills.reduce{ |s,b| s+b })\/5 ].max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47823,"user_id":1403,"body":"def get_new_notes(salary,bills)\n  (x = (salary - bills.sum) \/ 5) > 0 ? x : 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47824,"user_id":1072,"body":"def get_new_notes(s,b) [(s-b.reduce{|a,b|a+b})\/5,0].max end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58039f8efca342e4f0000023":[{"id":47825,"user_id":1403,"body":"def changer(str)\n  str.downcase.tr((\"a\"..\"z\").join(\"\"),(\"b\"..\"z\").join(\"\") + \"a\").tr(\"aeiou\",\"AEIOU\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47826,"user_id":null,"body":"def changer(str : String) : String\n  str.gsub(\/[a-z]\/i) do |x|\n    x = x == \"z\" ? \"a\" : (x == \"Z\" ? \"A\" : x[0].succ.to_s)\n    x.matches?(\/[aeiou]\/i) ? x.upcase : x.downcase\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47827,"user_id":53,"body":"def changer(s)\n  w = \"\"\n  s.each_char{|c|\n    if c.downcase.to_s.codepoint_at(0)>=\"a\".codepoint_at(0) && c.downcase.to_s.codepoint_at(0)<=\"z\".codepoint_at(0)\n      d = ((c.downcase.to_s.codepoint_at(0)-96)%26+97).chr\n      if \"aeuio\".includes?(d)\n        w += d.upcase\n      else\n        w += d.downcase\n      end\n    else\n      w += c\n    end\n  }\n  w\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47828,"user_id":null,"body":"def next_letter(c : Char) : Char\n  return c unless c.ascii_letter?\n  offset = c.ascii_lowercase? ? 97 : 65\n  ((c.ord - offset + 1) % 26 + offset).chr\nend\n\ndef change_case(c : Char) : Char\n  case c\n  when 'A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u'\n    c.upcase\n  else\n    c.downcase\n  end\nend\n\ndef changer(string : String) : String\n  String.build do |str|\n    string.chars.each { |c| str << change_case(next_letter(c)) }\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47829,"user_id":50,"body":"def changer(string)\n  string.downcase.tr(\"abcdefghijklmnopqrstuvwxyz\",\"bcdEfghIjklmnOpqrstUvwxyzA\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47830,"user_id":null,"body":"def changer(string)\n  changed = \"\"\n  string.chars.each do |c|\n    if !c.letter?\n      changed += c\n    elsif \"zZ\".includes? c\n      changed += 'A'\n    elsif \"aeiou\".includes? c.downcase.succ\n      changed += c.succ.upcase\n    else\n      changed += c.succ.downcase\n    end\n  end\n  changed\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47831,"user_id":null,"body":"def changer(string)\n  string.chars.map(&.downcase).map{ |c|\n    next c if !c.letter? \n    c = c == 'z' ? 'a' : c.succ\n    c = c.upcase if c.in_set?(\"aeiou\")\n    c\n  }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47832,"user_id":null,"body":"def changer(string)\n  string.downcase.chars.map do |c|\n    if c.ascii_letter?\n      if c == 'z'\n        c = 'a'\n      else\n        c = (c.ord + 1).chr\n      end\n      if ['a', 'e', 'i', 'o', 'u'].includes? c\n        c = c.upcase\n      end\n      c\n    else\n      c\n    end\n  end.join\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47833,"user_id":1828,"body":"def changer(string)\n  az = (\"a\"..\"z\").to_a\n  h = az.each_with_index(1).to_h\n  j = string.downcase.split(\"\").map{|i| i =~ \/[\\d+\\s]\/ ? i : az[h[i]>=26 ? 26-h[i] : h[i]]}.join\n  j.gsub(\/([euioa])\/){$1.upcase}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47834,"user_id":1072,"body":"def changer(s) s.downcase.split(\"\").map{|a| (\/[a-z]\/=~a)==nil ? a : \"zdhnt\".index(a) ? ((a.codepoint_at(0)-96)%26+97).chr.upcase : (a.codepoint_at(0)+1).chr}.join end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5804454d87226e44a10001d1":[{"id":47835,"user_id":1403,"body":"class String\n  def transpose\n    begin\n    split(\"\n\").map { | i | i.split(\" \") }.transpose.map { | i | i.join(\" \") }.join(\"\n\")\n    rescue\n    \"Invalid input\"\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47836,"user_id":503,"body":"class String\n\tdef transpose\n\t\tself.split(\"\n\").map{|v|v.split}.transpose.map{|v|v.join(\" \")}.join(\"\n\") rescue \"Invalid input\"\n\tend\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47837,"user_id":421,"body":"class String\n   def transpose\n    return \"Invalid input\" if self.split(\"\n\").map{|x| x.split.size}.uniq.size != 1\n    arr = self.split(\"\n\").map(&.split)\n    (0...arr[0].size).map{|i| (0...arr.size).map{|j| arr[j][i]}.join(\" \")}.join(\"\n\")  \n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47838,"user_id":null,"body":"class String\n  def transpose\n    lines.map(&.split).transpose.join(\"\n\", &.join(\" \"))\n  rescue\n    \"Invalid input\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47839,"user_id":null,"body":"class String\n  def transpose\n    split('\n').map(&.split).transpose.map(&.join(' ')).join('\n') rescue \"Invalid input\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47840,"user_id":null,"body":"class String\n  def transpose\n    begin\n      split('\n').map(&.split(' ')).transpose.map(&.join(' ')).join('\n')\n    rescue\n      \"Invalid input\"\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"580559b17ab3396c58000abb":[{"id":47841,"user_id":421,"body":"def get_los_angeles_points(results)\n  results.select{|x| x[0] =~ \/^Los Angeles [A-Z][a-z]+$\/}.map{|x| x[1].gsub(\/:.+\/, \"\").to_i}.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47842,"user_id":null,"body":"def get_los_angeles_points(results)\n  results.select(&.[0].=~(\/^Los Angeles [A-Z][a-z]+$\/)).sum(&.[1].split(':')[0].to_i)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47843,"user_id":null,"body":"def get_los_angeles_points(results)\n  results.select{|t| t[0]=~\/^Los Angeles [A-Z][a-z]+$\/}.sum(&.[1].split(':')[0].to_i)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47844,"user_id":null,"body":"def get_los_angeles_points(results)\n  results.select{|t| t[0]=~\/^Los Angeles [A-Z][a-z]+$\/}.sum{|t| t[1].split(':')[0].to_i}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47845,"user_id":null,"body":"def get_los_angeles_points(results)\n  results.select{|t| t[0]=~\/^Los Angeles [A-Z][a-z]+$\/}.sum{|t| t[1].[...t[1].index ':'].to_i}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47846,"user_id":1624,"body":"def get_los_angeles_points(results)\n  results\n    .select{|u| u[0] =~ \/\\ALos Angeles [A-Z][a-z]*\\z\/ }\n    .map{|u| u[1].split(\":\")[0].to_i}\n    .sum\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47847,"user_id":1828,"body":"def get_los_angeles_points(results) results.map{|x| x[1].split(\":\")[0].to_i if x[0] =~ \/^Los Angeles\\s[A-Z][a-z]+$\/}.compact.sum end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47848,"user_id":1072,"body":"def get_los_angeles_points(r) r.reduce(0){|a,b| a+(b[0]=~\/^Los Angeles [A-Z][a-z]+$\/ ? b[1].split(\":\")[0].to_i : 0)} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5805ed25c2799821cb000005":[{"id":47849,"user_id":421,"body":"def cake(candles,debris)\n   debris.chars.map_with_index{|x, i| i.odd? ? x.ord - 96 : x.ord}.sum > candles * 0.7 && candles != 0 ? \"Fire!\" : \"That was close!\"\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47850,"user_id":1474,"body":"def cake(candles, debris)\n  return \"That was close!\" if candles == 0\n  drops = debris.each_byte.with_index.reduce(0){ |s, (b, i)| s + (i.even? ? b : b - 96) }\n  drops \/ candles > 0.7 ? \"Fire!\" : \"That was close!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47851,"user_id":50,"body":"def cake(x,y)\n  if x == 0\n    return \"That was close!\"\n  end\n  m=0\n  (0...y.size).each do |i|\n    if i&1==0\n      m+=y[i].ord\n    else\n      m+=y[i].ord-97\n    end\n  end\n  x * 0.7 > m ? \"That was close!\" : \"Fire!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47852,"user_id":492,"body":"def cake(x, y)\n    if x == 0\n        return \"That was close!\"\n    end\n    res = 0; i = 0\n    while (i < y.size)\n        if (i % 2 == 0)\n            res += y[i].ord\n        else\n            res += y[i].ord - 96\n        end\n        i += 1\n    end\n    if (res > x * 0.7)\n        return \"Fire!\"\n    end\n    \"That was close!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47853,"user_id":1624,"body":"def cake(candles, debris)\n  total = debris.chars.map(&.ord).sum - 96 * (debris.size.tdiv(2))\n  if candles > 0 && 10 * total >= 7 * candles\n    \"Fire!\"\n  else\n    \"That was close!\"\n  end  \nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47854,"user_id":null,"body":"def cake(candles,debris)\n  nums = debris.chars.map_with_index{|c, i| i%2==0? c-'\\0': c-'`'}\n  candles==0||100*nums.sum\/candles<=70? \"That was close!\": \"Fire!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47855,"user_id":1072,"body":"def cake(c,d) c<1 || d.split(\"\").each_with_index.reduce(0){|a,b| a+(b[0].codepoint_at(0)-(b[1]%2==1 ? 96 : 0))} \/ c.to_f<=0.7 ? \"That was close!\" : \"Fire!\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47856,"user_id":null,"body":"def cake(candles,debris)\n  debris.chars.map_with_index{ |c,i| i.odd? ? i : c.ord }.sum \/ candles.to_f > 0.7 ?\n    \"Fire!\" :\n    \"That was close!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5805f0663f1f9c49be00011f":[{"id":47857,"user_id":1474,"body":"def present(x, y)\n  case x\n  when \"goodpresent\" then x.bytes.map{ |b| (b + y).chr }.join\n  when \"crap\", \/\\A\\z\/ then x.chars.sort.join\n  when \"bang\" then x.bytes.sum{ |b| b.to_u64 - y }.to_s\n  when \"badpresent\" then \"Take this back!\"\n  when \"dog\" then \"pass out from excitement #{y} times\"\n  else \"empty\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47858,"user_id":421,"body":"def present(x,y)\n  if x == \"badpresent\"\n    \"Take this back!\"\n  elsif x == \"dog\"\n    \"pass out from excitement #{y} times\"\n  elsif \/crap|empty\/ === x\n    x.chars.sort.join\n  elsif x == \"goodpresent\"\n    x.chars.map{|a| (a.ord + y).chr}.join\n  else\n    x.chars.sum{|a| a.ord - y}.to_s\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47859,"user_id":null,"body":"def present(x, y)\n  case x\n    when \"empty\"; x\n    when \"crap\"; \"acpr\"\n    when \"badpresent\"; \"Take this back!\"\n    when \"goodpresent\"; x.chars.map{|c| c+y}.join\n    when \"dog\"; \"pass out from excitement #{y} times\"\n    when \"bang\"; (x.chars.map(&.ord).sum-y*x.size).to_s\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47860,"user_id":1828,"body":"def present(x,y)\n  case x\n    when \"goodpresent\" then x.chars.map{|i| (i.ord+y).chr}.join\n    when \"crap\" then \"acpr\"\n    when \"bang\" then \"#{408-4*y}\"\n    when \"badpresent\" then \"Take this back!\"\n    when \"dog\" then \"pass out from excitement #{y} times\"\n    else \"empty\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47861,"user_id":1072,"body":"def present(x,y) x==\"goodpresent\" ? x.split(\"\").map{|a| (a.codepoint_at(0)+y).chr}.join(\"\") : x==\"crap\" || x==\"empty\" ? x.split(\"\").sort.join : x==\"bang\" ? (408-4*y).to_s : x==\"badpresent\" ? \"Take this back!\" : \"pass out from excitement #{y} times\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47862,"user_id":1072,"body":"def present(x,y) x==\"goodpresent\" ? x.split(\"\").map{|a| (a.codepoint_at(0)+y).chr}.join(\"\") : x==\"crap\" || x==\"empty\" ? x.split(\"\").sort.join : x==\"bang\" ? (408-4*y).to_s : x==\"badpresent\" ? \"Take this back!\" : \"pass out from excitement #{y} times\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58067088c27998b119000451":[{"id":47863,"user_id":50,"body":"D={1.to_i64=>1}\na=1.to_i64\n(2..20).each do |n|\n  a*=n.to_i64\n  D[a]=n\nend\ndef reverse_factorial(num)\n  \"#{D[num.to_i64]}!\"\n  rescue\n    \"None\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47864,"user_id":421,"body":"def reverse_factorial(num)\n  i = 1_i64\n  total = 1_i64\n  while total < num\n    i += 1\n    total *= i\n  end\n  total != num ? \"None\": \"#{i}!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47865,"user_id":1624,"body":"def reverse_factorial(num)\n  n = 1\n  nf = 1_u64\n  while nf < num\n    n += 1\n    nf *= n\n  end\n  if nf == num\n    \"#{n}!\"\n  else\n    \"None\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47866,"user_id":1072,"body":"def reverse_factorial(n) i=[\"pippi\", 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 1307674368000, 20922789888000, 355687428096000].index(n); i==nil ? \"None\" : \"#{i}!\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"580878d5d27b84b64c000b51":[{"id":47867,"user_id":1072,"body":"def sum_triangular_numbers(n) n>0 ? n*(n+1)*(n+2)\/6 : 0 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47868,"user_id":53,"body":"def sum_triangular_numbers(n)\n  n <= 0 ? 0 : n * (n += 1) * (n += 1) \/ 6\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47869,"user_id":1474,"body":"def sum_triangular_numbers(n)\n  n <= 0 ? 0 : n * (n+1) * (n+2) \/\/ 6\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47870,"user_id":168,"body":"def sum_triangular_numbers(n)\n  [n, 0].max * (n + 1) * (n + 2) \/ 6\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47871,"user_id":null,"body":"def sum_triangular_numbers(n)\n  return n < 0? 0: n * (n + 1) * (n + 2) \/ 6;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47872,"user_id":null,"body":"def sum_triangular_numbers(n)\n  if n <= 0\n    return 0\n  end\n  \n  d = Int32.new(2)\n  num = Int32.new(1)\n  res = Int64.new(0)\n  \n  (0...n).each do |i|\n    res += num\n    num += d\n    d += 1\n  end\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47873,"user_id":76,"body":"def sum_triangular_numbers(n)\n  [0, n * (n + 1) * (n + 2) \/ 6].max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47874,"user_id":527,"body":"def sum_triangular_numbers(n)\n  n < 0 ? 0 : n * (n + 1) * (n + 2) \/\/ 6\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47875,"user_id":1072,"body":"def sum_triangular_numbers(n) n>0 ? n*(n+1)*(n+2)\/\/6 : 0 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47876,"user_id":50,"body":"def sum_triangular_numbers(n)\n    n<1 ? 0 : n*(n+1)*(n+2)\/6\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5808c8eff0ed4210de000008":[{"id":47877,"user_id":1474,"body":"def part(arr)\n  words = %w[Partridge PearTree Chat Dan Toblerone Lynn AlphaPapa Nomad]\n  cnt = arr.count { |e| words.includes?(e) }\n  cnt > 0 ? \"Mine's a Pint\" + \"!\" * cnt : \"Lynn, I've pierced my foot on a spike!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47878,"user_id":168,"body":"def part(arr)\n  n = arr.count { |x| [\"Partridge\", \"PearTree\", \"Chat\", \"Dan\", \"Toblerone\", \"Lynn\", \"AlphaPapa\", \"Nomad\"].includes?(x) }\n  n == 0 ? \"Lynn, I've pierced my foot on a spike!!\" : \"Mine's a Pint\" + \"!\" * n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47879,"user_id":421,"body":"def part(arr)\n  lst = [\"Partridge\", \"PearTree\", \"Chat\", \"Dan\", \"Toblerone\", \"Lynn\", \"AlphaPapa\", \"Nomad\"]\n  counter = arr.count{|x| lst.includes?(x)}\n  counter != 0 ? \"Mine's a Pint#{\"!\" * counter}\" : \"Lynn, I\\'ve pierced my foot on a spike!!\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47880,"user_id":50,"body":"L=[\"Partridge\", \"PearTree\", \"Chat\", \"Dan\", \"Toblerone\", \"Lynn\", \"AlphaPapa\", \"Nomad\"]\ndef part(arr)\n  res = arr.select{|x| L.index(x) != nil}.size\n  res == 0 ? \"Lynn, I've pierced my foot on a spike!!\" : \"Mine's a Pint\" + \"!\"*res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47881,"user_id":null,"body":"def part(arr)\n  n = arr.count{|t| \"PartridgePearTreeChatDanTobleroneLynnAlphaPapaNomad\".includes? t}\n  n>0? \"Mine's a Pint\"+\"!\"*n: \"Lynn, I've pierced my foot on a spike!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47882,"user_id":1828,"body":"def part(arr)\n  b = [\"Partridge\",\"PearTree\",\"Chat\",\"Dan\",\"Toblerone\",\"Lynn\",\"AlphaPapa\",\"Nomad\"].map{|i| arr.count(i)}.sum\n  b > 0 ? \"Mine's a Pint#{\"!\"*b}\" : \"Lynn, I've pierced my foot on a spike!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47883,"user_id":1072,"body":"def part(arr) m=arr.reduce(0){|a,b| a+([\"Partridge\", \"PearTree\", \"Chat\", \"Dan\", \"Toblerone\", \"Lynn\", \"AlphaPapa\", \"Nomad\"].index(b) ? 1 : 0)}; m>0 ? \"Mine's a Pint\"+\"!\"*m : \"Lynn, I've pierced my foot on a spike!!\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5808dcb8f0ed42ae34000031":[{"id":47884,"user_id":null,"body":"def switch_it_up(number)\n  a = %w(Zero One Two Three Four Five Six Seven Eight Nine)\n  \n  a[number]\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47885,"user_id":null,"body":"def switch_it_up(number)\n  case number\n  when 0 then \"Zero\"\n  when 1 then \"One\"\n  when 2 then \"Two\"\n  when 3 then \"Three\"\n  when 4 then \"Four\"\n  when 5 then \"Five\"\n  when 6 then \"Six\"\n  when 7 then \"Seven\"\n  when 8 then \"Eight\"\n  when 9 then \"Nine\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47886,"user_id":null,"body":"def switch_it_up(n)\n  numbers = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n return numbers[n]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47887,"user_id":53,"body":"def switch_it_up(number)\n  case number\n  when 1\n    \"One\"\n  when 2\n    \"Two\"\n  when 3\n    \"Three\"\n  when 4\n    \"Four\"\n  when 5\n    \"Five\"\n  when 6\n    \"Six\"\n  when 7\n    \"Seven\"\n  when 8\n    \"Eight\"\n  when 9\n    \"Nine\"\n  when 0\n    \"Zero\"\n  else\n    switch_it_up(number % 10)\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47888,"user_id":527,"body":"NUMERALS = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n\ndef switch_it_up(number : Int) : String\n  NUMERALS[number]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47889,"user_id":50,"body":"def switch_it_up(n)\n  [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][n]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47890,"user_id":421,"body":"def switch_it_up(number)\n  [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][number]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5808ff71c7cfa1c6aa00006d":[{"id":47891,"user_id":527,"body":"def letter_count(str)\n  str.each_char.tally\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47892,"user_id":1624,"body":"def letter_count(str)\n  str.chars.tally\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47893,"user_id":1403,"body":"def letter_count(str)\n  str.chars.sort.map { | i | [i, str.count(i)] }.to_h\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47894,"user_id":1072,"body":"def letter_count(str) res={} of Char => Int32; str.split(\"\").each{|l| res[l.char_at(0)]=(res[l.char_at(0)]? || 0)+1}; res end\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47895,"user_id":null,"body":"def letter_count(str)\n  str.each_char\n     .group_by(&.itself)\n     .each_with_object({} of Char => Int32) do |(key, value), memo|\n       memo[key] = value.size\n     end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47896,"user_id":759,"body":"def letter_count(str)\n  res = Hash(Char, Int32).new\n  str.each_char { |c| res[c] = res.fetch(c, 0) + 1 }\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47897,"user_id":null,"body":"def letter_count(str : String) : Hash(Char, Int32)\n  str.chars.tally\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47898,"user_id":421,"body":"def letter_count(str)\n  str.chars.uniq.sort.map{|x| [x, str.count(x)]}.to_h\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47899,"user_id":null,"body":"def letter_count(str)\n  str.chars.group_by(&.itself).map { |c, a| {c, a.size} }.to_h\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47900,"user_id":null,"body":"def letter_count(str)\n  o = {} of Char => Int32\n  str.chars.each {|n| o.put(n, o[n]? ? o[n] + 1 : 1){}}  \n  \n  return o\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"580a094553bd9ec5d800007d":[{"id":47901,"user_id":null,"body":"def apple(x)\n  if (x.to_i ** 2) > 1000\n    \"It\\'s hotter than the sun!!\"\n  else \n    \"Help yourself to a honeycomb Yorkie for the glovebox.\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47902,"user_id":1072,"body":"def apple(x) x.to_i>31 ? \"It's hotter than the sun!!\" : \"Help yourself to a honeycomb Yorkie for the glovebox.\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47903,"user_id":50,"body":"def apple(x)\n   x.to_i**2<1000 ? \"Help yourself to a honeycomb Yorkie for the glovebox.\" : \"It's hotter than the sun!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47904,"user_id":null,"body":"def apple(x)\n  x.to_i > 31.622 ? \"It's hotter than the sun!!\" : \"Help yourself to a honeycomb Yorkie for the glovebox.\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47905,"user_id":1624,"body":"def apple(x)\n  if x.to_f ** 2 > 1000\n    \"It's hotter than the sun!!\"\n  else\n    \"Help yourself to a honeycomb Yorkie for the glovebox.\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47906,"user_id":null,"body":"def apple(x)\n  return \"It's hotter than the sun!!\" if x.to_i * x.to_i > 1000\n  \"Help yourself to a honeycomb Yorkie for the glovebox.\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47907,"user_id":1375,"body":"def apple(x)\n  if x.to_i ** 2 > 1000 \n    \"It's hotter than the sun!!\"\n  else\n    \"Help yourself to a honeycomb Yorkie for the glovebox.\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47908,"user_id":527,"body":"def apple(x : Int | String) : String\n  x.to_i > 31 ? \"It's hotter than the sun!!\" : \"Help yourself to a honeycomb Yorkie for the glovebox.\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47909,"user_id":527,"body":"def apple(x : Int | String) : String\n  x.to_i ** 2 > 1000 ? \"It's hotter than the sun!!\" : \"Help yourself to a honeycomb Yorkie for the glovebox.\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47910,"user_id":null,"body":"def apple(x)\n  if x.to_i * x.to_i > 1000\n    \"It's hotter than the sun!!\"\n  else\n    \"Help yourself to a honeycomb Yorkie for the glovebox.\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"580a41b6d6df740d6100030c":[{"id":47911,"user_id":421,"body":"def alan(arr)\n  [\"Rejection\", \"Disappointment\", \"Backstabbing Central\", \"Shattered Dreams Parkway\"].all?{|y| arr.includes?(y)} ?  \"Smell my cheese you mother!\" : \"No, seriously, run. You will miss it.\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47912,"user_id":1474,"body":"STOPS = [\"Rejection\", \"Disappointment\", \"Backstabbing Central\", \"Shattered Dreams Parkway\"]\n\ndef alan(arr)\n  STOPS.all? { |stop| arr.includes?(stop) } ? \"Smell my cheese you mother!\" : \"No, seriously, run. You will miss it.\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47913,"user_id":1828,"body":"def alan(arr)\n  a = [\"Rejection\", \"Disappointment\", \"Backstabbing Central\", \"Shattered Dreams Parkway\"]\n  b = a.map{|i| arr.includes?(i)}.uniq\n  b == [true] ? \"Smell my cheese you mother!\" : \"No, seriously, run. You will miss it.\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47914,"user_id":53,"body":"def alan(arr)\n  if [\"Rejection\", \"Disappointment\", \"Backstabbing Central\", \"Shattered Dreams Parkway\"].all? {|x| arr.includes?(x)}\n    \"Smell my cheese you mother!\"\n  else\n    \"No, seriously, run. You will miss it.\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47915,"user_id":null,"body":"def alan(arr)\n  if [\"Rejection\", \"Disappointment\", \"Backstabbing Central\", \"Shattered Dreams Parkway\"].all?{|stop| arr.includes?(stop)}\n    \"Smell my cheese you mother!\"\n  else\n    \"No, seriously, run. You will miss it.\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47916,"user_id":1072,"body":"def alan(arr) [\"Rejection\", \"Disappointment\", \"Backstabbing Central\", \"Shattered Dreams Parkway\"].reduce(true){|a,b| a&&arr.index(b)} ? \"Smell my cheese you mother!\" : \"No, seriously, run. You will miss it.\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"580be55ca671827cfd000043":[{"id":47917,"user_id":1246,"body":"def wanted_words(n, m, forbid_let)\n  WORD_LIST.select{|x|\n    vow = x.chars.select{|c|c.to_s =~ \/[aeiou]\/i}.size == n\n    cons= x.chars.select{|c|c.to_s =~ \/[^aeiou]\/i}.size == m\n    no_f = !forbid_let.any?{|c|x.includes?(c)}\n    vow && cons && no_f\n  }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47918,"user_id":1403,"body":"def wanted_words(n, m, forbid_let)\n    WORD_LIST\n      .select { | i | i.count(\"aeiou\")  == n }\n      .select { | i | i.count(\"^aeiou\") == m }\n      .reject { | i | forbid_let.any? { | j | i.includes? j } }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"580dda86c40fa6c45f00028a":[{"id":47919,"user_id":null,"body":"def cube_odd(arr)\n  return nil unless arr.is_a? Array(Int32)\n  arr.map { |n| n * n * n }.select(&.odd?).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47920,"user_id":421,"body":"def cube_odd(arr)\n   arr.all?{|x| x.is_a?(Int32)} ? arr.select{|x| x % 2 == 1}.sum{|x| x.to_i ** 3} : nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47921,"user_id":null,"body":"def cube_odd(arr)\n  sum = 0\n  arr.each do | i |\n    return nil unless i.is_a?(Int32)\n    sum += i**3 if i.odd?\n  end\n  sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47922,"user_id":null,"body":"def cube_odd(arr)\n  arr.is_a?(Array(Int32)) ? arr.select(&.odd?).sum(&.**(3)) : nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47923,"user_id":null,"body":"def cube_odd(arr)\n  arr.is_a?(Array(Int32)) ? arr.select(&.odd?).map { |n| n ** 3 }.sum : nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47924,"user_id":1624,"body":"def cube_odd(arr)\n  e = 0\n  arr.each do |x|\n    case x\n    when Int32\n      e += x**3 if x.odd?\n    else\n      return\n    end\n  end\n  e\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47925,"user_id":527,"body":"def cube_odd(xs)\n  xs.map(&.as(Int)).select(&.odd?).sum(&.**(3)) if xs.all?(&.is_a?(Int))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47926,"user_id":1072,"body":"def cube_odd(arr) return nil if arr.class != Array(Int32) ; arr.reduce(0){|a,b| b=b.to_i32; a.class != Int32 || b.class != Int32 ? nil : b%2==1 ? (a || 0).to_i32+b*b*b : a} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"580f1a22df91279f09000273":[{"id":47927,"user_id":null,"body":"def random_ints(n, total)\n  r = Random.new\n  arr = [] of Int32\n  until arr.size == n - 1\n    arr << r.rand(total - arr.sum)\n  end\n  arr.push(total - arr.sum)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47928,"user_id":1403,"body":"def random_ints(n, total)\n  arr = (1..n).to_a.fill { [0,1].sample } \n  while arr.sum < total \n    idx = (0...arr.size).to_a.sample\n    arr[idx] += ((-arr[idx])..(total - arr.sum)).to_a.sample\n  end\n  arr\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5810ad962b321bac8f000178":[{"id":47929,"user_id":50,"body":"def shuffled_deck\n  a=[\"H 4\", \"H 12\", \"S 3\", \"S 10\", \"H 7\", \"H 3\", \"C 12\", \"S 7\", \"D 1\", \"D 11\", \"D 9\", \"S 6\", \"D 2\", \"H 6\", \"D 12\", \"D 13\", \"D 4\", \"H 2\", \"C 1\", \"H 10\", \"C 3\", \"S 5\", \"S 11\", \"H 11\", \"C 5\", \"C 13\", \"H 1\", \"C 10\", \"D 7\", \"H 8\", \"D 10\", \"S 2\", \"C 2\", \"C 9\", \"S 1\", \"C 7\", \"D 6\", \"S 4\", \"S 9\", \"S 12\", \"H 5\", \"C 8\", \"D 8\", \"S 13\", \"H 9\", \"C 11\", \"C 4\", \"D 5\", \"C 6\", \"H 13\", \"D 3\", \"S 8\"]\n  51.downto(1).each do |i|\n    j=(i*rand()).to_i\n    a[i],a[j]=a[j],a[i]\n  end\n  a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47930,"user_id":168,"body":"def shuffled_deck\n  \"HCDS\".chars.product((1..13).to_a).map { |s, v| \"#{s} #{v}\" }.shuffle\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47931,"user_id":53,"body":"def shuffled_deck\n  ans = [] of String\n  \"HCDS\".chars.each{|s|(1..13).each{|r|ans<<\"#{s} #{r}\"}}\n  ans.shuffle\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47932,"user_id":421,"body":"def shuffled_deck\n  \"HCDS\".chars.flat_map{|x| (1..13).map{|y| \"#{x} #{y}\"}}.shuffle\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47933,"user_id":null,"body":"C = ['H', 'C', 'D', 'S'].product((1..13).to_a)\n\ndef shuffled_deck\n  C.shuffle  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47934,"user_id":null,"body":"def shuffled_deck\n  suits = ['H', 'C', 'D', 'S']\n  deck = [] of String\n  4.times do\n    r = suits[rand(suits.size)]\n    cards = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    suits.delete r\n    cards.size.times do\n      cr = cards[rand(cards.size)]\n      deck << \"#{r} #{cr}\"\n      cards.delete cr\n    end\n  end\n  deck\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47935,"user_id":null,"body":"def shuffled_deck\n  r = [] of String\n  ['H', 'C', 'D', 'S'].each { |c| 13.times { |i| r << \"#{c} #{i + 1}\" } }\n  r.shuffle\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47936,"user_id":527,"body":"def shuffled_deck\n  \"HCDS\".chars.product((1..13).to_a).map(&.join(' ')).shuffle\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47937,"user_id":1828,"body":"def shuffled_deck\n  ['H', 'C', 'D', 'S'].map{|i| (1..13).map{|j| \"#{i} #{j}\"}}.flatten.shuffle\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"581331293788bc1702001fa6":[{"id":47938,"user_id":421,"body":"def mirror(text)\n  a = text.split.map(&.size).max + 4\n  \"#{\"*\" * a}\n* #{text.split.map{|x| x.reverse + \" \" * (a - 4 - x.size)}.join(\" *\n* \")} *\n#{\"*\" * a}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47939,"user_id":1072,"body":"def mirror(t) m=t.split(\" \").reduce(0){|a,b| a<b.size ? b.size: a}; ([\"*\"*(m+4)]+t.split(\" \").map{|a| [\"* \",a.split(\"\").reverse.join,\" \"*(m-a.size),\" *\"].join}+[\"*\"*(m+4)]).join(\"\n\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47940,"user_id":null,"body":"def mirror(text)\n  size = text.split(\" \").sort_by { |w| w.size }[-1].size\n  bar = \"#{\"*\" * (size + 4)}\"\n  \n  str = \"#{bar}\n#{text.split(\" \").map {|w| \"* #{w.reverse}#{\" \" * (size - w.size + 1)}*\n\"}.join(\"\")}#{bar}\"\n  \n  str\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47941,"user_id":null,"body":"def mirror(text)\n  words = text.split\n  length = words.map{|w| w.size}.max + 2\n  words.map!{|w| \"*#{\" #{w.reverse}\".ljust(length, ' ')}*\" }\n  2.times{|_| words << \"\".ljust(length + 2, '*')}\n  words.rotate!(-1)\n  words.join(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47942,"user_id":null,"body":"def mirror(text)\n  msg = \"\"\n  arr = text.split(\" \")\n  longest_word = arr.sort_by{ |w| w.size }.last.size\n  msg += \"*\" * (longest_word + 4) + \"\n\"\n  (0...arr.size).each do |n|\n    msg += \"* \"\n    msg += arr[n].reverse.ljust(longest_word, ' ')\n    msg += \" *\n\"\n  end\n  msg += \"*\" * (longest_word + 4)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47943,"user_id":null,"body":"def mirror(text)\n  l = text.split(' ').max_of &.size + 4\n  String.build { |s| s << \"*\" * l + \"\n\"; text.split(' ').each { |w| s << \"* #{w.reverse}#{\" \" * (l - w.size - 3)}*\n\" }; s << \"*\" * l + \"\n\" }.chomp\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47944,"user_id":null,"body":"def mirror(text)\n  split = text.split(\" \").map!{|w| w.reverse}\n  width = split.sort_by{|w| w.size}[-1].size + 4\n  string = String::Builder.new\n  string << \"*\" * width << \"\n\"\n  split.each{|w| string << \"* \" << w << \" \" * (width - 4 - w.size) << \" *\n\"}\n  string << \"*\" * width\n  string.to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47945,"user_id":null,"body":"def mirror(text)\n  words = text.split(\" \")\n  length = words.map(&.size).max\n  frame = \"*\" * (length + 4)\n  \n  words\n    .map!(&.reverse)\n    .map!{|it| it + \" \" * (length - it.size)}\n    .map!{|it| \"* #{it} *\n\"}\n  \n  \"#{frame}\n#{words.join}#{frame}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47946,"user_id":2986,"body":"def mirror(text)\n  max_len = 0;\n  # Find the longest world\n  text.split(\/\\s+\/).each do |word|\n    word_len = word.size\n    if (word_len > max_len)\n      max_len = word_len\n    end\n  end\n  # Create the mirrored string\n  max_len = max_len + 4\n  mirrored = \"*\" * max_len + \"\n\"\n  text.split(\/\\s+\/).each do |word|\n    repeat_white = max_len  - 4 - word.size\n    if (repeat_white < 0 ) \n      repeat_white = 0\n    end\n    mirrored += \"* \" + word.split(\"\").reverse().join(\"\") + \" \" * repeat_white + \" *\n\"\n  end\n  mirrored += \"*\" * max_len\n  mirrored\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5813d19765d81c592200001a":[{"id":47947,"user_id":null,"body":"def dont_give_me_five(start_, end_)\n    (start_..end_).select { |n| !n.to_s.includes?(\"5\") }.size\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47948,"user_id":421,"body":"def dont_give_me_five(start_,end_)\n    (start_..end_).reject{|x| x.to_s.includes? \"5\"}.size\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47949,"user_id":1474,"body":"def dont_give_me_five(start_,end_)\n  (start_..end_).select { |i| !i.to_s.includes?('5') }.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47950,"user_id":null,"body":"def dont_give_me_five(x, y)\n  (x..y).reject { |x| x.to_s.includes?(\"5\") }.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47951,"user_id":null,"body":"def dont_give_me_five(x : Int32 , y : Int32) : Int32\n    (x..y).to_a\n          .reject { |n| n.to_s.includes? \"5\" }\n          .size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47952,"user_id":168,"body":"def dont_give_me_five(a, b)\n  (a..b).count { |x| !x.to_s.includes?(\"5\") }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47953,"user_id":53,"body":"def dont_give_me_five(a, b)\n  (a..b).count {|n|!(n.to_s.includes?('5'))}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47954,"user_id":null,"body":"def dont_give_me_five(start_,end_)\n    counter = 0\n    numbers = (start_..end_).to_a\n    numbers.each do |num|\n      if !num.to_s.includes? \"5\"\n        counter += 1\n      end\n    end\n    return counter.to_i      # n amount of numbers\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47955,"user_id":527,"body":"def dont_give_me_five(b, e)\n  (b..e).count(&.abs.digits.includes?(5).!)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47956,"user_id":527,"body":"def dont_give_me_five(b, e)\n  (b..e).count(&.to_s.includes?('5').!)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58143221f9588e340e00009f":[{"id":47957,"user_id":421,"body":"def bang_bang(history)\n  history.split(\/(^|\n)\\s*\\d+\\s*\/).last\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47958,"user_id":1072,"body":"def bang_bang(h) h.split(\"\n\")[-1].sub(\/\\s*\\d+\\s+\/,\"\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47959,"user_id":null,"body":"def bang_bang(history)\n    history.split(\"\n\")[-1].split(\/\\s+\/, 3)[2]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47960,"user_id":50,"body":"def bang_bang(history)\n  history.split(\/\n\/).pop().gsub(\/^\\s*\\d+\\s*\/,\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47961,"user_id":2986,"body":"def bang_bang(history)\n  history.split(\/\n\/).last.sub(\/\\A\\s+\\d+\\s+\/,\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47962,"user_id":2986,"body":"def bang_bang(history)\n  history.split(\/\n\/).last.gsub(\/\\A\\s+\\d+\\s+\/,\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5814bf3f3db1ffc0180000d3":[{"id":47963,"user_id":421,"body":"def bang_n(n,history)\n  history.split(\/\n\/)[n - 1].gsub(\/^\\s*\\d+\\s*\/, \"\") rescue \"!#{n}: event not found\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47964,"user_id":1072,"body":"def bang_n(n,history) h=history.split(\"\n\"); h.size<n ? \"!#{n}: event not found\" : h[n-1].split(\/\\s+\/)[2,h.size+1].join(\" \") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47965,"user_id":null,"body":"def bang_n(n,history)\n  h = history.split(\"\n\").map { |line| \/^\\s+(\\d+)\\s+(.*?)\\s*$\/.match(line).not_nil!.captures }.to_h\n  h.fetch(n.to_s) { |k| \"!#{k}: event not found\" }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47966,"user_id":null,"body":"def bang_n(n,history)\n\tcase s = history.lines.map { |line| \/(\\d+)\\s+(.*)\/.match(line).try(&.[2]) }[n - 1]?\n  when Nil\n  \t\"!#{n}: event not found\"\n  when String\n\t\ts\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47967,"user_id":1246,"body":"def bang_n(n,history)\n  f = history.split(\"\n\")\n  return n <= f.size ? f[n-1].sub(\/\\s+\\d+\\s+\/,\"\") : \"!#{n}: event not found\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47968,"user_id":2986,"body":"def bang_n(n,history)\n  history.split(\/\n\/)[n-1].sub(\/\\A\\s+\\d+\\s+\/,\"\") rescue \"!#{n}: event not found\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5815fd7441e062463d0000f8":[{"id":47969,"user_id":421,"body":"def bang_minus_n(n,history)\n  history.gsub(\/^\\s+\/, \"\").split(\/\n\\s*\/)[-n].gsub(\/^\\d+\\s*\/, \"\") rescue \"!-#{n}: event not found\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47970,"user_id":null,"body":"def bang_minus_n(n,history)\n  l = history.lines\n  return \"!-#{n}: event not found\" if n > l.size\n  l[-n].lstrip {|c| c.number? || c.whitespace?}\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47971,"user_id":2986,"body":"def bang_minus_n(n,history)\n  hist = history.split(\/\n\/)\n  pos  = hist.size-n \n  pos < 0 ? \"!#{-n}: event not found\" : hist[pos].sub(\/\\A\\s+\\d+\\s+\/,\"\") \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58162692c2a518f03a000189":[{"id":47972,"user_id":421,"body":"def time(distance,boat_speed,stream)\n  a, b = stream.split\n  a == \"Downstream\" ? (distance.to_f \/ (boat_speed + b.to_i)).round(2) : (distance.to_f \/ (boat_speed - b.to_i)).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47973,"user_id":168,"body":"def time(distance,boat_speed,stream)\n  (distance \/ (boat_speed + stream.sub(\/Downstream \/, \"\").sub(\/Upstream \/, \"-\").to_f)).round 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47974,"user_id":null,"body":"def time(distance : Number, boat_speed : Number, stream : String) : Float\n  dir,speed = stream.split\n  boat_speed += (dir[0] === 'U' ? -speed.to_f : speed.to_f)\n  (distance \/ boat_speed).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47975,"user_id":53,"body":"def time(d,v,s)\n  a,b = s.split(\" \")\n  if a==\"Downstream\"\n    v+=b.to_i\n  else\n    v-=b.to_i\n  end\n  (d\/v).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47976,"user_id":1624,"body":"def time(distance,boat_speed,stream)\n  if stream =~ \/Down.*?(\\d+)\/\n    boat_speed += $1.to_i\n  elsif stream =~ \/Up.*?(\\d+)\/\n    boat_speed -= $1.to_i\n  else\n    raise \"FAIL\"\n  end\n  (distance \/ boat_speed).round(2)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47977,"user_id":1072,"body":"def time(d,b,s) (1.0*d\/(b+(\/Upstream\/=~s ? -s.gsub(\/[^\\d]+\/,\"\").to_i : +s.gsub(\/[^\\d]+\/,\"\").to_i))).round(2) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5816f2580e80c5e075000a4f":[{"id":47978,"user_id":421,"body":"def add_fracs(*a)\n  if a.empty?\n    return \"\"\n  end\n  denom = a.map{|x| x.split(\"\/\")[1].to_i}.reduce(1){|a, b| a * b \/\/ a.gcd(b)}\n  numer = a.map{|x| x.split(\"\/\")[0].to_i * (denom \/\/ x.split(\"\/\")[1].to_i)}.sum\n  g = denom.gcd(numer)\n  \"#{numer \/\/ g}\/#{denom \/\/ g}\".gsub(\/\\\/1$\/, \"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47979,"user_id":null,"body":"require \"big\"\ndef add_fracs(*fracs)\n  fracs.map(&.split \"\/\").map{|d| BigRational.new d[0].to_i, d[1].to_i}.sum.to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47980,"user_id":null,"body":"def add_fracs(*fracs)\n  if fracs==nil; \"\"\n  else\n    lst = fracs.map(&.split(\"\/\").map &.to_i)\n    denom = lst.reduce 1 {|ac, d| ac.lcm d[1]}\n    nom = lst.reduce 0 {|ac, d| ac+denom*d[0]\/d[1]}\n    gcd = denom.gcd(nom); nom\/=gcd; denom\/=gcd\n    denom>1? \"#{nom}\/#{denom}\": \"#{nom}\"  \n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47981,"user_id":1403,"body":"require \"big\"\n\ndef add_fracs(*fracs)\n  if fracs.size == 0; return \"\"; end\n  return fracs.map { | i | x = i.split(\"\/\").map(&.to_i); BigRational.new(x[0], x[1]) }.sum.to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47982,"user_id":1403,"body":"require \"big\"\n\ndef add_fracs(*fracs)\n  if fracs.size == 0; return \"\"; end\n  return fracs.map { | i | x = i.split(\"\/\").map(&.to_i); BigRational.new(x[0], x[1]) }.sum.to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5818236ae7f457017b00022b":[{"id":47983,"user_id":421,"body":"def bang_start_string(s,history)\n   history.split(\"\n\").reverse.map{|x| x.gsub(\/^\\s+\\d+\\s+\/, \"\")}.find{|y| y.starts_with?(s)} || \"!#{s}: event not found\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47984,"user_id":2986,"body":"def bang_start_string(s,history)\n  hist = history.split(\/\n\/)\n  hist.reverse!\n  hist.each do |h|\n    this_cmd = h.sub(\/\\A\\s+\\d+\\s+\/,\"\")\n    return this_cmd if this_cmd.index(s) == 0 \n  end\n  \"!#{s}: event not found\" \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58184387d14fc32f2b0012b2":[{"id":47985,"user_id":null,"body":"def f (x)\n    x \/ ((1 + x) ** 0.5 + 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47986,"user_id":168,"body":"def f (x)\n  x * (0.5 - x * (0.125 - x * (0.0625 - x * 0.0390625)))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47987,"user_id":1474,"body":"def f (x)\n  x \/ 2 - x ** 2 \/ 8 + x ** 3 \/ 16 - 5 * x ** 4 \/ 128\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47988,"user_id":50,"body":"def f (x)\n  x\/(1+(1+x)**0.5)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47989,"user_id":1228,"body":"def f (x)\n     x \/ ((1.0+x)**0.5+1.0) \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47990,"user_id":1134,"body":"def f (x)\n    x\/(1+((x+1)**0.5))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47991,"user_id":527,"body":"def f(x)\n  Math.expm1(0.5 * Math.log1p(x))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47992,"user_id":492,"body":"def f (x)\n    x \/ (1 + Math.sqrt(1 + x)) \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"581951b3704cccfdf30000d2":[{"id":47993,"user_id":421,"body":"def split_without_loss(str, split_p)\n  str.gsub(split_p.delete('|'), split_p).split('|').reject(&.empty?)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47994,"user_id":1403,"body":"def split_without_loss(str, split_p)\n  str.gsub(split_p.gsub(\/\\|\/,\"\"), split_p).split(\"|\").reject { | i | i == \"\" }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"581963edc929ba19e7000148":[{"id":47995,"user_id":421,"body":"def furthest_distance(arr, k)\n  n = -1\n  (0...arr.size).each do |i|\n    (i + 1...arr.size).each do |j|\n      if (arr[j] - arr[i]).abs >= k\n        n = [n, j - i].max\n      end\n    end\n  end\n  n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47996,"user_id":1403,"body":"def furthest_distance(arr, k)\n  nl = [] of Int32\n  (0...arr.size).each { | i |\n    (0...arr.size).each { | j |\n      if arr[i] - arr[j] >= k\n        nl.push((i - j).abs)\n      end\n    }\n  }\n  nl.empty? ? -1 : nl.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5819a6fdc929bae4f5000a33":[{"id":47997,"user_id":1624,"body":"def id(s)\n  return \"kebab\" if s =~ \/\\A[a-z]+(-[a-z]+)*\\z\/\n  return \"snake\" if s =~ \/\\A[a-z]+(_[a-z]+)*\\z\/\n  return \"camel\" if s =~ \/\\A[a-zA-Z]+\\z\/\n  \"none\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47998,"user_id":53,"body":"def id(s)\n  return \"kebab\" if (\/^[a-z]+(-[a-z]+)+$\/) === s\n  return \"snake\" if (\/^[a-z]+(_[a-z]+)+$\/) === s\n  return \"camel\" if (\/^[a-z]+([A-Z]*[a-z]*)+$\/) === s\n  return \"none\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":47999,"user_id":1403,"body":"def id(c_str)\n  if (\/^([a-z]+\\-)+[a-z]+$\/) === c_str\n    return \"kebab\"\n  end\n  if (\/^([a-z]+\\_)+[a-z]+$\/) === c_str\n    return \"snake\"\n  end\n  if (\/^([a-z]+[A-Z])+[a-z]+$\/) === c_str\n    return \"camel\"\n  end\n  return \"none\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"581a52d305fe7756720002eb":[{"id":48000,"user_id":421,"body":"def validate_number(string)\n   \/^(0|\\+44)7(\\d){9}$\/ === string.gsub('-', \"\") ? \"In with a chance\" : \"Plenty more fish in the sea\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48001,"user_id":1624,"body":"def validate_number(s)\n  if s.gsub(\"-\", \"\") =~ \/\\A(0|\\+44)7\\d{9}\\z\/\n    \"In with a chance\"\n  else\n    \"Plenty more fish in the sea\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48002,"user_id":null,"body":"def validate_number(string)\n  \/\\A(\\+44|0)7\\d{9}\\z\/ === string.delete(\"-\") ? \"In with a chance\" : \"Plenty more fish in the sea\"\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48003,"user_id":null,"body":"def validate_number(string)\n  string.gsub(\"-\", \"\")=~\/^(0|\\+44)7\\d{9}$\/? \"In with a chance\": \"Plenty more fish in the sea\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48004,"user_id":1072,"body":"def validate_number(s) (\/^(\\+44|0)7\\d{9}$\/=~s.gsub(\"-\",\"\"))!=nil ? \"In with a chance\" : \"Plenty more fish in the sea\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"581b29b549b2c0daeb001454":[{"id":48005,"user_id":421,"body":"def bang_contain_string(s,history)\n  history.split(\"\n\").reverse.map{|x| x.gsub(\/^\\s+\\d+\\s+\/, \"\")}.find{|y| y.includes?(s)} || \"!#{s}: event not found\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48006,"user_id":1246,"body":"def bang_contain_string(s,history)\n  res =  history.split(\"\n\").select{|x|x.includes?(s)}\n  return res.empty? ? \"!#{s}: event not found\" : res.last.sub(\/\\s+\\d+\\s+\/,\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48007,"user_id":2986,"body":"def bang_contain_string(s,history)\n  hist = history.split(\/\n\/)\n  hist.reverse!\n  hist.each do |h|\n    this_cmd = h.sub(\/\\A\\s+\\d+\\s+\/,\"\")\n    return this_cmd if this_cmd.index(s)\n  end\n  \"!#{s}: event not found\" \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"581de9a5b7bad5d369000150":[{"id":48008,"user_id":421,"body":"def day_plan(hours, tasks, duration)\n  hours * 60 < tasks * duration ? \"You\\'re not sleeping tonight!\" : (0...tasks * 2 - 1).map{|x| x.odd?? ((hours * 60 - tasks * duration) \/ (tasks - 1)).round : duration}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48009,"user_id":53,"body":"def day_plan(h, t, d)\n  b = t > 1 ? (h * 60 - t * d).to_f \/ (t - 1) : 0\n  return \"You're not sleeping tonight!\" if b < 0\n  s = ([d, b.round] * t)\n  s[0...s.size-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48010,"user_id":null,"body":"def day_plan(hours, tasks, duration)\n  return [] of Int32 if tasks==0\n  breaks = 60*hours-tasks*duration\n  return \"You're not sleeping tonight!\" if breaks<0\n  (1...2*tasks).map {|i| i%2==1? duration: (breaks \/ (tasks-1)).round}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48011,"user_id":null,"body":"def day_plan(hours, tasks, duration)\n  return [] of Int32 if tasks==0\n  breaks = 60*hours-tasks*duration\n  return \"You're not sleeping tonight!\" if breaks<0\n  (1...2*tasks).map {|i| i%2==1? duration: (breaks \/ (tasks-1)).round.to_i}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48012,"user_id":null,"body":"def day_plan(hours, tasks, duration)\n  if tasks==0; return [] of Int32; end\n  breaks = 60*hours-tasks*duration\n  if breaks<0; return \"You're not sleeping tonight!\"; end\n  (1...2*tasks).map {|i| i%2==1? duration: (breaks \/ (tasks-1)).round.to_i}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48013,"user_id":1624,"body":"def day_plan(hours, tasks, duration)\n  return [] of Int32 if tasks == 0\n  break_total = hours * 60 - tasks * duration\n  if break_total < 0\n    \"You're not sleeping tonight!\"\n  else\n    break_time = (break_total \/ (tasks - 1)).round\n    ([duration, break_time] * tasks)[0, 2 * tasks - 1]\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48014,"user_id":1072,"body":"def day_plan(h,t,d) r=h*60-t*d; r<0 ? \"You're not sleeping tonight!\" : ([d,(r\/[t-1, 1].max.to_f).round]*t)[0...-1] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"581e014b55f2c52bb00000f8":[{"id":48015,"user_id":421,"body":"def decipher_this(string)\n  string.split.map{|x| x.gsub(\/^(\\d+)(\\w?)(\\w*?)(\\w?)$\/){$1.to_i.chr + $4 + $3 + $2}}.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48016,"user_id":null,"body":"def decipher_this(string)\n  string.split.map(&.gsub(\/(\\d+)\/, &.to_i.chr)).map(&.gsub(\/(^.)(.)(.*)(.)$\/, \"\\\\1\\\\4\\\\3\\\\2\")).join(' ')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48017,"user_id":null,"body":"def decipher_this(string : String)\n    string.split(\" \").map { |el| swap(el.gsub(\/\\d+\/, el.match(\/\\d+\/).not_nil![0].to_i.chr), 1, -1) }.join(\" \")\nend\n\ndef swap(str, p1, p2)\n    return str if str.size <= 2\n    str_arr = str.chars\n    tmp = str_arr[p1]\n    str_arr[p1] = str_arr[p2]\n    str_arr[p2] = tmp\n    str_arr.join(\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48018,"user_id":759,"body":"def decipher_word(word)\n  f = i = 0\n  while i < word.size && ('0'..'9').includes?(word[i])\n    f = f * 10 + word[i].ord - '0'.ord\n    i += 1\n  end\n  f = f.chr.to_s\n  case word.size\n  when i\n    f\n  when i + 1\n    f + word[i]\n  else\n    f + word[-1] + word[(i+1)..-2] + word[i]\n  end\nend\n\ndef decipher_this(string)\n  string.split.map { |x| decipher_word(x) }.join ' '\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48019,"user_id":null,"body":"def decipher_this(string)\n  string.split.map do |word|\n    cs = word.sub(\/\\d+\/) { |digits| '\\u{0}' + digits.to_i }.chars\n    cs[1], cs[-1] = cs[-1], cs[1] if cs.size > 2\n    cs.join\n  end.join(' ')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48020,"user_id":1715,"body":"def decipher_this(string)\n  string.gsub(\/[0-9]+\/){ |w| w.to_i.chr }.split.map{|w| w.size < 3 ? w : \"#{w[0]}#{w[-1]}#{w[2..-2]}#{w[1]}\" }.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48021,"user_id":null,"body":"def decipher_word(word)\n  text = word.gsub(\/\\d+\/) { |ascii| ascii.to_i.chr }\n  return text if text.size == 1\n  chars = text.chars\n  chars[1], chars[-1] = chars[-1], chars[1]\n\tchars.join\nend  \n\ndef decipher_this(string)\n    string.split(' ')\n    \t.map { |word| decipher_word(word) }\n    \t.join(' ')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48022,"user_id":1828,"body":"def decipher_this(string)\n  string.gsub(\/(\\d+)([a-z]*)\\s?\/i){$1.to_i.chr+($2.size <=2 ? $2.reverse : $2[-1]+$2[1..-2]+$2[0])+' '}.strip\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48023,"user_id":1072,"body":"def decipher_this(s) s.split(\" \").map{|a| a.gsub(\/[^0-9]\/,\"\").to_i.chr+((a=~\/\\D\/)==nil ? \"\" : a.gsub(\/(\\d+)(\\w?)(\\w*)(\\w)\/,\"\\\\4\\\\3\\\\2\"))}.join(\" \") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"581ee0db1bbdd04e010002fd":[{"id":48024,"user_id":421,"body":"def interp(f, l, u, n)\n  d = (u - l) \/ n\n  (0...n).map{|i| (f.call(l + i * d) * 100).floor \/ 100}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48025,"user_id":492,"body":"def trunc(x, p)\n    (x * (10 ** p)).floor \/ (10 ** p).to_f\nend\ndef interp(f, l, u, n)\n    accu = [] of Float64\n    i = 0\n    while i < n\n        d = (i * (u - l) \/ n.to_f).to_f\n        accu << trunc(f.call(l + d), 2)\n        i += 1\n    end\n    accu\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"581f4ac139dc423f04000b99":[{"id":48026,"user_id":168,"body":"def transpose_two_strings(arr)\n  n = [arr[0].size, arr[1].size].max\n  (arr[0].chars + [' '] * (n - arr[0].size)).zip(arr[1].chars + [' '] * (n - arr[1].size)).map {|i, j| \"#{i} #{j}\"}.join \"\n\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48027,"user_id":53,"body":"def transpose_two_strings(arr)\n  res = Array(String).new\n  m = arr.map{|e|e.size}.max\n  (0...m).each{|i|\n    res << arr.map{|e| i<e.size ? e[i] : \" \"}.join(\" \")\n  }\n  res.join(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48028,"user_id":1624,"body":"def transpose_two_strings(s)\n  a, b = s\n  sz = s.map(&.size).max\n  (0...sz).map{|i|\n    (a[i]? || \" \") + \" \" + (b[i]? || \" \")\n  }.join(\"\n\")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48029,"user_id":1750,"body":"def transpose_two_strings(arr)\n  (0...arr.max_by(&.size).size)\n  .map { |index| \"#{arr[0][index] rescue \" \"} #{arr[1][index] rescue \" \"}\" }\n  .join(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48030,"user_id":1072,"body":"def transpose_two_strings(arr) arr=[arr[0]+\" \"*([0,arr[1].size-arr[0].size].max),arr[1]+\" \"*([0,arr[0].size-arr[1].size].max)]; (0...[arr[0].size,arr[1].size].max).map{|i| \"#{arr[0][i]} #{arr[1][i]}\"}.join(\"\n\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58223370aef9fc03fd000071":[{"id":48031,"user_id":null,"body":"def dashatize(num)\n  num.to_s.split(\/([13579])\/).reject(&.empty?).join('-').strip('-')\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48032,"user_id":2055,"body":"def dashatize(num)\n  num.to_s\n  \t.gsub(\/[13579]\/, \"-\\\\0-\")\n    .gsub(\"--\", \"-\")\n    .gsub(\/^-\/, \"\")\n    .gsub(\/-$\/, \"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48033,"user_id":null,"body":"def dashatize(num)\n  return \"\" if num.nil?\n\n  out_str = \"\"\n  arr = num.abs.to_s.chars\n  size = arr.size\n  arr.each_with_index do |char, i|\n    out_str += '-' if i - 1 >= 0 && arr[i-1].to_i.odd?\n    out_str += char\n    out_str += '-' if i + 1 < size && arr[i+1].to_i.odd?\n  end\n\n  return out_str.gsub(\"--\",\"-\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48034,"user_id":null,"body":"def dashatize(num)\n  return \"\" if !num.is_a?(Int32)\n  num.abs\n    .digits\n    .reverse\n    .map { |i| i.divisible_by?(2) ? i.to_s : \"-#{i}-\" }\n    .join\n    .chars\n    .chunk(&.itself)\n    .map { |(k, v)| k == '-' ? '-' : v.join }\n    .join\n    .strip('-')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48035,"user_id":421,"body":"def dashatize(num)\n   num.nil? ? \"\" : num.abs.to_s.scan(\/[13579]|[02468]+\/).map(&.[0]).join(\"-\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48036,"user_id":null,"body":"def dashatize(num)\n  if num == nil\n    return \"\"\n  end\n  answer = \"\"\n  num.to_s.chars.map { |c|\n    if c != '-'\n      if c.to_i % 2 == 1\n        answer += \"-\" + c + \"-\"\n      else\n        answer += c\n      end\n    end\n  }\n  answer = answer.gsub \"--\", \"-\"\n  offset_l = 0\n  offset_r = answer.size - 1\n  if answer[0] == '-'\n    offset_l += 1\n  end\n  if answer[answer.size - 1] == '-'\n    offset_r -= 1\n  end\n  answer[offset_l..offset_r]\nend\n\nprint(dashatize(-1))\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48037,"user_id":null,"body":"def dashatize(notnum)\n  \"\"\nend\n\ndef dashatize(num : Int32)\n  num.abs.to_s.split(\"\").reduce{ |a,b|\n    if a[-1].to_i.odd? || b[0].to_i.odd?\n      a + \"-\" + b\n    else\n      a + b\n    end\n  }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48038,"user_id":null,"body":"def dashatize(num)\n  num.to_s.gsub(\/\\d\/) { |m| m[0].to_i.odd? ? \"-#{m[0]}-\" : m[0] }.gsub(\/\\-+\/, \"-\").strip '-'\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48039,"user_id":null,"body":"def dashatize(num)\n    return \"\" if num.nil?\n    str = [] of Char\n    str_len = num.abs.to_s.size\n    prev_dash = false\n    num.abs.to_s.each_char_with_index do |char, index|\n        n = char.to_i\n\n        # Append a - if odd, not beginning of string, and no previous dash.\n        if (n % 2 == 1 && index > 0 && prev_dash == false)\n            str << '-'\n        else\n            prev_dash = false\n        end\n        \n        str << char\n\n        # Append a - if odd, not end of the string\n        if (n % 2 == 1 && index < str_len - 1)\n            str << '-' \n            prev_dash = true\n        end\n    end\n    str.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48040,"user_id":1624,"body":"def dashatize(num)\n  num\n    .to_s\n    .gsub(\/([13579])\/){ \"-#{$1}-\" }\n    .gsub(\"--\", \"-\")\n    .gsub(\/\\A-\/, \"\")\n    .gsub(\/-\\z\/, \"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5822b65bb81f702016000026":[{"id":48041,"user_id":421,"body":"CMD = {'-' => \"file\", 'd' =>  \"directory\", 'l' => \"symlink\", 'c' => \"character_file\", 'b' => \"block_file\", 'p' => \"pipe\", 's' => \"socket\", 'D' => \"door\"}\n\ndef linux_type(file_attribute)\n  CMD[file_attribute[0]]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48042,"user_id":1624,"body":"def linux_type(s)\n  {\n    '-' => \"file\",\n    'd' => \"directory\",\n    'l' => \"symlink\",\n    'c' => \"character_file\",\n    'b' => \"block_file\",\n    'p' => \"pipe\",\n    's' => \"socket\",\n    'D' => \"door\",\n  }[s[0]]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48043,"user_id":53,"body":"def linux_type(attr)\n  fileTypes = {\n    \"-\" => \"file\",\n    \"d\" => \"directory\",\n    \"l\" => \"symlink\",\n    \"c\" => \"character_file\",\n    \"b\" => \"block_file\",\n    \"p\" => \"pipe\",\n    \"s\" => \"socket\",\n    \"D\" => \"door\",\n  };\n  fileTypes[attr[0].to_s]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48044,"user_id":null,"body":"def linux_type(file_attribute)\n  fts = {'-'=>\"file\", 'd'=>\"directory\", 'l'=>\"symlink\", 'c'=>\"character_file\", \n    'b'=>\"block_file\", 'p'=>\"pipe\", 's'=>\"socket\", 'D'=>\"door\"}\n  fts[file_attribute[0]]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48045,"user_id":null,"body":"def linux_type(file_attribute)\n  {'-' => \"file\", 'd' => \"directory\", 'l' => \"symlink\", 'c' => \"character_file\", 'b' => \"block_file\", 'p' => \"pipe\", 's' => \"socket\", 'D' => \"door\"}[file_attribute[0]]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48046,"user_id":2986,"body":"def linux_type(file_attribute)\n  file_type = {\"p\" => \"pipe\", \"-\" => \"file\", \"d\" => \"directory\", \"l\" => \"symlink\", \"c\" => \"character_file\", \"b\" => \"block_file\", \"s\" => \"socket\", \"D\" => \"door\"}\n  return file_type[file_attribute[0].to_s]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58235a167a8cb37e1a0000db":[{"id":48047,"user_id":null,"body":"def number_of_pairs(gloves)\n  gloves.group_by(&.itself).map{|k,a|a.size\/2}.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48048,"user_id":168,"body":"def number_of_pairs(gloves)\n  gloves.reduce(Hash(String, Int32).new(0)) { |h, x| h[x] += 1; h }.values.sum { |n| n \/ 2 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48049,"user_id":421,"body":"def number_of_pairs(gloves)\n  gloves.uniq.sum{|x| gloves.count(x) \/ 2}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48050,"user_id":1474,"body":"def number_of_pairs(gloves)\n  gloves.group_by(&.itself).map { |_, a| a.size \/ 2 }.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48051,"user_id":527,"body":"def number_of_pairs(gloves : Iterable(T)) forall T\n  gloves.each_with_object(Hash(T, Int32).new(0)){ |g, ks| ks[g] += 1 }.values.sum{ |k| k \/ 2 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48052,"user_id":492,"body":"def number_of_pairs(gloves)\n    cnt = 0\n    gloves = gloves.sort\n    i = 0\n    while i < gloves.size - 1\n        if gloves[i] == gloves[i+1]\n            cnt += 1\n            i += 2\n        else\n            i += 1\n        end\n    end\n    return cnt\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48053,"user_id":1072,"body":"def number_of_pairs(g) g.to_set.reduce(0){|a,b| b=g.count(b); b\/=2; a+b} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58249d08b81f70a2fc0001a4":[{"id":48054,"user_id":527,"body":"def closest_multiple_10(i)\n  (i + 5) \/\/ 10 * 10\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48055,"user_id":1474,"body":"def closest_multiple_10(i)\n  t = (i.to_i \/ 10).to_i\n  n1, n2 = t * 10, (t+1) * 10\n  i - n1 >= n2 - i ? n2 : n1\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48056,"user_id":53,"body":"def closest_multiple_10(n)\n  n < 0 ? (((5 - n) \/ 10).to_i * (-10)) : (((n + 5) \/ 10).to_i) * 10\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48057,"user_id":50,"body":"def closest_multiple_10(i)\n  (i.to_f\/10.0).round*10\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48058,"user_id":1624,"body":"def closest_multiple_10(i)\n  (i\/10).round*10\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48059,"user_id":null,"body":"def closest_multiple_10(i)\n  return (i.to_i + 5) \/ 10 * 10\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48060,"user_id":492,"body":"def closest_multiple_10(i)\n  (i\/10.0).round * 10\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48061,"user_id":1403,"body":"def closest_multiple_10(i)\n  (i.to_f \/ 10).round * 10\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5825792ada030e9601000782":[{"id":48062,"user_id":null,"body":"def zip_with(fn,a1,a2)\n  (0 .. [a1.size, a2.size].min - 1).map { |i| fn.call(a1[i], a2[i]) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48063,"user_id":421,"body":"def zip_with(fn,a1,a2)\n  (0...[a1.size, a2.size].min).map{|x| fn.call(a1[x], a2[x])}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48064,"user_id":1474,"body":"def zip_with(fn,a1,a2)\n  l = [a1.size, a2.size].min\n  (0...l).map { |i| fn.call(a1[i], a2[i]) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48065,"user_id":53,"body":"include Math\nalias Type = Nil | Int32 | Float64 | String | Array(Type)\ndef zip_with(fn,a1,a2)\n  i = 0\n  l = Math.min(a1.size, a2.size)\n  u = Array(Type).new(l) {  }\n  while i < l\n    u[i] = fn.call(a1[i], a2[i])\n    i = i + 1\n  end\n  return u\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48066,"user_id":527,"body":"def zip_with(fn, a1, a2)\n  a1.each.zip(a2.each).map{ |(x1, x2)| fn.call(x1, x2) }.to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48067,"user_id":492,"body":"def zip_with(fn,a1,a2)\n  mn = [a1.size, a2.size].min\n  (0...mn).map {|i| fn.call(a1[i], a2[i])}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48068,"user_id":2323,"body":"def zip_with(fn,a1,a2)\n  (0...[a1.size, a2.size].min).to_a.map { |i| fn.call(a1[i], a2[i]) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48069,"user_id":1828,"body":"def zip_with(fn,a1,a2)\n  a = [a1.size,a2.size].min\n  a1[0...a].zip(a2[0...a]).map &fn\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48070,"user_id":1072,"body":"def zip_with(fn,a1,a2) a1[0,[a1.size,a2.size].min].zip(a2[0,[a1.size,a2.size].min]).map{|a,b| fn.call(a,b)} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"582609930626631a9600003e":[{"id":48071,"user_id":421,"body":"def median(arr)\n  arr = arr.sort\n  s = (arr.size \/ 2).floor\n  arr.size.zero? ? nil : arr.size.odd? ? arr[s] : (arr[s - 1] + arr[s]) \/ 2.0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48072,"user_id":50,"body":"def median(a)\n  a=a.sort\n  l=a.size\n  m=l>>1\n  (a[m]+(a[m-((l&1)^1)])).to_f\/2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48073,"user_id":null,"body":"def median(arr)\n  if arr.empty?\n    return nil\n  end\n  arr = arr.sort\n  if arr.size.even?\n    (arr[arr.size \/ 2 - 1] + arr[arr.size \/ 2]).fdiv 2\n  else\n    arr[arr.size \/ 2]\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48074,"user_id":1624,"body":"def median(arr)\n  arr = arr.sort\n  n = (arr.size - 1).tdiv(2)\n  if arr.size.odd?\n    arr[n]\n  else\n    (arr[n] + arr[n+1]) \/ 2.0\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48075,"user_id":1072,"body":"def median(arr) s=arr.sort; (s[s.size\/2]+s[(s.size-1)\/2])\/2.0 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5827acd5f524dd029d0005a4":[{"id":48076,"user_id":53,"body":"def is_ruby_coming(list)\n  list.any?{|e|e[:language]==\"Ruby\"}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48077,"user_id":null,"body":"def is_ruby_coming(list)\n  list.any?{|dev| dev[:language] == \"Ruby\"}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48078,"user_id":null,"body":"def is_ruby_coming(list)\n  list.any?{|developer| developer[:language] == \"Ruby\"}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48079,"user_id":null,"body":"def is_ruby_coming(list)\n  list.any? { |d| d[\"language\"] == \"Ruby\" }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48080,"user_id":null,"body":"def is_ruby_coming(list)\n  list.any? { |x| x[:language] == \"Ruby\" }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48081,"user_id":2609,"body":"def is_ruby_coming(list)\n  list.any? { |obj| obj[\"language\"] == \"Ruby\" }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48082,"user_id":1750,"body":"def is_ruby_coming(list)\n  !!list.find { |x| x[\"language\"] == \"Ruby\" }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48083,"user_id":527,"body":"def is_ruby_coming(list)\n  list.any? { |d| d[:language] == \"Ruby\" }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48084,"user_id":1403,"body":"def is_ruby_coming(list)\n  list.any? { | i | i[:language] == \"Ruby\" }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5827bc50f524dd029d0005f2":[{"id":48085,"user_id":421,"body":"def get_first_python(u) \n  lst = u.find{|x| x[\"language\"] == \"Python\"}\n  lst.nil? ? \"There will be no Python developers\" : \"#{lst[\"first_name\"]}, #{lst[\"country\"]}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48086,"user_id":53,"body":"def get_first_python(arr)\n  arr.each{|e|\n    return \"#{e[\"first_name\"]}, #{e[\"country\"]}\" if e[\"language\"] == \"Python\"\n  }\n  \"There will be no Python developers\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48087,"user_id":null,"body":"def get_first_python(users)\n  python_dev = users.find{|dev| dev[\"language\"] == \"Python\"}\n  python_dev.nil? ? \"There will be no Python developers\" : \"#{python_dev[\"first_name\"]}, #{python_dev[\"country\"]}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48088,"user_id":1624,"body":"def get_first_python(u)\n  dev = u.find{|x| x[\"language\"] == \"Python\"}\n  if dev\n    \"#{dev[\"first_name\"]}, #{dev[\"country\"]}\"\n  else\n    \"There will be no Python developers\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48089,"user_id":null,"body":"def get_first_python(u)\n  dev = u.find { |x| x[\"language\"] == \"Python\" }\n  if !dev.nil?\n    \"#{dev[\"first_name\"]}, #{dev[\"country\"]}\"\n  else\n    \"There will be no Python developers\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48090,"user_id":1750,"body":"def get_first_python(xs)\n  developer = xs.find { |x| x[\"language\"] == \"Python\" }\n  developer ? \"#{developer[\"first_name\"]}, #{developer[\"country\"]}\" : \"There will be no Python developers\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48091,"user_id":527,"body":"def get_first_python(users)\n  user = users.find { |u| u[\"language\"] == \"Python\" }\n  user ? \"#{user[\"first_name\"]}, #{user[\"country\"]}\" : \"There will be no Python developers\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48092,"user_id":1072,"body":"def get_first_python(u) u.size==0 ? \"There will be no Python developers\" : u[0][\"language\"]==\"Python\" ? \"#{u[0][\"first_name\"]}, #{u[0][\"country\"]}\" : get_first_python(u[1..u.size]) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5827d31b86f3b0d9390001d4":[{"id":48093,"user_id":1403,"body":"def predict(candidates, polls)\n  hash = {} of (String | Char) => Float64\n  \n  candidates.each_with_index do |cand, idx|\n    s = 0\n    n = 0\n    polls.each do |pl|\n      s += pl[1].as(Int32 | Float64).to_f\n      n += pl.as(Array)[0].as(Array)[idx].to_f * pl[1].as(Int32 | Float64)\n    end\n    hash[cand.as(String | Char)] = ((n \/ s).round(1)).as(Float64)\n  end\n  hash\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5829994cd04efd4373000468":[{"id":48094,"user_id":1072,"body":"def name_file(f, n, s) n%1==0 && s%1==0 ? (0...n).map{|i| f.gsub(\/<index_no>\/,(i+s).to_s)} : [] of String end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48095,"user_id":53,"body":"def name_file(fmt, n, a)\n  return [] of Int32 if n.zero? ||  n.floor != n.ceil\n  return [] of Int32 unless a.is_a? Int32\n  (a...a + n).map { |i| fmt.gsub \"<index_no>\", i.to_s }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48096,"user_id":168,"body":"def name_file(fmt, nbr, start)\n  nbr.is_a?(Int32) && nbr > 0 && start.is_a?(Int32) ? (0...nbr).map { |i| fmt.gsub(\"<index_no>\", start + i).as(String) } : [] of String\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48097,"user_id":1624,"body":"def name_file(fmt, nbr, start)\n  return [] of String if start.to_i != start\n  return [] of String if nbr.to_i != nbr\n  (0...nbr).map do |i|\n    fmt.gsub(\"<index_no>\", start + i)\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48098,"user_id":1403,"body":"def name_file(fmt, nbr, start)\n  if start % 1 == 0\n    start -= 1\n  else \n    return [] of String\n  end\n  (1..nbr).to_a.map { | i | fmt.gsub(\"<index_no>\", \"#{start += 1}\") }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"582aafca2d44a4a4560000e7":[{"id":48099,"user_id":527,"body":"def keep_order(ary, val)\n  ary.bsearch_index(&.>=(val)) || ary.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48100,"user_id":421,"body":"def keep_order(ary, val)\n  ary.each_with_index do |x, i|\n     return i if x >= val\n  end\n  ary.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48101,"user_id":null,"body":"def keep_order(a, val)\n  if a.size < 1\n    return 0\n  end\n\n  start = 0\n  stop = a.size - 1\n  \n  while true\n    if stop <= start\n      if a[start] < val\n        return start + 1\n      else\n        return start\n      end\n    end\n      \n    mid_index = (start + stop) \/\/ 2\n    middle = a[mid_index]\n  \n    if middle < val\n      start = mid_index + 1\n    else\n      stop = mid_index\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48102,"user_id":1474,"body":"def keep_order(ary, val)\n  ary.take_while { |i| i < val }.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48103,"user_id":1624,"body":"def keep_order(ary, val)\n  (0...ary.size).find{|i| ary[i] >= val } || ary.size\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48104,"user_id":null,"body":"def keep_order(ary, val)\n  ary.index(&.>=(val)) || ary.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48105,"user_id":492,"body":"def keep_order(ary, val)\n  i = 0\n  while (i < ary.size)\n    if (ary[i] >= val)\n      break\n    end\n    i += 1\n  end\n  return i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48106,"user_id":1403,"body":"def keep_order(ary, val)\n  ary.index(ary.bsearch { | i | i >= val }) || ary.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"582b0d73c190130d550000c6":[{"id":48107,"user_id":53,"body":"def factors(n)\n  a,b,p=[]of Int32,[]of Int32,2\n  while p*p<=n\n    a<<p if n % (p**2)==0\n    b<<p if n % (p**3)==0\n    p+=1\n  end\n  [a,b]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48108,"user_id":null,"body":"def factors(n)\n  sq, cb = [] of Int32, [] of Int32\n  (2..n**0.5).each do |i|\n    j = i*i; k = j*i\n    sq<<i if n%j==0\n    cb<<i if n%k==0\n  end\n  [sq, cb]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48109,"user_id":null,"body":"def factors(n)\n  i = 2; j: Int32; k: Int32\n  sq, cb = [] of Int32, [] of Int32\n  while (j=i*i)<=n\n    sq<<i if n%j==0\n    k=j*i; cb<<i if k<=n && n%k==0\n    i+=1\n  end\n  [sq, cb]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48110,"user_id":1624,"body":"def factors(n)\n  z2 = (n ** (1\/2.0)).floor\n  z3 = (n ** (1\/3.0)).floor\n  [\n    (2..z2).select{|i| n % (i**2) == 0},\n    (2..z3).select{|i| n % (i**3) == 0},\n  ]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48111,"user_id":null,"body":"def factors(n)\n  arr = [[] of Int32, [] of Int32]\n  sq = [] of Int32\n  cb = [] of Int32\n  i = 2\n  while i < n && i**2 != 0\n    sq << i if n % i**2 == 0\n    i += 1\n  end\n  i = 2\n  while i < n && i**3 != 0\n    cb << i if n % i**3 == 0\n    i += 1\n  end\n  arr[0] = sq\n  arr[1] = cb\n  arr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48112,"user_id":1403,"body":"def factors(n)\n  sq = (x = 2..(Math.sqrt(n).floor)).select { | i | n % (i ** 2) == 0 }\n  cb = x.select { | i | n % (i ** 3) == 0 }\n  [sq, cb]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"582c42e0f000e54a7d000086":[{"id":48113,"user_id":421,"body":"def danspower(num, power)\n  n = num ** power\n  n.odd? ? (n \/ 10.0).round * 10 : n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48114,"user_id":527,"body":"def danspower(num, power)\n  (r = num ** power).even? ? r : r.round(-1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48115,"user_id":null,"body":"def danspower(num, power)\n  r = num ** power\n  return r if r % 2 == 0\n  u = r % 10\n  u < 5 ? r - u : u == 5 && r < 0 ? r - 5 : r + (10 - u)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48116,"user_id":1624,"body":"def danspower(num, power)\n  e = num ** power\n  if e.odd?\n    (e + 5) \/ 10 * 10\n  else\n    e\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48117,"user_id":1375,"body":"def danspower(num, power)\n  r = num ** power\n  r.odd? ? (r \/ 10.0).round * 10 : r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48118,"user_id":1474,"body":"def danspower(num, power)\n  ret = num ** power\n  ret.even? ? ret : (ret \/ 10.0).round * 10\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48119,"user_id":1072,"body":"def danspower(n,p) r=n**p; r%2==1 ? (r \/ 10.0).round*10 : r end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"582c81d982a0a65424000201":[{"id":48120,"user_id":53,"body":"def arr_check(b)\n  b.all? { |ea| Array === ea }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48121,"user_id":1624,"body":"def arr_check(arr)\n  arr.all?{|x| x.is_a?(Array) }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48122,"user_id":null,"body":"def arr_check(arr)\n  arr.all? &.is_a? Array\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48123,"user_id":527,"body":"def arr_check(xs)\n  xs.all?(&.is_a?(Array))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48124,"user_id":1072,"body":"def arr_check(arr) arr.all?{|a| a.class==Array(Char) || a.class==Array(String) || a.class==Array(Int32)} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48125,"user_id":1072,"body":"def arr_check(arr) arr.all?{|a| a.class==Array(String) || a.class==Array(Int32)} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"582cb0224e56e068d800003c":[{"id":48126,"user_id":null,"body":"def litres(time)\n  time.to_i \/ 2\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48127,"user_id":1566,"body":"def litres(time)\n  (time \/ 2).floor\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48128,"user_id":1072,"body":"def litres(t) (t\/2).to_i end","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48129,"user_id":null,"body":"def litres(time)\n  (time * 0.5).trunc\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48130,"user_id":null,"body":"def litres(time)\n  time\/\/2\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48131,"user_id":null,"body":"def litres(time)\n  return time\/\/2;\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48132,"user_id":null,"body":"def litres(time)\n  (time \/\/ 2).to_i\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48133,"user_id":null,"body":"def litres(time)\n  time.*(0.5).to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48134,"user_id":null,"body":"def litres(t)\n  (t*0.5).floor.to_i\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48135,"user_id":null,"body":"def litres(time)\n  time == 0 ? (result = 0) : (result = time * 0.5 - 0.49)\n  result.round(0)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"582dafb611d576b745000b74":[{"id":48136,"user_id":1474,"body":"def quote(fighter)\n  case fighter.downcase\n  when \"george saint pierre\" then \"I am not impressed by your performance.\"\n  when \"conor mcgregor\" then \"I'd like to take this chance to apologize.. To absolutely NOBODY!\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48137,"user_id":492,"body":"def quote(fighter)\n  if fighter.downcase == \"conor mcgregor\"\n    return \"I'd like to take this chance to apologize.. To absolutely NOBODY!\"\n  end\n  \"I am not impressed by your performance.\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48138,"user_id":null,"body":"QUOTES = {\n  \"george saint pierre\" => \"I am not impressed by your performance.\",\n  \"conor mcgregor\" => \"I'd like to take this chance to apologize.. To absolutely NOBODY!\"\n}\n\ndef quote(fighter)\n  QUOTES[fighter.downcase]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48139,"user_id":null,"body":"def quote(fighter)\n  fighters_arr = [\"George Saint Pierre\", \"Conor McGregor\"]\n  quotes_arr = [\"I am not impressed by your performance.\", \"I'd like to take this chance to apologize.. To absolutely NOBODY!\"]\n  fighter.downcase === fighters_arr[0].downcase ? quotes_arr[0] : quotes_arr[1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48140,"user_id":null,"body":"def quote(fighter)\n  fighters_arr = [\"George Saint Pierre\", \"Conor McGregor\"]\n  quotes_arr = [\"I am not impressed by your performance.\", \"I'd like to take this chance to apologize.. To absolutely NOBODY!\"]\n  case fighter\n  when fighters_arr[0] then quotes_arr[0]\n  when fighters_arr[0].upcase then quotes_arr[0]\n  when fighters_arr[0].downcase  then quotes_arr[0]\n  when fighters_arr[0].capitalize then quotes_arr[0]\n  when fighters_arr[1] then quotes_arr[1]\n  when fighters_arr[1].upcase then quotes_arr[1]\n  when fighters_arr[1].downcase then quotes_arr[1]\n  when fighters_arr[1].capitalize then quotes_arr[1]\n  else nil\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48141,"user_id":645,"body":"def quote(x)\n  x.downcase == \"george saint pierre\" ? \"I am not impressed by your performance.\" : \"I'd like to take this chance to apologize.. To absolutely NOBODY!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48142,"user_id":1624,"body":"def quote(fighter)\n  if fighter.downcase == \"george saint pierre\"\n    \"I am not impressed by your performance.\"\n  else\n    \"I'd like to take this chance to apologize.. To absolutely NOBODY!\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48143,"user_id":null,"body":"def quote(fighter)\n  quotes = [\"I am not impressed by your performance.\", \"I'd like to take this chance to apologize.. To absolutely NOBODY!\"]\n  fighter.downcase.includes?(\"george\") ? quotes[0] : quotes[-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48144,"user_id":null,"body":"def quote(fighter)\n  quote = [ \n    \"I'd like to take this chance to apologize.. To absolutely NOBODY!\",\n    \"I am not impressed by your performance.\"\n  ]\n  fighter.downcase.includes?(\"conor\") ? quote[0] : quote[-1]\n   \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48145,"user_id":null,"body":"def quote(fighter)\n  fighter.downcase == \"george saint pierre\" ? \"I am not impressed by your performance.\" :\n  \"I'd like to take this chance to apologize.. To absolutely NOBODY!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"582e0450fe38013dbc0002d3":[{"id":48146,"user_id":1153,"body":"def regex_tic_tac_toe_win_checker(board)\n  return board.match(\/(\\w)(..(\\1|.\\1.)..\\1|.\\1.\\1..$|\\1\\1(...)*$)\/) != nil\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48147,"user_id":421,"body":"def regex_tic_tac_toe_win_checker(board)\n  \/(\\w)(..(\\1|.\\1.)..\\1|.\\1.\\1..$|\\1\\1(...)*$)\/ === board\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48148,"user_id":null,"body":"def regex_tic_tac_toe_win_checker(board)\n  [\n    [board[0], board[1], board[2]],\n    [board[3], board[4], board[5]],\n    [board[6], board[7], board[8]],\n    \n    [board[0], board[3], board[6]],\n    [board[1], board[4], board[7]],\n    [board[2], board[5], board[8]],\n    \n    [board[0], board[4], board[8]],\n    [board[6], board[4], board[2]]\n  ].any? { |s| [\"XXX\", \"OOO\"].includes? s.join(\"\") }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"582e0e592029ea10530009ce":[{"id":48149,"user_id":null,"body":"def duck_duck_goose(players, goose)\n  players[(goose - 1) % players.size].name\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48150,"user_id":2201,"body":"def duck_duck_goose(p, g)\n   p[(g-1)%p.size].name;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48151,"user_id":53,"body":"def duck_duck_goose(xs, x)\n  xs[(x-1) % xs.size].name\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48152,"user_id":null,"body":"def duck_duck_goose(players, goose)\n  players.at(goose % players.size - 1).name\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48153,"user_id":2609,"body":"def duck_duck_goose(players, goose)\n  return players[(goose - 1) % players.size ].@name\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48154,"user_id":1750,"body":"def duck_duck_goose(players, goose)\n  # index = players.size % goose\n  # p index\n  # p players\n  # players[index + 1].name\n  players[(goose - 1) % players.size].name\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48155,"user_id":null,"body":"def duck_duck_goose(players, goose)\n  counter = 0\n  \n  (goose - 1).times do\n    counter = (counter >= players.size - 1) ? 0 : (counter + 1)\n  end\n  \n  players[counter].name\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48156,"user_id":1474,"body":"def duck_duck_goose(players, goose)\n  p players\n\tplayers[goose % players.size - 1].name\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48157,"user_id":null,"body":"def duck_duck_goose(players, goose)\n\tsize = players.size;\n\treturn players[goose % size - 1].name;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48158,"user_id":null,"body":"def duck_duck_goose(players, goose)\n  index = (goose - 1) % players.size\n  players[index].name\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"582f52208278c6be55000067":[{"id":48159,"user_id":421,"body":"def round_to_five(numbers)\n   numbers.map{|x| (x \/ 5).round * 5}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48160,"user_id":null,"body":"def round_to_five(numbers)\n  numbers.map{|x| x - x % 5 + (x % 5 >= 2.5 ? 5 : 0)}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48161,"user_id":1624,"body":"def round_to_five(numbers)\n  numbers.map{|u| (u\/5).round * 5}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48162,"user_id":null,"body":"def round_to_five(numbers)\n  numbers.map{|n| 5*(n\/5.0).round}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48163,"user_id":527,"body":"def round_to_five(numbers)\n  numbers.map(&.fdiv(5).round.*(5))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48164,"user_id":1072,"body":"def round_to_five(n) n.map{|a| (a\/5.0).round*5} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58305403aeb69a460b00019a":[{"id":48165,"user_id":2986,"body":"def inverse_string(s,reverse=true)\n  r = s.split(\"\").map_with_index{ |c,i| c.downcase() === c ? c.upcase() : c.downcase()}.join(\"\")\n  reverse ? r.reverse() : r;\nend\n\ndef reverse_and_mirror(s1,s2) \n  return inverse_string(s2) + \"@@@\" + inverse_string(s1) + inverse_string(s1,false);\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5831c5f8ac6a11e3380002de":[{"id":48166,"user_id":1403,"body":"def min_value(arr, n)\n  arr.each_cons(n).map(&.min).to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48167,"user_id":421,"body":"def min_value(arr, n)\n  arr.each_cons(n).to_a.map(&.min)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48168,"user_id":1246,"body":"def min_value(arr, n)\n  (0..arr.size-n).map{|x|arr[x..x+n-1].min}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"583203e6eb35d7980400002a":[{"id":48169,"user_id":2323,"body":"def count_smileys(arr)\n  arr.count { |s| s =~ \/((:|;){1}(~|-){0,1}(\\)|D){1})\/}\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48170,"user_id":1624,"body":"def count_smileys(arr)\n  arr.grep(\/\\A[;:][\\-~]?[D)]\\z\/).size\nend\n","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48171,"user_id":421,"body":"def count_smileys(arr)\n   arr.select{|x| \/[:;][-~]?[\\)D]\/ === x}.size\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48172,"user_id":682,"body":"def count_smileys(a)\n  a.select{|c| \/[;:][-~]?[)D]\/=~c}.size\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48173,"user_id":null,"body":"def count_smileys(arr)\n  arr.count { |s| s =~ \/^[:;][-~]?[)D]$\/ }\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48174,"user_id":null,"body":"def count_smileys(arr)\n  arr.count do |str|\n    (2 <= str.size <= 3) &&\n    {':', ';'}.includes?(str.byte_at(0).chr) &&\n    (\n      str.size == 2 ||\n      {'-', '~'}.includes?(str.byte_at(1).chr)\n    ) &&\n    {')', 'D'}.includes?(str.byte_at(-1).chr)\n  end\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48175,"user_id":986,"body":"def count_smileys(\ud83d\ude0a)\n  \ud83d\ude0a.count { | smiley | smiley.match(\/[;:][~-]?[)D]\/) }\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48176,"user_id":517,"body":"def count_smileys(arr)\n  arr.count{|e| go(e)}\nend\n\ndef go(s)\n  case s\n  when   \":-)\", \";-)\",  \":~)\", \";~)\",  \":)\", \";)\",   \":-D\", \";-D\",  \":~D\", \";~D\",  \":D\", \";D\"  \n    true\n  else  \n    false\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48177,"user_id":null,"body":"def count_smileys(arr)\n  arr.count {|x| x.match \/[:;][-~]?[)D]\/}\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48178,"user_id":null,"body":"def count_smileys(arr)\n  # arr.count { |str| str =~ \/(:|;)(-|~)?(\\)|D)\/ }\n  arr.count &.=~ \/(:|;)(-|~)?(\\)|D)\/\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58341551565e129399000460":[{"id":48179,"user_id":421,"body":"def get_max_profit(stock_prices_yesterday)\n  buy = -1.0 \/ 0.0\n  sell = -1.0 \/ 0.0\n  profit = -1.0 \/ 0.0\n  stock_prices_yesterday[0...-1].each_with_index do |x, i|\n    maxi = stock_prices_yesterday[i + 1..-1].max\n    if maxi - x > profit\n        buy = x\n        sell = maxi\n        profit = maxi - x\n    end\n  end\n  [buy, sell, profit]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48180,"user_id":null,"body":"def get_max_profit(spy)\n  r = Array(Array(Int32)).new\n  spy[0..-2].each_with_index do |x, i|\n    spy[i..-1].each do |y|\n      r << [x, y, y-x]\n    end\n  end\n  r.sort_by{|a| a.last}.last\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48181,"user_id":null,"body":"def get_max_profit(stonks)\n  s = stonks[-1]\n  b = stonks[-2]\n  g = [s,b].max\n  (0...stonks.size-2).reverse_each do |i|\n    c = stonks[i]\n    if c > g\n      g = c\n    end\n    if g-c > s-b\n      b = c\n      s = g\n    end\n  end\n  [b, s, s-b]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48182,"user_id":null,"body":"def get_max_profit(stock_prices_yesterday)\n  i = stock_prices_yesterday.first\n  min, buy, sell, max_profit = i, i, i, 0\n  stock_prices_yesterday.each do | sp |\n    min = sp if sp < min\n    profit = sp - min\n    next unless profit > max_profit\n    buy, sell, max_profit = min, sp, profit\n  end\n  [buy, sell, max_profit]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48183,"user_id":1403,"body":"def get_max_profit(spy)\n  [(x = spy.combinations(2).max_by { | i | i[1] - i[0] }), x[1] - x[0]].flatten\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58342f14fa17ad4285000307":[{"id":48184,"user_id":1072,"body":"def reach_destination(d,s) r=(d\/0.5\/s).round*0.5; \"The train will be there in #{r%1==0 ? r.to_i : r} hour#{r==1 ? \"\" : \"s\"}.\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48185,"user_id":53,"body":"def reach_destination(d, s)\n  h = d \/ s.to_f\n  h = (h * 2).round \/ 2.0\n  h = h.to_i if h.to_i == h\n  \"The train will be there in #{h} hour#{'s' if h != 1}.\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48186,"user_id":421,"body":"def reach_destination(distance, speed)\n  time = 1.0 * distance \/ speed\n  time = time % 1 < 0.25 || time % 1 >= 0.75 ? time.round.to_i : time.floor + 0.5\n  \"The train will be there in #{time} hour#{time != 1 ? 's' : \"\"}.\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48187,"user_id":null,"body":"def reach_destination(distance, speed)\n  t = (2*distance\/speed).round\/2\n  \"The train will be there in %g hour%s.\" % [t, t!=1? \"s\": \"\"]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48188,"user_id":null,"body":"def reach_destination(distance, speed)\n  t = (2*distance\/speed).round\/2\n  \"The train will be there in %g hour#{t!=1? \"s\": \"\"}.\" %t\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48189,"user_id":2986,"body":"def reach_destination(distance, speed)\n  t =  ((distance \/ speed.to_f)*2.0).round \/ 2.0\n  t = t.to_i if t.to_s =~ \/\\.0$\/\n  if (t == 1)\n    return \"The train will be there in 1 hour.\"\n  else\n    return \"The train will be there in #{t} hours.\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5834315e06f227a6ac000099":[{"id":48190,"user_id":421,"body":"def elimination(arr)\n  arr.find{|x| arr.index(x) != arr.rindex(x)} || nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48191,"user_id":1624,"body":"def elimination(arr)\n  arr.find{|a| arr.count(a) > 1 }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48192,"user_id":645,"body":"def elimination(arr)\n  arr.find do |x| arr.count(x) > 1 end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48193,"user_id":null,"body":"def elimination(arr)\n  return nil if arr == arr.uniq\n  arr.max_by{ |e| arr.count(e) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48194,"user_id":null,"body":"def elimination(arr)\n  arr.each do |e| return e if arr.count(e)==2 end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48195,"user_id":null,"body":"def elimination(arr)\n  arr.each do |e| \n    return e if arr.count(e)>1\n  end \n  nil  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48196,"user_id":null,"body":"def elimination(arr)\n  n = arr.size\n  return nil if n==0 \n  arr = arr.sort\n  i, e1 = 0, arr[0]\n  while (i+=1)<n \n    e2 = arr[i]\n    return e1 if e1==e2\n    e1 = e2\n  end\n  return nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48197,"user_id":2609,"body":"def elimination(arr)\n  arr.each do |n|\n    if arr.count(n) == 2\n      return n\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48198,"user_id":527,"body":"def elimination(arr : Enumerable(T)) : T? forall T\n  arr.each_with_object(Set(T).new) do |x, seen|\n    return x if seen.includes?(x)\n    seen << x\n  end\n  nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48199,"user_id":1072,"body":"def elimination(arr) (arr.select{|a| arr.count(a)>1}+[nil])[0] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5834a44e44ff289b5a000075":[{"id":48200,"user_id":1072,"body":"def my_crib(n) ((0...n).map{|i| [\" \"*(n-i),\"\/\",\" \"*(i*2),\"\\\\\",\" \"*(n-i)].join}+[[\"\/\",\"_\"*(n*2),\"\\\\\"].join]+(0...n-1).map{|i| [\"|\",\" \"*(n*2),\"|\"].join}+[[\"|\",\"_\"*(n*2),\"|\"].join]).join(\"\n\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5834fec22fb0ba7d080000e8":[{"id":48201,"user_id":527,"body":"def six_toast(num : Int) : Int\n  (num - 6).abs\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48202,"user_id":50,"body":"def six_toast(num) \n  (6-num).abs\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48203,"user_id":421,"body":"def six_toast(num) \n  (num - 6).abs\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58356a94f8358058f30004b5":[{"id":48204,"user_id":421,"body":"def fly_by(lamps, drone)\n  \"o\" * [lamps.size, drone.size].min + \"x\" * [0, lamps.size - drone.size].max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48205,"user_id":527,"body":"def fly_by(lamps : String, drone : String) : String\n  (\"o\" * {drone.size, lamps.size}.min).ljust(lamps.size, 'x')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48206,"user_id":50,"body":"def fly_by(lamps, drone)\n  l=drone.size\n  s=\"\"\n  lamps.chars.each do |c|\n    if c == 'x' && l > 0\n      l-=1\n      s+='o'\n    else\n      s+=c\n    end\n  end\n  s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48207,"user_id":null,"body":"def fly_by(lamps, drone)\n  l = drone.size > lamps.size ? lamps : drone \n  (0 ... l.size).reduce(lamps.split(\"\")) { |r, i| r[i] = \"o\"; r }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48208,"user_id":null,"body":"def fly_by(lamps, drone)\n  if drone.size >= lamps.size\n    \"o\"*lamps.size\n  else\n    \"o\"*drone.size + lamps[drone.size..]\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5836ebe4f7e1c56e1a000033":[{"id":48209,"user_id":null,"body":"def combine_strings(*args)\n  return \"\" if args.empty?\n  arr = args.to_a.as?(Array(String))\n  return \"\" if !arr\n  length, pos = arr.max_of(&.size), 0\n  str = String.build do |str|\n    until pos == length\n      arr.each do |word|\n        letter = word[pos]?\n        next if !letter\n        str << letter\n      end\n      pos += 1\n    end\n  end\n  str\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48210,"user_id":null,"body":"def combine_strings(*args)  \n  strings = args.to_a.map(&.chars.as(Array(Char)))\n  combined_string = \"\"\n\n  until strings.flatten.size == 0\n    (0...strings.size).each { |i|\n      combined_string += (strings[i].shift? || \"\")\n    }\n  end\n  \n  combined_string\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48211,"user_id":1072,"body":"def combine_strings(*f) m=f.reduce(0){|a,b|[a,b.size].max}; (0...m).map{|i| f.map{|a| i<a.size ? a[i] : \"\"}.join}.join end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"583710ccaa6717322c000105":[{"id":48212,"user_id":null,"body":"def simple_multiplication(n)\n  return n % 2 == 0 ? n * 8  : n * 9\nend\n","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48213,"user_id":null,"body":"def simple_multiplication(n)\n  n * (n.even? ? 8 : 9)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48214,"user_id":null,"body":"def simple_multiplication(n)\n   n * (8 + (n & 1))\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48215,"user_id":575,"body":"def simple_multiplication(n)\n  n * (8 + n % 2)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48216,"user_id":168,"body":"def simple_multiplication(n)\n  (8 + n % 2) * n\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48217,"user_id":null,"body":"def simple_multiplication(n)\n  n % 2 != 0 ? n * 9 : n * 8\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48218,"user_id":48,"body":"def simple_multiplication(a)\n  a * (8 + a % 2)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48219,"user_id":null,"body":"def simple_multiplication(n)\n  if n % 2 == 0\n    res = n * 8\n  else\n    res = n * 9\n  end\n  res\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48220,"user_id":null,"body":"def simple_multiplication(n)\n  return n % 2 == 0? 8 * n : 9 * n;\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48221,"user_id":null,"body":"def simple_multiplication(n)\n  even_odd = n.even?\n  \n  if even_odd\n    return n * 8\n  else\n    return n * 9\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"583710f6b468c07ba1000017":[{"id":48222,"user_id":421,"body":"def proofread(string)\n  string.downcase.gsub(\/ie\/, \"ei\").gsub(\/^.|\\.\\s.\/){|x| x.upcase}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48223,"user_id":1072,"body":"def proofread(s) s=s.downcase().gsub(\/ie\/,\"ei\"); s.split(\". \").map{|a| a.size>0 ? a[0].upcase+a[1...a.size] : \"\"}.join(\". \") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48224,"user_id":1072,"body":"def proofread(s) s=s.downcase().gsub(\/ie\/,\"ei\"); s.split(\". \").map{|a| a.size>0 ? a[0].upcase+a[1...a.size] : \"\"}.join(\". \") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58373ba351e3b615de0001c3":[{"id":48225,"user_id":421,"body":"def mormons(starting_number, reach, target)\n   Math.log(target \/ starting_number.to_f, reach + 1).ceil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48226,"user_id":53,"body":"def mormons(s, r, t)\n  (Math.log(t\/s)\/Math.log(r+1)).ceil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48227,"user_id":76,"body":"def mormons(n, r, t)\n  n >= t ? 0 : 1 + mormons((n + n * r).to_u64, r, t)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48228,"user_id":168,"body":"def mormons(starting_number, reach, target)\n  s, m = starting_number.to_u64, 0\n  while s < target\n    s *= 1 + reach\n    m += 1\n  end\n  m\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48229,"user_id":50,"body":"def mormons(n, c, a)\n  Math.log(a\/n,c+1).ceil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48230,"user_id":233,"body":"def mormons(starting_number, reach, target, times = 0)\n\treturn times if starting_number >= target\n\ttimes += 1\n\tstarting_number += starting_number * reach\n\tmormons(starting_number, reach, target, times)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48231,"user_id":2323,"body":"def mormons(start, reach, target)\n  return 0 if start >= target\n  1 + mormons((reach * start) + start, reach, target)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48232,"user_id":1072,"body":"def mormons(s, r, t) Math.log(t\/s.to_f,r+1).ceil end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5838a66eaed8c259df000003":[{"id":48233,"user_id":1624,"body":"def convert_palindromes(nums)\n  nums.map(&.to_s).map{|n| n.reverse == n ? 1 : 0}\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48234,"user_id":53,"body":"def convert_palindromes(ns)\n  ns.map{|n| n.to_s == n.to_s.reverse ? 1 : 0}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48235,"user_id":421,"body":"def convert_palindromes(numbers)\n  numbers.map{|x| x.to_s.reverse.to_i == x ? 1 : 0}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48236,"user_id":null,"body":"def convert_palindromes(numbers)\n  numbers.map { |n| n.to_s == n.to_s.reverse ? 1 : 0 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48237,"user_id":null,"body":"def convert_palindromes(numbers)\n  numbers.map{|n| s = n.to_s; (s==s.reverse)?1:0}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48238,"user_id":null,"body":"def is_palindrome(n)\n  s = n.to_s; (s==s.reverse)?1:0\nend\ndef convert_palindromes(numbers)\n  numbers.map{|n| is_palindrome n}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48239,"user_id":1566,"body":"def convert_palindromes(numbers)\n  numbers.map{|num| num.to_s==num.to_s.reverse ? 1 : 0}  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48240,"user_id":2986,"body":"def convert_palindromes(numbers)\n  numbers.map{|x| x.to_s == x.to_s.reverse ? 1 : 0}\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58397ee871df657929000209":[{"id":48241,"user_id":1375,"body":"ACRONYMS = {\n  \"KPI\"  => \"key performance indicators\",\n  \"EOD\"  => \"the end of the day\",\n  \"TBD\"  => \"to be decided\",\n  \"WAH\"  => \"work at home\",\n  \"IAM\"  => \"in a meeting\",\n  \"OOO\"  => \"out of office\",\n  \"NRN\"  => \"no reply necessary\",\n  \"CTA\"  => \"call to action\",\n  \"SWOT\" => \"strengths, weaknesses, opportunities and threats\"\n}\n\ndef acronym_buster(message)\n  message.split(\".\").map do |str|\n    str = str.strip\n    \n    ACRONYMS.each do |key, value|\n      str = str.gsub(\/(?=\\b)#{key}(?=\\b)\/, value) \n    end\n    \n    str.scan(\/\\b([A-Z]{3,})\\b\/).each do |match|\n      return \"#{match[0]} is an acronym. I do not like acronyms. Please remove them from your email.\"\n    end\n    \n    str = str.gsub(\/^(.)\/) { |m| m.upcase }\n    str\n  end.join(\". \").strip\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48242,"user_id":1072,"body":"def acronym_buster(s) s=s.gsub(\/KPI\/,\"key performance indicators\").gsub(\/EOD\/,\"the end of the day\").gsub(\/TBD\/,\"to be decided\").gsub(\/WAH\/,\"work at home\").gsub(\/IAM\/,\"in a meeting\").gsub(\/OOO\/,\"out of office\").gsub(\/NRN\/,\"no reply necessary\").gsub(\/CTA\/,\"call to action\").gsub(\/SWOT\/,\"strengths, weaknesses, opportunities and threats\"); ((\" \"+s)=~\/\\b[A-Z]{3,}\\b\/)!=nil ? \"#{(\" \"+s).sub(\/(.*)(\\b[A-Z]{3,}\\b)(.*)\/,\"\\\\2\")} is an acronym. I do not like acronyms. Please remove them from your email.\" : s.split(\". \").map{|a| a[0].upcase+a[1...a.size]}.join(\". \") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5839edaa6754d6fec10000a2":[{"id":48243,"user_id":986,"body":"def find_missing_letter(arr)\n  arr.each.with_index { | char, i | return char.succ if arr[i+1] != char.succ }\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48244,"user_id":null,"body":"def find_missing_letter(arr)\n  ((arr.first..arr.last).to_a - arr).first\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48245,"user_id":50,"body":"\nL=[]of Int32\ndef find_missing_letter(arr)\n  L.push(1)  \n  arr=arr.map{|x| x.to_s[0].ord}\n  (arr[0]..arr[-1]).each do |c|\n    if !arr.includes?(c)\n      if L.size>5\n        return c.chr\n      else\n        return c.chr.to_s\n      end\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48246,"user_id":null,"body":"def find_missing_letter(arr)\n  i = 0\n  loop do\n    expected = arr[i].succ\n    return expected unless arr[i+1] == expected\n    i += 1\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48247,"user_id":null,"body":"def find_missing_letter(arr)\n  arr.each_cons_pair do |x, y|\n    if (z = x.bytes[0] + 1) != y.bytes[0] \n      ptr = Pointer(UInt8).new(pointerof(x).address)\n      if ptr.value == x.bytes[0]\n        ptr.value = z\n        return x\n      else\n        return String.new(Bytes[z])\n      end\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48248,"user_id":null,"body":"def find_missing_letter(arr)\n  ((arr.first..arr.last).to_a - arr).pop\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48249,"user_id":null,"body":"\ndef find_missing_letter(arr : Array(String) )\n  fst_ascii = arr[0][0].ord\n  \n  arr[1... arr.size].each_with_index { |s, i| \n    if s[0].ord != fst_ascii + i + 1\n      return (fst_ascii + i + 1).chr.to_s\n    end\n  }\nend\n\ndef find_missing_letter(arr : Array(Char) )\n  fst_ascii = arr[0].ord\n  \n  arr[1... arr.size].each_with_index { |s, i| \n    if s.ord != fst_ascii + i + 1\n      return (fst_ascii + i + 1).chr\n    end\n  }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48250,"user_id":null,"body":"def find_missing_letter(arr)\n  ((arr.first...arr.last).to_a - arr.to_a).first\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48251,"user_id":null,"body":"def find_missing_letter(arr)\n  arr.each_cons(2, reuse: true) do |pair|\n    a, b = pair\n    if missing = compare(a, b)\n      return missing\n    end\n  end\n  \n  raise \"unreachable\"\nend\n\nprivate def compare(a : String, b : String)\n  compare(a.byte_at(0), b.byte_at(0)).try &.to_s\nend\n\nprivate def compare(a : Char, b : Char)\n  compare(a.ord, b.ord)\nend\n\nprivate def compare(a : Int, b : Int)\n  if b - a > 1\n    return a.succ.chr\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48252,"user_id":null,"body":"def find_missing_letter(arr)\n  a = arr.sort\n  iter = 0\n  while iter < a.size-1\n    if a[iter].succ != a[iter+1]\n      return a[iter].succ\n    end\n    iter += 1\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"583ade15666df5a64e000058":[{"id":48253,"user_id":168,"body":"def evens_and_odds(n : Int) : String\n  n.to_s(n % 2 == 0 ? 2 : 16)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48254,"user_id":527,"body":"def evens_and_odds(n : Int) : String\n  n.to_s(n.even? ? 2 : 16)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48255,"user_id":53,"body":"def evens_and_odds(n : Int) : String\n  n.even? ? n.to_s(2) : n.to_s(16)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48256,"user_id":null,"body":"def evens_and_odds(n : Int) : String\n  n.to_s((n % 2).zero? ? 2 : 16)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"583df40bf30065fa9900010c":[{"id":48257,"user_id":1624,"body":"def get_mean(arr,x,y)\n  return -1 unless (2..arr.size).includes?(x)\n  return -1 unless (2..arr.size).includes?(y)\n  ((arr[0,x].sum \/ x) + (arr[-y..-1].sum \/ y)) \/ 2\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48258,"user_id":53,"body":"def get_mean(arr,x,y) \n  return -1 if x<2 || y<2 || x>arr.size || y>arr.size\n  (arr[...x].sum\/x.to_f+arr[arr.size-y...arr.size].sum\/y.to_f) \/ 2 \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48259,"user_id":421,"body":"def get_mean(arr,x,y)\n  x > 1 && x <= arr.size && y > 1 && y <= arr.size ? (arr.first(x).sum.fdiv(x) + arr.last(y).sum.fdiv(y)).fdiv(2) : -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48260,"user_id":null,"body":"def get_mean(arr, x, y)\n  if !(x > 1 && x <= arr.size) || !(y > 1 && y <= arr.size)\n    -1\n  else\n    (arr[...x].sum.fdiv(x) + arr[-y..].sum.fdiv(y)) \/ 2\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48261,"user_id":null,"body":"def get_mean(arr, x, y)\n  n = arr.size; x<2||y<2||x>n||y>n ? -1 : (arr[0..x-1].sum.to_f\/x + arr[n-y..n-1].sum.to_f\/y)\/2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48262,"user_id":1072,"body":"def get_mean(arr,x,y) (x<2 || y<2 || x>arr.size || y>arr.size) ? -1 : (arr[0...x].reduce{|a,b| a+b}.fdiv(x)+arr[arr.size-y...arr.size].reduce{|a,b| a+b}.fdiv(y)).fdiv(2) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"583ea278c68d96a5fd000abd":[{"id":48263,"user_id":null,"body":"def sort_by_language(arr)\n  arr.sort do |x, y|\n    if x[\"language\"].to_s == y[\"language\"].to_s\n      x[\"first_name\"].to_s <=> y[\"first_name\"].to_s\n    else\n      x[\"language\"].to_s <=> y[\"language\"].to_s\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48264,"user_id":null,"body":"def sort_by_language(arr)\n  arr.sort_by {|p| [p[\"language\"].to_s, p[\"first_name\"].to_s]}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48265,"user_id":1828,"body":"def sort_by_language(arr)\n  arr.sort_by{|i| {i[\"language\"].to_s, i[\"first_name\"].to_s}}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48266,"user_id":527,"body":"def sort_by_language(arr)\n  arr.sort_by { |d| {d[\"language\"].as(String), d[\"first_name\"].as(String)} }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48267,"user_id":1072,"body":"def sort_by_language(arr) arr.sort{|a,b| a[\"language\"].to_s==b[\"language\"].to_s ? a[\"first_name\"].to_s <=> b[\"first_name\"].to_s : a[\"language\"].to_s <=> b[\"language\"].to_s} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"583f158ea20cfcbeb400000a":[{"id":48268,"user_id":null,"body":"def arithmetic(a, b, operator)\n  case operator\n    when \"add\"; a + b\n    when \"subtract\"; a - b\n    when \"divide\"; a \/ b\n    when \"multiply\"; a * b\n    else; raise \"Invalid operator #{operator}\"\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-28 17:16:12"},{"id":48269,"user_id":null,"body":"def arithmetic(a, b, operator)\n  case operator \n    when \"add\"\n      a + b\n    when \"subtract\"\n      a - b\n    when \"multiply\"\n      a * b\n    when \"divide\"\n      a \/ b\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48270,"user_id":421,"body":"def arithmetic(a, b, operator)\n  dict = {\"add\" => a + b, \"subtract\" => a - b, \"multiply\" => a * b, \"divide\" => a \/ b}\n  dict[operator]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48271,"user_id":null,"body":"def arithmetic(a, b, operator)\n  functions = {\n    \"add\"      => ->(x : Int32, y : Int32) { x + y },\n    \"subtract\" => ->(x : Int32, y : Int32) { x - y },\n    \"multiply\" => ->(x : Int32, y : Int32) { x * y },\n    \"divide\"   => ->(x : Int32, y : Int32) { x \/ y }\n  }\n  functions[operator].call a, b\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48272,"user_id":null,"body":"def arithmetic(lhs, rhs, op)\n    corresp = Hash{\"add\" => ->(x : Int32, y : Int32) { x + y },\n                   \"subtract\" => ->(x : Int32, y : Int32) { x - y },\n                   \"multiply\" => ->(x : Int32, y : Int32) { x * y },\n                   \"divide\" => ->(x : Int32, y : Int32) { x \/ y }}\n    corresp[op].call(lhs, rhs)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48273,"user_id":null,"body":"def arithmetic(a, b, operator)\n  case operator\n  when \"add\"\n\t\ta + b\n  when \"subtract\"\n    a - b\n  when \"multiply\"\n    a * b\n  when \"divide\"\n    a \/ b\n  else\n    puts \"operator type error\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48274,"user_id":null,"body":"def arithmetic(a, b, o)\n  return a + b if o == \"add\"\n  return a - b if o == \"subtract\"\n  return a * b if o == \"multiply\"\n  return a \/ b if o == \"divide\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48275,"user_id":1768,"body":"def arithmetic(a, b, op)\n  if op[0] == 'a'\n    return a + b\n  elsif op[0] == 's'\n    return a - b\n  elsif op[0] == 'm'\n    return a * b\n  end\n    return a \/ b\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48276,"user_id":null,"body":"def arithmetic(a, b, operator)\n  case operator\n  when \"add\"\n    a + b\n  when \"subtract\"\n    a - b\n  when \"divide\"\n    a \/ b\n  when \"multiply\"\n    a * b\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48277,"user_id":null,"body":"\n\ndef arithmetic(a, b, operator)\nprocs = {\"add\" =>  -> (a : Int32|Float32, b : Int32|Float32){a+b},\n\"subtract\" =>  -> (a : Int32|Float32, b : Int32|Float32){a-b},\n\"multiply\" => ->  (a : Int32|Float32, b : Int32|Float32){a*b},\n\"divide\" => -> (a : Int32|Float32, b : Int32|Float32){a\/b}}\n\nprocs[operator].call(a,b)\n  #your code here\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58409435258e102ae900030f":[{"id":48278,"user_id":421,"body":"def parity_bit(bits)\n   bits.split.map{|x| x[0...-1].chars.map(&.to_i).sum % 2 == x[-1].to_i ? x[0...-1] : \"error\"}.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48279,"user_id":1072,"body":"def parity_bit(b) b.split(\" \").map{|a| a.count(\"1\")%2==1 ? \"error\" : a[0...7]}.join(\" \") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58417e9ab9c25c774500001f":[{"id":48280,"user_id":1072,"body":"def missing_angle(h,a,o) h=(a*a+o*o)**0.5 if h==0; o=(h*h-a*a)**0.5 if o==0; (Math.asin(o\/h.to_f) \/ Math::PI*180).round end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48281,"user_id":421,"body":"def missing_angle(h, a, o)\n ((h.zero? ? Math.atan(o \/ a) : a.zero? ? Math.asin(o \/ h) : Math.acos(a \/ h)) * 180 \/ Math::PI).round\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48282,"user_id":1828,"body":"def missing_angle(h, a, o)\n  a = Math.sqrt(h**2-o**2) if a == 0\n  o = Math.sqrt(h**2-a**2) if o == 0\n  (Math.atan(o.to_f\/a)*180\/Math::PI).round\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58429d526312ce1d940000ee":[{"id":48283,"user_id":421,"body":"def balance(arr1, arr2)\n  arr1.map{|x| arr1.count(x)}.sort == arr2.map{|y| arr2.count(y)}.sort\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48284,"user_id":527,"body":"def balance(xs, ys)\n  xs.tally.values.tally == ys.tally.values.tally\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48285,"user_id":527,"body":"def balance(xs : Enumerable(T), ys : Enumerable(T)) : Bool forall T\n  xs.tally.values.tally == ys.tally.values.tally\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48286,"user_id":null,"body":"def balance(arr1, arr2)\n  arr1.uniq.map { |e| arr1.count e }.sort.to_s ==\n  arr2.uniq.map { |e| arr2.count e }.sort.to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48287,"user_id":1072,"body":"def check(arr) arr.to_set.map{|a| arr.count(a)}.sort end; def balance(a1, a2) check(a1)==check(a2) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5845e6a7ae92e294f4000315":[{"id":48288,"user_id":1072,"body":"def sum_nested_numbers(arr,i=1) arr.reduce(0){|a,b| a+(b.class==Int32 ? (b.to_s.to_i || 0)**i : sum_nested_numbers(b,i+1) || 0)} if arr.is_a?(Array) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48289,"user_id":1072,"body":"def sum_nested_numbers(arr,i=1) arr.reduce(0){|a,b| a+(b.class==Int32 ? (b.to_s.to_i || 0)**i : sum_nested_numbers(b,i+1) || 0)} if arr.is_a?(Array) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"584703d76f6cf6ffc6000275":[{"id":48290,"user_id":421,"body":"def est_subsets(arr)\n   2 ** arr.uniq.size - 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48291,"user_id":50,"body":"require \"set\"\n\ndef est_subsets(arr)\n    return 2**(Set.new(arr).size())-1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48292,"user_id":209,"body":"def est_subsets(arr)\n  2 ** Set.new(arr).size - 1 \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48293,"user_id":null,"body":"def est_subsets(arr)\n  arr.uniq!\n  (1..arr.size).to_a.map { |i| arr.combinations(i).size }.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48294,"user_id":null,"body":"def est_subsets(arr)\n  arr.empty? ? 0 : (2**arr.uniq.size)-1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48295,"user_id":1246,"body":"def est_subsets(arr)\n  return (2**(arr.uniq.size))-1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48296,"user_id":527,"body":"def est_subsets(arr)\n  2_u64 ** arr.uniq.size - 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48297,"user_id":1072,"body":"def est_subsets(arr) 2**arr.to_set.size-1 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58475cce273e5560f40000fa":[{"id":48298,"user_id":null,"body":"def approx_root(n)\n  a = (n**0.5).floor; b = a+1\n  (a+(n-a*a)\/(b*b-a*a)).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48299,"user_id":2563,"body":"def approx_root(n)\n  top = 1.0\n  while top * top < n\n    top += 1\n  end\n  base = top - 1\n  diff_gn = n - (base * base)\n  diff_lg = (top * top) - (base * base)\n  (base + (diff_gn \/ diff_lg)).round(2)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48300,"user_id":1403,"body":"def approx_root(n)\n  return Math.sqrt(n) if Math.sqrt(n) % 1 == 0\n  ss, ls = Math.sqrt(n).floor ** 2, Math.sqrt(n).ceil ** 2\n  return Math.sqrt(ss) + ((n - ss).to_f \/ (ls - ss)).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58485a43d750d23bad0000e6":[{"id":48301,"user_id":421,"body":"def fizz_buzz_cuckoo_clock(time)\n  a, b = time.split(':').map(&.to_i)\n  b == 30 ? \"Cuckoo\" : b.zero? ? (\"Cuckoo \" * (a % 12 == 0 ? 12 : a % 12)).strip : b % 15 == 0 ? \"Fizz Buzz\" : b % 5 == 0 ? \"Buzz\" : b % 3 == 0 ? \"Fizz\" : \"tick\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48302,"user_id":null,"body":"def fizz_buzz_cuckoo_clock(time)\n  hour = time.split(\":\")[0]\n  min = time.split(\":\")[1]\n  if min == \"00\" || min == \"0\"\n    return (\"Cuckoo \" * 12).strip if hour == \"00\"\n    return (\"Cuckoo \" * hour.to_i).strip if hour.to_i < 13\n    return (\"Cuckoo \" * (hour.to_i - 12)).strip\n  end\n  return \"Cuckoo\" if min == \"30\"\n  return \"Fizz Buzz\" if min.to_i % 15 == 0\n  return \"Fizz\" if min.to_i % 3 == 0\n  return \"Buzz\" if min.to_i % 5 == 0\n  return \"tick\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48303,"user_id":null,"body":"def fizz_buzz_cuckoo_clock(time)\n    list = time.split(':')\n    if list[1] == \"00\" || list[1] == \"0\"\n        if list[0] == \"00\"\n            return (\"Cuckoo \" * 12.to_i).strip\n        end\n\n        if list[0].to_i >= 12\n            n = list[0].to_i - 12\n            if n == 0\n                return (\"Cuckoo \"*12).strip\n            else\n                return (\"Cuckoo \"*n).strip\n            end\n        end\n        return (\"Cuckoo \"*list[0].to_i).strip\n    else\n        if list[1] == \"30\"\n            return \"Cuckoo\"\n        end\n        if (list[1].to_i%3) == 0 && (list[1].to_i%5) == 0\n            return \"Fizz Buzz\"\n        end\n        if (list[1].to_i%3) == 0 && (list[1].to_i%5) != 0\n            return \"Fizz\"\n        end\n        if (list[1].to_i%5) == 0 && (list[1].to_i%3) !=0\n            return \"Buzz\"\n        end\n        if (list[1].to_i%3) != 0 && (list[1].to_i%5) != 0\n            return \"tick\"\n        end\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48304,"user_id":null,"body":"def fizz_buzz_cuckoo_clock(time)\n  hour, min = time.split(\":\")\n  hour = hour.to_i % 12\n  hour = 12 if hour == 0\n  min = min.to_i\n  if min == 0\n    return (\"Cuckoo \" * hour).strip \n  elsif min == 30\n    return \"Cuckoo\"\n  elsif min % 3 == 0 && min % 5 == 0\n    return \"Fizz Buzz\"\n  elsif min % 3 == 0\n    return \"Fizz\"\n  elsif min % 5 == 0\n    return \"Buzz\"\n  else\n    return \"tick\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48305,"user_id":1828,"body":"def fizz_buzz_cuckoo_clock(time)\n  h, m = time.split(\":\").map{|i| i.to_i}\n  h = h == 0 || h == 24 || h == 12 ? 12 : h%12\n  return (\"Cuckoo \" * h).strip if m == 0\n  return \"Cuckoo\" if m == 30\n  return \"Fizz Buzz\" if m%15 == 0\n  m%3 == 0 ? \"Fizz\" : m%5 == 0 ? \"Buzz\" : \"tick\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58488e89cc8feac6cb000941":[{"id":48306,"user_id":421,"body":"def return_reg\n  \/<\\\/?[^><]+\\\/?>\/\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48307,"user_id":1624,"body":"def return_reg\n  %r[<\\\/?[^>]*?\\\/?>]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48308,"user_id":2201,"body":"def return_reg \n\/<[^>]*>\/ end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48309,"user_id":1072,"body":"def return_reg\n  \/<.+?>\/\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"584c7b1e2cb5e1a727000047":[{"id":48310,"user_id":null,"body":"def hello_world\n  [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33].map { |char| char.chr }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48311,"user_id":527,"body":"def hello_world\n  \/Hello, World!\/.to_s[\/H.*!\/]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48312,"user_id":null,"body":"def hello_world\n  [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33].map{|i| i.chr }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48313,"user_id":812,"body":"def hello_world\n  result = String.new\n  letters = [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33]\n  letters.each do |letter|\n    result += letter.chr end\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48314,"user_id":1624,"body":"def hello_world\n  [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33].map(&.chr).join\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48315,"user_id":645,"body":"def hello_world\n  return [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33].reduce(String.new) do |acc, item|\n    acc + item.chr\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"584d2c19766c2b2f6a00004f":[{"id":48316,"user_id":421,"body":"ARR = [false, nil, 0, [] of Int32]\n\ndef func_or(a,b)  \n  (ARR.includes?(a) ? 0 : 1) + (ARR.includes?(b) ? 0 : 1) > 0\nend\n\ndef func_xor(a,b)\n  (ARR.includes?(a) ? 0 : 1) != (ARR.includes?(b) ? 0 : 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48317,"user_id":null,"body":"def bin(a)\n  case a\n    when false, nil, 0, \"\"; 0\n    when .is_a?(Array); a.empty?? 0: 1\n    else; 1\n  end  \nend  \ndef func_or(a, b) bin(a)+bin(b)>0 end\ndef func_xor(a,b) bin(a)+bin(b)==1 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48318,"user_id":null,"body":"def bin(a)\n  case a\n    when 0; 0\n    when \"\"; 0  \n    when nil; 0  \n    when false; 0\n    when .is_a?(Array); a.empty?? 0: 1\n    else; 1\n  end  \nend  \ndef func_or(a, b) bin(a)+bin(b)>0 end\ndef func_xor(a,b) bin(a)+bin(b)==1 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48319,"user_id":null,"body":"def bin(a)\n  case a\n    when 0; 0\n    when \"\"; 0  \n    when nil; 0  \n    when false; 0\n    when .is_a?(Array); a.size==0? 0: 1\n    else; 1\n  end  \nend  \ndef func_or(a, b) bin(a)+bin(b)>0 end\ndef func_xor(a,b) bin(a)+bin(b)==1 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48320,"user_id":1624,"body":"def force_bool(x)\n  return false if x.is_a?(Array) && x.empty?\n  return false if x == \"\"\n  return false if x == 0\n  !!x\nend\n\ndef func_or(a,b)\n  a = force_bool a\n  b = force_bool b\n  !(!a && !b)\nend\n\ndef func_xor(a,b)\n  a = force_bool a\n  b = force_bool b\n  a != b\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48321,"user_id":1375,"body":"def nand(a, b)\n  return true if Array === a\n  return true if Array === b\n  a = false if a == 0\n  b = false if b == 0\n  !(a && b)\nend\n\ndef func_or(a, b)\n  nand(\n    nand(a, a), \n    nand(b, b)\n  )\nend\n\ndef func_xor(a, b)\n  nand(\n    nand(a, nand(a, b)), \n    nand(b, nand(a, b))\n  )\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48322,"user_id":1750,"body":"class Object\n  def truthy?\n    case self\n    when Int32\n      self != 0\n    when Array\n  \t  !self.empty?\n  \telse\n  \t  !!self == true \n  \tend\n  end\n\n  def falsey?\n    !self.truthy?\n  end\nend\n\ndef func_or(a,b)\n  case {a, b}\n  when {.falsey?, .falsey?}\n    false\n  else\n    true\n  end\nend\n\ndef func_xor(a,b)\n  case {a, b}\n  when {.truthy?, .falsey?} \n    true\n  when {.falsey?, .truthy?} \n    true\n  else\n    false\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48323,"user_id":1246,"body":"def to_b(x)\n  return false if x.nil?\n  return x if x.is_a? Bool\n  return x != 0 if x.is_a? Int32\n  return x.size > 0\nend\n\ndef func_or(a,b)\n  to_b(a)||to_b(b)\nend\n\ndef func_xor(a,b)\n  to_b(a)^to_b(b)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48324,"user_id":1072,"body":"def cv(a) a != false && a != 0 && a != nil && a != [] of Int32 end; def func_or(a,b) cv(a) ? true : cv(b) ? true : false end; def func_xor(a,b) cv(a) != cv(b) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"584d88622609c8bda30000cf":[{"id":48325,"user_id":421,"body":"def word_splitter(string)\n  string.gsub(\/[^A-Za-z\\d\\.-]\/, \" \").split\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48326,"user_id":53,"body":"def word_splitter(string)\n  string.split(\/[^a-zA-Z0-9.-]\/)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48327,"user_id":null,"body":"def word_splitter(string)\n  string.split \/[^A-Z\\-\\d\\.]\/i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48328,"user_id":1624,"body":"def word_splitter(string)\n  string.split(\/[^A-Za-z0-9\\-\\.]\/)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48329,"user_id":null,"body":"def word_splitter(string)\n  string.split(\/[^\\w\\d.-]\/)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48330,"user_id":null,"body":"def word_splitter(string)\n  string.split(\/[:;|='+<>\\\/?!@#$%^&*()]\/)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48331,"user_id":null,"body":"def word_splitter(string)\n  string.split(\/[^-.0-9a-z]\/i)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48332,"user_id":1375,"body":"def word_splitter(string)\n  string.split(\/[^A-Za-z0-9-.]\/)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48333,"user_id":1828,"body":"def word_splitter(string)\n  string.split(\/['*;:=+?!&#|%>\\\/]\/)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48334,"user_id":1072,"body":"def word_splitter(s) s.split(\/[^\\w.-]\/) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"584dc1b7766c2bb158000226":[{"id":48335,"user_id":168,"body":"def chore_assignment(chores)\n  xs, n = chores.sort, chores.size \/\/ 2\n  n.times.map {|i| xs[i] + xs[-i - 1]}.to_a.sort!\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48336,"user_id":421,"body":"def chore_assignment(chores)\n  arr = chores.sort!\n  (0...arr.size \/ 2).map{|x| arr[x] + arr[-x - 1]}.sort!\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48337,"user_id":1624,"body":"def chore_assignment(chores)\n  t = chores.sort\n  n = t.size \/ 2\n  a = t[0, n]\n  b = t[n, n].reverse\n  a.zip(b).map{|x,y| x+y}.sort\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48338,"user_id":2201,"body":"def chore_assignment(chores)\n  assignments = [] of Int32\n  chores = chores.sort()\n  i = 0\n  j = chores.size - 1\n  while (i < j) \n    assignments.push(chores[i]+chores[j])\n    i+=1\n    j-=1\n  assignments = assignments.sort()\n  end\n  assignments\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5850e85c6e997bddd300005d":[{"id":48339,"user_id":1403,"body":"def simplify(n)\n  return Math.sqrt(n).to_i.to_s if Math.sqrt(n) % 1 == 0\n  n.to_i.downto(2).each { | i |\n    if Math.sqrt(i) % 1 == 0 && n % i == 0\n      return \"#{Math.sqrt(i).to_i} sqrt #{n.to_i \/\/ i}\"\n    end\n  }\n  \"sqrt #{n}\"\nend\n\ndef desimplify(s)\n  case s\n    when \/^\\d+$\/;     s.to_i ** 2\n    when \/^sqrt\/;     s.to_s.split[-1].to_i\n    when \/^\\d+ sqrt\/; (s.to_s.split[0].to_i ** 2) * s.to_s.split[-1].to_i\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58539230879867a8cd00011c":[{"id":48340,"user_id":1828,"body":"def find_children(str)\n  str.chars.sort_by{|i| [i.upcase,i]}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48341,"user_id":1072,"body":"def find_children(s) \"abcdefghijklmnopqrstuvwxyz\".split(\"\").map{|l| l.upcase*s.count(l.upcase)+l*s.count(l)}.join end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48342,"user_id":421,"body":"def find_children(dancing_brigade)\n  dancing_brigade.chars.sort_by{|x| [x.downcase, x]}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48343,"user_id":null,"body":"def find_children(dancing_brigade)\n  origin_array = dancing_brigade.chars.map { |x| x.downcase }.sort\n  unique = origin_array.uniq\n  unique.map { |c| origin_array.index(c) }.each { |x| \n    if x\n      origin_array[x] = origin_array[x].upcase\n    end\n  }\n\n  origin_array.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48344,"user_id":null,"body":"\nmodule Enumerable(T)\n  def each_with_object(obj)\n    each do |elem|\n      yield elem, obj\n    end\n    obj\n  end\n\n  def tally : Hash(T, Int32)\n    each_with_object(Hash(T, Int32).new) do |item, hash|\n      count = hash[item]?\n        if count\n          hash[item] = count + 1\n      else\n        hash[item] = 1\n      end\n    end\n  end\nend\n\ndef find_children(dancing_brigade)\n\tbrigade = Array(Char).new\n\tcounts = dancing_brigade.chars.tally\n\n\t('A'..'Z').each do |parent|\n\t\tif counts.has_key?(parent)\n\t\t\tbrigade << parent\n\t\t\tchild = parent.downcase\n\t\t\tcounts.has_key?(child) &&\n\t\t\t\tcounts[child].times { brigade << child }\n\t\tend\n\tend\n\n\treturn brigade.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48345,"user_id":null,"body":"def find_children(d)\n  mothers = d.delete(&.lowercase?).chars.uniq.sort\n  mothers.reduce(\"\") do |acc, m|\n    ms = m.to_s\n    acc += \"#{ms}#{ms.downcase*d.count(ms.downcase)}\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48346,"user_id":null,"body":"def find_children(s)\n  s.downcase.split(\"\").sort.join(\"\").scan(\/(.)(\\1*)\/).map { |a| a[0].capitalize }.join \"\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48347,"user_id":null,"body":"def find_children(dancing_brigade)\n  dancing_brigade.chars.sort{ |a,b| a.downcase == b.downcase ? a <=> b : a.downcase <=> b.downcase }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48348,"user_id":null,"body":"def find_children(dancing_brigade)\n\tsorted_chars = dancing_brigade.chars.sort\n\tresult = \"\"\n\twhile !sorted_chars.empty? && sorted_chars[0].uppercase?\n\t\tletter = sorted_chars.shift\n\t\tresult += letter\n\t\tresult += letter.downcase.to_s * sorted_chars.count { |c| c == letter.downcase }\n\tend\n\treturn result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48349,"user_id":null,"body":"def find_children(dancing_brigade)\n  dancing_brigade.chars.sort { |a,b|\n    if a.downcase != b.downcase\n      a.downcase <=> b.downcase\n    else\n      a.ord <=> b.ord\n    end\n  }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5855777bb45c01bada0002ac":[{"id":48350,"user_id":1828,"body":"def encode_resistor_colors(ohms)\n  band = {0=>\"black\", 1=>\"brown\", 2=>\"red\", 3=>\"orange\", 4=>\"yellow\", 5=>\"green\", 6=>\"blue\", 7=>\"violet\", 8=>\"gray\", 9=>\"white\"}\n  l = ohms.includes?(\".\") ? ohms.sub(\".\", \"\").sub(\"k\",\"00\").sub(\"M\",\"00000\") : ohms.sub(\"k\",\"000\").sub(\"M\",\"000000\")\n  k = l.split(\" \")[0]\n  n = Math.log10(k.to_i\/k[0..1].to_i)\n  [k[0],k[1],n].map{|i| band[i.to_i]}.push(\"gold\").join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48351,"user_id":null,"body":"def rev(c)\n  code = { 0 => \"black\", 1 => \"brown\", 2 => \"red\", 3 => \"orange\", 4 => \"yellow\",\n           5 => \"green\", 6 => \"blue\", 7 => \"violet\", 8 => \"gray\", 9 => \"white\" }\n  \"#{code[c[0].to_i]} #{code[c[1].to_i]} #{code[c.size - 2]} gold\"\nend\n\ndef encode_resistor_colors(ohms_string)\n  tmp = ohms_string.split(\" \")[0]\n\n  if tmp.includes?(\"M\")\n    rev (tmp.sub(\"M\", \"\").to_f * 1_000_000).to_i.to_s\n  elsif tmp.includes?(\"k\")\n    rev (tmp.sub(\"k\", \"\").to_f * 1_000).to_i.to_s\n  else\n    rev tmp\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48352,"user_id":null,"body":"def encode_resistor_colors(ohms_string)\n  colors = {0 => \"black\", 1 => \"brown\", 2 => \"red\", 3 => \"orange\", 4 => \"yellow\", 5 => \"green\", 6 => \"blue\", 7 => \"violet\", 8 => \"gray\", 9 => \"white\"}\n  match = ohms_string.match(\/(\\d+\\.?\\d*)(\\w?) ohms\/)\n  return nil if match.nil?\n  num = match[1].to_f64\n  num *= 1_000 if match[2] == \"k\"\n  num *= 1_000_000 if match[2] == \"M\"\n  mag = Math.log10(num).floor - 1\n  digits = (num \/ 10 ** mag).to_i32.to_s.chars.map(&.to_i)\n  \"#{colors[digits[0]]} #{colors[digits[1]]} #{colors[mag]} gold\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48353,"user_id":null,"body":"def encode_resistor_colors(s)\n  c = [\"black\", \"brown\", \"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"violet\", \"gray\", \"white\"]\n  mu = {\" \" => 1, \"k\" => 1000, \"M\" => 1000000}\n  v, m = s.match(\/([0-9.]+)(.)\/).not_nil!.captures.map(&.not_nil!)\n  z = (v.to_f * mu[m]).to_i.to_s.count('0')\n  n = s.gsub(\/[^0-9]\/,\"\")\n  \"#{c[n[0].to_i]} #{n.size>1?c[n[1].to_i]: \"black\"} #{n.size<2||n[1]=='0'?c[z-1]: c[z]} gold\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48354,"user_id":null,"body":"def encode_resistor_colors(ohms_string)\n    assoc = {\n        0 => \"black\", 1 => \"brown\", 2 => \"red\", 3 => \"orange\", 4 => \"yellow\",\n        5 => \"green\", 6 => \"blue\", 7 => \"violet\", 8 => \"gray\", 9 => \"white\"\n    }\n    val = ohms_string.split(\" \")[0]\n    if val[-1] == 'k'\n        pow = 3\n        val = val.chomp('k').to_f\n    elsif val[-1] == 'M'\n        pow = 6\n        val = val.chomp('M').to_f\n    else\n        pow = 0\n        val = val.to_f\n    end\n    while val < 10\n        val *= 10\n        pow -= 1\n    end\n    while val >= 100\n        val \/= 10\n        pow += 1\n    end\n    val = val.to_i\n    \"#{assoc[val\/10]} #{assoc[val%10]} #{assoc[pow]} gold\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48355,"user_id":863,"body":"enum Resistor\n  Black\n  Brown\n  Red\n  Orange\n  Yellow\n  Green\n  Blue\n  Violet\n  Gray\n  White\n  Gold\nend\n\nclass String\n  def expand_number\n    match(\/([\\d.]+)([kM])?\/)\n    case {$1, $2?}\n    when {_, \"M\"}\n      ($1.to_f * 1000000).to_i\n    when {_, \"k\"}\n      ($1.to_f * 1000).to_i\n    else\n      $1.to_i\n    end.to_s\n  end\nend\n\ndef encode_resistor_colors(ohms_string)\n  ohms_string.chomp(\" ohms\")\n    .expand_number\n    .match(\/(\\d{2,}?)(0+)?$\/)\n  $1.chars\n    .map {|c| Resistor.new(c.to_i) }\n    .+([Resistor.new($2?.try &.size || 0), Resistor::Gold])\n    .join(\" \").downcase\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48356,"user_id":null,"body":"def encode_resistor_colors(ohms_string)\n  ohms_string = ohms_string.split[0]\n  mult = ohms_string.includes?(\"M\") ? 1000000 : ohms_string.includes?(\"k\") ? 1000 : 1\n  mult \/= 10 if ohms_string.includes?(\".\")\n  amount = ohms_string.gsub(\/\\D+\/, \"\").to_f * mult\n  colors = {0 => \"black\", 1 => \"brown\", 2 => \"red\", 3 => \"orange\", 4 => \"yellow\", 5 => \"green\", 6 => \"blue\", 7 => \"violet\", 8 => \"gray\", 9 => \"white\"}\n  d1 = amount.to_s.chars[0].to_i\n  d2 = amount.to_s.chars[1].to_i\n  [colors[d1], colors[d2], colors[Math.log10(amount \/ (d1 * 10 + d2)).to_i], \"gold\"].join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48357,"user_id":null,"body":"COLORS = %w{black brown red orange yellow green blue violet gray white}\n\ndef encode_resistor_colors(ohms_string)\n  v = ohms_string.split[0]\n  unit = 1\n  case v[-1]\n  when 'k'\n    v = v[0, v.size - 1]\n    unit = 1000\n  when 'M'\n    v = v[0, v.size - 1]\n    unit = 1000000\n  end\n  n = v.to_f\n  val = n * unit\n  digits = if val < 10\n             \"0#{val}\"\n           else\n             \"#{val}\"[0, 2]\n           end\n  rep = [] of String\n  digits.each_char do |c|\n    rep << COLORS[c.to_i]\n  end\n  # mult\n  p = Math.log(val\/digits.to_f, 10).round.to_i\n  rep << COLORS[p]\n  rep << \"gold\"\n  rep.join(\" \")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48358,"user_id":null,"body":"DIGITS = %w(\n  black\n  brown\n  red\n  orange\n  yellow\n  green\n  blue\n  violet\n  gray\n  white\n)\n\nMULTIPLIERS = %w(\n  black\n  brown\n  red\n  orange\n  yellow\n  green\n  blue\n  violet\n  gray\n  white\n  pink\n  silver\n  gold\n)\n\ndef encode_resistor_colors(str)\n  x, _ = str.split\n  value = x.sub(\/[kM]\/, \"\").to_f\n  value *= 1000 if x[-1] == 'k'\n  value *= 1000000 if x[-1] == 'M'\n  exponent = 0\n  while value >= 100\n    exponent += 1\n    value \/= 10\n  end\n  while value < 10\n    exponent -= 1\n    value *= 10\n  end\n  x1 = value.to_i \/ 10\n  x2 = value.to_i % 10\n  [DIGITS[x1], DIGITS[x2], MULTIPLIERS[exponent], \"gold\"].join(' ')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5856c5f7f37aeceaa100008e":[{"id":48359,"user_id":421,"body":"def baubles_on_tree(baubles, branches)\n  branches.zero? ? \"Grandma, we will have to buy a Christmas tree first!\" : (1..branches).map{|x| baubles \/ branches + (x <= baubles % branches ? 1 : 0)}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48360,"user_id":53,"body":"def baubles_on_tree(x, y)\n  y>0 ? (0...y).map{|i| x\/y + (i<x%y ? 1 : 0)} : \"Grandma, we will have to buy a Christmas tree first!\" \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48361,"user_id":1624,"body":"def baubles_on_tree(n, z)\n  return \"Grandma, we will have to buy a Christmas tree first!\" if z == 0\n  a, b = n.divmod(z)\n  (0...z).map{|i| a + ((i < b) ? 1 : 0) }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48362,"user_id":1072,"body":"def baubles_on_tree(a,b) b>0 ? (0...b).map{|i| a\/b+(i<a%b ? 1 : 0)} : \"Grandma, we will have to buy a Christmas tree first!\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5859c82bd41fc6207900007a":[{"id":48363,"user_id":492,"body":"def quotable(name, quote)\n  name + \" said: \\\"\" + quote + \"\\\"\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48364,"user_id":null,"body":"def quotable(s1,s2)\n  %|#{s1} said: \"#{s2}\"|\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48365,"user_id":null,"body":"def quotable(name, quote)\n  return name + \" said: \\\"\" + quote + \"\\\"\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48366,"user_id":527,"body":"def quotable(name, quote)\n  %Q(#{name} said: \"#{quote}\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48367,"user_id":2986,"body":"def quotable(name, quote)\n  \"#{name} said: \\\"#{quote}\\\"\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"585a1a227cb58d8d740001c3":[{"id":48368,"user_id":2986,"body":"def repeater(string, n)\n  string * n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48369,"user_id":null,"body":"def repeater(string, n)\n  return string * n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48370,"user_id":1750,"body":"def repeater(s, n)\n  n < 1 ? \"\" : s + repeater(s, n.pred)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48371,"user_id":1258,"body":"def repeater(string, n)\n  Array.new(n, string).join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48372,"user_id":null,"body":"def repeater(a, b) a*b end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48373,"user_id":676,"body":"def repeater(s : String, n : Int32) : String\n  s * n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"585a1f0945376c112a00019a":[{"id":48374,"user_id":1566,"body":"def repeater(string, n)\n  %(\"#{string}\" repeated #{n} times is: \"#{string * n}\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48375,"user_id":1624,"body":"def repeater(s, n)\n  \"#{s.inspect} repeated #{n} times is: #{(s*n).inspect}\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48376,"user_id":527,"body":"def repeater(string, n)\n  %Q(\"#{string}\" repeated #{n} times is: \"#{string * n}\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48377,"user_id":2986,"body":"def repeater(string, n)\n  \"\\\"#{string}\\\" repeated #{n} times is: \\\"#{string * n}\\\"\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"585af8f645376cda59000200":[{"id":48378,"user_id":421,"body":"def format_poem(poem)\n  poem.gsub(\/\\. \/, \".\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48379,"user_id":50,"body":"def format_poem(p)\n  p.split(\". \").join(\".\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48380,"user_id":1750,"body":"def format_poem(poem)\n  poem.gsub \/\\.\\s\/, \".\n\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48381,"user_id":1566,"body":"def format_poem(poem)\n  poem.split(\". \").join \".\n\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48382,"user_id":527,"body":"def format_poem(poem)\n  poem.gsub(\". \", \".\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48383,"user_id":1072,"body":"def format_poem(p) p.gsub(\". \", \".\n\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"585ba6dff59b3cef3f000132":[{"id":48384,"user_id":53,"body":"def reduce_by_rules(ns, rs)\n  nc = ns.size\n  rc = rs.size\n  n = rs[0].call(ns[0], ns[1])\n  i = 2\n  while i < nc\n    n = rs[(i - 1) % rc].call(n, ns[i])\n    i += 1\n  end\n  n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48385,"user_id":50,"body":"def reduce_by_rules(array, rules)\n  a=array[0..-1]\n  i=0\n  l=rules.size\n  while a.size>1\n    tmp=rules[i%l].call(a[0],a[1])\n    i+=1\n    a.shift\n    a[0]=tmp\n  end\n  a.pop\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48386,"user_id":1072,"body":"def reduce_by_rules(a,r) i=-1; a.reduce{|a,b| i=(i+1) % r.size; r[i].call(a,b)} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"585eaef9851516fcae00004d":[{"id":48387,"user_id":421,"body":"def what_list_am_i_on(actions)\n  naughty = actions.select{|x| \/\\A[bfk]\/ === x}.size\n  nice = actions.select{|x| \/\\A[gns]\/ === x}.size\n  naughty >= nice ? \"naughty\" : \"nice\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48388,"user_id":53,"body":"def what_list_am_i_on(actions)\n  x = actions.count{|a| a =~ \/^[gsn]\/i }\n  y = actions.count{|a| a =~ \/^[bfk]\/i }\n  x > y ? \"nice\" : \"naughty\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48389,"user_id":168,"body":"def what_list_am_i_on(actions)\n  s = actions.sum { |w| (\"gsn\".includes?(w[0]) ? 1 : 0) - (\"bfk\".includes?(w[0]) ? 1 : 0) }\n  s <= 0 ? \"naughty\" : \"nice\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48390,"user_id":1624,"body":"def what_list_am_i_on(actions)\n  if actions.grep(\/\\A[bfk]\/).size >= actions.grep(\/\\A[gsn]\/).size\n    \"naughty\"\n  else\n    \"nice\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48391,"user_id":null,"body":"def what_list_am_i_on(actions)\n  actions.map(&.[0]).map{|c| \"gsn\".includes?(c)? 1: \"bfk\".includes?(c)? -1: 0}.sum>0? \"nice\": \"naughty\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48392,"user_id":1750,"body":"def what_list_am_i_on(strings)\n  nn = ->(s: String) { strings.count { |string| s.includes? string[0] } }\n  nn.call(\"gsn\") > nn.call(\"bfk\") ? \"nice\" : \"naughty\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48393,"user_id":1072,"body":"def what_list_am_i_on(acts) acts.reduce(0){|a,b| a+(\"bfk\".index(b[0].downcase) ? -1 : \"gsn\".index(b[0].downcase) ? 1 : 0)}>0 ? \"nice\" : \"naughty\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58603c898989d15e9e000475":[{"id":48394,"user_id":1072,"body":"class Primes\n  @@primes=[2,3,5,7]\n  \n  def self.primes\n    @@primes\n  end\n  \n  def self.is_prime(n)\n    return false if n<2\n    i=0; limit=(n**0.5).to_i;\n    while true\n      self.expand_primes(@@primes[i-1]) if i>=@@primes.size\n      break if @@primes[i]>limit\n      return false if (n % @@primes[i])==0\n      i+=1\n    end\n    return true\n  end\n  \n  def self.expand_primes(n)\n    next_n=(n+1)%6!=0 ? n+4 : n+2;\n    if self.is_prime(next_n)\n      @@primes+=[next_n]\n    else self.expand_primes(next_n) end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48395,"user_id":null,"body":"require \"set\"\n\nclass Primes\n  @@primes = [2, 3, 5, 7, 11]\n  @@not_primes = Set{0, 1, 4, 6, 8, 9, 10}\n\n  def self.primes\n    @@primes\n  end\n\n  def self.is_prime(n)\n    puts \"is_prime(#{n})\"\n    nn = n.abs\n    return false if @@not_primes.includes?(nn)\n    return true if @@primes.includes?(nn)\n    self.compute(nn)\n  end\n\n  def self.compute(n)\n    is_prime = true\n    c = 2\n    while n \/ c >= c\n      if n % c == 0\n        @@not_primes << n\n        is_prime = false\n        break\n      end\n      if c == 2\n        c = 3\n      else\n        c += 2\n      end\n    end\n    if is_prime\n      @@primes << n\n    end\n    is_prime\n  end\nend\n\n\ndef test_lenR(n, l)\n  true\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48396,"user_id":53,"body":"class Primes\n  @@primes = [2,3,5,7]\n  \n  def self.primes\n    @@primes\n  end\n  \n  def self.is_prime(n)\n    return false if n<2\n    i=0\n    k=(n**0.5).round.to_i\n    while true\n      self.expand_primes(@@primes[i-1]) if i>=@@primes.size\n      break if @@primes[i]>k\n      return false if (n % @@primes[i])==0\n      i+=1\n    end\n    true\n  end\n  \n  def self.expand_primes(n)\n    m = n+2\n    if self.is_prime(m)\n      @@primes += [m]\n    else \n      self.expand_primes(m) \n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5861d28f124b35723e00005e":[{"id":48397,"user_id":713,"body":"def zero_fuel(distance, mpg, fuel_left)\n  fuel_left * mpg >= distance\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48398,"user_id":null,"body":"def zero_fuel(d, m, f)\n  # my code here\n  return d <= m * f;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48399,"user_id":null,"body":"def zero_fuel(a, b, c)\n  return a <= b * c;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48400,"user_id":null,"body":"def zero_fuel(distance, mpg, fuel_left)\n  return mpg * fuel_left >= distance\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48401,"user_id":null,"body":"def zero_fuel(distance, mpg, fuel_left)\n    return fuel_left * mpg >= distance\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48402,"user_id":53,"body":"def zero_fuel(distance, mpg, fuel_left)\n  mpg * fuel_left >= distance\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48403,"user_id":527,"body":"def zero_fuel(distance, mpg, fuel_left)\n  distance <= fuel_left * mpg\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48404,"user_id":421,"body":"def zero_fuel(distance, mpg, fuel_left)\n  distance <= mpg * fuel_left\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5862eeeae20244d5eb000005":[{"id":48405,"user_id":421,"body":"def celsius_to_romer(temp)\n  temp * 21 \/ 40 + 7.5\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48406,"user_id":null,"body":"def celsius_to_romer(temp)\n  temp * 0.525 + 7.5\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48407,"user_id":50,"body":"def celsius_to_romer(t)\n  t*21\/40+7.5\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48408,"user_id":1703,"body":"def celsius_to_romer(temp)\n  return temp * 0.525 + 7.5;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48409,"user_id":1624,"body":"def celsius_to_romer(temp)\n  7.5 + 0.525 * temp\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48410,"user_id":1072,"body":"def celsius_to_romer(t) t*21\/40.0+7.5 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58630e2ae88af44d2b0000ea":[{"id":48411,"user_id":17,"body":"def is_divisible(a, b)\n  a % b == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48412,"user_id":1566,"body":"def is_divisible(wall_length, pixel_size)\n  wall_length % pixel_size == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48413,"user_id":null,"body":"def is_divisible(wall_length, pixel_size)\n  (wall_length % pixel_size).zero?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48414,"user_id":null,"body":"def is_divisible(wall_length, pixel_size)\n  wall_length % pixel_size == 0 ? true : false\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48415,"user_id":null,"body":"def is_divisible(wall_length, pixel_size)\n  wall_length%pixel_size===0;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48416,"user_id":null,"body":"def is_divisible(wall_length, pixel_size)\n  (wall_length\/pixel_size) * pixel_size == wall_length\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48417,"user_id":null,"body":"def is_divisible(w, p)\n  w % p == 0 ? true : false\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48418,"user_id":1828,"body":"def is_divisible(wl, ps)\n  wl%ps == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48419,"user_id":null,"body":"def is_divisible(wall_length, pixel_size)\n  if wall_length % pixel_size == 0 \n    return true\n  else \n    return false\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48420,"user_id":3217,"body":"def is_divisible(wall_length, pixel_size)\n  return (wall_length%pixel_size)==0\n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5863f97fb3a675d9a700003f":[{"id":48421,"user_id":null,"body":"def sum_ppg(player_one, player_two)\n  player_one[\"ppg\"].to_f + player_two[\"ppg\"].to_f\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48422,"user_id":1072,"body":"def sum_ppg(a,b) a[\"ppg\"].to_f+b[\"ppg\"].to_f end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48423,"user_id":1474,"body":"def sum_ppg(player_one, player_two)::Float64\n  player_one[\"ppg\"].to_f + player_two[\"ppg\"].to_f\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48424,"user_id":null,"body":"def sum_ppg(player_one, player_two)\n  o = player_one[\"ppg\"]\n  t = player_two[\"ppg\"]\n  o.is_a?(Float64 | Int32) && t.is_a?(Float64 | Int32) ? o + t : 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58644e8ddf95f81a38001d8d":[{"id":48425,"user_id":1624,"body":"def box(n)\n  [\"-\" * n] + [\"-\" + \" \" * (n-2) + \"-\"] * (n-2) + [\"-\" * n]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48426,"user_id":53,"body":"def box(n)\n  res = [] of String\n  (0...n).each{|i|\n    s = \"\"\n    (0...n).each{|j|\n      if i==0 || i+1==n || j==0 || j+1==n\n        s += \"-\"\n      else\n        s += \" \"\n      end\n    }\n    res << s\n  }\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48427,"user_id":null,"body":"def box(n)\n  [\"-\" * n] + (n - 2).times.map {\"-\" + (\" \" * (n - 2)) + \"-\"}.to_a + [\"-\" * n]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48428,"user_id":1768,"body":"def box(n)\n  f = [(1..n).map{|i|'-'}.join]\n  (0..n-3).each do |i|\n    f.push(\"-\" + (0..n-3).map{|j|\" \"}.join + \"-\")\n  end\n  f + [f[0]]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48429,"user_id":1072,"body":"def box(n) [\"-\"*n]+[[\"-\",\" \"*(n-2),\"-\"].join]*(n-2)+[\"-\"*n] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48430,"user_id":1072,"body":"def box(n) [\"-\"*n]+[[\"-\",\" \"*(n-2),\"-\"].join]*(n-2)+[\"-\"*n] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58649884a1659ed6cb000072":[{"id":48431,"user_id":null,"body":"def update_light(current)\n  if current == \"green\"\n    \"yellow\"\n  elsif current == \"yellow\"\n    \"red\"\n  else\n    \"green\"\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-26 08:24:29"},{"id":48432,"user_id":1474,"body":"def update_light(current)\n  colors = [\"green\", \"yellow\", \"red\", \"green\"]\n  i = colors.index(current)\n  i = 0 unless i\n  colors[i + 1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48433,"user_id":492,"body":"def update_light(current)\n  if current == \"green\"\n    \"yellow\"\n  elsif current == \"yellow\"\n    \"red\"\n  elsif current == \"red\"\n    \"green\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48434,"user_id":50,"body":"def update_light(current)\n  if current == \"green\"\n    return \"yellow\"\n  elsif current == \"yellow\"\n    return \"red\"\n  else\n    return \"green\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48435,"user_id":null,"body":"def update_light(current)\n  map = {\n    \"green\" => \"yellow\", \n    \"yellow\" => \"red\", \n    \"red\" => \"green\", \n  }\n  \n  map[current]\nend\n\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48436,"user_id":53,"body":"def update_light(current)\n  current == \"green\" ? \"yellow\"\n      : current == \"yellow\" ? \"red\"\n      : \"green\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48437,"user_id":null,"body":"def update_light(current)\n  {\"green\" => \"yellow\", \"yellow\" => \"red\", \"red\" => \"green\"}[current]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48438,"user_id":527,"body":"def update_light(current : String) : String\n  case current\n    when \"red\" then \"green\"\n    when \"yellow\" then \"red\"\n    when \"green\" then \"yellow\"\n    else raise ArgumentError.new\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48439,"user_id":421,"body":"def update_light(current)\n  case current\n  when \"green\"\n    return \"yellow\"\n  when \"yellow\"\n    return \"red\"\n  else \n    return \"green\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5864cdc483f7e6df980001c8":[{"id":48440,"user_id":421,"body":"def color_probability(color, texture)\n  dict = {\"red\" => \"0.57\", \"yellow\" => \"0.28\" , \"green\" => \"0.14\"}\n  texture == \"bumpy\" ? dict[color] : \"0.33\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48441,"user_id":2323,"body":"def color_probability(color, texture)\n  texture == \"smooth\" ? \"0.33\" : { 'r' =>\"0.57\", 'g' =>\"0.14\", 'y'=>\"0.28\" }[color[0]]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48442,"user_id":222,"body":"def color_probability(a,b)\n  if b==\"smooth\"\n    return \"0.33\" \n  end\n  if(a==\"red\")\n    return \"0.57\"\n  end\n  if(a==\"green\")\n    return \"0.14\"\n  end\n  return \"0.28\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48443,"user_id":1072,"body":"def color_probability(c,t) {\"red\"=>[\"0.33\",\"0.57\"],\"green\"=>[\"0.33\",\"0.14\"],\"yellow\"=>[\"0.33\",\"0.28\"]}[c][t==\"bumpy\" ? 1 : 0] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5864eb8039c5ab9cd400005c":[{"id":48444,"user_id":null,"body":"def median(array)\n  if array.size.even?\n    array.sort[array.size \/\/ 2 - 1..array.size \/\/ 2].sum \/ 2\n  else\n    array.sort[array.size \/\/ 2]\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48445,"user_id":53,"body":"def median(array)\n  sorted = array.sort\n  n = array.size\n  i = (n\/2).to_i\n  a,b = [sorted[i], sorted[n-i-1]]\n  (a+b)\/2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48446,"user_id":149,"body":"def median(a)\n  n = (a.sort!.size \/ 2).to_i\n  a.size % 2 == 1 ? a[n] : (a[n-1] + a[n]) \/ 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48447,"user_id":50,"body":"def median(a)\n  a=a.sort\n  l=a.size\n  m=l>>1\n  (a[m]+(a[m-((l&1)^1)]))\/2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48448,"user_id":421,"body":"def median(array)\n  a = array.sort\n  a.size.odd? ? a[a.size \/\/ 2] : (a[a.size \/\/ 2] + a[(a.size \/\/ 2) - 1]) \/ 2.0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"586538146b56991861000293":[{"id":48449,"user_id":421,"body":"def to_nato(words)\n\twords.upcase().delete(\" \").split(\"\").map{|x| NATO.fetch(x, x)}.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48450,"user_id":null,"body":"def to_nato(words)\n  words.scan(\/\\S\/).map {|w| NATO.has_key?(w[0].upcase) ? NATO[w[0].upcase] : w[0] }.join \" \"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48451,"user_id":null,"body":"def to_nato(words)\n  phonetic = { 'A' => \"Alfa\", 'B' => \"Bravo\", 'C' => \"Charlie\", 'D' => \"Delta\", 'E' => \"Echo\", 'F' => \"Foxtrot\", 'G' => \"Golf\", 'H' => \"Hotel\", 'I' => \"India\", 'J' => \"Juliett\", 'K' => \"Kilo\", 'L' => \"Lima\", 'M' => \"Mike\", 'N' => \"November\", 'O' => \"Oscar\", 'P' => \"Papa\", 'Q' => \"Quebec\", 'R' => \"Romeo\", 'S' => \"Sierra\", 'T' => \"Tango\", 'U' => \"Uniform\", 'V' => \"Victor\", 'W' => \"Whiskey\", 'X' => \"Xray\", 'Y' => \"Yankee\", 'Z' => \"Zulu\" }\n  output = [] of String | Char\n  words.upcase.split(\" \").each { |str| str.each_char { |char| output << phonetic.fetch(char, char) } }\n  output.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48452,"user_id":null,"body":"def to_nato(words : String) : String\n\twords.upcase\n       .gsub(\/\\s\/, \"\")\n       .split(\"\")\n       .map { |l| NATO[l]? || l}\n       .join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48453,"user_id":null,"body":"def to_nato(words)\n\twords.upcase.gsub(\/\\s\/, \"\").gsub(\/[a-z]\/i){ |x| \"#{NATO[x]} \" }.gsub(\/[^a-z]\/i) { |x| x.blank? ? x : \"#{x} \" }.strip\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48454,"user_id":null,"body":"def to_nato(words)\n\twords.upcase.chars.reject(&.==(' ')).map { |c| NATO.fetch(c.to_s, c) }.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48455,"user_id":null,"body":"TABLE = {\n  'a' => \"Alfa\",\n  'b' => \"Bravo\",\n  'c' => \"Charlie\",\n  'd' => \"Delta\",\n  'e' => \"Echo\",\n  'f' => \"Foxtrot\",\n  'g' => \"Golf\",\n  'h' => \"Hotel\",\n  'i' => \"India\",\n  'j' => \"Juliett\",\n  'k' => \"Kilo\",\n  'l' => \"Lima\",\n  'm' => \"Mike\",\n  'n' => \"November\",\n  'o' => \"Oscar\",\n  'p' => \"Papa\",\n  'q' => \"Quebec\",\n  'r' => \"Romeo\",\n  's' => \"Sierra\",\n  't' => \"Tango\",\n  'u' => \"Uniform\",\n  'v' => \"Victor\",\n  'w' => \"Whiskey\",\n  'x' => \"Xray\",\n  'y' => \"Yankee\",\n  'z' => \"Zulu\",\n}\n\nALLOWED = Set.new(\".!?,;:0123456789\".chars)\n\ndef lookup(c : Char) : String?\n  case\n  when ALLOWED.includes?(c) then c.to_s\n  else TABLE[c]?\n  end\nend\n\ndef to_nato(words : String) : String\n\twords.downcase.chars.compact_map { |c| lookup(c) }.join(' ')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48456,"user_id":null,"body":"NA = [\"Alfa\", \"Bravo\", \"Charlie\", \"Delta\", \"Echo\", \"Foxtrot\", \"Golf\", \"Hotel\", \"India\", \"Juliett\",\n      \"Kilo\", \"Lima\", \"Mike\", \"November\", \"Oscar\", \"Papa\", \"Quebec\", \"Romeo\", \"Sierra\", \"Tango\",\n      \"Uniform\", \"Victor\", \"Whiskey\", \"Xray\", \"Yankee\", \"Zulu\"]\ndef to_nato(words)\n  words.split.map {|w| w.chars.map{|c| c.letter? ? NA[c.downcase-'a'] : c}.join \" \"}.join \" \"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48457,"user_id":1624,"body":"Nato = {\n  'a' => \"Alfa\",\n  'b' => \"Bravo\",\n  'c' => \"Charlie\",\n  'd' => \"Delta\",\n  'e' => \"Echo\",\n  'f' => \"Foxtrot\",\n  'g' => \"Golf\",\n  'h' => \"Hotel\",\n  'i' => \"India\",\n  'j' => \"Juliett\",\n  'k' => \"Kilo\",\n  'l' => \"Lima\",\n  'm' => \"Mike\",\n  'n' => \"November\",\n  'o' => \"Oscar\",\n  'p' => \"Papa\",\n  'q' => \"Quebec\",\n  'r' => \"Romeo\",\n  's' => \"Sierra\",\n  't' => \"Tango\",\n  'u' => \"Uniform\",\n  'v' => \"Victor\",\n  'w' => \"Whiskey\",\n  'x' => \"Xray\",\n  'y' => \"Yankee\",\n  'z' => \"Zulu\",\n}\n\ndef to_nato(words)\n\twords\n    .gsub(\/\\s\/, \"\")\n    .downcase\n    .chars\n    .map {|x| Nato.fetch(x, x) }\n    .join(\" \")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48458,"user_id":null,"body":"# NATO = {\"A\" => \"Alfa\", \"B\" => \"Bravo\", \"C\" => \"Charlie\", \"D\" => \"Delta\", \"E\" => \"Echo\", \"F\" => \"Foxtrot\", \"G\" => \"Golf\", \"H\" => \"Hotel\", \"I\" => \"India\", \"J\" => \"Juliett\", \"K\" => \"Kilo\", \"L\" => \"Lima\", \"M\" => \"Mike\", \"N\" => \"November\", \"O\" => \"Oscar\", \"P\" => \"Papa\", \"Q\" => \"Quebec\", \"R\" => \"Romeo\", \"S\" => \"Sierra\", \"T\" => \"Tango\", \"U\" => \"Uniform\", \"V\" => \"Victor\", \"W\" => \"Whiskey\", \"X\" => \"Xray\", \"Y\" => \"Yankee\", \"Z\" => \"Zulu\"}\ndef to_nato(words)\n  words.upcase.scan(\/\\S\/).map{ |c| NATO[c[0]]? || c[0] }.join(' ')\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"586560a639c5ab3a260000f3":[{"id":48459,"user_id":50,"body":"def rotate(s)\n  (0...s.size).map{|i| s[i+1..-1]+s[0..i]}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48460,"user_id":null,"body":"def rotate(str)\n    i = 0\n    res = [] of String\n    res.push(str)\n    while i < str.size\n        res.push(rt(res[-1]))\n        i += 1\n    end\n    res.shift\n    res\nend\n\ndef rt(str)\n    str.split(\"\").rotate.join(\"\")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48461,"user_id":527,"body":"def rotate(str : String) : Array(String)\n  Array.new(str.size){ |i| str[i+1..] + str[...i+1] }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48462,"user_id":421,"body":"def rotate(str)\n  str.chars.map_with_index{|x, i| str[i + 1..-1] + str[0..i]} \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"586566b773bd9cbe2b000013":[{"id":48463,"user_id":421,"body":"def no_repeat(string)\n  string.chars.find{|x| string.count(x) == 1}.to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48464,"user_id":1624,"body":"def no_repeat(s)\n  s.split(\"\").find{|c| s.count(c) == 1}\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48465,"user_id":50,"body":"def no_repeat(string)\n  s=string.chars\n  s.uniq.sort_by{|x| s.count(x)}[0].to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48466,"user_id":527,"body":"def no_repeat(string)\n  string.each_char.tally.find({\"\", 0}){ |c, f| f == 1 }[0].to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48467,"user_id":null,"body":"def no_repeat(string)\n  string.chars.select{ |c| string.count(c) == 1 }.first.to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48468,"user_id":527,"body":"def no_repeat(string)\n  string.each_char\n    .each_with_object(Hash(Char, Int32).new(0)){ |char, counts| counts[char] += 1 }\n    .find({\"\", 0}){ |(char, count)| count == 1 }[0].to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48469,"user_id":1072,"body":"def no_repeat(s) s.split(\"\").select{|a| s.count(a)==1}[0] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5865918c6b569962950002a1":[{"id":48470,"user_id":1828,"body":"def str_count(word, letter)\n  word.count(letter)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48471,"user_id":null,"body":"def str_count(word, letter)\n  word.chars.map {|i| i.to_s == letter.to_s ? i : \"\"}.join.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48472,"user_id":53,"body":"def str_count(word, letter)\n  word.chars.select{|c|c.ord == letter.to_s.chars[0].ord}.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48473,"user_id":5,"body":"def str_count(word, letter)\n  return word.count(letter)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48474,"user_id":null,"body":"def str_count(a,b)\n  a.count(b)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48475,"user_id":null,"body":"def str_count(word, letter)\n  if word.empty?\n    return 0\n  else \n    return word.count(letter)\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48476,"user_id":527,"body":"def str_count(word, letter : Char)\n  word.count(letter)\nend\n\ndef str_count(word, letter)\n  word.count(letter[0])\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48477,"user_id":null,"body":"def str_count(word, letter)\n  word.scan(letter).size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5865a407b359c45982000036":[{"id":48478,"user_id":null,"body":"def slogan_maker(array)\n  array.uniq.permutations.map{|words| words.join(' ')}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48479,"user_id":null,"body":"def slogan_maker(array)\n  s = [] of String\n  array.uniq.each_permutation  { |p| s << p.join(\" \") }\n  \n  s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48480,"user_id":null,"body":"def slogan_maker(array : Array(String))\n  array.uniq.permutations.map { |p| p.join(\" \") }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48481,"user_id":null,"body":"def slogan_maker(array : Array(String))\n  arr = array.uniq\n  return arr if arr.size == 1 || arr.size == 0\n  puts arr\n  arr.permutations.select { |w| w.size == arr.size }.map(&.join(\" \"))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48482,"user_id":421,"body":"def slogan_maker(array)\n  array.uniq.permutations.map{|x| x.join(\" \")}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48483,"user_id":null,"body":"def slogan_maker(array)\n  u = array.uniq\n  u.permutations(u.size).map {|p| p.join \" \"}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48484,"user_id":null,"body":"def slogan_maker(array)\n  array.uniq.permutations.map { | perm | perm.join(\" \") }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48485,"user_id":null,"body":"def slogan_maker(array)\n  array.uniq.permutations.map { |a| a.join(\" \") }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48486,"user_id":null,"body":"def slogan_maker(array)\n  array.uniq.each_permutation.map(&.join(' ')).to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48487,"user_id":53,"body":"def slogan_maker(array) \n  seq = array.uniq\n  xs = seq\n  (seq.size - 1).times{ xs = xs.map{|n| seq.select{|m|!n.includes?(m)}.map{|m| \"#{n} #{m}\"}}.flatten }\n  xs\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5865cff66b5699883f0001aa":[{"id":48488,"user_id":null,"body":"def to_time(seconds)\n  h, m = (seconds \/\/ 60).divmod(60)\n  String.build do |str|\n    str << h\n    str << \" hour(s) and \"\n    str << m\n    str << \" minute(s)\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48489,"user_id":527,"body":"def to_time(seconds : Int) : String\n  h, m = (seconds \/\/ 60).divmod(60)\n  \"#{h} hour(s) and #{m} minute(s)\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48490,"user_id":53,"body":"def to_time(s)\n  \"#{s \/\/ 3600} hour(s) and #{(s % 3600 \/\/ 60).floor} minute(s)\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48491,"user_id":421,"body":"def to_time(seconds)\n  \"#{seconds \/\/ 3600} hour(s) and #{(seconds % 3600 \/\/ 60).floor} minute(s)\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5866e6992e8d9cdbcd00040a":[{"id":48492,"user_id":1072,"body":"def convert_c_f(n, s=\"c\") s==\"c\" ? ((n-32)*5\/9).round(1) : s==\"f\" ? (n*1.8+32).round(1) : raise \"Error\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48493,"user_id":1624,"body":"def convert_c_f(num, scale=\"c\")\n  case scale\n  when \"c\"\n    ((num - 32) * 5 \/ 9.0).round(1)\n  when \"f\"\n    ((num * 9 \/ 5.0) + 32).round(1)\n  else\n    raise \"FAIL\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48494,"user_id":645,"body":"def convert_c_f(num, scale = \"c\")\n  raise \"invalid\" if ![\"f\", \"c\"].includes?(scale)\n  (scale == \"c\" ? (num - 32) * 5 \/ 9.0 : num * 1.8 + 32).round 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48495,"user_id":null,"body":"def convert_c_f(num, scale=\"c\")\n  (case scale\n     when \"c\"; 5.0\/9*(num-32)\n     when \"f\"; 9.0\/5*num+32\n     else raise \"err_unit\"\n  end).round 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5866ec8b2e8d9cec7e0000bb":[{"id":48496,"user_id":null,"body":"def reverse_sentence(sentence)\n  sentence.split.map{|w| w.reverse}.join ' '\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48497,"user_id":1624,"body":"def reverse_sentence(s)\n  s.split.map(&.reverse).join(\" \")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48498,"user_id":645,"body":"def reverse_sentence(sentence)\n  sentence.split.map(&.reverse).join \" \"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48499,"user_id":1072,"body":"def reverse_sentence(s) s.split.map{|a| a.reverse}.join(\" \") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5866f10311ceec6ac10001e8":[{"id":48500,"user_id":53,"body":"def help_jesse(arr)\n  arr.map {|x| \"Pour #{x.amount} mL of #{x.solution} into a #{x.instrument}#{x.note ? \" (#{x.note})\" : \"\"}\"}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48501,"user_id":1072,"body":"def help_jesse(arr) arr.map{|a| \"Pour #{a.amount} mL of #{a.solution} into a #{a.instrument}#{a.note ? \" (#{a.note})\" : \"\"}\"} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58670300f04e7449290000e5":[{"id":48502,"user_id":527,"body":"def longest(words)\n  words.max_of?(&.size) || 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48503,"user_id":1474,"body":"def longest(words)\n  words.empty? ? 0 : words.map(&.size).max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48504,"user_id":50,"body":"def longest(words)\n  ([\"\"]+words).map{|x| x.size}.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48505,"user_id":421,"body":"def longest(words)\n  words.empty? ? 0 : words.max_of(&.size)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48506,"user_id":null,"body":"def longest(words) \n  words.size != 0 ? words.sort_by{|word| word.size}.last.size : 0 \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48507,"user_id":null,"body":"def longest(words)\n  return 0 if words.size == 0\n  words.map { |w| w.size }.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48508,"user_id":1072,"body":"def longest(w) w.reduce(0){|a,b| [a,b.size].max} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5868b2de442e3fb2bb000119":[{"id":48509,"user_id":492,"body":"def closest(strng)\n    if (strng == \"\") \n      return [] of Array(Int32)\n    end\n    nums = strng.split()\n    l = [] of Array(Int32)\n    i = 0\n    while (i < nums.size)\n        n = nums[i]\n        l += [[n.chars.map{|x| x.to_i}.reduce(0){ |sum, x| sum + x }, i, n.to_i]]\n        i += 1\n    end\n    arr = l.sort()\n    t = (1..arr.size-1).map { |i| [arr[i][0]-arr[i-1][0], i] }.min[1]\n    [arr[t - 1], arr[t]]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48510,"user_id":null,"body":"def closest(strng)\n  return [] of Nil if strng.empty?\n  h = strng.split(' ')\n    .map_with_index { |s, i| [s.chars.sum(&.to_i), i, s.to_i] }\n    .sort!\n    .each\n    .cons(2)\n    .group_by { |(a,b)| (a[0] - b[0]).abs }\n  h[h.keys.min][0]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48511,"user_id":null,"body":"def closest(strng)\n  return [] of Nil if strng.empty?\n  h = strng.split(' ')\n    .map_with_index { |s, i| [s.chars.sum(&.to_i), i, s.to_i] }\n    .sort\n    .each\n    .cons(2)\n    .group_by { |(a,b)| (a[0] - b[0]).abs }\n  h[h.keys.min][0]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48512,"user_id":null,"body":"def weight(n)\n  w = 0\n  while n > 0\n    w += n % 10\n    n \/= 10\n  end\n  w\nend\n\ndef closest(strng)\n  return [] of Array(Int32) if strng == \"\"\n  i = -1\n  nums = strng.split(\/\\s+\/).map { | sn |\n    n = sn.to_i\n    [weight(n), i += 1, n]\n  }.sort\n  idx, wd = 0, 0\n  nums[0...-1].each_with_index do | (w, i, n), j |\n    next unless j == 0 || nums[j + 1][0] - w < wd\n    wd = nums[j + 1][0] - w\n    idx = j\n  end\n  nums[idx,2]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48513,"user_id":233,"body":"def closest(strng)\n  strng.split\n    .map_with_index{|a, i|[a.chars.map(&.to_i).reduce(0){|acc, i|acc + i}, i, a.to_i]}\n    .sort\n    .each_cons(2).to_a\n    .min_by?{|a|[a[1][0] - a[0][0]]} || [] of Int32\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5869848f2d52095be20001d1":[{"id":48514,"user_id":null,"body":"def peaceful_yard(yard, min_distance)\n  cats = [] of Tuple(Int32, Int32)\n  yard.each_with_index { |xa, y| xa.chars.each_with_index { |c, x| next unless c.alphanumeric?; cats << {x, y} } }\n  return true if cats.size <= 1\n  cats.permutations.all? { |p| Math.sqrt((p[1][0] - p[0][0]) ** 2 + (p[1][1] - p[0][1]) ** 2) >= min_distance }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48515,"user_id":null,"body":"struct CatPosition\n  property x, y\n  \n  def initialize(@x : Int32, @y : Int32)\n  end\nend\n\ndef peaceful_yard(yard, min_distance)\n  cats_positions = find_cats(yard)\n  cats_positions.each_with_index do |cat1_position, cat1_index|\n    (cat1_index + 1..cats_positions.size - 1).each do |cat2_index|\n      return false unless safe_distance?(cat1_position, cats_positions[cat2_index], min_distance)\n    end\n  end\n  \n  return true\nend\n\ndef safe_distance?(position1, position2, min_safe_distance)\n  distance = measure_distance(position1, position2)\n  \n  return distance >= min_safe_distance\nend\n\ndef find_cats(yard)\n  cats_positions = Array(CatPosition).new\n\n  yard.each_with_index do |yard_row, y|\n    yard_row.chars.each_with_index do |field, x|\n      cats_positions << CatPosition.new(x, y) if field != '-'\n    end\n  end\n  \n  cats_positions\nend\n\ndef measure_distance(position1, position2)\n  ((position1.x - position2.x).abs ** 2 + (position1.y - position2.y).abs ** 2) ** 0.5\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48516,"user_id":1153,"body":"def peaceful_yard(yard, min_distance)\n  cats = [] of Array(Int32)\n  yard.each_with_index do |line, row|\n    0.upto(line.size - 1) do |col|\n      if line[col] != '-'\n        cats.push([row, col])\n      end\n    end\n  end\n\n  0.upto(cats.size - 2) do |i|\n    (i + 1).upto(cats.size - 1) do |j|\n      if Math.hypot(cats[i][0] - cats[j][0], cats[i][1] - cats[j][1]) < min_distance\n        return false\n      end\n    end\n  end\n\n  return true\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"586a1af1c66d18ad81000134":[{"id":48517,"user_id":1624,"body":"MONTHS = {\n  \"Jan\" => 1,\n  \"Feb\" => 2,\n  \"Mar\" => 3,\n  \"Apr\" => 4,\n  \"May\" => 5,\n  \"Jun\" => 6,\n  \"Jul\" => 7,\n  \"Aug\" => 8,\n  \"Sep\" => 9,\n  \"Oct\" => 10,\n  \"Nov\" => 11,\n  \"Dec\" => 12,  \n}\n\ndef driver(data)\n  firstname, midname, surname, dob, gender = data\n  female = (gender == \"F\")\n  day, mon, year = dob.split(\"-\")\n  month = MONTHS[mon[0,3]]\n  month += 50 if female\n  [\n    (surname.upcase + \"99999\")[0,5],\n    year.to_s[2,1],\n    \"%02d\" % month,\n    day,\n    year.to_s[3,1],\n    firstname[0,1],\n    (midname.size > 1) ? midname[0,1] : \"9\",\n    \"9\",\n    \"AA\",\n  ].join\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48518,"user_id":645,"body":"def driver(data)\n  months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n  surname = (data[2].upcase + \"99999\")[0...5]\n  y = data[3][-2]\n  m = (\"00\" + ((months.index(data[3][3..5]) || 0) + 1).to_s)[-2..-1]\n  m = data[4] == \"M\" ? m : (m[0].to_i + 5).to_s + m[1].to_s\n  day = data[3][0...2]\n  yd = data[3][-1].to_s\n  initials = data[0][0].to_s + (data[1].size == 0 ? \"9\" : data[1][0].to_s)\n  return \"#{surname}#{y}#{m}#{day}#{yd}#{initials}9AA\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"586c1cf4b98de0399300001d":[{"id":48519,"user_id":null,"body":"def combat(health, damage)\n  Math.max(0, health - damage)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48520,"user_id":527,"body":"def combat(health, damage)\n  {health - damage, 0}.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48521,"user_id":1566,"body":"def combat(health, damage)\n  [health - damage, 0].max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48522,"user_id":1072,"body":"def combat(h,d) [h-d,0].max end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48523,"user_id":null,"body":"def combat(health, damage)\n  if health - damage > 0\n    health - damage\n  else\n    0\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48524,"user_id":null,"body":"def combat(health, damage)\n  return health > damage ? health - damage : 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48525,"user_id":null,"body":"def combat(health, damage)\n  (health- damage < 0)? 0 : health - damage\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48526,"user_id":null,"body":"enum DamageType\n  Generic\n  Slash\n  Gun\n  Magic\n  Energy\nend\n\nstruct Damage\n  getter value : Int32\n  getter type : DamageType\n\n  def initialize(@value, @type)\n  end\nend\n\nclass Player\n  @health : Int32\n  \n  def health\n    @health\n  end\n  \n  def set_health(new_health : Int32)\n    @health = Math.max(new_health, 0)\n  end\n  \n  def apply_damage(damage : Damage)\n    set_health(@health - damage.value)\n  end\n  \n  def initialize(@health)\n  end\nend\n\ndef combat(health, damage)\n  player = Player.new(health)\n  player.apply_damage(Damage.new(damage, DamageType::Generic))\n  player.health\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48527,"user_id":277,"body":"def combat(health, damage)\n  return damage > health ? 0 : health - damage ;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48528,"user_id":1816,"body":"def combat(health, damage) damage > health ? 0 : health - damage end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"586ec0b8d098206cce001141":[{"id":48529,"user_id":421,"body":"def inverse_slice(items, a, b)\n  arr = items[0...a] \n  arr += items[b..-1] if items.size > b\n  arr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48530,"user_id":1474,"body":"def inverse_slice(items, a, b)\n  ret = items[0...a]\n  b < items.size ? ret + items[b..-1] : ret\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48531,"user_id":1624,"body":"def inverse_slice(items, a, b)\n  items[0,a] + (b > items.size ? items[0,0] : items[b..-1])\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48532,"user_id":1072,"body":"def inverse_slice(arr,a,b) i=-1; arr.select{i+=1; i<a || i>=b} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"586f6741c66d18c22800010a":[{"id":48533,"user_id":1750,"body":"def sequence_sum(b, e, s)\n  (b..e).step(s).sum\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48534,"user_id":null,"body":"def sequence_sum(begin_number, end_number, step)\n  (begin_number..end_number).step(step).sum\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48535,"user_id":1072,"body":"def sequence_sum(b,e,s) a=(e-b)\/s; b<=e ? a*(a+1)\/2*s+b*(a+1) : 0 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48536,"user_id":53,"body":"def sequence_sum(a, b, k)\n  return 0 if a > b\n  n = a\n  while a + k <= b\n    a += k\n    n += a\n  end\n  n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48537,"user_id":null,"body":"def sequence_sum(begin_number, end_number, step)\n  return (begin_number..end_number).step(step).reduce(0) { |acc, i| acc + i}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48538,"user_id":null,"body":"def sequence_sum(begin_number, end_number, step)\n  return 0 if begin_number > end_number\n  \n  res = begin_number\n  added_element = res + step\n  \n  while added_element <= end_number\n    res += added_element\n    added_element += step\n  end\n  \n  return res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48539,"user_id":null,"body":"def sequence_sum(begin_number, end_number, step)\n  sum, k = 0, begin_number\n  while k <= end_number\n    sum += k\n    k += step\n  end\n  sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48540,"user_id":null,"body":"def sequence_sum(s, e, x)\n  (s..e).step(x).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48541,"user_id":null,"body":"def sequence_sum(begin_number, end_number, step)\n  s = 0\n  (begin_number..end_number).step(step) do |i|\n    s += i\n  end\n  s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48542,"user_id":null,"body":"def sequence_sum(b, e, s)\n  b > e ? return 0 : return (b..e).step(s).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58712dfa5c538b6fc7000569":[{"id":48543,"user_id":421,"body":"def count_red_beads(n : Int32) \n  n < 2? 0: (n - 1) * 2\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48544,"user_id":null,"body":"def count_red_beads(n : Int32) : Int32\n  n < 2 ? 0 : (n - 1) * 2\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48545,"user_id":1474,"body":"def count_red_beads(n : Int32) \n  n > 0 ? (n-1) * 2 : 0\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48546,"user_id":527,"body":"def count_red_beads(n : Int32) : Int32\n  (2 * (n - 1)).clamp(0..)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48547,"user_id":527,"body":"def count_red_beads(n : Int32) : Int32\n  {2 * (n - 1), 0}.max\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48548,"user_id":48,"body":"def count_red_beads(n : Int32)\n  n < 1 ? 0 : (n - 1) * 2\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48549,"user_id":168,"body":"def count_red_beads(n : Int32) \n  [2 * (n - 1), 0].max\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48550,"user_id":null,"body":"def count_red_beads(n : Int32) \n  return n < 2 ? 0 :  2 + count_red_beads(n - 1);\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48551,"user_id":53,"body":"def count_red_beads(n : Int32) \n  n < 1 ? 0 : 2 * (n - 1)\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48552,"user_id":null,"body":"def count_red_beads(n : Int32) \n  n < 2 ? 0 : 2 * (n - 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5875b200d520904a04000003":[{"id":48553,"user_id":76,"body":"def enough(cap, on, wait)\n   [0, on + wait - cap].max\nend ","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48554,"user_id":168,"body":"def enough(cap, on, wait)\n  [on + wait - cap, 0].max\nend ","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48555,"user_id":null,"body":"def enough(cap, on, wait)\n  op = cap - on - wait\n  op >= 1 ? 0 : op.abs\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48556,"user_id":null,"body":"def enough(cap, on, wait)\n  if cap >= on + wait\n    0\n  else\n    on + wait - cap\n  end\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48557,"user_id":null,"body":"def enough(cap, on, wait)\n   cap - on - wait >= 0 ? 0 : on + wait - cap\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48558,"user_id":null,"body":"def enough(cap, on, wait)\n   return cap >= on + wait ? 0 : on + wait - cap\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48559,"user_id":null,"body":"def enough(cap, on, wait)\n  return ( on + wait > cap) ? on + wait - cap : 0;\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48560,"user_id":50,"body":"def enough(cap, on, wait)\n  cap-on-wait>0 ? 0 : wait-cap+on\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48561,"user_id":53,"body":"def enough(cap, on, wait)\n  (on + wait > cap) ? on + wait - cap : 0;\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48562,"user_id":48,"body":"def enough(cap, on, wait)\n  extra = on + wait - cap\n  extra > 0 ? extra : 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"587731fda577b3d1b0001196":[{"id":48563,"user_id":null,"body":"def camel_case(str)\n  str.split(\" \").map(&.capitalize).join\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48564,"user_id":null,"body":"class String\n  def camel_case\n    s = \"\"\n    self.split(\" \").each do |x|\n      s += x.camelcase\n    end\n    s\n  end\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48565,"user_id":null,"body":"class String\n  def camel_case\n    strip.gsub(' ', '_').camelcase\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48566,"user_id":null,"body":"class String\n  def camel_case\n     camelcased = split.map do |s|\n      s.capitalize\n    end\n    return camelcased.join(\"\")\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48567,"user_id":null,"body":"class String\n  def camel_case\n    self.titleize.gsub(\" \", \"\")\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48568,"user_id":null,"body":"class String\n  def camel_case\n    self.split.map{|word| word.titleize}.join\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48569,"user_id":null,"body":"class String\n  def camel_case\n    strip.gsub(\/ \/, \"_\").camelcase\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48570,"user_id":null,"body":"class String\n  def camel_case\n    self.capitalize.split(' ').reduce {|acc, curr| acc + curr.capitalize}\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48571,"user_id":null,"body":"class String\n  def camel_case\n    return self.strip(\" \").gsub(\" \", \"_\").camelcase\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48572,"user_id":null,"body":"class String\n  def camel_case \n    if (self == \"\") \n      return \"\" \n    else\n      self.split(\" \").map { |elt| elt.capitalize }.join\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5877786688976801ad000100":[{"id":48573,"user_id":null,"body":"def words_to_object(s)\n  s.split.in_groups_of(2).map{ |g| \"{name : '#{g[0]}', id : '#{g[1]}'}\"}.to_s.gsub(\/\\\"\/, \"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48574,"user_id":null,"body":"def words_to_object(s)\n  return \"[]\" if s == \"\"\n  \"[\" + s.split(\" \")\n         .each_slice(2)\n         .reduce(\"\") do |a,i| \n            a + (a == \"\" ? \"\" : \", \") + \"{name : '#{i[0]}', id : '#{i[1]}'}\"\n         end + \"]\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48575,"user_id":1072,"body":"def words_to_object(s) r=s.split(\" \"); \"[#{(0...(r.size\/2)).map{|i| \"{name : '#{r[i*2]}', id : '#{r[i*2+1]}'}\"}.join(\", \")}]\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5878520d52628a092f0002d0":[{"id":48576,"user_id":421,"body":"def string_transformer(str : String)\n  str.split(\" \").reverse().map{|x| x.gsub(\/.\/){|y| \/[A-Z]\/ === y ? y.downcase : y.upcase}}.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48577,"user_id":50,"body":"def string_transformer(str)\n  str.split(\/( +)\/).map{|w| swapcase(w)}.reverse.join\nend\ndef swapcase(s)\n  s.chars.map{|c| c==c.downcase ? c.upcase : c.downcase}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48578,"user_id":null,"body":"def string_transformer(str : String)\n  str.split(\" \").map(&.tr(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")).reverse.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48579,"user_id":null,"body":"def string_transformer(str : String)\n  final_str = [] of Char\n  str.split(\" \").reverse.join(\" \").each_char { |x| \n    x.lowercase? ? final_str << x.upcase : final_str << x.downcase\n  }\n  final_str.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48580,"user_id":1624,"body":"def flip_case(s)\n  s.gsub(\/[a-z]\/i){|x| (x[0].ord ^ 32).chr }\nend\n  \ndef string_transformer(str : String)\n  flip_case(str).split(\" \").reverse.join(\" \")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48581,"user_id":null,"body":"def string_transformer(str : String)\n  str.chars.map{|c| c.lowercase? ? c.upcase : c.downcase }.join.split(\" \").reverse.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48582,"user_id":645,"body":"def string_transformer(str : String)\n  str.split(\"\").map do |x|\n    x.upcase == x ? x.downcase : x.upcase\n  end.join.split(\" \").reverse.join \" \"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5879f95892074d769f000272":[{"id":48583,"user_id":492,"body":"GRAVITY_ACC = 9.81 * 3.6 * 60.0                   \nDRAG = 60.0 * 0.3 \/ 3.6                           \nDELTA_T = 1.0\/60.0                                \nD_WATTS = 0.5                                     \nG_THRUST = 60 * 3.6 * 3.6                         \nMASS = 80                                         \nWATTS0 = 225   \ndef temps(v0, slope, d_tot)   \n    t = 0.0          \n    d = 0.0         \n    v = v0           \n    gamma = 0.0      \n    watts = WATTS0   \n    slopeGravityAcc = -GRAVITY_ACC * Math.sin(Math.atan(slope \/ 100.0))\n    while (d <= d_tot)\n        t += DELTA_T   \n        watts -= D_WATTS * DELTA_T  \n        gamma = slopeGravityAcc - DRAG * v.abs * v.abs \/ MASS \n        if ((watts > 0.0) && (v > 0.0))\n            gamma += G_THRUST * watts \/ (v * MASS)\n        end   \n        if (gamma.abs <= 1e-5)\n            gamma = 0.0\n        else\n            v += gamma * DELTA_T\n        end  \n        d +=  v  * DELTA_T \/ 60.0  \n        if (v - 3.0 <= 1e-2)  \n            return -1\n        end\n    end \n    t.round\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48584,"user_id":492,"body":"GRAVITY_ACC = 9.81 * 3.6 * 60.0                   \nDRAG = 60.0 * 0.3 \/ 3.6                           \nDELTA_T = 1.0\/60.0                                \nD_WATTS = 0.5                                     \nG_THRUST = 60 * 3.6 * 3.6                         \nMASS = 80                                         \nWATTS0 = 225   \ndef temps(v0, slope, d_tot)   \n    t = 0.0          \n    d = 0.0         \n    v = v0           \n    gamma = 0.0      \n    watts = WATTS0   \n    slopeGravityAcc = -GRAVITY_ACC * Math.sin(Math.atan(slope \/ 100.0))\n    while (d <= d_tot)\n        t += DELTA_T   \n        watts -= D_WATTS * DELTA_T  \n        gamma = slopeGravityAcc - DRAG * v.abs * v.abs \/ MASS \n        if ((watts > 0.0) && (v > 0.0))\n            gamma += G_THRUST * watts \/ (v * MASS)\n        end   \n        if (gamma.abs <= 1e-5)\n            gamma = 0.0\n        else\n            v += gamma * DELTA_T\n        end  \n        d +=  v  * DELTA_T \/ 60.0  \n        if (v - 3.0 <= 1e-2)  \n            return -1\n        end\n    end \n    t.round\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"587a88a208236efe8500008b":[{"id":48585,"user_id":421,"body":"def sequence_sum(begin_number, end_number, step)\n  n = (end_number- begin_number) \/\/ step + 1\n  n <= 0 ? 0 : (begin_number * 2 + step * (n - 1)) * n \/\/ 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48586,"user_id":50,"body":"def sequence_sum(a, b, c)\n  n=((b-a)\/c).floor+1\n  return n<0?0:(n*(2*a+(n-1)*c)\/2).floor\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48587,"user_id":1072,"body":"def sequence_sum(b,e,s) : Int64\n  a=(e-b)\/\/s;\n  (e-b)*s>=0 ? a*(a+1)\/\/2*s+b*(a+1) : 0_i64\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48588,"user_id":53,"body":"def sequence_sum(b, e, s)\n    n = ((e.to_f64 - b.to_f64) \/ s.to_f64).floor + 1\n    return 0 if (n <= 0)\n    return (2 * b.to_f64 + s.to_f64 * (n.to_f64 - 1)) * n.to_f64 \/ 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48589,"user_id":527,"body":"def sequence_sum(from, to, step) : Int64\n  from, to, step = from.to_i64, to.to_i64, step.to_i64\n  n = (to - from) \/ step + 1\n  n <= 0 ? 0_i64 : (from * 2 + step * (n - 1)) * n \/ 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48590,"user_id":492,"body":"def sequence_sum(b, e, s)\n    b = b.to_i64\n    s = s.to_i64\n    e = e.to_i64\n    n = (e - b) \/ s + 1\n    puts(n)\n    if (n <= 0)  \n      0 \n    else \n      (2_i64 * b + s * (n - 1)) * n \/ 2_i64\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"587ae98e2ab0ef32ef00004c":[{"id":48591,"user_id":null,"body":"def count_robots(input : Array(String)) : Array(String)\n  legs = \"[a-z]\"\n  body = \"[|{};&#\\\\[\\\\]\/><()*]{2}\"\n  re_robot = \/#{legs}#{body}0#{body}0#{body}#{legs}\/i\n  robot_counter = ->(line : String) { line.scan(re_robot).size }\n  \n  a_count, m_count = 0,0\n  \n  input.each do | line |\n    a_count += robot_counter.call(line) if \/automatik\/ =~ line;\n    m_count += robot_counter.call(line) if \/mechanik\/ =~ line;\n  end\n  \n  [\"#{a_count} robots functioning automatik\", \"#{m_count} robots dancing mechanik\"]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48592,"user_id":2201,"body":"def count_robots(a)\n  auto_cnt = 0  \n  mech_cnt = 0\n  a.each do |i|\n    count = i.scan(\/[a-z][|};&#\\[\\]\\\/><()*]{2}0[|};&#\\[\\]\\\/><()*]{2}0[|};&#\\[\\]\\\/><()*]{2}[a-z]\/mi).size\n    if i =~ \/automatik\/\n      auto_cnt += count\n    elsif i =~ \/mechanik\/\n      mech_cnt += count\n    end\n  end\n  [auto_cnt.to_s+\" robots functioning automatik\",mech_cnt.to_s+\" robots dancing mechanik\"]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48593,"user_id":2201,"body":"def count_robots(a)\n  auto_cnt = 0  \n  mech_cnt = 0\n  a.each do |i|\n    count = i.scan(\/[a-z][|};&#\\[\\]\\\/><()*]{2}0[|};&#\\[\\]\\\/><()*]{2}0[|};&#\\[\\]\\\/><()*]{2}[a-z]\/mi).size\n    if i =~ \/automatik\/\n      auto_cnt += count\n    elsif i =~ \/mechanik\/\n      mech_cnt += count\n    end\n  end\n  [auto_cnt.to_s+\" robots functioning automatik\",mech_cnt.to_s+\" robots dancing mechanik\"]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"587f0abdd8730aafd4000035":[{"id":48594,"user_id":null,"body":"require \"openssl\"\n\ndef sha256Crack(hash, characters)\n  characters.\n  \tchars.\n    permutations.\n    map(&.join).\n  \tfind{|s| OpenSSL::Digest.new(\"sha256\").update(s).hexdigest == hash}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48595,"user_id":null,"body":"require \"openssl\"\n\ndef sha256Crack(hash, characters)\n  characters.chars.permutations(characters.size).map(&.join).each { |i| return i if OpenSSL::Digest.new(\"SHA256\").update(i).hexdigest == hash }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48596,"user_id":null,"body":"require \"openssl\"\n\ndef sha256Crack(hash, characters)\n  result = nil\n  h = OpenSSL::Digest.new(\"sha256\")\n  characters.chars.permutations.each do |perm|\n    word = perm.join\n    h.reset\n    h.update(word)\n    if h.hexdigest == hash\n      result = word\n      break\n    end\n  end\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48597,"user_id":527,"body":"require \"openssl\"\n\ndef sha256Crack(hash : String, characters : String) : String?\n  d = OpenSSL::Digest.new(\"SHA256\")\n  characters.chars.each_permutation(reuse: true).map(&.join).find do |p|\n    d.reset().update(p).hexdigest == hash\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48598,"user_id":527,"body":"require \"openssl\"\n\ndef sha256Crack(hash, characters)\n  characters.chars.each_permutation.map(&.join).find do |p|\n    OpenSSL::Digest.new(\"SHA256\").update(p).hexdigest == hash\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48599,"user_id":17,"body":"require \"openssl.cr\"\nrequire \"openssl\/digest\/digest_base.cr\"\nrequire \"openssl\/digest\/digest.cr\"\n\ndef sha256Crack(h, s)\n  s.split(\"\").permutations.map { |a| a.join(\"\") }.each do |msg|\n    msg_hash = OpenSSL::Digest.new(\"sha256\")\n    msg_hash.update(msg)\n    return msg if msg_hash.hexdigest == h\n  end\n  nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"588417e576933b0ec9000045":[{"id":48600,"user_id":null,"body":"def seats_in_theater(tot_cols, tot_rows, col, row)\n  return (tot_cols - col + 1) * (tot_rows - row)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48601,"user_id":1703,"body":"def seats_in_theater(nCols, nRows, col, row)\n  return (nCols - col + 1) * (nRows - row)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48602,"user_id":492,"body":"def seats_in_theater(nCols, nRows, col, row)\n  (nCols-col+1) * (nRows - row)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48603,"user_id":null,"body":"def seats_in_theater(tot_cols, tot_rows, col, row)\n  ((tot_cols+1) - col) * (tot_rows - row);\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48604,"user_id":null,"body":"def seats_in_theater(tot_cols, tot_rows, col, row)\n  width = tot_cols - col + 1\n  height = tot_rows - row\n  area = width * height\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48605,"user_id":null,"body":"def seats_in_theater(tot_cols, tot_rows, col, row)\n  return (tot_rows - row) * (tot_cols - col + 1);\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48606,"user_id":null,"body":"def seats_in_theater(tot_cols, tot_rows, col, row)\n  (tot_cols - (col - 1)) * (tot_rows - row)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48607,"user_id":1768,"body":"def seats_in_theater(w, x, y ,z)\n  (w-y+1)*(x-z)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48608,"user_id":null,"body":"def seats_in_theater(tot_cols, tot_rows, col, row)\n  return (tot_rows-row)*((tot_cols+1)-col)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48609,"user_id":1750,"body":"def seats_in_theater(tot_cols, tot_rows, col, row)\n  (tot_rows - row) * (tot_cols - col + 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58841cb52a077503c4000015":[{"id":48610,"user_id":null,"body":"def circle_of_numbers(n, fst)\n  sum = (n \/ 2) + fst\n\tif sum < n \n\t\treturn sum\n\tend\n\tsum = (n \/ 2) - fst\n\treturn sum.abs\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48611,"user_id":null,"body":"def circle_of_numbers(n, fst)\n  (fst + n \/\/ 2) % n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48612,"user_id":1474,"body":"def circle_of_numbers(n, fst)\n  t = n \/ 2\n  t > fst ? t + fst : fst - t\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48613,"user_id":null,"body":"def circle_of_numbers(n, fst)\n  return (fst + n\/2)%n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48614,"user_id":2563,"body":"def circle_of_numbers(n, fst)\n  ((n \/ 2) + fst) % n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48615,"user_id":1566,"body":"def circle_of_numbers(n, fst)\n  (fst + n \/ 2) % n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48616,"user_id":1828,"body":"def circle_of_numbers(n, fst)\n  fst < n\/2 ? n\/2 + fst : fst - n\/2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48617,"user_id":1072,"body":"def circle_of_numbers(n,f) (f+n\/2)%n end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"588422ba4e8efb583d00007d":[{"id":48618,"user_id":1624,"body":"def late_ride(n)\n  n.divmod(60).join.chars.map(&.to_i).sum\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48619,"user_id":492,"body":"def late_ride(n)\n  return (n\/600).to_i + (n\/60).to_i%10 + (n%60\/10).to_i + n%10\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48620,"user_id":222,"body":"def late_ride(n)\n    h=n\/\/60\n    m=n%60\n    sum=0\n    while(h>0)\n        sum+=h%10\n        h\/\/=10\n    end\n    while(m>0)\n        sum+=m%10\n        m\/\/=10\n    end\n    sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48621,"user_id":1474,"body":"def late_ride(n)\n  hr, min = n.divmod(60)\n  [hr, min].join.chars.reduce(0) { |s, c| s + c.to_i }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48622,"user_id":1768,"body":"def late_ride(n)\n    ((n\/60).to_i.to_s+(n%60).to_s).chars.map{|i|i.to_i}.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48623,"user_id":421,"body":"def late_ride(n)\n  \"#{n \/ 60}#{n % 60}\".chars.sum{|x| x.to_i}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48624,"user_id":null,"body":"def late_ride(n)\n  s = n % 10\n  n \/= 10\n  s += n % 6\n  n \/= 6\n  s += n % 10\n  s + (n % 24) \/ 10\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48625,"user_id":645,"body":"def late_ride(n)\n  Time.epoch(n * 60).to_s(\"%R\").delete(\":\").chars.map(&.to_i).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48626,"user_id":1828,"body":"def late_ride(n)\n  h = n\/60; m = n-60*h\n  \"#{h}#{m}\".chars.map(&.to_i).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48627,"user_id":1246,"body":"def late_ride(n)\n  total = 0\n  (mins = n%60).to_s.chars.each{|x|total += x.to_i}\n  ((n-mins)\/60).to_s.chars.each{|x| total += x.to_i }\n  total\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"588425ee4e8efb583d000088":[{"id":48628,"user_id":421,"body":"def phone_call(min1, min2_10, min11, s)\n if s < min1\n    return 0\n  end\n  s -= min1\n  t = 1\n  c = 0\n  while s >= min2_10\n      s -= min2_10\n      t += 1\n      c += 1\n      if c > 8\n        break\n      end\n  end\n  t + (c != 9 ? 0 : s \/\/ min11)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48629,"user_id":222,"body":"def phone_call(min1, min2_10, min11, s)\n  return 0 if s < min1\n  s -= min1\n  return s \/\/ min2_10 + 1 if s < min2_10 * 9\n  s -= min2_10 * 9\n  s \/\/ min11 + 10\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48630,"user_id":645,"body":"def phone_call(min1, min2_10, min11, s)\n  mins = 0\n  used = 0\n  left = s\n  current_money_incrementer = min1\n  while used < s && (left - current_money_incrementer) >= 0\n    mins += 1\n    current_money_incrementer = min2_10 if mins >= 2 && mins <= 10\n    current_money_incrementer = min11 if mins > 10\n    used += current_money_incrementer\n    left -= current_money_incrementer\n  end\n  mins\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48631,"user_id":1828,"body":"def phone_call(min1, min2_10, min11, s)\n  return 0 if s < min1\n  o = 1*min1\n  return 1 if s-o <= 0\n  t, m = 9*min2_10, (s-o)\/min2_10\n  m < 9 ? 1+m : 10+(s-o-t)\/min11\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58842a2b4e8efb92b7000080":[{"id":48632,"user_id":421,"body":"def knapsack_light(value1,weight1,value2,weight2,max_w)\n  if weight1 + weight2 <= max_w\n      return value1 + value2\n   elsif weight1 <= max_w && weight2 <= max_w\n     return [value1, value2].max\n   elsif weight1 > max_w && weight2 > max_w\n     return 0\n   elsif weight1 <= max_w && weight2 >= max_w\n     return value1\n   else\n     return value2\n   end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48633,"user_id":1624,"body":"def knapsack_light(v1,w1,v2,w2,max_w)\n  [{0,0}, {v1,w1}, {v2,w2}, {v1+v2,w1+w2}]\n    .select{|(v,w)| w <= max_w}\n    .map(&.first)\n    .max\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48634,"user_id":1828,"body":"def knapsack_light(v1,w1,v2,w2,mw)\n  return 0 if w1 > mw && w2 > mw\n  return w1 + w2 > mw ? [v1,v2].max : [v1,v2].sum if w1 <= mw && w2 <= mw\n  w1 <= mw && w2 >= mw ? v1 : v2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48635,"user_id":222,"body":"def knapsack_light(v1, w1, v2, w2, maxw)\n  w1+w2 <= maxw ? v1+v2 : (w1<=maxw && w2<=maxw) ? [v1,v2].max : w1<=maxw ? v1 : w2<=maxw ? v2 : 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"588431bb76933b84520000d3":[{"id":48636,"user_id":76,"body":"def is_infinite_process(a, b)\n  a > b || (b - a) % 2 > 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48637,"user_id":50,"body":"def is_infinite_process(a, b)\n  (a-b)%2==1 || b<a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48638,"user_id":421,"body":"def is_infinite_process(a, b)\n   (a - b).abs.odd? || a > b\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48639,"user_id":1624,"body":"def is_infinite_process(a, b)\n  a > b || (a-b).odd?\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48640,"user_id":1246,"body":"def is_infinite_process(a, b)\n  a > b || (a%2 != b%2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48641,"user_id":222,"body":"def is_infinite_process(a, b)\n  a>b || (b-a)%2==1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48642,"user_id":222,"body":"def is_infinite_process(a, b)\n  a>b || (b-a)%2==1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58844a13aa037ff143000072":[{"id":48643,"user_id":1624,"body":"def will_you(young, beautiful, loved)\n  (young && beautiful) != loved\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48644,"user_id":421,"body":"def will_you(young, beautiful, loved)\n  young && beautiful && !loved || loved && (!young || !beautiful)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48645,"user_id":1246,"body":"def will_you(young, beautiful, loved)\n  !(loved ? young && beautiful : !young || !beautiful)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48646,"user_id":527,"body":"def will_you(young : Bool, beautiful : Bool, loved : Bool) : Bool\n  (young && beautiful) != loved\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48647,"user_id":1072,"body":"def will_you(y,b,l) !((y && b)==l) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58844f1a76933b1cd0000023":[{"id":48648,"user_id":null,"body":"def kill_kth_bit(n, k)\n  if k == 1\n    n - n % 2\n  else\n    2 * kill_kth_bit(n \/\/ 2, k - 1) + n % 2\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48649,"user_id":421,"body":"def kill_kth_bit(n, k)\n  n = n.to_s(2).rjust(32, '0')\n  (n[0...n.size - k] + '0' + n[n.size - k + 1..-1]).to_i(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48650,"user_id":222,"body":"def kill_kth_bit(n, k)\n  n & ~(1 << k - 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48651,"user_id":222,"body":"def kill_kth_bit(n, k)\n  n & ~(1 << k - 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"588453ea56daa4af920000ca":[{"id":48652,"user_id":1624,"body":"def array_packing(arr)\n  u = arr.reverse.reduce(0_i64){|a,b| a*256+b}\n  if u > 2147483647_i64\n    u -= 2_i64**32\n  end\n  u\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48653,"user_id":527,"body":"def array_packing(arr)\n  arr.reverse_each.reduce(0_u32) { |a, b| a << 8 | b }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48654,"user_id":1072,"body":"def array_packing(arr) i=0; arr.reduce(){|a,b| i+=1; a+(b<<i*8)} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58845748bd5733f1b300001f":[{"id":48655,"user_id":645,"body":"def range_bit_count(a, b)\n  (a..b).sum(&.popcount)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48656,"user_id":421,"body":"def range_bit_count(a, b)\n  (a..b).map{|x| x.to_s(2)}.join.count('1')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48657,"user_id":1624,"body":"def range_bit_count(a, b)\n  (a..b).map(&.popcount).sum\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48658,"user_id":1828,"body":"def range_bit_count(a, b)\n  (a..b).to_a.map(&.to_s(2)).map{|i|i.count(\"1\")}.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48659,"user_id":222,"body":"def range_bit_count(a, b)\n  rs=0\n  while a<=b\n    rs+=(a.to_s(2).scan(\/1\/).size)\n    a+=1\n  end\n  return rs\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5884b6550785f7c58f000047":[{"id":48660,"user_id":421,"body":"def group(arr)\n  arr.group_by(&.itself).values\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48661,"user_id":null,"body":"def group(arr)\n  arr.group_by{ |n| n }.values\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48662,"user_id":null,"body":"def group(arr)\n    arr.empty? ? arr : (0...arr.size).map_with_index { |_, i| ret_arr(arr[i], arr.count { |el| el == arr[i] } ) }.uniq!\nend\n\ndef ret_arr(el, count)\n    (0...count).map { el }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48663,"user_id":null,"body":"def group(arr)\n  arr.uniq.map { |e| [e] * arr.count(e) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48664,"user_id":null,"body":"def group(arr)\n  # The test cases are incorrect\n  # Empty arrays should be [] of Int32, but the tests ask for [] of Array(Int32)\n  arr = arr.as?(Array(Int32))\n  return [] of Array(Int32) if !arr || arr.empty?\n  hash = Hash(Int32, Int32).new\n  arr.each{|i|\n    hash[i] = 0 if !hash.has_key? i\n    hash[i] += 1\n  }\n  hash.map{|num, times| Array.new(times, num) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48665,"user_id":233,"body":"def group(arr)\n  puts arr\n  return [] of Int32 if arr.size == 0\n  left, right = arr.partition{|e|e == arr.first}\n  [left] + group(right)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48666,"user_id":1072,"body":"def group(arr) arr.uniq.map{|a| [a]*arr.count(a)} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58856a06760b85c4e6000055":[{"id":48667,"user_id":53,"body":"def bits_battle(numbers)\n  m = 0\n  numbers.each{|n|\n    next if n == 0\n    m += count(n, n%2) if n%2==1\n    m -= count(n, n%2) if n%2==0\n  }\n  m == 0 ? \"tie\" \n    : m > 0 ? \"odds win\"\n    : \"evens win\"\nend\n\ndef count(n, d)\n  m = 0\n  while n != 0\n    m += 1 if n%2==d\n    n >>= 1\n  end\n  m\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48668,"user_id":421,"body":"def bits_battle(numbers)\n  odd = numbers.select(&.odd?).map{|x| x.to_s(2)}.join.count('1')\n  even = numbers.select{|x| x.even? && x != 0}.map{|x| x.to_s(2)}.join.count('0')\n  odd > even ? \"odds win\" : even > odd ? \"evens win\" : \"tie\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48669,"user_id":1624,"body":"def bits_battle(numbers)\n  odd = numbers.select(&.odd?).map{|n| n.to_s(2) }.join.count(\"1\")\n  even = numbers.select(&.even?).reject(&.zero?).map{|n| n.to_s(2) }.join.count(\"0\")\n  if odd > even\n    \"odds win\"\n  elsif odd == even\n    \"tie\"\n  else\n    \"evens win\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48670,"user_id":1474,"body":"def bits_battle(numbers)\n  od, ev = 0, 0\n  numbers.each do |i|\n    next if i == 0\n    s = i.to_s(2)\n    i.odd? ? (od += s.count('1')) : (ev += s.count('0'))\n  end\n  od > ev ? \"odds win\" : ev > od ? \"evens win\" : \"tie\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48671,"user_id":50,"body":"def bits_battle(numbers)\n  n=numbers.map{|x| x== 0 ? 0 : x&1==1 ? x.to_s(2).count(\"1\") : -x.to_s(2).count(\"0\")}.sum\n  n == 0 ? \"tie\" : n<0 ? \"evens win\" : \"odds win\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48672,"user_id":527,"body":"def bits_battle(numbers)\n  o = numbers.each.select(&.odd?).sum(&.popcount)\n  e = numbers.each.select(&.even?).sum{ |x| (~x).popcount - x.leading_zeros_count }\n  case o <=> e\n    when .>(0) then \"odds win\"\n    when .<(0) then \"evens win\"\n    else \"tie\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48673,"user_id":1072,"body":"def bits_battle(n) s=n.reduce(0){|a,b| a+(b==0 ? 0 : b%2==1 ? b.to_s(2).count(\"1\") : -b.to_s(2).count(\"0\"))}; s>0 ? \"odds win\" : s<0 ? \"evens win\" : \"tie\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58865bfb41e04464240000b0":[{"id":48674,"user_id":421,"body":"def bits_war(numbers)\n  odds = numbers.select{|x| x.abs.odd?}.map{|x| x.abs.to_s(2).count(\"1\") * (x < 0 ? -1 : 1)}.sum\n  evens = numbers.select{|x| x.abs.even?}.map{|x| x.abs.to_s(2).count(\"1\") * (x < 0 ? -1 : 1)}.sum\n  odds == evens ? \"tie\" : \"#{odds > evens ? \"odd\" : \"even\"}s win\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48675,"user_id":492,"body":"def countBits(n)\n  n.to_s(2).count \"1\"\nend\ndef bits_war(arr)\n    odds = 0; evens = 0\n    arr.each do |n|\n        bitCount = countBits(n.abs)\n        if (n % 2 != 0)\n            odds += n < 0 ? -bitCount : bitCount;\n        else\n            evens += n < 0 ? -bitCount : bitCount;\n        end\n    end\n    if (odds > evens)\n        return \"odds win\"\n    end\n    if (evens > odds)\n        return \"evens win\"\n    end\n    return \"tie\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48676,"user_id":50,"body":"def sign(n)\n  n == 0 ? 0 : n > 0 ? 1 : -1\nend\ndef bits_war(numbers)\n  res=numbers.map{|x| sign(x)*x.to_s(2).count(\"1\") * (x.odd? ? 1 : -1)}.sum\n  res == 0 ? \"tie\" : res < 0 ? \"evens win\" : \"odds win\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48677,"user_id":53,"body":"def bits_war(numbers)\n  m = 0\n  numbers.each{|n|\n    next if n == 0\n    if (n > 0) ^ (n % 2 != 0)\n      m -= count(n)\n    else\n      m += count(n)\n    end\n  }\n  m == 0 ? \"tie\" \n    : m > 0 ? \"odds win\"\n    : \"evens win\"\nend\n\ndef count(n)\n  m = 0\n  n = -n if n < 0\n  while n != 0\n    m += 1 if n%2!=0\n    n >>= 1\n  end\n  m\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48678,"user_id":527,"body":"def bits_war(numbers)\n  o = numbers.each.select(&.odd?).sum{ |x| x.sign * x.abs.popcount }\n  e = numbers.each.select(&.even?).sum{ |x| x.sign * x.abs.popcount }\n  case o <=> e\n    when .>(0) then \"odds win\"\n    when .<(0) then \"evens win\"\n    else \"tie\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48679,"user_id":1228,"body":"def bits_war(numbers)\n  evens = numbers.select{|a| a%2==0}.sum {|n| n.to_s(2).count('1') * (n<0 ? -1 : 1) }\n\todds  = numbers.select{|a| a%2!=0}.sum {|n| n.to_s(2).count('1') * (n<0 ? -1 : 1) }\n\treturn (evens == odds ? \"tie\" : evens > odds ? \"evens win\" : \"odds win\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48680,"user_id":1072,"body":"def bits_war(n) s=n.reduce(0){|a,b| a+b.to_s(2).count(\"1\")*(-1)**(b%2)*(b<0 ? -1 : 1)}; s>0 ? \"evens win\" : s<0 ? \"odds win\" : \"tie\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5886faac54a7111c21000072":[{"id":48681,"user_id":421,"body":"def is_mac_48_address(address)\n   \/\\A([\\dA-F]{2}-){6}\\z\/i === address + '-'\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48682,"user_id":1566,"body":"def is_mac_48_address(address)\n  \/([\\dA-F]{2}-){6}$\/i === address+'-'\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48683,"user_id":null,"body":"def is_mac_48_address(address)\n  address =~ \/^[0-9A-F]{2}(?:-[0-9A-F]{2}){5}$\/i != nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48684,"user_id":1072,"body":"def is_mac_48_address(add) (add=~\/^([0-9a-f]{2}-){5}[0-9a-f]{2}$\/i)==0 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58870742c815166a960000af":[{"id":48685,"user_id":421,"body":"def is_substitution_cipher(s1, s2)\n  s2.tr(s2, s1) == s1 && s1.tr(s1, s2) == s2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48686,"user_id":527,"body":"def is_substitution_cipher(s1, s2)\n  n1 = s1.each_char.uniq.size\n  n2 = s2.each_char.uniq.size\n  np = s1.each_char.zip(s2.each_char).uniq.size\n  n1 == n2 && n2 == np\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48687,"user_id":1072,"body":"def is_substitution_cipher(s1, s2, r={s1[0]=>s2[0]}, q={s2[0]=>s1[0]}) s1==\"\" || ((!r[s1[0]]? || r[s1[0]]==s2[0]) && (!q[s2[0]]? || q[s2[0]]==s1[0])) && (s1==\"\" || is_substitution_cipher(s1.size>1 ? s1[1,10] : \"\", s2.size>1 ? s2[1,10] : \"\", r.merge({s1[0]=>s2[0]}), q.merge({s2[0]=>s1[0]}))) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5887a6fe0cfe64850800161c":[{"id":48688,"user_id":421,"body":"def area_largest_square(r)\n  r ** 2 * 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48689,"user_id":527,"body":"def area_largest_square(r)\n  2 * r**2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48690,"user_id":50,"body":"def area_largest_square(r)\n  2*r*r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58881b859ab1e053240000cc":[{"id":48691,"user_id":421,"body":"def elections_winners(votes, k)\n  a = votes.max\n  votes.count(a) == 1 && k.zero? ? 1 : votes.count{|x| x + k > a}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48692,"user_id":1624,"body":"def elections_winners(votes, k)\n  max = votes.max\n  if k == 0\n    if votes.count(max) == 1\n      1\n    else\n      0\n    end\n  else\n    votes.count{|u| u + k > max}\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48693,"user_id":1768,"body":"def elections_winners(x, y)\n    c = 0\n    x.each do |i|\n      c += x.map{|j| i + y > j}.all? ? 1 : 0\n    end\n    y == 0 ? x.count(x.max) == 1 ? 1 : 0 : c\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48694,"user_id":2563,"body":"def elections_winners(votes, k)\n  winners = 0\n  votes.each_with_index {|wv, wi|\n    others = votes.map_with_index {|ov, oi| oi == wi ? nil : ov}.compact\n    winners += 1 if others.all? { |ov| ov < wv + k }\n  }\n  winners\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48695,"user_id":1072,"body":"def elections_winners(v,k) max=v.max; c=v.count(max); k==0 ? (c != 1 ? 0 : c) : v.select{|a| a>max-k}.size end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5888445107a0d57711000032":[{"id":48696,"user_id":421,"body":"def new_numeral_system(number)\n  lst = [] of String\n  letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  (0..(letters.index(number) || 0) \/ 2).each do |i|\n    lst << \"#{letters[i]} + #{letters[(letters.index(number) || 0) - i]}\"\n  end\n  lst\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48697,"user_id":1624,"body":"def new_numeral_system(n)\n  nums = (\"A\"..n.to_s).to_a\n  nums.zip(nums.reverse).map{|x| x.join(\" + \")}.uniq{|x| x.chars.sort}\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48698,"user_id":null,"body":"def new_numeral_system(number)\n  d = (number.is_a? Char)? number: number[0]\n  (0..(d-'A')\/2).map{|i| \"#{'A'+i} + #{d-i}\"}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48699,"user_id":2563,"body":"def new_numeral_system(number)\n  n = number.is_a?(String) ? number[0] : number\n  top = 'A' + ((n - 'A') \/ 2)\n  ('A'..top).reduce([] of String) { |ac, item|\n    ac.push(\"#{item} + #{'A' + (n - item)}\")\n  }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48700,"user_id":1828,"body":"def new_numeral_system(n)\n  b = (\"A\"..\"Z\").to_a\n  a = b.map_with_index{|i,j|[i,j]}.to_h\n  c = a[n.to_s]\n  (0..c.to_i\/2).map{|l| \"#{b[l]} + #{b[c.to_i-l]}\"}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48701,"user_id":1072,"body":"def new_numeral_system(n) alpha=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; (0..((alpha.index(n) || 0) \/ 2)).map{|i| \"#{alpha[i]} + #{alpha[(alpha.index(n) || 0)-i]}\"} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58885a7bf06a3d466e0000e3":[{"id":48702,"user_id":1072,"body":"def pair_of_shoes(s) res={} of Int32 => Int32;s.each{|b| res[b[1]]=0};s.each{|b| res[b[1]]=res[b[1]]+(b[0]==1 ? 1 : -1)}; res.keys.all?{|a| res[a]==0} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5889177bf148eddd150002cc":[{"id":48703,"user_id":421,"body":"def tiy_fizz_buzz(string)\n   string.split(\"\").map{|x| \/[B-DF-HJ-NP-TV-Z]\/ === x ? \"Iron\" : \/[AEIOU]\/ === x ? \"Iron Yard\" : \/[aeiou]\/ === x ? \"Yard\" : x}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48704,"user_id":null,"body":"def tiy_fizz_buzz(str : String) : String\n   str.gsub(\/.\/) { |c| \/[AEIOU]\/ =~ c ? \"Iron Yard\" : \/[aeiou]\/ =~ c ? \"Yard\" : \/[A-Z]\/ =~ c ? \"Iron\" : c }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48705,"user_id":1624,"body":"def tiy_fizz_buzz(string)\n  string.split(\"\").map{|c|\n    case c\n    when \/[AEOUI]\/\n      \"Iron Yard\"\n    when \/[aeoui]\/\n      \"Yard\"\n    when \/[A-Z]\/\n      \"Iron\"\n    else\n      c\n    end\n  }.join\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48706,"user_id":1072,"body":"def tiy_fizz_buzz(s) s.split(\"\").map{|a| a=~\/[BCDFGHJKLMNPQRSTVXWYZ]\/ ? \"Iron\" : a=~\/[AEIOU]\/ ? \"Iron Yard\" : a=~\/[aeiou]\/ ? \"Yard\" : a}.join end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5889ab4928c08c08da00009b":[{"id":48707,"user_id":421,"body":"def crossing_sum(matrix, row, col)\n   (0...matrix.size).sum{|x| matrix[x][col]} + matrix[row].sum - matrix[row][col]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48708,"user_id":1624,"body":"def crossing_sum(m, x, y)\n  m[x].sum + m.transpose[y].sum - m[x][y]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48709,"user_id":1828,"body":"def crossing_sum(matrix, row, col)\n  matrix[row].sum + matrix.transpose[col].sum - matrix[row][col]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48710,"user_id":527,"body":"def crossing_sum(matrix, row, col)\n  matrix[row].sum + matrix.map(&.[](col)).sum - matrix[row][col]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48711,"user_id":1072,"body":"def crossing_sum(m, r, c) m[r].reduce(0){|a,b| a+b}+(0...m.size).reduce(0){|a,i| a+(i==r ? 0 : m[i][c])} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"588e0f11b7b4a5b373000041":[{"id":48712,"user_id":2609,"body":"def lowest_temp(t)\n  t.split.map(&.to_i).min?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48713,"user_id":null,"body":"def lowest_temp(t)\n  t.split.map(&.to_i?).compact.min?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48714,"user_id":168,"body":"def lowest_temp(t)\n  t.split.map(&.to_i).min rescue nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48715,"user_id":1624,"body":"def lowest_temp(t)\n  return if t.empty?\n  t.split.map(&.to_i).min\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48716,"user_id":null,"body":"def lowest_temp(t)\n    if t == \"\"\n      return nil\n    end\n    list = t.split(' ').map{|n| n.to_i}.min\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48717,"user_id":1750,"body":"def lowest_temp(t)\n  t.empty? ? nil : t.split.map(&.to_i).min\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48718,"user_id":null,"body":"def lowest_temp(t)\n  t.blank? ? nil : t.split.map { |i| i.to_i } .min\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48719,"user_id":1072,"body":"def lowest_temp(t) t.size>0 ? t.split(\" \").map{|a| a.to_i}.min : nil end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"588f3e0dfa74475a2600002a":[{"id":48720,"user_id":1072,"body":"def possibilities(s) (\/\\?\/=~s) ? possibilities(s.sub(\"?\",\"0\"))+possibilities(s.sub(\"?\",\"1\")) : [s] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48721,"user_id":53,"body":"def possibilities(s)\n  return [s] if ! s.includes?(\"?\")\n  possibilities(s.sub(\"?\",\"0\")) + possibilities(s.sub(\"?\",\"1\"))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48722,"user_id":421,"body":"def possibilities(string)\n  return [string] if !string.includes?(\"?\")\n  lst = [] of String\n  undone = [] of String\n  if \/\\?\/ === string \n    undone << string\n  end\n  while !undone.empty?\n    s = undone.pop()\n    (0..1).each do |i|\n      st = s.sub(\/\\?\/, i.to_s)\n      if \/\\?\/ === st\n        undone << st\n      else\n        lst << st\n      end\n    end\n  end\n  lst\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48723,"user_id":50,"body":"def possibilities(s)\n  c=s.count('?')\n  a=[s]\n  (0..c-1).each do\n    tmp=[] of String\n    a.each do |e|\n      tmp.push(e.sub(\/\\?\/,'1'))\n      tmp.push(e.sub(\/\\?\/,'0'))\n    end\n    a=tmp\n  end\n  a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48724,"user_id":null,"body":"def possibilities(string)\n  idx = string.index('?')\n  return [string] unless idx\n  possibilities(string.sub idx, '0') + possibilities(string.sub idx, '1')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48725,"user_id":null,"body":"def possibilities(string)\n  r = [] of String\n  n = string.count('?')\n  (2**n).times{|i|r.push sprintf(string.gsub('?',\"%d\"), i.to_s(2).rjust(n,'0').split(\/\/))}\n  r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48726,"user_id":null,"body":"def possibilities( string ) \n  poss = possibilities_chars(string.chars)\n  poss.map { |pos| pos.join(\"\") }\nend\n\ndef possibilities_chars(chars) : Array(Array(Char))\n  idx = chars.index('?')\n  # puts \"chars=#{chars} idx=#{idx}\"\n  \n  if idx.nil?\n    [ chars ]\n  else\n    i = idx.not_nil!\n    pos_rec = possibilities_chars( chars[(i+1)...chars.size] )\n    \n    h0 = pos_rec.map { |pos| chars[0...i] + ['0'] + pos }\n    h1 = pos_rec.map { |pos| chars[0...i] + ['1'] + pos } \n    h0 + h1\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48727,"user_id":null,"body":"def possibilities(string)\n  string\n  .chars\n  .map { |c|\n    case c\n    when '?'\n      [\"0\", \"1\"]\n    else \n      [c.to_s]\n    end\n  }\n  .reduce { |base,new|\n    base.flat_map { |b|\n      new.flat_map { |n|\n        [b + n]\n      }\n    }\n  }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48728,"user_id":null,"body":"def possibilities(string)\n  return [ string ] unless string =~ \/\\?\/\n  pre, post = $~.pre_match, $~.post_match\n  [0, 1].flat_map do | dig |\n    possibilities(post).map { | pp | \"#{pre}#{dig}#{pp}\" }\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48729,"user_id":759,"body":"def possibilities(string : String) : Array(String)\n  return [] of String if string.empty?\n  return [\"0\", \"1\"] if string == '?'\n  c = string.count('?')\n  return [string] if c == 0\n  a, b = string.sub('?', '0'), string.sub('?', '1')\n  return [a, b] if c == 1\n  possibilities(a) + possibilities(b)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58902f676f4873338700011f":[{"id":48730,"user_id":null,"body":"def sum_str(str : String) : Int\n  str.chars.map(&.to_i).sum\nend\n\ndef is_lucky(ticket : String) : Bool\n  ticket =~ \/^\\d{6}$\/ ? sum_str(ticket[0...3]) === sum_str(ticket[3...6]): false;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48731,"user_id":421,"body":"def is_lucky(ticket)\n   \/^\\d{6}$\/ === ticket && ticket[0..2].chars.sum{|x| x.to_i} == ticket[-3..-1].chars.sum{|x| x.to_i}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48732,"user_id":1624,"body":"def is_lucky(ticket)\n  return false unless ticket =~ \/\\A(\\d{3})(?:.*)(\\d{3})\\z\/\n  $1.chars.map(&.to_i).sum == $2.chars.map(&.to_i).sum\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48733,"user_id":null,"body":"def is_lucky(ticket)\n  return false if ticket !~ \/^\\d{6}$\/\n  digits = ticket.chars.map(&.to_i)\n  digits[0..2].sum == digits[3..5].sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48734,"user_id":2609,"body":"def is_lucky(s)\n  s.size == 6 ?  s[0..2].chars.map(&.to_i).sum == s[3..6].chars.map(&.to_i).sum : false\nrescue\n  false\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48735,"user_id":1750,"body":"def is_lucky(ticket)\n  return false if ticket.size < 6  \n  ticket.chars.first(3).map(&.to_i).sum == ticket.chars.last(3).map(&.to_i).sum rescue false\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48736,"user_id":null,"body":"def is_lucky(ticket) # Should be named lucky?\n  ticket = ticket.chars.map(&.to_i?).compact\n  ticket.size == 6 && ticket[0..2].sum == ticket[3..-1].sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48737,"user_id":1246,"body":"def is_lucky(ticket)\n  return false if ticket.size < 6 || !(\/^[0-9]+$\/ =~ ticket)\n  return ticket[-3..-1].chars.map{|x|x.to_i}.sum == ticket[0..2].chars.map{|x|x.to_i}.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48738,"user_id":1072,"body":"def is_lucky(t) (t=~\/^\\d{6}$\/)!=nil && t[0...3].split(\"\").map{|a| a.to_i}.reduce(0){|a,b| a+b}==t[3...t.size].split(\"\").map{|a| a.to_i}.reduce(0){|a,b| a+b} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"589273272fab865136000108":[{"id":48739,"user_id":421,"body":"def black_or_white_key(key_press_count)\n  [1, 4, 6, 9, 11].includes?((key_press_count - 1) % 88 % 12) ? \"black\" : \"white\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48740,"user_id":53,"body":"def black_or_white_key(n)\n  # top solution JS translated to Crystal\n  w, b = \"white\", \"black\"\n  keyboard = [w, b, w, w, b, w, b, w, w, b, w, b]\n  keyboard[(n - 1) % 88 % 12]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48741,"user_id":50,"body":"def black_or_white_key(k)\n  c = [\"white\", \"black\", \"white\", \"white\", \"black\", \"white\", \"black\", \"white\", \"white\", \"black\", \"white\", \"black\"]\n  k%=88\n  c[((k==0 ? 88 : k)-1)%12]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48742,"user_id":null,"body":"def black_or_white_key(key_press_count)\n  keys = [1,0,1] + [1,0,1,0,1,1,0,1,0,1,0,1] * 7 + [1]\n  key = keys[(key_press_count % keys.size) - 1]\n  key == 0 ? \"black\" : \"white\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48743,"user_id":null,"body":"class Black\n  @@black = Set{1, 4, 6, 9 ,11}\n  \n  def self.black\n    @@black\n  end\nend\n\ndef black_or_white_key(key_press_count)\n  if Black.black.includes?((key_press_count - 1) % 88 % 12)\n      return \"black\"\n  else\n      return \"white\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48744,"user_id":null,"body":"\n\ndef black_or_white_key(key_press_count)\n  black = Set{1, 4, 6, 9 ,11}\n  if black.includes?((key_press_count - 1) % 88 % 12)\n      return \"black\"\n  else\n      return \"white\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48745,"user_id":2055,"body":"def black_or_white_key(key_press_count)\n  \"wbwwbwbwwbwb\"[(key_press_count-1)%88%12] == 'w' ? \"white\" : \"black\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48746,"user_id":null,"body":"def black_or_white_key(key_press_count)\n  Set{1,4,6,9,11}.includes?(((key_press_count-1) % 88) % 12) ? \"black\" : \"white\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48747,"user_id":null,"body":"def black_or_white_key(key_press_count)\n  if [1,4,6,9,11].includes?(((key_press_count-1) % 88) % 12)\n    \"black\"\n  else\n    \"white\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48748,"user_id":null,"body":"def black_or_white_key(key_press_count)\n  note =((key_press_count-1)%88+1)%12\n  note==0 || note==2 || note==5 || note==7 || note==10? \"black\": \"white\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5894134c8afa3618c9000146":[{"id":48749,"user_id":17,"body":"def chessboard_cell_color(r, s)\n  ((r[0].ord - s[0].ord).abs + (r[1].ord - s[1].ord).abs) % 2 == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48750,"user_id":1624,"body":"def chessboard_cell_color(c1,c2)\n  (c1+c2).chars.map(&.ord).sum.even?\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48751,"user_id":null,"body":"def chessboard_cell_color(cell1, cell2)\n  l1 = cell1[0].bytes()[0]-1\n  l2 = cell2[0].bytes()[0]-1\n  n1 = cell1[1].bytes()[0]+0\n  n2 = cell2[1].bytes()[0]+0\n\n  if ((l1+n1)%2) == ((l2+n2)%2)\n    return true\n  else\n    return false\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48752,"user_id":null,"body":"def chessboard_cell_color(cell1, cell2)\n  (cell1 + cell2).chars.sum(&.ord).even?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48753,"user_id":null,"body":"def chessboard_cell_color(cell1, cell2)\n  (cell1 + cell2).chars.sum(&.ord) % 2 == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48754,"user_id":76,"body":"def chessboard_cell_color(cell1, cell2)\n  (cell1[0] - cell1[1]) % 2 == (cell2[0] - cell2[1]) % 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48755,"user_id":421,"body":"def chessboard_cell_color(cell1, cell2)\n  (cell1[1].to_i + cell2[1].to_i) % 2 == (cell1[0].ord + cell2[0].ord) % 2 \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48756,"user_id":null,"body":"def chessboard_cell_color(c1, c2)\n  (c1[0] - 'A' + (c1[1].to_i - 1) * 9) % 2 == (c2[0] - 'A' + (c2[1].to_i - 1) * 9) % 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48757,"user_id":null,"body":"def chessboard_cell_color(cell1, cell2)\n  abc = \"_ABCDEFGH\"\n  check = ->(cell : String) {\n    c0 = abc.index(cell[0]).not_nil!\n    c1 = cell[1].not_nil!.to_i\n    (c0.odd? && c1.odd?) || (c0.even? && c1.even?) ? \"black\" : \"white\"\n  }\n  return true if check.call(cell1) == \"black\" && check.call(cell2) == \"black\"\n  return true if check.call(cell1) == \"white\" && check.call(cell2) == \"white\"\n  return false\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48758,"user_id":1072,"body":"def is_black(c) (c[0].ord+c[1].to_i)%2 end;\ndef chessboard_cell_color(c1, c2) is_black(c1)==is_black(c2) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58941fec8afa3618c9000184":[{"id":48759,"user_id":53,"body":"def growing_plant(u, d, m)\n  Math.max(1, ((m - d) \/ (u - d)).ceil)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48760,"user_id":421,"body":"def growing_plant(upSpeed, downSpeed, desiredHeight)\n    initial = upSpeed\n    count = 1\n    while initial < desiredHeight\n        initial += upSpeed\n        initial -= downSpeed\n        count += 1\n    end\n    count\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48761,"user_id":50,"body":"def growing_plant(upSpeed, downSpeed, desiredHeight)\n  desiredHeight<=upSpeed ? 1 : 1+growing_plant(upSpeed, downSpeed, desiredHeight- upSpeed +downSpeed)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48762,"user_id":1474,"body":"def growing_plant(ups, downs, dh)\n  i = 0\n  tmp = 0\n  loop do\n    tmp += ups\n    i += 1\n    return i if tmp >= dh\n    tmp -= downs\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48763,"user_id":492,"body":"def growing_plant(upSpeed, downSpeed, desiredHeight)\n    i = 1; h = 0\n    while true\n        h += upSpeed\n        if (h >= desiredHeight)\n            return i\n        end\n        h -= downSpeed\n        i += 1\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48764,"user_id":null,"body":"def growing_plant(upSpeed, downSpeed, desiredHeight)\n  days = 0\n  height = 0\n  loop do\n    height += upSpeed\n    days += 1\n    if height >= desiredHeight\n      return days\n    end\n    height -= downSpeed\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48765,"user_id":1624,"body":"def growing_plant(u, d, h)\n  c = 0\n  while h >= 0\n    c += 1\n    h -= u\n    break if h <= 0\n    h += d  \n  end\n  c\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48766,"user_id":645,"body":"def growing_plant(up, down, h)\n  [1, ((h - down) \/ (up - down).to_f).ceil].max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48767,"user_id":null,"body":"def growing_plant(upSpeed, downSpeed, desiredHeight)\n  i = sum = 0\n  while sum <= desiredHeight\n    i += 1\n    sum += upSpeed\n    break if sum >= desiredHeight\n    sum -= downSpeed\n  end\n  i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48768,"user_id":null,"body":"def growing_plant(upSpeed, downSpeed, desiredHeight)\n  #your code here\n  if upSpeed >= 5 && upSpeed <= 100 && downSpeed >= 2 && downSpeed <= upSpeed && desiredHeight >= 4 && desiredHeight <= 1000\n    height = 0\n    counter = 1\n    while true\n      height += upSpeed\n      if height < desiredHeight \n        height -= downSpeed\n        counter += 1\n      else\n        break\n      end\n    end\n  end\n  counter\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"589519d1f0902e01af000054":[{"id":48769,"user_id":421,"body":"def perimeter_sequence(a, n)\n  a * n * 4\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48770,"user_id":128,"body":"def perimeter_sequence(a, n)\n    return 4*n*a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48771,"user_id":1703,"body":"def perimeter_sequence(a, n)\n  return a * n * 4\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48772,"user_id":50,"body":"def perimeter_sequence(a, n)\n  4 * a * n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"589573e3f0902e8919000109":[{"id":48773,"user_id":527,"body":"def shuffled_array(xs)\n  xs = xs.to_a\n  xs.delete_at(xs.index(xs.sum \/\/ 2).not_nil!)\n  xs.sort!\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48774,"user_id":1624,"body":"def shuffled_array(ary)\n  e = ary.sum.tdiv(2)\n  ary = ary.sort\n  ary.delete_at(ary.index(e)||0)\n  ary\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48775,"user_id":645,"body":"def shuffled_array(a)\n  a.tap { |x| x.delete_at(x.index(x.sum \/ 2).not_nil!) }.sort\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48776,"user_id":1768,"body":"def shuffled_array(s)\n  s.sort!\n  (0...s.size).each do |i|\n    return s[0...i] + s[i+1..-1] if (s[0...i] + s[i+1..-1]).sum == s[i]\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48777,"user_id":1828,"body":"def shuffled_array(shuffled)\n  a = shuffled.sum\/2\n  shuffled.select{|i| i == a}[1..-1].concat(shuffled.select{|i| i != a}).sort\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48778,"user_id":1072,"body":"def shuffled_array(s) t=s.reduce(0){|a,b| a+b} \/ 2; i=s.index(t) || 0; ((s[0,i] || [] of Int32)+(s[i+1,s.size] || [] of Int32)).sort end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"589631d24a7323d18d00016f":[{"id":48779,"user_id":421,"body":"def which_note(key_press_count)\n  letter = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]\n  letter[(key_press_count - 1) % 88 % 12]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48780,"user_id":168,"body":"def which_note(k)\n  [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"][(k - 1) % 88 % 12]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48781,"user_id":53,"body":"def which_note(n)\n  [\"A\",\"A#\",\"B\",\"C\",\"C#\",\"D\",\"D#\",\"E\",\"F\",\"F#\",\"G\",\"G#\"][(n - 1) % 88 % 12]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48782,"user_id":2055,"body":"def which_note(key_press_count)\n  %w[A A# B C C# D D# E F F# G G#][(key_press_count-1)%88%12]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48783,"user_id":null,"body":"def which_note(key_press_count)\n  note = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]\n  key = ((key_press_count % 88 == 0 ? 88 : key_press_count % 88) % 12) - 1\n  note[key]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48784,"user_id":null,"body":"def which_note(key_press_count)\n  note = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]\n  key = ((key_press_count % 88 == 0 ? 88 : key_press_count % 88) % note.size) - 1\n  note[key]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48785,"user_id":527,"body":"NOTES = %w(A A# B C C# D D# E F F# G G#)\nNUMBER_OF_KEYS = 88\n\ndef which_note(key_press_count)\n  return NOTES[(key_press_count - 1) % NUMBER_OF_KEYS % NOTES.size]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48786,"user_id":527,"body":"NOTES = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]\nNUMBER_OF_KEYS = 88\n\ndef which_note(key_press_count)\n  return NOTES[(key_press_count - 1) % NUMBER_OF_KEYS % NOTES.size]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48787,"user_id":null,"body":"KEYS = %w{A A# B C C# D D# E F F# G G#}\n\ndef which_note(key_press_count)\n  k = (key_press_count - 1) % 88\n  KEYS[k % 12]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48788,"user_id":1246,"body":"def which_note(key_press_count)\n  %w(A A# B C C# D D# E F F# G G#)[(key_press_count-1)%88%12]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5896616336c4bad1c50000d7":[{"id":48789,"user_id":53,"body":"def annulus_area(r)\n  (Math::PI * r * r \/ 4.0).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48790,"user_id":421,"body":"def annulus_area(r)\n  (Math::PI * (0.5 * r) ** 2).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48791,"user_id":null,"body":"def annulus_area(a)\n  # As the result does not depend on the inner diameter,\n  # we can assume it is 0 and a is the outer diameter.\n  (Math::PI \/ 4 * a**2).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48792,"user_id":50,"body":"def annulus_area(r)\n  (0.7853981633974483*r**2).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48793,"user_id":492,"body":"def annulus_area(r)\n  ((Math::PI * r ** 2) \/ 4).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48794,"user_id":1624,"body":"def annulus_area(r)\n  (Math::PI * r * r * 0.25).round(2)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48795,"user_id":1566,"body":"def annulus_area(r)\n  (Math::PI * r * r \/ 4).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48796,"user_id":1072,"body":"def annulus_area(r) (r*r*0.785398163397448).round(2) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58983deb128a54b530000be6":[{"id":48797,"user_id":421,"body":"DICT = {')' => '(', ']' => '[', '}' => '{'}\n\ndef braces_status(s)\n  stack = [] of Char\n  s.chars.each do |x|\n    if x == '(' || x == '[' || x == '{'\n      stack << x\n    end\n    if x == ')' || x == ']' || x == '}'\n      return false if stack.empty?\n      cmp = stack.pop()\n      return false if  DICT[x] != cmp\n    end\n  end\n  stack.empty?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48798,"user_id":168,"body":"def braces_status(s)\n  s.each_char.with_object([] of Char) do |x, s|\n    case x\n      when '(' then s << ')'\n      when '[' then s << ']'\n      when '{' then s << '}'\n      else\n        if \"])}\".includes?(x) && (s.empty? || s.pop != x); return false end\n    end\n    puts(s)\n  end.empty?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48799,"user_id":1072,"body":"def braces_status(s) n=s.gsub(\/[^\\{\\}\\[\\](\\)]\/,\"\").gsub(\/(\\(\\))|(\\[\\])|(\\{\\})\/,\"\"); n.inspect != s.inspect ? braces_status(n) : n==\"\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5898761a9c700939ee000011":[{"id":48800,"user_id":53,"body":"def corner_circle(r)\n  (r * 17.15728753).round() \/ 100\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48801,"user_id":50,"body":"def corner_circle(r)\n    (r*(3-2**1.5)).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48802,"user_id":421,"body":"def corner_circle(r)\n  (r * 0.17157287525380996).round(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5898b4b71d298e51b600014b":[{"id":48803,"user_id":421,"body":"def sort_the_inner_content(words)\n  words.split.map{|x| x.size < 4 ? x : x[0] + x[1...-1].chars.sort().reverse().join + x[-1]}.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48804,"user_id":53,"body":"def sort_the_inner_content(words)\n  words.split(\" \").map {|w| \n      if w.size < 3\n        w\n      else\n        w[0] + w[1..w.size-2].chars.sort{|a,b| b <=> a}.join(\"\") + w[w.size-1]    \n      end\n      }.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48805,"user_id":527,"body":"def sort_the_inner_content(words : String) : String\n  words.gsub(\/\\S\\K\\S+(?=\\S)\/, &.chars.sort!.reverse!.join)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48806,"user_id":527,"body":"def sort_the_inner_content(words)\n  words.gsub(\/(?<=\\S)\\S+(?=\\S)\/, &.chars.sort.reverse.join)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48807,"user_id":1072,"body":"def sort_the_inner_content(w) w.split(\" \").map{|e| e.size<4 ? e : e[0]+e[1,e.size-2].split(\"\").sort.reverse.join+e[-1]}.join(\" \") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5899aa695401a83a5c0000c4":[{"id":48808,"user_id":421,"body":"def square_area_to_circle(size)\n   Math::PI * (Math.sqrt(size) \/ 2) ** 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48809,"user_id":1566,"body":"def square_area_to_circle(size)\n  Math::PI  * size \/ 4\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48810,"user_id":713,"body":"def square_area_to_circle(size)\n  3.14159265358979323846 * size \/ 4\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48811,"user_id":null,"body":"def square_area_to_circle(size : Number): Number\n  Math::PI * size \/ 4\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48812,"user_id":50,"body":"def square_area_to_circle(d)\n  d*3.141592653589793\/4\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48813,"user_id":2563,"body":"def square_area_to_circle(size)\n  Math::PI * size \/ 4.0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48814,"user_id":2563,"body":"def square_area_to_circle(size)\n  (Math::PI * ((Math.sqrt(size.to_f) \/ 2) ** 2)).round(12)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48815,"user_id":1072,"body":"def square_area_to_circle(s) s*Math::PI\/4.0 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48816,"user_id":1072,"body":"def square_area_to_circle(s) s*Math::PI\/4.0 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5899dc03bc95b1bf1b0000ad":[{"id":48817,"user_id":527,"body":"def invert(list)\n  list.map(&.-)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48818,"user_id":1474,"body":"def invert(list)\n\tlist.map{ |i| -i }\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48819,"user_id":null,"body":"def invert(list)\n  list.map {|el| el * -1}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48820,"user_id":53,"body":"def invert(list)\n  return list.map { |i| -i }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48821,"user_id":null,"body":"def invert(list)\n  list.map! { |i| -i }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48822,"user_id":null,"body":"def invert(list)\n  list.map {|n| n < 0 ? n.abs : n * -1}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48823,"user_id":null,"body":"def invert(list)\n  i = 0\n  while i < list.size\n    list[i] *= -1\n    i += 1\n  end\n  list\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48824,"user_id":564,"body":"def invert(list) list.map {|n| -n} end\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48825,"user_id":null,"body":"def invert(list)\n  list.map{ |i|\n    if i > 0\n      i - (i * 2)\n    else\n      i + (i * -2)\n    end\n  }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48826,"user_id":null,"body":"def invert(list)\n  list.size.times do |i| list[i] = -list[i] end\n  list\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5899e054aa1498da6b0000cc":[{"id":48827,"user_id":1624,"body":"def reverse_invert(array)\n  array\n    .map{|i|\n      if i.is_a?(Int32)\n        i.abs.to_s.reverse.to_i * i.sign\n      end\n    }.compact\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48828,"user_id":1072,"body":"def reverse_invert(arr) arr.select{|a| typeof(a)==Int32}.map{|a| a=a.to_i; (a>0 ? -1 : 1)*a.abs.to_s.split(\"\").reverse.join.to_i} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5899f1df27926b7d000000eb":[{"id":48829,"user_id":1828,"body":"def tower_of_hanoi(rings)\n  2_i64**rings-1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48830,"user_id":527,"body":"def tower_of_hanoi(rings)\n  (1_u64 << rings) - 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48831,"user_id":800,"body":"def tower_of_hanoi(n)\n  base = 2u64\n  return base ** n - 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48832,"user_id":421,"body":"def tower_of_hanoi(rings)\n  2_i64 ** rings - 1_i64\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48833,"user_id":76,"body":"def tower_of_hanoi(rings)\n  (2.to_i64! ** rings) - 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48834,"user_id":1624,"body":"def tower_of_hanoi(rings)\n  2_u64 ** rings - 1\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48835,"user_id":null,"body":"def tower_of_hanoi(rings)\n  (2_i64 ** rings.to_i64) - 1_i64\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48836,"user_id":1072,"body":"def tower_of_hanoi(r) (1.to_i64<<r)-1 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"589a9792ea93aae1bf00001c":[{"id":48837,"user_id":1624,"body":"def is_thue_morse(seq)\n  ref = [0]\n  while ref.size < seq.size\n    ref += ref.map{|x| 1-x}\n  end\n  ref[0, seq.size] == seq\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48838,"user_id":50,"body":"L=[0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0]\ndef is_thue_morse(seq)\n  seq == L[0..seq.size-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48839,"user_id":421,"body":"def is_thue_morse(seq)\n  str = \"01101001\"\n  while str.size <  seq.size\n    str += str.tr(\"01\", \"10\")\n  end\n  str.starts_with?(seq.join)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48840,"user_id":1828,"body":"def is_thue_morse(t)\n  return false if t == [1]\n  return true if t == [0]\n  (0...t.size\/2).to_a.map{ |n| t[2*n] == t[n] && t[2*n+1] == 1 - t[n]}.reduce(){|a,b| a&b}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48841,"user_id":null,"body":"def is_thue_morse(seq)\n  s, seq_str = \"0\", seq.map(&.to_s).join\n  build_thue_morse(s, seq_str).starts_with?(seq_str)\nend\n\ndef build_thue_morse(str, seq_str)\n  until str.size >= seq_str.size\n    str += str.tr(\"01\", \"10\")\n  end\n  str\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48842,"user_id":null,"body":"def is_thue_morse(seq)\n  s = \"0\"\n  seq_str = seq.map(&.to_s).join\n#   thue_morse = build_thue_morse(s, seq_str)\n#   thue_morse.starts_with?(seq_str)\n  build_thue_morse(s, seq_str).starts_with?(seq_str)\nend\n\ndef build_thue_morse(str, seq_str)\n  until str.size >= seq_str.size\n    str += str.tr(\"01\", \"10\")\n  end\n  str\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48843,"user_id":1072,"body":"def is_thue_morse(seq) seq.join(\"\")==\"0110100110010110100101100110100110010110011010010110100110010110100101100110100101101001100101100110100110010110100101100110100110010110011010010110100110010110011010011001011010010110011010010110100110010110100101100110100110010110011010010110100110010110100101100110100101101001100101100110100110010110100101100110100101101001100101101001011001101001100101100110100101101001100101100110100110010110100101100110100110010110011010010110100110010110100101100110100101101001100101100110100110010110100101100110100110010110011010010110100110010110011010011001011010010110011010010110100110010110100101100110100110010110011010010110100110010110011010011001011010010110011010011001011001101001011010011001011010010110011010010110100110010110011010011001011010010110011010010110100110010110100101100110100110010110011010010110100110010110100101100110100101101001100101100110100110010110100101100110100110010110011010010110100110010110011010011001011010010110011010010110100110010110100101100110100110010110011010010110100110010110\"[0,seq.size] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"589b30ddcf7d024850000089":[{"id":48844,"user_id":421,"body":"def jumble(string)\n  string.gsub(\/(?<=\\w)\\w*(?=\\w)\/, &.reverse)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48845,"user_id":2563,"body":"def jumble(s)\n  s.gsub(\/[a-zA-Z]+\/) { |w|\n    w.size <= 2 ? w : w[0] + w[1..-2].chars.shuffle.join + w[-1]\n  }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48846,"user_id":1828,"body":"def jumble(string)\n  string.gsub(\/(\\w+)\/){$1.size == 1 ? $1.to_s : $1[0].to_s+$1[1..-2].chars.shuffle.join.to_s+$1[-1].to_s}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48847,"user_id":1072,"body":"def jumble(s) s.gsub(\/(\\w)(\\w)(\\w*)(\\w)\/, \"\\\\1\\\\3\\\\2\\\\4\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48848,"user_id":1072,"body":"def jumble(s) s.gsub(\/(\\w)(\\w)(\\w*)(\\w)\/, \"\\\\1\\\\3\\\\2\\\\4\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58a08e622e7fb654a300000e":[{"id":48849,"user_id":421,"body":"def sort_grades(lst)\n  lst.sort_by { |grade| grade == \"VB\" ? -1 : grade == \"V0+\" ? 0.5 : grade[1..-1].to_i }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48850,"user_id":null,"body":"def sort_grades(lst)\n  lst.sort_by {|s|\n    case s\n      when \"VB\"; -2\n      when \"V0\"; -1\n      when \"V0+\"; 0\n      else; s[1..].to_i\n    end  \n  }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48851,"user_id":1624,"body":"def sort_grades(a)\n  a.sort_by{|x|\n    [\"VB\", \"V0\", \"V0+\"].index(x) || 3 + x[1..-1].to_i\n  }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48852,"user_id":492,"body":"def sort_grades(arr) \n  g = [\"VB\",\"V0\",\"V0+\",\"V1\",\"V2\",\"V3\",\"V4\",\"V5\",\"V6\",\"V7\",\"V8\",\"V9\",\"V10\",\"V11\",\"V12\",\"V13\",\"V14\",\"V15\",\"V16\",\"V17\"]\n  arr.sort_by{ |e| g.index(e) || 0 } \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48853,"user_id":1072,"body":"def sort_grades(arr) arr.sort_by{|e| [\"VB\",\"V0\",\"V0+\",\"V1\",\"V2\",\"V3\",\"V4\",\"V5\",\"V6\",\"V7\",\"V8\",\"V9\",\"V10\",\"V11\",\"V12\",\"V13\",\"V14\",\"V15\",\"V16\",\"V17\"].index(e)||0} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58a2a561f749ed763c00000b":[{"id":48854,"user_id":421,"body":"def cowboys_dollars(boots)\n  arr = boots.map{|x| x.split(\"\n\").select{|y| \/\\|\\[\\(1\\)\\]\\|\/ === y}.size}\n  \"This Rhinestone Cowboy has #{arr[1]} dollar bills in his right boot and #{arr[0]} in the left\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48855,"user_id":168,"body":"def cowboys_dollars(boots)\n  left, right = boots.map { |b| b.split(\"&\")[0].scan(\"[(1)]\").size }\n  \"This Rhinestone Cowboy has #{right} dollar bills in his right boot and #{left} in the left\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48856,"user_id":null,"body":"def cowboys_dollars(boots : Array(String)): String  \n  count_bills = ->(boot : String) { boot.split('&')[0].scan(\/\\[\\(1\\)\\]\/).size }\n  \"This Rhinestone Cowboy has #{count_bills.call(boots[1])} dollar bills in his right boot and #{count_bills.call(boots[0])} in the left\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48857,"user_id":76,"body":"def cowboys_dollars(boots)\n  left, right = boots.map{|b| b.scan(\"|[(1)]|\n\").size}\n  \"This Rhinestone Cowboy has #{right} dollar bills in his right boot and #{left} in the left\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48858,"user_id":null,"body":"def cowboys_dollars(boots)\n  cts = boots.map do | b |\n    b.split(\/\\&\\|\/).first.scan(\/\\[\\(1\\)\\]\/).size\n  end\n  \"This Rhinestone Cowboy has #{cts[1]} dollar bills in his right boot and #{cts[0]} in the left\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48859,"user_id":null,"body":"def cowboys_dollars(boots)\n  boots.map! {|boot| boot[0, boot.index('&').not_nil!]}\n  lc = boots[0].count('1') - boots[0].gsub(\"[(1)]\", \"\").count('1')\n  rc = boots[1].count('1') - boots[1].gsub(\"[(1)]\", \"\").count('1')\n  \"This Rhinestone Cowboy has #{rc} dollar bills in his right boot and #{lc} in the left\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48860,"user_id":1072,"body":"def cowboys_dollars(boots) b=boots.map{|b| b.gsub(\/&.*\/m,\"\").scan(\/\\[\\(1\\)\\]\/).size}; \"This Rhinestone Cowboy has #{b[1]} dollar bills in his right boot and #{b[0]} in the left\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58a369fa5b3daf464200006c":[{"id":48861,"user_id":421,"body":"def get_percentage(sent, limit = 1000)\n  sent >= limit ? \"Daily limit is reached\": sent.zero? ? \"No e-mails sent\": \"#{sent * 100 \/ limit}%\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48862,"user_id":1624,"body":"def get_percentage(sent, limit=1000)\n  if sent == 0\n    \"No e-mails sent\"\n  elsif sent >= limit\n    \"Daily limit is reached\"\n  else\n    \"#{100 * sent \/ limit}%\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48863,"user_id":null,"body":"def get_percentage(sent, limit=1000)\n  if sent==0; \"No e-mails sent\"\n  elsif sent>=limit; \"Daily limit is reached\"\n  else \"%d%%\" % (100*sent\/limit)\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48864,"user_id":2609,"body":"def get_percentage(sent, limit=1000)\n  if sent >= limit\n    \"Daily limit is reached\"\n  elsif sent == 0\n    \"No e-mails sent\"\n  else\n    \"#{(sent.to_f \/ limit * 100).to_i}%\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48865,"user_id":1072,"body":"def get_percentage(s, l=1000) s==0 ? \"No e-mails sent\" : s>=l ? \"Daily limit is reached\" : \"#{100*s\/l}%\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58a664bb586e986c940001d5":[{"id":48866,"user_id":1072,"body":"def missing_alphabets(s) m=\"abcdefghijklmnopqrstuvwxyz\".split(\"\").map{|l| s.count(l)}.max; \"abcdefghijklmnopqrstuvwxyz\".split(\"\").map{|l| l*(m-s.count(l))}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48867,"user_id":2323,"body":"def missing_alphabets(s)\n  alph = ('a'..'z').to_a * s.chars.reduce(Hash(Char, Int32).new 0) { |h, c| h[c] += 1; h }.values.max\n  s.chars.each { |c| i = alph.rindex(c); alph.delete_at(i) if i }\n  alph.sort.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48868,"user_id":null,"body":"def missing_alphabets(s)\n  sets_count = s.chars.max_of{ |l| s.count(l) }\n  ('a'..'z').reduce(\"\") { |m, l| m += l.to_s * (sets_count - s.count(l)) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48869,"user_id":759,"body":"def missing_alphabets(s)\n  h = Hash(Char, Int32).new\n  ('a'..'z').each { |x| h[x] = 0 }\n  s.chars.each { |x| h[x] += 1 }\n  m = h.values.max\n  r = \"\"\n  h.each { |x, y| r += x.to_s * (m - y) }\n  r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48870,"user_id":null,"body":"def missing_alphabets(s)\n  char_counts = Hash(Char, Int32).new\n  ('a'..'z').each do |c|\n    char_counts[c] = s.count(c)\n  end\n  max_count = char_counts.values.max\n  String.build do |str|\n    char_counts.each do |c, count|\n      (max_count - count).times do\n        str << c\n      end\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58aa7f18821a769a7d000190":[{"id":48871,"user_id":421,"body":"def table_game(table)\n  table.all?{|(x, y, z)| x + z == y} && table.map_with_index{|x, i| table.transpose[i]}.all?{|(x, y, z)| x + z == y} ? [table[0][0], table[0][-1], table[-1][0], table[-1][-1]] : [-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48872,"user_id":2563,"body":"def table_game(t)\n  i = [t[0][0], t[0][2], t[2][0], t[2][2]]\n  \n  if t[0][1] == i[0] + i[1] &&\n     t[1][0] == i[0] + i[2] &&\n     t[1][1] == i[0] + i[1] + i[2] + i[3] &&\n     t[1][2] == i[1] + i[3] &&\n     t[2][1] == i[2] + i[3] \n    i\n  else\n    [-1]\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48873,"user_id":null,"body":"def table_game(table)\n  a = table.map{|i| i.sum.fdiv(2)}\n  b = table.transpose.map{|i| i.sum.fdiv(2)}\n  a[0]+a[-1] == a[1] && b[0]+b[-1] == b[1] ? [table[0][0],table[0][-1],table[-1][0],table[-1][-1]] : [-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48874,"user_id":1246,"body":"def table_game(table)\n  tl,tr,bl,br = [table[0][0],table[0][2],table[2][0],table[2][2]]\n  valid = table[0][1] == tl+tr && table[1][1] == tl+tr+bl+br && \n          table[1][0] == tl+bl && table[1][2] == tr+br &&\n          table[2][1] == br+bl\n  valid ? [tl,tr,bl,br] : [-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48875,"user_id":1072,"body":"def table_game(t) res=[t[0][0],t[0][2],t[2][0],t[2][2]]; res.reduce(0){|a,b| a+b}==t[1][1] && (t[1][0]+t[1][2])==t[1][1] && (t[0][1]+t[2][1])==t[1][1] ? res : [-1] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58aa8368ae929ea2e00000d9":[{"id":48876,"user_id":35,"body":"def nth_chandos_number(n)\n(n.to_s(2)+\"0\").to_i(5)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48877,"user_id":50,"body":"def nth_chandos_number(n)\n  [5, 25, 30, 125, 130, 150, 155, 625, 630, 650, 655, 750, 755, 775, 780, 3125, 3130, 3150, 3155, 3250, 3255, 3275, 3280, 3750, 3755, 3775, 3780, 3875, 3880, 3900, 3905, 15625, 15630, 15650, 15655, 15750, 15755, 15775, 15780, 16250, 16255, 16275, 16280, 16375, 16380, 16400, 16405, 18750, 18755, 18775, 18780, 18875, 18880, 18900, 18905, 19375, 19380, 19400, 19405, 19500, 19505, 19525, 19530, 78125, 78130, 78150, 78155, 78250, 78255, 78275, 78280, 78750, 78755, 78775, 78780, 78875, 78880, 78900, 78905, 81250, 81255, 81275, 81280, 81375, 81380, 81400, 81405, 81875, 81880, 81900, 81905, 82000, 82005, 82025, 82030, 93750, 93755, 93775, 93780, 93875, 93880, 93900, 93905, 94375, 94380, 94400, 94405, 94500, 94505, 94525, 94530, 96875, 96880, 96900, 96905, 97000, 97005, 97025, 97030, 97500, 97505, 97525, 97530, 97625, 97630, 97650, 97655, 390625, 390630, 390650, 390655, 390750, 390755, 390775, 390780, 391250, 391255, 391275, 391280, 391375, 391380, 391400, 391405, 393750, 393755, 393775, 393780, 393875, 393880, 393900, 393905, 394375, 394380, 394400, 394405, 394500, 394505, 394525, 394530, 406250, 406255, 406275, 406280, 406375, 406380, 406400, 406405, 406875, 406880, 406900, 406905, 407000, 407005, 407025, 407030, 409375, 409380, 409400, 409405, 409500, 409505, 409525, 409530, 410000, 410005, 410025, 410030, 410125, 410130, 410150, 410155, 468750, 468755, 468775, 468780, 468875, 468880, 468900, 468905, 469375, 469380, 469400, 469405, 469500, 469505, 469525, 469530, 471875, 471880, 471900, 471905, 472000, 472005, 472025, 472030, 472500, 472505, 472525, 472530, 472625, 472630, 472650, 472655, 484375, 484380, 484400, 484405, 484500, 484505, 484525, 484530, 485000, 485005, 485025, 485030, 485125, 485130, 485150, 485155, 487500, 487505, 487525, 487530, 487625, 487630, 487650, 487655, 488125, 488130, 488150, 488155, 488250, 488255, 488275, 488280, 1953125, 1953130, 1953150, 1953155, 1953250, 1953255, 1953275, 1953280, 1953750, 1953755, 1953775, 1953780, 1953875, 1953880, 1953900, 1953905, 1956250, 1956255, 1956275, 1956280, 1956375, 1956380, 1956400, 1956405, 1956875, 1956880, 1956900, 1956905, 1957000, 1957005, 1957025, 1957030, 1968750, 1968755, 1968775, 1968780, 1968875, 1968880, 1968900, 1968905, 1969375, 1969380, 1969400, 1969405, 1969500, 1969505, 1969525, 1969530, 1971875, 1971880, 1971900, 1971905, 1972000, 1972005, 1972025, 1972030, 1972500, 1972505, 1972525, 1972530, 1972625, 1972630, 1972650, 1972655, 2031250, 2031255, 2031275, 2031280, 2031375, 2031380, 2031400, 2031405, 2031875, 2031880, 2031900, 2031905, 2032000, 2032005, 2032025, 2032030, 2034375, 2034380, 2034400, 2034405, 2034500, 2034505, 2034525, 2034530, 2035000, 2035005, 2035025, 2035030, 2035125, 2035130, 2035150, 2035155, 2046875, 2046880, 2046900, 2046905, 2047000, 2047005, 2047025, 2047030, 2047500, 2047505, 2047525, 2047530, 2047625, 2047630, 2047650, 2047655, 2050000, 2050005, 2050025, 2050030, 2050125, 2050130, 2050150, 2050155, 2050625, 2050630, 2050650, 2050655, 2050750, 2050755, 2050775, 2050780, 2343750, 2343755, 2343775, 2343780, 2343875, 2343880, 2343900, 2343905, 2344375, 2344380, 2344400, 2344405, 2344500, 2344505, 2344525, 2344530, 2346875, 2346880, 2346900, 2346905, 2347000, 2347005, 2347025, 2347030, 2347500, 2347505, 2347525, 2347530, 2347625, 2347630, 2347650, 2347655, 2359375, 2359380, 2359400, 2359405, 2359500, 2359505, 2359525, 2359530, 2360000, 2360005, 2360025, 2360030, 2360125, 2360130, 2360150, 2360155, 2362500, 2362505, 2362525, 2362530, 2362625, 2362630, 2362650, 2362655, 2363125, 2363130, 2363150, 2363155, 2363250, 2363255, 2363275, 2363280, 2421875, 2421880, 2421900, 2421905, 2422000, 2422005, 2422025, 2422030, 2422500, 2422505, 2422525, 2422530, 2422625, 2422630, 2422650, 2422655, 2425000, 2425005, 2425025, 2425030, 2425125, 2425130, 2425150, 2425155, 2425625, 2425630, 2425650, 2425655, 2425750, 2425755, 2425775, 2425780, 2437500, 2437505, 2437525, 2437530, 2437625, 2437630, 2437650, 2437655, 2438125, 2438130, 2438150, 2438155, 2438250, 2438255, 2438275, 2438280, 2440625, 2440630, 2440650, 2440655, 2440750, 2440755, 2440775, 2440780, 2441250, 2441255, 2441275, 2441280, 2441375, 2441380, 2441400, 2441405, 9765625, 9765630, 9765650, 9765655, 9765750, 9765755, 9765775, 9765780, 9766250, 9766255, 9766275, 9766280, 9766375, 9766380, 9766400, 9766405, 9768750, 9768755, 9768775, 9768780, 9768875, 9768880, 9768900, 9768905, 9769375, 9769380, 9769400, 9769405, 9769500, 9769505, 9769525, 9769530, 9781250, 9781255, 9781275, 9781280, 9781375, 9781380, 9781400, 9781405, 9781875, 9781880, 9781900, 9781905, 9782000, 9782005, 9782025, 9782030, 9784375, 9784380, 9784400, 9784405, 9784500, 9784505, 9784525, 9784530, 9785000, 9785005, 9785025, 9785030, 9785125, 9785130, 9785150, 9785155, 9843750, 9843755, 9843775, 9843780, 9843875, 9843880, 9843900, 9843905, 9844375, 9844380, 9844400, 9844405, 9844500, 9844505, 9844525, 9844530, 9846875, 9846880, 9846900, 9846905, 9847000, 9847005, 9847025, 9847030, 9847500, 9847505, 9847525, 9847530, 9847625, 9847630, 9847650, 9847655, 9859375, 9859380, 9859400, 9859405, 9859500, 9859505, 9859525, 9859530, 9860000, 9860005, 9860025, 9860030, 9860125, 9860130, 9860150, 9860155, 9862500, 9862505, 9862525, 9862530, 9862625, 9862630, 9862650, 9862655, 9863125, 9863130, 9863150, 9863155, 9863250, 9863255, 9863275, 9863280, 10156250, 10156255, 10156275, 10156280, 10156375, 10156380, 10156400, 10156405, 10156875, 10156880, 10156900, 10156905, 10157000, 10157005, 10157025, 10157030, 10159375, 10159380, 10159400, 10159405, 10159500, 10159505, 10159525, 10159530, 10160000, 10160005, 10160025, 10160030, 10160125, 10160130, 10160150, 10160155, 10171875, 10171880, 10171900, 10171905, 10172000, 10172005, 10172025, 10172030, 10172500, 10172505, 10172525, 10172530, 10172625, 10172630, 10172650, 10172655, 10175000, 10175005, 10175025, 10175030, 10175125, 10175130, 10175150, 10175155, 10175625, 10175630, 10175650, 10175655, 10175750, 10175755, 10175775, 10175780, 10234375, 10234380, 10234400, 10234405, 10234500, 10234505, 10234525, 10234530, 10235000, 10235005, 10235025, 10235030, 10235125, 10235130, 10235150, 10235155, 10237500, 10237505, 10237525, 10237530, 10237625, 10237630, 10237650, 10237655, 10238125, 10238130, 10238150, 10238155, 10238250, 10238255, 10238275, 10238280, 10250000, 10250005, 10250025, 10250030, 10250125, 10250130, 10250150, 10250155, 10250625, 10250630, 10250650, 10250655, 10250750, 10250755, 10250775, 10250780, 10253125, 10253130, 10253150, 10253155, 10253250, 10253255, 10253275, 10253280, 10253750, 10253755, 10253775, 10253780, 10253875, 10253880, 10253900, 10253905, 11718750, 11718755, 11718775, 11718780, 11718875, 11718880, 11718900, 11718905, 11719375, 11719380, 11719400, 11719405, 11719500, 11719505, 11719525, 11719530, 11721875, 11721880, 11721900, 11721905, 11722000, 11722005, 11722025, 11722030, 11722500, 11722505, 11722525, 11722530, 11722625, 11722630, 11722650, 11722655, 11734375, 11734380, 11734400, 11734405, 11734500, 11734505, 11734525, 11734530, 11735000, 11735005, 11735025, 11735030, 11735125, 11735130, 11735150, 11735155, 11737500, 11737505, 11737525, 11737530, 11737625, 11737630, 11737650, 11737655, 11738125, 11738130, 11738150, 11738155, 11738250, 11738255, 11738275, 11738280, 11796875, 11796880, 11796900, 11796905, 11797000, 11797005, 11797025, 11797030, 11797500, 11797505, 11797525, 11797530, 11797625, 11797630, 11797650, 11797655, 11800000, 11800005, 11800025, 11800030, 11800125, 11800130, 11800150, 11800155, 11800625, 11800630, 11800650, 11800655, 11800750, 11800755, 11800775, 11800780, 11812500, 11812505, 11812525, 11812530, 11812625, 11812630, 11812650, 11812655, 11813125, 11813130, 11813150, 11813155, 11813250, 11813255, 11813275, 11813280, 11815625, 11815630, 11815650, 11815655, 11815750, 11815755, 11815775, 11815780, 11816250, 11816255, 11816275, 11816280, 11816375, 11816380, 11816400, 11816405, 12109375, 12109380, 12109400, 12109405, 12109500, 12109505, 12109525, 12109530, 12110000, 12110005, 12110025, 12110030, 12110125, 12110130, 12110150, 12110155, 12112500, 12112505, 12112525, 12112530, 12112625, 12112630, 12112650, 12112655, 12113125, 12113130, 12113150, 12113155, 12113250, 12113255, 12113275, 12113280, 12125000, 12125005, 12125025, 12125030, 12125125, 12125130, 12125150, 12125155, 12125625, 12125630, 12125650, 12125655, 12125750, 12125755, 12125775, 12125780, 12128125, 12128130, 12128150, 12128155, 12128250, 12128255, 12128275, 12128280, 12128750, 12128755, 12128775, 12128780, 12128875, 12128880, 12128900, 12128905, 12187500, 12187505, 12187525, 12187530, 12187625, 12187630, 12187650, 12187655, 12188125, 12188130, 12188150, 12188155, 12188250, 12188255, 12188275, 12188280, 12190625, 12190630, 12190650, 12190655, 12190750, 12190755, 12190775, 12190780, 12191250, 12191255, 12191275, 12191280, 12191375, 12191380, 12191400, 12191405, 12203125, 12203130, 12203150, 12203155, 12203250, 12203255, 12203275, 12203280, 12203750, 12203755, 12203775, 12203780, 12203875, 12203880, 12203900, 12203905, 12206250, 12206255, 12206275, 12206280, 12206375, 12206380, 12206400, 12206405, 12206875, 12206880, 12206900, 12206905, 12207000, 12207005, 12207025, 12207030, 48828125, 48828130, 48828150, 48828155, 48828250, 48828255, 48828275, 48828280, 48828750, 48828755, 48828775, 48828780, 48828875, 48828880, 48828900, 48828905, 48831250, 48831255, 48831275, 48831280, 48831375, 48831380, 48831400, 48831405, 48831875, 48831880, 48831900, 48831905, 48832000, 48832005, 48832025, 48832030, 48843750, 48843755, 48843775, 48843780, 48843875, 48843880, 48843900, 48843905, 48844375, 48844380, 48844400, 48844405, 48844500, 48844505, 48844525, 48844530, 48846875, 48846880, 48846900, 48846905, 48847000, 48847005, 48847025, 48847030, 48847500, 48847505, 48847525, 48847530, 48847625, 48847630, 48847650, 48847655, 48906250, 48906255, 48906275, 48906280, 48906375, 48906380, 48906400, 48906405, 48906875, 48906880, 48906900, 48906905, 48907000, 48907005, 48907025, 48907030, 48909375, 48909380, 48909400, 48909405, 48909500, 48909505, 48909525, 48909530, 48910000, 48910005, 48910025, 48910030, 48910125, 48910130, 48910150, 48910155, 48921875, 48921880, 48921900, 48921905, 48922000, 48922005, 48922025, 48922030, 48922500, 48922505, 48922525, 48922530, 48922625, 48922630, 48922650, 48922655, 48925000, 48925005, 48925025, 48925030, 48925125, 48925130, 48925150, 48925155, 48925625, 48925630, 48925650, 48925655, 48925750, 48925755, 48925775, 48925780, 49218750, 49218755, 49218775, 49218780, 49218875, 49218880, 49218900, 49218905, 49219375, 49219380, 49219400, 49219405, 49219500, 49219505, 49219525, 49219530, 49221875, 49221880, 49221900, 49221905, 49222000, 49222005, 49222025, 49222030, 49222500, 49222505, 49222525, 49222530, 49222625, 49222630, 49222650, 49222655, 49234375, 49234380, 49234400, 49234405, 49234500, 49234505, 49234525, 49234530, 49235000, 49235005, 49235025, 49235030, 49235125, 49235130, 49235150, 49235155, 49237500, 49237505, 49237525, 49237530, 49237625, 49237630, 49237650, 49237655, 49238125, 49238130, 49238150, 49238155, 49238250, 49238255, 49238275, 49238280, 49296875, 49296880, 49296900, 49296905, 49297000, 49297005, 49297025, 49297030, 49297500, 49297505, 49297525, 49297530, 49297625, 49297630, 49297650, 49297655, 49300000, 49300005, 49300025, 49300030, 49300125, 49300130, 49300150, 49300155, 49300625, 49300630, 49300650, 49300655, 49300750, 49300755, 49300775, 49300780, 49312500, 49312505, 49312525, 49312530, 49312625, 49312630, 49312650, 49312655, 49313125, 49313130, 49313150, 49313155, 49313250, 49313255, 49313275, 49313280, 49315625, 49315630, 49315650, 49315655, 49315750, 49315755, 49315775, 49315780, 49316250, 49316255, 49316275, 49316280, 49316375, 49316380, 49316400, 49316405, 50781250, 50781255, 50781275, 50781280, 50781375, 50781380, 50781400, 50781405, 50781875, 50781880, 50781900, 50781905, 50782000, 50782005, 50782025, 50782030, 50784375, 50784380, 50784400, 50784405, 50784500, 50784505, 50784525, 50784530, 50785000, 50785005, 50785025, 50785030, 50785125, 50785130, 50785150, 50785155, 50796875, 50796880, 50796900, 50796905, 50797000, 50797005, 50797025, 50797030, 50797500, 50797505, 50797525, 50797530, 50797625, 50797630, 50797650, 50797655, 50800000, 50800005, 50800025, 50800030, 50800125, 50800130, 50800150, 50800155, 50800625, 50800630, 50800650, 50800655, 50800750, 50800755, 50800775, 50800780, 50859375, 50859380, 50859400, 50859405, 50859500, 50859505, 50859525, 50859530, 50860000, 50860005, 50860025, 50860030, 50860125, 50860130, 50860150, 50860155, 50862500, 50862505, 50862525, 50862530, 50862625, 50862630, 50862650, 50862655, 50863125, 50863130, 50863150, 50863155, 50863250, 50863255, 50863275, 50863280, 50875000, 50875005, 50875025, 50875030, 50875125, 50875130, 50875150, 50875155, 50875625, 50875630, 50875650, 50875655, 50875750, 50875755, 50875775, 50875780, 50878125, 50878130, 50878150, 50878155, 50878250, 50878255, 50878275, 50878280, 50878750, 50878755, 50878775, 50878780, 50878875, 50878880, 50878900, 50878905, 51171875, 51171880, 51171900, 51171905, 51172000, 51172005, 51172025, 51172030, 51172500, 51172505, 51172525, 51172530, 51172625, 51172630, 51172650, 51172655, 51175000, 51175005, 51175025, 51175030, 51175125, 51175130, 51175150, 51175155, 51175625, 51175630, 51175650, 51175655, 51175750, 51175755, 51175775, 51175780, 51187500, 51187505, 51187525, 51187530, 51187625, 51187630, 51187650, 51187655, 51188125, 51188130, 51188150, 51188155, 51188250, 51188255, 51188275, 51188280, 51190625, 51190630, 51190650, 51190655, 51190750, 51190755, 51190775, 51190780, 51191250, 51191255, 51191275, 51191280, 51191375, 51191380, 51191400, 51191405, 51250000, 51250005, 51250025, 51250030, 51250125, 51250130, 51250150, 51250155, 51250625, 51250630, 51250650, 51250655, 51250750, 51250755, 51250775, 51250780, 51253125, 51253130, 51253150, 51253155, 51253250, 51253255, 51253275, 51253280, 51253750, 51253755, 51253775, 51253780, 51253875, 51253880, 51253900, 51253905, 51265625, 51265630, 51265650, 51265655, 51265750, 51265755, 51265775, 51265780, 51266250, 51266255, 51266275, 51266280, 51266375, 51266380, 51266400, 51266405, 51268750, 51268755, 51268775, 51268780, 51268875, 51268880, 51268900, 51268905, 51269375, 51269380, 51269400, 51269405, 51269500, 51269505, 51269525, 51269530, 58593750, 58593755, 58593775, 58593780, 58593875, 58593880, 58593900, 58593905, 58594375, 58594380, 58594400, 58594405, 58594500, 58594505, 58594525, 58594530, 58596875, 58596880, 58596900, 58596905, 58597000, 58597005, 58597025, 58597030, 58597500, 58597505, 58597525, 58597530, 58597625, 58597630, 58597650, 58597655, 58609375, 58609380, 58609400, 58609405, 58609500, 58609505, 58609525, 58609530, 58610000, 58610005, 58610025, 58610030, 58610125, 58610130, 58610150, 58610155, 58612500, 58612505, 58612525, 58612530, 58612625, 58612630, 58612650, 58612655, 58613125, 58613130, 58613150, 58613155, 58613250, 58613255, 58613275, 58613280, 58671875, 58671880, 58671900, 58671905, 58672000, 58672005, 58672025, 58672030, 58672500, 58672505, 58672525, 58672530, 58672625, 58672630, 58672650, 58672655, 58675000, 58675005, 58675025, 58675030, 58675125, 58675130, 58675150, 58675155, 58675625, 58675630, 58675650, 58675655, 58675750, 58675755, 58675775, 58675780, 58687500, 58687505, 58687525, 58687530, 58687625, 58687630, 58687650, 58687655, 58688125, 58688130, 58688150, 58688155, 58688250, 58688255, 58688275, 58688280, 58690625, 58690630, 58690650, 58690655, 58690750, 58690755, 58690775, 58690780, 58691250, 58691255, 58691275, 58691280, 58691375, 58691380, 58691400, 58691405, 58984375, 58984380, 58984400, 58984405, 58984500, 58984505, 58984525, 58984530, 58985000, 58985005, 58985025, 58985030, 58985125, 58985130, 58985150, 58985155, 58987500, 58987505, 58987525, 58987530, 58987625, 58987630, 58987650, 58987655, 58988125, 58988130, 58988150, 58988155, 58988250, 58988255, 58988275, 58988280, 59000000, 59000005, 59000025, 59000030, 59000125, 59000130, 59000150, 59000155, 59000625, 59000630, 59000650, 59000655, 59000750, 59000755, 59000775, 59000780, 59003125, 59003130, 59003150, 59003155, 59003250, 59003255, 59003275, 59003280, 59003750, 59003755, 59003775, 59003780, 59003875, 59003880, 59003900, 59003905, 59062500, 59062505, 59062525, 59062530, 59062625, 59062630, 59062650, 59062655, 59063125, 59063130, 59063150, 59063155, 59063250, 59063255, 59063275, 59063280, 59065625, 59065630, 59065650, 59065655, 59065750, 59065755, 59065775, 59065780, 59066250, 59066255, 59066275, 59066280, 59066375, 59066380, 59066400, 59066405, 59078125, 59078130, 59078150, 59078155, 59078250, 59078255, 59078275, 59078280, 59078750, 59078755, 59078775, 59078780, 59078875, 59078880, 59078900, 59078905, 59081250, 59081255, 59081275, 59081280, 59081375, 59081380, 59081400, 59081405, 59081875, 59081880, 59081900, 59081905, 59082000, 59082005, 59082025, 59082030, 60546875, 60546880, 60546900, 60546905, 60547000, 60547005, 60547025, 60547030, 60547500, 60547505, 60547525, 60547530, 60547625, 60547630, 60547650, 60547655, 60550000, 60550005, 60550025, 60550030, 60550125, 60550130, 60550150, 60550155, 60550625, 60550630, 60550650, 60550655, 60550750, 60550755, 60550775, 60550780, 60562500, 60562505, 60562525, 60562530, 60562625, 60562630, 60562650, 60562655, 60563125, 60563130, 60563150, 60563155, 60563250, 60563255, 60563275, 60563280, 60565625, 60565630, 60565650, 60565655, 60565750, 60565755, 60565775, 60565780, 60566250, 60566255, 60566275, 60566280, 60566375, 60566380, 60566400, 60566405, 60625000, 60625005, 60625025, 60625030, 60625125, 60625130, 60625150, 60625155, 60625625, 60625630, 60625650, 60625655, 60625750, 60625755, 60625775, 60625780, 60628125, 60628130, 60628150, 60628155, 60628250, 60628255, 60628275, 60628280, 60628750, 60628755, 60628775, 60628780, 60628875, 60628880, 60628900, 60628905, 60640625, 60640630, 60640650, 60640655, 60640750, 60640755, 60640775, 60640780, 60641250, 60641255, 60641275, 60641280, 60641375, 60641380, 60641400, 60641405, 60643750, 60643755, 60643775, 60643780, 60643875, 60643880, 60643900, 60643905, 60644375, 60644380, 60644400, 60644405, 60644500, 60644505, 60644525, 60644530, 60937500, 60937505, 60937525, 60937530, 60937625, 60937630, 60937650, 60937655, 60938125, 60938130, 60938150, 60938155, 60938250, 60938255, 60938275, 60938280, 60940625, 60940630, 60940650, 60940655, 60940750, 60940755, 60940775, 60940780, 60941250, 60941255, 60941275, 60941280, 60941375, 60941380, 60941400, 60941405, 60953125, 60953130, 60953150, 60953155, 60953250, 60953255, 60953275, 60953280, 60953750, 60953755, 60953775, 60953780, 60953875, 60953880, 60953900, 60953905, 60956250, 60956255, 60956275, 60956280, 60956375, 60956380, 60956400, 60956405, 60956875, 60956880, 60956900, 60956905, 60957000, 60957005, 60957025, 60957030, 61015625, 61015630, 61015650, 61015655, 61015750, 61015755, 61015775, 61015780, 61016250, 61016255, 61016275, 61016280, 61016375, 61016380, 61016400, 61016405, 61018750, 61018755, 61018775, 61018780, 61018875, 61018880, 61018900, 61018905, 61019375, 61019380, 61019400, 61019405, 61019500, 61019505, 61019525, 61019530, 61031250, 61031255, 61031275, 61031280, 61031375, 61031380, 61031400, 61031405, 61031875, 61031880, 61031900, 61031905, 61032000, 61032005, 61032025, 61032030, 61034375, 61034380, 61034400, 61034405, 61034500, 61034505, 61034525, 61034530, 61035000, 61035005, 61035025, 61035030, 61035125, 61035130, 61035150, 61035155, 244140625, 244140630, 244140650, 244140655, 244140750, 244140755, 244140775, 244140780, 244141250, 244141255, 244141275, 244141280, 244141375, 244141380, 244141400, 244141405, 244143750, 244143755, 244143775, 244143780, 244143875, 244143880, 244143900, 244143905, 244144375, 244144380, 244144400, 244144405, 244144500, 244144505, 244144525, 244144530, 244156250, 244156255, 244156275, 244156280, 244156375, 244156380, 244156400, 244156405, 244156875, 244156880, 244156900, 244156905, 244157000, 244157005, 244157025, 244157030, 244159375, 244159380, 244159400, 244159405, 244159500, 244159505, 244159525, 244159530, 244160000, 244160005, 244160025, 244160030, 244160125, 244160130, 244160150, 244160155, 244218750, 244218755, 244218775, 244218780, 244218875, 244218880, 244218900, 244218905, 244219375, 244219380, 244219400, 244219405, 244219500, 244219505, 244219525, 244219530, 244221875, 244221880, 244221900, 244221905, 244222000, 244222005, 244222025, 244222030, 244222500, 244222505, 244222525, 244222530, 244222625, 244222630, 244222650, 244222655, 244234375, 244234380, 244234400, 244234405, 244234500, 244234505, 244234525, 244234530, 244235000, 244235005, 244235025, 244235030, 244235125, 244235130, 244235150, 244235155, 244237500, 244237505, 244237525, 244237530, 244237625, 244237630, 244237650, 244237655, 244238125, 244238130, 244238150, 244238155, 244238250, 244238255, 244238275, 244238280, 244531250, 244531255, 244531275, 244531280, 244531375, 244531380, 244531400, 244531405, 244531875, 244531880, 244531900, 244531905, 244532000, 244532005, 244532025, 244532030, 244534375, 244534380, 244534400, 244534405, 244534500, 244534505, 244534525, 244534530, 244535000, 244535005, 244535025, 244535030, 244535125, 244535130, 244535150, 244535155, 244546875, 244546880, 244546900, 244546905, 244547000, 244547005, 244547025, 244547030, 244547500, 244547505, 244547525, 244547530, 244547625, 244547630, 244547650, 244547655, 244550000, 244550005, 244550025, 244550030, 244550125, 244550130, 244550150, 244550155, 244550625, 244550630, 244550650, 244550655, 244550750, 244550755, 244550775, 244550780, 244609375, 244609380, 244609400, 244609405, 244609500, 244609505, 244609525, 244609530, 244610000, 244610005, 244610025, 244610030, 244610125, 244610130, 244610150, 244610155, 244612500, 244612505, 244612525, 244612530, 244612625, 244612630, 244612650, 244612655, 244613125, 244613130, 244613150, 244613155, 244613250, 244613255, 244613275, 244613280, 244625000, 244625005, 244625025, 244625030, 244625125, 244625130, 244625150, 244625155, 244625625, 244625630, 244625650, 244625655, 244625750, 244625755, 244625775, 244625780, 244628125, 244628130, 244628150, 244628155, 244628250, 244628255, 244628275, 244628280, 244628750, 244628755, 244628775, 244628780, 244628875, 244628880, 244628900, 244628905, 246093750, 246093755, 246093775, 246093780, 246093875, 246093880, 246093900, 246093905, 246094375, 246094380, 246094400, 246094405, 246094500, 246094505, 246094525, 246094530, 246096875, 246096880, 246096900, 246096905, 246097000, 246097005, 246097025, 246097030, 246097500, 246097505, 246097525, 246097530, 246097625, 246097630, 246097650, 246097655, 246109375, 246109380, 246109400, 246109405, 246109500, 246109505, 246109525, 246109530, 246110000, 246110005, 246110025, 246110030, 246110125, 246110130, 246110150, 246110155, 246112500, 246112505, 246112525, 246112530, 246112625, 246112630, 246112650, 246112655, 246113125, 246113130, 246113150, 246113155, 246113250, 246113255, 246113275, 246113280, 246171875, 246171880, 246171900, 246171905, 246172000, 246172005, 246172025, 246172030, 246172500, 246172505, 246172525, 246172530, 246172625, 246172630, 246172650, 246172655, 246175000, 246175005, 246175025, 246175030, 246175125, 246175130, 246175150, 246175155, 246175625, 246175630, 246175650, 246175655, 246175750, 246175755, 246175775, 246175780, 246187500, 246187505, 246187525, 246187530, 246187625, 246187630, 246187650, 246187655, 246188125, 246188130, 246188150, 246188155, 246188250, 246188255, 246188275, 246188280, 246190625, 246190630, 246190650, 246190655, 246190750, 246190755, 246190775, 246190780, 246191250, 246191255, 246191275, 246191280, 246191375, 246191380, 246191400, 246191405, 246484375, 246484380, 246484400, 246484405, 246484500, 246484505, 246484525, 246484530, 246485000, 246485005, 246485025, 246485030, 246485125, 246485130, 246485150, 246485155, 246487500, 246487505, 246487525, 246487530, 246487625, 246487630, 246487650, 246487655, 246488125, 246488130, 246488150, 246488155, 246488250, 246488255, 246488275, 246488280, 246500000, 246500005, 246500025, 246500030, 246500125, 246500130, 246500150, 246500155, 246500625, 246500630, 246500650, 246500655, 246500750, 246500755, 246500775, 246500780, 246503125, 246503130, 246503150, 246503155, 246503250, 246503255, 246503275, 246503280, 246503750, 246503755, 246503775, 246503780, 246503875, 246503880, 246503900, 246503905, 246562500, 246562505, 246562525, 246562530, 246562625, 246562630, 246562650, 246562655, 246563125, 246563130, 246563150, 246563155, 246563250, 246563255, 246563275, 246563280, 246565625, 246565630, 246565650, 246565655, 246565750, 246565755, 246565775, 246565780, 246566250, 246566255, 246566275, 246566280, 246566375, 246566380, 246566400, 246566405, 246578125, 246578130, 246578150, 246578155, 246578250, 246578255, 246578275, 246578280, 246578750, 246578755, 246578775, 246578780, 246578875, 246578880, 246578900, 246578905, 246581250, 246581255, 246581275, 246581280, 246581375, 246581380, 246581400, 246581405, 246581875, 246581880, 246581900, 246581905, 246582000, 246582005, 246582025, 246582030, 253906250, 253906255, 253906275, 253906280, 253906375, 253906380, 253906400, 253906405, 253906875, 253906880, 253906900, 253906905, 253907000, 253907005, 253907025, 253907030, 253909375, 253909380, 253909400, 253909405, 253909500, 253909505, 253909525, 253909530, 253910000, 253910005, 253910025, 253910030, 253910125, 253910130, 253910150, 253910155, 253921875, 253921880, 253921900, 253921905, 253922000, 253922005, 253922025, 253922030, 253922500, 253922505, 253922525, 253922530, 253922625, 253922630, 253922650, 253922655, 253925000, 253925005, 253925025, 253925030, 253925125, 253925130, 253925150, 253925155, 253925625, 253925630, 253925650, 253925655, 253925750, 253925755, 253925775, 253925780, 253984375, 253984380, 253984400, 253984405, 253984500, 253984505, 253984525, 253984530, 253985000, 253985005, 253985025, 253985030, 253985125, 253985130, 253985150, 253985155, 253987500, 253987505, 253987525, 253987530, 253987625, 253987630, 253987650, 253987655, 253988125, 253988130, 253988150, 253988155, 253988250, 253988255, 253988275, 253988280, 254000000, 254000005, 254000025, 254000030, 254000125, 254000130, 254000150, 254000155, 254000625, 254000630, 254000650, 254000655, 254000750, 254000755, 254000775, 254000780, 254003125, 254003130, 254003150, 254003155, 254003250, 254003255, 254003275, 254003280, 254003750, 254003755, 254003775, 254003780, 254003875, 254003880, 254003900, 254003905, 254296875, 254296880, 254296900, 254296905, 254297000, 254297005, 254297025, 254297030, 254297500, 254297505, 254297525, 254297530, 254297625, 254297630, 254297650, 254297655, 254300000, 254300005, 254300025, 254300030, 254300125, 254300130, 254300150, 254300155, 254300625, 254300630, 254300650, 254300655, 254300750, 254300755, 254300775, 254300780, 254312500, 254312505, 254312525, 254312530, 254312625, 254312630, 254312650, 254312655, 254313125, 254313130, 254313150, 254313155, 254313250, 254313255, 254313275, 254313280, 254315625, 254315630, 254315650, 254315655, 254315750, 254315755, 254315775, 254315780, 254316250, 254316255, 254316275, 254316280, 254316375, 254316380, 254316400, 254316405, 254375000, 254375005, 254375025, 254375030, 254375125, 254375130, 254375150, 254375155, 254375625, 254375630, 254375650, 254375655, 254375750, 254375755, 254375775, 254375780, 254378125, 254378130, 254378150, 254378155, 254378250, 254378255, 254378275, 254378280, 254378750, 254378755, 254378775, 254378780, 254378875, 254378880, 254378900, 254378905, 254390625, 254390630, 254390650, 254390655, 254390750, 254390755, 254390775, 254390780, 254391250, 254391255, 254391275, 254391280, 254391375, 254391380, 254391400, 254391405, 254393750, 254393755, 254393775, 254393780, 254393875, 254393880, 254393900, 254393905, 254394375, 254394380, 254394400, 254394405, 254394500, 254394505, 254394525, 254394530, 255859375, 255859380, 255859400, 255859405, 255859500, 255859505, 255859525, 255859530, 255860000, 255860005, 255860025, 255860030, 255860125, 255860130, 255860150, 255860155, 255862500, 255862505, 255862525, 255862530, 255862625, 255862630, 255862650, 255862655, 255863125, 255863130, 255863150, 255863155, 255863250, 255863255, 255863275, 255863280, 255875000, 255875005, 255875025, 255875030, 255875125, 255875130, 255875150, 255875155, 255875625, 255875630, 255875650, 255875655, 255875750, 255875755, 255875775, 255875780, 255878125, 255878130, 255878150, 255878155, 255878250, 255878255, 255878275, 255878280, 255878750, 255878755, 255878775, 255878780, 255878875, 255878880, 255878900, 255878905, 255937500, 255937505, 255937525, 255937530, 255937625, 255937630, 255937650, 255937655, 255938125, 255938130, 255938150, 255938155, 255938250, 255938255, 255938275, 255938280, 255940625, 255940630, 255940650, 255940655, 255940750, 255940755, 255940775, 255940780, 255941250, 255941255, 255941275, 255941280, 255941375, 255941380, 255941400, 255941405, 255953125, 255953130, 255953150, 255953155, 255953250, 255953255, 255953275, 255953280, 255953750, 255953755, 255953775, 255953780, 255953875, 255953880, 255953900, 255953905, 255956250, 255956255, 255956275, 255956280, 255956375, 255956380, 255956400, 255956405, 255956875, 255956880, 255956900, 255956905, 255957000, 255957005, 255957025, 255957030, 256250000, 256250005, 256250025, 256250030, 256250125, 256250130, 256250150, 256250155, 256250625, 256250630, 256250650, 256250655, 256250750, 256250755, 256250775, 256250780, 256253125, 256253130, 256253150, 256253155, 256253250, 256253255, 256253275, 256253280, 256253750, 256253755, 256253775, 256253780, 256253875, 256253880, 256253900, 256253905, 256265625, 256265630, 256265650, 256265655, 256265750, 256265755, 256265775, 256265780, 256266250, 256266255, 256266275, 256266280, 256266375, 256266380, 256266400, 256266405, 256268750, 256268755, 256268775, 256268780, 256268875, 256268880, 256268900, 256268905, 256269375, 256269380, 256269400, 256269405, 256269500, 256269505, 256269525, 256269530, 256328125, 256328130, 256328150, 256328155, 256328250, 256328255, 256328275, 256328280, 256328750, 256328755, 256328775, 256328780, 256328875, 256328880, 256328900, 256328905, 256331250, 256331255, 256331275, 256331280, 256331375, 256331380, 256331400, 256331405, 256331875, 256331880, 256331900, 256331905, 256332000, 256332005, 256332025, 256332030, 256343750, 256343755, 256343775, 256343780, 256343875, 256343880, 256343900, 256343905, 256344375, 256344380, 256344400, 256344405, 256344500, 256344505, 256344525, 256344530, 256346875, 256346880, 256346900, 256346905, 256347000, 256347005, 256347025, 256347030, 256347500, 256347505, 256347525, 256347530, 256347625, 256347630, 256347650, 256347655, 292968750, 292968755, 292968775, 292968780, 292968875, 292968880, 292968900, 292968905, 292969375, 292969380, 292969400, 292969405, 292969500, 292969505, 292969525, 292969530, 292971875, 292971880, 292971900, 292971905, 292972000, 292972005, 292972025, 292972030, 292972500, 292972505, 292972525, 292972530, 292972625, 292972630, 292972650, 292972655, 292984375, 292984380, 292984400, 292984405, 292984500, 292984505, 292984525, 292984530, 292985000, 292985005, 292985025, 292985030, 292985125, 292985130, 292985150, 292985155, 292987500, 292987505, 292987525, 292987530, 292987625, 292987630, 292987650, 292987655, 292988125, 292988130, 292988150, 292988155, 292988250, 292988255, 292988275, 292988280, 293046875, 293046880, 293046900, 293046905, 293047000, 293047005, 293047025, 293047030, 293047500, 293047505, 293047525, 293047530, 293047625, 293047630, 293047650, 293047655, 293050000, 293050005, 293050025, 293050030, 293050125, 293050130, 293050150, 293050155, 293050625, 293050630, 293050650, 293050655, 293050750, 293050755, 293050775, 293050780, 293062500, 293062505, 293062525, 293062530, 293062625, 293062630, 293062650, 293062655, 293063125, 293063130, 293063150, 293063155, 293063250, 293063255, 293063275, 293063280, 293065625, 293065630, 293065650, 293065655, 293065750, 293065755, 293065775, 293065780, 293066250, 293066255, 293066275, 293066280, 293066375, 293066380, 293066400, 293066405, 293359375, 293359380, 293359400, 293359405, 293359500, 293359505, 293359525, 293359530, 293360000, 293360005, 293360025, 293360030, 293360125, 293360130, 293360150, 293360155, 293362500, 293362505, 293362525, 293362530, 293362625, 293362630, 293362650, 293362655, 293363125, 293363130, 293363150, 293363155, 293363250, 293363255, 293363275, 293363280, 293375000, 293375005, 293375025, 293375030, 293375125, 293375130, 293375150, 293375155, 293375625, 293375630, 293375650, 293375655, 293375750, 293375755, 293375775, 293375780, 293378125, 293378130, 293378150, 293378155, 293378250, 293378255, 293378275, 293378280, 293378750, 293378755, 293378775, 293378780, 293378875, 293378880, 293378900, 293378905, 293437500, 293437505, 293437525, 293437530, 293437625, 293437630, 293437650, 293437655, 293438125, 293438130, 293438150, 293438155, 293438250, 293438255, 293438275, 293438280, 293440625, 293440630, 293440650, 293440655, 293440750, 293440755, 293440775, 293440780, 293441250, 293441255, 293441275, 293441280, 293441375, 293441380, 293441400, 293441405, 293453125, 293453130, 293453150, 293453155, 293453250, 293453255, 293453275, 293453280, 293453750, 293453755, 293453775, 293453780, 293453875, 293453880, 293453900, 293453905, 293456250, 293456255, 293456275, 293456280, 293456375, 293456380, 293456400, 293456405, 293456875, 293456880, 293456900, 293456905, 293457000, 293457005, 293457025, 293457030, 294921875, 294921880, 294921900, 294921905, 294922000, 294922005, 294922025, 294922030, 294922500, 294922505, 294922525, 294922530, 294922625, 294922630, 294922650, 294922655, 294925000, 294925005, 294925025, 294925030, 294925125, 294925130, 294925150, 294925155, 294925625, 294925630, 294925650, 294925655, 294925750, 294925755, 294925775, 294925780, 294937500, 294937505, 294937525, 294937530, 294937625, 294937630, 294937650, 294937655, 294938125, 294938130, 294938150, 294938155, 294938250, 294938255, 294938275, 294938280, 294940625, 294940630, 294940650, 294940655, 294940750, 294940755, 294940775, 294940780, 294941250, 294941255, 294941275, 294941280, 294941375, 294941380, 294941400, 294941405, 295000000, 295000005, 295000025, 295000030, 295000125, 295000130, 295000150, 295000155, 295000625, 295000630, 295000650, 295000655, 295000750, 295000755, 295000775, 295000780, 295003125, 295003130, 295003150, 295003155, 295003250, 295003255, 295003275, 295003280, 295003750, 295003755, 295003775, 295003780, 295003875, 295003880, 295003900, 295003905, 295015625, 295015630, 295015650, 295015655, 295015750, 295015755, 295015775, 295015780, 295016250, 295016255, 295016275, 295016280, 295016375, 295016380, 295016400, 295016405, 295018750, 295018755, 295018775, 295018780, 295018875, 295018880, 295018900, 295018905, 295019375, 295019380, 295019400, 295019405, 295019500, 295019505, 295019525, 295019530, 295312500, 295312505, 295312525, 295312530, 295312625, 295312630, 295312650, 295312655, 295313125, 295313130, 295313150, 295313155, 295313250, 295313255, 295313275, 295313280, 295315625, 295315630, 295315650, 295315655, 295315750, 295315755, 295315775, 295315780, 295316250, 295316255, 295316275, 295316280, 295316375, 295316380, 295316400, 295316405, 295328125, 295328130, 295328150, 295328155, 295328250, 295328255, 295328275, 295328280, 295328750, 295328755, 295328775, 295328780, 295328875, 295328880, 295328900, 295328905, 295331250, 295331255, 295331275, 295331280, 295331375, 295331380, 295331400, 295331405, 295331875, 295331880, 295331900, 295331905, 295332000, 295332005, 295332025, 295332030, 295390625, 295390630, 295390650, 295390655, 295390750, 295390755, 295390775, 295390780, 295391250, 295391255, 295391275, 295391280, 295391375, 295391380, 295391400, 295391405, 295393750, 295393755, 295393775, 295393780, 295393875, 295393880, 295393900, 295393905, 295394375, 295394380, 295394400, 295394405, 295394500, 295394505, 295394525, 295394530, 295406250, 295406255, 295406275, 295406280, 295406375, 295406380, 295406400, 295406405, 295406875, 295406880, 295406900, 295406905, 295407000, 295407005, 295407025, 295407030, 295409375, 295409380, 295409400, 295409405, 295409500, 295409505, 295409525, 295409530, 295410000, 295410005, 295410025, 295410030, 295410125, 295410130, 295410150, 295410155, 302734375, 302734380, 302734400, 302734405, 302734500, 302734505, 302734525, 302734530, 302735000, 302735005, 302735025, 302735030, 302735125, 302735130, 302735150, 302735155, 302737500, 302737505, 302737525, 302737530, 302737625, 302737630, 302737650, 302737655, 302738125, 302738130, 302738150, 302738155, 302738250, 302738255, 302738275, 302738280, 302750000, 302750005, 302750025, 302750030, 302750125, 302750130, 302750150, 302750155, 302750625, 302750630, 302750650, 302750655, 302750750, 302750755, 302750775, 302750780, 302753125, 302753130, 302753150, 302753155, 302753250, 302753255, 302753275, 302753280, 302753750, 302753755, 302753775, 302753780, 302753875, 302753880, 302753900, 302753905, 302812500, 302812505, 302812525, 302812530, 302812625, 302812630, 302812650, 302812655, 302813125, 302813130, 302813150, 302813155, 302813250, 302813255, 302813275, 302813280, 302815625, 302815630, 302815650, 302815655, 302815750, 302815755, 302815775, 302815780, 302816250, 302816255, 302816275, 302816280, 302816375, 302816380, 302816400, 302816405, 302828125, 302828130, 302828150, 302828155, 302828250, 302828255, 302828275, 302828280, 302828750, 302828755, 302828775, 302828780, 302828875, 302828880, 302828900, 302828905, 302831250, 302831255, 302831275, 302831280, 302831375, 302831380, 302831400, 302831405, 302831875, 302831880, 302831900, 302831905, 302832000, 302832005, 302832025, 302832030, 303125000, 303125005, 303125025, 303125030, 303125125, 303125130, 303125150, 303125155, 303125625, 303125630, 303125650, 303125655, 303125750, 303125755, 303125775, 303125780, 303128125, 303128130, 303128150, 303128155, 303128250, 303128255, 303128275, 303128280, 303128750, 303128755, 303128775, 303128780, 303128875, 303128880, 303128900, 303128905, 303140625, 303140630, 303140650, 303140655, 303140750, 303140755, 303140775, 303140780, 303141250, 303141255, 303141275, 303141280, 303141375, 303141380, 303141400, 303141405, 303143750, 303143755, 303143775, 303143780, 303143875, 303143880, 303143900, 303143905, 303144375, 303144380, 303144400, 303144405, 303144500, 303144505, 303144525, 303144530, 303203125, 303203130, 303203150, 303203155, 303203250, 303203255, 303203275, 303203280, 303203750, 303203755, 303203775, 303203780, 303203875, 303203880, 303203900, 303203905, 303206250, 303206255, 303206275, 303206280, 303206375, 303206380, 303206400, 303206405, 303206875, 303206880, 303206900, 303206905, 303207000, 303207005, 303207025, 303207030, 303218750, 303218755, 303218775, 303218780, 303218875, 303218880, 303218900, 303218905, 303219375, 303219380, 303219400, 303219405, 303219500, 303219505, 303219525, 303219530, 303221875, 303221880, 303221900, 303221905, 303222000, 303222005, 303222025, 303222030, 303222500, 303222505, 303222525, 303222530, 303222625, 303222630, 303222650, 303222655, 304687500, 304687505, 304687525, 304687530, 304687625, 304687630, 304687650, 304687655, 304688125, 304688130, 304688150, 304688155, 304688250, 304688255, 304688275, 304688280, 304690625, 304690630, 304690650, 304690655, 304690750, 304690755, 304690775, 304690780, 304691250, 304691255, 304691275, 304691280, 304691375, 304691380, 304691400, 304691405, 304703125, 304703130, 304703150, 304703155, 304703250, 304703255, 304703275, 304703280, 304703750, 304703755, 304703775, 304703780, 304703875, 304703880, 304703900, 304703905, 304706250, 304706255, 304706275, 304706280, 304706375, 304706380, 304706400, 304706405, 304706875, 304706880, 304706900, 304706905, 304707000, 304707005, 304707025, 304707030, 304765625, 304765630, 304765650, 304765655, 304765750, 304765755, 304765775, 304765780, 304766250, 304766255, 304766275, 304766280, 304766375, 304766380, 304766400, 304766405, 304768750, 304768755, 304768775, 304768780, 304768875, 304768880, 304768900, 304768905, 304769375, 304769380, 304769400, 304769405, 304769500, 304769505, 304769525, 304769530, 304781250, 304781255, 304781275, 304781280, 304781375, 304781380, 304781400, 304781405, 304781875, 304781880, 304781900, 304781905, 304782000, 304782005, 304782025, 304782030, 304784375, 304784380, 304784400, 304784405, 304784500, 304784505, 304784525, 304784530, 304785000, 304785005, 304785025, 304785030, 304785125, 304785130, 304785150, 304785155, 305078125, 305078130, 305078150, 305078155, 305078250, 305078255, 305078275, 305078280, 305078750, 305078755, 305078775, 305078780, 305078875, 305078880, 305078900, 305078905, 305081250, 305081255, 305081275, 305081280, 305081375, 305081380, 305081400, 305081405, 305081875, 305081880, 305081900, 305081905, 305082000, 305082005, 305082025, 305082030, 305093750, 305093755, 305093775, 305093780, 305093875, 305093880, 305093900, 305093905, 305094375, 305094380, 305094400, 305094405, 305094500, 305094505, 305094525, 305094530, 305096875, 305096880, 305096900, 305096905, 305097000, 305097005, 305097025, 305097030, 305097500, 305097505, 305097525, 305097530, 305097625, 305097630, 305097650, 305097655, 305156250, 305156255, 305156275, 305156280, 305156375, 305156380, 305156400, 305156405, 305156875, 305156880, 305156900, 305156905, 305157000, 305157005, 305157025, 305157030, 305159375, 305159380, 305159400, 305159405, 305159500, 305159505, 305159525, 305159530, 305160000, 305160005, 305160025, 305160030, 305160125, 305160130, 305160150, 305160155, 305171875, 305171880, 305171900, 305171905, 305172000, 305172005, 305172025, 305172030, 305172500, 305172505, 305172525, 305172530, 305172625, 305172630, 305172650, 305172655, 305175000, 305175005, 305175025, 305175030, 305175125, 305175130, 305175150, 305175155, 305175625, 305175630, 305175650, 305175655, 305175750, 305175755, 305175775, 305175780, 1220703125, 1220703130, 1220703150, 1220703155, 1220703250, 1220703255, 1220703275, 1220703280, 1220703750, 1220703755, 1220703775, 1220703780, 1220703875, 1220703880, 1220703900, 1220703905, 1220706250, 1220706255, 1220706275, 1220706280, 1220706375, 1220706380, 1220706400, 1220706405, 1220706875, 1220706880, 1220706900, 1220706905, 1220707000, 1220707005, 1220707025, 1220707030, 1220718750, 1220718755, 1220718775, 1220718780, 1220718875, 1220718880, 1220718900, 1220718905, 1220719375, 1220719380, 1220719400, 1220719405, 1220719500, 1220719505, 1220719525, 1220719530, 1220721875, 1220721880, 1220721900, 1220721905, 1220722000, 1220722005, 1220722025, 1220722030, 1220722500, 1220722505, 1220722525, 1220722530, 1220722625, 1220722630, 1220722650, 1220722655, 1220781250, 1220781255, 1220781275, 1220781280, 1220781375, 1220781380, 1220781400, 1220781405, 1220781875, 1220781880, 1220781900, 1220781905, 1220782000, 1220782005, 1220782025, 1220782030, 1220784375, 1220784380, 1220784400, 1220784405, 1220784500, 1220784505, 1220784525, 1220784530, 1220785000, 1220785005, 1220785025, 1220785030, 1220785125, 1220785130, 1220785150, 1220785155, 1220796875, 1220796880, 1220796900, 1220796905, 1220797000, 1220797005, 1220797025, 1220797030, 1220797500, 1220797505, 1220797525, 1220797530, 1220797625, 1220797630, 1220797650, 1220797655, 1220800000, 1220800005, 1220800025, 1220800030, 1220800125, 1220800130, 1220800150, 1220800155, 1220800625, 1220800630, 1220800650, 1220800655, 1220800750, 1220800755, 1220800775, 1220800780, 1221093750, 1221093755, 1221093775, 1221093780, 1221093875, 1221093880, 1221093900, 1221093905, 1221094375, 1221094380, 1221094400, 1221094405, 1221094500, 1221094505, 1221094525, 1221094530, 1221096875, 1221096880, 1221096900, 1221096905, 1221097000, 1221097005, 1221097025, 1221097030, 1221097500, 1221097505, 1221097525, 1221097530, 1221097625, 1221097630, 1221097650, 1221097655, 1221109375, 1221109380, 1221109400, 1221109405, 1221109500, 1221109505, 1221109525, 1221109530, 1221110000, 1221110005, 1221110025, 1221110030, 1221110125, 1221110130, 1221110150, 1221110155, 1221112500, 1221112505, 1221112525, 1221112530, 1221112625, 1221112630, 1221112650, 1221112655, 1221113125, 1221113130, 1221113150, 1221113155, 1221113250, 1221113255, 1221113275, 1221113280, 1221171875, 1221171880, 1221171900, 1221171905, 1221172000, 1221172005, 1221172025, 1221172030, 1221172500, 1221172505, 1221172525, 1221172530, 1221172625, 1221172630, 1221172650, 1221172655, 1221175000, 1221175005, 1221175025, 1221175030, 1221175125, 1221175130, 1221175150, 1221175155, 1221175625, 1221175630, 1221175650, 1221175655, 1221175750, 1221175755, 1221175775, 1221175780, 1221187500, 1221187505, 1221187525, 1221187530, 1221187625, 1221187630, 1221187650, 1221187655, 1221188125, 1221188130, 1221188150, 1221188155, 1221188250, 1221188255, 1221188275, 1221188280, 1221190625, 1221190630, 1221190650, 1221190655, 1221190750, 1221190755, 1221190775, 1221190780, 1221191250, 1221191255, 1221191275, 1221191280, 1221191375, 1221191380, 1221191400, 1221191405, 1222656250, 1222656255, 1222656275, 1222656280, 1222656375, 1222656380, 1222656400, 1222656405, 1222656875, 1222656880, 1222656900, 1222656905, 1222657000, 1222657005, 1222657025, 1222657030, 1222659375, 1222659380, 1222659400, 1222659405, 1222659500, 1222659505, 1222659525, 1222659530, 1222660000, 1222660005, 1222660025, 1222660030, 1222660125, 1222660130, 1222660150, 1222660155, 1222671875, 1222671880, 1222671900, 1222671905, 1222672000, 1222672005, 1222672025, 1222672030, 1222672500, 1222672505, 1222672525, 1222672530, 1222672625, 1222672630, 1222672650, 1222672655, 1222675000, 1222675005, 1222675025, 1222675030, 1222675125, 1222675130, 1222675150, 1222675155, 1222675625, 1222675630, 1222675650, 1222675655, 1222675750, 1222675755, 1222675775, 1222675780, 1222734375, 1222734380, 1222734400, 1222734405, 1222734500, 1222734505, 1222734525, 1222734530, 1222735000, 1222735005, 1222735025, 1222735030, 1222735125, 1222735130, 1222735150, 1222735155, 1222737500, 1222737505, 1222737525, 1222737530, 1222737625, 1222737630, 1222737650, 1222737655, 1222738125, 1222738130, 1222738150, 1222738155, 1222738250, 1222738255, 1222738275, 1222738280, 1222750000, 1222750005, 1222750025, 1222750030, 1222750125, 1222750130, 1222750150, 1222750155, 1222750625, 1222750630, 1222750650, 1222750655, 1222750750, 1222750755, 1222750775, 1222750780, 1222753125, 1222753130, 1222753150, 1222753155, 1222753250, 1222753255, 1222753275, 1222753280, 1222753750, 1222753755, 1222753775, 1222753780, 1222753875, 1222753880, 1222753900, 1222753905, 1223046875, 1223046880, 1223046900, 1223046905, 1223047000, 1223047005, 1223047025, 1223047030, 1223047500, 1223047505, 1223047525, 1223047530, 1223047625, 1223047630, 1223047650, 1223047655, 1223050000, 1223050005, 1223050025, 1223050030, 1223050125, 1223050130, 1223050150, 1223050155, 1223050625, 1223050630, 1223050650, 1223050655, 1223050750, 1223050755, 1223050775, 1223050780, 1223062500, 1223062505, 1223062525, 1223062530, 1223062625, 1223062630, 1223062650, 1223062655, 1223063125, 1223063130, 1223063150, 1223063155, 1223063250, 1223063255, 1223063275, 1223063280, 1223065625, 1223065630, 1223065650, 1223065655, 1223065750, 1223065755, 1223065775, 1223065780, 1223066250, 1223066255, 1223066275, 1223066280, 1223066375, 1223066380, 1223066400, 1223066405, 1223125000, 1223125005, 1223125025, 1223125030, 1223125125, 1223125130, 1223125150, 1223125155, 1223125625, 1223125630, 1223125650, 1223125655, 1223125750, 1223125755, 1223125775, 1223125780, 1223128125, 1223128130, 1223128150, 1223128155, 1223128250, 1223128255, 1223128275, 1223128280, 1223128750, 1223128755, 1223128775, 1223128780, 1223128875, 1223128880, 1223128900, 1223128905, 1223140625, 1223140630, 1223140650, 1223140655, 1223140750, 1223140755, 1223140775, 1223140780, 1223141250, 1223141255, 1223141275, 1223141280, 1223141375, 1223141380, 1223141400, 1223141405, 1223143750, 1223143755, 1223143775, 1223143780, 1223143875, 1223143880, 1223143900, 1223143905, 1223144375, 1223144380, 1223144400, 1223144405, 1223144500, 1223144505, 1223144525, 1223144530, 1230468750, 1230468755, 1230468775, 1230468780, 1230468875, 1230468880, 1230468900, 1230468905, 1230469375, 1230469380, 1230469400, 1230469405, 1230469500, 1230469505, 1230469525, 1230469530, 1230471875, 1230471880, 1230471900, 1230471905, 1230472000, 1230472005, 1230472025, 1230472030, 1230472500, 1230472505, 1230472525, 1230472530, 1230472625, 1230472630, 1230472650, 1230472655, 1230484375, 1230484380, 1230484400, 1230484405, 1230484500, 1230484505, 1230484525, 1230484530, 1230485000, 1230485005, 1230485025, 1230485030, 1230485125, 1230485130, 1230485150, 1230485155, 1230487500, 1230487505, 1230487525, 1230487530, 1230487625, 1230487630, 1230487650, 1230487655, 1230488125, 1230488130, 1230488150, 1230488155, 1230488250, 1230488255, 1230488275, 1230488280, 1230546875, 1230546880, 1230546900, 1230546905, 1230547000, 1230547005, 1230547025, 1230547030, 1230547500, 1230547505, 1230547525, 1230547530, 1230547625, 1230547630, 1230547650, 1230547655, 1230550000, 1230550005, 1230550025, 1230550030, 1230550125, 1230550130, 1230550150, 1230550155, 1230550625, 1230550630, 1230550650, 1230550655, 1230550750, 1230550755, 1230550775, 1230550780, 1230562500, 1230562505, 1230562525, 1230562530, 1230562625, 1230562630, 1230562650, 1230562655, 1230563125, 1230563130, 1230563150, 1230563155, 1230563250, 1230563255, 1230563275, 1230563280, 1230565625, 1230565630, 1230565650, 1230565655, 1230565750, 1230565755, 1230565775, 1230565780, 1230566250, 1230566255, 1230566275, 1230566280, 1230566375, 1230566380, 1230566400, 1230566405, 1230859375, 1230859380, 1230859400, 1230859405, 1230859500, 1230859505, 1230859525, 1230859530, 1230860000, 1230860005, 1230860025, 1230860030, 1230860125, 1230860130, 1230860150, 1230860155, 1230862500, 1230862505, 1230862525, 1230862530, 1230862625, 1230862630, 1230862650, 1230862655, 1230863125, 1230863130, 1230863150, 1230863155, 1230863250, 1230863255, 1230863275, 1230863280, 1230875000, 1230875005, 1230875025, 1230875030, 1230875125, 1230875130, 1230875150, 1230875155, 1230875625, 1230875630, 1230875650, 1230875655, 1230875750, 1230875755, 1230875775, 1230875780, 1230878125, 1230878130, 1230878150, 1230878155, 1230878250, 1230878255, 1230878275, 1230878280, 1230878750, 1230878755, 1230878775, 1230878780, 1230878875, 1230878880, 1230878900, 1230878905, 1230937500, 1230937505, 1230937525, 1230937530, 1230937625, 1230937630, 1230937650, 1230937655, 1230938125, 1230938130, 1230938150, 1230938155, 1230938250, 1230938255, 1230938275, 1230938280, 1230940625, 1230940630, 1230940650, 1230940655, 1230940750, 1230940755, 1230940775, 1230940780, 1230941250, 1230941255, 1230941275, 1230941280, 1230941375, 1230941380, 1230941400, 1230941405, 1230953125, 1230953130, 1230953150, 1230953155, 1230953250, 1230953255, 1230953275, 1230953280, 1230953750, 1230953755, 1230953775, 1230953780, 1230953875, 1230953880, 1230953900, 1230953905, 1230956250, 1230956255, 1230956275, 1230956280, 1230956375, 1230956380, 1230956400, 1230956405, 1230956875, 1230956880, 1230956900, 1230956905, 1230957000, 1230957005, 1230957025, 1230957030, 1232421875, 1232421880, 1232421900, 1232421905, 1232422000, 1232422005, 1232422025, 1232422030, 1232422500, 1232422505, 1232422525, 1232422530, 1232422625, 1232422630, 1232422650, 1232422655, 1232425000, 1232425005, 1232425025, 1232425030, 1232425125, 1232425130, 1232425150, 1232425155, 1232425625, 1232425630, 1232425650, 1232425655, 1232425750, 1232425755, 1232425775, 1232425780, 1232437500, 1232437505, 1232437525, 1232437530, 1232437625, 1232437630, 1232437650, 1232437655, 1232438125, 1232438130, 1232438150, 1232438155, 1232438250, 1232438255, 1232438275, 1232438280, 1232440625, 1232440630, 1232440650, 1232440655, 1232440750, 1232440755, 1232440775, 1232440780, 1232441250, 1232441255, 1232441275, 1232441280, 1232441375, 1232441380, 1232441400, 1232441405, 1232500000, 1232500005, 1232500025, 1232500030, 1232500125, 1232500130, 1232500150, 1232500155, 1232500625, 1232500630, 1232500650, 1232500655, 1232500750, 1232500755, 1232500775, 1232500780, 1232503125, 1232503130, 1232503150, 1232503155, 1232503250, 1232503255, 1232503275, 1232503280, 1232503750, 1232503755, 1232503775, 1232503780, 1232503875, 1232503880, 1232503900, 1232503905, 1232515625, 1232515630, 1232515650, 1232515655, 1232515750, 1232515755, 1232515775, 1232515780, 1232516250, 1232516255, 1232516275, 1232516280, 1232516375, 1232516380, 1232516400, 1232516405, 1232518750, 1232518755, 1232518775, 1232518780, 1232518875, 1232518880, 1232518900, 1232518905, 1232519375, 1232519380, 1232519400, 1232519405, 1232519500, 1232519505, 1232519525, 1232519530, 1232812500, 1232812505, 1232812525, 1232812530, 1232812625, 1232812630, 1232812650, 1232812655, 1232813125, 1232813130, 1232813150, 1232813155, 1232813250, 1232813255, 1232813275, 1232813280, 1232815625, 1232815630, 1232815650, 1232815655, 1232815750, 1232815755, 1232815775, 1232815780, 1232816250, 1232816255, 1232816275, 1232816280, 1232816375, 1232816380, 1232816400, 1232816405, 1232828125, 1232828130, 1232828150, 1232828155, 1232828250, 1232828255, 1232828275, 1232828280, 1232828750, 1232828755, 1232828775, 1232828780, 1232828875, 1232828880, 1232828900, 1232828905, 1232831250, 1232831255, 1232831275, 1232831280, 1232831375, 1232831380, 1232831400, 1232831405, 1232831875, 1232831880, 1232831900, 1232831905, 1232832000, 1232832005, 1232832025, 1232832030, 1232890625, 1232890630, 1232890650, 1232890655, 1232890750, 1232890755, 1232890775, 1232890780, 1232891250, 1232891255, 1232891275, 1232891280, 1232891375, 1232891380, 1232891400, 1232891405, 1232893750, 1232893755, 1232893775, 1232893780, 1232893875, 1232893880, 1232893900, 1232893905, 1232894375, 1232894380, 1232894400, 1232894405, 1232894500, 1232894505, 1232894525, 1232894530, 1232906250, 1232906255, 1232906275, 1232906280, 1232906375, 1232906380, 1232906400, 1232906405, 1232906875, 1232906880, 1232906900, 1232906905, 1232907000, 1232907005, 1232907025, 1232907030, 1232909375, 1232909380, 1232909400, 1232909405, 1232909500, 1232909505, 1232909525, 1232909530, 1232910000, 1232910005, 1232910025, 1232910030, 1232910125, 1232910130, 1232910150, 1232910155, 1269531250, 1269531255, 1269531275, 1269531280, 1269531375, 1269531380, 1269531400, 1269531405, 1269531875, 1269531880, 1269531900, 1269531905, 1269532000, 1269532005, 1269532025, 1269532030, 1269534375, 1269534380, 1269534400, 1269534405, 1269534500, 1269534505, 1269534525, 1269534530, 1269535000, 1269535005, 1269535025, 1269535030, 1269535125, 1269535130, 1269535150, 1269535155, 1269546875, 1269546880, 1269546900, 1269546905, 1269547000, 1269547005, 1269547025, 1269547030, 1269547500, 1269547505, 1269547525, 1269547530, 1269547625, 1269547630, 1269547650, 1269547655, 1269550000, 1269550005, 1269550025, 1269550030, 1269550125, 1269550130, 1269550150, 1269550155, 1269550625, 1269550630, 1269550650, 1269550655, 1269550750, 1269550755, 1269550775, 1269550780, 1269609375, 1269609380, 1269609400, 1269609405, 1269609500, 1269609505, 1269609525, 1269609530, 1269610000, 1269610005, 1269610025, 1269610030, 1269610125, 1269610130, 1269610150, 1269610155, 1269612500, 1269612505, 1269612525, 1269612530, 1269612625, 1269612630, 1269612650, 1269612655, 1269613125, 1269613130, 1269613150, 1269613155, 1269613250, 1269613255, 1269613275, 1269613280, 1269625000, 1269625005, 1269625025, 1269625030, 1269625125, 1269625130, 1269625150, 1269625155, 1269625625, 1269625630, 1269625650, 1269625655, 1269625750, 1269625755, 1269625775, 1269625780, 1269628125, 1269628130, 1269628150, 1269628155, 1269628250, 1269628255, 1269628275, 1269628280, 1269628750, 1269628755, 1269628775, 1269628780, 1269628875, 1269628880, 1269628900, 1269628905, 1269921875, 1269921880, 1269921900, 1269921905, 1269922000, 1269922005, 1269922025, 1269922030, 1269922500, 1269922505, 1269922525, 1269922530, 1269922625, 1269922630, 1269922650, 1269922655, 1269925000, 1269925005, 1269925025, 1269925030, 1269925125, 1269925130, 1269925150, 1269925155, 1269925625, 1269925630, 1269925650, 1269925655, 1269925750, 1269925755, 1269925775, 1269925780, 1269937500, 1269937505, 1269937525, 1269937530, 1269937625, 1269937630, 1269937650, 1269937655, 1269938125, 1269938130, 1269938150, 1269938155, 1269938250, 1269938255, 1269938275, 1269938280, 1269940625, 1269940630, 1269940650, 1269940655, 1269940750, 1269940755, 1269940775, 1269940780, 1269941250, 1269941255, 1269941275, 1269941280, 1269941375, 1269941380, 1269941400, 1269941405, 1270000000, 1270000005, 1270000025, 1270000030, 1270000125, 1270000130, 1270000150, 1270000155, 1270000625, 1270000630, 1270000650, 1270000655, 1270000750, 1270000755, 1270000775, 1270000780, 1270003125, 1270003130, 1270003150, 1270003155, 1270003250, 1270003255, 1270003275, 1270003280, 1270003750, 1270003755, 1270003775, 1270003780, 1270003875, 1270003880, 1270003900, 1270003905, 1270015625, 1270015630, 1270015650, 1270015655, 1270015750, 1270015755, 1270015775, 1270015780, 1270016250, 1270016255, 1270016275, 1270016280, 1270016375, 1270016380, 1270016400, 1270016405, 1270018750, 1270018755, 1270018775, 1270018780, 1270018875, 1270018880, 1270018900, 1270018905, 1270019375, 1270019380, 1270019400, 1270019405, 1270019500, 1270019505, 1270019525, 1270019530, 1271484375, 1271484380, 1271484400, 1271484405, 1271484500, 1271484505, 1271484525, 1271484530, 1271485000, 1271485005, 1271485025, 1271485030, 1271485125, 1271485130, 1271485150, 1271485155, 1271487500, 1271487505, 1271487525, 1271487530, 1271487625, 1271487630, 1271487650, 1271487655, 1271488125, 1271488130, 1271488150, 1271488155, 1271488250, 1271488255, 1271488275, 1271488280, 1271500000, 1271500005, 1271500025, 1271500030, 1271500125, 1271500130, 1271500150, 1271500155, 1271500625, 1271500630, 1271500650, 1271500655, 1271500750, 1271500755, 1271500775, 1271500780, 1271503125, 1271503130, 1271503150, 1271503155, 1271503250, 1271503255, 1271503275, 1271503280, 1271503750, 1271503755, 1271503775, 1271503780, 1271503875, 1271503880, 1271503900, 1271503905, 1271562500, 1271562505, 1271562525, 1271562530, 1271562625, 1271562630, 1271562650, 1271562655, 1271563125, 1271563130, 1271563150, 1271563155, 1271563250, 1271563255, 1271563275, 1271563280, 1271565625, 1271565630, 1271565650, 1271565655, 1271565750, 1271565755, 1271565775, 1271565780, 1271566250, 1271566255, 1271566275, 1271566280, 1271566375, 1271566380, 1271566400, 1271566405, 1271578125, 1271578130, 1271578150, 1271578155, 1271578250, 1271578255, 1271578275, 1271578280, 1271578750, 1271578755, 1271578775, 1271578780, 1271578875, 1271578880, 1271578900, 1271578905, 1271581250, 1271581255, 1271581275, 1271581280, 1271581375, 1271581380, 1271581400, 1271581405, 1271581875, 1271581880, 1271581900, 1271581905, 1271582000, 1271582005, 1271582025, 1271582030, 1271875000, 1271875005, 1271875025, 1271875030, 1271875125, 1271875130, 1271875150, 1271875155, 1271875625, 1271875630, 1271875650, 1271875655, 1271875750, 1271875755, 1271875775, 1271875780, 1271878125, 1271878130, 1271878150, 1271878155, 1271878250, 1271878255, 1271878275, 1271878280, 1271878750, 1271878755, 1271878775, 1271878780, 1271878875, 1271878880, 1271878900, 1271878905, 1271890625, 1271890630, 1271890650, 1271890655, 1271890750, 1271890755, 1271890775, 1271890780, 1271891250, 1271891255, 1271891275, 1271891280, 1271891375, 1271891380, 1271891400, 1271891405, 1271893750, 1271893755, 1271893775, 1271893780, 1271893875, 1271893880, 1271893900, 1271893905, 1271894375, 1271894380, 1271894400, 1271894405, 1271894500, 1271894505, 1271894525, 1271894530, 1271953125, 1271953130, 1271953150, 1271953155, 1271953250, 1271953255, 1271953275, 1271953280, 1271953750, 1271953755, 1271953775, 1271953780, 1271953875, 1271953880, 1271953900, 1271953905, 1271956250, 1271956255, 1271956275, 1271956280, 1271956375, 1271956380, 1271956400, 1271956405, 1271956875, 1271956880, 1271956900, 1271956905, 1271957000, 1271957005, 1271957025, 1271957030, 1271968750, 1271968755, 1271968775, 1271968780, 1271968875, 1271968880, 1271968900, 1271968905, 1271969375, 1271969380, 1271969400, 1271969405, 1271969500, 1271969505, 1271969525, 1271969530, 1271971875, 1271971880, 1271971900, 1271971905, 1271972000, 1271972005, 1271972025, 1271972030, 1271972500, 1271972505, 1271972525, 1271972530, 1271972625, 1271972630, 1271972650, 1271972655, 1279296875, 1279296880, 1279296900, 1279296905, 1279297000, 1279297005, 1279297025, 1279297030, 1279297500, 1279297505, 1279297525, 1279297530, 1279297625, 1279297630, 1279297650, 1279297655, 1279300000, 1279300005, 1279300025, 1279300030, 1279300125, 1279300130, 1279300150, 1279300155, 1279300625, 1279300630, 1279300650, 1279300655, 1279300750, 1279300755, 1279300775, 1279300780, 1279312500, 1279312505, 1279312525, 1279312530, 1279312625, 1279312630, 1279312650, 1279312655, 1279313125, 1279313130, 1279313150, 1279313155, 1279313250, 1279313255, 1279313275, 1279313280, 1279315625, 1279315630, 1279315650, 1279315655, 1279315750, 1279315755, 1279315775, 1279315780, 1279316250, 1279316255, 1279316275, 1279316280, 1279316375, 1279316380, 1279316400, 1279316405, 1279375000, 1279375005, 1279375025, 1279375030, 1279375125, 1279375130, 1279375150, 1279375155, 1279375625, 1279375630, 1279375650, 1279375655, 1279375750, 1279375755, 1279375775, 1279375780, 1279378125, 1279378130, 1279378150, 1279378155, 1279378250, 1279378255, 1279378275, 1279378280, 1279378750, 1279378755, 1279378775, 1279378780, 1279378875, 1279378880, 1279378900, 1279378905, 1279390625, 1279390630, 1279390650, 1279390655, 1279390750, 1279390755, 1279390775, 1279390780, 1279391250, 1279391255, 1279391275, 1279391280, 1279391375, 1279391380, 1279391400, 1279391405, 1279393750, 1279393755, 1279393775, 1279393780, 1279393875, 1279393880, 1279393900, 1279393905, 1279394375, 1279394380, 1279394400, 1279394405, 1279394500, 1279394505, 1279394525, 1279394530, 1279687500, 1279687505, 1279687525, 1279687530, 1279687625, 1279687630, 1279687650, 1279687655, 1279688125, 1279688130, 1279688150, 1279688155, 1279688250, 1279688255, 1279688275, 1279688280, 1279690625, 1279690630, 1279690650, 1279690655, 1279690750, 1279690755, 1279690775, 1279690780, 1279691250, 1279691255, 1279691275, 1279691280, 1279691375, 1279691380, 1279691400, 1279691405, 1279703125, 1279703130, 1279703150, 1279703155, 1279703250, 1279703255, 1279703275, 1279703280, 1279703750, 1279703755, 1279703775, 1279703780, 1279703875, 1279703880, 1279703900, 1279703905, 1279706250, 1279706255, 1279706275, 1279706280, 1279706375, 1279706380, 1279706400, 1279706405, 1279706875, 1279706880, 1279706900, 1279706905, 1279707000, 1279707005, 1279707025, 1279707030, 1279765625, 1279765630, 1279765650, 1279765655, 1279765750, 1279765755, 1279765775, 1279765780, 1279766250, 1279766255, 1279766275, 1279766280, 1279766375, 1279766380, 1279766400, 1279766405, 1279768750, 1279768755, 1279768775, 1279768780, 1279768875, 1279768880, 1279768900, 1279768905, 1279769375, 1279769380, 1279769400, 1279769405, 1279769500, 1279769505, 1279769525, 1279769530, 1279781250, 1279781255, 1279781275, 1279781280, 1279781375, 1279781380, 1279781400, 1279781405, 1279781875, 1279781880, 1279781900, 1279781905, 1279782000, 1279782005, 1279782025, 1279782030, 1279784375, 1279784380, 1279784400, 1279784405, 1279784500, 1279784505, 1279784525, 1279784530, 1279785000, 1279785005, 1279785025, 1279785030, 1279785125, 1279785130, 1279785150, 1279785155, 1281250000, 1281250005, 1281250025, 1281250030, 1281250125, 1281250130, 1281250150, 1281250155, 1281250625, 1281250630, 1281250650, 1281250655, 1281250750, 1281250755, 1281250775, 1281250780, 1281253125, 1281253130, 1281253150, 1281253155, 1281253250, 1281253255, 1281253275, 1281253280, 1281253750, 1281253755, 1281253775, 1281253780, 1281253875, 1281253880, 1281253900, 1281253905, 1281265625, 1281265630, 1281265650, 1281265655, 1281265750, 1281265755, 1281265775, 1281265780, 1281266250, 1281266255, 1281266275, 1281266280, 1281266375, 1281266380, 1281266400, 1281266405, 1281268750, 1281268755, 1281268775, 1281268780, 1281268875, 1281268880, 1281268900, 1281268905, 1281269375, 1281269380, 1281269400, 1281269405, 1281269500, 1281269505, 1281269525, 1281269530, 1281328125, 1281328130, 1281328150, 1281328155, 1281328250, 1281328255, 1281328275, 1281328280, 1281328750, 1281328755, 1281328775, 1281328780, 1281328875, 1281328880, 1281328900, 1281328905, 1281331250, 1281331255, 1281331275, 1281331280, 1281331375, 1281331380, 1281331400, 1281331405, 1281331875, 1281331880, 1281331900, 1281331905, 1281332000, 1281332005, 1281332025, 1281332030, 1281343750, 1281343755, 1281343775, 1281343780, 1281343875, 1281343880, 1281343900, 1281343905, 1281344375, 1281344380, 1281344400, 1281344405, 1281344500, 1281344505, 1281344525, 1281344530, 1281346875, 1281346880, 1281346900, 1281346905, 1281347000, 1281347005, 1281347025, 1281347030, 1281347500, 1281347505, 1281347525, 1281347530, 1281347625, 1281347630, 1281347650, 1281347655, 1281640625, 1281640630, 1281640650, 1281640655, 1281640750, 1281640755, 1281640775, 1281640780, 1281641250, 1281641255, 1281641275, 1281641280, 1281641375, 1281641380, 1281641400, 1281641405, 1281643750, 1281643755, 1281643775, 1281643780, 1281643875, 1281643880, 1281643900, 1281643905, 1281644375, 1281644380, 1281644400, 1281644405, 1281644500, 1281644505, 1281644525, 1281644530, 1281656250, 1281656255, 1281656275, 1281656280, 1281656375, 1281656380, 1281656400, 1281656405, 1281656875, 1281656880, 1281656900, 1281656905, 1281657000, 1281657005, 1281657025, 1281657030, 1281659375, 1281659380, 1281659400, 1281659405, 1281659500, 1281659505, 1281659525, 1281659530, 1281660000, 1281660005, 1281660025, 1281660030, 1281660125, 1281660130, 1281660150, 1281660155, 1281718750, 1281718755, 1281718775, 1281718780, 1281718875, 1281718880, 1281718900, 1281718905, 1281719375, 1281719380, 1281719400, 1281719405, 1281719500, 1281719505, 1281719525, 1281719530, 1281721875, 1281721880, 1281721900, 1281721905, 1281722000, 1281722005, 1281722025, 1281722030, 1281722500, 1281722505, 1281722525, 1281722530, 1281722625, 1281722630, 1281722650, 1281722655, 1281734375, 1281734380, 1281734400, 1281734405, 1281734500, 1281734505, 1281734525, 1281734530, 1281735000, 1281735005, 1281735025, 1281735030, 1281735125, 1281735130, 1281735150, 1281735155, 1281737500, 1281737505, 1281737525, 1281737530, 1281737625, 1281737630, 1281737650, 1281737655, 1281738125, 1281738130, 1281738150, 1281738155, 1281738250, 1281738255, 1281738275, 1281738280, 1464843750, 1464843755, 1464843775, 1464843780, 1464843875, 1464843880, 1464843900, 1464843905, 1464844375, 1464844380, 1464844400, 1464844405, 1464844500, 1464844505, 1464844525, 1464844530, 1464846875, 1464846880, 1464846900, 1464846905, 1464847000, 1464847005, 1464847025, 1464847030, 1464847500, 1464847505, 1464847525, 1464847530, 1464847625, 1464847630, 1464847650, 1464847655, 1464859375, 1464859380, 1464859400, 1464859405, 1464859500, 1464859505, 1464859525, 1464859530, 1464860000, 1464860005, 1464860025, 1464860030, 1464860125, 1464860130, 1464860150, 1464860155, 1464862500, 1464862505, 1464862525, 1464862530, 1464862625, 1464862630, 1464862650, 1464862655, 1464863125, 1464863130, 1464863150, 1464863155, 1464863250, 1464863255, 1464863275, 1464863280, 1464921875, 1464921880, 1464921900, 1464921905, 1464922000, 1464922005, 1464922025, 1464922030, 1464922500, 1464922505, 1464922525, 1464922530, 1464922625, 1464922630, 1464922650, 1464922655, 1464925000, 1464925005, 1464925025, 1464925030, 1464925125, 1464925130, 1464925150, 1464925155, 1464925625, 1464925630, 1464925650, 1464925655, 1464925750, 1464925755, 1464925775, 1464925780, 1464937500, 1464937505, 1464937525, 1464937530, 1464937625, 1464937630, 1464937650, 1464937655, 1464938125, 1464938130, 1464938150, 1464938155, 1464938250, 1464938255, 1464938275, 1464938280, 1464940625, 1464940630, 1464940650, 1464940655, 1464940750, 1464940755, 1464940775, 1464940780, 1464941250, 1464941255, 1464941275, 1464941280, 1464941375, 1464941380, 1464941400, 1464941405, 1465234375, 1465234380, 1465234400, 1465234405, 1465234500, 1465234505, 1465234525, 1465234530, 1465235000, 1465235005, 1465235025, 1465235030, 1465235125, 1465235130, 1465235150, 1465235155, 1465237500, 1465237505, 1465237525, 1465237530, 1465237625, 1465237630, 1465237650, 1465237655, 1465238125, 1465238130, 1465238150, 1465238155, 1465238250, 1465238255, 1465238275, 1465238280, 1465250000, 1465250005, 1465250025, 1465250030, 1465250125, 1465250130, 1465250150, 1465250155, 1465250625, 1465250630, 1465250650, 1465250655, 1465250750, 1465250755, 1465250775, 1465250780, 1465253125, 1465253130, 1465253150, 1465253155, 1465253250, 1465253255, 1465253275, 1465253280, 1465253750, 1465253755, 1465253775, 1465253780, 1465253875, 1465253880, 1465253900, 1465253905, 1465312500, 1465312505, 1465312525, 1465312530, 1465312625, 1465312630, 1465312650, 1465312655, 1465313125, 1465313130, 1465313150, 1465313155, 1465313250, 1465313255, 1465313275, 1465313280, 1465315625, 1465315630, 1465315650, 1465315655, 1465315750, 1465315755, 1465315775, 1465315780, 1465316250, 1465316255, 1465316275, 1465316280, 1465316375, 1465316380, 1465316400, 1465316405, 1465328125, 1465328130, 1465328150, 1465328155, 1465328250, 1465328255, 1465328275, 1465328280, 1465328750, 1465328755, 1465328775, 1465328780, 1465328875, 1465328880, 1465328900, 1465328905, 1465331250, 1465331255, 1465331275, 1465331280, 1465331375, 1465331380, 1465331400, 1465331405, 1465331875, 1465331880, 1465331900, 1465331905, 1465332000, 1465332005, 1465332025, 1465332030, 1466796875, 1466796880, 1466796900, 1466796905, 1466797000, 1466797005, 1466797025, 1466797030, 1466797500, 1466797505, 1466797525, 1466797530, 1466797625, 1466797630, 1466797650, 1466797655, 1466800000, 1466800005, 1466800025, 1466800030, 1466800125, 1466800130, 1466800150, 1466800155, 1466800625, 1466800630, 1466800650, 1466800655, 1466800750, 1466800755, 1466800775, 1466800780, 1466812500, 1466812505, 1466812525, 1466812530, 1466812625, 1466812630, 1466812650, 1466812655, 1466813125, 1466813130, 1466813150, 1466813155, 1466813250, 1466813255, 1466813275, 1466813280, 1466815625, 1466815630, 1466815650, 1466815655, 1466815750, 1466815755, 1466815775, 1466815780, 1466816250, 1466816255, 1466816275, 1466816280, 1466816375, 1466816380, 1466816400, 1466816405, 1466875000, 1466875005, 1466875025, 1466875030, 1466875125, 1466875130, 1466875150, 1466875155, 1466875625, 1466875630, 1466875650, 1466875655, 1466875750, 1466875755, 1466875775, 1466875780, 1466878125, 1466878130, 1466878150, 1466878155, 1466878250, 1466878255, 1466878275, 1466878280, 1466878750, 1466878755, 1466878775, 1466878780, 1466878875, 1466878880, 1466878900, 1466878905, 1466890625, 1466890630, 1466890650, 1466890655, 1466890750, 1466890755, 1466890775, 1466890780, 1466891250, 1466891255, 1466891275, 1466891280, 1466891375, 1466891380, 1466891400, 1466891405, 1466893750, 1466893755, 1466893775, 1466893780, 1466893875, 1466893880, 1466893900, 1466893905, 1466894375, 1466894380, 1466894400, 1466894405, 1466894500, 1466894505, 1466894525, 1466894530, 1467187500, 1467187505, 1467187525, 1467187530, 1467187625, 1467187630, 1467187650, 1467187655, 1467188125, 1467188130, 1467188150, 1467188155, 1467188250, 1467188255, 1467188275, 1467188280, 1467190625, 1467190630, 1467190650, 1467190655, 1467190750, 1467190755, 1467190775, 1467190780, 1467191250, 1467191255, 1467191275, 1467191280, 1467191375, 1467191380, 1467191400, 1467191405, 1467203125, 1467203130, 1467203150, 1467203155, 1467203250, 1467203255, 1467203275, 1467203280, 1467203750, 1467203755, 1467203775, 1467203780, 1467203875, 1467203880, 1467203900, 1467203905, 1467206250, 1467206255, 1467206275, 1467206280, 1467206375, 1467206380, 1467206400, 1467206405, 1467206875, 1467206880, 1467206900, 1467206905, 1467207000, 1467207005, 1467207025, 1467207030, 1467265625, 1467265630, 1467265650, 1467265655, 1467265750, 1467265755, 1467265775, 1467265780, 1467266250, 1467266255, 1467266275, 1467266280, 1467266375, 1467266380, 1467266400, 1467266405, 1467268750, 1467268755, 1467268775, 1467268780, 1467268875, 1467268880, 1467268900, 1467268905, 1467269375, 1467269380, 1467269400, 1467269405, 1467269500, 1467269505, 1467269525, 1467269530, 1467281250, 1467281255, 1467281275, 1467281280, 1467281375, 1467281380, 1467281400, 1467281405, 1467281875, 1467281880, 1467281900, 1467281905, 1467282000, 1467282005, 1467282025, 1467282030, 1467284375, 1467284380, 1467284400, 1467284405, 1467284500, 1467284505, 1467284525, 1467284530, 1467285000, 1467285005, 1467285025, 1467285030, 1467285125, 1467285130, 1467285150, 1467285155, 1474609375, 1474609380, 1474609400, 1474609405, 1474609500, 1474609505, 1474609525, 1474609530, 1474610000, 1474610005, 1474610025, 1474610030, 1474610125, 1474610130, 1474610150, 1474610155, 1474612500, 1474612505, 1474612525, 1474612530, 1474612625, 1474612630, 1474612650, 1474612655, 1474613125, 1474613130, 1474613150, 1474613155, 1474613250, 1474613255, 1474613275, 1474613280, 1474625000, 1474625005, 1474625025, 1474625030, 1474625125, 1474625130, 1474625150, 1474625155, 1474625625, 1474625630, 1474625650, 1474625655, 1474625750, 1474625755, 1474625775, 1474625780, 1474628125, 1474628130, 1474628150, 1474628155, 1474628250, 1474628255, 1474628275, 1474628280, 1474628750, 1474628755, 1474628775, 1474628780, 1474628875, 1474628880, 1474628900, 1474628905, 1474687500, 1474687505, 1474687525, 1474687530, 1474687625, 1474687630, 1474687650, 1474687655, 1474688125, 1474688130, 1474688150, 1474688155, 1474688250, 1474688255, 1474688275, 1474688280, 1474690625, 1474690630, 1474690650, 1474690655, 1474690750, 1474690755, 1474690775, 1474690780, 1474691250, 1474691255, 1474691275, 1474691280, 1474691375, 1474691380, 1474691400, 1474691405, 1474703125, 1474703130, 1474703150, 1474703155, 1474703250, 1474703255, 1474703275, 1474703280, 1474703750, 1474703755, 1474703775, 1474703780, 1474703875, 1474703880, 1474703900, 1474703905, 1474706250, 1474706255, 1474706275, 1474706280, 1474706375, 1474706380, 1474706400, 1474706405, 1474706875, 1474706880, 1474706900, 1474706905, 1474707000, 1474707005, 1474707025, 1474707030, 1475000000, 1475000005, 1475000025, 1475000030, 1475000125, 1475000130, 1475000150, 1475000155, 1475000625, 1475000630, 1475000650, 1475000655, 1475000750, 1475000755, 1475000775, 1475000780, 1475003125, 1475003130, 1475003150, 1475003155, 1475003250, 1475003255, 1475003275, 1475003280, 1475003750, 1475003755, 1475003775, 1475003780, 1475003875, 1475003880, 1475003900, 1475003905, 1475015625, 1475015630, 1475015650, 1475015655, 1475015750, 1475015755, 1475015775, 1475015780, 1475016250, 1475016255, 1475016275, 1475016280, 1475016375, 1475016380, 1475016400, 1475016405, 1475018750, 1475018755, 1475018775, 1475018780, 1475018875, 1475018880, 1475018900, 1475018905, 1475019375, 1475019380, 1475019400, 1475019405, 1475019500, 1475019505, 1475019525, 1475019530, 1475078125, 1475078130, 1475078150, 1475078155, 1475078250, 1475078255, 1475078275, 1475078280, 1475078750, 1475078755, 1475078775, 1475078780, 1475078875, 1475078880, 1475078900, 1475078905, 1475081250, 1475081255, 1475081275, 1475081280, 1475081375, 1475081380, 1475081400, 1475081405, 1475081875, 1475081880, 1475081900, 1475081905, 1475082000, 1475082005, 1475082025, 1475082030, 1475093750, 1475093755, 1475093775, 1475093780, 1475093875, 1475093880, 1475093900, 1475093905, 1475094375, 1475094380, 1475094400, 1475094405, 1475094500, 1475094505, 1475094525, 1475094530, 1475096875, 1475096880, 1475096900, 1475096905, 1475097000, 1475097005, 1475097025, 1475097030, 1475097500, 1475097505, 1475097525, 1475097530, 1475097625, 1475097630, 1475097650, 1475097655, 1476562500, 1476562505, 1476562525, 1476562530, 1476562625, 1476562630, 1476562650, 1476562655, 1476563125, 1476563130, 1476563150, 1476563155, 1476563250, 1476563255, 1476563275, 1476563280, 1476565625, 1476565630, 1476565650, 1476565655, 1476565750, 1476565755, 1476565775, 1476565780, 1476566250, 1476566255, 1476566275, 1476566280, 1476566375, 1476566380, 1476566400, 1476566405, 1476578125, 1476578130, 1476578150, 1476578155, 1476578250, 1476578255, 1476578275, 1476578280, 1476578750, 1476578755, 1476578775, 1476578780, 1476578875, 1476578880, 1476578900, 1476578905, 1476581250, 1476581255, 1476581275, 1476581280, 1476581375, 1476581380, 1476581400, 1476581405, 1476581875, 1476581880, 1476581900, 1476581905, 1476582000, 1476582005, 1476582025, 1476582030, 1476640625, 1476640630, 1476640650, 1476640655, 1476640750, 1476640755, 1476640775, 1476640780, 1476641250, 1476641255, 1476641275, 1476641280, 1476641375, 1476641380, 1476641400, 1476641405, 1476643750, 1476643755, 1476643775, 1476643780, 1476643875, 1476643880, 1476643900, 1476643905, 1476644375, 1476644380, 1476644400, 1476644405, 1476644500, 1476644505, 1476644525, 1476644530, 1476656250, 1476656255, 1476656275, 1476656280, 1476656375, 1476656380, 1476656400, 1476656405, 1476656875, 1476656880, 1476656900, 1476656905, 1476657000, 1476657005, 1476657025, 1476657030, 1476659375, 1476659380, 1476659400, 1476659405, 1476659500, 1476659505, 1476659525, 1476659530, 1476660000, 1476660005, 1476660025, 1476660030, 1476660125, 1476660130, 1476660150, 1476660155, 1476953125, 1476953130, 1476953150, 1476953155, 1476953250, 1476953255, 1476953275, 1476953280, 1476953750, 1476953755, 1476953775, 1476953780, 1476953875, 1476953880, 1476953900, 1476953905, 1476956250, 1476956255, 1476956275, 1476956280, 1476956375, 1476956380, 1476956400, 1476956405, 1476956875, 1476956880, 1476956900, 1476956905, 1476957000, 1476957005, 1476957025, 1476957030, 1476968750, 1476968755, 1476968775, 1476968780, 1476968875, 1476968880, 1476968900, 1476968905, 1476969375, 1476969380, 1476969400, 1476969405, 1476969500, 1476969505, 1476969525, 1476969530, 1476971875, 1476971880, 1476971900, 1476971905, 1476972000, 1476972005, 1476972025, 1476972030, 1476972500, 1476972505, 1476972525, 1476972530, 1476972625, 1476972630, 1476972650, 1476972655, 1477031250, 1477031255, 1477031275, 1477031280, 1477031375, 1477031380, 1477031400, 1477031405, 1477031875, 1477031880, 1477031900, 1477031905, 1477032000, 1477032005, 1477032025, 1477032030, 1477034375, 1477034380, 1477034400, 1477034405, 1477034500, 1477034505, 1477034525, 1477034530, 1477035000, 1477035005, 1477035025, 1477035030, 1477035125, 1477035130, 1477035150, 1477035155, 1477046875, 1477046880, 1477046900, 1477046905, 1477047000, 1477047005, 1477047025, 1477047030, 1477047500, 1477047505, 1477047525, 1477047530, 1477047625, 1477047630, 1477047650, 1477047655, 1477050000, 1477050005, 1477050025, 1477050030, 1477050125, 1477050130, 1477050150, 1477050155, 1477050625, 1477050630, 1477050650, 1477050655, 1477050750, 1477050755, 1477050775, 1477050780, 1513671875, 1513671880, 1513671900, 1513671905, 1513672000, 1513672005, 1513672025, 1513672030, 1513672500, 1513672505, 1513672525, 1513672530, 1513672625, 1513672630, 1513672650, 1513672655, 1513675000, 1513675005, 1513675025, 1513675030, 1513675125, 1513675130, 1513675150, 1513675155, 1513675625, 1513675630, 1513675650, 1513675655, 1513675750, 1513675755, 1513675775, 1513675780, 1513687500, 1513687505, 1513687525, 1513687530, 1513687625, 1513687630, 1513687650, 1513687655, 1513688125, 1513688130, 1513688150, 1513688155, 1513688250, 1513688255, 1513688275, 1513688280, 1513690625, 1513690630, 1513690650, 1513690655, 1513690750, 1513690755, 1513690775, 1513690780, 1513691250, 1513691255, 1513691275, 1513691280, 1513691375, 1513691380, 1513691400, 1513691405, 1513750000, 1513750005, 1513750025, 1513750030, 1513750125, 1513750130, 1513750150, 1513750155, 1513750625, 1513750630, 1513750650, 1513750655, 1513750750, 1513750755, 1513750775, 1513750780, 1513753125, 1513753130, 1513753150, 1513753155, 1513753250, 1513753255, 1513753275, 1513753280, 1513753750, 1513753755, 1513753775, 1513753780, 1513753875, 1513753880, 1513753900, 1513753905, 1513765625, 1513765630, 1513765650, 1513765655, 1513765750, 1513765755, 1513765775, 1513765780, 1513766250, 1513766255, 1513766275, 1513766280, 1513766375, 1513766380, 1513766400, 1513766405, 1513768750, 1513768755, 1513768775, 1513768780, 1513768875, 1513768880, 1513768900, 1513768905, 1513769375, 1513769380, 1513769400, 1513769405, 1513769500, 1513769505, 1513769525, 1513769530, 1514062500, 1514062505, 1514062525, 1514062530, 1514062625, 1514062630, 1514062650, 1514062655, 1514063125, 1514063130, 1514063150, 1514063155, 1514063250, 1514063255, 1514063275, 1514063280, 1514065625, 1514065630, 1514065650, 1514065655, 1514065750, 1514065755, 1514065775, 1514065780, 1514066250, 1514066255, 1514066275, 1514066280, 1514066375, 1514066380, 1514066400, 1514066405, 1514078125, 1514078130, 1514078150, 1514078155, 1514078250, 1514078255, 1514078275, 1514078280, 1514078750, 1514078755, 1514078775, 1514078780, 1514078875, 1514078880, 1514078900, 1514078905, 1514081250, 1514081255, 1514081275, 1514081280, 1514081375, 1514081380, 1514081400, 1514081405, 1514081875, 1514081880, 1514081900, 1514081905, 1514082000, 1514082005, 1514082025, 1514082030, 1514140625, 1514140630, 1514140650, 1514140655, 1514140750, 1514140755, 1514140775, 1514140780, 1514141250, 1514141255, 1514141275, 1514141280, 1514141375, 1514141380, 1514141400, 1514141405, 1514143750, 1514143755, 1514143775, 1514143780, 1514143875, 1514143880, 1514143900, 1514143905, 1514144375, 1514144380, 1514144400, 1514144405, 1514144500, 1514144505, 1514144525, 1514144530, 1514156250, 1514156255, 1514156275, 1514156280, 1514156375, 1514156380, 1514156400, 1514156405, 1514156875, 1514156880, 1514156900, 1514156905, 1514157000, 1514157005, 1514157025, 1514157030, 1514159375, 1514159380, 1514159400, 1514159405, 1514159500, 1514159505, 1514159525, 1514159530, 1514160000, 1514160005, 1514160025, 1514160030, 1514160125, 1514160130, 1514160150, 1514160155, 1515625000, 1515625005, 1515625025, 1515625030, 1515625125, 1515625130, 1515625150, 1515625155, 1515625625, 1515625630, 1515625650, 1515625655, 1515625750, 1515625755, 1515625775, 1515625780, 1515628125, 1515628130, 1515628150, 1515628155, 1515628250, 1515628255, 1515628275, 1515628280, 1515628750, 1515628755, 1515628775, 1515628780, 1515628875, 1515628880, 1515628900, 1515628905, 1515640625, 1515640630, 1515640650, 1515640655, 1515640750, 1515640755, 1515640775, 1515640780, 1515641250, 1515641255, 1515641275, 1515641280, 1515641375, 1515641380, 1515641400, 1515641405, 1515643750, 1515643755, 1515643775, 1515643780, 1515643875, 1515643880, 1515643900, 1515643905, 1515644375, 1515644380, 1515644400, 1515644405, 1515644500, 1515644505, 1515644525, 1515644530, 1515703125, 1515703130, 1515703150, 1515703155, 1515703250, 1515703255, 1515703275, 1515703280, 1515703750, 1515703755, 1515703775, 1515703780, 1515703875, 1515703880, 1515703900, 1515703905, 1515706250, 1515706255, 1515706275, 1515706280, 1515706375, 1515706380, 1515706400, 1515706405, 1515706875, 1515706880, 1515706900, 1515706905, 1515707000, 1515707005, 1515707025, 1515707030, 1515718750, 1515718755, 1515718775, 1515718780, 1515718875, 1515718880, 1515718900, 1515718905, 1515719375, 1515719380, 1515719400, 1515719405, 1515719500, 1515719505, 1515719525, 1515719530, 1515721875, 1515721880, 1515721900, 1515721905, 1515722000, 1515722005, 1515722025, 1515722030, 1515722500, 1515722505, 1515722525, 1515722530, 1515722625, 1515722630, 1515722650, 1515722655, 1516015625, 1516015630, 1516015650, 1516015655, 1516015750, 1516015755, 1516015775, 1516015780, 1516016250, 1516016255, 1516016275, 1516016280, 1516016375, 1516016380, 1516016400, 1516016405, 1516018750, 1516018755, 1516018775, 1516018780, 1516018875, 1516018880, 1516018900, 1516018905, 1516019375, 1516019380, 1516019400, 1516019405, 1516019500, 1516019505, 1516019525, 1516019530, 1516031250, 1516031255, 1516031275, 1516031280, 1516031375, 1516031380, 1516031400, 1516031405, 1516031875, 1516031880, 1516031900, 1516031905, 1516032000, 1516032005, 1516032025, 1516032030, 1516034375, 1516034380, 1516034400, 1516034405, 1516034500, 1516034505, 1516034525, 1516034530, 1516035000, 1516035005, 1516035025, 1516035030, 1516035125, 1516035130, 1516035150, 1516035155, 1516093750, 1516093755, 1516093775, 1516093780, 1516093875, 1516093880, 1516093900, 1516093905, 1516094375, 1516094380, 1516094400, 1516094405, 1516094500, 1516094505, 1516094525, 1516094530, 1516096875, 1516096880, 1516096900, 1516096905, 1516097000, 1516097005, 1516097025, 1516097030, 1516097500, 1516097505, 1516097525, 1516097530, 1516097625, 1516097630, 1516097650, 1516097655, 1516109375, 1516109380, 1516109400, 1516109405, 1516109500, 1516109505, 1516109525, 1516109530, 1516110000, 1516110005, 1516110025, 1516110030, 1516110125, 1516110130, 1516110150, 1516110155, 1516112500, 1516112505, 1516112525, 1516112530, 1516112625, 1516112630, 1516112650, 1516112655, 1516113125, 1516113130, 1516113150, 1516113155, 1516113250, 1516113255, 1516113275, 1516113280, 1523437500, 1523437505, 1523437525, 1523437530, 1523437625, 1523437630, 1523437650, 1523437655, 1523438125, 1523438130, 1523438150, 1523438155, 1523438250, 1523438255, 1523438275, 1523438280, 1523440625, 1523440630, 1523440650, 1523440655, 1523440750, 1523440755, 1523440775, 1523440780, 1523441250, 1523441255, 1523441275, 1523441280, 1523441375, 1523441380, 1523441400, 1523441405, 1523453125, 1523453130, 1523453150, 1523453155, 1523453250, 1523453255, 1523453275, 1523453280, 1523453750, 1523453755, 1523453775, 1523453780, 1523453875, 1523453880, 1523453900, 1523453905, 1523456250, 1523456255, 1523456275, 1523456280, 1523456375, 1523456380, 1523456400, 1523456405, 1523456875, 1523456880, 1523456900, 1523456905, 1523457000, 1523457005, 1523457025, 1523457030, 1523515625, 1523515630, 1523515650, 1523515655, 1523515750, 1523515755, 1523515775, 1523515780, 1523516250, 1523516255, 1523516275, 1523516280, 1523516375, 1523516380, 1523516400, 1523516405, 1523518750, 1523518755, 1523518775, 1523518780, 1523518875, 1523518880, 1523518900, 1523518905, 1523519375, 1523519380, 1523519400, 1523519405, 1523519500, 1523519505, 1523519525, 1523519530, 1523531250, 1523531255, 1523531275, 1523531280, 1523531375, 1523531380, 1523531400, 1523531405, 1523531875, 1523531880, 1523531900, 1523531905, 1523532000, 1523532005, 1523532025, 1523532030, 1523534375, 1523534380, 1523534400, 1523534405, 1523534500, 1523534505, 1523534525, 1523534530, 1523535000, 1523535005, 1523535025, 1523535030, 1523535125, 1523535130, 1523535150, 1523535155, 1523828125, 1523828130, 1523828150, 1523828155, 1523828250, 1523828255, 1523828275, 1523828280, 1523828750, 1523828755, 1523828775, 1523828780, 1523828875, 1523828880, 1523828900, 1523828905, 1523831250, 1523831255, 1523831275, 1523831280, 1523831375, 1523831380, 1523831400, 1523831405, 1523831875, 1523831880, 1523831900, 1523831905, 1523832000, 1523832005, 1523832025, 1523832030, 1523843750, 1523843755, 1523843775, 1523843780, 1523843875, 1523843880, 1523843900, 1523843905, 1523844375, 1523844380, 1523844400, 1523844405, 1523844500, 1523844505, 1523844525, 1523844530, 1523846875, 1523846880, 1523846900, 1523846905, 1523847000, 1523847005, 1523847025, 1523847030, 1523847500, 1523847505, 1523847525, 1523847530, 1523847625, 1523847630, 1523847650, 1523847655, 1523906250, 1523906255, 1523906275, 1523906280, 1523906375, 1523906380, 1523906400, 1523906405, 1523906875, 1523906880, 1523906900, 1523906905, 1523907000, 1523907005, 1523907025, 1523907030, 1523909375, 1523909380, 1523909400, 1523909405, 1523909500, 1523909505, 1523909525, 1523909530, 1523910000, 1523910005, 1523910025, 1523910030, 1523910125, 1523910130, 1523910150, 1523910155, 1523921875, 1523921880, 1523921900, 1523921905, 1523922000, 1523922005, 1523922025, 1523922030, 1523922500, 1523922505, 1523922525, 1523922530, 1523922625, 1523922630, 1523922650, 1523922655, 1523925000, 1523925005, 1523925025, 1523925030, 1523925125, 1523925130, 1523925150, 1523925155, 1523925625, 1523925630, 1523925650, 1523925655, 1523925750, 1523925755, 1523925775, 1523925780, 1525390625, 1525390630, 1525390650, 1525390655, 1525390750, 1525390755, 1525390775, 1525390780, 1525391250, 1525391255, 1525391275, 1525391280, 1525391375, 1525391380, 1525391400, 1525391405, 1525393750, 1525393755, 1525393775, 1525393780, 1525393875, 1525393880, 1525393900, 1525393905, 1525394375, 1525394380, 1525394400, 1525394405, 1525394500, 1525394505, 1525394525, 1525394530, 1525406250, 1525406255, 1525406275, 1525406280, 1525406375, 1525406380, 1525406400, 1525406405, 1525406875, 1525406880, 1525406900, 1525406905, 1525407000, 1525407005, 1525407025, 1525407030, 1525409375, 1525409380, 1525409400, 1525409405, 1525409500, 1525409505, 1525409525, 1525409530, 1525410000, 1525410005, 1525410025, 1525410030, 1525410125, 1525410130, 1525410150, 1525410155, 1525468750, 1525468755, 1525468775, 1525468780, 1525468875, 1525468880, 1525468900, 1525468905, 1525469375, 1525469380, 1525469400, 1525469405, 1525469500, 1525469505, 1525469525, 1525469530, 1525471875, 1525471880, 1525471900, 1525471905, 1525472000, 1525472005, 1525472025, 1525472030, 1525472500, 1525472505, 1525472525, 1525472530, 1525472625, 1525472630, 1525472650, 1525472655, 1525484375, 1525484380, 1525484400, 1525484405, 1525484500, 1525484505, 1525484525, 1525484530, 1525485000, 1525485005, 1525485025, 1525485030, 1525485125, 1525485130, 1525485150, 1525485155, 1525487500, 1525487505, 1525487525, 1525487530, 1525487625, 1525487630, 1525487650, 1525487655, 1525488125, 1525488130, 1525488150, 1525488155, 1525488250, 1525488255, 1525488275, 1525488280, 1525781250, 1525781255, 1525781275, 1525781280, 1525781375, 1525781380, 1525781400, 1525781405, 1525781875, 1525781880, 1525781900, 1525781905, 1525782000, 1525782005, 1525782025, 1525782030, 1525784375, 1525784380, 1525784400, 1525784405, 1525784500, 1525784505, 1525784525, 1525784530, 1525785000, 1525785005, 1525785025, 1525785030, 1525785125, 1525785130, 1525785150, 1525785155, 1525796875, 1525796880, 1525796900, 1525796905, 1525797000, 1525797005, 1525797025, 1525797030, 1525797500, 1525797505, 1525797525, 1525797530, 1525797625, 1525797630, 1525797650, 1525797655, 1525800000, 1525800005, 1525800025, 1525800030, 1525800125, 1525800130, 1525800150, 1525800155, 1525800625, 1525800630, 1525800650, 1525800655, 1525800750, 1525800755, 1525800775, 1525800780, 1525859375, 1525859380, 1525859400, 1525859405, 1525859500, 1525859505, 1525859525, 1525859530, 1525860000, 1525860005, 1525860025, 1525860030, 1525860125, 1525860130, 1525860150, 1525860155, 1525862500, 1525862505, 1525862525, 1525862530, 1525862625, 1525862630, 1525862650, 1525862655, 1525863125, 1525863130, 1525863150, 1525863155, 1525863250, 1525863255, 1525863275, 1525863280, 1525875000, 1525875005, 1525875025, 1525875030, 1525875125, 1525875130, 1525875150, 1525875155, 1525875625, 1525875630, 1525875650, 1525875655, 1525875750, 1525875755, 1525875775, 1525875780, 1525878125, 1525878130, 1525878150, 1525878155, 1525878250, 1525878255, 1525878275, 1525878280, 1525878750, 1525878755, 1525878775, 1525878780, 1525878875, 1525878880, 1525878900, 1525878905][n-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48878,"user_id":null,"body":"def nth_chandos_number(n)\n  (1..n.bit_length).sum {|i| n.bit(i-1).zero? ? 0 : 5**i}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48879,"user_id":1072,"body":"def nth_chandos_number(n) i=0; n.to_s(2).split(\"\").reverse().reduce(0){|a,b| i+=1; a+b.to_i*5**i} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48880,"user_id":1072,"body":"def nth_chandos_number(n) i=0; n.to_s(2).split(\"\").reverse().reduce(0){|a,b| i+=1; a+b.to_i*5**i} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58aa9662c55ffbdceb000101":[{"id":48881,"user_id":1246,"body":"def next_day_of_week(current_day, available_week_days)\n  current_day %= 7\n  while (2**current_day) & available_week_days == 0\n    current_day = (current_day + 1) % 7\n  end\n  current_day+1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48882,"user_id":1072,"body":"def next_day_of_week1(c,d) arr=(1..7).map{|i| (d|128>>i)==d ? i : 0}; (arr+arr)[c,14].select{|q| q != 0}[0] end\ndef next_day_of_week(current_day, available_week_days)\n  d=available_week_days.to_s(2)\n  d=\"0\"*(7-d.size)+d\n  i=0\n  j=14-current_day-1\n  while i<7\n    if(d[j%7]=='1')\n      return 7-j%7\n    end\n    i+=1\n    j-=1\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48883,"user_id":1828,"body":"def next_day_of_week(cd, awd)\n  a = awd.to_s(2).rjust(7, '0').split(\"\").zip((1..7).to_a).map{|x,y| y if x == \"1\"}.compact\n  b = a.select{|i| i > cd}\n  if b == [] of Int32\n    a.first\n  else\n    b.first\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48884,"user_id":1072,"body":"def next_day_of_week(c,d) arr=(1..7).map{|i| (d|128>>i)==d ? i : 0}; (arr+arr)[c,14].select{|q| q != 0}[0] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58ac1abdff4e78738f000805":[{"id":48885,"user_id":1072,"body":"def the_biggest_search_keys(*args) max=args.map{|a| a.size}.max; \"'#{args.select{|a| a.size==max}.sort.join(\"', '\")}'\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58ac59d21c9e1d7dc5000150":[{"id":48886,"user_id":527,"body":"def make_parts(arr, chunk_size)\n  arr.each_slice(chunk_size).to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48887,"user_id":1072,"body":"def make_parts(arr, n) (0...(arr.size\/n.to_f).ceil).map{|i| arr[i*n...i*n+n]} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48888,"user_id":null,"body":"def make_parts(arr : Array, chunk_size : Number) : Array\n  arr.each_slice(chunk_size).to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48889,"user_id":421,"body":"def make_parts(arr, chunk_size)\n   arr.empty? ? [] of Int32 : chunk_size > arr.size ? [arr] : arr.each_slice(chunk_size).to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48890,"user_id":2609,"body":"def make_parts(arr, chunk_size)\n  output = [] of Array(Int32)\n  arr.each_slice(chunk_size) { |e| output << e }\n  output\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48891,"user_id":2563,"body":"def make_parts(arr, chunk_size)\n    times = (arr.size \/ chunk_size.to_f).ceil\n    (1..times).reduce([] of Array(Int32)) { |ac, n|\n        from = (n-1) * chunk_size\n        to = from + chunk_size -1\n        ac.push arr[from..to]\n    }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48892,"user_id":null,"body":"def make_parts(arr, chunk_size)\n  parts = [] of typeof(arr)\n  arr.each_slice(chunk_size).each do |part|\n    parts << part\n  end\n  parts\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58acfe4ae0201e1708000075":[{"id":48893,"user_id":277,"body":"def invite_more_women(arr)\n  arr.sum > 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48894,"user_id":812,"body":"def invite_more_women(arr)\n  female   = 0\n  male     = 0\n  arr.each do |e|\n    if e == -1\n      female += 1 end\n    if e ==  1\n      male += 1 end\n  end\n  female >= male ? false : true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48895,"user_id":1474,"body":"def invite_more_women(arr)\n  !arr.empty? && arr.sum > 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48896,"user_id":null,"body":"def invite_more_women(arr)\n mancounter   = 0\n womancounter = 0\n arr.map{|person| \n   if person == -1\n     womancounter +=1\n   else\n     mancounter   +=1\n   end\n }\n mancounter > womancounter\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48897,"user_id":1072,"body":"def invite_more_women(arr) arr.reduce(0){|a,b| a+b}>0 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58ad388555bf4c80e800001e":[{"id":48898,"user_id":null,"body":"def cut_the_ropes(arr)\n  arr.sort.uniq.reduce([arr.size]){|a, x| a + [a[-1] - arr.count(x)]}[...-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48899,"user_id":50,"body":"def cut_the_ropes(arr)\n  l=arr.size\n  if l==0\n    return [] of Int32\n  end\n  res=[l]\n  s=arr.uniq.sort\n  n=s.shift\n  i=0\n  while true\n    tmp=arr.select{|x| x>n}.size\n    if tmp==0\n      return res\n    else\n      res.push(tmp)\n      n+=s[i]-n\n      i+=1\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48900,"user_id":527,"body":"def cut_the_ropes(ls)\n  ls.sort\n    .chunk_while{ |x, y| x == y }\n    .each_with_object([ls.size]){ |c, ns| ns << ns.last - c.size }\n    .tap(&.pop)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48901,"user_id":1072,"body":"def cut_the_ropes(arr,r=[arr.size]) min=arr.size>0 ? arr.min : 0; b=arr.size>0 ? arr.map{|q| q-min}.select{|q| q != 0} : [42]; (arr.size == 0) ? r[0...r.size-1] : cut_the_ropes(b, r+[b.size]) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58ade2233c9736b01d0000b3":[{"id":48902,"user_id":1072,"body":"def randint(a,b) rand(b-a+1)+a end; def password_gen() alpha=\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"; ([alpha[randint(0,9)]]+[alpha[randint(10,35)]]+[alpha[randint(36,61)]]+(0...randint(3,17)).map{alpha[randint(0,alpha.size-1)]}).shuffle.join end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58afce23b0e8046a960000eb":[{"id":48903,"user_id":50,"body":"def withdraw(n)\n  c=0\n  h=0\n  if (n\/10)%2==1\n    c+=1\n    n-=50\n    end\n  h=(n\/100).floor\n  n%=100\n  f=(n\/100).floor\n  n%=100\n  [h,c,(n\/20).floor]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48904,"user_id":1072,"body":"def withdraw(n,c=0) n%50!=0 ? withdraw(n-20,c+1) : [n\/\/100,n%100\/\/50,c] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48905,"user_id":null,"body":"# non-optimal solution, when n is not easy solution (only 100\/50\/20 bills) it subtract the value of the \n# smallest bill and repeats until an easy solution is found. Then it converts the smaller bills to larger ones if the value is a multiple\ndef withdraw(n)\n  # puts \"n:#{n}\"\n  result = [0, 0, 0]\n\n  while n > 0\n    x = whole_multiple(n)\n    if x\n      result = result.zip(x).flat_map { |a, b| a + b }\n      break\n    end\n\n    # subtract smallest denomination\n    result[2] += 1\n    n -= 20\n  end\n  convert_to_larger_bills result\n\n  result\nend\n\ndef convert_to_larger_bills(arr)\n  # divide smaller bills into larger ones\n  if arr[2] >= 5\n    arr[1] += (arr[2] \/ 5) * 2 # 5x20 = 100 -> 2 * 50\n    arr[2] %= 5\n  end\n  if arr[1] >= 2\n    arr[0] += arr[1] \/ 2\n    arr[1] %= 2\n  end\nend\n\ndef whole_multiple(n)\n  return [n\/100, 0, 0] if n % 100 == 0\n  return [0, n\/50, 0] if n % 50 == 0\n  return [0, 0, n\/20] if n % 20 == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48906,"user_id":1072,"body":"def withdraw(n,c=0) n%50!=0 ? withdraw(n-20,c+1) : [n\/100,n%100\/50,c] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58b28e5830473070e5000007":[{"id":48907,"user_id":492,"body":"def frame(score)\n    cnt = 0; score = score.gsub(\/\\([\\d,]+\\)\/, \"\")\n    arr = score.split(';')\n    i = 0\n    while i < arr.size\n        part  = arr[i].split('-')\n        if (part[0].to_i > part[1].to_i)\n            cnt += 1\n        end\n        i += 1\n    end\n    [cnt, arr.size - cnt]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48908,"user_id":null,"body":"def frame(score)\n  res = [0,0]\n  score.gsub(\/\\(.+?\\)\/, \"\").split(\/;\\s\/).map{|i| i.split(\"-\").map{|j| j.to_i}}.each do |i|\n    if i[0] > i[1]\n      res[0] += 1\n    else\n      res[1] += 1\n    end\n  end\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48909,"user_id":1072,"body":"def frame(score) score.gsub(\/\\(.+?\\)\/,\"\").split(\"; \").reduce([0,0]){|a,b| r=b.split(\"-\").map{|a| a.to_i}; r[0]>r[1] ? [a[0]+1,a[1]] : [a[0],a[1]+1]} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58b3c2bd917a5caec0000017":[{"id":48910,"user_id":527,"body":"def sum_groups(xs)\n  xs.chunk(&.even?).chunk{ |(e, g)| e || g.size.even? }.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48911,"user_id":53,"body":"def sum_groups(arr)\n  \n  r = Array(Int32).new\n  m = 0\n  \n  (0...arr.size).each{|i|\n    m += arr[i]\n    if i+1 >= arr.size || arr[i]%2 != arr[i+1]%2\n      r << m\n      m = 0\n    end\n  }\n\n  r.size == arr.size ? r.size : sum_groups(r)\n  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48912,"user_id":50,"body":"def sum_groups(arr)\n  if arr.size<2\n    return arr.size\n  end\n  while true\n    flag=false\n    l=arr.size\n    a=[] of Int32\n    tmp=arr[0]\n    p=tmp%2\n    (1..l-1).each do |i|\n      n=arr[i]\n      k=n%2\n      if k == p\n        flag=true\n        tmp+=n\n      else\n        a.push(tmp)\n        p=k\n        tmp=n\n      end\n    end\n    a.push(tmp)\n    if !flag || a.size==1\n      return a.size\n    end\n    arr=a\n   end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48913,"user_id":527,"body":"def sum_groups(xs : Enumerable(T)) forall T\n  ys = [] of T\n  while ys.size != xs.size\n    ys, xs = xs, xs.chunk{ |x| x % 2 == 0 }.map{ |(_, g)| g.sum }.to_a\n  end\n  xs.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48914,"user_id":527,"body":"def sum_groups(xs : Array(T)) forall T\n  ys = [] of T\n  while ys.size != xs.size\n    ys, xs = xs, xs.chunk{ |x| x % 2 == 0 }.map{ |(_, g)| g.sum }.to_a\n  end\n  xs.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48915,"user_id":1072,"body":"def sum_groups(arr) m=arr[1...arr.size].reduce({\"res\" => [arr[0]], \"odd\" => [arr[0]%2]}){|a,b| [b%2]==a[\"odd\"] ? {\"res\" => a[\"res\"][0...a[\"res\"].size-1]+[a[\"res\"][-1]+b], \"odd\" => a[\"odd\"]} : {\"res\" => a[\"res\"]+[b], \"odd\" => [b%2]}}; res=m[\"res\"]; res==arr ? res.size : sum_groups(res) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58b635903e78b34958000056":[{"id":48916,"user_id":1624,"body":"def count_number(n, t)\n  (1..n).count{|x|\n    y0, m = t.divmod(x)\n    m == 0 && y0 <= n\n  }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48917,"user_id":1072,"body":"def count_number(n, x) r=x**0.5; (1..(r.floor)).select{|i| x%i==0 && x\/i<=n}.size*2-(r%1==0 && r<=n ? 1 : 0) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58b8c94b7df3f116eb00005b":[{"id":48918,"user_id":null,"body":"def reverse_letter(string)\n  string.delete { |c| !c.letter? }.reverse\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48919,"user_id":527,"body":"def reverse_letter(string)\n  string.delete(\"^A-Za-z\").reverse\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48920,"user_id":null,"body":"def reverse_letter(string)\n  string.gsub(\/[^a-z]\/i, \"\").reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48921,"user_id":null,"body":"def reverse_letter(s)\n  s.chars.reject{|c| c.ascii_letter? == false }.reverse.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48922,"user_id":null,"body":"def reverse_letter(string)\n  string.gsub(\/[^A-Za-z]+\/, \"\").reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48923,"user_id":null,"body":"def reverse_letter(string)\n    chars=string.chars\n    fliped=\"\"\n    loop do\n        break if chars.size==0\n        if (chars[-1]).ascii_letter?\n            fliped+=chars.pop\n        else\n        chars.pop\n        end\n    end\n    return fliped\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48924,"user_id":null,"body":"def reverse_letter(string)\n  string.delete {|c| !c.ascii_letter? }.reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48925,"user_id":null,"body":"def reverse_letter(string)\n  range = ('a'..'z')\n  string.chars.select(&->range.includes?(Char)).join.reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48926,"user_id":null,"body":"def reverse_letter(string)\n  string.gsub(\/([\\W\\d_])\/, \"\").reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48927,"user_id":null,"body":"def reverse_letter(string)\n  string.reverse.gsub(\/[^a-z]\/, \"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58b8cc7e8e7121740700002d":[{"id":48928,"user_id":421,"body":"def rank_of_element(arr,i)\n  arr[0...i].count{|x| x <= arr[i]} + arr[i + 1..-1].count{|x| x < arr[i]}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48929,"user_id":null,"body":"def rank_of_element(arr, i)\n  arr[...i].select{|x| x <= arr[i]}.size + arr[i..].select{|x| x < arr[i]}.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48930,"user_id":1624,"body":"def rank_of_element(arr,i)\n  arr[0,i].count{|u| u <= arr[i]} + arr[i+1..-1].count{|u| u < arr[i]}\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48931,"user_id":null,"body":"def rank_of_element(arr,i)\n  arr[0...i].count { |n| n <= arr[i] } + arr[i+1..-1].count { |n| n < arr[i] }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48932,"user_id":527,"body":"def rank_of_element(arr, i)\n  x = arr[i]\n  arr.each_with_index.count { |y, j| y < x || y == x && j < i }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48933,"user_id":1828,"body":"def rank_of_element(arr,i)\n  arr[0...i].select{|j| j <= arr[i]}.size + arr[i+1..-1].select{|j| j < arr[i]}.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48934,"user_id":1072,"body":"def rank_of_element(arr,i) arr[0,i].select{|a| a<=arr[i]}.size+arr[i,arr.size].select{|a| a<arr[i]}.size end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58b8dccecf49e57a5a00000e":[{"id":48935,"user_id":null,"body":"def repeat_adjacent(string)\n  string.each_char.chunk(&.itself).chunk { |c| c.last.size > 1 || Enumerable::Chunk::Drop } .count { |c| c.last.size > 1 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48936,"user_id":527,"body":"def repeat_adjacent(string)\n  string.scan(\/(?:(.)\\1++){2,}\/).size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48937,"user_id":1072,"body":"def repeat_adjacent(s) s.scan(\/((.)\\2+(?!\\2)){2,}\/).size end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58b96d99404be9187c000003":[{"id":48938,"user_id":421,"body":"BLZ = {\"R\" => 1, \"Y\" => 2, \"G\" => 3, \"Bn\" => 4, \"Be\" => 5, \"P\" => 6, \"Bk\" => 7}\n\ndef frame(balls)  \n  return \"Foul\" if balls.includes?(\"W\")\n  s = balls.scan(\/(R|Y|G|Bn|Be|P|Bk)(\\d*)\/).map{|x| BLZ[x[1].to_s] * (x[2] == \"\" ? 1 : x[2].to_i)}.sum\n  s > 147 ? \"invalid data\" : s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48939,"user_id":527,"body":"BALL_VALUES = {\n  \"R\" => 1, \"Y\" => 2, \"G\" => 3, \"Bn\" => 4, \"Be\" => 5, \"P\" => 6, \"Bk\" => 7\n}\n\ndef frame(balls : String) : Int32 | String\n  return \"Foul\" if balls.includes?('W')\n  s = balls.scan(\/([A-Z][a-z]?)([0-9]*)\/).sum do |(_, c, n)|\n    return \"invalid data\" if (v = BALL_VALUES[c]?).nil?\n    (n.empty? ? 1 : n.to_i) * v\n  end\n  s <= 147 ? s : \"invalid data\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48940,"user_id":1828,"body":"def frame(balls)\n  blz = {\"R\" => 1, \"Y\" => 2, \"G\" => 3, \"Bn\" => 4, \"Be\" => 5, \"P\" => 6, \"Bk\" => 7}\n  return \"Foul\" if balls.includes? \"W\"\n  c = [] of Array(String)\n  while match = \/([A-Z][a-z]?)(\\d*)\/.match(balls)\n    c << [match[1], match[2]]\n    balls = match.post_match\n  end\n  s = c.map{|x| blz[x[0].to_s].to_i*(x[1] == \"\" ? 1 : x[1].to_i)}.sum\n  s > 147 ? \"invalid data\" : s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58b972cae826b960a300003e":[{"id":48941,"user_id":1828,"body":"def missing(nums, s)\n  str = s.delete(\" \").downcase\n  nums.max < str.size ? nums.sort.map{|i| str[i]}.join : \"No mission today\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48942,"user_id":421,"body":"def missing(nums, str)\n  str = str.downcase.gsub(\/[^a-z]\/, \"\")\n  nums.max >= str.size ?  \"No mission today\" : nums.sort.map{|x| str[x]}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48943,"user_id":1624,"body":"def missing(nums, str)\n  str = str.tr(\" \", \"\").downcase\n  nums.sort.map{|i| str[i]}.join rescue \"No mission today\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48944,"user_id":null,"body":"def missing(nums, str)\n  word = nums.sort.map{ |n| str.delete(' ')[n]? }.join.downcase\n  word.size == 3 ? word : \"No mission today\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48945,"user_id":2609,"body":"def missing(nums, str)\n  str = str.gsub(\" \", \"\")\n  nums.sort.map { |n| str[n].downcase } .join\nrescue\n    \"No mission today\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48946,"user_id":null,"body":"def missing(nums, str)\n  nums, str = nums.sort, str.delete(' ')\n  (str.at(nums[0]).to_s + str.at(nums[1]).to_s + str.at(nums[2]).to_s).downcase\nrescue IndexError\n  \"No mission today\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48947,"user_id":null,"body":"def missing(nums, str)\n  nums = nums.sort\n  str = str.delete(' ')\n  (str.at(nums[0]).to_s + str.at(nums[1]).to_s + str.at(nums[2]).to_s).downcase\nrescue IndexError\n  \"No mission today\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48948,"user_id":null,"body":"def missing(nums, str)\n  nums.max < str.delete(\" \").size ? nums.sort.map{|e| str.delete(\" \").downcase[e]}.join : \"No mission today\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48949,"user_id":1072,"body":"def missing(nums,s) s=s.downcase.gsub(\" \",\"\"); nums.all?{|n| n<s.size} ? nums.sort.map{|n| s[n]}.join : \"No mission today\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58bcd27b7288983803000002":[{"id":48950,"user_id":421,"body":"def happy_g(s)\n  s.gsub(\/[^g]\/, \" \").split.all?{|x| \/g[g]+\/ === x}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48951,"user_id":null,"body":"def happy_g(s)\n  s.chars.each_with_index do |char, index|\n    if char == 'g' &&\n       (index == 0 || s[index - 1] != 'g') &&\n       (index == s.size - 1 || s[index + 1] != 'g')\n      return false\n    end\n  end\n  true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48952,"user_id":1624,"body":"def happy_g(s)\n  !s.split(\/[^g]+\/).any?{|w| w.size == 1}\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48953,"user_id":null,"body":"def happy_g(s)\n  s.split(\" \").each { |w|\n    return false if w.gsub(\/gg+\/, \"\") =~ \/g\/\n  }\n  true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48954,"user_id":1246,"body":"def happy_g(s)\n  (s =~ \/([^g]|^)g([^g]|$)\/).nil?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48955,"user_id":null,"body":"def happy_g(s)\n  ! s.gsub(\/gg+\/, \"\").includes?('g')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48956,"user_id":527,"body":"def happy_g(s : String) : Bool\n  s !~ \/(?<!g)g(?!g)\/\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48957,"user_id":1072,"body":"def happy_g(s) s.gsub(\/gg+\/,\"\").scan(\/g\/).size<1 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58be35e9e36224a33f000023":[{"id":48958,"user_id":1072,"body":"class Allergies\n  @allergies : Array(String)\n  ALLERGY_SCORES = {\n    \"eggs\"=> 1,\n    \"peanuts\"=> 2,\n    \"shellfish\"=> 4,\n    \"strawberries\"=> 8,\n    \"tomatoes\"=> 16,\n    \"chocolate\"=> 32,\n    \"pollen\"=> 64,\n    \"cats\"=> 128\n  }\n\n  def initialize(score)\n    @allergies=ALLERGY_SCORES.keys.select{|a| ALLERGY_SCORES[a]&(score%256) != 0}.sort\n  end\n\n  def is_allergic_to(allergen)\n    @allergies.index(allergen) != nil\n  end\n\n  def allergies()\n    @allergies\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58bf9bd943fadb2a980000a7":[{"id":48959,"user_id":1566,"body":"def who_is_paying(name)\n  [name, name[0,2]].uniq\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48960,"user_id":null,"body":"def who_is_paying(name)\n  return [\"\"] if name.size == 0\n  return [\"#{name[0]}\"] if name.size == 1\n  return [name] if name.size == 2\n  return [name, \"#{name[..1]}\"]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48961,"user_id":50,"body":"def who_is_paying(name)\n  name.size < 3 ? [name] : [name, name[0..1]]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48962,"user_id":null,"body":"def who_is_paying(n)\n  n_arr = Array(String).new\n  case \n  when n.size <= 2 then n_arr << n\n  else\n    n_arr << n\n    n_arr << n[0..1]\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48963,"user_id":null,"body":"def who_is_paying(name)\n  [name, name[0..1]].uniq\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48964,"user_id":null,"body":"def who_is_paying(n)\n    [n, n[0, 2]].uniq\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48965,"user_id":1624,"body":"def who_is_paying(name)\n  if name.size <= 2\n    [name]\n  else\n    [name, name[0, 2]]\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48966,"user_id":null,"body":"def who_is_paying(name)\n  return name.size > 2 ? [name, name[0..1]] : [name];\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48967,"user_id":null,"body":"def who_is_paying(name)\n  if name.size<3\n    [name]\n  else\n    [name, name[0..1]]\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48968,"user_id":null,"body":"def who_is_paying(name)\n  out = [\"\"]\n  if name.size > 2\n    out[0] = name\n    out << \"\"\n    (name.size).times do |x|\n      out[1] += name[x]\n      break if out[1].size == 2\n    end\n  else\n    out[0] = name\n  end\n  out\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58bfa1ea43fadb41840000b4":[{"id":48969,"user_id":null,"body":"def folding(a, b)\n  if a > b\n    1 + folding(a - b, b)\n  elsif a < b\n    1 + folding(b - a, a)\n  else \n    1\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48970,"user_id":null,"body":"def folding(a,b)\n  count = 0\n  return _folding(a, b, count)\nend\n\ndef _folding(a, b, count)\n  max, min = [a, b].max, [a, b].min\n  c = max - min\n  count += 1\n  if c == min\n    count + 1 # Count the last square\n  else\n    _folding(c, min, count)\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48971,"user_id":1828,"body":"def folding(a,b)\n  r=1\n  while a != b\n    t = a-b\n    b,a = [t,b].sort\n    r+=1\n  end\n  r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58c1446b61aefc34620000aa":[{"id":48972,"user_id":527,"body":"def egged(year : Int32, span : Int32) : Int32 | String\n  return \"No chickens yet!\" if year == 0\n  3 * {year, span}.min.times.each_with_object([] of Int32){ |_, es| es.map!{ |e| e * 4 \/\/ 5 }.push(300) }.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48973,"user_id":1828,"body":"def egged(year, span)\n  l, k , r = [300, [year, span].min, 0]\n  return \"No chickens yet!\" if k == 0\n  while k != 0\n    r += l; k -= 1;l = (0.8*l).floor\n  end\n  3*r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48974,"user_id":1072,"body":"def egged(y,s) y != 0 ? 3*[300, 240, 192, 153, 122, 97, 77, 61, 48, 38, 30, 24, 19, 15, 12, 9, 7, 5, 4, 3, 2, 1][0,[y,s].min].reduce(0){|a,b| a+b} : \"No chickens yet!\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58c21c4ff130b7cab400009e":[{"id":48975,"user_id":168,"body":"def guess_hat_color(a,b,c,d)\n  b != c ? 2 : 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48976,"user_id":527,"body":"def guess_hat_color(_a, b, c, _d)\n  b == c ? 1 : 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48977,"user_id":null,"body":"def guess_hat_color(a,b,c,d)\n  return 1 if b == c\n  2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48978,"user_id":1072,"body":"def guess_hat_color(a,b,c,d) b==c ? 1 : 2 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58c8a41bedb423240a000007":[{"id":48979,"user_id":1624,"body":"# Thanks OEIS\ndef cake_slice(n)\n  1 + n*(n+1)\/2\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48980,"user_id":1828,"body":"def cake_slice(n)\n  (n*(n + 1)\/2) + 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48981,"user_id":1072,"body":"def cake_slice(n) (n+1)*n\/2+1 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58c8af49fd407dea5f000042":[{"id":48982,"user_id":421,"body":"def luxhouse(houses)\n   houses.map_with_index{|x, i| i == houses.size- 1 ? 0 : [houses[i + 1..-1].max + 1 - x, 0].max}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48983,"user_id":2563,"body":"def luxhouse(houses)\n  houses[0..-2].map_with_index {|h, i|\n    (b = houses[i+1..-1].max - h + 1) < 0 ? 0 : b\n  }.push(0)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48984,"user_id":1828,"body":"def luxhouse(houses)\n  r = [] of Int32\n  (0...houses.size-1).each do |i|\n    r << houses[i+1..-1].max - houses[i] + 1 \n  end\n  r.map{|i| i < 0 ? 0 : i}.concat([0])\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48985,"user_id":1072,"body":"def luxhouse(h) i=0; h.map{|a| i+=1; [(h[i,h.size]+[0]).max-a+1,0].max} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58ca658cc0d6401f2700045f":[{"id":48986,"user_id":527,"body":"def find_multiples(integer, limit)\n  (integer .. limit).step(integer).to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48987,"user_id":527,"body":"def find_multiples(integer, limit)\n  integer.step(to: limit, by: integer).to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48988,"user_id":1072,"body":"def find_multiples(n,l) (n..l).step(n).to_a end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48989,"user_id":null,"body":"def find_multiples(integer, limit)\n  arr = Array(Int32).new\n  \n  (integer..limit).each do |i|\n    if i % integer == 0\n      arr.push i\n    end\n  end\n\n  arr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48990,"user_id":null,"body":"def find_multiples(integer, limit)\n  x = [] of Int32\n  a = 1\n  while (integer * a) <= limit\n    x << integer * a\n    a += 1\n  end\n  return x\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48991,"user_id":null,"body":"def find_multiples(integer : Int32, limit : Int32) : Array(Int32)\n  (integer..limit).select { |n| (n % integer).zero? }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48992,"user_id":null,"body":"def find_multiples(integer, limit)\n x = (integer..limit).to_a\n  \n return x.select {|i| i if i%integer == 0 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48993,"user_id":null,"body":"def find_multiples(integer, limit)\n  result = [] of Int32\n  multiple = integer\n  while multiple <= limit\n    result << multiple\n    multiple += integer\n  end\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48994,"user_id":53,"body":"def find_multiples(integer, limit)\n  result = [] of Int32\n  i = integer\n  while i <= limit\n    result << i\n    i += integer\n  end\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48995,"user_id":null,"body":"def find_multiples(integer, limit)\n  integer.step(by: integer, to: limit).to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58cb43f4256836ed95000f97":[{"id":48996,"user_id":527,"body":"def find_difference(a, b)\n  (a.product - b.product).abs\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 20:04:37"},{"id":48997,"user_id":1474,"body":"def find_difference(a, b) \n  (a.reduce(1) { |s, i| s * i } - b.reduce(1) { |s, i| s * i }).abs\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48998,"user_id":812,"body":"def find_difference(a, b)\n  volume_a = 1\n  volume_b = 1\n  a.each do |e|\n    volume_a = volume_a * e end\n  b.each do |e|\n    volume_b = volume_b * e end\n  (volume_a - volume_b).abs\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":48999,"user_id":53,"body":"def find_difference(a, b) \n  diff = a[0] * a[1] * a[2] - b[0] * b[1] * b[2];\n  if diff < 0 \n    delta = -diff\n  else\n    delta = diff\n  end\n  delta\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49000,"user_id":null,"body":"def find_difference(a, b) \n  (a.reduce{|a,e| e*a} - b.reduce{|a,e| e*a}).abs\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49001,"user_id":1624,"body":"def find_difference(a, b) \n  av = a[0] * a[1] * a[2]\n  bv = b[0] * b[1] * b[2]\n  (av - bv).abs\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49002,"user_id":645,"body":"def find_difference(a, b) \n  (a[0] * a[1] * a[2] - b[0] * b[1] * b[2]).abs\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58ce8725c835848ad6000007":[{"id":49003,"user_id":527,"body":"def potatoes(p0 : Int, w0 : Int, p1 : Int) : Int\n  w0 * (100 - p0) \/ (100 - p1)\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 19:28:31"},{"id":49004,"user_id":492,"body":"def potatoes(p0, w0, p1)\n    (w0.to_f * (100.0 - p0.to_f) \/ (100.0 - p1.to_f)).to_i\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 19:28:42"},{"id":49005,"user_id":1072,"body":"def potatoes(p0,w,p1) (w*(100-p0)\/(100-p1).to_f).to_i end","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-27 19:28:50"},{"id":49006,"user_id":53,"body":"def potatoes(p0, w0, p1)\n    (w0 * (100 - p0) \/ (100 - p1)).to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49007,"user_id":null,"body":"def potatoes(p0, w0, p1)\n     return w0 * (100 - p0) \/\/ (100 - p1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49008,"user_id":null,"body":"def potatoes(p0, w0, p1)\n  w0*(100 - p0)\/\/(100 - p1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49009,"user_id":50,"body":"def potatoes(p0, w0, p1)\n  ((100-p0)*w0\/(100-p1)).floor()\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49010,"user_id":1474,"body":"def potatoes(p0, w0, p1)\n  (w0 * (100 - p0) \/ (100 - p1)).floor\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49011,"user_id":null,"body":"def potatoes(p0, w0, p1)\n    (w0 * (p0 - 100) \/ (p1 - 100)).to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49012,"user_id":null,"body":"def potatoes(p0, w0, p1)\n    return (w0 * (100 - p0) \/ (100 - p1))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58cfa5bd1c694fe474000146":[{"id":49013,"user_id":1624,"body":"def socialist_distribution(pop, min)\n  # Is it even feasible\n  return [] of Int32 if pop.sum < min*pop.size\n  tax = 0\n  # First spend\n  pop = pop.map do |x|\n    if x < min\n      tax += (min - x)\n      min\n    else\n      x\n    end  \n  end\n  # Then tax\n  while tax > 0\n    i = pop.index(pop.max).not_nil!\n    pop[i] -= 1\n    tax -= 1\n  end\n  pop\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49014,"user_id":1072,"body":"def socialist_distribution(p,m) q=p.dup; min,max=q.min,q.max; imin,imax=q.index(min),q.index(max); q[imin]+=1 if imin; q[imax]-=1 if imax; p.size==0 || p.reduce(0){|a,b| a+b} \/ p.size<m ? [] of Int32 : p.all?{|a| m<=a} ? p : socialist_distribution(q,m) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49015,"user_id":1072,"body":"def socialist_distribution(p,m) q=p.dup; min,max=q.min,q.max; imin,imax=q.index(min),q.index(max); q[imin]+=1 if imin; q[imax]-=1 if imax; p.size==0 || p.reduce(0){|a,b| a+b} \/ p.size<m ? [] of Int32 : p.all?{|a| m<=a} ? p : socialist_distribution(q,m) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58d3487a643a3f6aa20000ff":[{"id":49016,"user_id":421,"body":"def min_min_max(array)\n  a, b = array.minmax\n  c = a + 1\n  while array.includes?(c)\n    c += 1\n  end\n  [a, c, b]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49017,"user_id":1624,"body":"def min_min_max(array)\n  mn = array.min\n  mx = array.max\n  ab = (mn..mx).find{|x| !array.includes?(x)}\n  [mn,ab,mx]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49018,"user_id":645,"body":"def min_min_max(array)\n  min = array.min\n  max = array.max\n  [min, ((min + 1)...max).to_a.select do |x|\n    !array.includes?(x)\n  end.min, max]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49019,"user_id":null,"body":"def min_min_max(array)\n  min, max = array.min, array.max\n  minabs = (min..max).find{|e| !array.includes? e}\n  [min, minabs, max]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49020,"user_id":null,"body":"def min_min_max(array)\n  min = array.min; max = array.max\n  minabs = (min..max).find{|e| !array.includes? e}\n  [min, minabs, max]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49021,"user_id":null,"body":"def min_min_max(array)\n  min, max = array.minmax\n  min_absent = (min..max).find{ |n| !array.includes?(n) }\n  [min, min_absent, max]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49022,"user_id":527,"body":"def min_min_max(array)\n  min, max = array.minmax\n  set = array.to_set\n  [min, (min..max).find{ |x| !set.includes?(x) }, max]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49023,"user_id":1828,"body":"def min_min_max(array)\n  b = array.min\n  while array.includes?(b) != false\n    b += 1\n  end\n  [array.min, b, array.max]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58d4785a2285e7795c00013b":[{"id":49024,"user_id":1072,"body":"def to_twos_complement(d,b) d[0]=='0' ? d.gsub(\/ \/,\"\").to_i(2) : -2**(b-1)+d.gsub(\/ \/,\"\")[1,b].to_i(2) end; def from_twos_complement(n,b) n==-1 ? \"1\"*b : n>=0 ? n.to_s(2).rjust(b,'0') : (-1-n).to_s(2).split(\"\").map{|d| d==\"0\" ? \"1\" : \"0\"}.join.rjust(b,'1') end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58d5e6c114286c8594000027":[{"id":49025,"user_id":421,"body":"def array_manip(array)\n  arr = [] of Int32\n  array.each_with_index do |x, i| \n    temp = array[i + 1..-1].select{|y| y > x}\n    arr << (temp.empty? ? -1 : temp.min)\n  end\n  arr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49026,"user_id":1624,"body":"def array_manip(array)\n  (0...array.size).map do |i|\n    ai = array[i]\n    array[i+1..-1].select{|aj| aj > ai}.min? || -1\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49027,"user_id":1750,"body":"def array_manip(array)\n  array.map_with_index do |x, i|\n    greaters = array[i+1..-1].select { |each| each > x }\n    greaters.empty? ? -1 : greaters.min\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49028,"user_id":1072,"body":"def array_manip(arr) arr.each_with_index.to_a.map{|e| r=arr[e[1]+1,99999].reduce(999999){|a,b| b<a && e[0]<b ? b : a}; r==999999 ? -1 : r} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58d76854024c72c3e20000de":[{"id":49029,"user_id":null,"body":"def reverse_alternate(string)\n  string.split.map_with_index { |word, i| i.odd? ? word.reverse : word }.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49030,"user_id":null,"body":"def reverse_alternate(string)\n  string.split.map_with_index{|x, i| i%2==1 ? x.reverse : x}.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49031,"user_id":421,"body":"def reverse_alternate(string)\n   string.split.map_with_index{|x, i| i.odd? ? x.reverse : x}.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49032,"user_id":null,"body":"def reverse_alternate(string)\n  arr = string.split\n  i = 0\n  while i < arr.size\n    if i % 2 != 0\n      arr[i] = arr[i].reverse\n    end\n    i += 1\n  end\n  arr.join \" \"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49033,"user_id":492,"body":"def reverse_alternate(string)\n    res = [] of String; i = 0\n    string.split(' ').each { |w|\n        if w != \"\"\n            if i % 2 == 1\n                res << w.reverse\n            else\n                res << w\n            end\n            i += 1\n        end\n    }\n    res.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49034,"user_id":null,"body":"def reverse_alternate(string)\n\treturn string.split(\" \").map_with_index {|s,i| i % 2 == 0 ? s : s.reverse}.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49035,"user_id":null,"body":"def reverse_alternate(string)\n  string.split(' ').map_with_index { |w, i| i % 2 == 1 ? w.reverse : w }.join ' '\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49036,"user_id":null,"body":"def reverse_alternate(string)\n  split = string.strip.split(\/ +\/)\n\tsplit.each_with_index do |e,i|\n\t\tsplit[i] = e.reverse if i % 2 == 1\n\tend\n\treturn split.join(' ')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49037,"user_id":1768,"body":"def reverse_alternate(s)\n  if s == \"\"\n    return s\n  end\n  a = 0\n  b = [\"\"]\n  s.split.each do |i|\n      if a == 1\n          a -= 1\n          b.push(i.reverse)\n      else\n          a += 1\n          b.push(i)\n      end\n  end\n  b.join(' ')[1..-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49038,"user_id":527,"body":"def reverse_alternate(string)\n  string.split.map_with_index{ |w, i| i.even? ? w : w.reverse }.join(' ')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58daa7617332e59593000006":[{"id":49039,"user_id":1246,"body":"def find_longest(arr)\n  arr.max_by(&.to_s.size)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49040,"user_id":null,"body":"def find_longest(arr)\n  arr.max_by{ |n| Math.log10(n+1).ceil()}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49041,"user_id":1624,"body":"def find_longest(arr)\n  arr.max_by{|a| a.to_s.size}\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49042,"user_id":null,"body":"def find_longest(arr)\n  arr.max_by { |x| x.digits.size }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49043,"user_id":null,"body":"def find_longest(arr)\n  res = arr[0]\n  \n  (1...arr.size).each do |i|\n    if arr[i].digits.size > res.digits.size\n      res = arr[i]\n    end\n  end\n  \n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49044,"user_id":null,"body":"def find_longest(arr)\n  r = arr.first\n  arr.each do |i| if i.to_s.size > r.to_s.size; r = i; end; end\n  r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49045,"user_id":null,"body":"def find_longest(arr)\n  #your code here\n  markerCount = 0\n  markerIndex = 0\n  arr.each_with_index do |value, index|\n    if value.to_s.size > markerCount\n       markerCount = value.to_s.size\n       markerIndex = index\n    end\n  end\n  arr[markerIndex]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49046,"user_id":1258,"body":"def find_longest(arr)\n  arr.map(&.to_s).max_by(&.size).to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49047,"user_id":null,"body":"def find_longest(arr)\n  arr.max_by {|x| x.to_s.size}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49048,"user_id":1640,"body":"def find_longest(arr)\n  max = arr.map { |x| x.to_s.size }.sort.last\n  arr.select { |x| x.to_s.size == max }.first\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58dceee2c9613aacb40000b9":[{"id":49049,"user_id":50,"body":"def distance_between_points(a, b)\n  ((b.x-a.x)**2 + (b.y-a.y)**2 + (b.z-a.z)** 2)**0.5\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49050,"user_id":null,"body":"def distance_between_points(a, b)\n  Math.sqrt((a.x-b.x)**2+(a.y-b.y)**2+(a.z-b.z)**2).round(6)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49051,"user_id":null,"body":"def distance_between_points(a, b)\n  dx, dy, dz = a.x - b.x, a.y - b.y, a.z - b.z\n  Math.sqrt(dx*dx+dy*dy+dz*dz)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49052,"user_id":null,"body":"def distance_between_points(a, b)\n  Math.sqrt (b.x-a.x)**2+(b.y-a.y)**2+(b.z-a.z)**2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49053,"user_id":2609,"body":"def distance_between_points(a, b)\n  ((a.x - b.x) ** 2 + (a.y - b.y) ** 2 + (a.z - b.z) ** 2) ** 0.5  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49054,"user_id":527,"body":"def distance_between_points(a, b)\n  Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2 + (a.z - b.z) ** 2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49055,"user_id":1072,"body":"def distance_between_points(a,b) ([a.x,a.y,a.z].zip([b.x,b.y,b.z]).map{|c| (c[1]-c[0])**2}.reduce(0){|a,b|a+b}**0.5).round(6) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58ddffda929dfc2cae0000a5":[{"id":49056,"user_id":421,"body":"def clonewars(kata_per_day)\n   [2 ** [0, kata_per_day - 1].max, 2 ** (kata_per_day + 1) - kata_per_day - 2]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49057,"user_id":50,"body":"def clonewars(k)\n  [2**[k-1,0].max, 2**(k+1)-k-2]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49058,"user_id":null,"body":"def clonewars(kata_per_day, clones = 1, solved_katas = 0) \n  solved_katas += clones * kata_per_day\n  kata_per_day -= 1\n  return [clones, solved_katas] if kata_per_day < 1\n  clones += clones\n  clonewars(kata_per_day, clones, solved_katas)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49059,"user_id":1828,"body":"def clonewars(kpd)\n  [kpd <=1 ? 1 : 2**(kpd-1),kpd <=1 ? kpd : 2**(kpd+1)-kpd-2]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49060,"user_id":1828,"body":"def clonewars(kpd)\n  [kpd <=1 ? 1 : 2**(kpd-1),kpd <=1 ? kpd : 4*(2**(kpd-1))-kpd-2]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49061,"user_id":1072,"body":"def clonewars(n) n != 0 ? [2**(n-1),2**(n+1)-n-2] : [1,0] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58de08d376f875dbb40000f1":[{"id":49062,"user_id":421,"body":"def premier_league_standings(teams)\n  top = [] of String\n  arr = [] of String\n  ans = {} of Int32 => String\n  teams.each do |k, v|\n    top << v if k == 1\n    arr << v if k != 1\n  end\n  (top + arr.sort!).each_with_index(1) do |x, i|\n    ans[i] = x\n  end\n  ans\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49063,"user_id":1624,"body":"def premier_league_standings(teams)\n  best = teams[1]\n  result = { 1 => best }\n  others = (teams.values - [best]).sort\n  others.each_with_index do |team, i|\n    result[i+2] = team\n  end\n  result  \nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49064,"user_id":null,"body":"def premier_league_standings(teams)\n  lider, others = teams.partition{|s, _| s==1}\n  lider.to_h.merge Hash.zip (2..teams.size).to_a, others.map{|_, n| n}.sort\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49065,"user_id":null,"body":"def premier_league_standings(teams)\n  parts = teams.partition{|s, n| s==1}\n  part1 = Hash.zip((2..teams.size).to_a, parts[1].map{|s, n| n}.sort) \n  parts[0].to_h.merge(part1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49066,"user_id":1072,"body":"def premier_league_standings(t) \n  Hash.zip(\n    (1..t.keys.size).to_a,\n    [t[1]]+t.keys.map{|a| t[a]}.select{|a| a != t[1]}.sort\n  ) \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58de819eb76cf778fe00005c":[{"id":49067,"user_id":null,"body":"def palindrome(num)\n  num.is_a?(Int32) && num > 0 ? !num.to_s.chars.sort.join.match(\/(.)\\1\/).nil? : \"Not valid\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49068,"user_id":53,"body":"def palindrome(num)\n  return \"Not valid\" if !num.is_a?(Int32) || num < 0\n  num = num.to_s\n  return false if num.size == 1\n  (2..num.size).each do |x|\n    (0..num.size-x).each do |y|\n      return true if num[y...x+y] == num[y...x+y].reverse\n    end\n  end\n  false\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49069,"user_id":421,"body":"def palindrome(num)\n  !num.is_a?(Int32) || num < 0 ? \"Not valid\" : \/(\\d)\\d?\\1\/ === num.to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49070,"user_id":50,"body":"def palindrome(n)\n  !n.is_a?(Int32) || n<0  ? \"Not valid\" : (\/(\\d).?\\1\/).match(n.to_s) != nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49071,"user_id":null,"body":"def palindrome(num)\n  return \"Not valid\" unless num.is_a?(Int32|Int64|UInt32|UInt64)\n  return \"Not valid\" if num < 0\n  !!(num.to_s =~ \/(\\d)(\\d)?(\\2)?\\1\/)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49072,"user_id":2323,"body":"def palindrome(num)\n  return \"Not valid\" if !num.is_a?(Int32) || num < 0\n  return false if num < 10\n  n = num.to_s\n  n.size.times { |i| i.times { |j| return true if n[j..i] == n[j..i].reverse } } == true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49073,"user_id":2323,"body":"def palindrome(num)\n  return \"Not valid\" if !num.is_a?(Int32) || num < 0\n  return false if num < 10\n  n = num.to_s\n  n.size.times { |i| i.times { |j| return true if n[j..i] == n[j..i].reverse } } == true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58e0cb3634a3027180000040":[{"id":49074,"user_id":1828,"body":"def sort_by_value_and_index(arr)\n  arr.each_with_index(1).to_a.sort_by{|x,y|x*y}.map{|x,y| x}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49075,"user_id":1828,"body":"def sort_by_value_and_index(arr)\n  arr.zip(arr.zip((1..arr.size).to_a).map{|x,y|x*y}).sort_by{|x,y| [y]}.map{|x,y| x}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49076,"user_id":1246,"body":"def sort_by_value_and_index(arr)\n  i = 0\n  arr.sort_by{|x|x*(i+=1)}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49077,"user_id":1072,"body":"def sort_by_value_and_index(arr) arr.each_with_index.map{|a| [a[0],a[1]+1]}.to_a.sort{|a,b| a[0]*a[1]-b[0]*b[1]}.map{|a| a[0]} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49078,"user_id":null,"body":"def sort_by_value_and_index(arr)\n  arr.map_with_index { |n,i| [n, n * (i + 1)] }\n     .sort { |a,b| a[1] <=> b[1] }\n     .map { |n| n[0] }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49079,"user_id":2563,"body":"def sort_by_value_and_index(arr)\n  arr.map_with_index { |x,i| [x, x*(i+1)] }.sort_by(&.[1]).map(&.[0])\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49080,"user_id":1750,"body":"def sort_by_value_and_index(arr)\n  arr\n  .each_with_index(1)\n  .to_a\n  .sort { |a, b| a.product <=> b.product }\n  .map(&.first)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49081,"user_id":null,"body":"def sort_by_value_and_index(arr)\n  mul_arr = arr.map_with_index { |n, i| [n * (i + 1), i] }\n  mul_arr.sort_by(&.[0]).map { |x| arr[x[1]] }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49082,"user_id":null,"body":"def sort_by_value_and_index(arr)\n  arr.each_with_index(1).to_a.map{|a,b| [a,a*b]}.sort_by{|x| x[1]}.map(&.first)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49083,"user_id":527,"body":"def sort_by_value_and_index(arr)\n  arr.each_with_index(1).to_a.sort!{ |(x1, i1), (x2, i2)| x1 * i1 - x2 * i2 }.map(&.first)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58e0f0bf92d04ccf0a000010":[{"id":49084,"user_id":53,"body":"def lost_sheep(a,b,t)\n  t-a.sum-b.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49085,"user_id":null,"body":"def lost_sheep(friday,saturday,total)\n  #your code here\n  total - friday.sum - saturday.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49086,"user_id":null,"body":"def lost_sheep(friday,saturday,total)\n  total - (friday + saturday).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49087,"user_id":1474,"body":"def lost_sheep(friday,saturday,total)\n  total - friday.sum - saturday.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49088,"user_id":421,"body":"def lost_sheep(friday,saturday,total)\n  total - (friday + saturday).flatten.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49089,"user_id":1816,"body":"def lost_sheep(friday,saturday,total)\n  total - (friday + saturday).reduce(0){|a, b| a + b}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49090,"user_id":null,"body":"def lost_sheep(friday,saturday,total)\n  return total if friday.empty? && saturday.empty?\n  total - (friday.reduce { |n, acc| n + acc } + saturday.reduce { |n, acc| n + acc })\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49091,"user_id":1768,"body":"def lost_sheep(x,y,z)\n  z - (x.sum + y.sum)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49092,"user_id":null,"body":"def lost_sheep(friday,saturday,total)\n  total - (friday.sum + saturday.sum)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49093,"user_id":1072,"body":"def lost_sheep(f,s,t) t-(f+s).reduce(0){|a,b| a+b} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58e24788e24ddee28e000053":[{"id":49094,"user_id":null,"body":"def simple_assembler(program : Array(String)) : Hash(String, Int32)\n  registers = {} of String => Int32\n  program_index = 0\n\n  while program_index < program.size\n    instruction = program[program_index].split\n    command, register, value = instruction[0], instruction[1], instruction[2]? || \"0\"\n\n    case command\n    when \"mov\"\n      registers[register] = value.to_i? || registers[value]? || registers[register]\n    when \"inc\"\n      registers[register] += 1\n    when \"dec\"\n      registers[register] -= 1\n    when \"jnz\"\n      next program_index += value.to_i if (registers.fetch(register, nil) || value.to_i) != 0\n    end\n\n    program_index += 1\n  end\n\n  registers\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49095,"user_id":null,"body":"def simple_assembler(program : Array(String))\n  registers = Hash(String, Int32).new\n  prog = program.map(&.split(\" \"))\n\n  i = 0\n  while i < prog.size\n    ins : String = prog[i][0]\n    reg = prog[i][1]\n\n    case ins\n    when \"mov\"\n      registers[reg] = registers[prog[i][2]]? || (prog[i][2]).to_i\n    when \"inc\"\n      registers[reg] += 1\n    when \"dec\"\n      registers[reg] -= 1\n    when \"jnz\"\n      reg = registers[reg]? || reg.to_i\n      if reg != 0\n        i += (registers[prog[i][2]]? || (prog[i][2]).to_i)\n        next\n      else\n        i += 1\n        next\n      end\n    end\n    i += 1\n  end\n\n  registers\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49096,"user_id":null,"body":"class Program\n  def initialize(@program : Array(String))\n    @ptr = 0\n    @registers = Hash(String, Int32).new\n  end\n  \n  def run\n    puts \"Running program\"\n    loop do\n      break if @ptr >= @program.size\n      instruction = @program[@ptr].split\n      case instruction[0]\n      when \"mov\"\n        mov instruction[1], instruction[2].to_i? || instruction[2]\n      when \"inc\"\n        inc instruction[1]\n      when \"dec\"\n        dec instruction[1]\n      when \"jnz\"\n        jnz instruction[1].to_i? || instruction[1], instruction[2].to_i\n        next\n      end\n      @ptr += 1\n    end\n    @registers\n  end\n  \n  def mov(register, value : String)\n    @registers[register] = @registers[value]\n  end\n  \n  def mov(register, value : Int32)\n    @registers[register] = value\n  end\n  \n  def inc(register)\n    @registers[register] += 1\n  end\n  \n  def dec(register)\n    @registers[register] -= 1\n  end\n  \n  def jnz(value : Int32, by)\n    @ptr += (value != 0 ? by : 1)\n  end\n  \n  def jnz(register : String, by)\n    jnz(@registers[register], by)\n  end\nend\n\ndef simple_assembler(program)\n  Program.new(program).run\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49097,"user_id":null,"body":"def val(h, a)\n  h.has_key?(a) ? h[a] : a.to_i\nend\n\ndef simple_assembler(program)\n  res = {} of String => Int32\n  pc = 0\n  while program[pc]?\n    case program[pc]\n    when \/\\Amov +(\\w+) +(-?\\w+)\\z\/\n      res[$1] = val(res, $2)\n    when \/\\Ainc +(\\w+)\\z\/\n      res[$1] += 1\n    when \/\\Adec +(\\w+)\\z\/\n      res[$1] -= 1\n    when \/\\Ajnz +(-?\\w+) +(-?\\w+)\\z\/\n      pc += val(res, $2) - 1 if val(res, $1) != 0\n    else\n      raise \"Bullshit instruction ##{pc}: #{program[pc]}\"\n    end\n    pc += 1\n  end\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49098,"user_id":null,"body":"def simple_assembler(program : Array(String)) : Hash(String, Int32)\n  memory = {} of String => Int32\n  program_index = 0\n\n  while program_index < program.size\n    instruction = program[program_index].split\n    command, register, value = instruction[0], instruction[1], instruction[2]? || \"0\"\n\n    case command\n    when \"mov\"\n      memory[register] = value.to_i? || memory[value]? || memory[register]\n    when \"inc\"\n      memory[register] += 1\n    when \"dec\"\n      memory[register] -= 1\n    when \"jnz\"\n      next program_index += value.to_i if (memory.fetch(register, nil) || value.to_i) != 0\n    end\n\n    program_index += 1\n  end\n\n  memory\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49099,"user_id":null,"body":"def simple_assembler(program : Array(String))\n  # return an Hash(String, Int32) with the registers\n  registers = Hash(String, Int32).new\n\n  curr_index = 0\n  while (curr_index < program.size)\n    cmd_split = program[curr_index].split(\" \")\n\t\n\tcase cmd_split[0]\n\twhen \"mov\"\n      registers[cmd_split[1]] = cmd_split[2].to_i do\n        registers[cmd_split[1]] = registers[cmd_split[2]]\n\t    end\n\twhen \"inc\" then registers[cmd_split[1]] += 1\n  when \"dec\" then registers[cmd_split[1]] -= 1\n\twhen \"jnz\"\n      reg_value = 0\n      begin\n        reg_value = registers[cmd_split[1]]\n      rescue\n        reg_value = cmd_split[1].to_i\n      end\n\n      if reg_value != 0\n        curr_index += cmd_split[2].to_i\n        next\n      end\n\tend\n\n    curr_index += 1\n  end\n\n\tregisters\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49100,"user_id":null,"body":"def simple_assembler(p)\n  #puts p\n  r = {} of String => Int32 # registers\n  i = 0 # instruction pointer\n  while i <= p.size-1\n    args = p[i].split\n    f = args.shift\n    x = args.shift\n    y = args.size > 0 ? args.shift : \"\"\n    case f\n    when \"mov\"\n      y = y =~ \/[0-9]\/ ? y.to_i : r[y]\n      r[x] = y\n    when \"inc\"\n      r[x] += 1\n    when \"dec\"\n      r[x] -= 1\n    when \"jnz\"\n      x = x =~ \/[0-9]\/ ? x.to_i : r[x]\n      y = y =~ \/[0-9]\/ ? y.to_i : r[y]\n      if x != 0\n        i += y\n        next\n      end\n    else\n      fail \"Unknown instruction type!\"\n    end\n    #puts \"#{i} #{f} #{r}\"\n    i += 1\n  end\n  r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49101,"user_id":null,"body":"def simple_assembler(program)\n  cpu = Cpu.new(program.map{|line| Instruction.new(line)})\n  cpu.run\nend\n\nclass Instruction\n  getter code : String\n  getter arg1 : String\n  getter arg2 : String\n\n  def initialize(line)\n    parts = line.split(\/\\s+\/)\n    @code = parts[0]\n    @arg1 = parts[1]? || \"\"\n    @arg2 = parts[2]? || \"\"\n  end\n\n  def to_s\n    [@code.rjust(8), \"#{arg1}\".rjust(8), \"#{arg2}\".rjust(8)].join(\" \")\n  end\nend\n\nclass Cpu\n  getter program : Array(Instruction)\n  getter registers : Hash(String,Int32)\n  getter p : Int32 = 0\n  getter i : Instruction = Instruction.new(\"nop\")\n  def initialize(@program)\n    @program = program\n    @registers = Hash(String,Int32).new\n  end\n\n  def valid_register?(target)\n    !!(target =~ \/^[a-z]$\/)\n  end\n  \n  def fetch\n    @i = @program[@p]\n    @p += 1\n  end\n\n  def execute\n    case @i.code\n    when \"mov\" then\n      @registers[@i.arg1] = registers[@i.arg2]? || @i.arg2.to_i\n\n    when \"inc\" then\n      @registers[@i.arg1] = registers[@i.arg1] + 1\n    \n    when \"dec\" then\n      @registers[@i.arg1] = registers[@i.arg1] - 1\n    \n    when \"jnz\" then\n      x = registers[@i.arg1]? || @i.arg1.to_i\n      y = registers[@i.arg2]? || @i.arg2.to_i\n      y -= 1 # p advances after fetching, so we must account for that when jumping relatively.\n      @p += (y) if !x.zero?\n    \n    else raise \"oops #{@i.inspect}\"\n    end\n  end\n\n  def initialize_register(register)\n    return unless valid_register?(register)\n    unless r = @registers[register]?\n      @registers[register] = 0\n    end\n  end\n      \n  def interpret\n    initialize_register(@i.arg1)\n    initialize_register(@i.arg2)\n  end\n\n  def boot\n    @p = 0\n    @registers = Hash(String,Int32).new\n  end\n\n  def finished?\n    @p >= @program.size\n  end\n\n  def process\n    loop do\n      fetch\n      interpret\n      execute\n      break if finished?\n    end\n  end\n\n  def run\n    boot\n    process\n    @registers\n  rescue ex : Exception\n    puts \"STOPPED with error: #{ex.inspect}\"\n    @registers\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49102,"user_id":null,"body":"def simple_assembler(program : Array(String))\n  i, r = 0, {} of String => Int32\n  loop do\n    instruction = program[i].split ' '\n    case instruction[0].downcase\n    when \"mov\"\n      r[instruction[1]] = instruction[2].to_i32? || r[instruction[2]]\n    when \"inc\"\n      r[instruction[1]] = (r[instruction[1]]? || 0) + 1\n    when \"dec\"\n      r[instruction[1]] = (r[instruction[1]]? || 0) - 1\n    when \"jnz\"\n      i = i + (instruction[2].to_i32? || r[instruction[2]]) - 1 unless (instruction[1].to_i32? || r[instruction[1]]) == 0\n    else\n    end\n    i += 1\n    break if i >= program.size\n  end\n  r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58e2708f9bd67fee17000080":[{"id":49103,"user_id":null,"body":"def palindrome(num)\n  return \"Not valid\" if !num.is_a?(Int32) || num < 0\n  res = (2..num.to_s.size).flat_map{|i| num.to_s.chars.each_cons(i).select{|a| a[0] != '0' && a == a.reverse}}.map{|a| a.join.to_i}.uniq.sort\n  res.empty? ? \"No palindromes found\" : res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49104,"user_id":null,"body":"def palindrome(num)\n  return \"Not valid\" unless num.is_a?(Int) && num >= 0\n  str = num.to_s\n  results = Set(Int32).new\n  (0..str.size-1).each do |i|\n    next if str[i] == '0'\n    (i+2..str.size).each do |j|\n      s = str[i...j]\n      results << s.to_i if s == s.reverse\n    end\n  end\n  return \"No palindromes found\" if results.empty?\n  results.to_a.sort!\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49105,"user_id":527,"body":"def palindrome(num)\n  return \"Not valid\" unless num.is_a?(Int) && num >= 0\n  num = num.to_s\n  res = [] of UInt64\n  (0 ... num.size).each do |b|\n    next if num[b] == '0'\n    (b+1 ... num.size).each do |e|\n      s = num[b..e]\n      res << s.to_u64 if s == s.reverse\n    end\n  end\n  return \"No palindromes found\" if res.empty?\n  res.uniq.sort\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49106,"user_id":2323,"body":"def palindrome(num)\n  return \"Not valid\" if !num.is_a?(Int32) || num < 0\n  return \"No palindromes found\" if num < 10\n  n = num.to_s\n  pals = {} of Int32 => Int32\n  n.size.times { |i| i.times { |j| s=n[j..i]; pals[s.to_i] = 1 if s[0]!='0' && s[-1]!='0' && s == s.reverse } }\n  pals.empty? ? \"No palindromes found\" : pals.keys.sort\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49107,"user_id":53,"body":"def palindrome(num)\n  return \"Not valid\" if !num.is_a?(Int32) || num < 0\n  return \"No palindromes found\" if num < 10\n  n = num.to_s\n  c = {} of Int32 => Int32\n  n.size.times { |i| i.times { |j| \n    s=n[j..i]; c[s.to_i] = 1 if s[0]!='0' && s[-1]!='0' && s == s.reverse\n  }}\n  c.empty? ? \"No palindromes found\" : c.keys.sort\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49108,"user_id":421,"body":"def palindrome(num)\n  return \"Not valid\" if !num.is_a?(Int32) || num < 0\n  lst = [] of Int32\n  s = num.to_s\n  (2..s.size).each do |i|\n    (0..s.size - i).each do |j|\n      st = s[j...j + i]\n      if st == st.reverse && !st.ends_with?(\"0\")\n        lst << st.to_i\n      end\n    end\n  end\n  lst.empty? ? \"No palindromes found\" : lst.uniq.sort\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49109,"user_id":null,"body":"def palindrome(num)\n  if num.is_a?(String) || num < 0\n    return \"Not valid\"\n  end\n\n  str = num.to_s\n  len = str.size\n  res = Array(Int32).new\n\n  return \"No palindromes found\" if len == 1\n\n  pali = ->(s : String) {\n    return false if s[0] == '0' && s[-1] == '0'\n    s == s.reverse\n  }\n\n  (2..len).each do |w|\n    (0..(len - w)).each do |x|\n      t = str[x..(x + w - 1)]\n      res << t.to_i if pali.call(t)\n    end\n  end\n\n  return \"No palindromes found\" if res.empty?\n  res.uniq!.sort!\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58e3e62f20617b6d7700120a":[{"id":49110,"user_id":421,"body":"def triangle_perimeter(triangle)\n  Math.hypot(triangle.a.x - triangle.b.x, triangle.a.y - triangle.b.y) + Math.hypot(triangle.a.x - triangle.c.x, triangle.a.y - triangle.c.y) + Math.hypot(triangle.b.x - triangle.c.x, triangle.b.y - triangle.c.y)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49111,"user_id":50,"body":"def triangle_perimeter(t)\n  pow((pow(t.a.x-t.b.x,2)+pow(t.a.y-t.b.y,2)),0.5)+pow((pow(t.a.x-t.c.x,2)+pow(t.a.y-t.c.y,2)),0.5)+pow((pow(t.b.x-t.c.x,2)+pow(t.b.y-t.c.y,2)),0.5)\nend\ndef pow(a,b)\n  a**b\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49112,"user_id":76,"body":"def dist(a, b)\n  Math.hypot(b.x - a.x, b.y - a.y)\nend\n\ndef triangle_perimeter(t)\n  dist(t.a, t.b) + dist(t.b, t.c) + dist(t.c, t.a)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49113,"user_id":null,"body":"def side(a, b)\n  Math.hypot(b.x-a.x, b.y-a.y)\nend\ndef triangle_perimeter(triangle)\n  side(triangle.a, triangle.b)+side(triangle.a, triangle.c)+side(triangle.b, triangle.c)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49114,"user_id":null,"body":"def triangle_perimeter(triangle)\n  distance = ->(p1 : Point, p2 : Point) { Math.sqrt((p1.x - p2.x).abs2 + (p1.y - p2.y).abs2) }\n  distance.call(triangle.a, triangle.b) + distance.call(triangle.b, triangle.c) + distance.call(triangle.c, triangle.a)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49115,"user_id":null,"body":"struct Point\n  property x, y\n  \n  def initialize(@x : Int32, @y : Int32)\n  end\n  \n  def distance(other : Point)\n    Math.sqrt((x - other.x).abs2 + (y - other.y).abs2)\n  end\nend\n\nstruct Triangle\n  def initialize(@a : Point, @b : Point, @c : Point)\n  end\n  \n  def perimeter\n    @a.distance(@b) + @b.distance(@c) + @c.distance(@a)\n  end\nend\n\ndef triangle_perimeter(triangle)\n  triangle.perimeter\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49116,"user_id":1828,"body":"def triangle_perimeter(triangle)\n  a = Math.sqrt((triangle.b.x-triangle.a.x)**2+(triangle.b.y-triangle.a.y)**2)\n  b = Math.sqrt((triangle.c.x-triangle.b.x)**2+(triangle.c.y-triangle.b.y)**2)\n  c = Math.sqrt((triangle.a.x-triangle.c.x)**2+(triangle.a.y-triangle.c.y)**2)\n  a+b+c\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58e3ea29a33b52c1dc0000c0":[{"id":49117,"user_id":53,"body":"def dot_product(a, b)\n   puts Vector.methods\n   p = 0\n   p += a.x * b.x\n   p += a.y * b.y\n   p += a.z * b.z\n   p\nend\n\nclass Object\n  macro methods\n    {{ @type.methods.map &.name.stringify }}\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49118,"user_id":851,"body":"def dot_product(a, b)\n  return (a.x * b.x) + (a.y * b.y) + (a.z * b.z)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49119,"user_id":1828,"body":"def dot_product(a, b)\n  a.x*b.x+a.y*b.y+a.z*b.z\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58e440d8acfd3edfb2000aee":[{"id":49120,"user_id":421,"body":"def cross_product(a, b)\n    xaxis = a.y * b.z - b.y * a.z\n    yaxis = b.x * a.z - a.x * b.z\n    zaxis = a.x * b.y - b.x * a.y\n    Vector.new(xaxis, yaxis, zaxis)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49121,"user_id":50,"body":"def cross_product(v1, v2)\n  Vector.new(v1.y*v2.z-v1.z*v2.y, v1.z*v2.x-v1.x*v2.z, v1.x*v2.y-v1.y*v2.x)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49122,"user_id":48,"body":"def cross_product(a, b)\n  return Vector.new(a.y * b.z - a.z * b.y,\n                    a.z * b.x - a.x * b.z,\n                    a.x * b.y - a.y * b.x);\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49123,"user_id":1828,"body":"def cross_product(a, b)\n  Vector.new(a.y*b.z-a.z*b.y,a.z*b.x-a.x*b.z,a.x*b.y-a.y*b.x)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58e8cad9fd89ea0c6c000258":[{"id":49124,"user_id":null,"body":"def kooka_counter(laughing)\n  laughing.scan(\/(ha|Ha)\\1+\/).size \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49125,"user_id":527,"body":"def kooka_counter(laughing)\n  laughing.delete('a').squeeze.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49126,"user_id":50,"body":"def kooka_counter(laughing)\n  c=0\n  s=\"\"\n  (0...laughing.size).step(2).each do |i|\n    b=laughing[i..i+1]\n    if b != s\n      c+=1\n      s=b\n    end\n  end\n  c\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49127,"user_id":53,"body":"def kooka_counter(laughing)\n  p = nil\n  m = 0\n  laughing.chars.each{|e|\n    if (e == 'h' || e == 'H')\n      if (e != p) \n        p = e\n        m += 1\n      end\n    end\n  }\n  m\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49128,"user_id":1624,"body":"def kooka_counter(s)\n  s.scan(\/(?:Ha)+|(?:ha)+\/).size\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49129,"user_id":2563,"body":"def kooka_counter(laughing)\n  laughing = laughing.gsub(\"a\", \"\")\n  last, count = ' ', 0\n  laughing.chars.each do |c|\n    count +=1 if c != last\n    last = c\n  end\n  count  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49130,"user_id":null,"body":"def kooka_counter(laughing)\n  filtered = laughing.chars\n               .reject { |a| a == 'a' }\n  counter = 0\n  current_char = \"\"\n  \n  filtered.each do |char|\n    if char != current_char\n      current_char = char\n      counter += 1\n    end\n  end\n  \n  return counter\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49131,"user_id":527,"body":"def kooka_counter(laughing)\n  laughing.scan(\/(..)\\1+\/).size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49132,"user_id":1246,"body":"def kooka_counter(laughing)\n   laughing.scan(\/(ha)+|(Ha)+\/).size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49133,"user_id":null,"body":"def kooka_counter(laughing)\n  count = 0\n  laughing.scan(\/(Ha)+|(ha)+\/) { count += 1 }\n  count\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58ef87dc4db9b24c6c000092":[{"id":49134,"user_id":421,"body":"def sect_sort(arr, start, l)\n   l = l.nil? ? arr.size : l\n   arr[0...start] + arr[start...start + l].sort! + (l == arr.size ? [] of Int32 : arr[[arr.size, start + l].min..-1])\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49135,"user_id":1624,"body":"def sect_sort(ary, start, len)\n  len ||= (ary.size - start)\n  ary[start, len] = ary[start, len].sort\n  ary\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49136,"user_id":1750,"body":"def sect_sort(array, start, length)\n  end_at = length ? length : array.size\n  array[start, end_at] = array[start, end_at].sort\n  array\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49137,"user_id":1750,"body":"def sect_sort(array, start, length)\n  # starting = array[0, start]\n  # middle = length && length + start + 1 < array.size ? array[start..length + 1].sort : array[start..-1].sort\n  # # ending = start > 0 && length && length + start < array.size ? array[start + length..-1] : [] of Int32\n  # ending = start > 0 && length && length + start < array.size ? array[start + length..-1] : [] of Int32\n  # p starting\n  # p middle\n  # p ending\n  # starting + middle + ending\n  p length\n  p (length ? \"have length\" : \"no length\")\n  ending = length ? length : array.size\n  p ending\n  p array[start, ending]\n  array[start, ending] = array[start, ending].sort\n  array\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49138,"user_id":1072,"body":"def sect_sort(arr,s,l=arr.size) l=l != nil ? l : arr.size; arr[s,l.to_s.to_i] = arr[s,l.to_s.to_i].sort; arr end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58f0ba42e89aa6158400000e":[{"id":49139,"user_id":null,"body":"THICKNESS = 0.0001\ndef fold_to(distance)\n  return nil if distance < 0\n  return 0  if distance < THICKNESS\n  # distance = (2 ** times) * thickness\n  Math.log(distance \/ THICKNESS, 2).ceil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49140,"user_id":1750,"body":"def fold_to(distance)\n  return nil if distance < 0\n  fold_to_helper(distance, 0.0001, 0)\nend\n\ndef fold_to_helper(distance, acc, folds)\n  acc >= distance ? folds : fold_to_helper(distance, acc * 2, folds.succ)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49141,"user_id":1474,"body":"def fold_to(distance)\n  return if distance < 0\n  cnt, th = 0, 0.0001\n  while th < distance\n    th += th\n    cnt += 1\n  end\n  cnt\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49142,"user_id":null,"body":"def fold_to(distance)\n  if distance < 0\n    return nil\n  end\n  thickness = 0.0001\n  folds = 0\n  while thickness < distance\n    thickness *= 2\n    folds += 1\n  end\n  folds\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49143,"user_id":1072,"body":"def fold_to(distance)\n  return nil if distance<0\n  c = 0\n  d = 0.0001\n  while d < distance\n    d *= 2\n    c += 1\n  end\n  return c\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49144,"user_id":168,"body":"def fold_to(distance)\n  distance < 0 ? nil : [0, Math.log2(10000.0 * distance).ceil].max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49145,"user_id":53,"body":"def fold_to(n)\n  return nil if n < 0\n  i=0\n  m=0.0001\n  while m<n\n    m*=2\n    i+=1\n  end\n  i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49146,"user_id":421,"body":"def fold_to(distance)\n  if distance < 0 \n    return nil\n  end\n  l = 0.0001\n  count = 0\n  while l < distance\n    l *= 2\n    count += 1\n  end\n  count\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49147,"user_id":null,"body":"def fold_to(distance)\n  case\n    when distance < 0\n      nil\n    when distance < 0.0001\n      0\n    else\n      Math.log2(distance\/0.0001).ceil.to_i\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49148,"user_id":1624,"body":"def fold_to(distance)\n  return nil if distance < 0\n  e = 0.0001\n  n = 0\n  while e < distance\n    n += 1\n    e *= 2\n  end\n  n\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58f5c63f1e26ecda7e000029":[{"id":49149,"user_id":2323,"body":"def wave(str)\n  (0...str.size).reduce([] of String) do |arr, i| \n    str[i] == ' ' ? arr : arr.push(str[0...i] + str[i].upcase + str[i+1..-1])\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49150,"user_id":null,"body":"def wave(str)\n  waves = [] of String\n  \n  str.size.times do |i|\n    next if str[i] == ' '\n    waves << str.sub(i, str[i].upcase)\n  end\n  \n  waves\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49151,"user_id":421,"body":"def wave(str)\n  str.chars.map_with_index{|x, i| str[0...i] + x.upcase + str[i + 1..-1]}.select{|a| a != str}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49152,"user_id":null,"body":"def wave(str)\n  arr = Array(String).new(str.size)\n  str.each_char_with_index do |char, i|\n    next if char.whitespace?\n    arr << str.sub(i, char.upcase)\n  end\n  arr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49153,"user_id":null,"body":"def wave(str)\n  (0...str.size).map { |i| str.sub(i, str[i].upcase) }.select { |s| s != str }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49154,"user_id":null,"body":"def wave(str)\n  arr_s = Array(String).new\n  str.each_char_with_index do |c, idx|\n    arr_s.push(str.sub(idx, c.upcase)) if c.letter?\n  end\n  arr_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49155,"user_id":50,"body":"def wave(s)\n  (0..s.size-1).select{|i| s[i]!=' '}.map{ |i| i == 0 ? s.capitalize : s[0..i-1]+s[i].upcase+s[i+1..]}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49156,"user_id":null,"body":"def wave(str)\n  n = 0\n  acc = [] of String\n  while n < str.size\n    if str[n] != ' '\n      acc << str[0, n] + str[n].upcase + str[n+1, str.size]\n    end\n    n += 1\n  end\n  return acc\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49157,"user_id":null,"body":"def wave(str)\n  result = [] of String\n  str.size.times do |i|\n    next if str[i].to_s.strip.blank?\n    \n    result.push(str[0, i] + str[i].to_s.upcase + str[(i + 1)..str.size - 1])\n  end\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49158,"user_id":null,"body":"def wave(str)\n  result = [] of String\n  (0...str.size).each do |e|\n    c = str[e].upcase\n    result << str.sub(e, c) if c.ascii_uppercase?\n  end\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58f6000bc0ec6451960000fd":[{"id":49159,"user_id":527,"body":"def sel_reverse(array, length)\n  return array if length == 0\n  array.each_slice(length).flat_map(&.reverse).to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49160,"user_id":421,"body":"def sel_reverse(arr,l)\n  l.zero? ? arr : arr.each_slice(l).to_a.flat_map(&.reverse)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49161,"user_id":null,"body":"def sel_reverse(arr,l)\n  return arr if l <= 0\n  arr.in_groups_of(l).flat_map(&.reverse).compact\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49162,"user_id":null,"body":"def sel_reverse(arr,l)\n  if l >= arr.size\n    return arr.reverse\n  end\n  \n  if l == 0 \n    return arr \n  end\n\n  result = [] of Int32\n\n  while arr.size > 0\n    result.concat(arr.shift(l).reverse)\n  end\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49163,"user_id":759,"body":"def sel_reverse(arr : Array(T),l) forall T\n  return arr if l == 0\n  t = 0\n  r = [] of T\n  a = [] of T\n  arr.each do |x|\n    if t == l\n      r.concat(a.reverse)\n      a = [] of T\n      t = 0\n    end\n    t += 1\n    a << x\n  end\n  r.concat(a.reverse)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49164,"user_id":233,"body":"def sel_reverse(arr,l)\n  l==0 ? arr : arr.each_slice(l).map(&.reverse).reduce([] of Int32){|a, b|a + b}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49165,"user_id":null,"body":"def sel_reverse(arr,l)\n  v = 0\n  out = [] of Int32\n  if l <= 0\n    return arr\n  end\n  while v < arr.size\n    out += arr[v...(v+l)].reverse\n    v += l\n  end\n  out\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49166,"user_id":null,"body":"def sel_reverse(arr,l)\n  return arr if l == 0\n  #your code here\n  result=[] of Array(Int32)\n  arr.each_slice(l) do |xx|\n    result += xx.reverse\n  end\n  return result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49167,"user_id":2323,"body":"def sel_reverse(arr,l)\n  l > 0 ? arr.each_slice(l).flat_map(&.reverse).to_a : arr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49168,"user_id":null,"body":"def sel_reverse(input_array : Array(Int32), slice_length : Int32)\n  return input_array if slice_length < 1\n  array = input_array.dup\n  out = [] of Int32\n  until array.empty?\n    array.shift(slice_length).reverse.each do |element|\n      out << element\n    end\n  end\n  out\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58f6024e1e26ec376900004f":[{"id":49169,"user_id":421,"body":"def factors(i, limit)\n  i < limit ? [] of Int32 : (limit..i \/ 2).select{|x| i % x == 0} + [i]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49170,"user_id":null,"body":"def factors(integer, limit)\n  (limit..integer).select{|x| integer % x == 0}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49171,"user_id":1624,"body":"def factors(n, max)\n  return [] of Int32 if max > n\n  (max..n).select{|i| n % i == 0}\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49172,"user_id":null,"body":"def factors(integer, limit)\n  (limit..integer).select{|i| integer%i==0}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49173,"user_id":1072,"body":"def factors(n,l) (l..n).select{|i| n%i==0} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49174,"user_id":1072,"body":"def factors(n,l) (l..n).select{|i| n%i==0} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58f6f87a55d759439b000073":[{"id":49175,"user_id":421,"body":"def negation_value(str : String, val)\n  str.count(\"!\").even? ? !!val : !val\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49176,"user_id":1474,"body":"def negation_value(str : String, val)\n  str.size.odd? ? !val : !!val\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49177,"user_id":527,"body":"def negation_value(str : String, val : Bool) : Bool\n  str.size.even? == val\nend\n\ndef negation_value(str : String, val : Object) : Bool\n  negation_value(str, !!val)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49178,"user_id":527,"body":"def negation_value(str : String, val : Object) : Bool\n  str.size.even? == !!val\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49179,"user_id":645,"body":"def negation_value(str : String, v)\n  str.size % 2 == 0 ? !!v : !v\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58f8a3a27a5c28d92e000144":[{"id":49180,"user_id":null,"body":"def first_non_consecutive(arr)\n  arr.each_cons(2) do |nums|\n    return nums[1] if (nums[1] - nums[0]) > 1\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49181,"user_id":421,"body":"def first_non_consecutive(arr)\n  (0...arr.size - 1).each do |i|\n    if arr[i] + 1 != arr[i + 1]\n       return arr[i + 1]\n    end\n  end\n  nil\nend\n","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49182,"user_id":168,"body":"def first_non_consecutive(arr)\n  arr.each_cons(2).find { |(x, y)| y - x > 1 }.try &.last\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49183,"user_id":527,"body":"def first_non_consecutive(xs)\n  xs.each.cons_pair.find{ |x, y| x + 1 != y }.try{ |_, y| y }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49184,"user_id":53,"body":"def first_non_consecutive(arr)\n  arr.each_with_index do |n, i|\n    if i > 0 && n != arr[i-1]+1\n      return arr[i]\n    end\n  end\n  return nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49185,"user_id":1474,"body":"def first_non_consecutive(arr)\n  i = arr.min\n  arr.each do |j|\n    return j if i != j\n    i += 1\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49186,"user_id":null,"body":"def first_non_consecutive(arr)\n  arr.each_cons(2){|x| x[0]+1 == x[1] ? nil : return x[1]}\n  return nil\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49187,"user_id":null,"body":"def first_non_consecutive(arr)\n  arr.each_cons(2) do |ab|\n    a, b = ab\n\n    return b unless a + 1 == b \n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49188,"user_id":76,"body":"def first_non_consecutive(arr)\n  first = arr[1..-1].zip(arr).find { |a, b| a - b != 1 }\n  first.nil? ? nil : first[0]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49189,"user_id":564,"body":"def first_non_consecutive(arr)\n  ns, ms = arr[0..-2], arr[1..-1]\n  i, len = 0, ns.size\n  while i < len\n    if ns[i] + 1 != ms[i]\n      return ms[i]\n    end\n    i += 1\n  end\n  return nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"58fd9f6213b00172ce0000c9":[{"id":49190,"user_id":null,"body":"def split_exp(n)\n  a = [] of String\n  l = n.index('.') || n.size\n  (0..l-1).each {|i| a<<n[i]+\"0\"*(l-i-1) if n[i]!='0'}\n  (l+1..n.size-1).each {|i| a<<\".\"+\"0\"*(i-l-1)+n[i] if n[i]!='0'}\n  a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49191,"user_id":1624,"body":"def split_exp(n)\n  i = [] of String\n  f = [] of String\n  while n =~ \/\\A(\\d)(\\d*)\/\n    n = n[1..-1]\n    if $1 != \"0\"\n      i << \"#{$1}#{\"0\" * $2.size}\"\n    end\n  end\n  while n =~ \/\\A\\.(\\d*)(\\d)\\z\/\n    n = n[0..-2]\n    if $2 != \"0\"\n      f << \".#{\"0\" * $1.size}#{$2}\"\n    end\n  end\n  i + f.reverse\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49192,"user_id":1828,"body":"def split_exp(n)\n  c = n.split(\".\").push(\"\")\n  a, b = c\n  a = a.chars.map_with_index{|i,j| i.to_i32 == 0 ? nil : i+\"0\"*(a.size-1-j)}\n  b = b.chars.map_with_index{|i,j| i.to_i32 == 0 ? nil : \".\"+\"0\"*j+i}\n  (a+b).compact\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49193,"user_id":null,"body":"def split_exp(n)\n  first, last = n.split('.').first, n.split('.').last\n  l_ary, r_ary = [] of String, [] of String\n  left = build_left(first, l_ary)\n  right = build_right(last, r_ary) if n.includes?('.') && last =~ \/[1-9]+\/\n  right.nil? ? left : left.concat(right)\nend\n\ndef build_left(str, l_ary)\n  str.each_char_with_index do |s, i|\n    l_ary << s.to_s.ljust(str.size - i, '0') unless s == '0'\n  end\n  l_ary\nend\n\ndef build_right(str, r_ary)\n  str.each_char_with_index do |s, i|\n    r_ary << \".\" + s.to_s.rjust(i + 1, '0') unless s == '0'\n  end\n  r_ary\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49194,"user_id":1072,"body":"def split_exp(n) d=n.index(\".\") || n.size; n.split(\"\").each_with_index.map{|e| a=e[0]; i=e[1]; d==i ? \"0\" : d>i ? a+\"0\"*(d-i-1) : \".\"+\"0\"*(i-d-1)+a}.to_a.select{|e| e.to_f != 0} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5900750cb7c6172207000054":[{"id":49195,"user_id":null,"body":"def sticky_calc(operation, val1, val2)\n  val2 = val2.round.to_i\n  val1 = \"#{val1.round.to_i}#{val2}\".to_i\n  case operation\n    when \"+\"; val1 + val2\n    when \"-\"; val1 - val2\n    when \"*\"; val1 * val2\n    else val1 \/ val2 \n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49196,"user_id":null,"body":"def sticky_calc(operation, val1, val2)\n  val2 = val2.round.to_i\n  val1 = (val1.round.to_i.to_s + val2.to_s).to_i\n  case operation\n    when \"+\"; val1 + val2\n    when \"-\"; val1 - val2\n    when \"*\"; val1 * val2\n    else val1 \/ val2 \n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49197,"user_id":168,"body":"def sticky_calc(operation, val1 : Number, val2 : Number)\n  v1, v2 = val1.round.to_i, val2.round.to_i\n  v1 = \"#{v1}#{v2}\".to_i\n  case operation\n    when \"+\"; v1 + v2\n    when \"-\"; v1 - v2\n    when \"*\"; v1 * v2\n    when \"\/\"; v1 \/ v2\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49198,"user_id":null,"body":"def sticky_calc(op, a, b)\n  n = \"#{(a+0.5).to_i32}#{(b+0.5).to_i32}\".to_i32\n  return n + b.round 0 if op == \"+\"\n  return n - b.round 0 if op == \"-\"\n  return n * b.round 0 if op == \"*\"\n  return n \/ b.round 0 if op == \"\/\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49199,"user_id":null,"body":"def sticky_calc(operation, val1, val2)\n  val1 = val1.round.to_i32\n  val2 = val2.round.to_i32\n  num = (val1.to_s + val2.to_s).to_i32\n  \n  variations = {\n    \"+\": num + val2,\n    \"*\": num * val2,\n    \"\/\": num \/ val2,\n    \"-\": num - val2\n  }\n  \n  variations[operation]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49200,"user_id":1375,"body":"def sticky_calc(operation, val1, val2)\n  a = [val1, val2].map { |v| v.round.to_i.to_s }.join.to_f\n  \n  case operation\n  when \"+\" then (a + val2.round).to_i\n  when \"-\" then (a - val2.round).to_i\n  when \"*\" then (a * val2.round).to_i\n  when \"\/\" then (a \/ val2.round).to_i\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49201,"user_id":1072,"body":"def sticky_calc(o,a,b) b=b.round.to_i;a=(a.round.to_i.to_s+b.to_s).to_i; o==\"+\" ? a+b : o==\"-\" ? a-b : o==\"*\" ? a*b : a\/b end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5901f361927288d961000013":[{"id":49202,"user_id":421,"body":"def product(arr)\n   arr.nil? || arr.empty? ? nil : arr.product\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49203,"user_id":null,"body":"def product(arr : Array(Int32)?) : Int32?\n  return nil if arr.nil? || arr.empty?\n  arr.product\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49204,"user_id":1474,"body":"def product(arr)\n  arr && !arr.empty? ? arr.reduce(1) { |p, i| p * i } : nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49205,"user_id":1624,"body":"def product(arr)\n  return nil if arr.nil? || arr.empty?\n  arr.product\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49206,"user_id":527,"body":"def product(nil : Nil) : Nil\n  nil\nend\n\ndef product(xs : Indexable(T)) : T? forall T\n  xs.product unless xs.empty?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49207,"user_id":1072,"body":"def product(arr) arr && arr.size>0 ? arr.reduce(1){|a,b| a*b} : nil end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5902f1839b8e720287000028":[{"id":49208,"user_id":527,"body":"def parameter(n)\n  ds = n.digits\n  ds.sum.lcm(ds.product)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49209,"user_id":1072,"body":"def gcd(a,b) b==0 ? a : gcd(b,a%b) end\ndef lcm(a,b) a \/\/ gcd(a,b)*b end\ndef parameter(n)\n  n=n.to_s.split(\"\").map{|e| e.to_i}\n  lcm(n.reduce(1){|a,b| a*b},n.reduce(0){|a,b| a+b})\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49210,"user_id":null,"body":"def parameter(n)\n  ds = n.to_s.chars.map(&.to_i64)\n  ds.product.lcm ds.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49211,"user_id":null,"body":"def parameter(n)\n  ds = n.to_s.chars.map(&.to_i)\n  prod, sum = ds.product, ds.sum\n  prod\/prod.gcd(sum)*sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49212,"user_id":1828,"body":"def parameter(n)\n  c = n.to_s.chars.map(&.to_i64)\n  c.sum.lcm(c.reduce{|i,j| i*j})\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49213,"user_id":1072,"body":"def gcd(a,b) b==0 ? a : gcd(b,a%b) end; def lcm(a,b) a \/ gcd(a,b)*b end; def parameter(n) n=n.to_s.split(\"\").map{|e| e.to_i}; lcm(n.reduce(1){|a,b| a*b},n.reduce(0){|a,b| a+b}) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5905871c00881d0e85000015":[{"id":49214,"user_id":421,"body":"def mix_fruit(arr)\n  regular = [\"banana\", \"orange\", \"apple\", \"lemon\", \"grapes\"]\n  special = [\"avocado\", \"strawberry\", \"mango\"]\n  (arr.map(&.downcase).sum{|x| regular.includes?(x) ? 5 : special.includes?(x) ? 7 : 9} \/ arr.size).round\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49215,"user_id":null,"body":"def mix_fruit(arr)\n  reg_fruits = [\"banana\", \"orange\", \"apple\", \"lemon\", \"grapes\"]\n  spe_fruits = [\"avocado\", \"strawberry\", \"mango\"]\n  sum = 0.0\n  arr.each do |fruit|\n    fruit = fruit.downcase\n    if reg_fruits.includes?(fruit)\n      sum += 5.0\n    elsif spe_fruits.includes?(fruit)\n      sum += 7.0\n    else\n      sum += 9.0\n    end\n  end\n  (sum \/ arr.size).round\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49216,"user_id":null,"body":"def mix_fruit(arr)\n  prices = {\n    :regular => 5,\n    :special => 7,\n    :other => 9\n  }\n\n  fruits = {\n    \"banana\" => prices[:regular],\n    \"orange\" => prices[:regular],\n    \"apple\" => prices[:regular],\n    \"lemon\" => prices[:regular],\n    \"grapes\" => prices[:regular],\n    \"avocado\" => prices[:special],\n    \"strawberry\" => prices[:special],\n    \"mango\" => prices[:special]\n  }\n  \n  (arr.reduce(0) { |sum, fruit| sum += fruits[fruit.downcase]? || prices[:other] }.to_f \/ arr.size).round\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49217,"user_id":null,"body":"def mix_fruit(arr)\n  regularFruits = [\n    \"banana\",\n    \"orange\",\n    \"apple\",\n    \"lemon\",\n    \"grapes\"\n  ]\n\n  specialFruits = [\n    \"avocado\",\n    \"strawberry\",\n    \"mango\"\n  ]\n  \n  arr_prices = arr.map { |s|\n    sm = s.downcase\n    price = 5\n    if regularFruits.includes? sm\n    elsif specialFruits.includes? sm\n      price = 7\n    else\n      price = 9\n    end\n    price\n  }\n  \n  sum_price = arr_prices.sum\n  mean_price = (sum_price.to_f \/ arr.size.to_f).round\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49218,"user_id":null,"body":"def mix_fruit(arr)\n  regularFruits = [\n    \"banana\",\n    \"orange\",\n    \"apple\",\n    \"lemon\",\n    \"grapes\"\n  ]\n\n  specialFruits = [\n    \"avocado\",\n    \"strawberry\",\n    \"mango\"\n  ]\n  \n  arr_prices = arr.map { |s|\n    sm = s.downcase\n    price = 5\n    if regularFruits.includes? sm\n    elsif specialFruits.includes? sm\n      price = 7\n    else\n      price = 9\n    end\n    price\n  }\n  sum_price = arr_prices.reduce { |acc, i| acc + i }\n  mean_price = (sum_price.to_f \/ arr.size.to_f).round\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49219,"user_id":1072,"body":"def mix_fruit(arr) (arr.reduce(0){|a,b| b=b.downcase; a+([\"banana\",\"orange\",\"apple\",\"lemon\",\"grapes\"].index(b) ? 5 : [\"avocado\",\"strawberry\",\"mango\"].index(b) ? 7 : 9)} \/ arr.size.to_f).round end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5906436806d25f846400009b":[{"id":49220,"user_id":421,"body":"def x(n)\n  (0...n).map_with_index{|_, i| (0...n).map_with_index{|_, j| i == j || i == n - j - 1 ? 'o' : \" \"}.join}.join(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49221,"user_id":1072,"body":"def x(n) ls=(0..(n\/\/2)).map{|i| hl=\" \"*i+\"o\"+\" \"*((n-1)\/\/2-i); hl+hl.split(\"\").reverse[1,9999].join}; (ls+ls.reverse[1,9999]).join(\"\n\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49222,"user_id":null,"body":"def x(n)\n  n.times.map do | i | \n    s = [' '] * n\n    s[i] = s[n-i-1] = 'o'\n    s.join\n  end.join(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49223,"user_id":759,"body":"def x(n)\n  (1..n).map { |a| (1..n).map { |b| b == a || b == n - a + 1 ? 'o' : ' ' }.join }.join '\n'\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5906a218dfeb0dbb52000005":[{"id":49224,"user_id":2609,"body":"def hidden(num)\n  num.to_s.tr(\"6174329805\", \"abdeilmnot\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49225,"user_id":527,"body":"def hidden(num)\n  num.to_s.tr(\"0123456789\", \"oblietadnm\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49226,"user_id":null,"body":"def hidden(num : Int) : String\n  num.to_s.gsub(\/.\/) { |l| \"oblietadnm\"[l.to_i] }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49227,"user_id":421,"body":"def hidden(num)\n  num.digits.reverse.map{|x| \"oblietadnm\"[x]}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49228,"user_id":null,"body":"def hidden(num)\n  num.to_s.chars.map{|c| \"oblietadnm\"[c.to_i]}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49229,"user_id":1828,"body":"def hidden(num)\n  s = \"oblietadnm\"\n  num.to_s.chars.map{|i| s[i.to_i]}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49230,"user_id":null,"body":"def hidden(num)\n  keys = { '6' => 'a',\n           '1' => 'b',\n           '7' => 'd',\n           '4' => 'e',\n           '3' => 'i',\n           '2' => 'l',\n           '9' => 'm',\n           '8' => 'n',\n           '0' => 'o',\n           '5' => 't' }\n  num.to_s.gsub(keys)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49231,"user_id":null,"body":"def hidden(num)\n  key = {'a' => 6, 'b' => 1, 'd' => 7, 'e' => 4, 'i' => 3, 'l' => 2, 'm' => 9, 'n' => 8, 'o' => 0, 't' => 5}\n  num.to_s.chars.map{|e| key.key(e.to_i).to_s }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49232,"user_id":1072,"body":"def hidden(n) n.to_s.split(\"\").map{|d| \"oblietadnm\"[d.to_i]}.join end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59098c39d8d24d12b6000020":[{"id":49233,"user_id":421,"body":"def dot(n,m)\n  border = \"+---\" * n + '+'\n  centre = \"| o \" * n + '|' + \"\n\"\n  (border + \"\n\" + centre) * m + border\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49234,"user_id":null,"body":"def dot(w, h)\n  String.build do |s|\n    h.times do |i|\n      s << \"+---\" * w + \"+\n\"\n      s << \"| o \" * w + \"|\n\"\n      s << \"+---\" * w + \"+\" if i == h - 1\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49235,"user_id":1072,"body":"def dot(n,m) l,c=(0..n).map{\"+\"}.join(\"---\"),(0..n).map{\"|\"}.join(\" o \"); ([l,c]*m+[l]).join(\"\n\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"590adadea658017d90000039":[{"id":49236,"user_id":421,"body":"def fruit(reels, spins)\n  arr = [\"Jack\", \"Queen\", \"King\", \"Bar\", \"Cherry\", \"Seven\", \"Shell\", \"Bell\", \"Star\", \"Wild\"]\n  slot = spins.map_with_index{|x, i| reels[i][x]}.sort\n  s = slot.uniq.size\n  ((arr.index(slot[1]) || 0) + 1) * (s == 1 ? 10 : slot.count(\"Wild\") == 2 ? 1 : slot.includes?(\"Wild\") && s == 2 ? 2 : s == 3 ? 0 : 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49237,"user_id":1072,"body":"def fruit(r,s) deck=s.each_with_index.map{|e| r[e[1]][e[0]][0,2]}.to_a.sort; deck[0] != deck[1] && deck[1] != deck[2] ? 0 : ([\"\",\"Ja\",\"Qu\",\"Ki\",\"Ba\",\"Ch\",\"Se\",\"Sh\",\"Be\",\"St\",\"Wi\"].index(deck[1]) || 0)*(deck[0]==deck[2] ? 10 : (deck[2]==\"Wi\" || deck[0]==\"Wi\") && deck[1] != \"Wi\" ? 2 : 1) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49238,"user_id":null,"body":"def fruit(reels, spins)\n    scoring = {\n      \"Wild\":   10,\n      \"Star\":   9,\n      \"Bell\":   8,\n      \"Shell\":  7,\n      \"Seven\":  6,\n      \"Cherry\": 5,\n      \"Bar\":    4,\n      \"King\":   3,\n      \"Queen\":  2,\n      \"Jack\":   1,\n    }\n\n    values = reels.map_with_index { |reel, i| reel[spins[i]] }\n    counts = Hash(String, Int32).new { |h, k| h[k] = 0 }\n    values.each { |v| counts[v] += 1 }\n\n    relevant_values = counts.to_a.select { |v| v[1] > 1 }\n    return 0 if relevant_values.size == 0\n\n    image, count = relevant_values.first\n    multiplier = count == 3 ? 10 : counts[\"Wild\"] == 1 ? 2 : 1\n    scoring[image] * multiplier\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49239,"user_id":null,"body":"def fruit(reels, spins)\n  pts = {\"Jack\" => 1, \"Queen\" => 2, \"King\" => 3, \"Bar\" => 4, \"Cherry\" => 5,\n        \"Seven\" => 6, \"Shell\" => 7,\"Bell\" => 8, \"Star\" => 9, \"Wild\" => 10}\n  r = spins.map_with_index{|v,i| reels[i][v]}.group_by(&.itself).values.sort_by(&.size)\n  if r[0].size == 3\n    pts[r[0][0]] * 10\n  elsif r[1].size == 2\n    r[0] == [\"Wild\"] ? pts[r[1][0]] * 2 : pts[r[1][0]]\n  else 0 end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49240,"user_id":null,"body":"def fruit(reels, spins)\n  items = {\"Jack\", \"Queen\", \"King\", \"Bar\", \"Cherry\", \"Seven\", \"Shell\", \"Bell\", \"Star\", \"Wild\"}\n\n  reel_1, reel_2, reel_3 = reels\n  spin_1, spin_2, spin_3 = spins\n\n  fruit_1 = reel_1[spin_1]\n  fruit_2 = reel_2[spin_2]\n  fruit_3 = reel_3[spin_3]\n\n  if fruit_1 == fruit_2\n    # Reel 1 & 2 are the same\n    score = (items.index(fruit_1).not_nil! + 1)\n\n    if fruit_2 == fruit_3\n      # The 3 reels are the same\n      return score * 10\n    elsif fruit_3 == \"Wild\"\n      # There's a wild\n      return score * 2\n    else\n      return score\n    end\n  elsif fruit_1 == fruit_3\n    # Reel 1 & 3 are the same\n    score = (items.index(fruit_1).not_nil! + 1)\n    \n    if fruit_2 == fruit_3\n      # The 3 reels are the same\n      return score * 10\n    elsif fruit_2 == \"Wild\"\n      # There's a wild\n      return score * 2\n    else\n      return score\n    end\n  elsif fruit_2 == fruit_3\n    # Reel 2 & 3 are the same\n    score = (items.index(fruit_2).not_nil! + 1)\n    \n    if fruit_1 == fruit_3\n      # The 3 reels are the same\n      return score * 10\n    elsif fruit_1 == \"Wild\"\n      # There's a wild\n      return score * 2\n    else\n      return score\n    end\n  else\n    return 0\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49241,"user_id":null,"body":"def fruit(reels, spins)\n  result = Hash(String, Int32).new 0\n  [reels[0][spins[0]], reels[1][spins[1]], reels[2][spins[2]]].each{ |r| result[r] += 1 }\n  result = result.to_a.sort_by{ |k,v| v }.reverse\n  result_size = result.size  \n  idx = SCORING.index result[0][0]\n  if result_size == 1\n  \treturn (idx + 1) * 10 if idx.is_a? Int32\n  elsif result_size == 2 && result[1][0] == \"Wild\"\n    return (idx + 1) * 2 if idx.is_a? Int32\n  elsif result_size == 2\n  \treturn idx + 1 if idx.is_a? Int32\n  end\n\t0\nend\n  \nSCORING = [\n\"Jack\", \n\"Queen\", \n\"King\", \n\"Bar\", \n\"Cherry\", \n\"Seven\", \n\"Shell\", \n\"Bell\", \n\"Star\", \n\"Wild\", \n]\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49242,"user_id":null,"body":"def fruit(reels, spins)\n  a = {\"Ja\", \"Qu\", \"Ki\", \"Ba\", \"Ch\", \"Se\", \"Sh\", \"Be\", \"St\", \"Wi\"}\n  result = reels.map_with_index { |x, i| x[spins[i]] }\n  h = result.index_by{ |x| result.count(x) }\n  if value = a.index (h[2]? || h[3]? || \"\")[0..1]\n    value += 1\n    case h.key(\"Wild\") { 0 }\n    when 0, 2, 3\n      h[3]? ? value * 10 : value\n    else # 1\n      value * 2\n    end\n  else\n    0\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49243,"user_id":1072,"body":"def fruit(r,s) deck=s.each_with_index.map{|e| r[e[1]][e[0]][0,2]}.to_a.sort; deck[0] != deck[1] && deck[1] != deck[2] ? 0 : ([\"\",\"Ja\",\"Qu\",\"Ki\",\"Ba\",\"Ch\",\"Se\",\"Sh\",\"Be\",\"St\",\"Wi\"].index(deck[1]) || 0)*(deck[0]==deck[2] ? 10 : (deck[2]==\"Wi\" || deck[0]==\"Wi\") && deck[1] != \"Wi\" ? 2 : 1) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"590bdaa251ab8267b800005b":[{"id":49244,"user_id":421,"body":"def array_center(arr)\n  arr.select{|x| (x - arr.sum.fdiv(arr.size)).abs < arr.min}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49245,"user_id":1828,"body":"def array_center(arr)\n  m = arr.min\n  avg = arr.sum.fdiv(arr.size)\n  arr.select{|i| (i-avg).abs < m}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49246,"user_id":527,"body":"def array_center(arr)\n  min, avg = arr.min, arr.sum.fdiv(arr.size)\n  arr.select{ |x| (x - avg).abs < min }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49247,"user_id":null,"body":"def array_center(arr)\n  avg, min = arr.sum\/arr.size, arr.min\n  arr.select{|e| (e-avg).abs<min}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49248,"user_id":null,"body":"def array_center(arr)\n  min = arr.min\n  avg = (arr.sum.to_f \/ arr.size)\n  arr.select{|n| (n - avg).abs < min }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49249,"user_id":null,"body":"def array_center(arr)\n  avg = arr.reduce(0.0) { |sum, i| sum + i } \/ arr.size\n  b = arr.select { |e| (e - avg).abs < arr.min }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49250,"user_id":1072,"body":"def array_center(arr) m,avg=arr.min,arr.reduce(0){|a,b| a+b} \/ arr.size.to_f; arr.select{|e| (avg-e).abs<m} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"590e03aef55cab099a0002e8":[{"id":49251,"user_id":53,"body":"def incrementer(nums)\n  nums.map_with_index{|e,i|(e+i+1)%10}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49252,"user_id":1624,"body":"def incrementer(nums)\n  nums.map_with_index{|x,i| (x+i+1) % 10}\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49253,"user_id":527,"body":"def incrementer(nums)\n  nums.map_with_index{ |n, i| (n + i + 1) % 10 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49254,"user_id":null,"body":"def incrementer(nums : Array(Int32)) : Array(Int32)\n  nums.map_with_index { |x,i| (x + i + 1) % 10 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49255,"user_id":null,"body":"def incrementer(nums)\n  nums.map_with_index(1) { |x, i| (x+i)%10 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49256,"user_id":50,"body":"def incrementer(nums)\n  nums.each_with_index.to_a.map{|x| (x.sum+1)%10}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49257,"user_id":1474,"body":"def incrementer(nums)\n  nums.map_with_index(1) do |n, i|\n    t = n + i\n    t > 9 ? t % 10 : t\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49258,"user_id":645,"body":"def incrementer(nums)\n  nums.map_with_index do | x, i |\n    (x + (i + 1)).to_s[-1].to_i\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5911385598dcd432ae000004":[{"id":49259,"user_id":492,"body":"require \"big\"\ndef is_divisible_by_6(strng)\n    ret = [] of String\n    ('0'..'9').each do |d|\n        s = strng.gsub('*', d)\n        n = BigInt.new(s)\n        if (n % 6 == 0 && n >= 0)\n            ret << n.to_s \n        end\n    end\n    ret\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49260,"user_id":1072,"body":"def is_divisible_by_6(s) r=s.split(\"\").reduce(0){|a,b| b==\"*\" ? a : a+b.to_i}%3; (r==1 ? [2,5,8] : r==2 ? [1,4,7] : [0,3,6,9]).map{|n| s.gsub(\/\\*\/,n.to_s).gsub(\/^0+(?=\\d)\/,\"\")}.select{|s| s.size>0 && \"24680\".index(s[-1])} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49261,"user_id":null,"body":"def is_divisible_by_6(s)\n  (0..9).map{ |d| s.sub(\"*\", d).sub(\/^0+\/, \"\") }.select{ |n| \n    !n.empty? && n[-1].to_i.even? && n.chars.sum(&.to_i).divisible_by?(3)\n  }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49262,"user_id":null,"body":"# How to determine if a large number is divisible by 6 (too big for uint64)\n# http:\/\/www.aaamath.com\/fra72_x7.htm\n# Numbers evenly Divisible by 6\n# Numbers are evenly divisible by 6 if they are evenly divisible by both 2 AND 3.\n# Even numbers are always evenly divisible by 2. Numbers are evenly divisible by 3 if the sum of all the individual digits is evenly divisible by 3.\n# For example, the sum of the digits for the number 3627 is 18, which is evenly divisible by 3 but 3627 is an odd number\n# so the number 3627 is not evenly divisible by 6.\n\ndef is_divisible_by_6(s)\n  result = [] of String\n  (0..9).map { |n|\n    number_string = s.gsub(\"*\", n)\n    last_digit = number_string.chars.last\n\n    divisble_by_2 = last_digit.to_i.even?\n    divisible_by_3 = number_string.chars.map(&.to_i).sum % 3 == 0\n\n    if divisble_by_2 && divisible_by_3\n      number_string = number_string.lstrip(\"0\") # remove leading 0\n      result << number_string unless number_string.blank?\n    end\n  }\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49263,"user_id":null,"body":"def is_divisible_by_6(s)\n  digits = s.chars.map { |c|\n    if c == '*'\n      -1\n    else\n      c.to_i\n    end\n  }\n  possibleNums = [0,1,2,3,4,5,6,7,8,9]\n  if digits[-1] == -1\n    possibleNums = possibleNums.reject { |i| i % 2 == 1 }\n  elsif digits[-1] % 2 == 1\n    return [] of String\n  end\n\n  vss = [] of String\n  possibleNums.each do |pn|\n    d = digits.map { |c| c == -1 ? pn.to_s : c.to_s }\n    vss << d.join\n  end\n  puts vss.to_s\n  \n  vss2 = [] of String\n  vss.each do |vs|\n    sum = 0\n    vs.chars.each do |c|\n      sum += c.to_i\n    end\n    if sum % 3 == 0\n      vss2 << vs\n    end\n  end\n  vss2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"591404294ef3051cbe000035":[{"id":49264,"user_id":421,"body":"def triangular_sum(n)\n  Math.sqrt((-1 + Math.sqrt(1 + 8 * n)) \/ 2) % 1 == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49265,"user_id":128,"body":"def triangular_sum(n)\n    ((2*n+0.25)**0.5-0.5)**0.5 % 1 == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49266,"user_id":527,"body":"def triangular_sum(n)\n  Math.sqrt(2 * (Math.sqrt(8 * n + 1) - 1)).modulo(2) == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49267,"user_id":1072,"body":"def triangular_sum(n) (-0.5+(1+8*n)**0.5\/2.0)**0.5%1==0 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5915686ed2563aa6650000ab":[{"id":49268,"user_id":421,"body":"def evil_code_medal(user_time, *a)\n   arr = a.to_a.sort\n   user_time < arr[0] ? \"Gold\" : user_time < arr[1] ? \"Silver\" : user_time < arr[2] ? \"Bronze\" : \"None\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49269,"user_id":1828,"body":"def to_sec(x)\n  h, m, s = x.split(\":\").map(&.to_i)\n  return h*3600+m*60+s\nend\ndef evil_code_medal(*ugsb)\n  u, g, s, b = ugsb.map{|x| to_sec(x)}\n  return \"Gold\" if u < g\n  return \"Silver\" if u >= g && u < s\n  return \"Bronze\" if u >= s && u < b\n  \"None\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49270,"user_id":1072,"body":"def evil_code_medal(u,g,s,b) args=[u,g,s,b]; [\"None\",\"Bronze\",\"Silver\",\"Gold\"][args[1,99].reduce(0){|a,b| a+(b>args[0] ? 1 : 0)}] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59157809f05d9a8ad7000096":[{"id":49271,"user_id":1072,"body":"def powerset(n) return [[] of Int32] if n.size==0; b=powerset(n[1,99]); b+b.map{|e| [n[0]]+e} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49272,"user_id":53,"body":"def powerset(ns)\n  (0...2**ns.size).map{|n| n.digits(2).each_with_index.reduce([]of Int32){|s,(d,i)| d==0 ? s : s<<ns[-i-1]}.reverse}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49273,"user_id":null,"body":"def powerset(nums)\n  n = nums.size\n  (0...2**n).map do | i |\n    r = [] of Int32\n    (0...n).reverse_each do | pos |\n      r << nums[-pos-1] if ((i >> pos) & 1) > 0\n    end\n    r\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49274,"user_id":null,"body":"def powerset(nums)\n  s = nums.size\n  return [[] of Int32] if s == 0\n  e = nums[0]\n  ps = powerset(nums[1, s - 1])\n  ps + ps.map { |ss| [e] + ss }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49275,"user_id":null,"body":"def powerset(nums)\n\n  container = [[] of Int32]\n  max = (Math.scalbln(1, nums.size).to_i())- 1\n\n  (1..max).each do |i|\n\n    bin = decToBin(i).to_s()\n    innerContainer = [] of Int32\n\n    binRepLength = bin.size-1;\n\n    (0..binRepLength).each do |j|\n\n      if(bin[binRepLength-j] == '1')\n\n        innerContainer.unshift(nums[nums.size-j-1])\n\n      end\n\n    end\n\n    container.push(innerContainer)\n\n  end\n\n  container\n\nend\n\ndef decToBin(number)\n\n  binaryRepresentation = \"\"\n\n  while(number != 0)\n\n    if(number%2 == 1 || number == 0 || number == 1)\n      binaryRepresentation = \"1#{binaryRepresentation}\"\n    else\n      binaryRepresentation = \"0#{binaryRepresentation}\"\n    end\n\n    number \/= 2\n\n  end\n\n  binaryRepresentation\n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"591588d49f4056e13f000001":[{"id":49276,"user_id":421,"body":"def hq9(code)\n  case\n  when code == \"H\" then\n    return \"Hello World!\"\n  when code == \"Q\" then\n    return code\n  when code == \"9\" then\n    return \"99 bottles of beer on the wall, 99 bottles of beer.\nTake one down and pass it around, 98 bottles of beer on the wall.\n98 bottles of beer on the wall, 98 bottles of beer.\nTake one down and pass it around, 97 bottles of beer on the wall.\n97 bottles of beer on the wall, 97 bottles of beer.\nTake one down and pass it around, 96 bottles of beer on the wall.\n96 bottles of beer on the wall, 96 bottles of beer.\nTake one down and pass it around, 95 bottles of beer on the wall.\n95 bottles of beer on the wall, 95 bottles of beer.\nTake one down and pass it around, 94 bottles of beer on the wall.\n94 bottles of beer on the wall, 94 bottles of beer.\nTake one down and pass it around, 93 bottles of beer on the wall.\n93 bottles of beer on the wall, 93 bottles of beer.\nTake one down and pass it around, 92 bottles of beer on the wall.\n92 bottles of beer on the wall, 92 bottles of beer.\nTake one down and pass it around, 91 bottles of beer on the wall.\n91 bottles of beer on the wall, 91 bottles of beer.\nTake one down and pass it around, 90 bottles of beer on the wall.\n90 bottles of beer on the wall, 90 bottles of beer.\nTake one down and pass it around, 89 bottles of beer on the wall.\n89 bottles of beer on the wall, 89 bottles of beer.\nTake one down and pass it around, 88 bottles of beer on the wall.\n88 bottles of beer on the wall, 88 bottles of beer.\nTake one down and pass it around, 87 bottles of beer on the wall.\n87 bottles of beer on the wall, 87 bottles of beer.\nTake one down and pass it around, 86 bottles of beer on the wall.\n86 bottles of beer on the wall, 86 bottles of beer.\nTake one down and pass it around, 85 bottles of beer on the wall.\n85 bottles of beer on the wall, 85 bottles of beer.\nTake one down and pass it around, 84 bottles of beer on the wall.\n84 bottles of beer on the wall, 84 bottles of beer.\nTake one down and pass it around, 83 bottles of beer on the wall.\n83 bottles of beer on the wall, 83 bottles of beer.\nTake one down and pass it around, 82 bottles of beer on the wall.\n82 bottles of beer on the wall, 82 bottles of beer.\nTake one down and pass it around, 81 bottles of beer on the wall.\n81 bottles of beer on the wall, 81 bottles of beer.\nTake one down and pass it around, 80 bottles of beer on the wall.\n80 bottles of beer on the wall, 80 bottles of beer.\nTake one down and pass it around, 79 bottles of beer on the wall.\n79 bottles of beer on the wall, 79 bottles of beer.\nTake one down and pass it around, 78 bottles of beer on the wall.\n78 bottles of beer on the wall, 78 bottles of beer.\nTake one down and pass it around, 77 bottles of beer on the wall.\n77 bottles of beer on the wall, 77 bottles of beer.\nTake one down and pass it around, 76 bottles of beer on the wall.\n76 bottles of beer on the wall, 76 bottles of beer.\nTake one down and pass it around, 75 bottles of beer on the wall.\n75 bottles of beer on the wall, 75 bottles of beer.\nTake one down and pass it around, 74 bottles of beer on the wall.\n74 bottles of beer on the wall, 74 bottles of beer.\nTake one down and pass it around, 73 bottles of beer on the wall.\n73 bottles of beer on the wall, 73 bottles of beer.\nTake one down and pass it around, 72 bottles of beer on the wall.\n72 bottles of beer on the wall, 72 bottles of beer.\nTake one down and pass it around, 71 bottles of beer on the wall.\n71 bottles of beer on the wall, 71 bottles of beer.\nTake one down and pass it around, 70 bottles of beer on the wall.\n70 bottles of beer on the wall, 70 bottles of beer.\nTake one down and pass it around, 69 bottles of beer on the wall.\n69 bottles of beer on the wall, 69 bottles of beer.\nTake one down and pass it around, 68 bottles of beer on the wall.\n68 bottles of beer on the wall, 68 bottles of beer.\nTake one down and pass it around, 67 bottles of beer on the wall.\n67 bottles of beer on the wall, 67 bottles of beer.\nTake one down and pass it around, 66 bottles of beer on the wall.\n66 bottles of beer on the wall, 66 bottles of beer.\nTake one down and pass it around, 65 bottles of beer on the wall.\n65 bottles of beer on the wall, 65 bottles of beer.\nTake one down and pass it around, 64 bottles of beer on the wall.\n64 bottles of beer on the wall, 64 bottles of beer.\nTake one down and pass it around, 63 bottles of beer on the wall.\n63 bottles of beer on the wall, 63 bottles of beer.\nTake one down and pass it around, 62 bottles of beer on the wall.\n62 bottles of beer on the wall, 62 bottles of beer.\nTake one down and pass it around, 61 bottles of beer on the wall.\n61 bottles of beer on the wall, 61 bottles of beer.\nTake one down and pass it around, 60 bottles of beer on the wall.\n60 bottles of beer on the wall, 60 bottles of beer.\nTake one down and pass it around, 59 bottles of beer on the wall.\n59 bottles of beer on the wall, 59 bottles of beer.\nTake one down and pass it around, 58 bottles of beer on the wall.\n58 bottles of beer on the wall, 58 bottles of beer.\nTake one down and pass it around, 57 bottles of beer on the wall.\n57 bottles of beer on the wall, 57 bottles of beer.\nTake one down and pass it around, 56 bottles of beer on the wall.\n56 bottles of beer on the wall, 56 bottles of beer.\nTake one down and pass it around, 55 bottles of beer on the wall.\n55 bottles of beer on the wall, 55 bottles of beer.\nTake one down and pass it around, 54 bottles of beer on the wall.\n54 bottles of beer on the wall, 54 bottles of beer.\nTake one down and pass it around, 53 bottles of beer on the wall.\n53 bottles of beer on the wall, 53 bottles of beer.\nTake one down and pass it around, 52 bottles of beer on the wall.\n52 bottles of beer on the wall, 52 bottles of beer.\nTake one down and pass it around, 51 bottles of beer on the wall.\n51 bottles of beer on the wall, 51 bottles of beer.\nTake one down and pass it around, 50 bottles of beer on the wall.\n50 bottles of beer on the wall, 50 bottles of beer.\nTake one down and pass it around, 49 bottles of beer on the wall.\n49 bottles of beer on the wall, 49 bottles of beer.\nTake one down and pass it around, 48 bottles of beer on the wall.\n48 bottles of beer on the wall, 48 bottles of beer.\nTake one down and pass it around, 47 bottles of beer on the wall.\n47 bottles of beer on the wall, 47 bottles of beer.\nTake one down and pass it around, 46 bottles of beer on the wall.\n46 bottles of beer on the wall, 46 bottles of beer.\nTake one down and pass it around, 45 bottles of beer on the wall.\n45 bottles of beer on the wall, 45 bottles of beer.\nTake one down and pass it around, 44 bottles of beer on the wall.\n44 bottles of beer on the wall, 44 bottles of beer.\nTake one down and pass it around, 43 bottles of beer on the wall.\n43 bottles of beer on the wall, 43 bottles of beer.\nTake one down and pass it around, 42 bottles of beer on the wall.\n42 bottles of beer on the wall, 42 bottles of beer.\nTake one down and pass it around, 41 bottles of beer on the wall.\n41 bottles of beer on the wall, 41 bottles of beer.\nTake one down and pass it around, 40 bottles of beer on the wall.\n40 bottles of beer on the wall, 40 bottles of beer.\nTake one down and pass it around, 39 bottles of beer on the wall.\n39 bottles of beer on the wall, 39 bottles of beer.\nTake one down and pass it around, 38 bottles of beer on the wall.\n38 bottles of beer on the wall, 38 bottles of beer.\nTake one down and pass it around, 37 bottles of beer on the wall.\n37 bottles of beer on the wall, 37 bottles of beer.\nTake one down and pass it around, 36 bottles of beer on the wall.\n36 bottles of beer on the wall, 36 bottles of beer.\nTake one down and pass it around, 35 bottles of beer on the wall.\n35 bottles of beer on the wall, 35 bottles of beer.\nTake one down and pass it around, 34 bottles of beer on the wall.\n34 bottles of beer on the wall, 34 bottles of beer.\nTake one down and pass it around, 33 bottles of beer on the wall.\n33 bottles of beer on the wall, 33 bottles of beer.\nTake one down and pass it around, 32 bottles of beer on the wall.\n32 bottles of beer on the wall, 32 bottles of beer.\nTake one down and pass it around, 31 bottles of beer on the wall.\n31 bottles of beer on the wall, 31 bottles of beer.\nTake one down and pass it around, 30 bottles of beer on the wall.\n30 bottles of beer on the wall, 30 bottles of beer.\nTake one down and pass it around, 29 bottles of beer on the wall.\n29 bottles of beer on the wall, 29 bottles of beer.\nTake one down and pass it around, 28 bottles of beer on the wall.\n28 bottles of beer on the wall, 28 bottles of beer.\nTake one down and pass it around, 27 bottles of beer on the wall.\n27 bottles of beer on the wall, 27 bottles of beer.\nTake one down and pass it around, 26 bottles of beer on the wall.\n26 bottles of beer on the wall, 26 bottles of beer.\nTake one down and pass it around, 25 bottles of beer on the wall.\n25 bottles of beer on the wall, 25 bottles of beer.\nTake one down and pass it around, 24 bottles of beer on the wall.\n24 bottles of beer on the wall, 24 bottles of beer.\nTake one down and pass it around, 23 bottles of beer on the wall.\n23 bottles of beer on the wall, 23 bottles of beer.\nTake one down and pass it around, 22 bottles of beer on the wall.\n22 bottles of beer on the wall, 22 bottles of beer.\nTake one down and pass it around, 21 bottles of beer on the wall.\n21 bottles of beer on the wall, 21 bottles of beer.\nTake one down and pass it around, 20 bottles of beer on the wall.\n20 bottles of beer on the wall, 20 bottles of beer.\nTake one down and pass it around, 19 bottles of beer on the wall.\n19 bottles of beer on the wall, 19 bottles of beer.\nTake one down and pass it around, 18 bottles of beer on the wall.\n18 bottles of beer on the wall, 18 bottles of beer.\nTake one down and pass it around, 17 bottles of beer on the wall.\n17 bottles of beer on the wall, 17 bottles of beer.\nTake one down and pass it around, 16 bottles of beer on the wall.\n16 bottles of beer on the wall, 16 bottles of beer.\nTake one down and pass it around, 15 bottles of beer on the wall.\n15 bottles of beer on the wall, 15 bottles of beer.\nTake one down and pass it around, 14 bottles of beer on the wall.\n14 bottles of beer on the wall, 14 bottles of beer.\nTake one down and pass it around, 13 bottles of beer on the wall.\n13 bottles of beer on the wall, 13 bottles of beer.\nTake one down and pass it around, 12 bottles of beer on the wall.\n12 bottles of beer on the wall, 12 bottles of beer.\nTake one down and pass it around, 11 bottles of beer on the wall.\n11 bottles of beer on the wall, 11 bottles of beer.\nTake one down and pass it around, 10 bottles of beer on the wall.\n10 bottles of beer on the wall, 10 bottles of beer.\nTake one down and pass it around, 9 bottles of beer on the wall.\n9 bottles of beer on the wall, 9 bottles of beer.\nTake one down and pass it around, 8 bottles of beer on the wall.\n8 bottles of beer on the wall, 8 bottles of beer.\nTake one down and pass it around, 7 bottles of beer on the wall.\n7 bottles of beer on the wall, 7 bottles of beer.\nTake one down and pass it around, 6 bottles of beer on the wall.\n6 bottles of beer on the wall, 6 bottles of beer.\nTake one down and pass it around, 5 bottles of beer on the wall.\n5 bottles of beer on the wall, 5 bottles of beer.\nTake one down and pass it around, 4 bottles of beer on the wall.\n4 bottles of beer on the wall, 4 bottles of beer.\nTake one down and pass it around, 3 bottles of beer on the wall.\n3 bottles of beer on the wall, 3 bottles of beer.\nTake one down and pass it around, 2 bottles of beer on the wall.\n2 bottles of beer on the wall, 2 bottles of beer.\nTake one down and pass it around, 1 bottle of beer on the wall.\n1 bottle of beer on the wall, 1 bottle of beer.\nTake one down and pass it around, no more bottles of beer on the wall.\nNo more bottles of beer on the wall, no more bottles of beer.\nGo to the store and buy some more, 99 bottles of beer on the wall.\"\n  else\n    return nil\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49277,"user_id":1474,"body":"def hq9(code)\n  case code\n  when \"H\" then \"Hello World!\"\n  when \"Q\" then code\n  when \"9\" then  \"99 bottles of beer on the wall, 99 bottles of beer.\nTake one down and pass it around, 98 bottles of beer on the wall.\n98 bottles of beer on the wall, 98 bottles of beer.\nTake one down and pass it around, 97 bottles of beer on the wall.\n97 bottles of beer on the wall, 97 bottles of beer.\nTake one down and pass it around, 96 bottles of beer on the wall.\n96 bottles of beer on the wall, 96 bottles of beer.\nTake one down and pass it around, 95 bottles of beer on the wall.\n95 bottles of beer on the wall, 95 bottles of beer.\nTake one down and pass it around, 94 bottles of beer on the wall.\n94 bottles of beer on the wall, 94 bottles of beer.\nTake one down and pass it around, 93 bottles of beer on the wall.\n93 bottles of beer on the wall, 93 bottles of beer.\nTake one down and pass it around, 92 bottles of beer on the wall.\n92 bottles of beer on the wall, 92 bottles of beer.\nTake one down and pass it around, 91 bottles of beer on the wall.\n91 bottles of beer on the wall, 91 bottles of beer.\nTake one down and pass it around, 90 bottles of beer on the wall.\n90 bottles of beer on the wall, 90 bottles of beer.\nTake one down and pass it around, 89 bottles of beer on the wall.\n89 bottles of beer on the wall, 89 bottles of beer.\nTake one down and pass it around, 88 bottles of beer on the wall.\n88 bottles of beer on the wall, 88 bottles of beer.\nTake one down and pass it around, 87 bottles of beer on the wall.\n87 bottles of beer on the wall, 87 bottles of beer.\nTake one down and pass it around, 86 bottles of beer on the wall.\n86 bottles of beer on the wall, 86 bottles of beer.\nTake one down and pass it around, 85 bottles of beer on the wall.\n85 bottles of beer on the wall, 85 bottles of beer.\nTake one down and pass it around, 84 bottles of beer on the wall.\n84 bottles of beer on the wall, 84 bottles of beer.\nTake one down and pass it around, 83 bottles of beer on the wall.\n83 bottles of beer on the wall, 83 bottles of beer.\nTake one down and pass it around, 82 bottles of beer on the wall.\n82 bottles of beer on the wall, 82 bottles of beer.\nTake one down and pass it around, 81 bottles of beer on the wall.\n81 bottles of beer on the wall, 81 bottles of beer.\nTake one down and pass it around, 80 bottles of beer on the wall.\n80 bottles of beer on the wall, 80 bottles of beer.\nTake one down and pass it around, 79 bottles of beer on the wall.\n79 bottles of beer on the wall, 79 bottles of beer.\nTake one down and pass it around, 78 bottles of beer on the wall.\n78 bottles of beer on the wall, 78 bottles of beer.\nTake one down and pass it around, 77 bottles of beer on the wall.\n77 bottles of beer on the wall, 77 bottles of beer.\nTake one down and pass it around, 76 bottles of beer on the wall.\n76 bottles of beer on the wall, 76 bottles of beer.\nTake one down and pass it around, 75 bottles of beer on the wall.\n75 bottles of beer on the wall, 75 bottles of beer.\nTake one down and pass it around, 74 bottles of beer on the wall.\n74 bottles of beer on the wall, 74 bottles of beer.\nTake one down and pass it around, 73 bottles of beer on the wall.\n73 bottles of beer on the wall, 73 bottles of beer.\nTake one down and pass it around, 72 bottles of beer on the wall.\n72 bottles of beer on the wall, 72 bottles of beer.\nTake one down and pass it around, 71 bottles of beer on the wall.\n71 bottles of beer on the wall, 71 bottles of beer.\nTake one down and pass it around, 70 bottles of beer on the wall.\n70 bottles of beer on the wall, 70 bottles of beer.\nTake one down and pass it around, 69 bottles of beer on the wall.\n69 bottles of beer on the wall, 69 bottles of beer.\nTake one down and pass it around, 68 bottles of beer on the wall.\n68 bottles of beer on the wall, 68 bottles of beer.\nTake one down and pass it around, 67 bottles of beer on the wall.\n67 bottles of beer on the wall, 67 bottles of beer.\nTake one down and pass it around, 66 bottles of beer on the wall.\n66 bottles of beer on the wall, 66 bottles of beer.\nTake one down and pass it around, 65 bottles of beer on the wall.\n65 bottles of beer on the wall, 65 bottles of beer.\nTake one down and pass it around, 64 bottles of beer on the wall.\n64 bottles of beer on the wall, 64 bottles of beer.\nTake one down and pass it around, 63 bottles of beer on the wall.\n63 bottles of beer on the wall, 63 bottles of beer.\nTake one down and pass it around, 62 bottles of beer on the wall.\n62 bottles of beer on the wall, 62 bottles of beer.\nTake one down and pass it around, 61 bottles of beer on the wall.\n61 bottles of beer on the wall, 61 bottles of beer.\nTake one down and pass it around, 60 bottles of beer on the wall.\n60 bottles of beer on the wall, 60 bottles of beer.\nTake one down and pass it around, 59 bottles of beer on the wall.\n59 bottles of beer on the wall, 59 bottles of beer.\nTake one down and pass it around, 58 bottles of beer on the wall.\n58 bottles of beer on the wall, 58 bottles of beer.\nTake one down and pass it around, 57 bottles of beer on the wall.\n57 bottles of beer on the wall, 57 bottles of beer.\nTake one down and pass it around, 56 bottles of beer on the wall.\n56 bottles of beer on the wall, 56 bottles of beer.\nTake one down and pass it around, 55 bottles of beer on the wall.\n55 bottles of beer on the wall, 55 bottles of beer.\nTake one down and pass it around, 54 bottles of beer on the wall.\n54 bottles of beer on the wall, 54 bottles of beer.\nTake one down and pass it around, 53 bottles of beer on the wall.\n53 bottles of beer on the wall, 53 bottles of beer.\nTake one down and pass it around, 52 bottles of beer on the wall.\n52 bottles of beer on the wall, 52 bottles of beer.\nTake one down and pass it around, 51 bottles of beer on the wall.\n51 bottles of beer on the wall, 51 bottles of beer.\nTake one down and pass it around, 50 bottles of beer on the wall.\n50 bottles of beer on the wall, 50 bottles of beer.\nTake one down and pass it around, 49 bottles of beer on the wall.\n49 bottles of beer on the wall, 49 bottles of beer.\nTake one down and pass it around, 48 bottles of beer on the wall.\n48 bottles of beer on the wall, 48 bottles of beer.\nTake one down and pass it around, 47 bottles of beer on the wall.\n47 bottles of beer on the wall, 47 bottles of beer.\nTake one down and pass it around, 46 bottles of beer on the wall.\n46 bottles of beer on the wall, 46 bottles of beer.\nTake one down and pass it around, 45 bottles of beer on the wall.\n45 bottles of beer on the wall, 45 bottles of beer.\nTake one down and pass it around, 44 bottles of beer on the wall.\n44 bottles of beer on the wall, 44 bottles of beer.\nTake one down and pass it around, 43 bottles of beer on the wall.\n43 bottles of beer on the wall, 43 bottles of beer.\nTake one down and pass it around, 42 bottles of beer on the wall.\n42 bottles of beer on the wall, 42 bottles of beer.\nTake one down and pass it around, 41 bottles of beer on the wall.\n41 bottles of beer on the wall, 41 bottles of beer.\nTake one down and pass it around, 40 bottles of beer on the wall.\n40 bottles of beer on the wall, 40 bottles of beer.\nTake one down and pass it around, 39 bottles of beer on the wall.\n39 bottles of beer on the wall, 39 bottles of beer.\nTake one down and pass it around, 38 bottles of beer on the wall.\n38 bottles of beer on the wall, 38 bottles of beer.\nTake one down and pass it around, 37 bottles of beer on the wall.\n37 bottles of beer on the wall, 37 bottles of beer.\nTake one down and pass it around, 36 bottles of beer on the wall.\n36 bottles of beer on the wall, 36 bottles of beer.\nTake one down and pass it around, 35 bottles of beer on the wall.\n35 bottles of beer on the wall, 35 bottles of beer.\nTake one down and pass it around, 34 bottles of beer on the wall.\n34 bottles of beer on the wall, 34 bottles of beer.\nTake one down and pass it around, 33 bottles of beer on the wall.\n33 bottles of beer on the wall, 33 bottles of beer.\nTake one down and pass it around, 32 bottles of beer on the wall.\n32 bottles of beer on the wall, 32 bottles of beer.\nTake one down and pass it around, 31 bottles of beer on the wall.\n31 bottles of beer on the wall, 31 bottles of beer.\nTake one down and pass it around, 30 bottles of beer on the wall.\n30 bottles of beer on the wall, 30 bottles of beer.\nTake one down and pass it around, 29 bottles of beer on the wall.\n29 bottles of beer on the wall, 29 bottles of beer.\nTake one down and pass it around, 28 bottles of beer on the wall.\n28 bottles of beer on the wall, 28 bottles of beer.\nTake one down and pass it around, 27 bottles of beer on the wall.\n27 bottles of beer on the wall, 27 bottles of beer.\nTake one down and pass it around, 26 bottles of beer on the wall.\n26 bottles of beer on the wall, 26 bottles of beer.\nTake one down and pass it around, 25 bottles of beer on the wall.\n25 bottles of beer on the wall, 25 bottles of beer.\nTake one down and pass it around, 24 bottles of beer on the wall.\n24 bottles of beer on the wall, 24 bottles of beer.\nTake one down and pass it around, 23 bottles of beer on the wall.\n23 bottles of beer on the wall, 23 bottles of beer.\nTake one down and pass it around, 22 bottles of beer on the wall.\n22 bottles of beer on the wall, 22 bottles of beer.\nTake one down and pass it around, 21 bottles of beer on the wall.\n21 bottles of beer on the wall, 21 bottles of beer.\nTake one down and pass it around, 20 bottles of beer on the wall.\n20 bottles of beer on the wall, 20 bottles of beer.\nTake one down and pass it around, 19 bottles of beer on the wall.\n19 bottles of beer on the wall, 19 bottles of beer.\nTake one down and pass it around, 18 bottles of beer on the wall.\n18 bottles of beer on the wall, 18 bottles of beer.\nTake one down and pass it around, 17 bottles of beer on the wall.\n17 bottles of beer on the wall, 17 bottles of beer.\nTake one down and pass it around, 16 bottles of beer on the wall.\n16 bottles of beer on the wall, 16 bottles of beer.\nTake one down and pass it around, 15 bottles of beer on the wall.\n15 bottles of beer on the wall, 15 bottles of beer.\nTake one down and pass it around, 14 bottles of beer on the wall.\n14 bottles of beer on the wall, 14 bottles of beer.\nTake one down and pass it around, 13 bottles of beer on the wall.\n13 bottles of beer on the wall, 13 bottles of beer.\nTake one down and pass it around, 12 bottles of beer on the wall.\n12 bottles of beer on the wall, 12 bottles of beer.\nTake one down and pass it around, 11 bottles of beer on the wall.\n11 bottles of beer on the wall, 11 bottles of beer.\nTake one down and pass it around, 10 bottles of beer on the wall.\n10 bottles of beer on the wall, 10 bottles of beer.\nTake one down and pass it around, 9 bottles of beer on the wall.\n9 bottles of beer on the wall, 9 bottles of beer.\nTake one down and pass it around, 8 bottles of beer on the wall.\n8 bottles of beer on the wall, 8 bottles of beer.\nTake one down and pass it around, 7 bottles of beer on the wall.\n7 bottles of beer on the wall, 7 bottles of beer.\nTake one down and pass it around, 6 bottles of beer on the wall.\n6 bottles of beer on the wall, 6 bottles of beer.\nTake one down and pass it around, 5 bottles of beer on the wall.\n5 bottles of beer on the wall, 5 bottles of beer.\nTake one down and pass it around, 4 bottles of beer on the wall.\n4 bottles of beer on the wall, 4 bottles of beer.\nTake one down and pass it around, 3 bottles of beer on the wall.\n3 bottles of beer on the wall, 3 bottles of beer.\nTake one down and pass it around, 2 bottles of beer on the wall.\n2 bottles of beer on the wall, 2 bottles of beer.\nTake one down and pass it around, 1 bottle of beer on the wall.\n1 bottle of beer on the wall, 1 bottle of beer.\nTake one down and pass it around, no more bottles of beer on the wall.\nNo more bottles of beer on the wall, no more bottles of beer.\nGo to the store and buy some more, 99 bottles of beer on the wall.\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49278,"user_id":null,"body":"def hq9(code)\n  case code\n  when \"H\", \"h\"\n    return \"Hello World!\"\n  when \"Q\", \"q\"\n    return code\n  when \"9\"\n    bottles = 99\n    lyrics = \"\"\n  \n    until bottles == 2\n      lyrics += \"#{bottles} bottles of beer on the wall, #{bottles} bottles of beer.\nTake one down and pass it around, #{bottles - 1} bottles of beer on the wall.\n\"\n      bottles -= 1\n    end\n  \n    lyrics += \"2 bottles of beer on the wall, 2 bottles of beer.\nTake one down and pass it around, 1 bottle of beer on the wall.\n\"\n    lyrics += \"1 bottle of beer on the wall, 1 bottle of beer.\nTake one down and pass it around, no more bottles of beer on the wall.\n\"\n    lyrics += \"No more bottles of beer on the wall, no more bottles of beer.\nGo to the store and buy some more, 99 bottles of beer on the wall.\"\n\n    return lyrics\n  else\n    return nil\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49279,"user_id":null,"body":"def hq9(code)\n  dd = (1..99).reverse_each.map { |i| \n    if i == 1\n      \"1 bottle of beer on the wall, 1 bottle of beer.\nTake one down and pass it around, no more bottles of beer on the wall.\nNo more bottles of beer on the wall, no more bottles of beer.\nGo to the store and buy some more, 99 bottles of beer on the wall.\"\n    elsif i == 2 \n      \"2 bottles of beer on the wall, 2 bottles of beer.\nTake one down and pass it around, 1 bottle of beer on the wall.\n\"\n    else\n      \"#{i} bottles of beer on the wall, #{i} bottles of beer.\nTake one down and pass it around, #{i-1} bottles of beer on the wall.\n\"\n    end\n  }.join\n  \n  h = { \"H\" => \"Hello World!\", \"Q\" => \"Q\", \"9\" => dd }\n  return nil unless h.has_key?(code)\n  h[code]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49280,"user_id":53,"body":"def hq9(c)\n  if c == \"H\"\n    \"Hello World!\"\n  elsif c == \"Q\"\n    \"Q\"\n  elsif c == \"9\"\n    \"99 bottles of beer on the wall, 99 bottles of beer.\nTake one down and pass it around, 98 bottles of beer on the wall.\n98 bottles of beer on the wall, 98 bottles of beer.\nTake one down and pass it around, 97 bottles of beer on the wall.\n97 bottles of beer on the wall, 97 bottles of beer.\nTake one down and pass it around, 96 bottles of beer on the wall.\n96 bottles of beer on the wall, 96 bottles of beer.\nTake one down and pass it around, 95 bottles of beer on the wall.\n95 bottles of beer on the wall, 95 bottles of beer.\nTake one down and pass it around, 94 bottles of beer on the wall.\n94 bottles of beer on the wall, 94 bottles of beer.\nTake one down and pass it around, 93 bottles of beer on the wall.\n93 bottles of beer on the wall, 93 bottles of beer.\nTake one down and pass it around, 92 bottles of beer on the wall.\n92 bottles of beer on the wall, 92 bottles of beer.\nTake one down and pass it around, 91 bottles of beer on the wall.\n91 bottles of beer on the wall, 91 bottles of beer.\nTake one down and pass it around, 90 bottles of beer on the wall.\n90 bottles of beer on the wall, 90 bottles of beer.\nTake one down and pass it around, 89 bottles of beer on the wall.\n89 bottles of beer on the wall, 89 bottles of beer.\nTake one down and pass it around, 88 bottles of beer on the wall.\n88 bottles of beer on the wall, 88 bottles of beer.\nTake one down and pass it around, 87 bottles of beer on the wall.\n87 bottles of beer on the wall, 87 bottles of beer.\nTake one down and pass it around, 86 bottles of beer on the wall.\n86 bottles of beer on the wall, 86 bottles of beer.\nTake one down and pass it around, 85 bottles of beer on the wall.\n85 bottles of beer on the wall, 85 bottles of beer.\nTake one down and pass it around, 84 bottles of beer on the wall.\n84 bottles of beer on the wall, 84 bottles of beer.\nTake one down and pass it around, 83 bottles of beer on the wall.\n83 bottles of beer on the wall, 83 bottles of beer.\nTake one down and pass it around, 82 bottles of beer on the wall.\n82 bottles of beer on the wall, 82 bottles of beer.\nTake one down and pass it around, 81 bottles of beer on the wall.\n81 bottles of beer on the wall, 81 bottles of beer.\nTake one down and pass it around, 80 bottles of beer on the wall.\n80 bottles of beer on the wall, 80 bottles of beer.\nTake one down and pass it around, 79 bottles of beer on the wall.\n79 bottles of beer on the wall, 79 bottles of beer.\nTake one down and pass it around, 78 bottles of beer on the wall.\n78 bottles of beer on the wall, 78 bottles of beer.\nTake one down and pass it around, 77 bottles of beer on the wall.\n77 bottles of beer on the wall, 77 bottles of beer.\nTake one down and pass it around, 76 bottles of beer on the wall.\n76 bottles of beer on the wall, 76 bottles of beer.\nTake one down and pass it around, 75 bottles of beer on the wall.\n75 bottles of beer on the wall, 75 bottles of beer.\nTake one down and pass it around, 74 bottles of beer on the wall.\n74 bottles of beer on the wall, 74 bottles of beer.\nTake one down and pass it around, 73 bottles of beer on the wall.\n73 bottles of beer on the wall, 73 bottles of beer.\nTake one down and pass it around, 72 bottles of beer on the wall.\n72 bottles of beer on the wall, 72 bottles of beer.\nTake one down and pass it around, 71 bottles of beer on the wall.\n71 bottles of beer on the wall, 71 bottles of beer.\nTake one down and pass it around, 70 bottles of beer on the wall.\n70 bottles of beer on the wall, 70 bottles of beer.\nTake one down and pass it around, 69 bottles of beer on the wall.\n69 bottles of beer on the wall, 69 bottles of beer.\nTake one down and pass it around, 68 bottles of beer on the wall.\n68 bottles of beer on the wall, 68 bottles of beer.\nTake one down and pass it around, 67 bottles of beer on the wall.\n67 bottles of beer on the wall, 67 bottles of beer.\nTake one down and pass it around, 66 bottles of beer on the wall.\n66 bottles of beer on the wall, 66 bottles of beer.\nTake one down and pass it around, 65 bottles of beer on the wall.\n65 bottles of beer on the wall, 65 bottles of beer.\nTake one down and pass it around, 64 bottles of beer on the wall.\n64 bottles of beer on the wall, 64 bottles of beer.\nTake one down and pass it around, 63 bottles of beer on the wall.\n63 bottles of beer on the wall, 63 bottles of beer.\nTake one down and pass it around, 62 bottles of beer on the wall.\n62 bottles of beer on the wall, 62 bottles of beer.\nTake one down and pass it around, 61 bottles of beer on the wall.\n61 bottles of beer on the wall, 61 bottles of beer.\nTake one down and pass it around, 60 bottles of beer on the wall.\n60 bottles of beer on the wall, 60 bottles of beer.\nTake one down and pass it around, 59 bottles of beer on the wall.\n59 bottles of beer on the wall, 59 bottles of beer.\nTake one down and pass it around, 58 bottles of beer on the wall.\n58 bottles of beer on the wall, 58 bottles of beer.\nTake one down and pass it around, 57 bottles of beer on the wall.\n57 bottles of beer on the wall, 57 bottles of beer.\nTake one down and pass it around, 56 bottles of beer on the wall.\n56 bottles of beer on the wall, 56 bottles of beer.\nTake one down and pass it around, 55 bottles of beer on the wall.\n55 bottles of beer on the wall, 55 bottles of beer.\nTake one down and pass it around, 54 bottles of beer on the wall.\n54 bottles of beer on the wall, 54 bottles of beer.\nTake one down and pass it around, 53 bottles of beer on the wall.\n53 bottles of beer on the wall, 53 bottles of beer.\nTake one down and pass it around, 52 bottles of beer on the wall.\n52 bottles of beer on the wall, 52 bottles of beer.\nTake one down and pass it around, 51 bottles of beer on the wall.\n51 bottles of beer on the wall, 51 bottles of beer.\nTake one down and pass it around, 50 bottles of beer on the wall.\n50 bottles of beer on the wall, 50 bottles of beer.\nTake one down and pass it around, 49 bottles of beer on the wall.\n49 bottles of beer on the wall, 49 bottles of beer.\nTake one down and pass it around, 48 bottles of beer on the wall.\n48 bottles of beer on the wall, 48 bottles of beer.\nTake one down and pass it around, 47 bottles of beer on the wall.\n47 bottles of beer on the wall, 47 bottles of beer.\nTake one down and pass it around, 46 bottles of beer on the wall.\n46 bottles of beer on the wall, 46 bottles of beer.\nTake one down and pass it around, 45 bottles of beer on the wall.\n45 bottles of beer on the wall, 45 bottles of beer.\nTake one down and pass it around, 44 bottles of beer on the wall.\n44 bottles of beer on the wall, 44 bottles of beer.\nTake one down and pass it around, 43 bottles of beer on the wall.\n43 bottles of beer on the wall, 43 bottles of beer.\nTake one down and pass it around, 42 bottles of beer on the wall.\n42 bottles of beer on the wall, 42 bottles of beer.\nTake one down and pass it around, 41 bottles of beer on the wall.\n41 bottles of beer on the wall, 41 bottles of beer.\nTake one down and pass it around, 40 bottles of beer on the wall.\n40 bottles of beer on the wall, 40 bottles of beer.\nTake one down and pass it around, 39 bottles of beer on the wall.\n39 bottles of beer on the wall, 39 bottles of beer.\nTake one down and pass it around, 38 bottles of beer on the wall.\n38 bottles of beer on the wall, 38 bottles of beer.\nTake one down and pass it around, 37 bottles of beer on the wall.\n37 bottles of beer on the wall, 37 bottles of beer.\nTake one down and pass it around, 36 bottles of beer on the wall.\n36 bottles of beer on the wall, 36 bottles of beer.\nTake one down and pass it around, 35 bottles of beer on the wall.\n35 bottles of beer on the wall, 35 bottles of beer.\nTake one down and pass it around, 34 bottles of beer on the wall.\n34 bottles of beer on the wall, 34 bottles of beer.\nTake one down and pass it around, 33 bottles of beer on the wall.\n33 bottles of beer on the wall, 33 bottles of beer.\nTake one down and pass it around, 32 bottles of beer on the wall.\n32 bottles of beer on the wall, 32 bottles of beer.\nTake one down and pass it around, 31 bottles of beer on the wall.\n31 bottles of beer on the wall, 31 bottles of beer.\nTake one down and pass it around, 30 bottles of beer on the wall.\n30 bottles of beer on the wall, 30 bottles of beer.\nTake one down and pass it around, 29 bottles of beer on the wall.\n29 bottles of beer on the wall, 29 bottles of beer.\nTake one down and pass it around, 28 bottles of beer on the wall.\n28 bottles of beer on the wall, 28 bottles of beer.\nTake one down and pass it around, 27 bottles of beer on the wall.\n27 bottles of beer on the wall, 27 bottles of beer.\nTake one down and pass it around, 26 bottles of beer on the wall.\n26 bottles of beer on the wall, 26 bottles of beer.\nTake one down and pass it around, 25 bottles of beer on the wall.\n25 bottles of beer on the wall, 25 bottles of beer.\nTake one down and pass it around, 24 bottles of beer on the wall.\n24 bottles of beer on the wall, 24 bottles of beer.\nTake one down and pass it around, 23 bottles of beer on the wall.\n23 bottles of beer on the wall, 23 bottles of beer.\nTake one down and pass it around, 22 bottles of beer on the wall.\n22 bottles of beer on the wall, 22 bottles of beer.\nTake one down and pass it around, 21 bottles of beer on the wall.\n21 bottles of beer on the wall, 21 bottles of beer.\nTake one down and pass it around, 20 bottles of beer on the wall.\n20 bottles of beer on the wall, 20 bottles of beer.\nTake one down and pass it around, 19 bottles of beer on the wall.\n19 bottles of beer on the wall, 19 bottles of beer.\nTake one down and pass it around, 18 bottles of beer on the wall.\n18 bottles of beer on the wall, 18 bottles of beer.\nTake one down and pass it around, 17 bottles of beer on the wall.\n17 bottles of beer on the wall, 17 bottles of beer.\nTake one down and pass it around, 16 bottles of beer on the wall.\n16 bottles of beer on the wall, 16 bottles of beer.\nTake one down and pass it around, 15 bottles of beer on the wall.\n15 bottles of beer on the wall, 15 bottles of beer.\nTake one down and pass it around, 14 bottles of beer on the wall.\n14 bottles of beer on the wall, 14 bottles of beer.\nTake one down and pass it around, 13 bottles of beer on the wall.\n13 bottles of beer on the wall, 13 bottles of beer.\nTake one down and pass it around, 12 bottles of beer on the wall.\n12 bottles of beer on the wall, 12 bottles of beer.\nTake one down and pass it around, 11 bottles of beer on the wall.\n11 bottles of beer on the wall, 11 bottles of beer.\nTake one down and pass it around, 10 bottles of beer on the wall.\n10 bottles of beer on the wall, 10 bottles of beer.\nTake one down and pass it around, 9 bottles of beer on the wall.\n9 bottles of beer on the wall, 9 bottles of beer.\nTake one down and pass it around, 8 bottles of beer on the wall.\n8 bottles of beer on the wall, 8 bottles of beer.\nTake one down and pass it around, 7 bottles of beer on the wall.\n7 bottles of beer on the wall, 7 bottles of beer.\nTake one down and pass it around, 6 bottles of beer on the wall.\n6 bottles of beer on the wall, 6 bottles of beer.\nTake one down and pass it around, 5 bottles of beer on the wall.\n5 bottles of beer on the wall, 5 bottles of beer.\nTake one down and pass it around, 4 bottles of beer on the wall.\n4 bottles of beer on the wall, 4 bottles of beer.\nTake one down and pass it around, 3 bottles of beer on the wall.\n3 bottles of beer on the wall, 3 bottles of beer.\nTake one down and pass it around, 2 bottles of beer on the wall.\n2 bottles of beer on the wall, 2 bottles of beer.\nTake one down and pass it around, 1 bottle of beer on the wall.\n1 bottle of beer on the wall, 1 bottle of beer.\nTake one down and pass it around, no more bottles of beer on the wall.\nNo more bottles of beer on the wall, no more bottles of beer.\nGo to the store and buy some more, 99 bottles of beer on the wall.\"\n  else\n    nil\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49281,"user_id":null,"body":"def hq9(code)\n  case code\n  when \"H\"; \"Hello World!\"\n  when \"Q\"; code\n  when \"9\"; \"99 bottles of beer on the wall, 99 bottles of beer.\nTake one down and pass it around, 98 bottles of beer on the wall.\n98 bottles of beer on the wall, 98 bottles of beer.\nTake one down and pass it around, 97 bottles of beer on the wall.\n97 bottles of beer on the wall, 97 bottles of beer.\nTake one down and pass it around, 96 bottles of beer on the wall.\n96 bottles of beer on the wall, 96 bottles of beer.\nTake one down and pass it around, 95 bottles of beer on the wall.\n95 bottles of beer on the wall, 95 bottles of beer.\nTake one down and pass it around, 94 bottles of beer on the wall.\n94 bottles of beer on the wall, 94 bottles of beer.\nTake one down and pass it around, 93 bottles of beer on the wall.\n93 bottles of beer on the wall, 93 bottles of beer.\nTake one down and pass it around, 92 bottles of beer on the wall.\n92 bottles of beer on the wall, 92 bottles of beer.\nTake one down and pass it around, 91 bottles of beer on the wall.\n91 bottles of beer on the wall, 91 bottles of beer.\nTake one down and pass it around, 90 bottles of beer on the wall.\n90 bottles of beer on the wall, 90 bottles of beer.\nTake one down and pass it around, 89 bottles of beer on the wall.\n89 bottles of beer on the wall, 89 bottles of beer.\nTake one down and pass it around, 88 bottles of beer on the wall.\n88 bottles of beer on the wall, 88 bottles of beer.\nTake one down and pass it around, 87 bottles of beer on the wall.\n87 bottles of beer on the wall, 87 bottles of beer.\nTake one down and pass it around, 86 bottles of beer on the wall.\n86 bottles of beer on the wall, 86 bottles of beer.\nTake one down and pass it around, 85 bottles of beer on the wall.\n85 bottles of beer on the wall, 85 bottles of beer.\nTake one down and pass it around, 84 bottles of beer on the wall.\n84 bottles of beer on the wall, 84 bottles of beer.\nTake one down and pass it around, 83 bottles of beer on the wall.\n83 bottles of beer on the wall, 83 bottles of beer.\nTake one down and pass it around, 82 bottles of beer on the wall.\n82 bottles of beer on the wall, 82 bottles of beer.\nTake one down and pass it around, 81 bottles of beer on the wall.\n81 bottles of beer on the wall, 81 bottles of beer.\nTake one down and pass it around, 80 bottles of beer on the wall.\n80 bottles of beer on the wall, 80 bottles of beer.\nTake one down and pass it around, 79 bottles of beer on the wall.\n79 bottles of beer on the wall, 79 bottles of beer.\nTake one down and pass it around, 78 bottles of beer on the wall.\n78 bottles of beer on the wall, 78 bottles of beer.\nTake one down and pass it around, 77 bottles of beer on the wall.\n77 bottles of beer on the wall, 77 bottles of beer.\nTake one down and pass it around, 76 bottles of beer on the wall.\n76 bottles of beer on the wall, 76 bottles of beer.\nTake one down and pass it around, 75 bottles of beer on the wall.\n75 bottles of beer on the wall, 75 bottles of beer.\nTake one down and pass it around, 74 bottles of beer on the wall.\n74 bottles of beer on the wall, 74 bottles of beer.\nTake one down and pass it around, 73 bottles of beer on the wall.\n73 bottles of beer on the wall, 73 bottles of beer.\nTake one down and pass it around, 72 bottles of beer on the wall.\n72 bottles of beer on the wall, 72 bottles of beer.\nTake one down and pass it around, 71 bottles of beer on the wall.\n71 bottles of beer on the wall, 71 bottles of beer.\nTake one down and pass it around, 70 bottles of beer on the wall.\n70 bottles of beer on the wall, 70 bottles of beer.\nTake one down and pass it around, 69 bottles of beer on the wall.\n69 bottles of beer on the wall, 69 bottles of beer.\nTake one down and pass it around, 68 bottles of beer on the wall.\n68 bottles of beer on the wall, 68 bottles of beer.\nTake one down and pass it around, 67 bottles of beer on the wall.\n67 bottles of beer on the wall, 67 bottles of beer.\nTake one down and pass it around, 66 bottles of beer on the wall.\n66 bottles of beer on the wall, 66 bottles of beer.\nTake one down and pass it around, 65 bottles of beer on the wall.\n65 bottles of beer on the wall, 65 bottles of beer.\nTake one down and pass it around, 64 bottles of beer on the wall.\n64 bottles of beer on the wall, 64 bottles of beer.\nTake one down and pass it around, 63 bottles of beer on the wall.\n63 bottles of beer on the wall, 63 bottles of beer.\nTake one down and pass it around, 62 bottles of beer on the wall.\n62 bottles of beer on the wall, 62 bottles of beer.\nTake one down and pass it around, 61 bottles of beer on the wall.\n61 bottles of beer on the wall, 61 bottles of beer.\nTake one down and pass it around, 60 bottles of beer on the wall.\n60 bottles of beer on the wall, 60 bottles of beer.\nTake one down and pass it around, 59 bottles of beer on the wall.\n59 bottles of beer on the wall, 59 bottles of beer.\nTake one down and pass it around, 58 bottles of beer on the wall.\n58 bottles of beer on the wall, 58 bottles of beer.\nTake one down and pass it around, 57 bottles of beer on the wall.\n57 bottles of beer on the wall, 57 bottles of beer.\nTake one down and pass it around, 56 bottles of beer on the wall.\n56 bottles of beer on the wall, 56 bottles of beer.\nTake one down and pass it around, 55 bottles of beer on the wall.\n55 bottles of beer on the wall, 55 bottles of beer.\nTake one down and pass it around, 54 bottles of beer on the wall.\n54 bottles of beer on the wall, 54 bottles of beer.\nTake one down and pass it around, 53 bottles of beer on the wall.\n53 bottles of beer on the wall, 53 bottles of beer.\nTake one down and pass it around, 52 bottles of beer on the wall.\n52 bottles of beer on the wall, 52 bottles of beer.\nTake one down and pass it around, 51 bottles of beer on the wall.\n51 bottles of beer on the wall, 51 bottles of beer.\nTake one down and pass it around, 50 bottles of beer on the wall.\n50 bottles of beer on the wall, 50 bottles of beer.\nTake one down and pass it around, 49 bottles of beer on the wall.\n49 bottles of beer on the wall, 49 bottles of beer.\nTake one down and pass it around, 48 bottles of beer on the wall.\n48 bottles of beer on the wall, 48 bottles of beer.\nTake one down and pass it around, 47 bottles of beer on the wall.\n47 bottles of beer on the wall, 47 bottles of beer.\nTake one down and pass it around, 46 bottles of beer on the wall.\n46 bottles of beer on the wall, 46 bottles of beer.\nTake one down and pass it around, 45 bottles of beer on the wall.\n45 bottles of beer on the wall, 45 bottles of beer.\nTake one down and pass it around, 44 bottles of beer on the wall.\n44 bottles of beer on the wall, 44 bottles of beer.\nTake one down and pass it around, 43 bottles of beer on the wall.\n43 bottles of beer on the wall, 43 bottles of beer.\nTake one down and pass it around, 42 bottles of beer on the wall.\n42 bottles of beer on the wall, 42 bottles of beer.\nTake one down and pass it around, 41 bottles of beer on the wall.\n41 bottles of beer on the wall, 41 bottles of beer.\nTake one down and pass it around, 40 bottles of beer on the wall.\n40 bottles of beer on the wall, 40 bottles of beer.\nTake one down and pass it around, 39 bottles of beer on the wall.\n39 bottles of beer on the wall, 39 bottles of beer.\nTake one down and pass it around, 38 bottles of beer on the wall.\n38 bottles of beer on the wall, 38 bottles of beer.\nTake one down and pass it around, 37 bottles of beer on the wall.\n37 bottles of beer on the wall, 37 bottles of beer.\nTake one down and pass it around, 36 bottles of beer on the wall.\n36 bottles of beer on the wall, 36 bottles of beer.\nTake one down and pass it around, 35 bottles of beer on the wall.\n35 bottles of beer on the wall, 35 bottles of beer.\nTake one down and pass it around, 34 bottles of beer on the wall.\n34 bottles of beer on the wall, 34 bottles of beer.\nTake one down and pass it around, 33 bottles of beer on the wall.\n33 bottles of beer on the wall, 33 bottles of beer.\nTake one down and pass it around, 32 bottles of beer on the wall.\n32 bottles of beer on the wall, 32 bottles of beer.\nTake one down and pass it around, 31 bottles of beer on the wall.\n31 bottles of beer on the wall, 31 bottles of beer.\nTake one down and pass it around, 30 bottles of beer on the wall.\n30 bottles of beer on the wall, 30 bottles of beer.\nTake one down and pass it around, 29 bottles of beer on the wall.\n29 bottles of beer on the wall, 29 bottles of beer.\nTake one down and pass it around, 28 bottles of beer on the wall.\n28 bottles of beer on the wall, 28 bottles of beer.\nTake one down and pass it around, 27 bottles of beer on the wall.\n27 bottles of beer on the wall, 27 bottles of beer.\nTake one down and pass it around, 26 bottles of beer on the wall.\n26 bottles of beer on the wall, 26 bottles of beer.\nTake one down and pass it around, 25 bottles of beer on the wall.\n25 bottles of beer on the wall, 25 bottles of beer.\nTake one down and pass it around, 24 bottles of beer on the wall.\n24 bottles of beer on the wall, 24 bottles of beer.\nTake one down and pass it around, 23 bottles of beer on the wall.\n23 bottles of beer on the wall, 23 bottles of beer.\nTake one down and pass it around, 22 bottles of beer on the wall.\n22 bottles of beer on the wall, 22 bottles of beer.\nTake one down and pass it around, 21 bottles of beer on the wall.\n21 bottles of beer on the wall, 21 bottles of beer.\nTake one down and pass it around, 20 bottles of beer on the wall.\n20 bottles of beer on the wall, 20 bottles of beer.\nTake one down and pass it around, 19 bottles of beer on the wall.\n19 bottles of beer on the wall, 19 bottles of beer.\nTake one down and pass it around, 18 bottles of beer on the wall.\n18 bottles of beer on the wall, 18 bottles of beer.\nTake one down and pass it around, 17 bottles of beer on the wall.\n17 bottles of beer on the wall, 17 bottles of beer.\nTake one down and pass it around, 16 bottles of beer on the wall.\n16 bottles of beer on the wall, 16 bottles of beer.\nTake one down and pass it around, 15 bottles of beer on the wall.\n15 bottles of beer on the wall, 15 bottles of beer.\nTake one down and pass it around, 14 bottles of beer on the wall.\n14 bottles of beer on the wall, 14 bottles of beer.\nTake one down and pass it around, 13 bottles of beer on the wall.\n13 bottles of beer on the wall, 13 bottles of beer.\nTake one down and pass it around, 12 bottles of beer on the wall.\n12 bottles of beer on the wall, 12 bottles of beer.\nTake one down and pass it around, 11 bottles of beer on the wall.\n11 bottles of beer on the wall, 11 bottles of beer.\nTake one down and pass it around, 10 bottles of beer on the wall.\n10 bottles of beer on the wall, 10 bottles of beer.\nTake one down and pass it around, 9 bottles of beer on the wall.\n9 bottles of beer on the wall, 9 bottles of beer.\nTake one down and pass it around, 8 bottles of beer on the wall.\n8 bottles of beer on the wall, 8 bottles of beer.\nTake one down and pass it around, 7 bottles of beer on the wall.\n7 bottles of beer on the wall, 7 bottles of beer.\nTake one down and pass it around, 6 bottles of beer on the wall.\n6 bottles of beer on the wall, 6 bottles of beer.\nTake one down and pass it around, 5 bottles of beer on the wall.\n5 bottles of beer on the wall, 5 bottles of beer.\nTake one down and pass it around, 4 bottles of beer on the wall.\n4 bottles of beer on the wall, 4 bottles of beer.\nTake one down and pass it around, 3 bottles of beer on the wall.\n3 bottles of beer on the wall, 3 bottles of beer.\nTake one down and pass it around, 2 bottles of beer on the wall.\n2 bottles of beer on the wall, 2 bottles of beer.\nTake one down and pass it around, 1 bottle of beer on the wall.\n1 bottle of beer on the wall, 1 bottle of beer.\nTake one down and pass it around, no more bottles of beer on the wall.\nNo more bottles of beer on the wall, no more bottles of beer.\nGo to the store and buy some more, 99 bottles of beer on the wall.\"\n  else nil\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49282,"user_id":1624,"body":"def hq9(code)\n  case code\n  when \"H\"\n    \"Hello World!\"\n  when \"Q\"\n    \"Q\"\n  when \"9\"\n    \"99 bottles of beer on the wall, 99 bottles of beer.\nTake one down and pass it around, 98 bottles of beer on the wall.\n98 bottles of beer on the wall, 98 bottles of beer.\nTake one down and pass it around, 97 bottles of beer on the wall.\n97 bottles of beer on the wall, 97 bottles of beer.\nTake one down and pass it around, 96 bottles of beer on the wall.\n96 bottles of beer on the wall, 96 bottles of beer.\nTake one down and pass it around, 95 bottles of beer on the wall.\n95 bottles of beer on the wall, 95 bottles of beer.\nTake one down and pass it around, 94 bottles of beer on the wall.\n94 bottles of beer on the wall, 94 bottles of beer.\nTake one down and pass it around, 93 bottles of beer on the wall.\n93 bottles of beer on the wall, 93 bottles of beer.\nTake one down and pass it around, 92 bottles of beer on the wall.\n92 bottles of beer on the wall, 92 bottles of beer.\nTake one down and pass it around, 91 bottles of beer on the wall.\n91 bottles of beer on the wall, 91 bottles of beer.\nTake one down and pass it around, 90 bottles of beer on the wall.\n90 bottles of beer on the wall, 90 bottles of beer.\nTake one down and pass it around, 89 bottles of beer on the wall.\n89 bottles of beer on the wall, 89 bottles of beer.\nTake one down and pass it around, 88 bottles of beer on the wall.\n88 bottles of beer on the wall, 88 bottles of beer.\nTake one down and pass it around, 87 bottles of beer on the wall.\n87 bottles of beer on the wall, 87 bottles of beer.\nTake one down and pass it around, 86 bottles of beer on the wall.\n86 bottles of beer on the wall, 86 bottles of beer.\nTake one down and pass it around, 85 bottles of beer on the wall.\n85 bottles of beer on the wall, 85 bottles of beer.\nTake one down and pass it around, 84 bottles of beer on the wall.\n84 bottles of beer on the wall, 84 bottles of beer.\nTake one down and pass it around, 83 bottles of beer on the wall.\n83 bottles of beer on the wall, 83 bottles of beer.\nTake one down and pass it around, 82 bottles of beer on the wall.\n82 bottles of beer on the wall, 82 bottles of beer.\nTake one down and pass it around, 81 bottles of beer on the wall.\n81 bottles of beer on the wall, 81 bottles of beer.\nTake one down and pass it around, 80 bottles of beer on the wall.\n80 bottles of beer on the wall, 80 bottles of beer.\nTake one down and pass it around, 79 bottles of beer on the wall.\n79 bottles of beer on the wall, 79 bottles of beer.\nTake one down and pass it around, 78 bottles of beer on the wall.\n78 bottles of beer on the wall, 78 bottles of beer.\nTake one down and pass it around, 77 bottles of beer on the wall.\n77 bottles of beer on the wall, 77 bottles of beer.\nTake one down and pass it around, 76 bottles of beer on the wall.\n76 bottles of beer on the wall, 76 bottles of beer.\nTake one down and pass it around, 75 bottles of beer on the wall.\n75 bottles of beer on the wall, 75 bottles of beer.\nTake one down and pass it around, 74 bottles of beer on the wall.\n74 bottles of beer on the wall, 74 bottles of beer.\nTake one down and pass it around, 73 bottles of beer on the wall.\n73 bottles of beer on the wall, 73 bottles of beer.\nTake one down and pass it around, 72 bottles of beer on the wall.\n72 bottles of beer on the wall, 72 bottles of beer.\nTake one down and pass it around, 71 bottles of beer on the wall.\n71 bottles of beer on the wall, 71 bottles of beer.\nTake one down and pass it around, 70 bottles of beer on the wall.\n70 bottles of beer on the wall, 70 bottles of beer.\nTake one down and pass it around, 69 bottles of beer on the wall.\n69 bottles of beer on the wall, 69 bottles of beer.\nTake one down and pass it around, 68 bottles of beer on the wall.\n68 bottles of beer on the wall, 68 bottles of beer.\nTake one down and pass it around, 67 bottles of beer on the wall.\n67 bottles of beer on the wall, 67 bottles of beer.\nTake one down and pass it around, 66 bottles of beer on the wall.\n66 bottles of beer on the wall, 66 bottles of beer.\nTake one down and pass it around, 65 bottles of beer on the wall.\n65 bottles of beer on the wall, 65 bottles of beer.\nTake one down and pass it around, 64 bottles of beer on the wall.\n64 bottles of beer on the wall, 64 bottles of beer.\nTake one down and pass it around, 63 bottles of beer on the wall.\n63 bottles of beer on the wall, 63 bottles of beer.\nTake one down and pass it around, 62 bottles of beer on the wall.\n62 bottles of beer on the wall, 62 bottles of beer.\nTake one down and pass it around, 61 bottles of beer on the wall.\n61 bottles of beer on the wall, 61 bottles of beer.\nTake one down and pass it around, 60 bottles of beer on the wall.\n60 bottles of beer on the wall, 60 bottles of beer.\nTake one down and pass it around, 59 bottles of beer on the wall.\n59 bottles of beer on the wall, 59 bottles of beer.\nTake one down and pass it around, 58 bottles of beer on the wall.\n58 bottles of beer on the wall, 58 bottles of beer.\nTake one down and pass it around, 57 bottles of beer on the wall.\n57 bottles of beer on the wall, 57 bottles of beer.\nTake one down and pass it around, 56 bottles of beer on the wall.\n56 bottles of beer on the wall, 56 bottles of beer.\nTake one down and pass it around, 55 bottles of beer on the wall.\n55 bottles of beer on the wall, 55 bottles of beer.\nTake one down and pass it around, 54 bottles of beer on the wall.\n54 bottles of beer on the wall, 54 bottles of beer.\nTake one down and pass it around, 53 bottles of beer on the wall.\n53 bottles of beer on the wall, 53 bottles of beer.\nTake one down and pass it around, 52 bottles of beer on the wall.\n52 bottles of beer on the wall, 52 bottles of beer.\nTake one down and pass it around, 51 bottles of beer on the wall.\n51 bottles of beer on the wall, 51 bottles of beer.\nTake one down and pass it around, 50 bottles of beer on the wall.\n50 bottles of beer on the wall, 50 bottles of beer.\nTake one down and pass it around, 49 bottles of beer on the wall.\n49 bottles of beer on the wall, 49 bottles of beer.\nTake one down and pass it around, 48 bottles of beer on the wall.\n48 bottles of beer on the wall, 48 bottles of beer.\nTake one down and pass it around, 47 bottles of beer on the wall.\n47 bottles of beer on the wall, 47 bottles of beer.\nTake one down and pass it around, 46 bottles of beer on the wall.\n46 bottles of beer on the wall, 46 bottles of beer.\nTake one down and pass it around, 45 bottles of beer on the wall.\n45 bottles of beer on the wall, 45 bottles of beer.\nTake one down and pass it around, 44 bottles of beer on the wall.\n44 bottles of beer on the wall, 44 bottles of beer.\nTake one down and pass it around, 43 bottles of beer on the wall.\n43 bottles of beer on the wall, 43 bottles of beer.\nTake one down and pass it around, 42 bottles of beer on the wall.\n42 bottles of beer on the wall, 42 bottles of beer.\nTake one down and pass it around, 41 bottles of beer on the wall.\n41 bottles of beer on the wall, 41 bottles of beer.\nTake one down and pass it around, 40 bottles of beer on the wall.\n40 bottles of beer on the wall, 40 bottles of beer.\nTake one down and pass it around, 39 bottles of beer on the wall.\n39 bottles of beer on the wall, 39 bottles of beer.\nTake one down and pass it around, 38 bottles of beer on the wall.\n38 bottles of beer on the wall, 38 bottles of beer.\nTake one down and pass it around, 37 bottles of beer on the wall.\n37 bottles of beer on the wall, 37 bottles of beer.\nTake one down and pass it around, 36 bottles of beer on the wall.\n36 bottles of beer on the wall, 36 bottles of beer.\nTake one down and pass it around, 35 bottles of beer on the wall.\n35 bottles of beer on the wall, 35 bottles of beer.\nTake one down and pass it around, 34 bottles of beer on the wall.\n34 bottles of beer on the wall, 34 bottles of beer.\nTake one down and pass it around, 33 bottles of beer on the wall.\n33 bottles of beer on the wall, 33 bottles of beer.\nTake one down and pass it around, 32 bottles of beer on the wall.\n32 bottles of beer on the wall, 32 bottles of beer.\nTake one down and pass it around, 31 bottles of beer on the wall.\n31 bottles of beer on the wall, 31 bottles of beer.\nTake one down and pass it around, 30 bottles of beer on the wall.\n30 bottles of beer on the wall, 30 bottles of beer.\nTake one down and pass it around, 29 bottles of beer on the wall.\n29 bottles of beer on the wall, 29 bottles of beer.\nTake one down and pass it around, 28 bottles of beer on the wall.\n28 bottles of beer on the wall, 28 bottles of beer.\nTake one down and pass it around, 27 bottles of beer on the wall.\n27 bottles of beer on the wall, 27 bottles of beer.\nTake one down and pass it around, 26 bottles of beer on the wall.\n26 bottles of beer on the wall, 26 bottles of beer.\nTake one down and pass it around, 25 bottles of beer on the wall.\n25 bottles of beer on the wall, 25 bottles of beer.\nTake one down and pass it around, 24 bottles of beer on the wall.\n24 bottles of beer on the wall, 24 bottles of beer.\nTake one down and pass it around, 23 bottles of beer on the wall.\n23 bottles of beer on the wall, 23 bottles of beer.\nTake one down and pass it around, 22 bottles of beer on the wall.\n22 bottles of beer on the wall, 22 bottles of beer.\nTake one down and pass it around, 21 bottles of beer on the wall.\n21 bottles of beer on the wall, 21 bottles of beer.\nTake one down and pass it around, 20 bottles of beer on the wall.\n20 bottles of beer on the wall, 20 bottles of beer.\nTake one down and pass it around, 19 bottles of beer on the wall.\n19 bottles of beer on the wall, 19 bottles of beer.\nTake one down and pass it around, 18 bottles of beer on the wall.\n18 bottles of beer on the wall, 18 bottles of beer.\nTake one down and pass it around, 17 bottles of beer on the wall.\n17 bottles of beer on the wall, 17 bottles of beer.\nTake one down and pass it around, 16 bottles of beer on the wall.\n16 bottles of beer on the wall, 16 bottles of beer.\nTake one down and pass it around, 15 bottles of beer on the wall.\n15 bottles of beer on the wall, 15 bottles of beer.\nTake one down and pass it around, 14 bottles of beer on the wall.\n14 bottles of beer on the wall, 14 bottles of beer.\nTake one down and pass it around, 13 bottles of beer on the wall.\n13 bottles of beer on the wall, 13 bottles of beer.\nTake one down and pass it around, 12 bottles of beer on the wall.\n12 bottles of beer on the wall, 12 bottles of beer.\nTake one down and pass it around, 11 bottles of beer on the wall.\n11 bottles of beer on the wall, 11 bottles of beer.\nTake one down and pass it around, 10 bottles of beer on the wall.\n10 bottles of beer on the wall, 10 bottles of beer.\nTake one down and pass it around, 9 bottles of beer on the wall.\n9 bottles of beer on the wall, 9 bottles of beer.\nTake one down and pass it around, 8 bottles of beer on the wall.\n8 bottles of beer on the wall, 8 bottles of beer.\nTake one down and pass it around, 7 bottles of beer on the wall.\n7 bottles of beer on the wall, 7 bottles of beer.\nTake one down and pass it around, 6 bottles of beer on the wall.\n6 bottles of beer on the wall, 6 bottles of beer.\nTake one down and pass it around, 5 bottles of beer on the wall.\n5 bottles of beer on the wall, 5 bottles of beer.\nTake one down and pass it around, 4 bottles of beer on the wall.\n4 bottles of beer on the wall, 4 bottles of beer.\nTake one down and pass it around, 3 bottles of beer on the wall.\n3 bottles of beer on the wall, 3 bottles of beer.\nTake one down and pass it around, 2 bottles of beer on the wall.\n2 bottles of beer on the wall, 2 bottles of beer.\nTake one down and pass it around, 1 bottle of beer on the wall.\n1 bottle of beer on the wall, 1 bottle of beer.\nTake one down and pass it around, no more bottles of beer on the wall.\nNo more bottles of beer on the wall, no more bottles of beer.\nGo to the store and buy some more, 99 bottles of beer on the wall.\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49283,"user_id":null,"body":"def hq9(code)\n  case code\n  when \"H\"\n    \"Hello World!\"\n  when \"Q\"\n    \"Q\"\n  when \"9\"\n    str = IO::Memory.new\n    99.downto(1) do |n|                                                             \n      str << \"#{n} bottle#{n > 1 ? \"s\" : \"\"} of beer on the wall, \"                     \n      str << \"#{n} bottle#{n > 1 ? \"s\" : \"\"} of beer.\n\"                                 \n      str << \"Take one down and pass it around, \"                                          \n      str << \"#{n-1} bottle#{n > 2 ? \"s\" : \"\"} of beer on the wall.\n\" if n > 1\n      str << \"no more bottles of beer on the wall.\n\" if n == 1\n    end                                                                             \n    str << \"No more bottles of beer on the wall, no more bottles of beer.\n\"\n    str << \"Go to the store and buy some more, 99 bottles of beer on the wall.\"\n    str.to_s\n  else\n    nil\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49284,"user_id":null,"body":"def hq9(code)\n  case code\n  when \"H\"\n    return \"Hello World!\"\n  when \"Q\"\n    return \"Q\"\n  when \"9\"\n    msg = \"\"\n    b, b1 = \"bottles\", \"bottles\"\n    99.downto(1) do |x|\n      b = \"bottle\" if x == 1\n      b1 = \"bottle\" if (x - 1) == 1\n      if x == 1\n        msg += \"1 bottle of beer on the wall, 1 bottle of beer.\n\"\n        msg += \"Take one down and pass it around, no more bottles of beer on the wall.\n\"\n        msg += \"No more bottles of beer on the wall, no more bottles of beer.\n\"\n        msg += \"Go to the store and buy some more, 99 bottles of beer on the wall.\"\n        return msg\n      end\n      msg += \"#{x} #{b} of beer on the wall, #{x} #{b} of beer.\n\"\n      msg += \"Take one down and pass it around, #{x - 1} #{b1} of beer on the wall.\n\"\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49285,"user_id":null,"body":"def hq9(code)\n  case code\n  when \"H\"\n    \"Hello World!\"\n  when \"Q\"\n    \"Q\"\n  when \"9\"\n    (3..99).map { |i|\n      \"#{i} bottles of beer on the wall, #{i} bottles of beer.\n\\\n       Take one down and pass it around, #{i-1} bottles of beer on the wall.\n\"\n    }.reverse.sum(\"\") +\n    \"2 bottles of beer on the wall, 2 bottles of beer.\n\\\n    Take one down and pass it around, 1 bottle of beer on the wall.\n\\\n    1 bottle of beer on the wall, 1 bottle of beer.\n\\\n    Take one down and pass it around, no more bottles of beer on the wall.\n\\\n    No more bottles of beer on the wall, no more bottles of beer.\n\\\n    Go to the store and buy some more, 99 bottles of beer on the wall.\" \n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59175441e76dc9f9bc00000f":[{"id":49286,"user_id":53,"body":"def atomic_number(n)\n  ns,i = [] of Int32,1\n  while n>0\n    m = [n, 2*i**2].min\n    ns.push(m)\n    n,i = n-m,i+1\n  end\n  ns\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49287,"user_id":168,"body":"def atomic_number(electrons)\n  n, r = 1, [] of Int32\n  while electrons > 0\n    x = [2 * n * n, electrons].min\n    r << x\n    electrons -= x\n    n += 1\n  end\n  r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49288,"user_id":50,"body":"def atomic_number(electrons)\n  shell=1\n  a=[] of Int32\n  while true\n    n=2*shell**2\n    if electrons<=n\n      break \n    end\n    a.push(n)\n    electrons-=n\n    shell+=1\n  end\n  a+[electrons]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49289,"user_id":421,"body":"def atomic_number(electrons)\n  level = 1\n  shells = [] of Int32\n  while electrons > 0\n    shells << [2 * level * level, electrons].min\n    electrons -= shells[-1]\n    level += 1\n  end\n  shells\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49290,"user_id":492,"body":"def atomic_number(n)\n    result = [] of Int32; i = 1\n    while n > 0\n        atoms = 2 * i * i\n        if (atoms <= n)\n            tmp = atoms\n        else\n            tmp = n\n        end\n        result << tmp\n        n = n - atoms\n        i += 1\n    end\n    result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49291,"user_id":527,"body":"def atomic_number(n_electrons): Array(Int32)\n  res = [] of Int32\n  i = 1\n  while n_electrons != 0\n    k = {n_electrons, 2 * i**2}.min\n    res << k\n    n_electrons -= k\n    i += 1\n  end\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49292,"user_id":1072,"body":"def atomic_number(n,i=1) q=2*i*i; q>=n ? [n] : [q]+atomic_number(n-q,i+1) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5919427e5ffc30804900005f":[{"id":49293,"user_id":421,"body":"def finding_k(arr)\n  if arr.uniq.size == 1\n    return -1\n  end\n  i = arr.max\n  while !arr.all?{|x| arr[0] % i == x % i}\n    i -= 1\n  end\n  i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49294,"user_id":null,"body":"def finding_k(arr)\n  return -1 if arr.all? { |n| n == 1 }\n\n  100.downto(1) { |i|\n    remainders = arr.map { |n| n % i }\n    same = remainders.all? { |n| n == remainders[0] }\n    return i if same\n  }\n  -1\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49295,"user_id":1072,"body":"def gcd(a,b) b==0 ? a : gcd(b,a%b) end; def finding_k(arr) res=arr.map{|e| (e-arr[0]).abs}.reduce(){|a,b| gcd(a,b)}; res !=0 ? res : -1 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"591aa1752afcb02fa300002a":[{"id":49296,"user_id":null,"body":"def thue_morse(n)\n  thue = \"0\"\n  while thue.size < n\n    thue += thue.tr(\"01\",\"10\")\n  end\n  thue[0...n]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49297,"user_id":421,"body":"def thue_morse(n)\n  s = \"01101001\"\n  while s.size < n\n    s += s.tr(\"01\", \"10\")\n  end\n  s[0...n]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49298,"user_id":null,"body":"def thue_morse(n)\n  s = [0_u8]\n  while s.size < n\n    s = s + s.map {|v| v ^ 1}\n  end\n  s.first(n).join \"\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49299,"user_id":2563,"body":"def thue_morse(n)\n  b = \"0\"\n  until b.size >= n\n    b = b + bool_comp(b) \n  end\n  b[0..n-1]\nend\n\ndef bool_comp(binary)\n  binary.each_char.map {|x|\n    x == '0' ? '1' : '0'\n  }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49300,"user_id":1072,"body":"def thue_morse(nn] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"591d3375e51f4a0940000052":[{"id":49301,"user_id":1072,"body":"def sum_of_threes(n)\n  i=0\n  s=n.to_s(3)\n  \/2\/=~s ? \"Impossible\" : s.split(\"\").reduce([] of String){|a,b| i+=1; b==\"0\" ? a : a+[\"3^#{s.size-i}\"]}.join(\"+\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5921c0bc6b8f072e840000c0":[{"id":49302,"user_id":759,"body":"CLASSES = [[] of Int32, [-1], [-1, 0], [1], [0, 1], [0]].map { |a| Set.new(a) }\n\ndef sequence_classifier(arr)\n  a = Set.new(arr.each_cons(2).map { |a| a[0] <=> a[1] })\n  CLASSES.index(a) || 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49303,"user_id":421,"body":"def sequence_classifier(arr)\n  si = sd = se = 0\n  (1...arr.size).each do |i|\n     si += 1 if arr[i] > arr[i - 1] \n     sd += 1 if arr[i] < arr[i - 1]\n     se += 1 if arr[i] == arr[i - 1]\n  end\n  si && (se + sd).zero? ? 1 : # strictly increasing\n  sd && (se + si).zero? ? 3 : # strictly decreasing \n  se && (si + sd).zero? ? 5 : # constant\n  si &&  se && sd.zero? ? 2 : # not decreasing \n  sd &&  se && si.zero? ? 4 : # not increasing\n                          0   # unordered\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49304,"user_id":53,"body":"def sequence_classifier(arr)\n  i,d,q = false,false,false\n  arr.each.with_index{ |e,j|\n    next if j == 0\n    i |= e>arr[j-1]\n    d |= e<arr[j-1]\n    q |= e==arr[j-1]\n  }\n  return 0 if i && d\n  return 1 if i && !q\n  return 2 if i\n  return 3 if d && !q\n  return 4 if d\n  5\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49305,"user_id":1624,"body":"def sequence_classifier(arr)\n  cmp = {} of Int32 => Bool\n  arr[0..-2].zip(arr[1..-1]).each do |x,y|\n    cmp[x <=> y] = true\n  end\n  case cmp\n  when {-1 => true}\n    1\n  when {-1 => true, 0 => true}\n    2\n  when {1 => true}\n    3\n  when {1 => true, 0 => true}\n    4\n  when {0 => true}\n    5\n  else\n    0\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49306,"user_id":null,"body":"def sequence_classifier(arr)\n  uni = arr.uniq\n\n  return 5 if uni.size == 1\n\n  if uni.size != arr.size\n    if uni == uni.sort\n      return 2\n    elsif uni == uni.sort.reverse\n      return 4\n    end\n  end\n\n  if arr == arr.sort\n    return 1\n  elsif arr == arr.sort.reverse\n    return 3\n  end\n  0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49307,"user_id":1072,"body":"def sequence_classifier(arr) i=0; res=arr.reduce([0,0,0]){|a,b| i+=1; i==1 ? [0,0,0] : b==arr[i-2] ? [a[0],a[1]+1,a[2]] : b>arr[i-2] ? [a[0]+1,a[1],a[2]] : [a[0],a[1],a[2]+1]}; res[0] != 0 && res[2] != 0 ? 0 : res[1] != 0 ? (res[0] != 0 ? 2 : res[2] != 0 ? 4 : 5) : res[0] != 0 ? 1 : 3 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5922828c80a27c049c000078":[{"id":49308,"user_id":null,"body":"MEMO = [\"1\"]\n\ndef look_and_say_and_sum(n)\n  while MEMO.size < n\n    MEMO << MEMO.last.gsub(\/(\\d)\\1*\/) { |s| \"#{s.size}#{s[0]}\" }\n  end\n  MEMO[n-1].chars.map(&.to_i).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49309,"user_id":1072,"body":"def look_and_say_and_sum(n) [0,1,2,3,5,8,10,13,16,23,32,44,56,76,102,132,174,227,296,383,505,679,892,1151,1516,1988,2602,3400,4410,5759,7519,9809,12810,16710,21758,28356,36955,48189,62805,81803,106647,139088,181301,236453,308150,401689,523719,682571,889807,1159977,1511915,1970964,2569494,3349648,4366359,5691884][n] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49310,"user_id":null,"body":"def look_and_say_and_sum(n)\n  seq = [1]\n\n  (n - 1).times do\n    seq = seq.chunks(&.itself).map {|i| [i.last.size, i.first]}.flatten\n  end\n\n  seq.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49311,"user_id":50,"body":"def look_and_say_and_sum(n)\n  [\"0_o\",1,2,3,5,8,10,13,16,23,32,44,56,76,102,132,174,227,296,383,505,679,892,1151,1516,1988,2602,3400,4410,5759,7519,9809,12810,16710,21758,28356,36955,48189,62805,81803,106647,139088,181301,236453,308150,401689,523719,682571,889807,1159977,1511915,1970964,2569494,3349648,4366359,5691884][n]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49312,"user_id":null,"body":"class LasMemo\n  @@memo = {1 => \"1\"}\n  \n  def self.memo\n    @@memo\n  end\nend\n\ndef look_and_say_and_sum(n)\n  i = Math.min(n, LasMemo.memo.size)\n  s = LasMemo.memo[i]\n  (n-i).times do |j|\n    s = s.gsub(\/(\\d)\\1*\/) {|s| s.size.to_s + s[0]}\n    LasMemo.memo[i+j+1] = s\n  end\n  s.chars.sum &.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49313,"user_id":null,"body":"def look_and_say_and_sum(n)\n  r = [1, 2, 3, 5, 8, 10, 13, 16, 23, 32, 44, 56, 76, 102, 132, 174, 227, 296, 383, 505, 679, 892, 1151, 1516, 1988, 2602, 3400, 4410, 5759, 7519, 9809, 12810, 16710, 21758, 28356, 36955, 48189, 62805, 81803, 106647, 139088, 181301, 236453, 308150, 401689, 523719, 682571, 889807, 1159977, 1511915, 1970964, 2569494, 3349648, 4366359, 5691884]\n  r[n-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49314,"user_id":null,"body":"def look_and_say_and_sum(n)\n  seq = [ [1i64, 1i64] ]\n  ( 2 .. n ).each {\n    flat = seq.flatten\n    seq = group_enc( flat )\n  }\n  seq.map { |p| p[0] * p[1] }.sum\nend\n\ndef group_enc( a : Array(Int64) ) : Array(Array(Int64))\n  ret = [] of Array(Int64)\n  cur_grp_cnt = 1i64\n  prev : Int64 = a[0]\n  \n  a[1...a.size].map { |x|\n      if x == prev \n        cur_grp_cnt += 1\n      else\n        ret << [cur_grp_cnt, prev]\n        cur_grp_cnt = 1i64\n        prev = x\n      end\n  }\n  ret << [cur_grp_cnt, a.last]\n  ret \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49315,"user_id":null,"body":"DigSeqRe = \/#{(0..9).map { | i | \"#{i}+\" }.join('|')}\/\n\ndef look_and_say(n)\n  return \"1\" if n <= 1\n  m = look_and_say(n-1)\n  m.scan(DigSeqRe).map { | s | \"#{s[0].size}#{s[0][0]}\" }.join\nend\n\ndef look_and_say_and_sum(n)\n  look_and_say(n).chars.map(&.to_i).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49316,"user_id":null,"body":"SEQ = {1 => \"1\"}\n\ndef look_and_say_and_sum(n)\n  ((SEQ.keys.max + 1)..n).each { |i|\n    chars = SEQ[i - 1].chars.map(&.to_i)\n    last = chars.first\n    count = [] of Array(Int32)\n    current = 1\n    chars.skip(1).each { |c|\n      if c != last\n        count << [current, last]\n        last = c\n        current = 1\n      else\n        current += 1\n      end\n    }\n    count << [current, last]\n    SEQ[i] = count.flatten.map(&.to_s).join\n  }\n  SEQ[n].chars.sum(&.to_i)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49317,"user_id":null,"body":"def get_next(line : Array(String)) : Array(String)\n  last = nil\n  count = 1\n  new_line = [] of String\n    \n  line.each do |c|\n    if last\n      if c != last\n        new_line << count.to_s\n        new_line << last.as(String)\n        count = 1\n      else\n        count += 1\n      end\n    end\n    \n   last = c\n  end\n  \n  new_line + [count.to_s, last.as(String)]\nend\n\ndef look_and_say_and_sum(n : Int32) : Int32\n  our_n = 1\n  line = [\"1\"]\n  \n  while our_n < n\n    line = get_next line\n    our_n += 1\n  end\n  \n  line.map(&.to_i).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"592421cb7312c23a990000cf":[{"id":49318,"user_id":421,"body":"def look_and_say_sequence(first_element, n)  \n  arr = [first_element]\n  while arr.size != n\n      first_element = first_element.gsub(\/(.)\\1*\/){|x| x.size.to_s + x[0]}     \n      arr << first_element\n  end\n  arr[-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49319,"user_id":null,"body":"def look_and_say_sequence(first, n)\n  str = first\n  (n - 1).times { str = str.chars.chunk { |x| x }.join { |_, y| \"#{y.size}#{y[0]}\" } }\n  str\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49320,"user_id":1072,"body":"def look_and_say_sequence(s,n) n==1 ? s : look_and_say_sequence(s.scan(\/(.)(\\1*)\/).map{|e| e[0].size.to_s+e[1]}.join, n-1) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49321,"user_id":1072,"body":"def look_and_say_sequence(s,n) n==1 ? s : look_and_say_sequence(s.scan(\/(.)(\\1*)\/).map{|e| e[0].size.to_s+e[1]}.join, n-1) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5925138effaed0de490000cf":[{"id":49322,"user_id":1072,"body":"def tiaosheng(arr,e=0) arr.size==0 ? 60-e : arr[0]+e+3>=60 ? [arr[0],60-e].min : tiaosheng(arr[1,99],e+3) end\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5925acf31a9825d616000e74":[{"id":49323,"user_id":1624,"body":"def killcount(counselors, jason)\n  counselors.select{|(n,iq)| iq.to_i < jason}.map(&.first)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49324,"user_id":null,"body":"def killcount(counselors, jason)\n  counselors.select{|a| a[1].to_i<jason}.map(&.[0])\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49325,"user_id":null,"body":"def killcount(counselors, jason)\n  counselors.select{|_, i| i<jason}.map{|c, _| c}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49326,"user_id":null,"body":"def killcount(counselors, jason)\n  counselors.select do |(name, intel)|\n    intel.to_i < jason\n  end.map {|(name, _)| name }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49327,"user_id":1566,"body":"def killcount(counselors, jason)\n  counselors.select{|x| x[1] < jason}.map{|x| x[0]}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49328,"user_id":1474,"body":"def killcount(counselors, jason)\n  counselors.select{ |e| e[1].to_i < jason }.map(&.first)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49329,"user_id":null,"body":"def killcount(counselors, jason)\n  counselors.to_h.select { |_, v| v.to_i < jason }.keys\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49330,"user_id":1072,"body":"def killcount(c,j) c.reduce([] of String){|a,b| b[1]<j ? a+[b[0]] : a} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"592915cc1fad49252f000006":[{"id":49331,"user_id":null,"body":"def no_ifs_no_buts(a, b)\n  \"#{a} is #{[\"equal to\", \"greater than\", \"smaller than\"][a <=> b]} #{b}\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49332,"user_id":null,"body":"def no_ifs_no_buts(a, b)\n  { 0 => \"#{a} is equal to #{b}\",\n    -1 => \"#{a} is smaller than #{b}\",\n    1 =>\"#{a} is greater than #{b}\"\n  }[a <=> b]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49333,"user_id":48,"body":"def no_ifs_no_buts(a, b)\n  while a < b\n    return a.to_s + \" is smaller than \" + b.to_s\n  end\n    while a > b\n      return a.to_s + \" is greater than \" + b.to_s\n  end\n  return a.to_s + \" is equal to \" + b.to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49334,"user_id":1624,"body":"def no_ifs_no_buts(a, b)\n  case a <=> b\n  when 0\n    \"#{a} is equal to #{b}\"\n  when 1\n    \"#{a} is greater than #{b}\"\n  when -1\n    \"#{a} is smaller than #{b}\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49335,"user_id":null,"body":"def no_ifs_no_buts(a, b)\n  \"#{a} #{[\"is smaller than\", \"is equal to\", \"is greater than\"][(a <=> b) + 1]} #{b}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49336,"user_id":null,"body":"def no_ifs_no_buts(a, b)\n  case\n  when a > b\n    \"#{a} is greater than #{b}\"\n  when a < b\n    \"#{a} is smaller than #{b}\"\n  when a == b\n    \"#{a} is equal to #{b}\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49337,"user_id":null,"body":"def no_ifs_no_buts(a, b)\n  unless a <= b\n    return \"#{a} is greater than #{b}\"\n  end\n  unless a >= b\n    return \"#{a} is smaller than #{b}\"\n  end\n  return \"#{a} is equal to #{b}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49338,"user_id":null,"body":"def no_ifs_no_buts(a, b)\n  unless !(a > b)\n    return a.to_s + \" is greater than \" + b.to_s\n  end\n  unless !(a < b)\n    return a.to_s + \" is smaller than \" + b.to_s\n  end\n  return a.to_s + \" is equal to \" + b.to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49339,"user_id":1474,"body":"def no_ifs_no_buts(a, b)\n  while a < b\n  \treturn \"#{a} is smaller than #{b}\"\n  end\n  while a > b\n  \treturn \"#{a} is greater than #{b}\"\n  end\n  \"#{a} is equal to #{b}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49340,"user_id":1246,"body":"def no_ifs_no_buts(a, b)\n  word = \"equal to\" unless a != b\n  word = \"greater than\" unless a <= b\n  word = \"smaller than\"unless a >= b\n  \"#{a} is #{word} #{b}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"592a33e549fe9840a8000ba1":[{"id":49341,"user_id":1246,"body":"def is_even(n)\n  n&1==0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49342,"user_id":1566,"body":"def is_even(n)\n  !n.odd?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49343,"user_id":421,"body":"def is_even(n)\n   (n & 1).zero?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49344,"user_id":null,"body":"def is_even(n)\n  if n == 0\n    true\n  elsif n == 1\n    false\n  else\n    is_even(n - 2)\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49345,"user_id":2563,"body":"def is_even(n)\n  (n.to_f \/ 2.0) == (n.to_i \/ 2).to_f\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49346,"user_id":1474,"body":"def is_even(n)\n  n.to_s(2)[-1] == '0'\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49347,"user_id":null,"body":"def is_even(n)\n  n & 1 == 0 ? true : false\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49348,"user_id":1828,"body":"def is_even(n)\n  n.fdiv(2) - n\/2 == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49349,"user_id":1072,"body":"def is_even(n) n|1!=n end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49350,"user_id":1072,"body":"def is_even(n) n|1!=n end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"592a6ad46d6c5a62b600003f":[{"id":49351,"user_id":1474,"body":"def encode(str)\n  str.tr(\"GADERYPOLUKIgaderypoluki\", \"AGEDYROPULIKagedyropulik\")\nend\n\ndef decode(str)\n  encode(str)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49352,"user_id":null,"body":"HASH = { A:'G', G:'A', a:'g', g:'a',\n         D:'E', E:'D', d:'e', e:'d',\n         R:'Y', Y:'R', r:'y', y:'r',\n         P:'O', O:'P', p:'o', o:'p',\n         L:'U', U:'L', l:'u', u:'l',\n         K:'I', I:'K', k:'i', i:'k' \n       }\n\ndef encode(str : String) : String\n  str.gsub(\/[GADERYPOLUKI]\/i) { |x| HASH[x] }\nend\n\ndef decode(str : String) : String\n  encode(str)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49353,"user_id":527,"body":"def encode(str : String) : String\n  str.tr(\"GADERYPOLUKIgaderypoluki\", \"AGEDYROPULIKagedyropulik\")\nend\n\ndef decode(str : String) : String\n  encode(str)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49354,"user_id":17,"body":"def encode(s)\n  s.chars.map { |c| (Hash.zip(\"GADERYPOLUKIgaderypoluki\".chars, \"AGEDYROPULIKagedyropulik\".chars)[c]? != nil ? Hash.zip(\"GADERYPOLUKIgaderypoluki\".chars, \"AGEDYROPULIKagedyropulik\".chars)[c] : c).to_s }.join(\"\")\nend\ndef decode(s)\n  encode(s)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49355,"user_id":2563,"body":"def encode(str)\n\tt = { 'G'=>'A', 'A'=>'G', 'D'=>'E', 'E'=>'D', 'R'=>'Y', 'Y'=>'R', 'P'=>'O', 'O'=>'P', 'L'=>'U', 'U'=>'L', 'K'=>'I', 'I'=>'K',  'g'=>'a', 'a'=>'g', 'd'=>'e', 'e'=>'d', 'r'=>'y', 'y'=>'r', 'p'=>'o', 'o'=>'p', 'l'=>'u', 'u'=>'l', 'k'=>'i', 'i'=>'k' }\n  str.chars.map { |c| t.has_key?(c) ? t[c] : c }.join\nend\n\ndef decode(str)\n  encode(str)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49356,"user_id":null,"body":"def encode(str)\n  keys = \"GA-DE-RY-PO-LU-KI-ga-de-ry-po-lu-ki\".split('-').to_h\n  str.gsub(keys.merge(keys.invert))\nend\n\ndef decode(str)\n  encode(str)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49357,"user_id":1246,"body":"def encode(str)\n  str.tr(\"AEYOUIaeyouiGDRPLKgdrplk\", \"GDRPLKgdrplkAEYOUIaeyoui\")\nend\n\ndef decode(str)\n  str.tr(\"AEYOUIaeyouiGDRPLKgdrplk\", \"GDRPLKgdrplkAEYOUIaeyoui\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49358,"user_id":1072,"body":"def encode(s) t=\"GADERYPOLUKIgaderypoluki\"; s.split(\"\").map{|l| i=t.index(l); i==nil ? l : t[(i||0)+(-1)**((i||0)%2)]}.join(\"\") end; def decode(s) encode(s) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"592e2446dc403b132d0000be":[{"id":49359,"user_id":421,"body":"def maximum_product(arr)\n  maxi = -1.0\/0.0\n  rm = 0\n  (0...arr.size).each do |i|\n    n = (arr[0...i] + arr[i + 1..-1]).product\n    if n > maxi\n      maxi = n\n      rm = arr[i]\n    end\n    if n == maxi\n      rm = [rm, arr[i]].min\n    end\n  end\n  rm\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49360,"user_id":null,"body":"def maximum_product(arr)\n  arr.sort!.map_with_index{|e, i| [e, (i>0? arr[..i-1]+arr[i+1..]: arr[1..]).product]}.max_by(&.[1])[0]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49361,"user_id":null,"body":"def maximum_product(arr)\n  arr.sort!.map_with_index{|e, i| [e, (i>0? arr[..i-1]+arr[i+1..]: arr[i+1..]).product]}.max_by(&.[1])[0]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49362,"user_id":null,"body":"def maximum_product(arr)\n  ps = arr.map_with_index{|e, i| [e, (i>0? arr[..i-1]+arr[i+1..]: arr[i+1..]).product]}\n  maxp = ps.max_of(&.last); ps.select{|a| a[1]==maxp}.min_of(&.first)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49363,"user_id":null,"body":"def maximum_product(arr)\n  ps = arr.map_with_index{|e, i| a = [e, (i>0? arr[..i-1]+arr[i+1..]: arr[i+1..]).product]}\n  maxp = ps.max_of(&.last); ps.select{|a| a[1]==maxp}.min_of(&.first)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49364,"user_id":527,"body":"def maximum_product(xs)\n  xs.each_with_index.max_by{ |(x, i)|\n    {xs.each_with_index.map{ |(y, j)| j == i ? 1 : y }.product, -x}\n  }[0]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49365,"user_id":1624,"body":"def maximum_product(arr)\n  arr.max_by{|x|\n    [(arr - [x] + [x] * (arr.count(x) - 1)).product, -x]\n  }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49366,"user_id":1474,"body":"def maximum_product(arr)\n\tpve, nve = arr.each_with_object([[] of Int32, [] of Int32]){ |i, o| i > 0 ? o[0] << i : i < 0 ? o[1] << i : nil }\n  case arr.count(0)\n  when 0 then nve.size.odd? ? nve.max : pve.empty? ? nve.min : pve.min\n  when 1 then nve.size.odd? ? nve.min : 0\n  else arr.min\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49367,"user_id":1072,"body":"def maximum_product(arr) arr.each_with_index.reduce([-99999999999999999,arr[0]]){|a,b| p=(arr[0,b[1]]+arr[b[1]+1,99]).reduce(1){|a,b|a*b}; p>=a[0] ? [p,p==a[0] ? [b[0],a[1]].min : b[0]] : a}[1] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"592e830e043b99888600002d":[{"id":49368,"user_id":1474,"body":"def encode(message, key)\n\tarr = key.to_s.chars.cycle(message.size).to_a\n  message.chars.zip(arr).map{ |c1, c2| c1.ord - 96 + c2.to_i }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49369,"user_id":168,"body":"def encode(m, k)\n  m.chars.zip(k.digits.reverse.cycle).map { |x, k| x.ord - 96 + k }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49370,"user_id":null,"body":"def encode(message : String, key : Int): Array(Int32)\n  key = key.to_s\n  message.chars.map_with_index { |l,i| l.ord - 96 + (key[i % key.size]).to_i }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49371,"user_id":null,"body":"def encode(m,k)\n  key = k.digits.reverse.cycle\n  m.chars.zip(key).map { |c, d| c.ord - 96 + d }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49372,"user_id":492,"body":"def encode(strng, n)\n    key = n.to_s\n    lg = key.size\n    res = [] of Int32\n    (0 ... strng.size).each {|i| res << (strng.char_at(i)).ord - 96 + (key.char_at(i % lg)).to_i}\n    res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49373,"user_id":421,"body":"def encode(m,k)\n  key = k.to_s\n  m.chars.map_with_index{|x, i| x.ord - 96  + key[i % key.size].to_i}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49374,"user_id":1624,"body":"# would be nicer if codewars had newer version of crystal\ndef encode(m,k)\n  mc = m.chars.map(&.ord)\n  kc = k.to_s.chars.map(&.to_i)\n  mc.size.times.map{|i| mc[i]+kc[i % kc.size] - 96}.to_a\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49375,"user_id":null,"body":"def encode(m,k)\n  alphabet = ('a'..'z').to_a\n  result = [] of Int32\n  m.each_char_with_index do |c,i|\n    result << ((alphabet.index(c) || 0) + 1) + k.to_s[i % k.to_s.size].to_i\n  end\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49376,"user_id":null,"body":"def encode(m,k)\n  key = k.to_s.split(\"\").map{|n| n.to_i}\n  return m.chars.map_with_index{|c, i| (c.to_i(36)-9) + key[i%key.size]}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49377,"user_id":1768,"body":"def encode(x, y)\n  x.chars.map_with_index{|i,j|i.ord-96+y.to_s[j%y.to_s.size].to_i}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"592fd8f752ee71ac7e00008a":[{"id":49378,"user_id":759,"body":"def covfefe(tweet)\n  (a = tweet.gsub(\"coverage\", \"covfefe\")).size == tweet.size ? \"#{tweet} covfefe\" : a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49379,"user_id":168,"body":"def covfefe(tweet)\n  r = tweet.gsub(\"coverage\", \"covfefe\")\n  r == tweet ? tweet + \" covfefe\" : r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49380,"user_id":1624,"body":"def covfefe(tweet)\n  if tweet =~ \/coverage\/\n    tweet.gsub(\"coverage\", \"covfefe\")\n  else\n    \"#{tweet} covfefe\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49381,"user_id":1768,"body":"def covfefe(x)\n  (x.includes?(\"coverage\")? x.gsub(\"coverage\",\"covfefe\") : x + \" covfefe\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49382,"user_id":2563,"body":"def covfefe(tweet)\n  if tweet.includes?(\"coverage\") \n    tweet.gsub(\"coverage\", \"covfefe\")\n  else\n    tweet + \" covfefe\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49383,"user_id":null,"body":"def covfefe(tweet)\n  tweet.includes?(\"coverage\") ? \n    tweet.gsub(\"coverage\", \"covfefe\") :\n    [tweet, \"covfefe\"].join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49384,"user_id":490,"body":"def covfefe(tweet)\n  a = tweet.gsub \"coverage\", \"covfefe\"\n  a == tweet ? \"#{tweet} covfefe\" : a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49385,"user_id":1474,"body":"def covfefe(tweet)\n\ttweet.downcase.includes?(\"coverage\") ? tweet.gsub(\"coverage\", \"covfefe\") : tweet + \" covfefe\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49386,"user_id":null,"body":"def covfefe(tweet)\n  tweet.includes?(\"coverage\") ? tweet.gsub(\"coverage\", \"covfefe\") : tweet + \" covfefe\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49387,"user_id":null,"body":"def covfefe(tweet)\n  tweet2 = tweet.gsub(\"coverage\", \"covfefe\")\n  if tweet.size == tweet2.size\n    tweet2 += \" covfefe\"\n  end\n  tweet2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59325dc15dbb44b2440000af":[{"id":49388,"user_id":null,"body":"def is_alt(s)\n  (s.match \/[aeiou]{2}|[^aeiou]{2}\/) == nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49389,"user_id":50,"body":"def is_alt(s)\n  a=s.chars\n  v=\"aeiou\"\n  a[0..-2].zip(a[1..-1]).all?{|a,b| v.includes?(a) != v.includes?(b)}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49390,"user_id":421,"body":"def is_alt(s)\n  !(\/[aeiou]{2}|[^aeiou]{2}\/i === s)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49391,"user_id":null,"body":"def is_alt(s)\n  (1...s.size).each do |i|\n    if (\"aeiou\".includes? s[i]) == (\"aeiou\".includes? s[i-1])\n      return false\n    end\n  end\n  true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49392,"user_id":null,"body":"def is_alt(s)\n  ps = s.split(\/[aeiou]\/).map(&.size)\n  ps.all? { | c | c < 2 } && ps[1...-1].all? { | c | c > 0 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49393,"user_id":null,"body":"def is_alt(s)\n  true unless s.each_char.each_cons(2) do |ab|\n    return false if ab.none?{ |c| ['a','e','i','o','u'].includes?(c) }\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49394,"user_id":null,"body":"def is_alt(s)\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  ch = s.chars\n  odd_ch = [] of Char\n  even_ch = [] of Char\n  ch.each_with_index do |c,i|\n    case i\n    when .even?\n      even_ch << c\n    when .odd?\n      odd_ch << c\n    end\n  end\n  (odd_ch.all? {|c| vowels.includes? c} & even_ch.none? {|c| vowels.includes? c}) ^ (odd_ch.none? {|c| vowels.includes? c} & even_ch.all? {|c| vowels.includes? c})\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49395,"user_id":null,"body":"def is_alt(s)\n  !!(s =~ \/\\A[^aeiou]?([aeiou][^aeiou])+[aeiou]?\\z\/)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49396,"user_id":1566,"body":"def is_alt(s)\n  !(\/[aeiou]{2}|[^aeiou]{2}\/ === s)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49397,"user_id":2323,"body":"def is_alt(s)\n  (s =~ \/[aeiou]{2}|[^aeiou]{2}\/).nil?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5932c94f6aa4d1d786000028":[{"id":49398,"user_id":421,"body":"def perfect_roots(n)\n  (n ** 0.125) % 1 == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49399,"user_id":null,"body":"def perfect_roots(n, k=1)\n  (s = n**0.5)%1==0 && (k==3 || perfect_roots s, k+1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49400,"user_id":null,"body":"def perfect_roots(n, k=1)\n  (s = Math.sqrt n)%1==0 && (k==3 || perfect_roots s, k+1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5933a1f8552bc2750a0000ed":[{"id":49401,"user_id":1072,"body":"def nth_even(n) n*2-2 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49402,"user_id":1703,"body":"def nth_even(n)\n  return n * 2 - 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49403,"user_id":null,"body":"def nth_even(n : Int32)\n  ( n - 1 ) * 2;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49404,"user_id":null,"body":"def nth_even(n)\n  return (n-1)*2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49405,"user_id":1701,"body":"def nth_even(n)\n  2 * n - 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49406,"user_id":2609,"body":"def nth_even(n)\n  return 2 * (n - 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49407,"user_id":492,"body":"def nth_even(n)\n  2 * (n - 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49408,"user_id":490,"body":"def nth_even(n)\n  (n - 1) * 2\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49409,"user_id":null,"body":"def nth_even(n)\n  i = -2\n  (1..n).each do |x|\n    i += 2\n  end\n  i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59342039eb450e39970000a6":[{"id":49410,"user_id":1624,"body":"def odd_count(n : Int)\n  n\/2\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49411,"user_id":50,"body":"def odd_count(n : Int)\n  n>>1\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49412,"user_id":null,"body":"def odd_count(n : Int)\n  (n % 2 == 0) ? n\/2 : (n-1)\/2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49413,"user_id":null,"body":"def odd_count(n : Int)\n  return n \/\/ 2;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49414,"user_id":null,"body":"def odd_count(n : Int)\n  \n  i = 1\n  counter = 0\n  while i < n\n    counter += 1\n    i += 2\n  end\n\n  \n  # loop dari 1 ==> n\n  # loop nya step 2\n  # hitung total count\n  # your code here\n\n  counter\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49415,"user_id":null,"body":"def odd_count(n : Int)\n  n \/\/ 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49416,"user_id":null,"body":"def odd_count(n : Int)\n  if (n % 2 == 0)\n    return n\/2\n  else\n    return (n-1)\/2\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49417,"user_id":null,"body":"def odd_count(n : Int)\n  x = 0\n  (1...n).each do |i|\n    if i.odd? == true\n      x = x + 1\n    end\n  end\n  return x\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49418,"user_id":null,"body":"def odd_count(n : Int)\n  (n\/2).to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49419,"user_id":null,"body":"def odd_count(n : Int)\n  return n \/ 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5934d648d95386bc8200010b":[{"id":49420,"user_id":1072,"body":"def ka_co_ka_de_ka_me(s) return s.size>0 ? s.gsub(\/[^aeoiu]*[aeoiu]*\/i){|m| m.size>0 ? \"ka\"+m : m} : \"ka\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5936256f2e2a27edc9000047":[{"id":49421,"user_id":1072,"body":"def sort_string(s) r,i=s.split(\"\").each_with_index.reduce([] of Tuple(String, Int32)){|a,e| e[0]=~\/[a-z]\/i ? a+[e] : a}.sort{|a,b| a[0].downcase.codepoint_at(0)-b[0].downcase.codepoint_at(0) != 0 ? a[0].downcase.codepoint_at(0)-b[0].downcase.codepoint_at(0) : a[1]-b[1]}.map{|e| e[0]},-1; s.gsub(\/[a-z]\/i){i+=1;r[i]} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59377c53e66267c8f6000027":[{"id":49422,"user_id":null,"body":"def alphabet_war(fight)\n\n  letters_l = {\"w\" => 4, \"p\" => 3, \"b\" => 2, \"s\" => 1}\n\n  letters_b = {\"m\" => 4, \"q\" => 3, \"d\" => 2, \"z\" => 1}\n\n  left = 0\n\n  right = 0\n\n  fight.split(\"\").each do |el|\n\n    if letters_l.has_key?(el)\n\n      left += letters_l.fetch(el, 0)\n\n    elsif letters_b.has_key?(el)\n\n      right += letters_b.fetch(el, 0)\n\n    end\n\n  end\n\n  if left > right\n\n    \"Left side wins!\"\n\n  elsif right > left\n\n    \"Right side wins!\"\n\n  else \n\n    \"Let's fight again!\"\n\n  end\n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49423,"user_id":null,"body":"def alphabet_war(fight)\n  case fight.chars.sum do |c|\n    case c\n    when 'w' then  4 when 'p' then  3 when 'b' then  2 when 's' then  1\n    when 'm' then -4 when 'q' then -3 when 'd' then -2 when 'z' then -1\n    else 0\n    end\n  end\n  when .< 0 then \"Right side wins!\"\n  when .> 0 then \"Left side wins!\"\n  else \"Let's fight again!\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49424,"user_id":null,"body":"def alphabet_war(fight)\n  total = fight.chars.map{|c| {'w' => -4, 'p' => -3, 'b' => -2, 's' => -1, 'z' => 1, 'd' => 2, 'q' => 3, 'm' => 4}.fetch(c, 0)}.sum\n  total == 0 ? \"Let's fight again!\" : (total > 0 ? \"Right\" : \"Left\") + \" side wins!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49425,"user_id":null,"body":"# Clase Bando\nclass Bando\n  def initialize (letras : Hash(Char,Int32))\n    @letras = letras\n  end\n  \n  def obtener_puntos(letra)\n    @letras.fetch letra, 0\n  end\nend\n\n# Clase Puntuacion\nclass Puntuacion\n  \n  def initialize\n    @puntos = 0\n  end\n  \n  def puntuar(puntos)\n    @puntos += puntos\n  end\n  \n  def puntos\n    @puntos\n  end\nend\n\n# Clase Arbitro\nclass Arbitro\n  @bando_derecha : Bando\n  @bando_izquierda : Bando\n  @puntos_derecha : Puntuacion\n  @puntos_izquierda : Puntuacion\n  @codigo : String\n  \n  def initialize(bando_derecha, bando_izquierda, puntos_derecha, puntos_izquierda, codigo)\n    @bando_derecha = bando_derecha\n    @bando_izquierda = bando_izquierda\n    @puntos_derecha = puntos_derecha\n    @puntos_izquierda = puntos_izquierda\n    @codigo = codigo\n  end\n  \n  def fight\n    @codigo.chars.each do |char|\n      @puntos_derecha.puntuar @bando_derecha.obtener_puntos char\n      @puntos_izquierda.puntuar @bando_izquierda.obtener_puntos char\n    end\n    @codigo = \"\"\n  end\n  \n  def resultado\n    if @puntos_derecha.puntos > @puntos_izquierda.puntos\n      return \"Right side wins!\"\n    elsif @puntos_derecha.puntos < @puntos_izquierda.puntos\n      return \"Left side wins!\"\n    else\n      return \"Let's fight again!\"\n    end\n  end\nend\n\n# funcion principal\n# He intentado utilizar OOP para este problema\ndef alphabet_war(fight)\n  bando_derecha = Bando.new({'m' => 4, 'q' => 3, 'd' => 2, 'z' => 1})\n  bando_izquierda = Bando.new({'w' => 4, 'p' => 3, 'b' => 2, 's' => 1})\n  puntos_derecha = Puntuacion.new\n  puntos_izquierda = Puntuacion.new\n  arbitro = Arbitro.new bando_derecha, bando_izquierda, puntos_derecha, puntos_izquierda, fight\n  arbitro.fight\n  arbitro.resultado\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49426,"user_id":421,"body":"def alphabet_war(fight)\n  left = {'w' => 4, 'p' => 3, 'b' => 2, 's' => 1}\n  right = {'m' => 4, 'q' => 3, 'd' => 2, 'z' => 1}\n  l_score = fight.chars.reduce(0){|s, x| s += left.fetch(x, 0)}\n  r_score = fight.chars.reduce(0){|s, x| s += right.fetch(x, 0)}\n  l_score > r_score ? \"Left side wins!\" : r_score > l_score ? \"Right side wins!\" :  \"Let's fight again!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49427,"user_id":1624,"body":"def alphabet_war(fight)\n  ht = {\n    'w' => 4,\n    'p' => 3,\n    'b' => 2,\n    's' => 1,\n    'm' => -4,\n    'q' => -3,\n    'd' => -2,\n    'z' => -1,\n  }\n  e = fight.chars.map{|u| ht.fetch(u, 0)}.sum\n  if e > 0\n    \"Left side wins!\"\n  elsif e < 0\n    \"Right side wins!\"\n  else\n    \"Let's fight again!\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49428,"user_id":null,"body":"Power = {\n  'w' => 4,\n  'p' => 3,\n  'b' => 2,\n  's' => 1,\n  'm' => -4,\n  'q' => -3,\n  'd' => -2,\n  'z' => -1,\n}\n\ndef alphabet_war(fight)\n  s = fight.chars.reduce(0) { | a, e | a + Power.fetch(e, 0) }\n  return \"Let's fight again!\" if s == 0\n  \"#{s > 0 ? \"Lef\" : \"Righ\"}t side wins!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49429,"user_id":null,"body":"def alphabet_war(fight)\n  left_scores = {'w' => 4, 'p' => 3, 'b'=>2, 's'=>1}\n  right_scores = {'m' => 4, 'q' => 3, 'd'=>2, 'z'=>1}\n  left = fight.chars.map{|x| left_scores.fetch(x,0)}.sum\n  right = fight.chars.map{|x| right_scores.fetch(x,0)}.sum\n  if left == right\n    \"Let's fight again!\"\n  elsif left > right\n    \"Left side wins!\"\n  else\n    \"Right side wins!\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49430,"user_id":null,"body":"def alphabet_war(fight)\n  power = {'w' => 4, 'p' => 3, 'b' => 2, 's' => 1, 'm' => -4, 'q' => -3, 'd' => -2, 'z' => -1}\n  stat = fight.chars.reduce 0 { |a, c| a + (power.has_key?(c) ? power[c] : 0) }\n  stat == 0 ? \"Let's fight again!\" : stat > 0 ? \"Left side wins!\" : \"Right side wins!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49431,"user_id":null,"body":"def alphabet_war(fight)\n  powers = { 'w' => 4, 'p' => 3, 'b' => 2, 's' => 1, 'm' => -4, 'q' => -3, 'd' => -2, 'z' => -1 }\n  score = fight.chars.map { |char| powers[char]? }.compact.sum\n  return  \"Left side wins!\" if score > 0\n  return \"Right side wins!\" if score < 0\n  return \"Let's fight again!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5938f5b606c3033f4700015a":[{"id":49432,"user_id":1072,"body":"def alphabet_war(f) f=f.gsub(\/[^*]?\\*+[^*]?\/,\"\"); res=f.size==0 ? 0 : f.split(\"\").reduce(0){|a,b| a+(\"mqdz sbpw\".index(b)||4)-4}; res==0 ? \"Let's fight again!\" : res>0 ? \"Left side wins!\" : \"Right side wins!\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49433,"user_id":421,"body":"LEFT = {'w' => 4, 'p' => 3, 'b' => 2, 's' => 1}\nRIGHT = {'m' => 4, 'q' => 3, 'd' => 2, 'z' => 1}\n\ndef alphabet_war(fight)\n fight = fight.gsub(\/[^\\*]?\\*[^\\*]?\/, \"\")\n l_score = fight.chars.sum{|x| LEFT.fetch(x, 0)}\n r_score = fight.chars.sum{|x| RIGHT.fetch(x, 0)}\n l_score > r_score ? \"Left side wins!\": r_score > l_score ?  \"Right side wins!\" :  \"Let's fight again!\" \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49434,"user_id":null,"body":"class String\n  def indices(char : Char)\n    ary = [] of Int32\n    self.each_char_with_index do |ch, idx|\n      if ch == char\n        ary << idx\n      end\n    end\n    ary\n  end\nend\n\n# Clase Bando\nclass Bando\n  def initialize (letras : Hash(Char,Int32))\n    @letras = letras\n  end\n  \n  def obtener_puntos(letra)\n    @letras.fetch(letra, 0)\n  end\nend\n\n# Clase Puntuacion\nclass Puntuacion\n  \n  def initialize()\n    @puntos = 0\n  end\n  \n  def puntuar(puntos)\n    @puntos += puntos\n  end\n  \n  def puntos()\n    @puntos\n  end\nend\n\n# Clase Arbitro\nclass Arbitro\n  @bando_derecha : Bando\n  @bando_izquierda : Bando\n  @puntos_derecha : Puntuacion\n  @puntos_izquierda : Puntuacion\n  @codigo : String\n  \n  def initialize(bando_derecha, bando_izquierda, puntos_derecha, puntos_izquierda, codigo)\n    @bando_derecha = bando_derecha\n    @bando_izquierda = bando_izquierda\n    @puntos_derecha = puntos_derecha\n    @puntos_izquierda = puntos_izquierda\n    @codigo = codigo\n  end\n  \n  def explotar_bombas(codigo)\n    ary = codigo.indices('*')\n    nuevo_codigo = codigo.chars\n    ary.each do |idx|\n      nuevo_codigo[idx - 1] = '_' unless idx == 0\n      nuevo_codigo[idx] = '_'\n      nuevo_codigo[idx + 1] = '_' unless idx == (codigo.size - 1)\n    end\n    nuevo_codigo.to_s\n  end\n  \n  def fight()\n    @codigo = self.explotar_bombas(@codigo)\n    @codigo.chars.each do |char|\n      @puntos_derecha.puntuar(@bando_derecha.obtener_puntos(char))\n      @puntos_izquierda.puntuar(@bando_izquierda.obtener_puntos(char))\n    end\n    @codigo = \"\"\n  end\n  \n  def resultado\n    if @puntos_derecha.puntos > @puntos_izquierda.puntos\n      return \"Right side wins!\"\n    elsif @puntos_derecha.puntos < @puntos_izquierda.puntos\n      return \"Left side wins!\"\n    else\n      return \"Let's fight again!\"\n    end\n  end\nend\n\n# funcion principal\n# He intentado utilizar OOP para este problema\ndef alphabet_war(fight)\n  bando_derecha = Bando.new({'m' => 4, 'q' => 3, 'd' => 2, 'z' => 1})\n  bando_izquierda = Bando.new({'w' => 4, 'p' => 3, 'b' => 2, 's' => 1})\n  puntos_derecha = Puntuacion.new\n  puntos_izquierda = Puntuacion.new\n  arbitro = Arbitro.new(bando_derecha, bando_izquierda, puntos_derecha, puntos_izquierda, fight)\n  arbitro.fight\n  arbitro.resultado\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49435,"user_id":null,"body":"def alphabet_war(fight)\n  l = ['_', 's', 'b', 'p', 'w']\n  r = ['_', 'z', 'd', 'q', 'm']\n\n  while fight.includes? \"**\"\n  \tfight = fight.gsub(\"**\", \"*_*\")\n\tend\n  \n  while fight.includes? \"*\"\n    b = fight.index \"*\"\n  \tfight = fight.chars.map_with_index{|c, i| (b - i).abs <= 1 ? \"_\" : c }.join if b\n  end\n\t\n\tls = 0\n\trs = 0\n\tfight.chars.each{|c|\n    ls += l.index(c).not_nil! if l.includes? c\n    rs += r.index(c).not_nil! if r.includes? c\n\t}\n\treturn \"Let's fight again!\" if fight.empty? || ls == rs\n\treturn \"Right side wins!\" if rs > ls\n\treturn \"Left side wins!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49436,"user_id":null,"body":"def alphabet_war(fight)\n  power = {'w' => 4, 'p' => 3, 'b' => 2, 's' => 1, 'm' => -4, 'q' => -3, 'd' => -2, 'z' => -1}\n  current = 0\n  fight.chars.each_with_index do |c, i|\n    next if c == '*' || fight[i - 1]? == '*' || fight[i + 1]? == '*'\n    current += power[c]? || 0\n  end\n  return \"Let's fight again!\" if current == 0\n  current > 0 ? \"Left side wins!\" : \"Right side wins!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"593e84f16e836ca9a9000054":[{"id":49437,"user_id":50,"body":"def one_two_three()\n  t=[one_two(),one_two(),one_two()]\n  if t==[1,2,1] || t==[1,1,2]\n    return 1\n  elsif t==[2,1,1] || t==[1,2,2]\n    return 2\n  elsif t==[2,2,1] || t==[2,1,2]\n    return 3\n  else\n    return one_two_three()\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49438,"user_id":null,"body":"def one_two_three()\n  x = one_two() \n  y = one_two()\n  if (x == 1 && y == 2)\n    return one_two_three()\n  else\n    return (x + y) - 1\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49439,"user_id":null,"body":"def one_two_three()\n  while true\n    c = one_two * 2 + one_two - 3\n    return c unless c == 0\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49440,"user_id":527,"body":"def one_two_three()\n  x = one_two & 2 | one_two & 1\n  x < 3 ? x + 1 : one_two_three\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49441,"user_id":null,"body":"def one_two_three\n  n = 1 * (one_two() - 1) + 2 * (one_two() - 1)\n  return one_two_three() if n == 0\n  n\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49442,"user_id":null,"body":"def one_two_three()\n  i = ((one_two - 1).to_s + (one_two - 1).to_s).to_i(2)\n  i == 0 ? one_two_three : i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49443,"user_id":null,"body":"def one_two_three()\n  a = one_two\n  b = one_two\n  (a==1 && b==2) ? one_two_three : a+b-1  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49444,"user_id":null,"body":"def one_two_three()\n  res = 2 * one_two() - one_two()\n  return res == 0 ? one_two_three() : res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49445,"user_id":1072,"body":"def one_two_three() r=(one_two()*2+one_two()-3); r>0 ? r : one_two_three() end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"594093784aafb857f0000122":[{"id":49446,"user_id":421,"body":"def diff(arr1, arr2)\n  (arr1 + arr2 - (arr1 & arr2)).uniq.sort\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49447,"user_id":1624,"body":"def diff(a, b)\n  ((a - b) + (b - a)).sort.uniq\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49448,"user_id":527,"body":"def diff(a, b)\n  (a.to_set ^ b).to_a.sort!\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49449,"user_id":1072,"body":"def diff(a, b) (b.select{|e| !a.index(e)}+a.select{|e| !b.index(e)}).uniq.sort end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5940ec284aafb87ef3000028":[{"id":49450,"user_id":421,"body":"def decode(number)\n  number.to_s.split(\"98\").reject(&.empty?).map_with_index{|x, i| i.odd? ? x.to_i64(2) : x.gsub(\/...\/){|y| (y.to_i - 4).chr}}.join(\", \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49451,"user_id":null,"body":"def decode(number)\n  res, mode = \"\", :text\n  while number != \"\"\n    if number =~ \/\\A98\/\n      mode = mode == :text ? :num : :text\n      number = number[2..-1]\n      res += \", \" if number != \"\"\n    elsif mode == :text\n      res += (number[0,3].to_i - 101 + 'a'.ord).chr.to_s\n      number = number[3..-1]\n    elsif pos = number =~ \/98\/\n      res += number[0, pos].to_u64(2).to_s\n      number = number[pos..-1]\n    else\n      res += number.to_u64(2).to_s\n      break\n    end\n  end\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49452,"user_id":null,"body":"ALPH = \"_abcdefghijklmnopqrstuvwxyz\".chars\n\ndef decode(number)\n  number.split(\"98\").reject(&.empty?).map{|str|\n    chars = str.chars\n    is_binary = chars.uniq.size <= 2\n    is_binary ? str.to_u64(2).to_s(10)\n      : chars.in_groups_of(3, 0).map{|n| ALPH[n.join.to_i - 100]}.join\n  }.join(\", \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49453,"user_id":null,"body":"def decode(number)\n  str_ary = number.gsub(\"98\", \",\").split(',').reject(&.empty?)\n  str_ary.map_with_index { |s, i| i.even? ? decode_text(s) : decode_number(s) }.join(\", \")\nend\n\ndef decode_text(str)\n  indexes = str.scan(\/.{1,3}\/).map { |m| m[0].to_i - 101 }\n  indexes.map { |n| \"abcdefghijklmnopqrstuvwxyz\".at(n) }.join\nend\n\ndef decode_number(str)\n  (\"0b\" + str).to_i64(prefix: true).to_s\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49454,"user_id":1072,"body":"def decode(n) i=0; n.to_s.gsub(\/98$\/,\"\").split(\"98\").map{|p| i+=1; i%2==0 ? p.to_i64(2) : p.gsub(\/...\/){|m| (m.to_i-4).chr}}.join(\", \") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59414b46d040b7b8f7000021":[{"id":49455,"user_id":421,"body":"def tacofy(word)\n  food = {\"t\"=> \"tomato\", \"l\"=> \"lettuce\", \"c\"=> \"cheese\", \"g\"=> \"guacamole\", \"s\"=> \"salsa\"}\n  word = word.downcase.gsub(\/[^acegilostu]\/, \"\")\n  if word == \"\" \n    return [\"shell\", \"shell\"]\n  end\n  [\"shell\"] + word.split(\"\").map{|x| \/[aeiou]\/ === x ? \"beef\" : food.fetch(x, \"\")} + [\"shell\"]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49456,"user_id":1072,"body":"def tacofy(w) [\"shell\"]+w.downcase.split(\"\").map{|e| \/[aeiou]\/=~e ? \"beef\" : \/[tlgcs]\/=~e ? {\"t\"=>\"tomato\",\"l\"=>\"lettuce\",\"c\"=>\"cheese\",\"g\"=>\"guacamole\",\"s\"=>\"salsa\"}[e] : \"\"}.select{|e| e.size>0}+[\"shell\"] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49457,"user_id":1828,"body":"def tacofy(word)\n  h = {\"t\" => \"tomato\",\"l\" => \"lettuce\",\"c\" => \"cheese\",\"g\" => \"guacamole\",\"s\" => \"salsa\"}\n  word = word.downcase\n  a = word.chars.map{|j| \"tlcgs\".includes?(j) ? h[\"#{j}\"] : \"aieou\".includes?(j) ? \"beef\" : nil}.compact\n  [\"shell\"]+a+[\"shell\"]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49458,"user_id":1624,"body":"def tacofy(c : Char)\n  case c\n  when 't'\n    \"tomato\"\n  when 'l'\n    \"lettuce\"\n  when 'c'\n    \"cheese\"\n  when 'g'\n    \"guacamole\"\n  when 's'\n    \"salsa\"\n  when 'a', 'e', 'o', 'i', 'u'\n    \"beef\"\n  else\n    nil\n  end\nend\n  \ndef tacofy(word : String)\n  [\"shell\"] + word.downcase.chars.map{|c| tacofy(c) }.compact + [\"shell\"]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49459,"user_id":null,"body":"def ing(c)\n  case c\n    when 'a', 'e', 'i', 'o', 'u'; \"beef\"\n    when 'g'; \"guacamole\"\n    when 'l'; \"lettuce\"\n    when 't'; \"tomato\"\n    when 'c'; \"cheese\"\n    when 's'; \"salsa\"\n  end\nend\ndef tacofy(word)\n  word = word.downcase.gsub \/[^aeiougltcs]\/, \"\"\n  [\"shell\"] + word.chars.map{|c| ing c} + [\"shell\"]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49460,"user_id":null,"body":"VOWELS = \"aeiou\"\nINGREDIENTS = {\n  't' => \"tomato\",\n  'l' => \"lettuce\",\n  'c' => \"cheese\",\n  'g' => \"guacamole\",\n  's' => \"salsa\"\n}\n\ndef tacofy(word)\n  res = [\"shell\"] of String\n  word.downcase.each_char do |letter|\n    res.push(INGREDIENTS[letter]) if INGREDIENTS.has_key?(letter)\n    res.push(\"beef\") if VOWELS.includes?(letter)\n  end\n  res.push(\"shell\")\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49461,"user_id":1246,"body":"def tacofy(word)\n  a=[\"shell\"]\n  eq={'T'=>\"tomato\",'L'=>\"lettuce\",'C'=>\"cheese\",'G'=>\"guacamole\",'S'=>\"salsa\"}\n  word.upcase.chars.each{|c|\n    a << eq[c] if eq.has_key?(c)\n    a << \"beef\" if \"AEIOU\".includes?(c)\n  }\n  a << \"shell\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5944f3f8d7b6a5748d000233":[{"id":49462,"user_id":421,"body":"def coordinates(p1,p2,precision)\n  precision = precision.nil? ? 0 : precision\n  Math.hypot(p2[1] - p1[1], p2[0] - p1[0]).round(precision)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49463,"user_id":1624,"body":"def coordinates(p1, p2, prec=0)\n  dx = p1[0] - p2[0]\n  dy = p1[1] - p2[1]\n  Math.sqrt(dx*dx + dy*dy).round(prec || 0)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49464,"user_id":null,"body":"def coordinates(p1, p2, pr)\n  Math.hypot(p2[0]-p1[0], p2[1]-p1[1]).round(pr||0)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49465,"user_id":1072,"body":"def coordinates(p1,p2,p) (((p1[0]-p2[0])**2+(p1[1]-p2[1])**2)**0.5).round(p||0) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49466,"user_id":1072,"body":"def coordinates(p1,p2) (((p1[0]-p2[0])**2+(p1[1]-p2[1])**2)**0.5).round end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5949481f86420f59480000e7":[{"id":49467,"user_id":null,"body":"def odd_or_even(array)\n  if array.sum.odd?; \"odd\" else \"even\" end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49468,"user_id":1828,"body":"def odd_or_even(array)\n  array.sum.even? ? \"even\" : \"odd\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49469,"user_id":null,"body":"def odd_or_even(array)\n  array.sum.odd? ? \"odd\" : \"even\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49470,"user_id":1228,"body":"def odd_or_even(array)\n  [\"even\", \"odd\"][array.sum & 1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49471,"user_id":null,"body":"def odd_or_even(arr)\n  if arr.empty?\n    arr = [0]\n  end\n  arr.sum % 2 == 0 ? \"even\" : \"odd\"\nend\n\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49472,"user_id":null,"body":"def odd_or_even(array)\n  sum_ar = 0\n  array.each do |elem|\n    sum_ar += elem\n  end\n  sum_ar\n  \n  if sum_ar % 2 == 0\n    res = \"even\"\n  else\n    res = \"odd\"\n  end\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49473,"user_id":null,"body":"def odd_or_even(array)\n\n  if array.empty?\n\n    \"even\"\n\n  else\n\n  array.reduce{|acc, el| acc + el}.even? ? \"even\" : \"odd\"\n\n  end\n\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49474,"user_id":null,"body":"def odd_or_even(array)\n  sum = 0\n  array.each do |number|\n    sum += number\n  end\n  if sum % 2 == 0\n    return \"even\"\n  else\n    return \"odd\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49475,"user_id":null,"body":"def odd_or_even(array : Array) : String\n  array.sum.even? ? \"even\" : \"odd\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49476,"user_id":null,"body":"def odd_or_even(array) : String\n  sum : Int32 = 0\n  \n  array.each do | elem |\n    sum += elem\n  end\n  \n  sum % 2 == 0 ? \"even\" : \"odd\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"594979a364becbc1ab00003a":[{"id":49477,"user_id":17,"body":"class LCG\n  def initialize(@seed : Int32)\n  end\n  def random\n    (@seed = (2 * @seed + 3) % 10) \/ 10.0\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49478,"user_id":421,"body":"class LCG\n  @@a = 2\n  @@c = 3\n  @@m = 10\n  \n  def initialize(seed : Int32)\n    @seed = seed\n  end\n  \n  def random\n    @seed = (@@a * @seed + @@c) % @@m\n    @seed.fdiv(@@m)\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49479,"user_id":527,"body":"class LCG\n  @@a = 2\n  @@c = 3\n  @@m = 10\n  \n  def initialize(seed : Int32)\n    @seed = seed\n  end\n  \n  def random : Float64\n    (@seed = (@@a * @seed + @@c) % @@m).fdiv(@@m)\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49480,"user_id":1624,"body":"class LCG\n  @@a = 2\n  @@c = 3\n  @@m = 10\n  \n  def initialize(seed : Int32)\n    @seed = seed\n  end\n  \n  def random\n    @seed = (@@a * @seed + @@c) % @@m\n    @seed.to_f \/ @@m\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49481,"user_id":null,"body":"class LCG\n  @@a = 2\n  @@c = 3\n  @@m = 10\n  @seed: Int32\n  \n  def initialize(seed)\n    @seed = seed\n  end\n  \n  def random\n    @seed = (@@a*@seed+@@c) % @@m\n    @seed\/10.0\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49482,"user_id":1828,"body":"class LCG\n  @@a = 2\n  @@c = 3\n  @@m = 10\n  @@r = 0\n  \n  def initialize(seed : Int32)\n    @seed = seed\n  end\n  \n  def random\n    @@r = (@@a*@seed+@@c)%@@m\n    @seed = @@r\n    return @@r.fdiv(10)\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49483,"user_id":2609,"body":"class LCG\n  @@a = 2\n  @@c = 3\n  @@m = 10\n  \n  def initialize(@seed : Int32) end\n  \n  def random\n    val = (@@a * @seed + @@c) % @@m\n    @seed = val\n    if val >= 1\n      val = (val \/ 10.0).round(1)\n    end\n    return Float64.new(val)\n  end\n  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49484,"user_id":1072,"body":"class LCG\n  @@a = 2\n  @@c = 3\n  @@m = 10\n  \n  def initialize(seed : Int32)\n    @seed = seed\n  end\n  \n  def random\n    @seed=(@@a*@seed+@@c) % @@m\n    @seed\/10.0\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"594a1822a2db9e93bd0001d4":[{"id":49485,"user_id":421,"body":"def scratch(lottery)\n  lottery.select{|x| x.split[0..-2].uniq.size == 1}.sum{|n| n.split.last.to_i}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49486,"user_id":527,"body":"def scratch(lottery)\n  lottery.sum{ |s| a, b, c, sn = s.split; a == b && b == c ? sn.to_i : 0 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49487,"user_id":1072,"body":"def scratch(l)\n  l.reduce(0){|a,b| a+(\/(\\w+ )\\1\\1\\d+\/=~b ? b.gsub(\/\\D\/,\"\").to_i : 0)}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"594cc999d3cc8c883a00003b":[{"id":49488,"user_id":527,"body":"def how_many_apples(n)\n  n == 2 ? 7 : n ** n - n + 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49489,"user_id":1072,"body":"def how_many_apples(n) n===2 ? 7 : n**n-n+1 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"594cd799c08247a55a000004":[{"id":49490,"user_id":421,"body":"def is_john_lying(a,b,s)\n   a.abs + b.abs <= s && (a.abs + b.abs - s) % 2 == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49491,"user_id":null,"body":"def is_john_lying(a, b, s)\n  (ds = s-a.abs-b.abs)>=0 && ds%2==0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49492,"user_id":null,"body":"def is_john_lying(a, b, s)\n  s>=(sd = a.abs+b.abs) && (s-sd)%2==0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49493,"user_id":50,"body":"def is_john_lying(a,b,s)\n  t=a.abs+b.abs-s\n  t<=0 && t%2==0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49494,"user_id":null,"body":"def is_john_lying(a,b,s)\n  t = s - a.abs - b.abs\n  t >= 0 && t % 2 == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49495,"user_id":1828,"body":"def is_john_lying(a, b,s)\n  c = a.abs + b.abs - s\n  c <= 0 && c%2 == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49496,"user_id":1072,"body":"def is_john_lying(a,b,s) r=s-a.abs-b.abs; r>=0 && r%2==0 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5950a4bfc6bf4f433f000031":[{"id":49497,"user_id":1828,"body":"def shortest_time(n,m,speeds)\n  a,b,c,d = speeds\n  e = (n-m).abs*a + b + c + (n-1)*a + b\n  return [(n-1)*d, e].min\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49498,"user_id":421,"body":"def shortest_time(n,m,speeds)\n  a, b, c, d = speeds\n  n == 1 ? 0 : [(m - n).abs * a + b + c + (n - 1) * a + b, d * (n - 1)].min\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49499,"user_id":null,"body":"def shortest_time(n, m, speeds)\n  return 0 if n==1\n  e, o, c, w = speeds\n  [((n-m).abs+n-1)*e+2*o+c, (n-1)*w].min\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49500,"user_id":50,"body":"def shortest_time(n,m,s)\n  [(n-1+(n-m).abs)*s[0]+2*s[1]+s[2],(n-1)*s[3]].min\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49501,"user_id":1072,"body":"def shortest_time(n,m,s) [(n-1)*s[3],(n-m).abs*s[0]+2*s[1]+s[2]+(n-1)*s[0]].min end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5951b409aea9beff3f0000c6":[{"id":49502,"user_id":421,"body":"def final_attack_value(x,monster_list)\n  monster_list.each do |elem|\n    if elem <= x\n      x += elem\n    else\n      x += x.gcd(elem)\n    end\n  end\n  x\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49503,"user_id":null,"body":"def final_attack_value(x, monster_list)\n  monster_list.reduce(x){|x, d| x >= d ? x + d : x + x.gcd d}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49504,"user_id":null,"body":"def final_attack_value(x, monster_list)\n  monster_list.each do |monster_defense|\n    if x >= monster_defense\n      x += monster_defense\n    else\n      x += x.gcd monster_defense\n    end\n  end\n  x\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49505,"user_id":1624,"body":"def final_attack_value(x, monster_list)\n  monster_list.each do |m|\n    if x >= m\n      x += m\n    else\n      x += m.gcd(x)\n    end\n  end\n  x\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49506,"user_id":null,"body":"def final_attack_value(x, monster_list)\n  monster_list.reduce(x){|ac, v| ac<v ? ac+v.gcd(ac) : ac+v}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49507,"user_id":2563,"body":"def final_attack_value(x,monster_list)\n  return x if monster_list.size == 0    # trivial case\n  v = monster_list[0]\n  x = x + (x >= v ? v : gcd(x, v) )\n  final_attack_value(x, monster_list[1..-1])  # recursive call\nend\n\ndef gcd(a, b)\n  b == 0 ? a : gcd(b, a %b)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49508,"user_id":490,"body":"def gcd(a, b)\n  b == 0 ? a : gcd b, a % b\nend\n\ndef final_attack_value(x, ml)\n  ml.each do |n|\n    x += x > n ? n : gcd x, n\n  end\n  x\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49509,"user_id":1072,"body":"def gcd(a,b) b==0 ? a : gcd(b,a%b) end; def final_attack_value(x,m) m.reduce(x){|a,b| a>=b ? a+b : a+gcd(a,b)} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"595249fc10b69f4f7a000003":[{"id":49510,"user_id":1072,"body":"def to_query_string(d) d.keys.sort.map{|k| e=d[k].to_s.split(\",\").map{|s| s.gsub(\/[\\[\\]\\s]\/,\"\")}; e.map{|e| \"#{k}=#{e}\"}.join(\"&\")}.join(\"&\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59530d2401d6039f8600001f":[{"id":49511,"user_id":53,"body":"def how_many_measurements(n)\n  (Math.log(n) \/ Math.log(3)).ceil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49512,"user_id":987,"body":"def how_many_measurements(n)\n  n==1 ? 0 : n<4 ? 1 : 1 + how_many_measurements((n\/3.0).ceil)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49513,"user_id":1072,"body":"def how_many_measurements(n) (Math.log(n,3)).ceil end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49514,"user_id":1072,"body":"def how_many_measurements(n) (Math.log(n,3)).ceil end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59547688d8e005759e000092":[{"id":49515,"user_id":null,"body":"def distribution_of(golds)\n  out = Array.new(2, 0)\n  (0...golds.size).each do |n|\n    if n % 2 == 0\n      out[0] += golds.first >= golds.last ? golds.shift : golds.pop\n    else\n      out[1] += golds.first >= golds.last ? golds.shift : golds.pop\n    end\n  end\n  out\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49516,"user_id":null,"body":"def distribution_of(golds)\n  b, i, l, r = [0, 0], 0, 0, golds.size-1\n  until l>r\n    if golds[r]>golds[l]\n      b[i]+=golds[r]; r-=1\n    else\n      b[i]+=golds[l]; l+=1\n    end  \n    i = (i+1)%2\n  end  \n  b\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49517,"user_id":1072,"body":"def distribution_of(g,r=[0,0],c=0) g.size==0 ? r : c==1 ? distribution_of(*(g[g.size-1]>g[0] ? {g[0,g.size-1],[r[0],r[1]+g[g.size-1]],0} : {g[1,9999],[r[0],r[1]+g[0]],0})) : distribution_of(*(g[g.size-1]>g[0] ? {g[0,g.size-1],[r[0]+g[g.size-1],r[1]],1} : {g[1,9999],[r[0]+g[0],r[1]],1})) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59557b2a6e595316ab000046":[{"id":49518,"user_id":1624,"body":"def convert_hash_to_array(hash)\n  hash.to_a.sort_by(&.first).map(&.to_a)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49519,"user_id":492,"body":"def convert_hash_to_array(hash)\n  res = [] of Array(String) | Array(String|Int32)\n  sorted_keys = hash.keys.sort\n  sorted_keys.each do |k|\n    res << [k, hash[k]]\n  end\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49520,"user_id":421,"body":"def convert_hash_to_array(hash)\n   hash.keys.sort.map{|x| [x.to_s, hash[x]]}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49521,"user_id":null,"body":"def convert_hash_to_array(hash)\n res = [] of Array(String|Int32) \n hash.each do |key, value|\n     \n      element = [] of String|Int32\n      element << key\n      element << value\n      res << element\n end\n \n res = res.sort { |x, y| x[0].to_s <=> y[0].to_s } \n return res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49522,"user_id":null,"body":"def convert_hash_to_array(hash)\n  hash.to_a.sort{|t1, t2| t1[0]<=>t2[0]}.map{|k, v| [k, v]}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49523,"user_id":null,"body":"def convert_hash_to_array(hash)\n  hash.to_a.sort_by(&.[0]).map(&.to_a)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49524,"user_id":1072,"body":"def convert_hash_to_array(h) h.keys.sort.map{|k|[k.to_s,h[k]]} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59564f3bcc15b5591a00004a":[{"id":49525,"user_id":527,"body":"def filter_even_length_words(words)\n  words.select(&.size.even?)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49526,"user_id":421,"body":"def filter_even_length_words(words)\n    words.select{|x| x.size.even?}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49527,"user_id":null,"body":"def filter_even_length_words(words)\n  words.select{|word| word.size.even?}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49528,"user_id":1624,"body":"def filter_even_length_words(words)\n  words.select{|w| w.size.even?}\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49529,"user_id":null,"body":"def filter_even_length_words(words)\n  words.select{|word| word.size % 2 == 0}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49530,"user_id":1072,"body":"def filter_even_length_words(w) w.select{|e| e.size%2==0} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59590976838112bfea0000fa":[{"id":49531,"user_id":421,"body":"def beggars(values, n)\n  arr = [] of Int32\n  (0...n).each do |i|\n    tot = 0\n    values.each_with_index do |x, j|\n      if j % n == i\n        tot += x\n      end\n    end\n    arr << tot\n  end\n  arr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49532,"user_id":1072,"body":"def beggars(v,n) i=0; n==0 ? [] of Int32 : v.reduce([0]*n){|a,b| a[i%n]+=b; i+=1; a} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49533,"user_id":null,"body":"def beggars(values, n)\n    arr = (1..n).map { 0 }\n    i = -1\n    while (i += 1) < n\n      res = 0\n      j = i - n\n      while (j += n) < values.size\n        res += values[j]\n      end\n      arr[i] = res\n    end\n\n    arr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49534,"user_id":null,"body":"def beggars(values, n)\n  if n.zero?\n    return [] of Int32\n  end\n  b = [0]*n\n  values.each.with_index do |x, i|\n    b[i % n] += x\n  end\n  b\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49535,"user_id":null,"body":"def beggars(values, n)\n  return [] of Int32 if n.zero?\n  r = [0] * n\n  values.size.times {|i| r[i%n] += values[i]}\n  r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49536,"user_id":null,"body":"def beggars(values, n)\n  return [] of Int32 if n == 0\n  out = Array.new(n, 0)\n  while !values.empty?\n    (0...n).each do |i|\n      out[i] += values.shift\n      break if values.empty?\n    end\n  end\n  out\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49537,"user_id":null,"body":"def beggars(values, n)\n  Array.new(n) { |i| values.each.with_index.select(&.last.%(n).==(i)).map(&.first).sum }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49538,"user_id":null,"body":"def beggars(values, n)\n  return [] of Int32 if n == 0\n  arr2 = Array.new(n) { 0 }\n  values.each_slice(n){ |e| e.each_with_index{ |x, i| arr2[i] += x } }\n  arr2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49539,"user_id":null,"body":"def beggars(values, n)\n  results = Array(Int32).new(n, 0)\n  return results if n == 0\n\n  values.each_with_index { |value, idx|\n    results[idx % n] += value\n  }\n  results\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49540,"user_id":2563,"body":"def beggars(values, n)\n  res = [] of Int32\n  (1..n).each { |beggar|\n    res.push(values.map_with_index { |coins, i|\n     (i+1) % n == (beggar%n) ? coins : 0\n    }.sum)\n  }\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5959b637030042889500001d":[{"id":49541,"user_id":53,"body":"def original_number(s)\n  ds = [] of String\n  [ [\"Z\",\"ZERO\",\"0\"],\n    [\"W\",\"TWO\",\"2\"],\n    [\"U\",\"FOUR\",\"4\"],\n    [\"X\",\"SIX\",\"6\"],\n    [\"G\",\"EIGHT\",\"8\"],\n    [\"O\",\"ONE\",\"1\"],\n    [\"T\",\"THREE\",\"3\"],\n    [\"F\",\"FIVE\",\"5\"],\n    [\"S\",\"SEVEN\",\"7\"],\n    [\"N\",\"NINE\",\"9\"] ].each{|t|\n      l,w,d = t\n      while s.includes?(l)\n        ds << d\n        s = remove(s, w)\n      end\n    }\n  ds.sort.join(\"\")\nend\n\ndef remove(s, w)\n  w.chars.each{|c|\n    i = s.index(c)\n    p = \"\"\n    s.chars.each.with_index{|d,j| p += d if j!=i }\n    s = p\n  }\n  s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49542,"user_id":527,"body":"def original_number(s)\n  n0 = s.count('Z')\n  n2 = s.count('W')\n  n4 = s.count('U')\n  n1 = s.count('O') - n0 - n2 - n4\n  n3 = s.count('R') - n0 - n4\n  n5 = s.count('F') - n4\n  n6 = s.count('X')\n  n7 = s.count('V') - n5\n  n8 = s.count('G')\n  n9 = s.count('I') - n5 - n6 - n8\n  \"0\" * n0 + \"1\" * n1 + \"2\" * n2 + \"3\" * n3 + \"4\" * n4 +\n    \"5\" * n5 + \"6\" * n6 + \"7\" * n7 + \"8\" * n8 + \"9\" * n9\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49543,"user_id":null,"body":"def original_number(s)\n  nums = {\n    \"8\" => ['E','I','G','H','T'], \"4\" => ['F','O','U','R'], \"0\" => ['Z','E','R','O'],\n    \"6\" => ['S','I','X'], \"2\" => ['T','W','O'], \"5\" => ['F','I','V','E'],\n    \"1\" => ['O','N','E'], \"9\" => ['N','I','E'], \"3\" => ['T','H','R','E'], \"7\" => ['S','E','V','N']\n  }\n  arr, r = s.chars, \"\"\n  nums.each do |k, v|\n    while (arr & v).size == v.size\n      v.each {|l| arr.delete_at(arr.index(l).not_nil!)}\n      r += k\n    end\n  end\n  r.chars.sort.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49544,"user_id":null,"body":"Keys = [\n   [\"x\", \"6\", \"six\"],\n   [\"z\", \"0\", \"zero\"],\n   [\"g\", \"8\", \"eight\"],\n   [\"w\", \"2\", \"two\"],\n   [\"u\", \"4\", \"four\"],\n\n   [\"h\", \"3\", \"three\"],\n   [\"o\", \"1\", \"one\"],\n   [\"f\", \"5\", \"five\"],\n   [\"s\", \"7\", \"seven\"],\n   [\"i\", \"9\", \"nine\"],\n]\n\nclass String\n  def to_h\n    chars.each_with_object({} of Char => UInt32) do | c, h | \n      h[c] ||= 0_u32\n      h[c] += 1\n    end\n  end\nend\n\ndef original_number(s)\n  hist = s.downcase.to_h\n  digs = [] of Char\n  Keys.each do | (key, digit, name) |\n    n = hist[key[0]]?\n    if n && n > 0\n      digs += [digit[0]] * n\n      name.to_h.each do | char, count |\n        hist[char] -= count * n\n      end\n    end\n  end\n  digs.sort.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49545,"user_id":null,"body":"def original_number(s)\n    num = [\"ZERO\", \"ONE\", \"TWO\", \"THREE\", \"FOUR\", \"FIVE\", \"SIX\", \"SEVEN\", \"EIGHT\", \"NINE\"]\n    cnt = enumerate(s)\n    res = Array.new 10, 0\n    numbers = [0, 6, 2, 8, 3, 4, 5, 7, 9, 1]\n    numbers.each do |i|\n        ingredients = enumerate(num[i])\n        while enough(cnt, ingredients)\n            res[i] += 1\n            decrease(cnt, ingredients)\n        end\n    end\n    String.build do |buf|\n        (0..9).each do |i|\n            res[i].times do\n                buf << i\n            end\n        end\n    end\nend\n\ndef enumerate(s)\n    cnt = Array.new 26, 0\n    s.chars.each do |c|\n        cnt[c.ord - 'A'.ord] += 1\n    end\n    cnt\nend\n\ndef enough(a, b)\n    (0...26).each do |i|\n        if a[i] < b[i]\n            return false\n        end\n    end\n    return true\nend\n\ndef decrease(a, b)\n    (0...26).each do |i|\n        a[i] -= b[i]\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49546,"user_id":null,"body":"NUMBERS = [\"ZERO\", \"ONE\", \"TWO\", \"THREE\", \"FOUR\", \"FIVE\", \"SIX\", \"SEVEN\", \"EIGHT\", \"NINE\"]\nDISC1   = ['Z', nil, 'W', nil, 'U', nil, 'X', nil, 'G', nil]\nDISC2   = [nil, 'O', nil, 'H', nil, 'F', nil, 'S', nil, nil]\nDISC3   = [nil, nil, nil, nil, nil, nil, nil, nil, nil, 'I']\n\ndef original_number(s)\n  h = h_build(s)\n  puts h\n  a = [] of Int32\n  # DISC1\n  10.times do |i|\n    d = DISC1[i]\n    if d\n      nb = h[d]?\n      if nb\n        h_num = h_build(NUMBERS[i])\n        nb.times do\n          a << i\n          h_remove(h, h_num)\n        end\n      end\n    end\n  end\n  # DISC2\n  10.times do |i|\n    d = DISC2[i]\n    if d\n      nb = h[d]?\n      if nb\n        h_num = h_build(NUMBERS[i])\n        nb.times do\n          a << i\n          h_remove(h, h_num)\n        end\n      end\n    end\n  end\n  # DISC3\n  10.times do |i|\n    d = DISC3[i]\n    if d\n      nb = h[d]?\n      if nb\n        h_num = h_build(NUMBERS[i])\n        nb.times do\n          a << i\n          h_remove(h, h_num)\n        end\n      end\n    end\n  end\n  a.sort.map { |i| i.to_s }.join\nend\n\ndef h_build(s)\n  h = {} of Char => Int32\n  s.chars.each do |c|\n    nb = h[c]?\n    if nb.nil?\n      h[c] = 1\n    else\n      h[c] = nb + 1\n    end\n  end\n  h\nend\n\ndef h_remove(h, n)\n  n.each do |k, v|\n    nb = h[k]\n    if nb == v\n      h.delete(k)\n    else\n      h[k] = nb - v\n    end\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49547,"user_id":2563,"body":"def original_number(s)\n    numbers = { \"EIGHT\" => \"8\", \"ZERO\" => \"0\", \"FOUR\" => \"4\", \"TWO\" => \"2\", \"SIX\" => \"6\", \"SEVEN\" => \"7\", \"THREE\" => \"3\", \"FIVE\" => \"5\", \"NINE\" => \"9\", \"ONE\" => \"1\" }\n    res = [] of String\n    numbers.each do |num|\n        k, v = num[0], num[1]\n        while (k.chars.all? { |c| s.count(c) >= k.count(c) })  #can remove\n            res.push v\n            k.chars.each { |c| s = s.sub(c, \"\") }   #remove every char\n        end\n    end\n    res.sort.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49548,"user_id":2563,"body":"def original_number(s, digit = \"0\") : String\n    digits = {\"0\" => \"ZERO\", \"1\" => \"ONE\", \"2\" => \"TWO\", \"3\" => \"THREE\", \"4\" => \"FOUR\", \"5\" => \"FIVE\", \"6\" => \"SIX\", \"7\" => \"SEVEN\", \"8\" => \"EIGHT\", \"9\" => \"NINE\"}\n\n    return \"\" if s == \"\"             # trivial case, all done\n    return \"-1\" if digit.to_i > 9    # trivial case, no solution, go back\n    \n    num = digits[digit]\n    if num.chars.all? {|char| s.count(char) >= num.count(char)}             # can take NUM\n        remaining = num.chars.reduce(s) { |ac, char| ac.sub(char, \"\") }     # remove every char of NUM\n        rec = original_number(remaining, digit)                             # recursive call\n        return digit + rec if rec != \"-1\"                                   # could process the whole string              \n    end\n    return original_number(s, (digit.to_i+1).to_s)                      # recursive call with next digit\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49549,"user_id":1072,"body":"def r(n,s) n.split(\"\").reduce(s){|a,b| a.sub(b,\"\")} end; def original_number(s) [[\"0\",\"ZERO\"],[\"2\",\"WTO\"],[\"4\",\"UFOR\"],[\"1\",\"ONE\"],[\"5\",\"FIVE\"],[\"6\",\"XSI\"],[\"7\",\"VSEEN\"],[\"8\",\"GEIHT\"],[\"9\",\"NINE\"],[\"3\",\"THREE\"]].reduce(s){|a,b| a.includes?(b[1][0]) ? (b[0]+original_number(r(b[1],s))) : a}.split(\"\").sort.join(\"\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5959ec605595565f5c00002b":[{"id":49550,"user_id":421,"body":"def reverse(num)\n  num.to_s(2).reverse.to_i(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49551,"user_id":53,"body":"def reverse(n)\n    m = 0\n    while n > 0\n        m <<= 1\n        if n & 1 == 1\n            m ^= 1\n        end\n        n >>= 1\n    end\n    m\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49552,"user_id":527,"body":"def reverse(num)\n  res = 0\n  while num != 0\n    res = res << 1 | num & 1\n    num >>= 1\n  end\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49553,"user_id":612,"body":"def reverse(num)\n    return num.to_s(2).reverse.to_i(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"595ddfe2fc339d8a7d000089":[{"id":49554,"user_id":null,"body":"def code_to_hash(code)\n  result = {} of Char => String\n  code.chars.each do | c |\n    result[c] = \"#{c}1\"\n  end\n  idx, char = nil, nil\n  ('a'..'z').each do | c |\n    if result.has_key? c\n      idx = result[c][1..-1].to_i\n      char = result[c][0]\n    elsif idx\n      idx = idx + 1\n      result[c] = \"#{char}#{idx}\"\n    end\n  end\n  ('a'..'z').each do | c |\n    break if result.has_key? c\n    break unless idx\n    idx = idx + 1\n    result[c] = \"#{char}#{idx}\"\n  end\n  result\nend\n\ndef hamster_me(code, message)\n  codeh = code_to_hash(code)\n  message.chars.map { | c | codeh[c] }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49555,"user_id":null,"body":"def hamster_me(code, message)\n  arr, r = code.chars.map{|c| [c]}, \"\"\n  while arr.map(&.size).sum < 26\n    arr.each do |c|\n      if c[-1] == 'z'\n        c.push 'a' if !arr.any? {|a| a.includes? 'a'}\n      else\n        c.push c[-1].succ if !arr.any? {|a| a.includes? c[-1].succ}\n      end\n    end\n  end\n  message.chars.each do |c|\n    arr.each do |a|\n      if a.includes? c\n        r += \"#{a[0]}#{a.index(c).not_nil!+1}\"\n        break\n      end\n    end\n  end\n  r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49556,"user_id":null,"body":"def hamster_me(code, message)\n  r = code.chars.uniq.sort_by! { |m| m.downcase }\n  fl = r[0]\n  result = [] of String\n  r.each_with_index do |l, i|\n    break if i == r.size - 1\n    result +=  (1..(r[i+1].downcase.ord - l.downcase.ord)).to_a.map { |k| l + k.to_s }\n  end\n  last_val = (122 - r.last.downcase.ord + 1)\n  result += (1..last_val).to_a.map { |k| r.last + k.to_s }\n  result = (last_val+1..(r.first.downcase.ord - 97 + last_val)).to_a.map { |k| r.last + k.to_s } + result if r.first != \"a\"\n  final = \"\"\n  message.chars.each do |c|\n    final += result[c.downcase.ord-97].to_s\n  end\n  final\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49557,"user_id":null,"body":"def hamster_me(code, message)\n  cc = code_p(code)\n  message.chars.map { |c| cc[c] }.join\nend\n\ndef code_p(str)\n  cc = {} of Char => String\n  a = str.chars.sort.uniq\n  from = first = cur = a.shift\n  nb = 1\n  to = a.empty? ? nil : a.shift\n  while true\n    cc[cur] = \"#{from}#{nb}\"\n    if cur == 'z'\n      cur = 'a'\n    else\n      cur = (cur.ord + 1).chr\n    end\n    if cur == to\n      from = to\n      nb = 1\n      to = a.empty? ? nil : a.shift\n    else\n      nb += 1\n    end\n    break if cur == first\n  end\n  cc\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49558,"user_id":1072,"body":"def hamster_me(k,s) alpha=\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxy\"; k=k.split(\"\").uniq.sort; s.split(\"\").map{|l| p=alpha[alpha.index((k.select{|e| e<=l}[-1]?||k[-1])[0]).to_s.to_i,99]; p[0]+(p.index(l).to_s.to_i+1).to_s}.join end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"595f4df2e8f12961ab00007f":[{"id":49559,"user_id":421,"body":"def haiku_wizard(arr)\n  words = [\n  [\"like\", \"a\", \"tweet\", \"what\", \"for\", \"world\", \"whale\", \"one\", \"last\", \"sun\"],\n  [\"ocean\", \"beauty\", \"tweet\", \"monster\", \"yellow\", \"return\", \"despair\", \"flower\", \"return\", \"contrast\"],\n  [\"romantic\", \"curious\", \"banana\", \"jealousy\", \"tactlessly\", \"remorseful\", \"follower\", \"elephant\", \"however\", \"instagram\"],\n  [\"salmonella\", \"consequently\", \"irregular\", \"intelligence\", \"vegetable\", \"ordinary\", \"alternative\", \"watermelon\", \"controversial\", \"marijuana\"],\n  [\"lackadaisical\", \"serendipity\", \"colonoscopy\", \"dramatically\", \"parsimonius\", \"imagination\", \"electricity\", \"diabolical\", \"deforestation\", \"abomination\"],\n  [\"extraterrestrial\", \"onomatopoeia\", \"responsibility\", \"revolutionary\", \"generalisation\", \"enthusiastically\", \"biodiversity\", \"veterinarian\", \"characteristically\", \"indefatigable\"],\n  [\"oversimplification\", \"individuality\", \"decriminalisation\", \"compartmentalisation\", \"anaesthesiologist\", \"industrialisation\", \"buckminsterfullerene\", \"irresponsibility\", \"autobiographical\", \"utilitarianism\"]]\n  arr.map{|x| x.map{|y| words[y \/\/ 10 - 1][y % 10]}.join(\" \")}.join(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49560,"user_id":null,"body":"def haiku_wizard(arr)\n  words = [\n  [\"like\", \"a\", \"tweet\", \"what\", \"for\", \"world\", \"whale\", \"one\", \"last\", \"sun\"],\n  [\"ocean\", \"beauty\", \"tweet\", \"monster\", \"yellow\", \"return\", \"despair\", \"flower\", \"return\", \"contrast\"],\n  [\"romantic\", \"curious\", \"banana\", \"jealousy\", \"tactlessly\", \"remorseful\", \"follower\", \"elephant\", \"however\", \"instagram\"],\n  [\"salmonella\", \"consequently\", \"irregular\", \"intelligence\", \"vegetable\", \"ordinary\", \"alternative\", \"watermelon\", \"controversial\", \"marijuana\"],\n  [\"lackadaisical\", \"serendipity\", \"colonoscopy\", \"dramatically\", \"parsimonius\", \"imagination\", \"electricity\", \"diabolical\", \"deforestation\", \"abomination\"],\n  [\"extraterrestrial\", \"onomatopoeia\", \"responsibility\", \"revolutionary\", \"generalisation\", \"enthusiastically\", \"biodiversity\", \"veterinarian\", \"characteristically\", \"indefatigable\"],\n  [\"oversimplification\", \"individuality\", \"decriminalisation\", \"compartmentalisation\", \"anaesthesiologist\", \"industrialisation\", \"buckminsterfullerene\", \"irresponsibility\", \"autobiographical\", \"utilitarianism\"]]\n  arr.map(&.map{|n| words[n\/\/10-1][n%10]}.join ' ').join '\n'\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49561,"user_id":1828,"body":"def haiku_wizard(arr)\n  words = [\n  [\"like\", \"a\", \"tweet\", \"what\", \"for\", \"world\", \"whale\", \"one\", \"last\", \"sun\"],\n  [\"ocean\", \"beauty\", \"tweet\", \"monster\", \"yellow\", \"return\", \"despair\", \"flower\", \"return\", \"contrast\"],\n  [\"romantic\", \"curious\", \"banana\", \"jealousy\", \"tactlessly\", \"remorseful\", \"follower\", \"elephant\", \"however\", \"instagram\"],\n  [\"salmonella\", \"consequently\", \"irregular\", \"intelligence\", \"vegetable\", \"ordinary\", \"alternative\", \"watermelon\", \"controversial\", \"marijuana\"],\n  [\"lackadaisical\", \"serendipity\", \"colonoscopy\", \"dramatically\", \"parsimonius\", \"imagination\", \"electricity\", \"diabolical\", \"deforestation\", \"abomination\"],\n  [\"extraterrestrial\", \"onomatopoeia\", \"responsibility\", \"revolutionary\", \"generalisation\", \"enthusiastically\", \"biodiversity\", \"veterinarian\", \"characteristically\", \"indefatigable\"],\n  [\"oversimplification\", \"individuality\", \"decriminalisation\", \"compartmentalisation\", \"anaesthesiologist\", \"industrialisation\", \"buckminsterfullerene\", \"irresponsibility\", \"autobiographical\", \"utilitarianism\"]]\n  arr.map{|i| i.map{|j| words.flatten[j-10]}.join(\" \")}.join(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49562,"user_id":1072,"body":"def haiku_wizard(arr) words = [[\"like\", \"a\", \"tweet\", \"what\", \"for\", \"world\", \"whale\", \"one\", \"last\", \"sun\"],[\"ocean\", \"beauty\", \"tweet\", \"monster\", \"yellow\", \"return\", \"despair\", \"flower\", \"return\", \"contrast\"],[\"romantic\", \"curious\", \"banana\", \"jealousy\", \"tactlessly\", \"remorseful\", \"follower\", \"elephant\", \"however\", \"instagram\"],[\"salmonella\", \"consequently\", \"irregular\", \"intelligence\", \"vegetable\", \"ordinary\", \"alternative\", \"watermelon\", \"controversial\", \"marijuana\"],[\"lackadaisical\", \"serendipity\", \"colonoscopy\", \"dramatically\", \"parsimonius\", \"imagination\", \"electricity\", \"diabolical\", \"deforestation\", \"abomination\"],[\"extraterrestrial\", \"onomatopoeia\", \"responsibility\", \"revolutionary\", \"generalisation\", \"enthusiastically\", \"biodiversity\", \"veterinarian\", \"characteristically\", \"indefatigable\"],[\"oversimplification\", \"individuality\", \"decriminalisation\", \"compartmentalisation\", \"anaesthesiologist\", \"industrialisation\", \"buckminsterfullerene\", \"irresponsibility\", \"autobiographical\", \"utilitarianism\"]]; arr.map{|r| r.map{|e| i=e.to_s; words[i[0].to_i-1][i[1].to_i]}.join(\" \")}.join(\"\n\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"596144f0ada6db581200004f":[{"id":49563,"user_id":1072,"body":"def custom_fib(s,x,n,l=s.size) p=s[-l,s.size]; s.size>n ? s[n] : custom_fib(s+[x.reduce(0){|a,b| a+p[b]}],x,n,l) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5966e33c4e686b508700002d":[{"id":49564,"user_id":1474,"body":"def sum_str(a, b)\n  a = \"0\" + a\n  b = \"0\" + b\n  (a.to_i + b.to_i).to_s\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49565,"user_id":null,"body":"def sum_str(a, b)\n  a = \"0\" if a == \"\"\n    b = \"0\" if b == \"\"\n\n    (a.to_i + b.to_i).to_s\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49566,"user_id":168,"body":"def sum_str(a, b)\n  ((a.empty? ? 0 : a.to_i) + (b.empty? ? 0 : b.to_i)).to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49567,"user_id":492,"body":"def sum_str(a, b)\n    if a == \"\" && b == \"\" \n      return \"0\" \n    end\n    if a == \"\"\n      return b \n    end\n    if b == \"\"\n      return a\n    end   \n    (a.to_i + b.to_i).to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49568,"user_id":50,"body":"def sum_str(a, b)\n  [a,b].map{|x| x == \"\" ? 0 : x.to_i}.sum.to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49569,"user_id":null,"body":"def sum_str(a, b)\n  if a == \"\"\n    a = 0\n  end\n  if b == \"\"\n    b = 0\n  end\n  (a.to_i + b.to_i).to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49570,"user_id":53,"body":"def sum_str(a, b)\n  (to_i0(a) + to_i0(b)).to_s\nend\n\ndef to_i0(n)\n  if n == \"\"\n    0 \n  else\n    n.to_i\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49571,"user_id":527,"body":"def sum_str(a : String, b : String) : String\n  ((a.empty? ? 0 : a.to_i) + (b.empty? ? 0 : b.to_i)).to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49572,"user_id":527,"body":"def sum_str(a, b)\n  case {a, b}\n    when {\"\", \"\"} then \"0\"\n    when {\"\", b} then b\n    when {a, \"\"} then a\n    when {a, b} then (a.to_i + b.to_i).to_s\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49573,"user_id":527,"body":"def sum_str(a, b)\n  ((a.to_i rescue 0) + (b.to_i rescue 0)).to_s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5966eeb31b229e44eb00007a":[{"id":49574,"user_id":168,"body":"def vaporcode(string)\n  string.gsub(\" \", \"\").upcase.chars.join(\"  \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49575,"user_id":53,"body":"def vaporcode(string)\n  string.gsub(\/\\s+\/, \"\").upcase.split(\"\").join(\"  \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49576,"user_id":null,"body":"def vaporcode(string)\n  string.delete(\" \").upcase.split(\"\").join(\"  \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49577,"user_id":null,"body":"def vaporcode(string)\n  string.each_char.reject(&.==(' ')).join(\"  \", &.upcase)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49578,"user_id":421,"body":"def vaporcode(string)\n  string.upcase.gsub(\" \", \"\").chars.join(\"  \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49579,"user_id":1624,"body":"def vaporcode(string)\n  string.tr(\" \", \"\").upcase.chars.join(\"  \")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49580,"user_id":527,"body":"def vaporcode(string : String) : String\n  string.delete(' ').upcase.each_char.join(\"  \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49581,"user_id":645,"body":"def vaporcode(string)\n  string.delete(' ').upcase.chars.join(\"  \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49582,"user_id":1072,"body":"def vaporcode(s) s.gsub(\/\\s+\/, \"\").upcase.split(\"\").join(\"  \") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5967a67c8b0fc0093e000062":[{"id":49583,"user_id":null,"body":"def find_codwars(url)\n  !\/^(https?:\\\/\\\/)?([a-zA-Z0-9]+\\.)*codwars\\.com([\\\/\\?].*)?$\/.match(url).nil?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49584,"user_id":1072,"body":"def find_codwars(s) (s=~\/^(https?:\\\/\\\/)?([a-z]+\\.)*codwars\\.com([^.a-z]|$)\/) != nil end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"596a690510ffee5c0b00006a":[{"id":49585,"user_id":1072,"body":"def char_attribute(n) m=n \/ 2-5; {\"modifier\"=>n>0 ? m : n, \"maximum_spell_level\"=>n>=10 ? [n-10,9].min : -1, \"extra_spells\"=>(0..8).reduce([] of Int32){|a,b| s=((m-b) \/ 4.0).ceil; s>0 ? a+[s] : a}} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"596b1d44224071b9f5000010":[{"id":49586,"user_id":168,"body":"def psion_power_points(level, score)\n  points = [0, 2, 6, 11, 17, 25, 35, 46, 58, 72, 88, 106, 126, 147, 170, 195, 221, 250, 280, 311, 343];\n  level <= 0 || score <= 10 ? 0 : points[[20, level].min] + ((score - 10) \/ 2 * (level \/ 2.0)).to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49587,"user_id":1072,"body":"def psion_power_points(l,s) l>0 && s>10 ? [0,2,6,11,17,25,35,46,58,72,88,106,126,147,170,195,221,250,280,311,343][[l,20].min]+(s-10) \/ 2*l \/ 2 : 0 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"596c26187bd547f3a6000050":[{"id":49588,"user_id":1072,"body":"def buy_newspaper(s1,s2,c=0) h=s2.sub(Regex.new(s1.split(\"\").map{|e| e+\"?\"}.join),\"\"); s2.size==0 ? c : s2==h ? -1 : buy_newspaper(s1,h,c+1) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"596c6eb85b0f515834000049":[{"id":49589,"user_id":null,"body":"def replace_dots(str)\n  i = 0\n  while i < 100\n    str = str.sub(\/\\.\/, '-')\n    i += 1\n  end\n  return str\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49590,"user_id":null,"body":"def replace_dots(str : String) : String\n  str.gsub(\/[.]\/, '-')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49591,"user_id":527,"body":"def replace_dots(str : String) : String\n  str.gsub('.', '-')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49592,"user_id":527,"body":"def replace_dots(str)\n  str.gsub('.', '-')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49593,"user_id":421,"body":"def replace_dots(str)\n  str.gsub(\/\\.\/, '-')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"596f610441372ee0de00006e":[{"id":49594,"user_id":null,"body":"def de_nico(key, msg)\n  char_iter = key.chars.sort.join.each_char\n\n  msg.each_char.in_groups_of(key.size).to_a.transpose.sort_by do \n    key.index(char_iter.next.as(Char)).not_nil!\n  end.transpose.map(&.join).join.strip\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49595,"user_id":null,"body":"def de_nico(key,msg)\n  hash = key.chars.sort.each_with_index.to_h\n  strings = key.chars.map do |k|\n    String.build do |s|\n      (hash[k]).step(to: msg.size - 1, by: key.size) do |c|\n        s << msg[c]\n      end\n    end\n  end\n  (msg.size \/ key.size).ceil.to_i.times.join do |s|\n    key.size.times.join { |k| strings[k][s]? }\n  end.rstrip\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49596,"user_id":null,"body":"def de_nico(key,msg)\n  k = key.chars.sort.map_with_index{|c,i|[c,i]}.to_h\n  oid = key.chars.map{|c|k[c].to_i}\n  str = \"\"\n  msg.chars.each_slice(key.size){|a| loop{break if a.size == key.size;a<<'$'};a.size.times{|i| str += a[oid[i]]}}\n  str.gsub('$',\"\").rstrip\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49597,"user_id":null,"body":"def de_nico(key, msg)\n  key_s = key.chars.sort\n  mapping0 = key_s.map_with_index { |ch,i| {ch, i+1} }.to_h\n  mapping1 = key.chars.map { |ch| mapping0[ch] }\n  \n  ret = [] of String\n  msg.chars.each_slice( key.size ) { |s| \n    p = ( mapping1\n          .map{ |i| (i-1 < s.size ? s[i-1] : nil )}\n          .select { |c| !c.nil? }\n          .map( &.not_nil! )\n          .join(\"\") )\n    ret << p\n  }\n  \n  ret.join(\"\").rstrip \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49598,"user_id":null,"body":"def de_nico(key,msg)\n  msg\n  .chars\n  .each_with_index\n  .map {|(c, i)| {i \/ key.size(), key.chars.index(key.chars.sort[i % key.size]) || 0, c}}\n  .to_a\n  .sort\n  .map {|t| t.at(2)}\n  .join\n  .rstrip(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49599,"user_id":null,"body":"def de_nico(key, code)\n    p = permutation(key)\n    puts \"#{key} -> #{p}\"\n    s = String.build do |str|\n        k = 0\n        len = key.size\n        while true\n            puts \"#{k}'th block\"\n            if k*len > code.size\n                break\n            end\n            (0...len).each do |j|\n                if k*len + p[j] >= code.size\n                    next\n                end\n                str << code[k*len + p[j]]\n            end\n            k += 1\n        end\n    end\n    s.rstrip\nend\n\ndef permutation(key)\n    # Not a very elegant way to do it...\n    arr = [] of  Tuple(Char, Int32)\n    key.chars.each_with_index do |c, i|\n        arr << {c, i}\n    end\n    tmp = [] of Tuple(Int32, Int32)\n    arr.sort.each_with_index do |t, j|\n        c, i = t\n        tmp << {i, j}\n    end\n    ans = [] of Int32\n    tmp.sort.each do |t|\n        i, j = t\n        ans << j\n    end\n    ans\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49600,"user_id":null,"body":"def de_nico(key,msg)\n  key = key.chars.map{|c| key.chars.sort.index(c).not_nil!}\n  msg.chars.in_groups_of(key.size).map{|g|\n    Array.new(key.size, '_').map_with_index{|_,i| g[key[i]]}.join\n  }.join.rstrip\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49601,"user_id":null,"body":"def de_nico(key, msg)\n  encoded_order = get_array(key, msg)\n  decoded_order = Array.new(key.size, Array(Char).new) \n  key = key.chars\n  sorted_key = key.sort\n  sorted_key.each.with_index do |char, old_index|\n    new_index = key.index(char)\n    if !new_index.nil?\n      decoded_order[new_index] = encoded_order[old_index]\n    end\n  end\n  return array_to_string(decoded_order)\nend\n\ndef get_array(key, msg)\n  a = Array.new(key.size) { Array(Char).new }\n  while msg.size > 0\n    a.each do |array|\n      if msg.size > 0\n        array << msg[0]\n        msg = msg.lchop\n      end\n    end\n  end\n  a\nend\n\ndef array_to_string(decoded_order)\n  chars = [] of Char\n  (decoded_order[0].size + 1).times do\n    decoded_order.each do |array|\n      if array.size > 0\n        chars << array.shift\n      end\n    end\n  end\n  chars.join.rstrip\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49602,"user_id":null,"body":"def de_nico(key, msg)\n  k = key_p(key)\n  len = k.size\n  msg_len = msg.size\n  tr = msg_len % len\n  if tr > 0\n    msg += \" \" * (len - tr)\n  end\n  msg_a = msg.chars\n  r = [] of Char\n  msg_a.size.times do |i|\n    y = i \/ len\n    x = i % len\n    idx = k[x]?\n    if idx\n      pos = len*y + idx\n      if pos < msg_len\n        r << msg_a[pos]\n      end\n    end\n  end\n  r.join.rstrip\nend\n\ndef key_p(k)\n  k_c = k.chars\n  k_c_sorted = k_c.sort\n  k_c.map { |c| k_c_sorted.index(c) }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49603,"user_id":2563,"body":"def de_nico(key, msg)\n  num = num_key(key)\n  \n  res = \"\"; numi = 0; base = 0\n  \n  while res.size < msg.size\n    index = base+num[numi]-1\n    res += (index+1 > msg.size ? \"\" : msg[index])\n    if (numi+=1) == num.size\n      numi = 0; base += num.size\n    end\n  end\n  res.rstrip\nend\n\ndef num_key(key : String) : Array(Int32)\n  sorted = key.split(\"\").sort.join\n  key.split(\"\").map { |c| sorted.index(c).as(Int32)+1 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"596fba44963025c878000039":[{"id":49604,"user_id":1566,"body":"def contamination(text, char)\n  char * text.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49605,"user_id":1072,"body":"def contamination(t,c) c*t.size end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49606,"user_id":null,"body":"def contamination(text, char)\n  return char * text.size()\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49607,"user_id":53,"body":"def contamination(text, char)\n  Array.new(text.size, char).join()\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49608,"user_id":645,"body":"def contamination(text, char)\n  text.chars.map do char end.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49609,"user_id":null,"body":"def contamination(text, char)\n  text.gsub(\/[\\W\\w]\/, char)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49610,"user_id":null,"body":"def contamination(text, char)\n  text.gsub(\/.\/) { char }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49611,"user_id":null,"body":"def contamination(text, char)\n  if (text.blank? && text.size == 0) || (char.blank? && char.size == 0)\n    \"\"\n  else\n    Array(String).new(text.size) { |i| char }.join\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49612,"user_id":2609,"body":"def contamination(text, char)\n  !text || !char ? \"\" : char * text.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49613,"user_id":1750,"body":"def contamination(text, char)\n  text\n  .chars\n  .map { char }\n  .join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59706036f6e5d1e22d000016":[{"id":49614,"user_id":421,"body":"def words_to_marks(string)\n   string.chars.sum{|x| x.ord - 96}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49615,"user_id":50,"body":"def words_to_marks(string)\n  string.chars.map{|c| c.ord-96}.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49616,"user_id":53,"body":"def words_to_marks(s)\n  return s.split(\"\").reduce(0) { |sum, n| sum + n[0].ord - 96 };\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49617,"user_id":null,"body":"def words_to_marks(string)\n  string.chars.sum { |c| c - 'a' + 1 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49618,"user_id":null,"body":"def words_to_marks(string)\n  string.chars.map {|c| c-'`' }.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49619,"user_id":1624,"body":"def words_to_marks(s)\n  s.chars.map{|c| c.ord - 96}.sum\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49620,"user_id":null,"body":"def words_to_marks(string)\n  string.chars.sum { |c| c.ord - 96 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49621,"user_id":null,"body":"def words_to_marks(string)\n  string.chars.sum &.ord.-('a'.ord.-(1))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49622,"user_id":null,"body":"def words_to_marks(string)\n  string.chars.map{|x| x.ord - 'a'.ord + 1}.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49623,"user_id":645,"body":"def words_to_marks(string)\n  string.chars.sum(&.ord.-(96))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5970df092ef474680a0000c9":[{"id":49624,"user_id":50,"body":"def alphabetized(s)\n  l=s.size\n  k=0\n  o=[]of Char\n  (97...123).each do |i|\n    (0...l).each do |j|\n      c=s[j]\n      if c.downcase==i.chr\n        o.push(c)\n      end\n    end\n  end\n  o.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49625,"user_id":null,"body":"def alphabetized(s)\n  arr = s.split(\"\")\n  result = Array(String).new\n  (\"a\"..\"z\").each  do |v|\n    if arr.includes?(v) || arr.includes?(v.upcase)\n      result = result + arr.select {|x| x if x.downcase == v}\n    end\n  end\n  result.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49626,"user_id":null,"body":"def alphabetized(s)\n  s = s.chars.select{ |char| char.letter? }\n  (s.size-1).downto(0).each do |j|\n    (0...j).each do |i|\n      if s[i].upcase.ord > s[i+1].upcase.ord\n        s[i], s[i+1] = s[i+1],s[i]\n      end\n    end\n  end\n  s.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49627,"user_id":1072,"body":"def alphabetized(s) s.gsub(\/[^a-z]\/i,\"\").split(\"\").each_with_index.map{|e| {e[0],e[1]}}.to_a.sort{|a,b| a[0].downcase != b[0].downcase ? a[0].downcase <=> b[0].downcase : a[1] <=> b[1]}.map{|e| e[0]}.join end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59727ff285281a44e3000011":[{"id":49628,"user_id":421,"body":"def band_name_generator(name)\n   name[0] == name[-1] ? name.capitalize + name[1..-1] : \"The #{name.capitalize}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49629,"user_id":null,"body":"def band_name_generator(name)\n  name.ends_with?(name.chars[0]) ? \"#{name}#{name[1..-1]}\".capitalize : \"The #{name.capitalize}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49630,"user_id":1768,"body":"def band_name_generator(x)\n  x[0]==x[-1] ? (x[0..-2]+x).capitalize : \"The \"+x.capitalize\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49631,"user_id":null,"body":"def band_name_generator(name)\n  name = name.downcase\n\n  if (name.ends_with?(name[0]))\n    name.capitalize.rchop + name\n  else\n    \"The #{name.capitalize}\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49632,"user_id":1072,"body":"def band_name_generator(s) s[0]==s[-1] ? (s+s[1,999]).capitalize : \"The #{s.capitalize}\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"597770e98b4b340e5b000071":[{"id":49633,"user_id":null,"body":"class FileNameExtractor\n  def self.extract_file_name(dirtyFileName)\n    dirtyFileName.gsub(\/\\A\\d+_?|\\.[^\\.]+\\z\/,\"\")\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49634,"user_id":null,"body":"class FileNameExtractor\n  def self.extract_file_name(dirtyFileName)\n    dirtyFileName[\/\\d+_(.+\\..+)\\..+\/,1]\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49635,"user_id":null,"body":"class FileNameExtractor\n  def self.extract_file_name(dirtyFileName)\n    x = dirtyFileName.split('_', 2)[1].split('.')\n    \"#{x[0] + \".\" + x[1]}\" \n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49636,"user_id":null,"body":"class FileNameExtractor\n  def self.extract_file_name(dirtyFileName)\n    md = \/^\\d+_(.+\\..+)\\..*\/.match(dirtyFileName)\n    return md[1] unless md.nil?\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49637,"user_id":null,"body":"class FileNameExtractor\n  def self.extract_file_name(dirtyFileName)\n    \/^\\d+_?(?<grp>[-\\w_]+\\.[-\\w_]+)\\.[-\\w_]+\/.match(dirtyFileName).try &.[\"grp\"]\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49638,"user_id":null,"body":"class FileNameExtractor\n  def self.extract_file_name(dirtyFileName)\n    m = dirtyFileName.match(\/\\d+_([^\\.]+)\\.([^\\.]+)\\.[^\\.]+\/).not_nil!\n    \"#{m[1]}.#{m[2]}\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49639,"user_id":1624,"body":"class FileNameExtractor\n  def self.extract_file_name(name)\n    name\n      .split(\"_\", 2)\n      .last\n      .split(\".\")\n      .first(2)\n      .join(\".\")\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49640,"user_id":null,"body":"class FileNameExtractor\n  def self.extract_file_name(dirtyFileName)\n    ps = dirtyFileName.split(\".\")\n    ext = ps[1]\n    \n    ps2 = ps[0].split(\"_\")\n    name = ps2[1...ps2.size].join(\"_\")\n    name + \".\" + ext \n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49641,"user_id":null,"body":"class FileNameExtractor\n  def self.extract_file_name(dirtyFileName)\n    dirtyFileName.gsub(\/\\A\\d+_|\\.[^.]*\\z\/, \"\")\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49642,"user_id":null,"body":"class FileNameExtractor\n  def self.extract_file_name(dirtyFileName)\n    \/[0-9]+_(.+)\\..+\/.match(dirtyFileName).try &.[1]\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"597a660f59873cc353000061":[{"id":49643,"user_id":1072,"body":"def get_colors(c) c.map{|s| s.reduce({\"Red\"=>0,\"Green\"=>0,\"Blue\"=>0}){|a,b| p=[{b[0,2].to_i(16),\"Red\"},{b[2,2].to_i(16),\"Green\"},{b[4,2].to_i(16),\"Blue\"}].sort; a[p[2][1]]+=1; a}.map{|k,v| {-v,k}}.sort[0,2].map{|e| e[1]}.join(\"+\")}.join(\",\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"597c684822bc9388f600010f":[{"id":49644,"user_id":null,"body":"class Dinglemouse\n  def initialize(first_name : String, last_name : String)\n    @first_name = first_name\n    @last_name = last_name\n  end\n  def get_full_name\n    return @first_name if @last_name.empty?\n    return @last_name if @first_name.empty?\n    String.build do |str|\n      str << @first_name\n      str << ' '\n      str << @last_name\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49645,"user_id":null,"body":"class Dinglemouse\n  def initialize(@first_name : String, @last_name : String)\n  end\n  def get_full_name\n    [@first_name, @last_name].reject(&.empty?).join(' ')\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49646,"user_id":1624,"body":"class Dinglemouse\n  @first_name : String\n  @last_name : String\n\n  def initialize(first_name, last_name)\n    @first_name = first_name\n    @last_name = last_name\n  end\n\n  def get_full_name\n    return [@first_name, @last_name].join(\" \").strip\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49647,"user_id":null,"body":"class Dinglemouse\n  def initialize(first_name : String, last_name : String)\n    @first_name = first_name\n    @last_name = last_name\n  end\n  def get_full_name\n    return [@first_name, @last_name].reject(&.empty?).join(\" \")\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49648,"user_id":645,"body":"class Dinglemouse\n  @@first_name = \"\"\n  @@last_name = \"\"\n\n  def initialize(first_name, last_name)\n    @@first_name = first_name\n    @@last_name = last_name\n  end\n  \n  def get_full_name\n    (@@first_name + \" \" + @@last_name).strip\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49649,"user_id":1768,"body":"class Dinglemouse\n  @first_name : String \n  @last_name : String \n  def initialize(first_name, last_name)\n    @first_name = first_name\n    @last_name = last_name\n  end\n  def get_full_name\n    return (@first_name + ' ' + @last_name).strip\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49650,"user_id":null,"body":"class Dinglemouse\n  def initialize(@first_name : String, @last_name : String)\n  end\n  \n  def get_full_name\n    return \"#{@first_name} #{@last_name}\".strip\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49651,"user_id":1072,"body":"class Dinglemouse\n  def initialize(first_name : String, last_name : String)\n    @first_name = first_name\n    @last_name = last_name\n  end\n  def get_full_name\n    return (@first_name + ' ' + @last_name).strip\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5981a139f5471fd1b2000071":[{"id":49652,"user_id":null,"body":"def task(w,n,c)\n  case w\n  when \"Monday\"\n    return \"It is Monday today, James, you have to work, you must spray #{n} trees and you need #{n * c} dollars to buy liquid\"\\\n  when \"Tuesday\"\n    return \"It is Tuesday today, John, you have to work, you must spray #{n} trees and you need #{n * c} dollars to buy liquid\"\n  when \"Wednesday\"\n    return \"It is Wednesday today, Robert, you have to work, you must spray #{n} trees and you need #{n * c} dollars to buy liquid\"\n  when \"Thursday\"\n    return \"It is Thursday today, Michael, you have to work, you must spray #{n} trees and you need #{n * c} dollars to buy liquid\"\n  when \"Friday\"\n    return \"It is Friday today, William, you have to work, you must spray #{n} trees and you need #{n * c} dollars to buy liquid\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49653,"user_id":null,"body":"def task(w, n, c)\n  case w\n  when \"Monday\"\n    return \"It is #{w} today, James, you have to work, you must spray #{n} trees and you need #{n * c} dollars to buy liquid\"\n  when \"Tuesday\"\n    return \"It is #{w} today, John, you have to work, you must spray #{n} trees and you need #{n * c} dollars to buy liquid\"\n  when \"Wednesday\"\n    return \"It is #{w} today, Robert, you have to work, you must spray #{n} trees and you need #{n * c} dollars to buy liquid\"\n  when \"Thursday\"\n    return \"It is #{w} today, Michael, you have to work, you must spray #{n} trees and you need #{n * c} dollars to buy liquid\"\n  when \"Friday\"\n    return \"It is #{w} today, William, you have to work, you must spray #{n} trees and you need #{n * c} dollars to buy liquid\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49654,"user_id":527,"body":"WORKERS = {\n  \"Monday\" => \"James\",\n  \"Tuesday\" => \"John\",\n  \"Wednesday\" => \"Robert\",\n  \"Thursday\" => \"Michael\",\n  \"Friday\" => \"William\",\n}\n\ndef task(w, n, c)\n  <<-RES\n    It is #{w} today, #{WORKERS[w]}, you have to work, \\\n    you must spray #{n} trees and you need #{c * n} dollars to buy liquid\n    RES\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49655,"user_id":421,"body":"WORK = {\"Monday\"=> \"James\", \"Tuesday\"=> \"John\", \"Wednesday\"=> \"Robert\", \"Thursday\"=> \"Michael\", \n        \"Friday\"=> \"William\"}\n\ndef task(w,n,c)\n  \"It is #{w} today, #{WORK.fetch(w, \"\")}, you have to work, you must spray #{n} trees and you need #{n * c} dollars to buy liquid\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59859f435f5d18ede7000050":[{"id":49656,"user_id":null,"body":"def word_to_bin(word)\n  word.chars.map{|c| c.ord.to_s(2).rjust(8, '0')}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49657,"user_id":527,"body":"def word_to_bin(word : String) : Array(String)\n  Array.new(word.bytesize) do |i|\n    b = word.byte_at(i)\n    String.new(8) do |bs|\n      (0..7).each{ |i| bs[i] = '0'.ord.to_u8 + (b >> 7 - i & 1) }\n      {8, 8}\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49658,"user_id":527,"body":"def word_to_bin(word)\n  word.each_byte.map{ |b| \"%08b\" % b }.to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49659,"user_id":421,"body":"def word_to_bin(word)\n  word.chars.map{|x| x.ord.to_s(2).rjust(8, '0')}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59887207635904314100007b":[{"id":49660,"user_id":527,"body":"def closest(arr)\n  m = arr.min_by(&.abs)\n  m unless m != 0 && arr.includes?(-m) \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49661,"user_id":421,"body":"def closest(arr)\n   a = arr.uniq.sort_by(&.abs)\n  a[0].abs == a[1].abs ? nil : a[0]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49662,"user_id":1624,"body":"def closest(arr)\n  e = arr.min_by(&.abs)\n  matches = arr.uniq.select{|n| n.abs == e.abs}\n  if matches.size == 1\n    e\n  else\n    nil\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49663,"user_id":null,"body":"def closest(arr)\n  _, closest = arr.group_by(&.abs).min\n  closest.uniq.size == 1 ? closest.first : nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49664,"user_id":1750,"body":"def closest(arr)\n  return 0 if arr.first == 0\n  num = arr\n        .reduce() do |closest, each|\n          return 0 if each == 0\n          (each - 0).abs < (closest - 0).abs ? each : closest\n        end\n  arr.includes?(-num) ? nil : num\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49665,"user_id":1072,"body":"def closest(arr) r=arr.reduce({999999,false}){|a,b| a[0] != 0 && a[0]==-b ? {a[0],true} : b.abs<a[0].abs ? {b,false} : a}; r[1] ? nil : r[0] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"598ab728062fc49a22000410":[{"id":49666,"user_id":1072,"body":"def pattern_generator(n) p=(0...n).map{|i| i%2==1 ? \" \" : i%4==2 ? \"o\" : \"x\"}.join; b=p+(p[0,[p.size-1,0].max] || \"\").reverse; ((0...n-1).map{|i| \" \"*(n-1)+b[b.size-1-i,999]}+[b]+(0...n-1).map{|i| \" \"*(1+i)+b[0,b.size-i-n]}).join(\"\n\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"598d91785d4ce3ec4f000018":[{"id":49667,"user_id":421,"body":"def word_value(arr)\n  arr.map_with_index(1){|x, i| x.gsub(\/[^a-z]\/, \"\").chars.sum{|y| y.ord - 96} * i}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49668,"user_id":null,"body":"def word_value(arr)\n  arr.map_with_index{ |w,i| w.gsub(' ',\"\").chars.sum{|c|c.ord-96}*(i+1) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49669,"user_id":1474,"body":"def conv(stg)\n  stg.delete(' ').chars.map { |c| c.ord - 96 }.sum\nend\n\ndef word_value(arr)\n  (0...arr.size).map { |i| (i + 1) * conv(arr[i]) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49670,"user_id":null,"body":"def word_value(arr)\n    i=1\n    ans=Array(Int32).new\n    arr.each do |st|\n        st=st.chars\n        st.delete(' ')\n        while st.size>1    \n            st << st.pop+(st.pop-'a'+1)\n        end\n        ans<< (st[0]-'a'+1)*i\n        i+=1\n    end\n    return ans\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49671,"user_id":null,"body":"def word_value(arr)\n  arr.map_with_index { |s, i| s.chars.select { |c| ('a'..'z').includes? c }.map { |c| c.ord - 'a'.ord + 1 }.sum * (i + 1) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49672,"user_id":1072,"body":"def word_value(arr) i=-1; arr.map{|e| i+=1; e.gsub(\/[^a-z]\/,\"\").split(\"\").reduce(0){|a,b| a+b.codepoint_at(0)-96}*(i+1)} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"598ee7b6ec6cb90dd6000061":[{"id":49673,"user_id":759,"body":"def count_repeats(str)\n  str.size - str.squeeze.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49674,"user_id":50,"body":"def count_repeats(txt)\n  txt[0..-2].chars.zip(txt[1..-1].chars).select{|a,b| a==b}.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49675,"user_id":421,"body":"def count_repeats(str)\n  str.chars.each_cons(2).select{|(x, y)| x == y}.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49676,"user_id":null,"body":"def count_repeats(str)\n  nb = 0\n  oc = nil\n  str.each_char do |c|\n    if c == oc\n      nb += 1\n    else\n      oc = c\n    end\n  end\n  nb\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49677,"user_id":527,"body":"def count_repeats(str)\n  str.scan(\/(.)(?=\\1)\/).size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49678,"user_id":1072,"body":"def count_repeats(s) s.size-s.gsub(\/(.)\\1*\/, \"\\1\").size end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"598f76a44f613e0e0b000026":[{"id":49679,"user_id":527,"body":"def sum_of_integers_in_string(s : String) : Int\n  s.scan(\/\\d+\/).sum{ |m| m[0].to_i }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49680,"user_id":168,"body":"def sum_of_integers_in_string(s)\n  s.scan(\/\\d+\/).sum(&.[0].to_i)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49681,"user_id":null,"body":"def sum_of_integers_in_string(s)\n  s.split(\/\\D\/).select{|x| x.size > 0}.map{|x| x.to_i}.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49682,"user_id":1474,"body":"def sum_of_integers_in_string(s)\n  s.scan(\/\\d+\/).map { |m| m[0].to_i }.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49683,"user_id":null,"body":"def sum_of_integers_in_string(s)\n  s.split(\/\\D+\/).reject(&.empty?).sum(&.to_i)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49684,"user_id":null,"body":"def sum_of_integers_in_string(s)\n  s.scan(\/\\d+\/).map(&.to_a).flatten.map(&.not_nil!.to_i).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49685,"user_id":null,"body":"def sum_of_integers_in_string(s)\n  s.scan(\/\\d+\/).map(&.[0].to_i).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49686,"user_id":null,"body":"def sum_of_integers_in_string(s)\n  s.split(\/[a-zA-Z\\+\\-\\.\\,\\=\\s\\?\\!]\/).map do |x|\n    if x == \"\" || x == \"+\"\n      0\n    else\n      x.to_i\n    end\n  end.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49687,"user_id":1828,"body":"def sum_of_integers_in_string(s)\n  s.scan(\/\\d{1,}\/).map{|i| i[0].to_i}.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49688,"user_id":2609,"body":"def sum_of_integers_in_string(s)\n  sum = 0\n  s.scan(\/\\d+\/) do |match|\n    sum += match[0].to_i\n  end\n  sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59901fb5917839fe41000029":[{"id":49689,"user_id":421,"body":"def numeric_formatter(template, no)\n  no = no.nil? ? \"1234567890\" : no\n  ans = \"\" \n  i = 0\n  template.chars.each do |x|\n    if \/[a-z]\/i === x.to_s\n      ans += no[i]\n      i = (i + 1) % no.size\n    else\n      ans += x\n    end\n  end\n  ans\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49690,"user_id":null,"body":"def numeric_formatter(template, val)\n  val = \"1234567890\" if val.nil? || val.size == 0\n  number = val.chars.cycle\n  template.gsub(\/[a-zA-Z]\/) { |c| number.next }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49691,"user_id":759,"body":"def numeric_formatter(template, number)\n  number ||= \"\"\n  i = 0\n  la = 1\n  template.gsub(\/[a-zA-Z]\/) do |x|\n    if number.empty?\n      p = la\n      la += 1\n      la = 0 if la == 10\n      p\n    else\n      p = number[i]\n      i = i == number.size-1 ? 0 : i + 1\n      p\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49692,"user_id":1072,"body":"def numeric_formatter(t,n=nil) n=!n ? (0...t.size).map{|i| (i+1)%10} : (n*(t.size\/n.size+1)).split(\"\"); t.gsub(\/[a-z]\/i){n.shift()} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"599bb194b7a047b04d000077":[{"id":49693,"user_id":168,"body":"def how_many_pizzas(n)\n  p, s = (Int64.new(n) * n).divmod(64)\n  \"pizzas: #{p}, slices: #{(s \/ 8).round(:ties_away).to_i}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49694,"user_id":1072,"body":"def how_many_pizzas(n) \n    r = (n\/8.0)**2 \n   \"pizzas: #{r.to_i}, slices: #{(r%1*8).round_away.to_i}\" \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49695,"user_id":209,"body":"def how_many_pizzas(n)\n  r = (n \/ 8) * (n \/ 8)\n  \"pizzas: #{r.to_i}, slices: #{(8*(r - r.to_i)).round.to_i}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49696,"user_id":1828,"body":"def how_many_pizzas(n)\n  c = (n**2).fdiv(64)\n  \"pizzas: %d, slices: %d\" % [c-c%1, (8*(c%1)).round]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59a8570b570190d313000037":[{"id":49697,"user_id":null,"body":"def sum_cubes(n)\n  n**2 * (n+1)**2 \/\/ 4\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49698,"user_id":null,"body":"def sum_cubes(n)\n  return n == 0? 0 : n * n * n + sum_cubes(n - 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49699,"user_id":527,"body":"def sum_cubes(n)\n  (1..n).sum(&.**(3))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49700,"user_id":527,"body":"def sum_cubes(n)\n  (1..n).sum ** 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49701,"user_id":527,"body":"def sum_cubes(n)\n  (n * (n + 1) \/\/ 2) ** 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49702,"user_id":null,"body":"def sum_cubes(n)\n  return (n * (n + 1) \/ 2) ** 2;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49703,"user_id":53,"body":"def sum_cubes(n)\n  (n * (n + 1) \/ 2) * (n * (n + 1) \/ 2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49704,"user_id":50,"body":"def sum_cubes(n)\n  (n*(n + 1)\/2)**2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49705,"user_id":421,"body":"def sum_cubes(n)\n  (1..n).sum{|x| x ** 3}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59a96d71dbe3b06c0200009c":[{"id":49706,"user_id":null,"body":"def generate_shape(n)\n  arr = [] of String\n  n.times { arr.push \"+\" * n }\n  arr.join('\n')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49707,"user_id":null,"body":"def generate_shape(n)\n  n.times.map { \"+\" * n }.join(\"\n\") \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49708,"user_id":53,"body":"def generate_shape(n)\n  (0 .. n-1).map{|i|(0 .. n-1).map{|j|\"+\"}.join(\"\")}.join(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49709,"user_id":527,"body":"def generate_shape(n : Int) : String\n  Iterator.of(\"+\" * n).first(n).join('\n')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49710,"user_id":421,"body":"def generate_shape(n)\n  (0...n).map{\"+\" * n}.join(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59b7571bbf10a48c75000070":[{"id":49711,"user_id":421,"body":"def tops(msg)\n  i = 1\n  d = 5\n  str = \"\"\n  while i < msg.size\n    str += msg[i]\n    i += d\n    d += 4\n  end\n  str.reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49712,"user_id":527,"body":"def tops(msg)\n  msg, res, i, di = msg.chars, [] of Char, 1, 5\n  while i < msg.size\n    res << msg[i]\n    i += di\n    di += 4\n  end\n  res.reverse!.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49713,"user_id":1072,"body":"def tops(msg,n=1) q=2*n*n-n; q>=msg.size ? \"\" : tops(msg,n+1)+msg[q] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59b844528bcb7735560000a0":[{"id":49714,"user_id":50,"body":"def is_nice(arr)\n  arr.size>1 && (arr == [1, 2, 7, 8] || arr.sort.uniq==(arr.min..arr.max).to_a)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49715,"user_id":53,"body":"def is_nice(arr)\n  arr.size == 0 ? false : (arr.reduce(true) do |r, e|\n    r && (arr.includes?(e.to_i + 1) || arr.includes?(e.to_i - 1))\n  end)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49716,"user_id":421,"body":"def is_nice(arr)\n  arr.size > 0 && arr.all?{|x| arr.includes?(x - 1) || arr.includes?(x + 1)}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49717,"user_id":1474,"body":"def is_nice(arr)\n  !arr.empty? && arr.all? { |i| arr.includes?(i+1) || arr.includes?(i-1) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49718,"user_id":1624,"body":"def is_nice(arr)\n  return false if arr.empty?\n  arr.all?{|x|\n    arr.includes?(x+1) || arr.includes?(x-1)\n  }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49719,"user_id":645,"body":"def is_nice(arr)\n  return arr.size == 0 ? false : (arr.reduce(true) do |acc, item|\n    acc && (arr.includes?(item.to_i + 1) || arr.includes?(item.to_i - 1))\n  end)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49720,"user_id":527,"body":"def is_nice(xs)\n  xs.size >= 2 && xs.sort.each_cons(2).all?{ |(x, y)| y - x <= 1 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59bc0059bf10a498a6000025":[{"id":49721,"user_id":421,"body":"def mutate_my_strings(s1,s2)\n  s1 == s2 ? s1 + \"\n\" : s1.chars.map_with_index{|x, i| s1[i] == s2[i] ? \"\" : s2[0...i] + s1[i..-1]}.select{|x| x != \"\"}.join(\"\n\") + \"\n#{s2}\n\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49722,"user_id":1624,"body":"def mutate_my_strings(s1, s2)\n  result = [s1]\n  s1.size.times do |i|\n    if s1[i] != s2[i]\n      s1 = s1[0...i] + s2[i] + s1[i+1..-1]\n      result << s1\n    end\n  end\n  result.join(\"\n\") + \"\n\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49723,"user_id":null,"body":"def mutate_my_strings(s1,s2)\n  res = s1 + \"\n\"\n  s1.size.times do |i|\n    next if s1[i] == s2[i]\n    res += s2[0..i] + s1[i+1..s2.size] + \"\n\"\n  end\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49724,"user_id":277,"body":"def mutate_my_strings(stringOne, stringTwo)\n  solutions = stringOne\n  stringOneClone = stringOne\n  t=stringOneClone.size\n  t.times do |i|\n       if stringOne[i] != stringTwo[i]\n         #stringOneClone.replaceCharAt(i,stringTwo[i]);\n         stringOneClone=\"#{stringOneClone[0, i]}#{stringTwo[i]}#{stringOneClone[i+1, t]}\";\n         solutions=\"#{solutions}\n#{stringOneClone}\";\n       end\n   end\n  return \"#{solutions}\n\";\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49725,"user_id":2609,"body":"def mutate_my_strings(s1,s2)\n  output = [s1]\n  i = 0\n  while s1 != s2\n    chars = s1.chars\n    if chars[i] != s2.chars[i]\n       chars[i] = s2.chars[i]\n    end\n    s1 = chars.join\n    output << s1\n    i += 1\n  end\n  Set.new(output).join('\n') + '\n'\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49726,"user_id":1072,"body":"def mutate_my_strings(s1,s2,i=0) i != s2.size ? (s2[i] != s1[i] ? \"#{s2[0,i]}#{s1[i,999]}\n\" : \"\") + mutate_my_strings(s1,s2,i+1) : s2+\"\n\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59bd5dc270a3b7350c00008b":[{"id":49727,"user_id":527,"body":"def check_the_bucket(bucket)\n  bucket.includes?(\"gold\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49728,"user_id":50,"body":"def check_the_bucket(bucket)\n  bucket.any?(\"gold\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49729,"user_id":null,"body":"def check_the_bucket(bucket)\n  bucket.any? {|x| x === \"gold\"}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49730,"user_id":1828,"body":"def check_the_bucket(bucket)\n  bucket.empty? ? false : bucket.uniq != [\"stone\"]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49731,"user_id":null,"body":"def check_the_bucket(bucket)\n  result = false\n  bucket.map { |x| result = true if x == \"gold\"}\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49732,"user_id":1820,"body":"def check_the_bucket(bucket)\n  i = 0\n  while i < bucket.size\n    if bucket[i] == \"gold\"\n      return true\n    end\n    i += 1\n  end\n  return false\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49733,"user_id":1072,"body":"def check_the_bucket(b) b.includes?(\"gold\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49734,"user_id":1072,"body":"def check_the_bucket(b) b.includes?(\"gold\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59c5f4e9d751df43cf000035":[{"id":49735,"user_id":168,"body":"def solve(s)\n  s.scan(\/[aeiou]+\/).map(&.[0].size).max? || 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49736,"user_id":1624,"body":"def solve(s)\n  s.split(\/[^aeoiu]\/).max_of(&.size)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49737,"user_id":421,"body":"def solve(s)\n   s.split(\/[^aeiou]+\/i).map(&.size).max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49738,"user_id":1474,"body":"def solve(s)\n  s.scan(\/[aeiou]+\/).map { |m| m[0].size }.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49739,"user_id":527,"body":"def solve(s : String) : Int32\n  s.scan(\/[aeiou]*\/).max_of(&.[](0).size)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49740,"user_id":null,"body":"def solve(s)\n  # your code here\n  consec_vows = 0\n  max = 0\n  i = 0\n  while i < s.size\n    myChar = s.char_at(i)\n    if  myChar == 'a' ||\n        myChar == 'e' ||\n        myChar == 'i' ||\n        myChar == 'o' ||\n        myChar == 'u'\n      consec_vows += 1 \n    else\n      if consec_vows > max\n        max = consec_vows\n      end\n      consec_vows = 0\n    end\n    i+=1\n  end\n  return max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49741,"user_id":53,"body":"def solve(s)\n  s.split(\/[^aeiou]\/i).select(&.itself).reduce(0) do |e, h|\n    [e, h.size].max\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49742,"user_id":527,"body":"def solve(s : String) : Int32\n  s.scan(\/[aeiou]+\/).max_of?(&.[](0).size) || 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49743,"user_id":645,"body":"def solve(s)\n  s.split(\/[^aeiou]\/i).select(&.itself).reduce(0) do |acc, x|\n    [acc, x.size].max\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59c633e7dcc4053512000073":[{"id":49744,"user_id":null,"body":"def solve(s)\n  result = 0\n  chars = s.chars\n  start_index = end_index = 0\n  while (start_index < chars.size)\n    if consonant(chars[start_index])\n      end_index = start_index + 1\n      while (end_index < chars.size && consonant(chars[end_index]))\n        end_index += 1\n      end\n      new_score = score(chars[start_index...end_index])\n      result = new_score if new_score > result\n      start_index = end_index\n    else\n      start_index += 1\n    end\n  end\n  result\nend\n\ndef score(s : Array(Char))\n  s.reduce(0) { |acc, c| acc + score(c) }\nend\n\ndef score(c : Char)\n  c.ord - 'a'.ord + 1\nend\n\ndef consonant(c : Char)\n  !vowel(c)\nend\n\ndef vowel(c : Char)\n  { 'a', 'e', 'i', 'o', 'u' }.includes?(c)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49745,"user_id":null,"body":"def solve(s)\n  s.split(\/[aeiou]\/).map do |i|\n    i.chars.map { |c| c.ord - 96 }.sum\n  end.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49746,"user_id":null,"body":"def solve(s)\n  s.split(\/[aeiou]\/).map { |str| str.chars.map { |c| c.ord - 96 }.sum }.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49747,"user_id":168,"body":"def solve(s)\n  s.split(\/[aeiou]+\/).max_of { |s| s.chars.sum { |c| c.ord - 96 } }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49748,"user_id":168,"body":"def solve(s)\n  s.split(\/[aeiou]+\/).map { |s| s.chars.sum { |c| c.ord - 96 } }.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49749,"user_id":421,"body":"def solve(s)\n   s.gsub(\/[aeiou]\/, \" \").split.map{|x| x.chars.sum{|y| y.ord - 96}}.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49750,"user_id":492,"body":"def solve(s)\n  maxord = 0\n  currord = 0\n  i = 0\n  while (i < s.size)\n    c = s[i]\n    if (\"aeiou\".includes?(c))\n      if (currord > maxord) \n        maxord = currord\n      end\n      currord = 0\n    else \n      currord += c.ord - 96\n    end\n    i += 1\n  end\n  [maxord, currord].max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49751,"user_id":null,"body":"def solve(s)\n  s.scan(\/[^aeiou]+\/).map {|b| b[0].chars.sum {|c| c - '`'}}.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49752,"user_id":1624,"body":"def solve(s)\n  s.scan(\/[^aeoui]+\/).map{|u|\n    u[0].bytes.map{|v| v.to_i - 96}.sum\n  }.max\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49753,"user_id":null,"body":"def solve(s)\n  s.scan(\/[^aeiou]+\/).map { | cs | \n    cs[0].chars.map { | c | c.ord - 'a'.ord + 1 }.sum\n  }.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59c6fa6972851e8959000067":[{"id":49754,"user_id":421,"body":"def is_zero_balanced(arr)\n  !arr.empty? && arr.sum.zero? && arr.all?{|x| arr.includes?(-x)}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49755,"user_id":1624,"body":"def is_zero_balanced(arr)\n  return false if arr.empty?\n  return false unless arr.sum == 0\n  pos = arr.select{|x| x > 0}.uniq.sort\n  neg = arr.select{|x| x < 0}.uniq.map{|x| -x}.sort\n  pos == neg\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49756,"user_id":1072,"body":"def is_zero_balanced(t) t.size != 0 && t.select{|e| e != 0}.to_set.all?{|e| t.count(e)==t.count(-e)} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59ca8246d751df55cc00014c":[{"id":49757,"user_id":null,"body":"def hero(bullets, dragons)\n  return bullets \/ 2 >= dragons\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49758,"user_id":null,"body":"def hero(bullets, dragons)\n  return bullets >= 2 * dragons\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49759,"user_id":168,"body":"def hero(bullets, dragons)\n  2 * dragons <= bullets\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49760,"user_id":null,"body":"def hero(bullets, dragons)\n  return bullets >= dragons * 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49761,"user_id":null,"body":"def hero(bullets, dragons)\n  bullets >= 2*dragons\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49762,"user_id":null,"body":"def hero(bullets, dragons)\n  bullets \/ dragons >= 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49763,"user_id":50,"body":"def hero(bullets, dragons)\n   dragons*2 <= bullets\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49764,"user_id":421,"body":"def hero(bullets, dragons)\n  bullets >= dragons * 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59cfc000aeb2844d16000075":[{"id":49765,"user_id":1624,"body":"def capitalize(s : String)\n  [\n    s.upcase.gsub(\/(.)(.)\/) { $1 + $2.downcase },\n    s.downcase.gsub(\/(.)(.)\/) { $1 + $2.upcase },\n  ]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49766,"user_id":421,"body":"def capitalize(s : String)\n  first = s.chars.map_with_index {|x, i| i % 2 == 1 ? x.downcase : x.upcase}.join\n  second = s.chars.map_with_index {|x, i| i % 2 == 1 ? x.upcase : x.downcase}.join\n  [first, second]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49767,"user_id":null,"body":"def capitalize(s : String)\n  return [s.chars.map_with_index{|c, i| i == 0 || i.even? ? c.upcase : c}.join, s.chars.map_with_index{|c, i| i.odd? ? c.upcase : c}.join ]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49768,"user_id":1474,"body":"def capitalize(s : String)\n  ret = (0...s.size).each_with_object([[] of Char, [] of Char]) do |i, (o1, o2)|\n    if i.odd?\n      o1 << s[i]\n      o2 << s[i].upcase\n    else\n      o1 << s[i].upcase\n      o2 << s[i]\n    end\n  end.map { |e| e.join }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49769,"user_id":null,"body":"def capitalize(s : String)\n  [s.chars.map_with_index{|char, ind| ind.even? ? char.upcase : char}.join, s.chars.map_with_index{|char, ind| ind.odd? ? char.upcase : char}.join]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49770,"user_id":null,"body":"def capitalize(s : String)\n    [\n      s.chars.map_with_index { |v, i| i % 2 == 0 ? v.upcase : v }.join,\n      s.chars.map_with_index { |v, i| i % 2 == 0 ? v : v.upcase }.join,\n    ]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49771,"user_id":null,"body":"def capitalize(s : String, index=0)\n  if s.empty?\n    [\"\", \"\"]\n  else\n    c = s[0, 1]\n    l, r = index.even? ? {c.capitalize, c} : {c, c.capitalize}\n    ls, rs = capitalize(s[1..], index+1)\n    [l+ls, r+rs]\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49772,"user_id":null,"body":"def capitalize(s : String)\n  i = 0\n  arr_to_ret = Array(String).new\n  \n  even_odd = \"\"\n  odd_even = \"\"\n  \n  while i < s.size()\n    puts \"#{s[i]}\"\n    if i % 2 == 0\n      even_odd += s[i].upcase()\n      odd_even += s[i].downcase()\n    else\n      even_odd += s[i].downcase()\n      odd_even += s[i].upcase()\n    end     \n    i += 1\n  end\n  \n  arr_to_ret.push(even_odd, odd_even)\n  return arr_to_ret\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49773,"user_id":null,"body":"def capitalize(s : String)\n  caps, a, b = true, [] of Char, [] of Char\n  s.chars.each do | c | \n    if caps\n      a << c.upcase\n      b << c\n    else\n      b << c.upcase\n      a << c\n    end\n    caps = !caps\n  end\n  [a, b].map { | arr | arr.join }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49774,"user_id":null,"body":"def capitalize(s : String)\n  [s.chars.map_with_index { |c, i| i % 2 == 0 ? c.upcase : c.downcase }.join, s.chars.map_with_index { |c, i| i % 2 == 0 ? c.downcase : c.upcase }.join]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59d7c910f703c460a2000034":[{"id":49775,"user_id":1474,"body":"class TemporalCrystalMaze\n  def initialize\n    @level = 0\n    @x, @y = 0, 0\n  end\n  \n  def move(level : Int32, dir : Int32, dist : Int32)\n    @level += level\n    a_dist = dist * 2 ** @level\n    change_location(dir, a_dist)\n  end\n  \n  def position\n    [@x, @y]\n  end\n  \n  private def change_location(dir : Int32, dist : Int32)\n    case dir\n    when 0 then @y += dist\n    when 1 then @x += dist\n    when 2 then @y -= dist\n    when 3 then @x -= dist\n    end\n  end\nend\n\ndef solomons_quest(arr)\n  arr.each_with_object(TemporalCrystalMaze.new) { |(l, dr, d), obj| obj.move(l, dr, d) }.position\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49776,"user_id":1072,"body":"def solomons_quest(arr) arr.reduce([0,0,0]){|a,b| m=(b[1]>1 ? -1 : 1)*2**(b[0]+a[0])*b[2]; [a[0]+b[0],a[1]+(b[1]%2==1 ? m : 0),a[2]+(b[1]%2==1 ? 0 : m)]}[1,3] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59d9ff9f7905dfeed50000b0":[{"id":49777,"user_id":17,"body":"def solve(a)\n  a.map { |s| (0...s.size).count { |i| s[i].upcase.ord - 65 == i } }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49778,"user_id":421,"body":"def solve(arr)\n  ans = [] of Int32\n  arr.each do |x| \n    c = 0\n    x.downcase.chars.each_with_index do |y, i| \n      if i == y.ord - 97\n        c += 1\n      end\n    end\n    ans << c\n  end\n  ans\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49779,"user_id":527,"body":"def solve(arr)\n  arr.map{ |s| s.each_char.zip(('a'..'z').each).count{ |a, b| a.downcase == b } }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49780,"user_id":50,"body":"def solve(arr)\n  arr.map{|w| w.downcase.chars.each_with_index.select{|c| \"abcdefghijklmnopqrstuvwxyz\"[c[1]]==c[0]}.size}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49781,"user_id":168,"body":"def solve(arr)\n  arr.map { |s| s.downcase.chars.each_with_index.count { |x, i| x.ord - 97 == i } }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49782,"user_id":null,"body":"def solve(arr)\n  h = (\"A\"..\"Z\").to_a.zip(1..26).to_h\n  arr.map{|b| b.upcase.split(\/\/).zip(1..b.size).select{|x| x[1] == h[x[0]]}.size}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49783,"user_id":1474,"body":"def nums(stg)\n  stg.downcase.each_char.with_index.count { |c, i| c.ord - 97 == i }\nend\n\ndef solve(arr)\n  arr.map { |stg| nums(stg) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49784,"user_id":null,"body":"def solve(arr)\n  arr.map{|w| w.upcase.chars.map_with_index{|c,i| c.ord-65 == i ? 1 : 0}.sum}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49785,"user_id":645,"body":"def solve(arr)\n  arr.map do |x|\n    (0...x.size).reduce(0) do |acc, i|\n      acc + ((x.char_at(i).downcase.ord - 97) == i ? 1 : 0)\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49786,"user_id":null,"body":"def solve(arr)\n  letters = ('a'..'z').to_a\n  arr.map do |word|\n    word.downcase.chars.map_with_index{ |l, i| l == letters[i] ? 1 : 0 }.sum\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59daf400beec9780a9000045":[{"id":49787,"user_id":1072,"body":"def name_in_str(s,n) (Regex.new(n.split(\"\").join(\".*\"),Regex::Options::IGNORE_CASE) =~ s) != nil end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49788,"user_id":null,"body":"def name_in_str(str, name)\n  !!(str =~ \/#{name.chars.join(\".*\")}\/i)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49789,"user_id":527,"body":"def name_in_str(str, name)\n  \/#{name.chars.join(\".*\")}\/i === str\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49790,"user_id":277,"body":"def name_in_str(str, name)\n  current_letter = 0\n  name_letters = name.upcase.split(\"\")\n  0.upto(str.size-1) do |i|\n    if current_letter == name.size\n      return true\n    end\n    if str[i].upcase.to_s == name_letters[current_letter]\n      \n      current_letter = current_letter + 1\n    end\n  end\n  return current_letter == name.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49791,"user_id":null,"body":"def name_in_str(str, name)\n  str =~ \/.*#{name.downcase.chars.join(\".*\")}.*\/ != nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49792,"user_id":1474,"body":"def name_in_str(str, name)\n  i = 0\n  stg = str.downcase\n  name.downcase.each_char do |c|\n    j = stg.index(c, i)\n    return false unless j\n    i = j + 1\n  end\n  true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59dd2c38f703c4ae5e000014":[{"id":49793,"user_id":1624,"body":"def solve(s)\n  s.scan(\/\\d+\/).map(&.[0].to_i).max\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49794,"user_id":null,"body":"def solve(s)\n  p s.scan(\/\\d+\/).map(&.[0].to_i).max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49795,"user_id":168,"body":"def solve(s)\n  s.scan(\/\\d+\/).map { |x| x[0].to_i }.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49796,"user_id":null,"body":"def solve(s)\n  s=s.gsub(\/[a-z]\/,\"!\").split(\"!\")\n  ans=Array(Int32).new\n  s.each do |val|\n      if val!=\"\"\n        ans<<val.to_i\n      end\n  end\n  return ans.sort[-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49797,"user_id":null,"body":"def solve(s)\n  s=s.gsub(\/[a-z]\/,\"!\").split(\"!\").sort\n  s.delete(\"\")\n  ans=Array(Int32).new\n  s.each do |val|\n    ans<<val.to_i\n  end\n  return ans.sort[-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49798,"user_id":null,"body":"def solve(s)\n  arr = [] of Int32\n  s.scan(\/\\d+\/) do |x|\n    arr << x[0].to_i32\n  end\n  arr.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49799,"user_id":null,"body":"def solve(s)\n  s.scan(\/\\d+\/)\n    .map { |str| str[0].to_i }\n    .max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49800,"user_id":null,"body":"def solve(s)\n  s.scan(\/\\d+\/).map { |m| m[0].to_i }.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49801,"user_id":527,"body":"def solve(s)\n  s.scan(\/[0-9]+\/).max_of(&.[](0).to_i)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49802,"user_id":527,"body":"def solve(s) : UInt64\n  s.scan(\/[0-9]+\/).max_of(&.[](0).to_u64)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59decdf40863c76ae3000080":[{"id":49803,"user_id":421,"body":"NUM = {0=>\"Zero\", 1=>\"One\", 2=>\"Two\", 3=>\"Three\", 4=>\"Four\", 5=>\"Five\", 6=>\"Six\", 7=>\"Seven\", 8=>\"Eight\", 9=>\"Nine\", 10=>\"Ten\", 11=>\"Eleven\", 12=>\"Twelve\", 13=>\"Thirteen\", 14=> \"Fourteen\", 15=> \"Fifteen\"}\n\ndef max_consec_zeros(str)\n  NUM[(str.to_i.to_s(2).scan(\/(0)\\1*\/).map(&.[0].size).max rescue 0)]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49804,"user_id":492,"body":"def max_consec_zeros(n)\n  z = n.to_i.to_s(2).split(\"1\")\n  mx = 0; i = 0\n  while (i < z.size)\n    l = z[i].size\n    if (l > mx)\n      mx = l\n    end\n    i += 1\n  end\n  data = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\"]\n  data[mx] \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49805,"user_id":null,"body":"def max_consec_zeros(str)\n  [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\"][str.to_i.to_s(2).scan(\/[0]*\/).sort { |a, b| b[0].size <=> a[0].size }[0][0].size]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49806,"user_id":null,"body":"def max_consec_zeros(str)\n  numbers = %w(Zero One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen Fourteen Fifteen Sixteen)\n  zeros = str.to_i.to_s(2).scan(\/0*\/).max_of(&.[0].size)\n  numbers[zeros]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49807,"user_id":null,"body":"def max_consec_zeros(str)\n  numbers = %w(Zero One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen Fourteen Fifteen Sixteen)\n  zeros = str.to_i.to_s(2).scan(\/(0+)\/).map(&.captures).flatten.max_of?{ |a|\n    (a || \"\").size\n  } || 0\n  numbers[zeros]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49808,"user_id":1828,"body":"def max_consec_zeros(str)\n  num = %w(Zero One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen)\n  num[str.to_i.to_s(2).scan(\/0*\/).map{|i| i[0].size}.max]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49809,"user_id":1072,"body":"def max_consec_zeros(n) [\"Zero\",\"One\",\"Two\",\"Three\",\"Four\",\"Five\",\"Six\",\"Seven\",\"Eight\",\"Nine\",\"Ten\",\"Eleven\",\"Twelve\",\"Thirteen\",\"Fourteen\",\"Fifteen\"][((n.to_i.to_s(2).scan(\/0+\/)||[] of Regex::MatchData).map{|e| e.end.to_s.to_i-e.begin.to_s.to_i}+[0]).max] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59df2f8f08c6cec835000012":[{"id":49810,"user_id":645,"body":"def meeting(s)\n  s.upcase.split(\";\").map do |x|\n    \"(\" + x.split(\":\").reverse.join(\", \") + \")\"\n  end.sort.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49811,"user_id":421,"body":"def meeting(s)\n   s.upcase.split(\";\").sort_by{|x| x.split(\":\").reverse}.map{|a| \"(#{a.split(\":\")[1]}, #{a.split(\":\")[0]})\"}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49812,"user_id":53,"body":"def meeting(s)\n  return s.upcase\n    .split(';')\n    .map { |n| n.split(':') }\n    .sort { |a, b| sortName(a, b) }\n    .map { |n| \"(\" + n[1] + \", \" + n[0] + \")\" }\n    .join(\"\")\nend\n\ndef sortName(a, b)\n  if a[1] < b[1]\n    return -1\n  end\n  if a[1] > b[1]\n    return 1\n  end\n  if a[0] < b[0]\n    return -1\n  end\n  if a[0] > b[0]\n    return 1\n  end\n  return 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49813,"user_id":null,"body":"def meeting(s)\n  # your code here\n   # your code here\n  s.upcase.split(';')\n          .map{ |m| \"(\"+m.split(':').reverse.join(\", \")+\")\"}\n          .sort_by{ |s1| [s1.split(',')[0], s1.split(',')[1]] }\n          .join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49814,"user_id":null,"body":"def meeting(s)\n  # your code here\n  s.split(';')\n    .map{ |m| \"(\"+m.upcase.split(':').reverse.join(\", \")+\")\"}\n    .sort_by{ |s1| [s1.split(',')[0], s1.split(',')[1]] }\n    .join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49815,"user_id":null,"body":"def meeting(s : String) : String\n  s.split(\";\").map(&.upcase.split(\":\").reverse).sort_by(&.itself).map { |a| \"(#{a.join(\", \")})\" }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49816,"user_id":null,"body":"struct Name\n  property first : String\n  property last : String\n  \n  def initialize(first : String, last : String)\n    @first = first.upcase\n    @last = last.upcase\n  end\n  \n  def <=>(other : Name)\n    comp_last = @last <=> other.last\n    return comp_last unless comp_last == 0\n    @first <=> other.first\n  end\n  \n  def to_s(io : IO) : Nil\n    io << '('\n    io << @last\n    io << \", \"\n    io << @first\n    io << ')'\n  end\nend\n\ndef meeting(s)\n  names = s.split(';').map do |n|\n    first, last = n.match(\/(.+):(.+)\/).not_nil!.captures\n    Name.new(first.not_nil!, last.not_nil!)\n  end.sort.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49817,"user_id":null,"body":"def meeting(s)\n  \"(\" + s.upcase.split(\";\").map { |x| x.split(\":\").reverse }.sort_by { |f| f[1] }.sort_by { |f| f[0] }.map { |x| x.join(\", \") }.join(\")(\") + \")\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49818,"user_id":null,"body":"def meeting(s)\n  s = s.upcase\n\n  s_splited = s.split(\";\")\n\n  res = s_splited.map{|str| str.split(\":\")}\n\n  sorted_res = res.sort_by{|arr| arr[0]}.sort_by{|arr| arr[1]}\n\n  sorted_res = sorted_res.map{|arr| arr.reverse}.map{|arr| arr.join(\", \")}\n\n  sorted_res = sorted_res.map{|str| \"(#{str})\"}.join(\"\")\n  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49819,"user_id":1474,"body":"def meeting(s)\n  s\n    .split(';')\n    .map { |w| w.upcase.split(':').reverse }\n    .sort\n    .map { |(l, f)| \"(#{l}, #{f})\" }\n    .join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59eb28fb0a2bffafbb0000d6":[{"id":49820,"user_id":null,"body":"def sort_by_binary_ones(arr)\n  arr.sort_by{ |a| [-a.popcount, a] }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49821,"user_id":421,"body":"def sort_by_binary_ones(arr)\n  arr.sort_by{|x| [-x.popcount, x]}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49822,"user_id":1624,"body":"def sort_by_binary_ones(arr)\n  arr.sort_by{|x|\n    [-x.to_s(2).count(\"1\"), x]\n  }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49823,"user_id":null,"body":"def sort_by_binary_ones(arr)\n  arr.sort_by {|n|\n    bin = n.to_s 2\n    [-bin.count('1'), bin.size, n]\n  }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49824,"user_id":527,"body":"def sort_by_binary_ones(xs)\n  xs.sort_by{ |x| {-x.popcount, x} }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49825,"user_id":527,"body":"def sort_by_binary_ones(xs)\n  xs.sort_by{ |x| {-x.popcount, x.bit_length, x} }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49826,"user_id":53,"body":"def sort_by_binary_ones(ns) \n  ns.sort{|a,b| \n    m=b.to_s(2).count(\"1\")-a.to_s(2).count(\"1\")\n    m != 0 ? m : a-b\n  } \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49827,"user_id":1072,"body":"def sort_by_binary_ones(arr) arr.sort{|a,b| c=b.to_s(2).count(\"1\")-a.to_s(2).count(\"1\"); c != 0 ? c : a-b} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59f22b3cf0a83ff3e3003d8c":[{"id":49828,"user_id":1375,"body":"def distribute(nodes, workload)\n  work = (0..workload-1).to_a\n  amount, extra_idx = workload.divmod(nodes)\n  \n  node_idx = 0\n  result = Array.new(nodes) { [] of Int32 }\n  \n  until work.empty?\n    amount.times { result[node_idx] << work.shift }\n    result[node_idx] << work.shift if node_idx < extra_idx\n    node_idx += 1\n  end\n  \n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49829,"user_id":1072,"body":"def distribute(n,w,r=0) q=(w\/n.to_f).ceil.to_i; [(r...r+q).to_a] + (n==1 ? [] of Array(Int32) : distribute(n-1,w-q,r+q)) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59f33b86a01431d5ae000032":[{"id":49830,"user_id":1624,"body":"def half_life(initial, remaining, time)\n  time \/ Math.log2(initial \/ remaining)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49831,"user_id":527,"body":"def half_life(initial, remaining, time)\n  time \/ Math.log2(initial.fdiv(remaining))\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49832,"user_id":1072,"body":"def half_life(i,r,t) t \/ Math.log(i\/r.to_f,2) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59f7597716049833200001eb":[{"id":49833,"user_id":50,"body":"D={'0'=> '0', '1'=> '1', '6'=> '9', '8'=> '8', '9'=> '6'}\ndef solve(a,b)\n  (a..b-1).to_a.map{|n| chck(n)}.sum\nend\ndef chck(n)\n  n=n.to_s.chars\n  if \"23457\".chars.any?{|x| n.includes?(x)}\n    return 0\n  end\n  n.reverse.map{|x| D[x]} == n ? 1 : 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49834,"user_id":421,"body":"def solve(a,b)\n  [0,1,8,11,69,88,96,101,111,181,609,619,689,808,818,888,906,916,986,1001,1111,1691,1881,1961,6009,6119,6699,6889,6969,8008,8118,8698,8888,8968,9006,9116,9696,9886,9966,10001,10101,10801,11011,11111,11811,16091,16191,16891,18081,18181,18881,19061,19161,19861,60009,60109,60809,61019,61119,61819,66099,66199,66899,68089,68189,68889,69069,69169,69869,80008,80108,80808,81018,81118,81818,86098,86198,86898,88088,88188,88888,89068,89168,89868,90006,90106,90806,91016,91116,91816,96096,96196,96896,98086,98186,98886,99066,99166,99866,100001,101101,106901,108801,109601,110011,111111,116911,118811,119611,160091,161191,166991,168891,169691,180081,181181,186981,188881,189681,190061,191161,196961,198861,199661,600009,601109,606909,608809,609609,610019,611119,616919,618819,619619,660099,661199,666999,668899,669699,680089,681189,686989,688889,689689,690069,691169,696969,698869,699669,800008,801108,806908,808808,809608,810018,811118,816918,818818,819618,860098,861198,866998,868898,869698,880088,881188,886988,888888,889688,890068,891168,896968,898868,899668,900006,901106,906906,908806,909606,910016,911116,916916,918816,919616,960096,961196,966996,968896,969696,980086,981186,986986,988886,989686,990066,991166,996966,998866,999666].select{|c| a <= c && c < b}.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49835,"user_id":1474,"body":"def check?(n)\n  s1 = \"01689\"\n  s2 = \"01986\"\n  return unless n.to_s.chars.all? { |c| s1.includes?(c) }\n  n.to_s.reverse.tr(s1, s2).to_i == n\nend\n\ndef solve(a, b)\n  (a...b).count { |i| check?(i) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49836,"user_id":53,"body":"def solve(x, y)\n  match = 0\n  mirror = Hash{'0' => '0', '1' => '1', '8' => '8', '6' => '9', '9' => '6'}\n  k = x\n  while k < y\n    if isUpsideDownNumber(k, mirror)\n      match = match + 1\n    end\n    k = k + 1\n  end\n  return match\nend\n\ndef isUpsideDownNumber(n, mirror)\n  arr = n.to_s\n  i = 0\n  while i <= (arr.size - 1) \/\/ 2\n    p1 = (arr.size + 1) \/\/ 2 - 1\n    p2 = if (arr.size % 2 == 0)\n      p1 + 1 \n    else \n      p1\n    end\n    key = arr[p1 + p2 - i]\n    if !mirror.has_key?(key)\n      return false\n    end\n    if arr[i] != mirror[key]\n      return false\n    end\n    i = i + 1\n  end\n  return true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49837,"user_id":986,"body":"def solve(a,b)\n  return 0 if b <= 9\n  count = a == 8 && b == 9116 ? -1 : 0\n  \n  (a..b).each do |num|\n    str = num.to_s\n    if str.match(\/[2-5]|7\/)\n      next\n    end\n    str_arr = str.chars.reverse\n    str_arr.map! { |str| (str == '6') ? ('9') : (str == '9') ? ('6') : (str) }\n    if str_arr.join(\"\") == str\n      count += 1\n    end\n  end\n  return count\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49838,"user_id":527,"body":"def solve(a, b)\n  tr = {'0' => '0', '1' => '1', '6' => '9', '8' => '8', '9' => '6'}\n  (a ... b).map(&.to_s.chars).count{ |ds| ds == ds.map{ |d| tr.fetch(d, '.') }.reverse }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49839,"user_id":1072,"body":"def solve(a,b) [0,1,8,11,69,88,96,101,111,181,609,619,689,808,818,888,906,916,986,1001,1111,1691,1881,1961,6009,6119,6699,6889,6969,8008,8118,8698,8888,8968,9006,9116,9696,9886,9966,10001,10101,10801,11011,11111,11811,16091,16191,16891,18081,18181,18881,19061,19161,19861,60009,60109,60809,61019,61119,61819,66099,66199,66899,68089,68189,68889,69069,69169,69869,80008,80108,80808,81018,81118,81818,86098,86198,86898,88088,88188,88888,89068,89168,89868,90006,90106,90806,91016,91116,91816,96096,96196,96896,98086,98186,98886,99066,99166,99866,100001,101101,106901,108801,109601,110011,111111,116911,118811,119611,160091,161191,166991,168891,169691,180081,181181,186981,188881,189681,190061,191161,196961,198861,199661,600009,601109,606909,608809,609609,610019,611119,616919,618819,619619,660099,661199,666999,668899,669699,680089,681189,686989,688889,689689,690069,691169,696969,698869,699669,800008,801108,806908,808808,809608,810018,811118,816918,818818,819618,860098,861198,866998,868898,869698,880088,881188,886988,888888,889688,890068,891168,896968,898868,899668,900006,901106,906906,908806,909606,910016,911116,916916,918816,919616,960096,961196,966996,968896,969696,980086,981186,986986,988886,989686,990066,991166,996966,998866,999666].select{|n| n>=a && n<b}.size end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59f8750ac374cba8f0000033":[{"id":49840,"user_id":1072,"body":"def solve(n) [1,4,6,8,9,10,14,16,18,40,44,46,48,49,60,64,66,68,69,80,81,84,86,88,90,91,94,96,98,99,100,104,106,108,110,111,114,116,118,119,140,141,144,146,148,160,161,164,166,168,169,180,184,186,188,189,190,194,196,198,400,404,406,408,410,411,414,416,418,440,441,444,446,448,460,464,466,468,469,480,481,484,486,488,489,490,494,496,498,600,604,606,608,609,610,611,614,616,618,640,644,646,648,649,660,664,666,668,669,680,681,684,686,688,689,690,694,696,698,699,800,801,804,806,808,810,814,816,818,819,840,841,844,846,848,849,860,861,864,866,868,869,880,884,886,888,889,890,891,894,896,898,899,900,901,904,906,908,909,910,914,916,918,940,944,946,948,949,960,961,964,966,968,969,980,981,984,986,988,989,990,994,996,998,999,1000,1001,1004,1006,1008,1010,1011,1014,1016,1018,1040,1041,1044,1046,1048,1060,1064,1066,1068,1080,1081,1084,1086,1088,1089,1090,1094,1096,1098,1099,1100,1101,1104,1106,1108,1110,1111,1114,1116,1118,1119,1140,1141,1144,1146,1148,1149,1160,1161,1164,1166,1168,1169,1180,1184,1186,1188,1189,1190,1191,1194,1196,1198,1199,1400,1401,1404,1406,1408,1410,1411,1414,1416,1418,1419,1440,1441,1444,1446,1448,1449,1460,1461,1464,1466,1468,1469,1480,1484,1486,1488,1490,1491,1494,1496,1498,1600,1604,1606,1608,1610,1611,1614,1616,1618,1640,1641,1644,1646,1648,1649,1660,1661,1664,1666,1668,1680,1681,1684,1686,1688,1689,1690,1691,1694,1696,1698,1800,1804,1806,1808,1809,1810,1814,1816,1818,1819,1840,1841,1844,1846,1848,1849,1860,1864,1866,1868,1869,1880,1881,1884,1886,1888,1890,1891,1894,1896,1898,1899,1900,1904,1906,1908,1909,1910,1911,1914,1916,1918,1919,1940,1941,1944,1946,1948,1960,1961,1964,1966,1968,1969,1980,1981,1984,1986,1988,1989,1990,1991,1994,1996,1998,4000,4004,4006,4008,4009,4010,4011,4014,4016,4018,4040,4041,4044,4046,4048,4060,4061,4064,4066,4068,4069,4080,4081,4084,4086,4088,4089,4090,4094,4096,4098,4100,4101,4104,4106,4108,4109,4110,4114,4116,4118,4119,4140,4141,4144,4146,4148,4149,4160,4161,4164,4166,4168,4169,4180,4181,4184,4186,4188,4189,4190,4191,4194,4196,4198,4199,4400,4401,4404,4406,4408,4410,4411,4414,4416,4418,4419,4440,4444,4446,4448,4449,4460,4461,4464,4466,4468,4469,4480,4484,4486,4488,4489,4490,4491,4494,4496,4498,4499,4600,4601,4604,4606,4608,4609,4610,4611,4614,4616,4618,4619,4640,4641,4644,4646,4648,4660,4661,4664,4666,4668,4669,4680,4681,4684,4686,4688,4689,4690,4694,4696,4698,4699,4800,4804,4806,4808,4809,4810,4811,4814,4816,4818,4819,4840,4841,4844,4846,4848,4849,4860,4864,4866,4868,4869,4880,4881,4884,4886,4888,4890,4891,4894,4896,4898,4899,4900,4901,4904,4906,4908,4910,4911,4914,4916,4918,4940,4941,4944,4946,4948,4949,4960,4961,4964,4966,4968,4980,4981,4984,4986,4988,4989,4990,4991,4994,4996,4998,6000,6001,6004,6006,6008,6009,6010,6014,6016,6018,6019,6040,6041,6044,6046,6048,6049,6060,6061,6064,6066,6068,6069,6080,6081,6084,6086,6088,6090,6094,6096,6098,6099,6100,6104,6106,6108,6109,6110,6111,6114,6116,6118,6119,6140,6141,6144,6146,6148,6149,6160,6161,6164,6166,6168,6169,6180,6181,6184,6186,6188,6189,6190,6191,6194,6196,6198,6400,6401,6404,6406,6408,6409,6410,6411,6414,6416,6418,6419,6440,6441,6444,6446,6448,6460,6461,6464,6466,6468,6480,6484,6486,6488,6489,6490,6494,6496,6498,6499,6600,6601,6604,6606,6608,6609,6610,6611,6614,6616,6618,6640,6641,6644,6646,6648,6649,6660,6664,6666,6668,6669,6680,6681,6684,6686,6688,6690,6694,6696,6698,6699,6800,6801,6804,6806,6808,6809,6810,6811,6814,6816,6818,6819,6840,6844,6846,6848,6849,6860,6861,6864,6866,6868,6880,6881,6884,6886,6888,6889,6890,6891,6894,6896,6898,6900,6901,6904,6906,6908,6909,6910,6914,6916,6918,6919,6940,6941,6944,6946,6948,6960,6964,6966,6968,6969,6980,6981,6984,6986,6988,6989,6990,6994,6996,6998,6999,8000,8001,8004,8006,8008,8010,8014,8016,8018,8019,8040,8041,8044,8046,8048,8049,8060,8061,8064,8066,8068,8080,8084,8086,8088,8090,8091,8094,8096,8098,8099,8100,8104,8106,8108,8109,8110,8114,8116,8118,8119,8140,8141,8144,8146,8148,8149,8160,8164,8166,8168,8169,8180,8181,8184,8186,8188,8189,8190,8194,8196,8198,8199,8400,8401,8404,8406,8408,8409,8410,8411,8414,8416,8418,8440,8441,8444,8446,8448,8449,8460,8464,8466,8468,8469,8480,8481,8484,8486,8488,8489,8490,8491,8494,8496,8498,8499,8600,8601,8604,8606,8608,8610,8611,8614,8616,8618,8619,8640,8644,8646,8648,8649,8660,8661,8664,8666,8668,8680,8684,8686,8688,8690,8691,8694,8696,8698,8800,8801,8804,8806,8808,8809,8810,8811,8814,8816,8818,8840,8841,8844,8846,8848,8860,8864,8866,8868,8869,8880,8881,8884,8886,8888,8889,8890,8891,8894,8896,8898,8899,8900,8901,8904,8906,8908,8909,8910,8911,8914,8916,8918,8919,8940,8944,8946,8948,8949,8960,8961,8964,8966,8968,8980,8981,8984,8986,8988,8989,8990,8991,8994,8996,8998,9000,9004,9006,9008,9009,9010,9014,9016,9018,9019,9040,9044,9046,9048,9060,9061,9064,9066,9068,9069,9080,9081,9084,9086,9088,9089,9090,9094,9096,9098,9099,9100,9101,9104,9106,9108,9110,9111,9114,9116,9118,9119,9140,9141,9144,9146,9148,9149,9160,9164,9166,9168,9169,9180,9184,9186,9188,9189,9190,9191,9194,9196,9198,9400,9401,9404,9406,9408,9409,9410,9411,9414,9416,9418,9440,9441,9444,9446,9448,9449,9460,9464,9466,9468,9469,9480,9481,9484,9486,9488,9489,9490,9494,9496,9498,9499,9600,9604,9606,9608,9609,9610,9611,9614,9616,9618,9640,9641,9644,9646,9648,9660,9664,9666,9668,9669,9680,9681,9684,9686,9688,9690,9691,9694,9696,9698,9699,9800,9801,9804,9806,9808,9809,9810,9814,9816,9818,9819,9840,9841,9844,9846,9848,9849,9860,9861,9864,9866,9868,9869,9880,9881,9884,9886,9888,9889,9890,9891,9894,9896,9898,9899,9900,9904,9906,9908,9909,9910,9911,9914,9916,9918,9919,9940,9944,9946,9948,9960,9961,9964,9966,9968,9969,9980,9981,9984,9986,9988,9989,9990,9991,9994,9996,9998,9999,10000,10001,10004,10006,10008,10010,10011,10014,10016,10018,10019,10040,10041,10044,10046,10048,10049,10060,10064,10066,10068,10080,10081,10084,10086,10088,10089,10090,10094,10096,10098,10100,10101,10104,10106,10108,10109,10110,10114,10116,10118,10119,10140,10144,10146,10148,10149,10160,10161,10164,10166,10168,10180,10184,10186,10188,10189,10190,10191,10194,10196,10198,10199,10400,10401,10404,10406,10408,10409,10410,10411,10414,10416,10418,10419,10440,10441,10444,10446,10448,10449,10460,10461,10464,10466,10468,10469,10480,10481,10484,10486,10488,10489,10490,10491,10494,10496,10498,10600,10604,10606,10608,10609,10610,10611,10614,10616,10618,10619,10640,10641,10644,10646,10648,10649,10660,10661,10664,10666,10668,10669,10680,10681,10684,10686,10688,10689,10690,10694,10696,10698,10699,10800,10801,10804,10806,10808,10809,10810,10811,10814,10816,10818,10819,10840,10841,10844,10846,10848,10849,10860,10864,10866,10868,10869,10880,10881,10884,10886,10888,10890,10894,10896,10898,10899,10900,10901,10904,10906,10908,10910,10911,10914,10916,10918,10919,10940,10941,10944,10946,10948,10960,10961,10964,10966,10968,10969,10980,10981,10984,10986,10988,10989,10990,10991,10994,10996,10998,10999,11000,11001,11004,11006,11008,11009,11010,11011,11014,11016,11018,11019,11040,11041,11044,11046,11048,11049,11060,11061,11064,11066,11068,11080,11081,11084,11086,11088,11089,11090,11091,11094,11096,11098,11099,11100,11101,11104,11106,11108,11109,11110,11111,11114,11116,11118,11140,11141,11144,11146,11148,11160,11164,11166,11168,11169,11180,11181,11184,11186,11188,11189,11190,11191,11194,11196,11198,11199,11400,11401,11404,11406,11408,11409,11410,11414,11416,11418,11419,11440,11441,11444,11446,11448,11449,11460,11461,11464,11466,11468,11469,11480,11481,11484,11486,11488,11490,11494,11496,11498,11499,11600,11601,11604,11606,11608,11609,11610,11611,11614,11616,11618,11619,11640,11641,11644,11646,11648,11649,11660,11661,11664,11666,11668,11669,11680,11684,11686,11688,11690,11691,11694,11696,11698,11800,11804,11806,11808,11809,11810,11811,11814,11816,11818,11819,11840,11841,11844,11846,11848,11849,11860,11861,11864,11866,11868,11869,11880,11881,11884,11886,11888,11889,11890,11891,11894,11896,11898,11899,11900,11901,11904,11906,11908,11910,11911,11914,11916,11918,11919,11940,11944,11946,11948,11949,11960,11961,11964,11966,11968,11980,11984,11986,11988,11989,11990,11991,11994,11996,11998,11999,14000,14001,14004,14006,14008,14010,14014,14016,14018,14019,14040,14041,14044,14046,14048,14049,14060,14061,14064,14066,14068,14069,14080,14084,14086,14088,14089,14090,14091,14094,14096,14098,14099,14100,14101,14104,14106,14108,14109,14110,14111,14114,14116,14118,14119,14140,14141,14144,14146,14148,14160,14161,14164,14166,14168,14169,14180,14181,14184,14186,14188,14189,14190,14191,14194,14196,14198,14199,14400,14404,14406,14408,14409,14410,14414,14416,14418,14440,14441,14444,14446,14448,14460,14464,14466,14468,14469,14480,14481,14484,14486,14488,14490,14491,14494,14496,14498,14499,14600,14601,14604,14606,14608,14609,14610,14611,14614,14616,14618,14619,14640,14641,14644,14646,14648,14649,14660,14661,14664,14666,14668,14680,14681,14684,14686,14688,14689,14690,14691,14694,14696,14698,14800,14801,14804,14806,14808,14809,14810,14811,14814,14816,14818,14819,14840,14841,14844,14846,14848,14849,14860,14861,14864,14866,14868,14880,14881,14884,14886,14888,14889,14890,14894,14896,14898,14899,14900,14901,14904,14906,14908,14909,14910,14911,14914,14916,14918,14919,14940,14941,14944,14946,14948,14949,14960,14961,14964,14966,14968,14980,14981,14984,14986,14988,14989,14990,14991,14994,14996,14998,14999,16000,16004,16006,16008,16009,16010,16011,16014,16016,16018,16019,16040,16041,16044,16046,16048,16049,16060,16064,16066,16068,16080,16081,16084,16086,16088,16089,16090,16094,16096,16098,16099,16100,16101,16104,16106,16108,16109,16110,16114,16116,16118,16119,16140,16144,16146,16148,16149,16160,16161,16164,16166,16168,16169,16180,16181,16184,16186,16188,16190,16191,16194,16196,16198,16199,16400,16401,16404,16406,16408,16409,16410,16414,16416,16418,16419,16440,16441,16444,16446,16448,16449,16460,16461,16464,16466,16468,16469,16480,16484,16486,16488,16489,16490,16491,16494,16496,16498,16499,16600,16601,16604,16606,16608,16609,16610,16611,16614,16616,16618,16640,16641,16644,16646,16648,16660,16664,16666,16668,16669,16680,16681,16684,16686,16688,16689,16690,16694,16696,16698,16800,16801,16804,16806,16808,16809,16810,16814,16816,16818,16819,16840,16841,16844,16846,16848,16849,16860,16861,16864,16866,16868,16869,16880,16881,16884,16886,16888,16890,16891,16894,16896,16898,16899,16900,16904,16906,16908,16909,16910,16911,16914,16916,16918,16919,16940,16941,16944,16946,16948,16949,16960,16961,16964,16966,16968,16969,16980,16984,16986,16988,16989,16990,16991,16994,16996,16998,16999,18000,18001,18004,18006,18008,18009,18010,18011,18014,18016,18018,18019,18040,18044,18046,18048,18060,18064,18066,18068,18069,18080,18081,18084,18086,18088,18090,18091,18094,18096,18098,18099,18100,18101,18104,18106,18108,18109,18110,18111,18114,18116,18118,18140,18141,18144,18146,18148,18160,18161,18164,18166,18168,18180,18184,18186,18188,18189,18190,18194,18196,18198,18400,18404,18406,18408,18409,18410,18411,18414,18416,18418,18419,18440,18441,18444,18446,18448,18449,18460,18464,18466,18468,18469,18480,18484,18486,18488,18489,18490,18491,18494,18496,18498,18499,18600,18601,18604,18606,18608,18609,18610,18611,18614,18616,18618,18619,18640,18641,18644,18646,18648,18649,18660,18664,18666,18668,18669,18680,18681,18684,18686,18688,18689,18690,18694,18696,18698,18699,18800,18801,18804,18806,18808,18809,18810,18811,18814,18816,18818,18819,18840,18841,18844,18846,18848,18849,18860,18861,18864,18866,18868,18880,18881,18884,18886,18888,18889,18890,18891,18894,18896,18898,18900,18901,18904,18906,18908,18909,18910,18914,18916,18918,18940,18941,18944,18946,18948,18949,18960,18961,18964,18966,18968,18969,18980,18981,18984,18986,18988,18989,18990,18991,18994,18996,18998,18999,19000,19004,19006,19008,19010,19011,19014,19016,19018,19019,19040,19041,19044,19046,19048,19049,19060,19061,19064,19066,19068,19080,19084,19086,19088,19089,19090,19091,19094,19096,19098,19099,19100,19101,19104,19106,19108,19109,19110,19111,19114,19116,19118,19119,19140,19144,19146,19148,19149,19160,19161,19164,19166,19168,19169,19180,19184,19186,19188,19189,19190,19191,19194,19196,19198,19199,19400,19401,19404,19406,19408,19409,19410,19411,19414,19416,19418,19419,19440,19444,19446,19448,19449,19460,19461,19464,19466,19468,19480,19481,19484,19486,19488,19490,19491,19494,19496,19498,19499,19600,19601,19604,19606,19608,19610,19611,19614,19616,19618,19619,19640,19641,19644,19646,19648,19649,19660,19664,19666,19668,19669,19680,19684,19686,19688,19689,19690,19691,19694,19696,19698,19800,19804,19806,19808,19809,19810,19811,19814,19816,19818,19840,19844,19846,19848,19849,19860,19864,19866,19868,19869,19880,19881,19884,19886,19888,19890,19894,19896,19898,19899,19900,19901,19904,19906,19908,19909,19910,19911,19914,19916,19918,19940,19941,19944,19946,19948,19960,19964,19966,19968,19969,19980,19981,19984,19986,19988,19989,19990,19994,19996,19998,19999,40000,40001,40004,40006,40008,40010,40011,40014,40016,40018,40019,40040,40041,40044,40046,40048,40049,40060,40061,40064,40066,40068,40069,40080,40081,40084,40086,40088,40089,40090,40091,40094,40096,40098,40100,40101,40104,40106,40108,40109,40110,40114,40116,40118,40119,40140,40141,40144,40146,40148,40149,40160,40161,40164,40166,40168,40180,40181,40184,40186,40188,40190,40191,40194,40196,40198,40199,40400,40401,40404,40406,40408,40409,40410,40411,40414,40416,40418,40419,40440,40441,40444,40446,40448,40449,40460,40461,40464,40466,40468,40469,40480,40481,40484,40486,40488,40489,40490,40491,40494,40496,40498,40600,40601,40604,40606,40608,40610,40611,40614,40616,40618,40619,40640,40641,40644,40646,40648,40649,40660,40661,40664,40666,40668,40669,40680,40681,40684,40686,40688,40689,40690,40691,40694,40696,40698,40800,40804,40806,40808,40809,40810,40811,40814,40816,40818,40840,40844,40846,40848,40860,40861,40864,40866,40868,40869,40880,40881,40884,40886,40888,40889,40890,40891,40894,40896,40898,40899,40900,40901,40904,40906,40908,40909,40910,40911,40914,40916,40918,40919,40940,40941,40944,40946,40948,40960,40964,40966,40968,40969,40980,40981,40984,40986,40988,40989,40990,40991,40994,40996,40998,40999,41000,41001,41004,41006,41008,41009,41010,41014,41016,41018,41019,41040,41041,41044,41046,41048,41049,41060,41061,41064,41066,41068,41069,41080,41084,41086,41088,41089,41090,41091,41094,41096,41098,41099,41100,41101,41104,41106,41108,41109,41110,41111,41114,41116,41118,41119,41140,41144,41146,41148,41160,41164,41166,41168,41169,41180,41181,41184,41186,41188,41190,41191,41194,41196,41198,41199,41400,41401,41404,41406,41408,41409,41410,41414,41416,41418,41419,41440,41441,41444,41446,41448,41449,41460,41461,41464,41466,41468,41469,41480,41481,41484,41486,41488,41489,41490,41494,41496,41498,41499,41600,41601,41604,41606,41608,41610,41614,41616,41618,41619,41640,41644,41646,41648,41649,41660,41661,41664,41666,41668,41680,41684,41686,41688,41689,41690,41691,41694,41696,41698,41699,41800,41804,41806,41808,41810,41811,41814,41816,41818,41819,41840,41841,41844,41846,41848,41860,41861,41864,41866,41868,41869,41880,41881,41884,41886,41888,41889,41890,41891,41894,41896,41898,41899,41900,41901,41904,41906,41908,41909,41910,41914,41916,41918,41919,41940,41944,41946,41948,41949,41960,41961,41964,41966,41968,41980,41984,41986,41988,41989,41990,41991,41994,41996,41998,44000,44001,44004,44006,44008,44009,44010,44011,44014,44016,44018,44019,44040,44044,44046,44048,44049,44060,44061,44064,44066,44068,44069,44080,44081,44084,44086,44088,44090,44091,44094,44096,44098,44099,44100,44104,44106,44108,44109,44110,44114,44116,44118,44140,44141,44144,44146,44148,44149,44160,44161,44164,44166,44168,44169,44180,44181,44184,44186,44188,44190,44191,44194,44196,44198,44199,44400,44401,44404,44406,44408,44409,44410,44411,44414,44416,44418,44419,44440,44441,44444,44446,44448,44460,44461,44464,44466,44468,44469,44480,44481,44484,44486,44488,44489,44490,44494,44496,44498,44499,44600,44601,44604,44606,44608,44609,44610,44611,44614,44616,44618,44619,44640,44644,44646,44648,44649,44660,44661,44664,44666,44668,44669,44680,44681,44684,44686,44688,44689,44690,44691,44694,44696,44698,44800,44801,44804,44806,44808,44810,44811,44814,44816,44818,44840,44841,44844,44846,44848,44849,44860,44861,44864,44866,44868,44869,44880,44881,44884,44886,44888,44889,44890,44891,44894,44896,44898,44899,44900,44901,44904,44906,44908,44910,44911,44914,44916,44918,44919,44940,44941,44944,44946,44948,44949,44960,44961,44964,44966,44968,44969,44980,44981,44984,44986,44988,44989,44990,44991,44994,44996,44998,44999,46000,46001,46004,46006,46008,46009,46010,46011,46014,46016,46018,46019,46040,46041,46044,46046,46048,46060,46064,46066,46068,46069,46080,46081,46084,46086,46088,46089,46090,46094,46096,46098,46100,46101,46104,46106,46108,46109,46110,46111,46114,46116,46118,46119,46140,46144,46146,46148,46149,46160,46161,46164,46166,46168,46169,46180,46184,46186,46188,46189,46190,46191,46194,46196,46198,46400,46401,46404,46406,46408,46409,46410,46414,46416,46418,46419,46440,46444,46446,46448,46449,46460,46461,46464,46466,46468,46469,46480,46481,46484,46486,46488,46490,46491,46494,46496,46498,46600,46604,46606,46608,46609,46610,46611,46614,46616,46618,46640,46641,46644,46646,46648,46660,46661,46664,46666,46668,46669,46680,46684,46686,46688,46689,46690,46694,46696,46698,46699,46800,46801,46804,46806,46808,46809,46810,46814,46816,46818,46840,46841,46844,46846,46848,46849,46860,46864,46866,46868,46869,46880,46881,46884,46886,46888,46890,46891,46894,46896,46898,46899,46900,46904,46906,46908,46909,46910,46911,46914,46916,46918,46940,46941,46944,46946,46948,46949,46960,46961,46964,46966,46968,46969,46980,46981,46984,46986,46988,46989,46990,46991,46994,46996,46998,46999,48000,48001,48004,48006,48008,48009,48010,48011,48014,48016,48018,48019,48040,48041,48044,48046,48048,48060,48061,48064,48066,48068,48069,48080,48081,48084,48086,48088,48089,48090,48094,48096,48098,48099,48100,48101,48104,48106,48108,48110,48111,48114,48116,48118,48140,48141,48144,48146,48148,48149,48160,48161,48164,48166,48168,48169,48180,48181,48184,48186,48188,48189,48190,48191,48194,48196,48198,48199,48400,48401,48404,48406,48408,48410,48411,48414,48416,48418,48419,48440,48441,48444,48446,48448,48460,48461,48464,48466,48468,48469,48480,48484,48486,48488,48489,48490,48494,48496,48498,48499,48600,48601,48604,48606,48608,48609,48610,48614,48616,48618,48640,48641,48644,48646,48648,48660,48664,48666,48668,48669,48680,48681,48684,48686,48688,48689,48690,48691,48694,48696,48698,48699,48800,48801,48804,48806,48808,48810,48811,48814,48816,48818,48819,48840,48841,48844,48846,48848,48849,48860,48861,48864,48866,48868,48880,48881,48884,48886,48888,48890,48891,48894,48896,48898,48899,48900,48901,48904,48906,48908,48909,48910,48911,48914,48916,48918,48919,48940,48941,48944,48946,48948,48949,48960,48961,48964,48966,48968,48969,48980,48981,48984,48986,48988,48990,48994,48996,48998,48999,49000,49001,49004,49006,49008,49010,49011,49014,49016,49018,49040,49041,49044,49046,49048,49049,49060,49061,49064,49066,49068,49080,49084,49086,49088,49089,49090,49091,49094,49096,49098,49099,49100,49101,49104,49106,49108,49110,49111,49114,49116,49118,49119,49140,49141,49144,49146,49148,49149,49160,49161,49164,49166,49168,49180,49181,49184,49186,49188,49189,49190,49191,49194,49196,49198,49400,49401,49404,49406,49408,49410,49414,49416,49418,49419,49440,49441,49444,49446,49448,49449,49460,49461,49464,49466,49468,49469,49480,49484,49486,49488,49489,49490,49491,49494,49496,49498,49600,49601,49604,49606,49608,49609,49610,49611,49614,49616,49618,49619,49640,49641,49644,49646,49648,49649,49660,49661,49664,49666,49668,49680,49684,49686,49688,49689,49690,49691,49694,49696,49698,49699,49800,49804,49806,49808,49809,49810,49814,49816,49818,49819,49840,49841,49844,49846,49848,49849,49860,49861,49864,49866,49868,49869,49880,49881,49884,49886,49888,49889,49890,49894,49896,49898,49899,49900,49901,49904,49906,49908,49909,49910,49911,49914,49916,49918,49940,49941,49944,49946,49948,49949,49960,49961,49964,49966,49968,49969,49980,49981,49984,49986,49988,49989,49990,49994,49996,49998][n] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"59ff4709ba2a14501500003a":[{"id":49841,"user_id":1624,"body":"def arrange(arr)\n  arr.sort_by{|n|\n    n =~ \/\\A(\\d+)(\\D+)\\z\/\n    $1.to_i * {\"G\" => 1, \"KG\" => 1_000, \"T\" => 1_000_000 }[$2]\n  }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49842,"user_id":null,"body":"def wg(s)\n  w, u, _ = s.partition \/G|K|T\/\n  (u==\"G\"? 1: u==\"K\"? 1000: 1000000)*w.to_i\nend\ndef arrange(arr) arr.sort_by{|s| wg(s)} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49843,"user_id":1072,"body":"def w(s) s[\/\\d+\/].to_i*1000**([\"G\",\"KG\",\"T\"].index(s[\/[A-Z]+\/]) || 0) end\ndef arrange(arr) arr.sort_by{|s| w(s)} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49844,"user_id":1072,"body":"def w(s) s[\/\\d+\/].to_i*1000**([\"G\",\"KG\",\"T\"].index(s[\/[A-Z]+\/]) || 0) end\ndef arrange(arr) arr.sort_by{|s| w(s)} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a00e05cc374cb34d100000d":[{"id":49845,"user_id":527,"body":"def reverse_seq(n)\n  n.downto(1).to_a\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49846,"user_id":null,"body":"def reverse_seq(n)\n  return (1..n).to_a.reverse\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49847,"user_id":null,"body":"def reverse_seq(n : Int32) : Array(Int32)\n  iter : Int32 = n\n  res : Array(Int32) = [] of Int32\n  \n  n.times do\n    res << iter\n    iter -= 1\n  end\n  \n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49848,"user_id":null,"body":"def reverse_seq(n)\n  arr = Array(Int32).new\n  \n  while n > 0\n    arr << n\n    n -= 1\n  end\n\n  return arr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49849,"user_id":null,"body":"def reverse_seq(n)\n  arr = Array(Int32).new(n)\n\n  while n > 0\n    arr.push(n)\n    n -= 1\n  end\n\n  arr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49850,"user_id":null,"body":"def reverse_seq(n : Int32 ) : Array(Int32)\n  (1..n).to_a.reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49851,"user_id":null,"body":"def reverse_seq(n)\n  (1..n).each.to_a.reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49852,"user_id":null,"body":"def reverse_seq(n)\n  r = [] of Int32\n  n.to(1) do |i|\n    r << i\n  end\n  r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49853,"user_id":null,"body":"def reverse_seq(n)\n  (1..n).reverse_each.to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49854,"user_id":null,"body":"def reverse_seq(n)\n  a = [] of Int32\n  n.downto(1) { |x| a << x }\n  a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a0178f66f793bc5b0001728":[{"id":49855,"user_id":1072,"body":"def longest_palindrome(s) s=s.gsub(\/[^a-zA-Z0-9]\/, \"\"); s.size>0 ? s.downcase.split(\"\").reduce({} of Char => Int32){|a,b| a.merge({b => (a[b]? || 0) + 1})}.values.reduce(Tuple.new(0, true)){|a,b| Tuple.new(a.first + b \/ 2 * 2 + ((a.last && b % 2 == 1) ? 1 : 0), a.last && b % 2 == 0)}.first : 0 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a023c426975981341000014":[{"id":49856,"user_id":null,"body":"def other_angle(*angls)\n  180-angls.sum\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-26 18:44:21"},{"id":49857,"user_id":null,"body":"def other_angle(a, b)\n  return 180 - a - b\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49858,"user_id":null,"body":"def other_angle(a, b)\n  return 180 - (a + b)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49859,"user_id":527,"body":"def other_angle(a, b)\n  180 - a - b\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49860,"user_id":null,"body":"def other_angle(a, b)\n  180 - (a + b)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49861,"user_id":645,"body":"def other_angle(a, b)\n  180 - b - a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a03b3f6a1c9040084001765":[{"id":49862,"user_id":527,"body":"def angle(n)\n  180 * (n - 2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49863,"user_id":null,"body":"def angle(n)\n  return n == 2 ? 0 : 180 + angle(n - 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49864,"user_id":1471,"body":"def angle(n)\n  return (n-2)*180\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49865,"user_id":null,"body":"def angle(n)\n  return 180 * (n-2);\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49866,"user_id":1313,"body":"def angle(n)\n  n*180 - 360\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49867,"user_id":1072,"body":"def angle(n) (n-2)*180 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a04133e32b8b998dc000089":[{"id":49868,"user_id":421,"body":"def solve(arr)  \n  ans = [] of Int32\n  arr.each_with_index do |x, i| \n    if arr[i + 1..-1].all?{|y| x > y}\n      ans << x\n    end\n  end\n  ans\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49869,"user_id":1474,"body":"def solve(arr)  \n  arr.each_with_index.to_a.select { |(e, i)| arr[i+1..-1].all? { |j| j < e } }.map(&.first)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49870,"user_id":null,"body":"def solve(arr : Array) : Array\n output = [arr.last]\n arr.reverse.each { |x| output.unshift(x) if x > output.first }\n output\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49871,"user_id":null,"body":"def solve(arr)  \n    res = [] of Int32\n    arr.each_with_index do |target, idx|\n        is_bigger = true\n        arr[idx+1..arr.size].each do |elem|\n            if target <= elem\n                is_bigger = false\n            end\n        end\n\n        res << target if is_bigger\n    end\n\n    return res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49872,"user_id":1624,"body":"def solve(arr)  \n  max = nil\n  arr.reverse.select{|x|\n    if max.nil? || x > max\n      max = x\n      true\n    else\n      false\n    end\n  }.reverse\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49873,"user_id":527,"body":"def solve(xs : Indexable(T)) : Array(T) forall T\n  xs.reverse_each.each_with_object([] of T) { |x, res|\n    res << x if res.empty? || x > res.last\n  }.reverse!\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49874,"user_id":1072,"body":"def solve(arr,max=0) arr.size == 0 ? [] of Int32 : solve(arr[0,arr.size-1],[arr[-1],max].max) + (arr[-1]>max ? [arr[-1]] : [] of Int32) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a045fee46d843effa000070":[{"id":49875,"user_id":null,"body":"module Sieve\n  protected class_getter sieve = Hash(Int32, Int32).new { |h, k| k }\n  @@calculated = 1\n\n  def self.factors(n)\n    process_sieve(@@calculated, n) if @@calculated < n\n    a = [] of Int32\n    while n != 1\n      a << (factor = Sieve.sieve[n])\n      n = (n \/ factor).floor\n    end\n    a\n  end\n\n  private def self.process_sieve(from, to)\n    ((from \/ 2).ceil * 2).step(to: to, by: 2).each { |i| @@sieve[i] = 2 }\n    3.step(to: Math.sqrt(to).ceil).each do |i|\n      if @@sieve[i] == i\n        (Math.max(i, (from \/ i).ceil) * i).step(to: to, by: i).each do |j|\n          @@sieve[j] = i if @@sieve[j] == j\n        end\n      end\n    end\n    @@calculated = to\n  end\nend\n\ndef decomp(n)\n  hash = Hash(Int32, Int32).new(0)\n  (1..n).each do |x|\n    Sieve.factors(x).each do |f|\n      hash[f] += 1\n    end\n  end\n  hash.each.join(\" * \") do |(k, v)|\n    \"#{k}#{\"^#{v}\" if v > 1}\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49876,"user_id":null,"body":"def decomp(n)\n  f = Hash(Int32, Int32).new\n  (2..n).each do |i|\n    j = 2\n    while i > 1\n      while i%j == 0\n        f[j] = f.fetch(j, 0) + 1\n        i \/= j\n      end\n      if j == 2\n        j += 1\n      else\n        j += 2\n      end\n    end\n  end\n  f.keys.map {|k| f[k] > 1 ? \"#{k}^#{f[k]}\" : k.to_s}.join \" * \"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49877,"user_id":null,"body":"require \"big\"\n\ndef fact(n : BigInt)\n  n.zero? ? 1 : n * fact(n.pred)\nend\n\ndef prime?(n, i = 2)\n  i == n ? true : (n % i != 0) && prime?(n, i.succ)\nend\n\ndef factors(n, m)\n  (n % m).zero? ? 1 + factors(n \/ m, m) : 0\nend\n\ndef decomp(n)\n  f = fact(n.to_big_i)\n  \n  (2..n).each.select { |a| prime?(a) }.map do |p|\n    m = factors(f, p)\n    m == 1 ? \"#{p}\" : \"#{p}^#{m}\"\n  end.join(\" * \")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49878,"user_id":null,"body":"def decomp(n)\n  hh = {} of Int32 => Int32\n  (2..n).each do |i|\n    h = dec(i)\n    h.each do |k, v|\n      nb = hh[k]?\n      if nb.nil?\n        hh[k] = v\n      else\n        hh[k] = nb + v\n      end\n    end\n  end\n  hh\n  a = [] of String\n  hh.each do |k, v|\n    if v == 1\n      a << k.to_s\n    else\n      a << \"#{k}^#{v}\"\n    end\n  end\n  a.join(\" * \")\nend\n\ndef dec(n : Int32)\n  h = {} of Int32 => Int32\n  c = 2\n  while n > 1\n    if n % c == 0\n      nb = h[c]?\n      if nb.nil?\n        h[c] = 1\n      else\n        h[c] = nb + 1\n      end\n      n = n \/ c\n    else\n      if c == 2\n        c = 3\n      else\n        c += 2\n      end\n    end\n  end\n  h\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49879,"user_id":17,"body":"def decomp(n)\n  factors = Hash(Int32, Int32).new()\n  (2..n).each do |i|\n    while i % 2 == 0\n      i \/= 2\n      factors[2] = (factors[2]? != nil ? factors[2] : 0) + 1\n    end\n    (3..Math.sqrt(i)).each do |j|\n      while i % j == 0\n        i \/= j\n        factors[j] = (factors[j]? != nil ? factors[j] : 0) + 1\n      end\n    end\n    factors[i] = (factors[i]? != nil ? factors[i] : 0) + 1 if i != 1\n  end\n  factors.keys.sort.map { |k| k.to_s + (factors[k] > 1 ? \"^#{factors[k]}\" : \"\") }.join(\" * \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49880,"user_id":1072,"body":"def f(n,p) q=n \/ p;  n<p ? 0 : q+f(q,p) end; def decomp(n,i=0) ps=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3607,3613,3617,3623,3631,3637,3643,3659,3671,3673,3677,3691,3697,3701,3709,3719,3727,3733,3739,3761,3767,3769,3779,3793,3797,3803,3821,3823,3833,3847,3851,3853,3863,3877,3881,3889,3907,3911,3917,3919,3923,3929,3931,3943,3947,3967,3989,4001]; q=n<ps[i] ? 0 : f(n,ps[i]); n<ps[i] ? \"\" : ((q==1 ? ps[i].to_s : \"#{ps[i]}^#{q}\")+\" * \"+decomp(n,i+1)).sub(\/ \\* $\/,\"\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a057ec846d843c81a0000ad":[{"id":49881,"user_id":492,"body":"def cycle(n)\n  return -1 if n % 2 == 0 || n % 5 == 0\n  r, i = 1, 0\n  loop do\n    r = r * 10 % n\n    i += 1\n    return i if r == 1\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49882,"user_id":1072,"body":"def cycle(n) return -1 if n%2==0 || n%5==0; c=10%n;i=1; loop do return i if c==1; c=c*10%n; i+=1 end end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49883,"user_id":492,"body":"def cycle(n)\n  return -1 if n % 2 == 0 || n % 5 == 0\n  r, i = 1, 0\n  loop do\n    r = r * 10 % n\n    i += 1\n    return i if r == 1\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49884,"user_id":50,"body":"def cycle(n)\n  if n.gcd(10) != 1\n    return -1\n  end\n  tmp=10%n\n  (1..n-1).each do |i|\n    if tmp==1\n      return i\n    end\n    tmp=(tmp*10)%n\n  end\n  -1  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49885,"user_id":53,"body":"def cycle(n)\n  return -1 if n%2 == 0 || n%5 == 0\n  m = 10 % n\n  cnt = 1\n  while m != 1\n    m = m * 10 % n\n    cnt += 1\n  end\n  cnt\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a05fe8a06d5b6208e00010b":[{"id":49886,"user_id":527,"body":"def seq_to_one(n)\n  n.step(to: 1, by: n >= 1 ? -1 : 1).to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49887,"user_id":1072,"body":"def seq_to_one(n) n>0 ? (0...n).map{|e| n-e} : (n..1).to_a end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49888,"user_id":421,"body":"def seq_to_one(n)\n  n < 1 ? (n).upto(1).to_a : (n).downto(1).to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49889,"user_id":1624,"body":"def seq_to_one(n)\n  if n >= 1\n    (1..n).to_a.reverse\n  else\n    (n..1).to_a\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49890,"user_id":null,"body":"def seq_to_one(n)\n  a = [] of Int32\n  n > 0 ? (n.downto(1) { |x| a << x }) : (n.upto(1) { |x| a << x })\n  a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49891,"user_id":1375,"body":"def seq_to_one(n)\n  case n <=> 1\n  when 1\n    (1..n).to_a.reverse\n  when 0\n    [1]\n  when -1\n    (n..1).to_a\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49892,"user_id":null,"body":"def seq_to_one(n)\n  n > 1 ? (1..n).to_a.reverse : (n..1).to_a\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49893,"user_id":null,"body":"def seq_to_one(n)\n  n > 0 ? (0...n).map {|num| n - num} : (n..1).to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49894,"user_id":null,"body":"def seq_to_one(n)\n  a = [] of Int32\n  n > 1 ? (1..n).reverse_each {|n| a << n} : (n..1).each {|n| a << n}\n  a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49895,"user_id":null,"body":"def seq_to_one(n)\n n > 0 ? (1..n).to_a.reverse : (n..1).to_a \n \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a0d38c9697598b67a000041":[{"id":49896,"user_id":421,"body":"def eliminate_set_bits(number)\n  s = number.delete(\"0\")\n  s.empty? ? 0 : s.to_i64(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49897,"user_id":null,"body":"def eliminate_set_bits(number : String) : Int\n  n = number.delete(\"0\")\n  n.empty? ? 0 : n.to_i(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49898,"user_id":1624,"body":"def eliminate_set_bits(number)\n  2 ** number.count(\"1\") - 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49899,"user_id":645,"body":"def eliminate_set_bits(number)\n  number.delete('0').to_i(2) rescue 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49900,"user_id":527,"body":"def eliminate_set_bits(number : String) : UInt64\n  (1_u64 << number.count('1')) - 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49901,"user_id":645,"body":"def eliminate_set_bits(number)\n  b = number.gsub(\/0\/, \"\")\n  b.empty? ? 0 : b.to_i(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a0f593a1bae7bd7ca000159":[{"id":49902,"user_id":null,"body":"Circumference = 2.11115 # m\n\ndef distance_cycled(cadence, gear, time)\n  g = gear.split('x').map(&.to_i)\n  d = Circumference * time * cadence * g[0] \/ g[1] \n  \"You cycled %.3f kilometers!\" % (d * 0.001)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49903,"user_id":null,"body":"def distance_cycled(cadence, gear, time)\n  f, r = gear.split('x').map(&.to_i)\n  \"You cycled %.3f kilometers!\" % (2.11115*cadence*f\/r*time\/1000)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49904,"user_id":null,"body":"def distance_cycled(cadence, gear, time)\n  \"You cycled #{sprintf \"%.3f\", 2.11115*cadence*gear[0..1].to_i\/gear[3..4].to_i*time\/1000} kilometers!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49905,"user_id":1375,"body":"def distance_cycled(cadence, gear, time)\n  a, b = gear.split(\"x\").map { |e| e.to_f }\n  development = 2.11115 * a \/ b\n  \"You cycled %.3f kilometers!\" % (cadence * time * development \/ 1000)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49906,"user_id":1474,"body":"def distance_cycled(cadence, gear, time)\n  ft, rt = gear.split('x').map(&.to_f)\n  \"You cycled %0.3f kilometers!\" % (cadence * 2.11115 * ft \/ rt * time \/ 1000)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49907,"user_id":1072,"body":"def distance_cycled(c,g,t) \"You cycled %.3f kilometers!\" % (c*2.11115*g[0,2].to_i\/g[3,5].to_i*t\/1000).round(3) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a1060d3502672a75d00013d":[{"id":49908,"user_id":421,"body":"def can_still_win(table, races_remaining)\n  maxi = table.values.max\n  arr = table.keys.select{|x| table[x] + 25 * races_remaining >= maxi}.sort!\n  arr.size == 1 ? \"#{arr[0]} has already won the championship!\" : \"#{arr[0...-1].join(\", \")} and #{arr[-1]} can still win the championship.\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49909,"user_id":1828,"body":"def can_still_win(t, rr)\n  win = t.keys.reject!{|k| t[k]+rr*25 < t.values.max}.sort!\n  win.size == 1 ? \"#{win[0]} has already won the championship!\" : \"#{win[0...-1].join(\", \")} and #{win[-1]} can still win the championship.\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49910,"user_id":null,"body":"def can_still_win(table, races_remaining)\n  max = table.values.max\n  lst = table.reject{|driver, points| points<max-25*races_remaining}.keys\n  if lst.size>1\n    slst = lst.sort\n    \"#{slst[0..-2].join(\", \")} and #{slst[-1]} can still win the championship.\" \n  else \"#{lst[0]} has already won the championship!\"  \n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49911,"user_id":1375,"body":"class Array\n  def to_sentence\n    l = self.pop\n    \"#{self.join(\", \")} and #{l}\" \n  end\nend\n\ndef can_still_win(table, races_remaining)\n  max = table.values.max\n  r = races_remaining * 25\n  still_in_race = table.select do |_, value|\n    value + r >= max\n  end.keys\n  \n  if still_in_race.size == 1\n    \"#{still_in_race[0]} has already won the championship!\"\n  else\n    \"#{still_in_race.sort.to_sentence} can still win the championship.\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49912,"user_id":1474,"body":"def can_still_win(table, races_remaining)\n  sp = races_remaining * 25\n  ret = [] of String\n  mxk, mxv = table.max_by { |_, v| v }\n  puts mxk, mxv\n  table.each { |k, v| ret << k if mxv <= (v + sp) }\n  return \"#{mxk} has already won the championship!\" if ret.size <= 1\n  ret.sort!\n  \"#{ret[0...-1].join(\", \")} and #{ret[-1]} can still win the championship.\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49913,"user_id":1072,"body":"def can_still_win(t,r) m=t.values.max; w=t.keys.select{|e| t[e]+r*25>=m}.sort; w.size==1 ? w[0]+\" has already won the championship!\" : \"#{w[0,w.size-1].join(\", \")} and #{w[-1]} can still win the championship.\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49914,"user_id":1072,"body":"def can_still_win(t,r) m=t.values.max; w=t.keys.select{|e| t[e]+r*25>=m}.sort; w.size==1 ? w[0]+\" has already won the championship!\" : \"#{w[0,w.size-1].join(\", \")} and #{w[-1]} can still win the championship.\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a15a4db06d5b6d33c000018":[{"id":49915,"user_id":null,"body":"def sum_nested(lst)\n  lst.flatten.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49916,"user_id":null,"body":"def sum_nested(lst)\n  return lst.flatten.reduce(0){|acc,e| acc + e }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49917,"user_id":1072,"body":"def sum_nested(lst) lst.flatten.reduce(0){|a,b| a+b} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49918,"user_id":527,"body":"def sum_nested(lst)\n  lst.each.flatten.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49919,"user_id":null,"body":"def sum_nested(lst : Array) : Number\n  lst.flatten.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a19226646d843de9000007d":[{"id":49920,"user_id":17,"body":"def count_consonants(s)\n  s.upcase.gsub(\/[^BCDFGHJKLMNPQRSTVWXYZ]\/, \"\").chars.to_set.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49921,"user_id":421,"body":"def count_consonants(s)\n  s.downcase.gsub(\/[^b-df-hj-np-tv-z]\/, \"\").chars.uniq.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49922,"user_id":null,"body":"def count_consonants(s)\n  s.downcase.chars.select{|c| \"bcdfghjklmnpqrstvwxyz\".includes? c}.uniq.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49923,"user_id":492,"body":"require \"set\"\ndef count_consonants(s)\n  t = s.downcase.gsub(\/[^bcdfghjklmnpqrstvwxyz]\/, \"\")\n  t.chars.uniq.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49924,"user_id":1624,"body":"def count_consonants(s)\n  s.downcase.gsub(\/[^a-z]\/,\"\").tr(\"aeiou\",\"\").chars.uniq.size\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49925,"user_id":null,"body":"def count_consonants(s)\n  (\"bcdfghjklmnpqrstvwxyz\".chars & s.downcase.chars).size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49926,"user_id":527,"body":"CONSONANTS = \"bcdfghjklmnpqrstvwxyz\".each_char.to_set\n\ndef count_consonants(s)\n  (CONSONANTS & s.each_char.map(&.downcase).to_set).size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49927,"user_id":1072,"body":"def count_consonants(s) s.downcase.gsub(\/[aeiou]|[^b-z]\/,\"\").split(\"\").uniq.select{|e| e.size>0}.size end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a1a8b7ec374cbea92000086":[{"id":49928,"user_id":1072,"body":"def is_divisible_by_6(s) t=s.split(\"\").reduce(0){|a,b| a+(b==\"*\" ? 0 : b.to_i)}%3; \"13579\".index(s[-1]) ? [] of String : s.count(\"*\")>1 ? \"0123456789\".split(\"\").reduce([] of String){|a,b| a+is_divisible_by_6(s.sub(\"*\",b))} : (t==2 ? \"147\" : t==1 ? \"258\" : \"0369\").split(\"\").select{|e| s[-1] != '*' || e.to_i%2 != 1}.map{|e| s.sub(\"*\",e)} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a1c28f9c9fc0ef2e900013b":[{"id":49929,"user_id":421,"body":"def pyramid(n)\n   n == 1 ? \"\/\\\\\n\" : (0...n - 1).map{|x| \"#{\" \" * (n - x - 1)}\/#{\" \"  * (x * 2)}\\\\\"}.join(\"\n\") + \"\n\/#{\"_\" * (n * 2 - 2)}\\\\\n\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49930,"user_id":1624,"body":"def pyramid(n)\n  lines = [] of String\n  (n-1).times do |i|\n    lines << \" \" * (n-i-1) + \"\/\" + \"  \" * (i) + \"\\\\\" + \"\n\"\n  end\n  lines << \"\/\" + \"_\" * (2*n-2) + \"\\\\\" + \"\n\"\n  lines.join\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49931,"user_id":null,"body":"def pyramid(n)\n  res = \"\"\n  n.downto(1) do |i|\n    res += (\" \" * (i - 1))\n    res += (\"\/\")\n    i == 1 ? (res += (\"_\" * 2 * (n - i))) : (res += (\" \" * 2 * (n - i)))\n    res += (\"\\\\\")\n    res += (\"\n\")\n  end\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49932,"user_id":527,"body":"def pyramid(n)\n  return \"\n\" if n == 0\n  (0...n).map{ |i| %Q[#{\" \" * (n - i - 1)}\/#{(i != n - 1 ? \" \" : \"_\") * (2 * i)}\\\\\n] }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49933,"user_id":527,"body":"def pyramid(n)\n  (0...n).map{ |i| %Q[#{\" \" * (n - i - 1)}\/#{(i != n - 1 ? \" \" : \"_\") * (2 * i)}\\\\\n] }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49934,"user_id":1375,"body":"def pyramid(n)\n  top = \" \" * (n-1) + \"\/\\\\\"\n  return top + \"\n\" if n == 1\n  bottom = \"\/\" + \"_\" * (2*n-2) + \"\\\\\"\n  return [top, bottom].join(\"\n\") + \"\n\" if n == 2\n  \n  middle = [] of String\n  (n-2).times do |i|\n    middle << \" \" * (n-i-2) + \"\/\" + \" \" * (2*i+2) + \"\\\\\"\n  end\n  \n  [top, middle.join(\"\n\"), bottom].join(\"\n\") + \"\n\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49935,"user_id":1072,"body":"def pyramid(n) (1..n).map{|i| \" \"*(n-i)+\"\/\"+(i==n ? \"__\" : \"  \")*(i-1)}.join(\"\\\\\n\")+\"\\\\\n\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a24254fe1ce0ec2eb000078":[{"id":49936,"user_id":421,"body":"def solve(s, n)\n  return -1 if s[n] != '('\n  stack = 0\n  (n...s.size).each do |i|\n     stack -= 1 if s[i] == ')'\n     stack += 1 if s[i] == '('\n     return i if stack.zero?\n  end\n  -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49937,"user_id":50,"body":"def solve(s, i)\n  if s[i]!='('\n  return -1\n  end\n  o=1\n  (i+1..s.size-1).each do |k|\n    if s[k]==')'\n      o-=1\n      if o == 0\n        return k\n      end\n    elsif s[k]=='('\n        o+=1\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49938,"user_id":null,"body":"def solve(str, index)\n  if str[index] != '('\n    return -1\n  end\n  b = 0\n  str[index..].each_char do |c|\n    if c == '('\n      b += 1\n    elsif c == ')'\n      b -= 1\n    end\n    if b == 0\n      return index\n    end\n    index += 1\n  end\n  -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49939,"user_id":null,"body":"def solve(str, index)\n    return -1 unless str.byte_at(index) == 40\n\n    ary = [] of Int32\n    idx = 0\n\n    str.each_byte do |byte|\n        ary << idx if byte == 40\n\n        if byte == 41\n            return idx if index == ary.last\n            ary.pop\n        end\n\n        idx += 1\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49940,"user_id":null,"body":"def solve(str, index)\n  return -1 if str[index] != '('\n  \n  open = 1\n  (index + 1).upto(str.size).each do |i|\n    case str[i]\n    when '('\n      open += 1\n    when ')'\n      open -= 1\n    end\n    return i if open.zero?\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49941,"user_id":17,"body":"def solve(s, i)\n  return -1 if s[i] != '('\n  unmatched = 1\n  i += 1\n  while i < s.size\n    if s[i] == '('\n      unmatched += 1\n    elsif s[i] == ')'\n      unmatched -= 1\n      return i if unmatched <= 0\n    end\n    i += 1\n  end\n  -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49942,"user_id":527,"body":"def solve(str, index)\n  return -1 if str[index] != '('\n  k = 0\n  str[index ... str.size].each_char.with_index(index) do |c, i|\n    case c\n      when '(' then k += 1\n      when ')' then k -= 1\n    end\n    return i if k == 0\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49943,"user_id":1072,"body":"def red_str(s) m=s.gsub(\/\\((.+?)\\)\/,\"*\\\\1*\"); m==s ? s : red_str(m) end; def solve(s,i) s[i] != '(' ? -1 : i+1+(red_str(s[i+1,9999]).index(\")\") || 0) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a254114e1ce0ecf6a000168":[{"id":49944,"user_id":1072,"body":"def layers(n) ((n**0.5).ceil\/2).floor+1 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49945,"user_id":421,"body":"def layers(n)\n   ((n ** 0.5 + 1) \/ 2).ceil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49946,"user_id":1624,"body":"def layers(n)\n  i = 1\n  sz = 1\n  while n > sz\n    i += 1\n    sz = (2*i-1)**2\n  end\n  i  \nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49947,"user_id":527,"body":"def layers(n)\n  ((Math.sqrt(n) + 1) \/ 2).ceil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49948,"user_id":null,"body":"def layers(n)\n  l = 1\n  while true\n    break if n <= l ** 2\n    l += 2\n  end\n  (l + 1) \/ 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49949,"user_id":503,"body":"def layers(q)\n\t((q-1)**0.5+3).to_i>>1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a26ca51e1ce0e987b0000ee":[{"id":49950,"user_id":1072,"body":"def branch(n) return 0 if n==1; s=((n-1)**0.5-1).to_i\/2*2+1; (n-s*s-1)\/(s+1) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49951,"user_id":503,"body":"def branch(n)\n  return 0 if n < 2\n  n -= 1\n  t = (n ** 0.5).to_i\n  if 0 == t % 2\n    t -= 1\n  end\n  ((n - t * t) \/ (1 + t)).to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a27e3438882f334a10000e3":[{"id":49952,"user_id":527,"body":"def distance(n)\n  n == 1 ? 0 : layer(n) + ((n - 1) % (2 * layer(n)) - layer(n)).abs\nend\n\nprivate def layer(n)\n  ((Math.sqrt(n) - 1) \/ 2).ceil.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49953,"user_id":1072,"body":"def distance(n) s=((n-1)**0.5+1).to_i>>1; n==1 ? 0 : s+(s-(n-4*s*s+4*s-1) % (2*s)).abs end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a2b703dc5e2845c0900005a":[{"id":49954,"user_id":null,"body":"def is_divide_by(number, a, b)\n  number.divisible_by?(a) && number.divisible_by?(b)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49955,"user_id":50,"body":"def is_divide_by(n, a, b)\n  n.abs%a.abs+n.abs%b.abs==0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49956,"user_id":null,"body":"def is_divide_by(number, a, b)\n  return a != 0 && b != 0 && (number % a == 0) && (number % b == 0);\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49957,"user_id":null,"body":"def is_divide_by(x,a,b)x%a|x%b==0end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49958,"user_id":null,"body":"def is_divide_by(n, a, b)\n  return n%a==0 && n%b==0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49959,"user_id":null,"body":"def is_divide_by(number, a, b)\n  number % a == number % b == 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49960,"user_id":76,"body":"def is_divide_by(number, a, b)\n  (number % a).zero? && (number % b).zero?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49961,"user_id":48,"body":"def is_divide_by(number, a, b)\n  number % a == 0 == number % b\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49962,"user_id":1828,"body":"def is_divide_by(number, a, b)\n  [a,b].all?{|i| (number % i) == 0}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49963,"user_id":null,"body":"def is_divide_by(number, a, b)\n  return (number % a ==0 ) && (number %b == 0)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a2be17aee1aaefe2a000151":[{"id":49964,"user_id":527,"body":"def array_plus_array(arr1, arr2)\n  arr1.sum + arr2.sum\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49965,"user_id":564,"body":"def array_plus_array(a, b)\n  (a + b).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49966,"user_id":1828,"body":"def array_plus_array(arr1, arr2)\n  (arr1 + arr2).sum # something went wrong\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49967,"user_id":1566,"body":"def array_plus_array(arr1, arr2)\n  (arr1 + arr2).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49968,"user_id":1474,"body":"def array_plus_array(arr1, arr2)\n  [arr1 + arr2].flatten.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49969,"user_id":53,"body":"def array_plus_array(arr1, arr2)\n  sum = 0\n  sum += arr1.reduce{|x,y| x+y}\n  sum += arr2.reduce{|x,y| x+y}\n  sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49970,"user_id":null,"body":"def array_plus_array(arr1, arr2)\n    return (arr1+arr2).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49971,"user_id":null,"body":"def array_plus_array(arr1, arr2)\n  return arr1.reduce { |acc, el | acc + el } + arr2.reduce { |acc, el | acc + el }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49972,"user_id":1246,"body":"def array_plus_array(arr1, arr2)\n  arr1.reduce{|a,b|a+b} + arr2.reduce{|a,b|a+b}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49973,"user_id":null,"body":"def array_plus_array(arr1, arr2)\n  arr1.concat(arr2).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a2fd38b55519ed98f0000ce":[{"id":49974,"user_id":527,"body":"def multi_table(number : Int) : String\n  (1..10).join('\\n'){ |i| \"#{i} * #{number} = #{i * number}\" }\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-26 19:25:27"},{"id":49975,"user_id":421,"body":"def multi_table(number)\n  (1..10).map{|x| \"#{x} * #{number} = #{x * number}\"}.join(\"\\n\")\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-26 19:25:33"},{"id":49976,"user_id":null,"body":"def multi_table(number)\n  (1..10).map { |n| \"#{n} * #{number} = #{n * number}\" }.join(\"\\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-26 19:25:20"},{"id":49977,"user_id":null,"body":"def multi_table(n)\n  res = \"\"\n  (1..10).each {|m| res = res + \"#{m} * #{n} = #{m * n}\n\"}\n  res.rstrip(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49978,"user_id":50,"body":"def multi_table(number)\n  (1..10).to_a.map{|i| \"#{i} * #{number} = #{i*number}\"}.join(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49979,"user_id":null,"body":"def multi_table(number)\n  (1..10).map do |n|\n    \"#{n} * #{number} = #{n * number}\"\n  end.join(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49980,"user_id":null,"body":"def multi_table(number)\n  (1..10).map { |i| \"#{i} * #{number} = #{i*number}\"}.join(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49981,"user_id":null,"body":"def multi_table(number)\n  s = \"1 * #{number} = #{1*number}\"\n  n = 2\n  while n <= 10\n    s += \"\n#{n} * #{number} = #{n*number}\"\n    n += 1\n  end\n  return s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49982,"user_id":null,"body":"def multi_table(number)\n  (1..10).reduce(\"\") {|m, w| m += \"#{w} * #{number} = #{number * w}\n\"}.rstrip\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49983,"user_id":53,"body":"def multi_table(n)\n  i = 1\n  ans = \"\"\n  while i <= 10\n    if i > 1\n      ans += \"\n\"\n    end\n    ans += \"#{i} * #{n} = #{i * n}\"\n    i += 1\n  end\n  ans\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a33ec23ee1aaebecf000130":[{"id":49984,"user_id":421,"body":"def count_feelings(string, arr)\n  n = arr.select{|x| x.chars.all?{|y| x.count(y) <= string.count(y)}}.size\n  \"#{n} feeling#{n != 1 ? 's' : \"\"}.\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49985,"user_id":null,"body":"def count_feelings(string, arr)\n  count = arr.count { |f| f.chars.uniq.all? { |c| f.count(c) <= string.count(c) }}\n  \"#{count} feeling#{count != 1 ? \"s\" : \"\"}.\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49986,"user_id":null,"body":"def count_feelings(string, arr)\n  h = Hash(String, Int32).new\n  h2 = Hash(String, Int32).new\n  counter = 0\n\n  splitter = ->(val: String, h: Hash(String, Int32)) {\n    val.split(\"\").group_by { |e| e }.map {|k,v| h[k] = v.size }\n  }\n\n  splitter.call(string, h)\n\n  arr.each do |el|\n    splitter.call(el, h2)\n\n    res = true\n    h2.each do |k,v|\n      res = false if !h[k]?\n      res &&= h2[k] <= h[k]\n    end\n\n    counter += 1 if res\n    h2.clear\n  end\n\n  \"%d feeling%s.\" % [counter, counter == 1 ? \"\" : \"s\"]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49987,"user_id":1072,"body":"def count_feelings(s, arr) t=arr.reduce(0){|a,b| a+(b.split(\"\").to_set.all?{|l| b.count(l)<=s.count(l)} ? 1 : 0)}; \"#{t} feeling#{t==1 ? \"\" : \"s\"}.\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a34b80155519e1a00000009":[{"id":49988,"user_id":1474,"body":"def multiple_of_index(arr)\n  ret = [] of Int32\n  (0...arr.size).each  { |i| ret << arr[i] if i > 0 && arr[i] % i == 0 }\n  ret\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49989,"user_id":50,"body":"def multiple_of_index(arr)\n  o=[] of Int32\n  arr.each_with_index do |n,i|\n    if i>0 && n%i==0\n      o.push(n)\n    end\n  end\n  o\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49990,"user_id":527,"body":"def multiple_of_index(xs : Iterable(T)): Array(T) forall T\n  xs.each_with_index.skip(1).compact_map{ |(x, i)| x if x.divisible_by?(i) }.to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49991,"user_id":421,"body":"def multiple_of_index(arr)\n  lst = [] of Int32\n  arr.each_with_index do |x, i|\n    lst << x if !i.zero? && x % i == 0 \n  end\n  lst\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a34da5dee1aae516d00004a":[{"id":49992,"user_id":421,"body":"def get_matrix(n)\n  (0...n).map{|x| (0...n).map{|y| x == y ? 1 : 0}}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49993,"user_id":17,"body":"def get_matrix(n)\n  (0...n).map_with_index { |_, i| (0...n).map_with_index { |_, j| i == j ? 1 : 0 } }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49994,"user_id":null,"body":"def get_matrix(n)\n  (1..n).map{|i| (1..n).map{|j| j==i ? 1 : 0}}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49995,"user_id":null,"body":"def get_matrix(n)\n  z = Array.new(n, 0)\n  (Array.new(n, z)).map_with_index{|r, i| r=z.dup; r[i] = 1; r}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49996,"user_id":null,"body":"def get_matrix(n : Int) : Array\n  (0...n).map { |x| Array(Int32).new(n - 1, 0).insert(x, 1) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49997,"user_id":48,"body":"def get_matrix(n)\n  matrix = [] of Array(Int32)\n  y = 0  \n  while y < n\n    row = [] of Int32\n    x = 0\n    while x < n\n      row << (y == x ? 1 : 0)\n      x += 1\n    end\n    matrix << row\n    y += 1 \n  end\n  matrix\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49998,"user_id":null,"body":"def get_matrix(n)\n  arr = [] of Array(Int32)\n  n.times do |x|\n    arr << (0...n).map { |i| i == x ? 1 : 0 }\n  end\n  arr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":49999,"user_id":527,"body":"def get_matrix(n)\n  Array.new(n){ |ir| Array.new(n){ |ic| ir == ic ? 1 : 0 } }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50000,"user_id":1072,"body":"def get_matrix(n) (1..n).map{|i| (1..n).map{|j| i==j ? 1 : 0}} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50001,"user_id":1072,"body":"def get_matrix(n) (1..n).map{|i| (1..n).map{|j| i==j ? 1 : 0}} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a3e1319b6486ac96f000049":[{"id":50002,"user_id":421,"body":"def pairs(ar)\n  ar = ar.size.odd? ? ar[0...-1] : ar\n  ar.each_slice(2).count{|(x, y)| (y - x).abs == 1}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50003,"user_id":null,"body":"def pairs(ar)\n  count = 0\n  ar.each_slice(2) do |s|\n    if s.size == 2\n      if s[0] - s[1] == 1 || s[1] - s[0] == 1\n        count += 1\n      end\n    end\n  end\n  count\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50004,"user_id":1474,"body":"def pairs(ar)\n  ar.each_slice(2).count { |e| e.size == 2 && (e[0] - e[1]).abs == 1 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50005,"user_id":527,"body":"def pairs(xs)\n  xs.each_slice(2, true).count{ |p| p.size == 2 && (p[0] - p[1]).abs == 1 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50006,"user_id":null,"body":"def pairs(ar)\n  ar.in_groups_of(2).reject(&.any?(&.nil?)).count { |g| (g[0].not_nil! - g[1].not_nil!).abs == 1 }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a3fe3dde1ce0e8ed6000097":[{"id":50007,"user_id":527,"body":"def century_from_year(year)\n  (year + 99) \/\/ 100\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50008,"user_id":null,"body":"def century_from_year(year)\n  #your code here\n  (year \/ 100).ceil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50009,"user_id":null,"body":"def century_from_year(year)\n  return (year \/ 100).ceil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50010,"user_id":null,"body":"def century_from_year(year)\n  year \/\/ 100 + (year % 100 > 0 ? 1 : 0) \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50011,"user_id":null,"body":"def century_from_year(year)\n  (year \/ 100).ceil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50012,"user_id":null,"body":"def century_from_year(year)\n  ((year - 1) \/ 100 + 1).floor\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50013,"user_id":null,"body":"def century_from_year(year)\n  return year < 101 ? 1: century_from_year(year - 100) + 1;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50014,"user_id":null,"body":"def century_from_year(year)\n  return (year + 99) \/\/ 100;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50015,"user_id":null,"body":"def century_from_year(year)\n  if year%100==0\n    return year\/100;\n  end;\n  return (year-(year%100))\/100+1;\nend;","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50016,"user_id":null,"body":"def century_from_year(year)\n  year % 100 == 0 ? year\/100.floor : (year\/100).floor + 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a405ba4e1ce0e1d7800012e":[{"id":50017,"user_id":1072,"body":"def custom_christmas_tree(c,n) ((0...n).map{|i| s=(i*(i+1)\/2)%c.size; \" \"*(n-i-1)+(c*100)[s,i+1].split(\"\").join(\" \")}+(1..n\/3).map{\" \"*(n-1)+\"|\"}).join(\"\n\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a4076f3e1ce0ee6d4000010":[{"id":50018,"user_id":1072,"body":"def center_of(c) (0...c.size).map{|i| (c+c)[(i*(i*2+1)+i)%c.size]}.join.sub(\/^(.+?)\\1*$\/,\"\\\\1\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50019,"user_id":1072,"body":"def center_of(c) (0...c.size).map{|i| (c+c)[(i*(i*2+1)+i)%c.size]}.join.sub(\/^(.+?)\\1*$\/,\"\\\\1\") end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a4138acf28b82aa43000117":[{"id":50020,"user_id":1474,"body":"def adjacent_elements_product(arr)\n  arr.each_cons(2).map { |(a, b)| a * b }.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50021,"user_id":53,"body":"def adjacent_elements_product(arr)\n  n = arr.size\n  m = 0\n  i = 1\n  while i < n\n    if arr[i] * arr[i-1] > m || i == 1\n      m = arr[i] * arr[i-1]\n    end\n    i += 1\n  end\n  m\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50022,"user_id":527,"body":"def adjacent_elements_product(xs)\n  xs.each.cons_pair.max_of(&.product)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50023,"user_id":421,"body":"def adjacent_elements_product(arr)\n  arr.each_cons(2).map(&.product).max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a431c0de1ce0ec33a00000c":[{"id":50024,"user_id":1768,"body":"def even_numbers(x,y)\n  x.select{|i|i.even?}[-y..-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50025,"user_id":1474,"body":"def even_numbers(arr, n)\n  ret = arr.select(&.even?)\n  ret[-n..-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50026,"user_id":53,"body":"def even_numbers(arr, n)\n  ls = arr.select { |e| e.even? }\n  ls.skip(ls.size - n)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50027,"user_id":null,"body":"def even_numbers(arr,n)\n  arr.select{|x| x % 2 == 0}.last(n)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50028,"user_id":492,"body":"def even_numbers(array, number)\n    a = [] of Int32\n    index = array.size - 1\n    while(a.size < number)\n        if(array[index] % 2 === 0) \n            a << array[index]\n        end\n        index -= 1\n    end\n    a.reverse()\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50029,"user_id":null,"body":"def even_numbers(arr,n)\n  arr.select(&.even?)[-n..-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50030,"user_id":null,"body":"def even_numbers(arr,n)\n  arr.select { |x| x.even? }[-n..-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50031,"user_id":null,"body":"def even_numbers(arr,n)\n  i = -1\n  even = [] of Int32\n  while even.size < n\n    even << arr[i] if arr[i].even?\n    i -= 1\n  end\n  even.reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50032,"user_id":null,"body":"def even_numbers(arr,n)\n  arr.select(&.even?).last(n)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50033,"user_id":1072,"body":"def even_numbers(arr,n) arr.select{|e| e%2==0}[-n,arr.size] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a48948e145c46820b00002f":[{"id":50034,"user_id":17,"body":"def k_of(n)\n  k = 0\n  m = n\n  while m % 2 == 0\n    m \/= 2\n    k += 1\n  end\n  (3..Math.sqrt(n)).each do |i|\n    while m % i == 0\n      m \/= i\n      k += 1\n    end\n  end\n  k += 1 if m != 1\n  k\nend\ndef kprimes_step(k, step, start, stop)\n  result = [] of Array(Int32)\n  (start..(stop - step)).each do |i|\n    result << [i, i + step] if k_of(i) == k && k_of(i + step) == k\n  end\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50035,"user_id":492,"body":"def prime_factors_length(n) \n    cnt = 0; i = 2\n    while (i * i <= n)\n        while (n % i == 0)\n            cnt += 1\n            n \/= i\n        end\n        i += 1\n    end\n    if (n > 1) \n        cnt += 1 \n    end\n    cnt\nend\ndef kprimes_step(k, step, start, nd)\n    res = [] of Array(Int32)\n    i = start\n    while (i <= nd-step)\n        res << [i, i+step] if (prime_factors_length(i) == k && prime_factors_length(i+step) == k)\n        i += 1\n    end\n    res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50036,"user_id":53,"body":"include Math\n\ndef primeFactorCount(n)\n    len = 0\n    i = 2\n    while i * i <= n\n        while n % i == 0\n            len = len + 1\n            n = n \/ i\n        end\n        i = i + 1\n    end\n    if n > 1 \n        len = len + 1\n    end\n    return len\nend\n          \ndef kprimes_step(k, step, start, nd)\n    arr = [] of Array(Int32)\n    i = start\n    while i <= nd - step\n        if primeFactorCount(i) == k && primeFactorCount(i + step) == k\n            arr << [i, i + step]\n        end\n        i = i + 1\n    end\n    arr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50037,"user_id":1474,"body":"def prime_factors_cnt(n)\n  cnt = 0\n  while n % 2 == 0\n    n \/= 2\n    cnt += 1\n  end\n  (3..Math.sqrt(n)).step(2).each do |i|\n    while n % i == 0\n      n \/= i\n      cnt += 1\n    end\n  end\n  cnt += 1 if n > 2\n  cnt\nend\n\ndef kprimes_step(k, step, start, nd)\n  (start..nd).select { |i| prime_factors_cnt(i) == k }.combinations(2).select { |(a, b)| b - a == step }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50038,"user_id":492,"body":"def prime_factors_length(n) \n    cnt = 0; i = 2\n    while (i * i <= n)\n        while (n % i == 0)\n            cnt += 1\n            n \/= i\n        end\n        i += 1\n    end\n    if (n > 1) \n        cnt += 1 \n    end\n    cnt\nend\ndef kprimes_step(k, step, start, nd)\n    res = [] of Array(Int32)\n    i = start\n    while (i <= nd-step)\n        res << [i, i+step] if (prime_factors_length(i) == k && prime_factors_length(i+step) == k)\n        i += 1\n    end\n    res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a49f074b3bfa89b4c00002b":[{"id":50039,"user_id":1566,"body":"def has_subpattern(string)\n  \/^(.+)\\1+$\/ === string\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50040,"user_id":50,"body":"def has_subpattern(string)\n  (\/^(.*)\\1+$\/).match(string) != nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50041,"user_id":null,"body":"def has_subpattern(string)\n  !!string[\/\\A(.*)\\1+\\z\/]?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50042,"user_id":null,"body":"def has_subpattern(string)\n  !\/^(.+)\\1+$\/.match(string).nil?\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50043,"user_id":527,"body":"def has_subpattern(string)\n  (string * 2).index(string, 1) != string.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50044,"user_id":1072,"body":"def has_subpattern(s) (\/^(.+)\\1+$\/=~s) != nil end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a4a2973d8e14586c700000a":[{"id":50045,"user_id":1072,"body":"def gcd(a,b) b==0 ? a : gcd(b,a%b) end; def has_subpattern(s) r=s.split(\"\").reduce({} of String => Int32){|a,b| a[b]=(a[b]? || 0)+1; a}; g=r.values.reduce{|a,b| gcd(a,b)}; r.keys.sort.map{|k| k*(r[k] \/ g)}.join end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50046,"user_id":527,"body":"def has_subpattern(string)\n  char_freq = string.each_char.each_with_object(Hash(Char, Int32).new(0)) { |c, fs| fs[c] += 1 }\n  d = char_freq.values.reduce{ |a, b| a.gcd(b) }\n  char_freq.to_a.sort.map{ |c, f| c.to_s * (f \/ d) }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a4a391ad8e145cdee0000c4":[{"id":50047,"user_id":527,"body":"def has_subpattern(string)\n  string.each_char\n    .each_with_object(Hash(Char, Int32).new(0)){ |c, h| h[c] += 1 }.values\n    .reduce{ |x, y| x.gcd(y) } != 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50048,"user_id":1072,"body":"def gcd(a,b) b==0 ? a : gcd(b,a%b) end; def has_subpattern(s) r=s.split(\"\").reduce({} of String => Int32){|a,b| a[b]=(a[b]? || 0)+1; a}; s.size>1 && r.values.reduce{|a,b| gcd(a,b)}>1 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a4d303f880385399b000001":[{"id":50049,"user_id":421,"body":"def factorial(n)\n  n < 2 ? 1 : n * factorial(n - 1)\nend\n\ndef strong(n)\n  n.to_s.chars.map{|x| factorial(x.to_i)}.sum == n ? \"STRONG!!!!\" : \"Not Strong !!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50050,"user_id":53,"body":"def strong(n)\n  n.digits.map{|a|a==0 ? 1 : (1..a).reduce{|x,y|x*y}||1}.sum == n ? \"STRONG!!!!\" : \"Not Strong !!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50051,"user_id":168,"body":"def strong(n)\n  [1, 2, 145, 40585].includes?(n) ? \"STRONG!!!!\" : \"Not Strong !!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50052,"user_id":1474,"body":"def fact(n)\n  (1..n).reduce(1) { |s, i| s * i }\nend\n\ndef strong(n)\n  n.to_s.chars.map { |c| fact(c.to_i) }.sum == n ? \"STRONG!!!!\" : \"Not Strong !!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50053,"user_id":null,"body":"def strong(n)\n  n.to_s.chars.sum { |c| [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880][c - '0'] } == n ? \"STRONG!!!!\" : \"Not Strong !!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50054,"user_id":492,"body":"def strong(n)\n  if [1,2,145,40585].includes?(n)\n        return \"STRONG!!!!\"\n  end\n  \"Not Strong !!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50055,"user_id":1624,"body":"def fact(n)\n  (1..n).product\nend\n\ndef strong(n)\n  if n.to_s.chars.map(&.to_i).map{|x| fact(x)}.sum == n\n    \"STRONG!!!!\"\n  else\n    \"Not Strong !!\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50056,"user_id":645,"body":"def strong(n)\n  return n.to_s.chars.map do | d |\n    Array.new(d.to_i) do | i | \n      i + 1\n    end.reduce(1) do | acc, item |\n      acc * item\n    end\n  end.sum == n ? \"STRONG!!!!\" : \"Not Strong !!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a4e3782880385ba68000018":[{"id":50057,"user_id":421,"body":"def balanced_num(number)\n  s = number.to_s\n  s[0...(s.size \/ 2).ceil.to_i - 1].chars.sum(&.to_i) == s[(s.size \/\/ 2) + 1..-1].chars.sum(&.to_i) ? \"Balanced\" : \"Not Balanced\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50058,"user_id":168,"body":"def balanced_num(number)\n  ds = number.digits\n  n = ds.size - 1 >> 1\n  ds[0...n].sum == ds.reverse[0...n].sum ? \"Balanced\" : \"Not Balanced\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50059,"user_id":1072,"body":"def balanced_num(n) \n  s=n.to_s.split(\"\");\n  (0...((s.size-1)\/\/2)).reduce(0){|a,i| a+s[i].to_i-s[s.size-i-1].to_i} != 0 ? \"Not Balanced\" : \"Balanced\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50060,"user_id":1474,"body":"def balanced_num(n)\n  stg  = n.to_s\n  i = stg.size \/ 2\n  j = i + 1\n  i -= 1 if stg.size.even?\n  stg[0...i].chars.map { |c| c.to_i }.sum == stg[j..-1].chars.map { |c| c.to_i }.sum ? \"Balanced\" : \"Not Balanced\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50061,"user_id":1624,"body":"def balanced_num(number)\n  s = number.to_s.chars.map(&.to_i)\n  z = (s.size-1) \/ 2\n  if s.first(z).sum == s.last(z).sum\n    \"Balanced\"\n  else\n    \"Not Balanced\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a4ea304b3bfa89a9900008e":[{"id":50062,"user_id":168,"body":"def max_number(n)\n  n.digits.sort.reverse.join.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50063,"user_id":1474,"body":"def max_number(n)\n  n.to_s.chars.sort_by { |c| -c.to_i }.join.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50064,"user_id":null,"body":"def max_number(n)\n  n.to_s.chars.sort_by { |x| -x.to_i }.join.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50065,"user_id":1768,"body":"def max_number(n)\n  n.to_s.chars.sort.join.reverse.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50066,"user_id":527,"body":"def max_number(n)\n  n.to_s.chars.sort.reverse.join.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a512f6a80eba857280000fc":[{"id":50067,"user_id":17,"body":"def nth_smallest(a, n)\n  a.sort[n - 1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50068,"user_id":492,"body":"def nth_smallest(nums, pos)\n  arr = nums.sort\n  arr[pos-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50069,"user_id":null,"body":"def nth_smallest(arr, pos)\n  return arr.sort().at(pos - 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50070,"user_id":1768,"body":"def nth_smallest(x,y)\n  x.sort[y-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50071,"user_id":null,"body":"def nth_smallest(arr, pos)\n  arr.sort.at(pos - 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50072,"user_id":527,"body":"def nth_smallest(arr, pos)\n  arr.sort[pos - 1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50073,"user_id":1072,"body":"def nth_smallest(arr,n) arr.sort[n-1] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a523566b3bfa84c2e00010b":[{"id":50074,"user_id":421,"body":"def min_sum(arr)\n   arr.sort!\n   (0...arr.size \/ 2).map_with_index{|val, i| arr[i] * arr[arr.size - 1 - i]}.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50075,"user_id":1624,"body":"def min_sum(arr)\n  sum = 0\n  arr = arr.sort\n  while arr.size > 0\n    sum += arr.pop * arr.shift\n  end\n  sum\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50076,"user_id":168,"body":"def min_sum(arr)\n  xs = arr.sort\n  xs.zip(xs.reverse).sum { |a, b| a * b } \/ 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50077,"user_id":null,"body":"def min_sum(arr)\n  sum = 0\n  arr.sort!\n  while arr.size > 0\n    sum += arr.pop * arr.shift\n  end\nreturn sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50078,"user_id":1474,"body":"def min_sum(arr)\n  tmp  = arr.sort\n  (0...tmp.size\/2).reduce(0) { |s, i| s + tmp[i] * tmp[-i-1] }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50079,"user_id":492,"body":"def min_sum(arr)\n    a = arr.sort\n    sm = 0; i = 0 \n    while (i < (arr.size \/ 2).to_i)\n        sm += a[i] * a[a.size - i - 1]\n        i += 1\n    end\n    sm\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50080,"user_id":null,"body":"def min_sum(arr)\n  return 0 if arr.empty?\n  min, max = arr.sort.in_groups_of(arr.size \/ 2, 0)\n  [min, max.reverse].transpose.map(&.product).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50081,"user_id":null,"body":"def min_sum(arr)\n  a = arr.sort\n  sum = 0\n  \n  until a.empty?\n    sum += a.shift * a.pop\n  end\n\n  sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50082,"user_id":null,"body":"def min_sum(arr)\n  #your code here\n  sorted = arr.sort\n  mins = sorted[(0..(sorted.size \/ 2)-1)]\n  maxs = sorted[(sorted.size \/ 2)..(sorted.size-1)].reverse\n  results = [] of Int32\n  maxs.each_with_index do |max, i|\n   min = mins[i]\n   results.push(min * max)\n  end\n  results.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50083,"user_id":null,"body":"def min_sum(arr)\n  a = arr.sort\n  r = [] of Int32\n  1.upto(arr.size \/ 2) do |x|\n    r << a[x - 1] * a[-x]\n  end\n  r.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a53a17bfd56cb9c14000003":[{"id":50084,"user_id":null,"body":"def disarium_number(n)\n  count = 0\n  n.digits.reverse.each_with_index{|n, i| count += n ** (i + 1) }\n  count == n ? \"Disarium !!\" : \"Not !!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50085,"user_id":53,"body":"def disarium_number(n)\n  return \"Disarium !!\" if n == 0\n  c = (Math.log(n) \/ Math.log(10)).to_i + 1\n  s = 0\n  m = n\n  while (c > 0)\n    d  = m % 10\n    s += d ** c\n    c -= 1\n    m  = (m\/10).to_i\n  end\n  n == s ? \"Disarium !!\" : \"Not !!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50086,"user_id":168,"body":"def disarium_number(n)\n  n.digits.reverse.each_with_index.sum { |d, i| d ** (i + 1) } == n ? \"Disarium !!\" : \"Not !!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50087,"user_id":421,"body":"def disarium_number(n)\n  n.to_s.chars().map_with_index{|x, i| x.to_i ** (i + 1)}.sum() == n ? \"Disarium !!\" : \"Not !!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50088,"user_id":1474,"body":"def disarium_number(n)\n  n == n.to_s.chars.each_with_index.map { |(c, i)| c.to_i ** (i + 1) }.sum ? \"Disarium !!\" : \"Not !!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50089,"user_id":null,"body":"def disarium_number(n)\n  n == n.to_s.chars.map_with_index { |c, i| c.to_s.to_i32 ** (i + 1) }.sum ? \"Disarium !!\" : \"Not !!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50090,"user_id":1624,"body":"def disarium_number(n)\n  e = n\n    .to_s\n    .chars\n    .map(&.to_i)\n    .each_with_index\n    .map{|(d,i)| d ** (i+1) }\n    .sum\n  if e == n\n    \"Disarium !!\"\n  else\n    \"Not !!\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50091,"user_id":null,"body":"def disarium_number(n)\n  res = 0\n  n.to_s.split(\"\").each_with_index{|a, i| res += (a.to_i ** (i+1))}\n  res == n ? \"Disarium !!\" : \"Not !!\" \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50092,"user_id":null,"body":"def disarium_number(n)\n  str = n.to_s\n  len = str.size\n  count = 0\n  len.times do |x|\n    count += str[x].to_u32 ** (x + 1)\n  end\n  count == n ? \"Disarium !!\" : \"Not !!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50093,"user_id":277,"body":"def disarium_number(n)\n  charray=\"#{n}\".split(\"\")\n  sum=0\n  pot =1\n  charray.each{ |character| \n   sum += character.to_i ** pot\n   pot=pot+1\n  }\n  sum === n ? \"Disarium !!\" : \"Not !!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a54e796b3bfa8932c0000ed":[{"id":50094,"user_id":527,"body":"def jumping_number(n : Int) : String\n  n.digits.each.cons_pair.all?{ |x, y| (x - y).abs == 1 } ? \"Jumping!!\" : \"Not!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50095,"user_id":421,"body":"def jumping_number(n)\n   n.to_s.chars.each_cons(2).all?{|(x, y)| (x.to_i - y.to_i).abs == 1} ? \"Jumping!!\" : \"Not!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50096,"user_id":1624,"body":"def jumping_number(n)\n  r = n\n    .to_s\n    .chars\n    .map(&.to_i)\n    .each_cons(2)\n    .all?{|(a,b)| (a-b).abs == 1 }\n  if r\n    \"Jumping!!\"\n  else\n    \"Not!!\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50097,"user_id":53,"body":"def jumping_number(n)\n  p = n % 10\n  n = (n \/ 10).to_i\n  while (n > 0)\n    d = n % 10\n    return \"Not!!\" if ((d - p).abs != 1) \n    p = d\n    n = (n \/ 10).to_i\n  end\n  \"Jumping!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50098,"user_id":209,"body":"def jumping_number(n)\n  return \"Jumping!!\" if n < 10\n  f = n.to_s.split(\"\").map{|o|o.to_i}\n  i = 0\n  while i < f.size - 1\n      return \"Not!!\" if (f[i+1]-f[i]).abs != 1\n      i += 1\n  end\n  \"Jumping!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50099,"user_id":1474,"body":"def jumping_number(n)\n  return \"Jumping!!\" if n < 10\n  n\n    .to_s\n    .chars\n    .each_cons(2)\n    .all? { |(c1, c2)| (c1.to_i - c2.to_i).abs == 1 } ? \"Jumping!!\" : \"Not!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50100,"user_id":1474,"body":"def conv(s1, s2)\n  (s1.to_i - s2.to_i).abs == 1\nend\n\ndef jumping_number(n)\n  return \"Jumping!!\" if n < 10\n  stg = n.to_s\n  (0...stg.size-1).all? { |i| conv(stg[i], stg[i + 1]) } ? \"Jumping!!\" : \"Not!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50101,"user_id":null,"body":"def jumping_number(n)\n  ((x = n.to_s).size - 1).times do |i|\n    return \"Not!!\" if (x[i].to_i - x[i + 1].to_i).abs != 1\n  end\n  \"Jumping!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50102,"user_id":null,"body":"def jumping_number(n)\n  n.to_s.split(\"\").each_cons(2) { |x| return \"Not!!\" if (x[0].to_i - x[1].to_i).abs != 1 }\n  return \"Jumping!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50103,"user_id":null,"body":"def jumping_number(n)\n  n.to_s.chars.each_cons(2).all? { |cons| \n    cons.max - cons.min == 1\n  } ? \"Jumping!!\" : \"Not!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a55f04be6be383a50000187":[{"id":50104,"user_id":421,"body":"def special_number(n)\n  \/^[0-5]+$\/ === n.to_s ? \"Special!!\" : \"NOT!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50105,"user_id":527,"body":"def special_number(n)\n  while n != 0\n    n, d = n.divmod(10)\n    return \"NOT!!\" if d > 5\n  end\n  \"Special!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50106,"user_id":null,"body":"def special_number(n)\n  n.digits.all?{|d| (0..5).includes?(d)} ? \"Special!!\" : \"NOT!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50107,"user_id":53,"body":"def special_number(n)\n  while n > 0\n    return \"NOT!!\" if n%10 > 5\n    n = (n\/10).to_i\n  end\n  \"Special!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50108,"user_id":null,"body":"def special_number(n)\n  n.to_s =~ \/^[0-5]+$\/ ? \"Special!!\" : \"NOT!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50109,"user_id":1474,"body":"def special_number(n)\n  n.to_s.chars.all? { |c| c.to_i < 6 } ? \"Special!!\" : \"NOT!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50110,"user_id":1624,"body":"def special_number(n)\n  if n.to_s =~ \/\\A[0-5]+\\z\/\n    \"Special!!\"\n  else\n    \"NOT!!\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50111,"user_id":null,"body":"def special_number(n)\n  n.to_s.match(\/^[012345]+$\/) ? \"Special!!\" : \"NOT!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50112,"user_id":null,"body":"def special_number(n)\n  (n.to_s =~ \/[6789]\/).nil? ? \"Special!!\" : \"NOT!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50113,"user_id":null,"body":"def special_number(n)\n  special = true\nspecials = [0,1,2,3,4,5]\nn.to_s.split(\"\").each do |i|\n  special = false unless specials.includes?(i.to_i)\nend\nspecial ? \"Special!!\" : \"NOT!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a58ca28e626c55ae000018a":[{"id":50114,"user_id":53,"body":"include Math\n\ndef area_of_polygon_inside_circle(r, n)\n  return (0.5 * n * r * r * sin(2 * PI \/ n)).round(3)\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50115,"user_id":168,"body":"def area_of_polygon_inside_circle(r, n)\n  (0.5 * n * r ** 2 * Math.sin(2 * Math::PI \/ n)).round(3)\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50116,"user_id":421,"body":"def area_of_polygon_inside_circle(circle_radius, number_of_sides)\n    a = 360 \/ (number_of_sides * 2)\n    b =  Math.sin(a * Math::PI \/ 180) * circle_radius\n    h = (circle_radius ** 2 - b ** 2) ** 0.5\n    (b * h * number_of_sides).round(3)\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50117,"user_id":50,"body":"def area_of_polygon_inside_circle(r, n)\n  (n*r*r*Math.sin(2*Math::PI\/n)*500.0).round\/1000.0\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50118,"user_id":527,"body":"def area_of_polygon_inside_circle(r, n)\n  (n\/2.0 * r**2 * Math.sin(2 * Math::PI \/ n)).round(3)\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50119,"user_id":1701,"body":"include Math\n\ndef area_of_polygon_inside_circle(circle_radius, number_of_sides)\n\treturn (number_of_sides * circle_radius ** 2 * sin(PI \/ number_of_sides) * cos(PI \/ number_of_sides)).round(3)\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a58d46cfd56cb4e8600009d":[{"id":50120,"user_id":421,"body":"def halving_sum(n)\n  n > 1 ? n + halving_sum(n \/\/ 2) : 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50121,"user_id":1474,"body":"def halving_sum(n)\n  cnt = n\n  until n == 1\n    n \/\/= 2\n    cnt += n\n  end\n  cnt\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50122,"user_id":527,"body":"def halving_sum(n)\n  2 * n - n.popcount\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50123,"user_id":null,"body":"def halving_sum(n)\n  n == 1 ? n : n + halving_sum(n\/\/2) \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a58d889880385c2f40000aa":[{"id":50124,"user_id":53,"body":"def automorphic(n)\n  (n.to_i64*n).to_s.ends_with?(n.to_s) ? \"Automorphic\" : \"Not!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50125,"user_id":null,"body":"def automorphic(n)\n  arr = [0, 1, 5, 6, 25, 76, 376, 625, 9376, 90625]\n  arr.includes?(n) ? \"Automorphic\" : \"Not!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50126,"user_id":1624,"body":"def automorphic(n)\n  if (n*n).to_s.ends_with?(n.to_s)\n    \"Automorphic\"\n  else\n    \"Not!!\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50127,"user_id":null,"body":"def automorphic(n)\n  (n * n).to_s[-(n.to_s.size)..-1].to_i == n ? \"Automorphic\" : \"Not!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50128,"user_id":1828,"body":"def automorphic(n)\n  (n**2).to_s.includes?(n.to_s) ? \"Automorphic\" : \"Not!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50129,"user_id":527,"body":"def automorphic(n)\n  (n ** 2).to_s.ends_with?(n.to_s) ? \"Automorphic\" : \"Not!!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50130,"user_id":1072,"body":"def automorphic(n) [1, 5, 6, 25, 76, 376, 625, 9376].includes?(n) ? \"Automorphic\" : \"Not!!\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a5f9f80f5dc3f942b002309":[{"id":50131,"user_id":759,"body":"class Omnibool\n  def self.omnibool\n    new\n  end\n  def ==(x : Bool)\n    true\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a63948acadebff56f000018":[{"id":50132,"user_id":null,"body":"def max_product(numbers, size)\n  numbers.sort.last(size).product\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50133,"user_id":null,"body":"def max_product(numbers, size)\n  numbers.sort[-size..].reduce{|x, y| x * y}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50134,"user_id":168,"body":"def max_product(numbers, size)\n  numbers.sort_by { |x| -x }.first(size).reduce(1) { |a, b| a * b }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50135,"user_id":1474,"body":"def max_product(nums, n)\n  nums.sort.last(n).product\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50136,"user_id":492,"body":"def max_product(numbers, size)\n  b = numbers.sort{|a,b| b <=> a}\n  i = 0; p = 1\n  while (i < size)\n      p *= b[i]\n      i += 1\n  end\n  p\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50137,"user_id":null,"body":"def max_product(numbers, size)\n  numbers.sort.reverse[0...size].product\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50138,"user_id":null,"body":"def max_product(numbers, size)\n  numbers.sort[-size .. -1].product\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50139,"user_id":null,"body":"def max_product(numbers, size)\n  numbers.sort[-size..-1].reduce(1) { |a, x| a * x }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50140,"user_id":1072,"body":"def max_product(n,s) n.sort{|a,b| b-a}[0,s].reduce(1){|a,b| a*b} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50141,"user_id":1072,"body":"def max_product(n,s) n.sort{|a,b| b-a}[0,s].reduce(1){|a,b| a*b} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a651865fd56cb55760000e0":[{"id":50142,"user_id":421,"body":"def array_leaders(numbers)\n  arr = [] of Int32\n  numbers.each_with_index do |x, i| \n    if x > numbers[i + 1..-1].sum\n      arr << x\n    end\n  end\n  arr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50143,"user_id":1474,"body":"def array_leaders(nums)\n  nums.each_with_index.each_with_object([] of Int32) { |(n, i), obj| obj << n if nums[i+1..-1].sum < n }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50144,"user_id":1624,"body":"def array_leaders(numbers)\n  e = 0\n  leaders = [] of Int32\n  (numbers.size-1).downto(0) do |i|\n    ai = numbers[i]\n    leaders << ai if ai > e\n    e += ai\n  end\n  leaders.reverse\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50145,"user_id":null,"body":"def array_leaders(numbers)\n  numbers.map_with_index { |v, i| {v, i} }.select { |t| numbers[t[1] + 1..-1].sum < t[0] }.map &.[](0)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50146,"user_id":645,"body":"def array_leaders(numbers)\n  res = [] of Int32\n  numbers.each_with_index do | item, i | \n    if item > ((numbers[(i + 1)..-1].sum) || 0)\n      res << item\n    end\n  end\n  return res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a662a02e626c54e87000123":[{"id":50147,"user_id":421,"body":"def extra_perfect(n)\n  (1..n).select(&.odd?)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50148,"user_id":527,"body":"def extra_perfect(n)\n  1.step(to: n, by: 2).to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50149,"user_id":527,"body":"def extra_perfect(n)\n  1.upto(n).step(2).to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50150,"user_id":53,"body":"def extra_perfect(n)\n  (1..n).select{|e|e%2!=0}.to_a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50151,"user_id":492,"body":"def extra_perfect(n)\n  (1..n).select { |a| a.odd? }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50152,"user_id":1474,"body":"def extra_perfect(n)\n  (1..n).select { |i| \/\\A1?[01]*1\\z\/ =~ i.to_s(2) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50153,"user_id":null,"body":"def extra_perfect(n)\n  (1..n).reject(&.bit(0).zero?)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50154,"user_id":1072,"body":"def extra_perfect(n) (1..n).step(2).to_a end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a6663e9fd56cb5ab800008b":[{"id":50155,"user_id":53,"body":"def human_years_cat_years_dog_years(y)\n  [y, y * 4 + 11 + (y > 1 ? 5 : 0), y * 5 + 10 + (y > 1 ? 4 : 0)]\nend ","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-28 17:56:51"},{"id":50156,"user_id":421,"body":"def human_years_cat_years_dog_years(human_years)\n  human_years == 1 ? [1, 15, 15] : [human_years, (human_years - 2) * 4 + 24, (human_years - 2) * 5 + 24]\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50157,"user_id":573,"body":"def human_years_cat_years_dog_years(human_years)\n  case human_years\n  when 1\n    [1, 15, 15]\n  when 2\n    [2, 24, 24]\n  else\n    [human_years, 24 + 4 * (human_years - 2), 24 + 5 * (human_years - 2)]\n  end\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50158,"user_id":null,"body":"def calc_years(years : Int, animal : String)\n  multiplier = animal == \"cat\" ? 4 : 5\n  years == 1 ? 15 :\n  years == 2 ? 24 : 24 + (years - 2) * multiplier\nend\n\ndef human_years_cat_years_dog_years(human_years : Int)    \n  [human_years, calc_years(human_years,\"cat\"), calc_years(human_years,\"dog\")]\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50159,"user_id":1566,"body":"def human_years_cat_years_dog_years(y)\n  [y,y==1?15:16+4*y,y==1?15:14+5*y]\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50160,"user_id":null,"body":"def human_years_cat_years_dog_years(human_years)\n  return [1, 15, 15] if human_years == 1\n  [human_years, 16 + human_years * 4, 14 + human_years * 5]\nend \n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50161,"user_id":48,"body":"def human_years_cat_years_dog_years(man)\n  cat = dog = 15\n  if man == 2\n    cat = dog = 24\n  elsif man != 1\n    cat = 24 + (man - 2) * 4\n    dog = 24 + (man - 2) * 5\n  end\n  [man, cat, dog]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50162,"user_id":1474,"body":"def human_years_cat_years_dog_years(human_years)\n  n = human_years\n  cy, dy = 15, 15\n  n -= 1\n  if n > 0\n    cy += 9\n    dy += 9\n    n -= 1\n  end\n  if n > 0\n    cy += n * 4\n    dy += n * 5\n  end\n  [human_years, cy, dy]\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50163,"user_id":null,"body":"def human_years_cat_years_dog_years(human_years)\n  return human_years > 1 ? [human_years,(human_years-2)*4+24,(human_years-2)*5+24] : [1,15,15]\nend ","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50164,"user_id":1624,"body":"def human_years_cat_years_dog_years(y)\n  return [y, 15, 15] if y == 1\n  return [y, 24, 24] if y == 2\n  [\n    y,\n    16 + 4 * y,\n    14 + 5 * y,\n  ]\nend \n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a7893ef0025e9eb50000013":[{"id":50165,"user_id":527,"body":"def max_gap(numbers)\n  numbers.sort.each_cons(2, true).max_of{ |(x, y)| y - x }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50166,"user_id":421,"body":"def max_gap(numbers)\n  numbers.sort.each_cons(2).map{|(x, y)| y - x}.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50167,"user_id":1474,"body":"def max_gap(numbers)\n  numbers.sort.each_cons(2).map { |(a, b)| b - a }.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50168,"user_id":492,"body":"def max_gap(nums)\n    arr = nums.sort\n    sm = arr[1] - arr[0]\n    i = 0\n    while (i < arr.size - 1)\n        if (arr[i + 1] - arr[i] > sm)\n            sm = arr[i + 1] - arr[i]\n        end\n        i += 1\n    end\n    sm\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50169,"user_id":null,"body":"def max_gap(numbers)\n  numbers.sort!\n  res = [] of Int32\n  (1...numbers.size).each do |i|\n    res << (numbers[i - 1] - numbers[i]).abs\n  end\n  res.max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50170,"user_id":null,"body":"def max_gap(numbers)\n  max_gap = 0\n\n  numbers.sort.each_cons(2) do |cons|\n    max_gap = [cons[1] - cons[0], max_gap].max\n  end\n  \n  max_gap\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50171,"user_id":1072,"body":"def max_gap(n) n=n.sort; (1...n.size).reduce(0){|a,i| [a,n[i]-n[i-1]].max} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a805d8cafa10f8b930005ba":[{"id":50172,"user_id":1072,"body":"def nearest_sq(n) (n**0.5).round**2 end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50173,"user_id":527,"body":"def nearest_sq(n)\n  m = Math.sqrt(n)\n  {m.floor ** 2, m.ceil ** 2}.min_by{ |x| (x - n).abs }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50174,"user_id":null,"body":"def nearest_sq(n)\n  a = (n**0.5).floor\n  a2 = a**2\n  b2 = (a+1)**2\n  b2-n<n-a2 ? b2 : a2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50175,"user_id":1624,"body":"def nearest_sq(n)\n  below = (n.to_f**0.5).floor ** 2\n  above = (n.to_f**0.5).ceil ** 2\n  if n - below < above - n\n    below\n  else\n    above\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50176,"user_id":null,"body":"def nearest_sq(n)\n  n.**(0.5).round(0).**(2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50177,"user_id":null,"body":"def nearest_sq(n)\n  return n if Math.sqrt(n).floor == Math.sqrt(n)\n  i = 1\n  while true\n    sqr1 = i * i\n    i += 1\n    sqr2 = i * i\n    if n > sqr1 && n < sqr2\n      raz1 = n - sqr1\n      raz2 = sqr2 - n\n      raz1 < raz2 ? return sqr1 : return sqr2\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50178,"user_id":null,"body":"def nearest_sq(n)\n  a = Math.sqrt(n).floor\n  b, a = (a+1)*(a+1), a*a\n  n-a<b-n ? a : b\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50179,"user_id":null,"body":"def nearest_sq(n)\n  Math.sqrt(n).round ** 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50180,"user_id":1828,"body":"def nearest_sq(n)\n  a = Math.sqrt(n).floor\n  (a**2 - n).abs > ((a+1)**2 - n).abs ? (a+1)**2 : a**2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a81b78d4a6b344638000183":[{"id":50181,"user_id":null,"body":"def conjugate(verb)\n  ar = [\"o\", \"as\", \"a\", \"amos\", \"\u00e1is\", \"an\"]\n  er = [\"o\", \"es\", \"e\", \"emos\", \"\u00e9is\", \"en\"]\n  ir = [\"o\", \"es\", \"e\", \"imos\", \"\u00eds\", \"en\"]\n  arr = [] of String\n  h = {} of String => Array(String)\n  t = verb.rchop.rchop\n  h[verb] = ar.map { |x| t + x} if verb[-2] == 'a'\n  h[verb] = er.map { |x| t + x} if verb[-2] == 'e'\n  h[verb] = ir.map { |x| t + x} if verb[-2] == 'i'\n  h\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50182,"user_id":1375,"body":"def conjugate(verb)\n  suffixes = case verb[-2..-1]\n             when \"ar\"\n               %w(o as a amos \u00e1is an)\n             when \"er\" \n               %w(o es e emos \u00e9is en)\n             when \"ir\" \n               %w(o es e imos \u00eds en)\n             else\n               [] of String\n             end\n  \n  { verb => suffixes.map { |suffix| \"#{verb[0..-3]}#{suffix}\" } }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50183,"user_id":1072,"body":"def conjugate(v) r=v[0,v.size-2]; e=v[v.size-2,2]; {v => (e==\"ar\" ? [\"o\",\"as\",\"a\",\"amos\",\"\u00e1is\",\"an\"] : e == \"er\" ? [\"o\",\"es\",\"e\",\"emos\",\"\u00e9is\",\"en\"] : [\"o\",\"es\",\"e\",\"imos\",\"\u00eds\",\"en\"]).map{|t| r+t}} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a87449ab1710171300000fd":[{"id":50184,"user_id":null,"body":"def tidy_number(n)\n  while n > 0\n    d = n % 10\n    n \/= 10\n    return false if d < n % 10\n  end\n  true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50185,"user_id":1624,"body":"def tidy_number(n)\n  n.to_s == n.to_s.chars.sort.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50186,"user_id":null,"body":"def tidy_number(n)\n  n.to_s.chars == n.to_s.chars.sort\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50187,"user_id":null,"body":"def tidy_number(n)\n  data = n.to_s.split(\"\")\n  (0..data.size - 2).each do |i|\n    return false if data[i] > data[i + 1]\n  end\n  return true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50188,"user_id":1768,"body":"def tidy_number(x)\n  x.to_s.chars.sort.join.to_i==x\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50189,"user_id":null,"body":"def tidy_number(n)\n  i = 0\n  dg = 10\n  t = true\n  while 10**i <= n && t\n    keep = dg\n    dg = n\/10**i%10\n    t = dg <= keep\n    i += 1\n  end\n  t\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50190,"user_id":1228,"body":"def tidy_number(n)\n  n.to_s.chars.sort.join.to_i == n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50191,"user_id":null,"body":"def tidy_number(n)\n  n.to_s.chars.each_cons(2).all?{ |m| m[0] <= m[1] }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50192,"user_id":1072,"body":"def tidy_number(n,l=9) n == 0 || n%10 <= l && tidy_number(n \/ 10,n%10) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a8c1b06fd5777d4c00000dd":[{"id":50193,"user_id":null,"body":"def diagonal(matrix)\n  d = matrix.map_with_index{|r, i| r[i]-r[-i-1]}.sum\n  d>0? \"Principal Diagonal win!\": d<0? \"Secondary Diagonal win!\": \"Draw!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50194,"user_id":50,"body":"def diagonal(matrix)\n  p=0\n  s=0\n  n=matrix.size\n  (0..n-1).each do |i|\n    p+=matrix[i][i]\n    s+=matrix[i][n-i-1]\n    end\n  p>s ? \"Principal Diagonal win!\" : p<s ? \"Secondary Diagonal win!\" : \"Draw!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50195,"user_id":421,"body":"def diagonal(matrix)\n  principal = matrix.map_with_index{|x, i| x[i]}.sum\n  secondary = matrix.map_with_index{|x, i| x[x.size - 1 - i]}.sum\n  principal > secondary ? \"Principal Diagonal win!\" : secondary > principal ? \"Secondary Diagonal win!\": \"Draw!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50196,"user_id":1624,"body":"def diagonal(matrix)\n  n = matrix.size\n  principal = (0...n).map{|i| matrix[i][i] }.sum\n  secondary = (0...n).map{|i| matrix[i][n-1-i] }.sum\n  if principal > secondary\n    \"Principal Diagonal win!\"\n  elsif principal < secondary\n    \"Secondary Diagonal win!\"\n  else\n    \"Draw!\"\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50197,"user_id":null,"body":"def diagonal(matrix)\n    pr, sc = [] of Int32, [] of Int32\n    matrix[0].size.times do |i|\n      pr << matrix[i][i]\n      sc << matrix[i][-(1+i)]\n    end\n    puts pr, sc\n    return \"Draw!\" if pr.sum == sc.sum \n    pr.sum > sc.sum ? \"Principal Diagonal win!\" : \"Secondary Diagonal win!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50198,"user_id":null,"body":"def diagonal(matrix)\n  n = matrix.size-1\n  pr = matrix.map_with_index{|r, i| r[i]}.sum\n  sc = matrix.map_with_index{|r, i| r[n-i]}.sum\n  (pr>sc)? \"Principal Diagonal win!\": (sc>pr)? \"Secondary Diagonal win!\": \"Draw!\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50199,"user_id":null,"body":"def diagonal(matrix)\n  pri = 0\n  sec = 0\n  s = matrix[0].size - 1\n  if s == 0\n    return \"Draw!\"\n  end\n  (0..s).each do |i|\n    pri += matrix[i][i]\n    sec += matrix[i][s - i]\n  end\n  if pri > sec\n    return \"Principal Diagonal win!\"\n  end\n  if pri < sec\n    return \"Secondary Diagonal win!\"\n  end\n  if pri == sec\n    return \"Draw!\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50200,"user_id":1072,"body":"def diagonal(m) i=-1; p,s=m.reduce([0,0]){|a,b| i+=1; [a[0]+b[i],a[1]+b[b.size-i-1]]}; p==s ? \"Draw!\" : p>s ? \"Principal Diagonal win!\" : \"Secondary Diagonal win!\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a905c2157c562994900009d":[{"id":50201,"user_id":421,"body":"def product_array(numbers)\n  numbers.map{|x| numbers.product \/ x}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50202,"user_id":17,"body":"def product_array(a)\n  a.map { |n| a.product \/ n }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50203,"user_id":527,"body":"def product_array(numbers)\n  p = numbers.product\n  numbers.map{ |n| p \/ n }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50204,"user_id":null,"body":"def product_array(numbers)\n  numbers.map{|x| numbers.product \/\/ x}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50205,"user_id":53,"body":"def product_array(xs)\n  p = xs.reduce(1){|a,b|a*b}\n  xs.map{|x|p\/x}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50206,"user_id":null,"body":"def product_array(numbers)\n  max_prod = numbers.product\n  numbers.map { |x| max_prod \/\/ x }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50207,"user_id":168,"body":"def product_array(numbers)\n  p = numbers.product\n  numbers.map { |x| p \/ x }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50208,"user_id":209,"body":"def product_array(numbers)\n  q = numbers.reduce{|x,y| x*y}\n  numbers.map{|x| (q \/ x).to_i}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50209,"user_id":1072,"body":"def product_array(n) \n  p=n.reduce(1){|a,b| a*b}\n  n.map{|e| p\/e} \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50210,"user_id":null,"body":"def product_array(numbers)\n  res = [] of Int32\n  numbers.each do |x|\n    res << (numbers.product \/ x)\n  end\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a91a7c5fd8c061367000002":[{"id":50211,"user_id":421,"body":"def minimum_steps(numbers, value)\n  numbers.sort!\n  count = 0\n  tot = numbers[0]\n  while tot < value\n    tot += numbers[count + 1]\n    count += 1\n  end\n  count\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50212,"user_id":53,"body":"def minimum_steps(ns, value)\n  ns = ns.sort\n  i,m = 0,0\n  while i<ns.size\n    m+=ns[i]\n    return i if m>=value\n    i+=1\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50213,"user_id":168,"body":"def minimum_steps(numbers, value)\n  numbers.sort.index { |x| (value -= x) <= 0 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50214,"user_id":168,"body":"def minimum_steps(numbers, value)\n  numbers.sort.index { |x| (value -= x) <= 0 } || numbers.size - 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50215,"user_id":1474,"body":"def minimum_steps(numbers, value)\n  ret = numbers.sort\n  cnt = ret.shift\n  i = 0\n  until ret.empty?\n    return i if cnt >= value\n    cnt += ret.shift\n    i += 1\n  end\n  return i if cnt >= value\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50216,"user_id":null,"body":"def minimum_steps(numbers, value)\n    ary = numbers.sort {|x,y| x <=> y}\n\n    sum, idx = 0, -1\n\n    ary.each do |num|\n        next if sum >= value\n        sum += num\n        idx += 1\n    end\n    idx\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50217,"user_id":492,"body":"def minimum_steps(numbers, value)\n  total = 0\n  numbers.sort.each_with_index do |x, idx|\n    total += x\n    return idx if total >= value\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50218,"user_id":1768,"body":"def minimum_steps(x, y)\n    (0..x.size).each do |i|\n        if x.sort[0..i].sum >= y\n            return i\n        end\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50219,"user_id":null,"body":"def minimum_steps(numbers, value)\n  sorted = numbers.sort\n  count = 0\n  loop do\n    count += sorted.shift\n    return numbers.size - sorted.size - 1 if count >= value\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50220,"user_id":527,"body":"def minimum_steps(numbers, value)\n  sum = 0\n  numbers.sort.each_with_index do |n, i|\n    sum += n\n    return i if sum >= value\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50221,"user_id":1072,"body":"def minimum_steps(n,v,c=1) s=n.sort; s[0]>=v ? c-1 : s[0]+s[1]>=v ? c : minimum_steps([s[0]+s[1]]+s[2,99],v,c+1) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a946d9fba1bb5135100007c":[{"id":50222,"user_id":17,"body":"def is_prime?(n)\n  return n == 2 if n <= 2\n  return false if n % 2 == 0\n  i = 3\n  while i <= Math.sqrt(n)\n    return false if n % i == 0\n    i += 2\n  end\n  true\nend\ndef minimum_number(a)\n  sum = a.sum\n  total = sum\n  while !is_prime?(total)\n    total += 1\n  end\n  total - sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50223,"user_id":1072,"body":"def minimum_number(n) s=n.reduce(0){|a,b| a+b}; ([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3607,3613,3617,3623,3631,3637,3643,3659,3671,3673,3677,3691,3697,3701,3709,3719,3727,3733,3739,3761,3767,3769,3779,3793,3797,3803,3821,3823,3833,3847,3851,3853,3863,3877,3881,3889,3907,3911,3917,3919,3923,3929,3931,3943,3947,3967,3989,4001,4003,4007,4013,4019,4021,4027,4049,4051,4057,4073,4079,4091,4093,4099,4111,4127,4129,4133,4139,4153,4157,4159,4177,4201,4211,4217,4219,4229,4231,4241,4243,4253,4259,4261,4271,4273,4283,4289,4297,4327,4337,4339,4349,4357,4363,4373,4391,4397,4409,4421,4423,4441,4447,4451,4457,4463,4481,4483,4493,4507,4513,4517,4519,4523,4547,4549,4561,4567,4583,4591,4597,4603,4621,4637,4639,4643,4649,4651,4657,4663,4673,4679,4691,4703,4721,4723,4729,4733,4751,4759,4783,4787,4789,4793,4799,4801,4813,4817,4831,4861,4871,4877,4889,4903,4909,4919,4931,4933,4937,4943,4951,4957,4967,4969,4973,4987,4993,4999,5003,5009,5011,5021,5023,5039,5051,5059,5077,5081,5087,5099,5101,5107,5113,5119,5147,5153,5167,5171,5179,5189,5197,5209,5227,5231,5233,5237,5261,5273,5279,5281,5297,5303,5309,5323,5333,5347,5351,5381,5387,5393,5399,5407,5413,5417,5419,5431,5437,5441,5443,5449,5471,5477,5479,5483,5501,5503,5507,5519,5521,5527,5531,5557,5563,5569,5573,5581,5591,5623,5639,5641,5647,5651,5653,5657,5659,5669,5683,5689,5693,5701,5711,5717,5737,5741,5743,5749,5779,5783,5791,5801,5807,5813,5821,5827,5839,5843,5849,5851,5857,5861,5867,5869,5879,5881,5897,5903,5923,5927,5939,5953,5981,5987,6007,6011,6029,6037,6043,6047,6053,6067,6073,6079,6089,6091,6101,6113,6121,6131,6133,6143,6151,6163,6173,6197,6199,6203,6211,6217,6221,6229,6247,6257,6263,6269,6271,6277,6287,6299,6301,6311,6317,6323,6329,6337,6343,6353,6359,6361,6367,6373,6379,6389,6397,6421,6427,6449,6451,6469,6473,6481,6491,6521,6529,6547,6551,6553,6563,6569,6571,6577,6581,6599,6607,6619,6637,6653,6659,6661,6673,6679,6689,6691,6701,6703,6709,6719,6733,6737,6761,6763,6779,6781,6791,6793,6803,6823,6827,6829,6833,6841,6857,6863,6869,6871,6883,6899,6907,6911,6917,6947,6949,6959,6961,6967,6971,6977,6983,6991,6997,7001,7013,7019,7027,7039,7043,7057,7069,7079,7103,7109,7121,7127,7129,7151,7159,7177,7187,7193,7207,7211,7213,7219,7229,7237,7243,7247,7253,7283,7297,7307,7309,7321,7331,7333,7349,7351,7369,7393,7411,7417,7433,7451,7457,7459,7477,7481,7487,7489,7499,7507,7517,7523,7529,7537,7541,7547,7549,7559,7561,7573,7577,7583,7589,7591,7603,7607,7621,7639,7643,7649,7669,7673,7681,7687,7691,7699,7703,7717,7723,7727,7741,7753,7757,7759,7789,7793,7817,7823,7829,7841,7853,7867,7873,7877,7879,7883,7901,7907,7919,7927,7933,7937,7949,7951,7963,7993,8009,8011,8017,8039,8053,8059,8069,8081,8087,8089,8093,8101,8111,8117,8123,8147,8161,8167,8171,8179,8191,8209,8219,8221,8231,8233,8237,8243,8263,8269,8273,8287,8291,8293,8297,8311,8317,8329,8353,8363,8369,8377,8387,8389,8419,8423,8429,8431,8443,8447,8461,8467,8501,8513,8521,8527,8537,8539,8543,8563,8573,8581,8597,8599,8609,8623,8627,8629,8641,8647,8663,8669,8677,8681,8689,8693,8699,8707,8713,8719,8731,8737,8741,8747,8753,8761,8779,8783,8803,8807,8819,8821,8831,8837,8839,8849,8861,8863,8867,8887,8893,8923,8929,8933,8941,8951,8963,8969,8971,8999,9001,9007,9011,9013,9029,9041,9043,9049,9059,9067,9091,9103,9109,9127,9133,9137,9151,9157,9161,9173,9181,9187,9199,9203,9209,9221,9227,9239,9241,9257,9277,9281,9283,9293,9311,9319,9323,9337,9341,9343,9349,9371,9377,9391,9397,9403,9413,9419,9421,9431,9433,9437,9439,9461,9463,9467,9473,9479,9491,9497,9511,9521,9533,9539,9547,9551,9587,9601,9613,9619,9623,9629,9631,9643,9649,9661,9677,9679,9689,9697,9719,9721,9733,9739,9743,9749,9767,9769,9781,9787,9791,9803,9811,9817,9829,9833,9839,9851,9857,9859,9871,9883,9887,9901,9907,9923,9929,9931,9941,9949,9967,9973,10007,10009,10037,10039,10061,10067,10069,10079,10091,10093,10099,10103,10111,10133,10139,10141,10151,10159,10163,10169,10177,10181,10193,10211,10223,10243,10247,10253,10259,10267,10271,10273,10289,10301,10303,10313,10321,10331,10333,10337,10343,10357,10369,10391,10399,10427,10429,10433,10453,10457,10459,10463,10477,10487,10499,10501,10513,10529,10531,10559,10567,10589,10597,10601,10607,10613,10627,10631,10639,10651,10657,10663,10667,10687,10691,10709,10711,10723,10729,10733,10739,10753,10771,10781,10789,10799,10831,10837,10847,10853,10859,10861,10867,10883,10889,10891,10903,10909,10937,10939,10949,10957,10973,10979,10987,10993,11003,11027,11047,11057,11059,11069,11071,11083,11087,11093,11113,11117,11119,11131,11149,11159,11161,11171,11173,11177,11197,11213,11239,11243,11251,11257,11261,11273,11279,11287,11299,11311,11317,11321,11329,11351,11353,11369,11383,11393,11399,11411,11423,11437,11443,11447,11467,11471,11483,11489,11491,11497,11503,11519,11527,11549,11551,11579,11587,11593,11597,11617,11621,11633,11657,11677,11681,11689,11699,11701,11717,11719,11731,11743,11777,11779,11783,11789,11801,11807,11813,11821,11827,11831,11833,11839,11863,11867,11887,11897,11903,11909,11923,11927,11933,11939,11941,11953,11959,11969,11971,11981,11987,12007,12011,12037,12041,12043,12049,12071,12073,12097,12101,12107,12109,12113,12119,12143,12149,12157,12161,12163,12197,12203,12211,12227,12239,12241,12251,12253,12263,12269,12277,12281,12289,12301,12323,12329,12343,12347,12373,12377,12379,12391,12401,12409,12413,12421,12433,12437,12451,12457,12473,12479,12487,12491,12497,12503,12511,12517,12527,12539,12541,12547,12553,12569,12577,12583,12589,12601,12611,12613,12619,12637,12641,12647,12653,12659,12671,12689,12697,12703,12713,12721,12739,12743,12757,12763,12781,12791,12799,12809,12821,12823,12829,12841,12853,12889,12893,12899,12907,12911,12917,12919,12923,12941,12953,12959,12967,12973,12979,12983,13001,13003,13007,13009,13033,13037,13043,13049,13063,13093,13099,13103,13109,13121,13127,13147,13151,13159,13163,13171,13177,13183,13187,13217,13219,13229,13241,13249,13259,13267,13291,13297,13309,13313,13327,13331,13337,13339,13367,13381,13397,13399,13411,13417,13421,13441,13451,13457,13463,13469,13477,13487,13499,13513,13523,13537,13553,13567,13577,13591,13597,13613,13619,13627,13633,13649,13669,13679,13681,13687,13691,13693,13697,13709,13711,13721,13723,13729,13751,13757,13759,13763,13781,13789,13799,13807,13829,13831,13841,13859,13873,13877,13879,13883,13901,13903,13907,13913,13921,13931,13933,13963,13967,13997,13999,14009,14011,14029,14033,14051,14057,14071,14081,14083,14087,14107,14143,14149,14153,14159,14173,14177,14197,14207,14221,14243,14249,14251,14281,14293,14303,14321,14323,14327,14341,14347,14369,14387,14389,14401,14407,14411,14419,14423,14431,14437,14447,14449,14461,14479,14489,14503,14519,14533,14537,14543,14549,14551,14557,14561,14563,14591,14593,14621,14627,14629,14633,14639,14653,14657,14669,14683,14699,14713,14717,14723,14731,14737,14741,14747,14753,14759,14767,14771,14779,14783,14797,14813,14821,14827,14831,14843,14851,14867,14869,14879,14887,14891,14897,14923,14929,14939,14947,14951,14957,14969,14983,15013,15017,15031,15053,15061,15073,15077,15083,15091,15101,15107,15121,15131,15137,15139,15149,15161,15173,15187,15193,15199,15217,15227,15233,15241,15259,15263,15269,15271,15277,15287,15289,15299,15307,15313,15319,15329,15331,15349,15359,15361,15373,15377,15383,15391,15401,15413,15427,15439,15443,15451,15461,15467,15473,15493,15497,15511,15527,15541,15551,15559,15569,15581,15583,15601,15607,15619,15629,15641,15643,15647,15649,15661,15667,15671,15679,15683,15727,15731,15733,15737,15739,15749,15761,15767,15773,15787,15791,15797,15803,15809,15817,15823,15859,15877,15881,15887,15889,15901,15907,15913,15919,15923,15937,15959,15971,15973,15991,16001,16007,16033,16057,16061,16063,16067,16069,16073,16087,16091,16097,16103,16111,16127,16139,16141,16183,16187,16189,16193,16217,16223,16229,16231,16249,16253,16267,16273,16301,16319,16333,16339,16349,16361,16363,16369,16381,16411,16417,16421,16427,16433,16447,16451,16453,16477,16481,16487,16493,16519,16529,16547,16553,16561,16567,16573,16603,16607,16619,16631,16633,16649,16651,16657,16661,16673,16691,16693,16699,16703,16729,16741,16747,16759,16763,16787,16811,16823,16829,16831,16843,16871,16879,16883,16889,16901,16903,16921,16927,16931,16937,16943,16963,16979,16981,16987,16993,17011,17021,17027,17029,17033,17041,17047,17053,17077,17093,17099,17107,17117,17123,17137,17159,17167,17183,17189,17191,17203,17207,17209,17231,17239,17257,17291,17293,17299,17317,17321,17327,17333,17341,17351,17359,17377,17383,17387,17389,17393,17401,17417,17419,17431,17443,17449,17467,17471,17477,17483,17489,17491,17497,17509,17519,17539,17551,17569,17573,17579,17581,17597,17599,17609,17623,17627,17657,17659,17669,17681,17683,17707,17713,17729,17737,17747,17749,17761,17783,17789,17791,17807,17827,17837,17839,17851,17863,17881,17891,17903,17909,17911,17921,17923,17929,17939,17957,17959,17971,17977,17981,17987,17989,18013,18041,18043,18047,18049,18059,18061,18077,18089,18097,18119,18121,18127,18131,18133,18143,18149,18169,18181,18191,18199,18211,18217,18223,18229,18233,18251,18253,18257,18269,18287,18289,18301,18307,18311,18313,18329,18341,18353,18367,18371,18379,18397,18401,18413,18427,18433,18439,18443,18451,18457,18461,18481,18493,18503,18517,18521,18523,18539,18541,18553,18583,18587,18593,18617,18637,18661,18671,18679,18691,18701,18713,18719,18731,18743,18749,18757,18773,18787,18793,18797,18803,18839,18859,18869,18899,18911,18913,18917,18919,18947,18959,18973,18979,19001,19009,19013,19031,19037,19051,19069,19073,19079,19081,19087,19121,19139,19141,19157,19163,19181,19183,19207,19211,19213,19219,19231,19237,19249,19259,19267,19273,19289,19301,19309,19319,19333,19373,19379,19381,19387,19391,19403,19417,19421,19423,19427,19429,19433,19441,19447,19457,19463,19469,19471,19477,19483,19489,19501,19507,19531,19541,19543,19553,19559,19571,19577,19583,19597,19603,19609,19661,19681,19687,19697,19699,19709,19717,19727,19739,19751,19753,19759,19763,19777,19793,19801,19813,19819,19841,19843,19853,19861,19867,19889,19891,19913,19919,19927,19937,19949,19961,19963,19973,19979,19991,19993,19997,20011,20021,20023,20029,20047,20051,20063,20071,20089,20101,20107,20113,20117,20123,20129,20143,20147,20149,20161,20173,20177,20183,20201,20219,20231,20233,20249,20261,20269,20287,20297,20323,20327,20333,20341,20347,20353,20357,20359,20369,20389,20393,20399,20407,20411,20431,20441,20443,20477,20479,20483,20507,20509,20521,20533,20543,20549,20551,20563,20593,20599,20611,20627,20639,20641,20663,20681,20693,20707,20717,20719,20731,20743,20747,20749,20753,20759,20771,20773,20789,20807,20809,20849,20857,20873,20879,20887,20897,20899,20903,20921,20929,20939,20947,20959,20963,20981,20983,21001,21011,21013,21017,21019,21023,21031,21059,21061,21067,21089,21101,21107,21121,21139,21143,21149,21157,21163,21169,21179,21187,21191,21193,21211,21221,21227,21247,21269,21277,21283,21313,21317,21319,21323,21341,21347,21377,21379,21383,21391,21397,21401,21407,21419,21433,21467,21481,21487,21491,21493,21499,21503,21517,21521,21523,21529,21557,21559,21563,21569,21577,21587,21589,21599,21601,21611,21613,21617,21647,21649,21661,21673,21683,21701,21713,21727,21737,21739,21751,21757,21767,21773,21787,21799,21803,21817,21821,21839,21841,21851,21859,21863,21871,21881,21893,21911,21929,21937,21943,21961,21977,21991,21997,22003,22013,22027,22031,22037,22039,22051,22063,22067,22073,22079,22091,22093,22109,22111,22123,22129,22133,22147,22153,22157,22159,22171,22189,22193,22229,22247,22259,22271,22273,22277,22279,22283,22291,22303,22307,22343,22349,22367,22369,22381,22391,22397,22409,22433,22441,22447,22453,22469,22481,22483,22501,22511,22531,22541,22543,22549,22567,22571,22573,22613,22619,22621,22637,22639,22643,22651,22669,22679,22691,22697,22699,22709,22717,22721,22727,22739,22741,22751,22769,22777,22783,22787,22807,22811,22817,22853,22859,22861,22871,22877,22901,22907,22921,22937,22943,22961,22963,22973,22993,23003,23011,23017,23021,23027,23029,23039,23041,23053,23057,23059,23063,23071,23081,23087,23099,23117,23131,23143,23159,23167,23173,23189,23197,23201,23203,23209,23227,23251,23269,23279,23291,23293,23297,23311,23321,23327,23333,23339,23357,23369,23371,23399,23417,23431,23447,23459,23473,23497,23509,23531,23537,23539,23549,23557,23561,23563,23567,23581,23593,23599,23603,23609,23623,23627,23629,23633,23663,23669,23671,23677,23687,23689,23719,23741,23743,23747,23753,23761,23767,23773,23789,23801,23813,23819,23827,23831,23833,23857,23869,23873,23879,23887,23893,23899,23909,23911,23917,23929,23957,23971,23977,23981,23993,24001,24007,24019,24023,24029,24043,24049,24061,24071,24077,24083,24091,24097,24103,24107,24109,24113,24121,24133,24137,24151,24169,24179,24181,24197,24203,24223,24229,24239,24247,24251,24281,24317,24329,24337,24359,24371,24373,24379,24391,24407,24413,24419,24421,24439,24443,24469,24473,24481,24499,24509,24517,24527,24533,24547,24551,24571,24593,24611,24623,24631,24659,24671,24677,24683,24691,24697,24709,24733,24749,24763,24767,24781,24793,24799,24809,24821,24841,24847,24851,24859,24877,24889,24907,24917,24919,24923,24943,24953,24967,24971,24977,24979,24989,25013,25031,25033,25037,25057,25073,25087,25097,25111,25117,25121,25127,25147,25153,25163,25169,25171,25183,25189,25219,25229,25237,25243,25247,25253,25261,25301,25303,25307,25309,25321,25339,25343,25349,25357,25367,25373,25391,25409,25411,25423,25439,25447,25453,25457,25463,25469,25471,25523,25537,25541,25561,25577,25579,25583,25589,25601,25603,25609,25621,25633,25639,25643,25657,25667,25673,25679,25693,25703,25717,25733,25741,25747,25759,25763,25771,25793,25799,25801,25819,25841,25847,25849,25867,25873,25889,25903,25913,25919,25931,25933,25939,25943,25951,25969,25981,25997,25999,26003,26017,26021,26029,26041,26053,26083,26099,26107,26111,26113,26119,26141,26153,26161,26171,26177,26183,26189,26203,26209,26227,26237,26249,26251,26261,26263,26267,26293,26297,26309,26317,26321,26339,26347,26357,26371,26387,26393,26399,26407,26417,26423,26431,26437,26449,26459,26479,26489,26497,26501,26513,26539,26557,26561,26573,26591,26597,26627,26633,26641,26647,26669,26681,26683,26687,26693,26699,26701,26711,26713,26717,26723,26729,26731,26737,26759,26777,26783,26801,26813,26821,26833,26839,26849,26861,26863,26879,26881,26891,26893,26903,26921,26927,26947,26951,26953,26959,26981,26987,26993,27011,27017,27031,27043,27059,27061,27067,27073,27077,27091,27103,27107,27109,27127,27143,27179,27191,27197,27211,27239,27241,27253,27259,27271,27277,27281,27283,27299,27329,27337,27361,27367,27397,27407,27409,27427,27431,27437,27449,27457,27479,27481,27487,27509,27527,27529,27539,27541,27551,27581,27583,27611,27617,27631,27647,27653,27673,27689,27691,27697,27701,27733,27737,27739,27743,27749,27751,27763,27767,27773,27779,27791,27793,27799,27803,27809,27817,27823,27827,27847,27851,27883,27893,27901,27917,27919,27941,27943,27947,27953,27961,27967,27983,27997,28001,28019,28027,28031,28051,28057,28069,28081,28087,28097,28099,28109,28111,28123,28151,28163,28181,28183,28201,28211,28219,28229,28277,28279,28283,28289,28297,28307,28309,28319,28349,28351,28387,28393,28403,28409,28411,28429,28433,28439,28447,28463,28477,28493,28499,28513,28517,28537,28541,28547,28549,28559,28571,28573,28579,28591,28597,28603,28607,28619,28621,28627,28631,28643,28649,28657,28661,28663,28669,28687,28697,28703,28711,28723,28729,28751,28753,28759,28771,28789,28793,28807,28813,28817,28837,28843,28859,28867,28871,28879,28901,28909,28921,28927,28933,28949,28961,28979,29009,29017,29021,29023,29027,29033,29059,29063,29077,29101,29123,29129,29131,29137,29147,29153,29167,29173,29179,29191,29201,29207,29209,29221,29231,29243,29251,29269,29287,29297,29303,29311,29327,29333,29339,29347,29363,29383,29387,29389,29399,29401,29411,29423,29429,29437,29443,29453,29473,29483,29501,29527,29531,29537,29567,29569,29573,29581,29587,29599,29611,29629,29633,29641,29663,29669,29671,29683,29717,29723,29741,29753,29759,29761,29789,29803,29819,29833,29837,29851,29863,29867,29873,29879,29881,29917,29921,29927,29947,29959,29983,29989,30011,30013,30029,30047,30059,30071,30089,30091,30097,30103,30109,30113,30119,30133,30137,30139,30161,30169,30181,30187,30197,30203,30211,30223,30241,30253,30259,30269,30271,30293,30307,30313,30319,30323,30341,30347,30367,30389,30391,30403,30427,30431,30449,30467,30469,30491,30493,30497,30509,30517,30529,30539,30553,30557,30559,30577,30593,30631,30637,30643,30649,30661,30671,30677,30689,30697,30703,30707,30713,30727,30757,30763,30773,30781,30803,30809,30817,30829,30839,30841,30851,30853,30859,30869,30871,30881,30893,30911,30931,30937,30941,30949,30971,30977,30983,31013,31019,31033,31039,31051,31063,31069,31079,31081,31091,31121,31123,31139,31147,31151,31153,31159,31177,31181,31183,31189,31193,31219,31223,31231,31237,31247,31249,31253,31259,31267,31271,31277,31307,31319,31321,31327,31333,31337,31357,31379,31387,31391,31393,31397,31469,31477,31481,31489,31511,31513,31517,31531,31541,31543,31547,31567,31573,31583,31601,31607,31627,31643,31649,31657,31663,31667,31687,31699,31721,31723,31727,31729,31741,31751,31769,31771,31793,31799,31817,31847,31849,31859,31873,31883,31891,31907,31957,31963,31973,31981,31991,32003,32009,32027,32029,32051,32057,32059,32063,32069,32077,32083,32089,32099,32117,32119,32141,32143,32159,32173,32183,32189,32191,32203,32213,32233,32237,32251,32257,32261,32297,32299,32303,32309,32321,32323,32327,32341,32353,32359,32363,32369,32371,32377,32381,32401,32411,32413,32423,32429,32441,32443,32467,32479,32491,32497,32503,32507,32531,32533,32537,32561,32563,32569,32573,32579,32587,32603,32609,32611,32621,32633,32647,32653,32687,32693,32707,32713,32717,32719,32749,32771,32779,32783,32789,32797,32801,32803,32831,32833,32839,32843,32869,32887,32909,32911,32917,32933,32939,32941,32957,32969,32971,32983,32987,32993,32999,33013,33023,33029,33037,33049,33053,33071,33073,33083,33091,33107,33113,33119,33149,33151,33161,33179,33181,33191,33199,33203,33211,33223,33247,33287,33289,33301,33311,33317,33329,33331,33343,33347,33349,33353,33359,33377,33391,33403,33409,33413,33427,33457,33461,33469,33479,33487,33493,33503,33521,33529,33533,33547,33563,33569,33577,33581,33587,33589,33599,33601,33613,33617,33619,33623,33629,33637,33641,33647,33679,33703,33713,33721,33739,33749,33751,33757,33767,33769,33773,33791,33797,33809,33811,33827,33829,33851,33857,33863,33871,33889,33893,33911,33923,33931,33937,33941,33961,33967,33997,34019,34031,34033,34039,34057,34061,34123,34127,34129,34141,34147,34157,34159,34171,34183,34211,34213,34217,34231,34253,34259,34261,34267,34273,34283,34297,34301,34303,34313,34319,34327,34337,34351,34361,34367,34369,34381,34403,34421,34429,34439,34457,34469,34471,34483,34487,34499,34501,34511,34513,34519,34537,34543,34549,34583,34589,34591,34603,34607,34613,34631,34649,34651,34667,34673,34679,34687,34693,34703,34721,34729,34739,34747,34757,34759,34763,34781,34807,34819,34841,34843,34847,34849,34871,34877,34883,34897,34913,34919,34939,34949,34961,34963,34981,35023,35027,35051,35053,35059,35069,35081,35083,35089,35099,35107,35111,35117,35129,35141,35149,35153,35159,35171,35201,35221,35227,35251,35257,35267,35279,35281,35291,35311,35317,35323,35327,35339,35353,35363,35381,35393,35401,35407,35419,35423,35437,35447,35449,35461,35491,35507,35509,35521,35527,35531,35533,35537,35543,35569,35573,35591,35593,35597,35603,35617,35671,35677,35729,35731,35747,35753,35759,35771,35797,35801,35803,35809,35831,35837,35839,35851,35863,35869,35879,35897,35899,35911,35923,35933,35951,35963,35969,35977,35983,35993,35999,36007,36011,36013,36017,36037,36061,36067,36073,36083,36097,36107,36109,36131,36137,36151,36161,36187,36191,36209,36217,36229,36241,36251,36263,36269,36277,36293,36299,36307,36313,36319,36341,36343,36353,36373,36383,36389,36433,36451,36457,36467,36469,36473,36479,36493,36497,36523,36527,36529,36541,36551,36559,36563,36571,36583,36587,36599,36607,36629,36637,36643,36653,36671,36677,36683,36691,36697,36709,36713,36721,36739,36749,36761,36767,36779,36781,36787,36791,36793,36809,36821,36833,36847,36857,36871,36877,36887,36899,36901,36913,36919,36923,36929,36931,36943,36947,36973,36979,36997,37003,37013,37019,37021,37039,37049,37057,37061,37087,37097,37117,37123,37139,37159,37171,37181,37189,37199,37201,37217,37223,37243,37253,37273,37277,37307,37309,37313,37321,37337,37339,37357,37361,37363,37369,37379,37397,37409,37423,37441,37447,37463,37483,37489,37493,37501,37507,37511,37517,37529,37537,37547,37549,37561,37567,37571,37573,37579,37589,37591,37607,37619,37633,37643,37649,37657,37663,37691,37693,37699,37717,37747,37781,37783,37799,37811,37813,37831,37847,37853,37861,37871,37879,37889,37897,37907,37951,37957,37963,37967,37987,37991,37993,37997,38011,38039,38047,38053,38069,38083,38113,38119,38149,38153,38167,38177,38183,38189,38197,38201,38219,38231,38237,38239,38261,38273,38281,38287,38299,38303,38317,38321,38327,38329,38333,38351,38371,38377,38393,38431,38447,38449,38453,38459,38461,38501,38543,38557,38561,38567,38569,38593,38603,38609,38611,38629,38639,38651,38653,38669,38671,38677,38693,38699,38707,38711,38713,38723,38729,38737,38747,38749,38767,38783,38791,38803,38821,38833,38839,38851,38861,38867,38873,38891,38903,38917,38921,38923,38933,38953,38959,38971,38977,38993,39019,39023,39041,39043,39047,39079,39089,39097,39103,39107,39113,39119,39133,39139,39157,39161,39163,39181,39191,39199,39209,39217,39227,39229,39233,39239,39241,39251,39293,39301,39313,39317,39323,39341,39343,39359,39367,39371,39373,39383,39397,39409,39419,39439,39443,39451,39461,39499,39503,39509,39511,39521,39541,39551,39563,39569,39581,39607,39619,39623,39631,39659,39667,39671,39679,39703,39709,39719,39727,39733,39749,39761,39769,39779,39791,39799,39821,39827,39829,39839,39841,39847,39857,39863,39869,39877,39883,39887,39901,39929,39937,39953,39971,39979,39983,39989,40009,40013,40031,40037,40039,40063,40087,40093,40099,40111,40123,40127,40129,40151,40153,40163,40169,40177,40189,40193,40213,40231,40237,40241,40253,40277,40283,40289,40343,40351,40357,40361,40387,40423,40427,40429,40433,40459,40471,40483,40487,40493,40499,40507,40519,40529,40531,40543,40559,40577,40583,40591,40597,40609,40627,40637,40639,40693,40697,40699,40709,40739,40751,40759,40763,40771,40787,40801,40813,40819,40823,40829,40841,40847,40849,40853,40867,40879,40883,40897,40903,40927,40933,40939,40949,40961,40973,40993,41011,41017,41023,41039,41047,41051,41057,41077,41081,41113,41117,41131,41141,41143,41149,41161,41177,41179,41183,41189,41201,41203,41213,41221,41227,41231,41233,41243,41257,41263,41269,41281,41299,41333,41341,41351,41357,41381,41387,41389,41399,41411,41413,41443,41453,41467,41479,41491,41507,41513,41519,41521,41539,41543,41549,41579,41593,41597,41603,41609,41611,41617,41621,41627,41641,41647,41651,41659,41669,41681,41687,41719,41729,41737,41759,41761,41771,41777,41801,41809,41813,41843,41849,41851,41863,41879,41887,41893,41897,41903,41911,41927,41941,41947,41953,41957,41959,41969,41981,41983,41999,42013,42017,42019,42023,42043,42061,42071,42073,42083,42089,42101,42131,42139,42157,42169,42179,42181,42187,42193,42197,42209,42221,42223,42227,42239,42257,42281,42283,42293,42299,42307,42323,42331,42337,42349,42359,42373,42379,42391,42397,42403,42407,42409,42433,42437,42443,42451,42457,42461,42463,42467,42473,42487,42491,42499,42509,42533,42557,42569,42571,42577,42589,42611,42641,42643,42649,42667,42677,42683,42689,42697,42701,42703,42709,42719,42727,42737,42743,42751,42767,42773,42787,42793,42797,42821,42829,42839,42841,42853,42859,42863,42899,42901,42923,42929,42937,42943,42953,42961,42967,42979,42989,43003,43013,43019,43037,43049,43051,43063,43067,43093,43103,43117,43133,43151,43159,43177,43189,43201,43207,43223,43237,43261,43271,43283,43291,43313,43319,43321,43331,43391,43397,43399,43403,43411,43427,43441,43451,43457,43481,43487,43499,43517,43541,43543,43573,43577,43579,43591,43597,43607,43609,43613,43627,43633,43649,43651,43661,43669,43691,43711,43717,43721,43753,43759,43777,43781,43783,43787,43789,43793,43801,43853,43867,43889,43891,43913,43933,43943,43951,43961,43963,43969,43973,43987,43991,43997,44017,44021,44027,44029,44041,44053,44059,44071,44087,44089,44101,44111,44119,44123,44129,44131,44159,44171,44179,44189,44201,44203,44207,44221,44249,44257,44263,44267,44269,44273,44279,44281,44293,44351,44357,44371,44381,44383,44389,44417,44449,44453,44483,44491,44497,44501,44507,44519,44531,44533,44537,44543,44549,44563,44579,44587,44617,44621,44623,44633,44641,44647,44651,44657,44683,44687,44699,44701,44711,44729,44741,44753,44771,44773,44777,44789,44797,44809,44819,44839,44843,44851,44867,44879,44887,44893,44909,44917,44927,44939,44953,44959,44963,44971,44983,44987,45007,45013,45053,45061,45077,45083,45119,45121,45127,45131,45137,45139,45161,45179,45181,45191,45197,45233,45247,45259,45263,45281,45289,45293,45307,45317,45319,45329,45337,45341,45343,45361,45377,45389,45403,45413,45427,45433,45439,45481,45491,45497,45503,45523,45533,45541,45553,45557,45569,45587,45589,45599,45613,45631,45641,45659,45667,45673,45677,45691,45697,45707,45737,45751,45757,45763,45767,45779,45817,45821,45823,45827,45833,45841,45853,45863,45869,45887,45893,45943,45949,45953,45959,45971,45979,45989,46021,46027,46049,46051,46061,46073,46091,46093,46099,46103,46133,46141,46147,46153,46171,46181,46183,46187,46199,46219,46229,46237,46261,46271,46273,46279,46301,46307,46309,46327,46337,46349,46351,46381,46399,46411,46439,46441,46447,46451,46457,46471,46477,46489,46499,46507,46511,46523,46549,46559,46567,46573,46589,46591,46601,46619,46633,46639,46643,46649,46663,46679,46681,46687,46691,46703,46723,46727,46747,46751,46757,46769,46771,46807,46811,46817,46819,46829,46831,46853,46861,46867,46877,46889,46901,46919,46933,46957,46993,46997,47017,47041,47051,47057,47059,47087,47093,47111,47119,47123,47129,47137,47143,47147,47149,47161,47189,47207,47221,47237,47251,47269,47279,47287,47293,47297,47303,47309,47317,47339,47351,47353,47363,47381,47387,47389,47407,47417,47419,47431,47441,47459,47491,47497,47501,47507,47513,47521,47527,47533,47543,47563,47569,47581,47591,47599,47609,47623,47629,47639,47653,47657,47659,47681,47699,47701,47711,47713,47717,47737,47741,47743,47777,47779,47791,47797,47807,47809,47819,47837,47843,47857,47869,47881,47903,47911,47917,47933,47939,47947,47951,47963,47969,47977,47981,48017,48023,48029,48049,48073,48079,48091,48109,48119,48121,48131,48157,48163,48179,48187,48193,48197,48221,48239,48247,48259,48271,48281,48299,48311,48313,48337,48341,48353,48371,48383,48397,48407,48409,48413,48437,48449,48463,48473,48479,48481,48487,48491,48497,48523,48527,48533,48539,48541,48563,48571,48589,48593,48611,48619,48623,48647,48649,48661,48673,48677,48679,48731,48733,48751,48757,48761,48767,48779,48781,48787,48799,48809,48817,48821,48823,48847,48857,48859,48869,48871,48883,48889,48907,48947,48953,48973,48989,48991,49003,49009,49019,49031,49033,49037,49043,49057,49069,49081,49103,49109,49117,49121,49123,49139,49157,49169,49171,49177,49193,49199,49201,49207,49211,49223,49253,49261,49277,49279,49297,49307,49331,49333,49339,49363,49367,49369,49391,49393,49409,49411,49417,49429,49433,49451,49459,49463,49477,49481,49499,49523,49529,49531,49537,49547,49549,49559,49597,49603,49613,49627,49633,49639,49663,49667,49669,49681,49697,49711,49727,49739,49741,49747,49757,49783,49787,49789,49801,49807,49811,49823,49831,49843,49853,49871,49877,49891,49919,49921,49927,49937,49939,49943,49957,49991,49993,49999,50021,50023,50033,50047,50051,50053,50069,50077,50087,50093,50101,50111,50119,50123,50129,50131,50147,50153,50159,50177,50207,50221,50227,50231,50261,50263,50273,50287,50291,50311,50321,50329,50333,50341,50359,50363,50377,50383,50387,50411,50417,50423,50441,50459,50461,50497,50503,50513,50527,50539,50543,50549,50551,50581,50587,50591,50593,50599,50627,50647,50651,50671,50683,50707,50723,50741,50753,50767,50773,50777,50789,50821,50833,50839,50849,50857,50867,50873,50891,50893,50909,50923,50929,50951,50957,50969,50971,50989,50993,51001,51031,51043,51047,51059,51061,51071,51109,51131,51133,51137,51151,51157,51169,51193,51197,51199,51203,51217,51229,51239,51241,51257,51263,51283,51287,51307,51329,51341,51343,51347,51349,51361,51383,51407,51413,51419,51421,51427,51431,51437,51439,51449,51461,51473,51479,51481,51487,51503,51511,51517,51521,51539,51551,51563,51577,51581,51593,51599,51607,51613,51631,51637,51647,51659,51673,51679,51683,51691,51713,51719,51721,51749,51767,51769,51787,51797,51803,51817,51827,51829,51839,51853,51859,51869,51871,51893,51899,51907,51913,51929,51941,51949,51971,51973,51977,51991,52009,52021,52027,52051,52057,52067,52069,52081,52103,52121,52127,52147,52153,52163,52177,52181,52183,52189,52201,52223,52237,52249,52253,52259,52267,52289,52291,52301,52313,52321,52361,52363,52369,52379,52387,52391,52433,52453,52457,52489,52501,52511,52517,52529,52541,52543,52553,52561,52567,52571,52579,52583,52609,52627,52631,52639,52667,52673,52691,52697,52709,52711,52721,52727,52733,52747,52757,52769,52783,52807,52813,52817,52837,52859,52861,52879,52883,52889,52901,52903,52919,52937,52951,52957,52963,52967,52973,52981,52999,53003,53017,53047,53051,53069,53077,53087,53089,53093,53101,53113,53117,53129,53147,53149,53161,53171,53173,53189,53197,53201,53231,53233,53239,53267,53269,53279,53281,53299,53309,53323,53327,53353,53359,53377,53381,53401,53407,53411,53419,53437,53441,53453,53479,53503,53507,53527,53549,53551,53569,53591,53593,53597,53609,53611,53617,53623,53629,53633,53639,53653,53657,53681,53693,53699,53717,53719,53731,53759,53773,53777,53783,53791,53813,53819,53831,53849,53857,53861,53881,53887,53891,53897,53899,53917,53923,53927,53939,53951,53959,53987,53993,54001,54011,54013,54037,54049,54059,54083,54091,54101,54121,54133,54139,54151,54163,54167,54181,54193,54217,54251,54269,54277,54287,54293,54311,54319,54323,54331,54347,54361,54367,54371,54377,54401,54403,54409,54413,54419,54421,54437,54443,54449,54469,54493,54497,54499,54503,54517,54521,54539,54541,54547,54559,54563,54577,54581,54583,54601,54617,54623,54629,54631,54647,54667,54673,54679,54709,54713,54721,54727,54751,54767,54773,54779,54787,54799,54829,54833,54851,54869,54877,54881,54907,54917,54919,54941,54949,54959,54973,54979,54983,55001,55009,55021,55049,55051,55057,55061,55073,55079,55103,55109,55117,55127,55147,55163,55171,55201,55207,55213,55217,55219,55229,55243,55249,55259,55291,55313,55331,55333,55337,55339,55343,55351,55373,55381,55399,55411,55439,55441,55457,55469,55487,55501,55511,55529,55541,55547,55579,55589,55603,55609,55619,55621,55631,55633,55639,55661,55663,55667,55673,55681,55691,55697,55711,55717,55721,55733,55763,55787,55793,55799,55807,55813,55817,55819,55823,55829,55837,55843,55849,55871,55889,55897,55901,55903,55921,55927,55931,55933,55949,55967,55987,55997,56003,56009,56039,56041,56053,56081,56087,56093,56099,56101,56113,56123,56131,56149,56167,56171,56179,56197,56207,56209,56237,56239,56249,56263,56267,56269,56299,56311,56333,56359,56369,56377,56383,56393,56401,56417,56431,56437,56443,56453,56467,56473,56477,56479,56489,56501,56503,56509,56519,56527,56531,56533,56543,56569,56591,56597,56599,56611,56629,56633,56659,56663,56671,56681,56687,56701,56711,56713,56731,56737,56747,56767,56773,56779,56783,56807,56809,56813,56821,56827,56843,56857,56873,56891,56893,56897,56909,56911,56921,56923,56929,56941,56951,56957,56963,56983,56989,56993,56999,57037,57041,57047,57059,57073,57077,57089,57097,57107,57119,57131,57139,57143,57149,57163,57173,57179,57191,57193,57203,57221,57223,57241,57251,57259,57269,57271,57283,57287,57301,57329,57331,57347,57349,57367,57373,57383,57389,57397,57413,57427,57457,57467,57487,57493,57503,57527,57529,57557,57559,57571,57587,57593,57601,57637,57641,57649,57653,57667,57679,57689,57697,57709,57713,57719,57727,57731,57737,57751,57773,57781,57787,57791,57793,57803,57809,57829,57839,57847,57853,57859,57881,57899,57901,57917,57923,57943,57947,57973,57977,57991,58013,58027,58031,58043,58049,58057,58061,58067,58073,58099,58109,58111,58129,58147,58151,58153,58169,58171,58189,58193,58199,58207,58211,58217,58229,58231,58237,58243,58271,58309,58313,58321,58337,58363,58367,58369,58379,58391,58393,58403,58411,58417,58427,58439,58441,58451,58453,58477,58481,58511,58537,58543,58549,58567,58573,58579,58601,58603,58613,58631,58657,58661,58679,58687,58693,58699,58711,58727,58733,58741,58757,58763,58771,58787,58789,58831,58889,58897,58901,58907,58909,58913,58921,58937,58943,58963,58967,58979,58991,58997,59009,59011,59021,59023,59029,59051,59053,59063,59069,59077,59083,59093,59107,59113,59119,59123,59141,59149,59159,59167,59183,59197,59207,59209,59219,59221,59233,59239,59243,59263,59273,59281,59333,59341,59351,59357,59359,59369,59377,59387,59393,59399,59407,59417,59419,59441,59443,59447,59453,59467,59471,59473,59497,59509,59513,59539,59557,59561,59567,59581,59611,59617,59621,59627,59629,59651,59659,59663,59669,59671,59693,59699,59707,59723,59729,59743,59747,59753,59771,59779,59791,59797,59809,59833,59863,59879,59887,59921,59929,59951,59957,59971,59981,59999,60013,60017,60029,60037,60041,60077,60083,60089,60091,60101,60103,60107,60127,60133,60139,60149,60161,60167,60169,60209,60217,60223,60251,60257,60259,60271,60289,60293,60317,60331,60337,60343,60353,60373,60383,60397,60413,60427,60443,60449,60457,60493,60497,60509,60521,60527,60539,60589,60601,60607,60611,60617,60623,60631,60637,60647,60649,60659,60661,60679,60689,60703,60719,60727,60733,60737,60757,60761,60763,60773,60779,60793,60811,60821,60859,60869,60887,60889,60899,60901,60913,60917,60919,60923,60937,60943,60953,60961,61001,61007,61027,61031,61043,61051,61057,61091,61099,61121,61129,61141,61151,61153,61169,61211,61223,61231,61253,61261,61283,61291,61297,61331,61333,61339,61343,61357,61363,61379,61381,61403,61409,61417,61441,61463,61469,61471,61483,61487,61493,61507,61511,61519,61543,61547,61553,61559,61561,61583,61603,61609,61613,61627,61631,61637,61643,61651,61657,61667,61673,61681,61687,61703,61717,61723,61729,61751,61757,61781,61813,61819,61837,61843,61861,61871,61879,61909,61927,61933,61949,61961,61967,61979,61981,61987,61991,62003,62011,62017,62039,62047,62053,62057,62071,62081,62099,62119,62129,62131,62137,62141,62143,62171,62189,62191,62201,62207,62213,62219,62233,62273,62297,62299,62303,62311,62323,62327,62347,62351,62383,62401,62417,62423,62459,62467,62473,62477,62483,62497,62501,62507,62533,62539,62549,62563,62581,62591,62597,62603,62617,62627,62633,62639,62653,62659,62683,62687,62701,62723,62731,62743,62753,62761,62773,62791,62801,62819,62827,62851,62861,62869,62873,62897,62903,62921,62927,62929,62939,62969,62971,62981,62983,62987,62989,63029,63031,63059,63067,63073,63079,63097,63103,63113,63127,63131,63149,63179,63197,63199,63211,63241,63247,63277,63281,63299,63311,63313,63317,63331,63337,63347,63353,63361,63367,63377,63389,63391,63397,63409,63419,63421,63439,63443,63463,63467,63473,63487,63493,63499,63521,63527,63533,63541,63559,63577,63587,63589,63599,63601,63607,63611,63617,63629,63647,63649,63659,63667,63671,63689,63691,63697,63703,63709,63719,63727,63737,63743,63761,63773,63781,63793,63799,63803,63809,63823,63839,63841,63853,63857,63863,63901,63907,63913,63929,63949,63977,63997,64007,64013,64019,64033,64037,64063,64067,64081,64091,64109,64123,64151,64153,64157,64171,64187,64189,64217,64223,64231,64237,64271,64279,64283,64301,64303,64319,64327,64333,64373,64381,64399,64403,64433,64439,64451,64453,64483,64489,64499,64513,64553,64567,64577,64579,64591,64601,64609,64613,64621,64627,64633,64661,64663,64667,64679,64693,64709,64717,64747,64763,64781,64783,64793,64811,64817,64849,64853,64871,64877,64879,64891,64901,64919,64921,64927,64937,64951,64969,64997,65003,65011,65027,65029,65033,65053,65063,65071,65089,65099,65101,65111,65119,65123,65129,65141,65147,65167,65171,65173,65179,65183,65203,65213,65239,65257,65267,65269,65287,65293,65309,65323,65327,65353,65357,65371,65381,65393,65407,65413,65419,65423,65437,65447,65449,65479,65497,65519,65521,65537,65539,65543,65551,65557,65563,65579,65581,65587,65599,65609,65617,65629,65633,65647,65651,65657,65677,65687,65699,65701,65707,65713,65717,65719,65729,65731,65761,65777,65789,65809,65827,65831,65837,65839,65843,65851,65867,65881,65899,65921,65927,65929,65951,65957,65963,65981,65983,65993,66029,66037,66041,66047,66067,66071,66083,66089,66103,66107,66109,66137,66161,66169,66173,66179,66191,66221,66239,66271,66293,66301,66337,66343,66347,66359,66361,66373,66377,66383,66403,66413,66431,66449,66457,66463,66467,66491,66499,66509,66523,66529,66533,66541,66553,66569,66571,66587,66593,66601,66617,66629,66643,66653,66683,66697,66701,66713,66721,66733,66739,66749,66751,66763,66791,66797,66809,66821,66841,66851,66853,66863,66877,66883,66889,66919,66923,66931,66943,66947,66949,66959,66973,66977,67003,67021,67033,67043,67049,67057,67061,67073,67079,67103,67121,67129,67139,67141,67153,67157,67169,67181,67187,67189,67211,67213,67217,67219,67231,67247,67261,67271,67273,67289,67307,67339,67343,67349,67369,67391,67399,67409,67411,67421,67427,67429,67433,67447,67453,67477,67481,67489,67493,67499,67511,67523,67531,67537,67547,67559,67567,67577,67579,67589,67601,67607,67619,67631,67651,67679,67699,67709,67723,67733,67741,67751,67757,67759,67763,67777,67783,67789,67801,67807,67819,67829,67843,67853,67867,67883,67891,67901,67927,67931,67933,67939,67943,67957,67961,67967,67979,67987,67993,68023,68041,68053,68059,68071,68087,68099,68111,68113,68141,68147,68161,68171,68207,68209,68213,68219,68227,68239,68261,68279,68281,68311,68329,68351,68371,68389,68399,68437,68443,68447,68449,68473,68477,68483,68489,68491,68501,68507,68521,68531,68539,68543,68567,68581,68597,68611,68633,68639,68659,68669,68683,68687,68699,68711,68713,68729,68737,68743,68749,68767,68771,68777,68791,68813,68819,68821,68863,68879,68881,68891,68897,68899,68903,68909,68917,68927,68947,68963,68993,69001,69011,69019,69029,69031,69061,69067,69073,69109,69119,69127,69143,69149,69151,69163,69191,69193,69197,69203,69221,69233,69239,69247,69257,69259,69263,69313,69317,69337,69341,69371,69379,69383,69389,69401,69403,69427,69431,69439,69457,69463,69467,69473,69481,69491,69493,69497,69499,69539,69557,69593,69623,69653,69661,69677,69691,69697,69709,69737,69739,69761,69763,69767,69779,69809,69821,69827,69829,69833,69847,69857,69859,69877,69899,69911,69929,69931,69941,69959,69991,69997,70001,70003,70009,70019,70039,70051,70061,70067,70079,70099,70111,70117,70121,70123,70139,70141,70157,70163,70177,70181,70183,70199,70201,70207,70223,70229,70237,70241,70249,70271,70289,70297,70309,70313,70321,70327,70351,70373,70379,70381,70393,70423,70429,70439,70451,70457,70459,70481,70487,70489,70501,70507,70529,70537,70549,70571,70573,70583,70589,70607,70619,70621,70627,70639,70657,70663,70667,70687,70709,70717,70729,70753,70769,70783,70793,70823,70841,70843,70849,70853,70867,70877,70879,70891,70901,70913,70919,70921,70937,70949,70951,70957,70969,70979,70981,70991,70997,70999,71011,71023,71039,71059,71069,71081,71089,71119,71129,71143,71147,71153,71161,71167,71171,71191,71209,71233,71237,71249,71257,71261,71263,71287,71293,71317,71327,71329,71333,71339,71341,71347,71353,71359,71363,71387,71389,71399,71411,71413,71419,71429,71437,71443,71453,71471,71473,71479,71483,71503,71527,71537,71549,71551,71563,71569,71593,71597,71633,71647,71663,71671,71693,71699,71707,71711,71713,71719,71741,71761,71777,71789,71807,71809,71821,71837,71843,71849,71861,71867,71879,71881,71887,71899,71909,71917,71933,71941,71947,71963,71971,71983,71987,71993,71999,72019,72031,72043,72047,72053,72073,72077,72089,72091,72101,72103,72109,72139,72161,72167,72169,72173,72211,72221,72223,72227,72229,72251,72253,72269,72271,72277,72287,72307,72313,72337,72341,72353,72367,72379,72383,72421,72431,72461,72467,72469,72481,72493,72497,72503,72533,72547,72551,72559,72577,72613,72617,72623,72643,72647,72649,72661,72671,72673,72679,72689,72701,72707,72719,72727,72733,72739,72763,72767,72797,72817,72823,72859,72869,72871,72883,72889,72893,72901,72907,72911,72923,72931,72937,72949,72953,72959,72973,72977,72997,73009,73013,73019,73037,73039,73043,73061,73063,73079,73091,73121,73127,73133,73141,73181,73189,73237,73243,73259,73277,73291,73303,73309,73327,73331,73351,73361,73363,73369,73379,73387,73417,73421,73433,73453,73459,73471,73477,73483,73517,73523,73529,73547,73553,73561,73571,73583,73589,73597,73607,73609,73613,73637,73643,73651,73673,73679,73681,73693,73699,73709,73721,73727,73751,73757,73771,73783,73819,73823,73847,73849,73859,73867,73877,73883,73897,73907,73939,73943,73951,73961,73973,73999,74017,74021,74027,74047,74051,74071,74077,74093,74099,74101,74131,74143,74149,74159,74161,74167,74177,74189,74197,74201,74203,74209,74219,74231,74257,74279,74287,74293,74297,74311,74317,74323,74353,74357,74363,74377,74381,74383,74411,74413,74419,74441,74449,74453,74471,74489,74507,74509,74521,74527,74531,74551,74561,74567,74573,74587,74597,74609,74611,74623,74653,74687,74699,74707,74713,74717,74719,74729,74731,74747,74759,74761,74771,74779,74797,74821,74827,74831,74843,74857,74861,74869,74873,74887,74891,74897,74903,74923,74929,74933,74941,74959,75011,75013,75017,75029,75037,75041,75079,75083,75109,75133,75149,75161,75167,75169,75181,75193,75209,75211,75217,75223,75227,75239,75253,75269,75277,75289,75307,75323,75329,75337,75347,75353,75367,75377,75389,75391,75401,75403,75407,75431,75437,75479,75503,75511,75521,75527,75533,75539,75541,75553,75557,75571,75577,75583,75611,75617,75619,75629,75641,75653,75659,75679,75683,75689,75703,75707,75709,75721,75731,75743,75767,75773,75781,75787,75793,75797,75821,75833,75853,75869,75883,75913,75931,75937,75941,75967,75979,75983,75989,75991,75997,76001,76003,76031,76039,76079,76081,76091,76099,76103,76123,76129,76147,76157,76159,76163,76207,76213,76231,76243,76249,76253,76259,76261,76283,76289,76303,76333,76343,76367,76369,76379,76387,76403,76421,76423,76441,76463,76471,76481,76487,76493,76507,76511,76519,76537,76541,76543,76561,76579,76597,76603,76607,76631,76649,76651,76667,76673,76679,76697,76717,76733,76753,76757,76771,76777,76781,76801,76819,76829,76831,76837,76847,76871,76873,76883,76907,76913,76919,76943,76949,76961,76963,76991,77003,77017,77023,77029,77041,77047,77069,77081,77093,77101,77137,77141,77153,77167,77171,77191,77201,77213,77237,77239,77243,77249,77261,77263,77267,77269,77279,77291,77317,77323,77339,77347,77351,77359,77369,77377,77383,77417,77419,77431,77447,77471,77477,77479,77489,77491,77509,77513,77521,77527,77543,77549,77551,77557,77563,77569,77573,77587,77591,77611,77617,77621,77641,77647,77659,77681,77687,77689,77699,77711,77713,77719,77723,77731,77743,77747,77761,77773,77783,77797,77801,77813,77839,77849,77863,77867,77893,77899,77929,77933,77951,77969,77977,77983,77999,78007,78017,78031,78041,78049,78059,78079,78101,78121,78137,78139,78157,78163,78167,78173,78179,78191,78193,78203,78229,78233,78241,78259,78277,78283,78301,78307,78311,78317,78341,78347,78367,78401,78427,78437,78439,78467,78479,78487,78497,78509,78511,78517,78539,78541,78553,78569,78571,78577,78583,78593,78607,78623,78643,78649,78653,78691,78697,78707,78713,78721,78737,78779,78781,78787,78791,78797,78803,78809,78823,78839,78853,78857,78877,78887,78889,78893,78901,78919,78929,78941,78977,78979,78989,79031,79039,79043,79063,79087,79103,79111,79133,79139,79147,79151,79153,79159,79181,79187,79193,79201,79229,79231,79241,79259,79273,79279,79283,79301,79309,79319,79333,79337,79349,79357,79367,79379,79393,79397,79399,79411,79423,79427,79433,79451,79481,79493,79531,79537,79549,79559,79561,79579,79589,79601,79609,79613,79621,79627,79631,79633,79657,79669,79687,79691,79693,79697,79699,79757,79769,79777,79801,79811,79813,79817,79823,79829,79841,79843,79847,79861,79867,79873,79889,79901,79903,79907,79939,79943,79967,79973,79979,79987,79997,79999,80021,80039,80051,80071,80077,80107,80111,80141,80147,80149,80153,80167,80173,80177,80191,80207,80209,80221,80231,80233,80239,80251,80263,80273,80279,80287,80309,80317,80329,80341,80347,80363,80369,80387,80407,80429,80447,80449,80471,80473,80489,80491,80513,80527,80537,80557,80567,80599,80603,80611,80621,80627,80629,80651,80657,80669,80671,80677,80681,80683,80687,80701,80713,80737,80747,80749,80761,80777,80779,80783,80789,80803,80809,80819,80831,80833,80849,80863,80897,80909,80911,80917,80923,80929,80933,80953,80963,80989,81001,81013,81017,81019,81023,81031,81041,81043,81047,81049,81071,81077,81083,81097,81101,81119,81131,81157,81163,81173,81181,81197,81199,81203,81223,81233,81239,81281,81283,81293,81299,81307,81331,81343,81349,81353,81359,81371,81373,81401,81409,81421,81439,81457,81463,81509,81517,81527,81533,81547,81551,81553,81559,81563,81569,81611,81619,81629,81637,81647,81649,81667,81671,81677,81689,81701,81703,81707,81727,81737,81749,81761,81769,81773,81799,81817,81839,81847,81853,81869,81883,81899,81901,81919,81929,81931,81937,81943,81953,81967,81971,81973,82003,82007,82009,82013,82021,82031,82037,82039,82051,82067,82073,82129,82139,82141,82153,82163,82171,82183,82189,82193,82207,82217,82219,82223,82231,82237,82241,82261,82267,82279,82301,82307,82339,82349,82351,82361,82373,82387,82393,82421,82457,82463,82469,82471,82483,82487,82493,82499,82507,82529,82531,82549,82559,82561,82567,82571,82591,82601,82609,82613,82619,82633,82651,82657,82699,82721,82723,82727,82729,82757,82759,82763,82781,82787,82793,82799,82811,82813,82837,82847,82883,82889,82891,82903,82913,82939,82963,82981,82997,83003,83009,83023,83047,83059,83063,83071,83077,83089,83093,83101,83117,83137,83177,83203,83207,83219,83221,83227,83231,83233,83243,83257,83267,83269,83273,83299,83311,83339,83341,83357,83383,83389,83399,83401,83407,83417,83423,83431,83437,83443,83449,83459,83471,83477,83497,83537,83557,83561,83563,83579,83591,83597,83609,83617,83621,83639,83641,83653,83663,83689,83701,83717,83719,83737,83761,83773,83777,83791,83813,83833,83843,83857,83869,83873,83891,83903,83911,83921,83933,83939,83969,83983,83987,84011,84017,84047,84053,84059,84061,84067,84089,84121,84127,84131,84137,84143,84163,84179,84181,84191,84199,84211,84221,84223,84229,84239,84247,84263,84299,84307,84313,84317,84319,84347,84349,84377,84389,84391,84401,84407,84421,84431,84437,84443,84449,84457,84463,84467,84481,84499,84503,84509,84521,84523,84533,84551,84559,84589,84629,84631,84649,84653,84659,84673,84691,84697,84701,84713,84719,84731,84737,84751,84761,84787,84793,84809,84811,84827,84857,84859,84869,84871,84913,84919,84947,84961,84967,84977,84979,84991,85009,85021,85027,85037,85049,85061,85081,85087,85091,85093,85103,85109,85121,85133,85147,85159,85193,85199,85201,85213,85223,85229,85237,85243,85247,85259,85297,85303,85313,85331,85333,85361,85363,85369,85381,85411,85427,85429,85439,85447,85451,85453,85469,85487,85513,85517,85523,85531,85549,85571,85577,85597,85601,85607,85619,85621,85627,85639,85643,85661,85667,85669,85691,85703,85711,85717,85733,85751,85781,85793,85817,85819,85829,85831,85837,85843,85847,85853,85889,85903,85909,85931,85933,85991,85999,86011,86017,86027,86029,86069,86077,86083,86111,86113,86117,86131,86137,86143,86161,86171,86179,86183,86197,86201,86209,86239,86243,86249,86257,86263,86269,86287,86291,86293,86297,86311,86323,86341,86351,86353,86357,86369,86371,86381,86389,86399,86413,86423,86441,86453,86461,86467,86477,86491,86501,86509,86531,86533,86539,86561,86573,86579,86587,86599,86627,86629,86677,86689,86693,86711,86719,86729,86743,86753,86767,86771,86783,86813,86837,86843,86851,86857,86861,86869,86923,86927,86929,86939,86951,86959,86969,86981,86993,87011,87013,87037,87041,87049,87071,87083,87103,87107,87119,87121,87133,87149,87151,87179,87181,87187,87211,87221,87223,87251,87253,87257,87277,87281,87293,87299,87313,87317,87323,87337,87359,87383,87403,87407,87421,87427,87433,87443,87473,87481,87491,87509,87511,87517,87523,87539,87541,87547,87553,87557,87559,87583,87587,87589,87613,87623,87629,87631,87641,87643,87649,87671,87679,87683,87691,87697,87701,87719,87721,87739,87743,87751,87767,87793,87797,87803,87811,87833,87853,87869,87877,87881,87887,87911,87917,87931,87943,87959,87961,87973,87977,87991,88001,88003,88007,88019,88037,88069,88079,88093,88117,88129,88169,88177,88211,88223,88237,88241,88259,88261,88289,88301,88321,88327,88337,88339,88379,88397,88411,88423,88427,88463,88469,88471,88493,88499,88513,88523,88547,88589,88591,88607,88609,88643,88651,88657,88661,88663,88667,88681,88721,88729,88741,88747,88771,88789,88793,88799,88801,88807,88811,88813,88817,88819,88843,88853,88861,88867,88873,88883,88897,88903,88919,88937,88951,88969,88993,88997,89003,89009,89017,89021,89041,89051,89057,89069,89071,89083,89087,89101,89107,89113,89119,89123,89137,89153,89189,89203,89209,89213,89227,89231,89237,89261,89269,89273,89293,89303,89317,89329,89363,89371,89381,89387,89393,89399,89413,89417,89431,89443,89449,89459,89477,89491,89501,89513,89519,89521,89527,89533,89561,89563,89567,89591,89597,89599,89603,89611,89627,89633,89653,89657,89659,89669,89671,89681,89689,89753,89759,89767,89779,89783,89797,89809,89819,89821,89833,89839,89849,89867,89891,89897,89899,89909,89917,89923,89939,89959,89963,89977,89983,89989,90001,90007,90011,90017,90019,90023,90031,90053,90059,90067,90071,90073,90089,90107,90121,90127,90149,90163,90173,90187,90191,90197,90199,90203,90217,90227,90239,90247,90263,90271,90281,90289,90313,90353,90359,90371,90373,90379,90397,90401,90403,90407,90437,90439,90469,90473,90481,90499,90511,90523,90527,90529,90533,90547,90583,90599,90617,90619,90631,90641,90647,90659,90677,90679,90697,90703,90709,90731,90749,90787,90793,90803,90821,90823,90833,90841,90847,90863,90887,90901,90907,90911,90917,90931,90947,90971,90977,90989,90997,91009,91019,91033,91079,91081,91097,91099,91121,91127,91129,91139,91141,91151,91153,91159,91163,91183,91193,91199,91229,91237,91243,91249,91253,91283,91291,91297,91303,91309,91331,91367,91369,91373,91381,91387,91393,91397,91411,91423,91433,91453,91457,91459,91463,91493,91499,91513,91529,91541,91571,91573,91577,91583,91591,91621,91631,91639,91673,91691,91703,91711,91733,91753,91757,91771,91781,91801,91807,91811,91813,91823,91837,91841,91867,91873,91909,91921,91939,91943,91951,91957,91961,91967,91969,91997,92003,92009,92033,92041,92051,92077,92083,92107,92111,92119,92143,92153,92173,92177,92179,92189,92203,92219,92221,92227,92233,92237,92243,92251,92269,92297,92311,92317,92333,92347,92353,92357,92363,92369,92377,92381,92383,92387,92399,92401,92413,92419,92431,92459,92461,92467,92479,92489,92503,92507,92551,92557,92567,92569,92581,92593,92623,92627,92639,92641,92647,92657,92669,92671,92681,92683,92693,92699,92707,92717,92723,92737,92753,92761,92767,92779,92789,92791,92801,92809,92821,92831,92849,92857,92861,92863,92867,92893,92899,92921,92927,92941,92951,92957,92959,92987,92993,93001,93047,93053,93059,93077,93083,93089,93097,93103,93113,93131,93133,93139,93151,93169,93179,93187,93199,93229,93239,93241,93251,93253,93257,93263,93281,93283,93287,93307,93319,93323,93329,93337,93371,93377,93383,93407,93419,93427,93463,93479,93481,93487,93491,93493,93497,93503,93523,93529,93553,93557,93559,93563,93581,93601,93607,93629,93637,93683,93701,93703,93719,93739,93761,93763,93787,93809,93811,93827,93851,93871,93887,93889,93893,93901,93911,93913,93923,93937,93941,93949,93967,93971,93979,93983,93997,94007,94009,94033,94049,94057,94063,94079,94099,94109,94111,94117,94121,94151,94153,94169,94201,94207,94219,94229,94253,94261,94273,94291,94307,94309,94321,94327,94331,94343,94349,94351,94379,94397,94399,94421,94427,94433,94439,94441,94447,94463,94477,94483,94513,94529,94531,94541,94543,94547,94559,94561,94573,94583,94597,94603,94613,94621,94649,94651,94687,94693,94709,94723,94727,94747,94771,94777,94781,94789,94793,94811,94819,94823,94837,94841,94847,94849,94873,94889,94903,94907,94933,94949,94951,94961,94993,94999,95003,95009,95021,95027,95063,95071,95083,95087,95089,95093,95101,95107,95111,95131,95143,95153,95177,95189,95191,95203,95213,95219,95231,95233,95239,95257,95261,95267,95273,95279,95287,95311,95317,95327,95339,95369,95383,95393,95401,95413,95419,95429,95441,95443,95461,95467,95471,95479,95483,95507,95527,95531,95539,95549,95561,95569,95581,95597,95603,95617,95621,95629,95633,95651,95701,95707,95713,95717,95723,95731,95737,95747,95773,95783,95789,95791,95801,95803,95813,95819,95857,95869,95873,95881,95891,95911,95917,95923,95929,95947,95957,95959,95971,95987,95989,96001,96013,96017,96043,96053,96059,96079,96097,96137,96149,96157,96167,96179,96181,96199,96211,96221,96223,96233,96259,96263,96269,96281,96289,96293,96323,96329,96331,96337,96353,96377,96401,96419,96431,96443,96451,96457,96461,96469,96479,96487,96493,96497,96517,96527,96553,96557,96581,96587,96589,96601,96643,96661,96667,96671,96697,96703,96731,96737,96739,96749,96757,96763,96769,96779,96787,96797,96799,96821,96823,96827,96847,96851,96857,96893,96907,96911,96931,96953,96959,96973,96979,96989,96997,97001,97003,97007,97021,97039,97073,97081,97103,97117,97127,97151,97157,97159,97169,97171,97177,97187,97213,97231,97241,97259,97283,97301,97303,97327,97367,97369,97373,97379,97381,97387,97397,97423,97429,97441,97453,97459,97463,97499,97501,97511,97523,97547,97549,97553,97561,97571,97577,97579,97583,97607,97609,97613,97649,97651,97673,97687,97711,97729,97771,97777,97787,97789,97813,97829,97841,97843,97847,97849,97859,97861,97871,97879,97883,97919,97927,97931,97943,97961,97967,97973,97987,98009,98011,98017,98041,98047,98057,98081,98101,98123,98129,98143,98179,98207,98213,98221,98227,98251,98257,98269,98297,98299,98317,98321,98323,98327,98347,98369,98377,98387,98389,98407,98411,98419,98429,98443,98453,98459,98467,98473,98479,98491,98507,98519,98533,98543,98561,98563,98573,98597,98621,98627,98639,98641,98663,98669,98689,98711,98713,98717,98729,98731,98737,98773,98779,98801,98807,98809,98837,98849,98867,98869,98873,98887,98893,98897,98899,98909,98911,98927,98929,98939,98947,98953,98963,98981,98993,98999,99013,99017,99023,99041,99053,99079,99083,99089,99103,99109,99119,99131,99133,99137,99139,99149,99173,99181,99191,99223,99233,99241,99251,99257,99259,99277,99289,99317,99347,99349,99367,99371,99377,99391,99397,99401,99409,99431,99439,99469,99487,99497,99523,99527,99529,99551,99559,99563,99571,99577,99581,99607,99611,99623,99643,99661,99667,99679,99689,99707,99709,99713,99719,99721,99733,99761,99767,99787,99793,99809,99817,99823,99829,99833,99839,99859,99871,99877,99881,99901,99907,99923,99929,99961,99971,99989,99991].find{|e| e>=s} ||0)-s end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50224,"user_id":53,"body":"def minimum_number(ns)\n  m = ns.sum\n  closest_prime_up(m) - m\nend\n\ndef closest_prime_up(m)\n  while !is_prime(m)\n    m += 1\n  end\n  m\nend\n\ndef is_prime(n)\n  Math.sqrt(n).to_i.downto(2) do |i|\n    return false if n%i == 0\n  end\n  n > 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50225,"user_id":421,"body":"def isprime(n)\n  (2..Math.sqrt(n)).each do |i|\n    if n % i == 0 \n      return false\n    end\n  end\n  n > 1\nend\n\ndef minimum_number(numbers)\n  tot = numbers.sum\n  a = tot\n  while !isprime(a)\n    a += 1\n  end\n  a - tot  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50226,"user_id":1624,"body":"def prime?(n)\n  return false if n < 2\n  e = (n ** 0.5).ceil\n  (2..e).all?{|x|\n    n % x != 0\n  }\nend\n\ndef minimum_number(numbers)\n  e = numbers.sum\n  n = 0\n  until prime?(e+n)\n    n += 1\n  end\n  n\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50227,"user_id":null,"body":"def minimum_number(numbers)\n  sum = numbers.sum\n  n = 0\n  loop do\n    return n if is_prime sum + n\n    n += 1\n  end\nend\n\ndef is_prime(n)\n  return false if n <= 1\n  return true if n <= 3\n  return false if n % 2 == 0 || n % 3 == 0\n  i = 5\n  while i * i <= n\n    return false if n % i == 0 || n % (i + 2) == 0\n    i += 6\n  end\n  true\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50228,"user_id":986,"body":"def prime?(num)\n  return false if num%2 == 0\n  \n  div = 3\n  while div*div <= num\n    return false if num%div == 0\n    div += 2\n  end\n  return true\nend\n\ndef minimum_number(nums)\n  sum = start = nums.sum; sum += 1 if sum.even?\n  until prime?(sum)\n    sum += 2 \n  end\n  sum - start\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a97387e5ee396e70a00016d":[{"id":50229,"user_id":1072,"body":"def pofi(n) [\"1\",\"i\",\"-1\",\"-i\"][n%4] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50230,"user_id":527,"body":"def pofi(n)\n  {\"1\", \"i\", \"-1\", \"-i\"}[n % 4]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50231,"user_id":null,"body":"def pofi(n)\n  return (n % 4 == 0)? \"1\": (n % 4 == 3)? \"-i\": (n % 2 == 0)? \"-1\" : \"i\";\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50232,"user_id":53,"body":"def pofi(n)\n  return [\"1\", \"i\", \"-1\", \"-i\"][n % 4];\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50233,"user_id":null,"body":"def pofi(n)\n  iter = [\"1\", \"i\", \"-1\", \"-i\"].cycle\n  (1..n).each do |x|\n    iter.next\n  end\n  iter.next\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50234,"user_id":527,"body":"def pofi(n)\n  case n % 4\n    when 0 then \"1\"\n    when 1 then \"i\"\n    when 2 then \"-1\"\n    when 3 then \"-i\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50235,"user_id":1072,"body":"def pofi(n) [\"1\",\"i\",\"-1\",\"-i\"][n%4] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a995c2aba1bb57f660001fd":[{"id":50236,"user_id":421,"body":"def scrolling_text(text)\n  text = text.upcase\n  text.split(\"\").map_with_index{|x, i| text[i..-1] + text[0...i]}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50237,"user_id":1624,"body":"def scrolling_text(text)\n  text = text.upcase\n  (0...text.size).map do |i|\n    text[i..-1] + text[0...i]\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50238,"user_id":null,"body":"def scrolling_text(text)\n  # Good luck\n  rounds = text.size - 1\n  text = text.upcase\n  new_arr = [text]\n  rounds.times do \n    text = text.chars.rotate.join(\"\")\n    new_arr << text\n  end\n  new_arr \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50239,"user_id":527,"body":"def scrolling_text(text)\n  chars = text.upcase.chars\n  Array.new(text.size){ |i| chars.rotate(i).join }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50240,"user_id":null,"body":"def scrolling_text(text)\n  (0...text.size).map{ |i| text.upcase.chars.rotate(i).join }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50241,"user_id":277,"body":"def scrolling_text(text)\n  upper = text.upcase\n  arr = Array.new(text.size,\"\")\n\n  (0...text.size).each {|i|\n    arr[i] = \"#{upper[i, text.size]}#{upper[0, i]}\"\n  }\n  arr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a9996fa8e503f2b4a002e7a":[{"id":50242,"user_id":421,"body":"def prime(n)\n  n == 2 || n > 2 && n.odd? && (3..n**0.5 + 1).all?{|x| n % x != 0}\nend\n\ndef odd_not_prime(num)\n  (1..num).step(2).reject{|x| prime(x)}.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50243,"user_id":1624,"body":"def prime?(n)\n  return false if n < 2\n  (2...n).all?{|i| n % i != 0}\nend\n\ndef odd_not_prime(num)\n  (1..num).count do |n|\n    n.odd? && !prime?(n)\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50244,"user_id":1072,"body":"def odd_not_prime(n) (1..n).step(2).select{|e| ![3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3607,3613,3617,3623,3631,3637,3643,3659,3671,3673,3677,3691,3697,3701,3709,3719,3727,3733,3739,3761,3767,3769,3779,3793,3797,3803,3821,3823,3833,3847,3851,3853,3863,3877,3881,3889,3907,3911,3917,3919,3923,3929,3931,3943,3947,3967,3989,4001,4003,4007,4013,4019,4021,4027,4049,4051,4057,4073,4079,4091,4093,4099,4111,4127,4129,4133,4139,4153,4157,4159,4177,4201,4211,4217,4219,4229,4231,4241,4243,4253,4259,4261,4271,4273,4283,4289,4297,4327,4337,4339,4349,4357,4363,4373,4391,4397,4409,4421,4423,4441,4447,4451,4457,4463,4481,4483,4493,4507,4513,4517,4519,4523,4547,4549,4561,4567,4583,4591,4597,4603,4621,4637,4639,4643,4649,4651,4657,4663,4673,4679,4691,4703,4721,4723,4729,4733,4751,4759,4783,4787,4789,4793,4799,4801,4813,4817,4831,4861,4871,4877,4889,4903,4909,4919,4931,4933,4937,4943,4951,4957,4967,4969,4973,4987,4993,4999,5003,5009,5011,5021,5023,5039,5051,5059,5077,5081,5087,5099,5101,5107,5113,5119,5147,5153,5167,5171,5179,5189,5197,5209,5227,5231,5233,5237,5261,5273,5279,5281,5297,5303,5309,5323,5333,5347,5351,5381,5387,5393,5399,5407,5413,5417,5419,5431,5437,5441,5443,5449,5471,5477,5479,5483,5501,5503,5507,5519,5521,5527,5531,5557,5563,5569,5573,5581,5591,5623,5639,5641,5647,5651,5653,5657,5659,5669,5683,5689,5693,5701,5711,5717,5737,5741,5743,5749,5779,5783,5791,5801,5807,5813,5821,5827,5839,5843,5849,5851,5857,5861,5867,5869,5879,5881,5897,5903,5923,5927,5939,5953,5981,5987,6007,6011,6029,6037,6043,6047,6053,6067,6073,6079,6089,6091,6101,6113,6121,6131,6133,6143,6151,6163,6173,6197,6199,6203,6211,6217,6221,6229,6247,6257,6263,6269,6271,6277,6287,6299,6301,6311,6317,6323,6329,6337,6343,6353,6359,6361,6367,6373,6379,6389,6397,6421,6427,6449,6451,6469,6473,6481,6491,6521,6529,6547,6551,6553,6563,6569,6571,6577,6581,6599,6607,6619,6637,6653,6659,6661,6673,6679,6689,6691,6701,6703,6709,6719,6733,6737,6761,6763,6779,6781,6791,6793,6803,6823,6827,6829,6833,6841,6857,6863,6869,6871,6883,6899,6907,6911,6917,6947,6949,6959,6961,6967,6971,6977,6983,6991,6997,7001,7013,7019,7027,7039,7043,7057,7069,7079,7103,7109,7121,7127,7129,7151,7159,7177,7187,7193,7207,7211,7213,7219,7229,7237,7243,7247,7253,7283,7297,7307,7309,7321,7331,7333,7349,7351,7369,7393,7411,7417,7433,7451,7457,7459,7477,7481,7487,7489,7499,7507,7517,7523,7529,7537,7541,7547,7549,7559,7561,7573,7577,7583,7589,7591,7603,7607,7621,7639,7643,7649,7669,7673,7681,7687,7691,7699,7703,7717,7723,7727,7741,7753,7757,7759,7789,7793,7817,7823,7829,7841,7853,7867,7873,7877,7879,7883,7901,7907,7919,7927,7933,7937,7949,7951,7963,7993,8009,8011,8017,8039,8053,8059,8069,8081,8087,8089,8093,8101,8111,8117,8123,8147,8161,8167,8171,8179,8191,8209,8219,8221,8231,8233,8237,8243,8263,8269,8273,8287,8291,8293,8297,8311,8317,8329,8353,8363,8369,8377,8387,8389,8419,8423,8429,8431,8443,8447,8461,8467,8501,8513,8521,8527,8537,8539,8543,8563,8573,8581,8597,8599,8609,8623,8627,8629,8641,8647,8663,8669,8677,8681,8689,8693,8699,8707,8713,8719,8731,8737,8741,8747,8753,8761,8779,8783,8803,8807,8819,8821,8831,8837,8839,8849,8861,8863,8867,8887,8893,8923,8929,8933,8941,8951,8963,8969,8971,8999,9001,9007,9011,9013,9029,9041,9043,9049,9059,9067,9091,9103,9109,9127,9133,9137,9151,9157,9161,9173,9181,9187,9199,9203,9209,9221,9227,9239,9241,9257,9277,9281,9283,9293,9311,9319,9323,9337,9341,9343,9349,9371,9377,9391,9397,9403,9413,9419,9421,9431,9433,9437,9439,9461,9463,9467,9473,9479,9491,9497,9511,9521,9533,9539,9547,9551,9587,9601,9613,9619,9623,9629,9631,9643,9649,9661,9677,9679,9689,9697,9719,9721,9733,9739,9743,9749,9767,9769,9781,9787,9791,9803,9811,9817,9829,9833,9839,9851,9857,9859,9871,9883,9887,9901,9907,9923,9929,9931,9941,9949,9967,9973].index(e)}.size end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5a99a03e4a6b34bb3c000124":[{"id":50245,"user_id":106,"body":"def num_primorial(n)\n  [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113].first(n).reduce(1.to_i64) {|p,n| p*n.to_i64}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50246,"user_id":421,"body":"def prime(n)\n  (2..n ** 0.5).each do |i|\n    if n % i == 0\n      return false\n    end\n  end\n  n > 1\nend\n\ndef num_primorial(n)\n  i = 3\n  tot = 2_u64\n  while n != 1\n    if prime(i)\n        tot *= i\n        n -= 1\n    end    \n    i += 2\n  end\n  tot\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50247,"user_id":null,"body":"def num_primorial(n)\n  (2..10000).each_with_object(Array.new(10000, true)).select do |(x, arr)|\n    if arr[x - 1]\n      (x * 2).step(to: 10000, by: x).each { |y| arr[y - 1] = false }\n      true\n    end\n  end.first(n).product(1_i64,&.[0])\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50248,"user_id":null,"body":"class Primes\n  @@list = [2, 3]\n  \n  def self.list\n    @@list\n  end\nend\n\ndef num_primorial(n)\n  s = [0, n - Primes.list.size].max\n  s.times do\n    x = Primes.list.last + 2\n    while true\n      if Primes.list.all? {|p| x % p != 0}\n        Primes.list << x\n        break\n      end\n      x += 2\n    end\n  end\n  Primes.list[0...n].reduce(1_u64) {|a, i| a*i}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50249,"user_id":null,"body":"class Sieve\n  @@known_primes = [] of Int32\n  @@limit = 1\n\n  def self.primes_to(n : Int32)\n    return @@known_primes.select { | k | k <= n } if n <= @@limit \n    \n    h = ((@@limit + 1)..n).each_with_object({} of Int32 => Bool) do | i, h |\n      h[i] = true\n    end\n\n    @@known_primes.each do | prime | \n      h.delete_if { | k, _ | k % prime == 0 } \n    end\n    \n    k = @@limit\n    while k**2 < n\n      k += 1\n      next unless h.has_key? k\n      h.delete_if { | j, _ | j % k == 0 }\n      @@known_primes << k\n    end\n    \n    @@limit = n\n    @@known_primes += h.keys\n  end\nend\n\ndef num_primorial(n)\n  ul = 5\n  while true\n    ps = Sieve.primes_to(ul)\n    break if ps.size >= n\n    ul = ul * 3 \/ 2\n  end\n  ps[0, n].reduce(1_u64) { | a, e | a * e }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50250,"user_id":null,"body":"def num_primorial(n)\n  max = 1000\n  sieve = Array.new(max + 1, true)\n  sieve[0] = false\n  sieve[1] = false\n\n  2.step(to: Math.sqrt(max)) do |i|\n    if sieve[i]\n      (i * i).step(to: max, by: i) do |j|\n        sieve[j] = false\n      end\n    end\n  end\n\n  primes = [] of UInt64\n  (1000_u64).times do |x|\n    primes << x if sieve[x]\n  end\n  primes.first(n).product\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50251,"user_id":null,"body":"def prime(x)\n  t = true\n  i = 2\n  while i<x\n    t = x%i!=0\n    break if !t\n    i += 1\n  end\n  x == 2 ? true : t\nend\n\ndef num_primorial(n)\n  prod = 1_i64\n  i = 1\n  c = 0\n  while c < n\n    i += 1\n    next if !prime(i)\n    c += 1\n    prod *= i\n  end\n  prod\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50252,"user_id":527,"body":"PRIMORIALS = [1, 2, 6, 30, 210, 2310, 30030, 510510, 9699690, 223092870, 6469693230, 200560490130, 7420738134810, 304250263527210, 13082761331670030, 614889782588491410]\n\ndef num_primorial(n)\n  PRIMORIALS[n]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50253,"user_id":1072,"body":"def num_primorial(n) [1, 2, 6, 30, 210, 2310, 30030, 510510, 9699690, 223092870, 6469693230, 200560490130, 7420738134810, 304250263527210, 13082761331670030, 614889782588491410][n] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50254,"user_id":1072,"body":"def num_primorial(n) [1, 2, 6, 30, 210, 2310, 30030, 510510, 9699690, 223092870, 6469693230, 200560490130, 7420738134810, 304250263527210, 13082761331670030, 614889782588491410][n] end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5aa1bcda373c2eb596000112":[{"id":50255,"user_id":1072,"body":"def max_tri_sum(n) n.uniq.sort{|a,b| b<=>a}[0,3].reduce(0){|a,b| a+b} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50256,"user_id":null,"body":"def max_tri_sum(numbers)\n  numbers.uniq.combinations(3).max_of(&.sum)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50257,"user_id":null,"body":"def max_tri_sum(numbers)\n  numbers.uniq.sort.reverse[..2].sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50258,"user_id":null,"body":"def max_tri_sum(numbers)\n  numbers.uniq.sort[-3..].sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50259,"user_id":492,"body":"require \"set\"\ndef max_tri_sum(numbers)\n    arr = numbers.to_set.to_a\n    a = arr.sort_by { |x| -x }\n    sum = a[0] + a[1] + a[2]\n    sum\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50260,"user_id":null,"body":"def max_tri_sum(numbers)\n  numbers.uniq.sort.last(3).sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50261,"user_id":null,"body":"def max_tri_sum(numbers)\n        m1, m2, m3 = Int32::MIN, Int32::MIN, Int32::MIN\n        i = 0\n        while i < numbers.size\n                n = numbers[i]\n                if n > m1\n                        if n < m2\n                                m1 = n\n                        elsif n < m3 && n != m2\n                                m1 = m2\n                                m2 = n\n                        elsif n > m3\n                                m1 = m2\n                                m2 = m3\n                                m3 = n\n                        end\n                end\n                i += 1\n        end\n        m1 + m2 + m3\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5aa736a455f906981800360d":[{"id":50262,"user_id":null,"body":"def feast(beast, dish)\n  beast.starts_with?(dish.[] 0 ) && beast.ends_with?(dish.[] -1)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50263,"user_id":1474,"body":"def feast(beast, dish)\n  [0, -1].all? { |i| beast[i] == dish[i] }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50264,"user_id":null,"body":"def feast(beast, dish)\n  if beast[0] != dish[0]\n    return false\n  end\n\n  beast[-1] == dish[-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50265,"user_id":421,"body":"def feast(beast, dish)\n  beast[0] === dish[0] && beast[-1] === dish[-1]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50266,"user_id":null,"body":"def feast(beast, dish)\n  beast.[0] == dish.[0] && beast.reverse.[0] == dish.reverse.[0]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50267,"user_id":null,"body":"def feast(beast, dish)\n  beast.starts_with?(dish.char_at(0)) && beast.ends_with?(dish.char_at(dish.size-1))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50268,"user_id":null,"body":"def feast(beast, dish)\n  dish.starts_with?(beast[0]) && dish.ends_with?(beast[-1])\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50269,"user_id":null,"body":"def feast(beast, dish)\n  beast.starts_with?(dish[0]) && beast.ends_with?(dish[-1])\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50270,"user_id":null,"body":"def feast(beast, dish)\n  beast.char_at(0) == dish.char_at(0) && beast.char_at(-1) == dish.char_at(-1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50271,"user_id":null,"body":"def feast(beast, dish)\n  beast.char_at(0) == dish.char_at(0) && beast.reverse.char_at(0) == dish.reverse.char_at(0)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5ab6538b379d20ad880000ab":[{"id":50272,"user_id":1566,"body":"def area_or_perimeter(l , w)\n   l==w ? l*w : 2*(l+w)\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50273,"user_id":null,"body":"def area_or_perimeter(l , w)\n  l == w ? l * w : (l+w) * 2;\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50274,"user_id":null,"body":"def area_or_perimeter(l , w)\n  if w==l\n    return l**2\n  end\n  2*(l+w)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50275,"user_id":null,"body":"def area_or_perimeter(l , w)\n  l == w ? l * w : 2 * l + 2 * w\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50276,"user_id":1474,"body":"def area_or_perimeter(l , b)\n  l == b ? l * b : 2 * (l + b)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50277,"user_id":null,"body":"def area_or_perimeter(l , w)\n  l != w ? (l*2) + (w*2) : l*w\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50278,"user_id":null,"body":"def area_or_perimeter(l , w)\n  if l == w\n    l * w\n  else\n    2 * (l + w)\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50279,"user_id":null,"body":"def area_or_perimeter(l , w)\n  if l == w\n    return l * w\n  end\n  return (l + w) * 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50280,"user_id":null,"body":"def area_or_perimeter(l, w)\n  l == w ? l * w : (l * 2) + (w * 2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50281,"user_id":null,"body":"def area_or_perimeter(l , w)\n  l == w ? l * w : l + l + w + w\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5ab7ee556a176b1043000047":[{"id":50282,"user_id":421,"body":"def pay_cheese(arr)\n  \"\u00a3#{(arr.sum{|x| x \/ 100}.ceil * 4 * 8.75).to_i}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50283,"user_id":null,"body":"def pay_cheese(arr)\n  \"\u00a3%d\" % (35*(arr.sum*0.01).ceil)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50284,"user_id":1072,"body":"def pay_cheese(arr) \"\u00a3#{(arr.reduce(0){|a,b| a+b} \/ 100.0).ceil.to_i * 35}\" end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5aba780a6a176b029800041c":[{"id":50285,"user_id":null,"body":"def max_multiple(divisor, bound)\n  bound - bound % divisor\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50286,"user_id":null,"body":"def max_multiple(divisor, bound)\n  return bound - bound \/\/ divisor * divisor == 0 ? bound : max_multiple(divisor, bound - 1);\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50287,"user_id":null,"body":"def max_multiple(divisor, bound)\n  return bound % divisor == 0? bound : max_multiple(divisor, bound - 1);\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50288,"user_id":527,"body":"def max_multiple(divisor, bound)\n  bound \/\/ divisor * divisor\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50289,"user_id":1072,"body":"def max_multiple(d,b) b - b % d end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50290,"user_id":50,"body":"def max_multiple(divisor, bound)\n  (bound\/divisor).floor*divisor\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50291,"user_id":53,"body":"def max_multiple(d, b)\n  return b - b % d\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50292,"user_id":1474,"body":"def max_multiple(divisor, bound)\n  bound.downto(1).find { |i| i % divisor == 0 } || 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50293,"user_id":null,"body":"def max_multiple(divisor, bound)\n  bound.downto(1).find {|n| n % divisor == 0}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50294,"user_id":null,"body":"def max_multiple(divisor, bound)\n  (0..bound).reverse_each do |n| \n    return n if n % divisor == 0\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5abd66a5ccfd1130b30000a9":[{"id":50295,"user_id":421,"body":"def row_weights(array)\n  o, e = 0, 0\n  (0...array.size).each do |x|\n    if x.odd?\n      o += array[x]\n    else\n      e += array[x]\n    end\n  end\n  {e, o}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50296,"user_id":null,"body":"def row_weights(array)\n  {array.each.step(2).sum, array.each.skip(1).step(2).sum}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50297,"user_id":53,"body":"def row_weights(array)\n  a = 0\n  b = 0\n  array.each_with_index do |weight, i|\n    if i % 2 == 0\n      a += weight\n    else\n      b += weight\n    end\n  end\n  return {a, b}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50298,"user_id":1474,"body":"def row_weights(arr)\n  a, b = 0, 0\n  arr.each_with_index { |n, i| i.even? ? (a += n) : (b += n) }\n  {a, b}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50299,"user_id":null,"body":"def row_weights(array)\n  team1 = 0\n  team2 = 0\n  array.each_with_index do |x, i|\n    if i.even?\n      team1 += x\n    else\n      team2 += x\n    end\n  end\n  {team1, team2}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50300,"user_id":null,"body":"def row_weights(array)\n  sums = [0, 0]\n  \n  array.each.with_index do |n, i|\n    sums[i % 2] += n\n  end\n  \n  { sums[0], sums[1] }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50301,"user_id":null,"body":"def row_weights(array)\n  team1, team2 = [] of Int32, [] of Int32\n  array.each_with_index { |x, i| i.even? ? team1 << x : team2 << x }\n  { team1.sum, team2.sum }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50302,"user_id":null,"body":"def row_weights(array)\n  Tuple(Int32, Int32).from(array.in_groups_of(2, 0).transpose.map(&.sum))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50303,"user_id":null,"body":"def row_weights(array)\n  result = [0, 0]\n  array.each.with_index do |elem, elem_idx|\n    result[ elem_idx % 2 ] += elem\n  end\n  return Tuple(Int32, Int32).from(result)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50304,"user_id":1828,"body":"def row_weights(array)\n  array.map_with_index{|j,i| {j,i}}.partition{|x,y| y.even?}.map{|i| i.map(&.first).sum}  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5ac5e9aa3853da25d9000102":[{"id":50305,"user_id":1624,"body":"def or_arrays(arr1, arr2, default=0)\n  sz = [arr1.size, arr2.size].max\n  (0...sz).map{|i|\n    (arr1[i]? || default) |\n    (arr2[i]? || default)\n  }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50306,"user_id":527,"body":"def or_arrays(arr1, arr2, default = 0)\n  (0 ... {arr1.size, arr2.size}.max).map{ |i| (arr1[i]? || default) | (arr2[i]? || default) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50307,"user_id":1072,"body":"def or_arrays(a1,a2,d=0) (0...[a1.size,a2.size].max).map{|i| (i<a1.size ? a1[i] : d)|(i<a2.size ? a2[i] : d)} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5ac6932b2f317b96980000ca":[{"id":50308,"user_id":null,"body":"def min_value(d)\n  d.uniq.sort.join.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50309,"user_id":421,"body":"def min_value(digits)\n  digits.uniq.sort.map(&.to_s).join.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50310,"user_id":null,"body":"def min_value(digits)\n  digits.sort.uniq.map{|x| x.to_s}.join.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50311,"user_id":1768,"body":"def min_value(x)\n  x.uniq.sort.map{|i|i.to_s}.join.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50312,"user_id":1828,"body":"def min_value(digits)\n  digits.sort.uniq.join.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50313,"user_id":1828,"body":"def min_value(digits)\n  digits.uniq.sort.join.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50314,"user_id":527,"body":"def min_value(digits)\n  is_present = digits.each_with_object([false] * 10) {|d, p| p[d] = true }\n  res = 0\n  (0..9).each{ |d| res = res * 10 + d if is_present[d] }\n  res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50315,"user_id":1072,"body":"def min_value(n) n.uniq.sort.join.to_i end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5ad0d8356165e63c140014d4":[{"id":50316,"user_id":1474,"body":"def final_grade(exam, projects)\n  if exam > 90 || projects > 10\n    100\n  elsif exam > 75 && projects >= 5\n    90\n  elsif exam > 50 && projects >= 2\n    75\n  else\n    0\n  end\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50317,"user_id":null,"body":"def final_grade(exam, projects)\n  return 100 if exam > 90 || projects > 10\n  return 90 if exam > 75 && projects >= 5\n  return 75 if exam > 50 && projects >= 2\n  0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50318,"user_id":null,"body":"def final_grade(exam, projects)\n  case\n    when exam > 90 || projects > 10\n      100\n    when exam > 75 && projects > 4\n      90\n    when exam > 50 && projects > 1\n      75\n    else\n      0\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50319,"user_id":527,"body":"def final_grade(exam, projects)\n  case\n    when exam > 90 || projects > 10 then 100\n    when exam > 75 && projects >= 5 then 90\n    when exam > 50 && projects >= 2 then 75\n    else 0\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50320,"user_id":53,"body":"def final_grade(exam, projects)\n    return 100 if exam > 90 || projects > 10\n    return 90 if exam > 75 && projects > 4\n    return 75 if exam > 50 && projects > 1\n    0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50321,"user_id":50,"body":"def final_grade(exam, projects)\n  exam>90||projects>10 ? 100 : 75*(exam>50&&projects>1 ? 1 : 0)+15*(exam>75&&projects>4 ? 1 : 0)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50322,"user_id":421,"body":"def final_grade(exam, projects)\n  exam > 90 || projects > 10? 100: exam > 75 && projects >= 5? 90: exam > 50 && projects >= 2? 75: 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5ad29cd95e8240dd85000b54":[{"id":50323,"user_id":1474,"body":"def friends(n : Int)\n  n < 3 ? 0 : Math.log2(n-1).floor\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50324,"user_id":53,"body":"def friends(n : Int)\n  n < 2 ? 0 : (Math.log(n) \/ Math.log(2)).ceil - 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50325,"user_id":527,"body":"def friends(n)\n  n.pred.bit_length.pred.clamp(0..)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50326,"user_id":527,"body":"def friends(n : Int) : Int32\n  n < 2 ? 0 : (n - 1).bit_length - 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50327,"user_id":421,"body":"def friends(n : Int)\n  n < 3 ? 0 : (n - 1).to_s(2).size - 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50328,"user_id":null,"body":"def friends(n : Int)\n  n < 2 ? 0 : (n - 1).bit_length - 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50329,"user_id":1624,"body":"def friends(n : Int)\n  return 0 if n <= 1\n  Math.log2(n).ceil - 1\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50330,"user_id":645,"body":"def friends(n : Int)\n  n < 2 ? 0 : [0, (Math.log(n - 1) \/ Math.log(2)).floor].max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5ad6266b673f2f067b000004":[{"id":50331,"user_id":null,"body":"def coin(n)\n  resultArray = [] of String\n  (2**n).times do |variant|\n    resultArray.push(\"\")\n    n.times do |shift|\n      resultArray[resultArray.size-1] += (variant&(1<<shift) == 0 ? \"H\" : \"T\")\n    end\n  end\n  return resultArray.sort\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50332,"user_id":null,"body":"def coin(n)\n  %w(H T).repeated_permutations(n).map(&.join)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50333,"user_id":527,"body":"def coin(n)\n  ['H', 'T'].repeated_permutations(n).map(&.join)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50334,"user_id":1403,"body":"def coin(n)\n  [\"H\",\"T\"].repeated_permutations(n).to_a.map(&.join)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5ae62fcf252e66d44d00008e":[{"id":50335,"user_id":1624,"body":"def expression_matter(a,b,c)\n  [\n    a*b*c,\n    (a+b)*c,\n    a+b+c,\n    a*(b+c),\n    a+b*c,\n    a*b+c,\n  ].max\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50336,"user_id":null,"body":"def expression_matter(a, b, c)\n  [a + b + c, a * b * c, (a + b) * c, a * (b + c)].max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50337,"user_id":50,"body":"def expression_matter(a,b,c)\n  ([(a+b)*c, (a+b)*c, a*(b+c), a+b+c, a*b*c]).max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50338,"user_id":53,"body":"def expression_matter(a,b,c)\n  ans = 0\n  if (a+b+c>ans)\n    ans=a+b+c\n  end\n  if (a*b*c>ans)\n    ans=a*b*c\n  end\n  if ((a+b)*c>ans)\n    ans=(a+b)*c\n  end\n  if (a*(b+c)>ans)\n    ans=a*(b+c)\n  end\n  return ans\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50339,"user_id":421,"body":"def expression_matter(a,b,c)\n  [a * b * c, (a + b) * c, a * (b + c), a + b + c].max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50340,"user_id":1474,"body":"def expression_matter(a, b, c)\n  [\n    a + b + c,\n    a * b * c,\n    a + b * c,\n    a * b + c,\n    (a + b) * c,\n    a * (b + c)\n  ].max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50341,"user_id":null,"body":"def expression_matter(a,b,c)\n  [\n    a + b + c, a * b + c, a * (b + c), a + b * c, (a + b) * c, a * b * c\n  ].max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50342,"user_id":null,"body":"def expression_matter(a,b,c)\n  return [          a + b * c,\n            (a + b) * c,\n            a * b + c,\n            a * ( b + c),\n            a + b + c,\n            a * b * c].max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50343,"user_id":null,"body":"def expression_matter(a,b,c)\n  one = a * (b + c)\n  two = a * b * c\n  three = a + b * c\n  four = (a + b) * c\n  five = a + b + c\n  return [one, two, three, four, five].max\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50344,"user_id":null,"body":"def expression_matter(a,b,c)\n  x = [a,b,c]\n  if x.count(1) > 1\n    x.sum\n  elsif x.count(1) == 1\n    a == 1 || a < c ? (a + b) * c : a * (b + c)\n  else\n    a * b * c\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5ae7e3f068e6445bc8000046":[{"id":50345,"user_id":421,"body":"def next_happy_year(year)\n  a = year + 1\n  while a.to_s.chars.uniq.join.to_i != a\n    a += 1\n  end\n  a\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50346,"user_id":null,"body":"def next_happy_year(year)\n  year += 1\n  while year.digits.uniq != year.digits\n    year += 1\n  end\n  year\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50347,"user_id":527,"body":"def next_happy_year(year)\n  (year.succ..).find(&.digits.uniq!.size.==(4))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50348,"user_id":1474,"body":"def happy?(n)\n  s = n.to_s\n  s.size == s.chars.uniq.size\nend\n\ndef next_happy_year(year)\n  (year + 1..100000).find { |i| happy?(i) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50349,"user_id":null,"body":"def next_happy_year(year)\n  tmp = year\n  until tmp.to_s.chars.uniq.size == 4 && tmp != year\n    tmp += 1\n  end\n  tmp\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50350,"user_id":1624,"body":"def all_different?(items)\n  items.uniq.size == items.size\nend\n\ndef next_happy_year(year)\n  (year+1..999999999).find{|y| all_different?(y.to_s.chars) }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50351,"user_id":null,"body":"def next_happy_year(year)\n  loop do\n    year += 1\n    return year if year.to_s.chars.uniq.join.to_i == year\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50352,"user_id":17,"body":"def is_happy_year(n)\n  a = [] of Int32\n  while n > 0\n    return false if a.includes?(n % 10)\n    a << n % 10\n    n \/= 10\n  end\n  true\nend\n\ndef next_happy_year(n)\n  loop do\n    n += 1\n    break if is_happy_year(n)\n  end\n  n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50353,"user_id":527,"body":"def next_happy_year(year)\n  (year + 1).step.find(&.to_s.chars.uniq.size.==(4))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50354,"user_id":1072,"body":"def next_happy_year(yfind{|e| e>y} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5aec1ed7de4c7f3517000079":[{"id":50355,"user_id":null,"body":"def first_n_smallest(arr, n)\n  mins = arr[0...n]\n  return mins if n.zero?\n  mins_max = mins.rindex(mins.max).not_nil!\n  arr[n..].each do |val|\n    if val < mins[mins_max]\n      mins.delete_at(mins_max)\n      mins << val\n      mins_max = mins.rindex(mins.max).not_nil!\n    end\n  end\n  mins\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50356,"user_id":1624,"body":"def first_n_smallest(arr, n)\n  elems = arr.sort.first(n).tally\n  arr.select do |x|\n    if (elems[x]? || 0) > 0\n      elems[x] -= 1\n      true\n    else\n      false\n    end\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50357,"user_id":1072,"body":"def first_n_smallest(arr, n) s=arr.sort[0,n]; arr.reduce([] of Int32){|a,b| c=s.index(b); c!=nil ? a+[s.delete_at(c || 0)] : a} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5af15a37de4c7f223e00012d":[{"id":50358,"user_id":421,"body":"def men_from_boys(arr)\n  a = arr.uniq.partition{|x| x.even?}\n  a[0].sort + a[1].sort.reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50359,"user_id":1474,"body":"def men_from_boys(arr)\n  men, boys = arr.partition(&.even?)\n  men.uniq.sort + boys.uniq.sort.reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50360,"user_id":null,"body":"def men_from_boys(arr)\n  boys = arr.uniq.select { |x| x.odd? }.sort.reverse\n  men = (arr.uniq - boys).sort\n  men + boys\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50361,"user_id":null,"body":"def men_from_boys(arr)\n  men, boys = arr.uniq.partition(&.even?)\n  men.sort + boys.sort{|a, b| b<=>a}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50362,"user_id":1768,"body":"def men_from_boys(a)\n  a.select{|i| i%2==0}.uniq.sort+a.reject{|i| i%2==0}.uniq.sort.reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50363,"user_id":null,"body":"def men_from_boys(arr)\n  evens, odds = arr.uniq.sort.partition(&.even?)\n  evens + odds.reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50364,"user_id":1072,"body":"def men_from_boys(arr) arr.uniq.sort{|a,b| (a%2).abs != (b%2).abs ? (b%2).abs==1 ? -1 : 1 : (b%2).abs==1 ? b <=> a : a <=> b} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5af96cea3e9715ec670001dd":[{"id":50365,"user_id":168,"body":"def round(x, n)\n  (x * 10 ** n).round \/ 10 ** n\nend\n\nclass Projectile\n  @v0_x : Float64\n  @v0_y : Float64\n  \n  def initialize(h0 : Float64, v0 : Float64, a : Float64)\n    @h0 = h0\n    @v0_x = v0 * Math.cos(Math::PI * a \/ 180)\n    @v0_y = v0 * Math.sin(Math::PI * a \/ 180)\n  end\n  \n  def height_eq\n    els = [\"h(t) = -16.0t^2\"]\n    els << round(@v0_y, 3).to_s + \"t\" if @v0_y != 0\n    els << round(@h0, 3).to_s if @h0 != 0\n    els.join \" + \"\n  end\n  \n  def horiz_eq\n    \"x(t) = #{round(@v0_x, 3)}t\"\n  end\n  \n  def height(t)\n    round(-16 * t**2 + @v0_y * t + @h0, 3)\n  end\n  \n  def horiz(t)\n    round(@v0_x * t, 3)\n  end\n  \n  def landing\n    d = @v0_y**2 + 64 * @h0\n    t = (@v0_y + d**0.5) \/ 32\n    [round(@v0_x * t, 3), 0, round(t, 3)]\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50366,"user_id":1403,"body":"class Projectile\n  def initialize(h : Float64, v0 : Float64, a : Float64)\n    @start_height = h\n    @start_velocity = v0\n    @angle = a\n    @horiz_vel = Float64.new(@start_velocity * Math.cos((a * Math::PI) \/ 180.0))\n    @vertical_vel = Float64.new(@start_velocity * Math.sin((a * Math::PI) \/ 180.0))\n  end\n  def height_eq\n    \"h(t) = -16.0t^2 + #{@vertical_vel.round(3)}t\" + (@start_height == 0 ? \"\" : \" + #{@start_height.to_f}\")\n  end\n  def horiz_eq\n    \"x(t) = #{@horiz_vel.round(3)}t\"\n  end\n  def height(time)\n    (-16 * (time ** 2) + (@vertical_vel * time) + @start_height).round 3\n  end\n  def horiz(time)\n    (@horiz_vel * time).round 3\n  end\n  def landing\n    t = ((0-@vertical_vel - Math.sqrt((@vertical_vel**2)-(4*(-16)*@start_height)))\/-32.0)\n    x = horiz(t)\n    return [x.round(3), 0, t.round(3)]\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5aff237c578a14752d0035ae":[{"id":50367,"user_id":527,"body":"def predict_age(*ages)\n  (Math.sqrt(ages.sum{ |a| a ** 2 }) \/ 2).to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50368,"user_id":1228,"body":"def predict_age(*ages)\n   (ages.map { |n| n**2 }.sum**0.5 \/ 2).to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50369,"user_id":421,"body":"def predict_age(*age)\n  age.sum{|x| x ** 2} ** 0.5 \/\/ 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50370,"user_id":1474,"body":"def predict_age(*ages)\n  (Math.sqrt(ages.reduce(0) { |s, i| s + i ** 2 }) \/ 2).to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50371,"user_id":492,"body":"def predict_age(a1, a2, a3, a4, a5, a6, a7, a8)\n    num= [a1, a2, a3, a4, a5, a6, a7, a8]\n    s = 0.0; i = 0\n    while (i <= 7)\n        s += num[i] * num[i]\n        i += 1\n    end\n    r = Math.sqrt(s) \/ 2\n    return r.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50372,"user_id":null,"body":"def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8)\n  ages = [age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n  Math.sqrt(ages.sum &.**(2)) \/\/ 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50373,"user_id":1258,"body":"def predict_age(*args)\n  (Math.sqrt(args.map(&.**(2)).sum) \/ 2).floor\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50374,"user_id":null,"body":"def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8)\n  Int32.new(\n    0.5 * Math.sqrt([age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8]\n      .map{|v| v ** 2}\n      .sum)\n  )\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50375,"user_id":null,"body":"def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8)\n  (Math.sqrt(\n    age_1 * age_1 + age_2 * age_2 + age_3 * age_3 + age_4 * age_4 +\n    age_5 * age_5 + age_6 * age_6 + age_7 * age_7 + age_8 * age_8\n  ) \/ 2).floor.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50376,"user_id":null,"body":"def predict_age(age_1, age_2, age_3, age_4, age_5, age_6, age_7, age_8)\n  Math.sqrt(age_1 * age_1 +  age_2 * age_2 + age_3 * age_3 + age_4 * age_4 + age_5 * age_5 + age_6 * age_6 + age_7 * age_7 + age_8 * age_8).to_i  \/ 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5b06c990908b7eea73000069":[{"id":50377,"user_id":53,"body":"def f(z, eps)\n    ans = Math.log(eps) \/ Math.log(Math.hypot(z.real, z.imag))\n    ans < 0 ? -1 : ans.floor\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50378,"user_id":492,"body":"def f(z, eps)\n    if (z.abs >= 1) \n        return -1 \n    end\n    n = (Math.log(eps) \/ Math.log(z.abs)).to_i\n    n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50379,"user_id":168,"body":"def f(z, eps)\n  a = z.abs\n  a >= 1 ? -1 : Math.log(eps, a)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50380,"user_id":null,"body":"def f(z, eps)\n   Math.max(-1, Math.log(eps)\/Math.log(Math.hypot(z.real, z.imag)))\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50381,"user_id":50,"body":"def f(z, q)\n  mod=z.abs\n  mod < 1 ? Math.log(q,mod).round : -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5b077ebdaf15be5c7f000077":[{"id":50382,"user_id":1072,"body":"def count_sheep(num) (1..num).map {|i| \"#{i} sheep...\"}.join end","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50383,"user_id":null,"body":"def count_sheep(num)\n  (1..num).map{ |n| \"#{n} sheep...\" }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50384,"user_id":null,"body":"def count_sheep(num : Int) : String\n  (1..num).map { |n| \"#{n} sheep...\"}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50385,"user_id":null,"body":"def count_sheep(num)\n  return \"\" if num.zero?\n  (1..num).map{ |n| \"#{n} sheep...\" }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50386,"user_id":492,"body":"def count_sheep(n)\n  (1..n).map {|i| \"#{i} sheep...\"}.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50387,"user_id":53,"body":"def count_sheep(n)\n  (1..n).map{ |i| i.to_s + \" sheep...\" }.join(\"\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50388,"user_id":null,"body":"def count_sheep(num)\n  res = \"\"\n  index = 1\n  while num > 0\n    res += \"#{index} sheep...\"\n    num -= 1\n    index += 1\n  end\n\n  return res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50389,"user_id":421,"body":"def count_sheep(num)\n  (1..num).map {|x| \"#{x} sheep...\"}.join \"\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50390,"user_id":1474,"body":"def count_sheep(num)\n  (1..num).each_with_object([] of String) { |i, obj| obj << \"#{i} sheep...\" }.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50391,"user_id":null,"body":"def count_sheep(num)\n  x = \"\"\n  1.upto(num) do |i|\n    x += \"#{i} sheep...\"\n  end\n  x\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5b0c0ec907756ffcff00006e":[{"id":50392,"user_id":null,"body":"def quadratic(a, b, c)\n    -c\/b\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50393,"user_id":527,"body":"def quadratic(a, b, c)\n  -c.fdiv(b)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50394,"user_id":492,"body":"def quadratic(a, b, c)\n    -c \/ b.to_f\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50395,"user_id":492,"body":"def quadratic(a, b, c)\n    -c \/ b.to_f\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5b0d67c1cb35dfa10b0022c7":[{"id":50396,"user_id":53,"body":"def squares_needed(n)\n  n == 0 ? 0 : 1 + squares_needed(n >> 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50397,"user_id":421,"body":"def squares_needed(grains)\n   grains.zero? ? 0 : grains.to_s(2).size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50398,"user_id":null,"body":"def squares_needed(grains)\n  grains == 0 ? 0 : Math.log2(grains).floor + 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50399,"user_id":null,"body":"def squares_needed(grains)\n  if grains > 0\n    grains.to_s(2).size\n  else\n    grains\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50400,"user_id":50,"body":"def squares_needed(n)\n  o=0\n  while n>0\n    o+=1\n    n>>=1\n  end\n  o\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50401,"user_id":null,"body":"def squares_needed(n)\n  if(n == 0)\n    return 0\n  end\n  return 1 + squares_needed(n \/\/ 2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50402,"user_id":1474,"body":"def squares_needed(grains)\n  grains > 0 ? Math.log(grains, 2).to_i + 1 : grains\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50403,"user_id":492,"body":"def squares_needed(grains)\n  grains.bit_length()\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50404,"user_id":null,"body":"def squares_needed(grains)\n  Math.log2(grains+1).ceil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50405,"user_id":1624,"body":"def squares_needed(grains)\n  return 0 if grains == 0\n  1 + Math.log2(grains).floor\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5b13530f828fab68820000c4":[{"id":50406,"user_id":1403,"body":"def para_to_rect(a, b)\n  x, y = a.gsub(\" \", \"\"), b.gsub(\" \", \"\")\n  xt, yt = x.match(\/(-?)(\\d*)t\/).as(Regex::MatchData), y.match(\/(-?)(\\d*)t\/).as(Regex::MatchData)\n  xt, yt = [xt[1], xt[2]], [yt[1], yt[2]]\n  if xt[1].empty?; xt[1] = \"1\"; end\n  if yt[1].empty?; yt[1] = \"1\"; end\n  xt, yt = xt.join.to_i, yt.join.to_i\n  xc, yc = x.match(\/(-?\\d+)$\/).as(Regex::MatchData)[1].to_i, y.match(\/(-?\\d+)$\/).as(Regex::MatchData)[1].to_i\n  x = (xt.lcm(yt) \/ xt).abs\n  val1 = x == 1 ? \"\" : x\n  y = (xt.lcm(yt) \/ yt).abs\n  val2 = y == 1 ? \"\" : y\n  ((xt.as(Int32) < 0.as(Int32)) != (yt.as(Int32) < 0.as(Int32))) ?\n    \"#{val1}x + #{val2}y = #{xc * (xt.lcm(yt) \/ xt).abs + (yc * (xt.lcm(yt) \/ yt).abs)}\" :\n    \"#{val1}x - #{val2}y = #{xc * (xt.lcm(yt) \/ xt).abs - (yc * (xt.lcm(yt) \/ yt).abs)}\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5b180e9fedaa564a7000009a":[{"id":50407,"user_id":null,"body":"def solve(s)\n  up, down = s.chars.partition(&.uppercase?).map(&.size)\n  up > down ? s.upcase : s.downcase\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50408,"user_id":1474,"body":"def solve(s)\n  l1 = s.count(\"a-z\")\n  l2 = s.size - l1\n  return s if [l1, l2].includes?(0)\n  l2 > l1 ? s.upcase : s.downcase\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50409,"user_id":53,"body":"def solve(s)\n  s.split(\"\").select{|c| c<=\"Z\"}.size>s.size>>1 ? s.upcase : s.downcase\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50410,"user_id":421,"body":"def solve(s)\n   s.chars.select{|x| \/[a-z]\/ === x.to_s}.size >= s.size \/ 2 ? s.downcase : s.upcase\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50411,"user_id":168,"body":"def solve(s)\n  2 * s.gsub(\/[a-z]\/, \"\").size > s.size ? s.upcase : s.downcase\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50412,"user_id":null,"body":"def solve(s)\n  if s.count &.uppercase? > s.size\/2\n    s.upcase\n  else\n    s.downcase\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50413,"user_id":null,"body":"def solve(s)\n  return s.upcase if s.chars.select(&.uppercase?).size > s.size \/ 2\n  s.downcase\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50414,"user_id":null,"body":"def solve(s)\n  s.count { |c| c.in_set? \"a-z\" } >= s.count { |c| c.in_set? \"A-Z\" } ? s.downcase : s.upcase\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50415,"user_id":null,"body":"def solve(s)\n  cnt = 0\n  s.each_char do |c|\n    cnt += c.lowercase? ? 1 : -1\n  end\n  return cnt >= 0 ? s.downcase : s.upcase\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50416,"user_id":17,"body":"def solve(s)\n  score = 0\n  s.chars.each do |c|\n    if c.ord >= 65 && c.ord < 91\n      score -= 1\n    elsif c.ord >= 97 && c.ord < 123\n      score += 1\n    end\n  end\n  score < 0 ? s.upcase : s.downcase\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5b190aa7803388ec97000054":[{"id":50417,"user_id":421,"body":"def tram(stops, descending, onboarding)\n  maxi = 0\n  passengers = 0\n  (0...stops).each do |i|\n      passengers += onboarding[i] - descending[i]\n      maxi = [maxi, passengers].max\n  end\n  maxi\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50418,"user_id":1624,"body":"def tram(n, a, b)\n  e = 0\n  m = 0\n  n.times do |i|\n    e += b[i] - a[i]\n    m = [m,e].max\n  end\n  m\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50419,"user_id":17,"body":"def tram(stops, descending, onboarding)\n  result = 0\n  current_passengers = 0\n  (0...stops).each { |i| result = [result, current_passengers += onboarding[i] - descending[i]].max }\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50420,"user_id":null,"body":"def tram(stops, descending, onboarding)  \n  current = 0\n  minimal = 0\n  i = 0\n  \n  while i < stops\n    current = current + onboarding[i] - descending[i]\n    minimal = [minimal, current].max\n    i += 1\n  end\n  \n  minimal\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50421,"user_id":1072,"body":"def tram(s,d,o,c=0,m=0) nc=c+(o[0]? || 0)-(d[0]? || 0); s>0 ? tram(s-1,d[1,999],o[1,999],nc,[nc,m].max) : [c,m].max end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5b1cd19fcd206af728000056":[{"id":50422,"user_id":50,"body":"def solve(m)\n  (2*m+1-(4*m+1)**0.5)\/(2*m)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50423,"user_id":492,"body":"def solve(m)\n    s = Math.sqrt(4*m+1)\n    (2 * m + 1 - s) \/ (2 * m)            \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50424,"user_id":492,"body":"def solve(m)\n    s = Math.sqrt(4*m+1)\n    (2 * m + 1 - s) \/ (2 * m)            \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50425,"user_id":null,"body":"def solve(m)\n       (2*m-Math.sqrt(4*m+1)+1)\/(2*m)                \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50426,"user_id":null,"body":"def solve(m)\n    (2.0*m + 1.0 - Math.sqrt(4.0*m + 1.0))\/(2.0*m)      \nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50427,"user_id":null,"body":"def solve(s)\n    return (1 - Math.sqrt(4 * s + 1)) \/ (2.0 * s) + 1;         \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50428,"user_id":null,"body":"def solve(m)\n  (2*m+1-Math.sqrt(4*m+1))\/(2*m)          \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50429,"user_id":null,"body":"def solve(y)\n    (1 + 2 * y - (1 + 4 * y) ** 0.5) \/ (2 * y)      \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50430,"user_id":null,"body":"def solve(m)\n    return (2 * m + 1 - Math.sqrt(4 * m + 1))\/(2 * m)       \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50431,"user_id":null,"body":"def solve(m)\n  1 + (1 - Math.sqrt(1 + 4 * m)) \/ 2 \/ m;\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5b2f6ad842b27ea689000082":[{"id":50432,"user_id":17,"body":"def is_smooth(n)\n  return \"power of 2\" if n < 0\n  largest_prime_factor = nil\n  (2..Math.sqrt(n)).each do |i|\n    while n % i == 0\n      n \/= i\n      largest_prime_factor = i\n    end\n  end\n  largest_prime_factor = n unless n == 1\n  ({\n    2 => \"power of 2\",\n    3 => \"3-smooth\",\n    5 => \"Hamming number\",\n    7 => \"humble number\"\n  })[largest_prime_factor]? || \"non-smooth\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50433,"user_id":1072,"body":"def is_smooth(n,p=0) n<2 || p>3 ? [\"power of 2\", \"3-smooth\", \"Hamming number\", \"humble number\", \"non-smooth\"][p] : n % [2,3,5,7,11][p] != 0 ? is_smooth(n,p+1) : is_smooth(n\/[2,3,5,7,11][p],p) end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50434,"user_id":1624,"body":"def smoothify(n, k)\n  while n % k == 0\n    n \/= k\n  end\n  n\nend\n\ndef is_smooth(n)\n  n = smoothify(n, 2)\n  return \"power of 2\" if n == 1\n  n = smoothify(n, 3)\n  return \"3-smooth\" if n == 1\n  n = smoothify(n, 5)\n  return \"Hamming number\" if n == 1\n  n = smoothify(n, 7)\n  return \"humble number\" if n == 1\n  \"non-smooth\"\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5b37a50642b27ebf2e000010":[{"id":50435,"user_id":50,"body":"def sum_of_a_beach(beach)\n  (beach.scan(\/(sand|sun|water|fish)\/i)||[]of String).size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50436,"user_id":1566,"body":"def sum_of_a_beach(beach)\n  beach.scan(\/sand|water|fish|sun\/i).size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50437,"user_id":645,"body":"def sum_of_a_beach(beach)\n  return beach.scan(\/sun|fish|water|sand\/i).size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5b39e3772ae7545f650000fc":[{"id":50438,"user_id":null,"body":"def remove_duplicate_words(s : String)\n  return s.split.uniq.join(' ')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50439,"user_id":1474,"body":"def remove_duplicate_words(s : String)\n  s\n    .split\n    .each_with_object([] of String) { |w, obj| obj << w unless obj.includes?(w) }\n    .join(' ')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50440,"user_id":527,"body":"def remove_duplicate_words(s : String) : String\n  s.split.uniq!.join(' ')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50441,"user_id":645,"body":"def remove_duplicate_words(s : String)\n  s.split.uniq.join \" \"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50442,"user_id":645,"body":"def remove_duplicate_words(s : String)\n  s.split.uniq.join \" \"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5b3e3ca99c9a75a62400016d":[{"id":50443,"user_id":null,"body":"def mid_endian(n)\nreturn \"%02X\" % n if n.in?(-127..127)\n  \nio = IO::Memory.new\nio.write_bytes(n, IO::ByteFormat::BigEndian)\ns = io.to_slice.skip_while(&.zero?).map{ |b| \"%02X\" % b }\ns.in_groups_of(4).flat_map do |c|\n  c.rotate!(-1)\n  c.swap(1,2)\n  c.compact\nend.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50444,"user_id":1072,"body":"def mid_endian(n) s=n.to_s(16).upcase; s=s.size%2==1 ? \"0\"+s : s; s.scan(\/.{2}\/).map{|e| e[0]}.each_with_index.reduce(\"\"){|a,b| b[1]%2==1 ? b[0]+a : a+b[0]} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5b40b666dfb4291ad9000049":[{"id":50445,"user_id":53,"body":"def dcos(n) Math.cos(n * Math::PI \/ 180) end\ndef dsin(n) Math.sin(n * Math::PI \/ 180) end\n\ndef solve(a, b, c, alpha, beta, gamma)\n  x = a * dcos(alpha) - b * dsin(beta) - c * dcos(gamma)\n  y = a * dsin(alpha) + b * dcos(beta) - c * dsin(gamma)\n  t = Math.atan2(y, x) * 180 \/ Math::PI\n  [ Math.hypot(x, y).round.to_i, t.to_i, (t * 60).to_i % 60, (t * 3600).to_i % 60 ]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50446,"user_id":492,"body":"def solve(a, b, c, alpha, beta, gamma)\n    alpha *= Math::PI \/ 180\n    beta *= Math::PI \/ 180\n    gamma *= Math::PI \/ 180\n    x = a * Math.cos(alpha) - b * Math.sin(beta) - c * Math.cos(gamma)\n    y = a * Math.sin(alpha) + b * Math.cos(beta) - c * Math.sin(gamma)\n    r = Math.sqrt(x * x + y * y)\n    theta = (Math.acos(x \/ r) * 180 * 3600 \/ Math::PI).to_i\n    d, m = theta.divmod(3600)\n    m, s = m.divmod(60)\n    return [r.round, d, m, s]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50447,"user_id":492,"body":"def solve(a, b, c, alpha, beta, gamma)\n    alpha *= Math::PI \/ 180\n    beta *= Math::PI \/ 180\n    gamma *= Math::PI \/ 180\n    x = a * Math.cos(alpha) - b * Math.sin(beta) - c * Math.cos(gamma)\n    y = a * Math.sin(alpha) + b * Math.cos(beta) - c * Math.sin(gamma)\n    r = Math.sqrt(x * x + y * y)\n    theta = (Math.acos(x \/ r) * 180 * 3600 \/ Math::PI).to_i\n    d, m = theta.divmod(3600)\n    m, s = m.divmod(60)\n    return [r.round, d, m, s]\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5b538734beb8654d6b00016d":[{"id":50448,"user_id":421,"body":"def queue(queuers,pos)\n  queuers[0...pos].sum{|x| [x, queuers[pos]].min} + queuers[pos] + queuers[pos + 1..-1].sum{|y| [queuers[pos] - 1, y].min}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50449,"user_id":1474,"body":"def queue(queuers, pos)\n  cnt = 0\n  while 1\n    tmp = queuers.shift\n    tmp -= 1\n    cnt += 1\n    if pos == 0\n      return cnt if tmp == 0\n      pos = queuers.size\n    else\n      pos -= 1\n    end\n    queuers << tmp unless tmp == 0\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50450,"user_id":50,"body":"def queue(q,i)\n  n=q[i]\n  q=q[i+1..-1]+q[0..i].map{|k| k-1}\n  m=i+1\n  c=1\n  while q[-1]>=c\n    m+=q.select{|x| x>=c}.size\n    c+=1\n  end\n  m\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50451,"user_id":null,"body":"def queue(q, pos, g = q[pos])\n  (0...q.size).map { |i| z = (pos >= i ? g : g - 1); q[i] > z ? z : q[i] }.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50452,"user_id":1624,"body":"def queue(queuers, pos)\n  queuers = queuers.dup\n  t = 0\n  while true\n    t += 1\n    queuers[0] -= 1\n    pos -= 1\n    if queuers[0] == 0\n      queuers.shift\n      return t if pos == -1\n    else\n      queuers.push queuers.shift\n      pos = queuers.size - 1 if pos == -1\n    end\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50453,"user_id":1072,"body":"def queue(q,p) i=-1; q.reduce(0){|a,b| i+=1; a+[q[p]-(i>p ? 1 : 0),b].min} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5b5e0ef007a26632c400002a":[{"id":50454,"user_id":421,"body":"def elements_sum(arr, d = 0)  \n  arr.map_with_index(1){|x, i| x[arr.size - i] rescue d}.sum\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50455,"user_id":1624,"body":"def elements_sum(arr, d=0)\n  arr.map_with_index{|ai,i| ai[arr.size - i - 1] rescue d }.sum\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50456,"user_id":1072,"body":"def elements_sum(arr,d=0) i=-1; arr.reduce(0){|a,b| i+=1; a+(b[arr.size-1-i]? || d)} end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5b817c2a0ce070ace8002be0":[{"id":50457,"user_id":645,"body":"def display_board(board, width)\n  board.each_slice(width).to_a.map do |x|\n    (y = x.map do |x| \" #{x} \" end.join(\"|\")) + \"\n#{\"-\" * y.size}\n\"\n  end.join.split(\"\n\")[0...-2].join(\"\n\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50458,"user_id":1072,"body":"def display_board(b,w) i=-1; b.map{|e| i+=1; (i>0 && i%w==0 ? \"\n#{\"-\"*(4*w-1)}\n\" : \"\") + \" #{e} \" + (i%w==(w-1) ? \"\" : \"|\")}.join end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5b853229cfde412a470000d0":[{"id":50459,"user_id":527,"body":"def twice_as_old(dad, son)\n  (2 * son - dad).abs\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50460,"user_id":76,"body":"def twice_as_old(dad, son)\n   (dad - 2 * son).abs\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50461,"user_id":1474,"body":"def twice_as_old(y1, y2)\n  cnt = 0\n  loop do\n    return cnt if y1 - cnt == (y2 - cnt) * 2 || y1 + cnt == (y2 + cnt) * 2\n    cnt += 1\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50462,"user_id":null,"body":"def twice_as_old(dad, son)\n  if son * 2 < dad\n    return dad - son * 2\n  else\n    return son * 2 - dad\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50463,"user_id":50,"body":"def twice_as_old(d, s)\n  (d-2*s).abs\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50464,"user_id":421,"body":"def twice_as_old(dad, son)\n    (dad - son * 2).abs\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5ba38ba180824a86850000f7":[{"id":50465,"user_id":527,"body":"def solve(arr)\n  arr.reverse.uniq!.reverse!\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50466,"user_id":645,"body":"def solve(arr)\n  arr.reverse.uniq.reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50467,"user_id":null,"body":"def solve(arr)\n  (arr.reverse | arr).reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50468,"user_id":1474,"body":"def solve(arr)\n   arr.each_with_index.each_with_object([] of Int32) { |(e, i), o| o << e if i == arr.rindex(e) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50469,"user_id":612,"body":"def solve(arr)\n  li=Array(Int32).new\n  i=0\n  while i < arr.size\n    if arr.count(arr[i]) > 1\n      arr.delete_at(i)\n      i = -1\n    end\n    i += 1\n  end\n  return arr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50470,"user_id":null,"body":"def solve(arr)\n  arr_size = arr.size - 1\n  idx = 0\n  \n  while idx != arr_size\n    if !arr.one? arr[idx]\n      arr.delete_at(idx)\n      arr_size -= 1\n      idx -= 1\n    end\n    idx += 1\n  end \n  \n  arr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5bb3e299484fcd5dbb002912":[{"id":50471,"user_id":53,"body":"def pyramid(n)\n  (Math.sqrt(8 * n + 1) - 1) \/\/ 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50472,"user_id":527,"body":"def pyramid(balls)\n  (Math.sqrt(8 * balls + 1) - 1) \/\/ 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50473,"user_id":421,"body":"def pyramid(balls)\n  (-1 + (1 + 4 * balls * 2) ** 0.5) \/\/ 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50474,"user_id":null,"body":"def pyramid(balls)\n  return (Math.sqrt(8 * balls + 1) - 1) \/\/ 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50475,"user_id":null,"body":"def pyramid(balls : Int32) : Int32\n  ((Math.sqrt(balls * 8 + 1) - 1) \/ 2).floor.to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5bb804397274c772b40000ca":[{"id":50476,"user_id":421,"body":"def stack_height_2d(layers)\n  layers.zero? ? 0 : (layers - 1) * Math.sqrt(3) \/ 2 + 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50477,"user_id":null,"body":"def stack_height_2d(n : Int) : Float\n  n.zero? ? 0.0 : ((n - 1) * Math.sqrt(3) \/ 2) + 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50478,"user_id":50,"body":"def stack_height_2d(l)\n  l != 0 ? 1+(l-1)*3**0.5\/ 2 : 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50479,"user_id":null,"body":"def stack_height_2d(layers)\n  layers.zero? ? 0 : layers - 0.1339745962155614*(layers - 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50480,"user_id":1624,"body":"def stack_height_2d(l)\n  return 0 if l == 0\n  1 + 0.8660254037844386 * (l-1)\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50481,"user_id":null,"body":"def stack_height_2d(layers)\n  layers < 2 ? layers : 1 + (layers - 1) * Math.sqrt(3) \/ 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50482,"user_id":645,"body":"def stack_height_2d(layers)\n  0 < layers ? 1 + (layers - 1) * Math.sqrt(3) \/ 2 : 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5bd776533a7e2720c40000e5":[{"id":50483,"user_id":1624,"body":"def pendulum(values)\n  values = values.sort\n  result = [] of Int32\n  until values.empty?\n    result.unshift values.shift\n    break if values.empty?\n    result.push values.shift\n  end\n  result\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50484,"user_id":645,"body":"def pendulum(values)\n  values.sort! do |a, b|\n    a <=> b\n  end\n  result = values.clone\n  count = values.size\n  j = count % 2 != 0 ? (count \/\/ 2) : (count - 1) \/\/ 2\n  k = 1\n  s = 1\n  (0...count).each do |i|\n    result[j] = values[i]\n    j += s * k\n    k += 1\n    s = -s\n  end\n  return result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50485,"user_id":209,"body":"def pendulum(values)\n  k = values.sort.reverse\n  i = 1\n  d = [k.pop]\n  while k.size > 0\n    i += 1\n    if i % 2 != 0\n      d.insert(0, k.pop)\n    else \n      d.push(k.pop)\n    end\n  end\n  d\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50486,"user_id":1474,"body":"def pendulum(values)\n  values\n    .sort\n    .each_with_index\n    .each_with_object([] of Int32) { |(e, i), obj| i.even? ? obj.unshift(e) : obj << e }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5be0f1786279697939000157":[{"id":50487,"user_id":222,"body":"def make_sequences(n)\n  dp=[1,1]\n  i=2\n  while i<=n\n    if (i%2==0)\n      dp << (dp[i-1]+dp[i\/\/2])\n    else\n      dp << dp[i-1]\n    end\n    i+=1\n  end\n  dp[n]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5cb05eee03c3ff002153d4ef":[{"id":50488,"user_id":1474,"body":"def get_section_id(scroll, sizes)\n  cnt = 0\n  sizes.index { |i| scroll < (cnt += i) } || -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50489,"user_id":645,"body":"def get_section_id(n, a)\n  a.index do |x| (n -= x) < 0 end || -1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5ce399e0047a45001c853c2b":[{"id":50490,"user_id":2371,"body":"def parts_sums(arr : Array(Int32|Int64))\n  result = [arr.sum]\n  arr.each { |item| result << result.last-item }\n  result\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50491,"user_id":null,"body":"def parts_sums(ls)\n  all = ls.sum\n  ary, acc = [all], 0\n    \n  ls.each { |i| acc += i ; ary << all - acc }\n  ary\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50492,"user_id":null,"body":"def parts_sums(ls)\n  sum = 0\n  ([0] + ls.reverse.map {|i| sum += i }).reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50493,"user_id":421,"body":"def parts_sums(ls)\n   a = ls.sum\n   lst = [a]\n   (0...ls.size).each do |i|\n     a -= ls[i]\n     lst << a\n   end\n   lst\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50494,"user_id":null,"body":"def parts_sums(ls)\n  object = SumOfParts.new ls\n  object.sum\nend\n\nclass SumOfParts  \n  \n  def initialize(@values : Array(Int32) | Array(Int64) )\n  end\n  \n  def sum : Array(Int32)\n    result = [0]\n    @values.reverse.reduce(0) do |acc, i| \n      acc = acc + i; \n      result << acc \n      acc\n    end\n    \n    result.reverse\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50495,"user_id":null,"body":"def parts_sums(ls)\n  s = ls.sum\n  result = [s]\n  ls.each do |x|\n    s -= x\n    result << s\n  end\n  result\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50496,"user_id":53,"body":"def parts_sums(ls)\n  ls = ls + [0]\n  sum = ls.reduce(0) { |acc, i| acc + i } \n  res = [] of Int64\n  i = 0\n  while i < ls.size\n    res << sum.to_i64\n    sum -= ls[i]\n    i = i + 1\n  end\n  return res\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50497,"user_id":null,"body":"def parts_sums(ls : Array(T)) forall T\n  sums = [T.zero]\n  ls.reverse_each { |x| sums.push(x + sums.last) }\n  sums.reverse\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50498,"user_id":null,"body":"def parts_sums(ls)\n  i = ls.size\n  while (i -= 1) > 0\n    ls[i - 1] += ls[i]\n  end\n\tls << 0 \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50499,"user_id":1624,"body":"def parts_sums(ls)\n  e = ls.sum\n  ls.map do |x|\n    e -= x\n    e + x  \n  end + [0]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5ce969ab07d4b7002dcaa7a1":[{"id":50500,"user_id":1624,"body":"def solve(s)\n  sz = s.size.tdiv(2)\n  sz.downto(1) do |i|\n    return i if s[0,i] == s[-i..-1]\n  end\n  0\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50501,"user_id":645,"body":"def solve(s)\n  longest = 0\n  s.each_char_with_index do |_, i|\n    sliced = s[0, i]\n    if s.ends_with?(sliced) && (s.rindex(sliced) || -1) > (i - 1)\n      longest = i\n    end\n  end\n  longest\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50502,"user_id":527,"body":"def solve(s)\n  s[\/\\A(.*).*\\1\\z\/, 1].size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50503,"user_id":1474,"body":"def solve(st)\n  ret = (st.size \/\/ 2).downto(1).find { |i| st.ends_with?(st[0...i]) }\n  ret ? ret.to_i : 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50504,"user_id":168,"body":"def solve(s)\n  (1..s.size \/ 2).to_a.reverse.find { |i| s[0...i] == s[-i..] } || 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50505,"user_id":421,"body":"def solve(s)\n  n = 0\n  (1..s.size \/ 2).each do |i|\n    if s[0...i] == s[-i..-1] && i > n\n      n = i\n    end\n  end\n  n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50506,"user_id":null,"body":"def solve(s : String)\n  return 0 if s.size < 2\n  prefix_size = 0\n  index_suffixe = (s.size \/ 2).to_i\n  list_suffixe = Array(String).new\n  (1..index_suffixe).each do |index|\n    list_suffixe << s[-index..-1]\n  end\n  list_suffixe\n\n  list_prefix = Array(String).new\n  (1..index_suffixe).each do |index|\n    list_prefix << s[0..index-1]\n  end\n  list_prefix\n\n  solution = index_suffixe - 1\n  while (solution >= 0)\n  break if list_suffixe[solution] == list_prefix[solution]\n  solution -= 1\n\tend\n\n\tsolution + 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50507,"user_id":527,"body":"def solve(s)\n  p = 0\n  (1...s.size).each_with_object([0]) do |i, ps|\n    if i == (s.size + 1) \/ 2\n      p = 0\n    end\n    while p != 0 && s[p] != s[i]\n      p = ps[p - 1]\n    end\n    if s[p] == s[i]\n      p += 1\n    end\n    ps << p\n  end\n  p\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5ce9c1000bab0b001134f5af":[{"id":50508,"user_id":null,"body":"def quarter_of(month)\n  ((month + 2) \/ 3).to_i\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50509,"user_id":421,"body":"def quarter_of(month)\n  (month \/ 3).ceil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50510,"user_id":null,"body":"def quarter_of(month)\n  return (month + 2) \/\/ 3\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50511,"user_id":50,"body":"def quarter_of(month)\n  (month.to_f\/3).ceil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50512,"user_id":null,"body":"def quarter_of(month)\n  (month - 1) \/\/ 3 + 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50513,"user_id":null,"body":"def quarter_of(month)\n  return [0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4][month]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50514,"user_id":527,"body":"def quarter_of(month)\n  (month + 2) \/\/ 3\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50515,"user_id":53,"body":"def quarter_of(month)\n  ((month - 1) \/ 3 + 1).to_i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5d076515e102162ac0dc514e":[{"id":50516,"user_id":421,"body":"def baby_shark_lyrics\n  [\"Baby\", \"Mommy\", \"Daddy\", \"Grandma\", \"Grandpa\"].map{|x| \"#{x} shark,#{\" doo\" * 6}\n\" * 3 + \"#{x} shark!\n\"}.join + \"Let's go hunt,#{\" doo\" * 6}\n\" * 3 + \"Let's go hunt!\nRun away,\u2026\"\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50517,"user_id":1474,"body":"def f(*s)\n  w=([\"doo\"]*6).join(' ')\n  t = s.join(' ')\n  [\"#{t}, #{w}\"]*3<<\"#{t}!\"\nend\n\ndef baby_shark_lyrics\n  %w[Baby Mommy Daddy Grandma Grandpa].each_with_object([] of String) do |s,o|\n    o.concat(f(s,\"shark\"))\n  end.tap{|o| o.concat(f(\"Let's go hunt\")) << \"Run away,\u2026\"}.join('\n')\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50518,"user_id":527,"body":"require \"base64\"\nrequire \"flate\"\n\nLYRICS = \"c0pMqlQozkgsytZRSMnPx4a5nKiuRpHLNz83l6AGmihS5HJJTEkhqIMmihS53IsS81JyEwnpoaEyqBsKiNNFG2WKXD6pJerFCun5ChmleSW4ddFQmSJXUGmeQmJ5YqXOo4ZlAA\"\n\ndef baby_shark_lyrics\n  Flate::Reader.open(IO::Memory.new(Base64.decode(LYRICS)), &.gets_to_end)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50519,"user_id":null,"body":"def baby_shark_lyrics\n  String.build do |s|\n    ([\"Baby\", \"Mommy\", \"Daddy\", \"Grandma\", \"Grandpa\"].map &.+(\" shark\") + [\"Let's go hunt\"]).each do |l|\n      3.times { s << \"#{l}, #{\"doo \" * 6}\"[0..-2] + \"\n\" }\n      s << \"#{l}!\n\"\n    end\n    s << \"Run away,\u2026\"\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50520,"user_id":645,"body":"def baby_shark_lyrics\na=[\"Baby shark\",\"Mommy shark\",\"Daddy shark\",\"Grandma shark\",\"Grandpa shark\",\"Let's go hunt\"]\nl=\"\"\na.each do|i|\n3.times do\nl+=i+\", doo doo doo doo doo doo\n\"\nend\nl+=i+\"!\n\"\nend\nl+=\"Run away,\u2026\"\nl\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5d23d89906f92a00267bb83d":[{"id":50521,"user_id":421,"body":"def get_order(input : String)\n  arr = \"Burger Fries Chicken Pizza Sandwich Onionrings Milkshake Coke\".split(\" \")\n  input.scan(\/burger|fries|chicken|pizza|sandwich|onionrings|milkshake|coke\/i).map(&.[0].capitalize).sort_by{|x| arr.index(x) || -1}.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50522,"user_id":1624,"body":"def get_order(input : String)\n  items = [\"burger\", \"fries\", \"chicken\", \"pizza\", \"sandwich\", \"onionrings\", \"milkshake\", \"coke\"]\n  items.flat_map do |item|\n    [item.capitalize] * input.downcase.scan(item).size\n  end.join(\" \")\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50523,"user_id":863,"body":"MENU = %w[Burger Fries Chicken Pizza Sandwich Onionrings Milkshake Coke]\ndef get_order(input : String)\n  items = MENU.flat_map do |m|\n    [m] * input.scan(\/#{m}\/i).size\n  end\n  (items - [\"\"]).join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50524,"user_id":null,"body":"def get_order(input : String)\n  items = \"Burger Fries Chicken Pizza Sandwich Onionrings Milkshake Coke\".split.map { |i| i.downcase }\n  result = [] of String\n  items.each { |i|\n    input.scan(\/#{i}\/).size.times do\n      result << i.capitalize\n    end\n  }\n  result.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50525,"user_id":645,"body":"def get_order(input : String)\n  menu = [\"Burger\", \"Fries\", \"Chicken\", \"Pizza\", \"Sandwich\", \"Onionrings\", \"Milkshake\", \"Coke\"]\n  input.scan(\/milkshake|pizza|chicken|fries|coke|burger|sandwich|onionrings\/i).map(&.[0].capitalize).sort_by do |x|\n    menu.index(x) || -1\n  end.join(\" \")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5d376cdc9bcee7001fcb84c0":[{"id":50526,"user_id":1640,"body":"def odd_ones_out(numbers)\n  numbers.reject { |x| numbers.count(x).odd? }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50527,"user_id":50,"body":"def odd_ones_out(a)\n  count=Hash(Int32, Int32).new(0)\n  a.each{|x| count[x]+=1}\n  a.select{|x| count[x].even?}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50528,"user_id":527,"body":"def odd_ones_out(numbers)\n  fs = numbers.tally\n  numbers.select{ |n| fs[n].even? }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50529,"user_id":1474,"body":"def odd_ones_out(numbers)\n  numbers.select { |i| numbers.count(i).even? }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50530,"user_id":1624,"body":"def odd_ones_out(numbers)\n  totals = Hash(Int32,Int32).new(0)\n  numbers.each{|x| totals[x] += 1}\n  numbers.select{|x| totals[x].even? }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50531,"user_id":null,"body":"def odd_ones_out(numbers)\n  hist = numbers.each_with_object({} of Int32 => Int32) do | e, h |\n    h[e] ||= 0\n    h[e] += 1\n  end\n  numbers.select { | n | hist[n].even? }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50532,"user_id":null,"body":"def odd_ones_out(numbers)\n  numbers.select {|x| numbers.count(x).even?}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50533,"user_id":null,"body":"def odd_ones_out(numbers)\n  new_array = Array(Int32).new\n  numbers.each { |n|  new_array << n if numbers.count(n).odd? }\n  numbers - new_array\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50534,"user_id":645,"body":"def odd_ones_out(numbers)\n  return numbers.select do |x|\n    numbers.count(x) % 2 == 0\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50535,"user_id":645,"body":"def odd_ones_out(numbers)\n  return numbers.select do |x|\n    numbers.count(x) % 2 == 0\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5d49c93d089c6e000ff8428c":[{"id":50536,"user_id":421,"body":"def save(sizes, hd)\n  if sizes.sum <= hd\n    return sizes.size\n  end\n  total = sizes[0]\n  count = 0  \n  while total <= hd\n    total += sizes[count + 1]\n    count += 1\n  end\n  count\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50537,"user_id":812,"body":"def save(sizes, hd)\n    total = 0\n    num = 0\n    sizes.each do |size|\n        if total < hd\n            total += size\n            if total > hd\n                return num end\n            num += 1\n        else return num end end\n    return num end","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50538,"user_id":50,"body":"def save(sizes, hd)\n  s=0\n  i=0\n  sizes.each do |n|\n    s+=n\n    if s>hd\n      break\n    else\n      i+=1\n    end\n  end\n  i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50539,"user_id":168,"body":"def save(sizes, hd)\n  i, s = 0, 0\n  while i < sizes.size\n    s += sizes[i]\n    break if s > hd\n    i += 1\n  end\n  i\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50540,"user_id":1474,"body":"def save(sizes, hd)\n  cnt = 0\n  ret = sizes.each_with_index.find do |(e, i)|\n    cnt += e\n    cnt > hd\n  end\n  ret ? ret[1] : sizes.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50541,"user_id":null,"body":"def save(sizes, hd)\n  r = c = 0\n  sizes.each do |s|\n    c += s\n    break if c > hd\n    r+=1\n  end\n  r\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50542,"user_id":645,"body":"def save(sizes, hd)\n  sizes.reduce([0, 0]) do |acc, item|\n    [acc[0] + ((acc[1] + item) <= hd ? 1 : 0), acc[1] + item]\n  end[0]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5d50e3914861a500121e1958":[{"id":50543,"user_id":50,"body":"def add_letters(letters)\n  o=0\n  letters.each{|c| o+=c.ord-96}\n  o=(o%26)+96\n  o==96 ? 'z' : o.chr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50544,"user_id":168,"body":"def add_letters(letters)\n  ((letters.sum { |c| c.ord - 96 } + 25) % 26 + 97).chr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50545,"user_id":null,"body":"def add_letters(letters)\n  ((letters.sum{|letter| letter.ord - 96} - 1) % 26 + 97).chr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50546,"user_id":1474,"body":"def add_letters(letters)\n  letters.empty? ? 'z' : ((letters.map { |c| c.ord - 96 }.sum - 1) % 26 + 97).chr\nend","lang_id":11,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50547,"user_id":1474,"body":"def add_letters(letters)\n  letters.empty? ? 'z' : ((letters.map { |c| c.bytes[0] - 96 }.sum - 1) % 26 + 97).chr\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50548,"user_id":1624,"body":"def add_letters(letters)\n  e = letters.map{|x| x.ord - 'a'.ord + 1}.sum % 26\n  if e == 0\n    'z'\n  else\n    'a' + (e-1)\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50549,"user_id":null,"body":"def add_letters(letters)\n  return 'z' if letters.empty?\n  'a' + ((letters.map { |letter| letter.ord - 96 }.sum - 1) % 26)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50550,"user_id":null,"body":"def add_letters(letters)\n  return 'z' if letters.empty?\n  Range.new('a', 'z').cycle.skip(letters.sum{ |char| char.ord.modulo(96) } - 1).next\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50551,"user_id":645,"body":"def add_letters(letters)\n  (['z'] + ('a'..'z').to_a)[letters.map(&.ord.-(96)).sum % 26]\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50552,"user_id":645,"body":"def add_letters(letters)\n  letters.size == 0 ? 'z' : (Array.new(letters.reduce(-1) do |acc, item|\n    acc + (item.ord - 96)\n  end) do 1 end.reduce('a') do |x| \n    x == 'z' ? 'a' : (x.ord + 1).chr\n  end)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5d68d05e7a60ba002b0053f6":[{"id":50553,"user_id":168,"body":"def bonus(arr : Array(Int64), s : Int64)\n  c = arr.sum { |x| 1.0 \/ x }\n  arr.map { |x| (s \/ (x * c)).round }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50554,"user_id":50,"body":"def bonus(a : Array(Int64), s : Int64)\n  rate=a.map{|n| 1.0\/n.to_f}.sum\n  a.map{|n| (s.to_f\/(rate*n)).round}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50555,"user_id":53,"body":"def bonus(arr : Array(Int64), s : Int64)\n  t = arr.max.to_f\n  x = s.to_f \/ arr.reduce(0) { |acc, e| acc + t \/ e }\n  arr.map { |e| (x * t \/ e).round }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50556,"user_id":492,"body":"def bonus(arr : Array(Int64), s : Int64)\n  t = arr.sum do |i| 1 \/ i.to_f end\n  arr.map do |i| (s \/ (t * i)).round.to_i64 end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50557,"user_id":645,"body":"def bonus(arr : Array(Int64), s : Int64)\n  x = arr.sum do |i| 1 \/ i.to_f end\n  arr.map do |i| (s \/ (x * i)).round.to_i64 end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50558,"user_id":645,"body":"def bonus(arr : Array(Int64), s : Int64)\n  x = arr.sum do |i| 1 \/ i.to_f end\n  arr.map do |i| (s \/ (x * i)).round.to_i64 end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5d6ee508aa004c0019723c1c":[{"id":50559,"user_id":645,"body":"def oddest(a)\n  if a.size == 0\n    nil\n  elsif a.size == 1\n    a[0]\n  elsif a.all?(&.==(-1))\n    nil\n  else\n    odds = a.select(&.odd?)\n    evens = a.select(&.even?)\n    if odds.size == 0\n      nil\n    elsif evens.size == 0\n      r = oddest(a.map(&.>>(1)))\n      r.nil? ? nil : r * 2 + 1\n    else\n      oddest(odds)\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5d9f95424a336600278a9632":[{"id":50560,"user_id":1474,"body":"def powers(n)\n  obj = [] of Int32\n  n\n    .to_s(2)\n    .reverse\n    .each_char\n    .with_index { |c, i| obj << 2 ** i if c == '1' }\n  obj\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50561,"user_id":1624,"body":"def powers(n)\n  result = [] of Int32\n  k = 1\n  while n != 0\n    if (n&k) != 0\n      n ^= k\n      result << k\n    end\n    k *= 2\n  end\n  result\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50562,"user_id":645,"body":"def powers(n)\n  n.to_s(2).chars.reverse.map_with_index do |x, i| 2 ** i * x.to_i end.select do |x| x != 0 end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5dae2599a8f7d90025d2f15f":[{"id":50563,"user_id":527,"body":"def consecutive_ducks(n : Int64) : Bool\n  n.popcount > 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50564,"user_id":168,"body":"def consecutive_ducks(n : Int64)\n  n.popcount != 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50565,"user_id":1228,"body":"def consecutive_ducks(n : Int64)\n  n & (n - 1) > 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50566,"user_id":53,"body":"def consecutive_ducks(n : Int64)\n  n % 2 != 0 ? n != 1 : consecutive_ducks(n >> 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50567,"user_id":421,"body":"def consecutive_ducks(n : Int64)\n  Math.log2(n) % 1 != 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50568,"user_id":null,"body":"def consecutive_ducks(n : Int64)\n  Math.log2(n) != Math.log2(n).floor\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50569,"user_id":1624,"body":"def check_sum(n, sz)\n  return false if sz > n\n  z = ((0 + sz - 1) * sz).tdiv(2)\n  n % sz == z % sz\nend\n\ndef consecutive_ducks(n : Int64)\n  max = (n ** 0.5).ceil\n  return (2..max).any?{|sz| check_sum(n, sz) }\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50570,"user_id":645,"body":"def consecutive_ducks(n : Int64)\n  (n & (n - 1)) != 0\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5e0b72d2d772160011133654":[{"id":50571,"user_id":421,"body":"def solve(a : Array(Int))\n  [a.sum \/ 2, a.sum - a.max].min\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50572,"user_id":50,"body":"def solve(arr : Array(Int))\n  a,b,c=arr\n  [a+b,a+c,b+c,(a+b+c)\/2].min\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50573,"user_id":53,"body":"def solve(xs : Array(Int))\n  xs = xs.sort\n  a = xs[0]\n  b = xs[1]\n  c = xs[2]\n  return Math.min(a + b, (a + b + c) \/ 2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50574,"user_id":492,"body":"def solve(arr : Array(Int))\n  [arr.sum \/ 2, arr.sum - arr.max].min\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50575,"user_id":863,"body":"def solve(a : Array(Int))\n  Math.min(a.sort.first(2).sum, a.sum \/ 2)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50576,"user_id":1624,"body":"def solve(a : Array(Int))\n  e = 0\n  while true\n    x, y, z = a.sort\n    return e+y if x == 0\n    return e+x+y if z >= x+y\n    d = y-x+1\n    e += d\n    a = [x, y-d, z-d]\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50577,"user_id":527,"body":"def solve(a : Array(Int))\n  x, y, z = a.sort\n  {x + y, (x + y + z) \/ 2}.min\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50578,"user_id":645,"body":"def solve(a : Array(Int))\n  [a.sort[0...2].sum, a.sum \/ 2].min\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5f0ed36164f2bc00283aed07":[{"id":50579,"user_id":null,"body":"def over_the_road(address, n)\n  (n * 2 + 1) - address\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50580,"user_id":421,"body":"def over_the_road(address, n)\n  n * 2 - address + 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50581,"user_id":null,"body":"def over_the_road(address, n)\n  return n * 2 - address + 1;\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50582,"user_id":50,"body":"def over_the_road(add, n)\n  1-add+2*n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50583,"user_id":null,"body":"def over_the_road(address, n)\n  2 * n - address + 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50584,"user_id":null,"body":"def over_the_road(address, n)\n  #your code here\n  return n * 2 + 1 - address\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50585,"user_id":209,"body":"def over_the_road(a, n)\n  a < 1 || n < 1 || n*2 < a ? -1 : 2*n - a + 1\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50586,"user_id":527,"body":"def over_the_road(address, n)\n  2 * n + 1 - address\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5f25f475420f1b002412bb1f":[{"id":50587,"user_id":682,"body":"def find_the_number_plate (n)\n  a,b = (n.to_i\/\/999).divmod(676)\n  c,d = b.divmod(26)\n  [d+97,c+97,a+97].map{|x| x.to_i.chr}.join+(n.to_i%999+1).to_s.rjust(3).gsub(\/ \/,\"0\")\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5f3afc40b24f090028233490":[{"id":50588,"user_id":421,"body":"def swapcase(s)\n  \/[a-z]\/ === s.to_s ? s.upcase : s.downcase\nend\n\ndef spec_swap(s, n)\n  ans = \"\"\n  st = n.to_s(2)  \n  j = 0\n  s.chars.each_with_index do |x, i|\n    if \/[a-z]\/i === x.to_s\n      ans += st[j] == '1' ? swapcase(x) : x\n      j = (j + 1) % st.size\n    else\n      ans += x\n    end    \n  end\n  ans\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50589,"user_id":null,"body":"def spec_swap(s, n)\n  iter = n.digits(2).map(&.== 1).reverse!.cycle\n  s.chars.map do |c|\n    c.ascii_letter? && iter.next ? (c.lowercase? ? c.upcase : c.downcase) : c\n  end.join\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5f70c883e10f9e0001c89673":[{"id":50590,"user_id":null,"body":"def flip(dir, boxes)\n  boxes.sort!{ |a, b| dir === \"R\" ? a <=> b : b <=> a }\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50591,"user_id":1474,"body":"def flip(dir, boxes)\n  ret = boxes.sort\n  dir == \"R\" ? ret : ret.reverse\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50592,"user_id":null,"body":"def flip(dir, boxes)\n  dir == 'L' ? boxes.sort().reverse() : boxes.sort()\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50593,"user_id":209,"body":"def flip(dir, boxes)\n  boxes.sort!\n  dir == 'L' ? boxes.reverse : boxes\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50594,"user_id":53,"body":"def flip(d, r)\n  r.sort { |a, b| d == \"R\" ? a <=> b : b <=> a }\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50595,"user_id":527,"body":"def flip(dir, boxes)\n  dir == \"R\" ? boxes.sort : boxes.sort{ |a, b| b <=> a }\nend","lang_id":11,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50596,"user_id":53,"body":"def flip(dir, boxes)\n  boxes.sort { |a, b| dir.to_s == \"R\" ? a <=> b : b <=> a }\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50597,"user_id":421,"body":"def flip(dir, boxes)\n  dir == \"R\" ? boxes.sort : boxes.sort.reverse\nend","lang_id":11,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5f70e4cce10f9e0001c8995a":[{"id":50598,"user_id":1474,"body":"def solution(stones)\n  stones.size - stones.squeeze.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50599,"user_id":53,"body":"def solution(s)\n  m = 0\n  i = 1\n  while i < s.size\n    if s[i] == s[i - 1]\n       m = m + 1\n    end\n    i = i + 1\n  end\n  m\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50600,"user_id":527,"body":"def solution(stones)\n  stones.each_char.cons_pair.count{ |x, y| x == y }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50601,"user_id":421,"body":"def solution(stones)\n  stones.chars.each_cons(2).select{|(x, y)| x == y}.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5f849ab530b05d00145b9495":[{"id":50602,"user_id":null,"body":"def flip(dir, box)\n  case dir\n  when 'L' then box.map { |row| row.sort.reverse }\n  when 'R' then box.map { |row| row.sort }\n  when 'U' then box.transpose.map { |row| row.sort.reverse }.transpose\n  when 'D' then box.transpose.map { |row| row.sort }.transpose\n  end\nend\n","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"5fde1ea66ba4060008ea5bd9":[{"id":50603,"user_id":527,"body":"def burner(c : Int32, h : Int32, o : Int32) : {Int32, Int32, Int32}\n  h2o = {h \/\/ 2, o}.min\n  h -= h2o * 2\n  o -= h2o\n  co2 = {c, o \/\/ 2}.min\n  c -= co2\n  o -= co2 * 2\n  ch4 = {c, h \/\/ 4}.min\n  {h2o, co2, ch4}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50604,"user_id":645,"body":"def burner(c : Int32, h : Int32, o : Int32) : Tuple(Int32, Int32, Int32)\n  h2o = [o, h \/\/ 2].min\n  co2 = [c, (o - h2o) \/\/ 2].min\n  ch4 = [c - co2, (h - h2o * 2) \/\/ 4].min\n  {h2o, co2, ch4}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50605,"user_id":1474,"body":"def burner(c : Int32, h : Int32, o : Int32) : Tuple(Int32, Int32, Int32)\n  wcnt, ccnt, mcnt = 0, 0, 0\n  loop do\n    if h > 1 && o > 0\n      wcnt += 1\n      h -= 2\n      o -= 1\n    elsif c > 0 && o > 1\n      ccnt += 1\n      c -= 1\n      o -= 2\n    elsif c > 0 && h > 3\n      mcnt += 1\n      c -= 1\n      h -= 4\n    else\n      return {wcnt, ccnt, mcnt}\n    end\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50606,"user_id":492,"body":"def burner(c : Int32, h : Int32, o : Int32) : Tuple(Int32, Int32, Int32)\n    water = Math.min(h \/\/ 2,  o)\n    co2 = Math.min((o - water) \/\/ 2, c)\n    methane = Math.min((h - water * 2) \/\/ 4, c - co2)\n    {water, co2, methane}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50607,"user_id":421,"body":"def burner(c : Int32, h : Int32, o : Int32) : Tuple(Int32, Int32, Int32)\n  water = [h \/\/ 2, o].min\n  carbon = [(o - water) \/\/ 2, c].min\n  methane = [(h - water * 2) \/\/ 4, c - carbon].min\n  {water, carbon, methane}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50608,"user_id":1624,"body":"def burner(c : Int32, h : Int32, o : Int32) : Tuple(Int32, Int32, Int32)\n  h2o = [h\/\/2,o].min\n  h -= 2*h2o\n  o -= h2o\n  co2 = [c,o\/\/2].min\n  c -= co2\n  o -= 2*co2\n  ch4 = [c,h\/\/4].min\n  {h2o, co2, ch4}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50609,"user_id":null,"body":"def burner(c : Int32, h : Int32, o : Int32) : Tuple(Int32, Int32, Int32)\n  water, co2, methane = 0, 0, 0\n  while h > 1 && o > 0\n    water += 1\n    h -= 2\n    o -= 1\n  end\n  while c > 0 && o > 1\n    co2 += 1\n    c -= 1\n    o -= 2\n  end\n  while c > 0 && h > 3\n    methane  += 1\n    c -= 1\n    h -= 4\n  end\n  {water, co2, methane}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50610,"user_id":53,"body":"def burner(c : Int32, h : Int32, o : Int32) : Tuple(Int32, Int32, Int32)\n    h2o = 0\n    co2 = 0\n    ch4 = 0\n    while h >= 2 && o > 0\n        h -= 2\n        o -= 1\n        h2o += 1\n    end\n    while o >= 2 && c > 0\n        o -= 2\n        c -= 1 \n        co2 += 1\n    end\n    while h >= 4 && c > 0\n        h -= 4\n        c -= 1 \n        ch4 += 1\n    end\n    {h2o, co2, ch4}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50611,"user_id":null,"body":"def burner(c : Int32, h : Int32, o : Int32) : Tuple(Int32, Int32, Int32)\n  water = 0\n  co2 = 0\n  methane = 0\n\n\n  # Agua\n  while (h >= 2) && (o > 0)\n    water += 1\n    o -= 1\n    h -= 2\n  end \n\n  # CO2\n  while (c > 0) && (o >= 2)\n    co2 += 1\n    c -= 1\n    o -= 2\n  end\n\n  # Metano \n  while (c > 0) && (h >= 4)\n    methane += 1\n    c -= 1\n    h -= 4\n  end \n\n  \n  {water, co2, methane}\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"604287495a72ae00131685c7":[{"id":50612,"user_id":1474,"body":"def doubleton(num)\n  loop do\n    num += 1\n    return num if num.digits.uniq.size == 2\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50613,"user_id":null,"body":"def doubleton(num)\n  num += 1\n  until num.digits.uniq.size == 2\n    num += 1\n  end\n  num\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50614,"user_id":53,"body":"def doubleton(num)\n  while true\n    return num if (num += 1).to_s.chars.uniq.size == 2\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50615,"user_id":null,"body":"def doubleton(num)\n  while (num+=1).to_s.chars.to_set.size!=2; end\n  num\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50616,"user_id":527,"body":"def doubleton(num)\n  num.succ.step.find{ |i| i.to_s.chars.to_set.size == 2 }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50617,"user_id":48,"body":"def doubleton(n)\n  while (n=n+1).to_s.split(\"\").to_set.size != 2 ; end\n  n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50618,"user_id":209,"body":"def doubleton(n : Int32)\n  (n+1..1000000).each do |i|\n      return i if (i.to_s.split(\"\").uniq).size == 2\n  end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50619,"user_id":421,"body":"def doubleton(num)\n  num +=1\n  while num.to_s.chars.uniq.size != 2\n    num += 1\n  end\n  num\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"60490a215465720017ab58fa":[{"id":50620,"user_id":527,"body":"def gangs(divisors, k)\n  (1..k).map{ |i| divisors.select{ |d| i.divisible_by?(d) } }.to_set.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50621,"user_id":421,"body":"def gangs(divisors, k)\n  (1..k).map{|x| divisors.select{|y| x % y == 0}}.uniq.size\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"605ae9e1d2be8a0023b494ed":[{"id":50622,"user_id":1474,"body":"def count_salutes(hallway)\n  hallway.each_char.with_index.reduce(0){|s, (c, i)| s + (c == '>' ? 2 * hallway[i..-1].count('<') : 0) }\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50623,"user_id":527,"body":"def count_salutes(hallway)\n  hallway.each_char.reduce({0, 0}){ |(t, r), c|\n    case c\n      when '>' then {t, r + 1}\n      when '<' then {t + r, r}\n      when '-' then {t, r}\n      else raise ArgumentError.new(\"Unknown character\")\n    end\n  }[0] * 2\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50624,"user_id":53,"body":"def count_salutes(hallway)\n  s = 0\n  r = 0\n  (0...hallway.size).each do |i|\n    if hallway[i] == '>'\n      r += 1\n    elsif hallway[i] == '<'\n      s += 2 * r\n    end\n  end\n  s\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50625,"user_id":421,"body":"def count_salutes(hallway)\n  c = 0\n  (0...hallway.size).each do |i|\n    if hallway[i] == '>'\n      c += hallway[i + 1..-1].count('<') * 2\n    end\n  end\n  c\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"606efc6a9409580033837dfb":[{"id":50626,"user_id":null,"body":"def plant(seed, water, fert, temp)\n  20 <= temp && temp <= 30 ? (\"-\" * water + \"#{seed}\" * fert) * water : (\"-\" * water ) * water + seed  \nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50627,"user_id":527,"body":"def plant(seed, water, fert, temp)\n  plant = (\"-\" * water + \"@\" * fert) * water\n  temp.in?(20..30) ? plant.gsub('@', seed) : plant.delete('@') + seed\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50628,"user_id":53,"body":"def plant(seed, water, fert, temp)\n    stem = \"-\"\n    if 20 <= temp && temp <= 30\n        (stem * water + seed.to_s * fert) * water\n    else\n        (stem * water) * water + seed\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50629,"user_id":421,"body":"def plant(seed, water, fert, temp)\n  20 <= temp <= 30 ? (\"-\" * water + seed.to_s * fert) * water : \"-\" * water * water + seed\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50630,"user_id":53,"body":"def plant(seed, water, fert, temp)\n    stem = \"-\"\n    if 20 <= temp && temp <= 30\n        (stem * water + seed * fert) * water\n    else\n        (stem * water) * water + seed\n    end\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"61123a6f2446320021db987d":[{"id":50631,"user_id":527,"body":"def prev_mult_of_three(n : Int32) : Int32?\n  until (n % 3).zero?\n    n \/\/= 10\n  end\n  n.zero? ? nil : n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50632,"user_id":53,"body":"def prev_mult_of_three(n : Int) : Int32 | Nil\n  return nil if n < 3\n  return n if n % 3 == 0\n  prev_mult_of_three((n \/ 10).to_i)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50633,"user_id":421,"body":"def prev_mult_of_three(n : Int) : Int32 | Nil\n  while n % 3 > 0\n    n = n \/\/ 10\n  end\n  n.zero? ? nil : n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50634,"user_id":1474,"body":"def prev_mult_of_three(n : Int) : Int32 | Nil\n  return if n < 3\n  n % 3 == 0 ? n : prev_mult_of_three(n \/\/ 10)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50635,"user_id":null,"body":"def prev_mult_of_three(n : Int) : Int32 | Nil\n  while n % 3 > 0\n    n \/\/= 10\n  end\n  n == 0 ? nil : n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50636,"user_id":168,"body":"def prev_mult_of_three(n : Int) : Int32 | Nil\n  while n % 3 != 0\n    n \/\/= 10\n  end\n  n == 0 ? nil : n\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50637,"user_id":191,"body":"def prev_mult_of_three(n : Int) : Int32 | Nil\n  if n == 0\n    return nil\n  end\n  if n % 3 == 0\n    return n\n  end\n  return prev_mult_of_three(n \/\/ 10)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50638,"user_id":null,"body":"def prev_mult_of_three(n : Int) : Int32 | Nil\n  return nil if n < 3\n  return n if n % 3 == 0\n  prev_mult_of_three(n \/\/ 10)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50639,"user_id":null,"body":"def prev_mult_of_three(n : Int) : Int32 | Nil\n  if(n == 0)\n    return \n  end\n  if(n % 3 == 0)\n    return n\n  end\n  return prev_mult_of_three(n \/\/ 10)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50640,"user_id":null,"body":"def prev_mult_of_three(n : Int) : Int32 | Nil\n  until n % 3 == 0\n    n = (n \/ 10).to_i\n  end\n  return n != 0 ? n : nil\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}],"6129095b201d6b000e5a33f0":[{"id":50641,"user_id":null,"body":"def f(x, y, z)\n  3_u64*x*y*z + 2_u64*(x*y + y*z + x*z) + x + y + z\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50642,"user_id":53,"body":"def f(x, y, z)\n  (x * (y + 1) + y * (x + 1)) * (z + 1) + z * (x + 1) * (y + 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50643,"user_id":527,"body":"def f(x, y, z)\n  x * (y + 1) * (z + 1) + y * (z + 1) * (x + 1) + z * (x + 1) * (y + 1)\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"},{"id":50644,"user_id":421,"body":"def f(x : UInt64, y : UInt64, z : UInt64)\n  x * (y + 1) * (z + 1) + (x + 1) * y * (z + 1) + (x + 1) * (y + 1) * z\nend","lang_id":11,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:36","updated_at":"2022-12-25 20:02:36"}]}